Search.setIndex({"alltitles": {"(Generalized) linear models": [[217, "generalized-linear-models"]], "1-way partial dependence with different models": [[191, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[104, "newsgroups-dataset"]], "2D interaction plots": [[191, "d-interaction-plots"]], "3D representation": [[191, "d-representation"]], "A constant prediction baseline": [[217, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[93, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[82, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[98, null]], "A more flexible plotting API": [[328, "a-more-flexible-plotting-api"]], "A note on shuffling": [[419, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[389, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[382, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[1005, "aic-and-bic-criteria"]], "API Interface": [[406, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1047, "api-changes"]], "API changes summary": [[1040, "api-changes-summary"], [1040, "id4"], [1040, "id7"], [1040, "id10"], [1041, "api-changes-summary"], [1042, "api-changes-summary"], [1043, "api-changes-summary"], [1044, "api-changes-summary"], [1045, "api-changes-summary"], [1046, "api-changes-summary"], [1046, "id6"], [1047, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[385, "apis-of-scikit-learn-objects"]], "ARDRegression": [[652, null]], "ARFF parser": [[377, "arff-parser"]], "AWeber": [[1033, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[180, null]], "Ablation study": [[254, "ablation-study"]], "About the project": [[395, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[416, "access-pipeline-steps"]], "Access to nested parameters": [[416, "access-to-nested-parameters"]], "Accuracy of the Model": [[192, "accuracy-of-the-model"]], "Accuracy score": [[1009, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[361, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[422, "adaboost"]], "AdaBoostClassifier": [[561, null]], "AdaBoostRegressor": [[562, null]], "Add support for monotonic constraints in tree-based models": [[332, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[415, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[1001, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[646, null]], "Addressing the problem with a business metric": [[269, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[255, null]], "Advantages:": [[415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null]], "Affinity Propagation": [[415, "affinity-propagation"]], "AffinityPropagation": [[447, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[448, null]], "Aggressive elimination of candidates": [[998, "aggressive-elimination-of-candidates"]], "Algorithms": [[1013, "algorithms"]], "Alpine Linux": [[401, "alpine-linux"]], "Alternatives to brute force parameter search": [[998, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[254, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[135, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[94, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[401, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[137, "analysis"]], "Analysis of a bag-of-words document classifier": [[357, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[150, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[191, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[998, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[423, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[296, null]], "Arch Linux": [[401, "arch-linux"]], "Architectural / general goals": [[1029, "architectural-general-goals"]], "Array API support (experimental)": [[411, null]], "Artwork": [[0, "artwork"]], "Attributes": [[397, "attributes"]], "Authors": [[1040, "authors"], [1040, "id20"]], "Automated Contributions Policy": [[383, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[202, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[1005, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[396, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1037, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1036, null]], "BIRCH": [[415, "birch"]], "BNP Paribas Cardif": [[1033, "id29"]], "Bagging meta-estimator": [[422, "bagging-meta-estimator"]], "BaggingClassifier": [[563, null]], "BaggingRegressor": [[564, null]], "Balance model complexity and cross-validated score": [[274, null]], "Balanced accuracy score": [[1009, "balanced-accuracy-score"]], "Ball Tree": [[1012, "ball-tree"]], "BallTree": [[852, null]], "BaseEstimator": [[429, null]], "BaseEstimator and mixins:": [[385, null]], "Basic kernels": [[425, "basic-kernels"]], "Basic shrinkage": [[417, "basic-shrinkage"]], "Bayesian Regression": [[1005, "bayesian-regression"]], "Bayesian Ridge Regression": [[1005, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[197, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[805, null]], "BayesianRidge": [[653, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[357, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1011, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1014, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[847, null]], "BernoulliRBM": [[868, null]], "Bestofmedia Group": [[1033, "id13"]], "BiclusterMixin": [[430, null]], "Biclustering": [[56, null], [187, "biclustering"], [379, "biclustering"], [412, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[412, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[191, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[875, null]], "Binary Case": [[1005, "binary-case"]], "Binary case": [[1009, "binary-case"]], "Binary classification": [[1009, "binary-classification"]], "Birch": [[449, null]], "Birchbox": [[1033, "id12"]], "Bisecting K-Means": [[415, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[450, null]], "BisectingKMeans: divide and cluster": [[329, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[124, null]], "Boil down your script to something as small as possible": [[388, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[163, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1033, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[380, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1009, "brier-score-loss"]], "Brute Force": [[1012, "brute-force"]], "Bug Tracker": [[1032, "bug-tracker"]], "Bug fixes": [[1043, "bug-fixes"], [1043, "id1"], [1043, "id3"], [1044, "bug-fixes"], [1044, "id3"], [1045, "bug-fixes"], [1045, "id3"], [1046, "bug-fixes"], [1046, "id5"], [1047, "bug-fixes"], [1047, "id4"]], "Bug triaging and issue curation": [[382, null]], "Build a pipeline": [[416, "build-a-pipeline"]], "Build dependencies": [[381, "build-dependencies"]], "Build the dataset": [[179, "build-the-dataset"]], "Building a specific version from a tag": [[381, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[391, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[381, "building-from-source"]], "Building the documentation": [[383, "building-the-documentation"]], "Bulk versus Atomic mode": [[370, "bulk-versus-atomic-mode"]], "Bunch": [[927, null]], "CCA": [[489, null]], "CCA (PLS mode B with symmetric deflation)": [[117, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[366, "cv-splitters"], [366, "id3"]], "Caching nearest neighbors": [[298, null]], "Caching transformers within a Pipeline": [[106, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[416, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[444, null]], "Calibrating a classifier": [[413, "calibrating-a-classifier"]], "Calibration": [[60, null], [187, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [413, "calibration-curves"]], "Calibration of the confidence interval": [[150, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[445, null]], "California Housing dataset": [[378, "california-housing-dataset"]], "Calinski-Harabasz Index": [[415, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[117, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[418, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[254, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[147, null]], "Categorical Features Support": [[422, "categorical-features-support"]], "Categorical Naive Bayes": [[1011, "categorical-naive-bayes"]], "CategoricalNB": [[848, null]], "Centering kernel matrices": [[1019, "centering-kernel-matrices"]], "Chain of binary classifiers": [[295, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[383, "change-the-default-value-of-a-parameter"]], "Change.org": [[1033, "id14"]], "Changed displays": [[1056, "changed-displays"]], "Changed models": [[1047, "changed-models"], [1048, "changed-models"], [1048, "id9"], [1048, "id22"], [1049, "changed-models"], [1049, "id6"], [1050, "changed-models"], [1051, "changed-models"], [1051, "id3"], [1052, "changed-models"], [1053, "changed-models"], [1054, "changed-models"], [1054, "id6"], [1055, "changed-models"], [1055, "id7"], [1056, "changed-models"], [1056, "id4"], [1057, "changed-models"], [1057, "id1"], [1058, "changed-models"]], "Changelog": [[1040, "changelog"], [1040, "id1"], [1040, "id3"], [1040, "id6"], [1040, "id9"], [1040, "id12"], [1040, "id14"], [1040, "id16"], [1040, "id18"], [1040, "id19"], [1041, "changelog"], [1041, "id2"], [1042, "changelog"], [1043, "changelog"], [1044, "changelog"], [1044, "id2"], [1045, "changelog"], [1045, "id2"], [1046, "changelog"], [1046, "id1"], [1046, "id3"], [1047, "changelog"], [1047, "id2"], [1048, "changelog"], [1048, "id1"], [1048, "id5"], [1048, "id10"], [1048, "id23"], [1049, "changelog"], [1049, "id1"], [1049, "id2"], [1049, "id7"], [1050, "changelog"], [1050, "id1"], [1050, "id4"], [1051, "changelog"], [1051, "id1"], [1051, "id4"], [1052, "changelog"], [1052, "id1"], [1052, "id4"], [1053, "changelog"], [1053, "id6"], [1054, "changelog"], [1054, "id1"], [1054, "id7"], [1055, "changelog"], [1055, "id1"], [1055, "id9"], [1056, "changelog"], [1056, "id1"], [1056, "id6"], [1057, "changelog"], [1057, "id3"], [1058, "changelog"], [1058, "id2"], [1058, "id6"], [1059, "changelog"]], "Changes impacting all modules": [[1055, "changes-impacting-all-modules"], [1055, "id8"], [1056, "changes-impacting-all-modules"], [1056, "id5"], [1057, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1057, "changes-impacting-many-modules"], [1058, "changes-impacting-many-modules"], [1058, "id1"], [1058, "id5"], [1059, "changes-impacting-many-modules"]], "Changes to estimator checks": [[1048, "changes-to-estimator-checks"], [1049, "changes-to-estimator-checks"], [1050, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[391, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[325, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[190, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1007, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[420, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[403, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[397, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[278, null]], "Class likelihood ratios": [[1009, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[431, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [182, "classification"], [187, "classification"], [1005, "classification"], [1012, "id4"], [1013, "classification"], [1023, "classification"], [1024, "classification"], [1025, "classification"]], "Classification and ROC analysis": [[285, "classification-and-roc-analysis"]], "Classification criteria": [[1025, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [1009, "classification-metrics"]], "Classification of text documents using sparse features": [[357, null]], "Classification pipeline": [[104, "classification-pipeline"]], "Classification report": [[1009, "classification-report"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[843, null], [1010, "classifierchain"]], "ClassifierMixin": [[432, null]], "ClassifierTags": [[928, null]], "Clear definition of the public API": [[1050, "clear-definition-of-the-public-api"]], "Cloning": [[385, "cloning"]], "Closing issues: a tough call": [[382, null]], "Cluster centers - MiniBatchKMeans": [[123, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[433, null]], "Clustering": [[71, null], [187, "clustering"], [415, null]], "Clustering evaluation summary": [[358, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[420, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [1009, "clustering-metrics"]], "Clustering performance evaluation": [[415, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[358, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[358, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1044, "code-contributors"], [1045, "code-contributors"], [1046, "code-contributors"], [1046, "id7"]], "Code Review Guidelines": [[383, "code-review-guidelines"]], "Code and Documentation Contributors": [[1047, "code-and-documentation-contributors"], [1047, "id10"], [1048, "code-and-documentation-contributors"], [1048, "id8"], [1048, "id21"], [1048, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[385, "coding-guidelines"]], "Cohen\u2019s kappa": [[1009, "cohen-s-kappa"]], "Color Quantization using K-Means": [[83, null]], "Column Transformer with Heterogeneous Data Sources": [[104, null]], "Column Transformer with Mixed Types": [[105, null]], "ColumnTransformer": [[471, null]], "ColumnTransformer for heterogeneous data": [[416, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[333, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[158, null]], "Combining the display objects into a single plot": [[245, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[383, "commit-message-markers"]], "Common Vectorizer usage": [[423, "common-vectorizer-usage"]], "Common cases: predefined values": [[1009, "common-cases-predefined-values"]], "Common estimator checks": [[411, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[366, null]], "Common pitfalls and subtleties": [[366, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[190, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[246, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare Stochastic learning strategies for MLPClassifier": [[312, null]], "Compare cross decomposition methods": [[117, null]], "Compare different approaches to setting the regularization parameter": [[111, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[316, null]], "Compare times of SVR and Kernel Ridge Regression": [[250, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[168, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[197, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[304, null]], "Comparing QuantileRegressor and LinearRegression": [[219, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[143, null]], "Comparing Target Encoder with Other Encoders": [[322, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[244, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[97, null]], "Comparing random forests and the multi-output meta estimator": [[157, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[283, null]], "Comparing the results": [[195, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[203, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[203, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[275, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[275, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[224, null]], "Comparison between grid search and successive halving": [[286, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[167, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[131, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[237, null]], "Comparison of kernel ridge and Gaussian process regression": [[174, null]], "Comparison of kernel ridge regression and SVR": [[250, null]], "Comparison of results": [[113, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[99, null]], "Comparison with special purpose text vectorizers": [[359, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[1005, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1011, "complement-naive-bayes"]], "ComplementNB": [[849, null]], "Complexity": [[1012, "complexity"], [1013, "complexity"], [1023, "complexity"], [1024, "complexity"], [1025, "complexity"]], "Complexity analysis": [[277, "complexity-analysis"]], "Composite estimators and parameter spaces": [[998, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[620, null]], "Compression via vector quantization": [[88, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1016, "computation-methods"]], "Computation times": [[1030, null]], "Computational Performance": [[370, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[84, "compute-dbscan"]], "Compute clustering": [[82, "compute-clustering"], [102, "compute-clustering"], [102, "id1"]], "Compute clustering with KMeans": [[99, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[98, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[99, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[222, "compute-paths"]], "Compute regularization path": [[210, "compute-regularization-path"]], "Compute score and computation times": [[143, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[111, "compute-the-likelihood-on-test-data"]], "Compute train and test errors": [[288, "compute-train-and-test-errors"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[419, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[369, null]], "Concatenating multiple feature extraction methods": [[108, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[260, null]], "Concluding remarks": [[43, "concluding-remarks"], [241, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [206, "conclusion"], [293, "conclusion"], [299, "conclusion"], [323, "conclusion"], [350, "conclusion"]], "Conclusions": [[202, "conclusions"]], "Configuration switches": [[371, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[370, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[268, null], [1009, "confusion-matrix"]], "ConfusionMatrixDisplay": [[705, null]], "Connectivity graph of an image": [[423, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[269, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[621, null]], "Construct the kernel-based regression models": [[250, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[251, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[251, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[415, "contingency-matrix"]], "Continuous Integration (CI)": [[383, "continuous-integration-ci"]], "Contributing": [[383, null], [395, "contributing"]], "Contributing code": [[383, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[398, "contributors"]], "Controlling randomness": [[366, "controlling-randomness"]], "Controlling the tree size": [[422, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[137, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[579, null]], "Core Contributors": [[398, "core-contributors"]], "Cosine similarity": [[1007, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[269, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[269, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[596, null]], "Covariance estimation": [[110, null], [187, "covariance-estimation"], [417, null]], "Coverage error": [[1009, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[388, null]], "Create ConfusionMatrixDisplay": [[245, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[245, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[245, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[323, "create-synthetic-dataset"]], "Create multi-label data, fit, and predict": [[282, "create-multi-label-data-fit-and-predict"]], "Create the data": [[130, "create-the-data"]], "Create the pipeline": [[349, "create-the-pipeline"]], "Creating a dataset": [[350, "creating-a-dataset"]], "Creating a non-noisy data set": [[221, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[137, "creating-the-dataset"]], "Creating transformers": [[104, "creating-transformers"]], "Cross decomposition": [[116, null], [187, "cross-decomposition"], [418, null]], "Cross validation and model selection": [[419, "cross-validation-and-model-selection"]], "Cross validation iterators": [[419, "cross-validation-iterators"]], "Cross validation of time series data": [[419, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[419, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[419, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[419, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[278, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[163, null]], "Cross-validation: evaluating estimator performance": [[419, null]], "Curve Fitting with Bayesian Ridge Regression": [[198, null]], "Custom Kernels": [[1024, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[333, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[273, null]], "Custom transformers": [[1019, "custom-transformers"]], "Customizing the vectorizer classes": [[423, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[384, null]], "DBSCAN": [[415, "dbscan"], [451, null]], "DO NOT report your data unless it is extremely necessary": [[388, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[192, "data-loading-and-feature-engineering"]], "Data Preparation": [[148, "data-preparation"]], "Data Publica": [[1033, "id21"]], "Data and sample properties": [[397, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [84, "data-generation"], [92, "data-generation"], [154, "data-generation"], [171, "data-generation"], [180, "data-generation"], [265, "data-generation"], [335, "data-generation"], [353, "data-generation"]], "Data generation and model fitting": [[144, "data-generation-and-model-fitting"]], "Data leakage": [[366, "data-leakage"]], "Data leakage during pre-processing": [[366, "data-leakage-during-pre-processing"]], "Data loading": [[276, "data-loading"]], "Data preprocessing": [[151, "data-preprocessing"]], "DataConversionWarning": [[580, null]], "DataDimensionalityWarning": [[581, null]], "DataFrame Support": [[1057, "dataframe-support"]], "DataRobot": [[1033, "id18"]], "Dataiku": [[1033, "id25"]], "Dataset": [[62, "dataset"], [206, "dataset"], [281, "dataset"]], "Dataset Versions": [[377, "dataset-versions"]], "Dataset and Gaussian process generation": [[183, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[282, "dataset-and-model"]], "Dataset based latent variables model": [[117, "dataset-based-latent-variables-model"]], "Dataset examples": [[119, null], [187, "dataset-examples"]], "Dataset generation": [[181, "dataset-generation"], [219, "dataset-generation"]], "Dataset loading utilities": [[376, null], [388, "dataset-loading-utilities"]], "Dataset preparation": [[123, "dataset-preparation"], [237, "dataset-preparation"]], "Dataset preprocessing and model training": [[254, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[375, null]], "Datasets in svmlight / libsvm format": [[377, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[415, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[401, "debian-ubuntu"]], "Debugging CI issues": [[391, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[391, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[398, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[249, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[363, null]], "Decision Tree Regression with AdaBoost": [[138, null]], "Decision Trees": [[187, "decision-trees"], [360, null], [1025, null]], "Decision boundary": [[299, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[340, null]], "Decision path": [[365, "decision-path"]], "DecisionBoundaryDisplay": [[639, null]], "DecisionTreeClassifier": [[920, null]], "DecisionTreeRegressor": [[921, null]], "Decoding text files": [[423, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[420, null]], "Decomposition": [[122, null], [123, "decomposition"], [187, "decomposition"]], "Decomposition: Dictionary learning": [[123, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[270, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[237, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[93, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[273, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[359, "define-preprocessing-functions"]], "Define structure of the data": [[82, "define-structure-of-the-data"]], "Define the classifiers": [[272, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1009, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[84, null]], "Demo of HDBSCAN clustering algorithm": [[90, null]], "Demo of OPTICS clustering algorithm": [[100, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[319, null]], "Demonstration of k-means assumptions": [[92, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[279, null]], "Density Estimation": [[421, null]], "Density Estimation for a Gaussian mixture": [[264, null]], "Density Estimation: Histograms": [[421, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1024, "density-estimation-novelty-detection"]], "DensityMixin": [[434, null]], "Dependencies": [[381, "dependencies"]], "Deprecation": [[383, "deprecation"]], "Deprecation / Default Value Change": [[251, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1050, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[189, "description-of-the-simulated-data"]], "Design the proper kernel": [[179, "design-the-proper-kernel"]], "DetCurveDisplay": [[706, null]], "Detection error tradeoff (DET)": [[1009, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[272, null]], "Developer API for HTML representation": [[385, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[385, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[385, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[391, null]], "Developer\u2019s Guide": [[386, null]], "Developing Estimators": [[134, null], [187, "developing-estimators"]], "Developing scikit-learn estimators": [[385, null]], "Developing with the Plotting API": [[390, null]], "Diabetes dataset": [[380, "diabetes-dataset"]], "DictVectorizer": [[359, "dictvectorizer"], [589, null]], "Dictionary Learning": [[420, "dictionary-learning"]], "Dictionary learning": [[123, "dictionary-learning"]], "Dictionary learning - positive code": [[123, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[123, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[123, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[539, null]], "Differences between solvers": [[1005, "differences-between-solvers"]], "Different label assignment strategies": [[415, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[415, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[385, "different-objects"]], "Different scenario and useful concepts": [[1005, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[406, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[164, null]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[305, null]], "Dimensionality reduction": [[1012, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[1003, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1019, "discretization"]], "Dispatching": [[393, null]], "Display Objects": [[1037, "display-objects"]], "Display code coverage in pull requests": [[391, "display-code-coverage-in-pull-requests"]], "Display results": [[222, "display-results"]], "Display the distorted image": [[126, "display-the-distorted-image"]], "Displaying Pipelines": [[256, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[256, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[256, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[256, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[256, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[256, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[246, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[707, null]], "Do you plan to implement transform for target y in a pipeline?": [[395, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[395, "do-you-support-pypy"]], "Documentation": [[383, "documentation"], [1040, "documentation"]], "Documentation Resources": [[1032, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1043, "documentation-improvements"], [1044, "documentation-improvements"]], "Domain specific packages": [[1028, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[425, "dot-product-kernel"]], "Dot-product kernel": [[183, "dot-product-kernel"]], "DotProduct": [[622, null]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[186, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[158, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[377, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null], [415, null]], "Dropping official support for PyPy": [[1059, "dropping-official-support-for-pypy"]], "Dropping support for building with setuptools": [[1059, "dropping-support-for-building-with-setuptools"]], "Dummy estimators": [[1009, "dummy-estimators"]], "DummyClassifier": [[559, null]], "DummyRegressor": [[560, null]], "D\u00b2 score": [[1009, "d2-score"]], "D\u00b2 score for classification": [[1009, "d2-score-for-classification"]], "Earlier versions": [[1040, "earlier-versions"]], "Early stopping in Gradient Boosting": [[148, null]], "Early stopping of Stochastic Gradient Descent": [[225, null]], "Effect of number of trees and early stopping": [[153, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[321, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[321, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[321, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[109, null]], "Effect of varying threshold for self-training": [[338, null]], "EfficiencyWarning": [[582, null]], "Efficient Linear Algebra & Array Operations": [[392, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[392, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[392, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[123, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[1005, "elastic-net"]], "ElasticNet": [[202, "elasticnet"], [654, null]], "ElasticNetCV": [[655, null]], "EllipticEnvelope": [[476, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[238, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[417, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[96, null]], "Empirical validation": [[248, "empirical-validation"]], "EmpiricalCovariance": [[477, null]], "Encoding categorical features": [[1019, "encoding-categorical-features"]], "Encoding strategy": [[88, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1051, "enforcing-keyword-only-arguments"], [1053, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[398, "enhancement-proposals-sleps"]], "Enhancements": [[1043, "enhancements"], [1044, "enhancements"], [1045, "enhancements"], [1046, "enhancements"], [1046, "id4"], [1047, "enhancements"], [1047, "id3"]], "Enriched estimator displays": [[332, "enriched-estimator-displays"]], "Ensemble methods": [[136, null], [187, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[422, null]], "Environment variables": [[371, "environment-variables"]], "Error Calculation": [[148, "error-calculation"]], "Error caused by file path length limit on Windows": [[401, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[137, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[195, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[99, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[195, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[195, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[115, "estimate-the-covariance"]], "Estimate the score": [[186, "estimate-the-score"]], "Estimated Attributes": [[385, "estimated-attributes"]], "Estimation algorithms": [[1003, "estimation-algorithms"]], "Estimator Tags": [[385, "estimator-tags"]], "Estimator types": [[385, "estimator-types"]], "Estimators": [[366, "estimators"], [366, "id2"], [385, "estimators"], [411, "estimators"]], "Estimators that handle NaN values": [[999, "estimators-that-handle-nan-values"]], "Evaluation": [[114, "evaluation"], [314, "evaluation"]], "Evaluation metrics": [[269, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[254, null]], "Evaluation of the calibration of predictions": [[217, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[217, "evaluation-of-the-ranking-power"]], "Evernote": [[1033, "id6"]], "Exact Kernel PCA": [[420, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[420, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[411, "example-usage"]], "Example with noise-free target": [[181, "example-with-noise-free-target"]], "Example with noisy targets": [[181, "example-with-noisy-targets"]], "Examples": [[187, null], [372, "examples"], [414, "examples"], [1040, "examples"]], "Examples based on real world datasets": [[42, null], [187, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[998, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[183, "exp-sine-squared-kernel"], [425, "exp-sine-squared-kernel"]], "ExpSineSquared": [[623, null]], "Experimental / Under Development": [[1056, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[330, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[387, "experimental-features"]], "Explained variance score": [[1009, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[249, null]], "Exponentiation": [[624, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1027, null]], "External Tutorials": [[1027, "external-tutorials"]], "External dependencies": [[1040, "external-dependencies"]], "ExtraTreeClassifier": [[922, null]], "ExtraTreeRegressor": [[923, null]], "ExtraTreesClassifier": [[565, null]], "ExtraTreesRegressor": [[566, null]], "Extract noisy patches and reconstruct them using the dictionary": [[126, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[126, "extract-reference-patches"]], "Extracting features": [[372, "extracting-features"]], "Extremely Randomized Trees": [[422, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[253, null]], "Faces dataset decompositions": [[123, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[420, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[133, null]], "Factor Analysis components - FA": [[123, "factor-analysis-components-fa"]], "FactorAnalysis": [[540, null]], "Failure of Machine Learning to infer causal effects": [[189, null]], "FastICA": [[541, null]], "FastICA on 2D point clouds": [[125, null]], "Faster parser in fetch_openml": [[330, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[370, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[358, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[328, "feature-names-support"]], "Feature Selection": [[166, null], [187, "feature-selection"]], "Feature agglomeration": [[86, null], [1026, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[89, null]], "Feature binarization": [[1019, "feature-binarization"]], "Feature discretization": [[318, null]], "Feature extraction": [[423, null]], "Feature hashing": [[423, "feature-hashing"]], "Feature importance based on feature permutation": [[144, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[144, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on mean decrease in impurity (MDI)": [[145, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Feature importance evaluation": [[422, "feature-importance-evaluation"]], "Feature importance from coefficients": [[172, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[144, null]], "Feature normalization": [[195, "feature-normalization"]], "Feature scaling": [[1026, null]], "Feature selection": [[424, null]], "Feature selection as part of a pipeline": [[424, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[424, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[424, null]], "Feature transformations with ensembles of trees": [[142, null]], "FeatureAgglomeration": [[415, null], [452, null]], "FeatureHasher": [[359, "featurehasher"], [590, null]], "FeatureHasher and DictVectorizer Comparison": [[359, null]], "FeatureUnion": [[871, null]], "FeatureUnion: composite feature spaces": [[416, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[153, null]], "Fedora": [[401, "fedora"]], "Final conclusion": [[174, "final-conclusion"]], "Final remarks": [[92, "final-remarks"]], "Finding the Nearest Neighbors": [[1012, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[124, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[198, "fit-by-cubic-polynomial"]], "Fit models": [[211, "fit-models"], [295, "fit-models"]], "Fit models and plot results": [[92, "fit-models-and-plot-results"]], "Fit regression model": [[151, "fit-regression-model"], [308, "fit-regression-model"], [352, "fit-regression-model"]], "Fit the model for outlier detection (default)": [[303, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[130, "fit-the-models"]], "Fit the regressors": [[197, "fit-the-regressors"], [197, "id2"]], "FitFailedWarning": [[583, null]], "Fitting": [[385, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[219, "fitting-a-quantileregressor"]], "Fitting additional trees": [[422, "fitting-additional-trees"]], "Fitting additional weak-learners": [[422, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[199, null]], "Fitting an elliptic envelope": [[1015, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[396, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[150, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1053, "fixed-models"]], "FixedThresholdClassifier": [[807, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[333, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1040, "fixes"]], "Flexibility of IterativeImputer": [[999, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[391, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[179, null]], "Forest covertypes": [[378, "forest-covertypes"]], "Forest covertypes dataset": [[254, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[415, "fowlkes-mallows-scores"]], "FreeBSD": [[381, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[235, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[395, null]], "From binary to multiclass and multilabel": [[1009, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[382, null]], "FunctionTransformer": [[876, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[263, null]], "GMM covariances": [[262, null]], "GPC examples": [[425, "gpc-examples"]], "Gallery examples": [[429, "gallery-examples"], [432, "gallery-examples"], [435, "gallery-examples"], [438, "gallery-examples"], [439, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [456, "gallery-examples"], [457, "gallery-examples"], [458, "gallery-examples"], [459, "gallery-examples"], [460, "gallery-examples"], [461, "gallery-examples"], [462, "gallery-examples"], [465, "gallery-examples"], [467, "gallery-examples"], [469, "gallery-examples"], [471, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [477, "gallery-examples"], [479, "gallery-examples"], [480, "gallery-examples"], [481, "gallery-examples"], [482, "gallery-examples"], [483, "gallery-examples"], [484, "gallery-examples"], [486, "gallery-examples"], [489, "gallery-examples"], [490, "gallery-examples"], [491, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [498, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [502, "gallery-examples"], [503, "gallery-examples"], [504, "gallery-examples"], [506, "gallery-examples"], [507, "gallery-examples"], [508, "gallery-examples"], [509, "gallery-examples"], [510, "gallery-examples"], [512, "gallery-examples"], [514, "gallery-examples"], [518, "gallery-examples"], [519, "gallery-examples"], [520, "gallery-examples"], [521, "gallery-examples"], [522, "gallery-examples"], [523, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [529, "gallery-examples"], [530, "gallery-examples"], [531, "gallery-examples"], [532, "gallery-examples"], [533, "gallery-examples"], [534, "gallery-examples"], [535, "gallery-examples"], [538, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [546, "gallery-examples"], [547, "gallery-examples"], [548, "gallery-examples"], [549, "gallery-examples"], [550, "gallery-examples"], [551, "gallery-examples"], [552, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [572, "gallery-examples"], [573, "gallery-examples"], [574, "gallery-examples"], [575, "gallery-examples"], [576, "gallery-examples"], [577, "gallery-examples"], [578, "gallery-examples"], [589, "gallery-examples"], [590, "gallery-examples"], [592, "gallery-examples"], [595, "gallery-examples"], [596, "gallery-examples"], [597, "gallery-examples"], [598, "gallery-examples"], [599, "gallery-examples"], [601, "gallery-examples"], [602, "gallery-examples"], [605, "gallery-examples"], [607, "gallery-examples"], [608, "gallery-examples"], [610, "gallery-examples"], [612, "gallery-examples"], [613, "gallery-examples"], [614, "gallery-examples"], [615, "gallery-examples"], [616, "gallery-examples"], [618, "gallery-examples"], [619, "gallery-examples"], [621, "gallery-examples"], [622, "gallery-examples"], [623, "gallery-examples"], [625, "gallery-examples"], [626, "gallery-examples"], [627, "gallery-examples"], [630, "gallery-examples"], [631, "gallery-examples"], [633, "gallery-examples"], [635, "gallery-examples"], [636, "gallery-examples"], [638, "gallery-examples"], [639, "gallery-examples"], [640, "gallery-examples"], [641, "gallery-examples"], [642, "gallery-examples"], [643, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [651, "gallery-examples"], [652, "gallery-examples"], [653, "gallery-examples"], [654, "gallery-examples"], [655, "gallery-examples"], [656, "gallery-examples"], [657, "gallery-examples"], [660, "gallery-examples"], [661, "gallery-examples"], [663, "gallery-examples"], [664, "gallery-examples"], [665, "gallery-examples"], [666, "gallery-examples"], [667, "gallery-examples"], [670, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [676, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [684, "gallery-examples"], [685, "gallery-examples"], [686, "gallery-examples"], [687, "gallery-examples"], [688, "gallery-examples"], [689, "gallery-examples"], [690, "gallery-examples"], [692, "gallery-examples"], [696, "gallery-examples"], [697, "gallery-examples"], [698, "gallery-examples"], [699, "gallery-examples"], [700, "gallery-examples"], [701, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [708, "gallery-examples"], [709, "gallery-examples"], [710, "gallery-examples"], [711, "gallery-examples"], [712, "gallery-examples"], [713, "gallery-examples"], [714, "gallery-examples"], [715, "gallery-examples"], [717, "gallery-examples"], [720, "gallery-examples"], [721, "gallery-examples"], [725, "gallery-examples"], [726, "gallery-examples"], [727, "gallery-examples"], [735, "gallery-examples"], [737, "gallery-examples"], [740, "gallery-examples"], [742, "gallery-examples"], [743, "gallery-examples"], [745, "gallery-examples"], [746, "gallery-examples"], [749, "gallery-examples"], [750, "gallery-examples"], [753, "gallery-examples"], [754, "gallery-examples"], [756, "gallery-examples"], [757, "gallery-examples"], [758, "gallery-examples"], [760, "gallery-examples"], [761, "gallery-examples"], [763, "gallery-examples"], [765, "gallery-examples"], [769, "gallery-examples"], [786, "gallery-examples"], [787, "gallery-examples"], [790, "gallery-examples"], [792, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [795, "gallery-examples"], [796, "gallery-examples"], [797, "gallery-examples"], [798, "gallery-examples"], [800, "gallery-examples"], [801, "gallery-examples"], [803, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [808, "gallery-examples"], [809, "gallery-examples"], [810, "gallery-examples"], [811, "gallery-examples"], [812, "gallery-examples"], [813, "gallery-examples"], [814, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [825, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [837, "gallery-examples"], [838, "gallery-examples"], [839, "gallery-examples"], [840, "gallery-examples"], [841, "gallery-examples"], [842, "gallery-examples"], [843, "gallery-examples"], [845, "gallery-examples"], [847, "gallery-examples"], [849, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [854, "gallery-examples"], [855, "gallery-examples"], [856, "gallery-examples"], [857, "gallery-examples"], [858, "gallery-examples"], [859, "gallery-examples"], [860, "gallery-examples"], [861, "gallery-examples"], [865, "gallery-examples"], [868, "gallery-examples"], [869, "gallery-examples"], [870, "gallery-examples"], [871, "gallery-examples"], [872, "gallery-examples"], [873, "gallery-examples"], [876, "gallery-examples"], [877, "gallery-examples"], [879, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [887, "gallery-examples"], [888, "gallery-examples"], [889, "gallery-examples"], [890, "gallery-examples"], [891, "gallery-examples"], [892, "gallery-examples"], [893, "gallery-examples"], [896, "gallery-examples"], [898, "gallery-examples"], [901, "gallery-examples"], [905, "gallery-examples"], [906, "gallery-examples"], [908, "gallery-examples"], [909, "gallery-examples"], [910, "gallery-examples"], [912, "gallery-examples"], [915, "gallery-examples"], [916, "gallery-examples"], [917, "gallery-examples"], [918, "gallery-examples"], [919, "gallery-examples"], [920, "gallery-examples"], [921, "gallery-examples"], [926, "gallery-examples"], [927, "gallery-examples"], [941, "gallery-examples"], [951, "gallery-examples"], [953, "gallery-examples"], [960, "gallery-examples"], [965, "gallery-examples"], [966, "gallery-examples"], [967, "gallery-examples"], [968, "gallery-examples"], [969, "gallery-examples"], [982, "gallery-examples"], [992, "gallery-examples"]], "Gamma loss for gradient boosting": [[331, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[656, null]], "Gaussian Mixture": [[1008, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[261, null]], "Gaussian Mixture Model Selection": [[265, null]], "Gaussian Mixture Model Sine Curve": [[266, null]], "Gaussian Mixture Models": [[187, "gaussian-mixture-models"], [259, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1011, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[425, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[425, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[173, null], [187, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[425, null]], "Gaussian Processes regression: basic introductory example": [[181, null]], "Gaussian mixture models": [[1008, null]], "Gaussian process classification (GPC) on iris dataset": [[176, null], [425, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[174, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[182, null]], "Gaussian random projection": [[1021, "gaussian-random-projection"]], "GaussianMixture": [[806, null]], "GaussianNB": [[850, null]], "GaussianProcessClassifier": [[618, null]], "GaussianProcessRegressor": [[619, null]], "GaussianRandomProjection": [[904, null]], "General Concepts": [[397, "general-concepts"]], "General recommendations": [[366, "general-recommendations"]], "Generalized Linear Models": [[187, "generalized-linear-models"], [196, null], [1005, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[326, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[82, "generate-data"], [102, "generate-data"], [113, "generate-data"], [211, "generate-data"], [314, "generate-data"]], "Generate data with outliers": [[303, "generate-data-with-outliers"]], "Generate distorted image": [[126, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [90, "generate-sample-data"], [98, "generate-sample-data"], [111, "generate-sample-data"], [124, "generate-sample-data"], [125, "generate-sample-data"], [168, "generate-sample-data"], [250, "generate-sample-data"], [288, "generate-sample-data"], [308, "generate-sample-data"], [352, "generate-sample-data"]], "Generate sinusoidal data with noise": [[198, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[272, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [197, "generate-synthetic-dataset"], [197, "id1"], [202, "generate-synthetic-dataset"]], "Generate the data": [[99, "generate-the-data"], [101, "generate-the-data"], [115, "generate-the-data"]], "Generated datasets": [[379, null]], "Generated documentation on GitHub Actions": [[383, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[174, "generating-a-dataset"]], "Generating polynomial features": [[1019, "generating-polynomial-features"]], "Generators for classification and clustering": [[379, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[379, "generators-for-decomposition"]], "Generators for manifold learning": [[379, "generators-for-manifold-learning"]], "Generators for regression": [[379, "generators-for-regression"]], "Generic dictionary learning": [[420, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[600, null]], "Getting Started": [[396, null]], "Getting reproducible results across multiple executions": [[366, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1032, "gitter"]], "Glossary of Common Terms and API Elements": [[397, null]], "Good practices": [[388, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[398, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[149, null]], "Gradient Boosting Regression Trees for Poisson regression": [[217, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[151, null]], "Gradient Boosting regularization": [[152, null]], "Gradient boosting": [[191, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[147, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[147, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[147, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[147, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[422, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[567, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[422, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[422, null]], "GradientBoostingRegressor": [[568, null]], "Graph Routines": [[392, "graph-routines"]], "Graphical model and parametrization": [[1014, "graphical-model-and-parametrization"]], "GraphicalLasso": [[478, null]], "GraphicalLassoCV": [[479, null]], "GridSearchCV": [[808, null]], "Group Shuffle Split": [[419, "group-shuffle-split"]], "Group k-fold": [[419, "group-k-fold"]], "GroupKFold": [[809, null]], "GroupShuffleSplit": [[810, null]], "Grouping infrequent categories in OneHotEncoder": [[329, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[331, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[415, "hdbscan"], [453, null]], "HDBSCAN: hierarchical density-based clustering": [[331, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[811, null]], "HalvingRandomSearchCV": [[812, null]], "Hamming loss": [[1009, "hamming-loss"]], "Handling Multicollinear Features": [[193, "handling-multicollinear-features"]], "Hash Functions": [[392, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[156, null]], "HashingVectorizer": [[358, "hashingvectorizer"], [597, null]], "Helper Functions": [[392, "helper-functions"]], "Helper function": [[183, "helper-function"]], "Helper function to plot embedding": [[238, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[1006, "hessian-eigenmapping"]], "Hierarchical Clustering": [[415, "id11"]], "Hierarchical clustering": [[415, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[102, null]], "Higher-level parallelism with joblib": [[371, "higher-level-parallelism-with-joblib"]], "Highlights": [[1040, "highlights"], [1043, "highlights"], [1044, "highlights"], [1047, "highlights"], [1048, "highlights"]], "Hinge loss": [[1009, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[332, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[569, null]], "HistGradientBoostingRegressor": [[570, null]], "Histogram-Based Gradient Boosting": [[422, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[328, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[415, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[395, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[395, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[395, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[395, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[395, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[395, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[395, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[395, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[366, "how-to-avoid-data-leakage"]], "How to contribute": [[383, "how-to-contribute"]], "How to make a good bug report": [[383, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[389, null]], "HowAboutWe": [[1033, "id16"]], "Huber Regression": [[1005, "huber-regression"]], "HuberRegressor": [[657, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[200, null]], "Hugging Face": [[1033, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[625, null]], "Hyperparameter Robustness": [[90, "hyperparameter-robustness"]], "ICE vs. PDP": [[191, "ice-vs-pdp"]], "INFONEA": [[1033, "id24"]], "Illustration of GPC on the XOR dataset": [[425, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[178, null]], "Illustration of Pipeline and GridSearchCV": [[106, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[183, null]], "Image denoising using dictionary learning": [[126, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[423, "image-feature-extraction"]], "Implementation": [[1012, "implementation"]], "Implementation decisions": [[395, "implementation-decisions"]], "Implementation details": [[1023, "implementation-details"], [1024, "implementation-details"]], "Implementing your own scoring object": [[1009, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[321, null]], "Important notes regarding the internal cross-validation": [[414, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[330, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[332, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[327, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[326, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[999, null], [1019, "imputation-of-missing-values"]], "Impute missing values with mean": [[186, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[186, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[186, null]], "Imputing missing values with variants of IterativeImputer": [[185, null]], "In binary classification settings": [[282, "in-binary-classification-settings"]], "In multi-label settings": [[282, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[189, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[189, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[366, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[584, null]], "Incremental PCA": [[127, null], [420, "incremental-pca"]], "Incremental learning": [[372, "incremental-learning"]], "IncrementalPCA": [[542, null]], "Independent component analysis (ICA)": [[420, "independent-component-analysis-ica"]], "Independent components - FastICA": [[123, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[327, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1016, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[91, null]], "Influence of the Input Data Representation": [[370, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[370, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[370, "influence-of-the-number-of-features"]], "Information Criterion": [[998, "information-criterion"]], "Information-criteria based model selection": [[1005, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1019, "infrequent-categories"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[415, null]], "Input validation": [[385, "input-validation"]], "InputTags": [[929, null]], "Inria": [[1033, "id3"]], "Inspection": [[187, "inspection"], [188, null], [400, null]], "Installing nightly builds": [[381, "installing-nightly-builds"]], "Installing scikit-learn": [[401, null]], "Installing the development version of scikit-learn": [[381, null]], "Installing the latest release": [[401, "installing-the-latest-release"]], "Instantiation": [[385, "instantiation"]], "Intel Extension for Scikit-learn": [[401, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[422, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[330, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1028, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[179, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[422, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[190, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[190, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[221, "interpreting-the-plots"]], "Introducing the set_output API": [[258, null]], "Introduction": [[1006, "introduction"]], "Invariance with respect to prevalence": [[278, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1021, "inverse-transform"]], "Iris plants dataset": [[380, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[177, null]], "Isolation Forest": [[1015, "isolation-forest"]], "IsolationForest": [[571, null]], "IsolationForest example": [[154, null]], "Isomap": [[696, null], [1006, "isomap"]], "Isomap Embedding": [[237, "isomap-embedding"]], "Isotonic": [[413, "isotonic"]], "Isotonic Regression": [[247, null]], "Isotonic regression": [[1000, null]], "IsotonicRegression": [[643, null]], "Issue Tracker Tags": [[383, "issue-tracker-tags"]], "Issues for New Contributors": [[383, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[186, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[635, null]], "J.P.Morgan": [[1033, "id1"]], "Jaccard similarity coefficient score": [[1009, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[211, null]], "K-D Tree": [[1012, "k-d-tree"]], "K-bins discretization": [[1019, "k-bins-discretization"]], "K-fold": [[419, "k-fold"]], "K-means": [[415, "k-means"]], "K-means Clustering": [[80, null]], "K-means clustering on text features": [[358, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[299, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[877, null]], "KDDCup99 - SA dataset": [[254, "kddcup99-sa-dataset"]], "KDTree": [[853, null]], "KDTree and BallTree Classes": [[1012, "kdtree-and-balltree-classes"]], "KFold": [[813, null]], "KMeans": [[454, null]], "KNN Based Imputation": [[325, "knn-based-imputation"]], "KNNImputer": [[636, null]], "KNeighborsClassifier": [[854, null]], "KNeighborsRegressor": [[855, null]], "KNeighborsTransformer": [[856, null]], "Kddcup 99 dataset": [[378, "kddcup-99-dataset"]], "Keeping the number of features constant": [[999, "keeping-the-number-of-features-constant"]], "Kernel": [[626, null]], "Kernel Approximation": [[187, "kernel-approximation"], [194, null], [1001, null]], "Kernel Density Estimate of Species Distributions": [[309, null]], "Kernel Density Estimation": [[300, null], [421, "kernel-density-estimation"]], "Kernel PCA": [[128, null]], "Kernel Principal Component Analysis (kPCA)": [[420, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[183, "kernel-cookbook"]], "Kernel functions": [[1024, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[174, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[425, "kernel-operators"]], "Kernel ridge": [[174, "kernel-ridge"]], "Kernel ridge regression": [[1002, null]], "KernelCenterer": [[878, null]], "KernelDensity": [[857, null]], "KernelPCA": [[543, null]], "KernelRidge": [[651, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[425, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[328, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1048, "known-major-bugs"], [1049, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[208, null]], "L1-based feature selection": [[424, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[202, null]], "L1-penalty case": [[353, "l1-penalty-case"]], "L2-penalty case": [[353, "l2-penalty-case"]], "LARS Lasso": [[1005, "lars-lasso"]], "LDA": [[1003, "lda"]], "Label Propagation": [[1022, "label-propagation"]], "Label Propagation digits active learning": [[336, null]], "Label Propagation digits: Demonstrating performance": [[335, null]], "Label Propagation learning a complex structure": [[337, null]], "Label binarization": [[1020, "label-binarization"]], "Label encoding": [[1020, "label-encoding"]], "Label ranking average precision": [[1009, "label-ranking-average-precision"]], "LabelBinarizer": [[879, null], [1020, "labelbinarizer"]], "LabelEncoder": [[880, null]], "LabelPropagation": [[907, null]], "LabelSpreading": [[908, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[1007, "laplacian-kernel"]], "Lars": [[658, null]], "LarsCV": [[659, null]], "Lasso": [[202, "lasso"], [660, null], [1005, "lasso"]], "Lasso model selection via information criteria": [[204, null]], "Lasso model selection: AIC-BIC / cross-validation": [[206, null]], "Lasso on dense and sparse data": [[203, null]], "Lasso via coordinate descent": [[206, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[206, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[205, null]], "LassoCV": [[661, null]], "LassoLars": [[662, null]], "LassoLarsCV": [[663, null]], "LassoLarsIC": [[664, null]], "Latent Dirichlet Allocation (LDA)": [[420, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[544, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[126, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[85, "learn-the-dictionary-of-images"]], "Learning Curve": [[277, "learning-curve"]], "Learning Git": [[383, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[306, "learning-an-embedding"]], "Learning curve": [[1004, "learning-curve"]], "LearningCurveDisplay": [[814, null]], "Least Angle Regression": [[1005, "least-angle-regression"]], "Leave One Group Out": [[419, "leave-one-group-out"]], "Leave One Out (LOO)": [[419, "leave-one-out-loo"]], "Leave P Groups Out": [[419, "leave-p-groups-out"]], "Leave P Out (LPO)": [[419, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[815, null]], "LeaveOneOut": [[816, null]], "LeavePGroupsOut": [[817, null]], "LeavePOut": [[818, null]], "Ledoit-Wolf shrinkage": [[417, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[112, null]], "LedoitWolf": [[480, null]], "Lessons learned": [[189, "lessons-learned"], [190, "lessons-learned"]], "Limitations of a simple linear model": [[174, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[423, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[370, "limiting-working-memory"]], "Limiting the number of splits": [[147, "limiting-the-number-of-splits"]], "Linear Models": [[1005, null]], "Linear Regression Example": [[213, null]], "Linear algebra libraries": [[370, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[1003, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[350, "linear-kernel"], [1007, "linear-kernel"]], "Linear models with regularization": [[190, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[190, "linear-models-with-sparse-coefficients"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[557, null]], "LinearRegression": [[665, null]], "LinearSVC": [[912, null]], "LinearSVR": [[913, null]], "Link to R\u00b2 score, the coefficient of determination": [[1009, null]], "Links": [[370, "links"]], "Linnerrud dataset": [[380, "linnerrud-dataset"]], "Linux": [[381, "linux"]], "Linux compilers from conda-forge": [[381, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[381, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[147, "load-ames-housing-dataset"]], "Load Data": [[359, "load-data"]], "Load Data and Train a SVC": [[257, "load-data-and-train-a-svc"]], "Load Data and train model": [[245, "load-data-and-train-model"]], "Load and prepare data": [[284, "load-and-prepare-data"], [285, "load-and-prepare-data"], [321, "load-and-prepare-data"]], "Load and prepare data set": [[346, "load-and-prepare-data-set"]], "Load data": [[210, "load-data"]], "Load dataset": [[143, "load-dataset"]], "Load dataset and apply GridSearchCV": [[163, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[238, "load-digits-dataset"]], "Load some data to play with": [[349, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [85, "load-the-data"], [151, "load-the-data"], [299, "load-the-data"]], "Load the dataset": [[93, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[322, "loading-data-from-openml"]], "Loading a dataset": [[295, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[357, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[235, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[423, "loading-features-from-dicts"]], "Loading from external datasets": [[377, "loading-from-external-datasets"]], "Loading other datasets": [[377, null]], "Loading text data": [[358, "loading-text-data"]], "Loading the data": [[172, "loading-the-data"]], "Loading the data and model fitting": [[145, "loading-the-data-and-model-fitting"]], "Loading the iris dataset": [[120, "loading-the-iris-dataset"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1015, "local-outlier-factor"]], "Local Tangent Space Alignment": [[1006, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[858, null]], "Locally Linear Embedding": [[1006, "locally-linear-embedding"]], "Locally Linear Embeddings": [[237, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[697, null]], "Lock files": [[383, "lock-files"]], "Log loss": [[1009, "log-loss"]], "Logistic Regression 3-class Classifier": [[201, null]], "Logistic function": [[207, null]], "Logistic regression": [[1005, "logistic-regression"]], "LogisticRegression": [[666, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[295, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[667, null]], "Look at the results": [[250, "look-at-the-results"], [352, "look-at-the-results"]], "Loss Functions": [[422, "loss-functions"]], "Lovely": [[1033, "id20"]], "Low-level parallelism": [[415, "low-level-parallelism"], [422, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[371, "lower-level-parallelism-with-openmp"]], "MARS": [[1033, "id28"]], "MDS": [[698, null]], "MLPClassifier": [[869, null]], "MLPRegressor": [[870, null]], "MNIST classification using multinomial logistic + L1": [[233, null]], "MacPorts for Mac OSX": [[401, "macports-for-mac-osx"]], "Machinalis": [[1033, "id22"]], "Mailing Lists": [[1032, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[217, "main-takeaways"]], "Maintainer Information": [[387, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[383, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[422, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[158, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[161, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[239, null]], "Manifold learning": [[187, "manifold-learning"], [236, null], [1006, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[238, null]], "Manually setting the decision threshold": [[414, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[269, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[320, null]], "Mapping to a Gaussian distribution": [[1019, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1019, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[999, "marking-imputed-values"]], "Matern": [[627, null]], "Mathematical Definition": [[1016, "mathematical-definition"]], "Mathematical Details": [[1001, "mathematical-details"]], "Mathematical formulation": [[412, "mathematical-formulation"], [412, "id3"], [422, "mathematical-formulation"], [1012, "mathematical-formulation"], [1023, "mathematical-formulation"], [1024, "mathematical-formulation"], [1025, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[1003, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[1003, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1009, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[183, "matern-kernel"], [425, "matern-kernel"]], "Max error": [[1009, "max-error"]], "MaxAbsScaler": [[316, "maxabsscaler"], [881, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1009, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[415, "mean-shift"]], "Mean absolute error": [[1009, "mean-absolute-error"]], "Mean absolute percentage error": [[1009, "mean-absolute-percentage-error"]], "Mean squared error": [[1009, "mean-squared-error"]], "Mean squared logarithmic error": [[1009, "mean-squared-logarithmic-error"]], "MeanShift": [[455, null]], "Measure and plot the results": [[158, "measure-and-plot-the-results"]], "Median absolute error": [[1009, "median-absolute-error"]], "Memory footprint": [[88, "memory-footprint"]], "Memory usage profiling": [[389, "memory-usage-profiling"]], "Merging Pull Requests": [[387, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [411, "meta-estimators"]], "MetaEstimatorMixin": [[435, null]], "Metadata Routing": [[251, null], [331, "metadata-routing"], [397, "metadata-routing"], [406, null], [1057, "metadata-routing"], [1057, "id2"], [1058, "metadata-routing"], [1059, "metadata-routing"]], "Metadata Routing Support": [[332, "metadata-routing-support"]], "Metadata Routing Support Status": [[406, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[964, null]], "MetadataRouter": [[965, null]], "MethodMapping": [[966, null]], "Methods": [[397, "methods"]], "Metrics": [[411, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1009, null]], "MinCovDet": [[481, null]], "MinMaxScaler": [[316, "minmaxscaler"], [882, null]], "Mini Batch K-Means": [[415, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[420, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[420, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[545, null]], "MiniBatchKMeans": [[456, null]], "MiniBatchNMF": [[546, null]], "MiniBatchNMF: an online version of NMF": [[329, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[547, null]], "Minimal Cost-Complexity Pruning": [[1025, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1053, "minimal-dependencies"], [1054, "minimal-dependencies"]], "Minimum Covariance Determinant": [[417, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[114, "minimum-covariance-determinant-estimator"]], "Misc": [[1040, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [187, "miscellaneous"], [243, null], [1048, "miscellaneous"], [1048, "id40"], [1049, "miscellaneous"], [1050, "miscellaneous"], [1051, "miscellaneous"], [1051, "id13"], [1052, "miscellaneous"], [1053, "miscellaneous"], [1056, "miscellaneous"]], "Misleading values on strongly correlated features": [[1017, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[184, null], [187, "missing-value-imputation"]], "Missing Values Support": [[1025, "missing-values-support"]], "Missing information": [[186, "missing-information"]], "Missing value support for Random Forest": [[332, "missing-value-support-for-random-forest"]], "Missing values support": [[422, "missing-values-support"]], "Missing values support in decision trees": [[331, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[637, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[370, "model-compression"]], "Model Reshaping": [[370, "model-reshaping"]], "Model Selection": [[187, "model-selection"], [267, null]], "Model Selection Enhancements and API Changes": [[1046, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[148, "model-training-and-comparison"]], "Model comparison": [[147, "model-comparison"]], "Model evaluation": [[396, "model-evaluation"]], "Model fitting and extrapolation": [[179, "model-fitting-and-extrapolation"]], "Model persistence": [[409, null]], "Model selection and evaluation": [[410, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[130, null]], "Model selection: development and evaluation": [[998, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[998, "model-specific-cross-validation"]], "Model training and selection": [[171, "model-training-and-selection"], [265, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[357, "model-with-metadata-stripping"]], "Model without metadata stripping": [[357, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[172, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[314, "models-definition"]], "Models robustness to recover the ground truth weights": [[197, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[1006, "modified-locally-linear-embedding"]], "Monitoring performance": [[383, "monitoring-performance"]], "Monotonic Constraints": [[155, null], [422, "monotonic-constraints"]], "Monotonic constraints": [[153, "monotonic-constraints"]], "More control with warm_start": [[1013, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[90, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[137, null]], "Multi-class case": [[1009, "multi-class-case"]], "Multi-class classification": [[1024, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[389, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[1006, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[240, null]], "Multi-label case": [[1009, "multi-label-case"]], "Multi-label confusion matrix": [[1009, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1013, "multi-layer-perceptron"]], "Multi-layer perceptron": [[191, "multi-layer-perceptron"]], "Multi-output Decision Tree Regression": [[364, null]], "Multi-output problems": [[1025, "multi-output-problems"]], "Multi-task Elastic-Net": [[1005, "multi-task-elastic-net"]], "Multi-task Lasso": [[1005, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[883, null], [1020, "multilabelbinarizer"]], "MultiOutputClassifier": [[844, null], [1010, "multioutputclassifier"]], "MultiOutputRegressor": [[845, null], [1010, "multioutputregressor"]], "MultiTaskElasticNet": [[668, null]], "MultiTaskElasticNetCV": [[669, null]], "MultiTaskLasso": [[670, null]], "MultiTaskLassoCV": [[671, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[284, null]], "Multiclass and multilabel classification": [[1009, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[392, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1010, null]], "Multiclass classification": [[1010, "multiclass-classification"]], "Multiclass methods": [[187, "multiclass-methods"], [292, null]], "Multiclass sparse logistic regression on 20newgroups": [[232, null]], "Multiclass support": [[413, "multiclass-support"]], "Multiclass-multioutput classification": [[1010, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[237, "multidimensional-scaling"]], "Multilabel": [[379, "multilabel"]], "Multilabel classification": [[252, null], [1010, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[295, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [1009, "multilabel-ranking-metrics"]], "Multinomial Case": [[1005, "multinomial-case"]], "Multinomial Naive Bayes": [[1011, "multinomial-naive-bayes"]], "MultinomialNB": [[851, null]], "Multioutput methods": [[187, "multioutput-methods"], [294, null]], "Multioutput regression": [[1010, "multioutput-regression"]], "Multiple modules": [[1048, "multiple-modules"], [1049, "multiple-modules"]], "Multiple vs. Single Imputation": [[999, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[999, "multivariate-feature-imputation"]], "Mutual Information based scores": [[415, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[415, "mutual-reachability-graph"]], "NMF": [[548, null]], "NMF with a beta-divergence": [[420, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[420, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1011, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[322, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[327, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[325, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[307, null]], "Nearest Centroid Classifier": [[1012, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1012, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[187, "nearest-neighbors"], [297, null], [1012, null]], "Nearest Neighbors Classification": [[299, null], [1012, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1012, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1012, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[308, null]], "Nearest Shrunken Centroid": [[1012, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[999, "nearest-neighbors-imputation"]], "NearestCentroid": [[859, null]], "NearestNeighbors": [[860, null]], "Neighborhood Components Analysis": [[1012, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[306, null]], "NeighborhoodComponentsAnalysis": [[861, null]], "Nested versus non-nested cross-validation": [[280, null]], "NetBSD": [[401, "netbsd"]], "Neural Networks": [[187, "neural-networks"], [310, null]], "Neural network models (supervised)": [[1013, null]], "Neural network models (unsupervised)": [[1014, null]], "New Estimator Classes": [[1041, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[327, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[327, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[327, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[330, "new-and-enhanced-displays"]], "New classes": [[1040, "new-classes"]], "New display ValidationCurveDisplay": [[331, "new-display-validationcurvedisplay"]], "New documentation improvements": [[327, "new-documentation-improvements"], [328, "new-documentation-improvements"]], "New features": [[1043, "new-features"], [1044, "new-features"], [1045, "new-features"], [1046, "new-features"], [1047, "new-features"]], "New plotting API": [[325, "new-plotting-api"]], "New self-training meta-estimator": [[327, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1027, "new-to-scientific-python"]], "Next steps": [[396, "next-steps"]], "Non-Negative Least Squares": [[1005, "non-negative-least-squares"]], "Non-linear transformation": [[1019, "non-linear-transformation"]], "Non-negative components - NMF": [[123, "non-negative-components-nmf"]], "Non-negative least squares": [[212, null]], "Non-negative matrix factorization (NMF or NNMF)": [[420, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1019, "normalization"]], "Normalized Discounted Cumulative Gain": [[1009, "normalized-discounted-cumulative-gain"]], "Normalizer": [[316, "normalizer"], [884, null]], "NotFittedError": [[585, null]], "Note on MPS device support": [[411, "note-on-mps-device-support"]], "Note on device support for float64": [[411, "note-on-device-support-for-float64"]], "Notes": [[372, "notes"]], "Novelty Detection": [[1015, "novelty-detection"]], "Novelty and Outlier Detection": [[1015, null]], "Novelty detection with Local Outlier Factor": [[1015, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[302, null]], "NuSVC": [[914, null]], "NuSVR": [[915, null]], "NumPy": [[388, "numpy"]], "Number of candidates and amount of resource at each iteration": [[287, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[385, "numerical-assertions-in-tests"]], "Nystroem": [[647, null]], "Nystroem Method for Kernel Approximation": [[1001, "nystroem-method-for-kernel-approximation"]], "OAS": [[482, null]], "ONNX": [[409, "onnx"]], "OOB Errors for Random Forests": [[141, null]], "OPTICS": [[415, "optics"], [457, null]], "Obtaining predictions by cross-validation": [[419, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1033, "id19"]], "Older Versions": [[1040, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[231, null]], "One-class SVM with non-linear kernel (RBF)": [[345, null]], "One-vs-One multiclass ROC": [[284, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[284, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[916, null]], "OneHotEncoder": [[885, null]], "OneToOneFeatureMixin": [[436, null]], "OneVsOneClassifier": [[840, null], [1010, "onevsoneclassifier"]], "OneVsRestClassifier": [[841, null], [1010, "onevsrestclassifier"]], "Online One-Class SVM": [[328, "online-one-class-svm"], [1023, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[85, null]], "Optical recognition of handwritten digits dataset": [[380, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[180, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[385, "optional-arguments"]], "Options to tune the decision threshold": [[414, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[417, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[886, null]], "Ordinary Least Squares": [[1005, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[1005, "ordinary-least-squares-complexity"]], "Ordinary Least Squares and Ridge Regression Variance": [[215, null]], "Original data": [[281, "original-data"], [316, "original-data"]], "Original image": [[88, "original-image"]], "Original points": [[306, "original-points"]], "Orthogonal Matching Pursuit": [[216, null]], "Orthogonal Matching Pursuit (OMP)": [[1005, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[672, null]], "OrthogonalMatchingPursuitCV": [[673, null]], "Other changes": [[1040, "other-changes"]], "Other estimators and tasks": [[1028, "other-estimators-and-tasks"]], "Otto Group": [[1033, "id26"]], "Our community, our values": [[383, null]], "Our vanilla classifier": [[289, "our-vanilla-classifier"]], "Out of Bag Estimates": [[998, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1011, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1015, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[303, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[437, null]], "Outliers in the X direction": [[234, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[234, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1017, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[842, null], [1010, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[371, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[415, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[293, null]], "Overview of outlier detection methods": [[1015, "overview-of-outlier-detection-methods"]], "PCA": [[549, null]], "PCA example with Iris Data-set": [[129, null]], "PCA using randomized SVD": [[420, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1026, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1033, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[117, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[117, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[418, "plscanonical"], [490, null]], "PLSRegression": [[418, "plsregression"], [491, null]], "PLSSVD": [[418, "plssvd"], [492, null]], "Packaging": [[1052, "packaging"]], "Pair Confusion Matrix": [[415, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[275, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[275, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[333, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1007, null]], "PairwiseKernel": [[628, null]], "Pandas": [[388, "pandas"]], "Pandas output with set_output API": [[330, "pandas-output-with-set-output-api"]], "Parallel": [[974, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[371, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[371, "parallelism"], [998, "parallelism"]], "Parallelism, resource management, and configuration": [[371, null]], "Parallelization": [[422, "parallelization"]], "ParameterGrid": [[819, null]], "ParameterSampler": [[820, null]], "Parameters": [[397, "parameters"], [422, "parameters"]], "Parameters and init": [[385, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1024, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[191, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1016, null]], "Partial dependence plots": [[1016, "partial-dependence-plots"]], "PartialDependenceDisplay": [[640, null]], "Partitioning the data": [[195, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[1005, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[674, null]], "PassiveAggressiveRegressor": [[675, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[423, "patch-extraction"]], "PatchExtractor": [[591, null]], "PeerIndex": [[1033, "id17"]], "People": [[1040, "people"], [1040, "id2"], [1040, "id5"], [1040, "id8"], [1040, "id11"], [1040, "id13"], [1040, "id15"], [1040, "id17"], [1041, "people"], [1041, "id3"], [1042, "people"], [1043, "people"]], "Perceptron": [[676, null], [1005, "perceptron"]], "Performance improvements": [[329, "performance-improvements"]], "Performance improvements in PCA": [[333, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[358, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[218, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[192, null]], "Permutation Importance with Multicollinear or Correlated Features": [[193, null]], "Permutation feature importance": [[1017, null]], "Permutation test score": [[281, "permutation-test-score"], [419, "permutation-test-score"]], "Permutation-based feature importance": [[325, "permutation-based-feature-importance"]], "Pinball loss": [[1009, "pinball-loss"]], "Pipeline": [[872, null]], "Pipeline ANOVA SVM": [[169, null]], "Pipeline compatibility": [[385, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[276, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[416, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[103, null], [187, "pipelines-and-composite-estimators"], [416, null]], "Pipelines: chaining pre-processors and estimators": [[396, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1026, null]], "Pipelining: chaining a PCA and a logistic regression": [[107, null]], "Pixel importances with a parallel forest of trees": [[145, null]], "Platform-specific instructions": [[381, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[282, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[272, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[222, null]], "Plot a PCA representation": [[120, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[357, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[284, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[284, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[202, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[254, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[160, null]], "Plot classification boundaries with different SVM Kernels": [[350, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[343, null]], "Plot discrete decision boundary": [[154, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[163, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[151, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[161, null]], "Plot multi-class SGD on the iris dataset": [[226, null]], "Plot multinomial and One-vs-Rest Logistic Regression": [[209, null]], "Plot number of features VS. cross-validation scores": [[171, "plot-number-of-features-vs-cross-validation-scores"]], "Plot path length decision boundary": [[154, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[121, null]], "Plot regularization path": [[210, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [98, "plot-result"], [102, "plot-result"], [102, "id2"]], "Plot results": [[47, "plot-results"], [84, "plot-results"], [111, "plot-results"], [124, "plot-results"], [125, "plot-results"], [143, "plot-results"], [295, "plot-results"], [303, "plot-results"]], "Plot results functions": [[288, "plot-results-functions"]], "Plot support and time series": [[211, "plot-support-and-time-series"]], "Plot the BIC scores": [[265, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[282, "plot-the-precision-recall-curve"]], "Plot the best model": [[265, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[349, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[159, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[362, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[146, null]], "Plot the marginal log-likelihood": [[197, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[282, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[335, "plot-the-most-uncertain-predictions"]], "Plot the results": [[85, "plot-the-results"], [115, "plot-the-results"], [161, "plot-the-results"], [186, "plot-the-results"]], "Plot the results on an image": [[82, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[344, null]], "Plot the true and estimated coefficients": [[197, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[198, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[151, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [314, "plotting"]], "Plotting API Overview": [[390, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[271, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[277, null]], "Plotting Validation Curves": [[291, null]], "Plotting four circles": [[101, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[255, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[255, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[255, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[197, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[257, "plotting-the-roc-curve"]], "Plotting the Results": [[322, "plotting-the-results"]], "Plotting the result": [[279, "plotting-the-result"]], "Plotting the results": [[99, "plotting-the-results"], [138, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[221, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[101, "plotting-two-circles"]], "Plotting with Multiple Axes": [[390, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[217, null]], "PoissonRegressor": [[677, null]], "Polars output in set_output": [[332, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[1001, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[218, null]], "Polynomial features": [[1019, "polynomial-features"]], "Polynomial kernel": [[350, "polynomial-kernel"], [1007, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[1005, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[648, null]], "PolynomialFeatures": [[887, null]], "Possible solutions": [[92, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[361, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[289, null]], "Post-tuning the decision threshold": [[414, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[269, null]], "PowerTransformer": [[316, "powertransformer"], [888, null]], "Pre-test vs. post-test analysis": [[278, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1009, "precision-recall-and-f-measures"]], "Precision-Recall": [[282, null]], "PrecisionRecallDisplay": [[708, null]], "Precomputed sparse nearest neighbors graph": [[325, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[419, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[821, null]], "Prediction Intervals for Gradient Boosting Regression": [[150, null]], "Prediction Latency": [[49, null], [370, "prediction-latency"]], "Prediction Throughput": [[370, "prediction-throughput"]], "PredictionErrorDisplay": [[709, null]], "Preparing the data": [[138, "preparing-the-data"], [153, "preparing-the-data"], [195, "preparing-the-data"]], "Preprocessing": [[187, "preprocessing"], [315, null]], "Preprocessing data": [[1019, null]], "Preprocessing numerical variables": [[190, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[191, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[191, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[191, "preprocessor-for-the-neural-network-model"]], "Principal Component Regression vs Partial Least Squares Regression": [[118, null]], "Principal component analysis (PCA)": [[420, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1057, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[425, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[175, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[413, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[190, "processing-the-dataset"]], "Product": [[629, null]], "Productivity and sanity-preserving tips": [[391, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[389, "profiling-python-code"]], "Profiling compiled extensions": [[389, "profiling-compiled-extensions"]], "Project template:": [[385, null]], "Projecting data: PCA vs. KernelPCA": [[128, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[128, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[118, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[388, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[383, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[235, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1029, "purpose-of-this-document"]], "Purpose of this example": [[221, "purpose-of-this-example"]], "PyTorch Support": [[411, "pytorch-support"]], "Python API": [[371, "python-api"]], "Python package and dataset imports, load dataset": [[249, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[389, "python-cython-or-c-c"]], "QDA": [[1003, "qda"]], "QuadraticDiscriminantAnalysis": [[558, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[358, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[1005, "quantile-regression"]], "Quantile Regressor": [[328, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[329, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[219, null]], "QuantileRegressor": [[678, null]], "QuantileTransformer": [[889, null]], "QuantileTransformer (Gaussian output)": [[316, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[316, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[1005, "ransac-random-sample-consensus"]], "RANSACRegressor": [[679, null]], "RBF": [[630, null]], "RBF SVM parameters": [[346, null]], "RBF kernel": [[350, "rbf-kernel"], [1007, "rbf-kernel"]], "RBFSampler": [[649, null]], "RCV1 dataset": [[378, "rcv1-dataset"]], "RFE": [[601, null]], "RFECV": [[602, null]], "ROC AUC now supports multiclass classification": [[325, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[257, null]], "ROC curve showing a specific class": [[284, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[284, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[284, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[284, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[1001, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[183, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[425, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[862, null]], "RadiusNeighborsRegressor": [[863, null]], "RadiusNeighborsTransformer": [[864, null]], "Rand index": [[415, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[193, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[422, "random-forests"]], "Random Numbers": [[385, "random-numbers"]], "Random Projection": [[1021, null]], "Random data": [[281, "random-data"]], "Random forests and other randomized tree ensembles": [[422, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[419, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1026, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[572, null]], "RandomForestRegressor": [[573, null]], "RandomTreesEmbedding": [[574, null]], "Randomized Parameter Optimization": [[998, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[822, null]], "Rangespan": [[1033, "id11"]], "Ranking loss": [[1009, "ranking-loss"]], "Rational Quadratic kernel": [[183, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[425, "rational-quadratic-kernel"]], "RationalQuadratic": [[631, null]], "Reading the existing code base": [[383, "reading-the-existing-code-base"]], "Real world datasets": [[378, null]], "Real-world data set": [[109, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[285, null]], "Receiver operating characteristic (ROC)": [[1009, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1028, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[170, null], [424, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[171, null]], "Reference Steps": [[387, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [114, "references"], [140, "references"], [195, "references"], [202, "references"], [293, "references"], [309, "references"], [425, "references"], [999, "references"]], "Region of Practical Equivalence": [[275, "region-of-practical-equivalence"]], "Regression": [[182, "regression"], [1005, "regression"], [1013, "regression"], [1023, "regression"], [1024, "regression"], [1025, "regression"]], "Regression criteria": [[1025, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [1009, "regression-metrics"]], "RegressorChain": [[846, null], [1010, "regressorchain"]], "RegressorMixin": [[438, null]], "RegressorTags": [[930, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1013, "regularization"]], "Regularization path of L1- Logistic Regression": [[210, null]], "Related Projects": [[1028, null]], "Related changes": [[1047, "related-changes"]], "Relation to impurity-based importance in trees": [[1017, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[187, "release-highlights"], [324, null]], "Release Highlights for scikit-learn 0.22": [[325, null]], "Release Highlights for scikit-learn 0.23": [[326, null]], "Release Highlights for scikit-learn 0.24": [[327, null]], "Release Highlights for scikit-learn 1.0": [[328, null]], "Release Highlights for scikit-learn 1.1": [[329, null]], "Release Highlights for scikit-learn 1.2": [[330, null]], "Release Highlights for scikit-learn 1.3": [[331, null]], "Release Highlights for scikit-learn 1.4": [[332, null]], "Release Highlights for scikit-learn 1.5": [[333, null]], "Release History": [[1038, null]], "Releasing": [[387, "releasing"]], "Remarks": [[248, "remarks"]], "Removed modules": [[1040, "removed-modules"]], "Removing features with low variance": [[424, "removing-features-with-low-variance"]], "Repeated K-Fold": [[419, "repeated-k-fold"]], "RepeatedKFold": [[823, null]], "RepeatedStratifiedKFold": [[824, null]], "Replace missing values by 0": [[186, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[409, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[314, null]], "Restricted Boltzmann machines": [[1014, "restricted-boltzmann-machines"]], "Results interpretation": [[295, "results-interpretation"]], "Retrieve dataframes from OpenML": [[325, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[246, "rich-html-representation"]], "Rich visual representation of estimators": [[326, "rich-visual-representation-of-estimators"]], "Ridge": [[680, null]], "Ridge Complexity": [[1005, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[221, null]], "Ridge regression and classification": [[1005, "ridge-regression-and-classification"]], "RidgeCV": [[681, null]], "RidgeClassifier": [[682, null]], "RidgeClassifierCV": [[683, null]], "Roadmap": [[1029, null]], "Robust Covariance Estimation": [[417, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[113, null]], "Robust linear estimator fitting": [[223, null]], "Robust linear model estimation using RANSAC": [[220, null]], "Robust vs Empirical covariance estimate": [[114, null]], "RobustScaler": [[316, "robustscaler"], [890, null]], "Robustness of cross-validation results": [[366, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[1005, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[998, "robustness-to-failure"]], "RocCurveDisplay": [[710, null]], "Roles And Responsibilities": [[398, "roles-and-responsibilities"]], "Rolling your own estimator": [[385, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[251, "routing-meta-estimator"]], "Run the benchmark": [[93, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[279, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[381, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1009, "r2-score-the-coefficient-of-determination"]], "SGD": [[1023, "id5"]], "SGD: Maximum margin separating hyperplane": [[229, null]], "SGD: Penalties": [[228, null]], "SGD: Weighted samples": [[230, null]], "SGD: convex loss functions": [[227, null]], "SGDClassifier": [[684, null]], "SGDOneClassSVM": [[685, null]], "SGDRegressor": [[686, null]], "SKLEARN_ASSUME_FINITE": [[371, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[371, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[371, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[371, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[371, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[371, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[371, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[371, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[371, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[371, "sklearn-working-memory"]], "SVC": [[917, null], [1024, "svc"]], "SVM Exercise": [[165, null]], "SVM Margins Example": [[351, null]], "SVM Tie Breaking Example": [[354, null]], "SVM with custom kernel": [[342, null]], "SVM-Anova: SVM with univariate feature selection": [[349, null]], "SVM: Maximum margin separating hyperplane": [[347, null]], "SVM: Separating hyperplane for unbalanced classes": [[348, null]], "SVM: Weighted samples": [[355, null]], "SVR": [[918, null], [1024, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[377, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[276, null]], "Sample weight support": [[422, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[326, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[326, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[195, null]], "Scale Invariance": [[90, "scale-invariance"]], "Scaling data with outliers": [[1019, "scaling-data-with-outliers"]], "Scaling features to a range": [[1019, "scaling-features-to-a-range"]], "Scaling sparse data": [[1019, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[353, null]], "Scaling up the One-Class SVM": [[1015, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[372, "scaling-with-instances-using-out-of-core-learning"]], "Scatter Plot of the Iris dataset": [[120, "scatter-plot-of-the-iris-dataset"]], "Scatter plot of scores": [[117, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[398, null]], "Scores and probabilities": [[1024, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[998, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1058, "security"]], "Security & Maintainability Limitations": [[409, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[81, null]], "SelectFdr": [[603, null]], "SelectFpr": [[604, null]], "SelectFromModel": [[605, null]], "SelectFwe": [[606, null]], "SelectKBest": [[607, null]], "SelectPercentile": [[608, null]], "Selecting Lasso via an information criterion": [[206, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[206, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[106, null]], "Selecting features based on importance": [[172, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[172, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[95, null]], "SelectorMixin": [[609, null]], "Self Training": [[1022, "self-training"]], "SelfTrainingClassifier": [[909, null]], "Semi Supervised Classification": [[187, "semi-supervised-classification"], [334, null]], "Semi-supervised Classification on a Text Dataset": [[339, null]], "Semi-supervised learning": [[335, "semi-supervised-learning"], [1022, null]], "Sequence similarity matrix under the kernel": [[182, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[424, "sequential-feature-selection"]], "SequentialFeatureSelector": [[610, null]], "Serving the model artifact": [[409, "serving-the-model-artifact"]], "Setting regularization parameter": [[1005, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[1005, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[235, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[1003, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[111, null]], "Shrinkage via learning rate": [[422, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[417, "shrunk-covariance"]], "ShrunkCovariance": [[483, null]], "ShuffleSplit": [[825, null]], "Sigmoid": [[413, "sigmoid"]], "Sigmoid kernel": [[350, "sigmoid-kernel"], [1007, "sigmoid-kernel"]], "Silhouette Coefficient": [[415, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[301, null]], "Simple Pipeline": [[251, "simple-pipeline"]], "SimpleImputer": [[638, null]], "Single estimator versus bagging: bias-variance decomposition": [[140, null]], "Single label": [[379, "single-label"]], "Skewed Chi Squared Kernel": [[1001, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[650, null]], "Social Media": [[1032, "social-media"]], "Solvers": [[1005, "solvers"]], "Sparse coding with a precomputed dictionary": [[132, null], [420, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[123, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1019, null]], "Sparse inverse covariance": [[417, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[115, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[420, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1021, "sparse-random-projection"]], "SparseCoder": [[550, null]], "SparsePCA": [[551, null]], "SparseRandomProjection": [[905, null]], "Sparsity": [[423, "sparsity"]], "Sparsity Example: Fitting only features 1  and 2": [[214, null]], "Species distribution dataset": [[378, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specific models": [[385, "specific-models"]], "Specifying an objective metric": [[998, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[998, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[412, "spectral-biclustering"]], "Spectral Clustering Graphs": [[415, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[412, "spectral-co-clustering"]], "Spectral Embedding": [[1006, "spectral-embedding"]], "Spectral clustering": [[415, "spectral-clustering"]], "Spectral clustering for image segmentation": [[101, null]], "Spectral embedding for non-linear dimensionality reduction": [[237, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[458, null]], "SpectralClustering": [[459, null]], "SpectralCoclustering": [[460, null]], "SpectralEmbedding": [[699, null]], "Sphinx version": [[383, null]], "Spline Transformers": [[328, "spline-transformers"]], "Spline transformer": [[1019, "spline-transformer"]], "SplineTransformer": [[891, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1033, "id2"]], "Stack of predictors on a single data set": [[158, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[422, "stacked-generalization"]], "Stacking Classifier and Regressor": [[325, "stacking-classifier-and-regressor"]], "StackingClassifier": [[575, null]], "StackingRegressor": [[576, null]], "Stalled and Unclaimed Issues": [[383, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[383, "stalled-pull-requests"]], "Standard replies for reviewing": [[391, "standard-replies-for-reviewing"]], "StandardScaler": [[316, "standardscaler"], [892, null]], "Standardization, or mean removal and variance scaling": [[1019, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1029, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[275, null]], "Statistical learning with Python": [[1028, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1023, null]], "Stochastic Gradient Descent - SGD": [[1005, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1023, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1014, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1023, "stopping-criterion"]], "Strategies comparison": [[293, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[372, null]], "Stratified Shuffle Split": [[419, "stratified-shuffle-split"]], "Stratified k-fold": [[419, "stratified-k-fold"]], "StratifiedGroupKFold": [[419, "stratifiedgroupkfold"], [826, null]], "StratifiedKFold": [[827, null]], "StratifiedShuffleSplit": [[828, null]], "Streaming instances": [[372, "streaming-instances"]], "Submitting a bug report or a feature request": [[383, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1029, "subpackage-specific-goals"]], "Subsampling": [[422, "subsampling"]], "Successive Halving Iterations": [[287, null]], "Successive Halving estimators for tuning hyper-parameters": [[327, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[632, null]], "Summarizing the key points": [[409, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [148, "summary"], [359, "summary"]], "Summary of cross-validation approach": [[206, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[409, "id2"]], "Supervised learning": [[1031, null]], "Support": [[1032, null]], "Support Vector Machines": [[187, "support-vector-machines"], [341, null], [1024, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[352, null]], "Support for Array API": [[1057, "support-for-array-api"], [1058, "support-for-array-api"], [1059, "support-for-array-api"]], "Support for Array API-compatible inputs": [[411, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1057, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1058, "support-for-building-with-meson"]], "Support for missing values": [[153, "support-for-missing-values"]], "Support for quantile loss": [[153, "support-for-quantile-loss"]], "Swiss Roll": [[241, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[241, null]], "Swiss-Hole": [[241, "swiss-hole"]], "Synthetic dataset": [[388, "synthetic-dataset"]], "Synthetic example": [[109, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[237, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[700, null]], "Table of Contents": [[395, "table-of-contents"]], "Tags": [[931, null]], "Take-home messages": [[275, "take-home-messages"]], "Target Encoder": [[1019, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[323, null]], "Target Types": [[397, "target-types"]], "Target format": [[1010, "target-format"], [1010, "id5"], [1010, "id8"], [1010, "id10"]], "TargetEncoder": [[893, null]], "TargetEncoder: a new category encoding strategy": [[331, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[932, null]], "Technical Committee": [[398, "technical-committee"]], "Test dependencies": [[381, "test-dependencies"]], "Test with permutations the significance of a classification score": [[281, null]], "Testing Functions": [[392, "testing-functions"]], "Testing and improving test coverage": [[383, "testing-and-improving-test-coverage"]], "Text feature extraction": [[423, "text-feature-extraction"]], "TfidfTransformer": [[598, null]], "TfidfVectorizer": [[359, "tfidfvectorizer"], [599, null]], "Tf\u2013idf term weighting": [[423, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[378, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[423, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1008, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[217, "the-french-motor-third-party-liability-claims-dataset"]], "The Iris Dataset": [[120, null]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[248, null]], "The Johnson-Lindenstrauss lemma": [[1021, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[378, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[391, "the-meson-build-backend"]], "The Olivetti faces dataset": [[378, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[293, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[282, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[269, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[419, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[118, "the-data"]], "The dataset": [[273, "the-dataset"]], "The dataset: simulated hourly wages": [[189, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[190, "the-dataset-wages"]], "The diabetes dataset": [[289, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[293, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[190, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[190, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[387, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1009, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[234, null]], "Theil-Sen estimator: generalized-median-based estimator": [[1005, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[687, null]], "Theoretical bounds": [[248, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[251, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[401, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[419, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[829, null]], "Timing and accuracy plots": [[249, "timing-and-accuracy-plots"]], "Tips and Tricks": [[370, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[384, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[998, "tips-for-parameter-search"]], "Tips for performance": [[384, "tips-for-performance"]], "Tips on Practical Use": [[1013, "tips-on-practical-use"], [1023, "tips-on-practical-use"], [1024, "tips-on-practical-use"]], "Tips on practical use": [[1006, "tips-on-practical-use"], [1025, "tips-on-practical-use"]], "Tips to ease development": [[384, "tips-to-ease-development"]], "Tools": [[411, "tools"]], "Top terms per cluster": [[358, "top-terms-per-cluster"]], "Top-k accuracy score": [[1009, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[361, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[422, "totally-random-trees-embedding"]], "Toy datasets": [[380, null]], "Tracking feature names in a pipeline": [[416, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[1005, null]], "Train and Persist the Model": [[409, "train-and-persist-the-model"]], "Train classifiers": [[346, "train-classifiers"]], "Train error vs Test error": [[288, null]], "Train models on the diabetes dataset": [[255, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[365, "train-tree-classifier"]], "Training": [[314, "training"], [1012, "training"]], "Training SVC model and plotting decision boundaries": [[350, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[257, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[323, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[322, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[138, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[161, "training-classifiers"]], "Training of the model": [[154, "training-of-the-model"]], "Training the AdaBoostClassifier": [[137, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[221, "training-the-ridge-regressor"]], "Transform": [[1012, "transform"]], "Transform data": [[117, "transform-data"]], "TransformedTargetRegressor": [[472, null]], "TransformerMixin": [[439, null]], "TransformerTags": [[933, null]], "Transformers and pre-processors": [[396, "transformers-and-pre-processors"]], "Transforming target in regression": [[416, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1020, null]], "Translations of scikit-learn documentation": [[1028, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1025, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[325, "tree-pruning"]], "Tree structure": [[365, "tree-structure"]], "Tree-based feature selection": [[424, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[192, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[382, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[401, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[420, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[552, null]], "TunedThresholdClassifierCV": [[830, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[333, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[273, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[269, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[269, "tuning-the-decision-threshold"], [289, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[414, null]], "Tuning the hyper-parameters of an estimator": [[998, null]], "Tuning the hyper-parameters of the quantile regressors": [[150, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[162, null], [187, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[235, null]], "TweedieRegressor": [[688, null]], "Two-class AdaBoost": [[139, null]], "Type of return values and fitted attributes": [[411, "type-of-return-values-and-fitted-attributes"]], "Types": [[384, "types"]], "T\u00e9l\u00e9com ParisTech": [[1033, "id7"]], "Unbalanced problems": [[1024, "unbalanced-problems"]], "UndefinedMetricWarning": [[586, null]], "Under Development": [[1035, "under-development"]], "Underfitting vs. Overfitting": [[290, null]], "Understanding the decision tree structure": [[365, null]], "Univariate Feature Selection": [[168, null]], "Univariate feature imputation": [[999, "univariate-feature-imputation"]], "Univariate feature selection": [[168, "id1"], [424, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[999, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[385, "universal-attributes"]], "Unlabeled entries in y": [[1022, null]], "Unsupervised Nearest Neighbors": [[1012, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1026, null]], "Unsupervised learning": [[1034, null]], "Unweighted feature selection": [[406, "unweighted-feature-selection"]], "Updating Authors List": [[387, "updating-authors-list"]], "Usage": [[413, "usage"], [416, "usage"], [416, "id1"], [422, "usage"], [422, "id24"], [422, "id25"], [422, "id27"], [422, "id35"], [1005, "usage"]], "Usage Examples": [[406, "usage-examples"]], "Use markdown formatting": [[388, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[391, "useful-pytest-aliases-and-flags"]], "User Guide": [[1035, null]], "User Questions": [[1032, "user-questions"]], "Using Cython": [[389, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[317, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[366, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[384, "using-openmp"]], "Using a debugger, gdb": [[389, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[391, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[1005, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[419, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[155, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[389, "using-gprof"]], "Using multiple metric evaluation": [[1009, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[172, "using-negative-tolerance-values"]], "Using scikit-learn": [[395, "using-scikit-learn"]], "Using stop words": [[423, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[389, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[389, "using-yep-and-gperftools"]], "Utilities for Developers": [[392, null]], "Validation Tools": [[392, "validation-tools"]], "Validation curve": [[1004, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[1004, null]], "ValidationCurveDisplay": [[831, null]], "Vanilla predictive model": [[269, "vanilla-predictive-model"]], "VarianceThreshold": [[611, null]], "Variational Bayesian Gaussian Mixture": [[1008, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[87, null]], "Varying regularization in Multi-layer Perceptron": [[311, null]], "Varying the metric": [[415, "varying-the-metric"]], "Vector Quantization Example": [[88, null]], "Vectorizing a large text corpus with the hashing trick": [[423, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1040, "version-0-10"]], "Version 0.11": [[1040, "version-0-11"]], "Version 0.12": [[1040, "version-0-12"]], "Version 0.12.1": [[1040, "version-0-12-1"]], "Version 0.13": [[1041, null], [1041, "changes-0-13"]], "Version 0.13.1": [[1041, "version-0-13-1"]], "Version 0.14": [[1042, null], [1042, "changes-0-14"]], "Version 0.15": [[1043, null], [1043, "changes-0-15"]], "Version 0.15.1": [[1043, "version-0-15-1"]], "Version 0.15.2": [[1043, "version-0-15-2"]], "Version 0.16": [[1044, null], [1044, "changes-0-16"]], "Version 0.16.1": [[1044, "version-0-16-1"]], "Version 0.17": [[1045, null], [1045, "changes-0-17"]], "Version 0.17.1": [[1045, "version-0-17-1"]], "Version 0.18": [[1046, null], [1046, "changes-0-18"]], "Version 0.18.1": [[1046, "version-0-18-1"]], "Version 0.18.2": [[1046, "version-0-18-2"]], "Version 0.19": [[1047, null], [1047, "id1"]], "Version 0.19.1": [[1047, "version-0-19-1"]], "Version 0.19.2": [[1047, "version-0-19-2"]], "Version 0.20": [[1048, null]], "Version 0.20.0": [[1048, "version-0-20-0"]], "Version 0.20.1": [[1048, "version-0-20-1"]], "Version 0.20.2": [[1048, "version-0-20-2"]], "Version 0.20.3": [[1048, "version-0-20-3"]], "Version 0.20.4": [[1048, "version-0-20-4"]], "Version 0.21": [[1049, null]], "Version 0.21.0": [[1049, "version-0-21-0"]], "Version 0.21.1": [[1049, "version-0-21-1"]], "Version 0.21.2": [[1049, "version-0-21-2"]], "Version 0.21.3": [[1049, "version-0-21-3"]], "Version 0.22": [[1050, null]], "Version 0.22.0": [[1050, "version-0-22-0"]], "Version 0.22.1": [[1050, "version-0-22-1"]], "Version 0.22.2.post1": [[1050, "version-0-22-2-post1"]], "Version 0.23": [[1051, null]], "Version 0.23.0": [[1051, "version-0-23-0"]], "Version 0.23.1": [[1051, "version-0-23-1"]], "Version 0.23.2": [[1051, "version-0-23-2"]], "Version 0.24": [[1052, null]], "Version 0.24.0": [[1052, "version-0-24-0"]], "Version 0.24.1": [[1052, "version-0-24-1"]], "Version 0.24.2": [[1052, "version-0-24-2"]], "Version 0.4": [[1040, "version-0-4"]], "Version 0.5": [[1040, "version-0-5"]], "Version 0.6": [[1040, "version-0-6"]], "Version 0.7": [[1040, "version-0-7"]], "Version 0.8": [[1040, "version-0-8"]], "Version 0.9": [[1040, "version-0-9"]], "Version 1.0": [[1053, null]], "Version 1.0.0": [[1053, "version-1-0-0"]], "Version 1.0.1": [[1053, "version-1-0-1"]], "Version 1.0.2": [[1053, "version-1-0-2"]], "Version 1.1": [[1054, null]], "Version 1.1.0": [[1054, "version-1-1-0"]], "Version 1.1.1": [[1054, "version-1-1-1"]], "Version 1.1.2": [[1054, "version-1-1-2"]], "Version 1.1.3": [[1054, "version-1-1-3"]], "Version 1.2": [[1055, null]], "Version 1.2.0": [[1055, "version-1-2-0"]], "Version 1.2.1": [[1055, "version-1-2-1"]], "Version 1.2.2": [[1055, "version-1-2-2"]], "Version 1.3": [[1056, null]], "Version 1.3.0": [[1056, "version-1-3-0"]], "Version 1.3.1": [[1056, "version-1-3-1"]], "Version 1.3.2": [[1056, "version-1-3-2"]], "Version 1.4": [[1057, null]], "Version 1.4.0": [[1057, "version-1-4-0"]], "Version 1.4.1": [[1057, "version-1-4-1"]], "Version 1.4.2": [[1057, "version-1-4-2"]], "Version 1.5": [[1058, null]], "Version 1.5.0": [[1058, "version-1-5-0"]], "Version 1.5.1": [[1058, "version-1-5-1"]], "Version 1.5.2": [[1058, "version-1-5-2"]], "Version 1.6": [[1059, null]], "Version 1.6.0": [[1059, "version-1-6-0"]], "Video resources": [[383, "video-resources"]], "Videos": [[1027, "videos"]], "Visual evaluation of regression models": [[1009, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [29, "visualization"], [51, "visualization"], [346, "visualization"]], "Visualization of MLP weights on MNIST": [[313, null]], "Visualization of cluster hierarchy": [[415, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1037, null]], "Visualizations with Display Objects": [[245, null]], "Visualize Comparison": [[148, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[270, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[270, "visualize-our-data"]], "Visualize the learning curves": [[250, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[93, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[250, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[416, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[270, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[422, "voting-classifier"]], "Voting Regressor": [[422, "voting-regressor"]], "VotingClassifier": [[577, null]], "VotingRegressor": [[578, null]], "Warnings and Exceptions": [[392, "warnings-and-exceptions"]], "Ways to contribute": [[383, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[102, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1050, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[422, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[406, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[406, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[395, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[395, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[365, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[395, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[633, null]], "Who is using scikit-learn?": [[1033, null]], "Why are there so many different estimators for linear models?": [[395, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[395, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[395, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[395, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[395, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[395, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why does scikit-learn not directly work with, for example, pandas.DataFrame?": [[395, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Why is my pull request not getting any attention?": [[395, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[395, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[422, "why-it-s-faster"]], "Why scikit?": [[395, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[395, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[395, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[401, "winpython-for-windows"]], "Windows": [[381, "windows"]], "Wine recognition dataset": [[380, "wine-recognition-dataset"]], "Workflow Overview": [[409, "workflow-overview"]], "Working on PRs to help review": [[382, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[382, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[187, "working-with-text-documents"], [356, null]], "Wrong causal interpretation": [[190, "wrong-causal-interpretation"]], "XOR dataset": [[350, "xor-dataset"]], "Yhat": [[1033, "id10"]], "Zero one loss": [[1009, "zero-one-loss"]], "Zopa": [[1033, "id27"]], "__sklearn_is_fitted__ as Developer API": [[135, null]], "_safe_indexing": [[934, null]], "accuracy_score": [[711, null]], "add_dummy_feature": [[894, null]], "additive_chi2_kernel": [[766, null]], "adjusted_mutual_info_score": [[712, null]], "adjusted_rand_score": [[713, null]], "affinity_propagation": [[461, null]], "all_displays": [[947, null]], "all_estimators": [[948, null]], "all_functions": [[949, null]], "as_float_array": [[936, null]], "assert_all_finite": [[937, null]], "auc": [[714, null]], "available_if": [[969, null]], "average_precision_score": [[715, null]], "balanced_accuracy_score": [[716, null]], "betaworks": [[1033, "id4"]], "binarize": [[895, null]], "brier_score_loss": [[717, null]], "calibration_curve": [[446, null]], "calinski_harabasz_score": [[718, null]], "check_X_y": [[938, null]], "check_array": [[939, null]], "check_consistent_length": [[940, null]], "check_cv": [[832, null]], "check_estimator": [[950, null]], "check_increasing": [[644, null]], "check_is_fitted": [[992, null]], "check_memory": [[993, null]], "check_random_state": [[941, null]], "check_scalar": [[942, null]], "check_scoring": [[719, null]], "check_symmetric": [[994, null]], "chi2": [[612, null]], "chi2_kernel": [[767, null]], "class_likelihood_ratios": [[720, null]], "classification_report": [[721, null]], "clear_data_home": [[493, null]], "clone": [[440, null]], "cluster_optics_dbscan": [[462, null]], "cluster_optics_xi": [[463, null]], "cohen_kappa_score": [[724, null]], "column_or_1d": [[995, null]], "completeness_score": [[725, null]], "compute_class_weight": [[943, null]], "compute_optics_graph": [[464, null]], "compute_sample_weight": [[944, null]], "config_context": [[475, null]], "confusion_matrix": [[726, null]], "consensus_score": [[727, null]], "contingency_matrix": [[722, null]], "cosine_distances": [[768, null]], "cosine_similarity": [[769, null]], "coverage_error": [[728, null]], "cross_val_predict": [[833, null]], "cross_val_score": [[834, null]], "cross_validate": [[835, null]], "d2_absolute_error_score": [[729, null]], "d2_log_loss_score": [[730, null]], "d2_pinball_score": [[731, null]], "d2_tweedie_score": [[732, null]], "davies_bouldin_score": [[733, null]], "dbscan": [[426, null]], "dbscan_clustering": [[90, "dbscan-clustering"]], "dcg_score": [[734, null]], "default_tags": [[945, null]], "delayed": [[975, null]], "density": [[953, null]], "deprecated": [[946, null]], "det_curve": [[735, null]], "dict_learning": [[553, null]], "dict_learning_online": [[554, null]], "distance_metrics": [[770, null]], "dump_svmlight_file": [[494, null]], "empirical_covariance": [[484, null]], "enable_halving_search_cv": [[587, null]], "enable_iterative_imputer": [[588, null]], "enet_path": [[689, null]], "estimate_bandwidth": [[465, null]], "estimator_html_repr": [[952, null]], "euclidean_distances": [[771, null]], "explained_variance_score": [[736, null]], "export_graphviz": [[924, null]], "export_text": [[925, null]], "extract_patches_2d": [[592, null]], "f1_score": [[737, null]], "f_classif": [[613, null]], "f_regression": [[614, null]], "fast_logdet": [[954, null]], "fastica": [[427, null]], "fbeta_score": [[738, null]], "fetch_20newsgroups": [[495, null]], "fetch_20newsgroups_vectorized": [[496, null]], "fetch_california_housing": [[497, null]], "fetch_covtype": [[498, null]], "fetch_file": [[499, null]], "fetch_kddcup99": [[500, null]], "fetch_lfw_pairs": [[501, null]], "fetch_lfw_people": [[502, null]], "fetch_olivetti_faces": [[503, null]], "fetch_openml": [[504, null]], "fetch_rcv1": [[505, null]], "fetch_species_distributions": [[506, null]], "fowlkes_mallows_score": [[739, null]], "gen_batches": [[959, null]], "gen_even_slices": [[960, null]], "get_config": [[634, null]], "get_data_home": [[507, null]], "get_feature_names_out Available in all Transformers": [[329, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[385, "get-params-and-set-params"]], "get_routing_for_object": [[967, null]], "get_scorer": [[740, null]], "get_scorer_names": [[741, null]], "get_tags": [[961, null]], "graphical_lasso": [[485, null]], "grid_to_graph": [[593, null]], "hamming_loss": [[742, null]], "has_fit_parameter": [[996, null]], "haversine_distances": [[772, null]], "hinge_loss": [[743, null]], "homogeneity_completeness_v_measure": [[744, null]], "homogeneity_score": [[745, null]], "img_to_graph": [[594, null]], "incr_mean_variance_axis": [[983, null]], "indexable": [[963, null]], "inplace_column_scale": [[984, null]], "inplace_csr_column_scale": [[985, null]], "inplace_csr_row_normalize_l1": [[990, null]], "inplace_csr_row_normalize_l2": [[991, null]], "inplace_row_scale": [[986, null]], "inplace_swap_column": [[987, null]], "inplace_swap_row": [[988, null]], "is_classifier": [[441, null]], "is_clusterer": [[442, null]], "is_multilabel": [[970, null]], "is_regressor": [[443, null]], "isotonic_regression": [[645, null]], "jaccard_score": [[746, null]], "johnson_lindenstrauss_min_dim": [[906, null]], "kNN-imputation of the missing values": [[186, "knn-imputation-of-the-missing-values"]], "k_means": [[466, null]], "kcachegrind": [[389, "kcachegrind"]], "kernel_metrics": [[773, null]], "kmeans_plusplus": [[467, null]], "kneighbors_graph": [[865, null]], "l1_min_c": [[919, null]], "label_binarize": [[896, null]], "label_ranking_average_precision_score": [[747, null]], "label_ranking_loss": [[748, null]], "laplacian_kernel": [[774, null]], "lars_path": [[690, null]], "lars_path_gram": [[691, null]], "lasso_path": [[692, null]], "learning_curve": [[836, null]], "ledoit_wolf": [[486, null]], "ledoit_wolf_shrinkage": [[487, null]], "linear_kernel": [[775, null]], "load_breast_cancer": [[508, null]], "load_diabetes": [[509, null]], "load_digits": [[510, null]], "load_files": [[511, null]], "load_iris": [[512, null]], "load_linnerud": [[513, null]], "load_sample_image": [[514, null]], "load_sample_images": [[515, null]], "load_svmlight_file": [[516, null]], "load_svmlight_files": [[517, null]], "load_wine": [[518, null]], "locally_linear_embedding": [[701, null]], "log_loss": [[749, null]], "macOS": [[381, "macos"]], "macOS compilers from Homebrew": [[381, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[381, "macos-compilers-from-conda-forge"]], "make_biclusters": [[519, null]], "make_blobs": [[388, "make-blobs"], [520, null]], "make_checkerboard": [[521, null]], "make_circles": [[522, null]], "make_classification": [[388, "make-classification"], [523, null]], "make_column_selector": [[473, null]], "make_column_transformer": [[474, null]], "make_friedman1": [[524, null]], "make_friedman2": [[525, null]], "make_friedman3": [[526, null]], "make_gaussian_quantiles": [[527, null]], "make_hastie_10_2": [[528, null]], "make_low_rank_matrix": [[529, null]], "make_moons": [[530, null]], "make_multilabel_classification": [[531, null]], "make_pipeline": [[873, null]], "make_regression": [[388, "make-regression"], [532, null]], "make_s_curve": [[533, null]], "make_scorer": [[750, null]], "make_sparse_coded_signal": [[534, null]], "make_sparse_spd_matrix": [[535, null]], "make_sparse_uncorrelated": [[536, null]], "make_spd_matrix": [[537, null]], "make_swiss_roll": [[538, null]], "make_union": [[874, null]], "manhattan_distances": [[776, null]], "matthews_corrcoef": [[751, null]], "max_error": [[752, null]], "maxabs_scale": [[897, null]], "mean_absolute_error": [[753, null]], "mean_absolute_percentage_error": [[754, null]], "mean_gamma_deviance": [[755, null]], "mean_pinball_loss": [[756, null]], "mean_poisson_deviance": [[757, null]], "mean_shift": [[468, null]], "mean_squared_error": [[758, null]], "mean_squared_log_error": [[759, null]], "mean_tweedie_deviance": [[760, null]], "mean_variance_axis": [[989, null]], "median_absolute_error": [[761, null]], "min_cluster_size": [[90, "min-cluster-size"]], "min_pos": [[935, null]], "min_samples": [[90, "min-samples"]], "minmax_scale": [[898, null]], "multilabel_confusion_matrix": [[762, null]], "murmurhash3_32": [[973, null]], "mutual_info_classif": [[615, null]], "mutual_info_regression": [[616, null]], "mutual_info_score": [[763, null]], "nan_euclidean_distances": [[777, null]], "ndcg_score": [[764, null]], "non_negative_factorization": [[555, null]], "normalize": [[899, null]], "normalized_mutual_info_score": [[765, null]], "oas": [[428, null]], "orthogonal_mp": [[693, null]], "orthogonal_mp_gram": [[694, null]], "pair_confusion_matrix": [[723, null]], "paired_cosine_distances": [[778, null]], "paired_distances": [[779, null]], "paired_euclidean_distances": [[780, null]], "paired_manhattan_distances": [[781, null]], "pairwise_distances": [[786, null]], "pairwise_distances_argmin": [[787, null]], "pairwise_distances_argmin_min": [[788, null]], "pairwise_distances_chunked": [[789, null]], "pairwise_kernels": [[782, null]], "parallel_backend": [[976, null]], "parametrize_with_checks": [[951, null]], "partial_dependence": [[641, null]], "permutation_importance": [[642, null]], "permutation_test_score": [[837, null]], "pickle, joblib, and cloudpickle": [[409, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[926, null]], "polynomial_kernel": [[783, null]], "power_transform": [[900, null]], "precision_recall_curve": [[790, null]], "precision_recall_fscore_support": [[791, null]], "precision_score": [[792, null]], "process_routing": [[968, null]], "quantile_transform": [[901, null]], "r2_score": [[793, null]], "r_regression": [[617, null]], "radius_neighbors_graph": [[866, null]], "rand_score": [[794, null]], "randomized_range_finder": [[955, null]], "randomized_svd": [[956, null]], "rbf_kernel": [[784, null]], "recall_score": [[795, null]], "reconstruct_from_patches_2d": [[595, null]], "register_parallel_backend": [[978, null]], "resample": [[979, null]], "ridge_regression": [[695, null]], "robust_scale": [[902, null]], "roc_auc_score": [[796, null]], "roc_curve": [[797, null]], "root_mean_squared_error": [[798, null]], "root_mean_squared_log_error": [[799, null]], "safe_mask": [[980, null]], "safe_sparse_dot": [[957, null]], "safe_sqr": [[981, null]], "sample_without_replacement": [[977, null]], "scale": [[903, null]], "set_config": [[910, null]], "show_versions": [[911, null]], "shrunk_covariance": [[488, null]], "shuffle": [[982, null]], "sigmoid_kernel": [[785, null]], "silhouette_samples": [[800, null]], "silhouette_score": [[801, null]], "single_source_shortest_path_length": [[962, null]], "sklearn": [[3, null], [1056, "sklearn"]], "sklearn.base": [[4, null], [1049, "sklearn-base"], [1050, "sklearn-base"], [1052, "sklearn-base"], [1053, "sklearn-base"], [1054, "sklearn-base"], [1055, "sklearn-base"], [1055, "id2"], [1055, "id10"], [1056, "sklearn-base"], [1057, "sklearn-base"], [1059, "sklearn-base"]], "sklearn.calibration": [[5, null], [1049, "sklearn-calibration"], [1050, "sklearn-calibration"], [1052, "sklearn-calibration"], [1053, "sklearn-calibration"], [1053, "id7"], [1054, "sklearn-calibration"], [1055, "sklearn-calibration"], [1055, "id11"], [1056, "sklearn-calibration"], [1056, "id7"], [1057, "sklearn-calibration"], [1057, "id4"], [1058, "sklearn-calibration"], [1058, "id7"]], "sklearn.cluster": [[6, null], [1048, "sklearn-cluster"], [1048, "id2"], [1048, "id11"], [1048, "id24"], [1049, "sklearn-cluster"], [1049, "id8"], [1050, "sklearn-cluster"], [1050, "id5"], [1051, "sklearn-cluster"], [1051, "id2"], [1051, "id5"], [1052, "sklearn-cluster"], [1053, "sklearn-cluster"], [1053, "id1"], [1053, "id8"], [1054, "sklearn-cluster"], [1054, "id8"], [1055, "sklearn-cluster"], [1055, "id12"], [1056, "sklearn-cluster"], [1056, "id8"], [1057, "sklearn-cluster"], [1057, "id5"], [1058, "sklearn-cluster"], [1059, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1048, "sklearn-compose"], [1048, "id3"], [1048, "id6"], [1048, "id12"], [1048, "id25"], [1049, "sklearn-compose"], [1049, "id9"], [1050, "sklearn-compose"], [1051, "sklearn-compose"], [1052, "sklearn-compose"], [1052, "id5"], [1053, "sklearn-compose"], [1054, "sklearn-compose"], [1055, "sklearn-compose"], [1056, "sklearn-compose"], [1057, "sklearn-compose"], [1057, "id6"], [1058, "sklearn-compose"], [1058, "id3"], [1058, "id8"], [1059, "sklearn-compose"]], "sklearn.covariance": [[8, null], [1048, "sklearn-covariance"], [1048, "id26"], [1052, "sklearn-covariance"], [1053, "sklearn-covariance"], [1054, "sklearn-covariance"], [1056, "sklearn-covariance"], [1057, "sklearn-covariance"], [1059, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1050, "sklearn-cross-decomposition"], [1052, "sklearn-cross-decomposition"], [1052, "id6"], [1054, "sklearn-cross-decomposition"], [1056, "sklearn-cross-decomposition"], [1058, "sklearn-cross-decomposition"], [1059, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1048, "sklearn-datasets"], [1048, "id13"], [1048, "id27"], [1049, "sklearn-datasets"], [1049, "id10"], [1050, "sklearn-datasets"], [1051, "sklearn-datasets"], [1052, "sklearn-datasets"], [1053, "sklearn-datasets"], [1053, "id9"], [1054, "sklearn-datasets"], [1054, "id9"], [1055, "sklearn-datasets"], [1055, "id13"], [1056, "sklearn-datasets"], [1056, "id9"], [1057, "sklearn-datasets"], [1058, "sklearn-datasets"], [1059, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1048, "sklearn-decomposition"], [1048, "id4"], [1048, "id14"], [1048, "id28"], [1049, "sklearn-decomposition"], [1049, "id11"], [1050, "sklearn-decomposition"], [1051, "sklearn-decomposition"], [1051, "id6"], [1052, "sklearn-decomposition"], [1052, "id7"], [1053, "sklearn-decomposition"], [1053, "id10"], [1054, "sklearn-decomposition"], [1054, "id10"], [1055, "sklearn-decomposition"], [1055, "id14"], [1056, "sklearn-decomposition"], [1056, "id10"], [1057, "sklearn-decomposition"], [1058, "sklearn-decomposition"], [1058, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1048, "sklearn-discriminant-analysis"], [1049, "sklearn-discriminant-analysis"], [1052, "sklearn-discriminant-analysis"], [1054, "sklearn-discriminant-analysis"], [1055, "sklearn-discriminant-analysis"], [1056, "sklearn-discriminant-analysis"], [1059, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1048, "sklearn-dummy"], [1049, "sklearn-dummy"], [1050, "sklearn-dummy"], [1053, "sklearn-dummy"], [1054, "sklearn-dummy"], [1058, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1048, "sklearn-ensemble"], [1048, "id29"], [1049, "sklearn-ensemble"], [1049, "id12"], [1050, "sklearn-ensemble"], [1051, "sklearn-ensemble"], [1051, "id7"], [1052, "sklearn-ensemble"], [1052, "id8"], [1053, "sklearn-ensemble"], [1053, "id2"], [1053, "id11"], [1054, "sklearn-ensemble"], [1055, "sklearn-ensemble"], [1055, "id3"], [1055, "id15"], [1056, "sklearn-ensemble"], [1056, "id11"], [1057, "sklearn-ensemble"], [1057, "id7"], [1058, "sklearn-ensemble"], [1059, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1052, "sklearn-exceptions"], [1056, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1049, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1048, "sklearn-feature-extraction"], [1048, "id15"], [1048, "id30"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"], [1051, "id8"], [1052, "sklearn-feature-extraction"], [1052, "id9"], [1053, "sklearn-feature-extraction"], [1053, "id12"], [1054, "sklearn-feature-extraction"], [1055, "sklearn-feature-extraction"], [1056, "sklearn-feature-extraction"], [1057, "sklearn-feature-extraction"], [1058, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[18, null], [1048, "sklearn-feature-selection"], [1050, "sklearn-feature-selection"], [1051, "sklearn-feature-selection"], [1052, "sklearn-feature-selection"], [1053, "sklearn-feature-selection"], [1053, "id13"], [1054, "sklearn-feature-selection"], [1054, "id2"], [1054, "id11"], [1055, "sklearn-feature-selection"], [1055, "id16"], [1056, "sklearn-feature-selection"], [1056, "id12"], [1057, "sklearn-feature-selection"], [1058, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, null], [1048, "sklearn-gaussian-process"], [1050, "sklearn-gaussian-process"], [1051, "sklearn-gaussian-process"], [1052, "sklearn-gaussian-process"], [1052, "id10"], [1053, "sklearn-gaussian-process"], [1054, "sklearn-gaussian-process"], [1055, "sklearn-gaussian-process"], [1056, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1048, "sklearn-impute"], [1048, "id31"], [1049, "sklearn-impute"], [1049, "id13"], [1050, "sklearn-impute"], [1050, "id6"], [1051, "sklearn-impute"], [1052, "sklearn-impute"], [1053, "sklearn-impute"], [1054, "sklearn-impute"], [1054, "id12"], [1055, "sklearn-impute"], [1056, "sklearn-impute"], [1056, "id13"], [1057, "sklearn-impute"], [1058, "sklearn-impute"], [1059, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1049, "sklearn-inspection"], [1049, "id3"], [1049, "id14"], [1050, "sklearn-inspection"], [1050, "id7"], [1051, "sklearn-inspection"], [1051, "id11"], [1052, "sklearn-inspection"], [1053, "sklearn-inspection"], [1054, "sklearn-inspection"], [1055, "sklearn-inspection"], [1055, "id17"], [1056, "sklearn-inspection"], [1057, "sklearn-inspection"], [1057, "id8"], [1058, "sklearn-inspection"]], "sklearn.isotonic": [[22, null], [1048, "sklearn-isotonic"], [1049, "sklearn-isotonic"], [1050, "sklearn-isotonic"], [1052, "sklearn-isotonic"], [1054, "sklearn-isotonic"], [1055, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1050, "sklearn-kernel-approximation"], [1052, "sklearn-kernel-approximation"], [1053, "sklearn-kernel-approximation"], [1054, "sklearn-kernel-approximation"], [1055, "sklearn-kernel-approximation"], [1056, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1057, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1048, "sklearn-linear-model"], [1048, "id16"], [1048, "id32"], [1049, "sklearn-linear-model"], [1049, "id15"], [1050, "sklearn-linear-model"], [1051, "sklearn-linear-model"], [1051, "id9"], [1052, "sklearn-linear-model"], [1052, "id11"], [1053, "sklearn-linear-model"], [1053, "id3"], [1053, "id14"], [1054, "sklearn-linear-model"], [1054, "id13"], [1055, "sklearn-linear-model"], [1055, "id18"], [1056, "sklearn-linear-model"], [1057, "sklearn-linear-model"], [1057, "id9"], [1058, "sklearn-linear-model"], [1059, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1048, "sklearn-manifold"], [1049, "sklearn-manifold"], [1050, "sklearn-manifold"], [1051, "sklearn-manifold"], [1052, "sklearn-manifold"], [1053, "sklearn-manifold"], [1053, "id15"], [1054, "sklearn-manifold"], [1054, "id14"], [1055, "sklearn-manifold"], [1055, "id19"], [1056, "sklearn-manifold"], [1058, "sklearn-manifold"], [1059, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1048, "sklearn-metrics"], [1048, "id17"], [1048, "id33"], [1049, "sklearn-metrics"], [1049, "id4"], [1049, "id16"], [1050, "sklearn-metrics"], [1050, "id2"], [1050, "id8"], [1051, "sklearn-metrics"], [1051, "id10"], [1052, "sklearn-metrics"], [1052, "id2"], [1052, "id12"], [1053, "sklearn-metrics"], [1053, "id16"], [1054, "sklearn-metrics"], [1054, "id3"], [1054, "id15"], [1055, "sklearn-metrics"], [1056, "sklearn-metrics"], [1056, "id2"], [1056, "id14"], [1057, "sklearn-metrics"], [1058, "sklearn-metrics"], [1058, "id4"], [1058, "id10"], [1059, "sklearn-metrics"]], "sklearn.mixture": [[28, null], [1048, "sklearn-mixture"], [1048, "id34"], [1049, "sklearn-mixture"], [1053, "sklearn-mixture"], [1054, "sklearn-mixture"], [1056, "sklearn-mixture"], [1056, "id15"], [1058, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1048, "sklearn-model-selection"], [1048, "id35"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1050, "id9"], [1050, "id13"], [1051, "sklearn-model-selection"], [1052, "sklearn-model-selection"], [1052, "id13"], [1053, "sklearn-model-selection"], [1054, "sklearn-model-selection"], [1055, "sklearn-model-selection"], [1055, "id20"], [1056, "sklearn-model-selection"], [1057, "sklearn-model-selection"], [1058, "sklearn-model-selection"], [1058, "id11"], [1059, "sklearn-model-selection"]], "sklearn.multiclass": [[30, null], [1049, "sklearn-multiclass"], [1052, "sklearn-multiclass"], [1053, "sklearn-multiclass"], [1054, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1048, "sklearn-multioutput"], [1049, "sklearn-multioutput"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"], [1052, "sklearn-multioutput"], [1052, "id14"], [1055, "sklearn-multioutput"], [1056, "sklearn-multioutput"], [1057, "sklearn-multioutput"], [1058, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1048, "sklearn-naive-bayes"], [1050, "sklearn-naive-bayes"], [1050, "id10"], [1051, "sklearn-naive-bayes"], [1052, "sklearn-naive-bayes"], [1053, "sklearn-naive-bayes"], [1055, "sklearn-naive-bayes"], [1056, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1048, "sklearn-neighbors"], [1048, "id7"], [1048, "id18"], [1048, "id36"], [1049, "sklearn-neighbors"], [1049, "id5"], [1049, "id17"], [1050, "sklearn-neighbors"], [1050, "id11"], [1052, "sklearn-neighbors"], [1053, "sklearn-neighbors"], [1053, "id4"], [1053, "id17"], [1054, "sklearn-neighbors"], [1055, "sklearn-neighbors"], [1056, "sklearn-neighbors"], [1056, "id16"], [1057, "sklearn-neighbors"], [1058, "sklearn-neighbors"], [1059, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1048, "sklearn-neural-network"], [1049, "sklearn-neural-network"], [1050, "sklearn-neural-network"], [1051, "sklearn-neural-network"], [1052, "sklearn-neural-network"], [1053, "sklearn-neural-network"], [1054, "sklearn-neural-network"], [1055, "sklearn-neural-network"], [1055, "id21"], [1056, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"], [1050, "sklearn-pipeline"], [1051, "sklearn-pipeline"], [1052, "sklearn-pipeline"], [1053, "sklearn-pipeline"], [1053, "id18"], [1054, "sklearn-pipeline"], [1055, "sklearn-pipeline"], [1056, "sklearn-pipeline"], [1058, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1048, "sklearn-preprocessing"], [1048, "id19"], [1048, "id37"], [1049, "sklearn-preprocessing"], [1049, "id18"], [1050, "sklearn-preprocessing"], [1050, "id12"], [1051, "sklearn-preprocessing"], [1052, "sklearn-preprocessing"], [1052, "id15"], [1053, "sklearn-preprocessing"], [1053, "id19"], [1054, "sklearn-preprocessing"], [1054, "id4"], [1054, "id16"], [1055, "sklearn-preprocessing"], [1055, "id4"], [1055, "id22"], [1056, "sklearn-preprocessing"], [1056, "id17"], [1057, "sklearn-preprocessing"], [1057, "id10"], [1058, "sklearn-preprocessing"], [1059, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1054, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1050, "sklearn-semi-supervised"], [1051, "sklearn-semi-supervised"], [1052, "sklearn-semi-supervised"], [1052, "id3"], [1052, "id16"], [1056, "sklearn-semi-supervised"], [1059, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1048, "sklearn-svm"], [1048, "id38"], [1049, "sklearn-svm"], [1050, "sklearn-svm"], [1051, "sklearn-svm"], [1052, "sklearn-svm"], [1053, "sklearn-svm"], [1053, "id20"], [1054, "sklearn-svm"], [1055, "sklearn-svm"], [1056, "sklearn-svm"], [1058, "sklearn-svm"]], "sklearn.tree": [[40, null], [1048, "sklearn-tree"], [1049, "sklearn-tree"], [1049, "id19"], [1050, "sklearn-tree"], [1051, "sklearn-tree"], [1052, "sklearn-tree"], [1052, "id17"], [1053, "sklearn-tree"], [1053, "id21"], [1054, "sklearn-tree"], [1054, "id5"], [1054, "id17"], [1055, "sklearn-tree"], [1055, "id5"], [1055, "id23"], [1056, "sklearn-tree"], [1056, "id3"], [1056, "id18"], [1057, "sklearn-tree"], [1057, "id11"], [1058, "sklearn-tree"], [1058, "id12"], [1059, "sklearn-tree"]], "sklearn.utils": [[41, null], [1048, "sklearn-utils"], [1048, "id20"], [1048, "id39"], [1049, "sklearn-utils"], [1050, "sklearn-utils"], [1050, "id14"], [1051, "sklearn-utils"], [1051, "id12"], [1052, "sklearn-utils"], [1052, "id18"], [1053, "sklearn-utils"], [1053, "id5"], [1053, "id22"], [1054, "sklearn-utils"], [1054, "id18"], [1055, "sklearn-utils"], [1055, "id6"], [1055, "id24"], [1056, "sklearn-utils"], [1057, "sklearn-utils"], [1057, "id12"], [1058, "sklearn-utils"], [1058, "id13"], [1059, "sklearn-utils"]], "sklearn.utils.sparsefuncs": [[1049, "sklearn-utils-sparsefuncs"]], "skops.io": [[409, "skops-io"]], "smacof": [[702, null]], "solido": [[1033, "id23"]], "sort_graph_by_row_values": [[867, null]], "sparse_encode": [[556, null]], "spectral_clustering": [[469, null]], "spectral_embedding": [[703, null]], "t-SNE: The effect of various perplexity values on the shape": [[242, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[1006, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[802, null]], "train_test_split": [[838, null]], "trustworthiness": [[704, null]], "type_of_target": [[971, null]], "unique_labels": [[972, null]], "v_measure_score": [[803, null]], "validate_data": [[997, null]], "validation_curve": [[839, null]], "ward_tree": [[470, null]], "weighted_mode": [[958, null]], "zero_one_loss": [[804, null]], "\u201cStatlog\u201d German credit dataset": [[269, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.default_tags", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.default_tags.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[397, "term-1d", true]], "1d array": [[397, "term-1d-array", true]], "2d": [[397, "term-2d", true]], "2d array": [[397, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[473, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[622, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[626, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[627, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[629, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[630, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[632, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[946, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[974, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[397, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[934, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[965, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[966, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[965, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[712, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[461, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[447, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[448, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[947, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[948, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[949, "sklearn.utils.discovery.all_functions", false]], "api": [[397, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[652, "sklearn.linear_model.ARDRegression", false]], "array-like": [[397, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[936, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[937, "sklearn.utils.assert_all_finite", false]], "attribute": [[397, "term-attribute", true]], "attributes": [[397, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[714, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[969, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[715, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[397, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[563, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[564, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[852, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[429, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[805, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[653, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[847, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[868, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[430, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[430, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[458, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[460, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.Binarizer", false]], "binary": [[397, "term-binary", true]], "birch (class in sklearn.cluster)": [[449, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[450, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[622, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[625, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[626, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[627, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[629, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[630, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[632, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[717, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[927, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[444, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[446, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[445, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[397, "term-callable", true]], "categorical feature": [[397, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[848, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[489, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[939, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[940, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[950, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[644, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[992, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[993, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[941, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[942, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[719, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[994, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[938, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[612, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[720, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[397, "term-class_weight", true]], "classes_": [[397, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[601, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[602, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[682, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[683, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[807, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[808, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[811, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[822, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[872, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[721, "sklearn.metrics.classification_report", false]], "classifier": [[397, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[843, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[432, "sklearn.base.ClassifierMixin", false]], "classifiers": [[397, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[928, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[431, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[493, "sklearn.datasets.clear_data_home", false]], "clone": [[397, "term-clone", true]], "clone() (in module sklearn.base)": [[440, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[622, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[626, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[627, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[629, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[630, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[632, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[397, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[462, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[463, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[397, "term-clusterer", true]], "clusterers": [[397, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[433, "sklearn.base.ClusterMixin", false]], "coef_": [[397, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[914, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[915, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[916, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[917, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[918, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[995, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[471, "sklearn.compose.ColumnTransformer", false]], "common tests": [[397, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[849, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.completeness_score", false]], "components_": [[397, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[943, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[464, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[944, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[475, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[726, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[705, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[397, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[964, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[965, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[722, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[397, "term-continuous", true]], "continuous multi-output": [[397, "term-continuous-multi-output", true]], "continuous multioutput": [[397, "term-continuous-multioutput", true]], "convergencewarning": [[579, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[625, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[596, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[728, "sklearn.metrics.coverage_error", false]], "cross fitting": [[397, "term-0", true]], "cross validation": [[397, "term-1", true]], "cross-fitting": [[397, "term-cross-fitting", true]], "cross-validation": [[397, "term-cross-validation", true]], "cross-validation estimator": [[397, "term-cross-validation-estimator", true]], "cross-validation generator": [[397, "term-cross-validation-generator", true]], "cross-validation splitter": [[397, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[833, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[834, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[835, "sklearn.model_selection.cross_validate", false]], "cv": [[397, "term-cv", true]], "cv splitter": [[397, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[397, "term-data-leakage", true]], "data type": [[397, "term-data-type", true]], "dataconversionwarning": [[580, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[581, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[451, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[426, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[453, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.dcg_score", false]], "decision_function": [[397, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[639, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[920, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[921, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "default_tags() (in module sklearn.utils)": [[945, "sklearn.utils.default_tags", false]], "delayed() (in module sklearn.utils.parallel)": [[975, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[397, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[953, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[434, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[946, "sklearn.utils.deprecated", false]], "deprecation": [[397, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[735, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[706, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[622, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[626, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[627, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[629, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[630, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[632, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[553, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[554, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[539, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[589, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[397, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[974, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[974, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[707, "sklearn.metrics.DistanceMetric", false]], "docstring": [[397, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[397, "term-double-underscore", true]], "double underscore notation": [[397, "term-double-underscore-notation", true]], "dtype": [[397, "term-dtype", true]], "duck typing": [[397, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[559, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[560, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[494, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[397, "term-early-stopping", true]], "efficiencywarning": [[582, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[654, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[655, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[476, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[397, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[484, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[477, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[689, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[465, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[397, "term-estimator", true]], "estimator instance": [[397, "term-estimator-instance", true]], "estimator tags": [[397, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[952, "sklearn.utils.estimator_html_repr", false]], "estimators": [[397, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[563, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[564, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[565, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[566, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[571, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[572, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[573, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[574, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[397, "term-evaluation-metric", true]], "evaluation metrics": [[397, "term-evaluation-metrics", true]], "examples": [[397, "term-examples", true]], "experimental": [[397, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[736, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[924, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[925, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[592, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[922, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[923, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[737, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[613, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[614, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[540, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[954, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[541, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[427, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.fbeta_score", false]], "feature": [[397, "term-feature", true]], "feature extractor": [[397, "term-feature-extractor", true]], "feature extractors": [[397, "term-feature-extractors", true]], "feature vector": [[397, "term-feature-vector", true]], "feature_importances_": [[397, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[561, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[562, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[565, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[566, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[567, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[568, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[572, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[573, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[574, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[920, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[921, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[922, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[923, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[871, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[872, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[452, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[590, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[397, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[871, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[500, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[501, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[502, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[503, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[504, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[505, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[506, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[397, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[447, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[448, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[451, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[453, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[455, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[457, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[458, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[459, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[460, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[471, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[472, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[492, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[539, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[550, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[564, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[590, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[591, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[635, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[636, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[637, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[647, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[649, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[651, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[652, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[654, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[655, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[656, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[657, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[658, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[659, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[660, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[661, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[662, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[663, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[664, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[665, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[670, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[677, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[678, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[679, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[680, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[681, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[687, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[688, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[697, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[698, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[699, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[700, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[842, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[846, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[857, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[859, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[860, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[870, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[871, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[880, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[883, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[887, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[893, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[907, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[908, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[913, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[915, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[918, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[397, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[452, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[433, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[437, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[447, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[448, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[451, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[453, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[455, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[457, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[459, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[397, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[439, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[471, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[492, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[539, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[550, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[590, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[591, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[609, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[635, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[636, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[637, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[647, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[649, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[697, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[698, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[699, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[700, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[871, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[880, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[883, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[887, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[893, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[583, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[397, "term-fitted", true]], "fitting": [[397, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[625, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[807, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[974, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[445, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[639, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[640, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[705, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[706, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[708, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[709, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[710, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[814, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[831, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[445, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[705, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[706, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[708, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[709, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[710, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.fromkeys", false]], "function": [[397, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[397, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[656, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[806, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[850, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[904, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[959, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[960, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[852, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[853, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[634, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[507, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[397, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[431, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[436, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[471, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[492, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[539, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[550, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[609, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[635, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[636, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[637, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[647, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[649, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[697, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[700, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[871, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[887, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[893, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[430, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[458, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[460, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[429, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[447, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[448, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[451, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[453, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[455, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[457, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[458, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[459, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[460, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[471, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[472, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[492, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[539, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[550, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[564, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[590, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[591, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[635, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[636, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[637, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[647, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[649, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[651, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[652, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[654, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[655, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[656, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[657, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[658, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[659, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[660, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[661, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[662, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[663, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[664, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[665, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[670, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[677, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[678, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[679, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[680, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[681, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[687, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[688, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[697, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[698, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[699, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[700, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[809, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[810, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[813, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[815, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[816, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[817, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[818, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[821, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[823, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[824, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[825, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[826, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[827, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[828, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[829, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[842, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[846, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[857, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[859, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[860, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[870, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[871, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[880, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[883, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[887, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[893, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[907, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[908, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[913, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[915, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[918, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[707, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[852, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[853, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[397, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[809, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[810, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[813, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[815, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[816, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[817, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[818, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[821, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[823, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[824, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[825, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[826, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[827, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[828, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[829, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[397, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[429, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[447, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[448, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[451, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[453, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[455, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[457, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[458, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[459, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[460, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[471, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[472, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[492, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[539, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[550, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[564, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[590, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[591, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[622, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[626, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[627, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[629, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[630, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[632, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[635, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[636, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[637, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[647, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[649, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[651, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[652, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[654, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[655, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[656, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[657, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[658, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[659, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[660, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[661, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[662, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[663, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[664, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[665, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[670, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[677, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[678, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[679, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[680, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[681, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[687, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[688, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[697, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[698, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[699, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[700, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[842, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[846, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[857, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[859, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[860, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[870, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[871, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[880, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[883, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[887, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[893, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[907, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[908, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[913, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[915, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[918, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[967, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[740, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[741, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[430, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[458, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[460, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[430, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[458, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[460, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[609, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[961, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[852, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[853, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[567, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[568, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[485, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[478, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[479, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[593, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[808, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[809, "sklearn.model_selection.GroupKFold", false]], "groups": [[397, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[810, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[811, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[812, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[742, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[996, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[597, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[453, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[743, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[744, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[745, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[657, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[397, "term-hyper-parameter", true]], "hyperparameter": [[397, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[622, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[626, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[627, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[629, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[630, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[632, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[594, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[397, "term-imputation", true]], "impute": [[397, "term-impute", true]], "inconsistentversionwarning": [[584, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[983, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[542, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[625, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[397, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[963, "sklearn.utils.indexable", false]], "induction": [[397, "term-induction", true]], "inductive": [[397, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[885, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[886, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[893, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[984, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[985, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[990, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[991, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[986, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[987, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[988, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[929, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[609, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[880, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[883, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[441, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[442, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[970, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[443, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[622, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[626, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[627, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[629, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[630, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[632, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[571, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[696, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[645, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[643, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[635, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[746, "sklearn.metrics.jaccard_score", false]], "joblib": [[397, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[906, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[466, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[853, "sklearn.neighbors.KDTree", false]], "kernel": [[397, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[852, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[853, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[857, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[543, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[651, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[813, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[454, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[467, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[860, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[865, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[860, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[854, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[855, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[856, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[636, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[919, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[397, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[747, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[748, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[907, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[397, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[908, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[658, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[690, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[691, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[660, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[692, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[661, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[662, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[663, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[664, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[544, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[397, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[836, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[814, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[815, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[816, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[817, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[818, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[486, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[487, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[480, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[665, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[912, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[913, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[512, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[513, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[514, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[515, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[516, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[517, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[518, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[701, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[697, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[858, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[749, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[666, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[667, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[473, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[474, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[873, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[532, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[533, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[750, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[534, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[535, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[536, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[537, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[538, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[874, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[627, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[751, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[752, "sklearn.metrics.max_error", false]], "max_iter": [[397, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[897, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[698, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[755, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[756, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[757, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[468, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[758, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[759, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[760, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[989, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[455, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[761, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[397, "term-memmapping", true]], "memory": [[397, "term-memory", true]], "memory map": [[397, "term-memory-map", true]], "memory mapping": [[397, "term-memory-mapping", true]], "meta-estimator": [[397, "term-meta-estimator", true]], "meta-estimators": [[397, "term-meta-estimators", true]], "metadata": [[397, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[964, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[965, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[397, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[435, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[397, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[966, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[397, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[935, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[481, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[456, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[546, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[547, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[898, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[397, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[637, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[869, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[870, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [587, "module-sklearn.experimental.enable_halving_search_cv", false], [588, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[397, "term-multi-class", true]], "multi-class multi-output": [[397, "term-multi-class-multi-output", true]], "multi-label": [[397, "term-multi-label", true]], "multi-output": [[397, "term-multi-output", true]], "multi-output continuous": [[397, "term-multi-output-continuous", true]], "multi-output multi-class": [[397, "term-multi-output-multi-class", true]], "multiclass": [[397, "term-multiclass", true]], "multiclass multioutput": [[397, "term-multiclass-multioutput", true]], "multilabel": [[397, "term-multilabel", true]], "multilabel indicator matrices": [[397, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[397, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[841, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[762, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[851, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[397, "term-multioutput", true]], "multioutput continuous": [[397, "term-multioutput-continuous", true]], "multioutput multiclass": [[397, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[844, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[845, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[668, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[670, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[671, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[973, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[615, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[616, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[763, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[840, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[841, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[397, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[550, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[622, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[626, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[627, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[629, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[630, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[632, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[625, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[397, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[472, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[550, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[575, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[576, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[577, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[578, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[605, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[808, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[811, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[822, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[871, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[872, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[397, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[397, "term-n_iter_no_change", true]], "n_jobs": [[397, "term-n_jobs", true]], "n_outputs": [[397, "term-n_outputs", true]], "n_samples": [[397, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[914, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[915, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[916, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[917, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[918, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[397, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[625, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[575, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[576, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[577, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[578, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[872, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[471, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[397, "term-narrative-docs", true]], "narrative documentation": [[397, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[764, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[859, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[860, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[548, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[555, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[899, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[765, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[585, "sklearn.exceptions.NotFittedError", false]], "np": [[397, "term-np", true]], "nusvc (class in sklearn.svm)": [[914, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[915, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[647, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[482, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[428, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[916, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[436, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[840, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[841, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[397, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[457, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[693, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[694, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[397, "term-out-of-core", true]], "outlier detector": [[397, "term-outlier-detector", true]], "outlier detectors": [[397, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[437, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[842, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[397, "term-outputs", true]], "pair": [[397, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[723, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[779, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[780, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[781, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[397, "term-pairwise-metric", true]], "pairwise metrics": [[397, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[786, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[787, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[788, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[789, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[782, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[974, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[976, "sklearn.utils.parallel_backend", false]], "param": [[397, "term-param", true]], "parameter": [[397, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[819, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[397, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[820, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[951, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[397, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[641, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[397, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[870, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[640, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[591, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[654, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[655, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[660, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[661, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[670, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[549, "sklearn.decomposition.PCA", false]], "pd": [[397, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[676, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[642, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[837, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[872, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[445, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[639, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[640, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[705, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[706, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[708, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[709, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[710, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[814, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[831, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[926, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[490, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[491, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[492, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[677, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[783, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[887, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[397, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[900, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[887, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[888, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[790, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[791, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[792, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[708, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[397, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[821, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[397, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[447, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[455, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[472, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[564, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[651, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[652, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[654, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[655, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[656, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[657, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[658, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[659, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[660, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[661, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[662, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[663, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[664, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[665, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[670, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[677, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[678, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[679, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[680, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[681, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[687, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[688, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[842, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[846, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[859, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[870, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[907, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[908, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[913, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[915, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[918, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[397, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[397, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[907, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[908, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[709, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[397, "term-predictor", true]], "predictors": [[397, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[974, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[914, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[917, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[914, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[917, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[968, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[629, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[901, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[678, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[889, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[852, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[853, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[852, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[853, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[793, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[617, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[860, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[866, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[860, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.rand_score", false]], "random_state": [[397, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[572, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[573, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[955, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[956, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[822, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[574, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[630, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[784, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[649, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[795, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[595, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[397, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[978, "sklearn.utils.register_parallel_backend", false]], "regressor": [[397, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[846, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[438, "sklearn.base.RegressorMixin", false]], "regressors": [[397, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[930, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[823, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[824, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[622, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[626, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[627, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[629, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[630, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[632, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[979, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[852, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[853, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[680, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[695, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[682, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[683, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[681, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[902, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[890, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[796, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[797, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[710, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[798, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[799, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[965, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[397, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[980, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[957, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[981, "sklearn.utils.safe_sqr", false]], "sample": [[397, "term-sample", true]], "sample properties": [[397, "term-sample-properties", true]], "sample property": [[397, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[857, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[397, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[977, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[397, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[903, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[397, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[397, "term-scikit-learn-contrib", true]], "score": [[397, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[432, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[434, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[438, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[472, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[564, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[651, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[652, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[654, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[655, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[656, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[657, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[658, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[659, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[660, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[661, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[662, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[663, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[664, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[665, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[670, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[677, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[678, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[679, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[680, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[681, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[687, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[688, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[842, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[846, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[857, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[859, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[870, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[907, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[908, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[913, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[915, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[918, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[397, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[857, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[397, "term-scorer", true]], "scoring": [[397, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[605, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[606, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[607, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[609, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[608, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[397, "term-semi-supervised", true]], "semi-supervised learning": [[397, "term-semi-supervised-learning", true]], "semisupervised": [[397, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[610, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[910, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[451, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[564, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[651, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[654, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[655, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[656, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[657, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[658, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[659, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[660, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[661, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[662, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[663, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[664, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[665, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[670, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[677, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[678, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[679, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[680, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[681, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[688, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[698, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[857, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[913, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[915, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[918, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[439, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[471, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[492, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[539, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[550, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[590, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[591, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[609, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[635, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[636, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[637, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[647, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[649, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[697, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[700, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[871, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[880, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[883, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[887, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[893, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[397, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[429, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[447, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[448, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[451, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[453, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[455, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[457, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[458, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[459, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[460, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[471, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[472, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[492, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[539, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[550, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[564, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[571, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[590, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[591, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[622, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[626, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[627, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[629, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[630, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[632, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[635, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[636, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[637, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[647, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[649, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[651, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[652, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[654, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[655, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[656, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[657, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[658, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[659, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[660, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[661, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[662, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[663, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[664, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[665, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[670, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[677, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[678, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[679, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[680, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[681, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[687, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[688, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[697, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[698, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[699, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[700, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[805, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[806, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[842, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[846, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[857, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[858, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[859, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[860, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[870, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[871, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[880, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[883, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[887, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[893, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[907, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[908, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[909, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[913, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[915, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[916, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[918, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[844, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[652, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[444, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[472, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[476, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[477, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[478, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[479, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[480, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[481, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[482, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[483, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[558, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[559, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[560, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[563, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[564, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[565, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[566, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[572, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[573, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[618, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[619, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[651, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[652, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[653, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[654, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[655, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[656, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[657, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[658, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[659, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[660, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[661, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[662, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[663, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[664, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[665, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[668, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[669, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[670, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[671, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[672, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[673, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[677, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[678, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[680, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[682, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[683, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[681, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[687, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[688, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[807, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[840, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[841, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[842, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[843, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[845, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[846, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[847, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[848, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[849, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[850, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[851, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[854, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[855, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[859, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[862, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[863, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[869, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[870, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[907, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[908, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[913, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[914, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[915, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[917, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[918, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[920, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[921, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[922, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[923, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[809, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[810, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[815, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[817, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[826, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[590, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[684, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[685, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[686, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[911, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[488, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[483, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[982, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[825, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[785, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[800, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[801, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[638, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[962, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[587, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[588, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[397, "term-SLEP", true]], "sleps": [[397, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[702, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[867, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[397, "term-sparse-graph", true]], "sparse matrix": [[397, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[654, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[660, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[668, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[670, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[556, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[550, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[551, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[905, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[666, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[667, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[674, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[675, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[676, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[684, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[685, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[686, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[912, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[469, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[703, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[458, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[459, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[460, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[699, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[891, "sklearn.preprocessing.SplineTransformer", false]], "split": [[397, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[809, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[810, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[813, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[815, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[816, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[817, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[818, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[821, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[823, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[824, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[825, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[826, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[827, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[828, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[829, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[575, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[576, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[568, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[570, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[567, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[569, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[561, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[562, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[892, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[397, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[826, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[827, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[828, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[632, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[397, "term-supervised", true]], "supervised learning": [[397, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[917, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[918, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[931, "sklearn.utils.Tags", false]], "target": [[397, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[893, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[397, "term-targets", true]], "targettags (class in sklearn.utils)": [[932, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[598, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[687, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[620, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[621, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[622, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[624, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[623, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[626, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[627, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[628, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[629, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[631, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[630, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[632, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[605, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[829, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[802, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[838, "sklearn.model_selection.train_test_split", false]], "transduction": [[397, "term-transduction", true]], "transductive": [[397, "term-transductive", true]], "transform": [[397, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[449, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[450, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[452, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[454, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[456, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[471, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[489, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[490, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[491, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[492, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[539, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[540, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[541, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[542, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[543, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[544, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[545, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[546, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[547, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[548, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[549, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[550, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[551, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[552, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[557, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[574, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[575, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[576, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[577, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[578, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[589, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[590, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[591, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[596, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[597, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[598, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[599, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[600, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[601, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[602, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[603, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[604, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[605, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[606, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[607, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[609, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[608, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[610, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[611, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[635, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[636, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[637, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[638, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[643, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[646, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[647, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[648, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[649, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[650, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[696, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[697, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[808, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[811, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[812, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[822, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[856, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[861, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[864, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[868, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[871, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[872, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[875, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[876, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[877, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[878, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[879, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[880, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[881, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[882, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[883, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[884, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[885, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[886, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[887, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[888, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[889, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[890, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[891, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[892, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[893, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[904, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[905, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[472, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[397, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[439, "sklearn.base.TransformerMixin", false]], "transformers": [[397, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[933, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[552, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[704, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[700, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[830, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[688, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[852, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[853, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[971, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[586, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[972, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[397, "term-unlabeled", true]], "unlabeled data": [[397, "term-unlabeled-data", true]], "unsupervised": [[397, "term-unsupervised", true]], "unsupervised learning": [[397, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[803, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[997, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[965, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[839, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[831, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[625, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[927, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[611, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[397, "term-vectorizer", true]], "vectorizers": [[397, "term-vectorizers", true]], "verbose": [[397, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[577, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[578, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[470, "sklearn.cluster.ward_tree", false]], "warm_start": [[397, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[958, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[633, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[397, "term-X", true]], "xt": [[397, "term-Xt", true]], "y": [[397, "term-Y", true], [397, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[804, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [475, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [634, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [910, 4, 1, "", "set_config"], [911, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[429, 1, 1, "", "BaseEstimator"], [430, 1, 1, "", "BiclusterMixin"], [431, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [432, 1, 1, "", "ClassifierMixin"], [433, 1, 1, "", "ClusterMixin"], [434, 1, 1, "", "DensityMixin"], [435, 1, 1, "", "MetaEstimatorMixin"], [436, 1, 1, "", "OneToOneFeatureMixin"], [437, 1, 1, "", "OutlierMixin"], [438, 1, 1, "", "RegressorMixin"], [439, 1, 1, "", "TransformerMixin"], [440, 4, 1, "", "clone"], [441, 4, 1, "", "is_classifier"], [442, 4, 1, "", "is_clusterer"], [443, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[429, 2, 1, "", "get_metadata_routing"], [429, 2, 1, "", "get_params"], [429, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[430, 3, 1, "", "biclusters_"], [430, 2, 1, "", "get_indices"], [430, 2, 1, "", "get_shape"], [430, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[431, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[432, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[433, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[434, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[436, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[437, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[438, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[439, 2, 1, "", "fit_transform"], [439, 2, 1, "", "set_output"]], "sklearn.calibration": [[444, 1, 1, "", "CalibratedClassifierCV"], [445, 1, 1, "", "CalibrationDisplay"], [446, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "predict_proba"], [444, 2, 1, "", "score"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[445, 2, 1, "", "from_estimator"], [445, 2, 1, "", "from_predictions"], [445, 2, 1, "", "plot"]], "sklearn.cluster": [[447, 1, 1, "", "AffinityPropagation"], [448, 1, 1, "", "AgglomerativeClustering"], [449, 1, 1, "", "Birch"], [450, 1, 1, "", "BisectingKMeans"], [451, 1, 1, "", "DBSCAN"], [452, 1, 1, "", "FeatureAgglomeration"], [453, 1, 1, "", "HDBSCAN"], [454, 1, 1, "", "KMeans"], [455, 1, 1, "", "MeanShift"], [456, 1, 1, "", "MiniBatchKMeans"], [457, 1, 1, "", "OPTICS"], [458, 1, 1, "", "SpectralBiclustering"], [459, 1, 1, "", "SpectralClustering"], [460, 1, 1, "", "SpectralCoclustering"], [461, 4, 1, "", "affinity_propagation"], [462, 4, 1, "", "cluster_optics_dbscan"], [463, 4, 1, "", "cluster_optics_xi"], [464, 4, 1, "", "compute_optics_graph"], [426, 4, 1, "", "dbscan"], [465, 4, 1, "", "estimate_bandwidth"], [466, 4, 1, "", "k_means"], [467, 4, 1, "", "kmeans_plusplus"], [468, 4, 1, "", "mean_shift"], [469, 4, 1, "", "spectral_clustering"], [470, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "partial_fit"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "fit_transform"], [450, 2, 1, "", "get_feature_names_out"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "predict"], [450, 2, 1, "", "score"], [450, 2, 1, "", "set_fit_request"], [450, 2, 1, "", "set_output"], [450, 2, 1, "", "set_params"], [450, 2, 1, "", "set_score_request"], [450, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[451, 2, 1, "", "fit"], [451, 2, 1, "", "fit_predict"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "set_fit_request"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[452, 2, 1, "", "fit"], [452, 3, 1, "", "fit_predict"], [452, 2, 1, "", "fit_transform"], [452, 2, 1, "", "get_feature_names_out"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "inverse_transform"], [452, 2, 1, "", "set_output"], [452, 2, 1, "", "set_params"], [452, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[453, 2, 1, "", "dbscan_clustering"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "fit_predict"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[454, 2, 1, "", "fit"], [454, 2, 1, "", "fit_predict"], [454, 2, 1, "", "fit_transform"], [454, 2, 1, "", "get_feature_names_out"], [454, 2, 1, "", "get_metadata_routing"], [454, 2, 1, "", "get_params"], [454, 2, 1, "", "predict"], [454, 2, 1, "", "score"], [454, 2, 1, "", "set_fit_request"], [454, 2, 1, "", "set_output"], [454, 2, 1, "", "set_params"], [454, 2, 1, "", "set_score_request"], [454, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[455, 2, 1, "", "fit"], [455, 2, 1, "", "fit_predict"], [455, 2, 1, "", "get_metadata_routing"], [455, 2, 1, "", "get_params"], [455, 2, 1, "", "predict"], [455, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[456, 2, 1, "", "fit"], [456, 2, 1, "", "fit_predict"], [456, 2, 1, "", "fit_transform"], [456, 2, 1, "", "get_feature_names_out"], [456, 2, 1, "", "get_metadata_routing"], [456, 2, 1, "", "get_params"], [456, 2, 1, "", "partial_fit"], [456, 2, 1, "", "predict"], [456, 2, 1, "", "score"], [456, 2, 1, "", "set_fit_request"], [456, 2, 1, "", "set_output"], [456, 2, 1, "", "set_params"], [456, 2, 1, "", "set_partial_fit_request"], [456, 2, 1, "", "set_score_request"], [456, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[457, 2, 1, "", "fit"], [457, 2, 1, "", "fit_predict"], [457, 2, 1, "", "get_metadata_routing"], [457, 2, 1, "", "get_params"], [457, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[458, 3, 1, "", "biclusters_"], [458, 2, 1, "", "fit"], [458, 2, 1, "", "get_indices"], [458, 2, 1, "", "get_metadata_routing"], [458, 2, 1, "", "get_params"], [458, 2, 1, "", "get_shape"], [458, 2, 1, "", "get_submatrix"], [458, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[459, 2, 1, "", "fit"], [459, 2, 1, "", "fit_predict"], [459, 2, 1, "", "get_metadata_routing"], [459, 2, 1, "", "get_params"], [459, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[460, 3, 1, "", "biclusters_"], [460, 2, 1, "", "fit"], [460, 2, 1, "", "get_indices"], [460, 2, 1, "", "get_metadata_routing"], [460, 2, 1, "", "get_params"], [460, 2, 1, "", "get_shape"], [460, 2, 1, "", "get_submatrix"], [460, 2, 1, "", "set_params"]], "sklearn.compose": [[471, 1, 1, "", "ColumnTransformer"], [472, 1, 1, "", "TransformedTargetRegressor"], [473, 1, 1, "", "make_column_selector"], [474, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[471, 2, 1, "", "fit"], [471, 2, 1, "", "fit_transform"], [471, 2, 1, "", "get_feature_names_out"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 3, 1, "", "named_transformers_"], [471, 2, 1, "", "set_output"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 3, 1, "", "n_features_in_"], [472, 2, 1, "", "predict"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[473, 2, 1, "", "__call__"]], "sklearn.covariance": [[476, 1, 1, "", "EllipticEnvelope"], [477, 1, 1, "", "EmpiricalCovariance"], [478, 1, 1, "", "GraphicalLasso"], [479, 1, 1, "", "GraphicalLassoCV"], [480, 1, 1, "", "LedoitWolf"], [481, 1, 1, "", "MinCovDet"], [482, 1, 1, "", "OAS"], [483, 1, 1, "", "ShrunkCovariance"], [484, 4, 1, "", "empirical_covariance"], [485, 4, 1, "", "graphical_lasso"], [486, 4, 1, "", "ledoit_wolf"], [487, 4, 1, "", "ledoit_wolf_shrinkage"], [428, 4, 1, "", "oas"], [488, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[476, 2, 1, "", "correct_covariance"], [476, 2, 1, "", "decision_function"], [476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "fit_predict"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "predict"], [476, 2, 1, "", "reweight_covariance"], [476, 2, 1, "", "score"], [476, 2, 1, "", "score_samples"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[477, 2, 1, "", "error_norm"], [477, 2, 1, "", "fit"], [477, 2, 1, "", "get_metadata_routing"], [477, 2, 1, "", "get_params"], [477, 2, 1, "", "get_precision"], [477, 2, 1, "", "mahalanobis"], [477, 2, 1, "", "score"], [477, 2, 1, "", "set_params"], [477, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[478, 2, 1, "", "error_norm"], [478, 2, 1, "", "fit"], [478, 2, 1, "", "get_metadata_routing"], [478, 2, 1, "", "get_params"], [478, 2, 1, "", "get_precision"], [478, 2, 1, "", "mahalanobis"], [478, 2, 1, "", "score"], [478, 2, 1, "", "set_params"], [478, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[479, 2, 1, "", "error_norm"], [479, 2, 1, "", "fit"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "get_precision"], [479, 2, 1, "", "mahalanobis"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[480, 2, 1, "", "error_norm"], [480, 2, 1, "", "fit"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "get_precision"], [480, 2, 1, "", "mahalanobis"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[481, 2, 1, "", "correct_covariance"], [481, 2, 1, "", "error_norm"], [481, 2, 1, "", "fit"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "get_precision"], [481, 2, 1, "", "mahalanobis"], [481, 2, 1, "", "reweight_covariance"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[482, 2, 1, "", "error_norm"], [482, 2, 1, "", "fit"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "get_precision"], [482, 2, 1, "", "mahalanobis"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[483, 2, 1, "", "error_norm"], [483, 2, 1, "", "fit"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "get_precision"], [483, 2, 1, "", "mahalanobis"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[489, 1, 1, "", "CCA"], [490, 1, 1, "", "PLSCanonical"], [491, 1, 1, "", "PLSRegression"], [492, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[489, 2, 1, "", "fit"], [489, 2, 1, "", "fit_transform"], [489, 2, 1, "", "get_feature_names_out"], [489, 2, 1, "", "get_metadata_routing"], [489, 2, 1, "", "get_params"], [489, 2, 1, "", "inverse_transform"], [489, 2, 1, "", "predict"], [489, 2, 1, "", "score"], [489, 2, 1, "", "set_output"], [489, 2, 1, "", "set_params"], [489, 2, 1, "", "set_predict_request"], [489, 2, 1, "", "set_score_request"], [489, 2, 1, "", "set_transform_request"], [489, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[490, 2, 1, "", "fit"], [490, 2, 1, "", "fit_transform"], [490, 2, 1, "", "get_feature_names_out"], [490, 2, 1, "", "get_metadata_routing"], [490, 2, 1, "", "get_params"], [490, 2, 1, "", "inverse_transform"], [490, 2, 1, "", "predict"], [490, 2, 1, "", "score"], [490, 2, 1, "", "set_output"], [490, 2, 1, "", "set_params"], [490, 2, 1, "", "set_predict_request"], [490, 2, 1, "", "set_score_request"], [490, 2, 1, "", "set_transform_request"], [490, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[491, 2, 1, "", "fit"], [491, 2, 1, "", "fit_transform"], [491, 2, 1, "", "get_feature_names_out"], [491, 2, 1, "", "get_metadata_routing"], [491, 2, 1, "", "get_params"], [491, 2, 1, "", "inverse_transform"], [491, 2, 1, "", "predict"], [491, 2, 1, "", "score"], [491, 2, 1, "", "set_output"], [491, 2, 1, "", "set_params"], [491, 2, 1, "", "set_predict_request"], [491, 2, 1, "", "set_score_request"], [491, 2, 1, "", "set_transform_request"], [491, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[492, 2, 1, "", "fit"], [492, 2, 1, "", "fit_transform"], [492, 2, 1, "", "get_feature_names_out"], [492, 2, 1, "", "get_metadata_routing"], [492, 2, 1, "", "get_params"], [492, 2, 1, "", "set_output"], [492, 2, 1, "", "set_params"], [492, 2, 1, "", "transform"]], "sklearn.datasets": [[493, 4, 1, "", "clear_data_home"], [494, 4, 1, "", "dump_svmlight_file"], [495, 4, 1, "", "fetch_20newsgroups"], [496, 4, 1, "", "fetch_20newsgroups_vectorized"], [497, 4, 1, "", "fetch_california_housing"], [498, 4, 1, "", "fetch_covtype"], [499, 4, 1, "", "fetch_file"], [500, 4, 1, "", "fetch_kddcup99"], [501, 4, 1, "", "fetch_lfw_pairs"], [502, 4, 1, "", "fetch_lfw_people"], [503, 4, 1, "", "fetch_olivetti_faces"], [504, 4, 1, "", "fetch_openml"], [505, 4, 1, "", "fetch_rcv1"], [506, 4, 1, "", "fetch_species_distributions"], [507, 4, 1, "", "get_data_home"], [508, 4, 1, "", "load_breast_cancer"], [509, 4, 1, "", "load_diabetes"], [510, 4, 1, "", "load_digits"], [511, 4, 1, "", "load_files"], [512, 4, 1, "", "load_iris"], [513, 4, 1, "", "load_linnerud"], [514, 4, 1, "", "load_sample_image"], [515, 4, 1, "", "load_sample_images"], [516, 4, 1, "", "load_svmlight_file"], [517, 4, 1, "", "load_svmlight_files"], [518, 4, 1, "", "load_wine"], [519, 4, 1, "", "make_biclusters"], [520, 4, 1, "", "make_blobs"], [521, 4, 1, "", "make_checkerboard"], [522, 4, 1, "", "make_circles"], [523, 4, 1, "", "make_classification"], [524, 4, 1, "", "make_friedman1"], [525, 4, 1, "", "make_friedman2"], [526, 4, 1, "", "make_friedman3"], [527, 4, 1, "", "make_gaussian_quantiles"], [528, 4, 1, "", "make_hastie_10_2"], [529, 4, 1, "", "make_low_rank_matrix"], [530, 4, 1, "", "make_moons"], [531, 4, 1, "", "make_multilabel_classification"], [532, 4, 1, "", "make_regression"], [533, 4, 1, "", "make_s_curve"], [534, 4, 1, "", "make_sparse_coded_signal"], [535, 4, 1, "", "make_sparse_spd_matrix"], [536, 4, 1, "", "make_sparse_uncorrelated"], [537, 4, 1, "", "make_spd_matrix"], [538, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[539, 1, 1, "", "DictionaryLearning"], [540, 1, 1, "", "FactorAnalysis"], [541, 1, 1, "", "FastICA"], [542, 1, 1, "", "IncrementalPCA"], [543, 1, 1, "", "KernelPCA"], [544, 1, 1, "", "LatentDirichletAllocation"], [545, 1, 1, "", "MiniBatchDictionaryLearning"], [546, 1, 1, "", "MiniBatchNMF"], [547, 1, 1, "", "MiniBatchSparsePCA"], [548, 1, 1, "", "NMF"], [549, 1, 1, "", "PCA"], [550, 1, 1, "", "SparseCoder"], [551, 1, 1, "", "SparsePCA"], [552, 1, 1, "", "TruncatedSVD"], [553, 4, 1, "", "dict_learning"], [554, 4, 1, "", "dict_learning_online"], [427, 4, 1, "", "fastica"], [555, 4, 1, "", "non_negative_factorization"], [556, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_covariance"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "get_precision"], [540, 2, 1, "", "score"], [540, 2, 1, "", "score_samples"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_inverse_transform_request"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "set_transform_request"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_covariance"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "get_precision"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "partial_fit"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "set_partial_fit_request"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 2, 1, "", "inverse_transform"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "partial_fit"], [544, 2, 1, "", "perplexity"], [544, 2, 1, "", "score"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "partial_fit"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "inverse_transform"], [546, 2, 1, "", "partial_fit"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[547, 2, 1, "", "fit"], [547, 2, 1, "", "fit_transform"], [547, 2, 1, "", "get_feature_names_out"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "inverse_transform"], [547, 2, 1, "", "set_output"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "fit_transform"], [548, 2, 1, "", "get_feature_names_out"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "inverse_transform"], [548, 2, 1, "", "set_output"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "fit_transform"], [549, 2, 1, "", "get_covariance"], [549, 2, 1, "", "get_feature_names_out"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "get_precision"], [549, 2, 1, "", "inverse_transform"], [549, 2, 1, "", "score"], [549, 2, 1, "", "score_samples"], [549, 2, 1, "", "set_output"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 3, 1, "", "n_components_"], [550, 3, 1, "", "n_features_in_"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[551, 2, 1, "", "fit"], [551, 2, 1, "", "fit_transform"], [551, 2, 1, "", "get_feature_names_out"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "inverse_transform"], [551, 2, 1, "", "set_output"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "fit_transform"], [552, 2, 1, "", "get_feature_names_out"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "inverse_transform"], [552, 2, 1, "", "set_output"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[557, 1, 1, "", "LinearDiscriminantAnalysis"], [558, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[557, 2, 1, "", "decision_function"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "fit_transform"], [557, 2, 1, "", "get_feature_names_out"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "predict_log_proba"], [557, 2, 1, "", "predict_proba"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_output"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[558, 2, 1, "", "decision_function"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[559, 1, 1, "", "DummyClassifier"], [560, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "predict_log_proba"], [559, 2, 1, "", "predict_proba"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_predict_request"], [560, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[561, 1, 1, "", "AdaBoostClassifier"], [562, 1, 1, "", "AdaBoostRegressor"], [563, 1, 1, "", "BaggingClassifier"], [564, 1, 1, "", "BaggingRegressor"], [565, 1, 1, "", "ExtraTreesClassifier"], [566, 1, 1, "", "ExtraTreesRegressor"], [567, 1, 1, "", "GradientBoostingClassifier"], [568, 1, 1, "", "GradientBoostingRegressor"], [569, 1, 1, "", "HistGradientBoostingClassifier"], [570, 1, 1, "", "HistGradientBoostingRegressor"], [571, 1, 1, "", "IsolationForest"], [572, 1, 1, "", "RandomForestClassifier"], [573, 1, 1, "", "RandomForestRegressor"], [574, 1, 1, "", "RandomTreesEmbedding"], [575, 1, 1, "", "StackingClassifier"], [576, 1, 1, "", "StackingRegressor"], [577, 1, 1, "", "VotingClassifier"], [578, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[561, 2, 1, "", "decision_function"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_log_proba"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_decision_function"], [561, 2, 1, "", "staged_predict"], [561, 2, 1, "", "staged_predict_proba"], [561, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_predict"], [562, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[563, 2, 1, "", "decision_function"], [563, 3, 1, "", "estimators_samples_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "predict_log_proba"], [563, 2, 1, "", "predict_proba"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[564, 3, 1, "", "estimators_samples_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_log_proba"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[567, 2, 1, "", "apply"], [567, 2, 1, "", "decision_function"], [567, 3, 1, "", "feature_importances_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "predict_log_proba"], [567, 2, 1, "", "predict_proba"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "staged_decision_function"], [567, 2, 1, "", "staged_predict"], [567, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[568, 2, 1, "", "apply"], [568, 3, 1, "", "feature_importances_"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[569, 2, 1, "", "decision_function"], [569, 2, 1, "", "fit"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_iter_"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "predict_proba"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "staged_decision_function"], [569, 2, 1, "", "staged_predict"], [569, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_iter_"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[571, 2, 1, "", "decision_function"], [571, 3, 1, "", "estimators_samples_"], [571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_predict"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "score_samples"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[572, 2, 1, "", "apply"], [572, 2, 1, "", "decision_path"], [572, 3, 1, "", "estimators_samples_"], [572, 3, 1, "", "feature_importances_"], [572, 2, 1, "", "fit"], [572, 2, 1, "", "get_metadata_routing"], [572, 2, 1, "", "get_params"], [572, 2, 1, "", "predict"], [572, 2, 1, "", "predict_log_proba"], [572, 2, 1, "", "predict_proba"], [572, 2, 1, "", "score"], [572, 2, 1, "", "set_fit_request"], [572, 2, 1, "", "set_params"], [572, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[573, 2, 1, "", "apply"], [573, 2, 1, "", "decision_path"], [573, 3, 1, "", "estimators_samples_"], [573, 3, 1, "", "feature_importances_"], [573, 2, 1, "", "fit"], [573, 2, 1, "", "get_metadata_routing"], [573, 2, 1, "", "get_params"], [573, 2, 1, "", "predict"], [573, 2, 1, "", "score"], [573, 2, 1, "", "set_fit_request"], [573, 2, 1, "", "set_params"], [573, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[574, 2, 1, "", "apply"], [574, 2, 1, "", "decision_path"], [574, 3, 1, "", "estimators_samples_"], [574, 3, 1, "", "feature_importances_"], [574, 2, 1, "", "fit"], [574, 2, 1, "", "fit_transform"], [574, 2, 1, "", "get_feature_names_out"], [574, 2, 1, "", "get_metadata_routing"], [574, 2, 1, "", "get_params"], [574, 2, 1, "", "set_fit_request"], [574, 2, 1, "", "set_output"], [574, 2, 1, "", "set_params"], [574, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[575, 2, 1, "", "decision_function"], [575, 2, 1, "", "fit"], [575, 2, 1, "", "fit_transform"], [575, 2, 1, "", "get_feature_names_out"], [575, 2, 1, "", "get_metadata_routing"], [575, 2, 1, "", "get_params"], [575, 3, 1, "", "n_features_in_"], [575, 3, 1, "", "named_estimators"], [575, 2, 1, "", "predict"], [575, 2, 1, "", "predict_proba"], [575, 2, 1, "", "score"], [575, 2, 1, "", "set_fit_request"], [575, 2, 1, "", "set_output"], [575, 2, 1, "", "set_params"], [575, 2, 1, "", "set_score_request"], [575, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[576, 2, 1, "", "fit"], [576, 2, 1, "", "fit_transform"], [576, 2, 1, "", "get_feature_names_out"], [576, 2, 1, "", "get_metadata_routing"], [576, 2, 1, "", "get_params"], [576, 3, 1, "", "n_features_in_"], [576, 3, 1, "", "named_estimators"], [576, 2, 1, "", "predict"], [576, 2, 1, "", "score"], [576, 2, 1, "", "set_fit_request"], [576, 2, 1, "", "set_output"], [576, 2, 1, "", "set_params"], [576, 2, 1, "", "set_score_request"], [576, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[577, 2, 1, "", "fit"], [577, 2, 1, "", "fit_transform"], [577, 2, 1, "", "get_feature_names_out"], [577, 2, 1, "", "get_metadata_routing"], [577, 2, 1, "", "get_params"], [577, 3, 1, "", "n_features_in_"], [577, 3, 1, "", "named_estimators"], [577, 2, 1, "", "predict"], [577, 2, 1, "", "predict_proba"], [577, 2, 1, "", "score"], [577, 2, 1, "", "set_fit_request"], [577, 2, 1, "", "set_output"], [577, 2, 1, "", "set_params"], [577, 2, 1, "", "set_score_request"], [577, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_metadata_routing"], [578, 2, 1, "", "get_params"], [578, 3, 1, "", "n_features_in_"], [578, 3, 1, "", "named_estimators"], [578, 2, 1, "", "predict"], [578, 2, 1, "", "score"], [578, 2, 1, "", "set_fit_request"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "set_score_request"], [578, 2, 1, "", "transform"]], "sklearn.exceptions": [[579, 5, 1, "", "ConvergenceWarning"], [580, 5, 1, "", "DataConversionWarning"], [581, 5, 1, "", "DataDimensionalityWarning"], [582, 5, 1, "", "EfficiencyWarning"], [583, 5, 1, "", "FitFailedWarning"], [584, 5, 1, "", "InconsistentVersionWarning"], [585, 5, 1, "", "NotFittedError"], [586, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[587, 0, 0, "-", "enable_halving_search_cv"], [588, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[589, 1, 1, "", "DictVectorizer"], [590, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "restrict"], [589, 2, 1, "", "set_inverse_transform_request"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "set_transform_request"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[591, 1, 1, "", "PatchExtractor"], [592, 4, 1, "", "extract_patches_2d"], [593, 4, 1, "", "grid_to_graph"], [594, 4, 1, "", "img_to_graph"], [595, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[596, 1, 1, "", "CountVectorizer"], [597, 1, 1, "", "HashingVectorizer"], [598, 1, 1, "", "TfidfTransformer"], [599, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[596, 2, 1, "", "build_analyzer"], [596, 2, 1, "", "build_preprocessor"], [596, 2, 1, "", "build_tokenizer"], [596, 2, 1, "", "decode"], [596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_stop_words"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_fit_request"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "set_transform_request"], [596, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[597, 2, 1, "", "build_analyzer"], [597, 2, 1, "", "build_preprocessor"], [597, 2, 1, "", "build_tokenizer"], [597, 2, 1, "", "decode"], [597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_stop_words"], [597, 2, 1, "", "partial_fit"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 2, 1, "", "set_transform_request"], [598, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[599, 2, 1, "", "build_analyzer"], [599, 2, 1, "", "build_preprocessor"], [599, 2, 1, "", "build_tokenizer"], [599, 2, 1, "", "decode"], [599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_stop_words"], [599, 3, 1, "", "idf_"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_fit_request"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "set_transform_request"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection": [[600, 1, 1, "", "GenericUnivariateSelect"], [601, 1, 1, "", "RFE"], [602, 1, 1, "", "RFECV"], [603, 1, 1, "", "SelectFdr"], [604, 1, 1, "", "SelectFpr"], [605, 1, 1, "", "SelectFromModel"], [606, 1, 1, "", "SelectFwe"], [607, 1, 1, "", "SelectKBest"], [608, 1, 1, "", "SelectPercentile"], [609, 1, 1, "", "SelectorMixin"], [610, 1, 1, "", "SequentialFeatureSelector"], [611, 1, 1, "", "VarianceThreshold"], [612, 4, 1, "", "chi2"], [613, 4, 1, "", "f_classif"], [614, 4, 1, "", "f_regression"], [615, 4, 1, "", "mutual_info_classif"], [616, 4, 1, "", "mutual_info_regression"], [617, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[601, 3, 1, "", "classes_"], [601, 2, 1, "", "decision_function"], [601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "predict"], [601, 2, 1, "", "predict_log_proba"], [601, 2, 1, "", "predict_proba"], [601, 2, 1, "", "score"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[602, 3, 1, "", "classes_"], [602, 2, 1, "", "decision_function"], [602, 2, 1, "", "fit"], [602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_metadata_routing"], [602, 2, 1, "", "get_params"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "predict"], [602, 2, 1, "", "predict_log_proba"], [602, 2, 1, "", "predict_proba"], [602, 2, 1, "", "score"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "set_params"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[605, 2, 1, "", "fit"], [605, 2, 1, "", "fit_transform"], [605, 2, 1, "", "get_feature_names_out"], [605, 2, 1, "", "get_metadata_routing"], [605, 2, 1, "", "get_params"], [605, 2, 1, "", "get_support"], [605, 2, 1, "", "inverse_transform"], [605, 3, 1, "", "n_features_in_"], [605, 2, 1, "", "partial_fit"], [605, 2, 1, "", "set_output"], [605, 2, 1, "", "set_params"], [605, 3, 1, "", "threshold_"], [605, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[606, 2, 1, "", "fit"], [606, 2, 1, "", "fit_transform"], [606, 2, 1, "", "get_feature_names_out"], [606, 2, 1, "", "get_metadata_routing"], [606, 2, 1, "", "get_params"], [606, 2, 1, "", "get_support"], [606, 2, 1, "", "inverse_transform"], [606, 2, 1, "", "set_output"], [606, 2, 1, "", "set_params"], [606, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "fit_transform"], [607, 2, 1, "", "get_feature_names_out"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 2, 1, "", "get_support"], [607, 2, 1, "", "inverse_transform"], [607, 2, 1, "", "set_output"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "fit_transform"], [608, 2, 1, "", "get_feature_names_out"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "get_support"], [608, 2, 1, "", "inverse_transform"], [608, 2, 1, "", "set_output"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[609, 2, 1, "", "fit_transform"], [609, 2, 1, "", "get_feature_names_out"], [609, 2, 1, "", "get_support"], [609, 2, 1, "", "inverse_transform"], [609, 2, 1, "", "set_output"], [609, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[610, 2, 1, "", "fit"], [610, 2, 1, "", "fit_transform"], [610, 2, 1, "", "get_feature_names_out"], [610, 2, 1, "", "get_metadata_routing"], [610, 2, 1, "", "get_params"], [610, 2, 1, "", "get_support"], [610, 2, 1, "", "inverse_transform"], [610, 2, 1, "", "set_output"], [610, 2, 1, "", "set_params"], [610, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "fit_transform"], [611, 2, 1, "", "get_feature_names_out"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 2, 1, "", "get_support"], [611, 2, 1, "", "inverse_transform"], [611, 2, 1, "", "set_output"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[618, 1, 1, "", "GaussianProcessClassifier"], [619, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[618, 2, 1, "", "fit"], [618, 2, 1, "", "get_metadata_routing"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "kernel_"], [618, 2, 1, "", "log_marginal_likelihood"], [618, 2, 1, "", "predict"], [618, 2, 1, "", "predict_proba"], [618, 2, 1, "", "score"], [618, 2, 1, "", "set_params"], [618, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[619, 2, 1, "", "fit"], [619, 2, 1, "", "get_metadata_routing"], [619, 2, 1, "", "get_params"], [619, 2, 1, "", "log_marginal_likelihood"], [619, 2, 1, "", "predict"], [619, 2, 1, "", "sample_y"], [619, 2, 1, "", "score"], [619, 2, 1, "", "set_params"], [619, 2, 1, "", "set_predict_request"], [619, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[620, 1, 1, "", "CompoundKernel"], [621, 1, 1, "", "ConstantKernel"], [622, 1, 1, "", "DotProduct"], [623, 1, 1, "", "ExpSineSquared"], [624, 1, 1, "", "Exponentiation"], [625, 1, 1, "", "Hyperparameter"], [626, 1, 1, "", "Kernel"], [627, 1, 1, "", "Matern"], [628, 1, 1, "", "PairwiseKernel"], [629, 1, 1, "", "Product"], [630, 1, 1, "", "RBF"], [631, 1, 1, "", "RationalQuadratic"], [632, 1, 1, "", "Sum"], [633, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameter_length_scale"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[625, 6, 1, "", "bounds"], [625, 2, 1, "", "count"], [625, 6, 1, "", "fixed"], [625, 2, 1, "", "index"], [625, 6, 1, "", "n_elements"], [625, 6, 1, "", "name"], [625, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[627, 2, 1, "", "__call__"], [627, 3, 1, "", "bounds"], [627, 2, 1, "", "clone_with_theta"], [627, 2, 1, "", "diag"], [627, 2, 1, "", "get_params"], [627, 3, 1, "", "hyperparameters"], [627, 2, 1, "", "is_stationary"], [627, 3, 1, "", "n_dims"], [627, 3, 1, "", "requires_vector_input"], [627, 2, 1, "", "set_params"], [627, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[628, 2, 1, "", "__call__"], [628, 3, 1, "", "bounds"], [628, 2, 1, "", "clone_with_theta"], [628, 2, 1, "", "diag"], [628, 2, 1, "", "get_params"], [628, 3, 1, "", "hyperparameters"], [628, 2, 1, "", "is_stationary"], [628, 3, 1, "", "n_dims"], [628, 3, 1, "", "requires_vector_input"], [628, 2, 1, "", "set_params"], [628, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[629, 2, 1, "", "__call__"], [629, 3, 1, "", "bounds"], [629, 2, 1, "", "clone_with_theta"], [629, 2, 1, "", "diag"], [629, 2, 1, "", "get_params"], [629, 3, 1, "", "hyperparameters"], [629, 2, 1, "", "is_stationary"], [629, 3, 1, "", "n_dims"], [629, 3, 1, "", "requires_vector_input"], [629, 2, 1, "", "set_params"], [629, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[630, 2, 1, "", "__call__"], [630, 3, 1, "", "bounds"], [630, 2, 1, "", "clone_with_theta"], [630, 2, 1, "", "diag"], [630, 2, 1, "", "get_params"], [630, 3, 1, "", "hyperparameters"], [630, 2, 1, "", "is_stationary"], [630, 3, 1, "", "n_dims"], [630, 3, 1, "", "requires_vector_input"], [630, 2, 1, "", "set_params"], [630, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[631, 2, 1, "", "__call__"], [631, 3, 1, "", "bounds"], [631, 2, 1, "", "clone_with_theta"], [631, 2, 1, "", "diag"], [631, 2, 1, "", "get_params"], [631, 3, 1, "", "hyperparameters"], [631, 2, 1, "", "is_stationary"], [631, 3, 1, "", "n_dims"], [631, 3, 1, "", "requires_vector_input"], [631, 2, 1, "", "set_params"], [631, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[632, 2, 1, "", "__call__"], [632, 3, 1, "", "bounds"], [632, 2, 1, "", "clone_with_theta"], [632, 2, 1, "", "diag"], [632, 2, 1, "", "get_params"], [632, 3, 1, "", "hyperparameters"], [632, 2, 1, "", "is_stationary"], [632, 3, 1, "", "n_dims"], [632, 3, 1, "", "requires_vector_input"], [632, 2, 1, "", "set_params"], [632, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[633, 2, 1, "", "__call__"], [633, 3, 1, "", "bounds"], [633, 2, 1, "", "clone_with_theta"], [633, 2, 1, "", "diag"], [633, 2, 1, "", "get_params"], [633, 3, 1, "", "hyperparameters"], [633, 2, 1, "", "is_stationary"], [633, 3, 1, "", "n_dims"], [633, 3, 1, "", "requires_vector_input"], [633, 2, 1, "", "set_params"], [633, 3, 1, "", "theta"]], "sklearn.impute": [[635, 1, 1, "", "IterativeImputer"], [636, 1, 1, "", "KNNImputer"], [637, 1, 1, "", "MissingIndicator"], [638, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "fit_transform"], [637, 2, 1, "", "get_feature_names_out"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "set_output"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "inverse_transform"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.inspection": [[639, 1, 1, "", "DecisionBoundaryDisplay"], [640, 1, 1, "", "PartialDependenceDisplay"], [641, 4, 1, "", "partial_dependence"], [642, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[639, 2, 1, "", "from_estimator"], [639, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[640, 2, 1, "", "from_estimator"], [640, 2, 1, "", "plot"]], "sklearn.isotonic": [[643, 1, 1, "", "IsotonicRegression"], [644, 4, 1, "", "check_increasing"], [645, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_predict_request"], [643, 2, 1, "", "set_score_request"], [643, 2, 1, "", "set_transform_request"], [643, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[646, 1, 1, "", "AdditiveChi2Sampler"], [647, 1, 1, "", "Nystroem"], [648, 1, 1, "", "PolynomialCountSketch"], [649, 1, 1, "", "RBFSampler"], [650, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "fit_transform"], [646, 2, 1, "", "get_feature_names_out"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "set_output"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "fit_transform"], [647, 2, 1, "", "get_feature_names_out"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "set_output"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "fit_transform"], [648, 2, 1, "", "get_feature_names_out"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "set_output"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "fit_transform"], [649, 2, 1, "", "get_feature_names_out"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "set_output"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "fit_transform"], [650, 2, 1, "", "get_feature_names_out"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "set_output"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[651, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[652, 1, 1, "", "ARDRegression"], [653, 1, 1, "", "BayesianRidge"], [654, 1, 1, "", "ElasticNet"], [655, 1, 1, "", "ElasticNetCV"], [656, 1, 1, "", "GammaRegressor"], [657, 1, 1, "", "HuberRegressor"], [658, 1, 1, "", "Lars"], [659, 1, 1, "", "LarsCV"], [660, 1, 1, "", "Lasso"], [661, 1, 1, "", "LassoCV"], [662, 1, 1, "", "LassoLars"], [663, 1, 1, "", "LassoLarsCV"], [664, 1, 1, "", "LassoLarsIC"], [665, 1, 1, "", "LinearRegression"], [666, 1, 1, "", "LogisticRegression"], [667, 1, 1, "", "LogisticRegressionCV"], [668, 1, 1, "", "MultiTaskElasticNet"], [669, 1, 1, "", "MultiTaskElasticNetCV"], [670, 1, 1, "", "MultiTaskLasso"], [671, 1, 1, "", "MultiTaskLassoCV"], [672, 1, 1, "", "OrthogonalMatchingPursuit"], [673, 1, 1, "", "OrthogonalMatchingPursuitCV"], [674, 1, 1, "", "PassiveAggressiveClassifier"], [675, 1, 1, "", "PassiveAggressiveRegressor"], [676, 1, 1, "", "Perceptron"], [677, 1, 1, "", "PoissonRegressor"], [678, 1, 1, "", "QuantileRegressor"], [679, 1, 1, "", "RANSACRegressor"], [680, 1, 1, "", "Ridge"], [681, 1, 1, "", "RidgeCV"], [682, 1, 1, "", "RidgeClassifier"], [683, 1, 1, "", "RidgeClassifierCV"], [684, 1, 1, "", "SGDClassifier"], [685, 1, 1, "", "SGDOneClassSVM"], [686, 1, 1, "", "SGDRegressor"], [687, 1, 1, "", "TheilSenRegressor"], [688, 1, 1, "", "TweedieRegressor"], [689, 4, 1, "", "enet_path"], [690, 4, 1, "", "lars_path"], [691, 4, 1, "", "lars_path_gram"], [692, 4, 1, "", "lasso_path"], [693, 4, 1, "", "orthogonal_mp"], [694, 4, 1, "", "orthogonal_mp_gram"], [695, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_predict_request"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_predict_request"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "path"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"], [654, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "path"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"], [660, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[666, 2, 1, "", "decision_function"], [666, 2, 1, "", "densify"], [666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "predict_log_proba"], [666, 2, 1, "", "predict_proba"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"], [666, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[667, 2, 1, "", "decision_function"], [667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "predict_log_proba"], [667, 2, 1, "", "predict_proba"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "path"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_score_request"], [668, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "path"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "path"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"], [670, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "path"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[674, 2, 1, "", "decision_function"], [674, 2, 1, "", "densify"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "partial_fit"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_partial_fit_request"], [674, 2, 1, "", "set_score_request"], [674, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[675, 2, 1, "", "densify"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "partial_fit"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_partial_fit_request"], [675, 2, 1, "", "set_score_request"], [675, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[676, 2, 1, "", "decision_function"], [676, 2, 1, "", "densify"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "partial_fit"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_partial_fit_request"], [676, 2, 1, "", "set_score_request"], [676, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[678, 2, 1, "", "fit"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_fit_request"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[682, 3, 1, "", "classes_"], [682, 2, 1, "", "decision_function"], [682, 2, 1, "", "fit"], [682, 2, 1, "", "get_metadata_routing"], [682, 2, 1, "", "get_params"], [682, 2, 1, "", "predict"], [682, 2, 1, "", "score"], [682, 2, 1, "", "set_fit_request"], [682, 2, 1, "", "set_params"], [682, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[683, 3, 1, "", "classes_"], [683, 2, 1, "", "decision_function"], [683, 2, 1, "", "fit"], [683, 2, 1, "", "get_metadata_routing"], [683, 2, 1, "", "get_params"], [683, 2, 1, "", "predict"], [683, 2, 1, "", "score"], [683, 2, 1, "", "set_fit_request"], [683, 2, 1, "", "set_params"], [683, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[684, 2, 1, "", "decision_function"], [684, 2, 1, "", "densify"], [684, 2, 1, "", "fit"], [684, 2, 1, "", "get_metadata_routing"], [684, 2, 1, "", "get_params"], [684, 2, 1, "", "partial_fit"], [684, 2, 1, "", "predict"], [684, 2, 1, "", "predict_log_proba"], [684, 2, 1, "", "predict_proba"], [684, 2, 1, "", "score"], [684, 2, 1, "", "set_fit_request"], [684, 2, 1, "", "set_params"], [684, 2, 1, "", "set_partial_fit_request"], [684, 2, 1, "", "set_score_request"], [684, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[685, 2, 1, "", "decision_function"], [685, 2, 1, "", "densify"], [685, 2, 1, "", "fit"], [685, 2, 1, "", "fit_predict"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "partial_fit"], [685, 2, 1, "", "predict"], [685, 2, 1, "", "score_samples"], [685, 2, 1, "", "set_fit_request"], [685, 2, 1, "", "set_params"], [685, 2, 1, "", "set_partial_fit_request"], [685, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[686, 2, 1, "", "densify"], [686, 2, 1, "", "fit"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "partial_fit"], [686, 2, 1, "", "predict"], [686, 2, 1, "", "score"], [686, 2, 1, "", "set_fit_request"], [686, 2, 1, "", "set_params"], [686, 2, 1, "", "set_partial_fit_request"], [686, 2, 1, "", "set_score_request"], [686, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[687, 2, 1, "", "fit"], [687, 2, 1, "", "get_metadata_routing"], [687, 2, 1, "", "get_params"], [687, 2, 1, "", "predict"], [687, 2, 1, "", "score"], [687, 2, 1, "", "set_params"], [687, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "predict"], [688, 2, 1, "", "score"], [688, 2, 1, "", "set_fit_request"], [688, 2, 1, "", "set_params"], [688, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[696, 1, 1, "", "Isomap"], [697, 1, 1, "", "LocallyLinearEmbedding"], [698, 1, 1, "", "MDS"], [699, 1, 1, "", "SpectralEmbedding"], [700, 1, 1, "", "TSNE"], [701, 4, 1, "", "locally_linear_embedding"], [702, 4, 1, "", "smacof"], [703, 4, 1, "", "spectral_embedding"], [704, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[696, 2, 1, "", "fit"], [696, 2, 1, "", "fit_transform"], [696, 2, 1, "", "get_feature_names_out"], [696, 2, 1, "", "get_metadata_routing"], [696, 2, 1, "", "get_params"], [696, 2, 1, "", "reconstruction_error"], [696, 2, 1, "", "set_output"], [696, 2, 1, "", "set_params"], [696, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[697, 2, 1, "", "fit"], [697, 2, 1, "", "fit_transform"], [697, 2, 1, "", "get_feature_names_out"], [697, 2, 1, "", "get_metadata_routing"], [697, 2, 1, "", "get_params"], [697, 2, 1, "", "set_output"], [697, 2, 1, "", "set_params"], [697, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[698, 2, 1, "", "fit"], [698, 2, 1, "", "fit_transform"], [698, 2, 1, "", "get_metadata_routing"], [698, 2, 1, "", "get_params"], [698, 2, 1, "", "set_fit_request"], [698, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[699, 2, 1, "", "fit"], [699, 2, 1, "", "fit_transform"], [699, 2, 1, "", "get_metadata_routing"], [699, 2, 1, "", "get_params"], [699, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[700, 2, 1, "", "fit"], [700, 2, 1, "", "fit_transform"], [700, 2, 1, "", "get_feature_names_out"], [700, 2, 1, "", "get_metadata_routing"], [700, 2, 1, "", "get_params"], [700, 2, 1, "", "set_output"], [700, 2, 1, "", "set_params"]], "sklearn.metrics": [[705, 1, 1, "", "ConfusionMatrixDisplay"], [706, 1, 1, "", "DetCurveDisplay"], [707, 1, 1, "", "DistanceMetric"], [708, 1, 1, "", "PrecisionRecallDisplay"], [709, 1, 1, "", "PredictionErrorDisplay"], [710, 1, 1, "", "RocCurveDisplay"], [711, 4, 1, "", "accuracy_score"], [712, 4, 1, "", "adjusted_mutual_info_score"], [713, 4, 1, "", "adjusted_rand_score"], [714, 4, 1, "", "auc"], [715, 4, 1, "", "average_precision_score"], [716, 4, 1, "", "balanced_accuracy_score"], [717, 4, 1, "", "brier_score_loss"], [718, 4, 1, "", "calinski_harabasz_score"], [719, 4, 1, "", "check_scoring"], [720, 4, 1, "", "class_likelihood_ratios"], [721, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [724, 4, 1, "", "cohen_kappa_score"], [725, 4, 1, "", "completeness_score"], [726, 4, 1, "", "confusion_matrix"], [727, 4, 1, "", "consensus_score"], [728, 4, 1, "", "coverage_error"], [729, 4, 1, "", "d2_absolute_error_score"], [730, 4, 1, "", "d2_log_loss_score"], [731, 4, 1, "", "d2_pinball_score"], [732, 4, 1, "", "d2_tweedie_score"], [733, 4, 1, "", "davies_bouldin_score"], [734, 4, 1, "", "dcg_score"], [735, 4, 1, "", "det_curve"], [736, 4, 1, "", "explained_variance_score"], [737, 4, 1, "", "f1_score"], [738, 4, 1, "", "fbeta_score"], [739, 4, 1, "", "fowlkes_mallows_score"], [740, 4, 1, "", "get_scorer"], [741, 4, 1, "", "get_scorer_names"], [742, 4, 1, "", "hamming_loss"], [743, 4, 1, "", "hinge_loss"], [744, 4, 1, "", "homogeneity_completeness_v_measure"], [745, 4, 1, "", "homogeneity_score"], [746, 4, 1, "", "jaccard_score"], [747, 4, 1, "", "label_ranking_average_precision_score"], [748, 4, 1, "", "label_ranking_loss"], [749, 4, 1, "", "log_loss"], [750, 4, 1, "", "make_scorer"], [751, 4, 1, "", "matthews_corrcoef"], [752, 4, 1, "", "max_error"], [753, 4, 1, "", "mean_absolute_error"], [754, 4, 1, "", "mean_absolute_percentage_error"], [755, 4, 1, "", "mean_gamma_deviance"], [756, 4, 1, "", "mean_pinball_loss"], [757, 4, 1, "", "mean_poisson_deviance"], [758, 4, 1, "", "mean_squared_error"], [759, 4, 1, "", "mean_squared_log_error"], [760, 4, 1, "", "mean_tweedie_deviance"], [761, 4, 1, "", "median_absolute_error"], [762, 4, 1, "", "multilabel_confusion_matrix"], [763, 4, 1, "", "mutual_info_score"], [764, 4, 1, "", "ndcg_score"], [765, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [786, 4, 1, "", "pairwise_distances"], [787, 4, 1, "", "pairwise_distances_argmin"], [788, 4, 1, "", "pairwise_distances_argmin_min"], [789, 4, 1, "", "pairwise_distances_chunked"], [790, 4, 1, "", "precision_recall_curve"], [791, 4, 1, "", "precision_recall_fscore_support"], [792, 4, 1, "", "precision_score"], [793, 4, 1, "", "r2_score"], [794, 4, 1, "", "rand_score"], [795, 4, 1, "", "recall_score"], [796, 4, 1, "", "roc_auc_score"], [797, 4, 1, "", "roc_curve"], [798, 4, 1, "", "root_mean_squared_error"], [799, 4, 1, "", "root_mean_squared_log_error"], [800, 4, 1, "", "silhouette_samples"], [801, 4, 1, "", "silhouette_score"], [802, 4, 1, "", "top_k_accuracy_score"], [803, 4, 1, "", "v_measure_score"], [804, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[705, 2, 1, "", "from_estimator"], [705, 2, 1, "", "from_predictions"], [705, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[706, 2, 1, "", "from_estimator"], [706, 2, 1, "", "from_predictions"], [706, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[707, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[708, 2, 1, "", "from_estimator"], [708, 2, 1, "", "from_predictions"], [708, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[709, 2, 1, "", "from_estimator"], [709, 2, 1, "", "from_predictions"], [709, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[710, 2, 1, "", "from_estimator"], [710, 2, 1, "", "from_predictions"], [710, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[722, 4, 1, "", "contingency_matrix"], [723, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[766, 4, 1, "", "additive_chi2_kernel"], [767, 4, 1, "", "chi2_kernel"], [768, 4, 1, "", "cosine_distances"], [769, 4, 1, "", "cosine_similarity"], [770, 4, 1, "", "distance_metrics"], [771, 4, 1, "", "euclidean_distances"], [772, 4, 1, "", "haversine_distances"], [773, 4, 1, "", "kernel_metrics"], [774, 4, 1, "", "laplacian_kernel"], [775, 4, 1, "", "linear_kernel"], [776, 4, 1, "", "manhattan_distances"], [777, 4, 1, "", "nan_euclidean_distances"], [778, 4, 1, "", "paired_cosine_distances"], [779, 4, 1, "", "paired_distances"], [780, 4, 1, "", "paired_euclidean_distances"], [781, 4, 1, "", "paired_manhattan_distances"], [782, 4, 1, "", "pairwise_kernels"], [783, 4, 1, "", "polynomial_kernel"], [784, 4, 1, "", "rbf_kernel"], [785, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[805, 1, 1, "", "BayesianGaussianMixture"], [806, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[805, 2, 1, "", "fit"], [805, 2, 1, "", "fit_predict"], [805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "sample"], [805, 2, 1, "", "score"], [805, 2, 1, "", "score_samples"], [805, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[806, 2, 1, "", "aic"], [806, 2, 1, "", "bic"], [806, 2, 1, "", "fit"], [806, 2, 1, "", "fit_predict"], [806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_params"], [806, 2, 1, "", "predict"], [806, 2, 1, "", "predict_proba"], [806, 2, 1, "", "sample"], [806, 2, 1, "", "score"], [806, 2, 1, "", "score_samples"], [806, 2, 1, "", "set_params"]], "sklearn.model_selection": [[807, 1, 1, "", "FixedThresholdClassifier"], [808, 1, 1, "", "GridSearchCV"], [809, 1, 1, "", "GroupKFold"], [810, 1, 1, "", "GroupShuffleSplit"], [811, 1, 1, "", "HalvingGridSearchCV"], [812, 1, 1, "", "HalvingRandomSearchCV"], [813, 1, 1, "", "KFold"], [814, 1, 1, "", "LearningCurveDisplay"], [815, 1, 1, "", "LeaveOneGroupOut"], [816, 1, 1, "", "LeaveOneOut"], [817, 1, 1, "", "LeavePGroupsOut"], [818, 1, 1, "", "LeavePOut"], [819, 1, 1, "", "ParameterGrid"], [820, 1, 1, "", "ParameterSampler"], [821, 1, 1, "", "PredefinedSplit"], [822, 1, 1, "", "RandomizedSearchCV"], [823, 1, 1, "", "RepeatedKFold"], [824, 1, 1, "", "RepeatedStratifiedKFold"], [825, 1, 1, "", "ShuffleSplit"], [826, 1, 1, "", "StratifiedGroupKFold"], [827, 1, 1, "", "StratifiedKFold"], [828, 1, 1, "", "StratifiedShuffleSplit"], [829, 1, 1, "", "TimeSeriesSplit"], [830, 1, 1, "", "TunedThresholdClassifierCV"], [831, 1, 1, "", "ValidationCurveDisplay"], [832, 4, 1, "", "check_cv"], [833, 4, 1, "", "cross_val_predict"], [834, 4, 1, "", "cross_val_score"], [835, 4, 1, "", "cross_validate"], [836, 4, 1, "", "learning_curve"], [837, 4, 1, "", "permutation_test_score"], [838, 4, 1, "", "train_test_split"], [839, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[807, 3, 1, "", "classes_"], [807, 2, 1, "", "decision_function"], [807, 2, 1, "", "fit"], [807, 2, 1, "", "get_metadata_routing"], [807, 2, 1, "", "get_params"], [807, 2, 1, "", "predict"], [807, 2, 1, "", "predict_log_proba"], [807, 2, 1, "", "predict_proba"], [807, 2, 1, "", "score"], [807, 2, 1, "", "set_params"], [807, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[808, 3, 1, "", "classes_"], [808, 2, 1, "", "decision_function"], [808, 2, 1, "", "fit"], [808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_params"], [808, 2, 1, "", "inverse_transform"], [808, 3, 1, "", "n_features_in_"], [808, 2, 1, "", "predict"], [808, 2, 1, "", "predict_log_proba"], [808, 2, 1, "", "predict_proba"], [808, 2, 1, "", "score"], [808, 2, 1, "", "score_samples"], [808, 2, 1, "", "set_params"], [808, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "set_split_request"], [809, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "set_split_request"], [810, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[811, 3, 1, "", "classes_"], [811, 2, 1, "", "decision_function"], [811, 2, 1, "", "fit"], [811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_params"], [811, 2, 1, "", "inverse_transform"], [811, 3, 1, "", "n_features_in_"], [811, 2, 1, "", "predict"], [811, 2, 1, "", "predict_log_proba"], [811, 2, 1, "", "predict_proba"], [811, 2, 1, "", "score"], [811, 2, 1, "", "score_samples"], [811, 2, 1, "", "set_params"], [811, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[812, 3, 1, "", "classes_"], [812, 2, 1, "", "decision_function"], [812, 2, 1, "", "fit"], [812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_params"], [812, 2, 1, "", "inverse_transform"], [812, 3, 1, "", "n_features_in_"], [812, 2, 1, "", "predict"], [812, 2, 1, "", "predict_log_proba"], [812, 2, 1, "", "predict_proba"], [812, 2, 1, "", "score"], [812, 2, 1, "", "score_samples"], [812, 2, 1, "", "set_params"], [812, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[814, 2, 1, "", "from_estimator"], [814, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "set_split_request"], [815, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "set_split_request"], [817, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[822, 3, 1, "", "classes_"], [822, 2, 1, "", "decision_function"], [822, 2, 1, "", "fit"], [822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_params"], [822, 2, 1, "", "inverse_transform"], [822, 3, 1, "", "n_features_in_"], [822, 2, 1, "", "predict"], [822, 2, 1, "", "predict_log_proba"], [822, 2, 1, "", "predict_proba"], [822, 2, 1, "", "score"], [822, 2, 1, "", "score_samples"], [822, 2, 1, "", "set_params"], [822, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_n_splits"], [823, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[824, 2, 1, "", "get_metadata_routing"], [824, 2, 1, "", "get_n_splits"], [824, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[825, 2, 1, "", "get_metadata_routing"], [825, 2, 1, "", "get_n_splits"], [825, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_n_splits"], [826, 2, 1, "", "set_split_request"], [826, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_n_splits"], [827, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_n_splits"], [828, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_n_splits"], [829, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[830, 3, 1, "", "classes_"], [830, 2, 1, "", "decision_function"], [830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_log_proba"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[831, 2, 1, "", "from_estimator"], [831, 2, 1, "", "plot"]], "sklearn.multiclass": [[840, 1, 1, "", "OneVsOneClassifier"], [841, 1, 1, "", "OneVsRestClassifier"], [842, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[840, 2, 1, "", "decision_function"], [840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 3, 1, "", "n_classes_"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[841, 2, 1, "", "decision_function"], [841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 3, 1, "", "multilabel_"], [841, 3, 1, "", "n_classes_"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[843, 1, 1, "", "ClassifierChain"], [844, 1, 1, "", "MultiOutputClassifier"], [845, 1, 1, "", "MultiOutputRegressor"], [846, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[843, 2, 1, "", "decision_function"], [843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "partial_fit"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_fit_request"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_partial_fit_request"], [845, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "predict"], [846, 2, 1, "", "score"], [846, 2, 1, "", "set_params"], [846, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[847, 1, 1, "", "BernoulliNB"], [848, 1, 1, "", "CategoricalNB"], [849, 1, 1, "", "ComplementNB"], [850, 1, 1, "", "GaussianNB"], [851, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "partial_fit"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_joint_log_proba"], [847, 2, 1, "", "predict_log_proba"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_fit_request"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_partial_fit_request"], [847, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "partial_fit"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "predict_joint_log_proba"], [848, 2, 1, "", "predict_log_proba"], [848, 2, 1, "", "predict_proba"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_fit_request"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_partial_fit_request"], [848, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "partial_fit"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "predict_joint_log_proba"], [849, 2, 1, "", "predict_log_proba"], [849, 2, 1, "", "predict_proba"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_fit_request"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_partial_fit_request"], [849, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "partial_fit"], [850, 2, 1, "", "predict"], [850, 2, 1, "", "predict_joint_log_proba"], [850, 2, 1, "", "predict_log_proba"], [850, 2, 1, "", "predict_proba"], [850, 2, 1, "", "score"], [850, 2, 1, "", "set_fit_request"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "set_partial_fit_request"], [850, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[851, 2, 1, "", "fit"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "partial_fit"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "predict_joint_log_proba"], [851, 2, 1, "", "predict_log_proba"], [851, 2, 1, "", "predict_proba"], [851, 2, 1, "", "score"], [851, 2, 1, "", "set_fit_request"], [851, 2, 1, "", "set_params"], [851, 2, 1, "", "set_partial_fit_request"], [851, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[852, 1, 1, "", "BallTree"], [853, 1, 1, "", "KDTree"], [854, 1, 1, "", "KNeighborsClassifier"], [855, 1, 1, "", "KNeighborsRegressor"], [856, 1, 1, "", "KNeighborsTransformer"], [857, 1, 1, "", "KernelDensity"], [858, 1, 1, "", "LocalOutlierFactor"], [859, 1, 1, "", "NearestCentroid"], [860, 1, 1, "", "NearestNeighbors"], [861, 1, 1, "", "NeighborhoodComponentsAnalysis"], [862, 1, 1, "", "RadiusNeighborsClassifier"], [863, 1, 1, "", "RadiusNeighborsRegressor"], [864, 1, 1, "", "RadiusNeighborsTransformer"], [865, 4, 1, "", "kneighbors_graph"], [866, 4, 1, "", "radius_neighbors_graph"], [867, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[852, 2, 1, "", "get_arrays"], [852, 2, 1, "", "get_n_calls"], [852, 2, 1, "", "get_tree_stats"], [852, 2, 1, "", "kernel_density"], [852, 2, 1, "", "query"], [852, 2, 1, "", "query_radius"], [852, 2, 1, "", "reset_n_calls"], [852, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[853, 2, 1, "", "get_arrays"], [853, 2, 1, "", "get_n_calls"], [853, 2, 1, "", "get_tree_stats"], [853, 2, 1, "", "kernel_density"], [853, 2, 1, "", "query"], [853, 2, 1, "", "query_radius"], [853, 2, 1, "", "reset_n_calls"], [853, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "kneighbors"], [854, 2, 1, "", "kneighbors_graph"], [854, 2, 1, "", "predict"], [854, 2, 1, "", "predict_proba"], [854, 2, 1, "", "score"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "kneighbors"], [855, 2, 1, "", "kneighbors_graph"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "fit_transform"], [856, 2, 1, "", "get_feature_names_out"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "kneighbors"], [856, 2, 1, "", "kneighbors_graph"], [856, 2, 1, "", "set_output"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "sample"], [857, 2, 1, "", "score"], [857, 2, 1, "", "score_samples"], [857, 2, 1, "", "set_fit_request"], [857, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[858, 2, 1, "", "decision_function"], [858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_predict"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "kneighbors"], [858, 2, 1, "", "kneighbors_graph"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "score_samples"], [858, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[859, 2, 1, "", "fit"], [859, 2, 1, "", "get_metadata_routing"], [859, 2, 1, "", "get_params"], [859, 2, 1, "", "predict"], [859, 2, 1, "", "score"], [859, 2, 1, "", "set_params"], [859, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[860, 2, 1, "", "fit"], [860, 2, 1, "", "get_metadata_routing"], [860, 2, 1, "", "get_params"], [860, 2, 1, "", "kneighbors"], [860, 2, 1, "", "kneighbors_graph"], [860, 2, 1, "", "radius_neighbors"], [860, 2, 1, "", "radius_neighbors_graph"], [860, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "predict_proba"], [862, 2, 1, "", "radius_neighbors"], [862, 2, 1, "", "radius_neighbors_graph"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "predict"], [863, 2, 1, "", "radius_neighbors"], [863, 2, 1, "", "radius_neighbors_graph"], [863, 2, 1, "", "score"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "radius_neighbors"], [864, 2, 1, "", "radius_neighbors_graph"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.neural_network": [[868, 1, 1, "", "BernoulliRBM"], [869, 1, 1, "", "MLPClassifier"], [870, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "gibbs"], [868, 2, 1, "", "partial_fit"], [868, 2, 1, "", "score_samples"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "partial_fit"], [869, 2, 1, "", "predict"], [869, 2, 1, "", "predict_log_proba"], [869, 2, 1, "", "predict_proba"], [869, 2, 1, "", "score"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "set_partial_fit_request"], [869, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "partial_fit"], [870, 2, 1, "", "predict"], [870, 2, 1, "", "score"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[871, 1, 1, "", "FeatureUnion"], [872, 1, 1, "", "Pipeline"], [873, 4, 1, "", "make_pipeline"], [874, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[871, 3, 1, "", "feature_names_in_"], [871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 3, 1, "", "n_features_in_"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[872, 3, 1, "", "classes_"], [872, 2, 1, "", "decision_function"], [872, 3, 1, "", "feature_names_in_"], [872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_predict"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 3, 1, "", "n_features_in_"], [872, 3, 1, "", "named_steps"], [872, 2, 1, "", "predict"], [872, 2, 1, "", "predict_log_proba"], [872, 2, 1, "", "predict_proba"], [872, 2, 1, "", "score"], [872, 2, 1, "", "score_samples"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "set_score_request"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing": [[875, 1, 1, "", "Binarizer"], [876, 1, 1, "", "FunctionTransformer"], [877, 1, 1, "", "KBinsDiscretizer"], [878, 1, 1, "", "KernelCenterer"], [879, 1, 1, "", "LabelBinarizer"], [880, 1, 1, "", "LabelEncoder"], [881, 1, 1, "", "MaxAbsScaler"], [882, 1, 1, "", "MinMaxScaler"], [883, 1, 1, "", "MultiLabelBinarizer"], [884, 1, 1, "", "Normalizer"], [885, 1, 1, "", "OneHotEncoder"], [886, 1, 1, "", "OrdinalEncoder"], [887, 1, 1, "", "PolynomialFeatures"], [888, 1, 1, "", "PowerTransformer"], [889, 1, 1, "", "QuantileTransformer"], [890, 1, 1, "", "RobustScaler"], [891, 1, 1, "", "SplineTransformer"], [892, 1, 1, "", "StandardScaler"], [893, 1, 1, "", "TargetEncoder"], [894, 4, 1, "", "add_dummy_feature"], [895, 4, 1, "", "binarize"], [896, 4, 1, "", "label_binarize"], [897, 4, 1, "", "maxabs_scale"], [898, 4, 1, "", "minmax_scale"], [899, 4, 1, "", "normalize"], [900, 4, 1, "", "power_transform"], [901, 4, 1, "", "quantile_transform"], [902, 4, 1, "", "robust_scale"], [903, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "set_transform_request"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "inverse_transform"], [877, 2, 1, "", "set_fit_request"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "set_fit_request"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "set_transform_request"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "set_inverse_transform_request"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 2, 1, "", "inverse_transform"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "partial_fit"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "partial_fit"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "set_transform_request"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 3, 1, "", "infrequent_categories_"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 3, 1, "", "infrequent_categories_"], [886, 2, 1, "", "inverse_transform"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[887, 2, 1, "", "fit"], [887, 2, 1, "", "fit_transform"], [887, 2, 1, "", "get_feature_names_out"], [887, 2, 1, "", "get_metadata_routing"], [887, 2, 1, "", "get_params"], [887, 3, 1, "", "powers_"], [887, 2, 1, "", "set_output"], [887, 2, 1, "", "set_params"], [887, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[888, 2, 1, "", "fit"], [888, 2, 1, "", "fit_transform"], [888, 2, 1, "", "get_feature_names_out"], [888, 2, 1, "", "get_metadata_routing"], [888, 2, 1, "", "get_params"], [888, 2, 1, "", "inverse_transform"], [888, 2, 1, "", "set_output"], [888, 2, 1, "", "set_params"], [888, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[889, 2, 1, "", "fit"], [889, 2, 1, "", "fit_transform"], [889, 2, 1, "", "get_feature_names_out"], [889, 2, 1, "", "get_metadata_routing"], [889, 2, 1, "", "get_params"], [889, 2, 1, "", "inverse_transform"], [889, 2, 1, "", "set_output"], [889, 2, 1, "", "set_params"], [889, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[890, 2, 1, "", "fit"], [890, 2, 1, "", "fit_transform"], [890, 2, 1, "", "get_feature_names_out"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "inverse_transform"], [890, 2, 1, "", "set_output"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[891, 2, 1, "", "fit"], [891, 2, 1, "", "fit_transform"], [891, 2, 1, "", "get_feature_names_out"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "set_fit_request"], [891, 2, 1, "", "set_output"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[892, 2, 1, "", "fit"], [892, 2, 1, "", "fit_transform"], [892, 2, 1, "", "get_feature_names_out"], [892, 2, 1, "", "get_metadata_routing"], [892, 2, 1, "", "get_params"], [892, 2, 1, "", "inverse_transform"], [892, 2, 1, "", "partial_fit"], [892, 2, 1, "", "set_fit_request"], [892, 2, 1, "", "set_inverse_transform_request"], [892, 2, 1, "", "set_output"], [892, 2, 1, "", "set_params"], [892, 2, 1, "", "set_partial_fit_request"], [892, 2, 1, "", "set_transform_request"], [892, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[893, 2, 1, "", "fit"], [893, 2, 1, "", "fit_transform"], [893, 2, 1, "", "get_feature_names_out"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 3, 1, "", "infrequent_categories_"], [893, 2, 1, "", "set_output"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "transform"]], "sklearn.random_projection": [[904, 1, 1, "", "GaussianRandomProjection"], [905, 1, 1, "", "SparseRandomProjection"], [906, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[904, 2, 1, "", "fit"], [904, 2, 1, "", "fit_transform"], [904, 2, 1, "", "get_feature_names_out"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 2, 1, "", "inverse_transform"], [904, 2, 1, "", "set_output"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[905, 2, 1, "", "fit"], [905, 2, 1, "", "fit_transform"], [905, 2, 1, "", "get_feature_names_out"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "inverse_transform"], [905, 2, 1, "", "set_output"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[907, 1, 1, "", "LabelPropagation"], [908, 1, 1, "", "LabelSpreading"], [909, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "predict_proba"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "predict_proba"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[909, 2, 1, "", "decision_function"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "predict_log_proba"], [909, 2, 1, "", "predict_proba"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_params"]], "sklearn.svm": [[912, 1, 1, "", "LinearSVC"], [913, 1, 1, "", "LinearSVR"], [914, 1, 1, "", "NuSVC"], [915, 1, 1, "", "NuSVR"], [916, 1, 1, "", "OneClassSVM"], [917, 1, 1, "", "SVC"], [918, 1, 1, "", "SVR"], [919, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[912, 2, 1, "", "decision_function"], [912, 2, 1, "", "densify"], [912, 2, 1, "", "fit"], [912, 2, 1, "", "get_metadata_routing"], [912, 2, 1, "", "get_params"], [912, 2, 1, "", "predict"], [912, 2, 1, "", "score"], [912, 2, 1, "", "set_fit_request"], [912, 2, 1, "", "set_params"], [912, 2, 1, "", "set_score_request"], [912, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[913, 2, 1, "", "fit"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_params"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[914, 3, 1, "", "coef_"], [914, 2, 1, "", "decision_function"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_params"], [914, 3, 1, "", "n_support_"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "predict_log_proba"], [914, 2, 1, "", "predict_proba"], [914, 3, 1, "", "probA_"], [914, 3, 1, "", "probB_"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[915, 3, 1, "", "coef_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_params"], [915, 3, 1, "", "n_support_"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[916, 3, 1, "", "coef_"], [916, 2, 1, "", "decision_function"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "fit_predict"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_params"], [916, 3, 1, "", "n_support_"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "score_samples"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[917, 3, 1, "", "coef_"], [917, 2, 1, "", "decision_function"], [917, 2, 1, "", "fit"], [917, 2, 1, "", "get_metadata_routing"], [917, 2, 1, "", "get_params"], [917, 3, 1, "", "n_support_"], [917, 2, 1, "", "predict"], [917, 2, 1, "", "predict_log_proba"], [917, 2, 1, "", "predict_proba"], [917, 3, 1, "", "probA_"], [917, 3, 1, "", "probB_"], [917, 2, 1, "", "score"], [917, 2, 1, "", "set_fit_request"], [917, 2, 1, "", "set_params"], [917, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[918, 3, 1, "", "coef_"], [918, 2, 1, "", "fit"], [918, 2, 1, "", "get_metadata_routing"], [918, 2, 1, "", "get_params"], [918, 3, 1, "", "n_support_"], [918, 2, 1, "", "predict"], [918, 2, 1, "", "score"], [918, 2, 1, "", "set_fit_request"], [918, 2, 1, "", "set_params"], [918, 2, 1, "", "set_score_request"]], "sklearn.tree": [[920, 1, 1, "", "DecisionTreeClassifier"], [921, 1, 1, "", "DecisionTreeRegressor"], [922, 1, 1, "", "ExtraTreeClassifier"], [923, 1, 1, "", "ExtraTreeRegressor"], [924, 4, 1, "", "export_graphviz"], [925, 4, 1, "", "export_text"], [926, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[920, 2, 1, "", "apply"], [920, 2, 1, "", "cost_complexity_pruning_path"], [920, 2, 1, "", "decision_path"], [920, 3, 1, "", "feature_importances_"], [920, 2, 1, "", "fit"], [920, 2, 1, "", "get_depth"], [920, 2, 1, "", "get_metadata_routing"], [920, 2, 1, "", "get_n_leaves"], [920, 2, 1, "", "get_params"], [920, 2, 1, "", "predict"], [920, 2, 1, "", "predict_log_proba"], [920, 2, 1, "", "predict_proba"], [920, 2, 1, "", "score"], [920, 2, 1, "", "set_fit_request"], [920, 2, 1, "", "set_params"], [920, 2, 1, "", "set_predict_proba_request"], [920, 2, 1, "", "set_predict_request"], [920, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[921, 2, 1, "", "apply"], [921, 2, 1, "", "cost_complexity_pruning_path"], [921, 2, 1, "", "decision_path"], [921, 3, 1, "", "feature_importances_"], [921, 2, 1, "", "fit"], [921, 2, 1, "", "get_depth"], [921, 2, 1, "", "get_metadata_routing"], [921, 2, 1, "", "get_n_leaves"], [921, 2, 1, "", "get_params"], [921, 2, 1, "", "predict"], [921, 2, 1, "", "score"], [921, 2, 1, "", "set_fit_request"], [921, 2, 1, "", "set_params"], [921, 2, 1, "", "set_predict_request"], [921, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[922, 2, 1, "", "apply"], [922, 2, 1, "", "cost_complexity_pruning_path"], [922, 2, 1, "", "decision_path"], [922, 3, 1, "", "feature_importances_"], [922, 2, 1, "", "fit"], [922, 2, 1, "", "get_depth"], [922, 2, 1, "", "get_metadata_routing"], [922, 2, 1, "", "get_n_leaves"], [922, 2, 1, "", "get_params"], [922, 2, 1, "", "predict"], [922, 2, 1, "", "predict_log_proba"], [922, 2, 1, "", "predict_proba"], [922, 2, 1, "", "score"], [922, 2, 1, "", "set_fit_request"], [922, 2, 1, "", "set_params"], [922, 2, 1, "", "set_predict_proba_request"], [922, 2, 1, "", "set_predict_request"], [922, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[923, 2, 1, "", "apply"], [923, 2, 1, "", "cost_complexity_pruning_path"], [923, 2, 1, "", "decision_path"], [923, 3, 1, "", "feature_importances_"], [923, 2, 1, "", "fit"], [923, 2, 1, "", "get_depth"], [923, 2, 1, "", "get_metadata_routing"], [923, 2, 1, "", "get_n_leaves"], [923, 2, 1, "", "get_params"], [923, 2, 1, "", "predict"], [923, 2, 1, "", "score"], [923, 2, 1, "", "set_fit_request"], [923, 2, 1, "", "set_params"], [923, 2, 1, "", "set_predict_request"], [923, 2, 1, "", "set_score_request"]], "sklearn.utils": [[927, 1, 1, "", "Bunch"], [928, 1, 1, "", "ClassifierTags"], [929, 1, 1, "", "InputTags"], [930, 1, 1, "", "RegressorTags"], [931, 1, 1, "", "Tags"], [932, 1, 1, "", "TargetTags"], [933, 1, 1, "", "TransformerTags"], [934, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [936, 4, 1, "", "as_float_array"], [937, 4, 1, "", "assert_all_finite"], [938, 4, 1, "", "check_X_y"], [939, 4, 1, "", "check_array"], [940, 4, 1, "", "check_consistent_length"], [941, 4, 1, "", "check_random_state"], [942, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [945, 4, 1, "", "default_tags"], [946, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [952, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [959, 4, 1, "", "gen_batches"], [960, 4, 1, "", "gen_even_slices"], [961, 4, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [963, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [973, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [976, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [978, 4, 1, "", "register_parallel_backend"], [979, 4, 1, "", "resample"], [980, 4, 1, "", "safe_mask"], [981, 4, 1, "", "safe_sqr"], [982, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[927, 2, 1, "", "clear"], [927, 2, 1, "", "copy"], [927, 2, 1, "", "fromkeys"], [927, 2, 1, "", "get"], [927, 2, 1, "", "items"], [927, 2, 1, "", "keys"], [927, 2, 1, "", "pop"], [927, 2, 1, "", "popitem"], [927, 2, 1, "", "setdefault"], [927, 2, 1, "", "update"], [927, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[935, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[943, 4, 1, "", "compute_class_weight"], [944, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[946, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[947, 4, 1, "", "all_displays"], [948, 4, 1, "", "all_estimators"], [949, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[950, 4, 1, "", "check_estimator"], [951, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[953, 4, 1, "", "density"], [954, 4, 1, "", "fast_logdet"], [955, 4, 1, "", "randomized_range_finder"], [956, 4, 1, "", "randomized_svd"], [957, 4, 1, "", "safe_sparse_dot"], [958, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[962, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[964, 1, 1, "", "MetadataRequest"], [965, 1, 1, "", "MetadataRouter"], [966, 1, 1, "", "MethodMapping"], [967, 4, 1, "", "get_routing_for_object"], [968, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[964, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[965, 2, 1, "", "add"], [965, 2, 1, "", "add_self_request"], [965, 2, 1, "", "consumes"], [965, 2, 1, "", "route_params"], [965, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[966, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[969, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[970, 4, 1, "", "is_multilabel"], [971, 4, 1, "", "type_of_target"], [972, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[974, 1, 1, "", "Parallel"], [975, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[974, 2, 1, "", "__call__"], [974, 2, 1, "", "dispatch_next"], [974, 2, 1, "", "dispatch_one_batch"], [974, 2, 1, "", "format"], [974, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[977, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[983, 4, 1, "", "incr_mean_variance_axis"], [984, 4, 1, "", "inplace_column_scale"], [985, 4, 1, "", "inplace_csr_column_scale"], [986, 4, 1, "", "inplace_row_scale"], [987, 4, 1, "", "inplace_swap_column"], [988, 4, 1, "", "inplace_swap_row"], [989, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[990, 4, 1, "", "inplace_csr_row_normalize_l1"], [991, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[992, 4, 1, "", "check_is_fitted"], [993, 4, 1, "", "check_memory"], [994, 4, 1, "", "check_symmetric"], [995, 4, 1, "", "column_or_1d"], [996, 4, 1, "", "has_fit_parameter"], [997, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 58, 61, 64, 70, 73, 74, 75, 77, 78, 79, 81, 82, 83, 87, 88, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 104, 105, 111, 112, 115, 117, 120, 121, 123, 124, 125, 128, 131, 132, 133, 135, 137, 139, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 165, 167, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 190, 191, 193, 195, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 215, 217, 219, 221, 223, 224, 226, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 248, 250, 251, 252, 254, 260, 262, 263, 265, 269, 270, 275, 276, 277, 278, 279, 282, 286, 288, 290, 296, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 314, 315, 316, 319, 322, 325, 327, 328, 329, 330, 331, 332, 333, 336, 337, 343, 344, 345, 346, 347, 350, 351, 352, 355, 357, 358, 359, 362, 363, 364, 365, 366, 370, 371, 372, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 392, 397, 398, 400, 401, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 427, 429, 436, 440, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 467, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 496, 498, 504, 506, 508, 512, 518, 519, 527, 533, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 580, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 695, 696, 697, 698, 699, 700, 701, 708, 709, 710, 716, 719, 724, 728, 730, 743, 749, 766, 767, 787, 788, 805, 806, 807, 808, 810, 811, 812, 817, 822, 826, 827, 830, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 936, 938, 939, 942, 956, 958, 965, 966, 968, 992, 996, 997, 998, 1000, 1001, 1003, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1033, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "0": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 401, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 934, 935, 936, 938, 939, 943, 944, 947, 948, 949, 950, 951, 953, 955, 956, 958, 959, 960, 962, 969, 970, 971, 973, 974, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1029, 1030, 1031, 1035, 1036, 1037, 1038], "00": [47, 52, 68, 113, 126, 190, 191, 208, 235, 248, 269, 273, 276, 314, 332, 335, 336, 358, 377, 380, 389, 415, 422, 423, 613, 614, 721, 723, 796, 808, 822, 836, 921, 1005, 1009, 1019, 1021, 1023, 1030], "000": [43, 44, 59, 62, 64, 77, 108, 175, 192, 195, 248, 269, 273, 275, 277, 321, 328, 357, 358, 366, 378, 389, 422, 423, 497, 569, 570, 652, 685, 1023, 1030, 1051], "0000": [43, 330], "000000": [79, 190, 206, 235, 275, 320, 745], "00000000": 177, "000000e": 235, "000024": 370, "000045": 190, "00005": 54, "0000ff": [67, 304, 311], "0001": [49, 163, 172, 225, 273, 385, 427, 450, 454, 466, 478, 479, 485, 541, 546, 548, 555, 557, 558, 567, 568, 654, 655, 656, 657, 660, 661, 666, 667, 668, 669, 670, 671, 676, 677, 680, 682, 684, 686, 688, 695, 697, 701, 869, 870, 912, 913, 998], "000198": 190, "000223": 46, "000235": 46, "000253": 46, "00026529484644318975": 288, "000290": 46, "000292": 46, "0003": 140, "000328": 46, "000356": 46, "0004": [52, 140, 321, 612], "000450": 46, "000577": 357, "000631": 357, "000642": 357, "000657": 46, "00067": 357, "000683": 357, "0008": 391, "000841": 357, "000881": 46, "000977": 275, "00099547": 177, "000e": 423, "001": [46, 51, 53, 68, 79, 97, 148, 172, 174, 190, 202, 226, 244, 254, 260, 273, 275, 277, 338, 358, 380, 389, 419, 544, 545, 547, 554, 635, 652, 653, 654, 655, 660, 661, 668, 669, 670, 671, 674, 675, 676, 684, 685, 686, 687, 689, 692, 697, 698, 701, 702, 805, 806, 869, 870, 907, 908, 914, 915, 916, 917, 918, 998, 1030], "0012": [43, 702], "0013": 43, "0014": 43, "0015": 43, "001540": 52, "00166409": 669, "00171412": [766, 767, 1007], "001727": 269, "00185": 357, "001882": [204, 206], "00195": 357, "002": [43, 51, 78, 172, 174, 380, 1030], "002592": [204, 206], "00274": 217, "00278": 357, "0028": 43, "002861": [204, 206], "003": 43, "0032": 43, "0034189458230957995": 45, "003533": 206, "003586": 544, "00360392": 544, "0036211": 544, "00362644": 544, "00364": 329, "00393284e": 199, "003935": [204, 206], "003e": 423, "004": [43, 358], "0044": 919, "004577621581492997": 323, "00462428": 759, "0049896314219659565": 323, "005": [43, 275, 279, 301, 316, 358, 389], "005027": 278, "005273": 273, "005383": [204, 206], "005422": 275, "005670": [204, 206], "005840": 278, "005861": 278, "006": [43, 45, 283, 389], "006360": 278, "007": [144, 172, 260, 283, 296, 358], "0072b2": 260, "0075": [480, 549], "00755": 549, "007581": 280, "00768662e": 199, "007822": 289, "007833": 280, "008": [172, 380, 389], "008142": [204, 206], "0083899664": 772, "008449": [204, 206], "00860051": 666, "008915": 278, "009": [43, 358, 389], "009077": 190, "00911944e": 199, "0092": 140, "009362": [204, 206], "009747": 289, "009778": 278, "009788": 289, "0098": 140, "00ff00": 304, "01": [45, 47, 49, 52, 53, 75, 79, 86, 97, 123, 125, 126, 140, 149, 151, 153, 155, 156, 172, 179, 183, 190, 191, 199, 202, 208, 224, 229, 230, 235, 237, 238, 244, 248, 249, 250, 254, 255, 262, 266, 268, 269, 274, 275, 276, 280, 282, 283, 284, 301, 312, 314, 316, 326, 332, 348, 363, 364, 378, 380, 388, 415, 424, 456, 478, 523, 529, 540, 547, 551, 553, 603, 604, 606, 613, 650, 654, 662, 666, 686, 704, 723, 808, 822, 906, 977, 1005, 1009, 1013, 1019, 1021, 1023, 1030], "010": [358, 389, 837, 1017], "0106": 657, "010877306503748912": 283, "011": [43, 93, 283, 296, 358, 389], "011595": [204, 206], "0116": 612, "011e": 423, "012": [52, 193, 195, 322, 1030], "012191": [204, 206], "012521": 206, "012831": 206, "0129126": 377, "013": [43, 52, 283, 358], "01327": 378, "013520": 190, "014": [43, 169, 283, 389, 1030], "0144": 623, "015": [361, 1017], "0152": 140, "015347e": 235, "015414e": 235, "015579": 289, "015587e": 235, "015596": [204, 206], "0157": 552, "015716e": 235, "016": [328, 1030], "01621459": 415, "016445": 275, "017": [186, 358, 389, 478, 479, 1030], "017379": 52, "017646": [204, 206], "018": [52, 83, 275, 479], "0182": 905, "018727": 190, "0188ff": 320, "018900": 206, "019": [172, 202, 380, 389, 478], "019023": 275, "019069": 206, "01915283": 133, "019163": [204, 206], "0193": [477, 483], "0195": [428, 482], "0196": 140, "0198e1": 121, "019907": [204, 206], "01e": 203, "02": [43, 51, 66, 79, 85, 87, 93, 97, 99, 115, 117, 123, 126, 139, 146, 172, 176, 181, 189, 190, 199, 235, 244, 252, 254, 269, 270, 276, 282, 301, 311, 314, 316, 318, 340, 342, 358, 362, 377, 380, 388, 414, 419, 448, 452, 605, 613, 666, 684, 808, 822, 891, 907, 921, 1005, 1030], "020": [43, 52, 1017], "02069427": 88, "021": 358, "021849": 330, "021872": [204, 206], "022": [176, 1017, 1030], "022593": 190, "0226": 657, "022688": [204, 206], "023": [52, 283, 358, 913, 1017], "02306214": 675, "02449161": 133, "02456369": 202, "024991": [204, 206], "025": [67, 219, 254, 272, 698, 702], "025102": 190, "025422": 275, "0255": 140, "0256": 177, "025930": [204, 206], "026": [118, 358, 365], "026328": [204, 206], "026711": 89, "027": [52, 172, 380], "027400": 370, "028": [83, 273, 358], "02818216": 117, "02891072": 1010, "029": [332, 358, 1017, 1030], "02d": 206, "03": [51, 57, 87, 102, 113, 123, 153, 172, 179, 190, 199, 235, 248, 260, 266, 269, 276, 336, 380, 423, 756, 808, 1005, 1009, 1030], "030": [153, 358], "030462": 105, "030498": 105, "030585": 289, "030677e": 235, "030867": 190, "031": [172, 380], "031020": 105, "031026": 190, "031255": 190, "031555": 206, "03162278": 51, "031988": [204, 206], "032": [93, 174, 238, 1030], "0321": 843, "032179": 206, "03228": 630, "03228706": 618, "032356": [204, 206], "03237920e": 199, "032405": 190, "03260883": 1010, "0329": 357, "033": [246, 1017, 1030], "033764e": 235, "033823": 190, "034": [93, 153, 478], "034077": 206, "034194": [204, 206], "034278": 278, "034309": [204, 206], "03433306457": 45, "034821": [204, 206], "03498585": 1010, "035": 203, "035005": 190, "03531816": [834, 835], "035445": 289, "0358": 46, "035914": 289, "036": [389, 479], "036038": [204, 206], "036385": [204, 206], "036445": 275, "036592": 289, "036656": [204, 206], "0367": 179, "0368": 627, "036937": 46, "037": 717, "0370": 858, "037600e": 235, "038": [478, 479, 869], "038076": [204, 206], "03812219": 1010, "038159": 820, "03823144": 177, "038689": 265, "0387": 612, "039": [273, 759, 789, 1009], "039493": [204, 206], "039497": 258, "03f": 273, "04": [66, 75, 77, 89, 117, 125, 132, 172, 179, 190, 199, 216, 235, 252, 260, 266, 269, 275, 276, 288, 309, 333, 352, 380, 422, 424, 478, 479, 654, 655, 660, 668, 669, 670, 689, 796, 808, 822, 1005, 1009, 1013, 1023, 1030], "040264": 46, "040530e": 235, "041": 52, "041297": 312, "0416": 414, "042": 389, "0421": 357, "0427": [235, 476, 481], "042898": 312, "043": [358, 389], "043401": [204, 206], "044": [43, 45, 273, 276, 759, 1009], "044223": [204, 206], "044451": [204, 206], "044642": [204, 206], "0447": 357, "0448": 235, "045": 731, "04520": 163, "0453": 552, "045311": 312, "045390e": 235, "045599": [204, 206], "045934": 312, "046": 358, "046010e": 235, "046636": 190, "046641": [204, 206], "047": [251, 389, 1030], "0479": 552, "048": 1017, "049": 478, "049530": 312, "049540": 312, "049559": 46, "0499": 552, "04995982": 117, "05": [46, 47, 52, 54, 61, 63, 72, 79, 87, 95, 97, 99, 100, 102, 109, 117, 128, 140, 143, 150, 153, 156, 168, 172, 182, 183, 190, 198, 199, 216, 219, 231, 241, 242, 244, 254, 260, 262, 263, 266, 269, 275, 276, 284, 286, 301, 304, 309, 316, 318, 325, 329, 336, 338, 351, 380, 424, 457, 463, 485, 533, 538, 539, 554, 600, 603, 604, 606, 621, 622, 623, 627, 628, 630, 631, 633, 640, 641, 657, 698, 702, 764, 808, 861, 912, 913, 1005, 1013, 1019, 1030], "050": [52, 152, 1017, 1030], "05063247886572012": 283, "050680": [204, 206], "051": [213, 479, 1030], "0512": 552, "051474": [204, 206], "0517578125e": 46, "052": 545, "05216586": 117, "052506": 330, "053": [43, 172, 380, 389], "05306648": 131, "05317": 179, "054045": 278, "054699": 190, "0547": 916, "055": [172, 380, 1009], "05518": 631, "05532": 628, "05534985": 313, "0556": 916, "056": [52, 206, 763, 1017, 1030], "0561": 916, "0566": 631, "05663": 628, "0568": 755, "057": [389, 837], "057122": 206, "05752333": 133, "057711": 206, "058": [172, 201, 273, 380, 1030], "05840206": 133, "059": 239, "0595": 480, "0596": 357, "05968": 163, "05994843": 51, "06": [52, 102, 190, 208, 216, 217, 254, 269, 275, 276, 314, 318, 352, 358, 389, 414, 489, 490, 491, 652, 653, 697, 701, 805, 806, 808, 822, 921, 1005, 1019, 1021, 1030], "060": [43, 52, 759], "0602": 46, "061": 273, "0614": 631, "06165": 628, "061696": [204, 206], "0622": [477, 483], "0626": 843, "063": [239, 273, 275, 444], "0631": 52, "064": [389, 1017], "065": [94, 273, 389, 1030], "06506307": 313, "0652": 630, "06525643": 618, "066": [273, 656], "06686804": 232, "06694199": 133, "06695631e": 113, "067": [183, 233], "067109": 206, "067130": 46, "067528": 206, "068": [43, 52, 164, 275, 1030], "068332": [204, 206], "06880943": 117, "06896552": 456, "069": [83, 224, 273, 1030], "069196": 273, "0693": 627, "07": [52, 117, 132, 190, 213, 235, 269, 284, 366, 378, 415, 569, 570, 700, 702, 1009, 1023, 1030], "0707": 631, "07073": 628, "071": [172, 333, 380, 444], "071964": 190, "072": [444, 656], "073": [45, 54, 273, 478, 479], "074": 273, "074412": [204, 206], "075": 126, "07582983e": 199, "075887": 206, "076": [43, 347, 900, 1030], "077": 296, "077846": 275, "0779": 46, "078": [43, 88, 1030], "07846529": 313, "07880": 163, "079": [172, 276, 380, 1030], "079297": 275, "07963978e": 199, "07993421": 232, "08": [43, 79, 85, 126, 183, 190, 191, 202, 314, 380, 485, 539, 551, 553, 571, 649, 666, 808, 869, 870, 891, 1015, 1030], "080": [351, 358, 1030], "0801": 357, "08022103": [834, 835], "080295": 206, "081": 1017, "0813": [476, 481], "082": 43, "0825": 321, "083": [273, 365], "08377444": 759, "084": [54, 61, 212, 1030], "085": [365, 1030], "085299": [204, 206], "08533159": 220, "085711": 89, "086": [75, 1030], "08604995": 117, "086944": 258, "08699432": 221, "0872422": 668, "088": [54, 677, 1017], "089": [129, 358, 1030], "089063": [204, 206], "08d": 55, "08t16": 377, "09": [47, 125, 126, 132, 190, 248, 252, 288, 314, 415, 537, 615, 743, 850, 1009, 1019, 1023, 1030], "090": [49, 1030], "09000": 217, "090528": 190, "090808": 190, "091": [363, 1030], "091053": 190, "091621": 89, "092204": [204, 206], "093": 478, "094": 479, "09443967": 313, "09541846": 544, "096": [303, 1030], "09684337": 232, "096950": 312, "097": [43, 45, 107, 172, 229, 250, 380, 1030], "098": [230, 358, 1030], "098332": 62, "0986": [423, 876], "09861229": [620, 1019], "098758": 62, "098776": 275, "098932": 62, "099": 43, "099820": 62, "0d": 1041, "0e": [286, 557, 558], "0e4": 224, "0f": [57, 93], "0min": 89, "0rc1": 387, "0rcn": 387, "0x": 941, "0x7f9bdcb94cd0": 287, "0x7f9bdcbd3c10": 287, "0x7f9bf1d62610": 255, "0x7f9bf216d2b0": 105, "0x7f9bf216deb0": 105, "0x7f9bf2196f70": 273, "0x7f9bf2d39040": 217, "0x7f9bf3301940": 287, "0x7f9bf33228b0": 265, "0x7f9bf3af0370": 158, "0x7f9bf3af0520": 158, "0x7f9c0d1b5670": 142, "0x7f9c0d1be040": 142, "0x7f9c0d307740": 282, "0x7f9c0d7d1b40": 287, "0x7f9c0ffea220": 335, "0x7f9c160d0670": 105, "0x7f9c16156820": 106, "1": [0, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 372, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 396, 397, 398, 401, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 930, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 950, 951, 953, 954, 955, 956, 957, 958, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1032, 1033, 1036, 1038, 1042], "10": [2, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 105, 106, 108, 111, 112, 113, 114, 115, 117, 118, 121, 125, 126, 127, 128, 132, 133, 137, 139, 140, 142, 143, 144, 146, 147, 148, 150, 151, 153, 155, 156, 159, 161, 165, 169, 172, 175, 176, 178, 180, 181, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 202, 207, 208, 210, 211, 215, 217, 218, 219, 220, 221, 222, 223, 224, 228, 229, 230, 233, 234, 235, 238, 239, 244, 247, 248, 249, 250, 251, 253, 254, 255, 257, 263, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 286, 289, 290, 293, 295, 301, 311, 312, 313, 314, 316, 317, 319, 320, 321, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 339, 344, 345, 346, 348, 349, 351, 352, 353, 355, 357, 358, 359, 366, 370, 377, 378, 379, 380, 381, 383, 388, 389, 395, 396, 397, 401, 406, 407, 408, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 445, 450, 454, 456, 458, 459, 460, 466, 467, 469, 482, 495, 500, 501, 504, 508, 509, 510, 512, 518, 519, 520, 521, 524, 528, 529, 532, 534, 536, 539, 543, 544, 545, 546, 547, 549, 550, 552, 553, 554, 556, 560, 563, 564, 565, 566, 569, 570, 572, 573, 574, 575, 576, 578, 590, 591, 595, 601, 602, 607, 608, 613, 615, 619, 625, 627, 635, 638, 640, 642, 643, 644, 645, 648, 650, 651, 652, 654, 655, 657, 660, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 680, 681, 683, 684, 685, 686, 689, 693, 694, 699, 700, 703, 704, 707, 713, 723, 734, 750, 764, 777, 805, 806, 808, 809, 810, 811, 812, 819, 822, 823, 824, 825, 826, 828, 829, 831, 836, 838, 839, 840, 841, 847, 848, 849, 851, 852, 853, 859, 868, 869, 870, 872, 878, 882, 885, 886, 889, 901, 909, 915, 918, 920, 921, 925, 930, 942, 953, 956, 960, 972, 977, 978, 984, 985, 994, 998, 999, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1015, 1016, 1019, 1023, 1024, 1030, 1037, 1038, 1041, 1042, 1043, 1048, 1050, 1051, 1052, 1054, 1055], "100": [43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 72, 77, 85, 88, 92, 96, 101, 105, 106, 109, 112, 113, 123, 125, 126, 132, 138, 143, 153, 154, 157, 160, 175, 179, 182, 183, 190, 191, 193, 195, 197, 198, 200, 202, 203, 207, 208, 209, 211, 216, 217, 218, 219, 221, 226, 227, 228, 230, 232, 233, 235, 239, 240, 242, 247, 248, 249, 250, 251, 255, 260, 262, 266, 269, 270, 271, 273, 275, 278, 280, 285, 286, 290, 301, 302, 303, 314, 317, 318, 320, 322, 323, 328, 332, 333, 339, 340, 342, 344, 345, 347, 348, 349, 352, 353, 355, 357, 358, 361, 364, 365, 370, 372, 378, 380, 383, 385, 388, 389, 406, 412, 415, 416, 419, 420, 421, 422, 423, 444, 448, 452, 456, 478, 479, 485, 497, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 536, 538, 542, 544, 552, 553, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 613, 615, 618, 639, 640, 641, 647, 648, 649, 650, 654, 655, 656, 657, 660, 661, 666, 667, 668, 669, 670, 671, 673, 675, 677, 679, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 754, 805, 806, 810, 830, 836, 837, 842, 847, 848, 849, 851, 852, 853, 857, 869, 870, 888, 890, 893, 902, 919, 998, 999, 1002, 1006, 1009, 1010, 1016, 1019, 1021, 1030, 1048, 1049, 1050, 1053, 1054], "1000": [43, 46, 47, 54, 63, 67, 72, 85, 106, 109, 117, 132, 140, 142, 144, 148, 149, 150, 155, 160, 164, 167, 180, 195, 203, 209, 220, 239, 247, 248, 250, 260, 264, 269, 273, 275, 281, 284, 286, 301, 303, 317, 320, 326, 327, 329, 331, 332, 347, 348, 354, 357, 358, 388, 389, 396, 413, 423, 444, 480, 486, 487, 539, 540, 545, 547, 549, 550, 551, 553, 554, 556, 561, 571, 572, 640, 654, 655, 659, 660, 661, 663, 668, 669, 670, 671, 674, 675, 676, 680, 684, 685, 686, 695, 700, 706, 709, 772, 889, 901, 907, 912, 913, 998, 1002, 1024, 1047, 1049, 1058], "10000": [43, 50, 52, 66, 78, 98, 106, 107, 151, 163, 203, 210, 217, 225, 233, 248, 250, 288, 327, 343, 345, 366, 372, 422, 423, 569, 570, 652, 687, 889, 918, 1021], "100000": [178, 250, 260, 383, 621, 622, 623, 627, 628, 630, 631, 633, 901, 1002], "1000000": [55, 544], "10005": 1048, "1000x": 1046, "1001": [228, 258], "10027": 1053, "10045": 1048, "1005": 1024, "10058": 1049, "10059": 1048, "10065": 254, "1007": 713, "10070308464041304": 217, "10071": 1048, "10093": 1048, "10095": 1048, "10096": 1053, "100_000": [62, 64, 190], "100k": [248, 403], "100ksampl": 403, "100x": [1040, 1043, 1057], "101": [64, 172, 293, 380, 858, 1041], "10101": 1048, "10112": 1048, "1013": 1017, "10142": 1048, "10153": 1048, "10168": 1055, "10181": 1048, "10192": 1048, "10195": 1048, "101alexmartin": [1057, 1058], "102": [389, 1042], "10210": 1048, "10229": 1048, "1024": [88, 132, 456, 475, 546, 910, 1053], "10280": 1048, "10297": 1048, "103": [153, 295, 296, 378, 422, 505, 563, 564, 1040], "10306": 1048, "10325": 1048, "10336": 1048, "10346": 1048, "10377": 1048, "1038": 415, "10397": 1048, "104": [43, 61, 76, 1030], "10403": 235, "10412": 1048, "10428": 1048, "10437": 1048, "10440": 1049, "10441": 1048, "1045": 105, "10452": 1048, "10458": 1048, "1046": [105, 265], "10463": 1029, "10468": 1055, "10469096": 177, "1047": 105, "10471": 1048, "10474": 1048, "10478008": 415, "10482": 1050, "1048576": [423, 590, 597], "10493": 1052, "105": 320, "10500": 1048, "10521": 1048, "10526": 415, "10536": 1048, "10580": 1049, "10581": 1048, "10584743": 177, "10587": 1048, "10591": 1052, "10593": 1048, "106": [172, 258, 380, 888, 1003, 1041], "10606655": 232, "10610": 1048, "10655": 1048, "10663": 1048, "10677": 1048, "10687": 1048, "107": [54, 153, 330, 415, 907, 1010, 1042], "10708": 1052, "10711": 1052, "10723": [1047, 1048], "10727": 1049, "1073": [378, 495], "10733": 1029, "10740": 1048, "1076": 339, "10774": 1048, "10795": 1048, "108": [0, 47, 1041], "1080": [377, 415], "10805": 1054, "10811": 1048, "10815": 1050, "10827": 1048, "10829": 1048, "10834": 235, "10836": 1048, "1084": 265, "10845": 1048, "10869": 1048, "1088": 258, "10881": 1048, "108843": 278, "10887": 1048, "108880": 62, "10898": 1048, "10899": 1048, "109": [61, 88, 1010, 1042], "10908": 1048, "10913": 1048, "10914094": 232, "10928": 1048, "10933": 1048, "10982": 1048, "10992": 1048, "10998": 1048, "10999": 1048, "10_000": [46, 62, 109, 142, 150, 189, 195, 248, 278, 296, 333, 567, 568, 572, 573, 889], "10_fold": [378, 501], "10e": [197, 202], "10k": [326, 403, 454], "10ksampl": 403, "10x": 1040, "10x10": 222, "10\u2079": 1048, "11": [43, 54, 57, 81, 108, 114, 125, 172, 177, 190, 191, 202, 217, 218, 219, 222, 235, 254, 269, 272, 280, 281, 287, 299, 300, 302, 320, 327, 330, 331, 345, 349, 353, 357, 359, 377, 380, 381, 389, 396, 415, 418, 419, 422, 457, 464, 489, 490, 491, 492, 504, 509, 525, 526, 620, 658, 664, 678, 723, 729, 731, 732, 786, 787, 788, 809, 812, 826, 829, 837, 864, 921, 957, 972, 1001, 1005, 1007, 1019, 1023, 1024, 1030, 1038, 1042, 1046, 1048, 1049, 1051, 1054, 1055], "110": [120, 197, 204, 214, 220, 224, 247, 322, 332, 444, 1003, 1004, 1030], "1100": 85, "11000": 1049, "11005": 1048, "11006": 1048, "11010": 1048, "11011": 1048, "11021": 153, "11042": 1048, "11047": [1029, 1050], "11064": 1052, "11082": 1048, "110923": 206, "11099": 772, "111": [43, 46, 47, 102, 120, 129, 214, 232, 241, 275, 296, 864, 1043], "1111": [658, 664], "1111111111111111": 283, "11124": 1048, "1112658": [906, 1021], "11135": 1048, "11136": 1048, "1114": 265, "11144": [1048, 1049], "11144673": 232, "11160": 1048, "11166": 1048, "1117": 627, "11176": 1048, "11179": 1049, "1118": 105, "112": [89, 172, 378, 380, 1042], "11206": 1048, "11211": 1048, "112141": 389, "11232": 1050, "11235": 1048, "112589990684262": 754, "11272": 1048, "11293": 1048, "11295": 1048, "11296": 1051, "113": [200, 293, 389, 1030, 1043], "11306": 1048, "11308": 1048, "11310": 1048, "11314": 378, "11315": 1048, "11327": 1048, "113516": 278, "11353": 1048, "11354": 1049, "11364": 1049, "11364637": 51, "113781": 330, "11378556": 313, "114": [145, 330, 718, 1040], "1140": 378, "11413": 43, "11420": 1048, "1145": [195, 415, 684], "11452112": 232, "11458": 1049, "11464": 1048, "11466": 1048, "11467": 1048, "1148": 265, "115": [191, 1017], "11505": 1048, "11514": 1051, "11520": 1048, "11526": 1049, "11528972": 232, "11542": 1048, "11553": 1048, "11556": 1048, "11557": 1048, "11558": 1048, "11576": 1048, "11585": 1048, "11596": 1048, "116": [250, 1040], "1162": 415, "11635": 1050, "11646": 1049, "11650": 1049, "11679": 1048, "11680": 47, "11682": 1052, "11682692": 232, "11693539": 117, "11699": 1049, "117": [256, 1030, 1041], "11705": 1049, "117154": 190, "11724": 1048, "11727": 1049, "11741": 1048, "11754": 1049, "11756": [1048, 1049], "117608": 62, "11774": 1048, "1179": 265, "118": 598, "11805": 1029, "11841": [906, 1021], "1185": 389, "11860": 1055, "1189": 422, "119": [1003, 1043], "11901": 1048, "11905": 1048, "11912": 1048, "11915045": 366, "11924": 1048, "11931": 217, "11932": 217, "11933": 217, "11935": 217, "11950": 1051, "11951": 1048, "11958": 179, "11973": 1049, "11977": 1029, "12": [0, 43, 45, 52, 58, 70, 75, 77, 78, 88, 90, 91, 92, 107, 108, 117, 146, 147, 148, 151, 153, 172, 177, 178, 179, 186, 190, 191, 193, 198, 202, 203, 217, 225, 235, 237, 240, 241, 244, 245, 247, 255, 258, 262, 263, 269, 274, 275, 277, 278, 281, 287, 289, 299, 314, 320, 321, 322, 327, 330, 333, 353, 359, 379, 380, 381, 388, 396, 398, 401, 407, 408, 409, 415, 419, 423, 450, 454, 456, 464, 489, 490, 491, 492, 504, 540, 542, 549, 578, 654, 655, 660, 668, 669, 670, 672, 677, 679, 689, 693, 694, 697, 700, 701, 733, 738, 805, 806, 809, 826, 829, 843, 864, 880, 989, 998, 999, 1001, 1005, 1007, 1009, 1010, 1019, 1023, 1024, 1030, 1038, 1041, 1043, 1047, 1048, 1050, 1051, 1056, 1057], "120": [154, 238, 332, 424, 598, 1040], "1200": [85, 149, 316, 422], "12000": 528, "12068": 1050, "12069": 1053, "121": [102, 139, 186, 249, 626, 677, 1019], "12105": 1048, "12116": 1049, "1212": 506, "12122": 1048, "121351": 206, "12143": 1049, "12145": 1050, "12147": 1029, "12159": 1048, "12165": 1048, "12165031": 1010, "1217": 217, "12171": 1048, "12174": 1049, "12177": 1049, "12190903": 117, "12196": 217, "12197": 1049, "122": [0, 139, 179, 186, 191, 203, 249, 389, 1010], "1220": 627, "12211": 1048, "12222": 1049, "12232": 1049, "12234": 1048, "12246": 1048, "12251": 1049, "12258": 1050, "12274212": 1010, "12279": 1049, "12285": 1055, "1229": 525, "123": [141, 160, 366, 422, 524, 525, 526, 563, 564, 845, 1010, 1017], "12300": 1049, "12303": 1050, "12304": 1048, "12317": [179, 1048], "1232": 422, "12326": 43, "12327": 43, "12328": [43, 1049], "12329": 43, "12330": [43, 1048], "12334": 1049, "12338": 1048, "12339": 1048, "1234": [198, 263, 278, 383], "12344": 1049, "12345": 1048, "12350": 1048, "1236": 322, "12360": 1048, "12365": 1048, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 278, "12383": 43, "12388": 1048, "12393": 1048, "124": [46, 422, 1042], "124225": 206, "12436": 1049, "12441": 1048, "12451": 1048, "12462": 1048, "12467": 1048, "12471": 1048, "12481": 1048, "125": [43, 88, 113, 126, 172, 328, 542, 998, 1009, 1019], "12513": 1049, "12514": 1048, "125140": 278, "12517": 1048, "12518": 1048, "12522": 1048, "125247168": 52, "12543": 1049, "12557": 1050, "12568": 1049, "12569": 1050, "12582": 1049, "12583": 1049, "1259": 57, "12599": 1049, "126": 422, "12612": 1048, "12613": 1049, "12625": 1048, "1263": 389, "12638": 1052, "12650": 1050, "126502": 206, "12669": 1049, "1268187": 232, "12685": 1048, "12699": 1048, "127": [149, 1040], "12701": 1048, "12704": 1048, "127128": 150, "12715": 1049, "12732": 1049, "1276": 47, "12789": 1050, "128": [53, 54, 217, 370, 544], "12800": 1029, "12807": 1049, "12821": 1049, "12823878": 332, "12834": 1049, "12852": [1029, 1050], "12855": 1049, "12860": [235, 1049], "12861": 1049, "12866": 1029, "1288": [45, 378], "12881": 1048, "12883823": 419, "12887": 1050, "129": [219, 1040], "12908": 1049, "12914884": 1010, "12916": 1049, "12927": 1050, "12946": 1048, "12949": 1048, "12955": 1049, "12972": 1049, "12983": 1049, "12988": 1049, "1299": [878, 1019], "12th": 1021, "13": [43, 45, 49, 50, 52, 79, 81, 85, 108, 128, 132, 146, 149, 151, 185, 190, 195, 203, 226, 242, 268, 269, 276, 279, 281, 314, 316, 320, 333, 346, 378, 380, 383, 389, 396, 419, 427, 504, 518, 521, 540, 541, 559, 560, 590, 614, 643, 647, 742, 767, 826, 856, 871, 878, 904, 905, 1005, 1009, 1010, 1015, 1016, 1019, 1024, 1038, 1040, 1042, 1043, 1046, 1047, 1048, 1049, 1052], "130": [190, 210, 389, 1030], "1300": 85, "13003": 1052, "13005": 1048, "13007": 1049, "130107": [232, 248, 496], "13013": 1050, "13042": 1055, "13046": 1048, "13077794": 366, "13086": 1049, "131": [43, 53, 79, 91, 227, 358, 389, 1009, 1030, 1041], "13124": [1048, 1049], "13134": 1048, "13142": 1049, "13146": [1029, 1050], "1315": 47, "13151": 1049, "13157": 1049, "13164": 1049, "13165": 1048, "13174": 1049, "1319": [878, 1019], "131900": 104, "13193": 1049, "132": [43, 47, 53, 91, 226, 422, 1030], "13204": 1052, "1321": 47, "13213": 1050, "1322": 630, "13221": 1048, "13222543": 618, "13227": 1029, "1323": 217, "13231": 1050, "13233": [378, 501, 502], "13240": 1049, "13241": 1049, "13250": 1049, "13251": 1049, "13253": 1049, "13260": 1049, "13266": 1049, "13276": 1048, "13279": 1049, "13283": 1049, "13286": 999, "13290": 1050, "133": [53, 91], "13312": 1048, "13317": 1049, "13328": 1049, "13333": 1049, "13336": 1049, "13350": 1049, "13363": 1049, "13366": 1049, "1337": 47, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": 270, "13382": 1049, "13389": 1049, "13392": 1050, "13393": 1050, "13397": 1049, "134": [80, 88, 129, 149, 191, 269, 275, 1043], "13422": 1049, "13427": 1049, "1343": 47, "13439": 1049, "13447": 1049, "13459": 1049, "13467": 1050, "13485": 1049, "13486": 1049, "13496": 1049, "135": [172, 330, 380], "13511": 1051, "13524": 1049, "1353": 357, "13531": 1049, "13545": 1049, "13549": 1049, "13554": 1049, "13562": 1049, "13575": 1050, "136": [264, 1030], "13601": 1049, "13607": 1049, "13609": 1050, "13618": 1050, "13620": 1049, "13628": 1049, "13636": [1005, 1049], "13641": 1049, "13649": 1057, "13651": 1049, "137": [254, 327, 389, 1041], "13704": 1050, "13707": 1050, "1371": 542, "13726": 1050, "1373": 1006, "1374": 542, "13741": 1049, "13769": 1050, "13772": [1048, 1049], "13773": 1050, "13779": 1049, "1378": 235, "13780": 1049, "1379": 235, "138": [121, 389, 422, 1009, 1030], "13806": 1050, "1382": 532, "13822072286080167": 283, "13835": 1049, "1385": 481, "13864": 1049, "13875": 1050, "13877": 1049, "13894": 1049, "13896": 1050, "139": [235, 296, 389, 422, 459, 469, 699, 703, 1010], "13900": 1052, "13902": [1029, 1050], "13903": [1048, 1049], "13910": 1049, "13911": [1029, 1050], "13925": 1050, "13933": 1050, "13938": 1050, "13947": 1049, "1396": 1006, "13960": 1050, "1397": 389, "13974": 1049, "13983521": 313, "13987": 1050, "13988486": 232, "13995": 1050, "13th": 64, "14": [43, 50, 52, 73, 84, 90, 95, 97, 98, 101, 108, 114, 128, 167, 191, 202, 206, 208, 235, 239, 242, 244, 249, 269, 274, 280, 281, 290, 295, 296, 314, 319, 320, 330, 352, 355, 371, 378, 380, 381, 396, 401, 407, 408, 415, 419, 504, 506, 518, 561, 562, 643, 651, 700, 822, 826, 878, 1002, 1005, 1009, 1019, 1024, 1030, 1038, 1040, 1041, 1043, 1044, 1048, 1053], "140": [88, 207, 332, 422, 518, 524, 525, 526, 563, 564, 1010, 1030], "1400": [85, 481], "14012": 1050, "14024": 1049, "14028": 1050, "14035": 1050, "14048": 1051, "14053": 1049, "14067": 1049, "14075": 1051, "14087": 1049, "14092": 1049, "141": [86, 293, 320, 509, 542, 912, 1010, 1030], "14108": 1050, "14114": 1050, "14156": 235, "14170": 1050, "14180": [1029, 1051], "1419": 43, "14194": 1050, "14197": 1049, "142": [43, 422], "1422": 43, "14228": 371, "14237": [1048, 1049], "14259": 1050, "14264": 1051, "142857": 235, "14286": 1050, "14287": 1050, "14294": 1050, "14296": 1050, "143": [172, 380, 478, 479, 1021, 1040, 1041], "14300": 1051, "14302": 254, "14305": 1050, "14309": 1049, "14336": 1050, "14338": 999, "14356": 1050, "14357": 1050, "14378": 1050, "14381": 1050, "14393": 1049, "144": [275, 389, 1040], "1440": 43, "14406": 1050, "1441": 630, "14410151": 618, "14417": 1050, "144204": 150, "1443": 1015, "14430": 1050, "14446": 1052, "14458": 1050, "14464": 1050, "14475": 1050, "144943": 62, "14496": [389, 1049], "145": [52, 146, 233, 415, 1030], "14510": 1050, "14516": 1051, "14520": 1050, "14538": 1050, "14544": 1050, "14549": 1050, "1456": 235, "14582": 1029, "14591": 1050, "14593": 1050, "14595": 1050, "145957": 150, "146": [45, 422], "1460": [147, 158], "14602": 1050, "14603365": 232, "14623": 1050, "14625": 47, "14629": 1050, "1464": 245, "14646": 1050, "14647": 1050, "14680": 1050, "14682": 1050, "14696": 1051, "147": [189, 358, 1010, 1030], "14702": 1050, "147022": 206, "14704": 1050, "14706": 1050, "1471": 1015, "14710": 1050, "14732": 1050, "14736": 1055, "1474": 389, "14740": 1050, "14764": 1050, "148": [50, 177, 1030, 1043], "14800": 1052, "14810": 322, "14848": 1051, "14849": 1050, "14862": 1055, "14864": 1050, "14865": 1050, "14869": 1050, "14872": 1050, "14884": 1050, "14890": 1050, "14894": 1050, "14898": 1050, "149": [1010, 1040], "14900": 1050, "14902": 1050, "14907": 1050, "14908": 1050, "14933": 1050, "14936": 1050, "14971": 1050, "14975": 1054, "14982": 1052, "1499": 47, "15": [43, 45, 46, 51, 52, 53, 54, 66, 67, 70, 75, 79, 88, 89, 96, 97, 101, 107, 108, 113, 115, 121, 126, 132, 141, 143, 146, 147, 150, 153, 167, 169, 171, 174, 178, 185, 189, 190, 191, 206, 214, 219, 231, 235, 239, 242, 244, 254, 262, 263, 269, 270, 278, 280, 283, 286, 287, 290, 300, 304, 311, 312, 316, 318, 320, 331, 336, 344, 346, 349, 352, 355, 362, 377, 378, 381, 383, 396, 401, 407, 408, 419, 422, 423, 447, 461, 497, 504, 505, 506, 539, 545, 553, 554, 563, 564, 606, 612, 617, 652, 660, 669, 671, 676, 684, 686, 700, 826, 841, 864, 893, 998, 1004, 1005, 1006, 1009, 1012, 1013, 1019, 1024, 1036, 1038, 1042, 1052, 1054, 1055], "150": [43, 45, 120, 121, 141, 150, 163, 238, 242, 244, 288, 332, 345, 350, 353, 380, 419, 424, 512, 609, 610, 833, 834, 835, 1009, 1030], "1500": [74, 85, 92, 97, 102, 121, 237, 241, 260], "15000": [680, 695, 869, 870], "15005": [1051, 1053], "15007": 1052, "15010": 1050, "15028": 1050, "15038": 1050, "150407": 389, "15044": 1050, "15049": 1050, "150527": 312, "15053": 1050, "15057": 1050, "1506": 391, "15080": 1050, "15082": 1050, "15083": 1050, "15084": 1050, "15086": 1050, "15094": 1050, "15096": 1050, "15099": 1050, "150x4": 120, "151": [82, 330, 389, 422, 509, 1021], "15100": 1050, "1511007": 258, "151101": 258, "15119": 1050, "15120": 1050, "15126": 1052, "15138": 1050, "15160": 1050, "15179": 1051, "152": [93, 389], "15257": 1050, "1527": 868, "15274": 1050, "15297572": 544, "153": 671, "15304": 1050, "15319": 1029, "153244303321897735": 415, "15361": 1052, "15375": 1050, "15380": 1051, "15382": 1050, "15393": 1050, "154": [314, 659, 1010], "1542": 389, "15427": 1052, "15429": 1050, "15436": 1051, "154453": 312, "15463": 1050, "15488": 1050, "15490": 1050, "155": [250, 1030], "15503": 1051, "15521": 163, "15524": 1050, "1553374": 415, "1553511": 415, "1554": 868, "15550": 1029, "15557": 1050, "15558": 1051, "15582": 1051, "156": [92, 172, 190, 380, 1030], "15611": 999, "15622": 1051, "15625": 1050, "156252": 206, "15636": 1052, "15652": 1051, "15655": 1051, "15661": 1050, "15669": 1051, "15699552": 1010, "157": 389, "15707": 1051, "15709": 1051, "15730": 1051, "157334": 312, "15751": 1050, "15760": 1050, "15762": 1051, "15763": 1052, "15773": 1051, "15782": 1051, "15785": 1051, "15797": 1050, "158": [77, 175, 422, 677, 1030], "15806": 1051, "15810": 1050, "15834": 1051, "15863": 1050, "15864": 1051, "15868": 1050, "15879": 1050, "15888": 1050, "15898": 1050, "159": [88, 378, 1040], "1590": 314, "15918": 1051, "1592": 506, "15926": 1051, "15930": 1050, "15933": 1050, "15936": 1050, "15937": 1050, "159419": 258, "15946": 1051, "15947": 1050, "15948": 1054, "15950": 1051, "15953": 1051, "15959": 1051, "15963": 1051, "1597": 269, "15980": 1051, "15984": 1054, "15996": 1050, "15e": 123, "16": [43, 44, 52, 57, 64, 78, 85, 86, 89, 101, 108, 113, 123, 126, 167, 190, 191, 210, 216, 217, 218, 235, 237, 238, 249, 253, 269, 277, 278, 279, 300, 314, 316, 320, 325, 350, 358, 363, 378, 380, 381, 389, 396, 401, 407, 408, 419, 420, 423, 449, 464, 466, 478, 479, 485, 486, 505, 506, 510, 524, 542, 543, 578, 597, 603, 604, 615, 616, 647, 658, 659, 662, 663, 664, 665, 690, 691, 821, 826, 838, 887, 913, 921, 984, 985, 986, 998, 1005, 1009, 1019, 1024, 1030, 1036, 1038, 1040, 1041, 1045, 1046, 1048, 1049], "160": [252, 998], "1600": 85, "160030": 206, "16006": 1051, "1600x1600": 89, "16018": 1054, "16021": 1051, "16052385": 133, "16061": 1054, "16066": 1052, "16069": 1051, "16075": 1051, "16076": 1050, "16084": 1051, "16090": 1051, "161": [258, 1030], "16103": 1051, "16111": 1051, "16112": 1051, "16117": 1051, "161245": 89, "16132": 1051, "16144": 389, "16147": 380, "16149": 1051, "16159": [389, 1051], "1616": 480, "16182": 1051, "16183": 1051, "162": [93, 380], "16224": 1051, "1623": 57, "1624": 506, "16245": 1051, "16257": 1051, "1626": 1029, "16261": 1051, "16266": 1051, "16280": 1051, "16289": 1052, "163": [172, 293, 380, 1017], "163224": 206, "16323": 1051, "16326": [43, 1052], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1051, "16335": 1052, "16352": 1052, "16362": 1051, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1052, "16397": [1050, 1051], "164": 422, "164009": 278, "16401": 1051, "16403": 1051, "16431": 1051, "16437": 1051, "16442": 1051, "16443186": 1010, "16449": 1053, "16451": 1051, "16466": 1051, "16484": 1051, "16493": 1052, "165": [359, 1010], "16500": 1050, "16505": 1050, "16508": 1051, "16530": 1052, "16531": 153, "16539": 1051, "16585": 1051, "166": [43, 247, 314, 389, 1009, 1030, 1040], "16605": 1054, "16619": 1052, "16622": 1051, "16625": 1052, "16632": 1051, "16655": 1051, "16663": 1051, "166667315173": 52, "16692": 1051, "16695": 1055, "167": [389, 1040], "16718": 1051, "16726": 1051, "16728": 1051, "16747": 1055, "16748": 1054, "168": 1040, "1680": 380, "16801": 1051, "16837": 1051, "16841": 1051, "16849": 1051, "1689": 358, "169": [93, 314], "16906": 1052, "1691": 1005, "169106": 275, "1693": 912, "16935": 1052, "16948": 1054, "16950": 1051, "169504": 235, "16979946": 1010, "1698": 657, "16981": 1051, "16985": 1052, "16993": 1051, "17": [49, 52, 57, 74, 87, 108, 113, 126, 153, 175, 190, 216, 241, 242, 248, 269, 278, 311, 320, 357, 378, 381, 388, 401, 407, 408, 415, 419, 451, 468, 494, 505, 506, 508, 531, 539, 544, 548, 555, 557, 558, 563, 567, 568, 577, 578, 605, 636, 657, 665, 666, 667, 674, 677, 680, 682, 695, 700, 737, 738, 748, 769, 774, 791, 792, 795, 797, 826, 850, 861, 876, 881, 882, 890, 892, 898, 914, 917, 920, 921, 922, 923, 957, 998, 999, 1010, 1012, 1019, 1030, 1036, 1038, 1040, 1041, 1042, 1043, 1046, 1049, 1054], "170": [79, 92, 93, 97, 389], "1700": 85, "170087": 312, "17021": 1051, "17032": 1051, "17036": 1053, "17038": 1052, "170388": 1010, "1706": 339, "17061": 1051, "17090": 1052, "17095": 1052, "171": [88, 172, 306, 380, 389, 796, 1009, 1030], "17107": 1052, "1714": 1005, "17148": 1052, "17159": 1052, "17169": 1053, "17187": 1052, "17192": 1052, "17193": 1052, "172": [389, 501, 502, 657, 1005], "17204": 1051, "17205": 1051, "17210": [52, 1051], "17225": 1052, "17226834": 88, "1723": 46, "17233": 1052, "17235": 1051, "17236387": 220, "17266": 1054, "17289014": 177, "1729": 191, "173": [389, 592], "17309": 1051, "17317": 1052, "17357": 1051, "17360": [47, 1051], "17367": 1052, "17370318": 232, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1052], "1738": 1009, "17386": 1052, "17388": 1056, "17396": 1052, "174": [149, 245, 314, 337, 389, 592, 1030], "17406": 1052, "17412": 1052, "17414": 1052, "17427": 1052, "17433": 1051, "17443": 1053, "17448": 1052, "1747": 191, "17474": 235, "17478": 1052, "17491": 1052, "17499": 1052, "175": [348, 389, 1019, 1030], "17526": 1052, "175298": 278, "17546": 1052, "17569": 1052, "17578": 1052, "17598": 1052, "176": [84, 257, 389, 845, 1010, 1017, 1030], "17603": 1052, "17604": 1052, "17606": 1052, "17608": 1052, "17609": 1052, "17610": 1052, "17612": 1052, "17614": 1052, "17616": 1052, "17622": 1053, "17633": 1052, "17644": 1052, "17651": 1052, "17661": 1052, "17662": 1052, "17679": 1052, "17694": 1051, "177": [99, 153, 389, 1030], "17702": 1052, "1771": 358, "17742": 1051, "17743": 1053, "17746": 1053, "17750": 1053, "17759": 1052, "17769": 1053, "17772": 1053, "17777": 1052, "17785": 1053, "178": [46, 380, 389, 518, 856], "178000": 318, "17804": 1052, "17812": 1051, "17819": 1054, "17826": 1052, "17833": 1052, "17848": 1051, "1785": 358, "17856": 1052, "17864": 1052, "17876": 1052, "17878": 1052, "179": [380, 389, 422, 1040], "17914": 1051, "17928620": 377, "17932": 1052, "17935": 1052, "17937": 1052, "17959": 1051, "1797": [93, 273, 314, 335, 380, 427, 452, 510, 540, 541, 542, 543, 607, 608, 696, 697, 698, 699, 701, 1012], "17984": 1052, "17985": 1051, "17985197": 232, "17987": 1052, "17992": 1052, "17995": 1051, "17997": 1052, "17_760": 153, "17t14": 377, "18": [43, 46, 47, 57, 75, 79, 84, 88, 95, 97, 108, 130, 150, 183, 190, 228, 237, 244, 249, 269, 275, 314, 320, 322, 336, 357, 358, 359, 383, 389, 419, 420, 423, 454, 466, 500, 508, 509, 510, 512, 513, 518, 543, 544, 546, 548, 549, 565, 566, 567, 568, 571, 572, 573, 574, 577, 579, 580, 581, 582, 583, 585, 586, 597, 602, 607, 608, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 654, 657, 666, 667, 679, 722, 726, 739, 742, 743, 749, 751, 768, 778, 805, 806, 829, 845, 868, 869, 870, 876, 882, 890, 891, 902, 912, 913, 920, 921, 922, 923, 924, 955, 956, 998, 1007, 1009, 1019, 1030, 1036, 1038, 1040, 1041, 1044, 1045, 1047, 1048, 1050, 1051], "180": [70, 260, 261, 262, 265, 266, 305, 309, 389, 510], "1800": 85, "18000": [359, 378], "18010": 1053, "18016": 1051, "18020": 1055, "1804243": 377, "18052": 1052, "18094": 1055, "181": [293, 314, 389], "18108182014": 183, "18114": 1052, "18121": 1052, "18124": 1052, "18149": 1052, "18167": 1052, "18170": 1054, "18176": 1052, "18197458": 366, "182": [174, 314, 389, 422], "18222": 1052, "18256": 1052, "18266": 1052, "18269": 1052, "18278": 1052, "18280": 1052, "18293": 1052, "18298": 1055, "183": [336, 389, 1010, 1040], "18302": 1052, "18310": 1054, "18326": 1052, "18328": 1053, "18334": 1052, "18341": 1052, "18343": 1052, "18368": 1053, "18370": 1052, "18393": 1053, "18394": 1052, "184": [43, 47, 217, 314, 389, 807, 1030], "18405": 1052, "18406": 1052, "18410": 1052, "18429": 1052, "18433": 1053, "18444": 1053, "18447": 1052, "18459": 1053, "1847": 46, "18482": 1054, "18488": 1056, "185": [88, 172, 183, 380, 389, 869, 870], "1850": [45, 378], "18508": 1052, "18510": 1052, "18525": 1052, "18527": 1052, "18528": 1052, "18543": 1053, "18545": 1052, "18555": 1058, "185654": 278, "185659": 206, "18595": 1052, "186": [217, 307, 314, 389, 796, 1009, 1030], "18607": 1052, "18612": 1052, "18622": 1052, "18639": 1052, "18649": 1053, "1865": 47, "18682": 1052, "18689": 1057, "18691": 1052, "187": [275, 389, 592, 1010, 1042], "1871": 1024, "18723": 1056, "18736": 1053, "1874": 1024, "18746": 1052, "1875": 989, "18768": 1052, "188": [172, 179, 380, 389, 592], "1880": 389, "18805": 1055, "18815268": 258, "188153": 258, "18818427": 675, "18832": 1054, "18842": 1053, "18843": 1058, "18846": [378, 495, 496], "1887": 358, "18898": 1053, "189": [217, 389, 909, 1022], "18925": 1053, "189267": 278, "18959": 1053, "189631": 206, "18964": 1053, "18975": 1054, "189830": 330, "18987": 1052, "19": [43, 52, 126, 179, 190, 221, 265, 269, 320, 321, 336, 353, 380, 381, 397, 401, 407, 408, 415, 423, 426, 451, 500, 524, 525, 526, 544, 548, 549, 555, 557, 558, 565, 566, 567, 568, 572, 573, 574, 590, 597, 615, 656, 666, 667, 674, 675, 676, 679, 680, 682, 684, 686, 695, 715, 789, 793, 807, 808, 822, 835, 840, 841, 843, 844, 858, 859, 878, 889, 910, 914, 917, 920, 921, 922, 923, 998, 1009, 1019, 1030, 1036, 1038, 1040, 1041, 1042, 1043, 1045, 1048, 1057], "190": [50, 149, 235, 284, 309, 378, 389, 506], "1900": 85, "19002": 1053, "19004": 1053, "19011": 1053, "19024": 1053, "19035": 1053, "1903908407869": 220, "19041": 1053, "19046": 1053, "19047631514961908949361222113": 52, "1905": [172, 380], "19052": 1053, "19055": 1053, "19069": 1053, "19075": 1055, "19085": 1054, "191": [158, 268, 389, 1010, 1030], "19112072e": 199, "19126": 1052, "19145": 359, "19158": 1054, "19159": 1053, "19162": 1053, "19172": 1053, "19174891": 313, "19179": 1052, "19182": 1052, "19198": 1053, "192": [149, 285, 389, 1030, 1040], "19210": 1053, "19211": 1052, "19234": 1052, "19244": 1053, "19263": 1053, "19271": 1052, "19278": 1053, "192913": 278, "192938": 52, "19296": 1053, "19297": 1053, "193": [192, 389, 422, 723, 794, 1022, 1030], "19308": 1052, "1931": 113, "19310": 1053, "19317": 179, "19336": 1053, "193548": 235, "19356": 1053, "1936": 380, "19365": 1053, "19390": 1053, "19391": 1053, "193949": 278, "194": 314, "1940": 235, "19401": 1053, "19407": 1052, "19411": 1053, "19415": 1053, "19417": 1052, "194239": 389, "19426": 1053, "19428": 1053, "19438": 1054, "19459": 1053, "19472": 1053, "19473": 1053, "1948": 57, "19483": 1053, "19490": 1054, "19491": 1053, "19499": 1053, "195": [501, 502], "1950": [380, 1009], "1951": 235, "195133": 389, "19520": 1053, "19522393": 232, "19527": 1053, "1956": 47, "19564": 1053, "19568": 1053, "19571": 1053, "19579": 1052, "1958": [179, 420, 422, 540], "19580": 1052, "1959": 47, "196": [120, 909, 1022, 1030], "1960": [635, 724], "19616": 1053, "19631": 1053, "1964": [698, 702, 888, 900, 1006], "19641": 1053, "19643": 1053, "19646": 1052, "19659": 1052, "19662693": [852, 853], "19664": 1056, "19669": 1053, "1967": 47, "196795181": 52, "19680": 1054, "196861": 206, "19689": 1054, "1970": 47, "19703": 1052, "1972": 380, "19721": 1052, "19727": 1052, "1973": [380, 413], "19731": 1059, "19732": 1052, "19733": 1053, "19734": 1053, "1974": [415, 423, 718], "19747": 1054, "1975": 1012, "19752": 1053, "19766": 1053, "197666": 278, "1977": 643, "1978": [235, 1005], "19784": 1053, "19788": 1053, "1979": [415, 733, 777], "19790": 1053, "19794": 1054, "19799": 1053, "198": 1040, "1980": 380, "19803308": 117, "1981": [235, 1005], "19829832": 232, "1983": [415, 739, 892], "19836": 1053, "1984": [113, 114, 417, 481, 920, 921, 1025], "19847": 1052, "1985": [190, 415, 713, 723, 794], "1986": [999, 1025], "19869": 1053, "1987": [415, 615, 616, 800, 801], "198766": 278, "19879": 1053, "1988": 380, "19883": 1053, "19888": 1052, "1989": [284, 643, 796, 869, 870, 1005, 1012], "199": [655, 799, 1024], "1990": 378, "19906": 1053, "19908": 1053, "1990a": 413, "1991": [524, 525, 526], "19916": 1054, "1992": [172, 378, 380, 419, 422, 575, 576, 653, 1005], "19922": 1052, "19924": 1052, "1993": [172, 380, 481, 672, 693, 694, 1025], "19934": 1053, "19939": 1052, "1993apr6": 104, "1994": [172, 378, 380, 652], "19948": 1053, "1995": [172, 275, 380, 413, 422, 561, 562, 842, 909, 1010], "1996": [64, 153, 415, 422, 426, 451, 524, 525, 526, 563, 564, 1019], "1997": [138, 378, 420, 422, 543, 562, 698, 702, 1005, 1006, 1009], "1998": [153, 275, 378, 380, 420, 422, 563, 564, 842, 847, 878, 1010, 1011, 1013, 1019, 1023], "19982": 1052, "1999": [182, 378, 413, 415, 417, 420, 422, 444, 457, 464, 476, 481, 542, 549, 563, 564, 567, 568, 731, 906, 914, 915, 917, 918, 1015, 1021], "19th": 415, "1_": 1019, "1_000": [44, 64, 70, 83, 106, 128, 153, 174, 179, 181, 191, 248, 272, 353, 414, 545, 547, 709, 807, 830, 831, 839], "1d": [2, 138, 140, 187, 191, 218, 248, 297, 300, 309, 333, 352, 363, 383, 390, 392, 396, 397, 416, 421, 471, 474, 625, 638, 641, 661, 665, 668, 671, 692, 711, 720, 721, 727, 737, 738, 742, 746, 750, 791, 792, 795, 804, 854, 855, 856, 857, 858, 860, 862, 863, 864, 877, 929, 932, 934, 938, 939, 971, 995, 1010, 1030, 1040, 1045, 1046, 1047, 1049, 1053, 1054, 1058, 1059], "1e": [44, 45, 46, 49, 55, 63, 81, 123, 172, 174, 177, 179, 180, 181, 182, 183, 185, 190, 198, 210, 217, 218, 224, 231, 235, 240, 244, 250, 255, 260, 263, 266, 273, 283, 286, 313, 323, 328, 331, 339, 344, 346, 353, 357, 389, 427, 450, 454, 459, 466, 469, 478, 479, 485, 489, 490, 491, 539, 540, 541, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 567, 568, 569, 570, 600, 605, 614, 616, 617, 619, 621, 622, 623, 627, 628, 630, 631, 633, 635, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 660, 661, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 695, 697, 698, 699, 700, 701, 702, 703, 736, 793, 805, 806, 822, 847, 848, 849, 850, 851, 852, 853, 861, 869, 870, 877, 907, 908, 912, 913, 914, 915, 916, 917, 918, 994, 998, 1009, 1013, 1017, 1019, 1023, 1048, 1053, 1054, 1055], "1e0": [174, 250, 266, 283, 998], "1e1": [174, 180, 217, 250, 346], "1e15": 183, "1e2": [49, 174, 181, 250, 266, 346, 754, 1009], "1e3": [45, 46, 49, 174, 180, 185, 250, 286, 331, 998], "1e4": [286, 667, 687, 906, 1021], "1e5": [45, 179, 199, 201, 207, 286, 621, 622, 623, 627, 628, 630, 631, 633, 901, 906, 1021], "1e6": [47, 49, 210, 248, 333, 357, 359, 370, 544, 906, 1009, 1021], "1e7": 389, "1er": 423, "1f": [52, 58, 85, 88, 126, 198, 217, 248, 260, 262, 282, 325, 332, 358, 359], "1gb": 370, "1kastner": 1047, "1m": 974, "1mb": [371, 1045], "1mo": 179, "1nn": 380, "1or": 423, "1px": 314, "1qlettinn8oi": 357, "1st": [0, 43, 95, 120, 182, 218, 321, 890, 891], "1x": 332, "1z": 423, "2": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 372, 377, 378, 379, 380, 381, 383, 385, 387, 388, 389, 390, 392, 395, 396, 397, 401, 406, 407, 408, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 478, 479, 480, 481, 482, 485, 486, 487, 489, 490, 491, 492, 501, 504, 508, 509, 512, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 589, 590, 592, 593, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 609, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 711, 712, 713, 714, 715, 716, 719, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 771, 772, 775, 776, 777, 779, 781, 782, 783, 784, 786, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 905, 906, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 925, 927, 934, 935, 936, 938, 939, 940, 944, 948, 954, 955, 956, 957, 958, 959, 960, 962, 963, 969, 970, 971, 972, 973, 974, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 995, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1030, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1059], "20": [2, 43, 46, 47, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 77, 78, 81, 82, 85, 89, 90, 96, 102, 111, 115, 121, 123, 130, 132, 139, 143, 146, 147, 150, 154, 158, 159, 161, 165, 167, 168, 169, 172, 180, 189, 191, 192, 200, 206, 207, 209, 213, 214, 216, 217, 218, 221, 226, 229, 230, 231, 232, 234, 240, 248, 254, 262, 264, 265, 269, 275, 276, 278, 279, 281, 286, 287, 290, 293, 296, 300, 301, 302, 303, 304, 307, 314, 320, 321, 322, 326, 327, 328, 329, 331, 335, 336, 339, 343, 345, 349, 351, 355, 358, 359, 363, 364, 376, 380, 381, 383, 388, 389, 401, 407, 408, 415, 422, 423, 448, 453, 454, 456, 471, 472, 476, 478, 479, 485, 495, 496, 497, 498, 500, 502, 504, 505, 508, 510, 512, 513, 519, 520, 523, 524, 531, 539, 544, 545, 550, 553, 554, 556, 560, 563, 564, 567, 568, 569, 570, 571, 577, 578, 590, 597, 598, 600, 602, 605, 607, 637, 638, 653, 657, 666, 674, 675, 676, 684, 686, 704, 712, 716, 721, 724, 733, 734, 747, 764, 765, 775, 800, 801, 805, 806, 807, 808, 822, 834, 835, 836, 839, 841, 844, 845, 846, 849, 850, 857, 858, 869, 870, 871, 872, 874, 876, 877, 885, 886, 887, 888, 893, 907, 908, 910, 911, 916, 919, 924, 930, 936, 938, 939, 942, 986, 998, 1005, 1009, 1012, 1015, 1016, 1019, 1022, 1030, 1032, 1033, 1035, 1036, 1038, 1040, 1046, 1049, 1052, 1054, 1055], "200": [69, 70, 79, 85, 89, 95, 109, 126, 139, 150, 157, 178, 203, 212, 218, 221, 222, 223, 229, 234, 238, 256, 260, 276, 282, 284, 285, 316, 319, 337, 345, 346, 364, 366, 378, 395, 420, 422, 427, 447, 461, 475, 478, 479, 530, 541, 542, 543, 546, 547, 548, 551, 555, 592, 657, 659, 679, 687, 700, 822, 869, 870, 910, 914, 915, 916, 917, 918, 930, 1024, 1030], "2000": [54, 63, 75, 85, 109, 124, 130, 195, 263, 266, 275, 293, 311, 329, 358, 378, 380, 415, 416, 422, 427, 459, 469, 541, 542, 567, 697, 699, 701, 751, 796, 805, 858, 888, 900, 1006, 1009, 1015, 1021, 1059], "20000": [57, 125], "200000": [235, 877], "20002": 1053, "2001": [2, 64, 179, 192, 269, 274, 412, 415, 422, 444, 458, 459, 460, 469, 519, 567, 568, 572, 573, 636, 642, 647, 653, 699, 704, 743, 796, 893, 905, 943, 999, 1001, 1005, 1009, 1015, 1017, 1019, 1021, 1024], "2002": [98, 413, 415, 422, 444, 455, 601, 602, 734, 764, 859, 907, 1001, 1009], "20023": 1053, "2003": [2, 51, 179, 412, 415, 420, 423, 458, 459, 469, 521, 523, 697, 701, 847, 849, 1005, 1006, 1011, 1021, 1048], "20030": 1053, "20031": 1054, "2004": [44, 172, 275, 293, 378, 380, 415, 417, 420, 480, 543, 615, 616, 697, 701, 713, 751, 791, 908, 1003, 1005, 1006, 1011, 1024], "2005": [62, 64, 114, 380, 413, 444, 446, 861, 1005, 1012, 1022], "20056": 1053, "2006": [2, 50, 309, 378, 422, 425, 469, 506, 565, 566, 573, 574, 618, 619, 622, 627, 630, 657, 674, 675, 749, 796, 797, 805, 847, 905, 922, 923, 1005, 1009, 1011, 1014, 1021, 1022], "2007": [0, 73, 204, 378, 415, 424, 447, 459, 461, 467, 469, 574, 664, 699, 725, 742, 745, 766, 767, 803, 1001, 1005, 1007, 1009], "20072": 1053, "2008": [51, 417, 419, 420, 485, 542, 571, 598, 653, 672, 693, 694, 700, 724, 734, 764, 842, 847, 851, 868, 1003, 1006, 1007, 1009, 1010, 1011, 1014, 1015, 1024], "20087": 1053, "2009": [2, 137, 140, 141, 152, 202, 415, 419, 420, 422, 423, 527, 528, 536, 539, 545, 546, 548, 549, 552, 555, 561, 567, 568, 643, 679, 687, 704, 843, 920, 921, 955, 956, 1005, 1009, 1010, 1016, 1025], "200_000": [877, 1056], "200j": 165, "200m": 378, "200x": 1040, "201": [149, 172, 272, 313, 380, 592, 1030], "2010": [0, 112, 191, 280, 281, 412, 415, 417, 419, 420, 428, 482, 544, 712, 716, 727, 728, 748, 837, 869, 870, 1001, 1005, 1009, 1013, 1023, 1027, 1040], "2011": [0, 191, 389, 420, 423, 543, 546, 548, 549, 555, 598, 635, 646, 666, 738, 999, 1013, 1023, 1027, 1040], "20117": 1053, "2012": [0, 114, 413, 422, 563, 564, 571, 647, 751, 998, 1002, 1009, 1027, 1040], "2013": [0, 195, 380, 415, 419, 420, 544, 734, 764, 1001, 1009, 1027, 1041, 1042], "2014": [0, 377, 409, 420, 422, 425, 538, 615, 616, 630, 631, 666, 700, 869, 870, 955, 956, 1006, 1013, 1033, 1043], "20145": 1054, "2015": [0, 191, 377, 716, 729, 731, 732, 869, 870, 1009, 1016, 1033, 1044, 1045], "201520": 206, "20155": 1053, "20159": 1053, "2016": [0, 242, 377, 415, 998, 1045, 1046], "20161": 1053, "20165": 1053, "2017": [0, 275, 377, 413, 415, 426, 451, 1009, 1046, 1047], "2018": [0, 217, 235, 423, 457, 998, 1009, 1033, 1047, 1048], "2019": [0, 191, 381, 415, 459, 469, 700, 1006, 1009, 1016, 1019, 1048, 1049, 1050], "202": [283, 1030], "2020": [0, 378, 1050, 1051, 1052, 1053], "20200": 1053, "20207": 1053, "20209": 1053, "2021": [0, 381, 383, 679, 1009, 1052, 1053], "2022": [0, 371, 415, 422, 713, 1019, 1054, 1055], "2023": [0, 395, 409, 413, 1055, 1056], "20231": 1053, "2024": [1057, 1058], "20240": 1053, "20250": 1053, "20272": 1053, "20297": 1053, "203": [88, 240, 358, 1030], "20312": 1053, "203174": 206, "20326": 1053, "20331": 1055, "2034": [357, 378], "20380": 1053, "20385": 1053, "2039": 278, "204": [203, 271, 1017, 1022, 1030], "20408": 1054, "20415": 1055, "20416": 1053, "20431": 1053, "20477": 1053, "20512": 1053, "20515": 1053, "20521": 1053, "20524": 1056, "20526": 1053, "20528": 1053, "20531": 1053, "20534": 1053, "20552": 1053, "20554": 1053, "20560": 1053, "20567": 1054, "20583": 1053, "20597": 1053, "20617": 1055, "20619": 1053, "20638": 1053, "20640": [143, 186, 378, 497], "20652": 1053, "20653": 1054, "20657": 1053, "20673": 1053, "20683": 1053, "207": [168, 252, 314, 1030, 1040], "2071716": [852, 853], "20727": 1053, "20729": 1053, "2073": 47, "2074": 47, "20752": 1053, "2075215": 232, "20753": 1054, "20761": 1053, "207667": 278, "2077": 47, "2078": 47, "2079": 280, "208": [172, 296, 380], "20802": 1055, "20803": 1054, "20811": 1054, "20842": 1053, "20843": 1053, "20860": 1054, "20880": 1053, "208864": 206, "20899": 1053, "209": [131, 749, 888, 1030], "20904": 1053, "20959": 1053, "20960": 1053, "20961": 1053, "2098": 47, "20_000": 296, "20new": 378, "20newgroup": [66, 187, 196, 209, 233, 314, 496, 666, 838, 841, 1005, 1030], "20news_hom": 378, "20newsgroup": [232, 376, 1040], "20th": 716, "21": [43, 52, 107, 121, 153, 172, 190, 206, 218, 235, 239, 265, 269, 293, 296, 314, 318, 320, 331, 380, 381, 385, 387, 401, 412, 422, 423, 448, 452, 481, 485, 537, 540, 569, 570, 571, 577, 578, 596, 597, 599, 635, 677, 695, 762, 808, 822, 835, 878, 885, 887, 893, 910, 926, 955, 1001, 1005, 1009, 1010, 1019, 1030, 1036, 1038, 1040, 1041, 1043, 1047, 1048, 1050], "210": [90, 1030], "2100": [47, 85, 328], "2102": 552, "21020": 1055, "21026": 1054, "21032": 1054, "21038": 1054, "2105": 47, "2107": [47, 280], "21078": 1054, "21079": 1054, "21080": 1053, "21086": 1054, "21093": 1053, "211": [280, 330, 338, 888, 900], "2110": 47, "21109": 1054, "2111": 47, "21114": 1054, "211217613": 1048, "2113": 47, "21130": 1053, "2114": 47, "21145": 1053, "21148": 1054, "2117": 339, "21177": 1054, "21179": 1053, "21194": [81, 1053], "21195": 1053, "21199": 1053, "212": [149, 172, 248, 280, 338, 380, 476, 508, 1015], "21219": 1054, "212197e": 235, "21243": 81, "21251": 1053, "2126": 254, "21271": 1053, "21278": 1054, "21295": 1053, "21298": 1054, "21301203": 177, "213056e": 235, "21310": 1054, "21316": 1054, "21330": 1054, "21334": 1054, "21336": 1053, "21340": 1053, "21341": 1054, "21351": 1053, "21389": 1053, "2139": [217, 235], "214": [175, 325, 592, 1030], "21408": 1054, "21425": 1054, "2143": 47, "21430": 1054, "21432": 1054, "21434": 1054, "21436": 1054, "21443888": 232, "21445": 1054, "21448": 1054, "2145": 47, "2146": 47, "21469": 1055, "21481": [1053, 1054], "21482": 1054, "21493": 1053, "215": 592, "21517": 1053, "21534": 1054, "21542": 1054, "21544347": 51, "21552": 1053, "21565": 1054, "2156660": 332, "21567": 1054, "21569": 1054, "21573": 1054, "21576": 1054, "21578": [47, 1053], "2158": 47, "2159": 47, "2159048": [661, 671, 692], "216": [117, 140, 1022, 1030], "21606": 1054, "21616": 749, "21617": 1054, "2163": 47, "21632": 1054, "2164": 47, "21694": 1053, "217": [543, 549, 807], "21701": 1054, "21705": 1054, "2171": 46, "21713": 1054, "21724": 1054, "2173": [204, 664, 1005], "21735": 1054, "21741": 1053, "21762": 1054, "21767": 1054, "2179": 47, "218": [380, 478, 723, 794], "2180": 57, "21800": 1054, "21805": 1054, "21807": 1057, "21808": 1054, "21809": 1056, "21814": 1054, "21832": 1054, "21833": 1053, "21837": 1054, "21845": 1053, "21871": 1053, "21873": 1054, "21880": 1054, "21881": 1054, "21888": 1054, "218997": 206, "219": [62, 203, 214, 262, 274, 1030], "21901": 1054, "21915": 1053, "21917": 1053, "2192": [204, 664, 1005], "21938": 1055, "21954": 1054, "21987": 1054, "21988": 1054, "21991": 1053, "21998": 1054, "22": [43, 52, 77, 141, 142, 185, 186, 187, 190, 191, 192, 234, 238, 242, 257, 265, 269, 298, 314, 316, 320, 324, 327, 330, 333, 336, 339, 359, 383, 388, 401, 412, 444, 455, 479, 485, 495, 496, 503, 504, 512, 523, 532, 539, 545, 550, 553, 554, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 602, 617, 635, 636, 640, 642, 653, 655, 659, 661, 663, 666, 667, 669, 671, 673, 677, 696, 700, 710, 712, 721, 765, 777, 786, 791, 792, 796, 808, 809, 813, 822, 827, 829, 832, 833, 834, 835, 836, 837, 838, 839, 856, 858, 860, 862, 863, 864, 869, 870, 871, 873, 876, 892, 903, 912, 914, 915, 916, 917, 918, 920, 921, 922, 923, 950, 951, 1001, 1009, 1019, 1030, 1036, 1038, 1040, 1043, 1048, 1051, 1053], "220": [79, 248, 269, 279, 364, 1030, 1040], "2200": [85, 378, 501], "22002": 1054, "22014": 1055, "22015": 1054, "22016": 1054, "22027": 1054, "220446049250313e": [478, 479, 485, 658, 659, 662, 663, 664, 690, 691], "22050": 1053, "22054": 1055, "22058": 1054, "22059": 1054, "22062": 1054, "22063": 1054, "22064": 1054, "22065": 1054, "221": [117, 156, 250, 269, 287, 1030, 1043], "22106": 1054, "22108": 1054, "2211": 642, "22111": 1054, "22114": 1054, "22118": 1054, "22119": 1054, "22120": 1054, "22137": 1054, "22148": 1054, "22149": 1054, "22150": 1054, "22154": 1054, "22159": 1054, "22181": 1054, "22188": 1054, "22191": 1054, "22199": 1054, "222": [117, 156, 339, 343, 1024, 1030], "22203": 1054, "22206": 1054, "22212": 1054, "22215": 1054, "22217": 1054, "22218": 1054, "2222": 664, "22223": 1054, "22235": 1054, "22237": 1054, "2224": 1042, "22240": 1054, "22248": 1054, "22249": 1054, "22254": 1054, "22255": 1054, "22268": 1055, "22269": 1055, "22284": 1054, "22288": 1054, "223": [117, 156, 172, 380], "22300": 1054, "22314355": 598, "22318": 1054, "22320": 1054, "22356": 1054, "22361": 380, "22370": 1054, "223745": 217, "224": [88, 117, 156, 415, 733, 830], "22409": 1056, "22410": 1054, "22412": 1054, "22438": 395, "2246": 235, "22476": 1054, "22486": 1054, "22493": 1054, "22498": 1054, "225": 422, "22504": 415, "22506": 1056, "22508": 1054, "22518": 1055, "22525": 1054, "22526": 1054, "22527": 1055, "22537": 1054, "22548": 1054, "22553": 1054, "22554": 1055, "22562": 1055, "22566": 1054, "22578": 1054, "225806": 235, "22595": 1054, "226": [145, 415, 426, 451, 1030], "22604": 1054, "22606": 1059, "22629": 1055, "22635": 1054, "22665": 1055, "22685": 1054, "22687": 1054, "22692": 126, "22694": 1054, "22695": 1054, "22696": 1054, "22697": 1054, "227": [67, 209, 275, 415, 733, 1030], "22710": 1055, "22735": 1054, "22747343e": 113, "22775": 1054, "22784907": 835, "22806": 1054, "22808": 1054, "22830": 1054, "2284": 191, "22856": 1054, "2286": 378, "22866": 1054, "22868": 1054, "2287": 378, "2288": 378, "22891": 1054, "22898": 1055, "22899": 1054, "229": [290, 339, 1009, 1030], "22908": 1054, "22913": 1054, "22950": 1054, "22953": 1054, "22965": 1055, "22968": 1055, "22982": 1054, "22993": 1055, "22nd": 446, "23": [43, 57, 63, 70, 85, 126, 155, 158, 172, 187, 217, 246, 254, 256, 258, 265, 269, 314, 320, 324, 327, 328, 329, 331, 332, 336, 380, 389, 401, 422, 428, 438, 447, 454, 459, 461, 469, 472, 474, 475, 482, 485, 486, 487, 489, 490, 491, 497, 500, 508, 509, 510, 512, 513, 518, 520, 522, 530, 532, 546, 547, 548, 551, 555, 562, 564, 566, 568, 569, 570, 573, 576, 577, 578, 615, 616, 619, 635, 638, 640, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 675, 677, 678, 680, 681, 683, 686, 687, 688, 689, 725, 738, 786, 838, 844, 845, 846, 855, 863, 870, 873, 885, 892, 900, 901, 910, 913, 915, 918, 921, 923, 936, 938, 939, 950, 951, 956, 1009, 1030, 1036, 1038, 1040, 1041, 1047, 1048, 1049, 1052], "230": 592, "2300": [85, 206], "23023": 1054, "23033": 1054, "23034": 1054, "23036": 1054, "23038": 1055, "23040": 1054, "23046": 1054, "23047": 1054, "23077": 1054, "23079": 1054, "23095": 1054, "23097": 1054, "23098": 1054, "23099": 1056, "231": [50, 309, 378, 415, 426, 451, 506, 592], "23101": 1055, "23113": 1054, "23115": 1054, "23127": 1055, "23139": 1055, "23149": [378, 505, 1054], "23194": 1054, "23197": 1055, "23198": 1054, "232": [269, 1009], "23210": 1055, "23214": 1054, "2323": [697, 701, 1006], "23252": 1055, "23256": 1054, "23264": 1054, "23271": 1054, "23273": 1054, "23275": 1055, "23299": 1054, "2331": 43, "23317": 1057, "2332": 43, "2333": 43, "2334": 43, "2335": 43, "23358": 1054, "2336": 389, "23370": 1054, "23395": 1054, "233mb": 45, "234": [88, 847, 851, 869, 870, 1011], "2341": 532, "23410": 1054, "234137": 206, "23442": 1055, "23446": 1055, "23461": 1055, "23470": 1055, "23471": 1054, "23480": 1055, "235": [223, 322, 1030], "235430": 278, "23548": 1054, "2357juan": [1054, 1055, 1056], "23585": 1055, "23595": 1056, "23604": 1055, "23608": 1054, "23619": 1055, "23636": 1054, "23637": 1055, "23668876": [661, 671, 692], "236720": 206, "23683": 1055, "23689075": [661, 671, 692], "237": 54, "23726": 1055, "23731": 1056, "23734": 1055, "237703": 206, "23773583": 113, "23786125": 213, "23798": 1055, "238": 54, "23819": [1055, 1056], "23833": 1054, "23834": 1055, "23865": 1055, "23874": 1055, "238744": 206, "23877": 1055, "238955": 278, "239": [167, 1030, 1040], "23905": 1055, "23935": 1055, "23977": 1055, "23990": 1054, "23993": 1055, "24": [43, 44, 47, 52, 101, 153, 172, 187, 191, 195, 202, 225, 242, 269, 277, 287, 296, 324, 325, 326, 328, 331, 332, 335, 336, 358, 381, 383, 387, 401, 407, 408, 415, 422, 423, 444, 447, 448, 449, 451, 452, 454, 455, 456, 457, 458, 459, 460, 467, 469, 471, 476, 477, 478, 479, 480, 481, 482, 483, 496, 497, 498, 500, 504, 512, 523, 524, 525, 526, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 551, 552, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 589, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 621, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 706, 707, 708, 710, 716, 722, 735, 754, 761, 805, 806, 808, 811, 812, 822, 829, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 873, 875, 876, 877, 878, 881, 882, 884, 886, 887, 888, 889, 890, 892, 902, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 950, 951, 955, 983, 989, 998, 1016, 1019, 1030, 1036, 1038, 1040, 1048, 1049, 1050, 1051, 1053], "240": [43, 52, 79, 1017, 1040], "2400": 85, "24000": 528, "24015": 1054, "24017": 1054, "24027": 1056, "24051": 1055, "24058": 1055, "24075": 1055, "24076": 1056, "24083": 1056, "24084": 1055, "24087": 1054, "241": [422, 575, 576], "2410": 552, "24140": 1056, "24141": 1055, "24145": 1056, "24146": 1055, "24160": 330, "242": [44, 344, 892, 1030, 1040], "24218": 1055, "24230": 1056, "24245": 1055, "24258": 1055, "24264": 1055, "24283": 1055, "243": [216, 592, 1030], "2431": 482, "24317": 1055, "24338": 1055, "24350": 1055, "24354": 1055, "24365": 1055, "243802": 312, "244": [269, 293, 592], "24404831511191221642141021252626109": 52, "24405": 1055, "2441": 235, "24412": 1055, "24421": 1055, "24433": 1055, "24446": 1054, "244466": 258, "24465": 1055, "2449": 389, "245": [239, 1021, 1030, 1042], "24512": 1055, "24523": 1055, "24528": 1055, "24538": 1055, "24539": 1055, "24543": 1055, "24556": 1055, "24568": 1056, "245961": 150, "245mb": 359, "246": [182, 202, 353, 1017, 1030, 1040], "24617": 1055, "2463": 1005, "24630": 1055, "24631": 1054, "24637": 1055, "24640578": 113, "24645": 1055, "24667": 1055, "24668": 1056, "24677": 1056, "24683": 1055, "24688": 1055, "24699": 1055, "247": 892, "24714": 1055, "24747": 1055, "24750": 1055, "24755": 1055, "24767": 1055, "24769": 1056, "24838": 1057, "24849": 1055, "24855": 1055, "24856": 1055, "24871": 1056, "24873": 1055, "2487575": 195, "2487591": 195, "24882": 1056, "24889": 1055, "24894": 1055, "249": [127, 269, 1030], "24935": 1056, "24951": 1055, "25": [43, 44, 45, 46, 47, 48, 49, 50, 52, 57, 61, 63, 77, 80, 89, 90, 113, 117, 130, 132, 141, 150, 168, 169, 175, 185, 190, 195, 198, 207, 221, 242, 244, 254, 262, 269, 275, 309, 311, 314, 316, 318, 322, 330, 335, 336, 357, 364, 366, 370, 389, 419, 422, 423, 426, 451, 484, 488, 509, 512, 529, 578, 605, 626, 686, 742, 804, 825, 838, 864, 882, 887, 889, 890, 893, 901, 902, 904, 905, 953, 957, 989, 1005, 1009, 1010, 1012, 1019, 1030, 1040, 1042, 1048, 1051], "250": [49, 100, 150, 195, 237, 308, 501, 700, 830, 998, 1021, 1030, 1047], "2500": 1009, "25000": 77, "2501": [172, 380], "25044": 1056, "250639": 206, "25067": 1055, "25077": 1055, "25080": 1055, "25089": 1055, "25093": 1056, "25094": 1055, "251": [172, 239, 357, 380], "25102": 1056, "25120": 1056, "25129": 1055, "25147": 1055, "25163598": 391, "25172": 1055, "25174": 1055, "25177": 1056, "25183501383331797": 283, "25186": 1056, "25188": 1055, "25190": 1056, "25193977": 1010, "25196": 1056, "252": [172, 239, 261, 380, 542, 888, 900, 1030], "25209": 1056, "25214": 1056, "25220": 1056, "25232": 1056, "25250": 1055, "25251": 1056, "25257": 1056, "25274": 1055, "25275": 1057, "25291": 1056, "25291366": 366, "25294": 1056, "25295": 1055, "25296": 1055, "25297": 1056, "25299": 1056, "253": [149, 542], "25308": 1056, "25312": 1055, "25334": 1056, "25341": 1055, "253445": 150, "25349312e": 199, "2535": [476, 481], "25354": 1055, "2536": 483, "25363": 1055, "25367": 1056, "25370": 1055, "25387": 1056, "254": [338, 1030], "25402": 1056, "25417": 1056, "25432": 1056, "25438": 1056, "25443": 1056, "25477": 1055, "2548": 213, "25490": 1056, "25499205": 544, "255": [83, 126, 296, 313, 322, 328, 378, 422, 501, 502, 569, 570], "25500": 1055, "25506": 1056, "25511": 1055, "25531": 1056, "25563": 1055, "25570": 1055, "25587": 1056, "25589": 1055, "256": [77, 83, 88, 149, 317, 322, 371, 378, 415, 422, 456, 475, 545, 554, 571, 868, 900, 910, 1030, 1054], "25601": 1056, "25619": 1055, "25629": 1056, "25638": 1055, "25659": 1056, "25664": 1055, "25672": 1056, "25677": 1056, "2568": 1049, "25694": 1055, "25697": 1056, "257": [105, 239, 273, 1030], "25704": 1055, "25713": 1056, "25719016": 1010, "25732": 1056, "25733": 1056, "25744": 1055, "25747": 1055, "25752": 1056, "25774": 1055, "25784": 1056, "2579": 700, "258": [46, 85, 239, 1030], "25805": 1056, "25813": 1056, "25814": 1056, "25815": 1056, "259": [50, 239, 309, 378, 422, 506, 575, 576], "259031": 206, "259297": 206, "25931": 1056, "25956": 1056, "25973": 1056, "25987": 1056, "25991": 1058, "25th": [43, 254, 890], "26": [43, 81, 89, 113, 121, 125, 126, 179, 190, 191, 232, 253, 269, 288, 336, 389, 578, 656, 737, 791, 830, 888, 900, 956, 1009, 1019, 1030, 1040, 1043, 1044, 1052, 1058], "260": [274, 1053], "26019": 1056, "26021": 1056, "26033": 1056, "2605": 700, "26082": 1056, "26093": 1056, "261": [286, 1030], "26106": 1056, "26108": 1056, "26113448": 169, "26120": 1058, "26121": 1056, "26163": 1057, "26194": 1056, "262": 1040, "26207": 1056, "26242": 1056, "26243": 1057, "26253567e": 113, "26264": 1056, "26267": 1057, "26278": 1057, "26286": 1056, "26286057": 232, "26289": 1056, "26299": 1057, "26315": 1057, "26316": 179, "26318": 1056, "26323": 1056, "263234": 258, "26323428": 258, "26325": 1056, "26333": 1056, "26337": 1056, "26362917": 232, "26366": 1057, "263758": [591, 595], "26376": 1056, "26385": 1056, "26386": 1056, "26386883": 177, "26391": 1057, "2640": 843, "26400": 1056, "26410": 1057, "26411": 1057, "26416": 1056, "26424": 1056, "26433": 1056, "26454": 1056, "26459": 1057, "26464": 1057, "26466": 1056, "265": [743, 847, 851, 1011], "26503": 1056, "26506": 1057, "26521": 1056, "2652124": 823, "26525": 1057, "26551": 1056, "26566": 1056, "26579": 1056, "26593496": 232, "26600": 1056, "26602": 1056, "26616": 1057, "26634": 1057, "26642044": 674, "26644": 1056, "26648": 1057, "26653": 1056, "26657": 1056, "2666": 1009, "2667": 506, "26674": 1057, "26683": 1057, "267": [242, 1030, 1040], "2671": 1019, "26721": 1057, "26734": 1057, "26736": 1057, "26744": 1057, "26748": 1056, "2675": 46, "26754": 1056, "26760": 1056, "26765": 1057, "267703": 89, "26772": 1056, "26786": 1057, "26789": 1057, "268": [248, 289], "26814": 1056, "268147": 278, "26828": 1057, "26830": 1057, "26831": 1057, "26837": 1058, "26840": 1057, "26855": 1057, "26862": 1057, "26893": 1056, "26896": 1057, "269": [261, 519], "26903": 1056, "26909": 1057, "26913": 1056, "2692": 1019, "26931": 1056, "26934744": 133, "26940": 1056, "26944": 1057, "26957": 1057, "26th": [415, 734, 764, 1009], "27": [43, 45, 52, 57, 67, 82, 89, 269, 335, 336, 354, 380, 415, 423, 525, 532, 613, 721, 796, 797, 893, 913, 1009, 1019, 1040, 1042], "270": [202, 336], "27000": 235, "27002": 1056, "27005": 1057, "27006": 1057, "27017": 1057, "27018": 1057, "27044": 1056, "27054655": 232, "27058": 1057, "27069029": 332, "27096": 1059, "27098": 1057, "27100": 1057, "27104": 1057, "27110": 1057, "27137": 1057, "27139": 1057, "2714": 254, "271411": 258, "27161": 1057, "27161955": 169, "27166": 1057, "27167": 1056, "27179": 1057, "27185": 1057, "27204": 1057, "27219": 1057, "272214": 592, "27239": 1057, "27240": 1057, "27243": 1056, "27250": 1057, "27252": 1057, "2727": 566, "27274": 1057, "27277": 1057, "27291": 1057, "27292": 1056, "27301": 1057, "27308": 1057, "27309": 1057, "27311": 1056, "27314": 1057, "27315": 1057, "27328": 1057, "27336": 1057, "2734": 389, "27344": 1058, "27372": 1057, "27381": 1059, "27389": 1057, "274": [211, 519, 1030], "27417": 1057, "27431": 1057, "27438": 1057, "27456": 1058, "27468": 1056, "27478": 1057, "27490": 1057, "27491": 1058, "27499706": 51, "275": [43, 132, 336, 1030, 1043], "27500": 1057, "27526": 1058, "27538": 1057, "27544": 1057, "27556": 1057, "27558": 1057, "27560": 1058, "27566": 1058, "275706": 89, "27573": 1056, "27576": 1058, "27577": 1057, "27580": 1056, "27583": 1056, "27584": 1058, "275851": 258, "2759": [904, 905], "27597342": 117, "276": 275, "27601": 1057, "27614": 1057, "27624": 1057, "2763": [428, 482], "27636": 1058, "27639": 1057, "27645": 1057, "27650": 1057, "27651": 1057, "27657": 1058, "27668": 1057, "27670": 1057, "27675": 1057, "27678": 1057, "277": [1017, 1042], "27700": 1058, "27702": 1057, "27710": 1057, "27718": 1057, "27720": 1057, "27721": 1057, "27734": 1057, "27736": 1059, "27757": 1057, "27760": 1057, "27772182": 52, "278": [380, 852, 853], "2780": 389, "27800": 1058, "27801": 1057, "27817": 1057, "27821": 1057, "27828": 1057, "27834": 1057, "27835": 1057, "27841": 1057, "27844": 1058, "27865": 1057, "27875": 1059, "27898": 1057, "27899": 1057, "279": [183, 1005], "27904": 1058, "27937": 1058, "27966": 1059, "27979": 1057, "27990": 1058, "28": [43, 101, 150, 172, 190, 233, 242, 269, 276, 284, 313, 335, 336, 380, 389, 415, 419, 457, 464, 1019, 1040, 1043, 1046], "280": [260, 336, 1030], "28009951": 835, "2802": 57, "28040": 1058, "28048": 1057, "28051": 1058, "28053": 1058, "28064": 1059, "28074": 1057, "28085": 1058, "28090": 1057, "28092": 1058, "28095": 1057, "28096": 1059, "28102": 1058, "28106": 1059, "28111": 1057, "28121": 1057, "28136": 1058, "28160": 1058, "28165": 1057, "28167": 1057, "28179": 1059, "2818": 477, "28184": 1057, "28187": 1058, "28188": 1057, "28191": 1057, "28195": 1057, "28198": 1057, "282": 1040, "28205": 1058, "28207552": 232, "28210": 1058, "28222": 1057, "28225276": 88, "2823": 339, "28233": 1057, "28235": 1057, "28240": 1057, "28241": 1057, "28247": 1057, "2825": 0, "28256": 1057, "28261": 1058, "28262": 1057, "28263": 1057, "28268": 1059, "28295": 1057, "2830": 0, "28306": 1058, "28327": 1057, "2833": 389, "28351": 1058, "28352": 1058, "28360": 1058, "28365": 1057, "28377": 1057, "28385": 1057, "28399": 1058, "284": 657, "28407": 1058, "28425": 1058, "284315": 269, "28432": 1058, "28435": 1058, "28471": 1058, "284806": 269, "284807": 269, "28483": 1058, "28491": 1058, "28494": 1059, "28498": 1058, "285": [113, 258, 336, 732, 1030], "28521": 1058, "28552": 1058, "28557": 1058, "28582": 1058, "286": [225, 422, 1030], "28604": 1058, "28612": 1058, "28622": 1059, "28651": 1058, "28664": 1058, "28670": 1058, "28692": 1058, "287": [191, 1021], "28701": 1059, "28703": 1058, "28712": 1058, "28718": 1058, "28722": 1058, "28756": 1058, "28763": 1058, "28768": 1058, "28773": 1059, "2879": 1047, "288": [543, 549], "28808734": 221, "28822": 1058, "28823": 1058, "28843": 1058, "28847": 1058, "289": [190, 191], "28915": 1058, "28925": 1058, "28934": 1059, "28936": 1059, "28951": 1058, "28975": [1053, 1059], "28988": 1058, "28992": 1059, "28x28": 313, "29": [114, 175, 179, 208, 217, 221, 234, 269, 330, 336, 380, 422, 567, 568, 698, 702, 789, 805, 864, 1005, 1006, 1023], "290": [336, 696, 697, 701, 1006, 1030], "290075": 206, "29014": 1059, "29018": 1058, "290584": 312, "29067": 1059, "29078": 1058, "291": [96, 172, 358, 378, 380, 1030], "29105": 1059, "29112": 1059, "29119": 1058, "29124": 1059, "29128": 1059, "29135": 1059, "29136": 1059, "2914": 502, "29141": 1059, "29142": 1059, "29143": 1059, "29144": 1059, "29158": 1059, "29179": 1058, "292": [401, 422, 743], "29207": 1059, "29210": 1059, "29212": 1059, "29227": 1059, "29235": 1058, "29239": 1059, "29260": 1059, "29265": 1059, "29266": 1059, "29267": 1059, "29269": 1058, "2928359": 232, "293": 248, "29300": 1059, "29312": 1059, "29314": 1058, "29316": 179, "29327": 1058, "29329": 1059, "29330": 1058, "29336": 1058, "29354": 1059, "29389": 1059, "2939931": 332, "29400": 1059, "29401": 1058, "29402": 1059, "29404": 1059, "29419": 1059, "29433": 1059, "29442": 1059, "29462": 1059, "29473397": [852, 853], "29475": 1059, "295040e": 235, "29540": 1059, "29545": 1058, "295505e": 235, "296": [217, 1021, 1030], "2961": 659, "29612": 1058, "29634": 1059, "29639": 1059, "296575": 206, "29677": 1059, "29694": 1058, "29696": 1059, "297": 378, "29709": 1059, "29710": 1059, "29738": 1059, "29751": 1059, "29780": 1058, "298": 1017, "29804952": 332, "29835": 1059, "29842": 1059, "298688": 275, "29869": 1059, "29880": 1059, "29884": 1059, "29898468": 232, "299": [138, 358, 688], "299546e": 235, "2_": 1001, "2_000": 137, "2_2": [654, 655, 660, 661, 662, 663, 664, 668, 669, 670, 671, 680, 689, 690, 691, 692], "2_f": 660, "2_fro": [661, 670, 671, 692], "2_poli": 275, "2_y": 1011, "2c": [651, 660, 680, 681, 682, 683, 695, 1001], "2d": [2, 43, 69, 71, 74, 79, 82, 83, 84, 88, 96, 97, 120, 122, 124, 127, 133, 156, 187, 211, 218, 223, 237, 238, 239, 242, 244, 247, 248, 305, 335, 336, 343, 346, 365, 377, 379, 383, 392, 397, 415, 416, 420, 423, 425, 448, 459, 469, 471, 474, 488, 495, 497, 498, 500, 501, 502, 508, 509, 510, 512, 518, 522, 541, 549, 557, 592, 594, 643, 651, 665, 680, 699, 746, 787, 833, 837, 841, 879, 929, 932, 934, 938, 939, 955, 971, 994, 995, 1003, 1005, 1006, 1009, 1016, 1020, 1025, 1030, 1040, 1044, 1047, 1048, 1049, 1052, 1054, 1058], "2e": [203, 290], "2e6": 1009, "2ec5ac": 320, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 81, 85, 87, 97, 99, 102, 117, 121, 126, 132, 150, 153, 157, 158, 167, 190, 191, 195, 198, 206, 208, 213, 217, 232, 233, 234, 235, 244, 248, 254, 269, 274, 278, 279, 281, 283, 284, 285, 289, 304, 305, 311, 318, 321, 329, 333, 346, 357, 358, 366, 416, 419, 422, 704, 836, 839], "2fbf01908075": 713, "2fx": 263, "2g": [239, 242, 705, 1051], "2h": 421, "2k": 185, "2l": [425, 630], "2n": [704, 1001, 1013], "2n_": 1005, "2nd": [95, 120, 182, 321, 415, 426, 451, 538, 1019, 1055], "2x": 1040, "2x2": [343, 415, 762], "2x_iy_i": 1001, "3": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 372, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 389, 395, 396, 397, 401, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 512, 513, 514, 515, 518, 520, 523, 524, 525, 526, 527, 529, 531, 533, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 589, 590, 591, 592, 595, 596, 598, 599, 601, 602, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 625, 626, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 700, 701, 702, 704, 707, 708, 710, 711, 712, 713, 715, 717, 718, 721, 724, 725, 729, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 743, 744, 745, 749, 751, 752, 753, 754, 756, 758, 759, 760, 761, 762, 764, 765, 776, 777, 783, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 900, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 934, 935, 938, 939, 940, 944, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 971, 972, 974, 975, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1019, 1020, 1022, 1024, 1025, 1027, 1028, 1030, 1036, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1052, 1053, 1055, 1057, 1058], "30": [43, 47, 49, 54, 57, 70, 74, 75, 79, 89, 95, 105, 107, 111, 130, 137, 146, 150, 153, 157, 163, 172, 174, 175, 178, 191, 195, 197, 211, 215, 217, 235, 237, 238, 242, 249, 253, 254, 264, 269, 275, 276, 280, 290, 293, 296, 305, 306, 320, 321, 322, 330, 331, 335, 336, 340, 344, 347, 349, 350, 365, 370, 378, 380, 381, 388, 389, 401, 407, 408, 419, 423, 426, 451, 457, 462, 463, 464, 508, 539, 543, 545, 546, 547, 549, 551, 553, 554, 578, 600, 603, 604, 606, 656, 700, 743, 791, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 893, 908, 921, 986, 998, 1003, 1009, 1010, 1012, 1017, 1030, 1040, 1041, 1047, 1048, 1049], "300": [43, 58, 59, 70, 73, 85, 93, 126, 137, 138, 139, 143, 186, 207, 242, 244, 248, 264, 269, 278, 306, 319, 327, 335, 350, 353, 450, 454, 455, 466, 468, 521, 647, 652, 653, 687, 698, 700, 702, 869, 928, 1005, 1050], "3000": [52, 99, 240, 904, 905], "30000": 378, "300343": 206, "30061": 549, "301": [73, 416, 1023, 1030], "3015": 57, "30151134": 473, "302": [275, 635], "30258509": 425, "303": [198, 235, 643, 1030], "304": [172, 320, 365, 380], "3040": 151, "305": 389, "30506066": 202, "3053": [476, 481], "305438": 150, "306": 635, "306012": 206, "30750": 415, "308": 643, "30897646": 232, "30m": 378, "31": [43, 104, 112, 235, 269, 301, 328, 335, 336, 412, 423, 508, 569, 570, 605, 657, 679, 687, 973, 1010, 1040], "3109306": 177, "311": [174, 358], "312": [153, 1043], "3121": 716, "313276e": 235, "315": [296, 358, 380], "316": [179, 183, 619, 622, 633, 888], "31622776601683794": 163, "3164764": [217, 235], "317": [80, 179, 1030], "31760": 1005, "318": 457, "318387": 312, "319": 175, "31958": 179, "31973683": 232, "31bit": 1051, "31st": [218, 891], "32": [43, 44, 52, 86, 121, 172, 189, 192, 253, 254, 289, 329, 336, 377, 381, 388, 397, 412, 422, 423, 452, 572, 573, 590, 597, 642, 684, 891, 893, 938, 939, 973, 1017, 1019, 1030, 1040, 1043, 1046, 1048, 1049, 1052, 1053, 1054, 1057], "320": [378, 998, 1023, 1040], "3204": 1046, "321": [215, 1030], "321301": 62, "322": [45, 358, 478, 479], "3221": [700, 1006], "323": 248, "323200": 62, "324": 378, "324084": 206, "3245": [700, 1006], "325": [323, 1030], "325198e": 235, "3252": 605, "326": [137, 1030], "32634568": 221, "3264": 46, "327": [63, 738], "3272984419327777": 361, "3273": 754, "327407": 258, "327605": 258, "32767": 1051, "32782448": 177, "3279": 46, "328": [82, 358, 738, 1030], "3288": 552, "329": 457, "329616": 206, "32987858": 573, "32bit": [2, 370, 973, 1058], "32x32": 380, "33": [43, 113, 217, 289, 330, 336, 365, 378, 380, 388, 389, 415, 423, 468, 540, 645, 656, 720, 721, 737, 738, 746, 751, 791, 792, 795, 814, 836, 838, 840, 899, 923, 990, 1005, 1009, 1019, 1030, 1040, 1048], "330": 336, "331263": 206, "3315057": [834, 835], "3317": 217, "332": [358, 900], "333": 854, "3333": 506, "333333": 235, "33333333": [862, 1019], "334": 177, "334795": 278, "335": 43, "335919": 312, "336": [153, 389, 1019], "336188": 312, "3367": 1047, "337": 389, "3375": 330, "338": 254, "3383": 46, "3384": 358, "3387": 358, "339": 358, "3397": [672, 693, 694], "33rd": [909, 1022], "34": [43, 52, 150, 172, 174, 301, 314, 335, 336, 365, 380, 419, 528, 537, 578, 605, 657, 675, 724, 772, 1040], "340": [250, 335], "34118": 378, "34125758": 232, "3415": [672, 693, 694], "341523": 312, "3419": 278, "341949": 206, "342": [59, 830, 1030], "34279478": 232, "343": [156, 1030], "3433": 46, "34346583": 88, "3445": 46, "345": [172, 380], "34545455": 1005, "3456": 46, "34586917": 232, "346": [422, 509, 563, 564], "3467": 623, "347717": 150, "348": [61, 1030], "34867495": 1010, "349": [137, 358, 389, 561], "34990341": 117, "35": [43, 45, 46, 48, 50, 90, 105, 139, 160, 190, 191, 197, 204, 244, 293, 321, 335, 336, 552, 656, 657, 664, 710, 714, 715, 735, 749, 764, 790, 797, 845, 998, 1005, 1009, 1015, 1016, 1019, 1040, 1042], "350": 190, "351390": 275, "352": [160, 275, 389, 1030], "352124": 206, "35278655": 232, "3534": 57, "3539": 104, "354": [270, 1030], "354394": 150, "355": [298, 358, 1030], "3551": 46, "355440": 275, "355445": 150, "356": [349, 1017, 1030], "356497": 150, "3565178": 973, "357": [172, 358, 380, 508, 913], "3573": 835, "35776189065725783": 326, "358": [102, 1030], "3582": 46, "358295": 206, "358990": 206, "3591": 1049, "36": [43, 45, 46, 52, 53, 125, 172, 180, 190, 235, 254, 349, 365, 380, 389, 422, 423, 563, 564, 578, 743, 767, 1009, 1040], "360": [137, 561], "360000": 312, "36047253": 232, "361": [378, 422, 563, 564], "362": [280, 1030], "362176": 330, "363": [52, 335, 1030], "3635": 835, "364": [478, 479, 1041], "365": [417, 480], "3659": 1045, "366": 365, "367": [52, 358, 422, 1030, 1040], "36787944": 1007, "368": [124, 170, 1030], "3680": [619, 622, 633], "3684": 843, "36851234": 824, "368896": 62, "369": [228, 1030], "3690483151908911912247722318110": 52, "3696": 621, "3697": 858, "3697178": 52, "37": [43, 202, 278, 289, 335, 365, 378, 422, 532, 724, 892, 903, 1019, 1030, 1040], "370": [66, 1030], "370000e": 235, "370039": 206, "370738": 62, "371": [249, 1030], "372": 358, "37257991": 117, "373333": 278, "375": [88, 245, 456, 758, 1009, 1030], "376": 1017, "37647423": 52, "37674449": 332, "376999": 62, "377": [331, 1030], "37741762": 133, "377eb8": [75, 79, 97, 98, 244], "378": [190, 358, 422, 1040], "37815029": 232, "37845099": 366, "379": [125, 1030], "37967282": 1010, "379710": 190, "379763": 150, "38": [191, 208, 216, 221, 254, 268, 284, 301, 331, 422, 640, 893, 955, 1009, 1019, 1040, 1041, 1042], "3800": 206, "3803": 359, "381327": 378, "382005": 150, "382120e": 235, "38353048": 232, "383973": 278, "384": [358, 704, 913], "3840": 1048, "384338": 206, "384616559": 392, "385000e": 235, "3854": [672, 673], "3855": 1029, "386": 888, "3862": 876, "38629436": 1019, "38690531511642143152471231333333107": 52, "387": [358, 1040], "387580e": 235, "387599": 52, "387830e": 235, "3889": 482, "3889873516666431": 52, "389": [601, 602], "3894": 623, "39": [43, 52, 172, 258, 269, 378, 380, 381, 387, 415, 423, 503, 903, 921, 957], "3908844": 835, "391": 704, "3910350737": 392, "3911": 47, "3928": 477, "393297": 258, "39329747": 258, "394": [104, 183], "3947": 1021, "395": [43, 48, 350, 1030], "39568399": 544, "396": [104, 172, 380], "3964": [428, 482], "397": 378, "3972": 663, "398": [358, 655], "3986": 235, "3996": 659, "3_": 1001, "3_poli": 275, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 377, "3d": [80, 83, 102, 120, 129, 214, 237, 239, 241, 365, 423, 514, 594, 929, 971, 1047, 1048, 1050], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 82, 83, 84, 93, 105, 107, 109, 118, 137, 144, 145, 153, 168, 172, 174, 175, 176, 178, 183, 189, 191, 192, 198, 202, 203, 209, 217, 219, 223, 232, 233, 235, 238, 248, 250, 273, 275, 276, 278, 281, 283, 286, 296, 311, 333, 339, 357, 358, 359, 830, 837, 1017], "3k": 704, "3l": 425, "3llobo": 1055, "3m": 51, "3rd": [120, 182, 847, 890, 1011, 1019], "3ssnporch": 147, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 97, 99, 100, 101, 104, 105, 106, 107, 108, 114, 115, 117, 118, 120, 121, 124, 125, 126, 127, 128, 129, 131, 132, 137, 138, 140, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 163, 168, 172, 174, 176, 177, 179, 180, 182, 183, 185, 186, 187, 190, 191, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 214, 215, 216, 217, 218, 221, 223, 224, 225, 227, 230, 231, 235, 237, 244, 248, 249, 250, 251, 252, 253, 254, 256, 258, 260, 261, 262, 263, 265, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 282, 283, 284, 286, 287, 289, 290, 295, 296, 298, 300, 301, 302, 303, 306, 311, 313, 314, 316, 317, 319, 320, 322, 324, 325, 326, 327, 328, 330, 331, 333, 335, 336, 337, 338, 339, 343, 345, 349, 350, 351, 353, 354, 355, 357, 358, 359, 365, 366, 371, 377, 378, 379, 380, 381, 383, 387, 388, 389, 392, 395, 396, 397, 401, 406, 407, 408, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 498, 504, 512, 520, 521, 524, 525, 526, 532, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 589, 590, 591, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 622, 625, 626, 627, 630, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 682, 685, 687, 688, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 706, 707, 710, 714, 715, 723, 724, 733, 734, 735, 740, 742, 750, 751, 752, 754, 755, 756, 757, 759, 760, 764, 776, 777, 789, 790, 796, 797, 798, 799, 802, 804, 805, 806, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 834, 835, 836, 838, 840, 841, 842, 843, 846, 847, 848, 849, 851, 856, 860, 861, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 899, 900, 904, 905, 906, 910, 912, 913, 916, 920, 921, 922, 923, 934, 935, 937, 938, 939, 940, 944, 955, 956, 957, 958, 960, 962, 963, 964, 965, 972, 979, 980, 981, 983, 984, 985, 986, 989, 990, 991, 998, 999, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1019, 1020, 1023, 1024, 1030, 1036, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1053, 1054, 1055, 1058], "40": [43, 54, 89, 101, 111, 120, 123, 154, 160, 174, 202, 208, 209, 211, 234, 239, 241, 252, 254, 264, 276, 302, 308, 313, 318, 335, 336, 344, 345, 347, 349, 351, 352, 365, 371, 378, 419, 453, 503, 525, 526, 807, 852, 853, 857, 869, 870, 998, 1010, 1019, 1040, 1041], "400": [44, 63, 85, 123, 152, 157, 174, 186, 223, 242, 287, 312, 357, 358, 378, 420, 503], "4000": [94, 152, 263], "400000e": 235, "4017": 532, "4018260": 332, "402": 279, "402344": 389, "4025": 1045, "403": 279, "404": 235, "405": 172, "40597": 295, "406": [697, 701, 1006], "4066": 46, "407": [172, 330, 358, 380, 1030], "40711114": 332, "40842387": 51, "40887718": 92, "409": [222, 1030], "40945": 105, "4096": [123, 378, 420, 503], "40966": 377, "409717": 278, "41": [52, 172, 217, 254, 365, 378, 380, 464, 476, 488, 500, 629, 632, 643, 654, 655, 660, 666, 668, 669, 670, 672, 689, 693, 694, 707, 789, 847, 1011, 1015], "41075698": 421, "41076071": 421, "41082": 44, "411": [190, 339, 417, 427, 480, 541], "4110": 483, "41187": 179, "412": [289, 504, 1005, 1030], "412021": 150, "41214": [217, 235], "41215": 235, "412304": 206, "414": [235, 416, 734, 764, 888, 900, 1009], "41421356": [771, 777, 1012], "4143": 395, "414810": 258, "414912": 153, "415": 358, "416": [747, 1009], "416010": 330, "41666667": 758, "41691605": 133, "417": 295, "41726413": 133, "41888636": 670, "419": [151, 624, 1030], "4194": 380, "42": [43, 44, 45, 52, 57, 58, 61, 62, 63, 64, 67, 79, 81, 91, 111, 117, 121, 125, 130, 137, 144, 145, 147, 148, 150, 151, 153, 154, 158, 168, 169, 186, 190, 192, 193, 195, 197, 206, 209, 211, 212, 219, 223, 224, 225, 231, 232, 234, 237, 238, 239, 244, 249, 250, 251, 254, 257, 269, 274, 276, 279, 289, 296, 302, 303, 304, 311, 316, 317, 318, 319, 321, 323, 325, 327, 329, 338, 344, 346, 357, 358, 366, 371, 388, 389, 397, 406, 415, 419, 422, 423, 426, 444, 451, 485, 495, 500, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 535, 537, 539, 545, 552, 553, 554, 565, 566, 573, 574, 575, 576, 578, 613, 614, 615, 616, 617, 685, 702, 703, 704, 768, 800, 801, 805, 807, 810, 830, 836, 838, 852, 853, 857, 861, 864, 904, 905, 907, 908, 909, 919, 922, 923, 930, 941, 955, 973, 977, 1012, 1019, 1036, 1037, 1040], "42074": 322, "421": [734, 764, 1009], "421087": 278, "42165": 147, "422": [70, 133, 601, 602, 734, 764, 1009, 1030], "4226193151": 52, "4232": [43, 52], "423641": 206, "424": [235, 282, 1030], "4242": [43, 52], "42425183539869415": 326, "425": [238, 623], "4254": [172, 380], "4260": [757, 760], "427": [98, 172, 380, 514, 515, 591, 592, 595, 1030], "427329": 258, "4285714285714286": 1009, "429": [293, 358], "4294": 1046, "429mb": 357, "43": [172, 181, 214, 248, 275, 296, 380, 388, 808, 822, 893], "430": [427, 541], "431": [358, 380], "4310090": 777, "432": [275, 417], "4325": 57, "433": [269, 380], "43348936": 232, "4337": 1005, "43475": 886, "436": [68, 248, 1030], "4362": 1045, "437": [111, 1030], "437362": 206, "438": [190, 358, 1017], "43847489": 133, "43873": 359, "4387766": 52, "4394": 1048, "44": [43, 179, 190, 191, 202, 293, 300, 486, 789, 893, 913, 916, 991, 1009, 1016, 1040], "440": 190, "440409": 206, "4406": 480, "44063": 52, "4409": [43, 52], "44139186": 313, "4415": 57, "442": [172, 182, 186, 380, 509], "4425765": [661, 671, 692], "44300751539296973": 52, "44300752": 52, "443238": 278, "44373091": 1010, "44381023": 221, "44412786": 544, "445": [269, 1017], "445978": 206, "446": [358, 734, 764, 1009], "447268": 89, "4472869": 133, "4474": 389, "4478": 1045, "448": 296, "4486": 552, "449": [44, 420, 543], "4496": [43, 52], "4497": 1029, "45": [52, 75, 99, 106, 107, 117, 121, 153, 168, 179, 192, 206, 217, 235, 254, 282, 286, 287, 336, 346, 419, 422, 423, 572, 573, 635, 642, 654, 655, 660, 668, 669, 670, 689, 690, 691, 796, 805, 916, 999, 1009, 1017, 1027, 1030, 1036, 1040, 1043], "4500": 232, "45070924": 674, "451": 654, "45192": 163, "451933": 89, "452": [144, 178, 180], "453": [180, 365, 1030], "454": 183, "4544": 43, "455": 322, "4550": 377, "456": [44, 420, 543], "45612256": 668, "45663524": 668, "457": [172, 352, 623, 1030], "4576": 843, "458": [89, 1030], "458333315172": 52, "459": [147, 415, 449, 1030], "459074": 258, "46": [43, 52, 88, 217, 254, 366, 389, 601, 602, 690, 691, 724, 830, 916, 921, 1019, 1036], "460": [115, 1030], "46033": 504, "46043": 504, "46081961": 1010, "461": 389, "462": [108, 1030], "462234": 258, "463": [235, 293, 300, 361, 1030], "463088": 52, "46428631511221642143151251232633109": 52, "465660": 62, "465730": 206, "466": [154, 232, 1016, 1030], "4666": 642, "46779927": 51, "468": [93, 109, 254, 1030], "46858513287221654": 331, "46874778": [661, 671, 692], "469": 93, "46915237": [661, 671, 692], "4694": 532, "469474": 206, "46958558": 669, "4697": 82, "47": [43, 213, 378, 501, 502, 543, 549], "470": [202, 1030], "471": [77, 83, 380, 1030], "47140": 415, "47236": [378, 505], "47330339": 423, "4738": 1045, "475": [137, 178, 1030], "47668": 359, "478": [179, 1030], "478522": 206, "47885": 359, "4792": 235, "47922861": 258, "479229": 258, "47928": 359, "4794": 206, "4795": 206, "4796": 206, "4798": 206, "47985": 504, "47987268e": 199, "4799": 206, "48": [43, 52, 80, 117, 129, 153, 179, 258, 322, 380, 389, 415, 518, 605, 707, 754, 836, 847, 998, 1011, 1019, 1036], "480": [143, 202, 358, 1030], "4801": 206, "4802": 206, "4803": 206, "4804": 206, "4805": 206, "4806": 206, "4807": 206, "4809": [206, 278], "481": 358, "4810": 206, "4812": 46, "4815": 206, "48204257": 1010, "4828": 206, "483": 656, "4830": 206, "4831": [206, 663], "4832": 206, "4836": 206, "484": 183, "4841": 206, "484109": 206, "4846": 206, "485": 704, "4852": 206, "4855": 206, "4857596147013469": 95, "486": 219, "4860": 206, "4866": 206, "4867": 206, "4869": 206, "487": [52, 171, 732, 1030], "4872": 206, "48736655": 675, "4874": 206, "4876": 206, "488": [231, 1030], "4880": 206, "4881": [206, 1045], "48841": 504, "48842": 504, "4885": 206, "48858": 389, "4888": 206, "4891": 206, "48938813e": 199, "4894": 206, "48979592": 456, "4898431": [378, 500], "49": [43, 121, 172, 221, 254, 377, 378, 380, 388, 415, 457, 464, 721, 734, 764, 772, 801, 805, 808, 893, 1009, 1019, 1043], "490": [193, 269, 1030], "491": 704, "492": [269, 651, 1002], "4923": 657, "4928": 206, "493": [651, 912, 1002], "4936": 206, "4939": 1047, "494021": 500, "4948": 46, "4951": 661, "495761": 389, "496": [148, 1030], "49665188": 221, "4967": 532, "4976": 605, "498": [138, 1030], "499": [172, 380, 389], "4995": 1046, "49999993": 1005, "4daf4a": [79, 97], "4dbd33": 121, "4e": 238, "4e9a06": [94, 99], "4eacc5": [94, 99], "4f": [46, 47, 57, 140, 149, 151, 232, 233, 235, 321, 919], "4i": 85, "4th": [172, 182, 380], "4x": [389, 1055, 1059], "4x11": 300, "4x4": [380, 420, 423], "5": [43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 99, 100, 101, 102, 104, 105, 107, 108, 109, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 126, 127, 129, 130, 132, 135, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 163, 165, 167, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 219, 220, 223, 225, 228, 229, 230, 231, 232, 233, 235, 238, 239, 240, 242, 244, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 308, 309, 311, 312, 313, 314, 316, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 338, 339, 340, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 378, 379, 380, 381, 383, 387, 388, 389, 391, 395, 396, 397, 401, 407, 408, 409, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 430, 444, 445, 446, 447, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 476, 479, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 512, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 536, 539, 541, 542, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 560, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 590, 600, 601, 602, 605, 610, 612, 613, 614, 615, 616, 618, 621, 622, 623, 624, 627, 628, 630, 631, 633, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 649, 651, 654, 655, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 696, 697, 699, 700, 701, 703, 704, 705, 707, 711, 713, 715, 717, 720, 721, 726, 728, 729, 730, 731, 732, 734, 735, 736, 738, 740, 743, 746, 747, 748, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 777, 778, 786, 789, 790, 792, 793, 795, 796, 797, 798, 799, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 869, 870, 871, 872, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 906, 912, 913, 914, 915, 916, 917, 918, 920, 922, 930, 934, 935, 938, 939, 943, 944, 954, 955, 956, 957, 958, 960, 962, 963, 971, 972, 977, 979, 980, 983, 984, 985, 986, 987, 988, 989, 998, 999, 1001, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1021, 1023, 1024, 1030, 1031, 1035, 1036, 1038, 1041, 1042, 1043, 1045, 1047, 1048, 1050, 1054, 1055, 1056, 1059], "50": [0, 43, 46, 49, 52, 54, 61, 68, 69, 73, 77, 85, 87, 94, 95, 100, 101, 104, 105, 117, 121, 123, 126, 132, 137, 140, 143, 150, 153, 156, 157, 172, 175, 177, 178, 179, 180, 189, 190, 191, 198, 202, 212, 217, 220, 224, 225, 229, 231, 233, 235, 237, 241, 242, 247, 248, 250, 258, 269, 270, 275, 277, 278, 283, 288, 296, 314, 316, 320, 327, 329, 336, 338, 340, 344, 352, 358, 378, 380, 383, 388, 403, 419, 422, 423, 424, 427, 449, 480, 486, 487, 508, 512, 529, 531, 534, 541, 547, 552, 561, 562, 577, 601, 602, 614, 616, 617, 623, 625, 666, 667, 674, 675, 676, 678, 684, 685, 686, 700, 721, 800, 808, 822, 841, 861, 912, 921, 1004, 1005, 1009, 1010, 1012, 1015, 1019, 1032, 1040, 1057], "500": [49, 79, 85, 92, 95, 96, 98, 117, 118, 130, 132, 141, 143, 151, 171, 174, 195, 230, 231, 238, 255, 256, 260, 261, 265, 269, 275, 278, 288, 289, 296, 302, 308, 320, 326, 331, 332, 350, 355, 370, 422, 428, 476, 477, 481, 482, 483, 488, 489, 490, 491, 619, 621, 622, 624, 629, 632, 633, 658, 659, 662, 663, 664, 688, 690, 691, 870, 998, 1024], "5000": [91, 203, 232, 233, 235, 327, 893], "50000": 61, "500000": 312, "5000000": 55, "50000000": 177, "50000013": 1005, "500526": 153, "500x500": 549, "5012": 1046, "5016": [417, 428, 482], "5029": [417, 428, 482], "503": [191, 1030], "503452": 312, "5036": 1047, "504185": 312, "50447799": 1010, "505": 837, "507": 416, "50755672": 473, "507943": 278, "5082": 1029, "50941682": 1010, "50_000": [323, 358], "50sampl": 403, "51": [47, 61, 121, 179, 235, 293, 296, 415, 416, 774, 784, 789, 1005, 1036], "51082562": 598, "512": [216, 288, 1030], "512281": 265, "512595": 312, "51292546": 620, "513": [861, 1012], "513034": 312, "5131": [46, 1045], "51341712": 1007, "5141": 1046, "51462041": 857, "5149": 46, "515": [43, 244, 1030], "515390": 389, "516": [265, 1030], "5166": 681, "5166646": 772, "517": [47, 266, 459, 469, 1030], "517272": 265, "5182": 1045, "5186": 1045, "519": [355, 1030], "5193": 46, "51958": 179, "51963999": 113, "52": [43, 47, 179, 217, 539, 641, 805, 955, 1040], "520": [636, 861, 999, 1012], "52003279": 1010, "5208": 206, "521": 121, "52106591": 133, "5211": 1047, "5212": 206, "522": [359, 913, 1030], "5224167": 52, "5229": 1047, "523": [183, 532], "524": 52, "5243": 423, "52433293": 423, "5244": 206, "525": [181, 446, 636, 999, 1030], "5251": 1046, "526": 912, "526599": 206, "527": [269, 1030], "5279": 1047, "5282": 1045, "52875032": 669, "5289": 46, "5291": 1046, "5295": 1047, "52955942": 857, "5299": 1046, "53": [43, 88, 254, 415, 422, 543, 549, 554, 800, 801], "531": [58, 1030], "5315170": 52, "5316": 357, "532": [241, 1030], "53284267": 258, "532843": 258, "533": 190, "5337": 1045, "534": 190, "535": [208, 1030], "5355": 1045, "5359": 1047, "536": [179, 296], "5360": 1045, "53777511": 52, "53844117956": 772, "5395559": 232, "53959628e": 199, "54": [143, 172, 195, 202, 217, 220, 254, 378, 380, 415, 498, 1030, 1041, 1042], "540": [118, 1030], "54035582": 772, "541": [459, 469], "5415": 1006, "5417": 235, "542": [172, 380], "5420": 552, "542052": 206, "54209": 163, "5425": 532, "543": 202, "5431": 1045, "543841": 206, "544": [54, 250], "54434690031882": 107, "54488318": 392, "545": [63, 157, 1030], "546": [101, 155, 1030], "5460": 1046, "546068": 258, "54606834": 258, "54675220": 52, "5469": 380, "547": 365, "5488135": 392, "549": 63, "5495": 1045, "54980": 549, "55": [121, 126, 190, 195, 212, 217, 235, 239, 336, 388, 415, 419, 498, 605, 808, 814, 822, 836, 1009, 1040], "5500": [330, 696, 1006], "550213": 206, "551": 359, "55102041": 456, "5515": 754, "552": 1009, "55212743": 366, "5523": 1029, "55249": 605, "553": [218, 1030], "55390036": 133, "554": [225, 233, 313], "5540": 1046, "55422893": 423, "555": [232, 724, 1030], "5555555555555556": 283, "5557": 278, "5558": 46, "556": [336, 1030], "557": [346, 1030], "55800226": 232, "559": 624, "5591": [697, 701, 1006], "55968825": 654, "56": [43, 235, 248, 339, 389, 654, 655, 660, 668, 669, 670, 689, 721, 743, 1009, 1019, 1036, 1040], "560": [217, 525, 526], "561": 415, "561464362648773": 95, "564": 217, "56479934": 366, "56485654": 133, "565": 275, "566": 217, "569": [172, 338, 380, 508, 600, 603, 604, 606], "5697": 1047, "56b4e9": 260, "57": [174, 190, 233, 284, 314, 380, 381, 401, 407, 408, 416, 713, 769, 789, 845, 1009, 1019, 1040], "570": [172, 326, 380, 1030], "570655": 206, "571": [309, 1030], "5713": 671, "57142857": 729, "573": 423, "5732": 1047, "57320793": 423, "573491": 206, "574": [93, 542, 549], "5748": 502, "5749": [378, 501, 502], "575": [104, 217], "5762": 1046, "576989": 258, "577": [172, 380], "578": [128, 1030], "579": [112, 532, 1030], "58": [52, 101, 112, 126, 380, 417, 428, 482, 615, 772, 1019], "580": [358, 852, 853], "5804131": 133, "5805": 1046, "5807": 1012, "581": 195, "581012": [378, 498], "5814": 1047, "58149261": 423, "58195950e": 199, "582": 913, "5828": [378, 501, 502], "583": 415, "5833": [746, 1009], "583333315172": 52, "58364548": 1007, "5853": 1029, "5857": 1045, "5863": 389, "58667835e": 199, "586798": 206, "5871": 687, "5874": 1046, "5882004012129721": 95, "589715": 206, "59": [43, 195, 202, 235, 380, 389, 415, 416, 518, 830, 1009, 1036, 1040], "59122734": 675, "592": [619, 622, 633, 1016], "592373": 330, "5925110": 52, "5929": 1046, "593": 141, "594": [183, 217], "594754": 206, "59489497": 232, "595": [163, 217, 1030], "5956": 1048, "596": 724, "5960": 232, "5963": 1050, "597": [191, 217], "598": [93, 130, 175, 549], "5981": 552, "598533": 206, "599": 688, "5991": 1047, "5_000": 195, "5a": 892, "5d": 47, "5e": [44, 123, 205, 603, 604, 606], "5e5": 217, "5f": [163, 329], "5m": 55, "5n_": 114, "5th": [52, 150, 153, 182, 415], "5x": 1057, "6": [0, 43, 47, 48, 49, 50, 51, 52, 57, 63, 64, 67, 68, 75, 79, 81, 84, 85, 87, 91, 92, 95, 96, 97, 98, 99, 100, 102, 107, 108, 109, 111, 112, 113, 115, 117, 120, 123, 125, 132, 138, 146, 150, 151, 153, 155, 157, 163, 167, 172, 174, 177, 179, 180, 181, 182, 183, 185, 186, 190, 191, 193, 195, 197, 198, 199, 202, 206, 210, 215, 217, 218, 219, 221, 231, 232, 235, 237, 238, 241, 244, 247, 248, 252, 255, 256, 260, 261, 262, 263, 265, 266, 268, 269, 270, 274, 275, 276, 277, 278, 283, 284, 285, 286, 287, 288, 291, 295, 298, 301, 309, 311, 313, 314, 316, 318, 320, 321, 323, 325, 328, 329, 330, 331, 332, 333, 335, 336, 339, 340, 346, 347, 349, 351, 353, 355, 357, 358, 359, 364, 365, 366, 377, 378, 380, 381, 383, 385, 387, 388, 389, 396, 401, 407, 408, 413, 415, 416, 419, 420, 422, 423, 424, 430, 435, 442, 449, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 472, 489, 490, 491, 492, 497, 499, 504, 513, 525, 532, 535, 538, 546, 548, 549, 553, 555, 561, 569, 570, 571, 575, 576, 577, 578, 601, 602, 610, 612, 613, 614, 616, 619, 622, 623, 633, 635, 636, 638, 644, 645, 652, 653, 687, 697, 701, 707, 719, 724, 729, 736, 746, 750, 753, 754, 758, 759, 761, 777, 786, 793, 796, 798, 805, 806, 807, 809, 810, 815, 817, 818, 820, 825, 826, 829, 833, 834, 835, 836, 837, 838, 839, 847, 848, 849, 851, 852, 853, 860, 862, 863, 864, 879, 880, 882, 885, 887, 890, 891, 895, 896, 909, 927, 934, 936, 938, 939, 950, 951, 955, 956, 957, 959, 962, 963, 971, 983, 986, 994, 997, 998, 999, 1003, 1005, 1006, 1009, 1019, 1020, 1023, 1024, 1025, 1032, 1036, 1038, 1041, 1042, 1043, 1046, 1048, 1053, 1057, 1058], "60": [43, 45, 94, 107, 115, 217, 229, 235, 237, 238, 258, 263, 283, 288, 336, 349, 357, 377, 415, 419, 457, 464, 721, 808, 1009, 1019, 1040, 1043], "600": [63, 85, 93, 148, 157, 158, 378, 688], "6000": [314, 635], "601052": 312, "601707": 206, "60244657": 857, "60276338": 392, "603": [98, 172, 455], "604": [130, 549], "605": [291, 1030], "606": [621, 842, 1010], "607": 359, "6072758064261095": 174, "607752": 150, "60809415": 670, "60834549": 92, "60836363e": 199, "609": [183, 389], "61": [52, 114, 191, 235, 377, 380, 389, 416, 465, 549, 568, 654, 655, 660, 668, 669, 670, 689, 721, 830, 957], "6101": 1047, "611": [273, 275, 359, 549], "6114": 835, "6114326": 217, "6114327": 217, "6114328": 217, "6114329": 217, "6114330": 217, "611676": 206, "612": 798, "6121": 1046, "6126": 1047, "6147": 1045, "615": [83, 150, 1030], "615373": 190, "616": [104, 849, 1011, 1019, 1030], "61611719": 177, "617": [93, 278, 359, 415, 777], "617050e": 235, "6173": 1046, "617715": 150, "6178": 1046, "618": [93, 273], "6181": 1047, "6182": 1046, "618263": 206, "619": [98, 455], "619052": 378, "61958": 179, "6196": [278, 1045], "6198": 754, "62": [47, 52, 191, 195, 235, 268, 330, 336, 366, 378, 501, 502, 852, 853, 1036, 1043], "620": 506, "621": [93, 777], "621645": 206, "622": [93, 299, 549, 1030], "62241605": 202, "622811": 150, "623": [849, 1011], "6231": 1029, "6237": 235, "624": 1016, "625": [88, 217, 626, 716], "6250": 1047, "6258": 1045, "626": [84, 203], "6261": 1049, "626286": 206, "62717609": 232, "62722912": 52, "62745778": 1010, "628": 358, "6282": 1046, "6284": 1029, "6288": 1047, "6291456": 88, "63": [45, 47, 269, 380, 422, 565, 566, 573, 574, 654, 655, 660, 668, 669, 670, 689, 707, 734, 808, 822, 830, 922, 923, 1009], "630": 732, "63035731": 423, "630382": 330, "6312": 52, "632": 322, "6323": 1029, "6331": 43, "6332": 43, "63327171": 202, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 323, "63394388": 202, "635": [43, 301, 624, 1030], "636": [202, 389], "63667341": 92, "6371000": 772, "6374": 1048, "6375861597263857": 954, "638": [358, 389], "638768": 89, "638843": 312, "63bit": 1051, "64": [43, 52, 68, 83, 88, 93, 123, 179, 190, 238, 248, 249, 253, 273, 284, 300, 305, 370, 371, 380, 381, 389, 397, 401, 416, 420, 427, 503, 506, 510, 607, 608, 654, 666, 696, 697, 698, 699, 701, 913, 1012, 1036, 1040, 1042, 1048, 1049, 1052, 1053, 1054, 1057], "640": [413, 497, 514, 515, 591, 592, 595, 998], "640000e": 235, "640770e": 235, "640880e": 235, "641": [234, 1030], "64185414": 674, "64236448": 544, "6424": 1029, "6425": 1029, "643": 273, "644": 339, "6440": 232, "64447187": 88, "645": [93, 100, 1030], "6451": 1029, "6452": 1048, "646": 182, "6463": 1049, "647": 93, "6472": 1046, "6476": 532, "647689": 206, "648026": 150, "6497": 1046, "64_conda": 391, "64bit": 1040, "64x64": [123, 378, 420], "65": [43, 69, 191, 217, 284, 322, 415, 446, 510, 525, 605, 707, 749, 800, 801, 830, 1016, 1040, 1041, 1042], "650": 413, "6505186632729437": 95, "6507": 1047, "651": 389, "652": 358, "652739": 206, "653": [389, 619, 622, 633], "6545": 1052, "656": [263, 378, 1030], "6560362663398502": 326, "6567": 859, "657": [258, 275], "6572": 859, "6573": 1047, "65799352e": 199, "658": 118, "6586": 1046, "659": [53, 1030], "6599": 1029, "65e": 203, "66": [43, 241, 322, 357, 380, 415, 432, 468, 540, 640, 720, 791, 792, 803, 891, 899, 990, 1009, 1021], "660": 258, "660797": 258, "661086": 278, "6624": 1052, "662409": 206, "663": [906, 1017, 1021], "664": [172, 380], "665": 43, "6650": 52, "6651": 1046, "666": [149, 177, 415, 854, 999, 1030], "6660": 1046, "6666": [746, 1009, 1046], "66666667": [737, 790, 862, 1019], "666667315174": 52, "6667": 1046, "66670169e": 199, "667": [93, 728, 748, 1009, 1030], "667219": 150, "6689": 1048, "669": [114, 1030], "6691": 1046, "6697": 1046, "669930e": 235, "67": [101, 190, 232, 235, 380, 506, 524, 525, 526, 635, 675, 721, 822, 999, 1009, 1023, 1036, 1040], "670": [219, 269], "671": 1021, "6715": 1029, "672": [275, 1030], "67251877": 674, "673": [118, 358, 389], "674": [302, 1030], "67443065": 133, "67451144e": 199, "675": [174, 358], "675318": 89, "676": 677, "6764": 1046, "678": 191, "678008": 217, "678009": 217, "678010": 217, "678011": 217, "678012": 217, "678013": [217, 235], "678359": 206, "679": [219, 316, 912, 1030], "68": [43, 208, 239, 314, 335, 415, 485, 543, 549, 598, 693, 694, 1040], "681": [93, 237, 389, 1030], "6817": 1046, "682": 389, "6821": 47, "682880e": 235, "683980e": 235, "684": [105, 113], "6846": 1046, "6848": 1049, "685": [728, 748, 1009], "6852": 275, "6860": 149, "687": [197, 1021, 1030], "6875": 724, "688": 113, "689015": 312, "689143": 312, "689751": 312, "69": [45, 208, 269, 283, 321, 336, 415, 478, 479, 615, 616, 764, 1009, 1019], "690": 219, "6902": 1046, "691": 729, "6913": 1046, "692": 137, "692270e": 235, "692470": 312, "6929": 1029, "692901": 150, "693": 1009, "6931": 876, "69314718": [425, 620, 1019], "695": 273, "69513": 93, "6954": 1046, "69545": 93, "695740e": 235, "696": [319, 1030], "697": 183, "69735": 93, "698": [93, 269], "6984743": 177, "69892343": 221, "699": [274, 1030], "699691": 378, "69e": 183, "6d": 47, "6f": [55, 127, 280, 745, 803], "6ppm": 179, "6th": 182, "7": [1, 2, 43, 45, 51, 52, 53, 54, 63, 66, 68, 69, 70, 74, 77, 79, 81, 88, 89, 90, 91, 95, 99, 100, 102, 105, 106, 108, 113, 115, 123, 126, 137, 140, 150, 153, 154, 158, 159, 172, 183, 189, 190, 191, 193, 195, 199, 200, 216, 217, 218, 219, 235, 237, 244, 248, 249, 250, 256, 258, 260, 261, 264, 265, 269, 270, 275, 279, 280, 281, 282, 286, 288, 293, 295, 296, 298, 301, 302, 304, 313, 314, 316, 320, 325, 328, 329, 330, 332, 335, 336, 338, 339, 343, 350, 353, 354, 358, 359, 366, 378, 380, 381, 388, 389, 401, 407, 408, 413, 419, 420, 422, 423, 424, 426, 427, 430, 446, 451, 452, 455, 457, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 474, 478, 479, 489, 490, 491, 492, 498, 504, 506, 540, 541, 542, 543, 544, 546, 548, 552, 569, 570, 596, 599, 608, 613, 614, 635, 636, 638, 645, 654, 655, 657, 660, 666, 667, 668, 669, 670, 681, 683, 689, 690, 691, 700, 707, 715, 717, 729, 731, 732, 734, 736, 752, 753, 754, 758, 759, 761, 790, 793, 798, 799, 802, 805, 807, 808, 809, 810, 811, 812, 815, 818, 822, 825, 826, 829, 835, 838, 842, 852, 853, 861, 870, 871, 872, 877, 884, 885, 907, 908, 955, 956, 959, 960, 963, 972, 977, 998, 999, 1004, 1005, 1007, 1009, 1010, 1012, 1013, 1015, 1019, 1023, 1024, 1036, 1038, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1053, 1058], "70": [43, 45, 50, 101, 105, 107, 137, 191, 254, 260, 275, 336, 378, 380, 419, 501, 502, 690, 691, 721, 734, 764, 808, 822, 899, 998, 1019], "700": [85, 269, 327], "7000": 235, "701": 93, "702266": 206, "703": [43, 413, 521, 1030], "70359377": 202, "704": [139, 141, 159, 357, 1030], "70432034": 117, "7049": 1046, "7049787496083262": 95, "706026": 206, "707": [183, 219, 888, 900, 1030], "7071": 1048, "70763101": 88, "708": [546, 548, 555, 758], "70814003": 366, "7083": 1009, "708333315174": 52, "7089": 1047, "709": 276, "70x": 1057, "71": [43, 172, 221, 235, 380, 518, 738, 744, 774, 784, 1009, 1036, 1042], "710": 413, "7101": 1046, "712": [183, 185, 1030], "714": 327, "71518937": 392, "7152": 1046, "7154": 1046, "715413": 150, "7159": 1046, "716": 521, "7187": 1046, "718747": 206, "7194": 1046, "72": [43, 45, 46, 47, 52, 143, 177, 239, 388, 830, 836], "720": [284, 1030], "7200": 657, "721": [546, 548, 555], "722128e": 235, "72295655": 117, "723": [93, 248, 250], "723665": 289, "7239": 1046, "7242": 1029, "724702": 278, "7248": 1046, "7256": 643, "726": 1017, "7260": 1046, "7261": 1046, "726573": 190, "72667194": 1010, "727148206404819": 283, "72850319": 1010, "7295": 1046, "7298221281347037": 43, "73": [47, 279, 336, 396, 488, 744, 808, 822, 858, 921, 1019, 1040, 1042], "7301": 1046, "730119e": 235, "731249e": 235, "7313": 46, "73153": 389, "732": 219, "7321432711315247203224138160467097": 52, "7323": 1046, "7325": 1046, "732913": 289, "733": 296, "7331": 1047, "7332": 916, "7350": 1046, "7353": 1046, "7356": 1047, "736": [142, 1030], "7365": 1047, "73654189": 52, "737": [250, 532], "7376": 1047, "738": 327, "7382": 1029, "7387": 483, "7388": 1047, "739865e": 235, "739950": 289, "74": [43, 233, 335, 336, 380, 598, 702, 808, 822, 891, 1036], "7411": [476, 481, 1046], "7419": 1046, "742": 359, "743": [191, 255, 273, 1030], "74310541": 177, "7436926291700353": 212, "744": [273, 277, 296, 1030], "744029": 289, "744042e": 235, "7441": 1047, "744497e": 235, "74495357": 202, "7459": 1047, "746": 380, "7464": 1047, "746492": 275, "748": [357, 389], "7490": [1046, 1047], "75": [43, 45, 46, 49, 52, 69, 79, 90, 115, 140, 169, 181, 182, 186, 190, 195, 197, 200, 208, 224, 235, 258, 262, 263, 269, 275, 284, 288, 301, 316, 328, 355, 357, 366, 456, 509, 559, 645, 666, 702, 714, 720, 742, 747, 748, 753, 761, 764, 802, 808, 890, 898, 902, 909, 925, 943, 944, 989, 1009, 1011, 1019, 1025, 1027, 1042], "750": [84, 90, 145, 275, 333, 1030], "75000": 217, "7501": 1047, "750348": 150, "750389": 206, "7506": 1047, "752": 357, "752470": 289, "752867": 206, "753": 73, "7532": 496, "7533": [428, 482, 1047], "75474165": 1010, "7548": 1047, "7548291": 332, "7553": 1046, "7565": 1047, "756687e": 235, "7567": 1047, "756746e": 235, "7569": 477, "757": [172, 195, 273, 296, 380, 1030], "7573": 1047, "75747153": 221, "7578": [278, 1047], "75788833": 169, "757915": 289, "758": 357, "759": 296, "7593": 1046, "7594": 1046, "75949622": 221, "75th": [254, 890], "76": [43, 195, 217, 336, 357, 366, 380, 389, 785, 789, 872], "760": [43, 153, 358], "7608": 1029, "76195467e": 199, "7621951219512195": 258, "7632": 1046, "7638": 1005, "764": [729, 1009], "7646": 1029, "764779": 206, "765012": 330, "7655": 1047, "765671": 206, "7660": 1046, "7661": 1047, "7668": 1048, "767": 191, "7674": [532, 1047], "767498": 150, "7676": 1046, "768": 88, "7680": 1046, "76823": 45, "7685": 1047, "769": 296, "76995": 378, "77": [43, 45, 79, 172, 195, 284, 336, 377, 380, 542, 715, 744, 783, 830], "77000": 217, "7702": 1047, "770926": 289, "772": [357, 731], "7721": 1047, "7723": 1047, "7724": 1046, "773": [275, 339, 656, 850], "77310": 378, "7732": 1046, "77322639": 117, "7738": 1048, "7739": 1047, "77426368": 51, "775": 57, "7750": 1046, "775047": 684, "775151": 684, "7756": 1046, "77630514": 423, "7768366": 1007, "777": 389, "7771": 1047, "77764": 411, "77777215": 117, "7786": 1046, "779": 357, "7794": 1047, "779751": 289, "7798": 916, "7799": 1046, "78": [43, 88, 195, 235, 254, 284, 318, 336, 501, 502, 654, 655, 660, 661, 663, 668, 669, 670, 672, 673, 689, 693, 694, 808, 814, 830, 836, 1009, 1029], "780": [253, 273, 1030], "7812": 1047, "781265": [378, 505], "7814": 1047, "7816": 52, "7819": [415, 1047], "7823": [1047, 1048], "7825": 1047, "7825594": 51, "7826": 380, "782755": 62, "7831": 357, "783149": 105, "7833": 482, "783392": 275, "7838": 1047, "784": 313, "7840": 89, "7849": 1047, "785063": 105, "78571427112143152472031331383346104": 52, "786": [54, 88, 105, 199, 1030], "786015": 105, "7863": 1047, "786432": 88, "78681467": 88, "787": 203, "7872": 1047, "7880": 1047, "7887550": 52, "788808": 330, "789": [168, 422], "7894": [906, 1021], "79": [43, 45, 66, 68, 113, 114, 121, 126, 172, 195, 314, 336, 380, 388, 417, 481, 532, 605, 702, 830, 850, 1040, 1042], "790": [43, 104, 281, 1030], "7906": [630, 657], "79064206": 618, "79084103": 366, "791": 183, "7914": 1047, "791667315161908911936472223112": 52, "79269019073225": 300, "7927845601690917": 323, "7929": [358, 1047], "7943": 1050, "7944": 1047, "7946": 1046, "795": 656, "7954": 1047, "796": 150, "7970": 1047, "7971": 671, "7972": 562, "79769376": 117, "798": [105, 191, 422], "7983": 1047, "798301": 258, "7986": 1047, "7986499491396734": 174, "798982054": 1009, "799": [183, 273, 358, 1030], "7990": 1047, "7998": 1047, "7_qbz5n2kfra8p0": 401, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 67, 68, 70, 72, 78, 79, 80, 83, 85, 88, 90, 95, 97, 99, 100, 104, 106, 108, 109, 114, 117, 120, 121, 123, 124, 126, 127, 128, 131, 133, 137, 140, 142, 143, 147, 149, 150, 152, 156, 159, 160, 163, 171, 172, 175, 177, 179, 180, 182, 183, 186, 189, 190, 191, 193, 195, 197, 198, 203, 205, 208, 211, 217, 218, 221, 225, 227, 233, 235, 237, 238, 239, 241, 242, 245, 249, 250, 252, 256, 257, 258, 260, 261, 262, 264, 265, 266, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 282, 285, 286, 293, 295, 298, 300, 304, 308, 311, 313, 314, 316, 318, 319, 320, 321, 322, 325, 330, 335, 336, 337, 339, 340, 343, 346, 350, 351, 352, 353, 354, 357, 358, 359, 364, 366, 371, 377, 378, 379, 380, 381, 383, 388, 389, 401, 409, 413, 415, 419, 420, 422, 423, 424, 426, 428, 446, 449, 450, 451, 454, 456, 457, 459, 462, 463, 464, 469, 470, 476, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 491, 492, 494, 497, 504, 506, 510, 511, 522, 524, 539, 542, 546, 548, 551, 553, 555, 557, 558, 563, 564, 573, 578, 590, 596, 597, 598, 599, 612, 613, 636, 637, 644, 645, 656, 666, 678, 684, 687, 697, 700, 701, 702, 703, 707, 710, 714, 715, 717, 718, 723, 729, 735, 736, 737, 749, 753, 754, 758, 759, 761, 786, 790, 791, 793, 796, 797, 798, 799, 803, 805, 807, 809, 810, 815, 818, 825, 826, 829, 830, 831, 836, 838, 839, 841, 850, 852, 853, 859, 869, 870, 871, 877, 884, 891, 893, 909, 914, 917, 936, 938, 939, 954, 955, 956, 960, 977, 983, 984, 985, 986, 987, 988, 989, 998, 999, 1005, 1006, 1007, 1009, 1012, 1017, 1019, 1023, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1047, 1048, 1053, 1054, 1056, 1059], "80": [43, 45, 50, 64, 102, 114, 158, 165, 169, 180, 191, 197, 252, 318, 322, 335, 349, 351, 357, 363, 366, 378, 380, 383, 413, 419, 424, 426, 451, 486, 518, 549, 721, 808, 822, 830, 893, 906, 925, 998, 1004, 1005, 1009, 1016, 1022, 1025], "800": [85, 328, 378, 592, 700], "8000": [235, 278, 279], "800000011920929": 365, "8000184677460305": 323, "8002": 1047, "8003": 1048, "8005": 1047, "8006": 1047, "8010": 1047, "801770e": 235, "802": [46, 172, 380], "8022": [46, 480, 1049], "802601": 206, "8028": 1047, "803483": 150, "803882e": 235, "8040": 1046, "804414": [378, 505], "805": 219, "8053": 1047, "8059798": 202, "806": 657, "8061": 1047, "8065": 1047, "8066": 1048, "8068": 1047, "807": [273, 275], "8075": 1048, "8086": [627, 1047], "8087": 1047, "8093": 1047, "8094": 1047, "80956739": 1010, "80_000": 142, "81": [43, 85, 258, 335, 336, 415, 707, 769, 796, 808, 822, 839, 1009, 1010, 1012, 1019], "810": [192, 837], "8100": 1029, "8102": 1048, "810596": 378, "8117": 1047, "812": [74, 1030], "8120": 1047, "8125": 729, "812526": 206, "8129": 1048, "8133333333333334": 307, "81355169": 423, "8137": 1047, "8139": 1047, "814": 192, "815476315189119122164721021826110": 52, "8157": 1029, "8159": 1047, "816": [276, 478, 479], "8160": 1047, "8174": 1047, "817724": 206, "8181": 1047, "819": 423, "8190": 1048, "81940995": 423, "8198": 1047, "82": [43, 66, 88, 93, 146, 169, 220, 307, 335, 796, 808, 822, 955, 1009, 1012, 1040], "820": [43, 52, 852, 853], "820705": 206, "8216": 1049, "822": 798, "822097": 190, "8224": 1047, "8225220806196525": 212, "823": 296, "8243": 1029, "825": 758, "8251": 1047, "8253": 233, "8259": 1047, "827917": 150, "828": [97, 235, 296, 1030], "8282": 1047, "829": [318, 1030], "829429": 265, "8295": 1047, "83": [45, 66, 70, 74, 335, 380, 702, 715, 794, 928, 1004, 1009, 1043], "830000": 312, "8306": 1047, "8316": 1047, "832": [192, 422, 563, 564], "83236428": 423, "83281226": [852, 853], "8333": 506, "83333": 772, "833333": 190, "8335": 1047, "834": 339, "834310": 206, "8344": 1047, "8345": 605, "8353": 46, "8354": [630, 1047], "83548752": 618, "8355": 1046, "8361": 1048, "836224": 62, "8363": 1047, "8370": 1029, "8377": 1047, "83816048": 654, "83822343": 1007, "83833": 389, "8387": 843, "839": 688, "84": [43, 45, 104, 169, 208, 235, 318, 335, 366, 380, 422, 423, 796, 822, 1009, 1019], "840": 389, "84000": 217, "840000": 312, "8407": 104, "84077985": 202, "841": 105, "84127814": 674, "84253": 1010, "843": [221, 362, 1030], "844": [422, 563, 564], "8446": 1047, "8449": 1047, "847222222222214": 212, "8473": 423, "8478": 1049, "8480": 1029, "8481": 1047, "8484": 1048, "848743": 62, "849835": 89, "85": [45, 55, 68, 85, 90, 104, 126, 169, 232, 235, 286, 314, 336, 366, 422, 446, 506, 508, 563, 564, 605, 660, 666, 753, 761, 796, 808, 836, 1009, 1010, 1040], "850": [126, 305, 1030], "850000": 312, "850031": 206, "8508": 1049, "851": 275, "8512": 1047, "8513": 627, "851348": 62, "8515": [423, 1047], "85151335": 423, "851792": 62, "852": [314, 1030], "85253229": 92, "852774": 150, "853174": 62, "853846": 206, "854": 273, "85418642": 366, "8549": 1047, "855": [47, 304, 1030], "8554": 1048, "855465": 312, "857": [276, 358], "857400": 62, "858486250088675": 323, "85857475": 133, "8586": 1047, "859007": 62, "8591": 1047, "86": [52, 68, 104, 169, 208, 318, 335, 336, 414, 796, 920, 1009], "860000": 312, "861": [172, 380, 796, 797, 1009], "861053": 62, "861106": 62, "8614": 1029, "861533": 62, "8617": 1048, "861868": 62, "8626621": 332, "8628": 643, "8640": 191, "865400": 62, "866": 1017, "866161": 62, "866571": 62, "867": 108, "8672": 1047, "8676": [628, 1047], "8678": 631, "868": [150, 168], "868443": 50, "8698": 1047, "87": [45, 68, 104, 183, 269, 273, 336, 605, 675, 785, 796, 808, 830, 888, 900, 1009], "870": [172, 380], "871": [73, 113, 114, 417, 481], "871277": 62, "871965": 62, "872": [73, 1017], "8720": [564, 1048], "872186": 62, "873": [172, 380], "873724": 62, "87382323": 670, "874": [107, 796, 797, 1009], "87421f": 121, "874771": 150, "875": [88, 175, 677], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 177, "8768": 1047, "8769": 1049, "877": [47, 273], "877206": 273, "8773": 1049, "877981": 62, "878": 47, "878051": 206, "878964": 820, "87mb": 357, "88": [43, 45, 68, 208, 221, 274, 314, 333, 335, 336, 361, 378, 380, 383, 414, 417, 480, 654, 655, 660, 668, 669, 670, 689, 872, 955, 1040], "880": 43, "880191": 206, "880298": 206, "88089948": 423, "88096009": 133, "882": [275, 311, 1030], "88213": 378, "882561": 275, "883": 84, "883065": 62, "8833": 506, "8835": 1047, "884": 296, "8845": 1047, "885": [47, 172, 339, 380], "8854": 1047, "8874": 1047, "8878": 843, "8880": 628, "8881": 631, "889": [273, 444], "88978285": 1010, "89": [43, 68, 179, 208, 239, 335, 336, 991, 1004, 1009, 1019, 1040, 1043, 1051], "890": [273, 321, 1030], "891": 47, "8922": 1047, "893055": 206, "8931": 1047, "8936": 1047, "894": [64, 81, 1030], "894264": 258, "8947": 922, "8948018": 52, "89483932": 1007, "8948621": 1010, "896": 656, "8963": 278, "8965": 422, "8973": 1047, "89856": 820, "899": [68, 273], "8992": 1047, "8995": 1047, "8pt": 1019, "8x8": [68, 208, 248, 305, 314, 380, 510], "9": [43, 46, 47, 48, 51, 52, 53, 61, 63, 64, 67, 68, 70, 77, 79, 85, 90, 93, 97, 99, 108, 115, 117, 146, 147, 149, 150, 151, 156, 158, 164, 165, 172, 177, 181, 186, 189, 190, 191, 193, 199, 200, 208, 217, 224, 230, 231, 234, 235, 237, 240, 248, 249, 258, 260, 261, 262, 263, 268, 269, 273, 278, 282, 284, 295, 298, 300, 301, 304, 305, 306, 311, 312, 314, 316, 318, 319, 320, 322, 323, 325, 330, 331, 333, 335, 336, 338, 339, 340, 346, 350, 355, 357, 366, 380, 381, 389, 396, 401, 407, 408, 413, 414, 416, 417, 419, 422, 423, 446, 450, 457, 464, 470, 489, 490, 491, 492, 497, 504, 506, 524, 526, 528, 535, 542, 546, 547, 548, 555, 568, 575, 578, 591, 599, 612, 613, 615, 616, 635, 638, 642, 645, 647, 654, 655, 660, 666, 668, 669, 670, 689, 690, 691, 695, 700, 707, 717, 731, 734, 749, 756, 777, 786, 787, 788, 805, 807, 809, 811, 812, 826, 829, 830, 836, 838, 841, 849, 850, 854, 855, 860, 863, 869, 870, 878, 884, 887, 955, 956, 960, 981, 998, 1004, 1005, 1009, 1013, 1019, 1023, 1024, 1036, 1038, 1041, 1042, 1043, 1045, 1054, 1056], "90": [45, 49, 52, 54, 68, 108, 132, 133, 149, 150, 151, 153, 169, 179, 193, 198, 208, 214, 216, 219, 224, 235, 254, 260, 284, 286, 318, 322, 331, 335, 336, 366, 370, 383, 389, 419, 571, 789, 808, 836, 841, 893, 1004, 1009, 1036, 1055, 1056], "900": [47, 85, 108, 109], "9000": 235, "900000e": 235, "9010": 1046, "9012": 1048, "9015": [671, 1048], "9019": 1047, "9022": 1047, "9024": 1047, "9026666666666666": 150, "903": 47, "904": [191, 273, 416], "9041": 1048, "9043": 1048, "9044": [275, 1047], "90453403": 473, "904556e": 235, "904558e": 235, "904747e": 235, "904751e": 235, "905": 273, "905206": 89, "9067": 1047, "9069": 1049, "907": [87, 1030], "9078": 1047, "908": 1009, "90809432": 133, "9085": 1048, "9087": 1054, "90885631": 88, "909": 47, "909293": 312, "909909": 150, "91": [45, 68, 86, 179, 314, 335, 336, 422, 1004, 1036], "910": 43, "9100": 1047, "9101": 1048, "9105": 1047, "9108": 1047, "912": [73, 357, 1030], "912632": 312, "913": [422, 567], "914370e": 235, "914387e": 235, "9144057": 52, "9145": 1047, "914538e": 235, "914573e": 235, "9147": 1048, "9149": 1046, "915": 47, "9151": 1048, "9157": 1048, "916": [84, 165, 1030], "91629073": 598, "916555e": 235, "9167": 330, "917": [84, 365], "917281": 150, "9173": 1029, "917618e": 235, "919": [69, 123, 269, 1030], "92": [47, 52, 68, 85, 126, 169, 195, 273, 314, 335, 336, 346, 378, 380, 546, 548, 555, 570, 605, 704, 808, 822, 830, 1004], "9202": 151, "9206": 1047, "921": [340, 1030], "9219": 1047, "9221": 657, "9222": 1048, "9226260871125187": 283, "923223": 820, "92329566": 133, "9234": 1048, "9239": 1047, "924": 47, "92461872": 131, "925": 1009, "9250": 1050, "92529176": 1010, "9257": 1048, "9259": 1047, "9266666666666666": 146, "927": 444, "9274": 1050, "9277": 1047, "9278": 1047, "928": [114, 248, 444, 1030], "9281695902015243": 332, "9284": 1047, "928571": 235, "9288": 1050, "9289": 1047, "93": [45, 47, 68, 172, 217, 258, 273, 336, 357, 380, 654, 655, 660, 668, 669, 670, 689, 785, 796, 808, 830, 836, 920, 1004, 1009], "9300": 275, "930000": 312, "9302": 1047, "9304": 1048, "932": 47, "9326": 1029, "93271427": 177, "933": [47, 106, 108, 419, 1030], "933197": 258, "933253": 150, "9333": 419, "933333": [164, 861], "935": [130, 1030, 1047], "9354": 1048, "936": [47, 444, 1009], "936480": 62, "9372": 1048, "937443": 62, "937532": 62, "937597": 62, "9378": 1048, "938": [47, 91, 213, 793, 1009, 1030], "938613": 62, "939": 676, "9399": 1048, "93fletcher": 1005, "93goldfarb": 1005, "93lindenstrauss_lemma": 906, "93shanno_algorithm": 1005, "94": [43, 68, 70, 89, 125, 146, 216, 252, 288, 318, 335, 336, 414, 422, 671, 796, 830, 1004, 1009, 1010, 1019, 1040], "940": 43, "9400": 275, "940000": 312, "940184": 150, "940201": 62, "940374": 62, "9403917": 117, "941": 47, "94114649": [852, 853], "9416": 52, "9417": 679, "9431": 843, "944": 47, "9456": 1048, "94592424": 670, "946": 114, "94731329": 675, "9473684210526315": 325, "947958": 998, "948": [295, 793, 1009, 1030], "9484": 1048, "949": 47, "9490": 380, "9492": 1048, "9497": 1048, "9499": 646, "95": [45, 52, 54, 68, 79, 87, 92, 102, 129, 146, 150, 153, 181, 190, 197, 217, 219, 224, 235, 262, 263, 266, 275, 276, 301, 309, 318, 322, 329, 336, 346, 366, 422, 535, 640, 641, 644, 655, 669, 756, 830, 909, 1005, 1009, 1010, 1022, 1043], "950": 47, "950000047683716": 365, "9502547": 202, "9507": 1047, "9515": 1048, "951751e": 235, "951958": 998, "952": [47, 84], "9521": 1048, "952289": 206, "9524": 1048, "953": [47, 84], "953061": 313, "95373": 378, "954": [888, 900], "95433992": 117, "955": [296, 419, 662], "9558": 1047, "955989": 998, "955mb": 357, "956": 47, "956038": 312, "9565": 380, "9569": 1048, "957": [47, 321, 354, 736, 1009, 1030], "9579": 1048, "958": 47, "9583": 414, "9584": [635, 1047], "959": [329, 888, 900, 1030], "9593": 1047, "9595": 682, "9597": 1050, "9599": 1048, "95th": [52, 150, 153, 756], "96": [43, 52, 68, 83, 97, 181, 244, 254, 273, 314, 318, 321, 322, 335, 336, 380, 419, 561, 690, 691, 719, 830, 998, 1004, 1009, 1019, 1040], "960": [312, 1030], "9600": 1047, "9604": 1047, "961": 869, "961009": 998, "961111": 164, "9612": 1048, "961904": 861, "96190476": 1012, "962": [45, 47, 1030], "96228895": 133, "9623": 1047, "9630": 683, "9641": 1047, "9647": 1048, "965": [47, 1009], "9655": 1048, "9656": 1048, "966": 45, "9666": 551, "966981": 206, "967": [108, 1009, 1013], "9677": 1047, "968": [179, 189, 273], "9681": 1048, "9686": 1048, "969": 377, "9693": 1047, "9694898472080092": 331, "9697": 1047, "97": [68, 132, 172, 193, 252, 266, 336, 346, 380, 389, 396, 419, 654, 655, 660, 666, 668, 669, 670, 689, 690, 691, 1004, 1010, 1019, 1040], "9701": 1048, "9707": 1048, "9711": 1047, "9717": 1047, "9723": 1048, "9726": 1048, "973": [358, 419], "9731": 1048, "9733": [628, 631], "973554": 330, "973770": 206, "974": 365, "974e": 423, "975": [172, 189, 1024], "9750": 1047, "97545464": 258, "975455": 258, "9759": 47, "976": [72, 209, 283, 1030], "976158": 378, "977": [43, 419], "9771": 562, "9772": 1048, "9775": 1048, "977890": 265, "978": [144, 1030], "9781605585161": 415, "978444": 312, "9786": 1048, "9788": 1047, "98": [47, 68, 77, 79, 89, 97, 99, 115, 126, 172, 244, 273, 311, 318, 336, 380, 419, 422, 667, 847, 903, 1004, 1009, 1011], "980000": 312, "9802": 1047, "981": [172, 205, 380, 1009, 1030], "9815": 1047, "9816": 1048, "9821": 858, "983": 736, "9830": 1047, "9832": 1048, "9833": 506, "98350372e": 199, "983667": 998, "9837": 1048, "984": [161, 1030], "9843": 1053, "9847": 1047, "984ea3": [79, 97], "9850": 217, "9851": 1048, "9858": 1048, "986": 191, "98633022": 133, "986429": 313, "9865": 1047, "9866": [618, 627, 630], "9866666666666667": 146, "9868": [906, 1021], "986989": 278, "987": [283, 358], "9875": 1048, "98809919e": 199, "9884": 687, "9885": 679, "9886": 1048, "989341": 206, "98mb": 357, "99": [45, 47, 50, 52, 62, 68, 79, 86, 97, 123, 235, 244, 248, 254, 260, 262, 273, 276, 316, 336, 371, 376, 380, 387, 419, 422, 423, 500, 655, 669, 679, 690, 691, 796, 830, 859, 977, 1004, 1009, 1019, 1023, 1035, 1042], "990": [57, 278, 677, 1009, 1030], "9900": 235, "9907": 1049, "9908": 1048, "991": [283, 1009], "991584977345022": 174, "991653": 312, "9922": 1047, "9924": 549, "99244": 549, "992766": 312, "993": 283, "9933333333333333": 146, "9935": 843, "993879": 312, "9939": 1048, "993919": 50, "994": 296, "9945": 1047, "995": 209, "9951": 1050, "9954820512820511": 325, "9969977": 52, "997": [46, 75, 172], "9978": 1053, "9979": 43, "9979281": 52, "998": [172, 1013], "9980": [43, 1048], "9981": 43, "998142": 52, "998273": 269, "9987": 647, "99891212e": 199, "999": [235, 269, 275, 422, 725, 869, 870], "9990": 235, "9991": [672, 673, 1048], "99918858": 133, "9993": [43, 661, 663, 1048], "9994": 671, "9995": 43, "9996": 659, "999791942438998": 326, "9998": [50, 309], "9999": [50, 235, 309, 338, 506, 635, 1048], "99999": 338, "999999": [79, 97], "A": [0, 2, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 81, 83, 84, 88, 89, 94, 95, 96, 97, 99, 102, 109, 111, 114, 118, 121, 124, 125, 126, 138, 139, 144, 145, 147, 157, 161, 163, 164, 165, 169, 171, 174, 177, 179, 181, 182, 183, 187, 190, 191, 202, 204, 218, 221, 227, 231, 232, 235, 238, 251, 254, 263, 269, 275, 276, 278, 282, 290, 293, 311, 316, 318, 321, 325, 327, 330, 336, 337, 338, 340, 346, 350, 351, 357, 358, 359, 363, 365, 366, 370, 372, 377, 378, 380, 381, 383, 385, 386, 387, 388, 391, 395, 396, 397, 398, 400, 406, 410, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 495, 497, 498, 500, 502, 505, 508, 509, 510, 511, 512, 516, 518, 519, 520, 521, 522, 528, 530, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 615, 616, 618, 619, 625, 628, 635, 636, 637, 638, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 712, 713, 718, 719, 720, 724, 725, 727, 729, 730, 731, 732, 733, 734, 739, 744, 745, 748, 750, 751, 752, 755, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 772, 774, 775, 782, 783, 784, 785, 786, 789, 796, 798, 799, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 954, 955, 956, 964, 965, 967, 968, 993, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1035, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "AND": 743, "AS": 427, "AT": [2, 378, 503], "And": [52, 187, 236, 237, 242, 251, 275, 357, 391, 409, 415, 419, 423, 538, 596, 597, 599, 700, 701, 1005, 1009, 1030, 1047], "As": [0, 30, 43, 46, 58, 62, 66, 75, 78, 88, 90, 92, 93, 101, 115, 118, 128, 137, 138, 144, 147, 148, 149, 151, 153, 157, 167, 170, 174, 179, 180, 186, 190, 192, 193, 195, 197, 200, 202, 206, 208, 217, 221, 225, 235, 242, 251, 263, 269, 270, 272, 273, 275, 276, 278, 288, 295, 301, 317, 328, 333, 338, 346, 350, 358, 359, 361, 363, 364, 366, 370, 371, 378, 382, 383, 385, 388, 395, 396, 397, 409, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 453, 501, 562, 570, 574, 627, 640, 663, 664, 680, 682, 695, 743, 766, 772, 854, 855, 856, 858, 860, 891, 998, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1016, 1019, 1023, 1024, 1025, 1028, 1029, 1033, 1040, 1046, 1051, 1056, 1058], "At": [52, 109, 137, 222, 251, 269, 287, 293, 295, 335, 338, 370, 371, 387, 398, 406, 411, 418, 422, 444, 447, 472, 596, 597, 599, 610, 840, 842, 879, 972, 998, 1005, 1008, 1010, 1014, 1023, 1033], "Be": [169, 183, 357, 383, 417, 575, 576, 656, 662, 663, 664, 666, 667, 677, 688, 712, 826, 827, 887, 1019, 1037, 1041], "Being": [383, 397, 398, 1005, 1012], "But": [43, 48, 88, 189, 218, 219, 275, 296, 316, 383, 395, 415, 418, 421, 422, 469, 754, 920, 921, 998, 1009, 1024, 1029], "By": [57, 80, 123, 153, 154, 155, 197, 221, 251, 269, 284, 293, 316, 325, 331, 332, 350, 357, 371, 383, 385, 389, 390, 397, 406, 414, 415, 416, 418, 419, 420, 421, 422, 424, 445, 448, 452, 453, 457, 471, 474, 475, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 532, 557, 558, 565, 566, 567, 568, 572, 573, 593, 594, 596, 597, 599, 614, 617, 640, 641, 679, 681, 683, 685, 698, 700, 702, 705, 707, 708, 710, 711, 726, 737, 738, 742, 746, 791, 792, 795, 802, 804, 811, 812, 858, 872, 873, 885, 886, 888, 890, 900, 902, 910, 915, 916, 920, 921, 922, 923, 938, 939, 998, 999, 1001, 1005, 1009, 1016, 1017, 1019, 1021, 1025, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1052, 1054, 1057, 1058], "For": [2, 30, 43, 47, 48, 51, 52, 53, 57, 64, 68, 72, 75, 79, 81, 83, 84, 88, 90, 92, 93, 95, 102, 107, 113, 118, 124, 140, 142, 145, 150, 151, 153, 154, 156, 168, 169, 172, 174, 176, 181, 185, 186, 190, 191, 202, 204, 206, 217, 218, 221, 222, 225, 234, 235, 237, 239, 242, 244, 245, 247, 248, 249, 251, 258, 265, 269, 272, 275, 276, 282, 289, 291, 295, 296, 306, 311, 313, 314, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 340, 346, 348, 350, 353, 357, 358, 359, 361, 362, 365, 366, 370, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 406, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 431, 438, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 464, 465, 467, 468, 469, 471, 472, 473, 475, 478, 479, 481, 489, 490, 491, 492, 496, 502, 504, 506, 511, 522, 523, 531, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 581, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 605, 610, 615, 616, 617, 618, 619, 622, 627, 630, 631, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 695, 696, 697, 698, 700, 701, 703, 709, 712, 714, 715, 737, 738, 746, 749, 750, 771, 777, 786, 791, 792, 795, 796, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 938, 944, 961, 971, 992, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1023, 1024, 1025, 1027, 1032, 1033, 1040, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "If": [0, 43, 50, 52, 64, 68, 77, 84, 90, 105, 115, 126, 135, 145, 150, 153, 158, 183, 186, 190, 199, 217, 232, 234, 235, 251, 254, 258, 269, 275, 282, 289, 291, 301, 309, 316, 321, 322, 346, 350, 353, 354, 357, 358, 359, 365, 366, 370, 371, 377, 378, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 397, 398, 401, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 436, 439, 440, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 522, 523, 527, 530, 531, 532, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 715, 719, 720, 721, 722, 724, 725, 726, 730, 734, 735, 736, 737, 738, 739, 740, 744, 746, 749, 750, 753, 754, 756, 761, 762, 763, 764, 765, 766, 767, 769, 771, 772, 774, 775, 776, 777, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 814, 820, 822, 825, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 945, 948, 954, 956, 958, 960, 965, 967, 971, 974, 977, 979, 982, 983, 989, 992, 993, 994, 995, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1015, 1016, 1019, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1032, 1040, 1043, 1044, 1045, 1046, 1049, 1050, 1052, 1053, 1054, 1056, 1058], "In": [0, 7, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 70, 72, 74, 83, 84, 88, 90, 92, 93, 95, 101, 102, 105, 106, 108, 109, 111, 113, 114, 115, 118, 120, 123, 125, 128, 130, 131, 135, 137, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 156, 158, 161, 168, 169, 171, 172, 174, 178, 179, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 204, 205, 206, 208, 212, 217, 218, 219, 220, 221, 222, 225, 234, 235, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 257, 258, 263, 265, 268, 269, 272, 273, 275, 276, 277, 278, 280, 281, 284, 285, 287, 289, 290, 291, 293, 296, 299, 302, 303, 305, 314, 316, 317, 318, 321, 322, 323, 325, 326, 327, 329, 330, 332, 333, 337, 339, 346, 350, 353, 357, 358, 359, 361, 365, 366, 370, 371, 372, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 395, 396, 397, 398, 400, 401, 402, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 444, 447, 448, 449, 450, 451, 454, 455, 456, 459, 469, 470, 471, 476, 479, 482, 501, 504, 511, 516, 517, 519, 531, 542, 544, 546, 548, 549, 550, 552, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 599, 610, 614, 617, 618, 619, 638, 640, 641, 642, 644, 651, 652, 653, 655, 656, 657, 659, 661, 663, 666, 667, 669, 671, 673, 674, 676, 677, 682, 683, 684, 687, 688, 692, 693, 694, 704, 707, 711, 720, 726, 728, 734, 736, 737, 742, 743, 746, 748, 750, 762, 764, 765, 789, 791, 793, 796, 802, 804, 805, 806, 807, 808, 811, 812, 814, 822, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 854, 855, 856, 858, 859, 860, 862, 863, 864, 869, 877, 879, 885, 886, 890, 891, 893, 897, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 912, 913, 914, 917, 920, 922, 927, 937, 939, 956, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1033, 1037, 1040, 1041, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "Ines": 1057, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 88, 90, 93, 106, 111, 113, 115, 123, 126, 127, 132, 137, 140, 142, 143, 146, 148, 150, 158, 172, 179, 180, 181, 185, 186, 190, 191, 192, 198, 202, 204, 206, 214, 217, 221, 231, 234, 235, 237, 238, 244, 249, 251, 254, 269, 270, 271, 273, 275, 276, 278, 281, 282, 289, 293, 296, 302, 303, 304, 306, 307, 309, 316, 320, 321, 323, 325, 331, 333, 342, 346, 350, 353, 357, 358, 359, 366, 370, 371, 372, 376, 378, 379, 380, 381, 383, 385, 387, 388, 389, 391, 392, 395, 396, 397, 398, 401, 406, 409, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 440, 444, 445, 448, 449, 450, 451, 452, 454, 455, 456, 459, 466, 469, 471, 474, 475, 476, 481, 485, 492, 494, 504, 516, 523, 532, 541, 543, 544, 546, 548, 549, 557, 558, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 597, 604, 610, 614, 615, 616, 619, 622, 623, 627, 628, 630, 631, 635, 638, 639, 640, 641, 649, 650, 651, 654, 655, 658, 660, 661, 662, 663, 666, 668, 669, 670, 671, 674, 675, 676, 678, 679, 680, 682, 684, 685, 686, 687, 689, 690, 691, 692, 695, 697, 699, 700, 701, 703, 704, 705, 706, 707, 708, 710, 712, 716, 717, 718, 724, 731, 742, 750, 751, 755, 766, 767, 770, 773, 789, 791, 796, 807, 808, 811, 812, 814, 820, 821, 822, 830, 831, 833, 836, 839, 848, 849, 854, 855, 856, 858, 861, 862, 863, 864, 868, 869, 870, 874, 875, 876, 880, 881, 882, 886, 889, 891, 901, 904, 905, 909, 910, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 929, 933, 942, 956, 965, 979, 982, 984, 985, 986, 987, 988, 989, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1033, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "Its": [111, 273, 277, 379, 397, 420, 425, 546, 929, 1004, 1005, 1014, 1017, 1023, 1028, 1033, 1043, 1057], "NOT": [251, 302, 380, 386, 571, 818, 852, 853], "Nearness": 635, "No": [61, 152, 202, 223, 225, 245, 251, 269, 336, 353, 380, 391, 401, 409, 415, 481, 567, 568, 598, 599, 643, 653, 672, 684, 686, 693, 694, 805, 1005, 1057], "Not": [90, 163, 191, 370, 395, 409, 415, 433, 434, 437, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 476, 477, 478, 479, 480, 481, 482, 483, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 571, 574, 577, 578, 589, 590, 591, 596, 597, 599, 635, 636, 637, 638, 685, 696, 697, 698, 699, 701, 802, 805, 806, 808, 811, 812, 822, 849, 852, 853, 856, 857, 858, 860, 864, 876, 884, 887, 888, 890, 893, 904, 905, 916, 1009, 1015, 1028, 1049], "OF": 380, "ON": 330, "ONE": [377, 615, 616], "OR": [316, 415, 426, 451, 1051], "Of": [48, 62, 64, 185, 289, 370, 385, 415, 423, 999], "On": [43, 51, 52, 55, 63, 102, 105, 106, 117, 118, 128, 137, 140, 142, 144, 145, 150, 154, 155, 158, 161, 167, 169, 178, 179, 190, 191, 192, 199, 204, 206, 219, 221, 245, 246, 247, 248, 250, 251, 254, 255, 256, 257, 258, 260, 262, 265, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 282, 287, 289, 314, 316, 318, 320, 321, 322, 326, 327, 329, 330, 332, 337, 346, 353, 365, 370, 381, 383, 384, 385, 387, 395, 397, 411, 413, 415, 419, 420, 422, 424, 425, 651, 664, 699, 743, 769, 877, 893, 998, 1002, 1005, 1008, 1009, 1011, 1015, 1017, 1022, 1024], "One": [2, 43, 48, 51, 61, 66, 84, 90, 128, 130, 145, 147, 150, 153, 154, 187, 190, 193, 196, 221, 226, 232, 244, 255, 265, 269, 275, 282, 285, 293, 302, 305, 317, 332, 341, 343, 354, 358, 365, 370, 380, 383, 396, 397, 409, 414, 415, 418, 420, 421, 422, 423, 424, 426, 451, 456, 479, 481, 485, 520, 574, 639, 647, 666, 674, 676, 681, 683, 684, 685, 796, 815, 816, 840, 841, 842, 873, 874, 885, 916, 971, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1019, 1024, 1030, 1031, 1035, 1044, 1046, 1053, 1055], "Or": [357, 365, 419, 420, 885, 1009, 1015, 1023], "Such": [53, 154, 174, 179, 189, 197, 202, 206, 218, 269, 278, 357, 397, 398, 409, 419, 420, 422, 563, 564, 664, 999, 1009, 1012, 1019, 1025, 1050, 1055, 1057], "THE": 380, "That": [52, 64, 123, 137, 153, 172, 190, 206, 244, 275, 279, 358, 359, 371, 377, 391, 397, 414, 419, 424, 425, 450, 453, 454, 565, 572, 601, 826, 920, 921, 998, 1006, 1007, 1015, 1025, 1049, 1050], "The": [2, 16, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 290, 291, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 392, 395, 396, 397, 398, 400, 401, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 435, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 760, 761, 762, 763, 764, 765, 766, 767, 770, 772, 773, 774, 775, 778, 779, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 950, 951, 952, 953, 954, 955, 956, 958, 959, 961, 964, 965, 968, 971, 973, 974, 975, 977, 978, 979, 982, 990, 991, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "Their": [190, 378, 380, 398, 415, 652, 1040], "Then": [105, 138, 142, 145, 153, 158, 161, 169, 190, 195, 202, 204, 217, 221, 241, 245, 251, 257, 269, 277, 278, 293, 357, 365, 377, 387, 389, 391, 401, 402, 412, 415, 418, 420, 423, 424, 578, 601, 727, 764, 808, 822, 912, 913, 999, 1008, 1009, 1015, 1024, 1025, 1049], "There": [0, 74, 81, 143, 174, 235, 241, 251, 266, 270, 272, 275, 295, 357, 376, 378, 380, 383, 384, 385, 388, 395, 397, 398, 401, 412, 415, 420, 422, 423, 424, 453, 459, 469, 542, 561, 562, 567, 568, 596, 597, 599, 614, 653, 999, 1005, 1006, 1007, 1008, 1009, 1012, 1016, 1019, 1023, 1024, 1025, 1027, 1032, 1040, 1048], "These": [11, 18, 25, 32, 38, 43, 44, 46, 64, 86, 123, 125, 142, 146, 187, 191, 206, 217, 218, 219, 245, 269, 293, 296, 300, 314, 316, 323, 324, 329, 336, 338, 366, 370, 371, 376, 379, 380, 383, 385, 387, 390, 392, 395, 397, 401, 406, 409, 412, 413, 414, 415, 418, 420, 422, 423, 424, 425, 449, 453, 455, 506, 516, 517, 523, 546, 575, 576, 610, 611, 676, 684, 685, 707, 714, 741, 786, 802, 808, 811, 812, 814, 822, 831, 833, 834, 835, 836, 837, 839, 857, 858, 877, 931, 998, 1000, 1003, 1005, 1006, 1009, 1010, 1020, 1022, 1024, 1028, 1040, 1046, 1048, 1049, 1050, 1053, 1057, 1059], "To": [1, 43, 47, 63, 64, 68, 81, 90, 92, 111, 113, 115, 118, 128, 137, 147, 150, 151, 160, 163, 172, 179, 180, 183, 185, 186, 189, 190, 195, 199, 202, 204, 217, 218, 219, 221, 225, 235, 248, 249, 251, 254, 256, 258, 265, 269, 270, 272, 273, 275, 277, 278, 280, 282, 289, 293, 295, 313, 316, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 355, 358, 361, 366, 370, 371, 376, 377, 383, 384, 385, 387, 388, 389, 391, 395, 397, 398, 401, 409, 411, 412, 415, 416, 417, 418, 419, 420, 422, 423, 453, 455, 456, 457, 468, 471, 474, 500, 504, 510, 511, 515, 516, 517, 539, 545, 546, 547, 549, 551, 552, 553, 554, 565, 566, 567, 568, 572, 573, 577, 605, 619, 635, 640, 654, 655, 660, 661, 664, 666, 667, 668, 669, 670, 671, 692, 708, 720, 736, 771, 793, 801, 811, 812, 834, 841, 872, 883, 888, 902, 903, 912, 913, 917, 920, 921, 922, 923, 946, 956, 995, 998, 999, 1001, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1015, 1016, 1019, 1023, 1024, 1025, 1033, 1040, 1043, 1045, 1046, 1047, 1049, 1051], "Will": [383, 505, 542, 635, 652, 653, 654, 660, 664, 665, 668, 669, 670, 671, 672, 673, 681, 683, 715, 722, 796, 877, 881, 891, 892, 1043, 1044, 1046, 1048, 1058], "Willing": [1046, 1047], "With": [61, 70, 79, 102, 109, 120, 128, 153, 155, 168, 187, 191, 217, 219, 243, 245, 250, 252, 258, 275, 300, 370, 378, 381, 383, 385, 397, 406, 415, 416, 419, 422, 424, 444, 446, 509, 549, 590, 640, 641, 666, 870, 873, 875, 886, 892, 893, 919, 921, 1002, 1005, 1006, 1009, 1010, 1012, 1013, 1016, 1023, 1025, 1030, 1037, 1043, 1047, 1048, 1050, 1052, 1054], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 58, 62, 63, 64, 66, 68, 69, 75, 78, 85, 88, 90, 93, 98, 102, 104, 115, 120, 121, 123, 128, 130, 132, 140, 141, 142, 153, 167, 174, 179, 180, 181, 189, 190, 191, 193, 195, 197, 201, 202, 204, 205, 206, 209, 214, 215, 217, 219, 221, 230, 231, 234, 238, 241, 245, 250, 254, 258, 269, 270, 275, 277, 278, 279, 281, 282, 284, 289, 293, 299, 304, 307, 314, 318, 321, 322, 323, 326, 329, 330, 331, 333, 336, 337, 345, 350, 353, 357, 359, 362, 385, 389, 397, 420, 422, 423, 427, 453, 485, 540, 541, 542, 543, 544, 546, 547, 548, 551, 553, 554, 555, 574, 605, 654, 655, 660, 661, 668, 669, 670, 671, 689, 690, 691, 692, 696, 697, 698, 699, 701, 703, 704, 706, 708, 718, 772, 808, 814, 822, 831, 856, 864, 885, 886, 893, 999, 1005, 1006, 1009, 1011, 1012, 1013, 1016, 1017, 1019, 1024, 1025, 1047], "_0": [216, 693, 1005, 1009, 1024], "_1": [328, 350, 417, 420, 423, 539, 545, 546, 548, 553, 554, 555, 654, 655, 660, 661, 662, 663, 664, 668, 669, 670, 671, 689, 690, 691, 692, 774, 1005, 1007, 1009, 1024], "_11": 660, "_2": [114, 179, 350, 420, 423, 539, 545, 553, 554, 654, 660, 1005, 1013, 1023, 1024], "_21": [654, 655, 660, 661, 668, 669, 670, 671, 689, 692], "__": [107, 276, 397, 416, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 1048, 1049], "______________________________________________________________________": 336, "________________________________________________________________________________": [50, 89, 357], "__________________________________________________________________________________": 93, "________________________________________________________ward_tre": 89, "_____________________________________________________f_regress": 89, "__add__": [425, 632], "__array__": [1043, 1050], "__array_function__": [1029, 1050], "__c": 385, "__call__": [182, 346, 397, 423, 425, 473, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 946, 974, 1047], "__class__": [185, 217, 219, 251, 254, 277, 318, 357, 358, 359, 390], "__class_weight": 385, "__dataframe__": [569, 570], "__doc__": [78, 109, 179, 263, 397], "__file__": [47, 49, 1053], "__getattr__": 385, "__getitem__": 1058, "__getstate__": [1047, 1055], "__init__": [47, 91, 135, 182, 251, 296, 346, 383, 385, 387, 388, 389, 390, 397, 423, 429, 432, 435, 438, 439, 626, 969, 1041, 1046, 1048, 1053, 1054, 1055, 1056], "__init_subclass__": 385, "__len__": 1049, "__main__": [339, 395], "__metadata_request__fit": 251, "__mul__": 629, "__mul___": 425, "__name__": [46, 62, 96, 185, 217, 219, 251, 254, 258, 270, 277, 318, 339, 357, 358, 359, 390, 395, 885], "__pow__": [425, 624], "__repr__": [385, 1029, 1049], "__sklearn_clone__": [385, 440, 1056], "__sklearn_is_fitted__": [47, 91, 134, 182, 187, 251, 296, 385, 429, 432, 992, 1030, 1053, 1054], "__sklearn_tags__": [385, 945, 961, 1059], "__version__": [151, 193, 325, 387], "_agglom": 89, "_array_api": 411, "_bag": 948, "_base": [261, 385], "_basehmm": 1040, "_bay": 948, "_birch": 1050, "_breast_cancer_dataset": 172, "_build": 383, "_c_step": 1047, "_cfnode": 449, "_check_bounds_param": 1052, "_check_i": 997, "_check_param_grid": 1046, "_check_sample_weight": 1053, "_check_stop_list": 599, "_check_target": 1047, "_check_x": 1050, "_class": 1009, "_class_cov": 1048, "_class_mean": 1048, "_classif": 314, "_classifier_ha": 91, "_column_transform": [105, 158], "_compon": [248, 544], "_coo": [593, 594], "_count_nonzero_coeffici": 46, "_criterion": 1048, "_csr": 885, "_cython_bla": 384, "_devianc": 1009, "_diabetes_dataset": 172, "_distn_infrastructur": 287, "_doc_link_modul": 385, "_doc_link_templ": 385, "_doc_link_url_param_gener": 385, "_dotbla": 389, "_encod": 1048, "_error": 1009, "_estim": 997, "_estimator_html_repr": 952, "_estimator_typ": [385, 397, 432, 433, 434, 437, 438, 1045], "_estimator_with_converted_arrai": 411, "_f": [182, 1005], "_featur": [420, 546, 548, 555], "_fit_and_scor": 1048, "_fit_stag": [567, 568], "_fro": [539, 545, 553, 554, 654, 655, 660, 668, 669, 670, 689], "_g": 182, "_gb": 1050, "_generate_center_coordin": 53, "_get_support_mask": 609, "_get_tag": 1051, "_get_warnings_filters_info_list": 371, "_gpr": 183, "_h": [546, 548, 555], "_hist_gradient_boost": 387, "_i": [413, 422, 1000, 1005, 1009, 1013, 1024], "_idx": 397, "_init": 198, "_init_t": 1023, "_initialize_nmf": 389, "_is_fit": 135, "_iter": 387, "_j": [413, 1000], "_k": [417, 1003, 1005], "_l": 1009, "_learntselectormixin": 1045, "_level": [425, 633], "_logist": 383, "_loss": [397, 1009, 1058], "_m": 1025, "_mean": 322, "_mean_frequency_by_risk_group": 217, "_method": 968, "_my": 383, "_n": [423, 1009], "_n_cluster": 383, "_n_compon": 555, "_n_features_out": 431, "_name_estim": 1050, "_neg": 389, "_newton_cg": 1051, "_nls_subproblem": 389, "_nmf": 389, "_not_in_sphinx": [47, 49], "_num_thread": 371, "_obj": 968, "_openmp_help": 384, "_pairwis": [1050, 1052], "_plain_sgd": 1055, "_plot": [245, 335], "_po": 389, "_posterior_mod": 618, "_preprocess_data": 695, "_pvalu": 1040, "_rand": 366, "_ratio": [546, 548, 555], "_request": [251, 406, 1058], "_required_paramet": 435, "_reset": 47, "_run_search": 1048, "_safe_index": [2, 1053, 1057, 1058], "_safe_split": 929, "_safe_tag": 1051, "_sag": 1049, "_sampl": [248, 420, 546, 548, 555], "_samples_gener": 263, "_score": [397, 808, 822, 835, 1009, 1040, 1053], "_search": 1046, "_serial": 251, "_sgd_fast": 1055, "_skip_test": 931, "_spars": 389, "_sparse_fit": 1050, "_std": 322, "_t": 1023, "_test": [225, 318, 371, 385, 1053], "_test_scor": [275, 479, 602, 1053], "_transform_select": 1046, "_tree": [920, 921, 922, 923, 1041, 1043], "_typedef": 384, "_univariate_select": 89, "_validate_data": 1059, "_valu": [425, 621], "_w": [546, 548, 555], "_weight": [53, 235], "_weight_boost": 948, "_weighted_percentil": 1053, "_x_is_even": 969, "_xfail_check": 931, "a16": [1050, 1051], "a65628": [79, 97], "a674e682c281": 388, "a_": [124, 412, 415, 546, 548, 555, 1005], "a_column": 727, "a_i": 415, "a_mask": 284, "a_n": 412, "a_row": 727, "a_tru": 284, "aaa": 182, "aaaaff": [301, 304], "aaai": [415, 426, 451, 847, 1011], "aact": 182, "aaffaa": 304, "aagaard": 1044, "aakanksha": 1048, "aapl": 51, "aarch64": 391, "aaron": [502, 1005, 1043, 1044, 1045, 1050], "aarshai": [1047, 1048], "aashil": 1047, "ab": [51, 55, 75, 109, 127, 133, 139, 147, 158, 168, 172, 193, 208, 228, 230, 233, 235, 240, 275, 316, 333, 344, 355, 415, 546, 548, 555, 635, 754, 852, 853, 887, 1009], "ab_mask": 284, "abadi": [1046, 1047], "abandon": 383, "abati": [1055, 1057, 1058, 1059], "abbi": [1050, 1051], "abbrevi": 707, "abdela": 1049, "abdulaziz": 1058, "abdulelah": 1053, "abdur": 1050, "abenbihi": 1050, "abhijeet": 1042, "abhinav": [1050, 1053], "abhishek": [1043, 1044, 1050, 1054, 1056, 1057], "abhyudai": 1047, "abid": 383, "abil": [48, 52, 96, 113, 150, 173, 174, 175, 179, 181, 183, 185, 187, 189, 190, 192, 217, 221, 235, 244, 357, 372, 401, 422, 423, 425, 619, 630, 633, 790, 791, 792, 795, 796, 1006, 1009, 1012, 1015, 1025, 1029, 1030, 1040, 1042, 1047, 1049, 1053, 1054], "abirami": 415, "abl": [43, 44, 48, 61, 82, 90, 96, 115, 118, 127, 128, 153, 155, 180, 190, 193, 202, 206, 217, 233, 235, 241, 281, 286, 332, 333, 346, 366, 370, 371, 372, 377, 381, 383, 385, 387, 388, 391, 395, 409, 415, 417, 419, 423, 492, 511, 542, 837, 884, 998, 999, 1005, 1008, 1009, 1010, 1015, 1019, 1022, 1025, 1026, 1029, 1046, 1047, 1051, 1058], "ablin": 1055, "abnorm": [231, 244, 302, 345, 378, 500, 571, 858, 1015, 1048], "abo7atm": 1052, "abort": 700, "about": [3, 46, 50, 65, 79, 88, 92, 97, 104, 118, 146, 169, 183, 187, 189, 193, 221, 234, 244, 251, 269, 272, 273, 275, 277, 282, 295, 301, 321, 325, 327, 328, 329, 330, 331, 336, 357, 359, 365, 366, 370, 371, 376, 378, 382, 383, 385, 387, 388, 389, 391, 396, 397, 398, 409, 414, 419, 420, 423, 425, 445, 500, 502, 503, 504, 505, 508, 509, 510, 512, 513, 518, 523, 569, 570, 601, 602, 615, 616, 622, 648, 684, 686, 751, 808, 814, 822, 831, 841, 891, 939, 999, 1005, 1006, 1008, 1010, 1012, 1015, 1016, 1019, 1020, 1022, 1024, 1025, 1028, 1032, 1033, 1045, 1046, 1056, 1058], "abov": [43, 62, 63, 64, 72, 79, 101, 104, 139, 142, 143, 150, 153, 161, 171, 172, 190, 191, 203, 217, 219, 223, 228, 248, 251, 252, 269, 275, 281, 293, 301, 318, 321, 322, 326, 328, 332, 350, 358, 359, 365, 366, 370, 371, 372, 377, 378, 380, 381, 382, 383, 385, 387, 389, 395, 397, 398, 413, 415, 416, 417, 419, 420, 421, 422, 423, 425, 448, 452, 471, 474, 496, 503, 504, 505, 531, 598, 642, 712, 763, 808, 812, 820, 822, 833, 875, 876, 889, 895, 901, 909, 971, 998, 999, 1001, 1003, 1005, 1006, 1009, 1012, 1014, 1016, 1019, 1023, 1024, 1025, 1029, 1046, 1058], "abraham": [1040, 1041, 1046, 1050], "abrahamowicz": 1019, "absenc": [244, 278, 397, 720, 875, 1008, 1009], "absent": [397, 413, 423, 737, 762, 833], "absgrad": 1051, "absher": 1042, "absolut": [2, 43, 52, 109, 127, 147, 172, 190, 217, 219, 223, 235, 333, 365, 385, 409, 415, 417, 419, 420, 422, 423, 424, 425, 426, 451, 457, 463, 464, 539, 545, 550, 553, 554, 556, 557, 558, 566, 568, 569, 570, 573, 596, 598, 599, 601, 605, 610, 627, 635, 640, 654, 657, 658, 660, 662, 664, 679, 680, 682, 684, 686, 690, 691, 712, 725, 729, 744, 745, 753, 754, 756, 761, 763, 765, 803, 810, 814, 825, 828, 836, 838, 850, 852, 853, 857, 876, 881, 884, 897, 921, 923, 994, 1005, 1006, 1019, 1023, 1025, 1041, 1046, 1051, 1052, 1053, 1054, 1057], "absolute_error": [52, 422, 566, 568, 570, 573, 679, 921, 923, 1053], "absolute_loss": 1053, "absolutelynowarranti": 1048, "absp": 868, "abstain": 542, "abstract": [397, 420, 425, 626, 777, 1040], "abstractmethod": 1050, "absurd": 1016, "abund": 378, "ac": [538, 672, 693, 694, 1005, 1022], "acad": [697, 701, 1006], "academ": [419, 1033], "academi": [113, 859], "acategorypredict": 403, "acc": 149, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 305, "acceler": [249, 330, 370, 395, 411, 415, 475, 700, 910, 1006, 1028, 1033, 1049, 1053, 1055, 1057], "accent": [354, 596, 597, 599, 1050], "accept": [172, 174, 251, 269, 272, 325, 333, 346, 357, 359, 366, 370, 371, 377, 383, 385, 392, 395, 396, 397, 398, 406, 411, 415, 423, 444, 448, 451, 452, 455, 468, 471, 474, 516, 517, 563, 564, 569, 570, 577, 578, 589, 590, 601, 602, 605, 636, 643, 647, 651, 654, 655, 660, 661, 687, 735, 750, 786, 805, 806, 807, 811, 812, 830, 854, 855, 862, 863, 872, 876, 936, 938, 939, 942, 997, 1005, 1007, 1009, 1012, 1017, 1019, 1024, 1028, 1029, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "accept_large_spars": [938, 939, 1048], "accept_spars": [876, 938, 939, 1047, 1057], "access": [43, 84, 111, 148, 254, 261, 266, 332, 333, 357, 365, 370, 371, 383, 384, 385, 391, 395, 397, 398, 411, 415, 417, 418, 422, 423, 425, 457, 464, 471, 474, 544, 575, 576, 577, 578, 625, 870, 871, 872, 927, 998, 1005, 1008, 1009, 1015, 1016, 1017, 1023, 1024, 1029, 1033, 1040, 1042, 1046, 1047, 1048, 1049, 1052, 1054, 1055, 1056], "accid": [217, 235], "accident": [1040, 1044, 1049], "accommod": [179, 1048], "accompani": [275, 1048], "accomplish": [251, 385, 413, 554, 1006, 1010, 1012, 1033, 1057], "accord": [2, 55, 61, 63, 72, 84, 111, 143, 149, 172, 175, 201, 217, 235, 248, 325, 350, 358, 366, 383, 385, 395, 396, 397, 398, 409, 412, 413, 415, 417, 419, 420, 422, 423, 425, 444, 457, 459, 463, 467, 469, 472, 476, 512, 524, 525, 526, 533, 538, 540, 543, 544, 546, 548, 558, 561, 562, 569, 570, 571, 574, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 649, 650, 652, 653, 657, 666, 667, 678, 688, 699, 703, 743, 787, 788, 808, 809, 810, 811, 812, 815, 816, 817, 822, 833, 847, 848, 849, 850, 851, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 875, 882, 890, 902, 904, 905, 912, 913, 914, 915, 917, 918, 1003, 1005, 1009, 1011, 1012, 1019, 1022, 1023, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "accordingli": [153, 191, 254, 350, 383, 387, 388, 1047, 1048, 1055], "account": [52, 53, 90, 125, 131, 137, 153, 179, 185, 190, 235, 251, 269, 275, 299, 305, 353, 355, 358, 370, 379, 383, 397, 398, 406, 415, 418, 419, 420, 422, 423, 470, 569, 570, 575, 576, 635, 636, 638, 640, 641, 657, 681, 687, 712, 715, 736, 737, 738, 746, 751, 764, 791, 792, 795, 796, 809, 813, 826, 886, 998, 1001, 1003, 1007, 1009, 1010, 1011, 1012, 1019, 1023, 1025, 1045, 1047, 1048, 1049, 1052, 1053, 1055, 1057, 1058, 1059], "acctactagaagtt": 395, "acctcctagaag": 395, "accumul": [47, 85, 144, 145, 206, 387, 389, 415, 423, 1009, 1041, 1048], "accur": [43, 48, 52, 59, 62, 63, 113, 123, 152, 174, 181, 190, 191, 221, 232, 235, 269, 275, 282, 286, 293, 329, 357, 358, 366, 382, 397, 413, 415, 417, 420, 422, 423, 424, 444, 450, 454, 458, 460, 466, 539, 546, 548, 550, 551, 553, 554, 555, 615, 616, 642, 811, 812, 852, 853, 955, 956, 1001, 1006, 1009, 1025, 1054], "accuraci": [2, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 104, 105, 106, 107, 137, 143, 144, 148, 149, 156, 168, 169, 171, 175, 193, 195, 217, 221, 225, 232, 233, 262, 273, 274, 275, 276, 277, 279, 281, 289, 291, 293, 298, 304, 305, 306, 314, 318, 321, 331, 335, 336, 338, 346, 349, 350, 353, 366, 370, 396, 397, 414, 415, 419, 422, 423, 424, 432, 444, 456, 476, 478, 479, 485, 540, 542, 549, 557, 558, 559, 561, 563, 565, 566, 567, 569, 572, 573, 575, 577, 618, 642, 666, 667, 674, 676, 679, 682, 683, 684, 700, 705, 711, 716, 719, 721, 726, 740, 741, 742, 746, 751, 762, 771, 795, 802, 804, 807, 830, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 854, 859, 861, 862, 869, 907, 908, 912, 914, 917, 920, 922, 928, 955, 956, 998, 1003, 1004, 1005, 1006, 1010, 1012, 1013, 1017, 1021, 1023, 1025, 1048, 1049, 1058], "accuracy_histori": 47, "accuracy_scor": [2, 66, 137, 175, 279, 321, 338, 357, 366, 396, 406, 411, 432, 565, 572, 716, 719, 737, 738, 742, 746, 791, 792, 795, 802, 804, 949, 998, 1009, 1041, 1042, 1043, 1052, 1057, 1058], "acf": 147, "achar": [1047, 1048, 1049, 1050], "achiev": [43, 51, 55, 57, 64, 67, 126, 137, 146, 148, 153, 156, 182, 195, 217, 225, 272, 275, 282, 321, 333, 338, 346, 349, 350, 353, 357, 366, 370, 372, 377, 378, 380, 385, 389, 395, 397, 403, 412, 413, 414, 415, 419, 420, 422, 423, 561, 566, 573, 648, 657, 684, 686, 715, 737, 738, 746, 748, 771, 791, 792, 795, 811, 812, 848, 892, 998, 999, 1001, 1005, 1009, 1019, 1022, 1024, 1053], "achin": 1033, "achliopta": [248, 905, 906, 1021], "acid": [321, 380], "acknowledg": [382, 617, 1057], "acl": [909, 1022, 1023], "acm": [377, 378, 415, 426, 451, 457, 464, 467, 519, 571, 684, 734, 764, 858, 1009, 1012, 1015, 1021], "acoust": 1009, "acq": 47, "acquaint": 383, "acquir": [53, 145, 277, 1052], "acquisit": [412, 727], "acronym": 387, "across": [0, 2, 15, 43, 52, 90, 96, 102, 117, 120, 143, 163, 190, 206, 211, 238, 270, 272, 275, 289, 296, 316, 321, 350, 384, 385, 392, 397, 409, 413, 415, 419, 422, 423, 424, 427, 444, 447, 457, 459, 461, 464, 467, 469, 476, 479, 481, 495, 498, 500, 503, 505, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 559, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 575, 576, 596, 599, 602, 610, 615, 616, 618, 619, 640, 641, 642, 647, 648, 649, 650, 654, 655, 658, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 684, 686, 687, 693, 694, 697, 698, 699, 700, 701, 702, 703, 712, 713, 725, 739, 765, 796, 801, 803, 805, 806, 808, 809, 810, 811, 812, 813, 814, 820, 822, 823, 824, 825, 826, 827, 828, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 857, 861, 868, 869, 870, 877, 881, 882, 889, 890, 892, 893, 901, 904, 905, 907, 908, 912, 913, 914, 917, 920, 921, 955, 956, 979, 982, 998, 1005, 1007, 1009, 1019, 1023, 1025, 1029, 1033, 1040, 1043, 1046, 1047, 1048, 1049, 1050, 1058], "act": [346, 357, 383, 396, 421, 422, 721, 737, 738, 746, 791, 792, 795, 887, 891, 1006, 1009, 1012, 1024, 1048], "action": [328, 357, 382, 386, 387, 401, 414, 1019, 1050], "activ": [52, 68, 187, 225, 260, 266, 276, 334, 335, 359, 377, 378, 381, 383, 384, 389, 391, 395, 397, 398, 401, 402, 406, 416, 504, 510, 534, 640, 643, 645, 658, 659, 661, 662, 663, 671, 672, 673, 690, 691, 692, 693, 694, 721, 726, 805, 868, 869, 870, 908, 974, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1022, 1030, 1032, 1051], "active_": [658, 659, 662, 663], "active_features_": 1048, "actual": [43, 52, 64, 81, 95, 109, 118, 143, 153, 172, 190, 195, 206, 217, 221, 225, 262, 271, 278, 282, 359, 365, 366, 370, 372, 380, 383, 385, 388, 389, 395, 396, 397, 413, 415, 420, 422, 423, 424, 440, 517, 523, 524, 535, 543, 546, 548, 555, 570, 571, 652, 653, 656, 666, 667, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 688, 695, 699, 703, 709, 712, 717, 723, 729, 730, 731, 732, 793, 805, 811, 812, 824, 827, 828, 858, 889, 912, 918, 947, 948, 949, 983, 1001, 1008, 1009, 1012, 1016, 1017, 1025, 1032, 1047, 1048, 1054, 1055, 1056], "actual_vs_predict": [43, 109, 158, 190, 271, 330, 709], "actuari": 413, "ad": [43, 53, 58, 109, 130, 132, 137, 143, 153, 168, 174, 180, 181, 197, 202, 219, 221, 241, 250, 251, 275, 276, 277, 316, 326, 327, 328, 329, 330, 331, 332, 333, 339, 350, 358, 382, 383, 385, 387, 395, 397, 398, 420, 422, 423, 424, 425, 426, 427, 433, 437, 439, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 513, 518, 520, 522, 530, 531, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 709, 710, 712, 716, 719, 721, 722, 724, 726, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 742, 747, 748, 749, 750, 751, 754, 761, 762, 765, 769, 774, 775, 777, 783, 785, 786, 790, 791, 792, 793, 795, 797, 798, 799, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 821, 822, 826, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 901, 902, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 936, 938, 939, 946, 950, 951, 955, 956, 964, 965, 966, 967, 968, 971, 974, 978, 983, 989, 995, 997, 998, 1002, 1004, 1005, 1006, 1010, 1012, 1013, 1015, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "adaboost": [2, 67, 136, 140, 146, 154, 157, 158, 161, 177, 187, 350, 362, 363, 364, 527, 559, 561, 562, 567, 639, 711, 838, 920, 921, 1030, 1031, 1035, 1042], "adaboost_clf": 137, "adaboostclassifi": [2, 67, 139, 146, 406, 422, 562, 567, 569, 948, 1042, 1043, 1046, 1047, 1049, 1050, 1053, 1055, 1056, 1057], "adaboostregressor": [2, 138, 406, 422, 561, 570, 948, 1042, 1043, 1046, 1049, 1050, 1053, 1055, 1056], "adam": [0, 312, 404, 869, 870, 1013, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "adamgonzo": 1054, "adamson": 1052, "adanhawth": [1048, 1049], "adapt": [88, 90, 137, 149, 150, 260, 261, 269, 350, 371, 382, 383, 392, 415, 422, 425, 523, 524, 525, 526, 684, 685, 686, 869, 870, 1005, 1011, 1013, 1019, 1023, 1028, 1029, 1048, 1049, 1056, 1057], "adarsh": [1057, 1058], "add": [44, 51, 55, 58, 62, 63, 64, 68, 69, 75, 79, 89, 109, 113, 114, 118, 124, 146, 149, 168, 170, 172, 174, 179, 180, 181, 185, 186, 200, 205, 206, 212, 218, 220, 221, 232, 240, 244, 248, 250, 251, 282, 284, 285, 296, 308, 318, 320, 325, 327, 328, 349, 350, 352, 353, 358, 370, 381, 382, 383, 384, 385, 387, 389, 391, 397, 401, 411, 413, 419, 422, 423, 424, 523, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 610, 635, 636, 638, 640, 666, 667, 702, 705, 829, 852, 853, 909, 946, 965, 966, 998, 999, 1008, 1015, 1019, 1022, 1023, 1029, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "add_2d_scatt": 237, "add_artist": [70, 238, 260, 261, 262, 265, 266], "add_ax": [191, 241, 286], "add_categori": 254, "add_collect": [51, 240, 247], "add_dummy_featur": 2, "add_ind": [158, 186, 635, 636, 638, 999, 1049, 1052, 1056], "add_missing_valu": 186, "add_nois": 180, "add_self_request": [251, 965], "add_subplot": [46, 62, 64, 77, 80, 99, 102, 120, 129, 191, 214, 232, 239, 241, 335, 336, 390], "add_trac": 143, "adddatapointbatch": 296, "addep": 1051, "addison": [598, 738], "addit": [2, 7, 37, 43, 44, 46, 51, 53, 54, 101, 105, 115, 120, 123, 126, 137, 141, 143, 144, 147, 148, 171, 179, 180, 181, 186, 190, 191, 197, 202, 206, 218, 219, 221, 241, 255, 269, 277, 284, 290, 295, 316, 326, 327, 332, 337, 350, 359, 363, 366, 370, 371, 375, 376, 377, 378, 379, 382, 383, 385, 387, 388, 389, 391, 395, 397, 398, 401, 409, 414, 415, 417, 419, 420, 423, 424, 425, 426, 439, 448, 449, 451, 452, 453, 457, 464, 476, 481, 504, 511, 540, 542, 544, 545, 547, 549, 550, 551, 557, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 590, 591, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 620, 627, 636, 638, 639, 643, 646, 647, 648, 649, 650, 651, 652, 653, 678, 695, 696, 700, 706, 707, 710, 750, 766, 767, 796, 800, 805, 806, 814, 831, 841, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 894, 904, 905, 912, 913, 950, 956, 998, 1003, 1005, 1009, 1010, 1012, 1013, 1016, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1035, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059], "addition": [88, 106, 139, 153, 190, 217, 235, 251, 326, 328, 358, 383, 395, 413, 423, 618, 619, 654, 660, 679, 889, 998, 999, 1009, 1017, 1028, 1046, 1057], "additional_nois": 75, "additive_chi2": [628, 646, 773, 782], "additive_chi2_kernel": [2, 411, 646, 767, 773, 1001, 1059], "additivechi2sampl": [2, 647, 648, 649, 650, 766, 767, 1001, 1054, 1056], "address": [43, 83, 221, 251, 357, 378, 383, 414, 415, 423, 454, 665, 1005, 1006, 1011, 1012, 1013, 1014, 1015, 1019, 1033, 1048], "adelr": 1048, "adequ": [371, 389, 575, 1053], "adeyemi": 1058, "adher": [2, 370, 385, 397, 950, 951, 1040, 1041], "adien": 1056, "adijohar": 1054, "adil": 1055, "adimension": 190, "adithya": 1045, "aditi": 1058, "aditya": [1046, 1048, 1049, 1050, 1054, 1055], "adityadaflapurkar": 1048, "adjac": [415, 420, 459, 469, 593, 594, 643, 699, 703, 962, 1006, 1012], "adjacency_matrix": 415, "adjust": [2, 43, 48, 71, 73, 84, 93, 111, 137, 150, 167, 187, 221, 244, 249, 257, 276, 293, 325, 339, 353, 358, 390, 415, 416, 420, 422, 423, 532, 561, 562, 565, 567, 569, 570, 572, 666, 667, 674, 676, 682, 683, 684, 712, 713, 716, 722, 723, 763, 765, 794, 803, 847, 848, 850, 851, 882, 904, 905, 912, 913, 914, 917, 920, 922, 944, 1008, 1009, 1013, 1019, 1030, 1037, 1040, 1046, 1056], "adjusted_mutual_info_scor": [2, 72, 73, 84, 93, 415, 713, 723, 741, 763, 765, 794, 1009, 1040, 1048, 1052, 1056], "adjusted_rand_index": 713, "adjusted_rand_scor": [2, 72, 73, 84, 93, 358, 415, 712, 723, 741, 765, 794, 1009, 1053], "administr": [401, 402], "admir": [1055, 1056], "admiss": [248, 371], "adopt": [385, 387, 395, 397, 908, 1009, 1023, 1048, 1055, 1057], "adoublet": [1055, 1056], "adpot": 331, "adrian": [1053, 1054, 1055], "adrien": 1040, "adrin": [0, 398, 404, 409, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "adrinjalali": [1043, 1052], "adult": [332, 504, 1019], "advanc": [44, 155, 187, 191, 243, 245, 275, 295, 372, 383, 415, 420, 496, 509, 543, 640, 647, 791, 805, 861, 870, 873, 892, 921, 998, 1001, 1009, 1012, 1019, 1030, 1033, 1037, 1042], "advani": 1052, "advantag": [43, 44, 74, 90, 92, 123, 128, 151, 217, 218, 244, 261, 276, 295, 329, 333, 366, 397, 413, 419, 420, 423, 425, 448, 452, 467, 542, 597, 657, 682, 683, 771, 840, 841, 842, 872, 873, 912, 913, 914, 915, 916, 917, 918, 998, 1001, 1004, 1005, 1006, 1009, 1010, 1012, 1013, 1017, 1019, 1023, 1024, 1025, 1043], "advic": [391, 425, 630, 631], "advik": [1057, 1058], "advis": [52, 218, 251, 366, 383, 415, 423, 444, 654, 660, 662, 668, 670, 680, 695, 1001, 1005, 1011, 1013, 1024, 1054], "advoc": 1010, "aeberhard": 380, "aesthet": [316, 1025, 1045], "af": 73, "affan": 1046, "affanv14": 1047, "affect": [46, 62, 113, 153, 181, 189, 190, 221, 241, 254, 255, 278, 285, 321, 331, 366, 370, 371, 372, 379, 397, 400, 413, 415, 418, 419, 421, 423, 426, 428, 451, 457, 464, 480, 482, 486, 557, 558, 577, 707, 720, 796, 808, 811, 812, 813, 822, 826, 827, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 892, 893, 903, 917, 1008, 1012, 1024, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1058], "affili": 378, "affin": [2, 27, 71, 72, 79, 84, 98, 99, 187, 316, 337, 375, 385, 397, 420, 447, 448, 459, 461, 469, 520, 543, 699, 703, 712, 713, 725, 745, 801, 803, 908, 929, 1003, 1006, 1009, 1030, 1034, 1035, 1040, 1041, 1044, 1050, 1051, 1053, 1055], "affinity_matrix": [699, 703], "affinity_matrix_": [447, 459, 699], "affinity_propag": [2, 51, 79], "affinitypropag": [2, 73, 79, 329, 415, 1040, 1043, 1044, 1048, 1051, 1053, 1054, 1055, 1056, 1057], "affirm": 43, "afnlp": 1023, "afor": [904, 905], "aforement": [371, 1010], "afraid": 401, "africa": 1019, "afroj": 1057, "aft": [322, 1043], "aftab": 1049, "after": [43, 55, 58, 59, 63, 81, 88, 90, 104, 105, 109, 114, 125, 137, 148, 153, 156, 158, 161, 168, 172, 179, 181, 183, 185, 190, 195, 210, 217, 254, 255, 258, 263, 275, 284, 295, 296, 304, 306, 316, 317, 320, 321, 357, 358, 372, 378, 380, 382, 383, 385, 387, 389, 390, 391, 395, 397, 409, 411, 412, 413, 415, 416, 419, 420, 423, 424, 427, 449, 454, 457, 458, 459, 460, 463, 469, 523, 540, 544, 558, 561, 562, 567, 568, 569, 570, 605, 635, 638, 666, 667, 674, 675, 676, 681, 683, 684, 685, 686, 700, 720, 734, 764, 802, 805, 806, 811, 812, 861, 868, 872, 885, 891, 912, 917, 918, 933, 998, 999, 1003, 1005, 1009, 1013, 1014, 1019, 1021, 1023, 1024, 1025, 1029, 1040, 1043, 1047, 1048, 1051, 1052, 1055, 1058], "afterward": [58, 387, 543, 549, 836], "ag": [105, 172, 190, 192, 204, 206, 217, 235, 255, 256, 258, 269, 316, 328, 329, 330, 332, 378, 380, 504, 1033], "again": [43, 58, 102, 106, 150, 178, 180, 182, 190, 241, 276, 357, 366, 387, 392, 397, 398, 415, 416, 417, 422, 423, 479, 575, 576, 642, 655, 659, 661, 663, 669, 671, 673, 700, 998, 1005, 1009, 1023, 1037, 1040, 1048, 1057], "against": [64, 72, 118, 132, 140, 151, 167, 195, 208, 209, 226, 234, 251, 284, 322, 325, 346, 378, 383, 398, 409, 413, 415, 419, 423, 445, 517, 550, 556, 559, 684, 686, 763, 765, 796, 810, 815, 817, 837, 841, 974, 1001, 1005, 1009, 1010, 1012, 1024, 1027], "agamemnon": [1047, 1048, 1049, 1050, 1052, 1053], "agarw": [1047, 1048, 1050], "agath": 1054, "agc": 182, "agct": 182, "agent": 1033, "agg": 179, "aggfunc": 286, "agglo": [86, 452], "agglom": [2, 51, 55, 71, 72, 77, 79, 82, 95, 97, 102, 187, 238, 240, 335, 336, 415, 448, 452, 510, 699, 786, 865, 1030, 1043], "agglomer": [2, 44, 68, 71, 85, 168, 170, 187, 200, 216, 253, 288, 300, 335, 336, 375, 415, 423, 452, 510, 608, 614, 653, 808, 813, 872, 1030, 1035], "agglomerativeclust": [2, 74, 75, 76, 79, 82, 87, 91, 97, 102, 397, 415, 447, 449, 452, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1057], "aggreg": [95, 141, 235, 278, 284, 289, 329, 331, 415, 422, 424, 542, 563, 564, 602, 729, 731, 736, 753, 754, 756, 758, 759, 761, 793, 798, 799, 1010, 1012, 1019, 1056], "aggress": [2, 47, 224, 674, 675, 811, 812, 1031, 1035, 1041], "aggressive_elimin": [811, 812, 998], "agnost": [1008, 1017, 1058], "ago": [51, 387, 1029], "agraw": [1043, 1048, 1054, 1055], "agre": [25, 167, 391, 398, 415, 794], "agreement": [0, 2, 415, 712, 724, 763, 765, 803, 1009], "agricultur": 1005, "aguiar": 424, "agundez": 1048, "ahead": 896, "ahmadi": 1051, "ahmadjubair33": 1054, "ahmedbgh": [1055, 1056], "ahn": 1052, "ahuja": [1047, 1054, 1055], "ai": 419, "ai8rahim": 1043, "aic": [2, 163, 187, 196, 202, 203, 204, 205, 211, 225, 265, 509, 659, 661, 662, 663, 664, 806, 873, 892, 998, 1030, 1040, 1047, 1053, 1054], "aic_criterion": 204, "aid": [272, 415, 800, 801, 1006, 1033, 1040, 1052], "aidan": 1048, "aidar": 1054, "aig": 51, "aiko": 1055, "aim": [52, 58, 114, 153, 186, 221, 269, 304, 337, 350, 372, 378, 381, 383, 397, 409, 415, 417, 423, 455, 1005, 1009, 1012, 1019, 1024, 1028, 1054], "air": [179, 772], "airport": 772, "airspe": 383, "aisha": 1058, "aishgrt1": 1048, "aishwarya": 1048, "aishwaryark": 1047, "aistat": 1022, "aivision2020": 1047, "aj": [502, 1054], "ak": [413, 1054, 1055], "aka": [2, 45, 311, 357, 395, 423, 459, 544, 546, 548, 552, 555, 589, 590, 623, 630, 659, 660, 662, 663, 664, 666, 667, 670, 674, 675, 676, 678, 684, 685, 686, 749, 879, 883, 885, 1005, 1013, 1023, 1042, 1054], "akai": 1053, "akaik": [204, 206, 265, 664, 806, 998, 1005], "akash": [1048, 1058], "aki": [1054, 1055, 1056], "akihiro": 1058, "akin": [43, 218, 397], "akinkunl": 1050, "akitti": 1045, "akshai": [1044, 1047, 1052], "akshay0724": 1047, "akshayah3": 1044, "akshita": 1055, "al": [0, 2, 50, 111, 112, 137, 152, 204, 309, 378, 380, 412, 415, 417, 420, 422, 423, 424, 458, 506, 527, 528, 536, 543, 549, 552, 571, 690, 691, 727, 728, 847, 849, 869, 870, 905, 955, 956, 1005, 1006, 1009, 1015, 1019, 1021, 1024, 1025, 1048, 1053, 1056, 1057], "ala": [1055, 1056], "aladago": 1050, "alam": [1055, 1056], "alan": [1047, 1048, 1051, 1053, 1054, 1058], "alastuei": 1043, "albeit": 62, "albert": [0, 373, 1047, 1048, 1049, 1052, 1053], "alberto": [1049, 1053, 1054, 1058], "alcalin": 380, "alcohol": [321, 380], "alcorn": 1048, "aldrian": 1044, "aleator": 52, "alec": 1050, "alejandro": [1041, 1046, 1057], "alek": [1053, 1054], "aleksandr": 1047, "aleksandra": 1051, "alemagnani": 1043, "alert": 1047, "alessandro": [1050, 1052, 1055], "alessia": 1053, "alex": [409, 423, 1024, 1040, 1043, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057], "alexand": [0, 405, 415, 420, 543, 878, 1042, 1043, 1044, 1046, 1047, 1048, 1052, 1053, 1054, 1057], "alexandercbooth": 1047, "alexandr": [0, 123, 398, 404, 405, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "alexandracraciun": 1052, "alexandru": 446, "alexanmv": 1054, "alexei": 1045, "alexfield": 1046, "alexgoryainov": 1050, "alexi": [1040, 1043, 1044, 1047, 1057, 1058], "alexl": [1056, 1057], "alexqiao": 1058, "alexryndin": 1048, "alexshack": [1050, 1051, 1052], "alfalfa": 57, "alfano": 1047, "alfaro": [0, 373, 1051, 1052, 1053, 1054, 1055], "alfr": 0, "algebra": [371, 381, 386, 395, 420, 423, 469, 878, 1019], "algesheim": 415, "algo": [78, 132], "algo_param": [79, 97], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 67, 71, 72, 77, 78, 80, 81, 85, 91, 92, 93, 94, 95, 96, 97, 101, 102, 104, 112, 113, 117, 123, 125, 137, 138, 139, 143, 146, 154, 187, 195, 205, 206, 220, 231, 233, 239, 241, 243, 247, 248, 254, 261, 262, 263, 266, 272, 275, 284, 296, 302, 303, 305, 309, 316, 318, 321, 325, 326, 327, 330, 332, 337, 338, 339, 345, 357, 358, 359, 366, 370, 372, 376, 377, 378, 379, 380, 383, 384, 385, 386, 391, 392, 396, 397, 400, 411, 412, 415, 417, 418, 419, 420, 422, 423, 425, 426, 427, 428, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 476, 481, 482, 485, 489, 490, 491, 495, 511, 519, 520, 521, 522, 523, 530, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 554, 555, 556, 561, 562, 563, 564, 567, 568, 571, 599, 611, 612, 618, 619, 643, 645, 647, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 712, 713, 716, 725, 727, 743, 745, 751, 782, 786, 787, 801, 803, 805, 806, 840, 849, 850, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 868, 873, 877, 879, 892, 896, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 938, 955, 956, 958, 973, 977, 983, 999, 1001, 1004, 1006, 1007, 1008, 1009, 1011, 1014, 1015, 1019, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "algorithm_nam": 78, "ali": [1045, 1048, 1049, 1052, 1053, 1055, 1056, 1057], "alia": [52, 251, 384, 391, 397, 406, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 618, 619, 625, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 807, 809, 810, 815, 817, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 982, 1015, 1029, 1040, 1054], "alias": [81, 82, 251, 381, 383, 386, 406, 605, 1040, 1044, 1054], "aliased_sample_weight": 251, "align": [70, 151, 153, 186, 237, 260, 286, 359, 397, 697, 701, 1001, 1012, 1023, 1034, 1035, 1056, 1057], "alihan": [1053, 1059], "alik": [420, 1007], "alin": 1053, "alison": 1047, "all": [0, 2, 4, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 64, 70, 73, 74, 75, 77, 78, 83, 87, 88, 89, 90, 95, 99, 109, 115, 123, 125, 126, 135, 142, 143, 145, 146, 150, 153, 160, 161, 172, 179, 180, 182, 187, 189, 190, 191, 193, 197, 202, 203, 209, 210, 211, 217, 218, 219, 220, 221, 226, 228, 232, 234, 235, 237, 238, 244, 250, 251, 254, 255, 258, 261, 263, 265, 269, 273, 276, 277, 278, 279, 281, 282, 283, 285, 287, 293, 296, 299, 301, 313, 316, 317, 321, 325, 326, 327, 328, 330, 331, 332, 333, 335, 337, 338, 339, 343, 346, 350, 351, 353, 354, 357, 358, 359, 362, 365, 366, 370, 371, 372, 376, 378, 379, 380, 381, 383, 385, 387, 388, 389, 391, 392, 395, 396, 397, 398, 402, 406, 409, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 429, 430, 432, 433, 434, 435, 437, 438, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 511, 516, 517, 523, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 710, 713, 717, 721, 722, 723, 724, 725, 726, 728, 729, 731, 734, 736, 737, 738, 740, 741, 743, 744, 745, 746, 750, 753, 754, 756, 758, 759, 761, 764, 769, 777, 782, 786, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 801, 802, 803, 805, 806, 808, 809, 810, 811, 812, 814, 815, 817, 818, 820, 822, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 934, 936, 938, 939, 940, 944, 947, 948, 949, 950, 962, 965, 971, 983, 992, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1032, 1033, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1058, 1059], "all_class": 47, "all_displai": [2, 392, 1055], "all_estim": [2, 392, 1050, 1051, 1055], "all_funct": [2, 392, 1055], "all_label": 909, "all_model": 150, "all_or_ani": [992, 1050], "all_scor": 741, "all_split": [43, 52], "all_uppercas": 423, "allan": [357, 413, 1052], "allclos": [124, 155, 1021], "allefeld": 1053, "allen": [330, 1043, 1045, 1047, 1050], "allend": [1051, 1053], "allevi": [92, 153, 197, 202, 415, 1011], "allison": 330, "alloc": [2, 42, 45, 62, 96, 187, 287, 327, 379, 383, 384, 415, 423, 450, 454, 466, 495, 544, 546, 548, 592, 596, 599, 654, 660, 668, 670, 811, 812, 814, 831, 836, 839, 998, 1019, 1028, 1030, 1034, 1035, 1044, 1045, 1050, 1051, 1057, 1059], "allow": [25, 43, 58, 91, 93, 108, 109, 120, 127, 128, 140, 141, 148, 156, 174, 179, 180, 181, 183, 205, 211, 217, 221, 235, 238, 245, 248, 255, 257, 258, 260, 269, 275, 289, 295, 325, 326, 327, 328, 330, 333, 350, 351, 357, 365, 366, 370, 377, 378, 383, 384, 385, 387, 390, 391, 392, 395, 397, 398, 406, 409, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 444, 450, 451, 453, 454, 456, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 504, 531, 532, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 601, 602, 605, 611, 618, 619, 623, 635, 636, 638, 642, 643, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 698, 700, 707, 750, 770, 773, 782, 786, 789, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 815, 817, 819, 822, 826, 829, 830, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 862, 863, 867, 869, 870, 872, 874, 875, 877, 878, 879, 884, 891, 892, 896, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 936, 938, 939, 950, 951, 972, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "allow_nan": [929, 937, 939, 1056], "allow_nd": [938, 939], "allow_non": 719, "allow_single_clust": [79, 453], "allow_unlabel": [121, 252, 531], "allowed_extens": 511, "allwein": 293, "almeida": [1041, 1042, 1053], "almeidayoel": 1054, "almer": 1047, "almost": [43, 70, 143, 149, 219, 225, 251, 254, 269, 290, 321, 333, 338, 366, 376, 378, 387, 389, 395, 396, 397, 406, 415, 419, 420, 477, 478, 479, 480, 482, 483, 484, 805, 998, 1004, 1005, 1008, 1009, 1024, 1048, 1053], "almubarak": [1053, 1054], "alon": [190, 221, 281, 346, 397, 413, 656, 677, 688, 750, 1047, 1049], "along": [2, 51, 53, 91, 94, 101, 118, 144, 150, 153, 179, 205, 217, 249, 251, 279, 325, 358, 359, 366, 378, 383, 387, 391, 392, 397, 401, 406, 409, 412, 420, 422, 423, 424, 427, 541, 558, 595, 619, 620, 638, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 684, 686, 689, 690, 691, 692, 693, 694, 787, 788, 800, 808, 822, 881, 882, 885, 886, 889, 890, 891, 892, 897, 898, 899, 901, 902, 903, 934, 958, 983, 989, 998, 1005, 1012, 1019, 1022, 1033, 1040, 1045, 1046, 1048, 1052, 1053], "alongsid": [83, 383, 389, 397, 401, 424, 833, 834, 835, 836, 837, 839, 1009, 1016, 1028, 1029], "alonso": [1051, 1053], "aloqe": 1058, "alpaydin": 380, "alpha": [2, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 67, 70, 72, 75, 77, 80, 87, 91, 95, 100, 109, 115, 118, 123, 125, 126, 128, 129, 131, 132, 137, 139, 140, 146, 150, 153, 154, 155, 157, 158, 159, 172, 174, 177, 179, 180, 181, 182, 183, 185, 186, 190, 197, 198, 199, 200, 202, 203, 204, 205, 206, 211, 212, 214, 215, 217, 218, 219, 221, 222, 226, 229, 230, 235, 237, 238, 241, 249, 250, 257, 260, 275, 276, 277, 278, 279, 282, 283, 285, 287, 288, 295, 296, 299, 301, 304, 306, 311, 313, 316, 317, 318, 319, 321, 323, 326, 328, 329, 332, 337, 339, 343, 344, 347, 348, 350, 351, 353, 354, 355, 357, 370, 378, 385, 389, 395, 417, 418, 420, 422, 424, 425, 427, 453, 478, 479, 485, 535, 539, 541, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 568, 603, 604, 606, 619, 621, 623, 624, 631, 639, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 695, 731, 756, 847, 848, 849, 851, 869, 870, 908, 920, 921, 922, 923, 998, 1005, 1009, 1011, 1013, 1017, 1022, 1023, 1024, 1025, 1037, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "alpha_": [43, 115, 163, 190, 198, 204, 206, 479, 619, 652, 653, 655, 659, 661, 663, 664, 669, 671, 681, 683, 1005, 1025, 1040, 1047], "alpha_1": [652, 653, 1005], "alpha_2": [652, 653, 1005], "alpha_a": 206, "alpha_b": 206, "alpha_bound": [183, 631], "alpha_h": [54, 420, 546, 548, 555, 1053], "alpha_i": [1011, 1024], "alpha_init": [198, 653, 1005, 1050], "alpha_max": [654, 655, 660, 661, 668, 669, 670, 671, 689, 692], "alpha_min": [654, 655, 658, 660, 661, 662, 664, 668, 669, 670, 671, 689, 690, 691, 692], "alpha_optim": 288, "alpha_per_target": [681, 1052], "alpha_w": [54, 420, 546, 548, 555, 1053], "alphabet": [106, 397, 730, 749], "alphalpha": 57, "alphanumer": [397, 596, 597, 599], "alphas_": [204, 206, 655, 658, 659, 661, 662, 663, 664, 669, 671, 690, 691, 1040, 1043, 1053], "alphas_enet": 205, "alphas_lar": 205, "alphas_lasso": 205, "alphas_positive_enet": 205, "alphas_positive_lar": 205, "alphas_positive_lasso": 205, "alphavantag": 51, "alphonsu": 1050, "alreadi": [2, 43, 45, 49, 90, 93, 120, 128, 137, 153, 158, 172, 190, 245, 252, 254, 257, 269, 276, 282, 296, 328, 331, 383, 384, 388, 395, 397, 413, 414, 417, 419, 421, 422, 427, 444, 499, 507, 531, 541, 575, 576, 642, 654, 657, 672, 673, 674, 675, 676, 682, 684, 685, 686, 693, 694, 776, 786, 847, 867, 875, 881, 882, 884, 889, 909, 912, 913, 941, 967, 998, 1001, 1015, 1019, 1020, 1029, 1037, 1041, 1045, 1048, 1052, 1053, 1054, 1055], "alsadi": 1048, "alsaedi": 1053, "alsalhi": [0, 1043, 1044], "alsawadi": 1053, "also": [0, 2, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 68, 81, 83, 88, 92, 93, 95, 99, 104, 105, 111, 113, 117, 118, 123, 130, 132, 137, 140, 143, 145, 147, 148, 149, 150, 151, 153, 156, 158, 168, 169, 170, 172, 174, 176, 179, 186, 187, 190, 191, 192, 193, 195, 198, 199, 201, 206, 209, 210, 213, 217, 218, 219, 221, 222, 226, 234, 235, 237, 247, 249, 251, 254, 255, 266, 269, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 289, 293, 295, 296, 304, 307, 308, 309, 311, 316, 317, 318, 320, 321, 325, 326, 327, 328, 332, 333, 340, 342, 343, 344, 346, 348, 350, 357, 358, 359, 361, 362, 365, 366, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 389, 391, 392, 395, 396, 397, 398, 401, 403, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 444, 445, 446, 448, 449, 452, 453, 454, 455, 457, 459, 469, 470, 472, 474, 489, 491, 500, 504, 506, 511, 516, 540, 541, 543, 544, 549, 554, 557, 559, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 615, 616, 617, 618, 619, 630, 640, 641, 643, 651, 652, 653, 654, 655, 658, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 680, 684, 686, 689, 692, 695, 699, 702, 703, 707, 718, 721, 724, 731, 737, 738, 746, 751, 771, 787, 788, 791, 792, 795, 805, 806, 808, 810, 811, 812, 822, 825, 828, 834, 835, 836, 837, 838, 839, 841, 851, 854, 855, 856, 858, 859, 860, 862, 863, 864, 868, 869, 870, 872, 874, 875, 880, 881, 885, 889, 892, 897, 901, 914, 917, 920, 921, 922, 923, 931, 938, 958, 965, 972, 998, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "alt": [57, 276, 339, 357, 358, 359, 378, 391, 495], "altai": 1050, "alter": [62, 186, 385, 397, 737, 738, 746, 791, 792, 795, 1045, 1049, 1052], "altern": [43, 63, 105, 118, 144, 145, 151, 153, 158, 192, 202, 217, 235, 245, 263, 266, 269, 284, 325, 350, 357, 358, 359, 366, 378, 381, 383, 387, 389, 395, 397, 398, 401, 409, 410, 412, 413, 415, 416, 417, 419, 420, 422, 423, 425, 448, 449, 452, 453, 454, 459, 465, 470, 507, 546, 548, 549, 555, 561, 562, 565, 566, 567, 568, 572, 573, 574, 590, 596, 597, 599, 625, 628, 651, 700, 714, 716, 779, 782, 786, 789, 810, 841, 876, 882, 885, 898, 905, 907, 920, 921, 922, 923, 975, 1003, 1005, 1006, 1008, 1009, 1012, 1013, 1017, 1019, 1021, 1022, 1024, 1025, 1029, 1035, 1045, 1047, 1053, 1054, 1058], "alternate_sign": [47, 423, 590, 597, 1047], "although": [43, 48, 62, 144, 158, 189, 214, 235, 244, 262, 295, 350, 366, 372, 385, 387, 391, 397, 415, 416, 420, 423, 504, 883, 1008, 1010, 1011, 1012, 1015, 1025, 1040, 1048, 1055], "altman": [636, 999], "altogeth": [147, 389, 1048], "alva": 1050, "alvaro": [1046, 1048], "alvin": 1048, "alwai": [143, 147, 150, 190, 197, 217, 235, 242, 248, 269, 278, 281, 285, 323, 343, 350, 353, 358, 366, 370, 371, 377, 381, 383, 384, 385, 389, 391, 396, 397, 401, 409, 413, 415, 416, 419, 422, 423, 424, 425, 432, 438, 450, 456, 471, 472, 474, 476, 489, 490, 491, 495, 504, 516, 517, 552, 557, 559, 560, 562, 564, 566, 567, 568, 569, 570, 572, 573, 576, 578, 589, 596, 597, 599, 602, 619, 635, 636, 638, 640, 641, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 681, 684, 686, 687, 703, 713, 717, 723, 729, 730, 731, 732, 740, 742, 743, 747, 790, 793, 794, 805, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 845, 846, 855, 856, 863, 864, 870, 877, 885, 890, 892, 895, 897, 898, 899, 900, 901, 902, 903, 905, 913, 914, 915, 917, 918, 920, 921, 923, 957, 967, 968, 998, 999, 1001, 1003, 1005, 1008, 1009, 1012, 1015, 1017, 1021, 1022, 1024, 1025, 1033, 1040, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058], "always_accept_polici": 269, "always_reject_polici": 269, "alyssa": [1043, 1047], "alyssaq": 1046, "am": [104, 109, 113, 158, 191, 357, 388, 417, 481, 501, 1047], "amai": 1056, "aman": [1046, 1047, 1048, 1054, 1055], "amanda": [1048, 1051, 1052, 1053, 1054], "amar": [1054, 1055, 1056, 1058], "amax": 111, "amazon": 51, "amber": 397, "ambient": 241, "ambigu": [276, 388, 423, 580, 720, 956, 1012, 1049, 1051, 1053], "ambival": 95, "ambrosio": 1047, "ambroz": [1050, 1051], "amelia": 999, "amen": [389, 395, 425, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 998], "america": [50, 51, 113, 309, 378, 859, 1019], "american": [50, 51, 104, 114, 378, 415, 417, 421, 422, 423, 476, 481, 739, 892], "amerr": 1058, "ames_h": 254, "amg": [81, 101, 415, 459, 469, 699, 703, 1050, 1054, 1055], "amherst": 378, "ami": [72, 84, 93, 415, 712], "amicel": [1040, 1043], "amin": 111, "aminaka": 1044, "amit": [1040, 1054, 1055], "amlan": 1046, "amo": 1043, "amol": 1053, "among": [2, 64, 182, 191, 193, 195, 217, 265, 282, 295, 365, 372, 378, 385, 397, 398, 413, 418, 454, 456, 520, 527, 802, 837, 855, 860, 862, 914, 917, 920, 921, 922, 923, 998, 1001, 1009, 1010, 1016, 1019, 1024, 1025, 1040, 1046, 1047, 1050, 1057], "amongst": [51, 1025], "amor": [0, 394, 1054, 1055, 1056, 1057, 1058], "amormachin": 1043, "amort": 1012, "amount": [37, 38, 47, 51, 80, 88, 101, 111, 114, 123, 127, 138, 140, 180, 190, 202, 221, 235, 249, 269, 327, 333, 335, 338, 340, 346, 353, 359, 370, 371, 372, 395, 415, 417, 420, 422, 423, 424, 450, 461, 476, 546, 547, 549, 551, 571, 604, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 673, 689, 692, 700, 811, 812, 852, 853, 858, 893, 908, 909, 922, 923, 998, 1004, 1005, 1008, 1011, 1013, 1019, 1021, 1022, 1023, 1024, 1053, 1057], "amount_fraud": 269, "amount_iter": 338, "amount_label": 338, "amount_test": 269, "amount_train": 269, "amourav": 1049, "amplitud": [150, 179, 181, 211, 1005], "amplitude_nois": 75, "amput": 1029, "amrcod": 1054, "amsterdam": [409, 880, 1020], "amy12xx": 1052, "amzn": 51, "an": [0, 2, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 69, 70, 71, 72, 74, 75, 76, 78, 79, 81, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 161, 168, 172, 174, 175, 176, 179, 180, 181, 183, 184, 185, 187, 189, 190, 191, 192, 195, 196, 197, 198, 201, 202, 204, 205, 212, 217, 218, 219, 221, 222, 224, 225, 231, 233, 234, 235, 237, 238, 239, 240, 242, 244, 245, 247, 248, 249, 250, 251, 252, 254, 258, 260, 261, 263, 265, 266, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 288, 291, 295, 296, 299, 302, 303, 304, 307, 309, 316, 321, 322, 323, 326, 327, 328, 330, 331, 332, 333, 336, 340, 342, 343, 345, 346, 348, 349, 350, 357, 358, 359, 361, 364, 365, 366, 370, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 396, 397, 398, 400, 401, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 436, 439, 440, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 509, 511, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 583, 584, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 618, 619, 620, 627, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 717, 719, 720, 726, 728, 729, 735, 737, 738, 742, 743, 745, 750, 751, 753, 754, 756, 758, 759, 761, 764, 766, 767, 771, 772, 774, 775, 776, 777, 778, 781, 783, 784, 785, 786, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 935, 936, 938, 939, 941, 942, 945, 946, 950, 951, 952, 954, 955, 956, 958, 960, 961, 964, 965, 966, 967, 968, 969, 971, 972, 973, 978, 979, 982, 983, 989, 992, 994, 995, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "ana": [1051, 1053, 1058], "anaconda": [0, 371, 381, 387], "anak": 1052, "analog": [43, 57, 152, 389, 422, 1009, 1010, 1024, 1049], "analogi": [1008, 1009], "analys": [237, 365, 420, 811, 812, 1006, 1028, 1033], "analysen": 457, "analysi": [2, 12, 27, 44, 46, 48, 49, 58, 62, 65, 71, 92, 98, 100, 111, 112, 113, 114, 115, 120, 121, 122, 124, 125, 127, 128, 129, 131, 132, 147, 164, 186, 187, 190, 206, 238, 259, 261, 265, 266, 269, 272, 275, 276, 280, 286, 297, 298, 299, 307, 308, 316, 321, 353, 358, 375, 378, 380, 383, 385, 398, 412, 415, 417, 422, 423, 427, 446, 454, 455, 480, 482, 483, 489, 490, 492, 510, 512, 520, 523, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 563, 564, 639, 646, 696, 698, 699, 700, 701, 718, 727, 733, 734, 764, 796, 797, 800, 801, 805, 808, 834, 838, 854, 861, 872, 873, 878, 888, 892, 900, 955, 956, 999, 1005, 1006, 1008, 1009, 1019, 1027, 1028, 1030, 1031, 1033, 1034, 1035, 1040, 1041, 1042, 1044, 1049], "analyst": 875, "analyt": [128, 420, 425, 540, 628, 716, 999, 1003, 1009, 1027, 1033], "analyz": [43, 46, 55, 202, 277, 284, 330, 357, 359, 388, 389, 415, 423, 511, 596, 597, 599, 796, 1006, 1009, 1016, 1017, 1025, 1040, 1049], "anam": 1057, "anand": [1048, 1052], "ananiad": 1023, "anantharam": 1054, "anavelyz": 1053, "ana\u00ebl": 1050, "anbari": 536, "anchor": 286, "ander": [1044, 1050], "andersen": [751, 1054], "anderson": [50, 309, 378, 506, 1046, 1052, 1058], "andi": [1040, 1047], "ando": 1045, "andr": [1047, 1054], "andrea": [0, 398, 404, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "andreh7": 1047, "andrei": [1055, 1057, 1058], "andrew": [415, 469, 699, 703, 725, 745, 803, 887, 1013, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "andrewww": 1048, "andrii": 1054, "andriushchenko": [1046, 1047], "androutsopoulo": [847, 1011], "andrzej": [546, 548, 555], "andr\u00e1": [1053, 1054, 1055, 1056], "andr\u00e9": [1053, 1054, 1056], "ands": 883, "andyscanzio": 1057, "ang": 1047, "angel": [0, 405], "angela": [1050, 1051, 1055], "angelaambroz": 1051, "angelotti": 1059, "angermuel": [1044, 1045], "angl": [2, 53, 70, 126, 172, 260, 261, 262, 265, 266, 380, 420, 539, 545, 547, 550, 551, 553, 554, 556, 658, 659, 660, 661, 662, 663, 664, 671, 672, 673, 686, 690, 691, 692, 693, 694, 700, 1006, 1007, 1031, 1035, 1040], "angmar": 57, "angu": [1047, 1048, 1054], "angular": [421, 700, 772], "anh": [546, 548, 555], "ani": [2, 25, 37, 43, 47, 48, 52, 53, 57, 79, 81, 90, 92, 102, 155, 167, 172, 180, 181, 189, 190, 191, 192, 193, 206, 217, 221, 235, 244, 247, 248, 251, 261, 265, 266, 269, 275, 276, 278, 281, 284, 293, 309, 316, 317, 320, 325, 327, 328, 330, 333, 346, 350, 359, 366, 370, 371, 372, 377, 378, 380, 381, 383, 385, 387, 388, 389, 391, 396, 397, 398, 401, 403, 406, 409, 411, 412, 413, 415, 416, 419, 420, 421, 422, 423, 424, 440, 447, 453, 455, 456, 457, 459, 461, 463, 464, 468, 471, 474, 495, 496, 516, 517, 531, 542, 545, 547, 554, 559, 565, 566, 567, 568, 572, 573, 574, 575, 576, 577, 578, 587, 588, 590, 596, 597, 599, 601, 611, 618, 619, 628, 635, 640, 641, 653, 656, 666, 667, 674, 675, 676, 677, 684, 685, 686, 687, 688, 700, 704, 707, 708, 712, 724, 725, 727, 732, 744, 745, 760, 763, 765, 782, 786, 787, 788, 789, 800, 801, 803, 808, 811, 812, 820, 821, 841, 844, 852, 853, 858, 862, 871, 872, 876, 877, 881, 883, 885, 886, 893, 902, 903, 906, 909, 912, 913, 920, 921, 922, 923, 924, 926, 934, 938, 939, 945, 978, 992, 998, 999, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1032, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "aniket": [1055, 1057], "anil": [415, 459, 469], "anim": [357, 423], "anirban": 423, "aniruddha": 1048, "anish": [1045, 1046], "anisha": 1050, "aniso": [79, 97], "anisotrop": [92, 176, 425, 625, 627, 630], "anisotropicli": [79, 97], "anjirbag": 1048, "ankan": 1045, "ankerst": [415, 457, 464], "ankit": [1043, 1050, 1052, 1054], "ankit810": 1051, "ankita": 1048, "ankur": [1045, 1056], "ann": [1040, 1052, 1054], "anna": 1048, "annaayzenshtat": 1048, "annal": [172, 202, 204, 380, 422, 481, 524, 525, 526, 567, 568, 664, 1005], "annau": 1053, "annegnx": 1056, "anno": [700, 1006], "annoi": 371, "annot": [2, 43, 48, 63, 160, 170, 195, 238, 279, 282, 357, 383, 384, 385, 415, 724, 926, 1009, 1025, 1049], "annotationbbox": 238, "announc": [0, 325, 326, 327, 328, 329, 330, 331, 332, 333, 387], "annual": [380, 415, 734, 764, 909, 1009, 1022], "anomali": [14, 48, 113, 154, 187, 231, 243, 254, 302, 303, 378, 476, 520, 530, 571, 647, 685, 858, 873, 916, 1015, 1028, 1030, 1046, 1047], "anomaly_algorithm": 244, "anomaly_frac": 254, "anoth": [43, 72, 123, 128, 137, 148, 152, 172, 174, 182, 186, 190, 206, 221, 225, 242, 244, 251, 255, 261, 269, 275, 277, 278, 281, 285, 289, 306, 357, 359, 361, 366, 370, 372, 377, 378, 381, 383, 385, 389, 395, 397, 409, 412, 415, 419, 420, 422, 423, 424, 426, 449, 451, 459, 462, 469, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 516, 546, 548, 555, 681, 684, 700, 717, 727, 814, 830, 831, 871, 872, 893, 998, 999, 1004, 1005, 1006, 1009, 1010, 1012, 1015, 1019, 1023, 1024, 1049, 1050, 1057], "anova": [2, 49, 89, 108, 166, 168, 171, 172, 187, 341, 416, 512, 523, 600, 603, 604, 606, 607, 608, 612, 613, 614, 617, 721, 834, 838, 872, 873, 892, 912, 917, 1024, 1030], "anova__percentil": [89, 349], "anova_filt": 169, "anova_svm": 169, "ansam": 1056, "answer": [163, 189, 275, 383, 395, 409, 414, 734, 764, 1009, 1033], "ant": [726, 762, 1009], "anthoni": [1045, 1047, 1048], "anthony22": [1055, 1056], "anti": [202, 366, 614, 847, 1011], "anti_alias": [81, 82], "anticip": 52, "antoin": [1040, 1042, 1043, 1044, 1047], "antoni": [1044, 1046, 1052, 1055, 1059], "antonin": 1047, "antonio": [1048, 1050], "anubhav": 1048, "anuja": 1050, "anulekh": 1055, "anupam": [906, 1021, 1055], "anurag": 1059, "any_method": 968, "anymor": [153, 192, 217, 277, 325, 326, 346, 366, 387, 416, 435, 678, 1046, 1049, 1052, 1053, 1054, 1056, 1057, 1059], "anyon": [383, 398, 414, 1032, 1033], "anyth": [359, 389, 397, 406, 416, 419, 968, 972, 1054], "anywai": [48, 357, 385, 673, 693, 694], "anywher": 317, "anz": 1041, "aoif": [716, 1009], "ap": [2, 282, 715, 716, 1009], "apart": [190, 328, 346, 395, 397, 406, 416, 418, 424, 733, 1024, 1033, 1048], "api": [0, 47, 51, 85, 91, 134, 142, 182, 187, 243, 245, 251, 255, 256, 272, 277, 284, 285, 296, 332, 333, 358, 359, 372, 376, 377, 383, 386, 387, 392, 393, 395, 396, 398, 401, 409, 414, 420, 422, 423, 425, 429, 432, 433, 434, 437, 439, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 504, 512, 516, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 571, 572, 574, 575, 576, 577, 578, 587, 588, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 666, 679, 685, 696, 697, 698, 699, 700, 710, 805, 806, 811, 812, 814, 831, 838, 856, 858, 860, 861, 864, 868, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 910, 916, 917, 931, 950, 951, 974, 992, 998, 1007, 1008, 1009, 1012, 1019, 1023, 1028, 1029, 1030, 1033, 1035, 1037, 1038, 1039, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056], "api_refer": 383, "apk": 401, "apostolo": 1055, "appar": [117, 1011, 1033], "appdata": 401, "appeal": 398, "appear": [0, 47, 81, 83, 140, 190, 193, 270, 272, 273, 302, 303, 311, 313, 317, 336, 350, 357, 358, 359, 378, 381, 383, 388, 397, 417, 420, 495, 496, 563, 575, 576, 587, 618, 635, 636, 638, 705, 708, 710, 720, 724, 726, 790, 797, 809, 826, 847, 848, 849, 850, 851, 914, 917, 958, 1005, 1011, 1015, 1040, 1048, 1052, 1053], "append": [46, 47, 48, 51, 52, 55, 62, 69, 72, 75, 79, 85, 96, 105, 130, 140, 141, 143, 148, 150, 153, 186, 193, 210, 221, 222, 224, 225, 232, 235, 249, 250, 275, 278, 284, 285, 288, 311, 312, 322, 338, 346, 349, 357, 358, 359, 361, 365, 389, 397, 416, 423, 666, 667, 912, 913, 919, 946, 1019], "appendix": [653, 684, 1005, 1019], "appl": [51, 370, 381, 395, 1010], "appli": [2, 32, 48, 54, 57, 62, 64, 68, 75, 79, 81, 82, 90, 91, 93, 97, 105, 109, 118, 120, 123, 124, 129, 131, 133, 142, 143, 148, 150, 168, 174, 190, 192, 202, 206, 221, 222, 231, 237, 238, 239, 244, 249, 251, 275, 276, 278, 287, 289, 295, 305, 316, 320, 321, 326, 346, 350, 359, 365, 366, 370, 375, 383, 385, 387, 391, 395, 396, 397, 406, 412, 413, 415, 416, 417, 419, 420, 422, 423, 424, 425, 427, 447, 453, 459, 469, 471, 472, 474, 476, 481, 489, 490, 491, 492, 516, 517, 524, 525, 526, 532, 539, 540, 541, 542, 543, 545, 547, 549, 550, 551, 556, 557, 558, 561, 562, 565, 566, 567, 568, 572, 573, 574, 596, 597, 598, 599, 635, 640, 641, 646, 647, 649, 650, 666, 667, 676, 684, 685, 686, 699, 707, 709, 715, 719, 734, 764, 766, 767, 789, 796, 800, 801, 808, 822, 838, 841, 847, 848, 849, 850, 851, 861, 871, 872, 881, 888, 889, 892, 897, 898, 900, 901, 902, 903, 908, 919, 920, 921, 922, 923, 933, 938, 944, 948, 955, 956, 980, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1011, 1013, 1015, 1017, 1019, 1023, 1024, 1025, 1026, 1027, 1033, 1041, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1054], "applic": [42, 44, 57, 84, 90, 113, 187, 195, 217, 234, 239, 268, 269, 278, 316, 333, 370, 372, 378, 380, 383, 389, 391, 392, 395, 397, 413, 414, 415, 419, 420, 421, 422, 425, 427, 451, 453, 459, 504, 506, 540, 541, 542, 561, 562, 637, 696, 697, 698, 702, 720, 737, 738, 746, 791, 792, 795, 838, 932, 998, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1021, 1025, 1028, 1029, 1030, 1032, 1033, 1040, 1041, 1046, 1048, 1051], "apply_along_axi": 314, "appr": 627, "appreci": [0, 383, 395], "approach": [44, 47, 93, 98, 101, 127, 172, 174, 185, 190, 193, 200, 204, 217, 219, 225, 235, 237, 269, 293, 322, 350, 357, 358, 359, 372, 382, 383, 389, 392, 397, 401, 403, 409, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 444, 450, 453, 455, 459, 469, 528, 540, 590, 597, 619, 643, 666, 667, 682, 683, 841, 857, 956, 998, 999, 1005, 1006, 1009, 1010, 1012, 1013, 1019, 1023, 1024, 1027, 1028, 1033, 1044, 1056], "appropri": [25, 90, 92, 130, 179, 190, 221, 251, 284, 289, 333, 361, 366, 383, 385, 391, 397, 409, 413, 415, 419, 421, 422, 426, 451, 457, 464, 496, 497, 498, 504, 508, 509, 510, 512, 513, 518, 585, 590, 599, 600, 603, 604, 606, 607, 608, 680, 682, 695, 717, 854, 855, 856, 858, 860, 862, 863, 864, 992, 1005, 1008, 1009, 1019, 1044, 1047, 1053, 1056, 1058], "approv": [383, 398, 422], "approx": [64, 123, 249, 420, 422, 423, 1009, 1016, 1023], "approxim": [0, 2, 23, 43, 44, 64, 69, 81, 88, 113, 127, 128, 132, 141, 149, 150, 172, 175, 190, 198, 213, 217, 218, 231, 235, 239, 242, 243, 244, 247, 250, 266, 275, 280, 290, 297, 298, 305, 316, 318, 319, 321, 325, 328, 357, 359, 363, 364, 366, 375, 380, 392, 395, 397, 412, 413, 416, 418, 419, 420, 422, 425, 427, 428, 429, 439, 456, 476, 477, 480, 481, 482, 483, 489, 490, 491, 498, 504, 510, 529, 532, 541, 542, 543, 544, 546, 547, 548, 549, 551, 552, 553, 554, 555, 567, 568, 590, 597, 618, 619, 627, 646, 647, 648, 649, 650, 653, 665, 666, 667, 680, 682, 684, 685, 687, 695, 700, 766, 767, 772, 805, 809, 826, 833, 837, 838, 852, 853, 856, 860, 862, 863, 864, 868, 872, 873, 878, 882, 884, 885, 889, 901, 912, 917, 918, 955, 956, 982, 1002, 1003, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1035, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054], "approximate_nearest_neighbor": [296, 1030], "approximateident": 1041, "april": [378, 672, 693, 694, 1009, 1044, 1052, 1057], "apriori": 235, "apt": [381, 391, 401], "aptitud": 190, "aqua": 284, "aquantitypredict": 403, "ar": [0, 2, 16, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 101, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 125, 128, 130, 133, 135, 137, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 168, 169, 171, 172, 174, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 221, 226, 228, 235, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 261, 262, 263, 265, 268, 270, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 295, 296, 298, 301, 302, 306, 309, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 344, 346, 348, 350, 353, 354, 357, 358, 359, 361, 365, 366, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 396, 397, 398, 401, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 431, 435, 436, 439, 440, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 516, 517, 518, 520, 523, 524, 525, 526, 527, 528, 531, 532, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 717, 719, 720, 721, 723, 724, 725, 726, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 748, 749, 750, 751, 753, 754, 756, 758, 759, 761, 762, 764, 765, 769, 770, 771, 773, 775, 776, 777, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 820, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 934, 935, 936, 938, 939, 942, 943, 944, 948, 950, 951, 955, 956, 957, 960, 961, 962, 964, 965, 968, 971, 972, 974, 979, 982, 983, 987, 988, 989, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "arab": 635, "arabi": [415, 713, 723, 794], "aradwad": 1051, "arafat": 1046, "arai": 1050, "arang": [43, 50, 52, 53, 75, 93, 95, 100, 107, 112, 113, 130, 133, 146, 147, 149, 151, 152, 156, 160, 168, 174, 176, 181, 182, 185, 186, 193, 202, 217, 220, 222, 226, 240, 247, 249, 270, 275, 278, 283, 286, 295, 296, 309, 311, 318, 328, 335, 336, 338, 340, 346, 352, 357, 359, 363, 364, 365, 366, 395, 412, 419, 423, 472, 552, 838, 887, 891, 1004, 1005, 1013, 1019, 1023], "aravindh": 1055, "arbitarili": 357, "arbitrari": [2, 43, 52, 90, 118, 123, 124, 125, 142, 181, 197, 217, 234, 235, 273, 316, 320, 322, 327, 333, 357, 365, 383, 395, 397, 409, 416, 419, 420, 422, 423, 427, 453, 457, 462, 464, 472, 540, 541, 567, 568, 589, 647, 656, 677, 688, 696, 750, 797, 809, 810, 815, 817, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 876, 878, 891, 998, 1000, 1001, 1005, 1006, 1009, 1012, 1019, 1029, 1040, 1041, 1044, 1046, 1047, 1048, 1050, 1054, 1056, 1059], "arbitrarili": [175, 261, 266, 357, 397, 425, 438, 472, 489, 490, 491, 560, 562, 564, 566, 568, 570, 573, 576, 578, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 677, 678, 680, 681, 686, 687, 688, 729, 730, 731, 732, 754, 793, 797, 845, 846, 855, 863, 870, 893, 913, 915, 918, 921, 923, 1009, 1012, 1019, 1025], "arc": [380, 422], "archana": [1050, 1052], "archit": 1046, "architectur": [381, 385, 391, 395, 401, 409, 475, 910, 1013, 1033, 1040, 1057], "archiv": [47, 293, 377, 378, 380, 381, 415, 449, 508, 510, 518, 766, 767, 1007, 1024], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [716, 1009], "arcidiacono": [1054, 1055, 1057, 1058], "arcsin": [707, 772], "arctan": [70, 261, 266, 379, 526], "arctan2": [260, 262, 265], "ard": [2, 197, 652, 653], "ard_poli": 197, "ard_scor": 197, "ardregress": [2, 197, 202, 653, 948, 1005, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1057], "area": [2, 50, 52, 154, 172, 217, 235, 254, 272, 275, 282, 284, 285, 346, 350, 351, 354, 380, 383, 387, 395, 415, 423, 710, 714, 715, 716, 750, 796, 797, 1006, 1009, 1012, 1027, 1042], "aren": [16, 251, 357, 378, 387, 401, 734, 764, 1014, 1050, 1052], "arezki": 1040, "arfa": 1046, "arff": [330, 383, 504, 1052, 1055, 1056], "arg": [251, 312, 350, 384, 397, 420, 422, 429, 707, 876, 974, 976, 1005, 1011, 1012], "arg_sort_bi": 52, "argentina": 772, "argmax": [63, 130, 274, 288, 385, 422, 577, 840, 920, 1024, 1053], "argmin": [51, 149, 274, 385, 417, 539, 545, 553, 554, 693, 787, 788, 1025], "argpartit": 1047, "argsort": [54, 55, 57, 58, 59, 149, 151, 192, 193, 217, 235, 325, 335, 336, 357, 358, 378, 1017], "argument": [2, 106, 151, 193, 218, 245, 248, 251, 325, 371, 377, 378, 383, 384, 386, 388, 389, 391, 392, 395, 397, 415, 416, 419, 420, 422, 424, 426, 427, 429, 433, 437, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 464, 466, 468, 470, 471, 475, 476, 501, 504, 511, 516, 541, 543, 544, 546, 548, 559, 567, 568, 571, 575, 576, 577, 578, 585, 589, 590, 596, 597, 599, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 639, 647, 651, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 674, 676, 684, 685, 689, 692, 696, 700, 704, 706, 707, 708, 709, 710, 722, 727, 743, 750, 771, 787, 788, 814, 831, 833, 834, 835, 836, 837, 839, 840, 841, 844, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 869, 872, 876, 910, 916, 926, 936, 946, 951, 975, 977, 978, 992, 998, 1001, 1005, 1006, 1007, 1009, 1012, 1016, 1017, 1024, 1025, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "argv": 248, "ari": [72, 93, 358, 415, 713, 1045, 1051], "aria": [1048, 1049, 1055], "aric": 55, "arida": [1049, 1050, 1052, 1054, 1057], "ariel": [45, 378, 1040, 1046], "arif": 1058, "ariga": 1046, "arik": 1048, "arima": 1028, "aris": [2, 190, 278, 353, 371, 388, 391, 415, 723, 1005, 1006, 1052], "arisa": [1054, 1055], "arithmet": [250, 389, 391, 415, 559, 656, 677, 688, 712, 725, 744, 745, 765, 803, 859, 1009, 1048], "ari\u00f1o": 1043, "arjona": 1049, "arka204": [1053, 1055], "arm": [381, 383, 391, 998], "arm64": [381, 386], "arm64v8": 391, "armstrong": 1052, "arnaud": [0, 405, 1041, 1042, 1043, 1044, 1045, 1046, 1058], "arnaudov": [1052, 1054], "arnaudstiegl": 1050, "arnold": [1040, 1041], "arnoldi": [696, 697, 701], "aroma": 322, "arora": [1048, 1055], "around": [0, 43, 63, 72, 87, 117, 137, 140, 150, 180, 191, 195, 251, 254, 269, 278, 289, 314, 335, 337, 338, 346, 349, 350, 357, 358, 359, 365, 366, 378, 380, 383, 389, 395, 403, 414, 415, 419, 420, 423, 478, 479, 523, 552, 628, 648, 657, 676, 712, 750, 805, 814, 831, 858, 860, 862, 863, 864, 892, 1005, 1006, 1008, 1009, 1015, 1019, 1023, 1028, 1029, 1032, 1033, 1044, 1045], "arpack": [51, 57, 79, 81, 101, 104, 238, 332, 420, 458, 459, 460, 469, 543, 549, 552, 696, 697, 699, 701, 703, 1006, 1046, 1047, 1052, 1056, 1057, 1058], "arpanchowdhri": 1050, "arr": 333, "arrai": [2, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 81, 83, 88, 89, 96, 97, 99, 104, 106, 114, 117, 121, 124, 125, 149, 151, 153, 154, 157, 160, 169, 172, 175, 176, 177, 182, 190, 197, 199, 202, 210, 211, 214, 217, 218, 224, 234, 238, 239, 244, 248, 251, 254, 255, 258, 260, 261, 262, 264, 265, 269, 270, 271, 273, 275, 276, 279, 280, 284, 295, 309, 319, 325, 328, 329, 331, 332, 336, 342, 349, 350, 357, 364, 366, 370, 371, 376, 377, 378, 383, 384, 385, 386, 388, 389, 391, 393, 395, 396, 397, 409, 412, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 500, 501, 502, 504, 505, 506, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 523, 527, 531, 532, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 589, 590, 591, 592, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 931, 934, 935, 936, 937, 938, 939, 940, 943, 944, 954, 955, 956, 957, 958, 960, 962, 963, 970, 971, 972, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 997, 999, 1004, 1005, 1007, 1009, 1010, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1027, 1033, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "arrang": [2, 58, 295, 640, 843, 844, 845, 846, 1009], "array_api": [411, 1059], "array_api_compat": [411, 1059], "array_api_dispatch": [411, 475, 910], "array_api_support": [411, 931], "array_convert": 939, "array_equ": [577, 1047], "array_lik": 954, "array_paramet": 383, "array_sym": 994, "arrayfunc": [2, 392, 935], "arrow": [63, 403, 1054], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1054, "art": [327, 389, 657, 700, 1033], "artem": [1044, 1047, 1057], "arth": 1054, "arthur": [415, 454, 467, 1045, 1046, 1047, 1048, 1049, 1052, 1054], "arthurmello": 1054, "articl": [0, 55, 104, 357, 378, 382, 383, 391, 419, 428, 482, 713, 1005, 1009, 1053], "artiem": 1048, "artifact": [43, 53, 81, 82, 316, 372, 387, 1035], "artifici": [10, 144, 147, 155, 172, 186, 221, 237, 250, 269, 314, 357, 378, 379, 380, 388, 412, 415, 419, 420, 543, 704, 842, 869, 870, 1002, 1006, 1008, 1010, 1016, 1021, 1025, 1029, 1033, 1040], "artist": [245, 390, 445, 640, 706, 708, 709, 710, 814, 831, 926], "artsiom": 1047, "artsion": 1046, "artstein": 724, "artur": [1055, 1056], "arturo": [0, 394, 1054, 1055, 1056, 1057, 1058], "arturoamor": 1054, "aruku": [1048, 1049], "arunav": 1051, "arunava": 1048, "arxiv": [383, 469], "arya": 1048, "as_float_arrai": [2, 392, 1059], "as_fram": [43, 44, 105, 109, 143, 147, 153, 158, 179, 190, 191, 192, 193, 204, 206, 217, 225, 233, 235, 254, 258, 269, 289, 293, 296, 299, 313, 321, 322, 325, 327, 329, 330, 377, 378, 496, 497, 498, 500, 504, 508, 509, 510, 512, 513, 518, 1050, 1051, 1052, 1053, 1056], "asanyarrai": 385, "asarrai": [47, 55, 217, 235, 314, 337, 357, 358, 385, 397, 411, 734, 764, 860, 862, 863, 864, 1019, 1024, 1057], "ascend": [58, 105, 192, 322, 422, 457, 463, 602, 635, 643, 924, 925, 926, 1023, 1050, 1056], "ascent": [179, 425], "ascii": [50, 309, 423, 494, 596, 597, 599], "ascontiguousarrai": 549, "asctim": 123, "aseem": 1047, "asgd": [224, 1023], "ash": [48, 380, 1043, 1046], "ashah002": [1055, 1056, 1057], "ashim": 1050, "ashimb9": 1050, "ashimin": 1053, "ashish": [1053, 1056], "ashra": 652, "ashutosh": [1047, 1048, 1050, 1052], "ashvith": 1053, "ashwin": [1055, 1056], "asia": [275, 1019], "asian": 423, "asid": [148, 225, 409, 567, 568, 569, 570, 674, 675, 676, 684, 686, 869, 870], "asish": [1046, 1047], "ask": [0, 185, 186, 275, 382, 383, 387, 388, 391, 397, 398, 409, 424, 854, 855, 856, 858, 860, 862, 863, 864, 1032, 1056], "asnt": 1046, "aspect": [46, 93, 118, 123, 178, 191, 237, 244, 284, 289, 305, 370, 371, 372, 383, 397, 398, 415, 498, 666, 667, 998, 1025, 1033, 1057], "aspir": [172, 380, 383], "ass": [113, 114, 417, 481], "assembl": [295, 323, 359, 872], "assert": [47, 55, 83, 124, 248, 275, 284, 371, 386, 1029], "assert_all_finit": [2, 370, 392, 475, 1059], "assert_allclos": 385, "assert_array_equ": 423, "assert_warn": 1053, "assert_warns_messag": 1053, "assertionerror": 1047, "assess": [44, 52, 72, 95, 137, 148, 150, 190, 217, 235, 254, 271, 272, 274, 278, 413, 422, 709, 751, 1008, 1009, 1015, 1029, 1055], "assia": 1049, "assiaben": 1049, "assign": [47, 55, 58, 70, 72, 81, 84, 92, 93, 95, 137, 142, 154, 156, 168, 170, 176, 230, 235, 244, 249, 252, 269, 311, 318, 323, 333, 340, 353, 358, 378, 383, 385, 397, 412, 419, 420, 422, 423, 424, 425, 447, 448, 449, 450, 452, 453, 454, 455, 456, 459, 461, 463, 466, 467, 468, 469, 523, 544, 569, 570, 601, 602, 615, 616, 618, 666, 667, 674, 675, 676, 684, 685, 686, 712, 713, 723, 724, 725, 727, 728, 737, 738, 739, 746, 747, 751, 763, 765, 791, 792, 794, 795, 801, 802, 803, 808, 811, 812, 814, 817, 822, 831, 833, 834, 835, 836, 839, 856, 862, 864, 865, 866, 879, 907, 908, 912, 913, 914, 915, 916, 917, 918, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1019, 1022, 1033, 1040, 1045, 1047, 1048, 1057, 1058], "assign_label": [81, 415, 459, 469], "assist": [0, 383, 395, 414, 1019, 1032, 1033], "associ": [50, 61, 62, 113, 137, 174, 189, 190, 221, 263, 269, 322, 335, 337, 357, 391, 415, 417, 419, 420, 422, 423, 433, 453, 456, 476, 477, 478, 479, 480, 481, 482, 483, 501, 502, 503, 532, 565, 569, 572, 613, 614, 638, 653, 666, 667, 674, 676, 682, 683, 684, 697, 703, 707, 739, 747, 830, 835, 855, 863, 877, 889, 901, 909, 918, 920, 922, 944, 1008, 1009, 1012, 1019, 1022, 1033, 1040, 1052, 1056], "assum": [48, 70, 90, 92, 181, 186, 189, 190, 206, 217, 235, 244, 247, 254, 266, 275, 284, 316, 353, 359, 371, 382, 383, 385, 389, 395, 396, 397, 400, 409, 412, 413, 415, 417, 419, 420, 422, 423, 425, 426, 431, 436, 444, 446, 451, 453, 457, 464, 470, 476, 477, 478, 479, 480, 481, 482, 483, 511, 516, 517, 540, 550, 556, 557, 569, 570, 575, 576, 595, 596, 597, 599, 628, 640, 651, 652, 654, 655, 660, 666, 667, 668, 669, 670, 674, 675, 676, 679, 680, 684, 685, 686, 689, 693, 695, 696, 700, 717, 730, 734, 743, 749, 764, 772, 777, 782, 786, 789, 808, 811, 812, 822, 848, 854, 855, 858, 860, 862, 863, 868, 879, 892, 968, 984, 985, 986, 999, 1003, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1019, 1023, 1025, 1046, 1052], "assume_cent": [69, 112, 417, 428, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487], "assume_finit": [370, 371, 475, 910], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 111, 112, 126, 179, 183, 187, 189, 217, 244, 271, 295, 316, 389, 395, 396, 400, 413, 415, 417, 419, 420, 423, 425, 454, 458, 460, 495, 511, 520, 540, 542, 549, 658, 662, 806, 808, 811, 812, 822, 849, 904, 905, 1003, 1005, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1019, 1022, 1025, 1030, 1047, 1053], "assur": [0, 397, 805, 806, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "astel": 1048, "astolfi": 1040, "astrai": 397, "astroml": 1028, "astronom": 1027, "astronomi": 1028, "astropi": 383, "astyp": [43, 53, 72, 76, 79, 80, 88, 95, 97, 101, 114, 129, 147, 149, 165, 189, 191, 207, 208, 235, 240, 250, 254, 269, 286, 296, 323, 409, 423, 999, 1005, 1047], "asv": 383, "asv_benchmark": 383, "aswathavicki": 1058, "asymmetr": [150, 219, 397, 1045], "asymmetri": [219, 357], "asymptot": [111, 112, 206, 370, 417, 481, 544, 738, 1005, 1008, 1050], "atag": 182, "atanasoska": 1059, "atariah": 1049, "ateif": 1053, "atharva": 1054, "atheism": [57, 276, 339, 357, 358, 359, 378, 495], "atheist": 357, "athena": 1033, "ation": 423, "atla": [370, 381], "atleast_2d": [150, 385], "atmospher": 179, "atol": [385, 680, 682, 852, 853, 857], "atom": [126, 132, 420, 539, 545, 547, 550, 551, 553, 554, 661, 671, 692, 1005, 1040, 1053], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1052, 1053], "attach": [47, 357, 440, 857, 1041, 1051], "attack": [254, 378], "attalla": 1054, "attard": 1053, "attempt": [43, 89, 191, 213, 223, 270, 357, 370, 382, 397, 415, 427, 453, 457, 464, 471, 475, 639, 696, 697, 701, 826, 854, 855, 856, 858, 860, 862, 863, 864, 890, 892, 910, 938, 939, 1005, 1006, 1012, 1025, 1047, 1052, 1057], "attenberg": 423, "attent": [391, 615, 616, 1023], "attenu": 174, "attia": 805, "attr": [47, 91], "attract": [426, 451, 1003, 1012, 1028], "attractador": [1047, 1048], "attrgett": [601, 605], "attribut": [2, 47, 62, 68, 84, 105, 131, 135, 137, 144, 145, 148, 168, 172, 217, 225, 251, 265, 273, 274, 279, 287, 305, 309, 328, 350, 359, 365, 372, 376, 377, 378, 380, 383, 386, 390, 395, 409, 412, 413, 415, 416, 417, 418, 420, 422, 423, 424, 425, 430, 431, 432, 433, 434, 437, 438, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 587, 588, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 625, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 705, 706, 708, 709, 710, 744, 803, 805, 806, 807, 808, 811, 812, 814, 822, 830, 831, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 927, 929, 969, 992, 997, 1001, 1003, 1005, 1010, 1012, 1013, 1015, 1019, 1022, 1023, 1024, 1025, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "attributeerror": [416, 567, 585, 969, 1049, 1050, 1052, 1056, 1057], "attrselect": 1040, "atukorala": 1055, "atuo": [1056, 1057], "aubert": 1047, "auc": [2, 50, 62, 172, 217, 235, 254, 272, 275, 279, 282, 284, 285, 332, 413, 710, 716, 796, 1009, 1045, 1048, 1052], "auc_scor": [1040, 1042], "audio": [377, 511], "audrei": 1058, "aufarkari": 1054, "aug": 1024, "augment": [2, 338, 638, 894, 1017, 1033], "augspurg": [1048, 1050], "august": [172, 380, 415, 519, 542, 1024, 1040, 1042, 1043, 1047, 1054], "aura": 1052, "auroc": 1009, "aur\u00e9lien": [1047, 1048, 1049, 1053, 1054], "austin": 1047, "australian": [153, 401], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 377, 383, 386, 391, 395, 397, 398, 419, 458, 542, 879, 1001, 1028, 1043], "authorit": 398, "authorship": 387, "auto": [57, 69, 92, 93, 121, 172, 178, 201, 237, 242, 256, 296, 299, 304, 325, 326, 327, 328, 329, 330, 333, 342, 343, 349, 352, 359, 377, 378, 385, 422, 425, 426, 448, 451, 452, 453, 454, 456, 457, 459, 462, 463, 464, 466, 469, 504, 516, 517, 543, 546, 548, 549, 552, 555, 557, 565, 566, 569, 570, 571, 572, 573, 575, 601, 602, 605, 610, 615, 616, 637, 639, 640, 641, 643, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 680, 681, 682, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 708, 710, 807, 811, 812, 830, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 869, 870, 885, 886, 893, 904, 905, 909, 912, 913, 914, 915, 916, 917, 918, 922, 923, 955, 956, 974, 977, 1000, 1003, 1005, 1006, 1012, 1019, 1028, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "auto_examples_jupyt": 187, "auto_examples_python": 187, "auto_viml": 1052, "auto_wrap_output_kei": 385, "autoclass": 380, "autocorrel": 419, "autolabel": 47, "autom": [276, 386, 387, 401, 700, 998, 1005, 1006, 1009, 1028, 1033], "automat": [2, 43, 47, 51, 52, 64, 81, 98, 100, 105, 130, 153, 163, 171, 197, 220, 260, 261, 269, 273, 276, 316, 323, 326, 330, 339, 348, 350, 371, 378, 381, 383, 385, 387, 391, 397, 401, 409, 411, 415, 416, 417, 420, 422, 423, 424, 439, 457, 459, 463, 469, 471, 472, 474, 504, 507, 523, 546, 548, 549, 555, 557, 559, 565, 569, 572, 591, 596, 599, 602, 610, 651, 653, 654, 655, 660, 661, 666, 667, 668, 669, 670, 671, 674, 675, 676, 680, 682, 683, 684, 686, 689, 692, 695, 696, 699, 703, 810, 825, 828, 838, 848, 869, 870, 873, 874, 876, 885, 886, 893, 904, 905, 912, 913, 914, 917, 920, 922, 926, 944, 979, 982, 997, 998, 1000, 1003, 1008, 1013, 1019, 1023, 1025, 1028, 1029, 1040, 1043, 1044, 1045, 1051, 1054, 1055, 1056, 1057, 1058, 1059], "automl": [1009, 1028], "automobil": 1033, "autoregress": 378, "autoviml": 1028, "autoviz": 1052, "auxiliari": [186, 333, 381, 1033, 1055], "av": 1048, "avail": [0, 2, 44, 50, 51, 53, 76, 91, 92, 126, 145, 149, 153, 172, 174, 179, 183, 189, 190, 191, 206, 217, 225, 235, 238, 251, 254, 269, 272, 273, 278, 279, 282, 289, 301, 302, 303, 309, 321, 325, 326, 327, 328, 330, 331, 338, 340, 366, 370, 377, 378, 380, 381, 382, 383, 384, 388, 392, 396, 397, 401, 409, 412, 415, 416, 419, 420, 421, 422, 423, 424, 426, 454, 457, 458, 459, 460, 476, 477, 478, 479, 480, 481, 482, 483, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 516, 543, 557, 563, 564, 565, 566, 567, 568, 572, 573, 575, 576, 577, 578, 601, 602, 610, 618, 619, 635, 640, 641, 655, 659, 661, 663, 665, 669, 671, 673, 676, 678, 679, 680, 681, 682, 683, 684, 697, 704, 707, 740, 741, 808, 811, 812, 822, 834, 835, 840, 841, 842, 843, 844, 845, 846, 858, 869, 870, 872, 879, 888, 891, 896, 900, 905, 909, 964, 969, 998, 999, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1019, 1022, 1023, 1024, 1027, 1028, 1029, 1032, 1033, 1035, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1056, 1059], "available_if": [2, 91, 397, 1053, 1054, 1057], "avebedrm": [316, 378, 497], "aventi": 51, "aveoccup": [316, 327, 378, 497], "averag": [2, 43, 52, 62, 64, 72, 74, 75, 79, 87, 95, 97, 140, 141, 146, 150, 153, 154, 159, 160, 161, 172, 179, 191, 199, 206, 217, 224, 235, 254, 269, 278, 280, 283, 285, 289, 295, 316, 325, 331, 333, 339, 357, 366, 370, 378, 380, 385, 395, 412, 413, 417, 419, 423, 424, 426, 427, 444, 445, 448, 451, 452, 453, 454, 456, 497, 501, 502, 531, 539, 540, 541, 545, 546, 548, 549, 553, 554, 555, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 578, 595, 602, 640, 641, 656, 666, 667, 674, 675, 677, 680, 682, 684, 685, 686, 688, 695, 708, 711, 712, 714, 715, 716, 721, 728, 729, 731, 733, 734, 736, 737, 738, 742, 743, 744, 746, 747, 748, 751, 753, 754, 756, 758, 759, 761, 764, 772, 789, 790, 791, 792, 793, 795, 796, 798, 799, 803, 804, 805, 806, 836, 839, 858, 878, 893, 994, 999, 1004, 1005, 1010, 1013, 1015, 1016, 1023, 1024, 1025, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058, 1059], "average_bike_rent": 191, "average_coef_": 1051, "average_feature_effect": 357, "average_intercept_": 1051, "average_linkag": 79, "average_method": [415, 712, 765, 1048], "average_pr": 153, "average_precis": [282, 708, 715, 750, 1009], "average_precision_scor": [2, 282, 708, 714, 716, 790, 796, 1009, 1040, 1043, 1047, 1048, 1054, 1056], "average_week_demand": [43, 153], "averoom": [316, 327, 378, 497], "avg": [45, 68, 104, 169, 273, 314, 335, 336, 577, 712, 721, 830, 1009, 1056], "avg_dist": [75, 789], "avgclaim": 235, "avgclaimamount": 235, "avi": [1052, 1053], "avidar": 1056, "avinash": 1052, "avm19": [1054, 1055, 1057], "avoid": [43, 46, 51, 52, 79, 92, 97, 106, 142, 143, 148, 153, 190, 191, 221, 226, 235, 240, 251, 254, 269, 270, 276, 280, 304, 306, 307, 320, 321, 332, 342, 343, 358, 371, 381, 383, 384, 385, 387, 388, 389, 395, 397, 398, 401, 409, 413, 415, 417, 419, 422, 423, 426, 447, 449, 451, 459, 469, 475, 501, 502, 503, 507, 516, 517, 542, 547, 551, 642, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 697, 699, 701, 703, 720, 800, 808, 809, 813, 819, 822, 833, 834, 835, 872, 875, 881, 882, 884, 889, 890, 891, 892, 895, 897, 898, 899, 900, 901, 902, 903, 905, 910, 956, 1003, 1006, 1008, 1009, 1012, 1013, 1015, 1017, 1019, 1024, 1025, 1029, 1032, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "aw": 391, "awai": [62, 63, 64, 95, 111, 146, 174, 175, 179, 220, 269, 350, 351, 378, 413, 425, 636, 854, 855, 862, 863, 1008, 1009, 1024], "await": 326, "awalei": 1048, "awar": [48, 54, 169, 183, 269, 343, 357, 381, 383, 385, 395, 398, 414, 419, 423, 575, 576, 656, 662, 663, 664, 666, 667, 677, 688, 858, 887, 1015, 1019, 1025, 1037, 1040, 1041, 1054], "awesom": 1033, "awwwyan": 1058, "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 80, 88, 90, 91, 92, 99, 101, 106, 109, 113, 115, 118, 120, 121, 123, 129, 133, 137, 139, 142, 144, 147, 148, 153, 155, 156, 158, 159, 160, 177, 178, 183, 185, 189, 190, 191, 192, 193, 195, 197, 198, 201, 202, 206, 208, 209, 212, 214, 215, 217, 218, 219, 221, 222, 225, 226, 228, 230, 231, 232, 235, 237, 238, 239, 240, 241, 242, 245, 250, 254, 255, 257, 260, 262, 265, 269, 270, 271, 272, 275, 277, 278, 279, 281, 282, 284, 285, 286, 287, 289, 290, 293, 295, 296, 298, 299, 300, 301, 304, 306, 307, 311, 312, 313, 316, 318, 319, 320, 321, 322, 323, 325, 326, 329, 330, 332, 342, 343, 344, 345, 347, 348, 350, 352, 353, 354, 355, 357, 358, 359, 361, 362, 379, 386, 420, 425, 445, 542, 549, 558, 639, 640, 705, 706, 708, 709, 710, 726, 814, 831, 926, 929, 1009, 1012, 1016, 1037, 1050, 1056], "ax0": [107, 109, 217, 247, 358], "ax1": [46, 49, 92, 95, 100, 102, 107, 109, 113, 121, 147, 186, 193, 217, 245, 247, 255, 260, 278, 286, 317, 321, 322, 338, 357, 358, 379], "ax2": [46, 92, 95, 100, 102, 113, 121, 147, 186, 193, 217, 245, 255, 260, 278, 286, 306, 317, 321, 322, 338, 357, 379], "ax3": [100, 338], "ax4": 100, "ax_": [154, 268, 278, 282, 284, 291, 299, 321, 325, 390, 445, 639, 705, 706, 708, 709, 710, 814, 831], "ax_bc": 320, "ax_bottom": 390, "ax_calibration_curv": [62, 64], "ax_colorbar": 316, "ax_det": 272, "ax_histi": 316, "ax_histx": 316, "ax_histx_zoom": 316, "ax_histy_zoom": 316, "ax_idx": 277, "ax_origin": 320, "ax_qt": 320, "ax_roc": 272, "ax_row": 70, "ax_scatt": 316, "ax_scatter_zoom": 316, "ax_top_left": 390, "ax_top_right": 390, "ax_yj": 320, "ax_zoom_in": 316, "ax_zoom_out": 316, "axarr": [159, 316], "axes_": [153, 155, 255, 326, 332, 390, 640], "axes_idx": 320, "axes_list": 320, "axes_row": 208, "axesimag": 705, "axhlin": [130, 163, 207, 274, 278], "axi": [2, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 72, 74, 75, 82, 83, 85, 87, 88, 89, 90, 96, 105, 106, 109, 115, 118, 121, 123, 124, 125, 126, 127, 132, 139, 140, 144, 146, 154, 157, 161, 165, 168, 178, 183, 185, 189, 190, 199, 205, 206, 209, 210, 211, 217, 222, 226, 229, 231, 232, 234, 235, 238, 239, 242, 244, 248, 249, 253, 260, 262, 264, 265, 271, 272, 276, 277, 282, 284, 285, 295, 296, 301, 302, 303, 306, 307, 308, 314, 316, 320, 323, 332, 336, 338, 340, 342, 345, 346, 349, 351, 352, 353, 355, 357, 358, 362, 363, 364, 365, 378, 385, 392, 397, 413, 415, 423, 427, 445, 452, 471, 474, 539, 541, 544, 545, 547, 549, 551, 553, 554, 558, 593, 620, 639, 640, 693, 694, 709, 771, 787, 788, 789, 790, 814, 831, 840, 881, 882, 889, 890, 892, 897, 898, 899, 901, 902, 903, 926, 934, 938, 939, 958, 983, 989, 999, 1009, 1016, 1019, 1024, 1048, 1050, 1052, 1057, 1058], "axis_idx": 43, "axis_list": 125, "axp": 51, "axvlin": [88, 95, 107, 115, 130, 149, 160, 190, 192, 193, 206, 281, 289, 353], "ayako": 1052, "ayan": 1054, "ayc\u0131": 1058, "aydor": [1047, 1048, 1051], "ayerdi": 1044, "aymer": 1041, "aymericbasset": 1056, "ayomid": 1050, "ayush": [1048, 1053], "ayzenshtat": [1033, 1048], "azaria": [1055, 1056], "azencott": 1054, "azim": [80, 102, 120, 129, 191, 214, 237, 241], "azur": [0, 383], "b": [0, 2, 47, 49, 61, 63, 94, 100, 113, 130, 139, 140, 146, 150, 151, 161, 163, 175, 176, 177, 182, 186, 200, 202, 205, 217, 218, 223, 235, 252, 254, 269, 274, 278, 280, 285, 290, 295, 328, 338, 366, 378, 380, 383, 387, 388, 389, 412, 413, 415, 418, 419, 420, 423, 444, 489, 506, 508, 549, 574, 596, 597, 598, 599, 615, 616, 618, 619, 636, 654, 655, 656, 657, 666, 677, 680, 682, 684, 688, 695, 696, 713, 727, 738, 739, 800, 801, 819, 820, 859, 885, 886, 887, 888, 891, 892, 900, 927, 940, 956, 957, 971, 973, 999, 1001, 1005, 1006, 1007, 1009, 1012, 1014, 1019, 1023, 1024, 1040, 1048, 1051, 1053, 1054, 1055], "b0noi": 1046, "b0rxington": 1055, "b1": [231, 302, 345], "b12": [217, 235], "b1996": 422, "b1998": 422, "b1999": 422, "b2": [231, 302, 345], "b2001": 422, "b2011": 415, "b2c": 1033, "b30065": 318, "b5": 330, "b7a2ff": 320, "b_1": 1013, "b_2": 1013, "b_column": 727, "b_i": 1014, "b_iv_i": 1014, "b_j": 415, "b_k": 415, "b_mask": 284, "b_row": 727, "b_true": 284, "ba": [51, 869, 870, 1013], "baak": 1054, "baam": [1053, 1054], "babino": [1053, 1054], "bac": 51, "bach": [420, 539, 544, 545, 546, 666, 1005], "bachant": 1047, "back": [43, 128, 256, 371, 381, 383, 397, 398, 409, 416, 423, 440, 450, 453, 454, 466, 489, 490, 491, 516, 517, 541, 542, 543, 546, 548, 549, 552, 589, 638, 666, 667, 674, 675, 676, 684, 685, 686, 736, 877, 879, 880, 881, 885, 886, 887, 889, 890, 892, 904, 905, 912, 961, 1005, 1009, 1013, 1029, 1043, 1048, 1050, 1051, 1054, 1058], "backend": [2, 371, 386, 397, 475, 910, 974, 978, 1009, 1043, 1048, 1049, 1050, 1051], "background": [44, 50, 82, 101, 154, 314, 318, 378, 383, 391, 415, 501, 502, 1006, 1014, 1023, 1050], "background_point": 50, "backlink": 1045, "backport": [387, 392, 1047], "backprop": [1013, 1023], "backpropag": 1013, "backslash": 1055, "backtick": [383, 388], "backup": [516, 1040], "backward": [172, 251, 327, 386, 397, 424, 504, 585, 610, 622, 623, 626, 627, 628, 630, 631, 925, 934, 1013, 1029, 1040, 1043, 1048, 1049, 1050, 1052, 1054, 1056], "bad": [80, 95, 96, 175, 180, 190, 269, 333, 357, 366, 383, 415, 425, 700, 754, 998, 1005, 1006, 1011, 1017, 1040], "badaracco": 1053, "badli": [206, 217, 357, 372, 892, 1005, 1019], "badr": 1055, "baeza": [598, 738, 1043], "bag": [2, 14, 64, 104, 125, 136, 141, 143, 151, 152, 187, 192, 293, 358, 359, 379, 413, 524, 525, 526, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 749, 813, 838, 921, 1007, 1010, 1030, 1031, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1053, 1054, 1056], "bagai": 1053, "baggingclassifi": [2, 397, 406, 422, 564, 922, 948, 999, 1043, 1046, 1047, 1048, 1051, 1055, 1056, 1058], "baggingregressor": [2, 140, 406, 422, 563, 923, 999, 1043, 1046, 1048, 1051, 1055, 1056, 1058], "baggipont": 1058, "baharev": 1045, "bahavior": 357, "bahaviour": 357, "baibak": [1048, 1049], "bail": 1051, "bailei": [415, 712], "bajic": 1055, "baji\u0107": 1055, "bakir2003": 420, "bakiri": [842, 1010], "bak\u0131r": [44, 420, 543], "bala": [1040, 1043], "balakumaran": [1047, 1048], "balanc": [2, 43, 45, 52, 64, 88, 101, 106, 137, 143, 148, 171, 187, 221, 222, 267, 273, 276, 278, 279, 289, 316, 372, 395, 397, 413, 414, 419, 420, 422, 510, 523, 542, 548, 549, 555, 565, 569, 572, 648, 666, 667, 674, 676, 682, 683, 684, 711, 716, 737, 751, 790, 795, 808, 809, 826, 872, 912, 914, 917, 920, 922, 943, 944, 998, 1024, 1025, 1030, 1040, 1042, 1045, 1046, 1049, 1050, 1054], "balanced_accuraci": [289, 716, 830, 1009, 1048], "balanced_accuracy_scor": [2, 711, 795, 1009, 1048], "balanced_subsampl": [565, 572, 1048], "balaz": 1044, "baldi": 751, "ball": [104, 301, 309, 415, 421, 455, 700, 852, 853, 857, 860, 862, 863, 864, 1040, 1042, 1045, 1051], "ball_tre": [309, 426, 451, 453, 457, 464, 696, 697, 854, 855, 856, 857, 858, 860, 862, 863, 864, 1012, 1040, 1057], "balltre": [2, 426, 451, 453, 457, 464, 696, 697, 707, 854, 855, 856, 857, 858, 860, 862, 863, 864, 1006, 1040, 1042, 1044, 1048, 1053, 1056, 1057], "baloo": 1006, "baluyot": 1049, "bamidel": 1050, "banach": 1059, "banana": [48, 1009], "band": [52, 278, 318, 1019], "bandit": 998, "bandol": 322, "bandwidth": [2, 48, 79, 98, 250, 300, 301, 309, 395, 397, 415, 421, 455, 465, 468, 852, 853, 857, 1002, 1015, 1051, 1055], "bandwidth_": 857, "bangda": 1048, "banik": 1058, "banilo": [1044, 1045], "bank": [51, 57, 1033], "bannerje": [1056, 1057], "bansal": 1047, "bansod": [1045, 1046, 1047], "bao": [1046, 1054], "baod": 415, "baptbillard": 1053, "baptist": [1043, 1051], "bar": [47, 49, 54, 106, 143, 144, 147, 148, 151, 160, 168, 172, 182, 185, 191, 197, 260, 265, 274, 276, 280, 295, 321, 322, 329, 330, 358, 385, 418, 589, 640, 656, 677, 688, 1009, 1016, 1023, 1025, 1046, 1047, 1048, 1049], "bar_color": 47, "bar_kw": 640, "bar_siz": 357, "baran": 1050, "barang": 1056, "baraniuk": 424, "barankaraku": 1052, "barata": 1056, "barber": 540, "barberogaston": 1052, "bardiya": [1054, 1055], "bare": [378, 1006], "barh": [54, 151, 185, 186, 189, 190, 192, 193, 258, 323, 357, 358, 359], "barikbin": 1056, "barkhorn": 1048, "barklei": 1050, "barmalei": [1044, 1045], "barn": [700, 1006, 1045, 1047, 1050, 1058], "barnes_hut": [296, 700, 1047, 1048], "barnett": 1048, "barnhil": [601, 602], "barnowski": [1054, 1055], "barreca": [893, 1019], "barreto": 1054, "barri": [378, 1048], "barrier": 423, "barrycg": 1050, "bars_": 640, "bartelheim": 1051, "barth\u00e9lemi": [1056, 1057], "bartosz": 1049, "bart\u0142omiej": 1055, "barycent": [308, 1040], "basbug": 1047, "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 84, 91, 92, 93, 102, 104, 105, 109, 113, 120, 123, 124, 135, 137, 138, 143, 148, 149, 150, 151, 153, 156, 158, 161, 166, 169, 170, 174, 179, 180, 182, 191, 192, 193, 196, 197, 203, 204, 205, 206, 211, 212, 217, 218, 225, 234, 235, 237, 244, 251, 252, 254, 272, 273, 278, 293, 295, 296, 309, 314, 316, 317, 319, 321, 327, 329, 333, 340, 344, 350, 358, 361, 370, 377, 378, 379, 380, 381, 384, 385, 386, 387, 391, 395, 397, 398, 400, 409, 411, 413, 414, 416, 420, 421, 423, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 451, 453, 454, 455, 456, 457, 459, 463, 464, 468, 470, 471, 472, 473, 474, 494, 508, 509, 516, 517, 540, 541, 543, 544, 545, 546, 547, 549, 554, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 586, 596, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 618, 619, 624, 625, 626, 629, 632, 640, 641, 643, 644, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 672, 677, 679, 680, 681, 682, 683, 688, 690, 691, 693, 694, 695, 698, 700, 712, 725, 734, 743, 744, 745, 747, 749, 763, 764, 765, 793, 796, 803, 807, 808, 810, 811, 812, 814, 815, 817, 822, 824, 826, 827, 828, 829, 836, 838, 842, 843, 846, 854, 855, 856, 858, 860, 862, 863, 864, 869, 870, 873, 874, 877, 884, 885, 887, 891, 892, 893, 901, 904, 905, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 928, 930, 932, 941, 950, 961, 977, 998, 1000, 1001, 1003, 1004, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1033, 1035, 1036, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1058], "base_classifi": [338, 340, 1022], "base_clf": 444, "base_estim": [413, 561, 562, 563, 564, 843, 846, 909, 998, 1051, 1053, 1054, 1055, 1056, 1059], "base_estimator_": [561, 562, 563, 564, 565, 566, 571, 572, 573, 574, 618, 1055], "base_estimator__": 1055, "base_lr": [295, 843], "base_model": 414, "base_x_test": 111, "base_x_train": 111, "basebag": [1046, 1048], "basebal": [57, 378], "basedecisiontre": [1048, 1049, 1052], "basedictionarylearn": 1040, "baseensembl": [1047, 1050], "baseestim": [2, 91, 135, 251, 296, 383, 396, 397, 425, 430, 432, 433, 437, 438, 439, 609, 640, 641, 948, 961, 1040, 1047, 1050, 1052, 1054, 1055, 1059], "basegradientboost": 1041, "baselabelpropag": 1047, "baselibsvm": 1050, "baselin": [62, 137, 147, 150, 161, 172, 193, 197, 235, 269, 285, 295, 327, 358, 380, 415, 424, 559, 560, 642, 1009, 1012, 1056], "baseline_similar": 182, "baseline_similarity_bound": 182, "basemap": [50, 309], "basemixtur": [1048, 1049], "basemultilayerperceptron": [1048, 1050], "basenb": 1050, "baserandomproject": [904, 905], "basesearchcv": [1047, 1048], "basesgd": 1023, "basesgdclassifi": 1049, "baseshufflesplit": 1053, "bash": [371, 391], "bashrc": 391, "basi": [2, 43, 45, 53, 128, 174, 179, 181, 218, 269, 313, 328, 346, 350, 375, 381, 384, 415, 420, 422, 459, 542, 630, 640, 647, 699, 891, 1007, 1019, 1024, 1031, 1035, 1048, 1050, 1053], "basic": [150, 173, 174, 179, 180, 183, 186, 187, 215, 289, 323, 351, 370, 372, 383, 385, 387, 395, 397, 415, 419, 420, 422, 619, 630, 908, 920, 921, 922, 923, 998, 999, 1012, 1023, 1027, 1028, 1029, 1030, 1033], "basicconfig": 123, "basil": 1047, "basilisk": 1028, "basis_1": 218, "basis_2": 218, "basri": 521, "bassett": 1005, "bastiaan": [1041, 1042], "bastian": 1048, "bat": 381, "batch": [2, 47, 50, 99, 123, 127, 309, 329, 372, 392, 397, 423, 447, 449, 454, 456, 458, 460, 539, 541, 542, 544, 545, 546, 547, 548, 550, 551, 553, 554, 672, 693, 694, 813, 826, 827, 847, 848, 849, 850, 851, 869, 870, 881, 882, 892, 905, 959, 974, 1013, 1014, 1023, 1040, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1055, 1056], "batch_dict_estim": 123, "batch_pca_estim": 123, "batch_siz": [2, 54, 57, 77, 99, 123, 126, 127, 358, 420, 456, 542, 544, 545, 546, 547, 554, 868, 869, 870, 959, 960, 974, 1041, 1048, 1051, 1053, 1054], "batch_size_": 542, "batchkarov": [1041, 1045], "batiss": 1051, "batista": [1048, 1049, 1053], "batistaki": 415, "batoul": 1053, "battista": 1051, "batula": 1047, "bauk": [1048, 1049], "baum": 453, "baumgartn": 1047, "baxlei": 1047, "bay": [2, 32, 64, 67, 140, 156, 174, 206, 265, 277, 357, 378, 413, 420, 422, 423, 544, 557, 558, 664, 847, 848, 849, 850, 851, 893, 1003, 1004, 1005, 1019, 1031, 1035, 1040, 1041, 1042, 1043, 1048, 1050, 1053, 1055], "bayer": [0, 1040, 1041, 1045, 1058], "bayesian": [2, 46, 64, 89, 100, 121, 186, 187, 196, 202, 204, 218, 223, 259, 261, 265, 266, 278, 286, 290, 301, 306, 317, 320, 321, 420, 444, 532, 536, 540, 619, 652, 653, 664, 665, 805, 806, 873, 875, 887, 892, 998, 1028, 1030, 1031, 1034, 1035, 1046, 1053], "bayesiangaussianmixtur": [2, 260, 261, 266, 806, 1008, 1046, 1048, 1049, 1053, 1054, 1058], "bayesianridg": [2, 89, 185, 197, 198, 202, 327, 635, 652, 1005, 1047, 1048, 1049, 1050, 1053, 1054, 1056, 1057], "baz": [385, 589], "baze": 1049, "bbbbbb": 99, "bbox": [48, 51, 70, 80, 129, 260, 261, 262, 265, 266, 318], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 183, 280, 352], "bc": 320, "bcde": 147, "bcross_val": 1040, "bde": 147, "bdegraaff": 1055, "bdt": 139, "beach": 1048, "beam": [140, 1040], "bear": [422, 1028], "bearer": 1048, "beatrizsmg": 1052, "beauchamp": [1041, 1044], "beaugnon": 1050, "becam": [158, 398, 1048], "becaus": [43, 44, 52, 57, 62, 64, 75, 82, 85, 105, 115, 118, 137, 142, 145, 150, 153, 172, 175, 178, 181, 190, 191, 193, 198, 203, 210, 217, 221, 223, 225, 235, 250, 251, 261, 269, 272, 275, 276, 281, 295, 296, 312, 313, 314, 316, 320, 321, 322, 323, 337, 346, 350, 357, 358, 359, 361, 365, 366, 370, 371, 378, 387, 388, 391, 395, 396, 397, 406, 409, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 428, 438, 454, 455, 468, 472, 482, 489, 490, 491, 542, 544, 560, 562, 564, 566, 568, 570, 571, 573, 576, 578, 615, 616, 619, 640, 641, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 684, 685, 686, 687, 688, 697, 707, 717, 720, 721, 729, 730, 731, 732, 754, 771, 793, 796, 802, 808, 822, 836, 840, 845, 846, 855, 858, 860, 862, 863, 864, 870, 881, 882, 890, 892, 893, 897, 898, 900, 901, 902, 903, 913, 915, 918, 921, 923, 931, 972, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1016, 1019, 1024, 1025, 1033, 1046, 1047, 1049, 1050, 1051, 1052, 1054, 1056], "becker": [415, 1033, 1043, 1052], "becom": [85, 90, 92, 106, 113, 148, 190, 219, 221, 251, 254, 277, 296, 317, 321, 346, 350, 357, 366, 377, 383, 385, 387, 391, 397, 398, 415, 417, 422, 423, 425, 447, 457, 461, 462, 464, 561, 589, 596, 597, 599, 627, 635, 666, 667, 684, 686, 886, 912, 913, 919, 1004, 1005, 1006, 1008, 1012, 1019, 1024, 1041, 1048, 1049, 1052, 1053, 1054, 1055, 1057], "bednar": 1047, "bedroom": [316, 378], "been": [0, 43, 48, 63, 79, 88, 95, 114, 128, 135, 137, 151, 172, 174, 179, 181, 190, 193, 241, 244, 246, 251, 252, 273, 275, 281, 282, 325, 326, 327, 328, 329, 331, 332, 333, 337, 357, 366, 371, 377, 378, 380, 381, 382, 383, 385, 387, 389, 391, 392, 395, 396, 397, 398, 406, 409, 412, 413, 414, 415, 417, 419, 420, 422, 425, 440, 444, 476, 478, 479, 481, 485, 494, 531, 542, 544, 557, 558, 575, 576, 589, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 641, 642, 666, 667, 674, 675, 676, 681, 683, 684, 685, 686, 728, 786, 787, 788, 801, 808, 811, 812, 814, 822, 830, 831, 836, 837, 861, 909, 912, 999, 1001, 1002, 1004, 1005, 1006, 1009, 1010, 1012, 1015, 1019, 1021, 1023, 1024, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "befor": [2, 47, 51, 62, 77, 104, 106, 109, 118, 148, 153, 158, 168, 181, 183, 184, 185, 187, 190, 191, 193, 199, 202, 204, 206, 210, 251, 269, 275, 282, 298, 299, 317, 320, 321, 323, 328, 349, 366, 370, 371, 378, 381, 383, 385, 387, 388, 389, 391, 392, 395, 397, 398, 400, 401, 409, 411, 413, 415, 416, 417, 419, 420, 422, 424, 427, 428, 450, 454, 455, 456, 466, 468, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 492, 497, 509, 542, 545, 546, 547, 548, 549, 552, 554, 555, 569, 570, 573, 575, 577, 578, 585, 596, 597, 599, 619, 635, 636, 638, 653, 674, 675, 676, 679, 684, 686, 695, 700, 702, 805, 806, 813, 814, 826, 827, 829, 834, 836, 838, 852, 853, 860, 861, 862, 863, 864, 867, 872, 873, 876, 879, 886, 890, 891, 892, 893, 897, 898, 900, 901, 902, 903, 909, 920, 921, 931, 956, 992, 999, 1005, 1006, 1009, 1015, 1019, 1023, 1024, 1025, 1029, 1030, 1040, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "beforehand": [258, 299, 1025], "begin": [57, 135, 172, 174, 270, 277, 295, 328, 357, 366, 383, 388, 389, 397, 412, 415, 422, 561, 562, 567, 569, 570, 674, 675, 684, 685, 686, 998, 1001, 1005, 1009, 1019, 1021, 1023, 1048, 1054, 1055], "beginn": 1029, "behav": [43, 51, 87, 92, 221, 269, 270, 316, 327, 346, 366, 383, 389, 396, 415, 416, 419, 892, 1005, 1019, 1024, 1026, 1029, 1040, 1047, 1049, 1053, 1054], "behavior": [62, 72, 74, 87, 185, 187, 190, 191, 205, 217, 235, 251, 258, 266, 267, 269, 278, 280, 313, 314, 316, 318, 323, 346, 366, 371, 377, 380, 383, 385, 387, 391, 392, 397, 411, 413, 414, 415, 419, 422, 423, 544, 559, 574, 674, 675, 676, 684, 685, 686, 707, 709, 737, 738, 791, 792, 795, 808, 809, 810, 813, 822, 825, 826, 827, 828, 829, 849, 885, 912, 913, 998, 1005, 1009, 1010, 1015, 1019, 1024, 1030, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "behaviour": [74, 128, 153, 218, 219, 235, 348, 383, 397, 409, 415, 422, 567, 568, 572, 573, 610, 750, 809, 810, 813, 825, 826, 827, 828, 829, 910, 920, 921, 981, 998, 999, 1009, 1019, 1048, 1051, 1052, 1055, 1056], "behind": [37, 88, 113, 137, 293, 385, 387, 391, 417, 422, 1008, 1012, 1021, 1056], "behrend": 1050, "behrouz": 1054, "behzad": 1046, "beier": 1051, "beimportantfew": 403, "being": [61, 64, 70, 80, 87, 90, 115, 118, 120, 128, 137, 141, 153, 155, 174, 179, 192, 195, 211, 251, 254, 268, 275, 314, 320, 321, 346, 350, 357, 359, 381, 382, 383, 385, 388, 395, 397, 398, 414, 415, 417, 419, 422, 423, 424, 425, 426, 428, 448, 449, 451, 452, 457, 463, 476, 482, 501, 531, 577, 648, 657, 664, 680, 682, 695, 698, 702, 720, 726, 742, 744, 791, 797, 805, 852, 853, 858, 860, 862, 863, 864, 887, 905, 957, 998, 999, 1005, 1008, 1009, 1012, 1015, 1016, 1019, 1021, 1023, 1024, 1025, 1040, 1041, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "beings": 357, "beirouti": 1047, "belatedli": 1047, "belief": [57, 275, 868, 1014], "believ": [357, 358, 391, 395, 1033], "belkin": 1006, "belkina": [700, 1006], "bell": [2, 529, 1048, 1050, 1052, 1053], "bella": 1009, "bella2012": 1009, "bellet": [1047, 1048, 1049], "belmont": [920, 921, 1025], "belong": [61, 64, 66, 90, 95, 254, 275, 325, 331, 337, 377, 378, 412, 413, 415, 416, 418, 419, 422, 430, 447, 450, 454, 455, 456, 458, 460, 531, 720, 739, 815, 821, 833, 879, 893, 964, 965, 1005, 1008, 1009, 1011, 1012, 1013, 1015, 1024, 1028], "below": [0, 2, 48, 52, 62, 63, 64, 68, 70, 90, 95, 104, 109, 113, 120, 123, 135, 141, 144, 145, 150, 167, 189, 191, 201, 213, 214, 217, 219, 233, 234, 238, 242, 246, 251, 254, 256, 258, 270, 273, 278, 280, 281, 282, 316, 320, 325, 326, 327, 328, 329, 330, 331, 332, 333, 351, 357, 365, 366, 371, 376, 377, 381, 383, 385, 387, 388, 392, 397, 398, 401, 403, 415, 417, 418, 419, 420, 422, 423, 424, 425, 451, 453, 455, 478, 479, 485, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 512, 513, 518, 539, 545, 550, 556, 590, 603, 604, 605, 606, 607, 608, 641, 654, 660, 666, 667, 675, 676, 681, 683, 700, 707, 713, 751, 771, 805, 806, 808, 819, 822, 841, 872, 875, 885, 886, 889, 895, 901, 998, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1023, 1024, 1025, 1026, 1028, 1036, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1058], "beltran": 1058, "ben": [1042, 1043, 1044, 1047, 1048, 1049, 1052, 1057], "ben3940": 1054, "benavoli": 275, "benbihi": 1049, "bench_k_mean": 93, "benchmark": [296, 327, 358, 359, 370, 376, 378, 383, 395, 401, 408, 413, 475, 523, 910], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 350, "benedek": 1056, "benedikt": 1044, "benediktsson": [1040, 1041, 1042], "benefici": [106, 108, 111, 123, 156, 269, 316, 317, 333, 409, 414, 1006], "benefit": [43, 81, 91, 108, 109, 137, 138, 148, 153, 190, 231, 241, 247, 249, 269, 298, 329, 370, 383, 392, 397, 413, 415, 455, 468, 475, 516, 575, 576, 666, 667, 674, 675, 676, 684, 685, 686, 843, 910, 912, 998, 1004, 1012, 1019, 1029, 1033, 1040, 1043, 1044, 1045, 1052, 1053, 1054, 1055], "benfield": 1047, "bengio": [275, 869, 870, 998, 1022], "bengtsson": 1044, "benhel": 384, "benhur": 1053, "benign": [172, 380, 508], "benjamin": [649, 1042, 1043, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "benjamini": [603, 1046, 1047], "benjaminirv": 1045, "benjastudio": [1048, 1049], "benn": 1048, "bennett": [172, 380, 1009], "benni": 1054, "benoit": 1057, "beno\u00eet": 1053, "benson": 57, "bentlei": 1012, "bera": 1055, "berei": 1054, "beren": 700, "berenbaum": 1056, "bereng": 1053, "berg": [378, 1041, 1042, 1052, 1057], "bergman": [1057, 1058], "bergstra": [998, 1040, 1041], "berk": 1040, "berkecanrizai": 1055, "berkelei": [649, 920, 921], "berlin": [179, 415, 420, 543, 704, 734, 764, 1009], "bernardo": 1046, "bernd": 1055, "bernhard": [44, 420, 543, 843, 878, 908, 1010, 1015, 1024, 1046], "bernhardsson": 1033, "berni": 1051, "bernoulli": [2, 314, 423, 424, 847, 848, 849, 850, 851, 868, 869, 870, 875, 1005, 1019, 1031, 1035, 1040], "bernoullinb": [2, 156, 372, 848, 849, 850, 851, 1010, 1011, 1041, 1042, 1044, 1047, 1052, 1053, 1055], "bernoullirbm": [2, 314, 869, 870, 1014, 1019, 1042, 1043, 1052, 1054, 1057], "bertin": 1033, "bertoncelj": 1051, "bertrand": [0, 404, 1040, 1046, 1047, 1052, 1053], "bertrandhaut": [1048, 1049], "besid": [158, 247, 289, 383, 388, 597, 998, 1048], "bessel": [425, 627], "bessi": 330, "besson": [1045, 1046], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 81, 89, 90, 96, 104, 105, 106, 107, 111, 117, 123, 127, 130, 131, 132, 140, 143, 147, 149, 150, 151, 153, 158, 161, 172, 174, 175, 180, 185, 190, 197, 202, 204, 206, 213, 231, 232, 233, 237, 240, 244, 249, 250, 254, 261, 262, 266, 268, 269, 273, 274, 275, 276, 279, 282, 283, 286, 287, 290, 295, 300, 305, 317, 322, 327, 328, 333, 346, 349, 350, 357, 358, 359, 364, 370, 371, 377, 380, 382, 383, 386, 389, 396, 397, 401, 406, 409, 412, 413, 414, 415, 419, 420, 422, 423, 424, 425, 438, 450, 453, 454, 456, 458, 459, 460, 466, 469, 472, 479, 489, 490, 491, 546, 553, 554, 560, 562, 564, 565, 566, 567, 568, 570, 572, 573, 574, 576, 578, 601, 602, 605, 610, 618, 619, 643, 645, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 696, 697, 698, 701, 702, 711, 716, 727, 728, 729, 730, 731, 732, 736, 737, 747, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 791, 792, 793, 795, 798, 799, 800, 801, 802, 804, 805, 806, 808, 811, 812, 822, 835, 837, 840, 845, 846, 855, 863, 869, 870, 913, 915, 918, 920, 921, 922, 923, 998, 1003, 1004, 1005, 1006, 1009, 1012, 1013, 1015, 1023, 1025, 1028, 1029, 1033, 1040, 1043, 1046, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1058], "best_alpha": 1040, "best_c": 353, "best_c_scal": 353, "best_clf": 107, "best_estim": [808, 811, 812, 822], "best_estimator_": [45, 89, 106, 107, 108, 111, 130, 250, 265, 269, 273, 275, 276, 279, 287, 300, 808, 811, 812, 822, 998, 1047], "best_idx": [57, 274], "best_index": [273, 279], "best_index_": [274, 279, 808, 811, 812, 822], "best_loss": [684, 686], "best_loss_": [869, 870, 1055], "best_low_complex": 274, "best_n_it": 466, "best_paramet": 276, "best_parameters_": 265, "best_params_": [105, 107, 150, 174, 250, 265, 273, 279, 327, 346, 396, 808, 811, 812, 822, 998], "best_recal": 273, "best_recall_std": 273, "best_recall_threshold": 273, "best_scor": 279, "best_score_": [105, 107, 250, 269, 276, 279, 280, 346, 414, 681, 683, 808, 811, 812, 822, 830, 1051], "best_score_idx": 274, "best_threshold_": [269, 289, 333, 830], "best_validation_score_": [869, 870, 1055], "beta": [2, 81, 117, 189, 221, 389, 413, 415, 418, 544, 546, 548, 555, 652, 737, 738, 744, 750, 791, 803, 805, 1009, 1042, 1045, 1047, 1049, 1050], "beta_": [221, 420], "beta_1": [869, 870], "beta_2": [869, 870], "beta_k": 420, "beta_loss": [54, 546, 548, 555, 1047], "betatim": 1055, "better": [43, 44, 48, 52, 57, 58, 61, 67, 85, 90, 108, 109, 111, 112, 113, 114, 118, 120, 123, 126, 140, 143, 148, 149, 150, 153, 158, 167, 178, 179, 180, 182, 185, 190, 192, 198, 202, 203, 206, 217, 218, 219, 225, 232, 234, 235, 241, 249, 250, 251, 254, 265, 268, 269, 275, 277, 278, 281, 284, 285, 293, 295, 314, 320, 321, 329, 330, 346, 353, 357, 358, 359, 361, 366, 370, 378, 382, 383, 384, 385, 388, 389, 391, 397, 400, 403, 411, 413, 415, 417, 419, 420, 421, 422, 423, 425, 456, 457, 546, 548, 555, 567, 568, 569, 570, 615, 616, 638, 679, 685, 700, 717, 733, 742, 747, 750, 771, 806, 837, 847, 848, 849, 850, 851, 852, 853, 858, 869, 870, 889, 890, 893, 901, 904, 905, 912, 913, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1017, 1019, 1022, 1023, 1025, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "better_prob": 275, "between": [2, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 88, 95, 96, 101, 117, 120, 126, 128, 131, 137, 140, 143, 147, 148, 150, 153, 167, 174, 179, 180, 182, 187, 189, 190, 191, 192, 197, 202, 203, 205, 208, 212, 213, 217, 218, 219, 221, 222, 225, 235, 237, 244, 249, 251, 254, 267, 269, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 287, 289, 293, 295, 298, 302, 303, 305, 306, 316, 321, 323, 328, 333, 338, 346, 350, 352, 353, 357, 358, 359, 365, 366, 370, 371, 378, 383, 385, 387, 391, 392, 395, 396, 397, 398, 406, 409, 412, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 436, 447, 448, 451, 452, 453, 454, 457, 459, 460, 461, 463, 464, 465, 470, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 522, 523, 529, 532, 535, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 557, 558, 561, 562, 567, 568, 570, 571, 572, 573, 592, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 619, 628, 635, 640, 641, 642, 647, 650, 653, 654, 655, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 684, 686, 687, 689, 692, 696, 698, 700, 702, 703, 704, 707, 709, 711, 712, 713, 715, 717, 718, 722, 723, 724, 725, 727, 732, 733, 734, 737, 738, 739, 742, 744, 745, 751, 760, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 800, 801, 803, 804, 805, 806, 808, 809, 810, 811, 813, 817, 825, 826, 827, 828, 829, 837, 838, 840, 842, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 869, 870, 876, 879, 880, 882, 883, 885, 886, 889, 890, 891, 893, 898, 901, 902, 906, 912, 913, 917, 920, 921, 922, 923, 925, 953, 965, 966, 977, 998, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1029, 1030, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "bewar": 424, "beyond": [43, 64, 218, 219, 269, 370, 372, 382, 383, 395, 413, 422, 737, 738, 746, 791, 792, 795, 917, 1006, 1010, 1019, 1024, 1029, 1048], "beyst": 1054, "bezuidenhout": 1053, "bf5fff": 121, "bfg": [312, 618, 619, 656, 657, 666, 677, 680, 682, 688, 695, 1012, 1013, 1055], "bgm": 805, "bharat": [419, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "bharathi": 1051, "bhardwaj": [1047, 1048], "bhargav": 1046, "bhaskaran": [1047, 1048], "bhat": [1053, 1055, 1056, 1057], "bhattacharya": 1048, "bhattarai": 1050, "bhavika": 1052, "bhoomika": 1055, "bhsu": 1044, "bhtsne": [700, 1047], "bi": [90, 423], "bia": [43, 64, 111, 125, 136, 144, 145, 150, 153, 187, 190, 192, 197, 198, 200, 280, 311, 350, 353, 366, 378, 397, 413, 417, 421, 422, 425, 532, 564, 567, 568, 615, 616, 622, 650, 656, 657, 666, 667, 677, 678, 688, 869, 870, 885, 887, 891, 897, 898, 900, 901, 902, 903, 921, 930, 1004, 1005, 1008, 1009, 1013, 1014, 1017, 1023, 1030], "bianca": 64, "bianp": 389, "bias": [48, 115, 126, 150, 157, 189, 190, 192, 280, 378, 400, 413, 422, 532, 557, 868, 892, 903, 1004, 1008, 1017, 1023, 1025], "bibhash": [1050, 1051], "bibl": 358, "bibliograph": 383, "bibtex": 0, "bic": [2, 163, 187, 196, 202, 203, 204, 205, 211, 225, 424, 509, 659, 661, 662, 663, 664, 806, 873, 892, 998, 1008, 1030, 1040, 1047, 1053, 1054], "bic_criterion": 204, "bicker": 1050, "biclust": [2, 6, 59, 104, 337, 339, 357, 358, 359, 423, 430, 456, 458, 460, 495, 519, 521, 599, 727, 803, 1009, 1030, 1034, 1035, 1042, 1046], "bicluster_ncut": 57, "biclustermixin": 2, "biclusters_": [58, 59, 430, 458, 460], "bidu": [1053, 1054], "biernat": 1052, "big": [43, 79, 95, 97, 222, 238, 254, 266, 371, 383, 389, 398, 417, 423, 427, 546, 569, 570, 572, 573, 814, 836, 847, 848, 849, 850, 851, 1029, 1033, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "bigg": [425, 627], "bigger": [47, 75, 95, 230, 275, 314, 350, 355, 358, 369, 371, 423, 445, 446, 516, 546, 858, 1035], "biggest": [415, 418, 420, 450], "biggest_inertia": [415, 450], "biggio": 1051, "bigram": [276, 423, 596, 597, 599], "bigram_vector": 423, "bijil": 1054, "bike": 1016, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 191], "bilbro": 1047, "bill": [1050, 1051], "billaud": 1048, "billi": 1044, "billing": [1043, 1044, 1045], "billion": 1033, "bimod": [320, 421], "bin": [2, 43, 61, 62, 64, 88, 109, 139, 143, 217, 248, 254, 269, 281, 301, 316, 317, 318, 319, 320, 322, 323, 381, 391, 401, 413, 421, 422, 445, 446, 455, 468, 569, 570, 875, 877, 891, 958, 1048, 1049, 1050, 1054, 1058, 1059], "bin_cent": [88, 217], "bin_edg": 88, "bin_edges_": [88, 317, 877], "bin_seed": [79, 98, 455, 468, 1051], "binar": [2, 36, 282, 284, 285, 375, 377, 762, 847, 876, 877, 879, 883, 885, 893, 896, 1009, 1011, 1035, 1054, 1056], "binari": [2, 30, 47, 53, 62, 64, 141, 143, 154, 156, 169, 182, 190, 195, 208, 210, 217, 225, 238, 245, 254, 257, 269, 272, 273, 278, 284, 289, 291, 293, 300, 346, 350, 365, 366, 377, 378, 379, 387, 388, 397, 401, 409, 412, 413, 414, 415, 422, 423, 425, 444, 445, 446, 459, 494, 508, 516, 517, 528, 531, 557, 558, 561, 563, 567, 569, 574, 575, 576, 589, 596, 597, 599, 601, 602, 610, 618, 635, 636, 637, 638, 639, 640, 641, 666, 667, 674, 676, 681, 682, 683, 684, 708, 711, 715, 716, 717, 720, 721, 723, 726, 728, 730, 735, 737, 738, 742, 743, 746, 747, 748, 749, 750, 751, 790, 791, 792, 795, 796, 797, 802, 804, 807, 808, 809, 811, 812, 813, 814, 822, 826, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 847, 858, 868, 879, 883, 885, 893, 896, 912, 914, 917, 928, 971, 999, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1037, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1054, 1055, 1057, 1058], "binary_crossentropi": 1054, "binary_eros": 53, "binary_onli": [1050, 1051], "binarytre": [857, 1044, 1048, 1052], "bincount": [397, 419, 565, 569, 572, 666, 667, 674, 676, 682, 683, 684, 912, 914, 917, 920, 922, 943, 944, 1047], "bind": [401, 1028, 1040, 1047, 1048], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365], "binesh": [1056, 1057], "binet": [1050, 1055], "bing": [1046, 1047], "bingham": 1021, "binned_numer": [217, 235], "binom": 1005, "binomi": [149, 152, 422, 561, 567, 569, 1005, 1054, 1057], "bio": 278, "biocsklearn": 1028, "bioinformat": [636, 999], "biola": 1058, "biologi": 50, "biometrika": [888, 900], "biostatist": [417, 485], "bipartit": [412, 460, 519, 1014], "biprateep": 1052, "birch": [2, 71, 79, 99, 187, 329, 372, 397, 453, 456, 520, 1030, 1034, 1035, 1044, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1059], "birch_model": 77, "bird": [590, 726, 762, 1009], "birodkar": [1045, 1046, 1048], "bischl": 377, "bisect": [2, 71, 75, 92, 94, 95, 96, 183, 187, 271, 450, 454, 520, 1030, 1054], "bisect_km": 329, "bisect_mean": 450, "bisecting_strategi": [415, 450], "bisectingkmean": [2, 78, 415, 1054, 1055, 1056], "bisector": 70, "bishop": [540, 542, 549, 749, 805, 1005, 1010, 1024], "bistochast": [412, 458], "biswadip": 1050, "biswaroop": 1055, "bit": [43, 52, 64, 83, 88, 111, 126, 215, 219, 293, 316, 346, 358, 366, 370, 378, 381, 397, 401, 403, 422, 423, 590, 597, 666, 842, 938, 939, 1006, 1010, 1027, 1040, 1043, 1046, 1048, 1049, 1052, 1053, 1054, 1057, 1058], "bithash": 648, "bithash_": 648, "bitli": 1033, "bitmap": 380, "bittarello": 1053, "bjerr": 1048, "bla": [370, 371, 381, 384, 389, 391, 786, 1040, 1048, 1049, 1051, 1052, 1058], "black": [43, 48, 49, 50, 52, 63, 70, 79, 84, 90, 91, 113, 114, 121, 123, 125, 146, 167, 170, 174, 175, 179, 180, 183, 186, 190, 191, 197, 204, 206, 207, 209, 213, 217, 218, 219, 223, 226, 229, 230, 235, 244, 254, 260, 263, 301, 311, 312, 314, 340, 355, 362, 363, 364, 383, 401, 408, 415, 422, 425, 563, 564, 639, 1015, 1016, 1025], "blackberri": 322, "blackburn": [1043, 1046], "blackd0t": 1050, "blair": [45, 378], "blakeflei": 1046, "blame": 383, "blanc": 322, "blanchard": [1044, 1045], "blank": [95, 388, 999, 1025], "bldgtype": 147, "bleed": 1033, "blei": [420, 544, 805], "bleich": [191, 1016], "bleki": 1052, "blend": [146, 158, 322, 397, 419], "bli": [371, 381, 395], "blind": [122, 125, 187, 216, 357, 420, 541, 549, 1030], "blink": 346, "blis_num_thread": 371, "blob": [2, 61, 69, 70, 77, 79, 92, 97, 99, 415, 455, 520], "blobs_param": 244, "block": [2, 301, 316, 329, 378, 380, 383, 388, 391, 397, 412, 415, 418, 421, 459, 460, 469, 480, 486, 487, 495, 496, 519, 521, 703, 1012, 1014], "block_siz": [480, 486, 487, 1044], "blocker": [387, 1058], "blocknum": 47, "blockwis": [412, 1005], "blog": [329, 370, 383, 389, 391, 398, 1051], "blogpost": 388, "blondel": [0, 405, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1053], "blood": [172, 245, 380], "bloom": [392, 973], "blown": 349, "blue": [46, 48, 52, 58, 59, 63, 70, 113, 121, 123, 137, 140, 144, 152, 153, 155, 158, 160, 170, 179, 181, 195, 198, 204, 206, 213, 215, 240, 248, 268, 269, 270, 275, 312, 321, 326, 332, 337, 380, 415, 420, 1057], "blueviolet": [231, 302, 345], "blum": 1047, "blyston": [1050, 1051], "bmaisonn": 1052, "bmalezieux": 1053, "bmatrix": [412, 1001], "bmc": 1019, "bme": 1058, "bmi": [172, 204, 206, 255, 380, 1017], "bmreinig": 1054, "bmug": 57, "bmva": 679, "bmvc": [679, 1005], "bo": [63, 1052], "board": 0, "boat": 330, "bob": [1041, 1047], "bobyrev": 1047, "boca": 1005, "bodega": 322, "bodenhof": [412, 727], "bodi": [47, 104, 172, 255, 330, 380], "body_bow": 104, "body_stat": 104, "boe": 51, "boechat": 1047, "boenisch": 1051, "boerner": 1054, "boersma": 1046, "bogazici": 380, "bogdan": 1040, "boggavarapu": 1052, "bohl": [1052, 1054], "bohn\u00e9": 1053, "boil": [137, 386, 397, 417], "boilerpl": [251, 385, 1033], "boisberrang": [0, 404, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "bold": [95, 150, 206, 212, 383], "boll": 1005, "bolleddula": 1058, "bolmier": [1051, 1052, 1056], "boltzmann": [2, 107, 117, 187, 207, 310, 510, 666, 721, 838, 868, 869, 870, 872, 898, 1030, 1034, 1035, 1042], "bommarito": [1043, 1044], "bonald": 1055, "bone": [230, 355], "bonferroni": 275, "bonu": [235, 381, 383], "bonusmalu": [217, 235], "boo": [172, 380], "book": [83, 104, 450, 454, 456, 842, 847, 851, 1005, 1006, 1007, 1010, 1052], "booktitl": 0, "bool": [84, 101, 114, 186, 235, 365, 383, 427, 428, 429, 430, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 527, 530, 531, 532, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 708, 710, 711, 715, 716, 717, 719, 720, 721, 722, 734, 735, 736, 737, 738, 739, 746, 749, 750, 762, 764, 769, 771, 775, 777, 782, 786, 790, 791, 792, 793, 795, 797, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 822, 826, 827, 830, 831, 832, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 934, 936, 937, 938, 939, 950, 951, 956, 957, 970, 973, 979, 981, 989, 994, 995, 996, 997, 999, 1049, 1052, 1053], "bool_": 219, "boolean": [2, 135, 251, 365, 378, 383, 385, 392, 416, 422, 423, 424, 471, 569, 570, 589, 590, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 637, 640, 641, 644, 657, 679, 707, 786, 841, 847, 868, 875, 895, 929, 934, 992, 999, 1005, 1011, 1016, 1019, 1025, 1040, 1043, 1045, 1046, 1047, 1049, 1050, 1051, 1053, 1054, 1055, 1058], "boom": 1058, "boost": [2, 14, 46, 52, 105, 136, 137, 138, 141, 142, 144, 145, 155, 158, 161, 181, 187, 193, 198, 219, 225, 240, 274, 276, 312, 320, 322, 329, 332, 384, 389, 397, 414, 424, 455, 473, 474, 497, 504, 509, 528, 561, 562, 567, 568, 569, 570, 572, 573, 640, 641, 642, 643, 749, 750, 756, 758, 798, 808, 811, 812, 813, 829, 835, 838, 873, 885, 886, 1005, 1009, 1028, 1030, 1031, 1035, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1053], "booster": 1045, "boosting_error": 137, "boostingcolumntransform": 158, "boostingdecis": 422, "booth": 1047, "bootstrap": [140, 141, 149, 185, 278, 287, 327, 419, 422, 562, 563, 564, 565, 566, 571, 572, 573, 944, 979, 1005, 1040, 1041, 1043, 1045, 1048, 1050, 1053], "bootstrap_featur": [422, 563, 564], "bootstrap_indic": 278, "borchmann": 1055, "border": [453, 1050], "borderaxespad": 113, "borderpad": 362, "borderwidth": 143, "borg": [698, 702, 1006], "borgn": 1053, "bori": [1044, 1052, 1056], "borja": 1044, "born": 1046, "borovec": 1054, "borovikova": 1051, "bosch": 1053, "bossan": [1052, 1054, 1055, 1056, 1058], "bossch": [0, 404, 1047, 1048, 1049, 1053], "boston": 1033, "bot": [383, 387, 1014, 1054, 1057, 1058], "botelho": 1052, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 70, 77, 89, 90, 99, 105, 111, 113, 117, 118, 128, 130, 135, 140, 143, 144, 147, 148, 153, 157, 158, 161, 167, 168, 170, 172, 174, 181, 183, 189, 190, 191, 192, 197, 202, 203, 204, 206, 217, 218, 219, 221, 222, 223, 225, 235, 241, 250, 251, 252, 260, 261, 262, 263, 264, 265, 269, 275, 276, 277, 278, 282, 284, 286, 291, 296, 308, 316, 320, 321, 325, 327, 331, 337, 338, 343, 348, 350, 357, 358, 359, 365, 366, 370, 371, 372, 376, 377, 378, 381, 383, 385, 389, 390, 392, 395, 396, 397, 398, 401, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 428, 444, 453, 459, 469, 475, 482, 489, 490, 491, 492, 495, 496, 504, 505, 508, 510, 513, 515, 516, 517, 542, 546, 548, 555, 559, 563, 564, 565, 571, 572, 573, 574, 575, 585, 596, 597, 599, 605, 615, 616, 635, 640, 641, 651, 665, 666, 667, 680, 682, 684, 686, 695, 707, 712, 720, 724, 737, 738, 739, 744, 746, 765, 769, 775, 782, 786, 791, 792, 795, 796, 797, 803, 811, 812, 814, 831, 841, 869, 870, 884, 886, 888, 900, 905, 910, 912, 913, 920, 922, 929, 942, 948, 957, 971, 983, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "botstein": [636, 999], "bottleneck": [370, 389, 422, 455, 869, 870], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 80, 86, 88, 97, 99, 121, 148, 156, 161, 217, 228, 244, 260, 262, 263, 266, 272, 275, 286, 301, 316, 336, 338, 346, 383, 413, 415, 421, 595, 924, 1003, 1005, 1009, 1017, 1029], "bottom_h": 316, "bottou": [684, 685, 686, 1013, 1023], "bou": [1055, 1056], "boucaud": 1048, "boucher": 1047, "bouckaert": 275, "boukhobza": 1058, "boulard": 1057, "bould": 415, "bouldin": [2, 733], "boulogn": 1043, "boun": 380, "bound": [2, 64, 90, 178, 180, 182, 187, 219, 235, 243, 274, 390, 415, 420, 423, 425, 426, 451, 496, 510, 520, 531, 544, 571, 603, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 640, 643, 645, 658, 662, 666, 685, 713, 743, 796, 805, 806, 852, 853, 889, 901, 904, 905, 906, 914, 915, 916, 919, 942, 1005, 1008, 1009, 1012, 1021, 1023, 1024, 1026, 1030, 1048, 1051, 1052, 1054], "bound_": 544, "boundari": [2, 50, 53, 62, 63, 64, 67, 70, 93, 95, 136, 139, 146, 156, 160, 165, 175, 176, 178, 187, 191, 201, 218, 226, 244, 249, 252, 278, 290, 291, 304, 306, 307, 309, 311, 316, 318, 321, 334, 339, 341, 343, 344, 345, 346, 348, 354, 355, 362, 379, 413, 422, 423, 425, 457, 463, 512, 544, 557, 558, 577, 596, 597, 599, 639, 743, 769, 808, 841, 854, 860, 862, 863, 864, 887, 891, 908, 909, 914, 916, 917, 920, 942, 1003, 1012, 1015, 1019, 1022, 1023, 1024, 1030, 1040, 1042, 1044, 1053, 1054, 1055, 1057], "bounding_ax_": [390, 640], "boundscheck": [371, 384], "bourassa": 422, "bourbeau": [1047, 1048, 1049], "bourboux": 1051, "bourguignat": 1045, "bournhonesqu": 1050, "bousquet": 908, "boutili": 1021, "boutsidi": 420, "bow": 416, "bown": 1046, "bowyer": 1058, "box": [43, 49, 66, 90, 191, 192, 238, 293, 316, 320, 390, 420, 422, 520, 563, 564, 888, 900, 924, 926, 1009, 1010, 1016, 1019, 1025, 1048, 1056], "boxcox": 1059, "boxplot": [49, 113, 151, 190, 193, 289, 325], "boxplot_runtim": 49, "boxstyl": [48, 318], "boy": 1054, "boyd": 1005, "boyl": [1057, 1058], "boyuan": [1044, 1045, 1046], "bp": [49, 151, 172, 204, 206, 380, 1017], "bpo": 886, "br": 139, "br_estim": 185, "bracket": [383, 1005], "bradi": 1047, "bradlei": [172, 380, 1005], "bradshaw": [1043, 1044, 1047], "bradypu": [50, 309, 378, 506], "bradypus_variegatus_0": 50, "brain": 377, "branch": [370, 381, 383, 386, 387, 415, 422, 449, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 920, 921, 922, 923, 925, 1012, 1016, 1025], "branching_factor": 449, "brand": [398, 401], "brandon": [1046, 1047, 1054, 1055], "brandt": 1051, "brandyn": 1040, "brault": 1047, "braun": 1048, "bravi": 1046, "braycurti": [457, 464, 707, 786, 787, 788, 1012], "braycurtisdist": 707, "brc": [415, 449], "brdav": 1058, "bre": [2, 642, 1025], "bread": 1033, "breadth": [852, 853, 857, 1033, 1042], "breadth_first": [852, 853, 857], "break": [2, 55, 74, 81, 104, 114, 187, 206, 209, 223, 251, 262, 293, 328, 336, 341, 357, 359, 383, 387, 389, 396, 415, 476, 520, 647, 782, 786, 789, 805, 885, 892, 897, 914, 917, 931, 1005, 1008, 1017, 1019, 1024, 1029, 1030, 1040, 1041, 1047, 1048, 1050, 1052, 1056], "break_ti": [354, 914, 917, 1024, 1050], "breakdown": [113, 114, 234, 687, 1005], "breakdown_": 687, "breast": [2, 172, 376, 508, 1017, 1035, 1045], "breast_canc": 338, "breast_cancer_data": 172, "brecht": 649, "bredin": 1044, "breiman": [192, 419, 422, 524, 525, 526, 563, 564, 572, 573, 642, 920, 921, 1017, 1025], "brekk": 1055, "brendan": [73, 447, 461, 1056, 1057, 1058], "brenden": 1054, "brenner": 1009, "breno": [1047, 1048], "brent": [1044, 1048, 1049], "brentfagan": 1049, "bresson": 1059, "brett": [1043, 1045, 1046, 1047, 1048, 1055], "brettingen": 1046, "breuer": 1051, "breunig": [415, 457, 464, 858, 1015], "breve": 1056, "brevin": [1056, 1057], "brew": [149, 381, 401], "brian": [0, 405, 716, 1009, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1053, 1054], "brice": [1052, 1053], "bridg": [395, 1006], "brief": [383, 1007], "briefli": [284, 382, 396, 422, 998, 1050], "brier": [2, 61, 62, 64, 413, 717], "brier1950": 1009, "brier_scor": 61, "brier_score_loss": [2, 61, 62, 413, 1009, 1048, 1049, 1050, 1058], "brigata": 380, "bright": 346, "brighter": 182, "brigi": [1051, 1052], "brigitta": [1050, 1051, 1052, 1056, 1058], "bring": [190, 316, 420, 684, 686, 1006, 1033], "british": 423, "brittl": [74, 415], "broad": [383, 397, 1028], "broadcast": 635, "broader": [318, 1005, 1032], "broadli": [397, 415], "brocchini": 1052, "brochart": 1057, "brockherd": 1042, "brodersen": 716, "broke": 1047, "broken": [401, 419, 607, 608, 643, 728, 934, 1009, 1025, 1043, 1047, 1048, 1049, 1051, 1054], "brook": [1043, 1044, 1052], "brought": [189, 561, 562, 565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923], "brown": [50, 121, 309, 378, 506, 636, 999, 1045, 1047, 1048, 1049, 1052], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 383, 391, 1019, 1057], "broyden": 1005, "brr": 197, "brr_poli": 197, "brr_score": 197, "bruce": [1050, 1051], "brucher": [0, 405, 1040], "brummitt": [1047, 1048], "brunak": 751, "brunner": 1044, "bruno": [1051, 1052, 1053, 1058], "brutal": 346, "brute": [296, 395, 410, 419, 426, 451, 453, 457, 464, 640, 641, 696, 697, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 1016, 1035, 1044, 1048, 1052, 1055, 1056, 1057, 1058], "bry": [209, 226], "bryan": [1040, 1043, 1049, 1050, 1053], "br\u00f6mmel": [1054, 1055], "br\u00fblade": 322, "bsa": 772, "bsas_in_radian": 772, "bscikit": 1040, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 389, 395], "bsh": 1055, "bsmtfinsf1": [147, 158], "bsmtfinsf2": 147, "bsmthalfbath": 147, "bsmtunfsf": 158, "bspline": 891, "bsplines_": [218, 891], "bsr": [938, 939, 1053], "bt": 423, "btol": [680, 682], "buck": 635, "budarz": 1053, "buddha": 1045, "budget": [0, 147, 847, 848, 849, 850, 851, 998], "bueno": 772, "buffer": [85, 1053, 1058], "buffer_mb": 1040, "bug": [251, 325, 326, 327, 328, 329, 330, 331, 332, 333, 381, 385, 386, 387, 388, 391, 395, 397, 1029, 1040, 1041, 1042, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "bugfix": [1040, 1054], "buguen": 1040, "buhmann": 716, "build": [0, 2, 7, 17, 35, 43, 46, 55, 68, 78, 90, 102, 108, 127, 137, 146, 148, 155, 161, 169, 171, 184, 185, 187, 190, 225, 280, 283, 293, 295, 296, 313, 314, 317, 322, 323, 359, 366, 370, 371, 372, 379, 385, 386, 387, 388, 389, 397, 401, 408, 415, 419, 422, 423, 449, 497, 509, 511, 532, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 593, 594, 596, 597, 599, 635, 636, 638, 699, 721, 722, 809, 813, 817, 826, 832, 834, 873, 890, 892, 920, 921, 922, 923, 925, 952, 998, 999, 1006, 1009, 1013, 1015, 1019, 1024, 1025, 1028, 1029, 1030, 1032, 1033, 1040, 1043, 1045, 1046, 1047, 1049, 1052], "build_analyz": [423, 596, 597, 599, 1050], "build_preprocessor": [423, 596, 597, 599, 1050], "build_projection_oper": 53, "build_token": [57, 423, 596, 597, 599], "build_tool": [383, 387, 391], "builder": [47, 49, 353, 387], "buildtool": 381, "built": [2, 25, 66, 118, 135, 137, 138, 146, 148, 192, 225, 278, 293, 309, 325, 362, 365, 370, 378, 381, 383, 384, 385, 387, 389, 391, 392, 395, 396, 397, 401, 409, 415, 416, 419, 422, 424, 452, 511, 561, 562, 563, 564, 567, 568, 569, 570, 596, 597, 601, 605, 647, 648, 649, 650, 651, 654, 655, 660, 666, 668, 669, 670, 671, 680, 681, 682, 683, 689, 811, 812, 819, 843, 846, 852, 853, 922, 923, 961, 992, 1005, 1009, 1010, 1022, 1023, 1025, 1028, 1033, 1040, 1043, 1044, 1046, 1052, 1058], "builtin": 1024, "buitinck": [0, 405, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "bulk": [284, 426, 451], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": 1047, "buluttekin": 1050, "bumblebe": 1053, "bunch": [2, 50, 251, 376, 377, 378, 471, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 518, 575, 576, 577, 578, 640, 641, 642, 871, 872, 920, 921, 922, 923, 965, 968, 1033, 1045, 1047, 1050, 1052, 1056], "bundl": [1048, 1049], "bupu": 191, "burden": [383, 884, 1029], "bureau": 378, "buri": 383, "burjek": 1040, "burk": [0, 367, 1055], "burn": [1047, 1048], "burst": 1009, "busch": [1048, 1049, 1051], "bush": [45, 378], "busi": [43, 217, 275, 333, 391, 395, 414, 796, 1005, 1009, 1033], "business_metr": 269, "business_scor": 269, "bussonni": [1040, 1052], "butler": [481, 1043, 1051, 1052], "butlerdavi": 481, "butter": 1033, "button": [383, 391], "butyugina": 1056, "buuren": [635, 999], "buzenet": [1055, 1056], "bv_bunch": 50, "bwignal": 1043, "bypass": [414, 416, 607, 654, 660, 830, 920, 921, 922, 923, 1056], "byproduct": 241, "byrd": 666, "byron": 1052, "byte": [83, 88, 423, 494, 511, 516, 517, 590, 596, 597, 599, 973, 1040, 1047, 1048, 1055, 1058], "bz2": [55, 516, 517], "bz2file": 55, "bzip2": 1040, "b\u00e9gude": 322, "c": [2, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 80, 87, 91, 92, 94, 95, 96, 100, 105, 106, 108, 118, 120, 121, 128, 129, 137, 139, 140, 146, 147, 154, 156, 157, 159, 160, 165, 172, 175, 176, 177, 178, 182, 195, 201, 205, 207, 208, 209, 210, 212, 214, 215, 224, 226, 228, 229, 230, 231, 233, 234, 237, 239, 241, 242, 249, 250, 252, 256, 261, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 278, 280, 284, 286, 296, 299, 302, 304, 305, 306, 307, 309, 311, 312, 314, 316, 317, 318, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 362, 363, 364, 370, 371, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 395, 401, 402, 406, 412, 413, 415, 416, 417, 418, 419, 420, 422, 424, 428, 444, 449, 450, 453, 454, 456, 466, 475, 482, 531, 536, 542, 546, 548, 549, 555, 557, 558, 598, 615, 616, 618, 639, 647, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 678, 680, 681, 687, 693, 694, 696, 697, 700, 701, 716, 722, 723, 726, 739, 743, 749, 750, 766, 767, 808, 822, 831, 837, 839, 847, 848, 849, 850, 851, 852, 853, 859, 861, 868, 883, 885, 886, 887, 891, 893, 907, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 927, 938, 939, 971, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1016, 1019, 1021, 1023, 1024, 1025, 1028, 1033, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1056, 1058], "c0": [147, 247, 322], "c1": [100, 147, 182, 247, 322], "c2": [100, 147, 182, 247, 322], "c22": 330, "c26": 330, "c3": [100, 147, 322], "c4": [100, 322, 1031, 1035], "c5": [100, 1031, 1035], "c56poni": 1050, "c6": 100, "c99": 1028, "c_": [50, 62, 63, 64, 93, 113, 124, 146, 149, 155, 156, 165, 176, 215, 230, 233, 244, 302, 319, 321, 340, 346, 354, 355, 415, 667, 722, 723, 726, 1009], "c_0": [1001, 1007], "c_1": 1006, "c_2": [415, 1006], "c_2d_rang": 346, "c_e": 415, "c_i": [415, 1012], "c_j": [415, 1014], "c_jh_j": 1014, "c_k": 557, "c_option": 106, "c_p": 1005, "c_q": 415, "c_rang": 346, "c_scale": 353, "ca": [172, 380, 415, 449, 920, 921, 1021, 1025], "cabernet": 322, "cabin": 330, "cablevis": 51, "cabrera": 1050, "cach": [2, 52, 89, 101, 187, 276, 296, 297, 299, 304, 308, 370, 371, 378, 397, 448, 452, 457, 475, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 510, 516, 517, 808, 854, 856, 872, 873, 910, 914, 915, 916, 917, 918, 993, 1012, 1024, 1030, 1043, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1058, 1059], "cache_path": 1012, "cache_s": [475, 910, 914, 915, 916, 917, 918, 1024], "cached_pip": [106, 416], "cachedir": [89, 106, 392, 416], "caching_dir": 993, "caherrera": 1053, "cai": 1053, "caicedo": 1040, "cailean": 1058, "cainei": 1058, "caio": [1046, 1048, 1050], "caj": 51, "caje": 1041, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 378, "cal_scor": 63, "calcot": 1053, "calcsiz": 381, "calcul": [2, 46, 61, 63, 69, 81, 94, 113, 135, 136, 137, 141, 159, 186, 187, 193, 213, 221, 222, 234, 249, 251, 274, 275, 281, 285, 290, 295, 344, 350, 351, 366, 370, 390, 397, 406, 412, 413, 415, 419, 420, 422, 426, 445, 450, 451, 453, 455, 457, 458, 460, 462, 463, 478, 479, 485, 488, 544, 555, 561, 571, 572, 577, 605, 619, 628, 640, 641, 642, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 687, 689, 692, 696, 698, 700, 702, 715, 724, 737, 738, 743, 744, 746, 752, 762, 772, 777, 779, 780, 781, 782, 786, 789, 791, 792, 795, 796, 797, 800, 801, 803, 815, 817, 833, 837, 850, 852, 853, 890, 891, 892, 898, 902, 912, 913, 944, 958, 1001, 1003, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1017, 1019, 1022, 1024, 1030, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "cald": 907, "caleb": 1052, "calibr": [2, 52, 66, 140, 153, 160, 235, 247, 269, 275, 277, 397, 406, 444, 445, 446, 520, 523, 572, 577, 666, 667, 684, 717, 737, 749, 792, 795, 796, 807, 830, 838, 850, 909, 912, 947, 998, 1005, 1009, 1022, 1024, 1030, 1031, 1035, 1037, 1044, 1046], "calibrated_classifi": 63, "calibrated_classifiers_": [63, 413, 444], "calibrated_clf": 444, "calibrated_df": [62, 64], "calibrated_forest": 998, "calibratedclassifiercv": [2, 61, 62, 63, 366, 397, 406, 413, 684, 807, 830, 998, 1024, 1029, 1044, 1046, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "calibratedclassifiercvifittedcalibratedclassifiercv": 63, "calibration_curv": [2, 61, 413, 444, 445, 1049, 1054, 1058], "calibration_displai": [62, 64], "calibrationdisplai": [2, 62, 64, 413, 947, 1053, 1054, 1058], "california": [2, 148, 182, 185, 186, 316, 322, 327, 376, 380, 497, 1035], "calinski": [2, 718, 1046], "calinski_harabasz_scor": [2, 415, 1048], "calinski_harabaz_scor": [1046, 1048], "cali\u0144ski": 415, "call": [52, 53, 55, 81, 83, 85, 89, 105, 121, 135, 142, 149, 169, 174, 178, 180, 182, 189, 191, 204, 217, 218, 221, 235, 245, 251, 255, 257, 258, 269, 275, 276, 284, 290, 291, 293, 296, 298, 321, 323, 327, 328, 357, 358, 359, 365, 370, 371, 372, 378, 383, 384, 385, 388, 389, 390, 391, 392, 395, 396, 397, 398, 401, 406, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 427, 438, 447, 450, 453, 454, 456, 457, 458, 459, 460, 461, 464, 467, 469, 471, 472, 475, 476, 481, 489, 490, 491, 495, 498, 500, 503, 505, 511, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 585, 590, 591, 596, 597, 599, 605, 610, 615, 616, 618, 619, 622, 628, 635, 636, 637, 638, 639, 640, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 712, 740, 750, 763, 779, 782, 786, 787, 788, 789, 801, 805, 806, 807, 808, 810, 811, 812, 813, 814, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 857, 858, 861, 863, 868, 869, 870, 871, 872, 875, 876, 877, 879, 881, 882, 884, 889, 892, 893, 896, 901, 902, 903, 904, 905, 909, 912, 913, 914, 915, 917, 918, 921, 923, 931, 933, 946, 950, 955, 956, 965, 966, 968, 974, 975, 979, 982, 992, 997, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1021, 1022, 1024, 1025, 1028, 1033, 1035, 1037, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "callabl": [2, 265, 279, 333, 397, 419, 422, 423, 424, 426, 427, 448, 450, 451, 452, 453, 454, 456, 457, 459, 464, 466, 467, 471, 472, 473, 474, 539, 541, 543, 545, 547, 553, 554, 565, 566, 567, 568, 569, 570, 572, 573, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 618, 619, 628, 636, 638, 642, 647, 651, 667, 679, 681, 683, 696, 699, 700, 704, 719, 727, 740, 750, 779, 782, 786, 787, 788, 789, 800, 801, 808, 811, 812, 814, 822, 830, 831, 834, 835, 836, 837, 839, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 876, 885, 907, 908, 914, 915, 916, 917, 918, 969, 975, 978, 992, 998, 1009, 1019, 1040, 1044, 1047, 1048, 1049, 1050, 1052, 1054, 1056, 1059], "callback": [539, 545, 547, 553, 554, 861, 974, 1029, 1056], "callbl": 854, "calle": [2, 251, 966], "caller": [2, 251, 416, 654, 655, 660, 668, 669, 670, 689, 902, 903, 965, 966, 984, 985, 986, 1049], "callgrin": 389, "callgrind": 386, "calm": 51, "caltech": 357, "calvin": [1043, 1044], "calvo": [1048, 1049], "cambridg": [378, 420, 598, 847, 851, 1005, 1007, 1011], "came": 1008, "camera_ind": 53, "camil": [1048, 1056, 1057], "camila": 1050, "camilaagw": 1050, "camilo": 1046, "campello": [415, 453], "campustrampu": 1047, "can": [0, 11, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 72, 75, 77, 78, 81, 83, 84, 88, 90, 91, 92, 93, 95, 96, 97, 98, 100, 104, 105, 106, 107, 111, 112, 113, 114, 115, 118, 120, 124, 126, 127, 128, 130, 132, 133, 135, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 167, 168, 169, 170, 171, 172, 174, 179, 180, 181, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 202, 204, 206, 208, 210, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 225, 233, 234, 235, 237, 238, 239, 244, 245, 246, 247, 248, 250, 251, 254, 255, 258, 260, 261, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 282, 284, 286, 287, 289, 290, 291, 293, 295, 296, 298, 300, 301, 302, 303, 305, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 339, 340, 343, 344, 346, 349, 350, 353, 357, 358, 359, 363, 364, 365, 366, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 396, 397, 398, 400, 401, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 438, 440, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 479, 489, 490, 491, 494, 504, 507, 511, 516, 517, 520, 529, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 587, 588, 589, 590, 591, 592, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 642, 643, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 697, 699, 700, 701, 702, 703, 706, 707, 708, 709, 710, 712, 715, 717, 719, 720, 726, 728, 729, 730, 731, 732, 734, 735, 737, 738, 740, 741, 745, 746, 747, 748, 750, 751, 754, 760, 763, 764, 765, 766, 767, 771, 787, 788, 790, 791, 792, 793, 795, 796, 797, 802, 803, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 869, 870, 871, 872, 875, 876, 877, 879, 880, 881, 885, 886, 887, 890, 891, 892, 897, 904, 905, 909, 910, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 924, 925, 928, 929, 932, 934, 936, 938, 942, 944, 950, 953, 955, 956, 963, 965, 968, 971, 974, 978, 979, 982, 989, 992, 993, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1032, 1033, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "canberra": [457, 464, 707, 786, 787, 788, 1012], "canberradist": 707, "cancel": [422, 423, 771], "cancer": [2, 172, 376, 414, 508, 601, 602, 859, 1017, 1035, 1045], "candela": 380, "candid": [108, 265, 273, 276, 283, 327, 372, 383, 387, 415, 422, 455, 457, 808, 811, 812, 820, 822, 1005, 1012, 1025, 1046], "candidate_idx": 274, "cannon": 1055, "cannot": [43, 52, 75, 91, 109, 115, 123, 128, 145, 190, 191, 202, 217, 235, 251, 316, 346, 353, 372, 382, 384, 389, 395, 397, 398, 403, 409, 415, 416, 417, 419, 420, 422, 423, 425, 472, 529, 546, 547, 548, 551, 555, 618, 621, 622, 623, 625, 627, 628, 630, 631, 633, 659, 663, 690, 700, 719, 725, 786, 811, 812, 859, 860, 862, 863, 864, 872, 873, 877, 882, 883, 894, 936, 938, 939, 998, 999, 1003, 1005, 1006, 1009, 1010, 1015, 1019, 1024, 1025, 1029, 1033, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "canon": [2, 51, 397, 413, 422, 489, 490, 492, 776, 1029, 1031, 1035], "canonic": 397, "cant": [1057, 1058], "cantor": [636, 999], "canuma": 1053, "canva": 51, "cao": 415, "cap": [412, 415, 763, 1009, 1049], "capabl": [90, 91, 118, 153, 179, 221, 241, 385, 397, 401, 1010, 1013, 1024, 1025, 1033, 1040, 1049, 1057], "capac": [153, 174, 192], "capit": [49, 62, 332, 504, 814, 831], "capitain": 1058, "cappion": [700, 1006], "cappuzzo": 1057, "capsiz": 338, "caption": 104, "captur": [2, 43, 48, 51, 52, 72, 74, 118, 150, 155, 167, 179, 190, 197, 202, 217, 221, 266, 295, 326, 346, 350, 391, 415, 422, 423, 424, 579, 596, 597, 599, 858, 975, 1009, 1014, 1022, 1026, 1052], "car": 217, "carbal": 1057, "card": 1048, "cardin": [72, 144, 145, 151, 192, 193, 322, 323, 331, 415, 422, 470, 561, 562, 565, 566, 567, 568, 572, 573, 574, 687, 885, 886, 893, 920, 921, 922, 923, 1009, 1010, 1017, 1019, 1054, 1055], "cardiotocogram": 254, "care": [47, 90, 151, 190, 269, 293, 350, 370, 372, 387, 389, 395, 397, 398, 409, 414, 415, 417, 423, 444, 467, 476, 648, 666, 667, 674, 675, 676, 684, 685, 686, 703, 912, 1006, 1024, 1033, 1056], "carefulli": [289, 370, 413, 420, 1024], "carei": [1043, 1044, 1045, 1046, 1047], "carett": 1047, "cari": 1052, "carl": [179, 425, 618, 619, 622, 627, 630], "carla": 1056, "carlo": [0, 249, 373, 422, 425, 619, 649, 650, 1001, 1014, 1040, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "carlson": 1047, "carlsson": 1043, "carmen": 322, "carnegi": 907, "caro": 1045, "carodorum": 322, "carol": [1046, 1047], "carolin": 1013, "caro\u00e7o": 1059, "carrascosa": [1033, 1044], "carre\u00f1o": 1055, "carri": [51, 67, 137, 186, 269, 275, 278, 283, 312, 318, 359, 398, 423, 565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923, 1033], "carrillo": 1045, "carsten": 1053, "cart": [1031, 1035], "carter": [1046, 1047, 1055, 1058], "cartesian": [105, 412, 641, 1012, 1055], "cartman_nabana": 1050, "cartograph": 195, "cartographi": 1005, "caruana": [62, 64, 413, 444, 446], "carvaj": 1040, "casado": 1051, "casagrand": [1048, 1049], "casalegno": 1052, "cascad": 380, "case": [2, 30, 43, 46, 47, 52, 62, 64, 70, 72, 84, 87, 90, 92, 96, 101, 105, 106, 114, 118, 128, 130, 140, 142, 143, 150, 151, 158, 169, 171, 172, 174, 181, 190, 191, 193, 202, 203, 206, 208, 217, 218, 219, 221, 222, 225, 231, 233, 234, 235, 244, 248, 249, 250, 251, 254, 255, 265, 268, 269, 272, 274, 275, 276, 278, 281, 282, 284, 293, 296, 299, 303, 313, 316, 318, 321, 323, 325, 328, 333, 350, 357, 358, 359, 365, 366, 370, 371, 372, 377, 378, 383, 384, 385, 387, 388, 389, 390, 392, 395, 396, 397, 398, 401, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 444, 447, 450, 451, 453, 454, 458, 460, 470, 471, 472, 474, 481, 504, 516, 517, 523, 547, 549, 550, 551, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 590, 596, 599, 601, 602, 605, 610, 614, 617, 618, 619, 633, 635, 636, 638, 640, 655, 656, 661, 664, 665, 666, 667, 669, 671, 674, 676, 677, 680, 682, 683, 684, 688, 690, 691, 692, 693, 694, 695, 707, 711, 716, 717, 720, 724, 726, 728, 729, 731, 734, 736, 737, 738, 742, 743, 746, 750, 751, 753, 754, 756, 758, 761, 762, 764, 771, 786, 789, 791, 792, 793, 795, 796, 797, 798, 802, 804, 806, 808, 811, 812, 814, 822, 826, 831, 832, 833, 834, 835, 836, 837, 839, 841, 849, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 872, 879, 881, 882, 885, 886, 887, 890, 891, 892, 893, 896, 902, 903, 904, 905, 912, 914, 917, 920, 921, 927, 932, 934, 944, 956, 957, 997, 998, 999, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1023, 1024, 1025, 1028, 1029, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "caselli": [1048, 1049], "cash": 1005, "cashman": 1050, "casino": [1054, 1055], "cass": 1046, "cassi": 322, "cast": [50, 52, 88, 217, 238, 377, 398, 423, 504, 652, 653, 654, 660, 664, 665, 668, 669, 670, 671, 672, 673, 681, 683, 973, 1047, 1048, 1049, 1050, 1053, 1055, 1057], "castachick": 1051, "castello": 1044, "castor": 1051, "caswel": [1053, 1056], "cat": [51, 105, 191, 192, 254, 328, 329, 330, 331, 332, 333, 378, 423, 495, 590, 720, 726, 762, 791, 893, 1009, 1019, 1049, 1050, 1052], "cat_column": 254, "cat_linear_processor": 158, "cat_proc": [246, 326], "cat_selector": 158, "cat_str": 57, "cat_tree_processor": 158, "catajara": 1050, "catalfo": 1048, "catalin": 650, "catastroph": [269, 323, 771, 1029], "catch": [79, 97, 313, 371, 391, 392], "catch_warn": [79, 97, 251, 312, 313], "categor": [2, 43, 105, 136, 142, 153, 158, 187, 190, 191, 192, 217, 235, 254, 256, 258, 269, 323, 328, 330, 331, 372, 375, 377, 378, 388, 397, 416, 423, 473, 474, 496, 497, 504, 513, 569, 570, 589, 590, 615, 616, 640, 641, 656, 666, 667, 677, 688, 717, 835, 847, 848, 849, 850, 851, 873, 875, 879, 880, 883, 885, 886, 893, 907, 908, 929, 999, 1005, 1016, 1017, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1040, 1041, 1044, 1045, 1048, 1050, 1052, 1055, 1056, 1057, 1058], "categori": [2, 25, 57, 79, 97, 104, 105, 147, 158, 190, 191, 217, 225, 232, 254, 269, 276, 312, 313, 318, 322, 323, 327, 330, 332, 339, 357, 358, 359, 377, 378, 392, 415, 416, 422, 423, 425, 495, 504, 505, 511, 569, 570, 656, 666, 667, 677, 688, 751, 766, 767, 848, 885, 886, 893, 950, 951, 999, 1005, 1006, 1007, 1011, 1017, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "categorical_column": [43, 147, 190, 192, 254, 474], "categorical_columns_selector": 254, "categorical_columns_subset": 147, "categorical_crossentropi": [1050, 1054], "categorical_encod": 192, "categorical_featur": [43, 105, 147, 153, 191, 269, 322, 327, 328, 329, 330, 332, 388, 422, 569, 570, 640, 641, 1016, 1048, 1052, 1055, 1057], "categorical_preprocessor": [256, 322], "categorical_transform": 105, "categoricalnb": [2, 847, 849, 850, 851, 1011, 1050, 1051, 1052, 1053, 1055], "categories_": [885, 886, 893, 1019, 1048, 1055], "categoris": [950, 951], "category_1_fold": 511, "category_2_fold": 511, "category_count_": 848, "category_s": 358, "categr": 1017, "caterpillar": 51, "cathi": [1044, 1050], "catindex": 191, "catplot": 265, "caught": [383, 391, 409], "caus": [43, 62, 64, 150, 175, 190, 215, 217, 221, 222, 235, 295, 323, 350, 359, 366, 381, 388, 413, 415, 420, 421, 423, 425, 450, 454, 456, 466, 517, 540, 590, 597, 618, 619, 786, 847, 848, 849, 851, 876, 885, 887, 890, 891, 938, 939, 999, 1005, 1009, 1017, 1019, 1022, 1029, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1059], "causal": [187, 188, 212, 665, 793, 838, 1030], "causat": 190, "caution": [190, 269, 387, 447, 461, 1048], "cautiou": 1047, "caveat": [419, 425], "cawlei": [280, 1009], "cax": [66, 177, 286], "ca\u00f1ardo": 1043, "cb": [177, 248, 264], "cbar_ax": 286, "cbar_kw": [197, 202], "cc": 381, "cc18": 377, "cc_home": [920, 921], "cca": [2, 252, 418, 490, 492, 1010, 1044, 1048, 1049, 1050, 1052, 1054, 1058], "ccat": 378, "ccf2002": 1001, "cclauss": 1048, "cco": 357, "ccp_alpha": [325, 361, 565, 566, 567, 568, 572, 573, 920, 921, 922, 923, 1025, 1050], "ccp_path": [920, 921, 922, 923], "cd": [123, 172, 380, 381, 383, 387, 389, 420, 478, 479, 485, 539, 545, 547, 548, 551, 553, 554, 555, 1005, 1045, 1055], "cdef": 384, "cdf": 275, "cdist": 1053, "cdivis": 384, "cdot": [275, 350, 412, 415, 420, 421, 425, 622, 623, 627, 630, 631, 878, 1001, 1003, 1009, 1013, 1019], "cdrig": 1054, "cdt": 57, "cea": [847, 1011], "ceballo": 1054, "ceder": [796, 1009], "ceethinwa": [1052, 1053], "ceh": 1055, "ceil": [153, 254, 565, 566, 567, 568, 571, 572, 573, 574, 602, 679, 811, 812, 920, 921, 922, 923, 1023], "celelibi": 1049, "celeo": 1044, "celeux": 536, "cell": [50, 51, 58, 63, 68, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 172, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 309, 314, 322, 326, 327, 329, 330, 332, 337, 365, 380, 388, 700, 1009, 1010, 1046, 1054], "cellular": 53, "celsiu": [191, 1016], "cemlyn": 1058, "cen": 751, "censor": 1028, "censu": 378, "center": [0, 2, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 80, 83, 84, 85, 88, 90, 91, 94, 95, 96, 98, 99, 114, 128, 129, 132, 148, 149, 150, 151, 170, 172, 186, 191, 199, 209, 211, 217, 218, 228, 229, 240, 241, 244, 245, 254, 260, 263, 264, 270, 276, 286, 301, 304, 306, 312, 316, 318, 319, 329, 337, 344, 346, 347, 348, 352, 358, 359, 378, 379, 380, 388, 415, 417, 418, 420, 421, 422, 428, 447, 449, 450, 453, 454, 455, 456, 459, 461, 466, 467, 468, 469, 470, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 492, 509, 520, 532, 542, 543, 549, 552, 558, 614, 617, 618, 619, 640, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 686, 698, 702, 704, 805, 877, 878, 881, 890, 892, 902, 903, 912, 913, 1003, 1005, 1006, 1008, 1016, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1057], "center1": 101, "center2": 101, "center3": 101, "center4": 101, "center_": 890, "center_box": [95, 520], "centers_0": 319, "centers_1": 319, "centers_init": 94, "cento": 381, "centr": 157, "central": [0, 53, 219, 378, 384, 415, 1015, 1028], "centrality_scor": 55, "centroid": [2, 77, 80, 92, 93, 111, 187, 297, 304, 319, 329, 342, 358, 379, 406, 415, 449, 450, 453, 454, 455, 456, 459, 466, 467, 469, 512, 557, 639, 859, 1030, 1031, 1035, 1040, 1044, 1047, 1052, 1056], "centroids_": [449, 453, 859], "ceo": 1033, "cerda": 1054, "certain": [52, 90, 148, 153, 190, 222, 234, 251, 275, 296, 320, 350, 366, 378, 379, 383, 387, 397, 400, 409, 411, 415, 420, 424, 646, 657, 661, 666, 671, 692, 872, 877, 912, 998, 1001, 1005, 1006, 1009, 1010, 1013, 1019, 1024, 1028, 1045, 1049, 1052, 1055], "certainli": [88, 104, 190, 358, 414], "certainti": [275, 385, 750, 1009], "ceshin": 1046, "cest": 1009, "cetina": 1052, "cf": [323, 414, 415, 418, 449, 708, 1005, 1019, 1029], "cflag": 381, "cft": 415, "cftree": 449, "cg": [314, 666, 667, 680, 682, 695, 1005, 1044, 1045, 1047, 1051, 1053, 1054, 1057, 1058], "cga": 182, "cgi": 905, "cgohlk": [1043, 1044], "cgroup": [1053, 1054], "cgsavard": [1050, 1051], "ch6": 538, "chacon": 713, "chac\u00f3n": [415, 713], "chad": 1057, "chadi": 1048, "chai": [1052, 1055, 1056], "chain": [2, 35, 103, 109, 137, 164, 187, 247, 283, 286, 293, 294, 296, 299, 314, 366, 375, 395, 397, 425, 504, 510, 549, 619, 635, 666, 746, 808, 838, 841, 843, 844, 845, 846, 872, 873, 892, 998, 999, 1010, 1014, 1026, 1030, 1033, 1035], "chain_jaccard_scor": 295, "chain_method": [843, 1058], "chain_method_": 843, "chaitanya": 1051, "chaitanyamog": 1052, "chakhchoukh": 114, "chakravarti": [643, 645], "chalearn": 1009, "challeng": [51, 158, 174, 191, 197, 235, 244, 372, 378, 379, 409, 415, 417, 469, 479, 1009, 1015, 1033], "chalmer": 1054, "chalmerlow": 1043, "chalulu": 1055, "chan": [0, 850, 892, 1058, 1059], "chanc": [2, 71, 73, 84, 137, 167, 187, 193, 217, 225, 232, 235, 275, 281, 284, 285, 322, 353, 358, 366, 382, 414, 415, 419, 708, 710, 712, 713, 716, 724, 763, 765, 794, 803, 837, 1009, 1017, 1025, 1030, 1056], "chance_level_": [708, 710, 1056], "chance_level_kw": [254, 708, 710, 1056], "chandra": [1050, 1051, 1054], "chang": [2, 46, 62, 63, 64, 123, 127, 128, 140, 143, 151, 175, 185, 189, 190, 193, 205, 218, 219, 221, 222, 255, 256, 269, 270, 275, 282, 285, 289, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 346, 350, 359, 365, 366, 370, 371, 372, 378, 385, 386, 387, 388, 391, 395, 397, 406, 415, 419, 422, 423, 425, 427, 435, 440, 444, 447, 450, 451, 454, 456, 459, 461, 466, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 501, 502, 504, 512, 516, 517, 520, 521, 522, 530, 535, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 596, 597, 598, 599, 601, 602, 605, 610, 618, 619, 621, 622, 623, 625, 627, 628, 630, 631, 633, 635, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 698, 700, 702, 708, 712, 715, 720, 724, 725, 737, 738, 744, 745, 763, 765, 786, 791, 792, 793, 795, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 822, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 862, 863, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 884, 885, 891, 892, 893, 900, 901, 906, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 931, 936, 938, 939, 951, 956, 967, 974, 975, 978, 998, 999, 1000, 1008, 1009, 1010, 1012, 1019, 1022, 1023, 1024, 1025, 1029, 1038, 1039], "changed_onli": 1051, "changedbehaviorwarn": 1052, "changedbehaviourwarn": 1049, "changelog": [330, 387, 397, 1038], "changing_param": 46, "changing_param_valu": 46, "changyao": [1055, 1056], "channel": [371, 378, 381, 401, 423, 501, 502, 591, 592, 594, 595, 1032], "channel_prior": 381, "chapman": 1005, "chapter": [123, 366, 385, 415, 420, 422, 425, 538, 540, 542, 622, 627, 630, 651, 999, 1002, 1005, 1024, 1025], "char": [423, 596, 597, 599, 1040], "char_wb": [423, 596, 597, 599], "charact": [359, 383, 388, 397, 423, 511, 516, 517, 596, 597, 599, 924, 1014, 1040, 1053, 1055], "character": [75, 235, 361, 415, 419, 1006], "characteris": 1012, "characterist": [2, 79, 97, 172, 179, 187, 244, 245, 257, 267, 269, 270, 272, 316, 366, 378, 380, 388, 413, 414, 419, 422, 425, 511, 512, 631, 646, 666, 710, 714, 716, 735, 790, 796, 797, 827, 838, 841, 879, 917, 1005, 1030], "chardet": 423, "chardetect": 423, "charg": [0, 269, 383], "charikar": 1001, "charl": [64, 269, 772, 1040, 1043, 1046, 1050, 1052, 1055], "charli": [1047, 1048, 1056], "charlton": 1047, "charra": [1055, 1057, 1058], "charron": [1033, 1043, 1044, 1051, 1052, 1053], "charset": [1040, 1042], "charset_error": 1042, "chart": [72, 148, 280, 403, 1010, 1043], "chartbeat": 1033, "chase": [51, 1040], "chasnovski": 1051, "chat": 1033, "chatterje": 1051, "chaudhuri": 453, "chauhan": [1048, 1049, 1055, 1056], "chaumond": [1033, 1048], "chauvin": 751, "chavez": [45, 378], "chawla": 1050, "chayant": 1047, "chazalon": 1054, "cheaper": [191, 415, 425, 681, 1001, 1005], "cheat": [52, 346, 403, 1013, 1023, 1042], "chebee7i": 1044, "chebyshev": [457, 464, 707, 786, 787, 788, 1012], "chebyshevdist": 707, "check": [2, 41, 43, 44, 47, 55, 81, 88, 91, 127, 135, 143, 158, 174, 187, 189, 191, 192, 203, 204, 206, 217, 238, 251, 261, 267, 269, 284, 293, 328, 337, 365, 370, 371, 381, 382, 383, 384, 385, 386, 387, 389, 390, 392, 393, 395, 396, 397, 401, 402, 406, 409, 416, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 498, 510, 516, 517, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 696, 697, 698, 699, 700, 701, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 931, 938, 939, 940, 950, 951, 961, 963, 964, 965, 969, 970, 992, 993, 994, 996, 997, 1004, 1005, 1006, 1009, 1024, 1025, 1029, 1030, 1033, 1035, 1040, 1041, 1043, 1047, 1051, 1052, 1053, 1054, 1055, 1057, 1059], "check_arrai": [2, 385, 392, 475, 542, 910, 997, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "check_classifier_multioutput": 1050, "check_consistent_length": 2, "check_cv": [2, 397, 1045], "check_decision_proba_consist": 1047, "check_estim": [2, 325, 385, 397, 931, 951, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1059], "check_estimator_sparse_arrai": 1058, "check_estimator_sparse_data": 1058, "check_estimator_sparse_matrix": 1058, "check_estimators_fit_returns_self": 951, "check_estimators_pickl": 1057, "check_fit_idempot": 1049, "check_increas": 2, "check_input": [542, 556, 654, 655, 660, 668, 669, 670, 689, 695, 920, 921, 922, 923, 1048], "check_invers": [416, 472, 876, 1019, 1048, 1054, 1055], "check_is_fit": [2, 91, 135, 251, 386, 392, 397, 1050, 1053, 1054, 1059], "check_memori": [2, 392, 397, 1047], "check_metadata": 251, "check_methods_sample_order_invari": [1052, 1054], "check_methods_subset_invari": [1048, 1054], "check_nam": 931, "check_non_neg": 1059, "check_pairwise_arrai": [1049, 1059], "check_param": 997, "check_random_st": [2, 96, 233, 239, 247, 253, 385, 392, 397], "check_regressor_multioutput": 1050, "check_requires_y_non": 1054, "check_sample_weights_pandas_seri": 1048, "check_scalar": [2, 1054], "check_scor": [2, 397, 1058, 1059], "check_set_param": 1048, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1050, "check_transformers_unfitted_stateless": 1056, "check_x_i": [2, 385, 392, 997, 1044, 1048, 1049, 1054, 1059], "checkbox": 383, "checked_cv": 832, "checker": [2, 387, 832], "checkerboard": [2, 58, 412, 458, 460, 519, 521], "checking_statu": 269, "checkingclassifi": 1050, "checklist": [386, 387], "checkout": [381, 383, 387, 391], "checks_gener": 950, "checksum": [499, 1052], "cheeseman": 380, "chege": 1054, "chemic": 380, "chemometr": 380, "chen": [111, 112, 417, 422, 428, 482, 734, 764, 1001, 1009, 1043, 1046, 1047, 1048, 1050, 1053, 1054, 1055, 1056, 1059], "chenal": [1049, 1050, 1052], "cherkasski": 1005, "chernei": 1058, "chernyi": 1054, "cherri": 387, "cherti": 1044, "cherubin": 1046, "chestervil": 330, "cheuk": [1048, 1049], "cheung": 1041, "chevali": 1052, "chevalli": 1057, "chevron": 51, "chi": [2, 105, 113, 137, 320, 375, 424, 527, 600, 603, 604, 606, 607, 608, 612, 613, 614, 617, 646, 647, 648, 649, 650, 766, 767, 1035, 1040, 1045, 1046], "chi2": [2, 105, 423, 424, 459, 589, 600, 603, 604, 606, 607, 608, 613, 614, 617, 628, 646, 647, 648, 649, 650, 651, 767, 773, 782, 1040, 1047, 1054], "chi2_featur": 650, "chi2_kernel": [2, 411, 646, 650, 766, 773, 1007, 1041, 1059], "chi2_stat": 612, "chi2sampl": 646, "chiang": 1048, "chiara": [0, 374, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "chibuik": 1053, "chicco": 1058, "chief": 1033, "chieh": [1047, 1048], "chigurupati": 1052, "chih": [666, 1045], "chilamkurthi": 1046, "child": [153, 251, 357, 365, 371, 395, 397, 406, 415, 422, 449, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 920, 921, 922, 923, 965, 966, 968, 1025, 1047, 1059], "child_idx": 76, "children": [365, 415, 422, 448, 452, 470, 574, 1044, 1057], "children_": [76, 448, 452, 470], "children_left": 365, "children_right": 365, "chime": 382, "chin": [380, 1044], "china": [83, 415, 514, 515, 592, 595], "chines": 1028, "chinmaya": 1047, "chinthala": 1047, "chiotelli": 1049, "chip": [411, 1033], "chisquar": 320, "chitteti": 1054, "chkoar": 1047, "chloe": 1054, "cho": 1051, "choe": 1049, "choi": [1005, 1058], "choic": [2, 43, 46, 64, 75, 81, 90, 100, 104, 111, 130, 153, 174, 175, 181, 185, 206, 218, 254, 268, 269, 273, 275, 278, 289, 301, 323, 327, 357, 358, 366, 370, 381, 388, 397, 401, 415, 417, 419, 421, 422, 424, 425, 459, 469, 478, 479, 480, 481, 482, 483, 485, 546, 548, 549, 555, 567, 646, 655, 656, 664, 666, 667, 669, 677, 688, 700, 713, 750, 841, 854, 855, 860, 862, 863, 889, 892, 901, 903, 912, 913, 942, 998, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1017, 1022, 1023, 1024, 1025, 1047, 1050, 1051, 1055, 1056], "choleski": [112, 217, 235, 392, 478, 479, 485, 535, 619, 656, 658, 659, 662, 663, 664, 666, 667, 677, 680, 682, 688, 690, 691, 695, 805, 806, 1005, 1043, 1047, 1049, 1052, 1055, 1056], "cholesky_delet": 392, "cholesterol": [172, 380], "chong": 544, "choo": [1055, 1056], "choos": [43, 50, 51, 79, 81, 85, 88, 95, 97, 101, 111, 129, 146, 158, 172, 190, 193, 210, 252, 269, 270, 280, 287, 361, 366, 370, 371, 372, 385, 388, 391, 396, 397, 409, 413, 414, 415, 417, 419, 422, 423, 426, 450, 451, 454, 456, 466, 531, 540, 546, 567, 568, 590, 610, 666, 667, 680, 682, 687, 695, 696, 697, 701, 734, 764, 808, 811, 812, 822, 879, 912, 913, 920, 921, 922, 923, 998, 999, 1000, 1004, 1005, 1006, 1007, 1008, 1012, 1019, 1022, 1023, 1024, 1035, 1042, 1043, 1047, 1049, 1051], "choose_check_classifiers_label": 1050, "choose_random_sampl": 385, "choraria": 1052, "chose": [77, 190], "chosen": [47, 58, 81, 107, 158, 175, 190, 191, 206, 218, 234, 252, 268, 269, 270, 272, 278, 289, 358, 366, 370, 395, 414, 415, 417, 418, 422, 425, 447, 453, 456, 458, 460, 461, 467, 504, 531, 543, 565, 566, 567, 568, 569, 570, 572, 573, 655, 661, 664, 666, 667, 669, 671, 679, 684, 685, 686, 687, 688, 698, 702, 802, 805, 806, 808, 811, 812, 822, 842, 861, 912, 913, 920, 921, 922, 923, 956, 998, 1001, 1003, 1005, 1006, 1008, 1010, 1015, 1016, 1023, 1025, 1048, 1056, 1057], "chou": [1047, 1048], "choudhari": [1044, 1045, 1054, 1056], "choudhri": 1058, "chowdhuri": [1048, 1054], "choyal": [1047, 1048], "chri": [0, 405, 1040, 1043, 1048, 1049, 1050, 1051, 1054], "chrissobel": 1053, "christ": 57, "christian": [0, 57, 357, 358, 378, 404, 1033, 1040, 1041, 1044, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "christianwaldmann": 1055, "christin": [1055, 1056], "christo": [1049, 1050, 1052, 1054, 1057], "christof": [1044, 1045], "christoph": [191, 420, 425, 540, 618, 619, 622, 627, 630, 805, 1005, 1010, 1041, 1045, 1048, 1051, 1052, 1053, 1054, 1055], "christopherlim98": 1054, "chrome": 1019, "chronolog": [378, 505], "chu": [859, 1056], "chuan": 1013, "chugh": 1052, "chuliang": 1053, "chun": [1051, 1052, 1054, 1055, 1056], "chung": [1047, 1048], "chunk": [2, 47, 85, 370, 371, 415, 420, 426, 451, 456, 475, 546, 786, 789, 840, 841, 847, 848, 849, 850, 851, 910, 1011, 1047, 1048, 1049, 1050, 1051], "chunk_siz": 1041, "chunker": 423, "church": [905, 1021], "chyi": [1043, 1044, 1045, 1046, 1047], "ci": [90, 371, 386, 387, 1011, 1046, 1048], "ciccolella": [700, 1006], "cice": [1016, 1054], "cichocki": [420, 546, 548, 555], "cimport": [384, 392, 1048], "cindi": [1045, 1053, 1057, 1058], "cio": 377, "cipri\u00e1n": 1054, "circl": [2, 70, 95, 128, 156, 157, 165, 242, 252, 303, 306, 312, 316, 318, 337, 350, 364, 379, 387, 391, 415, 459, 469, 522, 530, 772, 1024], "circle1": 101, "circle2": 101, "circle3": 101, "circle4": 101, "circleci": [52, 178, 180, 182, 183, 245, 261, 314, 383], "circlecl": 0, "circuit": [57, 1006], "circular": 53, "circumst": [130, 235, 1012, 1028], "circumstanti": 217, "cirru": [0, 383], "cisco": 51, "citat": [0, 377, 380, 395], "cite": [377, 395, 415], "citi": [416, 423, 473], "citizen": 1019, "city_categori": 416, "city_london": 416, "city_pari": 416, "city_sallisaw": 416, "cityblock": [75, 79, 415, 457, 464, 770, 786, 787, 788, 1012], "cividi": 75, "ciyou": 666, "cj": [1011, 1043, 1044, 1045, 1046, 1047], "cjlin": [195, 377, 494, 516, 517, 666, 1043], "ckdtree": [426, 451, 1042], "cl": [0, 47, 51, 390, 397, 922], "cla": 129, "clabel": [177, 228], "clae": 1048, "clai": 1040, "claim": [187, 196, 383, 471, 504, 560, 656, 677, 688, 714, 753, 758, 760, 838, 873, 876, 877, 885, 892, 1005, 1030], "claimamount": 235, "claimnb": [217, 235], "clair": 1040, "clamp": [908, 1022], "clang": [381, 384], "clara": [377, 1052], "clare": 1050, "clarifi": [391, 398, 801], "clariti": [170, 383, 391], "clark": 51, "class": [2, 4, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 89, 90, 91, 93, 105, 106, 120, 121, 128, 131, 133, 135, 136, 143, 145, 153, 154, 159, 172, 174, 175, 177, 178, 180, 182, 183, 185, 187, 190, 191, 195, 196, 207, 208, 209, 225, 229, 232, 233, 238, 244, 251, 252, 254, 260, 261, 262, 267, 268, 269, 270, 275, 277, 281, 285, 286, 289, 293, 295, 296, 299, 301, 302, 304, 305, 306, 307, 321, 325, 329, 331, 332, 333, 335, 337, 338, 341, 342, 343, 344, 346, 347, 350, 354, 357, 358, 359, 362, 365, 372, 375, 377, 378, 379, 380, 383, 384, 385, 387, 388, 389, 390, 392, 395, 396, 401, 406, 409, 410, 411, 413, 415, 416, 418, 420, 424, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 468, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 508, 510, 511, 512, 516, 517, 518, 520, 522, 523, 527, 530, 531, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 585, 589, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 728, 730, 735, 737, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 762, 763, 765, 790, 791, 792, 794, 795, 796, 797, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 943, 944, 946, 947, 948, 950, 951, 961, 964, 965, 966, 969, 974, 976, 978, 979, 992, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1013, 1016, 1017, 1019, 1020, 1022, 1025, 1029, 1030, 1031, 1033, 1035, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "class1_1": 160, "class2_1": 160, "class_0": [225, 380, 518], "class_1": [225, 380, 518], "class_2": [380, 518], "class_count_": [847, 848, 849, 850, 851], "class_id": [284, 285], "class_index": 90, "class_label": [397, 565, 569, 572, 666, 667, 674, 676, 682, 683, 684, 807, 830, 920, 922, 944, 1024], "class_likelihood_ratio": [2, 278, 1009, 1055], "class_log_prior_": [847, 848, 849, 851], "class_memb": 73, "class_member_mask": 84, "class_nam": [139, 268, 893, 924, 925, 926, 1025, 1056], "class_name0": [431, 449, 450, 452, 454, 456, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 647, 648, 649, 650, 696, 697, 700, 856, 861, 864, 868, 878, 904, 905], "class_name1": [431, 449, 450, 452, 454, 456, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 647, 648, 649, 650, 696, 697, 700, 856, 861, 864, 868, 878, 904, 905], "class_name2": [431, 449, 450, 452, 454, 456, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 647, 648, 649, 650, 696, 697, 700, 856, 861, 864, 868, 878, 904, 905], "class_of_interest": [66, 284, 639, 1057], "class_prior": [378, 847, 848, 849, 851, 1041, 1044], "class_prior_": [559, 850], "class_protein_loc": 293, "class_sep": [171, 306, 523, 807, 830], "class_weight": [2, 45, 348, 397, 565, 569, 572, 666, 667, 674, 676, 682, 683, 684, 685, 912, 914, 917, 919, 920, 922, 943, 944, 998, 1023, 1024, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1054, 1055], "class_weight_": [914, 917, 1055], "class_weight_vect": 943, "classes_": [135, 209, 226, 245, 251, 284, 335, 336, 383, 385, 397, 440, 444, 445, 557, 558, 559, 561, 563, 565, 567, 569, 572, 575, 577, 601, 602, 618, 639, 666, 667, 674, 676, 682, 683, 684, 705, 708, 710, 796, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 854, 859, 862, 869, 872, 879, 880, 883, 893, 907, 908, 909, 912, 914, 917, 920, 922, 925, 1009, 1020, 1023, 1041, 1044, 1045, 1047, 1050, 1052], "classic": [55, 212, 241, 260, 266, 350, 380, 387, 417, 419, 420, 450, 454, 456, 466, 500, 508, 512, 518, 549, 640, 641, 922, 923, 1003, 1005, 1008, 1011, 1019, 1028, 1040, 1041, 1045, 1054], "classif": [2, 14, 19, 30, 31, 38, 40, 42, 45, 46, 49, 57, 60, 61, 62, 64, 67, 70, 80, 91, 105, 106, 107, 111, 112, 117, 121, 126, 135, 137, 139, 141, 143, 144, 145, 146, 151, 153, 154, 156, 160, 162, 165, 167, 168, 169, 171, 172, 173, 179, 180, 190, 191, 195, 196, 207, 208, 209, 210, 217, 225, 227, 228, 229, 230, 232, 243, 245, 249, 250, 251, 254, 257, 263, 264, 267, 268, 272, 273, 274, 275, 276, 284, 289, 290, 291, 293, 294, 297, 298, 304, 305, 306, 308, 309, 310, 311, 312, 313, 318, 319, 320, 321, 335, 340, 341, 342, 346, 349, 351, 352, 353, 354, 355, 356, 358, 359, 366, 370, 372, 376, 377, 378, 380, 385, 388, 392, 396, 397, 410, 413, 414, 415, 416, 419, 420, 422, 423, 424, 432, 444, 476, 482, 489, 494, 495, 496, 498, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 518, 520, 522, 523, 527, 528, 530, 531, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 577, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 614, 617, 618, 619, 621, 622, 630, 639, 640, 641, 651, 666, 667, 674, 676, 682, 683, 684, 705, 711, 713, 716, 720, 721, 723, 724, 726, 734, 735, 737, 738, 742, 743, 746, 749, 750, 751, 762, 764, 766, 767, 769, 790, 791, 792, 794, 795, 796, 797, 802, 804, 807, 808, 809, 811, 812, 813, 814, 822, 826, 827, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 854, 859, 861, 862, 868, 869, 870, 872, 876, 879, 884, 885, 886, 887, 892, 893, 896, 898, 907, 908, 909, 912, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 941, 944, 953, 998, 999, 1001, 1002, 1003, 1006, 1007, 1011, 1014, 1016, 1017, 1019, 1020, 1022, 1027, 1028, 1030, 1031, 1032, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "classifi": [2, 30, 45, 46, 47, 48, 60, 63, 65, 66, 68, 70, 91, 104, 105, 106, 107, 108, 120, 128, 133, 137, 138, 139, 140, 141, 144, 145, 146, 149, 156, 159, 160, 165, 168, 169, 170, 171, 176, 187, 192, 193, 195, 196, 207, 208, 209, 215, 217, 224, 226, 229, 232, 235, 244, 247, 249, 251, 257, 268, 269, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 291, 293, 294, 298, 304, 305, 307, 311, 314, 318, 327, 328, 332, 334, 335, 336, 338, 339, 341, 342, 344, 345, 347, 348, 349, 350, 354, 355, 359, 378, 380, 383, 385, 388, 395, 397, 406, 414, 415, 416, 419, 423, 424, 425, 432, 440, 441, 442, 443, 444, 445, 446, 495, 496, 504, 512, 520, 522, 523, 530, 539, 544, 545, 550, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 574, 575, 576, 577, 578, 601, 602, 610, 614, 618, 630, 637, 639, 640, 641, 657, 666, 667, 674, 676, 679, 680, 681, 682, 683, 684, 705, 706, 708, 710, 711, 715, 716, 717, 719, 720, 721, 726, 728, 730, 734, 735, 737, 738, 740, 742, 743, 746, 747, 748, 749, 750, 751, 762, 764, 790, 791, 792, 795, 796, 797, 802, 804, 807, 808, 811, 812, 814, 822, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 859, 860, 862, 863, 868, 869, 870, 872, 873, 879, 892, 893, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 928, 931, 932, 945, 948, 950, 998, 999, 1001, 1004, 1005, 1006, 1009, 1010, 1011, 1014, 1017, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058], "classification_data": 46, "classification_report": [2, 45, 68, 104, 169, 273, 314, 335, 336, 830, 1009, 1042, 1044, 1048, 1049, 1050, 1052, 1056, 1058, 1059], "classificationcriterion": 1048, "classifier_": [91, 251], "classifier_01": 333, "classifier_05": 333, "classifier__c": 105, "classifier__criterion": 256, "classifier__max_depth": 256, "classifier__max_featur": 256, "classifier__min_samples_leaf": 192, "classifier__n_estim": 256, "classifier__n_neighbor": 298, "classifier_idx": 66, "classifier_model": 298, "classifier_other_threshold": 807, "classifier_tag": [931, 945], "classifier_tun": 830, "classifierchain": [2, 295, 397, 406, 844, 846, 1047, 1052, 1055, 1057, 1058], "classifiermixin": [2, 135, 251, 383, 385, 397, 419, 932, 1051], "classifiertag": [2, 931, 945], "classify__c": 106, "classmethod": [390, 445, 639, 640, 705, 706, 707, 708, 709, 710, 814, 831], "classnameprefixfeaturesoutmixin": [2, 385, 439, 1055], "claudio": [380, 1054, 1055, 1057, 1058], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 395], "clauss": 1057, "clb": 191, "clean": [87, 105, 216, 366, 375, 381, 421, 1015, 1019, 1050], "cleaner": 101, "cleanli": [97, 1040], "cleanup": [383, 1040], "clear": [43, 90, 95, 106, 190, 191, 321, 378, 382, 383, 385, 395, 396, 397, 413, 416, 421, 926, 927, 998, 1003, 1051, 1052, 1053, 1058], "clear_data_hom": 2, "clearer": [242, 1024], "clearli": [43, 95, 126, 191, 249, 350, 382, 383, 395, 397, 420, 422, 1010, 1016], "clegg": 1043, "clemen": 1044, "clement": [1047, 1048, 1052], "clenaghan": [1045, 1046], "cleveland": 378, "cleverless": 1042, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 83, 86, 89, 93, 98, 105, 129, 141, 149, 152, 154, 159, 163, 165, 168, 169, 171, 176, 178, 193, 207, 209, 210, 214, 215, 221, 224, 226, 229, 230, 231, 232, 233, 240, 245, 246, 249, 252, 258, 264, 272, 276, 280, 281, 283, 286, 287, 299, 302, 303, 304, 307, 311, 318, 321, 325, 326, 327, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 361, 362, 365, 370, 378, 396, 397, 409, 416, 419, 422, 424, 445, 557, 558, 561, 563, 565, 567, 569, 571, 572, 575, 601, 602, 605, 640, 642, 646, 647, 648, 649, 650, 652, 653, 656, 660, 666, 667, 668, 669, 670, 674, 676, 677, 680, 681, 682, 683, 684, 685, 688, 705, 706, 708, 710, 719, 796, 808, 811, 812, 822, 840, 841, 842, 844, 847, 848, 849, 850, 851, 858, 859, 869, 912, 914, 916, 917, 920, 924, 926, 999, 1001, 1005, 1009, 1010, 1012, 1013, 1015, 1016, 1023, 1024, 1025], "clf1": [69, 159, 160, 422, 577], "clf2": [69, 159, 160, 385, 422, 577], "clf3": [69, 159, 160, 385, 422, 577], "clf__": 276, "clf__alpha": 276, "clf__c": 416, "clf_descr": 357, "clf_en_lr": 208, "clf_err": 141, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 208, "clf_l2_lr": 208, "clf_list": [62, 64], "clf_name": [49, 357], "clf_no_weight": 355, "clf_pf": 850, "clf_prob": 63, "clf_sample_weight": 251, "clf_score": 61, "clf_sel": 193, "clf_select": 168, "clf_sgd": 231, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_tut": 164, "clf_weight": 355, "click": [246, 256, 276, 326, 332, 383, 385, 391, 403, 1033], "clickabl": 1054, "client": 385, "clifford": 1053, "cliffordemmanuel": 1053, "clim": 177, "climatologi": 413, "climb": [415, 455, 468], "clinton": 57, "clip": [62, 64, 235, 247, 316, 346, 643, 684, 749, 882, 1019, 1044, 1051, 1052, 1059], "clmbst": 1052, "clock": 43, "clone": [2, 91, 150, 182, 191, 251, 314, 332, 366, 381, 383, 386, 387, 389, 391, 397, 413, 416, 425, 444, 472, 577, 578, 605, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 814, 831, 836, 839, 843, 846, 872, 873, 909, 1029, 1040, 1046, 1048, 1052, 1056, 1057], "clone_kernel": [618, 619, 1050], "clone_with_theta": [182, 425, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633], "cloned_classifi": 440, "close": [8, 47, 51, 55, 61, 62, 64, 73, 74, 81, 89, 95, 101, 111, 112, 115, 128, 140, 147, 150, 154, 158, 174, 175, 178, 179, 180, 181, 182, 190, 192, 202, 221, 223, 238, 244, 250, 254, 260, 266, 275, 276, 289, 302, 303, 316, 325, 346, 350, 351, 358, 366, 378, 383, 385, 386, 387, 395, 397, 398, 413, 415, 418, 419, 422, 425, 457, 462, 479, 516, 517, 540, 571, 636, 651, 655, 669, 680, 682, 695, 713, 754, 805, 826, 827, 847, 848, 849, 851, 858, 939, 998, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1016, 1019, 1024, 1028, 1033, 1043, 1047, 1048, 1049], "close_pric": 51, "closer": [43, 72, 126, 128, 157, 172, 174, 191, 197, 221, 350, 359, 413, 415, 420, 456, 561, 636, 720, 854, 855, 860, 862, 863, 864, 1024, 1047], "closest": [64, 81, 99, 221, 385, 415, 447, 449, 450, 454, 455, 456, 466, 661, 787, 788, 842, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 1000, 1003, 1010, 1012], "closur": 55, "cloud": [78, 117, 122, 124, 187, 391, 420, 541, 549, 700, 1009, 1027, 1028, 1030], "cloudpickl": 1035, "clouldpickl": 409, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 380, "clue": [378, 391, 1006], "clump": 241, "clust": [100, 457, 464], "cluster": [2, 47, 48, 53, 54, 55, 56, 58, 61, 64, 77, 78, 81, 83, 85, 86, 88, 89, 92, 94, 96, 97, 104, 113, 120, 129, 135, 139, 146, 154, 167, 182, 193, 214, 238, 240, 241, 242, 248, 251, 254, 260, 261, 262, 263, 276, 302, 303, 305, 319, 326, 330, 335, 336, 337, 338, 339, 348, 356, 357, 359, 365, 372, 376, 378, 380, 383, 385, 388, 395, 397, 410, 411, 416, 421, 423, 426, 429, 430, 433, 441, 442, 443, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 495, 510, 511, 512, 519, 520, 521, 522, 523, 530, 538, 549, 552, 561, 572, 574, 597, 598, 599, 639, 699, 700, 703, 712, 713, 718, 722, 723, 725, 727, 733, 739, 744, 745, 763, 765, 786, 787, 794, 800, 801, 803, 805, 806, 864, 865, 873, 877, 884, 892, 948, 950, 969, 992, 999, 1006, 1008, 1012, 1015, 1017, 1019, 1022, 1026, 1028, 1029, 1030, 1033, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "cluster_1": 154, "cluster_2": 154, "cluster_al": [455, 468], "cluster_cent": [73, 96, 98, 99, 468], "cluster_center_indic": [447, 461], "cluster_centers_": [77, 78, 83, 85, 93, 95, 96, 98, 99, 123, 329, 358, 447, 450, 454, 455, 456], "cluster_centers_indic": [73, 461], "cluster_centers_indices_": [73, 447], "cluster_data": 94, "cluster_doc": 57, "cluster_hierarchy_": [415, 457], "cluster_id": [193, 358], "cluster_id_to_feature_id": 193, "cluster_label": [91, 95], "cluster_method": 457, "cluster_optics_dbscan": [2, 100, 415], "cluster_optics_xi": 2, "cluster_qr": [81, 415, 459, 469, 1054], "cluster_s": 358, "cluster_selection_epsilon": 453, "cluster_selection_method": 453, "cluster_std": [63, 73, 79, 84, 90, 91, 92, 94, 95, 97, 98, 99, 229, 244, 263, 319, 348, 379, 520], "cluster_word": 57, "clusterer_": 91, "clustering_algorithm": [78, 79, 97], "clustering_metr": 93, "clustermixin": [2, 385, 1057], "clusters_std": 348, "clyde": 1045, "cl\u00e9ment": [1049, 1053, 1055], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 81, 82, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 102, 113, 115, 123, 126, 129, 139, 145, 146, 165, 170, 177, 178, 191, 201, 209, 226, 229, 230, 233, 238, 239, 240, 245, 248, 249, 253, 258, 268, 269, 270, 296, 299, 300, 302, 306, 309, 311, 313, 314, 316, 318, 327, 330, 335, 336, 340, 342, 343, 344, 346, 347, 348, 354, 355, 362, 380, 416, 705, 925, 1009, 1019, 1025], "cm2013": 415, "cm_bright": [67, 311, 318], "cm_displai": 245, "cm_piyg": 318, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 81, 82, 85, 86, 88, 89, 93, 113, 115, 123, 126, 129, 133, 139, 145, 146, 165, 170, 177, 178, 191, 197, 201, 202, 208, 209, 226, 229, 230, 231, 233, 238, 239, 240, 248, 249, 253, 268, 270, 296, 300, 302, 304, 305, 307, 309, 311, 313, 314, 316, 318, 335, 336, 340, 342, 343, 344, 345, 346, 347, 348, 351, 354, 355, 362, 705], "cmap_bold": [304, 307], "cmap_cv": 270, "cmap_data": 270, "cmap_light": [304, 307], "cmcsa": 51, "cmd": 381, "cmu": 907, "cname": 77, "cnb": 1011, "cnp": 384, "cnx": 1048, "co": [2, 43, 51, 53, 56, 58, 74, 75, 104, 155, 157, 179, 187, 190, 218, 239, 275, 290, 329, 339, 357, 358, 359, 364, 387, 421, 423, 456, 458, 460, 495, 519, 599, 707, 727, 772, 803, 1004, 1019, 1030, 1033, 1034, 1035], "co2": [173, 181, 187, 425, 504, 619, 623, 630, 631, 633, 1030, 1047], "co2_data": 179, "co2_kernel": 179, "coars": [43, 146, 389, 455, 468], "coarser": [146, 150], "coast": [50, 309], "coastlin": [50, 172, 309, 380], "coca": 51, "cock": [158, 1049], "cockburn": 1042, "coclust": [57, 412, 458, 521], "cocoa": 1033, "code": [2, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 377, 381, 382, 384, 386, 387, 392, 395, 397, 398, 401, 406, 409, 411, 414, 415, 422, 423, 449, 450, 454, 456, 466, 504, 534, 538, 539, 545, 546, 550, 551, 553, 554, 556, 574, 580, 589, 590, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 672, 673, 690, 691, 693, 694, 719, 840, 841, 842, 879, 886, 998, 1006, 1010, 1019, 1021, 1023, 1024, 1028, 1029, 1030, 1032, 1033, 1040, 1042, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "code_book_": 842, "code_init": [539, 553], "code_s": [293, 842, 1010], "codebas": [331, 366, 383, 384, 385, 423, 1040, 1046], "codebook": [83, 293, 574, 842], "codebook_random": 83, "codecov": 391, "codeofconduct": 383, "coder": [132, 550, 724], "codevig": 1046, "coef": [49, 89, 132, 189, 190, 197, 202, 208, 209, 211, 216, 220, 221, 222, 226, 232, 233, 258, 288, 313, 331, 354, 532, 654, 655, 657, 660, 661, 667, 668, 669, 670, 671, 677, 680, 682, 688, 689, 690, 691, 692, 693, 694, 695, 1013], "coef0": [195, 350, 352, 459, 543, 647, 648, 651, 783, 785, 914, 915, 916, 917, 918, 1007, 1024], "coef_": [46, 49, 53, 89, 117, 168, 169, 172, 189, 190, 197, 200, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 216, 220, 221, 222, 226, 232, 233, 252, 258, 288, 289, 323, 329, 344, 351, 354, 357, 366, 378, 385, 397, 418, 424, 472, 489, 490, 491, 557, 601, 602, 605, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 912, 913, 914, 915, 916, 917, 918, 992, 1003, 1005, 1023, 1024, 1040, 1042, 1045, 1047, 1052, 1054, 1057, 1058], "coef_agglomeration_": 89, "coef_en_lr": 208, "coef_i": 190, "coef_init": [654, 655, 660, 661, 668, 669, 670, 671, 674, 675, 676, 684, 685, 686, 689, 692], "coef_l": 205, "coef_l1_lr": 208, "coef_l2_lr": 208, "coef_lar": 205, "coef_lasso": 205, "coef_lasso_": 211, "coef_multi_task_lasso_": 211, "coef_p": 205, "coef_path": [661, 671, 692], "coef_path_": [658, 659, 662, 663, 1005], "coef_path_continu": [661, 671, 692], "coef_path_lar": [661, 671, 692], "coef_pl": 205, "coef_positive_lar": 205, "coef_ridg": 200, "coef_selection_": 89, "coeff": 688, "coeff_diff": 203, "coeffeci": 1049, "coeffici": [2, 25, 46, 49, 73, 84, 93, 95, 111, 112, 115, 123, 126, 163, 169, 174, 187, 188, 189, 196, 200, 202, 203, 205, 208, 210, 211, 212, 213, 214, 215, 219, 220, 232, 235, 258, 275, 288, 289, 313, 323, 327, 328, 329, 350, 353, 357, 358, 359, 370, 379, 385, 397, 400, 417, 418, 420, 424, 425, 428, 438, 459, 472, 474, 480, 482, 483, 485, 486, 487, 488, 489, 490, 491, 504, 532, 534, 535, 539, 543, 545, 547, 550, 551, 556, 560, 562, 564, 566, 568, 570, 573, 576, 578, 590, 597, 601, 605, 617, 619, 622, 635, 643, 644, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 699, 709, 711, 724, 727, 737, 742, 746, 751, 758, 761, 783, 785, 793, 794, 796, 800, 801, 804, 823, 835, 838, 845, 846, 855, 863, 870, 873, 885, 892, 912, 913, 914, 915, 916, 917, 918, 921, 923, 1000, 1003, 1005, 1023, 1024, 1030, 1040, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1057], "coefs_": [210, 313, 869, 870, 1013, 1045], "coefs_cf": 323, "coefs_enet": 205, "coefs_lar": 205, "coefs_lasso": 205, "coefs_no_cf": 323, "coefs_path": 667, "coefs_paths_": [667, 1050], "coefs_positive_enet": 205, "coefs_positive_lar": 205, "coefs_positive_lasso": 205, "coelho": [1041, 1043, 1044, 1048], "coelhudo": 1052, "cognit": [172, 380], "cohen": [2, 724, 1048], "cohen_kappa_scor": [2, 1009, 1045, 1047, 1059], "coher": 415, "cohort": 161, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 83, 88, 89, 97, 101, 102, 187, 415, 423, 448, 469, 1021, 1030], "coincid": [178, 219, 425], "col": [52, 57, 62, 64, 73, 77, 84, 90, 94, 98, 99, 104, 107, 143, 159, 179, 237, 254, 354, 519, 521], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [430, 458, 460], "col_indic": 153, "col_nam": 52, "col_split": 52, "cola": 51, "cold": 296, "cole": 1049, "coleman": [1041, 1042], "colgat": [51, 55], "colin": [45, 378, 1046], "collabor": 383, "collaps": [43, 191, 254, 316, 346, 395], "colleagu": 275, "collect": [2, 41, 46, 49, 51, 52, 57, 62, 107, 141, 153, 154, 161, 172, 179, 186, 193, 204, 210, 240, 247, 278, 282, 358, 359, 370, 378, 380, 387, 401, 419, 420, 422, 423, 453, 471, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 577, 578, 589, 591, 592, 596, 597, 598, 599, 640, 737, 738, 746, 786, 791, 792, 795, 810, 814, 815, 817, 831, 979, 982, 998, 1004, 1005, 1009, 1015, 1020, 1029, 1033, 1042, 1052], "colleg": [0, 189], "college_degre": 189, "collid": 423, "collin": 1043, "collinear": [190, 193, 222, 235, 422, 575, 656, 677, 688, 885, 1005, 1040, 1059], "collis": [358, 359, 423, 590, 597], "collot": [1054, 1055], "colombia": [50, 309, 378, 506], "colon": 383, "coloni": 378, "color": [43, 45, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 67, 69, 70, 71, 73, 75, 77, 79, 81, 82, 84, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 111, 112, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 137, 138, 143, 146, 147, 149, 152, 153, 154, 155, 156, 158, 160, 163, 165, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 190, 192, 193, 197, 198, 200, 201, 202, 204, 205, 206, 207, 209, 211, 213, 215, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 231, 234, 235, 238, 239, 240, 242, 244, 248, 249, 250, 252, 255, 260, 261, 262, 263, 264, 265, 266, 269, 270, 274, 276, 278, 279, 280, 281, 282, 284, 285, 286, 288, 289, 295, 298, 301, 302, 303, 304, 307, 308, 309, 311, 316, 317, 318, 320, 321, 322, 326, 332, 337, 338, 340, 344, 345, 346, 347, 348, 350, 352, 353, 354, 362, 363, 377, 378, 380, 391, 415, 422, 423, 454, 501, 502, 514, 591, 592, 787, 982, 1023, 1025, 1030, 1045, 1050, 1052, 1057], "color_continuous_scal": 276, "color_intens": 48, "color_it": [261, 265, 266], "color_map": 340, "color_palett": [72, 138, 153, 265], "colorbar": [43, 50, 66, 75, 123, 133, 145, 154, 170, 175, 177, 178, 180, 191, 237, 248, 264, 286, 316, 346, 705, 1052], "colorbarbas": 316, "colorblind": [72, 138, 153], "coloring_matrix": [111, 112], "colormap": [123, 182, 346, 705, 1053], "colors_": 77, "colors_list": 143, "colour": [263, 380, 423, 595, 1010], "colt": [734, 764, 1009], "colton": 1001, "columbia": 0, "column": [2, 43, 52, 58, 59, 95, 103, 106, 109, 120, 144, 146, 147, 150, 153, 155, 158, 172, 179, 185, 187, 189, 190, 191, 192, 193, 206, 217, 218, 221, 225, 235, 246, 253, 254, 255, 258, 265, 269, 275, 276, 286, 287, 289, 295, 313, 321, 322, 323, 327, 328, 329, 330, 332, 333, 357, 358, 359, 370, 377, 378, 380, 383, 385, 389, 392, 395, 396, 397, 412, 415, 416, 418, 420, 422, 423, 424, 427, 430, 458, 460, 471, 473, 474, 478, 479, 485, 494, 495, 496, 497, 498, 500, 502, 504, 508, 509, 510, 512, 513, 516, 517, 518, 519, 521, 523, 534, 539, 542, 545, 549, 550, 556, 563, 565, 566, 569, 570, 572, 573, 574, 575, 589, 590, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 635, 638, 640, 641, 642, 654, 656, 660, 666, 668, 670, 672, 673, 677, 688, 693, 694, 705, 721, 726, 727, 737, 738, 746, 762, 771, 776, 777, 778, 781, 791, 792, 795, 796, 808, 811, 812, 822, 833, 838, 843, 846, 847, 848, 849, 850, 851, 852, 853, 872, 876, 877, 878, 879, 885, 886, 887, 891, 892, 893, 894, 896, 897, 898, 902, 903, 912, 914, 917, 920, 922, 929, 934, 938, 939, 944, 956, 971, 984, 985, 987, 995, 998, 999, 1001, 1005, 1007, 1009, 1010, 1017, 1019, 1024, 1029, 1030, 1040, 1042, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "column_labels_": [58, 59, 412, 458, 460], "column_nam": 235, "column_or_1d": [2, 392, 1051, 1055], "column_result": 276, "column_stack": [76, 311, 318], "column_to_drop": 190, "column_tran": [235, 416], "column_transform": 333, "columnar": [377, 471, 1028], "columns_": [57, 412, 430, 458, 460], "columns_to_drop": 269, "columntransform": [2, 43, 104, 105, 158, 190, 191, 192, 217, 235, 246, 254, 256, 258, 322, 326, 328, 329, 330, 332, 375, 377, 395, 396, 406, 473, 474, 637, 877, 998, 999, 1029, 1035, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "columntransformercolumntransform": [105, 158, 190, 192, 246, 256, 322, 326, 329], "columntransformerinot": [158, 191], "columnwis": 420, "com": [51, 104, 296, 357, 378, 381, 383, 387, 388, 389, 391, 395, 415, 449, 542, 549, 679, 713, 1047, 1050], "coma": 1033, "comaniciu": [98, 415, 455], "comapar": 415, "comb": 1054, "combat": [311, 420], "combin": [2, 19, 43, 51, 52, 58, 62, 64, 96, 104, 105, 107, 108, 109, 120, 123, 131, 132, 136, 147, 148, 152, 153, 161, 174, 180, 185, 186, 187, 190, 202, 217, 221, 234, 235, 241, 244, 246, 249, 271, 275, 276, 284, 286, 287, 305, 312, 322, 327, 328, 330, 349, 350, 359, 362, 370, 375, 379, 380, 383, 388, 396, 397, 411, 412, 413, 415, 416, 419, 420, 421, 422, 423, 424, 425, 427, 428, 452, 471, 473, 474, 480, 482, 483, 486, 487, 488, 496, 504, 516, 517, 523, 529, 532, 534, 539, 545, 546, 548, 550, 555, 557, 568, 570, 573, 575, 576, 618, 622, 624, 629, 632, 638, 642, 651, 654, 655, 660, 661, 666, 667, 668, 669, 670, 671, 674, 676, 680, 681, 682, 683, 684, 686, 687, 689, 692, 700, 709, 738, 796, 808, 811, 812, 819, 820, 833, 835, 839, 856, 871, 872, 873, 877, 885, 886, 887, 892, 912, 982, 998, 1001, 1002, 1005, 1009, 1010, 1012, 1015, 1019, 1022, 1023, 1025, 1026, 1030, 1033, 1040, 1045, 1048, 1051, 1052, 1053, 1055, 1056], "combinator": 818, "combined_featur": 108, "combsccod": 1054, "comcast": 51, "come": [84, 102, 104, 113, 118, 128, 172, 174, 249, 289, 325, 357, 358, 370, 372, 376, 380, 383, 384, 387, 391, 395, 397, 401, 409, 414, 415, 419, 422, 423, 446, 457, 463, 479, 558, 713, 803, 829, 914, 917, 961, 998, 999, 1003, 1006, 1008, 1012, 1015, 1024, 1040, 1051, 1054, 1056], "comedi": 883, "comfort": [90, 422], "command": [248, 370, 371, 381, 383, 387, 389, 391, 401, 423, 516, 1028, 1042], "comment": [81, 357, 381, 382, 383, 384, 386, 387, 391, 494, 587, 1009], "commerc": 1033, "commerci": [419, 1033], "commit": [386, 387, 391, 1032, 1040, 1041, 1042, 1043], "committ": [383, 1040], "commod": 1009, "common": [2, 52, 54, 55, 57, 126, 169, 172, 187, 188, 189, 213, 221, 222, 270, 275, 282, 293, 327, 350, 357, 359, 365, 370, 377, 383, 385, 391, 393, 395, 396, 400, 401, 406, 412, 413, 415, 416, 419, 421, 424, 425, 454, 472, 474, 504, 598, 640, 661, 680, 681, 709, 754, 761, 777, 809, 810, 813, 823, 825, 826, 827, 828, 829, 835, 838, 873, 875, 883, 884, 885, 890, 892, 897, 898, 900, 901, 902, 903, 929, 931, 958, 961, 998, 999, 1005, 1012, 1015, 1019, 1024, 1025, 1028, 1029, 1030, 1033, 1035, 1040, 1048, 1050, 1051, 1055], "common_nod": 365, "common_node_id": 365, "common_param": [92, 150, 153, 191, 250, 277, 278, 350], "commonli": [217, 272, 350, 376, 397, 415, 416, 425, 622, 766, 767, 805, 841, 884, 1006, 1007, 1009, 1010, 1012, 1056], "commun": [251, 376, 382, 388, 391, 397, 398, 415, 422, 546, 548, 555, 700, 718, 884, 999, 1006, 1012, 1019, 1023, 1028, 1032, 1033, 1048, 1049], "commut": [43, 52], "comp": [57, 117, 118, 126, 133, 314, 339, 357, 358, 359, 378], "comp_cov": [476, 477, 478, 479, 480, 481, 482, 483], "compact": [172, 195, 316, 370, 380, 852, 853, 1025, 1042], "compani": [217, 235, 414, 415, 1033], "companion": [383, 1019], "companioni": 1040, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 82, 84, 87, 89, 90, 92, 93, 99, 102, 105, 106, 107, 108, 113, 114, 116, 118, 121, 126, 130, 132, 136, 137, 138, 140, 142, 146, 147, 148, 150, 152, 153, 154, 156, 158, 161, 164, 172, 178, 185, 186, 187, 190, 192, 193, 196, 198, 200, 202, 204, 205, 206, 212, 214, 217, 218, 220, 221, 223, 225, 227, 231, 234, 235, 237, 238, 241, 243, 246, 249, 252, 254, 255, 257, 262, 263, 267, 270, 272, 273, 274, 276, 278, 280, 282, 284, 286, 287, 290, 293, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 310, 313, 315, 317, 320, 321, 323, 327, 350, 357, 358, 359, 364, 365, 366, 372, 378, 380, 383, 385, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 424, 425, 447, 448, 449, 451, 452, 453, 455, 456, 457, 459, 465, 470, 471, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 497, 504, 510, 512, 520, 522, 530, 532, 536, 539, 545, 547, 549, 553, 554, 559, 560, 569, 570, 571, 572, 573, 639, 647, 652, 653, 661, 663, 665, 666, 671, 674, 676, 684, 685, 692, 703, 713, 720, 723, 739, 746, 751, 794, 806, 808, 813, 822, 835, 838, 845, 854, 858, 861, 865, 869, 870, 872, 873, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 912, 913, 914, 916, 917, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1030, 1040, 1042, 1047, 1048, 1053], "comparison": [51, 53, 57, 60, 61, 62, 63, 65, 69, 71, 73, 75, 77, 83, 85, 92, 93, 94, 95, 96, 98, 104, 112, 120, 122, 124, 125, 127, 133, 137, 140, 143, 150, 153, 156, 160, 161, 166, 173, 179, 180, 181, 183, 187, 192, 200, 202, 203, 204, 205, 208, 215, 217, 221, 232, 235, 236, 239, 240, 241, 242, 243, 247, 248, 262, 267, 269, 270, 271, 272, 279, 287, 289, 295, 305, 311, 318, 320, 321, 325, 327, 340, 343, 352, 356, 357, 358, 366, 378, 380, 397, 413, 415, 417, 418, 420, 424, 425, 444, 445, 450, 453, 454, 456, 489, 490, 491, 495, 512, 520, 522, 523, 530, 533, 543, 549, 557, 558, 561, 572, 573, 589, 590, 596, 597, 598, 599, 614, 616, 618, 619, 623, 630, 633, 639, 647, 651, 667, 680, 696, 697, 698, 699, 700, 712, 746, 751, 787, 796, 808, 809, 810, 811, 813, 814, 822, 824, 825, 826, 827, 828, 829, 838, 847, 850, 854, 869, 870, 873, 885, 886, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 912, 914, 915, 917, 918, 920, 998, 1002, 1003, 1006, 1009, 1011, 1012, 1015, 1024, 1030, 1037], "compat": [251, 278, 296, 326, 377, 386, 392, 393, 395, 397, 401, 406, 409, 423, 470, 476, 516, 574, 585, 597, 611, 622, 623, 626, 627, 628, 630, 631, 640, 641, 642, 666, 667, 681, 683, 782, 786, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829, 856, 857, 872, 877, 885, 886, 924, 925, 931, 934, 950, 951, 971, 1006, 1012, 1014, 1028, 1029, 1033, 1035, 1040, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059], "compens": [114, 189, 191, 195, 217, 235, 276, 417, 420], "compet": [43, 190], "competit": [43, 150, 357, 422, 652, 1012], "compil": [158, 296, 359, 370, 371, 384, 385, 386, 391, 392, 395, 1028, 1040], "compl": 93, "complain": 1058, "complement": [2, 191, 285, 357, 640, 641, 810, 825, 828, 838, 847, 848, 849, 850, 851, 1016, 1031, 1035, 1048], "complementari": [43, 423], "complementnb": [2, 276, 357, 847, 848, 850, 851, 1011, 1048, 1052, 1053, 1055], "complementnbcomplementnb": 276, "complet": [0, 2, 43, 72, 73, 74, 79, 84, 87, 93, 97, 118, 153, 156, 167, 169, 172, 187, 192, 193, 223, 243, 244, 251, 254, 269, 273, 321, 323, 325, 358, 366, 378, 383, 387, 388, 391, 395, 416, 419, 420, 422, 423, 448, 452, 456, 459, 469, 470, 471, 474, 503, 544, 545, 546, 547, 552, 554, 566, 577, 578, 589, 595, 596, 597, 599, 635, 636, 637, 638, 653, 657, 665, 679, 681, 712, 713, 723, 724, 725, 737, 739, 744, 745, 765, 794, 803, 840, 843, 846, 855, 871, 872, 873, 874, 941, 993, 1003, 1005, 1009, 1010, 1012, 1024, 1025, 1028, 1030, 1040, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "completed_fac": 253, "completeness_scor": [2, 73, 84, 93, 326, 358, 415, 744, 745, 803, 1009], "complex": [42, 48, 49, 54, 58, 106, 143, 158, 171, 174, 179, 185, 187, 221, 231, 234, 243, 250, 251, 254, 267, 273, 276, 279, 284, 317, 325, 328, 329, 333, 334, 346, 350, 359, 360, 365, 379, 383, 388, 395, 415, 416, 420, 422, 426, 447, 451, 454, 455, 457, 474, 496, 508, 509, 510, 522, 542, 549, 559, 565, 566, 567, 568, 570, 572, 573, 612, 638, 646, 664, 666, 684, 685, 742, 758, 808, 838, 840, 868, 872, 873, 877, 885, 892, 908, 912, 915, 918, 920, 921, 922, 923, 998, 999, 1001, 1002, 1004, 1006, 1008, 1010, 1015, 1019, 1022, 1029, 1030, 1031, 1033, 1035, 1041, 1043, 1049, 1050, 1053], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [383, 397, 950, 1029], "complianc": [0, 153], "compliant": [330, 383, 1058, 1059], "complic": [64, 251, 311, 389, 425, 702, 1012], "compon": [2, 11, 43, 44, 55, 79, 93, 97, 104, 107, 116, 117, 120, 124, 125, 127, 128, 129, 130, 131, 133, 156, 164, 179, 187, 189, 202, 237, 248, 249, 252, 260, 261, 264, 265, 266, 274, 276, 297, 298, 299, 307, 308, 314, 321, 327, 370, 375, 378, 383, 385, 389, 392, 409, 411, 415, 416, 418, 423, 425, 427, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 470, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 510, 512, 523, 529, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 703, 805, 806, 807, 808, 811, 812, 822, 830, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 955, 956, 1001, 1006, 1008, 1019, 1021, 1024, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1040, 1042, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "component_1": 265, "component_2": 265, "component_indices_": [647, 1053], "components_": [45, 54, 93, 118, 123, 125, 126, 133, 248, 249, 314, 321, 329, 397, 416, 420, 451, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 551, 552, 647, 861, 868, 904, 905, 1001, 1021, 1044, 1046, 1052, 1055, 1058], "components_col": 107, "compos": [2, 43, 44, 62, 103, 104, 105, 109, 118, 139, 147, 158, 187, 190, 191, 192, 217, 219, 235, 246, 254, 256, 258, 289, 293, 322, 326, 328, 329, 330, 332, 333, 396, 406, 415, 416, 419, 471, 472, 473, 474, 523, 561, 620, 1008, 1010, 1030, 1040], "composit": [7, 35, 246, 326, 375, 419, 666, 796, 999, 1005, 1018, 1035, 1041], "compound": [43, 235, 423, 618, 620, 688, 732, 760, 1005], "compoundkernel": [2, 618, 1054], "comprehens": [350, 391, 423, 766, 767, 1007, 1033, 1048], "compress": [42, 50, 55, 83, 101, 187, 293, 316, 378, 409, 415, 420, 423, 424, 660, 680, 700, 842, 885, 979, 982, 994, 1005, 1010, 1019, 1030, 1040, 1049], "compressed_raccoon_kmean": 88, "compressed_raccoon_uniform": 88, "compris": [104, 150, 273, 357, 358, 359, 378, 395, 420, 422, 523, 815, 1006], "compromis": [48, 64, 191, 370, 383, 655, 687, 1012, 1043], "comput": [0, 2, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 81, 87, 89, 92, 93, 95, 96, 104, 106, 112, 113, 114, 115, 124, 132, 140, 144, 145, 148, 149, 150, 151, 152, 153, 171, 172, 174, 179, 181, 182, 185, 190, 191, 192, 193, 195, 198, 199, 202, 203, 204, 205, 206, 217, 219, 221, 225, 231, 234, 235, 238, 241, 245, 247, 248, 250, 254, 255, 257, 269, 271, 273, 275, 276, 277, 278, 282, 284, 286, 296, 298, 300, 302, 303, 305, 306, 309, 316, 325, 329, 330, 333, 336, 338, 346, 350, 353, 357, 358, 359, 365, 371, 372, 377, 378, 380, 383, 388, 389, 390, 392, 395, 396, 397, 400, 401, 409, 410, 411, 412, 413, 415, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 464, 466, 468, 469, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 524, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 590, 593, 594, 597, 598, 599, 601, 602, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 733, 734, 735, 737, 738, 739, 742, 744, 746, 747, 748, 750, 751, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 804, 805, 806, 807, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 877, 878, 881, 882, 887, 888, 889, 890, 891, 892, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 917, 919, 920, 921, 922, 923, 953, 954, 955, 956, 973, 974, 981, 983, 989, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "computation": [37, 53, 111, 123, 143, 149, 158, 174, 296, 350, 357, 369, 384, 395, 415, 416, 419, 420, 422, 425, 546, 640, 641, 679, 771, 808, 810, 811, 812, 822, 835, 1005, 1006, 1008, 1016, 1017, 1021, 1035, 1044], "compute_class_weight": [2, 397, 1043, 1054], "compute_corrected_ttest": 275, "compute_dist": [448, 452, 1052], "compute_full_tre": [448, 452, 1044], "compute_import": 1042, "compute_inverse_compon": [904, 905, 1021], "compute_inverse_transform": 1054, "compute_label": [449, 456], "compute_node_depth": 365, "compute_optics_graph": [2, 462, 463, 1057], "compute_sample_weight": [2, 1054], "compute_scor": [109, 130, 197, 198, 652, 653, 1049], "compute_sourc": 427, "computed_scor": 653, "con": [409, 597, 1008], "concat": [43, 185, 189, 206, 235, 885], "concaten": [2, 63, 70, 74, 85, 96, 103, 106, 114, 139, 154, 168, 182, 187, 197, 200, 209, 231, 232, 238, 244, 260, 264, 265, 271, 280, 282, 283, 284, 285, 301, 314, 320, 323, 336, 345, 349, 357, 416, 471, 474, 512, 517, 539, 545, 549, 550, 607, 789, 808, 871, 872, 874, 877, 885, 917, 1010, 1030, 1041], "concav": [172, 333, 380], "concentr": [46, 48, 100, 121, 128, 137, 156, 179, 186, 187, 242, 259, 261, 266, 286, 306, 318, 337, 379, 383, 422, 450, 527, 805, 1008, 1015, 1030], "concentrations_prior": 260, "concept": [2, 114, 143, 148, 251, 284, 395, 415, 421, 423, 1001, 1009, 1012, 1025, 1033], "conceptu": [380, 422, 1007], "concern": [37, 56, 71, 110, 116, 119, 122, 134, 136, 166, 173, 184, 187, 194, 196, 236, 259, 265, 269, 292, 294, 297, 310, 315, 334, 341, 356, 360, 370, 385, 409, 1006, 1021], "concis": [64, 217, 383, 388, 1051, 1053], "conclud": [137, 190, 198, 235, 275, 359, 366, 398, 872], "conclus": [43, 128, 190, 192, 217, 219, 275, 277, 366, 422], "concomit": [657, 1005], "concret": [221, 384, 398, 414, 424, 682, 683, 904, 905, 1005, 1023, 1028], "concurr": [397, 423, 974, 1052, 1054], "conda": [325, 326, 327, 328, 329, 330, 331, 332, 333, 371, 383, 384, 386, 387, 389, 391, 401, 402, 408, 409, 1025], "conda_prefix": 389, "condarc": 381, "condens": [195, 453], "condit": [2, 43, 51, 52, 62, 64, 115, 145, 150, 187, 188, 190, 206, 219, 222, 235, 251, 255, 278, 328, 365, 389, 395, 400, 411, 412, 413, 414, 415, 417, 420, 422, 424, 458, 471, 478, 479, 480, 485, 504, 521, 531, 532, 544, 547, 548, 549, 551, 553, 555, 557, 558, 570, 635, 640, 641, 651, 658, 659, 660, 662, 663, 664, 678, 680, 681, 682, 683, 690, 691, 695, 705, 720, 725, 726, 744, 745, 803, 847, 848, 849, 850, 851, 870, 873, 876, 885, 886, 889, 893, 956, 980, 1003, 1005, 1006, 1007, 1009, 1011, 1012, 1014, 1019, 1025, 1030, 1035, 1041, 1043, 1044, 1045, 1047, 1048, 1050, 1052, 1054, 1055, 1056, 1058], "condition": [51, 64, 217, 413, 417, 766, 1003], "condition2": 158, "conduct": [189, 275, 425, 1032, 1054], "conf": [46, 64, 387, 413, 419, 847, 1011, 1054], "confer": [269, 275, 378, 415, 420, 426, 446, 451, 457, 519, 543, 571, 704, 716, 734, 764, 868, 869, 870, 1009, 1015, 1021, 1025], "confid": [52, 61, 62, 63, 64, 153, 179, 181, 261, 275, 278, 338, 398, 413, 425, 644, 666, 667, 674, 676, 679, 682, 683, 684, 706, 710, 715, 728, 734, 735, 747, 748, 764, 797, 840, 879, 912, 914, 917, 1005, 1008, 1009, 1010, 1015, 1022, 1023, 1024, 1033, 1050], "config": [52, 371, 381, 383, 384, 391, 634, 1048], "config_context": [2, 258, 370, 371, 411, 634, 910, 1047, 1053, 1056], "configur": [2, 3, 46, 49, 64, 105, 106, 191, 251, 256, 258, 289, 323, 357, 369, 381, 383, 385, 389, 391, 395, 397, 401, 406, 411, 416, 423, 424, 439, 449, 450, 452, 454, 456, 459, 469, 471, 475, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 574, 575, 576, 577, 578, 589, 590, 591, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 634, 635, 636, 637, 638, 640, 643, 646, 647, 648, 649, 650, 696, 697, 698, 699, 700, 702, 703, 796, 808, 822, 856, 861, 864, 868, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 910, 974, 975, 1006, 1009, 1019, 1024, 1028, 1035, 1044, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057], "confirm": [43, 52, 118, 140, 147, 150, 153, 192, 217, 219, 269, 278, 281, 284, 321, 359, 387, 998, 1019, 1048], "conflict": [381, 383, 387, 391, 401, 1047, 1048], "conform": [52, 383, 589, 636, 840, 841, 1009, 1028, 1029, 1047, 1053], "confound": [189, 190], "confus": [2, 68, 187, 245, 267, 269, 284, 335, 336, 357, 397, 475, 512, 639, 660, 705, 721, 723, 726, 737, 738, 746, 762, 792, 795, 838, 910, 917, 1030, 1040, 1041, 1045, 1049, 1050, 1052, 1053, 1054, 1055], "confusingli": 381, "confusion_matrix": [2, 68, 245, 268, 269, 333, 335, 336, 705, 721, 762, 807, 835, 1009, 1041, 1046, 1047, 1050, 1051, 1053, 1057], "confusion_matrix_scor": 1009, "confusionmatrixdisplai": [2, 45, 68, 268, 328, 333, 335, 357, 639, 726, 1009, 1050, 1051, 1053, 1054, 1055], "congruenc": [662, 663, 664, 690, 691], "conjug": [275, 459, 469, 680, 682, 695, 703, 1005], "conjunct": [406, 415, 602, 814, 830, 831, 833, 834, 835, 836, 839, 975, 999, 1005, 1055], "connect": [2, 51, 74, 79, 82, 86, 89, 97, 101, 102, 381, 383, 392, 397, 417, 448, 452, 459, 469, 470, 593, 594, 703, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 1007, 1012, 1014, 1022, 1032, 1044, 1053, 1057], "connected_compon": 1047, "connectionist": [869, 870], "conner": 1053, "connor": [1048, 1053, 1057, 1058], "connossor": [1048, 1049], "conocophillip": 51, "conort": 1033, "conquer": 956, "conrad": [1040, 1041, 1055, 1058], "conroi": 1055, "consecut": [137, 148, 218, 395, 413, 419, 423, 450, 454, 456, 457, 459, 463, 466, 469, 545, 546, 547, 554, 610, 653, 674, 675, 676, 684, 685, 686, 805, 806, 813, 847, 848, 849, 850, 851, 869, 870, 998, 1019, 1048], "consensu": [2, 58, 59, 72, 382, 383, 398, 412, 415, 657, 679, 686, 687, 727, 1009], "consensus_scor": [2, 58, 59, 412, 1042], "consequ": [92, 130, 235, 275, 276, 316, 343, 366, 413, 414, 420, 422, 569, 570, 574, 663, 664, 999, 1005, 1009, 1017, 1025, 1049, 1051, 1056, 1058], "conserv": [50, 397, 590, 597, 904, 905, 1008, 1021], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 90, 101, 105, 114, 120, 123, 127, 147, 150, 167, 171, 172, 186, 191, 217, 219, 251, 269, 275, 278, 282, 286, 289, 296, 299, 302, 303, 316, 327, 333, 343, 350, 351, 353, 357, 366, 370, 371, 372, 375, 382, 383, 385, 389, 391, 395, 397, 398, 406, 409, 411, 414, 415, 420, 421, 422, 423, 424, 425, 426, 427, 445, 451, 453, 457, 464, 481, 516, 517, 529, 541, 549, 557, 558, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 593, 594, 596, 597, 599, 601, 615, 616, 628, 639, 640, 641, 654, 660, 666, 667, 668, 670, 679, 687, 696, 697, 698, 700, 701, 702, 704, 708, 710, 713, 715, 717, 723, 734, 738, 742, 764, 794, 796, 802, 854, 855, 856, 858, 860, 862, 863, 864, 867, 869, 870, 875, 885, 886, 893, 907, 908, 917, 918, 920, 921, 922, 923, 933, 992, 998, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1015, 1016, 1017, 1019, 1023, 1024, 1025, 1029, 1043, 1044, 1048, 1052, 1053, 1055, 1056, 1057], "consider": [152, 153, 175, 178, 254, 270, 276, 282, 378, 383, 414, 425, 627, 808, 822, 830, 998, 1005, 1011, 1015, 1023, 1033, 1057], "consist": [2, 43, 46, 63, 68, 72, 91, 92, 104, 113, 120, 121, 123, 143, 147, 153, 154, 161, 172, 177, 179, 182, 186, 193, 217, 235, 250, 254, 281, 284, 313, 321, 325, 328, 353, 358, 366, 370, 376, 378, 380, 383, 389, 390, 391, 392, 396, 397, 398, 413, 415, 417, 421, 422, 423, 433, 434, 437, 438, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 497, 505, 539, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 562, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 599, 619, 635, 636, 637, 638, 643, 646, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 682, 685, 686, 687, 695, 696, 697, 698, 699, 708, 743, 805, 806, 815, 840, 841, 842, 844, 845, 846, 847, 855, 856, 858, 860, 863, 864, 870, 875, 876, 877, 879, 883, 884, 887, 888, 890, 891, 893, 904, 905, 908, 912, 913, 915, 916, 918, 921, 923, 929, 938, 940, 963, 979, 982, 997, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1019, 1022, 1024, 1025, 1027, 1029, 1033, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "consol": [146, 381], "consolid": [0, 397, 398, 1040], "consolidate_scor": 52, "consortium": [0, 1033], "constant": [2, 43, 132, 140, 153, 177, 180, 181, 186, 190, 204, 218, 219, 221, 235, 246, 251, 256, 278, 308, 312, 314, 317, 319, 326, 353, 355, 366, 375, 385, 392, 397, 412, 422, 425, 438, 453, 472, 489, 490, 491, 519, 521, 542, 546, 548, 555, 557, 558, 559, 560, 562, 564, 566, 568, 570, 573, 576, 578, 598, 614, 617, 619, 621, 635, 638, 640, 641, 643, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 684, 685, 686, 687, 688, 695, 697, 701, 703, 729, 731, 732, 736, 740, 783, 785, 793, 807, 830, 845, 846, 855, 863, 869, 870, 877, 888, 891, 900, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 1001, 1003, 1005, 1006, 1009, 1011, 1012, 1019, 1023, 1025, 1035, 1043, 1048, 1050, 1052, 1053, 1054, 1056, 1058], "constant_": 560, "constant_valu": [425, 621, 625], "constant_value_bound": [425, 619, 621, 625], "constantini": 1056, "constantkernel": [2, 177, 183, 425, 619, 625, 629, 632], "constantli": [72, 217, 1033], "constitu": 380, "constitut": [85, 397, 419, 422, 457, 463, 596, 597, 599, 1013], "constrain": [25, 82, 123, 147, 153, 155, 191, 208, 311, 326, 332, 344, 346, 376, 397, 415, 420, 422, 517, 569, 570, 643, 666, 667, 698, 702, 830, 837, 1005, 1008, 1044], "constrained_layout": [123, 191, 237, 322, 323, 330], "constraint": [90, 92, 102, 123, 136, 187, 205, 212, 221, 254, 255, 270, 312, 313, 314, 326, 383, 395, 420, 423, 494, 516, 517, 565, 566, 567, 568, 569, 570, 572, 573, 640, 643, 826, 827, 920, 921, 922, 923, 977, 998, 1000, 1005, 1006, 1023, 1030, 1044, 1047, 1048, 1051, 1053, 1055, 1057], "constru": 423, "construct": [2, 43, 50, 104, 106, 137, 139, 141, 145, 158, 172, 235, 245, 251, 256, 258, 309, 317, 319, 326, 329, 377, 380, 385, 392, 397, 415, 416, 419, 420, 422, 423, 426, 440, 448, 449, 451, 452, 457, 459, 464, 470, 472, 474, 527, 543, 549, 552, 563, 564, 589, 595, 647, 696, 698, 699, 822, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 871, 872, 873, 874, 876, 917, 937, 939, 955, 956, 967, 971, 998, 999, 1001, 1005, 1006, 1009, 1010, 1012, 1019, 1022, 1024, 1025, 1029, 1045, 1047, 1048, 1051, 1054], "construct_grid": [50, 309], "constructor": [30, 31, 106, 247, 371, 385, 397, 416, 423, 471, 474, 557, 558, 563, 575, 576, 577, 578, 589, 590, 596, 597, 605, 676, 684, 685, 807, 808, 822, 854, 855, 856, 858, 860, 862, 863, 864, 871, 872, 873, 874, 998, 1010, 1019, 1024, 1029, 1040, 1041, 1043, 1044, 1045, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "consult": 1009, "consum": [2, 123, 366, 377, 385, 397, 406, 415, 419, 422, 456, 811, 812, 872, 873, 964, 965, 974, 1005, 1033, 1045, 1057], "consumpt": [47, 370, 397, 415, 542, 565, 566, 572, 573, 808, 822, 833, 834, 835, 920, 921, 922, 923, 974, 1040, 1042, 1046, 1048, 1049, 1054], "contact": [395, 1028], "contain": [2, 49, 57, 61, 64, 69, 75, 84, 91, 93, 104, 105, 139, 141, 145, 153, 154, 180, 190, 191, 193, 195, 208, 221, 235, 244, 251, 254, 255, 258, 265, 269, 273, 275, 281, 284, 285, 295, 302, 303, 305, 316, 328, 336, 339, 357, 358, 376, 377, 378, 380, 383, 385, 387, 388, 389, 390, 391, 392, 395, 397, 409, 411, 413, 415, 416, 418, 419, 420, 422, 423, 424, 425, 427, 429, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 504, 508, 510, 511, 512, 516, 517, 518, 522, 523, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 694, 696, 697, 698, 699, 700, 704, 705, 706, 708, 709, 710, 717, 720, 724, 743, 744, 745, 780, 787, 788, 796, 802, 805, 806, 807, 808, 811, 812, 814, 822, 826, 827, 830, 831, 835, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 934, 937, 938, 939, 959, 960, 963, 964, 971, 974, 975, 977, 998, 999, 1001, 1007, 1010, 1013, 1015, 1017, 1019, 1020, 1022, 1025, 1028, 1032, 1040, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "container": 409, "container_fold": 511, "container_path": 511, "contamin": [48, 113, 114, 244, 254, 302, 303, 476, 571, 858, 1015, 1048, 1056, 1057], "content": [2, 7, 55, 321, 357, 359, 378, 383, 387, 389, 409, 423, 493, 511, 516, 517, 596, 597, 599, 679, 926, 1018, 1033, 1041, 1050], "context": [2, 93, 258, 269, 296, 333, 370, 371, 377, 382, 384, 396, 397, 415, 416, 421, 422, 423, 425, 426, 444, 451, 453, 455, 457, 459, 464, 465, 468, 471, 474, 475, 479, 539, 543, 544, 545, 547, 550, 551, 552, 553, 554, 556, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 602, 610, 615, 616, 618, 634, 635, 638, 640, 642, 647, 655, 659, 661, 663, 665, 666, 667, 669, 671, 673, 674, 676, 684, 687, 696, 697, 698, 699, 700, 701, 702, 782, 786, 789, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 854, 855, 858, 860, 862, 863, 865, 866, 871, 874, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 999, 1005, 1009, 1015, 1019, 1023, 1029, 1032, 1033, 1040, 1047, 1048, 1053, 1056], "contigu": [43, 59, 385, 395, 412, 419, 423, 450, 454, 456, 466, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 789, 827, 852, 853, 912, 914, 915, 916, 917, 918, 1024, 1043, 1050, 1054, 1058], "contin": [421, 722, 1019], "conting": [2, 722, 723, 739, 763, 1046], "contingency_matrix": [2, 415, 763, 1048], "continu": [0, 2, 52, 55, 57, 77, 121, 147, 174, 187, 191, 198, 218, 225, 235, 238, 241, 254, 255, 257, 261, 265, 266, 313, 315, 321, 322, 327, 328, 365, 371, 378, 381, 385, 386, 387, 388, 391, 395, 397, 398, 401, 415, 420, 422, 475, 500, 600, 603, 604, 607, 608, 615, 616, 617, 640, 654, 655, 660, 661, 665, 668, 669, 670, 671, 734, 750, 764, 820, 822, 875, 877, 879, 881, 882, 891, 892, 893, 909, 910, 921, 971, 998, 1005, 1006, 1009, 1010, 1012, 1013, 1019, 1025, 1029, 1030, 1033, 1037, 1040, 1042, 1043, 1048, 1053, 1054, 1055, 1057, 1059], "continuous_featur": 388, "contour": [48, 50, 70, 81, 82, 113, 146, 165, 172, 177, 178, 180, 228, 229, 230, 231, 244, 249, 264, 302, 309, 344, 345, 347, 348, 350, 351, 380, 390, 639, 640, 1015, 1023], "contour_kw": 640, "contourf": [50, 146, 231, 249, 302, 309, 311, 318, 319, 340, 345, 351, 355, 639, 640], "contours_": [390, 640], "contract": [217, 235, 350, 371, 397, 1029], "contradict": [193, 1029], "contrari": [43, 53, 190, 238, 242, 254, 260, 278, 316, 357, 377, 415, 504, 552, 614, 810, 825, 893, 1005, 1011, 1015], "contrast": [131, 191, 219, 250, 254, 275, 277, 305, 321, 358, 397, 413, 415, 418, 422, 425, 456, 459, 469, 627, 651, 822, 868, 999, 1002, 1004, 1005, 1009, 1012, 1014, 1017, 1019, 1022, 1023, 1025, 1050], "contrib": [331, 383, 385, 391, 395, 397, 415, 453, 1028, 1029, 1056], "contribut": [0, 53, 58, 151, 179, 202, 221, 284, 321, 380, 381, 385, 386, 387, 391, 397, 398, 401, 420, 421, 422, 454, 456, 561, 562, 567, 568, 734, 737, 764, 1003, 1009, 1012, 1017, 1024, 1028, 1029, 1032, 1033, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "contributor": [371, 386, 387, 388, 391, 395, 397, 1009, 1029, 1041, 1042, 1043, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "control": [37, 51, 70, 96, 127, 128, 143, 163, 179, 181, 202, 218, 221, 225, 247, 248, 276, 278, 293, 298, 314, 326, 328, 350, 361, 363, 364, 370, 371, 376, 379, 383, 385, 388, 391, 395, 397, 401, 414, 415, 418, 419, 420, 421, 424, 425, 440, 447, 456, 461, 478, 479, 485, 539, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 601, 602, 604, 622, 627, 633, 635, 640, 642, 647, 649, 650, 654, 655, 657, 658, 659, 660, 662, 663, 664, 680, 682, 684, 685, 690, 691, 695, 700, 709, 717, 805, 806, 808, 810, 811, 812, 813, 814, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 838, 839, 842, 843, 846, 869, 870, 891, 893, 904, 905, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 926, 974, 995, 998, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1016, 1019, 1021, 1023, 1024, 1025, 1028, 1029, 1031, 1035, 1040, 1042, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1058, 1059], "convei": [67, 242, 318], "conveni": [52, 90, 221, 254, 375, 391, 395, 416, 419, 423, 425, 430, 450, 454, 456, 458, 460, 471, 496, 619, 684, 686, 707, 736, 793, 871, 872, 982, 999, 1001, 1005, 1006, 1016, 1033, 1040], "convent": [2, 135, 153, 269, 275, 383, 385, 386, 387, 389, 397, 411, 433, 434, 437, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 476, 477, 478, 479, 480, 481, 482, 483, 516, 517, 539, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 555, 571, 574, 577, 578, 589, 590, 591, 596, 597, 599, 635, 636, 637, 638, 685, 696, 697, 698, 699, 726, 805, 806, 840, 841, 856, 858, 860, 864, 876, 884, 887, 888, 890, 893, 904, 905, 916, 950, 951, 1009, 1040, 1047, 1048, 1051, 1053, 1054, 1056, 1057], "convention": [344, 397, 908], "converg": [2, 55, 92, 96, 111, 112, 148, 150, 153, 174, 180, 210, 219, 225, 233, 261, 263, 312, 313, 316, 321, 336, 372, 392, 397, 412, 415, 420, 423, 425, 427, 447, 450, 453, 454, 455, 456, 459, 461, 466, 467, 468, 469, 478, 479, 485, 489, 490, 491, 541, 543, 544, 545, 546, 547, 554, 561, 579, 618, 652, 653, 654, 655, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 676, 680, 682, 684, 686, 690, 691, 695, 696, 698, 699, 702, 703, 805, 806, 861, 869, 870, 907, 908, 914, 999, 1004, 1005, 1006, 1008, 1013, 1023, 1040, 1043, 1044, 1045, 1047, 1048, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "converged_": [805, 806, 1058], "convergence_it": [447, 461], "convergencewarn": [2, 178, 180, 182, 225, 232, 261, 312, 313, 318, 392, 397, 805, 806, 1048, 1049, 1052], "convers": [2, 55, 150, 208, 357, 366, 372, 377, 383, 385, 391, 395, 397, 409, 423, 580, 867, 876, 884, 938, 939, 994, 1006, 1029, 1033, 1048, 1049, 1050, 1053, 1056], "convert": [2, 55, 70, 81, 83, 101, 105, 126, 179, 193, 217, 237, 254, 257, 261, 262, 265, 266, 289, 309, 333, 365, 370, 377, 378, 392, 395, 397, 409, 423, 447, 450, 451, 454, 456, 457, 458, 459, 466, 471, 472, 504, 542, 549, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 580, 589, 590, 596, 597, 598, 599, 601, 602, 614, 635, 636, 637, 638, 654, 660, 666, 667, 668, 670, 674, 675, 676, 678, 682, 684, 685, 686, 700, 786, 807, 830, 867, 876, 877, 879, 883, 885, 886, 887, 889, 912, 920, 921, 922, 923, 936, 938, 939, 963, 993, 994, 998, 1005, 1006, 1007, 1009, 1019, 1020, 1024, 1025, 1040, 1042, 1043, 1044, 1045, 1046, 1048, 1050, 1051, 1052, 1055, 1056, 1057, 1058], "convex": [132, 149, 150, 187, 196, 224, 237, 354, 358, 415, 417, 420, 428, 453, 459, 469, 480, 482, 483, 486, 487, 488, 666, 684, 700, 1005, 1006, 1012, 1013, 1023, 1030, 1053], "convinc": 190, "convolut": [45, 182], "convolv": 314, "coo": [397, 561, 562, 700, 879, 934, 938, 939, 1012, 1041, 1057], "coo_matrix": [53, 203, 459, 593, 594, 979, 982], "cook": [380, 502, 1040, 1046], "cookbook": [425, 630, 631], "cool": [423, 1040], "coolwarm": [270, 343], "cooman": 380, "coord": [593, 1010], "coordin": [2, 50, 51, 53, 89, 128, 157, 178, 205, 237, 276, 309, 370, 378, 420, 425, 450, 454, 455, 456, 468, 478, 479, 485, 539, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 558, 593, 622, 654, 655, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 689, 690, 691, 692, 696, 697, 698, 701, 702, 714, 772, 777, 912, 1005, 1006, 1024, 1040, 1043, 1044, 1045, 1049, 1051, 1053, 1054, 1055], "cop": 51, "cope": [244, 372, 378, 1005], "copeland": [1048, 1049], "copi": [44, 51, 55, 79, 97, 109, 126, 140, 153, 172, 185, 186, 190, 191, 192, 203, 210, 223, 233, 235, 238, 251, 296, 335, 336, 338, 340, 358, 362, 371, 380, 383, 385, 387, 388, 389, 395, 397, 440, 444, 447, 449, 450, 451, 453, 454, 456, 461, 466, 489, 490, 491, 492, 508, 510, 518, 540, 541, 542, 543, 549, 556, 561, 562, 567, 569, 570, 580, 598, 605, 615, 616, 618, 619, 636, 638, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 679, 680, 682, 687, 689, 692, 693, 694, 740, 777, 800, 808, 822, 852, 853, 867, 875, 878, 881, 882, 883, 884, 888, 889, 890, 892, 895, 897, 898, 899, 900, 901, 902, 903, 907, 908, 912, 914, 915, 916, 917, 918, 927, 936, 938, 939, 967, 979, 981, 982, 1019, 1024, 1025, 1029, 1040, 1043, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "copy_": 1040, "copy_cov": 556, "copy_gram": [690, 691, 694], "copy_x": [450, 454, 466, 543, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 680, 682, 687, 689, 690, 691, 692, 693, 1042, 1048, 1049, 1059], "copy_x_train": [618, 619], "copy_xi": 694, "copybutton": [383, 401, 408], "copyright": [0, 55], "corani": 275, "cordier": 1047, "core": [42, 49, 84, 90, 91, 100, 105, 135, 137, 143, 145, 146, 182, 187, 190, 191, 251, 269, 330, 369, 371, 383, 386, 391, 397, 401, 409, 415, 420, 422, 423, 426, 451, 453, 456, 457, 462, 464, 504, 507, 546, 597, 602, 666, 667, 674, 676, 684, 847, 848, 849, 850, 851, 856, 864, 1005, 1012, 1015, 1024, 1029, 1030, 1031, 1033, 1035, 1042, 1044, 1045, 1047, 1050, 1054, 1055, 1056], "core_dist": [100, 462, 463, 464], "core_distances_": [100, 457, 462, 464], "core_sampl": 426, "core_sample_indices_": [84, 451], "core_samples_mask": 84, "corei": [1041, 1048, 1049], "corentin": 1054, "cori": 1045, "corneil": 1053, "corner": [50, 53, 63, 88, 189, 272, 276, 284, 285, 309, 332, 378, 383, 506, 924, 926, 1009, 1054], "cornerston": 1033, "cornflowerblu": [157, 211, 220, 227, 261, 263, 266, 282, 284, 301, 307, 363, 364], "corollari": 385, "corona": 1053, "corpora": 420, "corpu": [54, 358, 359, 378, 420, 596, 597, 598, 599, 1041], "corr": [117, 193, 275], "corrcoef": [117, 133], "correct": [2, 30, 52, 63, 64, 92, 114, 137, 148, 182, 190, 202, 206, 217, 235, 260, 268, 269, 275, 282, 284, 293, 295, 346, 348, 357, 366, 380, 383, 385, 387, 398, 411, 413, 415, 419, 420, 422, 423, 432, 438, 457, 463, 476, 481, 495, 509, 511, 643, 675, 684, 686, 711, 712, 716, 720, 721, 726, 729, 731, 732, 736, 737, 738, 742, 746, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 791, 792, 793, 795, 798, 799, 802, 804, 840, 841, 842, 849, 857, 883, 993, 1005, 1009, 1010, 1024, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "correct_covari": [476, 481], "corrected_std": 275, "corrected_var": 275, "correctli": [2, 167, 171, 217, 235, 251, 282, 284, 290, 306, 323, 337, 346, 383, 392, 420, 422, 432, 444, 476, 501, 557, 558, 559, 561, 563, 565, 567, 569, 572, 575, 577, 618, 666, 674, 676, 682, 683, 684, 711, 802, 804, 807, 830, 840, 841, 842, 843, 847, 848, 849, 850, 851, 854, 859, 862, 869, 892, 907, 908, 912, 914, 915, 916, 917, 918, 920, 922, 957, 1006, 1009, 1012, 1013, 1019, 1024, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "correl": [2, 51, 64, 115, 117, 118, 133, 144, 145, 151, 153, 155, 168, 171, 179, 187, 188, 189, 191, 192, 202, 206, 212, 235, 275, 281, 295, 322, 326, 327, 338, 376, 379, 380, 388, 397, 400, 412, 417, 419, 424, 457, 464, 489, 490, 492, 501, 502, 508, 532, 572, 614, 617, 635, 642, 643, 644, 690, 691, 751, 765, 786, 787, 788, 838, 852, 853, 889, 890, 892, 901, 1000, 1005, 1010, 1016, 1019, 1023, 1025, 1029, 1030, 1031, 1035, 1040, 1041, 1042, 1053, 1054], "correlation_coeffici": 617, "correlation_model": 1047, "correspond": [2, 50, 52, 53, 58, 63, 64, 68, 76, 88, 100, 111, 115, 125, 137, 140, 143, 144, 146, 154, 168, 171, 172, 175, 180, 183, 190, 206, 209, 217, 218, 221, 226, 235, 245, 250, 251, 258, 265, 269, 274, 276, 278, 279, 284, 285, 289, 309, 321, 327, 328, 329, 358, 361, 362, 365, 366, 371, 377, 378, 379, 382, 383, 385, 387, 390, 391, 396, 397, 398, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 430, 436, 444, 446, 448, 452, 455, 458, 460, 466, 468, 470, 471, 474, 479, 489, 490, 491, 497, 498, 500, 501, 502, 503, 504, 542, 549, 552, 553, 554, 557, 558, 560, 563, 565, 567, 568, 569, 572, 590, 592, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 625, 636, 638, 640, 641, 643, 651, 654, 655, 656, 660, 666, 667, 668, 669, 670, 676, 677, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690, 691, 695, 698, 699, 700, 702, 711, 718, 721, 732, 733, 742, 746, 750, 760, 762, 782, 786, 790, 796, 797, 802, 804, 805, 806, 807, 808, 811, 812, 814, 822, 830, 831, 833, 841, 843, 844, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 861, 869, 870, 879, 882, 883, 885, 886, 889, 893, 901, 912, 913, 914, 917, 920, 921, 922, 923, 933, 943, 950, 965, 968, 983, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1023, 1024, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "correspondingli": 1057, "corri": 1051, "corrobor": 395, "corrupt": [44, 130, 202, 223, 234, 395, 868, 1005, 1017], "cort": [1051, 1052, 1055, 1056], "cortex": 420, "cos_transform": 43, "cosin": [2, 43, 75, 290, 296, 301, 375, 378, 397, 415, 420, 421, 448, 452, 457, 464, 543, 598, 599, 628, 704, 768, 769, 770, 773, 778, 779, 782, 786, 787, 788, 852, 853, 857, 884, 1012, 1025, 1035, 1050], "cosine_dist": [2, 411, 704, 770, 1012, 1046, 1059], "cosine_similar": [2, 350, 411, 768, 773, 1007, 1045, 1059], "cosinesimil": 296, "cosmo": 57, "cost": [0, 43, 74, 126, 143, 153, 174, 187, 195, 237, 245, 249, 267, 277, 279, 282, 284, 289, 325, 333, 346, 358, 359, 360, 365, 383, 389, 391, 395, 414, 415, 422, 485, 504, 508, 545, 546, 547, 554, 559, 565, 566, 567, 568, 569, 572, 573, 610, 618, 627, 635, 654, 655, 660, 661, 666, 668, 669, 670, 671, 676, 680, 682, 684, 686, 695, 696, 700, 708, 710, 726, 750, 792, 795, 807, 808, 830, 838, 873, 892, 910, 912, 913, 914, 917, 920, 921, 922, 923, 956, 1001, 1005, 1006, 1009, 1012, 1022, 1023, 1024, 1030, 1031, 1035, 1046, 1049, 1050], "cost_complexity_pruning_path": [361, 920, 921, 922, 923], "costa": [1048, 1053], "costin": 1040, "costli": [106, 111, 144, 185, 269, 276, 354, 371, 384, 389, 415, 450, 635, 816, 818, 904, 905, 956, 1009, 1012, 1021, 1029], "costlier": 679, "costs_": [478, 479, 1056], "could": [43, 48, 52, 53, 64, 72, 77, 88, 105, 106, 123, 126, 138, 139, 147, 150, 153, 169, 174, 179, 186, 189, 190, 191, 217, 218, 221, 226, 235, 241, 249, 250, 251, 268, 269, 275, 295, 304, 307, 328, 342, 343, 357, 361, 365, 372, 383, 389, 391, 397, 401, 409, 413, 419, 422, 423, 427, 481, 541, 546, 615, 616, 637, 679, 810, 815, 817, 999, 1005, 1006, 1016, 1017, 1019, 1024, 1029, 1037, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "couldn": [1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "count": [2, 23, 43, 52, 54, 62, 64, 76, 84, 88, 104, 105, 121, 159, 160, 190, 191, 217, 219, 235, 248, 258, 269, 284, 289, 293, 296, 326, 327, 358, 359, 378, 380, 387, 392, 397, 398, 413, 415, 420, 422, 423, 453, 456, 496, 504, 544, 552, 589, 596, 597, 598, 599, 602, 612, 625, 648, 705, 713, 723, 726, 737, 738, 746, 762, 791, 792, 794, 795, 847, 851, 852, 853, 861, 864, 875, 924, 926, 958, 973, 997, 998, 1001, 1005, 1009, 1011, 1012, 1019, 1025, 1033, 1040, 1043, 1045, 1048, 1049, 1051, 1052, 1057], "count_nonzero": [46, 49, 370], "count_onli": [852, 853], "counter": [57, 137, 282, 415, 684, 685, 686, 1053], "counterpart": [998, 1006, 1024], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [322, 332, 504, 1006], "counts_": 1052, "countvector": [2, 54, 339, 359, 378, 388, 416, 420, 423, 471, 496, 544, 590, 597, 598, 599, 1040, 1042, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1058], "coupl": [54, 87, 88, 90, 238, 377, 378, 412, 413, 415, 424, 597, 918, 998, 1024], "cournapeau": [0, 405, 1040, 1043], "cours": [47, 48, 195, 289, 370, 383, 385, 414, 420, 423, 424, 999, 1004, 1005, 1033], "coursecentr": [415, 449], "courtesi": 383, "couvreur": [1049, 1050], "cov": [70, 115, 118, 139, 265, 383, 397, 401, 408, 418, 428, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 527, 540, 542, 549, 556], "cov_": [50, 115], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1056, "cov_test": 50, "cov_train": 50, "cov_typ": [262, 498], "covar": [260, 261, 266], "covari": [2, 48, 51, 65, 69, 112, 117, 130, 133, 152, 154, 174, 181, 183, 220, 244, 259, 261, 263, 264, 265, 266, 282, 307, 332, 392, 397, 406, 415, 418, 420, 425, 428, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 512, 523, 527, 535, 540, 542, 549, 556, 557, 558, 571, 618, 619, 621, 630, 631, 639, 652, 653, 658, 662, 664, 690, 691, 694, 697, 701, 805, 806, 808, 827, 1008, 1015, 1019, 1030, 1031, 1034, 1035, 1040, 1042, 1043, 1044, 1045, 1047, 1049], "covariance_": [51, 70, 113, 115, 476, 477, 478, 479, 480, 481, 482, 483, 557, 558, 1003, 1047], "covariance_correct": [476, 481], "covariance_eigh": [333, 549, 1058], "covariance_estim": [69, 557, 1003, 1052], "covariance_prior": [266, 805], "covariance_prior_": 805, "covariance_reweight": [476, 481], "covariance_typ": [79, 261, 262, 264, 265, 266, 805, 806, 1056], "covariances_": [260, 261, 262, 265, 266, 805, 806, 1047], "cover": [0, 87, 195, 217, 235, 366, 375, 378, 383, 396, 643, 728, 802, 1009, 1010, 1027], "coverag": [2, 50, 52, 150, 153, 217, 235, 309, 378, 386, 411, 506, 635, 728], "coverage_error": [2, 1009, 1044, 1054], "coverage_fract": 150, "coverages_land": 50, "covertyp": [2, 376, 498, 1035], "covtyp": 195, "cow": 1041, "cowlei": 1050, "cowton": 1054, "cox": [316, 320, 888, 900, 1019, 1048, 1056], "cpo": [172, 380], "cppflag": 381, "cpu": [0, 96, 276, 296, 330, 370, 371, 389, 391, 397, 401, 411, 423, 504, 571, 640, 655, 659, 661, 663, 666, 667, 669, 671, 673, 674, 676, 684, 687, 808, 822, 833, 834, 835, 856, 864, 905, 1009, 1045, 1054, 1055, 1057, 1058], "cpu_count": [77, 143, 296], "cpuexecutionprovid": 409, "cpython": [383, 384, 389, 1055], "craeton": 1058, "craft": 386, "craig": [1021, 1043, 1048], "crall": [1047, 1053], "crammer": [674, 675, 743, 1005, 1009, 1024], "crammer06a": [674, 675], "crammer_sing": [912, 1010, 1024, 1040], "cranenburgh": 1044, "crash": [51, 383, 409, 475, 902, 903, 910, 1019, 1044, 1048, 1056, 1057], "crawl": [529, 948], "craze": 1047, "crc": 1005, "creat": [2, 43, 44, 47, 50, 58, 59, 63, 64, 66, 68, 70, 72, 74, 76, 78, 79, 81, 84, 87, 93, 95, 97, 105, 106, 113, 118, 120, 125, 128, 139, 142, 146, 147, 148, 150, 154, 157, 171, 174, 176, 179, 180, 181, 183, 186, 189, 191, 197, 199, 201, 203, 213, 218, 219, 229, 230, 239, 249, 251, 254, 255, 257, 265, 269, 270, 271, 273, 275, 285, 289, 304, 306, 307, 318, 320, 321, 325, 328, 329, 340, 342, 343, 347, 348, 351, 353, 354, 355, 359, 361, 363, 364, 366, 371, 378, 379, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 396, 397, 401, 402, 409, 413, 415, 416, 419, 421, 422, 423, 425, 445, 458, 460, 472, 473, 507, 523, 524, 525, 526, 554, 561, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 596, 597, 599, 605, 636, 638, 639, 640, 641, 705, 706, 708, 709, 710, 790, 797, 808, 810, 814, 818, 822, 826, 830, 831, 833, 834, 842, 873, 885, 914, 917, 920, 921, 922, 923, 927, 936, 959, 960, 967, 981, 993, 999, 1005, 1008, 1009, 1010, 1012, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1033, 1037, 1040, 1041, 1043, 1046, 1050, 1053, 1054, 1055, 1056, 1057, 1058], "create_ax": 316, "create_species_bunch": 50, "createindex": 296, "creation": [385, 519, 520, 521, 523, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 664, 852, 853, 1033, 1047, 1048, 1049, 1053], "creativ": 377, "creator": [172, 377, 380], "cred_int_df": 275, "cred_interv": 275, "credibl": 275, "credit": [378, 391, 422, 1005, 1033], "credit_amount": 269, "credit_card": 269, "credit_gain": 269, "credit_gain_scor": 269, "credit_histori": 269, "creighton": 330, "crispinlogan": [1052, 1055, 1056, 1058], "cristian": 650, "cristina": 1052, "criteria": [92, 143, 187, 196, 206, 225, 265, 275, 391, 415, 424, 448, 473, 489, 490, 491, 509, 565, 566, 567, 568, 572, 573, 654, 660, 664, 666, 667, 679, 700, 873, 892, 912, 913, 920, 921, 922, 923, 999, 1008, 1013, 1023, 1030, 1043, 1048, 1051], "criterion": [64, 111, 112, 193, 204, 225, 265, 287, 326, 385, 392, 397, 415, 420, 448, 452, 456, 459, 466, 469, 540, 545, 547, 554, 561, 562, 565, 566, 567, 568, 572, 573, 574, 614, 635, 652, 653, 656, 664, 674, 675, 676, 677, 679, 680, 682, 684, 685, 686, 688, 699, 703, 718, 806, 909, 914, 915, 916, 917, 918, 920, 921, 922, 923, 1005, 1008, 1009, 1017, 1022, 1025, 1031, 1035, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "criterion_": [204, 206, 664], "critic": [377, 383, 396, 422, 700, 1006, 1009, 1017, 1024, 1033, 1051], "crockett": 1055, "crombach": 1042, "crop": [391, 1055], "cross": [2, 9, 29, 52, 53, 64, 70, 89, 92, 93, 105, 106, 108, 109, 111, 115, 118, 121, 130, 143, 146, 147, 149, 150, 153, 162, 166, 169, 170, 172, 190, 191, 196, 202, 203, 204, 205, 211, 217, 219, 225, 235, 252, 257, 262, 263, 265, 267, 272, 275, 276, 277, 279, 281, 282, 283, 284, 287, 288, 289, 290, 293, 300, 314, 315, 317, 322, 325, 327, 332, 338, 346, 353, 378, 383, 385, 392, 395, 396, 397, 409, 410, 413, 416, 417, 420, 422, 423, 424, 425, 444, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 501, 509, 510, 512, 523, 549, 575, 576, 583, 601, 602, 605, 610, 614, 617, 650, 651, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 709, 710, 714, 721, 736, 749, 793, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 846, 872, 873, 877, 892, 893, 910, 912, 914, 917, 929, 963, 1008, 1009, 1012, 1013, 1017, 1019, 1024, 1025, 1029, 1030, 1031, 1033, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058], "cross_decomposit": [2, 116, 117, 118, 187, 252, 489, 490, 491, 492, 1010, 1030, 1044, 1045, 1047, 1048, 1049], "cross_val": 1040, "cross_val_predict": [2, 158, 271, 325, 406, 413, 419, 422, 444, 575, 576, 834, 835, 1044, 1045, 1046, 1047, 1049, 1051, 1053, 1057], "cross_val_scor": [2, 52, 130, 185, 186, 187, 267, 271, 280, 290, 331, 349, 366, 383, 385, 395, 406, 419, 422, 479, 528, 583, 711, 750, 808, 833, 835, 920, 921, 998, 1009, 1030, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1052, 1053, 1056, 1057, 1059], "cross_valid": [2, 43, 52, 147, 153, 158, 190, 219, 251, 271, 278, 289, 293, 322, 332, 383, 396, 406, 583, 833, 834, 1009, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1057], "crossentropi": 569, "crossvalid": [275, 290], "crowd": [391, 398, 1006, 1029], "crucial": [51, 153, 189, 221, 270, 370, 382, 383, 397, 398, 415, 425, 1024], "crude": 1051, "crunch": 389, "cruz": 182, "crypt": [57, 378], "cryptograph": 392, "cs_": 667, "cs_note": 424, "cs_point": 146, "csail": [415, 674, 675, 684, 849], "csc": [2, 370, 395, 397, 423, 535, 559, 561, 562, 678, 700, 879, 881, 887, 892, 895, 897, 903, 934, 938, 939, 971, 983, 984, 986, 987, 988, 989, 1012, 1019, 1048, 1049, 1051, 1054], "csc_matrix": [459, 565, 566, 571, 572, 573, 574, 889, 920, 921, 922, 923, 999, 1019, 1025, 1045], "csco": 51, "csgraph": [397, 1053], "csie": [195, 377, 494, 516, 517, 666], "csizsek": 1047, "csr": [2, 55, 333, 359, 370, 377, 378, 392, 395, 397, 423, 426, 450, 453, 454, 456, 457, 466, 505, 516, 531, 535, 561, 562, 565, 566, 572, 573, 574, 598, 638, 666, 700, 722, 776, 800, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 867, 875, 879, 881, 883, 884, 885, 887, 890, 891, 892, 895, 896, 897, 899, 902, 905, 920, 921, 922, 923, 934, 938, 939, 963, 971, 983, 984, 985, 986, 987, 988, 989, 990, 991, 1012, 1019, 1023, 1040, 1041, 1046, 1048, 1049, 1055, 1056, 1057], "csr_arrai": 990, "csr_matrix": [296, 326, 447, 451, 459, 504, 542, 552, 565, 566, 567, 568, 571, 572, 573, 574, 596, 601, 602, 722, 838, 867, 885, 887, 914, 915, 917, 918, 920, 921, 922, 923, 957, 963, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 1010, 1019, 1023, 1024, 1025, 1055], "css": 1052, "cst": 1003, "cstride": 191, "csv": [51, 377, 380, 388, 1048, 1053], "csytraci": 1043, "ct": [53, 182, 258, 416, 471, 473, 474], "ctc": 182, "cttt": 182, "cube": [427, 541], "cubic": [113, 425], "cuda": [395, 411], "cue": 1008, "culprit": 395, "cultiv": 380, "cultur": 378, "cum_claim": [217, 235], "cum_exposur": 217, "cumsum": [149, 217, 235, 1047], "cumtim": 389, "cumul": [2, 149, 217, 235, 415, 734, 743, 764, 889, 901, 1019, 1023, 1047, 1049, 1050], "cumulated_claim": 217, "cumulated_claim_amount": 235, "cumulated_exposur": 217, "cumulated_sampl": 235, "cunha": [1041, 1042], "cup": [378, 1009], "cupi": [330, 333, 395, 411, 1057, 1058, 1059], "cupy_to_ndarrai": 411, "curat": [383, 386, 387], "cure": 1005, "curic": [1048, 1049], "current": [0, 2, 7, 47, 81, 137, 179, 190, 235, 316, 325, 371, 372, 378, 381, 383, 384, 388, 392, 395, 397, 398, 411, 412, 415, 419, 422, 423, 424, 425, 447, 453, 457, 475, 476, 477, 478, 479, 480, 481, 482, 483, 540, 543, 549, 561, 562, 565, 566, 567, 568, 570, 572, 573, 574, 584, 599, 601, 618, 625, 634, 635, 654, 666, 675, 679, 683, 684, 685, 686, 796, 805, 806, 857, 861, 869, 870, 888, 900, 910, 920, 921, 922, 923, 926, 928, 929, 930, 975, 983, 998, 1003, 1005, 1009, 1012, 1013, 1019, 1029, 1032, 1048, 1052, 1054, 1055, 1056], "current_count": 76, "current_month": 179, "current_sklearn_vers": 584, "current_sz_mb": 47, "currentcontrolset": 401, "currentmodul": 383, "curs": [357, 358, 415, 421, 1011, 1012], "cursor": [143, 276], "curv": [2, 29, 47, 50, 60, 61, 63, 72, 109, 111, 140, 142, 143, 149, 154, 187, 196, 197, 207, 217, 235, 237, 239, 242, 243, 245, 247, 254, 255, 259, 260, 261, 262, 264, 265, 267, 269, 275, 285, 312, 317, 320, 325, 333, 346, 350, 363, 390, 410, 414, 419, 421, 444, 445, 446, 510, 518, 523, 529, 533, 572, 640, 653, 666, 706, 708, 710, 714, 715, 716, 717, 735, 737, 749, 750, 790, 792, 795, 796, 797, 805, 806, 814, 825, 831, 836, 838, 839, 850, 873, 892, 912, 917, 1005, 1006, 1008, 1009, 1015, 1025, 1030, 1031, 1033, 1035, 1037, 1042, 1043, 1046, 1050, 1052, 1053, 1054, 1055, 1056], "curvatur": 311, "cusick": 1050, "custom": [2, 15, 30, 41, 134, 169, 171, 187, 201, 255, 267, 269, 274, 276, 279, 282, 283, 287, 298, 303, 307, 325, 341, 343, 344, 346, 347, 349, 357, 359, 375, 378, 381, 385, 390, 391, 392, 395, 396, 397, 406, 409, 415, 416, 419, 425, 475, 496, 501, 502, 510, 512, 546, 548, 555, 557, 565, 566, 572, 573, 579, 581, 610, 638, 639, 698, 707, 721, 786, 808, 838, 876, 910, 917, 992, 1003, 1009, 1012, 1028, 1029, 1030, 1033, 1035, 1040, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1055, 1056, 1057, 1058, 1059], "custom_combin": 885, "custom_cv": 419, "custom_cv_2fold": 419, "custom_fnames_enc": 885, "custom_nam": 357, "custom_scor": 333, "custom_scorer_modul": 1009, "custom_scoring_funct": 1009, "customestim": 135, "customkernel": 626, "customvector": 423, "cut": [57, 78, 81, 100, 101, 171, 172, 187, 239, 267, 278, 293, 333, 338, 387, 395, 412, 414, 415, 453, 459, 460, 469, 504, 596, 599, 666, 699, 703, 824, 830, 835, 873, 892, 1019, 1030], "cut_dist": [90, 453], "cutler": [920, 921], "cutoff": [197, 962, 1019, 1049], "cutoffs_x0": 316, "cutoffs_x1": 316, "cv": [2, 43, 51, 52, 61, 62, 63, 64, 89, 105, 106, 107, 108, 111, 130, 143, 147, 149, 153, 163, 171, 185, 186, 190, 206, 216, 219, 251, 269, 271, 273, 274, 275, 276, 277, 278, 280, 281, 285, 289, 290, 293, 322, 330, 332, 333, 346, 353, 396, 397, 406, 413, 414, 419, 422, 424, 444, 479, 575, 576, 602, 610, 655, 659, 661, 663, 667, 669, 671, 673, 681, 683, 808, 810, 811, 812, 813, 814, 822, 823, 824, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 839, 843, 846, 893, 920, 921, 998, 1001, 1004, 1005, 1009, 1019, 1029, 1042, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1056, 1057, 1058, 1059], "cv_alpha": [659, 663], "cv_alphas_": [206, 659, 663, 1052], "cv_best_it": 149, "cv_clf": 149, "cv_color": 149, "cv_estim": 149, "cv_estimators_tut": 163, "cv_line": 149, "cv_mape_scor": 52, "cv_model": 190, "cv_result": [43, 52, 105, 143, 153, 171, 273, 274, 276, 278, 406, 822, 835, 1009], "cv_results_": [105, 106, 107, 115, 143, 163, 171, 265, 269, 273, 274, 275, 276, 279, 283, 286, 287, 298, 346, 479, 602, 681, 683, 808, 811, 812, 822, 830, 1046, 1050, 1052, 1053, 1058, 1059], "cv_results_ecoc": 293, "cv_results_lr": 219, "cv_results_ovo": 293, "cv_results_ovr": 293, "cv_results_qr": 219, "cv_results_tre": 293, "cv_results_tuned_model": 289, "cv_results_vanilla_model": 289, "cv_score": [149, 289], "cv_test_scor": 836, "cv_train_scor": 836, "cv_valu": 1048, "cv_values_": [681, 683, 1058], "cvc": 51, "cve": 1053, "cvx": 51, "cwitt": 1048, "cxx": 381, "cxxflag": 381, "cyan": [111, 140, 190, 307], "cybernet": 777, "cycl": [0, 16, 43, 77, 79, 85, 97, 123, 205, 261, 266, 282, 284, 328, 329, 383, 387, 406, 420, 587, 588, 635, 811, 812, 934, 998, 999, 1048, 1049, 1050, 1052, 1053, 1054, 1055], "cycler": 73, "cyclic": [43, 654, 655, 660, 661, 668, 669, 670, 671, 1052], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 309], "cynthias13w": 1057, "cyt": 293, "cython": [41, 329, 370, 371, 381, 383, 386, 392, 395, 401, 408, 411, 415, 422, 516, 1019, 1020, 1023, 1024, 1028, 1029, 1040, 1043, 1044, 1046, 1052, 1055, 1056, 1057, 1058], "cython3": 381, "cythonx": 384, "c\u00e8sar": 1009, "d": [0, 2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 67, 68, 72, 73, 77, 83, 84, 85, 95, 96, 98, 104, 105, 115, 121, 123, 126, 130, 132, 174, 182, 190, 217, 225, 233, 235, 242, 247, 248, 249, 250, 263, 274, 275, 283, 289, 295, 302, 303, 309, 313, 335, 336, 339, 346, 350, 351, 359, 377, 378, 380, 383, 385, 389, 395, 413, 415, 417, 418, 420, 422, 423, 425, 426, 451, 453, 454, 459, 467, 470, 495, 501, 511, 534, 542, 544, 565, 566, 573, 574, 589, 590, 598, 622, 623, 627, 630, 631, 636, 652, 653, 656, 677, 678, 679, 688, 696, 697, 700, 701, 705, 707, 713, 716, 729, 730, 731, 732, 734, 764, 772, 786, 789, 796, 820, 847, 849, 851, 852, 853, 868, 879, 883, 885, 886, 888, 900, 905, 922, 923, 927, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1017, 1019, 1021, 1024, 1025, 1043, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056, 1058], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 422, "d2": [730, 731, 1009], "d2_absolute_error_scor": [2, 731, 1009, 1054], "d2_log_loss_scor": [2, 1009, 1058], "d2_pinball_scor": [2, 1009, 1054], "d2_pinball_score_08": 1009, "d2_tweedie_scor": [2, 411, 1009, 1053, 1059], "d2_tweedie_score_15": 1009, "d55e00": 260, "d81b60": 320, "d83": 380, "d_": [113, 415, 420, 656, 677, 688, 786, 1006, 1011], "d_c": 415, "d_chunk": 789, "d_fit": 696, "d_fix": 132, "d_m": 415, "d_multi": 132, "da": [378, 1055, 1056, 1058], "dae": 1005, "dagm": 1001, "dagstuhl": 1009, "dai": [0, 43, 51, 52, 153, 179, 191, 218, 380, 383, 891, 1033, 1046, 1047, 1054, 1055], "daiki": 1044, "daili": [51, 153, 1033], "dakota": 1050, "dale": 1053, "dalla": 1048, "dalmia": [1046, 1047, 1048], "damag": 423, "damicelli": 1055, "damink": 1057, "daml": [415, 459, 469], "damp": [79, 415, 447, 461], "dan": [55, 1040, 1044, 1045, 1046, 1048, 1049], "danfrankj": 1044, "dang": [687, 1005, 1058], "danger": [218, 419], "dangi": 1057, "dangl": 55, "dangonite57": [1055, 1056], "daniel": [330, 370, 893, 1019, 1033, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1052, 1054, 1057], "daniela": [1054, 1055], "danielgaerb": 1055, "danielsen": 1047, "danielweitzenfeld": 1043, "daniil": 1047, "danil": 1048, "dani\u00ebl": 1051, "danna": 1050, "danni": [1043, 1044, 1045], "dantzig": 353, "danylo": 1049, "dao": 1048, "daphn": 1051, "dare": 1050, "darioka": [1052, 1054, 1055], "dariu": [1047, 1048], "dark": [140, 190, 346, 378, 1057], "dark2": [62, 64, 238], "darkblu": 307, "darkorang": [112, 127, 131, 132, 218, 228, 240, 261, 262, 263, 266, 282, 284, 301, 307, 308, 337, 363], "darkorchid": 227, "darkr": [231, 302, 345], "darpa": 378, "darren": [1054, 1055], "darshan": 1052, "dart": 1028, "dartmouth": 0, "dasarathi": 380, "dasgupta": [423, 453, 906, 1021], "dash": [69, 113, 137, 149, 160, 174, 177, 179, 190, 209, 212, 218, 219, 226, 229, 230, 254, 269, 275, 285, 348, 1023], "dashdot": [149, 174, 177, 254], "dask": [1029, 1048], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 88, 89, 91, 94, 95, 96, 97, 100, 103, 105, 106, 108, 112, 114, 120, 121, 122, 123, 126, 127, 131, 133, 135, 137, 140, 142, 143, 146, 147, 149, 150, 155, 156, 157, 159, 161, 163, 165, 169, 173, 174, 175, 176, 178, 179, 181, 183, 185, 187, 190, 191, 196, 197, 200, 201, 202, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 230, 231, 233, 234, 235, 237, 238, 239, 240, 241, 244, 247, 248, 249, 251, 253, 254, 255, 258, 260, 261, 262, 263, 264, 266, 268, 269, 273, 275, 277, 278, 279, 280, 283, 289, 290, 293, 295, 296, 300, 302, 304, 305, 306, 307, 309, 312, 313, 315, 317, 318, 319, 323, 325, 327, 329, 330, 331, 333, 336, 337, 339, 340, 342, 343, 345, 350, 351, 357, 362, 363, 364, 365, 369, 371, 375, 376, 377, 378, 379, 380, 383, 385, 386, 389, 390, 391, 392, 396, 401, 403, 406, 409, 411, 412, 413, 414, 417, 418, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 433, 434, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 521, 522, 523, 528, 529, 530, 531, 532, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 625, 626, 630, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 718, 719, 721, 725, 726, 728, 733, 735, 736, 737, 738, 739, 742, 744, 745, 746, 748, 749, 762, 763, 765, 769, 771, 772, 777, 786, 791, 792, 793, 795, 796, 797, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 929, 931, 932, 933, 934, 936, 937, 938, 939, 942, 943, 944, 953, 955, 956, 971, 974, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "data1010": 1045, "data_filenam": [509, 513], "data_hom": [493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 1047, 1056], "data_home_path": 507, "data_id": [44, 147, 179, 190, 217, 235, 245, 269, 289, 293, 322, 377, 504], "data_ind": 53, "data_max": 1045, "data_max_": [882, 1045], "data_min": 1045, "data_min_": [882, 1045], "data_nam": 401, "data_path": 47, "data_rang": 1045, "data_range_": [882, 1045], "data_sampl": 54, "data_set": 312, "data_size_mb": 359, "data_stream": 47, "data_test": [249, 269, 276, 357, 517], "data_test_size_mb": 357, "data_train": [249, 269, 276, 357, 517], "data_train_size_mb": 357, "data_transform": 647, "data_transpos": [1054, 1056], "data_unravel_indic": 53, "data_vers": 401, "databas": [47, 172, 321, 370, 372, 378, 380, 415, 420, 422, 423, 426, 449, 451, 518, 563, 564, 905, 1021], "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 43, 52, 62, 104, 105, 106, 137, 143, 147, 150, 155, 171, 179, 185, 189, 190, 191, 192, 197, 202, 206, 221, 225, 235, 255, 258, 265, 269, 273, 275, 276, 278, 286, 287, 289, 293, 321, 322, 323, 328, 329, 330, 353, 357, 358, 377, 378, 383, 385, 388, 397, 416, 422, 439, 449, 450, 452, 454, 456, 471, 473, 474, 475, 489, 490, 491, 492, 496, 497, 498, 500, 504, 508, 509, 510, 512, 513, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 569, 570, 574, 575, 576, 577, 578, 589, 590, 591, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 696, 697, 700, 808, 811, 812, 822, 838, 856, 861, 864, 868, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 910, 934, 963, 979, 982, 997, 998, 999, 1029, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "datalim": 262, "datapoint": [43, 77, 87, 91, 178, 181, 201, 249, 250, 254, 270, 275, 295, 425, 453, 510, 565, 566, 567, 568, 572, 573, 574, 619, 920, 921, 922, 923, 1002], "dataset": [2, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 105, 106, 107, 108, 109, 113, 114, 115, 118, 122, 125, 126, 127, 128, 129, 130, 132, 133, 136, 138, 139, 140, 141, 142, 144, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 168, 169, 170, 171, 172, 173, 175, 177, 182, 185, 186, 192, 193, 195, 196, 199, 201, 203, 204, 205, 207, 208, 209, 210, 213, 214, 215, 216, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 239, 241, 242, 243, 245, 248, 250, 252, 253, 257, 258, 260, 262, 263, 264, 266, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 291, 296, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 344, 346, 347, 348, 349, 351, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 366, 371, 372, 386, 387, 389, 396, 397, 400, 401, 409, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 427, 430, 435, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 476, 477, 480, 481, 482, 483, 485, 488, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 591, 592, 595, 596, 597, 598, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 636, 639, 640, 641, 642, 643, 646, 647, 648, 651, 653, 654, 655, 657, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 716, 718, 719, 737, 763, 765, 795, 796, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 868, 869, 870, 872, 873, 876, 877, 885, 886, 890, 892, 894, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 930, 938, 939, 943, 944, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1033, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "dataset_44063": 52, "dataset_nam": [254, 296], "datasets_0004_44063": 52, "datasets_nam": 254, "datastructur": [411, 1048, 1052], "datastuctur": 1057, "datatyp": [471, 473, 1047, 1050], "date": [43, 104, 153, 172, 179, 191, 378, 380, 383, 387, 398, 416, 1029], "dateco2datef641958": 179, "daten": [457, 1048, 1049], "datenbergwerk": 1050, "datetim": [43, 55, 179, 191], "dauphin": 1042, "dave": [1040, 1047, 1048, 1054, 1056], "davi": [2, 481, 733, 1009, 1044], "david": [0, 114, 378, 405, 415, 422, 425, 469, 540, 544, 575, 576, 630, 631, 636, 733, 805, 909, 999, 1005, 1013, 1022, 1033, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "davidblnc": [1055, 1056], "davidleon123": 1058, "davies_bouldin_scor": [2, 415, 1048], "davis2006": 1009, "daw": [0, 405, 1040, 1041, 1042, 1043, 1044], "dawson": [1044, 1058], "dayn": [1055, 1056], "db": [84, 90, 415], "dbauer9": 1051, "dberenbaum": 1056, "dbg": 389, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [2, 71, 72, 73, 79, 90, 95, 98, 100, 187, 331, 337, 395, 397, 453, 457, 459, 462, 520, 712, 713, 725, 745, 801, 803, 864, 892, 1012, 1030, 1034, 1035, 1040, 1042, 1044, 1045, 1047, 1048, 1049, 1056, 1057], "dbscan_clust": 453, "dcc": 378, "dcg": [734, 764, 1009, 1047], "dcg_score": [2, 764, 1009, 1047, 1050], "dd": [50, 51, 156, 309, 506], "ddof": [275, 892, 903], "de": [51, 158, 322, 380, 643, 696, 772, 1005, 1006, 1029, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "dea": [1054, 1055, 1056], "deactiv": [256, 377, 384, 389, 401, 416, 811, 812, 1054], "dead": 1058, "deadlock": 398, "deal": [62, 92, 105, 153, 185, 190, 202, 241, 289, 293, 350, 359, 383, 388, 416, 423, 424, 425, 481, 504, 711, 716, 771, 795, 878, 956, 1005, 1033, 1043, 1055, 1056], "dealloc": 1057, "dean": [158, 1048, 1054, 1056, 1058], "death": 378, "debian": [0, 370, 381, 389], "debias": 132, "deborah": [1046, 1047, 1057], "debug": [2, 366, 371, 384, 386, 389, 397, 400, 635, 911, 1048, 1052], "debugg": [386, 391], "dec": [218, 293, 685, 891, 916, 1024], "decad": [190, 1029], "decai": [179, 552, 869, 870, 956, 1009, 1023, 1044], "decal": 1052, "decemb": [114, 153, 179, 378, 672, 693, 694, 1040, 1048, 1050, 1052, 1053, 1055], "decent": [244, 274, 378, 1011], "deci": 284, "decid": [43, 50, 92, 95, 105, 148, 153, 266, 272, 275, 282, 378, 383, 398, 409, 414, 423, 425, 457, 464, 567, 568, 619, 643, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 679, 689, 692, 805, 854, 855, 856, 858, 860, 862, 863, 864, 875, 1008, 1015, 1033, 1053, 1056], "decil": [640, 1051], "deciles_hlines_": 640, "deciles_vlines_": 640, "decim": [62, 180, 478, 479, 925, 1047, 1048], "decis": [0, 2, 40, 43, 62, 64, 67, 70, 76, 91, 93, 95, 127, 136, 139, 140, 141, 142, 148, 156, 157, 158, 160, 161, 165, 171, 172, 176, 178, 190, 200, 201, 209, 226, 227, 230, 244, 245, 247, 255, 267, 278, 279, 281, 282, 293, 304, 307, 311, 316, 317, 318, 321, 334, 338, 339, 342, 343, 344, 345, 346, 347, 348, 354, 355, 357, 370, 379, 380, 383, 397, 409, 410, 413, 415, 422, 444, 476, 504, 508, 512, 527, 544, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 601, 602, 639, 640, 641, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 706, 708, 710, 711, 715, 726, 728, 734, 735, 743, 747, 748, 750, 764, 790, 792, 795, 796, 797, 802, 807, 808, 811, 812, 822, 824, 830, 835, 838, 840, 841, 843, 854, 873, 892, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 1003, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1022, 1023, 1024, 1028, 1029, 1030, 1031, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1053, 1054, 1056, 1057, 1058], "decision_funct": [48, 50, 62, 64, 91, 139, 154, 165, 229, 230, 231, 245, 254, 269, 282, 289, 302, 303, 311, 318, 332, 344, 345, 346, 350, 351, 355, 385, 397, 413, 414, 422, 444, 476, 557, 558, 561, 563, 567, 569, 571, 575, 601, 602, 639, 640, 641, 666, 667, 674, 676, 682, 683, 684, 685, 706, 708, 710, 715, 728, 734, 735, 743, 747, 748, 750, 764, 790, 796, 797, 802, 807, 808, 811, 812, 822, 830, 833, 840, 841, 842, 843, 858, 872, 879, 909, 912, 914, 916, 917, 931, 1005, 1009, 1015, 1016, 1023, 1024, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1057, 1059], "decision_function_shap": [325, 354, 914, 917, 1024, 1045, 1046, 1049, 1050], "decision_path": [365, 565, 566, 572, 573, 574, 920, 921, 922, 923, 1046, 1051], "decision_threshold": [269, 289], "decision_tre": [924, 925, 926, 1025], "decision_tree_learn": [920, 921, 1025], "decisionboundarydisplai": [2, 48, 66, 67, 70, 91, 139, 154, 159, 201, 209, 226, 231, 278, 299, 304, 307, 321, 342, 343, 344, 345, 347, 348, 350, 362, 1054, 1055, 1057, 1058], "decisiontre": [146, 561, 1045], "decisiontreeclassifi": [2, 67, 137, 139, 146, 159, 279, 293, 331, 361, 362, 365, 397, 414, 422, 561, 563, 565, 567, 569, 572, 639, 719, 814, 836, 921, 922, 924, 925, 926, 999, 1010, 1025, 1041, 1042, 1044, 1045, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "decisiontreeclassifierifitteddecisiontreeclassifi": 365, "decisiontreeregressor": [2, 138, 140, 255, 317, 325, 331, 363, 364, 388, 562, 564, 566, 567, 568, 570, 572, 573, 640, 641, 920, 923, 925, 951, 999, 1010, 1025, 1041, 1042, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "decisiontreeregressorifitteddecisiontreeregressor": 327, "declan": 1052, "declar": [91, 238, 251, 366, 383, 384, 389, 397, 450, 453, 454, 466, 478, 479, 485, 698, 702, 1047, 1051], "decod": [47, 309, 378, 397, 511, 577, 596, 597, 599, 1040, 1041], "decode_error": [47, 423, 511, 596, 597, 599, 1042], "decompos": [11, 123, 127, 140, 318, 542, 546, 717, 833, 956, 1004, 1005, 1009, 1026, 1034, 1035], "decomposit": [2, 9, 44, 45, 54, 55, 85, 93, 104, 106, 107, 108, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 156, 195, 237, 238, 240, 248, 249, 252, 253, 256, 274, 300, 305, 321, 329, 332, 333, 358, 372, 376, 389, 392, 397, 411, 412, 413, 416, 422, 427, 456, 458, 459, 460, 469, 489, 490, 491, 503, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 564, 619, 658, 659, 660, 661, 662, 663, 664, 671, 672, 673, 680, 681, 682, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 805, 806, 861, 868, 871, 874, 890, 921, 955, 956, 1005, 1006, 1009, 1026, 1028, 1030, 1031, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "decompress": [409, 1040], "decor": [2, 191, 325, 383, 384, 385, 392, 814, 831, 946, 950, 951, 969, 975, 1050, 1053, 1056, 1058], "decoupl": [422, 1011], "decreas": [63, 74, 81, 90, 93, 101, 109, 153, 155, 171, 172, 182, 190, 191, 193, 225, 247, 248, 277, 282, 288, 311, 318, 321, 325, 361, 370, 372, 383, 413, 415, 422, 448, 452, 470, 529, 542, 543, 549, 565, 566, 567, 568, 569, 570, 572, 573, 574, 610, 643, 644, 645, 684, 685, 686, 714, 720, 735, 790, 797, 869, 870, 920, 921, 922, 923, 998, 1000, 1001, 1005, 1006, 1009, 1012, 1013, 1016, 1017, 1023, 1024, 1033, 1042, 1047, 1050, 1053], "dede00": [79, 97, 98], "dedic": [43, 273, 355, 381, 387, 389, 395, 398, 411, 415, 592, 680, 682, 695, 998, 1005, 1028, 1048, 1057], "deduc": 46, "deduct": 1013, "dedupl": 1044, "deeksha": 1052, "deem": [283, 284, 542, 1017, 1053], "deep": [217, 385, 397, 409, 422, 429, 440, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 777, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 1013, 1014, 1028, 1029, 1033, 1045, 1051, 1052, 1054], "deepcopi": 385, "deeper": [357, 1025], "deepest": [569, 570, 1051], "deeplook": 1050, "deeppink": 284, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 83, 87, 90, 91, 93, 96, 104, 109, 121, 123, 125, 126, 130, 132, 135, 137, 140, 142, 147, 149, 150, 153, 158, 177, 180, 182, 183, 186, 193, 198, 204, 206, 209, 214, 217, 218, 225, 226, 227, 235, 237, 238, 251, 252, 254, 260, 261, 262, 263, 265, 266, 269, 270, 273, 274, 275, 276, 278, 283, 286, 290, 296, 301, 303, 306, 309, 312, 314, 316, 318, 321, 322, 325, 333, 339, 342, 346, 350, 355, 357, 358, 359, 370, 378, 383, 385, 389, 390, 395, 416, 419, 423, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 516, 517, 541, 605, 609, 618, 619, 626, 789, 885, 946, 951, 969, 1009, 1016, 1024], "default": [2, 43, 52, 54, 62, 66, 77, 80, 81, 83, 90, 94, 123, 143, 168, 174, 185, 191, 197, 198, 206, 217, 218, 235, 246, 248, 254, 256, 258, 263, 269, 270, 278, 284, 289, 295, 296, 316, 320, 323, 325, 326, 330, 332, 333, 350, 353, 354, 357, 358, 359, 361, 365, 366, 370, 371, 377, 378, 381, 385, 386, 387, 388, 389, 390, 391, 392, 395, 396, 397, 401, 406, 409, 413, 414, 415, 416, 419, 420, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 715, 716, 717, 719, 720, 721, 722, 724, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 742, 743, 744, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 942, 944, 945, 946, 948, 950, 951, 955, 956, 957, 958, 959, 960, 961, 962, 971, 973, 974, 977, 978, 979, 981, 982, 983, 989, 992, 994, 995, 997, 998, 999, 1001, 1003, 1005, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1019, 1021, 1023, 1024, 1025, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "default_bas": [79, 97], "default_rng": 278, "default_scor": 388, "default_tag": 2, "default_target_attribut": 377, "default_tim": [232, 263], "defaultdict": [49, 52, 62, 193, 278, 358, 359], "defazio": [666, 1005], "defens": 293, "defer": 383, "deffici": 1058, "defici": [558, 1006, 1023], "defin": [8, 27, 46, 51, 64, 70, 88, 90, 92, 101, 104, 105, 107, 118, 123, 128, 135, 137, 138, 158, 172, 174, 181, 182, 183, 191, 192, 193, 197, 218, 225, 234, 235, 244, 248, 251, 255, 257, 260, 265, 269, 275, 276, 278, 282, 284, 285, 286, 287, 289, 293, 296, 314, 316, 326, 332, 333, 346, 350, 353, 357, 358, 370, 379, 382, 383, 384, 385, 389, 390, 392, 395, 396, 397, 409, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 430, 431, 432, 434, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 466, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 496, 527, 528, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 630, 631, 635, 636, 637, 638, 640, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 704, 705, 707, 716, 718, 719, 724, 729, 730, 731, 732, 733, 736, 739, 746, 749, 753, 754, 756, 758, 759, 761, 762, 765, 768, 774, 789, 793, 798, 799, 800, 801, 805, 806, 807, 808, 811, 812, 814, 822, 830, 831, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 942, 944, 948, 954, 966, 968, 992, 998, 999, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1021, 1023, 1024, 1025, 1029, 1035, 1037, 1042, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059], "definit": [2, 93, 114, 204, 217, 282, 296, 358, 383, 384, 385, 397, 400, 415, 417, 418, 420, 535, 537, 543, 619, 636, 700, 716, 726, 736, 766, 805, 806, 998, 1001, 1003, 1005, 1007, 1009, 1012, 1023, 1027, 1035, 1044, 1048, 1055], "definitelyuncertain": 1046, "deflat": [190, 418, 427, 541], "defoi": 1053, "deform": [154, 265, 355], "degener": [121, 261, 427, 447, 461, 541, 728, 1005, 1009, 1049, 1053, 1054], "degrad": [153, 191, 244, 316, 353, 358, 421, 786, 1017], "degre": [43, 70, 125, 139, 179, 185, 189, 190, 191, 195, 197, 202, 204, 206, 218, 221, 250, 256, 260, 261, 262, 265, 266, 275, 290, 314, 327, 328, 343, 350, 352, 420, 424, 453, 459, 506, 543, 549, 647, 648, 651, 664, 783, 805, 808, 858, 887, 891, 914, 915, 916, 917, 918, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1015, 1016, 1019, 1022, 1024, 1043, 1049, 1053, 1054, 1057], "degrees_of_freedom_": 805, "degrees_of_freedom_prior": 805, "degrees_of_freedom_prior_": 805, "dei": 1052, "deil": [1041, 1051, 1052], "dein": 423, "dekel": [674, 675, 1005], "del": [55, 389, 1052, 1053], "delai": [2, 383, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 808, 822, 833, 834, 1054, 1055, 1058], "delalleau": 1022, "delanou": 1051, "delattr": 1052, "delayed_funct": 974, "delbert": [73, 447, 461], "deleg": [91, 389, 439, 440, 925, 997, 1044, 1046, 1052], "delet": [2, 106, 336, 338, 387, 388, 476, 481, 493], "delete_index": 336, "delete_indic": 336, "deleteri": 1047, "deli": 409, "deliber": 1005, "delimit": [383, 1015, 1055], "deliv": [80, 370, 1033], "deliveri": 387, "dell": 51, "delong": [1052, 1053], "delta": [418, 459], "delta_": 1006, "delta_k": 418, "delteil": 1044, "delv": [869, 870], "demand": [149, 153, 397, 423, 808, 822, 833, 834], "demarc": 95, "demiraj": [1055, 1056], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 81, 83, 88, 89, 94, 95, 96, 97, 99, 102, 154, 187, 193, 202, 223, 248, 263, 265, 276, 284, 321, 337, 338, 357, 358, 385, 412, 415, 423, 447, 448, 451, 453, 454, 455, 457, 458, 460, 462, 465, 468, 510, 519, 520, 521, 549, 712, 713, 725, 727, 745, 801, 803, 873, 892, 893, 1030], "demo_param": 385, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 90, 96, 104, 106, 137, 141, 148, 151, 169, 170, 182, 183, 187, 193, 218, 251, 257, 258, 262, 266, 267, 271, 278, 281, 284, 290, 298, 301, 308, 315, 317, 318, 320, 323, 327, 334, 336, 337, 340, 344, 350, 357, 358, 359, 366, 372, 378, 379, 383, 388, 395, 406, 411, 415, 419, 422, 454, 510, 520, 528, 705, 711, 721, 750, 806, 808, 855, 877, 908, 920, 998, 999, 1003, 1009, 1010, 1011, 1012, 1019, 1022, 1025, 1027, 1030], "dem\u0161ar": 275, "den": [0, 404, 1041, 1042, 1047, 1048, 1049, 1052, 1053], "dendrit": [415, 718], "dendro": 193, "dendro_idx": 193, "dendrogram": [71, 102, 187, 193, 365, 415, 448, 452, 512, 1030, 1052], "denero": 743, "deng": [1044, 1045, 1046], "dengemann": 1041, "dengyong": 908, "deni": [1042, 1043, 1047, 1048, 1049, 1055, 1056], "denni": 1054, "denois": [42, 68, 83, 85, 86, 88, 101, 122, 128, 187, 420, 504, 543, 545, 549, 592, 595, 838, 882, 1030], "denomin": [282, 422, 423, 428, 482, 598, 712, 765, 1003], "denot": [170, 392, 397, 401, 413, 415, 419, 422, 596, 597, 599, 808, 814, 822, 831, 885, 886, 993, 998, 1001, 1005, 1007, 1009, 1010, 1019, 1022, 1057], "dens": [51, 90, 187, 196, 202, 205, 211, 329, 330, 339, 370, 392, 397, 415, 420, 422, 424, 450, 453, 454, 456, 471, 474, 504, 531, 532, 535, 542, 543, 552, 574, 615, 616, 637, 638, 660, 665, 666, 667, 674, 675, 676, 680, 681, 684, 685, 686, 695, 696, 697, 700, 701, 768, 769, 775, 787, 800, 869, 870, 877, 884, 885, 887, 889, 890, 891, 892, 901, 902, 903, 904, 905, 912, 913, 914, 915, 917, 918, 957, 979, 982, 999, 1002, 1005, 1006, 1009, 1010, 1012, 1015, 1019, 1021, 1022, 1023, 1024, 1025, 1030, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "dense_lasso": 203, "dense_output": [769, 775, 905, 957, 1048], "denser": 451, "densif": 1049, "densifi": [397, 666, 667, 674, 675, 676, 684, 685, 686, 912, 999, 1042], "densiti": [2, 50, 84, 90, 95, 100, 109, 132, 170, 172, 177, 187, 203, 217, 232, 235, 241, 244, 248, 259, 260, 266, 275, 281, 293, 297, 302, 303, 316, 346, 357, 378, 380, 392, 397, 415, 422, 426, 434, 451, 453, 455, 457, 459, 471, 474, 506, 510, 544, 549, 557, 558, 805, 806, 808, 852, 853, 857, 858, 905, 1003, 1005, 1008, 1012, 1014, 1015, 1021, 1028, 1030, 1031, 1034, 1035, 1042, 1044, 1048, 1049, 1055, 1056], "density_": 905, "densityestim": 434, "densitymixin": 2, "denton": 1042, "deodhar": 1052, "deoli": 1053, "depart": [182, 415], "depedend": 1057, "depend": [2, 25, 43, 44, 46, 52, 64, 72, 88, 109, 127, 143, 147, 150, 151, 153, 155, 158, 167, 171, 180, 185, 187, 188, 190, 193, 195, 198, 202, 235, 238, 243, 244, 250, 254, 265, 269, 275, 276, 280, 281, 282, 289, 296, 312, 316, 321, 327, 330, 333, 343, 350, 353, 358, 359, 366, 370, 371, 372, 376, 383, 385, 386, 391, 392, 395, 396, 397, 398, 400, 401, 408, 409, 411, 415, 417, 419, 420, 422, 423, 424, 425, 426, 445, 446, 447, 451, 453, 454, 456, 457, 459, 461, 464, 466, 467, 469, 471, 476, 491, 496, 497, 498, 501, 504, 508, 509, 510, 512, 513, 518, 542, 543, 549, 552, 559, 567, 568, 570, 596, 597, 598, 599, 610, 612, 615, 616, 619, 635, 640, 641, 646, 648, 656, 666, 667, 677, 679, 681, 684, 685, 686, 688, 695, 698, 699, 702, 703, 719, 737, 738, 746, 786, 789, 791, 792, 795, 800, 801, 805, 806, 827, 837, 854, 855, 856, 858, 860, 861, 862, 863, 864, 870, 871, 873, 885, 886, 889, 892, 906, 913, 914, 917, 921, 936, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1017, 1021, 1023, 1024, 1025, 1030, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1055, 1056, 1057], "dependabot": 1058, "dependen": 353, "depict": [137, 277, 422, 1008], "deploi": [269, 333, 370, 400, 409, 414, 1029, 1033], "deploy": [391, 409, 1028, 1029, 1033], "depot": 51, "deprec": [2, 16, 151, 193, 325, 328, 371, 385, 386, 387, 392, 397, 406, 449, 452, 454, 457, 464, 466, 489, 490, 491, 492, 535, 544, 546, 548, 561, 577, 578, 587, 588, 590, 635, 666, 667, 681, 683, 687, 700, 717, 750, 786, 787, 788, 790, 808, 811, 812, 822, 833, 834, 835, 836, 837, 839, 859, 871, 872, 877, 909, 914, 917, 934, 936, 938, 939, 950, 951, 998, 999, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "deprecated_api_refer": 383, "deprecationwarn": 1050, "dept": 380, "depth": [43, 142, 147, 151, 154, 159, 293, 361, 363, 364, 365, 370, 381, 383, 387, 396, 422, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 852, 853, 857, 920, 921, 922, 923, 924, 926, 962, 1014, 1015, 1025, 1042, 1043, 1051], "der": [700, 704, 1006, 1043, 1044, 1048], "derek": 1048, "deriv": [43, 57, 132, 133, 149, 179, 182, 192, 204, 206, 210, 218, 371, 378, 385, 417, 419, 421, 422, 423, 425, 427, 448, 452, 453, 472, 499, 541, 614, 625, 630, 656, 677, 684, 688, 869, 870, 885, 891, 912, 913, 1003, 1005, 1006, 1009, 1013, 1015, 1024, 1040, 1041, 1042, 1047, 1048, 1049, 1055], "deros": 1051, "derouich": 1040, "derweh": 1058, "desai": [1047, 1049, 1052, 1053, 1055, 1056], "desalvo": 998, "descamp": 1048, "descend": [146, 635, 1050], "descent": [2, 46, 53, 148, 187, 196, 204, 205, 244, 249, 302, 328, 345, 420, 422, 478, 479, 485, 495, 504, 511, 539, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 639, 647, 654, 655, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 676, 680, 682, 684, 685, 686, 689, 690, 691, 692, 695, 702, 838, 869, 870, 873, 912, 916, 982, 1006, 1013, 1015, 1024, 1030, 1031, 1035, 1040, 1043, 1044, 1045, 1047, 1049, 1051, 1053, 1054, 1055], "descr": [172, 376, 377, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 515, 518, 1048], "describ": [2, 43, 52, 91, 158, 172, 190, 235, 249, 275, 284, 366, 370, 371, 376, 378, 380, 382, 383, 385, 388, 391, 397, 398, 412, 415, 417, 418, 419, 420, 422, 423, 469, 476, 480, 481, 498, 501, 503, 504, 505, 508, 509, 510, 511, 512, 513, 518, 524, 525, 526, 536, 615, 616, 653, 667, 676, 722, 805, 806, 847, 849, 887, 956, 998, 1001, 1004, 1005, 1008, 1009, 1011, 1015, 1023, 1024, 1025, 1032, 1048, 1050], "descript": [2, 52, 172, 190, 322, 376, 377, 382, 383, 387, 388, 391, 397, 415, 423, 459, 469, 471, 474, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 515, 518, 552, 638, 684, 770, 773, 786, 1009, 1023, 1024, 1029, 1032, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "descriptor": [397, 516, 517], "deseri": 409, "deserv": [383, 389], "deshmukh": 1053, "deshpand": [1045, 1046], "design": [0, 2, 53, 58, 113, 137, 158, 177, 189, 190, 199, 251, 265, 269, 316, 322, 365, 372, 377, 383, 388, 395, 396, 397, 398, 400, 401, 403, 408, 409, 415, 422, 424, 523, 536, 640, 641, 656, 673, 677, 684, 688, 693, 808, 826, 827, 847, 849, 999, 1005, 1006, 1009, 1010, 1019, 1028, 1029, 1033, 1042, 1049, 1058], "desir": [50, 61, 139, 172, 186, 217, 219, 316, 320, 333, 376, 383, 391, 403, 409, 412, 415, 418, 419, 420, 424, 511, 546, 548, 552, 555, 575, 601, 610, 611, 672, 678, 693, 694, 707, 716, 744, 852, 853, 857, 872, 877, 879, 882, 883, 885, 886, 888, 889, 893, 896, 898, 900, 901, 942, 977, 1001, 1003, 1006, 1012, 1019, 1023, 1024, 1025, 1040, 1048, 1049, 1050, 1053], "desislava": 1054, "desktop": 381, "despit": [64, 118, 180, 215, 217, 235, 250, 305, 397, 406, 417, 635, 636, 638, 1005, 1012, 1033, 1048, 1049], "dessyvv": 1054, "dest": 330, "destin": 1033, "destroi": [281, 423, 803, 881, 1019], "det": [2, 187, 257, 267, 284, 285, 383, 417, 523, 572, 706, 710, 735, 797, 838, 873, 892, 912, 954, 1030, 1052], "det_curv": [2, 272, 706, 790, 797, 1009, 1052, 1053, 1058], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 92, 137, 138, 140, 144, 146, 151, 158, 187, 191, 204, 206, 221, 242, 246, 249, 250, 254, 256, 258, 266, 269, 273, 282, 289, 299, 302, 303, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 361, 363, 364, 366, 370, 371, 372, 375, 376, 377, 378, 381, 383, 385, 387, 388, 389, 391, 395, 396, 397, 398, 401, 409, 411, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 439, 440, 444, 450, 451, 453, 454, 455, 457, 458, 459, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 479, 504, 512, 532, 539, 543, 544, 545, 547, 549, 550, 551, 552, 553, 554, 556, 557, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 601, 602, 605, 610, 615, 616, 618, 622, 627, 630, 635, 636, 638, 639, 640, 642, 647, 648, 653, 654, 655, 659, 661, 663, 664, 665, 666, 667, 669, 671, 673, 674, 676, 679, 680, 681, 682, 683, 684, 686, 687, 695, 696, 697, 698, 699, 700, 701, 702, 703, 709, 719, 721, 782, 786, 787, 788, 789, 806, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 850, 854, 855, 857, 858, 859, 860, 862, 863, 865, 866, 868, 871, 872, 874, 876, 877, 889, 893, 901, 907, 908, 909, 910, 914, 917, 920, 921, 922, 923, 950, 974, 998, 999, 1003, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1022, 1025, 1031, 1032, 1033, 1035, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "detcurvedisplai": [2, 272, 328, 735, 1052, 1053, 1057, 1058], "detect": [2, 14, 42, 47, 49, 58, 70, 98, 100, 113, 114, 115, 144, 147, 154, 187, 199, 221, 231, 243, 257, 267, 269, 275, 278, 284, 285, 297, 316, 322, 333, 345, 378, 381, 383, 387, 395, 397, 413, 414, 415, 417, 419, 423, 437, 453, 456, 471, 473, 476, 477, 480, 481, 482, 483, 495, 496, 498, 500, 504, 518, 520, 523, 530, 545, 546, 547, 554, 571, 572, 596, 599, 604, 639, 647, 685, 706, 710, 735, 797, 838, 858, 862, 873, 882, 885, 886, 890, 891, 892, 912, 916, 1001, 1005, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1040, 1043, 1046, 1047, 1048, 1050, 1052, 1053, 1055, 1056, 1059], "detection_error_tradeoff": 1009, "detector": [378, 397, 858], "determin": [2, 48, 50, 53, 57, 81, 90, 113, 137, 139, 143, 153, 170, 179, 190, 197, 198, 213, 220, 275, 316, 321, 350, 359, 365, 366, 382, 383, 385, 392, 396, 397, 412, 413, 415, 419, 420, 422, 423, 424, 425, 438, 444, 448, 449, 450, 452, 454, 456, 457, 463, 466, 467, 468, 472, 476, 477, 479, 480, 481, 482, 483, 489, 490, 491, 495, 498, 500, 503, 505, 511, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 545, 547, 550, 551, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 573, 575, 576, 578, 590, 591, 592, 596, 599, 602, 610, 615, 616, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 643, 644, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 695, 697, 698, 700, 701, 702, 715, 719, 731, 737, 738, 746, 791, 792, 793, 795, 796, 801, 808, 810, 811, 812, 814, 822, 830, 831, 832, 833, 834, 835, 836, 837, 839, 843, 845, 846, 848, 855, 857, 858, 863, 868, 869, 870, 876, 877, 885, 886, 887, 889, 893, 901, 912, 913, 915, 918, 921, 923, 926, 954, 971, 977, 979, 982, 998, 1001, 1003, 1008, 1012, 1014, 1015, 1017, 1019, 1022, 1023, 1025, 1040, 1045, 1048, 1049, 1051, 1052, 1053, 1059], "determinist": [93, 150, 371, 379, 397, 415, 450, 454, 456, 458, 459, 460, 465, 466, 469, 559, 567, 568, 572, 573, 591, 592, 699, 703, 819, 820, 868, 920, 921, 931, 1001, 1005, 1041, 1044, 1046, 1048, 1049, 1052, 1055, 1056], "detlefsen": 1054, "detomaso": 1047, "detriment": [46, 171, 289, 371, 424, 1005], "dev": [183, 190, 235, 280, 285, 381, 383, 387, 389, 391, 950, 951, 1009, 1033, 1036, 1047, 1052, 1055, 1056], "dev0": [381, 387, 1032, 1036], "dev514": 1054, "devansh": [1047, 1048], "devanshkyada27": 1057, "devashish": 1046, "devel": 381, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 331, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 370, 378, 382, 383, 387, 389, 395, 397, 398, 400, 406, 409, 412, 417, 418, 422, 423, 429, 432, 439, 501, 808, 950, 951, 992, 1005, 1009, 1012, 1025, 1028, 1029, 1030, 1032, 1033, 1040, 1048, 1049, 1050, 1055, 1058, 1059], "developing_estim": 1030, "devi": 1052, "devianc": [2, 149, 152, 217, 235, 331, 422, 561, 566, 567, 569, 570, 573, 656, 677, 688, 729, 731, 732, 755, 757, 760, 921, 923, 1005, 1025, 1041, 1050, 1051, 1053, 1054, 1056], "deviant": [223, 1015], "deviat": [52, 58, 70, 96, 113, 140, 143, 144, 145, 146, 148, 172, 174, 179, 181, 183, 190, 197, 223, 254, 272, 273, 274, 275, 276, 278, 302, 303, 316, 321, 375, 379, 380, 388, 392, 397, 419, 422, 425, 457, 479, 509, 519, 520, 521, 522, 524, 525, 526, 530, 532, 533, 538, 560, 602, 619, 642, 652, 653, 679, 732, 760, 814, 831, 858, 881, 882, 892, 901, 902, 903, 1005, 1009, 1015, 1019, 1046, 1047, 1048, 1051, 1052, 1053], "devic": [419, 590, 1028, 1058], "devnani": 1052, "deweight": 958, "dexter": 1050, "dezub": 1047, "df": [43, 52, 62, 64, 153, 158, 189, 191, 197, 202, 217, 235, 265, 275, 320, 322, 332, 358, 388, 423, 473, 598, 599, 998, 999, 1057], "df_": 235, "df_freq": 235, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 332, "df_sev": 235, "df_std": 358, "df_test": [217, 235], "df_train": [217, 235], "dfrac": [1013, 1019], "dgemm": 370, "dgesdd": 389, "dhanshre": 1055, "dhillon": [2, 57, 412, 458, 460, 519], "dhingra": [1048, 1049, 1052, 1057], "di": [397, 415, 420, 539, 545, 672, 693, 694, 905, 1044, 1053], "dia": 1057, "diabet": [2, 46, 151, 161, 162, 172, 186, 187, 204, 206, 213, 214, 271, 288, 376, 422, 509, 660, 661, 808, 813, 833, 834, 835, 1017, 1030, 1035], "diabetes_i": 213, "diabetes_x": 213, "diabetes_x_test": 213, "diabetes_x_train": 213, "diabetes_y_pr": 213, "diabetes_y_test": 213, "diabetes_y_train": 213, "diadochokinet": 1055, "diag": [51, 115, 182, 262, 265, 420, 425, 540, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 805, 806, 1005, 1055], "diag_kind": [189, 190], "diagnos": [172, 278, 380, 391, 400, 416], "diagnosi": [172, 278, 380, 859], "diagnost": [172, 193, 278, 376, 397, 414, 508, 720, 834, 835, 1009, 1017, 1028, 1029, 1035], "diagon": [2, 43, 62, 64, 75, 115, 117, 235, 254, 262, 265, 266, 268, 346, 412, 415, 417, 425, 460, 478, 479, 485, 488, 519, 521, 535, 540, 558, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 658, 659, 662, 663, 664, 690, 691, 709, 723, 800, 805, 806, 856, 864, 1001, 1003, 1005, 1008, 1009, 1012, 1019, 1046, 1048, 1049, 1050], "diagram": [2, 62, 64, 105, 256, 326, 332, 385, 413, 415, 445, 446, 475, 910, 1019, 1051, 1052, 1057, 1058], "diamet": 415, "diamond": 263, "diaz": 1048, "dice": [457, 464, 707, 786, 787, 788, 1012], "dicedist": 707, "dichotomis": 1025, "dickerson": 1041, "dickson": 1047, "dico": 126, "dict": [48, 49, 50, 51, 55, 63, 74, 80, 104, 107, 108, 129, 143, 148, 150, 152, 215, 223, 244, 253, 262, 273, 274, 276, 279, 282, 284, 296, 300, 318, 322, 329, 339, 346, 350, 358, 359, 372, 375, 377, 385, 395, 397, 416, 419, 426, 427, 429, 433, 437, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 504, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 705, 706, 708, 709, 710, 719, 721, 770, 773, 779, 787, 788, 805, 806, 807, 808, 811, 812, 814, 819, 820, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 929, 931, 943, 944, 962, 965, 968, 997, 998, 1009, 1019, 1035, 1040, 1046, 1047, 1056, 1057, 1058], "dict_count_vector": 359, "dict_init": [539, 545, 553, 554], "dict_kei": 634, "dict_learn": [2, 392, 539, 545, 554, 1041, 1048, 1050, 1053, 1054, 1056], "dict_learning_onlin": [2, 553, 1041, 1050, 1053, 1054, 1057], "dict_pos_code_estim": 123, "dict_pos_dict_estim": 123, "dict_pos_estim": 123, "dict_typ": 589, "dictat": 415, "dictionari": [2, 44, 46, 47, 71, 83, 86, 88, 122, 124, 153, 155, 187, 216, 251, 253, 269, 358, 359, 376, 377, 378, 385, 395, 397, 415, 423, 456, 471, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 518, 534, 539, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 575, 576, 577, 578, 589, 590, 592, 595, 596, 597, 602, 640, 641, 642, 672, 693, 694, 709, 719, 721, 808, 811, 812, 819, 820, 822, 830, 835, 871, 876, 885, 920, 921, 922, 923, 927, 929, 931, 943, 965, 968, 998, 1005, 1009, 1024, 1030, 1034, 1035, 1040, 1048, 1051, 1052, 1053, 1054, 1055], "dictionarylearn": [2, 420, 545, 547, 548, 550, 551, 552, 553, 554, 1041, 1045, 1047, 1050, 1053, 1054, 1055, 1056], "dictlearn": 1045, "dictvector": [2, 57, 104, 187, 356, 357, 358, 378, 423, 495, 590, 596, 597, 598, 599, 885, 1030, 1040, 1041, 1044, 1050, 1052, 1053, 1056, 1057], "did": [150, 174, 190, 193, 217, 225, 235, 261, 269, 323, 378, 409, 635, 720, 827, 914, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1055], "didact": [383, 1029], "didi": [1046, 1047, 1048, 1049], "didn": [251, 366, 397, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "die": 1006, "diebold": 275, "diederik": [869, 870, 1013, 1055], "diederikwp": 1055, "diego": [1041, 1042], "diegodlh": [1047, 1048], "diemert": [1033, 1042, 1043], "diesel": [217, 235], "dietterich": [275, 842, 1010], "diff": [386, 1009], "diff_embed": 306, "differ": [2, 25, 43, 44, 46, 49, 51, 53, 54, 55, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 84, 87, 88, 90, 92, 93, 95, 99, 100, 101, 102, 104, 105, 106, 108, 113, 117, 118, 120, 121, 123, 125, 126, 128, 130, 131, 132, 137, 140, 142, 143, 146, 147, 148, 150, 152, 153, 158, 159, 160, 161, 163, 165, 167, 172, 173, 174, 175, 176, 179, 180, 181, 185, 186, 187, 189, 190, 192, 195, 197, 198, 201, 203, 204, 205, 206, 208, 214, 217, 218, 219, 221, 222, 223, 224, 225, 234, 235, 237, 238, 239, 240, 242, 244, 246, 249, 250, 251, 254, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 289, 290, 291, 293, 295, 296, 299, 302, 303, 305, 311, 312, 315, 317, 318, 320, 321, 325, 333, 340, 341, 342, 344, 345, 346, 348, 349, 353, 354, 357, 358, 359, 366, 370, 371, 372, 377, 378, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 396, 397, 401, 403, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 440, 444, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 469, 471, 482, 485, 497, 501, 502, 504, 511, 512, 516, 517, 520, 522, 530, 545, 546, 547, 548, 554, 555, 557, 558, 563, 564, 571, 589, 590, 596, 597, 598, 599, 602, 619, 621, 622, 623, 627, 630, 631, 635, 639, 640, 641, 642, 646, 651, 652, 653, 655, 657, 659, 661, 663, 666, 669, 674, 675, 680, 682, 684, 685, 686, 688, 698, 700, 702, 706, 708, 709, 712, 713, 714, 715, 717, 723, 725, 726, 735, 736, 737, 738, 739, 742, 743, 745, 751, 765, 766, 767, 769, 786, 790, 791, 792, 794, 795, 797, 800, 801, 803, 806, 808, 810, 811, 812, 813, 814, 817, 822, 823, 824, 826, 827, 828, 830, 831, 833, 835, 836, 839, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 862, 865, 868, 872, 877, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 912, 913, 914, 917, 920, 921, 922, 923, 965, 972, 998, 999, 1001, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1033, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "difference_plot": 280, "differenti": [120, 282, 422, 425, 567, 568, 627, 630], "difficult": [90, 137, 190, 225, 254, 383, 391, 413, 420, 422, 561, 562, 567, 569, 570, 1004, 1006, 1008, 1012, 1014, 1016, 1025, 1033, 1040, 1054], "difficulti": [48, 64, 235, 316, 372, 383, 413, 869, 870, 1008, 1012], "diffus": 179, "digest": [383, 1055, 1059], "digg": [1033, 1047], "digicosm": 0, "digit": [2, 44, 51, 52, 65, 71, 74, 80, 83, 86, 88, 94, 96, 97, 106, 107, 117, 126, 142, 162, 170, 172, 187, 207, 208, 224, 233, 236, 237, 239, 241, 248, 249, 263, 268, 273, 274, 277, 300, 305, 306, 310, 312, 313, 331, 334, 337, 358, 376, 383, 389, 415, 421, 422, 424, 448, 452, 454, 510, 549, 552, 557, 574, 666, 696, 697, 698, 699, 700, 705, 712, 713, 721, 725, 726, 745, 801, 803, 838, 854, 861, 868, 872, 873, 882, 892, 898, 905, 908, 917, 924, 925, 926, 1004, 1006, 1009, 1012, 1014, 1022, 1030, 1035, 1044], "digraph": 924, "dijkstra": [392, 696, 1006], "dilemma": 1004, "dillon": [1048, 1049, 1050], "dilut": [193, 380], "dilutedsauc": 1048, "dim": [226, 248, 304, 305, 307, 342, 343, 535, 707, 1057], "dim_reduction_method": 305, "dimens": [2, 37, 48, 51, 52, 54, 72, 75, 88, 115, 117, 120, 123, 172, 176, 178, 180, 182, 191, 201, 202, 215, 239, 241, 244, 248, 249, 255, 261, 262, 300, 301, 305, 319, 350, 357, 358, 359, 378, 380, 384, 397, 415, 420, 421, 425, 427, 449, 450, 452, 454, 455, 456, 459, 471, 472, 489, 490, 491, 501, 502, 523, 532, 533, 537, 538, 541, 549, 557, 590, 591, 592, 593, 595, 597, 605, 619, 627, 630, 649, 652, 667, 698, 699, 700, 702, 703, 707, 772, 833, 852, 853, 857, 871, 904, 905, 906, 914, 915, 916, 917, 918, 938, 939, 940, 971, 979, 982, 999, 1001, 1003, 1005, 1006, 1007, 1010, 1012, 1013, 1015, 1021, 1024, 1028, 1047, 1049, 1050, 1052], "dimension": [2, 11, 37, 45, 48, 49, 57, 67, 75, 79, 89, 90, 92, 93, 97, 103, 105, 107, 108, 117, 118, 121, 123, 130, 131, 137, 142, 156, 172, 174, 176, 177, 181, 187, 202, 213, 218, 234, 236, 238, 239, 241, 244, 248, 249, 252, 261, 262, 297, 300, 304, 306, 318, 343, 350, 357, 366, 370, 375, 378, 379, 380, 383, 392, 397, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 452, 454, 456, 472, 476, 480, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 505, 508, 509, 510, 512, 513, 518, 523, 527, 540, 542, 543, 546, 547, 548, 549, 552, 555, 557, 571, 574, 581, 607, 615, 639, 648, 649, 650, 660, 696, 697, 698, 699, 700, 701, 702, 704, 707, 718, 733, 805, 806, 808, 838, 852, 853, 854, 857, 860, 861, 868, 872, 873, 876, 882, 887, 892, 904, 905, 906, 912, 916, 956, 994, 1000, 1001, 1004, 1005, 1010, 1011, 1015, 1021, 1022, 1023, 1024, 1025, 1030, 1031, 1033, 1034, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1052, 1055, 1056], "dimensionalityreduct": 380, "dimensionalityreductiondimension": 403, "diminish": 423, "dimitri": [1053, 1054, 1055, 1056, 1057], "dimmick": 380, "dinga92": 1058, "dingwal": 1047, "dionisi": 1054, "diop": 1050, "dipan": 1058, "direct": [51, 117, 118, 123, 125, 131, 172, 223, 260, 266, 272, 305, 314, 321, 346, 351, 381, 383, 384, 387, 391, 398, 401, 415, 418, 420, 423, 424, 459, 469, 478, 479, 485, 542, 549, 557, 596, 597, 599, 610, 649, 696, 861, 1003, 1004, 1005, 1010, 1012, 1014, 1029, 1040, 1043], "direction": 1058, "direction_vector": 314, "directli": [0, 45, 57, 64, 80, 81, 91, 105, 142, 147, 172, 182, 202, 204, 217, 223, 235, 245, 280, 314, 316, 329, 332, 333, 359, 366, 370, 381, 383, 384, 385, 387, 389, 396, 397, 398, 411, 412, 413, 415, 416, 417, 418, 419, 423, 425, 449, 459, 469, 471, 472, 476, 481, 535, 575, 576, 577, 578, 601, 605, 619, 628, 640, 651, 654, 655, 660, 661, 668, 669, 670, 671, 672, 685, 689, 692, 698, 782, 786, 789, 800, 801, 807, 808, 811, 812, 822, 836, 837, 839, 855, 857, 871, 872, 873, 879, 889, 891, 894, 901, 998, 1005, 1007, 1012, 1014, 1016, 1019, 1024, 1025, 1029, 1040, 1048, 1049, 1051, 1052, 1053, 1056, 1057, 1059], "director": 1033, "directori": [0, 2, 47, 298, 377, 381, 383, 385, 387, 389, 391, 397, 401, 416, 448, 452, 457, 493, 499, 507, 872, 873, 1054], "direr": [1043, 1044, 1047, 1048], "dirichlet": [2, 42, 45, 187, 260, 261, 266, 270, 423, 495, 544, 546, 548, 596, 599, 805, 1028, 1030, 1034, 1035, 1040, 1045, 1046], "dirichlet_distribut": [260, 805, 1008, 1046], "dirichlet_process": [260, 266, 805, 1008, 1046], "disabl": [141, 251, 269, 323, 332, 357, 381, 383, 406, 423, 456, 467, 475, 545, 546, 547, 554, 567, 568, 569, 570, 871, 889, 901, 910, 938, 939, 1019, 1046, 1049, 1053, 1055, 1058], "disadvantag": [420, 425, 1005, 1006, 1013, 1023, 1024, 1025], "disagre": [743, 1016], "disambigu": [383, 840, 909, 1022, 1055], "disappear": [1005, 1040], "disappoint": 43, "discard": [47, 90, 199, 278, 370, 412, 417, 424, 516, 517, 557, 605, 635, 638, 652, 885, 889, 901, 999, 1005, 1048, 1052, 1058], "disclaim": 1028, "disclos": 396, "disconnect": 1053, "discontinu": [43, 395], "discord": [713, 1032], "discount": [2, 378, 415, 734, 764, 1047, 1050], "discounted_cumulative_gain": 734, "discourag": [221, 395, 401, 697], "discov": [358, 415, 420, 423, 426, 451, 455, 1055, 1058], "discoveri": [2, 275, 378, 389, 392, 415, 422, 424, 426, 451, 519, 563, 564, 571, 600, 603, 604, 606, 607, 608, 614, 728, 748, 791, 947, 948, 949, 1009, 1021, 1033, 1054, 1055], "discrep": [423, 1044], "discret": [2, 43, 47, 67, 81, 91, 121, 132, 135, 137, 156, 173, 187, 191, 198, 217, 235, 251, 255, 293, 311, 315, 319, 372, 375, 378, 379, 383, 387, 396, 397, 415, 420, 423, 425, 445, 446, 455, 459, 467, 468, 469, 500, 522, 523, 530, 561, 567, 596, 597, 600, 603, 604, 607, 608, 615, 616, 618, 619, 620, 624, 625, 626, 665, 666, 750, 808, 819, 830, 838, 847, 848, 851, 873, 877, 885, 886, 889, 892, 901, 912, 917, 921, 971, 998, 1005, 1006, 1007, 1009, 1010, 1012, 1025, 1028, 1030, 1035, 1042, 1045, 1053, 1054, 1055], "discrete_featur": [615, 616], "discrim": 217, "discrimin": [2, 12, 48, 49, 65, 111, 112, 113, 114, 115, 131, 167, 169, 172, 187, 195, 232, 238, 252, 265, 305, 380, 413, 422, 482, 520, 557, 558, 574, 639, 791, 861, 998, 1006, 1009, 1012, 1023, 1025, 1030, 1031, 1035, 1043], "discriminant_analysi": [2, 67, 69, 70, 131, 238, 305, 366, 411, 544, 557, 558, 861, 1003, 1010, 1040, 1043, 1044, 1045, 1046, 1047], "discriminatori": 413, "discuss": [43, 88, 93, 172, 190, 206, 237, 242, 269, 278, 293, 357, 366, 372, 378, 380, 383, 388, 389, 391, 395, 397, 398, 414, 415, 417, 421, 422, 425, 506, 690, 691, 854, 855, 860, 862, 863, 999, 1003, 1005, 1006, 1009, 1012, 1019, 1026, 1029, 1032, 1043], "diseas": [46, 161, 172, 186, 278, 380, 720, 1009], "disentangl": 1006, "disjoint": [413, 415, 416, 444, 712, 739, 763, 765, 1006], "disk": [45, 53, 378, 383, 388, 397, 409], "disp": [43, 66, 68, 139, 153, 154, 155, 268, 278, 291, 299, 321, 326, 332, 343, 348, 445, 639, 705, 708, 709, 861], "disp1": 640, "disp2": 640, "dispar": [698, 702, 1006], "dispatch": [105, 269, 397, 411, 475, 808, 822, 833, 834, 835, 910, 974, 975, 1035, 1055, 1058], "dispatch_next": 974, "dispatch_one_batch": 974, "dispers": [70, 289, 415, 718, 733, 1005], "displai": [2, 51, 62, 64, 70, 72, 81, 83, 95, 105, 114, 115, 117, 118, 123, 143, 154, 155, 158, 185, 187, 190, 191, 205, 235, 243, 244, 254, 258, 264, 272, 276, 277, 282, 284, 285, 290, 306, 322, 326, 327, 345, 362, 370, 383, 385, 386, 390, 392, 401, 403, 416, 420, 423, 424, 429, 445, 471, 474, 475, 504, 549, 572, 638, 639, 640, 666, 695, 705, 706, 708, 709, 710, 721, 726, 790, 797, 808, 814, 822, 831, 838, 872, 873, 885, 887, 892, 910, 917, 924, 925, 926, 947, 974, 995, 1009, 1013, 1028, 1030, 1035, 1049, 1051, 1052, 1054, 1055], "display_label": [45, 268, 705, 1052], "dispos": 998, "disproportion": 421, "disput": 143, "disregard": [357, 397, 423, 438, 472, 489, 490, 491, 560, 562, 564, 566, 568, 570, 573, 576, 578, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 729, 730, 731, 732, 793, 845, 846, 855, 863, 870, 881, 882, 888, 889, 892, 897, 900, 901, 903, 913, 915, 918, 921, 923, 1009, 1048], "disrupt": [371, 381], "dissemin": 1028, "dissimilar": [240, 350, 397, 412, 459, 698, 702, 1006, 1046, 1056], "dissimilarity_matrix_": 698, "dist": [113, 238, 248, 387, 476, 477, 478, 479, 480, 481, 482, 483, 707, 771, 777, 852, 853], "dist_": [476, 481], "dist_embed": 306, "dist_linkag": 193, "dist_matrix": 459, "dist_matrix_": 696, "distanc": [2, 37, 74, 75, 90, 92, 95, 96, 100, 102, 110, 114, 128, 172, 185, 187, 193, 203, 218, 220, 237, 239, 242, 248, 254, 296, 298, 299, 304, 306, 308, 309, 316, 321, 325, 329, 330, 350, 357, 358, 370, 380, 392, 395, 397, 412, 415, 417, 420, 421, 425, 426, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 462, 463, 464, 465, 466, 468, 469, 470, 475, 476, 477, 478, 479, 480, 481, 482, 483, 546, 548, 555, 615, 616, 623, 627, 628, 630, 631, 636, 666, 667, 674, 676, 682, 683, 684, 685, 686, 696, 697, 698, 700, 701, 702, 703, 704, 707, 711, 733, 742, 766, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 786, 787, 788, 789, 800, 801, 804, 808, 822, 841, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 891, 906, 910, 912, 914, 916, 917, 918, 920, 921, 922, 923, 999, 1003, 1006, 1007, 1009, 1012, 1015, 1019, 1021, 1023, 1024, 1029, 1030, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "distance_matrix": 193, "distance_metr": [2, 786, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866], "distance_threshold": [76, 448, 452, 1049, 1052], "distancemetr": [2, 397, 421, 855, 1012, 1048, 1052, 1053, 1054, 1057], "distancemetric64": [852, 853], "distances_": [76, 448, 452, 1052], "distant": [415, 700, 717, 1012], "distil": 242, "distinct": [95, 275, 337, 357, 359, 378, 385, 388, 397, 398, 419, 422, 423, 597, 809, 818, 826, 886, 887, 907, 908, 998, 1005, 1012, 1015, 1048], "distinguish": [43, 58, 75, 113, 121, 128, 219, 272, 293, 378, 385, 397, 398, 425, 998, 1009, 1012, 1015], "distort": [37, 216, 248, 380, 413, 889, 901, 906, 1006, 1019, 1021], "distribut": [2, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 87, 88, 90, 92, 97, 109, 112, 113, 114, 118, 121, 137, 139, 150, 154, 167, 172, 174, 183, 187, 189, 190, 193, 195, 197, 217, 219, 221, 239, 241, 244, 248, 254, 260, 265, 266, 269, 271, 275, 281, 283, 289, 293, 297, 301, 315, 316, 318, 321, 331, 335, 336, 351, 353, 357, 370, 371, 376, 379, 380, 381, 383, 384, 388, 397, 413, 415, 417, 419, 420, 421, 427, 454, 456, 476, 477, 478, 479, 480, 481, 482, 483, 495, 506, 511, 523, 524, 525, 526, 527, 531, 540, 541, 544, 558, 559, 560, 571, 619, 633, 648, 650, 652, 653, 656, 666, 667, 677, 687, 688, 696, 697, 698, 700, 714, 716, 732, 760, 797, 805, 806, 812, 813, 820, 822, 826, 827, 838, 848, 851, 857, 861, 868, 875, 888, 889, 890, 891, 892, 900, 901, 902, 907, 908, 916, 927, 958, 998, 1003, 1005, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1021, 1022, 1028, 1029, 1030, 1034, 1035, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "district": [186, 378], "distutils_use_sdk": 381, "ditenberg": 1047, "div": [254, 952], "dive": [118, 383, 389, 998], "diverg": [54, 149, 237, 242, 301, 546, 548, 555, 700, 868, 1006, 1008, 1009, 1014, 1016, 1047, 1048, 1053], "divers": [0, 397, 422], "divid": [72, 78, 83, 123, 169, 179, 217, 254, 260, 358, 366, 379, 380, 412, 414, 415, 419, 420, 422, 476, 477, 478, 479, 480, 481, 482, 483, 520, 527, 542, 549, 684, 685, 686, 727, 734, 742, 746, 764, 802, 804, 869, 870, 914, 917, 956, 959, 960, 998, 1006, 1008, 1009, 1012, 1019, 1023, 1025, 1040, 1047, 1048, 1051], "dividend": 1009, "divis": [329, 415, 423, 598, 599, 602, 720, 721, 724, 737, 738, 746, 754, 791, 792, 795, 1009, 1044, 1048, 1049, 1052, 1056, 1057, 1059], "divisor": 1009, "divo": 1050, "divyanshu": 1053, "divyaprabha": 1051, "diwakar": 1054, "dixon": [777, 1050, 1051], "dizietasahi": 1050, "di\u1ec5n": 1055, "djipei": [1045, 1046], "dl": 684, "dlabal": 1044, "dll": 1054, "dlovel": 1048, "dmallia17": 1053, "dmitri": [1045, 1047, 1048, 1049, 1053, 1056, 1057], "dmitrij": 1044, "dmytro": 1053, "dn": [0, 1012], "dna": [395, 636, 999], "dnf": 401, "do": [0, 30, 43, 49, 52, 62, 64, 77, 90, 96, 102, 108, 120, 127, 129, 132, 141, 144, 146, 150, 151, 153, 158, 169, 179, 185, 190, 191, 192, 214, 217, 221, 235, 237, 239, 251, 252, 254, 266, 269, 270, 273, 276, 278, 295, 296, 298, 302, 328, 332, 340, 343, 346, 350, 351, 353, 357, 358, 359, 365, 366, 370, 371, 372, 378, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 397, 398, 409, 411, 413, 415, 416, 417, 418, 419, 422, 423, 424, 434, 457, 468, 471, 474, 511, 544, 546, 550, 552, 560, 563, 589, 590, 596, 597, 599, 610, 640, 641, 653, 654, 660, 663, 664, 666, 667, 674, 676, 684, 745, 771, 786, 790, 810, 825, 828, 844, 845, 849, 876, 877, 879, 886, 890, 892, 897, 898, 900, 901, 902, 903, 920, 921, 922, 923, 937, 982, 998, 1001, 1003, 1005, 1006, 1009, 1010, 1012, 1013, 1017, 1019, 1024, 1025, 1028, 1029, 1032, 1033, 1040, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "do_early_stopping_": [569, 570], "doc": [0, 43, 47, 52, 57, 357, 359, 371, 383, 387, 388, 391, 397, 401, 408, 423, 596, 597, 599, 786, 789, 800, 801, 835, 1040, 1044, 1054], "doc_environ": 391, "doc_it": 47, "doc_linux": 391, "doc_topic_distr": [544, 1047], "doc_topic_prior": [420, 544], "doc_topic_prior_": 544, "dock": 1059, "docker": [391, 409, 1053, 1054], "dock\u00e8": [1049, 1050, 1051, 1057, 1058], "docstr": [383, 385, 389, 397, 455, 468, 479, 707, 709, 946, 998, 1012, 1013, 1023, 1040, 1047, 1048, 1053, 1054, 1057], "doctest": [383, 397, 1040], "document": [2, 17, 42, 45, 46, 49, 51, 54, 56, 59, 63, 72, 91, 92, 93, 95, 96, 104, 105, 106, 121, 123, 135, 142, 144, 145, 154, 155, 158, 161, 169, 179, 182, 190, 191, 192, 199, 232, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 313, 314, 322, 326, 329, 330, 332, 337, 339, 353, 359, 365, 370, 371, 372, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 389, 391, 395, 397, 398, 401, 403, 406, 409, 412, 415, 420, 423, 426, 451, 454, 455, 456, 457, 460, 464, 471, 495, 496, 507, 509, 519, 529, 531, 544, 552, 572, 596, 597, 598, 599, 612, 639, 647, 651, 666, 674, 676, 682, 684, 704, 705, 707, 711, 713, 725, 745, 766, 767, 777, 786, 787, 788, 801, 803, 808, 811, 812, 814, 822, 831, 842, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 873, 884, 912, 917, 934, 937, 939, 953, 974, 998, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1017, 1023, 1026, 1030, 1033, 1041, 1042, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "document_clust": 1046, "document_nam": 57, "doddington": 1009, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 67, 70, 75, 81, 88, 90, 92, 104, 106, 107, 118, 133, 137, 142, 143, 146, 147, 148, 152, 153, 158, 172, 180, 190, 191, 202, 214, 217, 223, 235, 237, 238, 239, 242, 244, 247, 248, 249, 251, 252, 254, 262, 263, 269, 270, 275, 277, 278, 282, 284, 285, 295, 296, 309, 316, 318, 320, 322, 323, 328, 329, 338, 339, 344, 346, 353, 355, 357, 358, 359, 370, 371, 377, 381, 383, 384, 385, 387, 391, 396, 397, 403, 406, 409, 411, 413, 415, 416, 419, 420, 422, 423, 424, 425, 440, 447, 449, 453, 454, 456, 457, 461, 463, 474, 480, 486, 494, 507, 511, 516, 535, 543, 545, 546, 547, 552, 554, 557, 558, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 589, 590, 591, 596, 597, 599, 601, 602, 605, 610, 614, 618, 640, 646, 657, 658, 659, 662, 663, 664, 667, 679, 690, 691, 706, 708, 710, 715, 736, 737, 738, 742, 744, 746, 751, 754, 786, 791, 792, 795, 796, 802, 808, 811, 812, 822, 869, 873, 874, 875, 877, 879, 881, 884, 885, 886, 889, 892, 893, 901, 904, 905, 909, 912, 913, 920, 921, 922, 923, 927, 938, 942, 956, 959, 960, 961, 974, 992, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1023, 1024, 1025, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1059], "doepk": 1047, "doesn": [47, 190, 217, 251, 261, 295, 313, 346, 391, 397, 401, 409, 415, 423, 424, 428, 440, 482, 640, 641, 674, 676, 684, 724, 836, 839, 844, 854, 855, 869, 881, 882, 1008, 1009, 1025, 1044, 1057], "dog": [328, 329, 331, 332, 333, 590, 791, 893, 1019], "dohmatob": [1045, 1046, 1047], "dohri": [1057, 1058], "doi": [195, 217, 235, 383, 415, 684], "dok": [561, 562, 879, 1053], "dokato": 1047, "dolan": 378, "dollar": [190, 378], "dolmatov": 1050, "dolphin": 357, "domain": [153, 217, 289, 322, 397, 400, 419, 643, 729, 731, 732, 809, 810, 815, 816, 817, 1005, 1029, 1059], "domin": [143, 186, 193, 217, 222, 254, 284, 321, 378, 389, 413, 892, 1011, 1019, 1025, 1056], "domingo": [64, 796, 1009], "dominik": [1047, 1056], "don": [51, 64, 89, 104, 153, 190, 238, 251, 252, 269, 275, 296, 338, 343, 347, 357, 358, 370, 377, 383, 385, 389, 391, 396, 401, 406, 414, 416, 423, 435, 654, 660, 840, 920, 921, 922, 923, 931, 972, 998, 1005, 1008, 1010, 1013, 1015, 1023, 1044, 1049, 1056, 1057, 1058], "don86": 1047, "donald": [45, 378, 415, 733, 999], "donat": 245, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 87, 88, 126, 153, 169, 172, 179, 180, 190, 191, 195, 197, 202, 203, 221, 234, 250, 251, 265, 273, 276, 279, 284, 296, 319, 327, 357, 358, 359, 366, 371, 377, 381, 383, 385, 387, 390, 391, 392, 395, 397, 406, 415, 417, 419, 420, 422, 448, 449, 452, 457, 459, 479, 489, 490, 491, 492, 496, 543, 569, 570, 590, 614, 615, 616, 636, 638, 640, 642, 651, 652, 653, 667, 730, 749, 805, 806, 808, 822, 824, 827, 828, 830, 876, 890, 993, 998, 999, 1002, 1005, 1006, 1009, 1011, 1012, 1013, 1019, 1022, 1023, 1024, 1025, 1029, 1040, 1042, 1047, 1050, 1052, 1056], "dong": 1050, "donn": 1045, "donoho": [697, 701, 1006], "donor": [172, 380], "donovan": 1046, "dor": 1048, "dorin": [98, 455], "dormagen": 1050, "dot": [2, 55, 69, 79, 84, 89, 92, 97, 111, 112, 113, 115, 117, 118, 124, 125, 126, 130, 132, 137, 140, 174, 175, 181, 182, 190, 199, 202, 209, 211, 212, 249, 261, 262, 264, 265, 269, 279, 342, 344, 350, 370, 385, 389, 392, 397, 412, 420, 423, 541, 546, 548, 555, 598, 599, 622, 654, 655, 658, 660, 661, 662, 665, 668, 669, 670, 671, 689, 692, 695, 769, 771, 884, 924, 957, 1007, 1011, 1019, 1023, 1024, 1049], "dot_data": [924, 1025], "dot_product": 957, "dotproduct": [2, 177, 178, 183, 425, 619, 633], "dotson": 1045, "doubl": [70, 143, 287, 383, 397, 420, 546, 548, 549, 555, 852, 853, 863, 992, 999, 1024, 1025, 1040, 1050, 1051], "doubt": [383, 384, 387, 1005, 1015, 1028], "doucet": 1054, "douetteau": 1033, "doug": [1041, 1042, 1052], "dougal": [1042, 1044, 1045, 1047, 1048, 1049, 1050], "dougla": 1048, "douillard": 1047, "doumouro": 1049, "douriez": [1050, 1051], "dowl": 1046, "down": [81, 82, 114, 137, 232, 233, 239, 248, 249, 251, 278, 293, 314, 316, 350, 366, 377, 386, 391, 397, 417, 420, 450, 457, 463, 598, 601, 602, 647, 657, 782, 786, 789, 881, 882, 887, 890, 891, 902, 914, 917, 924, 1005, 1048], "downarrow": 1011, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 376, 378, 380, 381, 387, 388, 391, 403, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 518, 1025, 1035, 1044, 1045, 1048, 1052, 1053, 1054, 1059], "download_20newsgroup": 1044, "download_if_miss": [495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 1047], "download_url": 47, "downsampl": 126, "downsid": 359, "downstream": [43, 113, 323, 359, 423, 539, 542, 545, 549, 550, 614, 885, 1019, 1050], "downweight": [417, 544], "dowon": [1048, 1049], "dozen": [396, 425], "do\u0161ilovi\u0107": [1057, 1058], "dp": [261, 266], "dpgmm": [261, 266, 1040, 1044, 1046], "dpi": [228, 926, 1053], "dpy_debug": 389, "dqd": 389, "dr": [0, 172, 380, 415, 1054], "draft": [383, 398], "drag": 403, "dragon": 1019, "drama": 423, "dramat": 372, "dramsch": 1050, "drastic": [174, 248, 283, 415, 419, 1012, 1022], "draw": [43, 46, 95, 183, 190, 213, 255, 277, 282, 346, 390, 418, 420, 421, 422, 563, 564, 565, 566, 571, 572, 573, 574, 619, 642, 709, 814, 831, 924, 926, 1008, 1028, 1053, 1054], "drawback": [145, 234, 1001, 1004], "drawcoastlin": [50, 309], "drawcountri": [50, 309], "drawn": [46, 87, 113, 140, 171, 174, 183, 189, 255, 282, 300, 357, 371, 379, 415, 421, 422, 425, 427, 476, 477, 478, 479, 480, 481, 482, 483, 523, 531, 541, 563, 564, 565, 566, 571, 572, 573, 574, 619, 635, 640, 649, 848, 904, 905, 922, 923, 1005, 1019, 1021, 1043], "drawstyl": [361, 708], "draxu": 1040, "drew": [1049, 1058], "drewhogg": 1055, "drewmjohnston": 1049, "drgfreeman": 1050, "driessen": [417, 476, 481, 1015], "drift": 1029, "drivag": [217, 235], "drive": [372, 420, 421, 557, 1023, 1033], "driven": [0, 193, 1033], "driver": [217, 235, 1055], "drop": [43, 44, 52, 105, 109, 118, 153, 179, 189, 190, 191, 193, 217, 221, 235, 254, 258, 269, 285, 322, 327, 330, 332, 358, 387, 391, 416, 420, 422, 471, 474, 575, 576, 577, 578, 703, 708, 710, 790, 797, 871, 885, 891, 999, 1005, 1009, 1019, 1028, 1040, 1041, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "drop_binary_enc": 885, "drop_dupl": 287, "drop_enc": [885, 1019], "drop_first": 703, "drop_idx": 885, "drop_idx_": [885, 1051, 1055], "drop_intermedi": [708, 710, 790, 797, 1056], "drop_nul": [52, 179], "dropdown": [172, 383, 998], "dropped_result": 147, "dropper": 147, "dror": 1049, "dross": 542, "dro\u017cd\u017c": 1043, "drskd": 1054, "druck": 1054, "drucker": [138, 422, 562], "drug": 1005, "dry": 191, "dryden": 104, "ds_ana": 1053, "ds_cnt": [67, 318, 319], "dschult": 55, "dscullei": 456, "dseg": 104, "dsouza": [1051, 1052, 1053, 1054], "dsquareindia": 1046, "dss": 1033, "dt": [85, 126, 159, 179, 422, 423, 1025], "dtreeviz": 1028, "dtype": [43, 47, 49, 50, 55, 83, 84, 88, 100, 104, 105, 147, 149, 151, 152, 154, 175, 176, 177, 186, 190, 191, 219, 235, 258, 260, 269, 273, 279, 283, 289, 293, 303, 309, 322, 328, 329, 331, 336, 365, 377, 378, 383, 385, 395, 397, 411, 416, 419, 422, 423, 430, 431, 433, 436, 449, 450, 454, 455, 456, 457, 458, 460, 466, 471, 473, 474, 476, 479, 481, 495, 496, 497, 498, 504, 505, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 522, 530, 550, 556, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 589, 590, 593, 594, 596, 597, 599, 601, 602, 609, 610, 614, 635, 636, 637, 638, 640, 641, 648, 649, 652, 653, 654, 660, 664, 665, 668, 669, 670, 671, 672, 673, 679, 681, 683, 705, 707, 713, 722, 723, 739, 746, 749, 763, 794, 814, 833, 835, 836, 848, 852, 853, 855, 863, 877, 883, 885, 886, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 906, 914, 915, 916, 917, 918, 920, 921, 922, 923, 933, 935, 936, 938, 939, 963, 973, 979, 982, 983, 984, 985, 986, 989, 994, 995, 999, 1010, 1019, 1022, 1024, 1041, 1043, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "dtype_exclud": [105, 473], "dtype_includ": [105, 147, 158, 254, 416, 473], "du": [0, 404, 405, 1040, 1041, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "dua": 1049, "dual": [104, 106, 325, 353, 357, 423, 424, 478, 479, 485, 619, 654, 655, 660, 661, 666, 667, 668, 669, 670, 671, 689, 692, 852, 853, 912, 913, 914, 917, 1024, 1042, 1051, 1054, 1056], "dual_coef_": [543, 651, 914, 915, 916, 917, 918, 1024, 1044], "dual_gap": [478, 479, 485, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692], "dual_gap_": [654, 655, 660, 661, 668, 669, 670, 671, 1053], "dualiti": [479, 1005], "dualtre": [852, 853], "duan": [1049, 1051], "duart": [1045, 1053, 1055, 1058], "dubai": 423, "duboi": [1046, 1048], "dubou": 1050, "dubourg": [0, 405, 1033, 1040, 1044], "duchesnai": [0, 405, 1040], "duck": [385, 397, 1050], "ducktyp": [1044, 1057], "duckworth": 1040, "ducout": 1054, "duda": [380, 1003], "due": [48, 52, 63, 64, 88, 90, 95, 109, 137, 140, 174, 190, 191, 197, 202, 208, 215, 217, 219, 234, 235, 248, 254, 261, 283, 284, 289, 295, 296, 321, 322, 350, 353, 357, 358, 359, 383, 389, 395, 397, 401, 413, 414, 415, 419, 420, 422, 425, 450, 453, 454, 466, 543, 547, 551, 552, 582, 679, 808, 811, 812, 816, 818, 822, 833, 834, 837, 840, 844, 845, 877, 881, 882, 892, 999, 1005, 1006, 1008, 1009, 1010, 1012, 1016, 1023, 1024, 1029, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "dueck": [73, 447, 461], "dugnat": 1054, "duhaim": 1048, "dummi": [2, 137, 138, 217, 235, 251, 269, 278, 388, 410, 559, 560, 740, 885, 894, 931, 1010, 1019, 1025, 1035, 1041, 1043, 1044, 1045, 1047], "dummy_classifiers_misclassification_error": 137, "dummy_clf": [137, 559], "dummy_leaf_": 449, "dummy_regr": 560, "dummy_sev": 235, "dummybiclust": 430, "dummyclassifi": [2, 137, 269, 278, 560, 740, 1009, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1058], "dummyestim": [567, 568], "dummyregressor": [2, 217, 235, 559, 1009, 1010, 1041, 1043, 1044, 1047, 1048, 1050, 1053, 1054, 1058], "dumont": 1025, "dump": [2, 55, 409, 494, 852, 853], "dump_svmlight_fil": [2, 1040, 1041, 1045, 1055, 1057], "duong": [1057, 1058], "duplic": [371, 382, 383, 384, 397, 415, 426, 451, 455, 456, 523, 643, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 836, 883, 994, 1012, 1040, 1043, 1052, 1054, 1056, 1057, 1059], "dupont": 51, "dupr": [1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056], "dupr\u00e9": [0, 404, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "duqu": 1053, "durat": [43, 47, 217, 235, 254, 269, 298, 359, 371, 974, 975, 1005], "duration_sec": 49, "duration_test": 357, "duration_train": 357, "dure": [0, 43, 44, 51, 52, 85, 90, 93, 106, 109, 118, 128, 141, 147, 148, 153, 155, 169, 174, 179, 190, 191, 193, 206, 218, 225, 269, 273, 277, 289, 296, 327, 328, 350, 370, 372, 381, 383, 385, 388, 397, 398, 415, 416, 420, 422, 423, 425, 426, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 466, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 621, 622, 623, 625, 627, 628, 630, 631, 633, 635, 636, 637, 638, 640, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 708, 797, 805, 806, 807, 808, 811, 812, 822, 830, 833, 834, 835, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 999, 1001, 1005, 1006, 1012, 1019, 1021, 1025, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1059], "duron": 1054, "duti": 398, "dutt": 1056, "dutta": [1057, 1058], "duv2014": 425, "duvenaud": [425, 630, 631], "dwight": 1055, "dx": [51, 53, 707], "dx_c": 1016, "dy": [51, 707], "dye": 1053, "dylan": [1047, 1050], "dynam": [51, 52, 191, 563, 564, 565, 566, 571, 572, 573, 574, 587, 588, 684, 685, 686, 1025, 1033, 1046, 1052, 1057], "dzi": 1058, "dziki": 1043, "d\u00b2": 235, "d\u00f6pfert": 1048, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 88, 90, 92, 96, 104, 111, 113, 114, 115, 117, 118, 120, 126, 128, 137, 140, 147, 149, 150, 153, 154, 163, 168, 171, 172, 182, 189, 190, 191, 195, 198, 202, 206, 207, 217, 218, 219, 221, 235, 237, 238, 250, 251, 269, 271, 275, 276, 278, 280, 281, 282, 290, 291, 293, 295, 302, 309, 318, 321, 325, 327, 333, 353, 359, 363, 364, 365, 366, 370, 371, 372, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 395, 396, 397, 401, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 444, 446, 448, 450, 451, 452, 454, 456, 457, 461, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 504, 506, 508, 509, 510, 511, 532, 541, 542, 543, 544, 546, 548, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 589, 590, 596, 597, 598, 599, 601, 602, 605, 611, 612, 613, 614, 615, 616, 617, 618, 619, 625, 630, 631, 636, 638, 641, 642, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 695, 696, 698, 700, 702, 705, 707, 709, 712, 713, 716, 717, 724, 736, 737, 738, 739, 746, 749, 750, 763, 771, 775, 786, 793, 796, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 821, 822, 826, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 868, 869, 870, 872, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 907, 908, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 950, 955, 956, 958, 962, 963, 965, 968, 983, 994, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1023, 1024, 1025, 1029, 1032, 1033, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "e0129126": 377, "e11": 378, "e2": [906, 1005], "e41a1c": [79, 97], "e501": [172, 357], "e_": 420, "each": [2, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 68, 70, 72, 76, 78, 79, 82, 84, 88, 90, 93, 95, 96, 104, 105, 107, 108, 109, 117, 118, 120, 121, 123, 124, 128, 130, 131, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 156, 157, 158, 159, 160, 161, 168, 172, 176, 178, 183, 185, 186, 189, 190, 191, 193, 195, 197, 203, 205, 206, 211, 215, 217, 218, 219, 221, 222, 225, 232, 235, 238, 244, 245, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 263, 265, 268, 269, 270, 271, 273, 275, 276, 278, 280, 281, 284, 285, 289, 293, 295, 296, 299, 301, 305, 307, 309, 311, 312, 314, 316, 317, 318, 319, 321, 322, 323, 325, 327, 328, 329, 331, 332, 333, 335, 336, 337, 340, 346, 350, 353, 358, 359, 361, 362, 365, 366, 370, 371, 372, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 395, 396, 397, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 432, 433, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 468, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 527, 530, 531, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 715, 716, 718, 721, 727, 733, 736, 737, 738, 746, 747, 753, 754, 756, 758, 759, 761, 762, 766, 767, 770, 771, 772, 773, 774, 776, 777, 778, 779, 781, 782, 784, 786, 787, 788, 789, 791, 792, 793, 795, 796, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 929, 944, 950, 951, 956, 958, 959, 964, 965, 984, 985, 986, 989, 998, 999, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1033, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "eager": 269, "eargl": 1054, "earl": 1043, "earli": [43, 46, 54, 79, 97, 136, 137, 143, 146, 187, 196, 204, 320, 326, 397, 422, 448, 452, 456, 470, 497, 504, 544, 545, 546, 547, 554, 561, 562, 567, 568, 569, 570, 635, 653, 664, 674, 675, 676, 684, 686, 700, 758, 838, 869, 870, 982, 1006, 1012, 1019, 1027, 1029, 1030, 1033, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1057], "earlier": [143, 191, 221, 377, 383, 418, 843, 846, 1019, 1038, 1041, 1053, 1055], "earliest": [377, 1006], "early_exager": 1047, "early_exagger": 700, "early_stop": [143, 153, 191, 225, 311, 328, 357, 397, 422, 569, 570, 674, 675, 676, 684, 685, 686, 869, 870, 1023, 1048, 1051, 1054, 1055], "earn": [189, 190, 398], "earth": [239, 358, 772, 1028], "eas": [106, 193, 265, 321, 383, 386, 389, 1005, 1023, 1028, 1029, 1033, 1051, 1052, 1054], "easi": [191, 225, 235, 263, 273, 275, 346, 357, 366, 378, 383, 389, 391, 395, 396, 409, 415, 422, 508, 512, 518, 879, 998, 1004, 1008, 1016, 1019, 1028, 1029, 1033, 1050, 1055, 1056], "easier": [79, 97, 101, 115, 147, 197, 205, 246, 254, 272, 273, 316, 346, 357, 366, 378, 383, 385, 388, 391, 395, 401, 417, 419, 475, 523, 910, 950, 1004, 1009, 1016, 1025, 1029, 1033, 1049, 1054], "easiest": [385, 391, 416, 1006], "easili": [43, 48, 67, 120, 169, 193, 220, 233, 249, 251, 255, 258, 275, 277, 284, 301, 318, 383, 385, 397, 398, 409, 416, 422, 423, 425, 456, 1003, 1005, 1006, 1019, 1023, 1024, 1025, 1032, 1046], "easlii": 245, "ec": [316, 538], "ecat": 378, "echo": [381, 387], "eckert": 1045, "eckhart": 502, "eclf": [159, 160, 422], "eclf1": 577, "eclf2": 577, "eclf3": 577, "ecml": 0, "ecoc": 293, "ecolog": [50, 309, 378, 506], "econom": [189, 190, 275], "econometr": 1005, "econometrica": 1005, "ecosystem": [383, 391, 999, 1027, 1033], "ecuador": [50, 309, 378, 506], "ed": [141, 152, 415, 422, 528, 567, 568, 1021, 1040, 1047], "eddi": [1043, 1057, 1058], "eden": 1055, "edern": [1055, 1056], "edg": [51, 63, 81, 101, 126, 147, 170, 240, 282, 391, 397, 412, 415, 417, 460, 569, 570, 593, 594, 596, 597, 599, 805, 849, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 877, 925, 1019, 1022, 1033, 1046, 1048, 1051, 1054], "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 80, 91, 95, 102, 121, 129, 139, 146, 154, 156, 157, 159, 160, 165, 167, 175, 176, 178, 182, 191, 201, 209, 219, 226, 229, 230, 231, 248, 249, 250, 252, 254, 260, 263, 275, 278, 290, 299, 302, 303, 304, 307, 311, 318, 319, 321, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 355, 362, 363, 364, 639], "edit": [77, 380, 381, 382, 383, 387, 391, 395, 401, 538, 542, 842, 1003, 1005, 1010, 1016], "editor": [383, 391, 395], "edm": 1005, "edoardo": [1055, 1057, 1058, 1059], "edouard": [0, 405, 1040], "edson": [1009, 1045], "edu": [45, 47, 55, 172, 195, 293, 357, 377, 378, 380, 415, 456, 494, 508, 510, 516, 517, 518, 542, 649, 652, 657, 666, 674, 675, 684, 687, 690, 691, 847, 849, 851, 861, 868, 905, 907, 920, 921, 1005, 1007], "eduardo": [1043, 1045, 1053, 1054], "educ": [189, 190, 332, 383, 504, 724, 1010], "edvardlindelof": 1050, "edward": [179, 622, 627, 630, 1043, 1048, 1049, 1050, 1051, 1055, 1058], "edwinensa": 1046, "edwinwenink": 1053, "eec": [456, 649], "ef": 1055, "eff": 1025, "effect": [43, 45, 64, 72, 74, 75, 80, 81, 88, 92, 97, 100, 103, 107, 118, 126, 128, 137, 148, 150, 152, 155, 171, 174, 175, 179, 181, 187, 188, 190, 191, 193, 202, 212, 217, 218, 219, 221, 222, 223, 234, 236, 239, 241, 247, 254, 258, 261, 265, 269, 271, 275, 276, 277, 280, 283, 284, 289, 296, 308, 314, 315, 317, 320, 326, 334, 346, 350, 351, 353, 354, 355, 357, 358, 359, 366, 371, 383, 385, 388, 395, 397, 413, 415, 416, 420, 421, 422, 423, 425, 426, 444, 449, 450, 451, 453, 454, 456, 457, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 497, 504, 508, 522, 532, 533, 541, 542, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 614, 617, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 698, 699, 700, 709, 711, 761, 793, 805, 807, 809, 810, 813, 815, 817, 819, 826, 827, 830, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 862, 863, 869, 870, 872, 875, 876, 877, 878, 879, 881, 882, 884, 888, 889, 890, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 938, 939, 956, 974, 982, 998, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1016, 1017, 1019, 1022, 1024, 1025, 1030, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "effective_learning_r": [869, 870], "effective_metric_": [854, 855, 856, 858, 860, 862, 863, 864, 1012], "effective_metric_params_": [854, 855, 856, 858, 860, 862, 863, 864], "effective_rank": [529, 532], "efficaci": 206, "effici": [37, 43, 44, 51, 53, 77, 81, 88, 90, 123, 138, 143, 148, 156, 195, 206, 210, 219, 225, 301, 333, 357, 370, 375, 377, 383, 385, 386, 387, 388, 389, 395, 397, 409, 412, 415, 420, 421, 422, 425, 427, 449, 450, 453, 454, 456, 457, 459, 461, 464, 466, 468, 469, 504, 541, 542, 543, 546, 548, 549, 552, 571, 574, 582, 589, 590, 596, 597, 599, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 640, 641, 642, 646, 648, 663, 666, 667, 672, 674, 675, 676, 681, 683, 684, 685, 686, 687, 693, 694, 696, 734, 764, 771, 787, 788, 805, 806, 808, 822, 841, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 877, 889, 901, 905, 912, 921, 923, 956, 998, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1028, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "efficiencywarn": [2, 867, 1055], "effort": [327, 383, 389, 1028, 1033, 1051, 1053], "efron": [172, 380, 690, 691, 1005], "eg": 992, "egashira": 1055, "egehan": 1058, "egg": 1048, "egger": 1058, "egin": 415, "egli": [1047, 1057], "egor": 1052, "ehrenheim": [1047, 1048], "eib": [843, 1010], "eickenberg": [1040, 1042, 1043, 1044, 1045], "eig": 1047, "eig_tol": 1041, "eig_val": 260, "eig_vec": 260, "eigen": [459, 557, 681, 699, 703, 1003, 1046, 1049], "eigen_solv": [51, 79, 81, 101, 237, 238, 420, 459, 469, 543, 696, 697, 699, 701, 703, 1006, 1041, 1050, 1053, 1054, 1055], "eigen_tol": [81, 459, 469, 699, 703, 1041, 1054, 1055], "eigendecompos": 420, "eigendecomposit": [469, 681, 699, 703, 878, 1001], "eigenfac": [42, 54, 187, 250, 253, 378, 420, 502, 549, 705, 721, 822, 838, 892, 917, 1026, 1030, 1040], "eigenface_titl": 45, "eigenmap": [237, 697, 699, 701, 703, 1034, 1035, 1041], "eigensolv": [420, 459, 469, 543, 552, 703, 1006], "eigenvalu": [120, 265, 332, 412, 415, 417, 459, 469, 476, 477, 478, 479, 480, 481, 482, 483, 543, 549, 557, 681, 696, 697, 699, 701, 703, 878, 1001, 1006, 1019, 1042, 1046, 1049, 1050, 1051, 1052], "eigenvalues_": [543, 1053], "eigenvector": [2, 42, 81, 118, 120, 187, 260, 415, 459, 469, 542, 543, 549, 558, 696, 697, 699, 703, 1006, 1030, 1040, 1044, 1054], "eigenvector_centr": 55, "eigenvectors_": [543, 1053], "eigh": [70, 260, 261, 262, 265, 266, 420, 427, 541, 543, 1055, 1058], "eighteenth": 415, "eighth": [571, 1015], "eigsh": [420, 543, 1046, 1047], "eiler": 1019, "einsum": 306, "eitan": 1057, "either": [43, 49, 64, 105, 143, 146, 147, 190, 204, 207, 245, 254, 269, 270, 279, 284, 289, 301, 353, 357, 365, 370, 371, 375, 378, 381, 383, 384, 385, 397, 406, 409, 413, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 449, 454, 459, 494, 504, 520, 532, 541, 542, 544, 552, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 590, 591, 592, 596, 597, 598, 599, 601, 602, 605, 610, 615, 616, 618, 619, 630, 635, 638, 640, 641, 658, 662, 664, 672, 684, 686, 690, 691, 698, 705, 706, 710, 714, 715, 720, 728, 732, 734, 735, 736, 737, 738, 743, 746, 747, 748, 750, 760, 764, 777, 782, 786, 790, 791, 792, 793, 795, 796, 797, 802, 808, 811, 812, 814, 822, 831, 832, 833, 834, 835, 836, 837, 839, 842, 872, 902, 903, 909, 912, 913, 920, 921, 922, 923, 927, 965, 969, 997, 998, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019, 1023, 1024, 1040, 1043, 1049, 1050, 1051, 1054, 1058], "ekaterina": [1046, 1047, 1048, 1049, 1051, 1056], "ekman": [1042, 1046], "el": [536, 1053, 1055, 1056], "elabonga": [1056, 1057], "elabor": 1010, "elad": [672, 693, 694], "elaps": [50, 82, 102, 143, 144, 145, 370, 471, 474, 577, 578, 871, 872, 873, 874], "elapsed_tim": [46, 74, 102, 144, 145, 158, 234], "elast": [2, 25, 187, 196, 202, 203, 206, 208, 211, 228, 288, 478, 479, 485, 509, 532, 654, 655, 660, 665, 666, 667, 668, 669, 670, 671, 676, 684, 686, 689, 690, 692, 998, 1009, 1023, 1030, 1031, 1035, 1040, 1045, 1049, 1050], "elastic_net": 228, "elastic_net_color": 228, "elastic_net_contour": 228, "elasticnet": [2, 46, 49, 199, 208, 283, 288, 370, 389, 395, 420, 655, 660, 665, 666, 667, 668, 669, 670, 671, 676, 684, 686, 689, 1005, 1010, 1023, 1040, 1041, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1058], "elasticnetcv": [2, 202, 397, 406, 654, 660, 668, 669, 670, 671, 689, 1005, 1040, 1043, 1051, 1053, 1054, 1057, 1058, 1059], "elasticnetifittedelasticnet": 199, "elbo": 420, "eldar": [417, 428, 482], "eleanor": 1055, "elec2": 153, "electr": [51, 153, 380, 415], "electron": [57, 172, 378, 380, 546, 548, 555, 635], "element": [2, 89, 123, 140, 141, 152, 246, 268, 274, 282, 284, 326, 358, 361, 365, 380, 382, 383, 385, 392, 398, 412, 415, 419, 420, 422, 423, 426, 451, 453, 459, 471, 494, 516, 520, 522, 528, 530, 534, 535, 539, 545, 546, 548, 558, 565, 566, 567, 568, 572, 573, 574, 575, 576, 593, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 625, 640, 666, 667, 674, 675, 676, 684, 685, 686, 715, 725, 735, 742, 744, 754, 771, 777, 786, 790, 796, 797, 842, 852, 853, 854, 855, 856, 858, 860, 862, 863, 867, 869, 870, 875, 891, 892, 895, 899, 912, 917, 920, 921, 922, 923, 958, 959, 960, 979, 981, 982, 994, 1003, 1005, 1009, 1010, 1013, 1016, 1019, 1020, 1021, 1025, 1033, 1045, 1046, 1048, 1050, 1051, 1052, 1054, 1056], "elementari": [906, 1021], "elementwis": [420, 546, 548, 555], "elena": 1047, "eleni": 1053, "eleph": 590, "elev": [80, 102, 120, 129, 191, 214, 237, 241, 498], "eleven": 1029, "elfner": 1054, "elia": 1046, "eliaschiavon": 1055, "eliasi": [1055, 1056, 1057], "elicit": 1009, "elif": [46, 47, 198, 219, 252, 262, 301, 888], "elimin": [2, 18, 86, 163, 166, 169, 172, 187, 270, 273, 274, 280, 289, 300, 415, 419, 455, 510, 523, 601, 602, 605, 610, 666, 811, 812, 827, 872, 882, 994, 1009, 1030, 1031, 1033, 1035, 1040], "elisabeth": [330, 1057], "elizabeth": [1047, 1049, 1052], "elkan": [64, 269, 326, 413, 444, 450, 454, 466, 684, 1046, 1050, 1051, 1053, 1054], "ell": [70, 260, 261, 262, 266, 412], "ell_": 1005, "ell_0": [1005, 1009], "ell_1": [420, 1005], "ell_2": 1005, "ella": 1021, "ellen": 1047, "elli": [1046, 1049], "elliot": [1057, 1058], "elliott": 1047, "ellips": [70, 244, 260, 261, 262, 265, 266, 1015], "ellipsoid": [48, 65, 69, 113, 114, 115, 187, 259, 260, 262, 263, 264, 265, 266, 557, 558, 639, 805, 806, 1003, 1008, 1030], "ellipt": [92, 1005], "ellipticenvelop": [2, 48, 244, 477, 480, 481, 482, 483, 571, 1015, 1040, 1043, 1047, 1048, 1053], "eln": 1051, "elong": 415, "els": [2, 43, 47, 50, 51, 52, 57, 70, 76, 79, 84, 90, 91, 97, 115, 127, 140, 146, 147, 150, 151, 182, 190, 191, 193, 206, 209, 232, 235, 238, 244, 248, 250, 251, 252, 253, 254, 270, 275, 276, 279, 286, 296, 301, 309, 311, 312, 318, 325, 350, 357, 358, 365, 383, 387, 389, 422, 423, 425, 427, 435, 444, 456, 516, 528, 541, 577, 626, 633, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 680, 681, 682, 684, 687, 689, 690, 691, 692, 711, 717, 796, 802, 804, 811, 812, 838, 876, 888, 891, 899, 912, 913, 927, 970, 972, 974, 995, 997, 1025], "elsewher": [397, 469, 470, 478, 479, 485], "eltermann": 1043, "elucid": 1001, "elvezio": [657, 1005], "elvi": [1045, 1046, 1047], "em": [261, 262, 266, 450, 454, 466, 544, 805, 806, 1008, 1054], "emad": 1058, "email": [0, 357, 383, 395, 398, 423, 847, 1011, 1033], "emami": 1054, "emanuel": 1041, "emb": [174, 238, 248, 305, 376, 377, 469, 703, 1006], "embark": [105, 192, 258, 325, 329, 330], "embed": [2, 26, 37, 71, 74, 79, 81, 90, 97, 142, 174, 187, 236, 239, 241, 243, 296, 305, 335, 336, 397, 415, 448, 459, 469, 496, 510, 552, 557, 574, 590, 647, 696, 697, 698, 699, 700, 701, 702, 703, 704, 861, 873, 882, 904, 905, 906, 1001, 1012, 1015, 1021, 1026, 1028, 1030, 1034, 1035, 1040, 1041, 1051, 1052, 1054], "embedding_": [240, 397, 696, 697, 698, 699, 700], "emerg": [415, 1033], "emeritu": 398, "emiko": 1054, "emil": 1054, "emili": [1051, 1052, 1059], "emilyxinyi": 1058, "emipr": 805, "emir": [1055, 1056], "emit": [1051, 1058], "emlearn": 1028, "emma": 1057, "emmanouil": 1054, "emmanuel": [1040, 1047, 1048, 1049, 1057], "emoji": 403, "emp_cov": [111, 113, 115, 485, 488], "emp_cov_contour": 113, "emp_mah": 113, "emphas": [190, 355, 389, 420, 1009], "emphasi": [355, 414, 418, 914, 915, 916, 917, 918, 1016, 1028], "empir": [2, 48, 52, 61, 62, 70, 71, 77, 78, 99, 110, 112, 113, 115, 153, 187, 198, 235, 281, 316, 413, 419, 422, 425, 454, 456, 467, 476, 477, 478, 481, 484, 485, 540, 542, 547, 549, 551, 557, 559, 573, 598, 611, 647, 657, 675, 679, 686, 687, 724, 729, 731, 732, 837, 847, 848, 849, 851, 870, 893, 941, 982, 1001, 1003, 1009, 1011, 1013, 1019, 1021, 1023, 1030, 1034, 1035], "empirical_covari": [2, 111, 417, 485, 486, 488, 1056], "empiricalcovari": [2, 111, 113, 114, 417, 476, 480, 481, 482, 483, 1015], "emploi": [0, 51, 174, 250, 397, 417, 423, 457, 485, 590, 597, 1033, 1046], "employ": [190, 269], "empti": [96, 104, 132, 229, 338, 370, 378, 387, 415, 427, 435, 490, 541, 569, 570, 639, 724, 819, 877, 917, 919, 927, 933, 938, 939, 946, 967, 968, 999, 1024, 1042, 1044, 1048, 1049, 1051, 1052, 1054, 1055, 1056], "emptyset": 1009, "emul": [190, 391], "en": [55, 61, 391, 539, 545, 603, 644, 672, 676, 679, 693, 694, 703, 713, 854, 855, 860, 861, 862, 863, 890, 906, 920, 921, 1005, 1009, 1024, 1025], "enabl": [2, 16, 52, 66, 85, 106, 153, 191, 225, 239, 251, 318, 326, 328, 329, 331, 332, 333, 354, 381, 383, 388, 391, 395, 397, 401, 406, 411, 415, 416, 420, 422, 423, 456, 471, 475, 542, 543, 549, 567, 568, 569, 570, 571, 587, 588, 598, 599, 610, 618, 805, 806, 808, 811, 833, 834, 835, 836, 837, 839, 872, 873, 885, 886, 909, 910, 912, 913, 914, 915, 916, 917, 918, 927, 968, 975, 999, 1001, 1006, 1008, 1009, 1012, 1019, 1020, 1023, 1024, 1029, 1033, 1040, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "enable_cython_pairwise_dist": [475, 910], "enable_halving_search_cv": [2, 150, 286, 287, 327, 387, 811, 812, 998], "enable_hist_gradient_boost": [387, 1049], "enable_iterative_imput": [2, 185, 186, 387, 635, 999, 1049], "enable_metadata_rout": [251, 269, 332, 406, 444, 450, 451, 454, 456, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 601, 602, 605, 610, 618, 619, 635, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 807, 808, 809, 810, 811, 812, 815, 817, 822, 826, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 871, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 1056], "enable_my_experimental_featur": 387, "enblom": 1058, "enc": [317, 319, 329, 331, 885, 886, 1019], "enc_auto": 893, "enc_high_smooth": 893, "enc_low_smooth": 893, "encapsul": [390, 416, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923], "enclos": 998, "encod": [2, 43, 47, 50, 83, 90, 105, 123, 142, 153, 158, 187, 190, 191, 192, 216, 217, 254, 269, 284, 289, 315, 317, 318, 319, 327, 329, 330, 346, 357, 359, 375, 377, 379, 388, 395, 397, 416, 419, 420, 422, 423, 425, 471, 494, 504, 511, 534, 539, 545, 547, 548, 550, 552, 553, 554, 556, 559, 569, 570, 574, 575, 577, 589, 596, 597, 599, 638, 656, 666, 667, 677, 680, 688, 743, 810, 815, 817, 835, 838, 872, 873, 875, 877, 879, 880, 883, 885, 886, 893, 896, 910, 929, 998, 999, 1005, 1006, 1009, 1011, 1012, 1014, 1023, 1028, 1029, 1030, 1035, 1041, 1042, 1048, 1052, 1054, 1055, 1056, 1057, 1058], "encoded_missing_valu": [158, 192, 886, 1019, 1054, 1055], "encodings_": [331, 893, 1019], "encompass": [397, 457, 463, 563, 564, 1006], "encount": [371, 381, 401, 409, 415, 422, 423, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 569, 570, 589, 847, 848, 849, 851, 885, 983, 1019, 1023, 1028, 1032, 1033, 1048, 1051], "encourag": [190, 205, 221, 311, 346, 382, 383, 395, 1024, 1028, 1058], "encrypt": 1028, "encyclopedia": 1009, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 381, 383, 385, 395, 397, 398, 401, 406, 412, 415, 416, 418, 422, 457, 463, 475, 495, 496, 516, 517, 545, 554, 565, 566, 567, 568, 572, 573, 574, 653, 654, 655, 658, 659, 660, 661, 662, 663, 668, 669, 670, 671, 689, 690, 691, 692, 808, 811, 812, 822, 829, 833, 870, 872, 910, 920, 921, 922, 923, 960, 962, 992, 998, 1001, 1005, 1006, 1008, 1009, 1019, 1021, 1023, 1028, 1033, 1045, 1047, 1050, 1053, 1054], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 240], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1052, "endo": 1053, "endpoint": [53, 317, 349, 643], "enemi": 383, "energi": [51, 153, 391, 868, 1014], "enet": [202, 288], "enet_path": [2, 205, 397, 654, 655, 660, 668, 669, 670, 1042, 1044, 1053], "enet_tol": [478, 479, 485, 1045], "enforc": [43, 51, 70, 88, 123, 153, 179, 211, 305, 370, 383, 417, 420, 422, 432, 438, 516, 535, 539, 545, 547, 550, 551, 553, 554, 556, 565, 566, 569, 570, 572, 573, 876, 891, 920, 921, 922, 923, 938, 939, 999, 1006, 1042, 1048, 1050, 1052, 1056], "enforce_estimator_tags_i": 1050, "eng": 1048, "engag": [389, 398], "engemann": [1042, 1043, 1047], "engin": [42, 75, 142, 147, 153, 179, 187, 190, 191, 218, 370, 377, 380, 415, 421, 423, 471, 504, 570, 647, 681, 709, 829, 835, 870, 871, 873, 876, 877, 882, 885, 887, 891, 999, 1001, 1009, 1019, 1030, 1046], "english": [54, 57, 104, 357, 358, 359, 388, 423, 596, 597, 599, 1028, 1029, 1053], "enh": 387, "enhanc": [123, 221, 382, 383, 387, 395, 397, 415, 1009, 1038, 1039, 1040, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "enjoi": [77, 269], "enough": [2, 43, 52, 64, 72, 79, 97, 143, 146, 153, 174, 185, 191, 192, 206, 217, 249, 252, 254, 269, 320, 357, 359, 366, 381, 383, 387, 398, 413, 415, 417, 419, 422, 575, 576, 597, 808, 811, 812, 814, 822, 836, 956, 998, 1003, 1006, 1008, 1015, 1019, 1024, 1028, 1033, 1046, 1056, 1057], "enrich": 350, "ensembl": [2, 43, 46, 49, 52, 63, 64, 67, 91, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 185, 186, 191, 192, 193, 217, 238, 244, 253, 254, 256, 257, 269, 272, 287, 293, 295, 318, 322, 325, 326, 327, 328, 329, 330, 331, 332, 357, 362, 363, 366, 370, 387, 388, 396, 397, 406, 409, 413, 415, 419, 424, 444, 512, 523, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 640, 641, 643, 666, 710, 811, 812, 830, 838, 842, 843, 873, 876, 885, 916, 920, 922, 923, 948, 998, 1009, 1010, 1015, 1016, 1025, 1028, 1029, 1030, 1031, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "ensemble_clf": 141, "ensemble_jaccard_scor": 295, "ensembleregressorsensembl": 403, "ensur": [0, 52, 58, 76, 92, 115, 121, 137, 143, 144, 153, 193, 217, 238, 269, 270, 278, 313, 365, 366, 370, 371, 383, 385, 387, 388, 389, 398, 401, 406, 411, 413, 415, 416, 419, 427, 476, 541, 542, 549, 619, 635, 704, 713, 790, 796, 797, 833, 905, 938, 939, 950, 951, 956, 963, 974, 1005, 1006, 1009, 1019, 1025, 1042, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "ensure_2d": [938, 939], "ensure_all_finit": [786, 936, 938, 939, 1059], "ensure_min_featur": [938, 939], "ensure_min_sampl": [938, 939], "ensure_non_neg": [939, 1059], "entail": [269, 396, 890, 892, 1023], "enter": [384, 387, 415, 449, 1016], "entertain": 1005, "entic": 190, "entir": [68, 185, 217, 225, 269, 314, 316, 326, 350, 365, 366, 377, 384, 397, 409, 415, 419, 421, 423, 479, 500, 542, 596, 597, 598, 599, 655, 659, 661, 663, 666, 667, 669, 671, 673, 674, 676, 684, 690, 691, 742, 804, 830, 840, 841, 844, 869, 871, 872, 885, 897, 898, 900, 901, 902, 903, 931, 977, 999, 1009, 1019, 1023, 1025, 1049, 1050], "entireti": 397, "entiti": [398, 734, 764], "entitl": [289, 299, 414, 454, 619, 854, 1001], "entri": [0, 105, 109, 153, 158, 186, 190, 191, 269, 271, 325, 358, 366, 387, 389, 391, 396, 397, 412, 413, 415, 420, 422, 425, 470, 471, 474, 479, 504, 539, 540, 545, 553, 554, 569, 570, 596, 599, 602, 619, 628, 640, 646, 648, 655, 659, 661, 663, 664, 667, 669, 671, 672, 673, 681, 683, 690, 691, 693, 694, 707, 712, 715, 717, 720, 723, 724, 726, 734, 737, 738, 739, 742, 743, 746, 751, 764, 766, 767, 791, 793, 796, 797, 800, 801, 821, 836, 852, 853, 860, 861, 862, 863, 864, 883, 889, 901, 994, 998, 999, 1005, 1009, 1012, 1019, 1024, 1029, 1047, 1050, 1051, 1053, 1057], "entropi": [2, 50, 64, 256, 287, 309, 327, 335, 336, 366, 378, 411, 415, 422, 427, 506, 541, 565, 572, 615, 616, 666, 725, 744, 745, 749, 803, 920, 922, 1005, 1006, 1009, 1013, 1025, 1042, 1044, 1048, 1049, 1054, 1056, 1057, 1059], "entrypoint_to_bug_reproduc": 384, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 80, 85, 90, 94, 95, 96, 97, 100, 104, 112, 114, 115, 118, 124, 126, 132, 140, 143, 148, 149, 151, 152, 153, 163, 176, 178, 183, 193, 198, 200, 208, 217, 238, 239, 242, 244, 249, 253, 254, 260, 261, 262, 263, 265, 266, 269, 270, 277, 278, 284, 285, 301, 305, 306, 308, 314, 318, 319, 335, 336, 338, 340, 344, 346, 352, 353, 357, 362, 378, 379, 567, 568, 572, 573, 789, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829], "env": [381, 391, 401, 402], "environ": [0, 3, 51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 330, 332, 337, 365, 370, 378, 380, 381, 383, 385, 386, 389, 395, 401, 402, 411, 416, 507, 1029, 1033, 1035, 1047, 1048, 1057], "environment": [50, 202, 235], "environmenterror": 1056, "eom": 453, "eoss": 0, "ep": [67, 79, 81, 84, 90, 100, 201, 205, 240, 248, 395, 415, 426, 451, 457, 462, 478, 479, 485, 639, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 689, 690, 691, 692, 698, 702, 722, 749, 864, 904, 905, 906, 1021, 1055, 1056], "epanechnikov": [301, 421, 852, 853, 857], "ephemer": 391, "ephrem": 1055, "epimorph": 1057, "epistem": 52, "epoch": [232, 397, 544, 674, 675, 676, 684, 685, 686, 869, 870, 1023, 1047, 1048, 1053], "epp": [415, 712], "eps_": [668, 670], "eps_rang": 248, "epsilon": [2, 90, 100, 200, 240, 250, 331, 352, 420, 453, 462, 651, 657, 675, 684, 686, 754, 869, 870, 913, 915, 918, 1002, 1005, 1009, 1013, 1023, 1024, 1040], "epsilon_": 850, "epsilon_i": 1009, "epsilon_insensit": [675, 684, 686, 913, 1005, 1023], "epsilon_valu": 200, "eq": [269, 428, 482, 729, 731, 732], "equal": [43, 50, 51, 63, 70, 72, 74, 88, 95, 113, 118, 125, 137, 150, 177, 190, 218, 219, 228, 234, 255, 262, 265, 268, 273, 275, 284, 306, 318, 322, 346, 348, 354, 358, 378, 379, 383, 385, 397, 412, 413, 415, 419, 420, 422, 423, 428, 444, 447, 448, 449, 450, 452, 454, 456, 461, 466, 467, 470, 476, 481, 486, 487, 511, 520, 523, 527, 540, 541, 542, 547, 549, 551, 552, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 596, 601, 602, 605, 607, 608, 615, 616, 633, 636, 637, 640, 641, 642, 643, 645, 649, 650, 657, 666, 667, 679, 707, 726, 728, 737, 791, 795, 796, 802, 804, 808, 809, 811, 812, 821, 822, 826, 833, 840, 844, 845, 852, 853, 854, 855, 860, 861, 862, 863, 864, 869, 870, 875, 876, 877, 884, 887, 890, 891, 892, 893, 895, 902, 909, 912, 913, 919, 920, 921, 922, 923, 944, 956, 983, 989, 1003, 1005, 1009, 1010, 1012, 1013, 1015, 1019, 1023, 1024, 1025, 1041, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "equat": [2, 64, 353, 383, 415, 420, 422, 565, 566, 567, 568, 572, 573, 574, 598, 635, 666, 667, 690, 691, 695, 771, 892, 920, 921, 922, 923, 999, 1006, 1009, 1014, 1048], "equi": 1008, "equiangular": 1005, "equidist": [147, 700], "equip": 1033, "equiv": [1001, 1024], "equival": [43, 54, 70, 90, 92, 147, 154, 171, 174, 179, 190, 202, 235, 265, 284, 296, 321, 350, 359, 366, 370, 389, 392, 396, 397, 409, 415, 416, 417, 418, 419, 420, 422, 424, 425, 448, 450, 451, 452, 453, 454, 456, 457, 464, 471, 476, 481, 517, 542, 549, 566, 569, 570, 571, 572, 573, 596, 599, 621, 624, 627, 629, 632, 654, 655, 656, 660, 662, 666, 667, 674, 675, 676, 677, 680, 684, 685, 688, 691, 695, 696, 701, 716, 717, 731, 742, 750, 755, 756, 757, 769, 778, 787, 788, 805, 806, 811, 812, 816, 818, 843, 846, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 869, 875, 881, 882, 884, 887, 888, 889, 890, 892, 900, 902, 903, 942, 954, 994, 998, 1003, 1005, 1006, 1007, 1009, 1015, 1019, 1023, 1024, 1025, 1048, 1049, 1050, 1051, 1053, 1054, 1057], "er": 578, "era": 1029, "eras": [567, 568, 654, 660, 666, 668, 670, 674, 675, 676, 684, 685, 686, 869, 870], "ereg": [161, 422], "eren": [0, 1042, 1043], "eric": [1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "ericellwang": [1053, 1054], "erich": [457, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1054, 1058], "erick": 1045, "erik": [378, 1033, 1043], "eriksson": 1047, "erin": [293, 1052], "erl": 293, "erlbaum": 269, "erling": 1045, "ermolaevpa": [1054, 1055], "ernst": [422, 565, 566, 573, 574, 922, 923], "err": [55, 117, 127, 137], "err_cov_emp_ful": 114, "err_cov_emp_pur": 114, "err_cov_mcd": 114, "err_loc_emp_ful": 114, "err_loc_emp_pur": 114, "err_loc_mcd": 114, "errno": 401, "erron": [113, 114, 420, 1005, 1041, 1048, 1052], "error": [2, 15, 25, 30, 43, 44, 46, 52, 53, 55, 64, 89, 109, 111, 112, 114, 127, 132, 136, 140, 143, 144, 147, 149, 151, 153, 172, 174, 185, 187, 190, 202, 206, 213, 216, 217, 219, 223, 224, 231, 235, 247, 250, 251, 257, 266, 267, 269, 271, 275, 276, 280, 284, 285, 290, 293, 302, 303, 329, 332, 345, 353, 357, 358, 371, 380, 381, 383, 385, 386, 387, 388, 392, 395, 397, 406, 409, 413, 415, 416, 417, 419, 420, 422, 423, 424, 444, 450, 451, 454, 456, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 523, 532, 539, 541, 542, 545, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 583, 589, 590, 596, 598, 599, 600, 603, 604, 606, 607, 608, 614, 618, 619, 637, 640, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 696, 697, 698, 700, 701, 704, 706, 709, 710, 717, 719, 720, 728, 729, 731, 735, 748, 751, 752, 753, 754, 755, 756, 758, 759, 761, 772, 786, 790, 796, 797, 798, 799, 807, 808, 809, 810, 811, 812, 814, 815, 817, 822, 826, 830, 831, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 862, 863, 864, 867, 869, 870, 871, 872, 873, 875, 877, 878, 879, 884, 885, 886, 891, 892, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 936, 937, 938, 939, 942, 971, 992, 995, 997, 998, 999, 1000, 1002, 1003, 1004, 1006, 1010, 1013, 1017, 1019, 1023, 1024, 1025, 1030, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "error_": [539, 551], "error_i": [143, 276], "error_norm": [112, 114, 476, 477, 478, 479, 480, 481, 482, 483], "error_on_new": 637, "error_r": 141, "error_scor": [808, 811, 812, 814, 822, 831, 834, 835, 836, 839, 998, 1044, 1048, 1052, 1055], "error_x": [143, 276], "errorbar": [72, 96, 107, 112, 114, 171, 180, 181, 298, 338, 349, 814, 831], "errorbar_": [814, 831], "errorbar_kw": [814, 831], "errorbarcontain": [814, 831], "errors_coef": 221, "errors_lines_": 709, "erwan": 1057, "erwin": 1043, "escal": 398, "escalant": 1009, "escalera": 1009, "escap": [1053, 1055], "eschibli": 1052, "eschlbeck": 1054, "esdi": 57, "esp": [415, 1040], "especi": [43, 47, 52, 90, 91, 147, 150, 153, 190, 217, 251, 322, 330, 358, 366, 371, 377, 383, 391, 395, 397, 413, 415, 423, 450, 456, 509, 546, 565, 566, 567, 568, 572, 573, 574, 654, 655, 656, 658, 660, 661, 662, 666, 667, 668, 669, 670, 671, 677, 688, 703, 713, 754, 847, 848, 849, 850, 851, 920, 921, 922, 923, 1005, 1011, 1012, 1019, 1033, 1043, 1048, 1052, 1053, 1054], "espinoza": [1041, 1042], "essenc": [615, 616, 751, 1006, 1009], "essenti": [0, 275, 330, 381, 385, 415, 419, 420, 517, 1009, 1012, 1029, 1033, 1048], "est": [80, 158, 190, 209, 232, 251, 253, 269, 289, 318, 327, 366, 409, 422, 570, 743, 877, 961, 998, 1009, 1019, 1023, 1051, 1052], "est1": [397, 640], "est2": [397, 640], "est_freq": 235, "est_idx": 318, "est_sev": 235, "establish": [391, 395, 398, 999], "estefania": 1054, "ester": [415, 426, 451], "estev": [1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 80, 84, 89, 90, 91, 92, 93, 96, 98, 105, 106, 107, 108, 117, 118, 123, 124, 125, 130, 132, 136, 137, 141, 142, 143, 144, 146, 148, 150, 151, 152, 153, 155, 158, 159, 160, 161, 170, 171, 172, 173, 174, 175, 177, 179, 181, 183, 184, 185, 189, 190, 196, 199, 202, 204, 206, 207, 212, 217, 219, 221, 222, 224, 225, 234, 235, 243, 244, 245, 250, 256, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 272, 273, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 288, 289, 290, 292, 295, 296, 297, 303, 307, 316, 318, 328, 329, 331, 333, 349, 350, 353, 358, 359, 362, 364, 370, 371, 372, 375, 381, 383, 386, 387, 390, 391, 392, 393, 401, 406, 409, 410, 413, 414, 415, 418, 420, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 497, 498, 500, 503, 504, 506, 509, 510, 532, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 583, 584, 585, 587, 588, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 695, 696, 697, 698, 699, 700, 705, 706, 708, 709, 710, 715, 716, 719, 720, 721, 724, 726, 728, 729, 731, 732, 734, 735, 736, 737, 738, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 790, 791, 792, 793, 795, 796, 797, 798, 799, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 822, 824, 826, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 900, 901, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 937, 938, 939, 941, 943, 944, 945, 948, 950, 951, 952, 961, 964, 965, 966, 968, 992, 996, 997, 1004, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "estimate_bandwidth": [2, 79, 98, 415, 455, 468], "estimated_coef": [654, 655, 660, 668, 669, 670, 689, 690, 691], "estimator_": [220, 251, 289, 435, 561, 562, 563, 564, 565, 566, 571, 572, 573, 574, 601, 602, 605, 679, 807, 830, 909, 992, 1055], "estimator__alpha": 150, "estimator__max_depth": [397, 998], "estimator_alpha": 146, "estimator_check": [2, 325, 385, 397, 950, 951, 1047, 1048, 1050, 1051, 1054, 1055, 1056, 1058, 1059], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 225, "estimator_errors_": [137, 561, 562], "estimator_html_repr": [2, 385, 416, 1051, 1052, 1053, 1054, 1057], "estimator_modul": 385, "estimator_nam": [49, 225, 385, 390, 445, 584, 706, 708, 710, 937], "estimator_samples_": 1051, "estimator_weights_": [137, 561, 562], "estimatorcv": [397, 1029], "estimators_": [144, 146, 209, 232, 252, 325, 397, 422, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 840, 841, 842, 843, 844, 845, 846, 1041, 1047, 1054], "estimators_early_stop": 148, "estimators_features_": [563, 564, 571], "estimators_samples_": [563, 564, 565, 566, 571, 572, 573, 574, 1046, 1048, 1051, 1057], "est\u00e8v": [0, 404, 1048, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "est\u00e8vc": 1058, "esuli": [1047, 1052], "esvhd": 1049, "et": [0, 2, 50, 111, 112, 137, 152, 204, 309, 378, 380, 412, 415, 417, 420, 422, 423, 424, 458, 506, 527, 528, 536, 543, 549, 552, 571, 690, 691, 727, 728, 847, 849, 869, 870, 905, 955, 956, 1005, 1006, 1009, 1015, 1019, 1021, 1024, 1025, 1048, 1056], "eta": [420, 544, 684, 685, 686, 1013, 1023, 1045], "eta0": [676, 684, 685, 686, 1023], "eta_0": 1023, "etc": [2, 147, 217, 235, 270, 279, 280, 333, 366, 370, 372, 383, 385, 388, 395, 396, 397, 406, 409, 412, 416, 419, 423, 496, 511, 535, 565, 566, 572, 573, 676, 684, 700, 726, 779, 808, 822, 843, 846, 876, 887, 920, 921, 922, 923, 924, 926, 938, 939, 950, 998, 999, 1003, 1009, 1012, 1028, 1029, 1033, 1040, 1047, 1049, 1050], "eth": 1050, "ethan": [1043, 1046], "ethic": 153, "etiquett": 383, "etl": [1029, 1033], "euclidean": [2, 37, 75, 92, 93, 203, 248, 254, 296, 299, 304, 325, 330, 350, 358, 412, 415, 420, 421, 422, 423, 425, 447, 448, 451, 452, 453, 457, 459, 464, 467, 470, 539, 545, 553, 554, 597, 623, 627, 630, 631, 684, 686, 698, 700, 703, 704, 707, 770, 771, 777, 778, 779, 780, 786, 787, 788, 789, 800, 801, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 906, 999, 1003, 1007, 1010, 1012, 1021, 1029, 1044, 1047, 1048, 1049, 1050, 1056, 1057], "euclidean_dist": [2, 240, 248, 385, 411, 457, 461, 464, 696, 702, 770, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 1040, 1045, 1048, 1049, 1057, 1059], "euclideandist": 707, "eugen": [380, 1041, 1046], "eunji": 1048, "eunseop": 1050, "euro": 333, "europ": [423, 1019], "european": [734, 764, 1009], "eustach": [1033, 1042, 1043], "eval_and_print_metr": 339, "eval_gradi": [182, 425, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633], "evalml": 1028, "evalu": [2, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 84, 90, 99, 105, 106, 126, 137, 143, 144, 145, 147, 148, 150, 153, 167, 168, 177, 187, 193, 195, 198, 206, 219, 224, 235, 243, 267, 268, 272, 273, 274, 275, 278, 280, 281, 282, 284, 286, 287, 289, 290, 295, 303, 305, 309, 316, 321, 323, 327, 331, 332, 339, 346, 350, 357, 366, 376, 378, 385, 389, 397, 400, 416, 423, 424, 425, 454, 456, 471, 473, 495, 498, 500, 501, 504, 517, 528, 544, 559, 569, 570, 571, 575, 576, 599, 602, 610, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 639, 640, 641, 642, 655, 661, 667, 681, 683, 705, 707, 709, 710, 711, 712, 713, 719, 721, 722, 723, 725, 726, 734, 735, 744, 745, 750, 762, 763, 764, 765, 794, 803, 805, 806, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 838, 839, 843, 849, 852, 853, 858, 870, 872, 873, 879, 882, 885, 886, 890, 891, 892, 897, 898, 900, 901, 902, 903, 914, 917, 920, 941, 950, 982, 1001, 1005, 1007, 1011, 1012, 1015, 1016, 1017, 1020, 1023, 1025, 1028, 1030, 1033, 1034, 1035, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "evaluate_everi": 544, "evaluate_model_and_stor": 322, "evaluation_std": 358, "evaluations_std": 358, "evelyn": 1058, "even": [37, 43, 52, 53, 64, 75, 77, 87, 109, 118, 126, 143, 150, 180, 190, 191, 192, 206, 217, 218, 225, 235, 241, 242, 250, 251, 261, 281, 293, 316, 318, 320, 321, 340, 353, 357, 358, 359, 366, 372, 378, 382, 383, 384, 385, 388, 391, 395, 397, 409, 413, 415, 416, 417, 419, 420, 422, 423, 425, 448, 450, 452, 453, 454, 455, 456, 466, 468, 540, 543, 565, 566, 567, 568, 572, 573, 590, 597, 602, 635, 636, 638, 647, 666, 667, 703, 708, 713, 720, 751, 769, 775, 782, 786, 789, 794, 796, 835, 872, 873, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 920, 921, 922, 923, 956, 977, 998, 999, 1001, 1003, 1005, 1008, 1009, 1012, 1014, 1015, 1017, 1019, 1021, 1023, 1024, 1025, 1033, 1047, 1048, 1049, 1052, 1054, 1057], "evenli": [2, 47, 74, 87, 150, 193, 221, 270, 423, 960], "event": [0, 43, 217, 235, 278, 413, 415, 596, 597, 644, 847, 943, 1005, 1010, 1011, 1028, 1033, 1046], "eventu": [7, 263, 415, 424, 601, 1033], "ever": [143, 157, 392, 422, 1033], "everi": [43, 123, 153, 179, 185, 215, 218, 238, 250, 261, 266, 284, 328, 332, 366, 378, 383, 385, 387, 391, 397, 413, 415, 417, 419, 420, 423, 447, 461, 516, 539, 544, 547, 553, 565, 567, 568, 569, 570, 572, 598, 599, 611, 654, 655, 657, 660, 661, 667, 668, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 683, 684, 693, 694, 695, 700, 704, 762, 779, 787, 788, 821, 861, 920, 922, 924, 926, 944, 1002, 1004, 1009, 1010, 1011, 1019, 1025, 1033, 1040, 1044, 1046, 1049, 1053, 1057], "everingham": 1009, "everingham2010": 1009, "everybodi": [377, 383], "everyon": [383, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "everyth": [335, 366, 387, 389, 395, 409, 471, 963, 1028, 1029, 1040], "everywher": 397, "evgeni": 1051, "evid": [281, 357, 391, 415, 419, 420, 422, 652, 805, 1008], "evol": 1009, "evolut": [47, 49, 287, 370, 372], "evolv": [392, 1055], "ex": [104, 381, 384, 401, 1044, 1045], "exact": [44, 46, 115, 128, 143, 179, 221, 249, 269, 296, 332, 366, 370, 371, 377, 383, 385, 391, 392, 395, 396, 397, 415, 422, 424, 440, 489, 490, 491, 495, 504, 542, 543, 549, 569, 570, 646, 650, 654, 700, 808, 822, 833, 834, 835, 914, 917, 998, 1001, 1005, 1006, 1015, 1019, 1023, 1024, 1047, 1048, 1050], "exactli": [105, 137, 189, 197, 202, 210, 217, 221, 266, 269, 283, 317, 353, 357, 383, 385, 391, 412, 415, 419, 420, 423, 428, 453, 460, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 523, 534, 598, 599, 623, 684, 686, 711, 713, 771, 809, 826, 833, 1001, 1005, 1006, 1007, 1009, 1010, 1025, 1040, 1046, 1047, 1053], "exagger": [74, 190, 700, 1006], "examin": [168, 389, 391, 415, 861], "exampl": [2, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 370, 371, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 396, 397, 400, 401, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 424, 426, 427, 428, 430, 431, 433, 434, 436, 437, 440, 441, 442, 443, 446, 463, 464, 466, 468, 470, 478, 485, 487, 488, 492, 493, 494, 501, 505, 511, 513, 515, 516, 517, 524, 525, 526, 536, 537, 539, 553, 554, 555, 556, 563, 580, 581, 585, 591, 593, 594, 600, 603, 604, 606, 609, 611, 617, 620, 624, 628, 629, 632, 634, 637, 644, 645, 646, 650, 658, 659, 662, 668, 669, 671, 675, 683, 691, 693, 694, 695, 702, 703, 704, 707, 716, 718, 719, 722, 723, 724, 728, 729, 731, 732, 733, 734, 736, 738, 739, 741, 744, 747, 748, 751, 752, 755, 759, 762, 764, 766, 767, 768, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 791, 799, 802, 804, 815, 816, 817, 818, 819, 820, 821, 832, 844, 846, 848, 852, 853, 862, 863, 864, 866, 867, 874, 875, 878, 880, 883, 894, 895, 897, 899, 900, 902, 903, 904, 907, 911, 913, 914, 922, 923, 924, 925, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 946, 947, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 962, 963, 970, 971, 972, 973, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1031, 1033, 1035, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1053, 1055, 1056, 1057], "example_funct": 383, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1040, "example_gaussian_process_plot_gp_regress": 1040, "exampleclassifi": 251, "exampleclassifierexampleclassifi": 251, "exampleestim": 383, "exampleregressor": 251, "examples_pattern": 383, "exampletransform": 251, "exc": [293, 992], "exce": [117, 295, 326, 425, 449, 523, 610, 657, 666, 1049, 1052, 1054], "exceed": [811, 812, 1046], "excel": [156, 377, 383, 422, 698, 702, 1005, 1033], "except": [2, 50, 79, 88, 126, 135, 143, 153, 225, 232, 244, 251, 283, 296, 309, 312, 313, 316, 318, 330, 376, 383, 385, 386, 388, 395, 397, 406, 409, 412, 416, 419, 420, 422, 423, 425, 438, 467, 472, 475, 489, 490, 491, 517, 562, 564, 565, 566, 568, 570, 572, 573, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 619, 635, 638, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 695, 719, 786, 815, 845, 846, 852, 853, 855, 858, 863, 869, 870, 876, 890, 892, 910, 913, 915, 918, 921, 923, 937, 960, 992, 994, 998, 1005, 1009, 1024, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1057, 1058, 1059], "exception": 235, "excerpt": [45, 1021], "excess": [221, 453, 1019, 1047], "exchang": [409, 1032], "excit": 1047, "exclud": [47, 57, 189, 316, 383, 387, 397, 453, 471, 473, 737, 738, 746, 791, 792, 795, 821, 829, 887, 983, 1009, 1012, 1049, 1056, 1059], "exclus": [371, 395, 397, 420, 422, 635, 636, 638, 724, 810, 825, 828, 998, 1005, 1009, 1010, 1033, 1047, 1051], "exec": 395, "execut": [64, 185, 202, 206, 250, 280, 371, 381, 383, 389, 409, 411, 415, 420, 426, 450, 468, 808, 814, 822, 831, 833, 834, 835, 836, 839, 857, 974, 975, 1019, 1022, 1030, 1042, 1045, 1048], "exemplar": [415, 447, 461], "exemplari": [159, 160], "exemplifi": 397, "exercis": [2, 107, 146, 156, 176, 178, 227, 230, 288, 311, 312, 340, 351, 354, 355, 372, 380, 383, 509, 510, 512, 513, 660, 661, 666, 808, 813, 854, 917, 1030, 1043], "exhaust": [2, 172, 276, 325, 326, 327, 328, 329, 330, 331, 332, 333, 370, 380, 388, 396, 410, 415, 422, 808, 811, 812, 822, 902, 903, 905, 1005, 1035], "exhibit": [175, 222, 350, 357, 400, 419, 420, 422, 425, 1017], "exist": [47, 48, 52, 55, 57, 88, 235, 275, 313, 316, 350, 377, 382, 385, 386, 389, 395, 397, 398, 401, 409, 415, 419, 420, 422, 423, 430, 435, 440, 444, 450, 451, 454, 456, 458, 460, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 499, 507, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 593, 596, 597, 598, 599, 605, 611, 618, 619, 640, 641, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 706, 708, 710, 770, 773, 777, 807, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 885, 886, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 992, 1001, 1006, 1008, 1009, 1013, 1015, 1016, 1019, 1033, 1040, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "exist_ok": 47, "existing_credit": 269, "exit": [106, 296, 387, 391, 475], "exp": [2, 81, 89, 101, 132, 140, 150, 175, 202, 227, 301, 306, 309, 326, 327, 331, 350, 413, 415, 416, 421, 427, 459, 472, 529, 541, 544, 623, 624, 630, 649, 767, 774, 784, 869, 870, 888, 1003, 1005, 1007, 1011, 1012, 1013, 1022, 1023, 1024], "exp10": 190, "exp_dirichlet_component_": 544, "exp_dist_embed": 306, "expand": [43, 84, 100, 246, 322, 326, 366, 375, 385, 422, 451, 457, 507, 565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923, 1009, 1041, 1048, 1049, 1056], "expand_frame_repr": 235, "expans": [43, 185, 327, 457, 887, 1049], "expect": [43, 44, 49, 52, 61, 72, 79, 88, 118, 121, 128, 137, 140, 142, 144, 147, 150, 153, 169, 170, 174, 180, 187, 188, 192, 203, 208, 217, 218, 219, 221, 225, 235, 248, 251, 254, 255, 261, 262, 265, 266, 269, 282, 296, 321, 353, 357, 358, 366, 370, 371, 383, 385, 388, 389, 390, 391, 392, 395, 396, 397, 398, 400, 406, 411, 413, 415, 416, 417, 419, 422, 423, 424, 438, 471, 472, 474, 475, 476, 489, 490, 491, 504, 531, 540, 544, 546, 549, 560, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 574, 575, 576, 578, 580, 596, 597, 599, 603, 605, 614, 619, 635, 640, 641, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 682, 683, 686, 687, 703, 712, 713, 724, 743, 796, 802, 807, 808, 822, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 858, 862, 863, 864, 865, 870, 873, 878, 885, 886, 889, 892, 893, 902, 903, 910, 912, 913, 914, 915, 916, 917, 918, 921, 923, 933, 971, 998, 1005, 1008, 1009, 1011, 1015, 1019, 1023, 1024, 1025, 1030, 1032, 1035, 1040, 1041, 1042, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "expected_anomaly_fract": 254, "expected_i": 150, "expected_n_anomali": 254, "expected_ri": 713, "expectedli": 357, "expens": [0, 91, 143, 158, 174, 189, 191, 245, 272, 284, 346, 350, 357, 358, 359, 372, 389, 397, 415, 416, 419, 422, 423, 456, 475, 516, 808, 811, 812, 822, 835, 910, 912, 1006, 1008, 1019, 1024, 1033, 1044], "experi": [30, 137, 177, 181, 189, 190, 191, 192, 195, 219, 269, 293, 321, 353, 358, 359, 371, 377, 383, 386, 398, 419, 523, 736, 793, 1005, 1010, 1021, 1027, 1028, 1033], "experienc": 383, "experiment": [2, 150, 185, 186, 217, 286, 287, 327, 328, 333, 385, 386, 393, 395, 397, 406, 419, 504, 557, 587, 588, 635, 704, 811, 812, 978, 998, 999, 1005, 1008, 1009, 1028, 1029, 1035, 1048, 1049, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "expert_r": 416, "expertis": [382, 383, 395], "expit": [149, 207, 422, 569, 1005, 1047], "explain": [2, 43, 44, 51, 64, 91, 107, 117, 118, 131, 150, 174, 179, 180, 191, 192, 217, 235, 244, 251, 266, 285, 288, 322, 333, 357, 358, 371, 383, 395, 409, 411, 418, 420, 425, 501, 529, 532, 542, 549, 552, 557, 633, 656, 664, 677, 688, 729, 730, 731, 732, 736, 793, 1005, 1012, 1025, 1027, 1051, 1053, 1054], "explained_vari": [358, 1009], "explained_variance_": [118, 542, 549, 552, 1047], "explained_variance_ratio": 1046, "explained_variance_ratio_": [107, 131, 333, 358, 420, 542, 549, 552, 557, 1043, 1046], "explained_variance_scor": [2, 1009, 1043, 1047, 1054], "explan": [64, 118, 251, 370, 382, 383, 413, 423, 998, 1008, 1010, 1025, 1028, 1033, 1043], "explic": 1021, "explicit": [43, 153, 187, 191, 195, 243, 251, 289, 350, 370, 371, 372, 382, 384, 395, 397, 398, 406, 416, 423, 429, 479, 507, 509, 510, 549, 559, 560, 639, 646, 647, 649, 684, 808, 809, 816, 856, 864, 872, 912, 917, 972, 1001, 1003, 1005, 1009, 1019, 1025, 1028, 1030, 1040, 1044, 1049, 1050, 1053, 1057], "explicitli": [43, 81, 144, 174, 181, 185, 186, 218, 247, 251, 332, 350, 359, 366, 371, 377, 379, 383, 384, 385, 387, 395, 397, 406, 409, 411, 419, 423, 425, 543, 557, 558, 587, 588, 605, 635, 656, 666, 667, 677, 688, 717, 735, 790, 796, 797, 811, 812, 843, 846, 852, 853, 878, 902, 903, 997, 998, 999, 1001, 1003, 1005, 1006, 1009, 1011, 1012, 1019, 1033, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1058, 1059], "explod": 322, "exploit": [62, 295, 409, 1010, 1029, 1043], "exploit_incremental_learn": [814, 836], "explor": [52, 72, 140, 141, 153, 193, 241, 242, 254, 269, 276, 277, 283, 284, 293, 323, 327, 346, 358, 366, 377, 380, 382, 389, 415, 422, 479, 808, 811, 819, 893, 998, 1005, 1006, 1008, 1014, 1016, 1019, 1033, 1046], "exploratori": [190, 1033], "explos": [808, 822, 833, 834, 835], "expm1": 109, "expon": [425, 624, 684, 685, 686, 820, 869, 870, 887, 998], "exponenti": [2, 81, 109, 174, 179, 301, 306, 421, 422, 425, 456, 544, 562, 567, 622, 627, 630, 647, 651, 766, 767, 852, 853, 857, 869, 870, 887, 1001, 1005, 1009, 1024, 1047, 1053], "export": [2, 381, 384, 385, 401, 924, 925, 1025, 1028, 1049], "export_graphviz": [2, 1025, 1045, 1047, 1053, 1055, 1056, 1058], "export_text": [2, 1025, 1049, 1056], "expos": [2, 172, 251, 293, 328, 330, 371, 376, 380, 385, 397, 406, 413, 416, 422, 424, 425, 444, 471, 561, 562, 569, 570, 575, 576, 577, 578, 601, 602, 610, 619, 807, 808, 811, 812, 822, 830, 841, 842, 843, 844, 845, 846, 927, 1005, 1009, 1011, 1028, 1037, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "exposur": [217, 235, 1005], "express": [43, 46, 51, 52, 137, 143, 174, 179, 190, 275, 276, 322, 327, 343, 350, 359, 377, 378, 383, 384, 389, 395, 409, 415, 420, 421, 422, 423, 457, 463, 464, 596, 597, 599, 724, 796, 808, 814, 822, 831, 833, 834, 835, 836, 839, 859, 1001, 1005, 1009, 1013, 1019, 1020, 1025, 1048], "expsinesquar": [2, 174, 179, 183, 425], "exstrac": 1009, "ext": 654, "extend": [31, 52, 90, 91, 102, 135, 218, 264, 269, 282, 346, 380, 381, 395, 397, 413, 415, 420, 422, 639, 728, 829, 841, 844, 845, 877, 879, 896, 912, 913, 927, 1001, 1009, 1010, 1024, 1029, 1031, 1035, 1045, 1046, 1047, 1048, 1050, 1055], "extens": [282, 284, 301, 370, 371, 377, 378, 381, 384, 386, 387, 391, 392, 395, 409, 415, 420, 504, 511, 542, 749, 950, 958, 1006, 1008, 1009, 1027, 1028, 1033, 1040, 1046, 1053, 1054, 1056, 1057], "extent": [2, 48, 93, 176, 177, 178, 248, 354, 447, 543, 704, 805, 1009], "extercond": 147, "extern": [163, 174, 269, 372, 376, 380, 383, 385, 388, 395, 397, 412, 415, 423, 424, 425, 601, 618, 619, 725, 745, 803, 1005, 1008, 1009, 1012, 1025, 1029, 1035, 1048, 1052], "exterqu": [147, 158], "extmath": [2, 263, 357, 392, 460, 953, 954, 955, 956, 957, 958, 1040, 1041, 1046, 1047, 1050, 1054, 1055, 1057], "extr": 47, "extra": [2, 81, 146, 153, 253, 296, 332, 359, 381, 382, 384, 397, 409, 422, 423, 445, 450, 454, 466, 471, 540, 565, 566, 574, 598, 599, 708, 709, 710, 833, 856, 922, 923, 946, 1008, 1009, 1012, 1040, 1043, 1045, 1046, 1048, 1053, 1055], "extra_cflag": 389, "extra_tre": [922, 923], "extract": [2, 17, 42, 43, 45, 47, 50, 51, 55, 85, 90, 103, 104, 105, 106, 117, 123, 143, 168, 172, 187, 232, 267, 274, 275, 280, 283, 314, 339, 349, 357, 359, 366, 375, 378, 380, 389, 392, 395, 415, 416, 419, 420, 457, 459, 462, 463, 469, 471, 495, 496, 501, 502, 511, 512, 539, 542, 543, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 591, 592, 596, 597, 599, 601, 602, 605, 607, 639, 726, 796, 808, 822, 849, 871, 872, 917, 929, 956, 965, 972, 998, 1006, 1010, 1014, 1019, 1023, 1028, 1030, 1033, 1035, 1040, 1041, 1049, 1052], "extract_dbscan": 415, "extract_patches_2d": [2, 85, 126, 423, 595, 1048], "extract_scor": 278, "extractal": 47, "extractor": [217, 314, 372, 378, 397, 423, 511, 589, 590, 596, 597, 599, 998, 1040], "extran": 383, "extrapol": [43, 174, 197, 218, 247, 278, 891, 1009, 1019, 1025, 1053, 1055], "extratre": [146, 156, 370, 1043], "extratreeclassifi": [2, 565, 574, 923, 999, 1010, 1025, 1044, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1059], "extratreeregressor": [2, 566, 571, 574, 922, 999, 1010, 1015, 1025, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1059], "extratreesclassifi": [2, 146, 156, 422, 424, 566, 572, 574, 922, 923, 999, 1010, 1043, 1044, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059], "extratreesregressor": [2, 253, 422, 565, 573, 574, 922, 923, 999, 1010, 1043, 1046, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1059], "extrem": [2, 150, 217, 219, 253, 254, 316, 323, 338, 358, 383, 386, 414, 415, 420, 565, 566, 572, 573, 574, 640, 641, 687, 732, 760, 922, 923, 924, 926, 1009, 1011], "extrema": 1003, "exxon": 51, "ey": [113, 114, 262, 266, 346, 378, 542, 549, 558], "eyast": 1054, "ezebunandu": 1052, "ezeiza": 772, "ezri": 1053, "f": [0, 2, 43, 44, 46, 50, 51, 52, 54, 55, 57, 58, 63, 66, 68, 72, 78, 82, 83, 84, 87, 88, 90, 93, 99, 102, 105, 109, 118, 126, 137, 140, 143, 144, 145, 147, 148, 150, 153, 158, 159, 164, 166, 168, 171, 172, 174, 180, 181, 183, 187, 189, 190, 191, 192, 193, 195, 202, 203, 206, 208, 217, 218, 219, 221, 227, 231, 235, 238, 248, 250, 251, 254, 258, 265, 269, 273, 275, 276, 277, 278, 281, 282, 284, 285, 287, 289, 296, 299, 311, 312, 313, 318, 321, 322, 325, 327, 329, 331, 332, 333, 335, 336, 345, 350, 353, 357, 358, 359, 366, 378, 383, 384, 385, 389, 391, 395, 409, 413, 416, 420, 422, 423, 424, 425, 494, 516, 517, 539, 540, 545, 546, 574, 589, 590, 591, 595, 600, 603, 604, 606, 607, 608, 612, 613, 614, 615, 616, 617, 625, 635, 640, 643, 666, 704, 721, 731, 734, 737, 738, 764, 791, 792, 795, 796, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 836, 837, 839, 869, 870, 874, 883, 886, 887, 891, 892, 893, 919, 927, 938, 939, 992, 1001, 1004, 1013, 1016, 1017, 1019, 1023, 1030, 1042, 1048, 1049, 1050, 1052, 1054], "f0_c0": 893, "f0_c1": 893, "f0_c2": 893, "f0e442": 260, "f1": [2, 45, 62, 68, 104, 169, 273, 314, 335, 336, 339, 419, 721, 737, 738, 746, 791, 830, 1009, 1010, 1044, 1056], "f1_c0": 893, "f1_c1": 893, "f1_c2": 893, "f1_macro": [419, 1009, 1044], "f1_micro": [1009, 1044], "f1_sampl": 1009, "f1_score": [2, 62, 282, 339, 378, 414, 746, 1009, 1040, 1042, 1043, 1044, 1045, 1049, 1050, 1056, 1057], "f1_weight": [1009, 1044], "f2": [387, 1010], "f2001": 1009, "f2006": 1009, "f3": 1010, "f4": 506, "f401": [80, 102, 120, 129, 191, 214, 237, 239], "f781bf": [75, 79, 97, 98], "f7bd01": 75, "f_": [422, 643, 738, 1009], "f_0": 155, "f_1": [155, 1009], "f_beta": 1009, "f_classif": [2, 168, 169, 349, 424, 600, 603, 604, 606, 607, 608, 612, 614, 617], "f_i": 413, "f_idx": 155, "f_j": [413, 1017], "f_m": 422, "f_n": 282, "f_p": 282, "f_regress": [2, 89, 167, 424, 600, 603, 604, 606, 607, 608, 612, 613, 617, 1043, 1047, 1054, 1057], "f_score": 282, "f_statist": [613, 614], "f_test": 167, "fa": [2, 122, 132, 133, 187, 389, 420, 480, 483, 540, 549, 808, 834, 1030], "fa_estim": 123, "fa_scor": 130, "fab": [1033, 1050, 1051], "fabia": [412, 727], "fabian": [0, 405, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1057], "fabiana": 1051, "fabio": 1046, "fabisch": [0, 405, 1042, 1043, 1044, 1046], "fabrizio": 1055, "face": [2, 42, 44, 54, 71, 86, 88, 122, 126, 130, 132, 145, 187, 195, 243, 248, 250, 376, 383, 387, 415, 420, 422, 424, 456, 479, 501, 502, 503, 529, 540, 541, 545, 547, 548, 549, 551, 566, 592, 665, 681, 705, 721, 822, 838, 855, 892, 917, 941, 1012, 1025, 1026, 1030, 1035, 1040, 1048], "face_id": 253, "facecolor": [51, 63, 70, 80, 95, 123, 129, 139, 165, 182, 237, 252, 275, 303, 318, 344, 347, 350, 351, 352], "faces_cent": 123, "facial": 378, "facil": [1008, 1028], "facilit": [370, 397, 409, 1028, 1029, 1046, 1049], "fact": [43, 50, 57, 62, 114, 118, 137, 148, 150, 192, 248, 258, 293, 295, 357, 377, 390, 395, 397, 411, 418, 420, 421, 422, 423, 657, 676, 678, 712, 1003, 1005, 1012, 1019, 1023, 1024, 1029, 1033, 1054], "facto": 1050, "factor": [2, 11, 42, 45, 48, 63, 67, 79, 81, 88, 90, 97, 122, 128, 132, 156, 187, 190, 231, 242, 244, 254, 269, 286, 287, 296, 297, 311, 312, 316, 318, 327, 329, 345, 370, 371, 379, 383, 389, 392, 397, 412, 415, 422, 423, 425, 447, 449, 461, 476, 478, 479, 480, 481, 483, 485, 495, 512, 522, 523, 535, 540, 543, 544, 546, 548, 549, 552, 553, 554, 555, 557, 558, 569, 570, 571, 596, 599, 605, 621, 657, 658, 659, 662, 663, 664, 690, 691, 700, 727, 791, 808, 811, 812, 834, 858, 892, 906, 908, 916, 955, 956, 998, 1005, 1006, 1012, 1019, 1022, 1026, 1030, 1034, 1035, 1040, 1041, 1043, 1044, 1046, 1054, 1056], "factoranalysi": [2, 123, 130, 133, 420, 552, 1041, 1043, 1052, 1054], "factori": [2, 96, 269, 275, 423, 931, 933, 978, 1009], "facundo": [1051, 1054], "fagan": 1049, "fail": [43, 89, 101, 124, 130, 182, 197, 202, 221, 251, 275, 325, 371, 381, 383, 386, 391, 398, 401, 418, 419, 447, 479, 481, 684, 685, 686, 719, 869, 870, 928, 930, 937, 950, 998, 1006, 1040, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059], "failur": [187, 188, 190, 212, 383, 391, 401, 665, 793, 838, 938, 939, 1030, 1032, 1033, 1053, 1054, 1058], "fair": [51, 64, 422, 698, 702, 841, 1010, 1033], "fairer": 366, "fairli": [115, 149, 239, 291, 312, 391, 415, 567, 568, 707, 1010], "faith": [57, 351], "fake": 423, "falak": 1049, "fall": [25, 30, 43, 52, 150, 153, 181, 274, 275, 383, 415, 423, 440, 453, 454, 516, 517, 735, 736, 802, 889, 901, 961, 1008, 1009, 1019, 1049], "fallback": [398, 401, 840, 841, 1009], "fals": [2, 43, 44, 46, 47, 49, 50, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 81, 82, 89, 90, 99, 102, 104, 105, 106, 112, 114, 121, 127, 131, 132, 137, 143, 144, 147, 150, 151, 153, 161, 163, 174, 179, 180, 181, 182, 190, 191, 192, 193, 197, 198, 202, 203, 217, 218, 222, 223, 225, 233, 235, 237, 240, 251, 252, 254, 258, 260, 269, 272, 273, 275, 278, 279, 282, 283, 284, 285, 286, 287, 288, 290, 296, 300, 306, 309, 312, 313, 316, 317, 322, 323, 325, 327, 328, 329, 330, 332, 333, 337, 346, 348, 350, 353, 354, 357, 358, 377, 383, 384, 385, 388, 397, 406, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 427, 428, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 521, 523, 531, 532, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 643, 645, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 716, 717, 719, 720, 721, 722, 723, 726, 727, 734, 735, 736, 737, 738, 739, 746, 750, 751, 762, 764, 769, 771, 775, 777, 782, 786, 790, 791, 792, 793, 795, 797, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 822, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 936, 937, 938, 939, 945, 950, 957, 969, 970, 973, 974, 978, 979, 980, 982, 989, 994, 995, 997, 998, 999, 1005, 1009, 1012, 1019, 1023, 1024, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "false_": 644, "false_discovery_r": 603, "famili": [2, 45, 269, 370, 372, 397, 415, 418, 420, 423, 424, 600, 603, 604, 606, 607, 608, 614, 869, 870, 888, 900, 1005, 1019, 1023, 1044, 1054], "familiar": [383, 421, 1048], "famou": [378, 380, 422, 1024], "famous": 1011, "fan": [0, 371, 398, 404, 1024, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "fanci": 423, "fancybox": 352, "fanelli": [1055, 1056], "fang": [666, 1047, 1048], "fanni": 1050, "fantasi": 1014, "fantast": 1033, "faouzi": [1050, 1051], "faq": [0, 391, 419, 700, 1006, 1019], "far": [62, 95, 115, 147, 175, 181, 190, 217, 235, 269, 346, 350, 357, 359, 383, 392, 425, 728, 892, 983, 1014, 1015, 1024, 1033], "farach": 1001, "farahsae": 1048, "farawai": 1012, "fare": [105, 192, 258, 329, 330, 1044, 1045], "fargo": 51, "farhan": 1056, "farid": 1059, "farlei": [0, 405, 1040], "farouk": [1048, 1049], "farther": 733, "farthest": 415, "fashion": [2, 46, 142, 148, 225, 284, 371, 397, 412, 413, 415, 420, 422, 561, 565, 566, 567, 568, 572, 573, 574, 610, 635, 838, 861, 876, 879, 885, 896, 920, 921, 922, 923, 979, 999, 1005, 1009, 1019, 1025, 1049], "fast": [2, 52, 64, 97, 195, 202, 206, 232, 233, 249, 250, 317, 359, 370, 378, 383, 392, 409, 415, 417, 419, 420, 422, 423, 427, 453, 454, 476, 481, 516, 540, 541, 543, 546, 548, 552, 555, 572, 573, 574, 596, 597, 599, 640, 641, 648, 666, 667, 680, 682, 695, 707, 808, 822, 833, 834, 844, 845, 852, 853, 857, 868, 956, 977, 1001, 1005, 1008, 1011, 1012, 1014, 1015, 1025, 1028, 1033, 1040, 1041, 1046, 1047, 1050, 1051], "fast_dict": 1050, "fast_dot": 1047, "fast_logdet": [2, 392], "fast_svd": 1040, "faster": [37, 46, 57, 74, 99, 107, 123, 142, 143, 147, 148, 150, 153, 172, 191, 195, 203, 217, 219, 232, 233, 235, 250, 254, 269, 296, 298, 313, 326, 328, 329, 333, 357, 358, 359, 370, 377, 383, 391, 392, 397, 409, 415, 420, 424, 425, 427, 450, 454, 456, 458, 459, 460, 469, 516, 539, 540, 541, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 561, 567, 568, 569, 570, 571, 651, 654, 655, 660, 661, 666, 667, 668, 669, 670, 671, 680, 682, 692, 695, 699, 703, 734, 764, 786, 787, 788, 852, 853, 857, 869, 870, 887, 889, 891, 901, 905, 956, 977, 998, 1002, 1005, 1010, 1012, 1013, 1016, 1021, 1023, 1024, 1025, 1028, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "fastest": [92, 273, 359, 454, 678, 680, 682, 695, 955, 956, 1008], "fastest_top_recall_high_precision_index": 273, "fastica": [2, 122, 187, 216, 420, 540, 543, 549, 1030, 1040, 1042, 1048, 1054, 1055, 1058], "fastkmean": 456, "fastmcd": [417, 476, 481], "fastnc": 868, "fat": [529, 532], "fatima": [1054, 1057], "fato": 1053, "fauchereau": 1053, "fault": [391, 1048, 1050, 1052], "faulti": [220, 1040], "faust": 1058, "favor": [44, 115, 143, 260, 266, 395, 417, 422, 681, 683, 738, 816, 818, 871, 998, 1017, 1042, 1044, 1046, 1047, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "favorit": [383, 395, 1033], "favour": [800, 1006, 1008, 1049], "fawcett": [796, 797, 1009], "fazlul": 1042, "fbeta_scor": [2, 737, 750, 791, 1009, 1042, 1043, 1044, 1045, 1050, 1056], "fc": [48, 301, 378], "fc2009": 1009, "fcd116": 121, "fcharra": 1055, "fcluster": 193, "fcostin": 1040, "fd": 47, "fdr": 600, "feasibl": [383, 881, 882, 892], "feast": 416, "feat": [47, 49, 387, 423], "feat0": [246, 326], "feat1": [246, 326, 423], "feat2": [246, 326, 423], "feat3": [246, 326, 423], "feat_idx": 635, "featur": [2, 8, 16, 17, 18, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 80, 85, 93, 95, 98, 103, 104, 105, 106, 107, 113, 114, 117, 118, 120, 121, 123, 125, 127, 129, 130, 131, 133, 136, 138, 141, 143, 146, 150, 152, 157, 158, 159, 161, 163, 167, 169, 174, 175, 176, 179, 180, 182, 185, 186, 188, 189, 190, 191, 196, 198, 200, 201, 202, 203, 206, 207, 213, 216, 217, 218, 219, 221, 222, 225, 226, 232, 233, 234, 238, 243, 246, 248, 252, 253, 254, 257, 258, 267, 269, 270, 272, 273, 274, 275, 278, 280, 281, 282, 283, 284, 285, 288, 289, 290, 295, 299, 300, 301, 304, 305, 307, 310, 311, 313, 315, 316, 319, 323, 324, 326, 329, 330, 331, 332, 333, 335, 336, 338, 339, 341, 342, 343, 346, 350, 353, 356, 359, 362, 364, 365, 366, 375, 376, 377, 378, 379, 380, 381, 385, 386, 388, 390, 391, 392, 395, 396, 397, 398, 400, 401, 403, 409, 413, 415, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 431, 436, 438, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 587, 588, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 626, 627, 628, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 693, 694, 695, 696, 697, 698, 699, 700, 705, 709, 710, 711, 721, 729, 730, 731, 732, 749, 750, 753, 754, 756, 766, 767, 771, 772, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 789, 793, 796, 798, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 938, 939, 953, 973, 983, 984, 985, 989, 997, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "feature_0": 925, "feature_1": [639, 925], "feature_2": 639, "feature_all_": 849, "feature_count_": [847, 849, 851], "feature_extract": [2, 47, 54, 57, 81, 82, 85, 86, 89, 101, 104, 126, 187, 276, 339, 356, 357, 358, 359, 372, 378, 415, 416, 423, 471, 552, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 885, 1007, 1040, 1041, 1042, 1043, 1046, 1047], "feature_import": 151, "feature_importances_": [144, 145, 151, 172, 192, 193, 397, 422, 424, 561, 562, 565, 566, 567, 568, 572, 573, 574, 601, 602, 605, 920, 921, 922, 923, 1042, 1045, 1049], "feature_index": 423, "feature_indices_": 1048, "feature_log_prob_": [847, 848, 849, 851], "feature_map": [249, 316], "feature_map__n_compon": 249, "feature_map_fouri": 249, "feature_map_nystroem": [249, 647], "feature_nam": [54, 57, 120, 133, 144, 151, 155, 172, 190, 192, 226, 255, 289, 299, 316, 325, 326, 327, 332, 343, 357, 362, 376, 378, 388, 416, 471, 497, 498, 500, 504, 508, 509, 510, 512, 513, 518, 590, 639, 640, 641, 893, 924, 925, 926, 1017, 1025, 1056], "feature_name_combin": [885, 1056], "feature_names_": 589, "feature_names_in": 1054, "feature_names_in_": [258, 323, 328, 397, 436, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 635, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 997, 1053, 1054, 1055, 1056, 1058], "feature_names_out": [431, 436, 449, 450, 452, 454, 456, 471, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 574, 575, 576, 577, 578, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 696, 697, 700, 856, 861, 864, 868, 871, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 1054, 1057], "feature_rang": [314, 882, 898, 1019, 1042, 1052], "feature_select": [2, 89, 105, 106, 108, 166, 167, 168, 169, 170, 171, 172, 187, 258, 327, 329, 349, 366, 397, 406, 416, 424, 589, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 998, 1030, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1059], "feature_selector": 172, "feature_to_plot": 211, "feature_union": 1056, "featureagglomer": [2, 86, 89, 447, 448, 1026, 1043, 1049, 1050, 1053, 1054, 1056, 1057, 1058], "featureforg": 1033, "featurehash": [2, 57, 104, 187, 356, 357, 358, 372, 378, 423, 495, 589, 596, 597, 598, 599, 885, 1030, 1041, 1046, 1047, 1048, 1054, 1055], "featureheash": 359, "features_": [637, 999], "features__pca__n_compon": 108, "features__univ_select__k": 108, "features_idx": 316, "features_info": 191, "features_nam": [189, 1047], "features_samples_ratio": 69, "featureselector": 609, "featuresshould": 403, "featuretool": 1028, "featureunion": [2, 7, 43, 108, 375, 397, 406, 471, 637, 874, 999, 1029, 1033, 1035, 1041, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058], "featurewis": [2, 888], "feb": [73, 447, 461], "februari": [0, 417, 480, 1009, 1041, 1045, 1057], "fed": [47, 158, 366, 378, 423, 998, 1014, 1019, 1051], "feda": [1048, 1049], "feder": 1028, "federico": [1042, 1043, 1048, 1049, 1054], "federicopisanu": 1050, "feed": [47, 118, 218, 251, 359, 378, 381, 388, 395, 415, 423, 750, 885, 1010], "feedback": [272, 382, 383, 384, 398, 1028, 1032, 1048], "feedforward": [869, 870], "feedstock": 387, "feel": [64, 186, 316, 382, 383, 391, 415, 453, 1025], "feel_temp": [43, 191], "feghali": 1057, "fei": [571, 1015], "feld": [1044, 1056], "feldbauer": [1048, 1049, 1050, 1051, 1054], "feldman": [1042, 1047, 1048, 1049, 1050], "felip": [1053, 1054, 1055, 1056], "felix": [1042, 1047, 1048, 1050, 1052, 1053, 1054], "femal": [105, 190, 330, 388, 885, 886, 1019], "fenc": 388, "feng": [1050, 1052, 1053, 1054], "fenil": 1053, "fenx": 1048, "ferdman": 1057, "ferenc": 1033, "fernand": [1048, 1054, 1055], "fernandez": 1049, "fernando": [1045, 1052], "fern\u00e1ndez": 1054, "ferrando": 1050, "ferrari": 1048, "ferreira": [1048, 1053, 1054], "ferri": [424, 1009], "ferria": 1047, "ferrin": 1054, "ferriss": 1047, "ferr\u00e9": 1054, "ferr\u00edn": 1051, "fetal": 254, "fetch": [2, 51, 55, 158, 190, 235, 269, 289, 376, 377, 378, 383, 387, 388, 391, 420, 499, 504, 563, 564, 565, 566, 571, 572, 573, 574, 596, 597, 599, 1048, 1056], "fetch_": 1047, "fetch_20newsgroup": [2, 54, 57, 104, 276, 339, 357, 358, 359, 378, 496, 1045, 1050, 1058], "fetch_20newsgroups_vector": [2, 46, 232, 248, 378, 1040, 1050, 1052, 1057, 1058], "fetch_california_h": [2, 143, 148, 185, 186, 316, 327, 378, 396, 416, 1049, 1051, 1058], "fetch_covtyp": [2, 195, 254, 327, 378, 1049, 1052, 1054, 1058], "fetch_fil": [2, 52, 1059], "fetch_kddcup99": [2, 254, 378, 1047, 1048, 1049, 1052, 1053, 1058], "fetch_lfw_pair": [2, 378, 1045, 1055, 1058], "fetch_lfw_peopl": [2, 45, 378, 1055, 1058], "fetch_mldata": 1048, "fetch_olivetti_fac": [2, 85, 123, 145, 253, 378, 1048, 1049, 1050, 1058], "fetch_openml": [2, 43, 44, 52, 105, 109, 147, 153, 158, 179, 190, 191, 192, 217, 225, 233, 235, 245, 254, 258, 269, 289, 293, 295, 296, 313, 322, 325, 329, 332, 377, 387, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "fetch_rcv1": [2, 378, 1045, 1049, 1058], "fetch_species_distribut": [2, 50, 309, 1049, 1058], "fetcher": [376, 1045, 1047, 1056], "feth": 1040, "feurer": [1043, 1048], "fevott": [420, 546, 548, 555], "few": [0, 46, 54, 57, 74, 81, 87, 127, 147, 153, 177, 180, 181, 206, 215, 217, 219, 235, 250, 251, 260, 277, 278, 282, 308, 313, 316, 320, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 353, 359, 370, 378, 379, 380, 383, 385, 396, 398, 406, 409, 412, 413, 415, 419, 420, 422, 424, 425, 444, 456, 569, 570, 663, 700, 703, 905, 956, 1005, 1006, 1008, 1009, 1012, 1013, 1022, 1024, 1025, 1033, 1046, 1056, 1058], "fewer": [43, 53, 63, 90, 137, 146, 148, 217, 370, 384, 415, 424, 425, 455, 468, 549, 561, 602, 704, 842, 960, 1005, 1010, 1012, 1045, 1046, 1047], "fewest": [274, 635], "ff": 391, "ff0000": [67, 304, 311], "ff3333": 121, "ff7216": 121, "ff7f00": [79, 97, 244], "ff9c34": [94, 99], "ffaaaa": 304, "ffc107": 320, "fft": 648, "fhaselbeck": 1052, "fhoang7": 1049, "fhr": 254, "fi": 883, "fibins": [1048, 1049], "fidel": 53, "fidor": 1056, "fiedler": 1046, "fiegel": [1052, 1053, 1055], "field": [172, 235, 380, 412, 415, 416, 423, 471, 506, 509, 625, 1005, 1007, 1016, 1024, 1032, 1041], "fifth": [250, 1002], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 80, 88, 90, 92, 95, 99, 101, 107, 111, 113, 118, 120, 123, 128, 129, 133, 137, 143, 144, 147, 148, 150, 151, 153, 155, 156, 158, 160, 177, 183, 185, 191, 193, 195, 198, 204, 208, 211, 212, 214, 215, 217, 218, 221, 225, 230, 232, 235, 237, 238, 239, 240, 241, 242, 245, 247, 254, 255, 265, 269, 270, 271, 272, 275, 276, 277, 278, 281, 284, 285, 286, 289, 295, 296, 298, 300, 301, 309, 312, 313, 316, 317, 318, 320, 321, 322, 325, 329, 330, 343, 350, 352, 353, 354, 355, 357, 358, 359, 361, 379, 390], "fig1": 102, "fig2": 102, "fig_num": 214, "figaspect": 320, "fight": [74, 221, 1033], "fighter": 104, "fignum": 351, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 101, 107, 109, 113, 115, 117, 118, 120, 121, 123, 126, 127, 128, 129, 132, 133, 137, 139, 140, 147, 148, 149, 150, 151, 153, 156, 158, 159, 167, 176, 178, 182, 183, 185, 186, 190, 191, 193, 195, 197, 198, 201, 202, 207, 211, 214, 215, 216, 217, 218, 219, 221, 223, 225, 228, 231, 233, 235, 237, 238, 239, 241, 242, 244, 245, 247, 249, 252, 253, 254, 255, 260, 262, 263, 266, 269, 270, 271, 272, 277, 278, 279, 282, 284, 285, 289, 290, 295, 296, 298, 299, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 329, 330, 335, 337, 344, 346, 350, 351, 352, 353, 354, 355, 357, 358, 359, 379, 926], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 82, 83, 85, 86, 87, 89, 91, 93, 94, 96, 97, 98, 99, 100, 102, 111, 115, 117, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 139, 140, 149, 150, 151, 152, 153, 156, 157, 161, 163, 165, 167, 168, 171, 175, 176, 177, 178, 181, 182, 186, 190, 191, 192, 193, 197, 202, 205, 207, 210, 211, 214, 216, 218, 219, 223, 228, 232, 233, 234, 239, 240, 241, 244, 248, 249, 250, 252, 253, 255, 260, 262, 263, 266, 268, 274, 279, 280, 290, 301, 305, 306, 309, 311, 314, 316, 318, 319, 323, 325, 327, 335, 336, 337, 344, 346, 351, 362, 363, 364, 383, 415, 421, 422, 423, 425, 445, 639, 640, 705, 706, 708, 709, 710, 814, 831, 926, 998, 1002, 1005, 1008, 1009, 1012, 1013, 1016, 1017, 1023, 1024, 1025, 1053], "figure_": [68, 191, 255, 325, 327, 390, 445, 639, 640, 705, 706, 708, 709, 710, 814, 831], "figure_titl": 147, "filali": 1048, "file": [2, 47, 51, 52, 68, 83, 357, 358, 370, 371, 372, 377, 378, 380, 381, 386, 387, 388, 389, 395, 409, 416, 420, 494, 499, 501, 502, 504, 511, 516, 517, 542, 587, 588, 596, 597, 599, 924, 1012, 1025, 1030, 1032, 1040, 1041, 1043, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1059], "file_1": 511, "file_2": 511, "file_42": 511, "file_43": 511, "file_44": 511, "file_id": 377, "file_path": 499, "filenam": [2, 47, 55, 339, 378, 383, 389, 409, 495, 499, 508, 511, 512, 515, 596, 597, 599, 1040, 1045, 1048, 1049], "filesystem": [391, 401, 1053], "filho": 413, "filip": [1057, 1058], "filipj8": [1047, 1048], "fill": [70, 146, 163, 192, 270, 301, 362, 397, 416, 420, 523, 535, 546, 548, 555, 595, 638, 924, 926, 999, 1012, 1025], "fill_between": [52, 150, 153, 163, 174, 179, 181, 183, 197, 198, 235, 275, 277, 278, 279, 285, 814, 831], "fill_between_": [814, 831], "fill_between_kw": [814, 831], "fill_betweenx": 95, "fill_diagon": [193, 240], "fill_legend": 235, "fill_valu": [186, 246, 256, 326, 429, 432, 438, 439, 635, 638, 1019, 1048, 1056, 1057], "fillna": [235, 254], "filo": [1040, 1043], "filter": [2, 18, 47, 54, 81, 82, 107, 223, 235, 273, 275, 298, 357, 371, 378, 389, 392, 415, 423, 455, 495, 496, 511, 596, 599, 603, 604, 605, 606, 607, 608, 782, 847, 948, 973, 1011, 1012, 1050], "filter_param": 782, "filtered_cv_result": 273, "filterwarn": [79, 97, 232, 312, 313, 383, 1019], "final": [2, 43, 52, 63, 64, 70, 75, 77, 90, 104, 105, 113, 115, 118, 128, 137, 138, 140, 142, 147, 148, 151, 158, 161, 169, 179, 186, 189, 191, 193, 195, 197, 202, 204, 206, 214, 217, 219, 234, 235, 238, 244, 258, 264, 269, 273, 281, 293, 296, 322, 323, 325, 326, 346, 350, 370, 372, 378, 381, 383, 384, 385, 387, 396, 397, 412, 413, 415, 416, 419, 422, 423, 424, 444, 449, 454, 455, 459, 466, 469, 471, 544, 563, 564, 575, 576, 578, 602, 635, 655, 661, 667, 687, 698, 702, 727, 808, 840, 841, 872, 873, 909, 912, 998, 999, 1001, 1005, 1006, 1009, 1012, 1015, 1016, 1019, 1022, 1033, 1045, 1048, 1049, 1050, 1051, 1053], "final_estim": [158, 325, 422, 575, 576], "final_estimator_": [575, 576], "final_estimatorridgecv": 158, "final_lay": 422, "final_layer_gbr": 422, "final_layer_rfr": 422, "final_step": 77, "financ": [269, 1010], "financi": [0, 51, 415, 422, 1005], "find": [2, 43, 44, 45, 51, 55, 64, 75, 81, 82, 83, 84, 87, 88, 90, 92, 100, 107, 113, 114, 123, 125, 127, 128, 133, 148, 158, 174, 178, 180, 182, 191, 202, 204, 206, 219, 225, 237, 239, 241, 242, 247, 254, 265, 269, 274, 275, 276, 286, 299, 304, 305, 306, 321, 325, 331, 333, 348, 349, 350, 353, 357, 358, 361, 371, 380, 381, 383, 384, 385, 388, 389, 392, 395, 396, 397, 398, 403, 412, 414, 415, 417, 418, 420, 422, 423, 424, 426, 448, 451, 452, 453, 457, 458, 459, 460, 469, 539, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 566, 573, 590, 597, 618, 619, 655, 658, 661, 662, 663, 664, 666, 667, 679, 696, 715, 737, 738, 746, 790, 791, 792, 795, 796, 802, 807, 808, 822, 830, 854, 855, 856, 858, 860, 862, 863, 864, 885, 886, 891, 904, 905, 906, 920, 921, 923, 935, 955, 956, 958, 998, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1015, 1019, 1023, 1024, 1025, 1027, 1029, 1032, 1033, 1040, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1058], "findal": 359, "fine": [43, 72, 146, 172, 221, 233, 266, 273, 350, 363, 364, 380, 387, 397, 423, 453, 956, 1012, 1015, 1024, 1029, 1050], "finer": [43, 52, 72, 298, 346, 371, 415, 419, 998, 1012, 1050], "finfo": [240, 478, 479, 485, 614, 658, 659, 662, 663, 664, 690, 691, 1055], "finish": [172, 263, 1006], "finit": [64, 260, 266, 370, 378, 397, 475, 546, 559, 590, 614, 617, 618, 619, 666, 736, 786, 793, 805, 833, 910, 936, 937, 938, 939, 1005, 1008, 1009, 1033, 1047, 1048, 1052, 1054, 1055], "finn": [1048, 1049], "firefox": 1019, "fireplac": 147, "fireplacequ": 147, "firm": [51, 415], "first": [0, 2, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 90, 91, 93, 96, 99, 100, 101, 102, 104, 105, 106, 109, 113, 117, 118, 120, 128, 131, 137, 138, 142, 144, 145, 146, 147, 148, 149, 151, 153, 155, 158, 159, 160, 161, 168, 169, 172, 174, 175, 176, 179, 180, 181, 182, 186, 189, 190, 191, 193, 195, 197, 199, 201, 206, 213, 214, 215, 218, 219, 225, 226, 231, 238, 241, 248, 249, 251, 252, 253, 255, 257, 258, 262, 266, 269, 270, 275, 277, 278, 282, 284, 286, 287, 293, 295, 296, 298, 301, 305, 306, 307, 311, 313, 316, 318, 321, 322, 323, 326, 327, 336, 339, 342, 343, 346, 348, 357, 358, 359, 361, 362, 365, 366, 371, 372, 377, 378, 380, 381, 382, 383, 385, 387, 388, 389, 391, 395, 397, 409, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 427, 450, 453, 454, 457, 466, 467, 471, 479, 490, 494, 495, 497, 498, 500, 502, 505, 508, 510, 512, 516, 517, 518, 536, 541, 542, 546, 549, 561, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 590, 592, 596, 597, 598, 599, 601, 602, 609, 618, 619, 625, 629, 632, 639, 640, 641, 642, 654, 660, 667, 674, 676, 682, 684, 696, 703, 706, 707, 708, 710, 720, 724, 744, 750, 771, 772, 790, 802, 805, 806, 811, 812, 813, 814, 815, 820, 822, 829, 831, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 857, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 877, 885, 889, 890, 891, 893, 894, 901, 902, 914, 917, 920, 921, 922, 923, 925, 927, 933, 934, 938, 939, 940, 958, 960, 975, 979, 982, 994, 997, 998, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1016, 1019, 1020, 1023, 1024, 1025, 1033, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "first_img_data": 515, "first_pca_compon": 321, "first_quart": 132, "first_week": 153, "firstli": [126, 370, 395, 665], "fisach": 1046, "fiscal": 0, "fischer": [1045, 1046], "fischler": 1005, "fischoff": 1052, "fish": 328, "fisher": [380, 422, 512, 644], "fisher1958": 422, "fisher_transform": 644, "fit": [2, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 123, 125, 126, 127, 128, 129, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 195, 196, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 240, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 293, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 353, 354, 355, 357, 358, 361, 362, 363, 364, 365, 370, 372, 375, 378, 380, 383, 386, 388, 389, 392, 395, 397, 409, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 509, 517, 518, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 583, 585, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 702, 705, 706, 708, 709, 710, 718, 719, 731, 740, 743, 758, 796, 805, 806, 807, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 931, 932, 948, 965, 968, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "fit_": 1053, "fit_algorithm": [123, 539, 545, 1055, 1056], "fit_and_evalu": 358, "fit_and_plot_model": 321, "fit_and_scor": 225, "fit_data": 59, "fit_dur": 296, "fit_ecoc": 1044, "fit_grid_point": 1051, "fit_intercept": [46, 197, 198, 203, 222, 231, 244, 283, 323, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 912, 913, 919, 1005, 1023, 1044, 1048, 1049, 1050, 1052, 1053, 1054], "fit_inverse_transform": [44, 128, 543, 1049], "fit_ovo": 1044, "fit_ovr": 1044, "fit_param": [251, 397, 439, 444, 449, 452, 472, 540, 542, 544, 545, 547, 550, 551, 557, 563, 564, 575, 576, 577, 578, 590, 591, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 638, 643, 646, 647, 648, 649, 650, 673, 679, 814, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 856, 861, 864, 868, 871, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 904, 905, 968, 1047, 1050, 1051, 1052, 1054, 1056, 1057, 1058, 1059], "fit_path": [658, 662, 663, 664, 690, 691], "fit_predict": [57, 91, 92, 95, 244, 254, 303, 385, 397, 415, 433, 437, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 476, 571, 685, 800, 801, 805, 806, 858, 864, 872, 916, 932, 1015, 1045, 1048, 1049, 1053, 1055, 1057], "fit_prior": [378, 847, 848, 849, 851], "fit_status_": [914, 915, 916, 917, 918], "fit_tim": [52, 93, 147, 206, 225, 277, 419, 835, 836], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 277, "fit_times_svm": 277, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 84, 87, 88, 93, 97, 120, 124, 127, 133, 156, 195, 208, 233, 235, 237, 238, 239, 240, 241, 242, 247, 248, 251, 252, 258, 296, 300, 312, 316, 317, 321, 322, 323, 325, 328, 330, 331, 332, 333, 346, 357, 358, 359, 366, 375, 378, 385, 388, 389, 397, 411, 416, 420, 423, 424, 431, 439, 449, 450, 452, 454, 456, 471, 473, 475, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 696, 697, 698, 699, 700, 704, 856, 861, 864, 868, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 910, 932, 945, 999, 1001, 1005, 1010, 1012, 1019, 1020, 1021, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1054, 1056, 1057, 1058], "fitfailedwarn": [2, 808, 811, 812, 814, 822, 831, 834, 835, 836, 839], "fitted_transform": [385, 471], "fittedcolumntransform": [158, 191], "fittedgridsearchcv": 256, "fittedpipelin": [158, 246, 256, 276, 289, 322, 326], "fittedrandomforestclassifi": 332, "fittedrandomizedsearchcv": 105, "fittedstackingregressor": 158, "fitter": 1025, "fitting_weight": 406, "fitzgerald": 1048, "fitzk": 1033, "five": [145, 153, 261, 269, 336, 339, 378, 539, 547, 553, 1006, 1012, 1024, 1033, 1040], "five_imag": 423, "fix": [2, 43, 47, 58, 62, 70, 81, 105, 132, 142, 143, 146, 151, 153, 174, 175, 179, 182, 190, 193, 202, 219, 235, 254, 266, 278, 311, 325, 326, 327, 328, 329, 330, 331, 332, 333, 358, 370, 371, 377, 379, 381, 382, 383, 387, 391, 395, 397, 398, 406, 415, 416, 419, 420, 422, 423, 425, 459, 469, 479, 512, 520, 539, 545, 548, 550, 556, 557, 567, 568, 572, 573, 596, 599, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 638, 661, 671, 676, 678, 692, 695, 699, 703, 715, 793, 805, 822, 829, 854, 855, 857, 860, 862, 863, 879, 882, 896, 920, 921, 931, 956, 975, 998, 1005, 1008, 1009, 1012, 1019, 1029, 1038, 1039, 1041, 1042, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [596, 599], "fixedthresholdclassifi": [2, 269, 414, 830, 1058, 1059], "fixm": [387, 397], "fixtur": [371, 383], "fkaren27": 1054, "flach": [413, 1009], "flach2008": 1009, "flach2015": 1009, "flag": [179, 251, 254, 332, 381, 383, 384, 386, 406, 411, 471, 618, 619, 635, 681, 683, 736, 793, 928, 929, 1024, 1046, 1050, 1051, 1053, 1054, 1055, 1056], "flair": 1011, "flak": 1055, "flake8": 587, "flanagan": [1049, 1050], "flander": 1058, "flat": [2, 78, 123, 191, 237, 238, 239, 273, 415, 422, 423, 447, 453, 455, 468, 517, 1016, 1040, 1041, 1056], "flat_grid": 249, "flatnonzero": [132, 204, 274, 283, 284, 789], "flatten": [54, 68, 240, 249, 273, 320, 343, 354, 389, 510, 577, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 861], "flatten_transform": [577, 1047], "flatter": [43, 62], "flavanoid": [48, 380], "flaviomorelli": 1050, "flavor": [383, 1012], "flavour": 422, "flaw": [397, 422], "flaxman": [1042, 1044], "fledg": [372, 423], "fleet": 43, "fleme": 1055, "flennerhag": 1048, "fletcher": [1005, 1040, 1044], "flexibl": [43, 62, 147, 185, 217, 317, 343, 359, 390, 395, 409, 419, 425, 682, 912, 913, 931, 998, 1003, 1005, 1009, 1013, 1019, 1028, 1029, 1033, 1049, 1053], "flier": 49, "flink": 104, "flip": [127, 590, 750, 956, 1011, 1044, 1053], "flip_i": 523, "flip_sign": 956, "float": [2, 46, 49, 51, 76, 80, 81, 82, 83, 88, 95, 96, 100, 101, 102, 105, 126, 129, 165, 182, 190, 203, 207, 240, 269, 274, 275, 279, 283, 353, 359, 370, 377, 378, 383, 392, 397, 411, 414, 415, 416, 423, 424, 426, 427, 428, 432, 434, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 532, 533, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 591, 592, 596, 599, 600, 601, 602, 603, 604, 605, 606, 610, 611, 618, 619, 621, 622, 623, 624, 625, 627, 628, 630, 631, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 767, 774, 777, 783, 784, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 814, 822, 825, 828, 830, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 872, 875, 878, 879, 885, 886, 888, 890, 892, 893, 894, 895, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 935, 936, 938, 939, 942, 953, 954, 971, 983, 989, 994, 999, 1009, 1010, 1012, 1013, 1019, 1024, 1025, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "float16": 1049, "float32": [55, 149, 240, 314, 330, 371, 378, 383, 384, 385, 397, 409, 411, 565, 566, 567, 568, 571, 572, 573, 574, 601, 602, 648, 649, 666, 707, 771, 877, 920, 921, 922, 923, 936, 984, 985, 986, 1025, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "float64": [45, 50, 52, 53, 83, 88, 105, 107, 149, 150, 151, 152, 163, 174, 190, 191, 250, 269, 283, 286, 329, 330, 331, 346, 371, 377, 383, 384, 385, 397, 423, 428, 465, 478, 479, 482, 485, 486, 487, 504, 505, 516, 517, 524, 525, 526, 528, 539, 545, 547, 550, 551, 553, 554, 556, 589, 590, 597, 599, 605, 649, 656, 658, 659, 662, 663, 664, 665, 666, 671, 677, 678, 681, 683, 688, 690, 691, 695, 702, 707, 714, 715, 716, 717, 718, 720, 724, 725, 727, 728, 729, 731, 733, 734, 737, 738, 739, 743, 744, 745, 746, 747, 748, 751, 756, 761, 763, 764, 791, 792, 794, 795, 796, 801, 802, 803, 822, 877, 885, 886, 893, 905, 914, 915, 917, 918, 921, 923, 933, 936, 938, 954, 979, 982, 984, 985, 986, 1024, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058], "float_info": 57, "floch": 1057, "floor": 53, "floor_x": 53, "flore": 1053, "florian": [1033, 1040, 1044, 1046, 1050, 1057], "florin": 1058, "flow": 385, "flowchart": [403, 419], "flower": [120, 131, 284, 514, 515, 1009, 1028], "floyd": [378, 696, 1006], "floydsoft": 1044, "fluctuat": [51, 95, 153, 217, 282, 1048], "flush": 225, "fly": [149, 388, 391, 516, 517, 590, 1040, 1042, 1049], "flyingdutchman23": 1053, "flyingimmidev": 1040, "flynn": [1053, 1055], "fmax": 235, "fmi": [415, 739], "fmin_l_bfgs_b": [618, 619], "fmt": [96, 228], "fn": [333, 415, 720, 726, 737, 738, 739, 790, 791, 792, 795, 1009, 1010], "fn_c": 284, "fna": [172, 380], "fnlwgt": [332, 504], "fnr": [272, 706, 735], "fo": 423, "focu": [43, 48, 123, 137, 174, 266, 306, 370, 388, 413, 422, 561, 562, 567, 569, 570, 686, 1006, 1012, 1019, 1028, 1029, 1032], "focus": [62, 111, 206, 293, 378, 383, 395, 1006, 1019, 1028], "fokow": 1057, "fold": [2, 43, 102, 108, 111, 143, 146, 149, 163, 171, 190, 206, 262, 269, 270, 271, 273, 275, 276, 278, 285, 289, 323, 338, 353, 366, 378, 383, 386, 387, 396, 397, 406, 414, 415, 424, 444, 479, 501, 544, 575, 576, 602, 610, 655, 659, 661, 663, 667, 669, 671, 673, 681, 683, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 843, 846, 893, 914, 917, 998, 1005, 1009, 1019, 1024, 1040, 1042, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1057], "folder": [2, 106, 378, 381, 383, 387, 391, 401, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 1012], "folkman": 1047, "folloni": 1051, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 80, 89, 90, 92, 98, 102, 105, 106, 121, 123, 132, 137, 140, 150, 151, 155, 167, 179, 180, 185, 189, 190, 191, 192, 193, 197, 199, 202, 204, 206, 215, 217, 218, 232, 235, 245, 251, 252, 254, 266, 269, 275, 284, 285, 289, 293, 316, 322, 323, 325, 326, 328, 329, 330, 333, 343, 353, 357, 358, 359, 361, 365, 366, 370, 371, 377, 378, 380, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 401, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 430, 432, 434, 436, 437, 438, 439, 444, 448, 450, 452, 453, 454, 455, 456, 460, 468, 470, 471, 472, 475, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 523, 542, 546, 548, 549, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 639, 641, 642, 654, 660, 666, 667, 678, 679, 688, 700, 702, 707, 713, 717, 721, 726, 796, 827, 849, 854, 855, 856, 858, 860, 862, 863, 864, 871, 875, 876, 877, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 901, 910, 912, 913, 917, 920, 921, 922, 923, 927, 934, 950, 951, 955, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1037, 1040, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "folwarczn\u00fd": 1057, "fonari": [1052, 1053], "fond": 1033, "fondat": 1033, "font": [150, 206, 231, 249, 924, 926], "font_manag": [114, 302, 345], "font_prop": 114, "font_siz": 320, "fontdict": [54, 74], "fontnam": [924, 1053], "fontproperti": [114, 302, 345], "fontsiz": [44, 47, 49, 54, 70, 85, 95, 126, 146, 167, 177, 178, 180, 183, 191, 198, 207, 216, 228, 238, 239, 263, 270, 279, 280, 281, 286, 287, 314, 320, 352, 926], "fontweight": [95, 212], "foo": [385, 589, 1013], "food": [0, 380], "foot": 1027, "footer": [54, 104, 276, 357, 358, 378, 495, 496], "footnot": [1016, 1028], "footprint": [327, 330, 370, 372, 415, 420, 549, 563, 564, 565, 566, 571, 572, 573, 574, 1042, 1045, 1046, 1051, 1052, 1055], "fopenmp": [381, 384], "foral": [415, 425, 621], "forbid": [415, 422], "forbidden": [191, 422], "forc": [137, 174, 221, 296, 320, 357, 377, 381, 410, 419, 422, 457, 464, 471, 474, 504, 614, 617, 654, 655, 660, 661, 665, 668, 669, 670, 671, 680, 681, 682, 689, 692, 695, 762, 786, 789, 830, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 914, 915, 916, 917, 918, 936, 938, 939, 1019, 1035, 1045, 1048, 1049, 1050, 1052, 1053, 1054, 1056], "force_all_finit": [786, 936, 938, 939, 1051, 1054, 1059], "force_alpha": [847, 848, 849, 851, 1055], "force_finit": [614, 617, 736, 793, 1009, 1054], "force_int_remainder_col": [471, 474], "force_writ": [938, 939, 1058], "ford": 51, "forecast": [42, 43, 150, 153, 173, 181, 187, 219, 275, 413, 414, 425, 499, 504, 570, 619, 623, 630, 631, 633, 709, 750, 753, 754, 756, 798, 829, 834, 835, 838, 1009, 1028, 1030], "foreground": [75, 101], "foreign_work": 269, "foreman": 1047, "forese": 395, "forest": [2, 14, 50, 64, 67, 136, 142, 146, 148, 149, 151, 152, 153, 154, 156, 158, 161, 185, 187, 188, 195, 244, 272, 274, 276, 309, 327, 357, 364, 366, 376, 396, 397, 413, 424, 470, 471, 497, 498, 503, 504, 506, 523, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 638, 642, 808, 813, 838, 845, 872, 886, 916, 920, 921, 922, 998, 999, 1010, 1017, 1025, 1029, 1030, 1031, 1035, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1057], "forest_import": 144, "forestclassifi": 1045, "forestcolumntransform": 158, "forestcov": 254, "forg": [325, 326, 327, 328, 329, 330, 331, 332, 333, 371, 384, 386, 387, 391, 401, 402], "forget": [191, 366, 371, 377, 387, 395, 420, 1006], "forget_factor": [420, 546], "forgiv": 742, "forina": 380, "fork": [381, 383, 391, 395], "forkserv": 395, "form": [2, 43, 48, 57, 68, 77, 95, 102, 123, 161, 181, 182, 187, 190, 250, 251, 266, 275, 335, 366, 377, 380, 383, 385, 387, 397, 398, 412, 415, 418, 419, 420, 421, 422, 423, 425, 427, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 466, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 707, 805, 806, 807, 808, 811, 812, 813, 816, 818, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 944, 965, 968, 998, 1000, 1002, 1003, 1005, 1006, 1009, 1010, 1013, 1014, 1015, 1019, 1024, 1028, 1046, 1050, 1052], "formal": [397, 398, 415, 422, 852, 853, 1006, 1009, 1010, 1013], "format": [2, 47, 50, 51, 52, 59, 83, 89, 93, 96, 104, 113, 123, 132, 140, 146, 149, 151, 163, 167, 168, 195, 198, 203, 217, 235, 258, 270, 280, 282, 283, 286, 290, 300, 301, 304, 305, 320, 325, 333, 352, 361, 365, 370, 376, 382, 383, 385, 386, 391, 392, 396, 397, 409, 416, 419, 422, 423, 439, 449, 450, 452, 454, 456, 457, 459, 466, 471, 475, 489, 490, 491, 492, 494, 496, 504, 505, 506, 516, 517, 518, 531, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 559, 565, 566, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 595, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 654, 660, 666, 667, 668, 670, 674, 675, 676, 684, 685, 686, 696, 697, 700, 705, 719, 721, 728, 747, 748, 759, 776, 799, 800, 841, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 899, 904, 905, 910, 912, 924, 938, 939, 962, 970, 974, 984, 985, 986, 987, 988, 989, 999, 1009, 1012, 1017, 1019, 1020, 1023, 1025, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1055, 1057, 1058, 1059], "format_func": 301, "formatter_result": 93, "former": [51, 359, 414, 422, 423, 573, 810, 817, 826, 1011, 1040, 1046, 1049], "formerli": [221, 1041, 1044, 1046, 1047], "formul": [137, 174, 183, 221, 284, 383, 415, 417, 420, 423, 425, 428, 482, 557, 558, 565, 572, 658, 659, 662, 663, 664, 666, 667, 673, 678, 771, 777, 806, 914, 917, 920, 922, 1005, 1009, 1010, 1013, 1019, 1031, 1035, 1057], "formula": [111, 112, 412, 415, 417, 428, 480, 482, 524, 525, 526, 598, 651, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 672, 684, 686, 712, 737, 738, 763, 772, 829, 998, 1003, 1005, 1009, 1014, 1015, 1019, 1023, 1045, 1047, 1049], "forrest": [1051, 1052], "forsal": [57, 359, 378], "forsyth": 1048, "forth": 391, "fortin": [1040, 1042, 1043, 1044], "fortran": [427, 549, 654, 655, 660, 661, 668, 669, 670, 671, 673, 689, 692, 693, 694, 938, 939, 1040, 1043, 1044, 1048], "fortun": [389, 422, 1053, 1054], "forward": [46, 137, 172, 251, 327, 370, 383, 406, 409, 424, 516, 517, 547, 551, 561, 567, 568, 610, 676, 693, 694, 872, 876, 1005, 1029, 1052], "foster": [0, 1048], "fouchet": 1046, "found": [0, 45, 52, 57, 58, 59, 133, 144, 171, 174, 178, 180, 182, 221, 245, 252, 269, 273, 276, 277, 278, 321, 325, 328, 330, 331, 346, 359, 370, 372, 377, 380, 382, 383, 385, 395, 397, 398, 409, 412, 414, 415, 418, 419, 420, 422, 423, 425, 440, 448, 451, 452, 466, 479, 565, 566, 567, 568, 572, 573, 596, 598, 618, 619, 636, 644, 655, 659, 661, 663, 669, 671, 673, 679, 680, 682, 684, 686, 695, 696, 720, 727, 808, 811, 812, 822, 830, 849, 854, 855, 861, 883, 885, 886, 920, 921, 922, 923, 927, 935, 992, 996, 998, 1001, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1019, 1023, 1024, 1025, 1029, 1040, 1043, 1044, 1047, 1048, 1050, 1054, 1057], "foundat": [0, 158, 269, 383, 413, 1012], "founder": 1033, "fouqu": 1040, "fouquet": [1056, 1057], "four": [64, 168, 182, 195, 200, 218, 262, 263, 269, 336, 343, 379, 383, 397, 565, 572, 727, 920, 922, 944, 1005, 1007, 1008, 1009, 1019, 1027], "fourier": [2, 23, 249, 646, 647, 648, 649, 650, 766, 767, 1001], "fourier_approx_svm": 249, "fourier_scor": 249, "fourier_tim": 249, "fournier": 1049, "fourth": 146, "fowkl": [415, 739], "fowlk": [739, 1046], "fowlkes_mallows_scor": [2, 415, 1009, 1046, 1048], "fox": [333, 423, 1056], "fp": [47, 269, 333, 415, 720, 726, 737, 738, 739, 790, 791, 792, 795, 1009], "fp_c": 284, "fpgawesom": 1054, "fpr": [2, 50, 245, 254, 269, 272, 284, 285, 390, 600, 604, 706, 710, 714, 735, 797, 1009, 1037, 1040, 1056], "fpr_a": 284, "fpr_b": 284, "fpr_grid": 284, "fpr_score": 269, "fr": [539, 545, 666, 672, 693, 694, 766, 767, 1007, 1009], "fraa\u00df": 1057, "frac": [63, 113, 114, 137, 275, 282, 284, 328, 412, 413, 415, 417, 420, 421, 422, 423, 425, 438, 470, 472, 489, 490, 491, 562, 564, 566, 568, 570, 573, 576, 578, 619, 623, 627, 630, 631, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 677, 678, 680, 681, 686, 687, 688, 704, 737, 738, 763, 777, 845, 846, 855, 863, 870, 913, 915, 918, 921, 923, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1021, 1023, 1024, 1025], "frac12": [422, 1001], "fractal": [172, 380], "fraction": [2, 43, 62, 64, 150, 153, 217, 225, 235, 269, 282, 353, 358, 413, 419, 422, 445, 446, 456, 457, 463, 464, 523, 535, 565, 566, 567, 568, 572, 573, 574, 598, 601, 610, 674, 675, 676, 679, 684, 685, 686, 711, 729, 730, 731, 732, 742, 802, 804, 810, 814, 836, 837, 851, 879, 914, 915, 916, 920, 921, 922, 923, 974, 1005, 1009, 1012, 1016, 1017, 1019, 1024, 1025, 1029, 1041, 1042, 1043, 1054, 1057], "fragil": 663, "fragment": [90, 126], "frame": [43, 105, 153, 179, 190, 191, 217, 269, 322, 332, 378, 383, 395, 398, 496, 497, 498, 500, 504, 508, 509, 510, 512, 513, 518, 1052], "frameon": [46, 223], "framework": [275, 370, 385, 395, 397, 409, 415, 645, 696, 805, 1005, 1006, 1013, 1029, 1033, 1040, 1046], "fran": [1052, 1053, 1054], "franc": [322, 772], "francesco": [1052, 1055], "franci": [544, 666, 1005, 1046], "francia": 1054, "francidona": 1050, "francisco": [423, 1021], "franck": [1055, 1057, 1058], "franco": 1050, "francoi": [1040, 1053], "francoisgoupil": 1054, "frank": [275, 843, 1010, 1045, 1049, 1050], "frankhui": 1048, "franki": 1053, "franz": 1048, "franziska": 1051, "fran\u00e7oi": [0, 367, 1043], "fraud": [269, 333, 1005, 1033], "fraudul": [269, 1005, 1033], "fraudulent_accept": 269, "fraudulent_refus": 269, "fred": [104, 1040, 1053], "freddi": 1059, "freder": 1050, "frederick": 1053, "fredrik": 1048, "free": [0, 44, 64, 90, 179, 180, 186, 216, 265, 316, 377, 382, 383, 384, 391, 395, 401, 423, 459, 617, 679, 868, 918, 998, 1001, 1005, 1009, 1029, 1048], "freebsd": 386, "freedom": [43, 125, 179, 204, 206, 208, 275, 549, 664, 805, 1005, 1043], "freeland": 1055, "freestand": 385, "freez": [387, 401, 409, 1029, 1033, 1048], "frei": [73, 447, 461, 1050], "freija": 1048, "freita": [1045, 1047, 1048], "frellwan": 1053, "fremtpl2": 235, "fremtpl2freq": 235, "fremtpl2sev": 235, "french": [235, 322], "freq": [190, 202, 359], "frequenc": [57, 64, 174, 191, 202, 211, 217, 248, 326, 327, 357, 358, 359, 378, 395, 413, 419, 420, 422, 423, 424, 559, 565, 567, 568, 569, 572, 596, 597, 598, 599, 612, 666, 667, 672, 674, 676, 682, 683, 684, 693, 694, 841, 876, 885, 886, 912, 914, 917, 920, 922, 944, 1005, 1006, 1011, 1019, 1023, 1025, 1042, 1044, 1045, 1051, 1058], "frequent": [72, 137, 186, 278, 284, 285, 289, 358, 380, 383, 423, 559, 598, 638, 862, 885, 886, 889, 901, 999, 1001, 1009, 1023, 1029, 1058], "frequentist": 536, "fresh": [546, 1029, 1050], "fresh_restart": 546, "fresh_restarts_max_it": 546, "freund": [422, 561, 562], "fri": [43, 153, 191, 378], "frid": [1033, 1043], "friedman": [2, 140, 141, 152, 274, 417, 419, 422, 485, 524, 525, 526, 528, 566, 567, 568, 573, 601, 602, 842, 920, 921, 923, 1003, 1005, 1010, 1016, 1025], "friedman2001": 422, "friedman2002": 422, "friedman_ms": [566, 567, 568, 573, 921, 923, 1025, 1056, 1057], "friend": [429, 1044], "friendli": [123, 371, 383, 391, 420, 905, 1021, 1022, 1028, 1029], "fring": [87, 415], "fritsch": [0, 405, 1040, 1041, 1043], "fritzk": 1055, "fro": [420, 546, 548, 555, 701, 1005], "fro_2": [669, 671], "frobeniu": [54, 126, 450, 454, 466, 476, 477, 478, 479, 480, 481, 482, 483, 539, 545, 546, 548, 553, 554, 555, 1005, 1047], "frobenius_norm": 696, "from": [0, 2, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 372, 375, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 398, 400, 401, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 967, 969, 970, 971, 972, 973, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "from_dtyp": [43, 147, 269, 332, 422, 569, 570, 1057], "from_estim": [45, 48, 62, 64, 66, 67, 70, 91, 139, 142, 153, 154, 155, 159, 191, 201, 209, 226, 231, 250, 255, 257, 268, 269, 272, 277, 278, 282, 285, 291, 299, 304, 307, 321, 325, 326, 327, 328, 330, 331, 332, 333, 342, 343, 344, 345, 347, 348, 350, 362, 390, 413, 445, 639, 640, 641, 705, 706, 708, 709, 710, 726, 735, 790, 792, 795, 796, 797, 814, 831, 1004, 1009, 1016, 1037, 1053, 1054, 1055, 1056, 1057, 1058], "from_predict": [43, 52, 68, 109, 158, 190, 254, 271, 282, 284, 328, 335, 357, 390, 445, 639, 705, 706, 708, 709, 710, 726, 735, 790, 792, 795, 796, 797, 1009, 1037, 1053, 1054, 1055, 1056, 1057, 1058], "frombuffer_empti": 1047, "fromkei": [276, 927], "fromnumer": 389, "front": 1047, "frontal": 378, "frontend": 389, "frontier": [48, 231, 302, 345, 1015], "frozen": 385, "frozentransform": 385, "frsi": 1048, "fruit": [383, 1010], "fr\u00e9minvil": [1057, 1058], "fs1995": 422, "ftfy": 423, "ftorres16": [1054, 1055], "ftp": [172, 380, 690, 691], "ftwo_scor": [750, 1009], "fu": [666, 1044], "fuck": [1052, 1053], "fuction": 992, "fuent": [1041, 1042], "fugled": 1057, "fujikawa": 1047, "fukatani": 1047, "fulfil": [383, 415, 422, 808, 811, 812, 822, 872, 876, 1005], "full": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 370, 371, 372, 376, 378, 381, 383, 385, 388, 391, 395, 397, 398, 401, 411, 415, 417, 419, 420, 423, 429, 432, 438, 439, 448, 452, 454, 456, 466, 495, 496, 499, 500, 504, 505, 508, 509, 510, 511, 512, 513, 515, 518, 543, 545, 549, 558, 567, 568, 575, 576, 640, 656, 658, 662, 677, 688, 729, 731, 736, 753, 754, 756, 758, 759, 761, 793, 798, 799, 805, 806, 819, 849, 944, 998, 1005, 1008, 1011, 1012, 1016, 1019, 1022, 1029, 1040, 1044, 1046, 1048, 1050, 1051, 1053, 1054, 1056, 1057, 1058, 1059], "full_data": 197, "full_lik": 100, "full_model": 298, "full_scor": 186, "fulli": [52, 79, 90, 144, 150, 370, 377, 378, 383, 397, 415, 421, 422, 424, 450, 454, 565, 566, 572, 573, 920, 921, 922, 923, 924, 926, 999, 1005, 1014, 1022, 1028, 1053, 1054], "fullpap": 1022, "fultz": 1053, "fun": [427, 541, 1033], "fun_arg": [427, 541], "func": [50, 109, 142, 190, 198, 235, 309, 383, 416, 472, 707, 876, 1019, 1044, 1046, 1048, 1049, 1057, 1058], "func_metr": 636, "func_min": [618, 619], "funcformatt": 301, "function": [2, 4, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 81, 88, 89, 90, 92, 94, 101, 104, 105, 106, 109, 123, 126, 128, 132, 135, 142, 143, 147, 148, 149, 150, 151, 152, 153, 163, 168, 171, 172, 174, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 191, 193, 196, 197, 200, 202, 210, 212, 213, 214, 215, 217, 218, 223, 224, 225, 230, 233, 234, 235, 237, 245, 247, 250, 251, 254, 255, 257, 258, 265, 267, 269, 273, 275, 276, 277, 278, 283, 284, 290, 293, 296, 311, 314, 316, 323, 325, 326, 328, 329, 331, 333, 338, 340, 343, 344, 345, 346, 347, 348, 350, 353, 355, 357, 358, 362, 366, 370, 371, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 395, 396, 397, 401, 406, 409, 411, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 426, 427, 430, 432, 434, 437, 438, 439, 444, 447, 450, 451, 452, 454, 455, 457, 459, 461, 464, 465, 466, 467, 468, 471, 472, 475, 476, 478, 479, 481, 485, 495, 496, 498, 500, 503, 504, 505, 511, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 580, 583, 589, 590, 596, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 615, 616, 617, 618, 619, 623, 627, 628, 630, 631, 635, 636, 639, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 706, 707, 708, 710, 711, 712, 714, 719, 720, 724, 727, 729, 730, 731, 732, 736, 740, 742, 743, 746, 748, 749, 750, 758, 763, 765, 769, 770, 771, 773, 776, 779, 782, 786, 787, 788, 789, 790, 791, 793, 797, 800, 801, 802, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 884, 888, 889, 890, 891, 892, 893, 896, 898, 901, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 927, 936, 946, 948, 949, 950, 955, 956, 967, 968, 974, 975, 978, 979, 982, 983, 992, 997, 998, 999, 1000, 1002, 1004, 1006, 1007, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "functiontransform": [2, 43, 104, 142, 217, 235, 339, 409, 471, 472, 1019, 1045, 1046, 1048, 1053, 1054, 1055, 1057, 1059], "functiontransformerfunctiontransform": 142, "functool": 235, "fundament": [72, 84, 114, 358, 387, 395, 396, 418, 504, 546, 548, 555, 716, 1005, 1009], "funder": 0, "fung": 419, "funnel": [45, 501, 502], "funni": 104, "furlanello": 751, "furrer": 1057, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 105, 111, 118, 123, 140, 146, 148, 171, 174, 179, 190, 192, 197, 202, 237, 242, 251, 269, 272, 275, 276, 282, 330, 346, 358, 365, 370, 383, 395, 397, 409, 414, 415, 417, 420, 422, 423, 425, 451, 459, 469, 523, 540, 543, 590, 622, 630, 636, 666, 667, 674, 675, 676, 684, 685, 686, 699, 703, 745, 782, 786, 789, 800, 801, 848, 854, 855, 862, 863, 890, 892, 912, 914, 917, 956, 1008, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1023, 1024, 1049, 1053], "furthermor": [43, 52, 72, 143, 191, 192, 254, 255, 257, 296, 357, 358, 370, 372, 390, 415, 420, 422, 423, 570, 598, 614, 627, 712, 744, 754, 763, 765, 803, 912, 1005, 1017, 1043, 1047], "fuse": [384, 1046, 1056], "fusion": 395, "futur": [0, 52, 179, 218, 257, 328, 331, 383, 387, 397, 398, 409, 419, 423, 504, 542, 643, 931, 978, 1010, 1024, 1025, 1033, 1037, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "futurewarn": [383, 391, 1047, 1048, 1049, 1051, 1053, 1056, 1057], "fuxin": 650, "fw": 696, "fwe": 600, "f\u00e9lix": [1040, 1042, 1043, 1044, 1048], "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 88, 90, 100, 104, 115, 118, 130, 137, 140, 149, 150, 175, 176, 177, 182, 186, 189, 190, 200, 205, 217, 218, 219, 221, 235, 242, 250, 251, 260, 269, 275, 279, 280, 286, 295, 302, 321, 333, 338, 352, 353, 359, 366, 370, 375, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 395, 397, 406, 409, 411, 413, 415, 417, 419, 420, 422, 423, 424, 425, 427, 444, 450, 451, 454, 456, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 511, 536, 539, 541, 542, 545, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 601, 602, 605, 612, 618, 619, 625, 630, 631, 638, 641, 642, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 694, 698, 700, 705, 724, 728, 736, 746, 748, 771, 786, 793, 796, 807, 809, 810, 811, 812, 814, 815, 817, 826, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 859, 861, 862, 863, 864, 868, 869, 870, 872, 875, 877, 878, 879, 882, 884, 885, 888, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 955, 956, 968, 998, 999, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1023, 1024, 1025, 1029, 1032, 1033, 1040, 1044, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "g0g0gadget": 1050, "g2015": 1016, "g_": 415, "g_i": [422, 657], "g_j": [656, 677, 688], "ga": 0, "gaaca": 182, "gaatattaggccga": 395, "gabor": 1054, "gabriel": [1048, 1049, 1050, 1053, 1054], "gael": [0, 404, 1027, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "gaido": 1049, "gaidon": 1040, "gain": [2, 88, 153, 239, 282, 296, 298, 332, 333, 336, 357, 358, 365, 382, 389, 391, 422, 504, 540, 565, 569, 570, 572, 734, 764, 805, 806, 841, 920, 922, 1010, 1014, 1022, 1025, 1043, 1047, 1050], "gain_matrix": 269, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 378, 383, 385, 397, 401, 408, 1030, 1040, 1044, 1047], "galli": 1052, "gallopoulo": 420, "galvez": 1045, "gambl": 51, "gameiro": 1054, "gamma": [2, 43, 44, 45, 46, 48, 50, 67, 68, 128, 159, 165, 195, 231, 244, 249, 250, 273, 275, 277, 280, 286, 291, 327, 335, 336, 338, 340, 343, 345, 346, 349, 350, 352, 355, 418, 420, 422, 425, 459, 543, 570, 627, 628, 647, 648, 649, 651, 652, 653, 656, 688, 693, 699, 732, 755, 760, 767, 774, 783, 784, 785, 805, 819, 822, 907, 908, 909, 914, 915, 916, 917, 918, 998, 1001, 1004, 1005, 1007, 1022, 1024, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1050, 1051, 1054, 1055, 1056], "gamma_": [543, 1056], "gamma_0": [260, 266], "gamma_2d_rang": 346, "gamma_bound": 628, "gamma_k": 418, "gamma_rang": 346, "gammaregressor": [2, 235, 326, 329, 688, 1005, 1051, 1054, 1055], "gandenberg": 1049, "ganesh": [1045, 1057], "ganevgv": 1050, "gangesh": 1052, "gangwar": 1047, "ganiev": [1045, 1046, 1047], "ganssl": 1047, "gap": [43, 52, 153, 357, 378, 419, 478, 479, 485, 596, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 829, 920, 921, 922, 923, 1005, 1006, 1048, 1052, 1054], "garagecar": [147, 158], "garagefinish": 147, "garagetyp": 158, "garageyrblt": 109, "garbag": 1052, "garcia": 1053, "garc\u00eda": [1049, 1050, 1055], "gardin": 377, "gardner": [1048, 1049], "garg": [1050, 1051], "gargsya": 1050, "gari": [378, 1047], "garret": 1044, "garreta": [1042, 1043], "garrett": 1044, "garri": 380, "garriga": [281, 419, 837], "gasmi": 1054, "gasquez": 1047, "gate": [380, 1053], "gather": [329, 331, 391, 398, 415, 1019, 1033], "gatsbi": 1022, "gaug": 190, "gaull": 772, "gaurav": [1048, 1049, 1050, 1051, 1052, 1054], "gauravahlawat": [1048, 1049], "gaussian": [2, 8, 19, 28, 43, 44, 46, 47, 48, 64, 66, 67, 70, 79, 81, 82, 90, 91, 92, 96, 100, 111, 112, 113, 114, 115, 121, 124, 125, 126, 132, 135, 138, 139, 146, 150, 154, 156, 165, 186, 197, 200, 202, 204, 207, 227, 228, 229, 230, 244, 248, 250, 251, 262, 263, 286, 301, 306, 309, 311, 318, 319, 320, 340, 343, 350, 351, 355, 375, 379, 385, 388, 397, 415, 417, 420, 421, 427, 459, 476, 477, 478, 479, 480, 481, 482, 483, 504, 512, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 532, 533, 538, 540, 552, 557, 558, 561, 571, 618, 619, 621, 622, 623, 625, 626, 627, 630, 631, 633, 635, 651, 652, 680, 685, 688, 711, 732, 749, 760, 784, 805, 806, 808, 822, 847, 848, 849, 850, 851, 852, 853, 857, 888, 892, 900, 904, 905, 906, 1003, 1005, 1006, 1007, 1015, 1030, 1031, 1033, 1034, 1035, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1050, 1052, 1054], "gaussian_filt": [53, 81, 82, 89], "gaussian_process": [2, 66, 67, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 397, 425, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 651, 1010, 1030, 1043, 1046, 1047], "gaussianhmm": 1040, "gaussianmixtur": [2, 79, 92, 261, 262, 263, 264, 265, 266, 421, 805, 1008, 1046, 1048, 1049, 1053, 1054, 1056, 1058], "gaussianmixturegaussianmixtur": 265, "gaussiannb": [2, 61, 62, 64, 67, 160, 277, 366, 413, 422, 444, 577, 847, 848, 849, 851, 873, 1003, 1010, 1011, 1044, 1045, 1046, 1048, 1053, 1056], "gaussiannois": 385, "gaussianprocessclassifi": [2, 66, 67, 175, 176, 177, 178, 182, 397, 425, 619, 627, 628, 630, 631, 1010, 1046, 1048, 1050, 1054], "gaussianprocessregressor": [2, 174, 179, 180, 181, 182, 183, 425, 618, 621, 622, 623, 624, 625, 629, 632, 633, 651, 1010, 1043, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "gaussianprocessregressorifittedgaussianprocessregressor": 179, "gaussianrandomproject": [2, 905, 1021, 1041, 1054, 1056, 1057], "gauthier": 1054, "gauz": 1048, "gave": [64, 413, 808, 811, 812, 822, 879], "gavin": [636, 999], "gaynor": 409, "ga\u00ebl": [398, 1033], "gb": [161, 422, 561, 641], "gbc": 366, "gbdt": [142, 191, 269, 325, 326, 331, 388, 422], "gbdt_appli": 142, "gbdt_applyfunctiontransform": 142, "gbdt_cst": 326, "gbdt_leaves_yield": 142, "gbdt_model": 142, "gbdt_no_cst": [155, 326], "gbdt_pipelin": 158, "gbdt_with_monotonic_cst": 155, "gbdt_with_monotonic_cst_df": 155, "gbgradientboostingregressor": 161, "gbm": [149, 422, 1043], "gbm_early_stop": 148, "gbm_full": 148, "gbp": 1033, "gbr": 150, "gbr_l": 150, "gbrt": [43, 52, 217, 422], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 370, "gc": 49, "gca": [47, 79, 97, 118, 125, 177, 222, 226, 228, 244, 257, 279, 304, 306, 317, 342, 344, 347, 348, 1016, 1037], "gcc": [381, 384, 389, 395], "gcf": [47, 1016], "gcv": [681, 683], "gcv_mode": [681, 1042], "gd": [51, 161], "gdb": [384, 386, 1032], "gdex1": 1050, "ge": [51, 1000, 1011, 1052], "ge0": 1025, "gear": 1027, "geb": 57, "gebremichael": [1055, 1056], "gedeck": 1047, "geevarghes": 1055, "gefel": 1009, "gegr": 423, "gei": 1042, "geiger": [1057, 1058], "geist": 380, "gelavizh": 1051, "gelder": 1051, "gemm": 1058, "gen": 789, "gen_batch": [2, 392, 960], "gen_cov": 113, "gen_even_slic": [2, 217, 392, 959], "gender": [256, 885, 1019], "gender_femal": 885, "gender_mal": 885, "gene": [182, 377, 412, 458, 521, 601, 602, 859, 892], "gener": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 100, 104, 105, 106, 107, 108, 109, 112, 114, 117, 118, 119, 120, 123, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 170, 172, 175, 176, 177, 178, 179, 182, 185, 186, 189, 190, 191, 192, 193, 195, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 370, 371, 375, 376, 378, 380, 384, 385, 386, 387, 388, 389, 391, 392, 395, 396, 409, 412, 413, 415, 419, 421, 423, 424, 425, 427, 431, 436, 438, 444, 447, 450, 453, 454, 456, 459, 461, 465, 466, 467, 469, 471, 472, 474, 476, 479, 481, 489, 490, 491, 495, 498, 500, 503, 504, 505, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 546, 548, 549, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 618, 619, 622, 623, 626, 627, 628, 630, 631, 635, 636, 637, 638, 640, 641, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 693, 694, 697, 698, 699, 700, 701, 702, 703, 709, 712, 714, 725, 729, 731, 732, 745, 751, 765, 786, 789, 793, 801, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 844, 845, 846, 852, 853, 855, 857, 858, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 900, 901, 902, 903, 904, 905, 912, 913, 914, 915, 917, 918, 921, 923, 924, 925, 926, 950, 951, 955, 956, 959, 960, 973, 977, 979, 982, 997, 998, 999, 1001, 1003, 1004, 1006, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1021, 1022, 1024, 1025, 1030, 1031, 1032, 1033, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059], "generalis": [796, 1009, 1029], "generaliz": [350, 422], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 153, "generate_onli": [950, 1050], "generate_synthetic_data": 53, "generickernelmixin": [182, 1050], "genericunivariateselect": [2, 424, 603, 604, 606, 607, 608, 610, 1054, 1056, 1057], "generos": 383, "genesi": [1054, 1056], "genet": 1028, "genoa": 380, "genom": [58, 521, 1028], "genotyp": 377, "gensim": 1028, "gentil": [380, 1052], "gentli": 420, "genvalen": [1052, 1053, 1054, 1055, 1056], "geodes": [237, 696, 1006], "geoff": [843, 1010], "geoffrei": [869, 870, 1013, 1051, 1052, 1053, 1054, 1056], "geograph": [43, 50, 309, 378, 506], "geometr": [125, 415, 696, 712, 739, 765, 1006, 1048], "geometri": [74, 415, 1006, 1012], "geomspac": 331, "georg": [45, 378, 415, 1046, 1052, 1053, 1054, 1055], "georgi": [1048, 1051], "georgiamaydai": 1055, "geospati": [309, 421], "geovan": [1053, 1054], "geq": [248, 413, 420, 422, 1005, 1009, 1019, 1023, 1024], "ger": 423, "gerhard": [45, 378], "german_credit": 269, "germer": [1055, 1056], "geroldcsend": 1053, "geron": [1048, 1053, 1054], "gerstein": 521, "gertrud": 1047, "gertz": 457, "gervai": [1042, 1043], "gesa": 1052, "gesdd": 956, "gesvd": 956, "get": [2, 3, 43, 44, 48, 51, 52, 55, 57, 72, 83, 87, 91, 124, 128, 150, 153, 160, 169, 172, 174, 179, 180, 185, 190, 191, 192, 193, 210, 219, 232, 235, 237, 251, 252, 273, 276, 277, 279, 283, 286, 293, 296, 301, 309, 317, 325, 332, 336, 339, 343, 346, 348, 351, 355, 357, 359, 361, 371, 376, 377, 378, 381, 383, 384, 385, 386, 388, 389, 390, 397, 401, 409, 411, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 429, 430, 431, 436, 438, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 703, 707, 729, 730, 731, 732, 734, 740, 741, 750, 764, 771, 772, 777, 793, 796, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 945, 947, 948, 949, 955, 956, 961, 967, 998, 1004, 1005, 1006, 1008, 1009, 1019, 1022, 1023, 1024, 1025, 1029, 1037, 1040, 1043, 1046, 1048, 1051, 1053, 1054, 1057], "get_adjacency_matrix": 55, "get_arrai": [852, 853], "get_bin_se": 455, "get_cmap": [62, 64, 351], "get_color": 46, "get_config": [2, 475, 789, 910, 975, 1055], "get_covari": [540, 542, 549], "get_data": [516, 517], "get_data_hom": [2, 47], "get_depth": [920, 921, 922, 923, 1049], "get_feature_nam": [328, 1048, 1049, 1051, 1052, 1053], "get_feature_names_out": [2, 54, 57, 190, 192, 328, 357, 358, 359, 378, 385, 397, 416, 423, 431, 436, 439, 449, 450, 452, 454, 456, 471, 474, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 574, 575, 576, 577, 578, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 696, 697, 700, 856, 861, 864, 868, 871, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 1019, 1053, 1054, 1055, 1056, 1057, 1058], "get_figur": 137, "get_full_scor": 186, "get_height": [47, 148], "get_impute_it": 186, "get_impute_knn_scor": 186, "get_impute_mean": 186, "get_impute_zero_scor": 186, "get_indic": [57, 430, 458, 460], "get_initial_mean": 263, "get_legend_handles_label": [153, 250, 277, 282], "get_lin": 312, "get_metadata_rout": [251, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 964, 965, 966, 967, 968, 1009, 1057], "get_metr": 707, "get_minibatch": 47, "get_n_cal": [852, 853], "get_n_leav": [920, 921, 922, 923, 1049], "get_n_split": [397, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829], "get_nam": 318, "get_output_feature_nam": 1054, "get_param": [276, 386, 397, 425, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 1050, 1051, 1052, 1054, 1055], "get_precis": [476, 477, 478, 479, 480, 481, 482, 483, 540, 542, 549], "get_redirect": 55, "get_routing_for_object": [2, 251, 965], "get_scor": [2, 332, 397, 741, 1047, 1056], "get_scorer_nam": [2, 414, 740, 1009, 1054, 1057], "get_scores_for_imput": 186, "get_shap": [57, 430, 458, 460], "get_stop_word": [596, 597, 599], "get_submatrix": [430, 458, 460], "get_subplotspec": 390, "get_support": [168, 172, 327, 589, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 1042], "get_tag": 2, "get_tree_stat": [852, 853], "get_untrusted_typ": 409, "get_width": [47, 148], "get_x": [47, 148], "get_xaxi": [260, 306, 316], "get_xlim": [113, 212, 222, 316], "get_xticklabel": 286, "get_yaxi": [306, 316], "get_ybound": 88, "get_ylim": [212, 316, 317], "getattr": [43, 47, 269, 316, 385, 397, 1056], "getgaurav2": 1050, "getmoredataget": 403, "gettempdir": 1012, "getter": [476, 477, 478, 479, 480, 481, 482, 483, 601, 602, 605], "geurt": [422, 563, 564, 565, 566, 573, 574, 922, 923], "gewili": [1055, 1056], "gh": 383, "ghahramani": 907, "gharibi": 1050, "ghg": 1046, "ghislain": 1052, "gholdman1": 1051, "ghorai": 1048, "ghosh": [0, 405, 415, 1040, 1041, 1057, 1058], "gia": 1051, "giancarlo": 1054, "gianr": 1055, "gibb": [868, 1014, 1028], "gideon": 1050, "giessel": 1046, "gif": 83, "gigant": [1048, 1050, 1055, 1056], "gijsber": 1054, "gil": [370, 371, 384, 1043, 1048, 1049, 1052, 1053, 1057], "gilad": 1033, "gilberto": 1048, "gilbertson": [1054, 1055], "gilch": 1047, "gile": [1043, 1044], "gill": [0, 405, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "gilliam": 1047, "gilmor": 1044, "gim": 1052, "gini": [64, 193, 217, 235, 256, 287, 327, 561, 562, 565, 566, 567, 568, 572, 573, 574, 796, 920, 921, 922, 923, 998, 1017, 1025, 1048, 1049, 1056, 1057], "gionanidi": 1054, "giorgio": [1045, 1046, 1047, 1059], "giorgiop": 1045, "giotto": 1028, "giovanni": [1046, 1048], "gist": [383, 391, 1032], "git": [381, 385, 387, 389, 391, 1032, 1036, 1040, 1056, 1058], "github": [0, 51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 296, 314, 322, 326, 327, 329, 330, 332, 337, 365, 381, 382, 386, 387, 388, 389, 391, 395, 397, 398, 409, 411, 700, 1027, 1028, 1032, 1050], "githubusercont": 51, "gitter": [1047, 1048], "giudic": 1052, "giusepp": [1048, 1049], "give": [2, 43, 51, 52, 53, 61, 62, 74, 79, 84, 95, 97, 99, 104, 105, 109, 125, 149, 174, 179, 183, 185, 190, 191, 206, 208, 214, 217, 218, 219, 244, 266, 269, 272, 277, 284, 298, 302, 305, 314, 328, 329, 333, 339, 370, 372, 378, 380, 382, 383, 385, 389, 391, 395, 396, 397, 398, 403, 409, 412, 413, 415, 416, 417, 420, 422, 423, 425, 427, 440, 453, 454, 456, 458, 466, 479, 504, 507, 511, 541, 546, 557, 558, 559, 560, 565, 566, 572, 573, 574, 601, 602, 605, 615, 616, 646, 655, 669, 673, 684, 728, 738, 744, 747, 802, 808, 811, 812, 822, 833, 834, 835, 837, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 889, 890, 892, 893, 901, 1005, 1009, 1012, 1013, 1014, 1016, 1017, 1019, 1023, 1024, 1025, 1028, 1033, 1040, 1044, 1047, 1048, 1050, 1051, 1052, 1054, 1056], "given": [2, 8, 30, 46, 49, 50, 52, 64, 66, 72, 84, 93, 95, 111, 117, 124, 128, 143, 153, 154, 156, 158, 174, 181, 190, 191, 202, 217, 218, 221, 235, 238, 244, 248, 249, 251, 253, 254, 255, 269, 271, 275, 276, 277, 278, 284, 289, 299, 302, 303, 304, 318, 322, 328, 333, 357, 358, 359, 364, 365, 370, 372, 378, 382, 383, 389, 391, 392, 395, 397, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 463, 465, 466, 467, 468, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 488, 489, 490, 491, 494, 504, 509, 511, 513, 531, 541, 542, 544, 546, 547, 548, 551, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 601, 602, 609, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 639, 640, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 695, 696, 698, 699, 705, 706, 707, 708, 709, 710, 712, 713, 714, 720, 722, 725, 726, 728, 732, 734, 735, 742, 744, 745, 748, 760, 763, 764, 766, 767, 772, 782, 786, 789, 790, 792, 795, 796, 797, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 820, 822, 826, 830, 831, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 898, 899, 901, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 931, 942, 943, 944, 964, 965, 967, 992, 996, 998, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059], "gkevinyen5418": 1048, "gkf": 419, "gkiasta": 1053, "gl": [172, 380], "glad": 383, "glanc": [293, 382], "glaser": [1048, 1049], "glass": 378, "glasso": [417, 485], "glaxosmithklin": 51, "gleb": [1053, 1055, 1056, 1057], "glemaitr": [1049, 1050, 1052], "glen": 1053, "glenn": 1046, "glennfrutiz": 1054, "glibc": 391, "glm": [217, 235, 326, 656, 677, 688, 1005, 1040, 1051], "glm_freq": 235, "glm_pure_premium": 235, "glm_sev": 235, "glmnet": [654, 655, 1040], "glob": 47, "global": [2, 3, 47, 49, 77, 92, 123, 217, 237, 238, 258, 284, 313, 326, 366, 370, 371, 389, 395, 397, 415, 425, 449, 459, 469, 475, 598, 634, 640, 696, 699, 700, 703, 715, 737, 738, 746, 791, 792, 795, 796, 826, 893, 908, 910, 978, 998, 1006, 1009, 1015, 1019, 1025, 1033, 1048, 1055], "global_dtyp": 371, "global_random_se": 371, "globular": [97, 415], "glorot": [869, 870], "glossari": [2, 366, 383, 385, 389, 426, 427, 444, 447, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 471, 474, 476, 479, 481, 495, 498, 500, 503, 505, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 591, 592, 602, 610, 615, 616, 618, 619, 635, 640, 642, 647, 648, 649, 650, 654, 655, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 700, 701, 702, 703, 709, 782, 786, 789, 801, 805, 806, 808, 810, 811, 812, 813, 814, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 854, 855, 857, 858, 860, 861, 862, 863, 865, 866, 868, 869, 870, 871, 874, 877, 889, 893, 901, 904, 905, 907, 908, 912, 913, 914, 917, 920, 921, 922, 923, 955, 956, 979, 982, 998, 999, 1005, 1048], "glu": [172, 380], "glushchenkov": 1054, "gl\u00f2ria": [1053, 1055], "gm": 806, "gmil": 378, "gmm": [79, 94, 187, 259, 261, 264, 265, 266, 512, 520, 806, 827, 1008, 1030, 1040, 1041, 1044, 1045, 1046], "gmm_": 1041, "gmm_bic_scor": 265, "gmmgmm": 403, "gmmhmm": [1040, 1041], "gnb": [61, 62, 64, 160, 422, 577, 1011], "gnb_isoton": 62, "gnb_sigmoid": 62, "gnu": 381, "go": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 378, 383, 387, 388, 392, 398, 401, 416, 420, 422, 424, 450, 569, 570, 728, 891, 933, 959, 960, 1019, 1025, 1029, 1051], "goadrich": 1009, "goal": [49, 55, 58, 64, 87, 92, 118, 153, 185, 191, 195, 217, 232, 235, 253, 254, 269, 272, 273, 357, 371, 372, 378, 388, 389, 397, 398, 400, 406, 420, 424, 550, 556, 598, 601, 747, 1009, 1012, 1014, 1015, 1023, 1024, 1025, 1033, 1048], "god": [57, 357, 358], "godbol": 791, "goe": [43, 72, 142, 190, 365, 383, 422, 478, 479, 485, 565, 566, 572, 573, 574, 920, 921, 922, 923, 1019, 1023], "goetz": [1047, 1048], "goh": 1057, "gohlk": 1045, "goix": [0, 1044, 1046, 1047, 1048, 1049], "gold": [69, 211, 218, 220, 223, 227, 231, 234, 261, 266, 282, 302, 345, 389], "goldbaum": 1058, "goldberg": [861, 1012], "goldfarb": 1005, "goldman": 51, "goldstein": [191, 1016], "goldszmidt": 1021, "gollonet": [0, 405], "goltermann": 1052, "golub": [542, 850, 892], "golubin": 1047, "gome": [1053, 1054, 1058], "gomez": [1048, 1055, 1057], "gommer": [1043, 1046, 1047, 1055, 1056, 1058], "goncalo": [1047, 1048], "gone": [1040, 1041], "gonthier": 1051, "goo": [172, 380], "good": [43, 48, 58, 62, 64, 75, 79, 81, 84, 87, 88, 90, 93, 108, 114, 118, 132, 143, 146, 149, 150, 153, 175, 179, 185, 190, 202, 206, 217, 218, 223, 232, 242, 244, 248, 251, 254, 261, 263, 268, 269, 275, 281, 291, 314, 321, 322, 327, 333, 335, 340, 346, 357, 358, 366, 370, 371, 372, 382, 384, 385, 386, 389, 391, 395, 397, 412, 413, 415, 417, 419, 420, 422, 423, 424, 425, 444, 446, 451, 542, 567, 569, 570, 598, 638, 648, 655, 656, 664, 666, 667, 669, 677, 688, 698, 702, 731, 739, 750, 772, 837, 906, 931, 956, 998, 1004, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1019, 1023, 1024, 1025, 1029, 1033, 1046], "goodby": 383, "goodman": [1040, 1045], "googl": [0, 55, 395, 415, 449, 1027, 1040], "gool": 1009, "gorb": 1052, "gordon": [57, 1046, 1050, 1052, 1054], "gorelli": [1048, 1049, 1053, 1055, 1058], "gorgolewski": [0, 405, 1040, 1043], "gorilla": 357, "gorinevski": 1005, "gorodkin": 751, "gorro\u00f1o": [1051, 1053, 1054], "got": [180, 251, 282, 366, 388, 559, 657, 673, 1053, 1055, 1057, 1059], "gotten": [1005, 1019], "gou": 415, "gouillart": 1040, "goupil": [0, 367], "gov": [55, 380], "govern": [190, 366, 370, 383, 397, 1033], "govin": 1046, "go\u0144da": 1055, "gp": [177, 182, 425, 618, 619, 630, 1046], "gp_fix": 175, "gp_opt": 175, "gpapadok": [1050, 1054], "gpassino": 1044, "gpc": [2, 66, 146, 156, 165, 173, 179, 180, 187, 227, 228, 229, 230, 250, 264, 311, 318, 319, 340, 351, 355, 512, 618, 619, 621, 622, 627, 628, 630, 631, 711, 749, 1030, 1031, 1035, 1050], "gpc_rbf_anisotrop": 176, "gpc_rbf_isotrop": 176, "gperftool": 386, "gplearn": 1028, "gpr": [2, 173, 174, 175, 181, 183, 187, 504, 618, 619, 621, 622, 623, 624, 629, 630, 631, 632, 633, 1030, 1031, 1035, 1050], "gpr_model": 183, "gprof": 386, "gpu": [330, 333, 411, 1013, 1029, 1057], "gr": 905, "grab": 383, "gracefulli": [1043, 1044], "grad": [389, 1033], "gradd": 389, "grade": 1009, "gradi": 1050, "gradient": [2, 14, 46, 52, 81, 101, 105, 136, 137, 138, 141, 142, 144, 145, 155, 158, 161, 179, 180, 181, 187, 193, 196, 198, 204, 219, 240, 244, 249, 274, 276, 302, 312, 316, 320, 322, 329, 332, 345, 397, 414, 415, 425, 459, 469, 473, 474, 495, 497, 504, 509, 511, 528, 561, 562, 567, 568, 569, 570, 572, 573, 594, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 639, 640, 642, 643, 647, 656, 657, 666, 667, 676, 677, 680, 682, 684, 685, 686, 688, 695, 700, 702, 703, 749, 750, 756, 758, 798, 808, 811, 812, 813, 829, 835, 838, 868, 869, 870, 873, 885, 886, 916, 982, 1006, 1009, 1012, 1013, 1014, 1015, 1028, 1030, 1031, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1053, 1055, 1057], "gradient_boost": [142, 1042, 1043, 1049], "gradientboost": 1045, "gradientboostingclassifi": [2, 142, 149, 152, 318, 366, 395, 561, 569, 640, 641, 1010, 1016, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "gradientboostingclassifier__learning_r": 318, "gradientboostingregressor": [2, 46, 148, 150, 151, 158, 161, 370, 388, 395, 562, 570, 640, 641, 1005, 1009, 1010, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "gradientboostingregressorgradientboostingregressor": 161, "gradual": [221, 869, 870, 950, 951, 1023], "graduat": 380, "graham": [1045, 1046], "grai": [45, 53, 81, 82, 85, 86, 88, 123, 126, 152, 172, 215, 217, 235, 248, 252, 253, 282, 313, 380, 420, 501, 502, 510, 529, 1051], "grain": [43, 67, 72, 249, 266, 318, 389, 423, 453, 1029], "gram": [2, 187, 196, 385, 420, 423, 496, 532, 556, 596, 597, 598, 599, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 672, 673, 689, 690, 691, 692, 693, 694, 775, 998, 1005, 1019, 1024, 1030, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051, 1053, 1054], "gram_test": 1024, "gram_train": 1024, "gramfort": [0, 123, 398, 404, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "grammar": 383, "grant": [0, 254, 269, 383], "granular": 1059, "grape": 416, "graph": [2, 55, 62, 74, 79, 81, 101, 102, 182, 237, 272, 296, 298, 338, 370, 383, 386, 397, 412, 417, 426, 448, 451, 452, 459, 460, 464, 469, 470, 478, 479, 485, 519, 593, 594, 696, 699, 700, 703, 790, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 867, 908, 962, 1006, 1009, 1012, 1014, 1022, 1025, 1028, 1033, 1040, 1047, 1048, 1050, 1053, 1055], "graph_laplacian": 1047, "graph_lasso": [485, 1048], "graph_model": 298, "graph_shortest_path": [392, 1053], "graphic": [8, 57, 114, 191, 339, 357, 358, 359, 378, 389, 415, 417, 420, 800, 801, 805, 842, 924, 1009, 1010, 1016, 1028], "graphical_lasso": [2, 392, 478, 479, 1048, 1056], "graphicallasso": [2, 115, 417, 476, 477, 479, 480, 481, 482, 483, 485, 1048, 1056], "graphicallassocv": [2, 51, 115, 406, 417, 478, 480, 481, 482, 483, 485, 1048, 1052, 1054, 1056, 1058], "graphicallassocvifittedgraphicallassocv": 51, "graphlasso": [478, 1045, 1048], "graphlassocv": [479, 1042, 1048], "graphviz": [924, 1025], "grasp": [289, 1024, 1029], "grassberg": [615, 616], "grate": 1033, "graviton": 391, "gray_r": [68, 126, 177, 238, 314, 335, 336], "grayscal": 68, "greasemonkei": 391, "great": [90, 189, 190, 215, 366, 383, 395, 420, 772, 1029, 1033, 1040, 1047], "greater": [62, 121, 137, 139, 190, 234, 249, 254, 263, 269, 281, 295, 302, 303, 361, 370, 388, 397, 413, 414, 415, 418, 422, 448, 452, 453, 456, 459, 470, 479, 544, 549, 565, 566, 567, 568, 569, 570, 572, 573, 574, 601, 602, 605, 618, 619, 636, 648, 650, 672, 674, 675, 679, 684, 685, 686, 700, 717, 720, 728, 743, 744, 747, 750, 796, 803, 805, 806, 842, 854, 855, 862, 863, 869, 870, 875, 890, 902, 906, 909, 912, 913, 920, 921, 922, 923, 956, 977, 998, 1004, 1005, 1006, 1009, 1010, 1015, 1019, 1024, 1025, 1043, 1048, 1051, 1053, 1054, 1055, 1057], "greater_is_bett": [150, 333, 750, 1009], "greatest": [90, 401, 415, 879, 1048], "greatli": [215, 249, 330, 383, 391, 459, 1012, 1025, 1046, 1054], "greedi": [172, 422, 424, 454, 456, 467, 567, 568, 610, 1005, 1025], "greedili": [118, 172, 415, 419, 424, 467], "greek": [51, 55, 59, 71, 83, 101, 187, 415, 469, 1030], "green": [63, 114, 121, 140, 155, 160, 174, 195, 242, 312, 317, 321, 326, 332, 397, 1010, 1048, 1049, 1051, 1052], "greenhal": 1048, "greg": [1033, 1046, 1047, 1049, 1050], "gregori": [1046, 1050, 1051, 1052, 1053], "gregorystrubel": 1053, "gregov": 1048, "grei": [44, 285, 316, 353, 378], "grep": 383, "greyscal": 314, "grid": [2, 45, 47, 49, 50, 58, 62, 63, 64, 77, 89, 96, 105, 106, 107, 108, 111, 115, 146, 156, 167, 169, 171, 178, 187, 189, 190, 191, 206, 235, 242, 249, 250, 251, 255, 260, 265, 267, 269, 272, 274, 276, 279, 280, 282, 287, 295, 298, 300, 301, 309, 314, 318, 319, 321, 343, 345, 346, 352, 357, 378, 385, 390, 395, 397, 410, 416, 419, 421, 422, 423, 455, 468, 471, 479, 506, 510, 523, 530, 639, 640, 641, 655, 658, 661, 662, 664, 667, 669, 671, 684, 721, 736, 750, 793, 796, 808, 811, 812, 819, 822, 824, 838, 839, 872, 917, 1002, 1004, 1009, 1012, 1016, 1029, 1030, 1035, 1040, 1043, 1044, 1045, 1047, 1048, 1054, 1056, 1057, 1058, 1059], "grid_encod": 319, "grid_model": 298, "grid_posit": [62, 64], "grid_resolut": [191, 327, 344, 639, 640, 641], "grid_scores_": [1046, 1052, 1053], "grid_search": [108, 143, 256, 265, 273, 283, 332, 416, 1042, 1043, 1044, 1045, 1046, 1047], "grid_siz": [50, 96, 309, 378, 506], "grid_to_graph": [2, 82, 86, 89, 415, 423, 1053], "grid_tograph": 1043, "grid_valu": [191, 641, 1016, 1056], "gridsearch": [89, 111, 286], "gridsearchcv": [2, 43, 89, 103, 105, 107, 108, 111, 130, 143, 187, 250, 256, 265, 267, 269, 273, 274, 275, 276, 280, 283, 286, 293, 298, 300, 314, 318, 327, 331, 332, 346, 350, 366, 371, 385, 395, 397, 406, 411, 416, 419, 422, 425, 429, 510, 528, 548, 549, 583, 607, 615, 661, 711, 750, 819, 822, 872, 882, 912, 920, 998, 1005, 1009, 1013, 1023, 1024, 1029, 1030, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1057, 1058, 1059], "gridsearchcvifittedgridsearchcv": [106, 265, 269, 273, 275], "gridsearchcvinot": 256, "gridsiz": 248, "gridspec": [62, 64, 100, 260, 390], "gridspecfromsubplotspec": 390, "griffith": [1048, 1049], "grigorev": 1045, "grigorio": 742, "grime": [697, 701, 1006], "grinsztajn": 1057, "grisel": [0, 398, 404, 1027, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "griva": [1054, 1055], "grlivarea": 147, "grobler": [0, 405, 1040, 1041, 1042, 1043], "groceryheist": 1053, "groenen": [698, 702, 1006], "grok": 494, "groothui": [635, 999], "grother": 380, "ground": [2, 27, 58, 68, 75, 80, 84, 92, 93, 96, 111, 115, 118, 126, 154, 182, 202, 211, 217, 218, 254, 266, 278, 358, 397, 415, 711, 712, 713, 716, 720, 721, 722, 723, 725, 726, 729, 731, 732, 734, 736, 737, 738, 742, 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 791, 792, 793, 794, 795, 798, 799, 803, 804, 1009, 1022, 1048], "ground_truth": [90, 303], "group": [0, 2, 51, 72, 75, 90, 93, 95, 160, 191, 193, 217, 238, 251, 266, 270, 322, 332, 337, 358, 365, 378, 388, 397, 398, 406, 415, 421, 422, 423, 440, 453, 503, 596, 597, 599, 602, 726, 796, 808, 809, 810, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 836, 837, 839, 885, 886, 922, 923, 950, 951, 1005, 1006, 1008, 1009, 1010, 1019, 1025, 1026, 1028, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1056, 1057, 1058, 1059], "group_1": 885, "group_2": 885, "group_3": 885, "group_by_dynam": 179, "group_df": 225, "group_kfold": 809, "group_prior": 270, "groupbi": [43, 153, 191, 225, 235], "groupkfold": [2, 270, 280, 332, 406, 419, 602, 813, 814, 815, 816, 817, 826, 831, 833, 834, 835, 836, 839, 1046, 1053], "groupshufflesplit": [2, 270, 419, 1046], "grow": [43, 52, 74, 195, 202, 298, 353, 359, 370, 395, 411, 417, 422, 423, 565, 566, 567, 568, 572, 573, 574, 818, 852, 853, 920, 921, 922, 923, 998, 1009, 1012, 1025, 1033, 1043, 1044], "grower": [153, 422, 569, 570], "grown": [380, 422, 561, 562, 563, 564, 565, 566, 572, 573, 920, 921, 922, 923, 1025], "growth": [1009, 1045, 1046], "grumman": 51, "grusak": 1050, "gryllo": [1045, 1048], "gryze": [1042, 1045], "grzegorz": [1047, 1050], "gs_time": 286, "gsh": 286, "gsh_time": 286, "gsiisg": 1055, "gsk": 51, "gss": [419, 810], "gt": [68, 105, 106, 142, 158, 190, 265, 273, 287, 383, 387, 403], "gu": [1051, 1052, 1054], "guan": 1050, "guangguo": 1046, "guarante": [46, 47, 64, 113, 114, 153, 190, 225, 248, 295, 296, 316, 358, 366, 372, 377, 391, 392, 409, 415, 419, 420, 423, 453, 544, 653, 666, 667, 676, 680, 682, 684, 686, 695, 702, 810, 825, 828, 852, 853, 890, 892, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 919, 938, 939, 1001, 1005, 1006, 1008, 1012, 1017, 1021, 1025, 1050, 1058], "gubri": [1048, 1049], "gudmalwar": 1052, "gued": 1058, "guerin": [1046, 1047], "guess": [55, 137, 146, 419, 422, 423, 540, 546, 548, 549, 555, 796, 1009, 1023], "guestrin": 422, "guha": 1055, "gui": [1041, 1051], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 90, 103, 123, 143, 183, 187, 190, 191, 204, 237, 282, 302, 303, 306, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 381, 382, 383, 388, 389, 390, 391, 396, 397, 398, 403, 406, 416, 422, 426, 427, 428, 429, 432, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 952, 1009, 1010, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1057, 1058, 1059], "guidanc": [395, 425], "guidelin": [2, 25, 382, 386, 388, 389, 391, 415, 422], "guiel": 502, "guilherm": 1043, "guillaum": [0, 404, 1033, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "guillem": [1049, 1050, 1055], "guillemot": [0, 1046, 1047], "guillermo": 1054, "guiniol": 1047, "guitar": 1055, "guitton": 1052, "guiweb": 1053, "gulati": [1045, 1046, 1047], "gun": [57, 378], "gunduz": 1058, "gunesbayir": [1055, 1056], "gunnar": [543, 956], "guo": 1053, "guoci": 1047, "gupta": [906, 1021, 1047, 1048, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "gustafson": [1055, 1056], "gustav": 1046, "gustavo": [1048, 1049, 1054], "gutierrez": 1050, "guttman": 702, "guyon": [523, 601, 602, 1009], "guyon2015": 1009, "gwulf": [1044, 1045], "gyeongja": 1058, "gz": [47, 387, 401, 516, 517], "gzip": 1040, "g\u00e9ron": 1048, "g\u00f3rski": [1051, 1052], "g\u00f6khan": [44, 420, 543], "g\u00f6n\u00fcl": 1058, "g\u00fcnther": [1053, 1057], "h": [44, 45, 52, 83, 93, 123, 124, 137, 138, 156, 172, 176, 190, 262, 301, 304, 311, 318, 329, 340, 342, 359, 380, 389, 413, 415, 417, 420, 421, 422, 423, 426, 451, 527, 540, 543, 546, 548, 555, 561, 575, 576, 590, 598, 615, 616, 697, 701, 712, 716, 765, 847, 851, 852, 853, 858, 868, 883, 892, 1001, 1003, 1005, 1006, 1007, 1009, 1011, 1013, 1014, 1023, 1025, 1046, 1051, 1055, 1056, 1057], "h1998": 422, "h2009": 1016, "h4dr1en": 1050, "h5py": 377, "h_": 1005, "h_i": [420, 1014], "h_init": 389, "h_j": 1014, "h_l": 1003, "h_m": 422, "h_pad": [123, 146, 362], "h_samples_": 868, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 85, 90, 91, 92, 95, 108, 113, 114, 118, 123, 135, 142, 146, 148, 150, 151, 153, 155, 160, 170, 171, 174, 179, 180, 181, 186, 190, 191, 192, 193, 195, 210, 214, 217, 218, 219, 223, 234, 235, 237, 244, 248, 250, 251, 254, 255, 258, 260, 261, 263, 265, 266, 269, 270, 273, 274, 275, 278, 279, 281, 286, 287, 295, 299, 302, 303, 304, 306, 313, 316, 317, 319, 321, 325, 326, 327, 328, 329, 331, 333, 335, 338, 346, 350, 351, 352, 357, 365, 366, 370, 371, 372, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 391, 392, 395, 396, 397, 398, 401, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 427, 440, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 501, 502, 505, 506, 516, 517, 524, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 627, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 695, 696, 697, 698, 699, 700, 703, 719, 721, 728, 730, 749, 771, 782, 786, 787, 788, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 822, 826, 829, 830, 831, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 929, 937, 938, 939, 945, 958, 977, 993, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1029, 1032, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "haan": 1049, "haar": [53, 1057], "haas": 1050, "habchi": 1050, "haberland": [1055, 1056], "haberth\u00fcr": 1047, "hack": [47, 49], "had": [43, 48, 82, 150, 153, 179, 251, 316, 322, 328, 366, 383, 384, 391, 406, 423, 426, 451, 999, 1009, 1033, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1055], "hadamard": 385, "haddad": 1047, "hadrien": [1047, 1050], "hadshirt": 1050, "haenel": 1043, "haesun": [1052, 1055, 1056], "hafner": 1053, "hagai": 805, "hagberg": 55, "hahn": [1047, 1048], "haiat": 1052, "haidar": [1053, 1054], "hail": 322, "hailei": [1050, 1051], "hain": 378, "haitz": [1051, 1053, 1054], "hakaa1": [1047, 1048], "hal": [555, 666, 766, 767, 1007], "halchenko": [0, 404, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1056], "hale": [1042, 1054], "half": [2, 43, 61, 126, 153, 249, 253, 273, 275, 287, 378, 379, 420, 422, 470, 530, 570, 601, 605, 610, 778, 871, 879, 921, 1009, 1012, 1025], "half_cal": 605, "half_selector": 605, "halfbath": 147, "halford": [1048, 1055, 1056], "halkidi": 415, "halko": [420, 543, 549, 552, 955, 956], "hall": [1005, 1047, 1051], "hallock": 1046, "halpert": [700, 1006], "halv": [2, 167, 187, 267, 279, 283, 352, 410, 523, 572, 587, 808, 811, 812, 917, 1030, 1035, 1052], "halvic": 1052, "halvinggridsearchcv": [2, 286, 287, 327, 406, 411, 587, 812, 998, 1052, 1054, 1055, 1057, 1058, 1059], "halvingrandomsearchcv": [2, 150, 287, 327, 406, 411, 587, 811, 998, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 287, "halwai": 1046, "ham": [2, 46, 457, 464, 589, 707, 711, 717, 742, 749, 786, 787, 788, 804, 1012], "hamada": 1052, "hamdi": [1057, 1058], "hammerbach": 1044, "hamming_loss": [2, 46, 711, 804, 1009, 1042, 1046, 1049], "hammingdist": 707, "hammoudeh": 1049, "hamoumi": 1053, "hampu": 1044, "hamzeh": [0, 1043, 1044], "han": [415, 449, 457, 464, 1040, 1048, 1049, 1053], "hancock": 1050, "hand": [44, 65, 86, 88, 118, 125, 126, 128, 143, 150, 167, 170, 179, 187, 190, 191, 210, 221, 224, 241, 247, 248, 250, 251, 254, 268, 269, 272, 277, 284, 289, 300, 335, 336, 346, 370, 377, 378, 380, 383, 385, 389, 391, 396, 420, 421, 422, 424, 432, 438, 510, 651, 705, 721, 796, 838, 893, 917, 998, 1002, 1005, 1009, 1011, 1013, 1017, 1022, 1024, 1030, 1033], "handbook": [728, 748, 1009], "handi": [84, 105, 358, 359, 384, 1056], "handk": 1056, "handl": [0, 2, 43, 48, 105, 143, 147, 151, 153, 154, 158, 195, 202, 250, 251, 269, 277, 282, 284, 293, 295, 296, 303, 322, 325, 332, 357, 359, 365, 370, 375, 377, 383, 384, 385, 392, 395, 397, 422, 423, 425, 504, 552, 585, 589, 590, 596, 597, 599, 618, 643, 654, 655, 660, 666, 667, 668, 669, 670, 676, 683, 684, 686, 689, 728, 796, 876, 885, 886, 912, 913, 917, 924, 928, 957, 965, 968, 1006, 1009, 1010, 1011, 1012, 1015, 1017, 1024, 1025, 1028, 1029, 1033, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 105, 142, 147, 158, 191, 192, 246, 254, 256, 258, 322, 326, 329, 885, 886, 1019, 1044, 1048, 1052, 1053], "handler": 1051, "handler_map": 303, "handlerpathcollect": 303, "handletextpad": 362, "handpick": 244, "handprint": 380, "handwritten": [51, 71, 80, 83, 87, 94, 96, 142, 170, 187, 236, 237, 239, 241, 248, 263, 273, 306, 313, 314, 335, 336, 358, 376, 415, 422, 454, 510, 549, 552, 557, 574, 696, 697, 698, 699, 700, 712, 713, 725, 745, 801, 803, 861, 873, 882, 892, 905, 1006, 1012, 1030, 1035], "hang": [383, 1050, 1051], "hank": 1043, "hanmin": [0, 404, 1047, 1048, 1049, 1050, 1051, 1059], "hann": 1040, "hanna": [1044, 1045, 1051], "hannah": [1050, 1052, 1054], "hannel": [1048, 1049], "hansen": 1048, "hansin": [1054, 1055], "hanu\u0161": 1057, "hanxiang": [687, 1005], "hao": [1051, 1052, 1054, 1055], "haoi": 1057, "haoran": 1048, "haoyin": [1051, 1053, 1054], "happen": [2, 44, 64, 142, 204, 269, 316, 322, 358, 366, 370, 371, 381, 382, 383, 387, 388, 389, 395, 397, 398, 401, 409, 415, 417, 419, 422, 444, 523, 580, 666, 793, 890, 892, 912, 1005, 1009, 1010, 1024, 1029, 1048, 1052, 1053, 1055, 1056, 1057, 1058], "happi": [190, 269, 357, 395, 398, 826, 827], "haqu": [1042, 1043, 1044], "harabasz": [2, 718], "harabaz": 1046, "hard": [48, 217, 244, 248, 275, 277, 372, 382, 395, 397, 414, 415, 420, 423, 542, 549, 577, 684, 914, 915, 916, 917, 918, 1005, 1022, 1024, 1025, 1029, 1049, 1050], "hardcod": [447, 461, 1048], "harder": [284, 285, 320, 378, 382, 385, 391, 395, 415, 523, 569, 570], "hardest": 403, "hardin": 114, "hardli": [90, 615, 616], "hardwar": [57, 339, 359, 370, 371, 378, 381, 395, 401, 409, 411, 1028, 1054, 1055], "hare": 1005, "harfouch": 1056, "harikrishnan": 1042, "harizo": [1046, 1047], "harm": [357, 385, 423, 803], "harmanan": [1057, 1058], "harmon": [43, 72, 358, 415, 543, 549, 737, 738, 744, 791, 803, 1009], "haroldfox": [1048, 1049], "harper": 1047, "harri": [1044, 1046, 1052, 1053], "harsanyi": 1056, "harsh": [432, 444, 476, 557, 558, 559, 561, 563, 565, 567, 569, 572, 575, 577, 618, 666, 674, 676, 682, 683, 684, 807, 830, 840, 841, 842, 843, 847, 848, 849, 850, 851, 854, 859, 862, 869, 907, 908, 912, 914, 917, 920, 922, 1050, 1052, 1055], "harshit5674": 1055, "hart": [380, 1003, 1048], "hartong": 1051, "harutaka": 1053, "harvest": 322, "harwar": 395, "has_fit_paramet": [2, 392], "hasan": 1055, "hasattr": [79, 91, 97, 115, 135, 146, 235, 248, 311, 318, 357, 397, 430, 434, 440, 969, 1050], "haseeb": [1053, 1054], "hash": [2, 47, 52, 136, 187, 252, 358, 359, 370, 372, 375, 383, 386, 395, 422, 522, 552, 565, 574, 589, 590, 597, 648, 847, 973, 1001, 1030, 1035, 1041, 1044, 1047], "hashabl": [397, 880, 883, 1020], "hashcode55": 1046, "hasher": [156, 359, 423], "hashingvector": [2, 47, 359, 372, 423, 496, 596, 598, 599, 1041, 1047, 1048, 1049, 1050, 1053], "hashlib": 47, "hasil": 1044, "hasn": 406, "hassaan": [1048, 1049], "hassan": 1053, "hassen": 1040, "hassoun": 1055, "hasti": [2, 137, 140, 141, 152, 172, 204, 274, 380, 419, 422, 527, 528, 561, 567, 568, 636, 664, 729, 731, 732, 842, 859, 905, 920, 921, 999, 1003, 1005, 1010, 1016, 1021, 1023, 1025], "hat": [114, 132, 271, 275, 301, 328, 381, 413, 417, 421, 422, 1000, 1005, 1006, 1009, 1011, 1013], "hathidara": 1052, "hatwar": [1048, 1049], "hauck": 1046, "hausamann": [1048, 1049], "haussler": 182, "hav": 403, "have": [0, 2, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 61, 62, 63, 64, 72, 74, 77, 78, 81, 82, 85, 88, 90, 92, 95, 97, 99, 100, 104, 105, 111, 113, 118, 121, 128, 129, 137, 144, 146, 147, 148, 150, 153, 168, 169, 172, 174, 175, 179, 180, 181, 186, 189, 190, 191, 192, 193, 195, 197, 202, 217, 218, 219, 221, 235, 241, 244, 246, 251, 252, 254, 255, 261, 262, 263, 265, 268, 269, 275, 276, 278, 281, 282, 289, 290, 293, 296, 298, 299, 302, 303, 316, 321, 322, 323, 325, 327, 328, 332, 336, 337, 338, 343, 349, 350, 351, 353, 357, 358, 365, 366, 370, 371, 372, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 401, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 500, 502, 503, 504, 516, 517, 522, 531, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 695, 696, 697, 698, 699, 700, 707, 712, 713, 719, 720, 723, 728, 734, 739, 744, 750, 764, 765, 766, 767, 790, 793, 794, 800, 803, 805, 806, 807, 808, 811, 812, 813, 814, 819, 822, 826, 830, 831, 833, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 931, 938, 940, 942, 944, 945, 956, 983, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1032, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "havelabeleddatado": 403, "haversin": [2, 309, 421, 707, 770, 772, 1012, 1049, 1052], "haversine_dist": [2, 770, 1049], "haversinedist": 707, "hawaii": 179, "haxbi": 0, "haya": 1054, "hayashi": 1048, "hbgt": 153, "hd": 51, "hdb": [90, 453], "hdbscan": [2, 71, 79, 84, 100, 187, 248, 451, 520, 892, 999, 1028, 1030, 1034, 1035, 1056, 1057, 1058], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 377, "hdl": [172, 380], "hdmetor": 1046, "he": [383, 734, 764, 869, 870, 902, 903, 1009, 1047, 1054, 1055], "head": [0, 52, 63, 105, 179, 190, 204, 206, 235, 258, 265, 322, 325, 330, 383, 391, 404, 420, 1033, 1045, 1046, 1055, 1056, 1057, 1058, 1059], "head_width": 63, "header": [54, 104, 276, 357, 358, 378, 381, 423, 495, 496, 808, 811, 812, 822], "heali": 415, "health": 333, "heap": 457, "heapq": 470, "heard": 383, "heart": 254, "heat": [158, 346, 415, 459, 469, 703], "heatingqc": 158, "heatmap": [191, 193, 197, 202, 286, 330, 346, 640, 1016], "heatmap_kw": 640, "heatmaps_": 640, "heavei": 1048, "heavi": [219, 395, 412, 1029], "heavier": [132, 417, 1005], "heavili": [206, 370, 371, 383, 391, 657, 663, 786, 1026], "heavy_rain": [43, 191], "hebei": 415, "hedlund": 1056, "hedyati": 1044, "hee": [1047, 1050], "heer": 1051, "hegd": 1057, "heidelberg": [179, 415, 420, 543, 704, 734, 764, 1009], "height": [47, 54, 88, 126, 147, 148, 172, 316, 322, 332, 357, 421, 453, 501, 502, 514, 594], "heightpet_catpet_dogf64f64f64": 332, "heikki": 1021, "heilman": [1044, 1045], "heitz": 322, "held": [43, 47, 105, 130, 151, 192, 225, 262, 278, 283, 295, 419, 422, 567, 568, 569, 570, 709, 808, 811, 812, 822, 869, 870, 882, 998, 999, 1008, 1017], "helder": [1044, 1053, 1054], "heldout": 224, "heldout_scor": 149, "helen": 330, "heli": 1047, "hello": [383, 391, 969, 973], "helloifeven": 969, "helm": 1058, "helmu": 1044, "help": [0, 41, 43, 48, 50, 90, 104, 108, 128, 133, 191, 202, 235, 237, 269, 276, 278, 293, 314, 343, 346, 358, 359, 366, 370, 371, 383, 384, 385, 386, 387, 388, 389, 391, 392, 397, 398, 400, 409, 415, 416, 419, 423, 425, 439, 544, 585, 635, 658, 662, 673, 693, 694, 700, 722, 848, 920, 921, 922, 923, 999, 1003, 1004, 1006, 1008, 1009, 1011, 1013, 1019, 1020, 1025, 1027, 1028, 1029, 1032, 1033, 1046, 1047, 1048, 1051, 1054, 1058], "helper": [44, 45, 126, 235, 286, 376, 385, 386, 396, 397, 419, 475, 583, 910, 997, 1040, 1047, 1048, 1049, 1053], "helvetica": [924, 926], "heme": 1057, "hempstalk": 1047, "henc": [72, 95, 106, 190, 221, 248, 269, 284, 346, 357, 358, 370, 378, 385, 387, 389, 397, 401, 415, 419, 422, 423, 494, 516, 547, 549, 550, 551, 571, 598, 651, 654, 660, 668, 670, 680, 695, 712, 713, 717, 723, 739, 765, 794, 803, 824, 827, 828, 847, 848, 849, 850, 851, 887, 965, 1006, 1008, 1009, 1010, 1015, 1016, 1019, 1029, 1047, 1048, 1051, 1052, 1054], "hendrik": [0, 404, 1040, 1043, 1044, 1045, 1046], "henri": [1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055], "henriqu": 1059, "henrymooresc": [1054, 1055], "hepe": [687, 1005], "here": [43, 47, 48, 51, 52, 53, 55, 61, 64, 92, 93, 101, 111, 115, 120, 121, 125, 126, 128, 129, 130, 131, 133, 137, 140, 143, 147, 151, 153, 158, 169, 172, 174, 182, 183, 190, 191, 192, 195, 197, 202, 206, 210, 217, 221, 223, 232, 233, 235, 237, 239, 244, 249, 251, 254, 255, 261, 262, 263, 268, 269, 272, 273, 275, 277, 278, 280, 282, 284, 285, 287, 289, 293, 296, 298, 305, 308, 312, 313, 314, 318, 321, 327, 329, 332, 335, 337, 346, 350, 353, 355, 359, 361, 366, 370, 371, 372, 377, 378, 381, 382, 383, 384, 385, 388, 389, 391, 395, 396, 406, 409, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 426, 428, 444, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 471, 479, 482, 544, 546, 547, 551, 552, 571, 575, 576, 577, 578, 589, 590, 592, 596, 599, 602, 610, 636, 638, 655, 659, 661, 663, 669, 671, 673, 681, 683, 697, 699, 703, 707, 720, 734, 754, 764, 802, 807, 808, 811, 812, 814, 822, 830, 831, 832, 833, 834, 835, 836, 837, 839, 848, 852, 853, 876, 884, 887, 890, 893, 904, 905, 915, 974, 998, 1001, 1005, 1006, 1007, 1008, 1009, 1012, 1015, 1019, 1021, 1022, 1023, 1024, 1028, 1029, 1032, 1033, 1040, 1048, 1053], "hereaft": 398, "hereund": 1015, "herilalaina": [1047, 1048, 1050], "hermano": [1055, 1056], "hermida": [1049, 1053], "hernandez": 1009, "hern\u00e1ndez": 1009, "hero": [417, 428, 482], "herrou": 1054, "hershei": 1009, "hertel": 1057, "herv": 1044, "hervieu": 1040, "herv\u00e9": 1044, "heryanto": 1047, "hesit": 383, "hessian": [237, 238, 239, 422, 569, 570, 656, 666, 667, 677, 688, 697, 701, 1005, 1013, 1034, 1035, 1055, 1059], "hessian_tol": [697, 701], "heterogen": [43, 48, 61, 90, 103, 105, 187, 191, 217, 258, 321, 325, 375, 377, 395, 471, 495, 549, 589, 599, 721, 872, 876, 912, 1006, 1016, 1019, 1028, 1030, 1035, 1044, 1048, 1050, 1051, 1058], "heteroscedast": [123, 130, 150, 219, 420, 888, 900], "heteroschedast": 1009, "heuer": 1043, "heurist": [51, 54, 149, 254, 357, 371, 415, 424, 456, 459, 468, 469, 516, 517, 545, 547, 554, 684, 685, 686, 699, 703, 811, 812, 914, 915, 916, 917, 918, 943, 1006, 1007, 1012, 1023, 1025, 1033, 1040, 1041, 1045, 1049, 1052, 1053], "hexbin": 248, "hexdigest": 47, "hgbdt": 143, "hgbdt_model": 191, "hgbdt_model_without_interact": 191, "hgbdt_preprocessor": 191, "hgbt": [143, 153, 422], "hgbt_cst": 153, "hgbt_no_cst": 153, "hgbt_quantil": 153, "hhu": [657, 1049], "hi": [0, 416, 1009], "hibon": 1047, "hida": [1055, 1056], "hidden": [43, 191, 313, 314, 383, 391, 412, 420, 868, 869, 870, 1013, 1014, 1028, 1040, 1051], "hidden_layer_s": [191, 255, 311, 313, 869, 870, 1013], "hide": [52, 78, 383, 391, 847, 848, 849, 850, 851, 1043, 1048, 1056], "hideaki": 1054, "hierarch": [2, 53, 59, 71, 74, 75, 79, 81, 87, 88, 89, 92, 187, 193, 241, 329, 365, 397, 423, 448, 450, 452, 453, 512, 520, 522, 530, 538, 555, 739, 865, 892, 1026, 1029, 1030, 1034, 1035, 1040, 1043, 1044, 1056], "hierarchi": [76, 193, 383, 457, 463, 470, 1014], "higgin": [1057, 1058], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 84, 90, 92, 97, 100, 104, 108, 113, 114, 125, 126, 140, 142, 143, 144, 145, 150, 151, 153, 154, 156, 172, 174, 180, 186, 189, 191, 192, 193, 202, 212, 218, 219, 221, 231, 237, 238, 239, 244, 248, 260, 266, 273, 277, 281, 282, 291, 302, 303, 311, 313, 318, 320, 321, 322, 323, 331, 338, 343, 345, 346, 357, 358, 363, 364, 370, 378, 380, 383, 388, 391, 392, 395, 396, 412, 413, 414, 415, 419, 421, 422, 423, 424, 425, 451, 454, 456, 457, 459, 476, 489, 490, 491, 561, 562, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 652, 678, 679, 687, 697, 700, 701, 734, 739, 750, 754, 764, 797, 800, 816, 818, 852, 853, 857, 886, 887, 891, 893, 914, 916, 917, 920, 921, 922, 923, 977, 998, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1015, 1017, 1019, 1021, 1024, 1025, 1026, 1028, 1029, 1040, 1041, 1043, 1044, 1048, 1051, 1052, 1053, 1054, 1055], "high_cardin": 322, "high_cardinality_featur": 322, "high_cardinalityindex": 322, "high_i": 212, "high_precision_cv_result": 273, "high_recall_cv_result": 273, "high_x": 212, "higher": [43, 52, 92, 113, 126, 130, 137, 140, 142, 143, 150, 154, 170, 174, 176, 181, 182, 190, 191, 192, 195, 217, 218, 221, 235, 241, 242, 266, 268, 269, 273, 275, 278, 290, 301, 321, 346, 350, 357, 358, 359, 366, 370, 378, 381, 385, 412, 414, 415, 417, 422, 424, 425, 426, 451, 455, 456, 478, 485, 517, 540, 547, 551, 556, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 574, 581, 596, 599, 615, 616, 627, 635, 639, 643, 645, 654, 655, 660, 661, 668, 669, 670, 671, 684, 686, 687, 712, 732, 736, 760, 793, 805, 808, 811, 812, 814, 822, 829, 831, 836, 839, 858, 861, 887, 904, 905, 906, 912, 913, 914, 915, 916, 917, 918, 925, 1001, 1005, 1006, 1008, 1009, 1012, 1016, 1019, 1023, 1024, 1041, 1046, 1048, 1055, 1057], "highest": [2, 55, 63, 115, 168, 172, 221, 273, 275, 286, 327, 357, 383, 395, 413, 415, 419, 422, 424, 444, 563, 565, 572, 600, 603, 604, 606, 607, 608, 611, 612, 614, 643, 645, 734, 764, 802, 805, 808, 811, 812, 822, 909, 920, 958, 998, 1005, 1009, 1010, 1013, 1023, 1025, 1052], "highest_protocol": 409, "highli": [43, 48, 64, 106, 113, 114, 125, 133, 154, 202, 212, 222, 269, 275, 278, 284, 312, 350, 358, 370, 371, 383, 389, 395, 413, 415, 419, 422, 423, 459, 469, 504, 571, 679, 700, 820, 822, 868, 931, 1005, 1009, 1012, 1013, 1015, 1023, 1024, 1027, 1028], "highlight": [43, 54, 90, 105, 113, 121, 141, 142, 155, 172, 174, 175, 180, 185, 186, 191, 192, 195, 217, 218, 219, 235, 246, 256, 257, 258, 269, 270, 287, 289, 298, 320, 322, 338, 357, 359, 365, 383, 387, 388, 391, 395, 425, 450, 453, 454, 471, 474, 497, 498, 504, 509, 510, 512, 520, 523, 529, 532, 546, 549, 569, 570, 572, 573, 575, 607, 610, 636, 638, 640, 642, 648, 654, 656, 660, 666, 677, 688, 696, 705, 709, 710, 725, 726, 740, 750, 756, 786, 796, 803, 807, 808, 809, 811, 812, 814, 822, 830, 831, 834, 835, 838, 854, 856, 873, 877, 882, 885, 886, 887, 891, 892, 893, 909, 910, 912, 917, 920, 921, 951, 1006, 1009, 1017, 1019, 1024, 1030, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "highlight_min": [150, 206], "higuera": 377, "hila": 415, "hilbert": [222, 878, 1001, 1019], "hilferti": 113, "hill": [415, 455, 468, 1050], "him": 423, "himanshu": [1051, 1054], "hind": 1054, "hinder": 1050, "hing": [2, 62, 224, 227, 229, 283, 343, 344, 348, 350, 397, 674, 684, 743, 912, 919, 1005, 1023, 1024], "hinge_loss": [2, 350, 1009, 1044, 1052, 1053], "hinrich": 420, "hint": [190, 370, 384, 388, 406, 455, 1009], "hinton": [700, 861, 868, 869, 870, 1006, 1012, 1013, 1014], "hintz": 1046, "hiramatsu": 1057, "hirofumi": [1051, 1052], "hirsch": 1048, "hirschberg": [415, 725, 745, 803], "hirzel": 1053, "hispan": 190, "hist": [43, 62, 64, 88, 109, 139, 143, 217, 219, 248, 254, 269, 281, 301, 316, 320, 322, 329, 332, 422], "hist_drop": 147, "hist_n": 147, "hist_nbin": 316, "hist_no_interact": 330, "hist_one_hot": 147, "hist_ordin": 147, "hist_quantil": 329, "hist_x0": 316, "hist_x1": 316, "histgradientboost": 1052, "histgradientboostingclassifi": [2, 142, 143, 269, 325, 326, 327, 328, 330, 332, 371, 409, 567, 572, 640, 641, 999, 1028, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "histgradientboostingclassifierhistgradientboostingclassifi": 269, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 269, "histgradientboostingregressor": [2, 43, 46, 52, 138, 143, 147, 150, 151, 153, 155, 158, 185, 191, 217, 322, 325, 326, 327, 328, 330, 331, 332, 422, 568, 573, 640, 641, 643, 999, 1016, 1028, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "histgradientboostingregressor__interaction_cst": 191, "histgradientboostingregressor__max_depth": 147, "histgradientboostingregressor__max_it": 147, "histgradientboostingregressorhistgradientboostingregressor": [158, 322], "histgradientboostingregressorifittedhistgradientboostingregressor": [155, 330], "histogram": [2, 52, 62, 64, 88, 136, 138, 142, 147, 148, 150, 151, 155, 187, 217, 225, 248, 274, 276, 281, 301, 316, 327, 329, 331, 332, 413, 497, 504, 567, 568, 569, 570, 572, 573, 640, 650, 750, 756, 766, 767, 798, 808, 813, 829, 835, 838, 1001, 1007, 1019, 1030, 1034, 1035, 1052, 1055, 1057], "histor": [51, 217, 269, 1029], "histori": [51, 387, 567, 568, 1040], "hit": [219, 389], "hitesh": 1052, "hjortkj\u00e6r": 1054, "hkey_local_machin": 401, "hline": 125, "hlle": 1006, "hmasdev": 1054, "hmc": 51, "hmm": [1040, 1041, 1042, 1043, 1045], "hmmlearn": 1028, "hn": 389, "hnyk": [1046, 1047], "ho": [422, 563, 564, 1009, 1045, 1048, 1049, 1054], "hoang": [1049, 1050], "hobson": 1046, "hoc": [171, 172, 187, 267, 269, 278, 293, 333, 338, 397, 414, 504, 666, 824, 830, 835, 873, 892, 1030], "hochberg": [603, 1046, 1047], "hochreit": [412, 727], "hockei": [57, 378], "hoctor": 1052, "hoda1394": 1052, "hoenig": 1040, "hoesli": 422, "hoffman": [420, 544, 1045, 1052], "hogan": 1048, "hoh": 1048, "hold": [0, 47, 52, 63, 64, 217, 221, 251, 269, 276, 365, 376, 383, 384, 385, 397, 413, 415, 419, 422, 423, 425, 511, 565, 569, 572, 597, 640, 641, 642, 744, 808, 811, 812, 822, 848, 879, 880, 885, 886, 893, 896, 920, 922, 999, 1003, 1009, 1013, 1023, 1024, 1025, 1048, 1052, 1058], "holdgraf": 1048, "holdselig": 423, "hole": [187, 236, 237, 242, 538, 700, 701, 1030, 1054], "holger": 1047, "holidai": [43, 191], "holm": [843, 1010, 1057], "holman": 1055, "holmstr\u00f6m": 1042, "holohan": [1055, 1057], "holt": [0, 405, 1040], "holub": 542, "home": [0, 2, 7, 51, 52, 158, 178, 180, 182, 183, 245, 261, 314, 330, 378, 381, 391, 401, 493, 499, 507, 687, 1033], "homebrew": [386, 401], "homepag": [378, 538, 1025], "homm": 1055, "homo": 93, "homogen": [2, 72, 73, 74, 79, 81, 84, 90, 93, 358, 378, 395, 397, 417, 422, 425, 453, 622, 712, 725, 739, 744, 745, 765, 803, 1006, 1007, 1009, 1049], "homogeneity_completeness_v_measur": [2, 415, 1049], "homogeneity_scor": [2, 73, 84, 93, 358, 415, 725, 744, 803, 1009], "homomorph": 1028, "homoscedast": [130, 247, 320, 1009, 1048], "homoschedast": 1009, "honda": 51, "honei": 1003, "hong": [1046, 1048, 1052, 1053, 1054, 1056, 1058], "hongh": 1048, "hongkahjun": 1047, "honglu": 1050, "hongshaoyang": 1055, "honl": [1052, 1053], "honolulu": 1009, "honor": 322, "hood": [409, 1005, 1024], "hoover": [1045, 1046, 1047, 1049], "hope": [30, 44, 180, 235, 397, 1049], "hopefulli": [278, 391, 1040], "hopfensperg": [1057, 1058, 1059], "hopper": 1045, "horizont": [66, 123, 237, 249, 316, 319, 388, 397, 471, 523, 705, 709], "horizontal_distance_to_hydrologi": 498, "horizontalalign": [51, 63, 67, 75, 79, 80, 97, 129, 244, 260, 311, 318], "hornik": 643, "hornstein": 1055, "horrel": 1047, "hoshia": 1054, "hossein": [1048, 1049, 1050], "host": [0, 143, 331, 357, 378, 383, 387, 391, 392, 499, 905, 1056], "hot": [2, 43, 105, 142, 145, 158, 190, 217, 284, 317, 318, 322, 327, 346, 397, 422, 423, 559, 574, 589, 656, 666, 667, 677, 688, 875, 877, 879, 880, 883, 885, 886, 893, 1005, 1019, 1048, 1054, 1055], "hot_r": [51, 316], "hotel": 1033, "hotspot": 389, "hotter": 145, "hour": [43, 153, 190, 191, 332, 383, 389, 504, 1006, 1027], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 153, 190], "hourly_wag": 189, "hous": [2, 109, 148, 158, 185, 186, 269, 316, 327, 376, 497, 1035], "house_pric": [109, 158], "houseag": [316, 327, 378, 497], "household": 378, "housestyl": [147, 158], "hover": 332, "hover_data": [143, 276], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 85, 86, 87, 88, 92, 95, 103, 104, 105, 108, 111, 113, 118, 132, 137, 138, 141, 145, 146, 147, 148, 150, 151, 153, 156, 158, 169, 170, 181, 187, 190, 191, 192, 193, 195, 199, 205, 206, 207, 213, 218, 219, 220, 221, 224, 225, 231, 235, 241, 242, 246, 249, 251, 253, 254, 255, 257, 266, 269, 270, 271, 273, 275, 276, 277, 282, 284, 285, 287, 288, 289, 290, 295, 296, 298, 299, 300, 302, 303, 308, 313, 321, 323, 326, 327, 328, 331, 332, 343, 344, 346, 349, 350, 353, 357, 358, 361, 365, 370, 371, 372, 378, 381, 382, 384, 385, 386, 388, 391, 396, 397, 398, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 429, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 512, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 630, 631, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 712, 728, 765, 800, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 835, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 992, 998, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1015, 1016, 1017, 1019, 1021, 1022, 1024, 1025, 1027, 1029, 1033, 1035, 1040, 1042, 1045, 1051, 1054, 1055, 1056], "howel": 1047, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 72, 82, 84, 88, 90, 95, 106, 109, 111, 115, 117, 128, 130, 140, 142, 143, 147, 150, 151, 158, 169, 172, 174, 179, 180, 191, 192, 199, 206, 217, 221, 238, 241, 242, 244, 250, 251, 254, 269, 275, 282, 289, 290, 293, 295, 296, 301, 312, 316, 327, 333, 350, 353, 357, 358, 366, 370, 371, 372, 377, 378, 380, 382, 383, 385, 389, 391, 395, 397, 406, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 447, 450, 454, 456, 458, 461, 466, 504, 516, 540, 549, 559, 575, 589, 590, 591, 597, 614, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 640, 641, 646, 651, 663, 664, 680, 695, 700, 703, 708, 771, 773, 808, 810, 811, 812, 822, 825, 828, 835, 839, 840, 851, 869, 870, 875, 884, 885, 890, 914, 915, 917, 934, 961, 977, 998, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1019, 1023, 1024, 1025, 1049, 1050, 1052, 1053, 1056], "hoyer": [420, 1043], "hp": 51, "hpq": 51, "hrishikesh": [1041, 1042], "hristo": [1048, 1055], "hsiang": [666, 1044], "hsieh": 1046, "hspace": [45, 53, 54, 79, 80, 97, 123, 235, 244, 260, 262, 263, 266, 301, 327, 336, 343], "hstack": [53, 69, 77, 160, 168, 242, 253, 270, 349, 419, 871], "hsuan": 1045, "ht2001": 1009, "htf": 422, "htm": [920, 921], "html": [2, 43, 47, 51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 172, 179, 190, 191, 192, 195, 199, 245, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 330, 332, 337, 365, 378, 380, 383, 384, 386, 387, 391, 416, 419, 423, 429, 494, 516, 517, 666, 847, 851, 950, 951, 952, 1007, 1028, 1029, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "htmledit": [847, 851, 1007], "htmlparser": 47, "htsedebenham": 1055, "http": [43, 45, 47, 51, 52, 55, 61, 105, 172, 195, 217, 225, 233, 235, 242, 289, 293, 295, 296, 313, 377, 378, 380, 381, 383, 387, 388, 389, 391, 395, 397, 401, 415, 419, 424, 449, 456, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 516, 517, 518, 538, 539, 542, 545, 549, 603, 644, 649, 652, 657, 666, 672, 674, 675, 676, 679, 684, 687, 690, 691, 693, 694, 700, 703, 713, 729, 731, 732, 766, 767, 777, 847, 849, 851, 854, 855, 860, 861, 862, 863, 868, 890, 905, 906, 907, 920, 921, 950, 951, 1005, 1007, 1009, 1022, 1025, 1050, 1059], "hu": [1045, 1048, 1050], "hua": [571, 1015], "huang": [378, 666, 1046, 1051], "huangk10": 1051, "huard": 1040, "huber": [25, 200, 227, 422, 568, 657, 684, 686, 1023, 1040, 1042, 1043, 1052], "huberlossfunct": 1053, "huberregressor": [2, 89, 174, 187, 196, 215, 221, 222, 223, 323, 532, 678, 679, 680, 686, 687, 1005, 1030, 1046, 1047, 1048, 1049], "hubert": [415, 713, 723, 794], "hubert1985": 713, "hudson": 330, "hue": [153, 265, 275, 321, 380], "huerta": 1050, "hug": [0, 172, 404, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "huge": [219, 222, 370, 389, 635, 1043], "hugh": [887, 1042, 1053], "hugo": [45, 378, 1046, 1051, 1052, 1053, 1054], "hugorichard": 1052, "hugu": 1044, "hui": [204, 546, 548, 555, 664, 1005], "huiginn": 1040, "huilgolkar": [1041, 1042], "hujiahong726": 1056, "hull": 1057, "humahn": 1055, "human": [123, 191, 357, 383, 415, 420, 869, 870, 1009, 1016, 1049], "humid": [43, 191, 1016], "hunan": 1048, "hundr": [77, 149, 238, 320, 378, 419, 422, 569, 570, 1006, 1051], "hunt": 1055, "hunter": 1049, "hurt": [370, 542, 1048], "husak": 1054, "huszar": 1033, "hut": [700, 1006, 1045, 1047, 1050], "huynh": [1050, 1052], "hv": 423, "hvassard": 1054, "hwan": 1051, "hwang": 1046, "hybrid": [453, 657, 1028], "hye": 1051, "hyper": [2, 43, 64, 105, 143, 268, 269, 275, 280, 314, 346, 366, 385, 395, 396, 397, 410, 419, 422, 424, 475, 652, 653, 812, 820, 822, 868, 910, 1004, 1005, 1009, 1012, 1023, 1024, 1028, 1035, 1040, 1054, 1059], "hyperband": 998, "hyperbol": [350, 650, 869, 870, 1007, 1013], "hypercub": [244, 523], "hyperlink": 1042, "hyperparamet": [2, 105, 107, 108, 153, 174, 175, 181, 182, 185, 187, 191, 197, 202, 206, 231, 235, 244, 254, 267, 269, 273, 278, 280, 286, 287, 298, 314, 357, 385, 397, 415, 419, 420, 422, 425, 510, 543, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 651, 661, 667, 673, 681, 684, 736, 793, 808, 822, 917, 998, 1003, 1004, 1005, 1008, 1009, 1011, 1013, 1015, 1023, 1029, 1030, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1056], "hyperparameter_baseline_similar": 182, "hyperparameter_grid": 332, "hyperparameter_length_scal": 623, "hyperplan": [139, 177, 187, 196, 209, 226, 252, 278, 341, 342, 343, 344, 345, 346, 350, 351, 520, 639, 666, 667, 674, 676, 682, 683, 684, 685, 912, 914, 916, 917, 1023, 1024, 1030], "hyperspher": 379, "hypothes": 1005, "hypothesi": [150, 275, 281, 419, 698, 702, 837, 1006], "hypothet": 64, "hyunjin": 1040, "hyvarinen": [427, 541], "h\u00e9lion": 1051, "i": [0, 2, 8, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 344, 345, 346, 350, 351, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 366, 370, 371, 372, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 396, 397, 398, 400, 401, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 954, 955, 956, 958, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 977, 978, 979, 980, 982, 983, 989, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "i_alpha_optim": 288, "i_ax": 296, "i_dataset": [79, 97, 244], "i_j": 1017, "iain": [172, 380, 1005], "iampat": 1048, "ian": [1042, 1044, 1049, 1050, 1052, 1055, 1056, 1058], "iasoon": 1054, "ibay": 1040, "ibieta": 1053, "ibm": [51, 57, 339, 359, 378], "ibn": 1040, "ibnukhsein": 1057, "ibraheem": 1049, "ibrahima": 1050, "ibraim": [1045, 1046, 1047], "ib\u00e1\u00f1ez": [1048, 1049, 1052], "ic": [47, 293, 327, 377, 380, 400, 508, 510, 518, 640, 641, 1035, 1052, 1053], "ica": [11, 125, 427, 1025, 1034, 1035], "ica_estim": 123, "icann": 704, "icassp": 1009, "icdm": [571, 1015], "icdmw": 415, "ice_lines_kw": 640, "icml": [62, 64, 413, 415, 423, 444, 446, 847, 849, 868, 1009, 1011, 1023, 1027], "icml03": 849, "icml09": [539, 545], "icon": [332, 385], "icyblad": 1047, "id": [2, 45, 52, 57, 235, 309, 365, 377, 378, 383, 391, 417, 419, 423, 429, 502, 503, 504, 924, 926, 951, 1048, 1049, 1052], "id3": [1031, 1035], "idea": [44, 88, 113, 114, 143, 172, 179, 190, 218, 237, 269, 301, 346, 361, 370, 371, 383, 388, 389, 417, 418, 419, 420, 421, 422, 424, 615, 616, 1005, 1006, 1009, 1012, 1015, 1027, 1033], "ideal": [217, 219, 235, 269, 272, 275, 282, 284, 285, 366, 382, 383, 384, 387, 388, 391, 395, 397, 413, 414, 734, 764, 998, 1008, 1023, 1024, 1029, 1032], "idelberg": 1057, "ident": [52, 57, 99, 149, 212, 217, 235, 244, 248, 340, 357, 378, 385, 397, 412, 415, 416, 417, 419, 425, 428, 445, 446, 459, 471, 472, 480, 482, 483, 486, 487, 488, 495, 511, 559, 567, 568, 572, 573, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 651, 687, 688, 707, 712, 713, 744, 793, 803, 810, 813, 823, 824, 827, 828, 854, 855, 861, 869, 870, 876, 877, 889, 901, 920, 921, 1002, 1003, 1006, 1009, 1012, 1013, 1024, 1044, 1048, 1049, 1050, 1054, 1058], "identif": [378, 383, 415, 505, 998], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 377, 378, 382, 383, 388, 397, 414, 415, 416, 419, 422, 423, 453, 457, 464, 494, 504, 516, 517, 563, 564, 565, 566, 571, 572, 573, 574, 614, 651, 657, 707, 720, 782, 837, 858, 877, 907, 908, 998, 1005, 1009, 1015, 1022, 1033, 1047, 1049, 1054, 1055], "idf": [2, 54, 57, 248, 357, 358, 359, 378, 420, 529, 552, 596, 597, 598, 599, 851, 859, 884, 998, 1007, 1011, 1019, 1040], "idf_": [423, 598, 599, 1048], "idier": [420, 546, 548, 555], "idiom": 389, "idl": 1051, "ido": [1055, 1056], "idpol": [217, 235], "idx": [50, 57, 80, 90, 132, 139, 143, 146, 153, 159, 183, 191, 193, 202, 209, 216, 217, 226, 238, 269, 362, 416, 419], "idx_a": 284, "idx_b": 284, "idx_r": 216, "idx_sort": 217, "idxmax": 353, "idxmin": 273, "ie": [75, 101, 124, 447, 712, 1005, 1019], "ieee": [98, 112, 114, 380, 415, 417, 424, 428, 455, 482, 542, 571, 672, 693, 694, 733, 777, 1005, 1009, 1015], "ieeexplor": 777, "ieic": [546, 548, 555], "iem": 666, "if_binari": [190, 258, 885, 1019, 1051], "if_delegate_has_method": [1053, 1054], "iff": [600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 883], "iforest": 254, "iforest_kw": 254, "iglesi": 1055, "ignacio": 1043, "ignor": [2, 43, 45, 47, 55, 79, 84, 90, 97, 105, 137, 142, 147, 155, 158, 191, 204, 217, 232, 245, 246, 251, 256, 258, 266, 312, 313, 321, 322, 326, 329, 350, 358, 371, 383, 385, 387, 389, 397, 401, 406, 415, 416, 422, 423, 433, 434, 437, 440, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 467, 468, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 495, 511, 516, 517, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 587, 589, 590, 591, 596, 597, 598, 599, 605, 610, 611, 618, 619, 635, 636, 637, 638, 640, 641, 643, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 715, 719, 721, 722, 734, 737, 738, 746, 763, 764, 771, 777, 782, 786, 791, 792, 795, 796, 805, 806, 807, 809, 810, 811, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 869, 870, 871, 872, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 904, 905, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 931, 945, 983, 992, 997, 1005, 1006, 1009, 1011, 1015, 1019, 1024, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058], "ignore_attribut": 377, "ignore_error": 89, "ignore_implicit_zero": [889, 901], "ignore_ti": [734, 764], "ignore_warn": [225, 318, 1046], "ignored_new_col": 416, "ignorerevsfil": 383, "igor": [1046, 1047, 1053], "ih": 301, "ii": [50, 124, 191, 224, 270, 380, 423, 590, 591, 597, 646, 674, 675, 875, 884, 1005, 1019, 1027, 1057], "iid": 1048, "iii": [1054, 1057], "iijima": 1049, "iinfo": 1055, "ij": [275, 306, 412, 415, 420, 546, 548, 555, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 1005, 1006, 1009, 1011, 1014, 1019, 1024], "ijcnn": 1009, "ijcv": 1009, "ijet": 415, "ik": [1005, 1009], "ikeda": 1052, "ikko": 1053, "il": [49, 672, 693, 694, 1005, 1009], "ilambharathi": [1043, 1044], "ili": [1056, 1057], "ilic": 1053, "ilion": 1054, "iliya": 1055, "iljin": [1055, 1056], "ill": [75, 115, 222, 314, 478, 479, 485, 658, 659, 662, 663, 664, 690, 691, 1005, 1008, 1050], "illustr": [48, 52, 60, 61, 63, 67, 69, 87, 91, 92, 104, 105, 108, 109, 111, 113, 118, 121, 125, 137, 140, 145, 152, 153, 155, 157, 158, 167, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 187, 189, 191, 192, 195, 206, 213, 214, 217, 219, 221, 225, 227, 228, 230, 231, 234, 235, 237, 238, 240, 242, 244, 246, 247, 249, 250, 251, 253, 264, 269, 275, 282, 287, 288, 289, 297, 305, 319, 321, 324, 325, 327, 333, 338, 346, 347, 351, 353, 354, 355, 358, 359, 364, 366, 370, 380, 383, 388, 391, 396, 414, 418, 420, 422, 423, 523, 618, 619, 621, 622, 623, 627, 630, 631, 861, 998, 1005, 1009, 1012, 1015, 1021, 1022, 1023, 1024, 1028, 1030, 1033], "iloc": [43, 153, 158, 190, 191, 235, 275, 299], "ilya": [1047, 1058], "im": [123, 133, 286, 300], "im_": 705, "im_kw": [705, 1054], "imacul": 1046, "imag": [2, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 81, 83, 86, 89, 93, 97, 102, 104, 122, 123, 128, 145, 170, 172, 178, 187, 208, 238, 246, 249, 253, 273, 305, 313, 314, 326, 335, 336, 357, 358, 375, 376, 378, 380, 383, 388, 391, 397, 401, 408, 414, 415, 420, 448, 452, 459, 469, 501, 502, 503, 504, 510, 511, 514, 515, 542, 543, 545, 549, 591, 592, 593, 594, 595, 615, 616, 699, 705, 746, 838, 882, 1005, 1009, 1010, 1012, 1014, 1021, 1025, 1028, 1030, 1033, 1035, 1040, 1043, 1048, 1049, 1053, 1055, 1056], "image_arrai": 83, "image_array_sampl": 83, "image_height": [591, 592, 595], "image_index": [335, 336], "image_nam": 514, "image_patch": 595, "image_reconstruct": 595, "image_s": 595, "image_shap": [123, 253], "image_width": [591, 592, 595], "imagebox": 238, "imageio": 377, "imagenet": [869, 870], "images_restor": 86, "imagin": [124, 174, 251, 350, 419, 420, 423, 1005], "imamura": 1054, "imbal": [268, 278, 289, 419, 715, 737, 738, 746, 791, 792, 795, 796, 1009], "imbalanc": [217, 269, 278, 282, 284, 289, 358, 395, 413, 419, 711, 716, 795, 809, 813, 849, 1009, 1011, 1017, 1028], "imbert": [1047, 1049, 1052, 1054, 1057, 1058], "img": [44, 85, 101, 514, 594], "img_height": 591, "img_shap": 145, "img_to_graph": [2, 81, 101, 423, 1043, 1053], "img_width": 591, "imit": 357, "immanuel": [0, 1040, 1041, 1045], "immedi": [90, 383, 395, 808, 822, 833, 834, 1048], "immens": 1033, "immensu": 1048, "immers": [698, 702], "immobil": 43, "immut": 409, "imp": 999, "imp_mean": [635, 638], "imp_reshap": 145, "impact": [51, 52, 62, 71, 72, 77, 78, 99, 109, 137, 168, 187, 189, 190, 191, 198, 219, 221, 235, 254, 268, 269, 293, 299, 321, 330, 353, 358, 366, 370, 371, 376, 395, 398, 413, 415, 420, 454, 456, 544, 548, 555, 598, 674, 675, 676, 680, 682, 684, 685, 686, 700, 802, 808, 811, 812, 822, 835, 852, 853, 854, 855, 889, 901, 912, 913, 941, 956, 979, 982, 998, 1008, 1016, 1024, 1030, 1047, 1050, 1053], "imped": 391, "imperfect": [736, 793, 1009, 1042], "imperfectli": [711, 742, 1009], "implant": 59, "implement": [2, 13, 30, 45, 46, 52, 53, 55, 81, 91, 114, 123, 143, 153, 186, 193, 195, 202, 206, 231, 235, 237, 244, 250, 251, 269, 273, 275, 284, 293, 295, 296, 298, 301, 319, 325, 326, 327, 328, 329, 331, 357, 359, 370, 371, 372, 377, 378, 380, 381, 383, 384, 385, 388, 389, 391, 392, 397, 401, 406, 411, 412, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 444, 449, 450, 451, 453, 454, 455, 456, 457, 482, 501, 504, 516, 540, 541, 542, 543, 544, 546, 549, 550, 551, 561, 562, 563, 565, 566, 569, 570, 571, 575, 580, 590, 596, 597, 599, 601, 605, 609, 618, 619, 640, 641, 648, 649, 653, 654, 661, 665, 666, 667, 671, 672, 676, 679, 680, 682, 683, 684, 685, 686, 692, 693, 694, 695, 696, 699, 700, 703, 715, 719, 728, 743, 746, 750, 786, 790, 796, 797, 805, 807, 808, 811, 812, 814, 822, 826, 827, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 857, 860, 862, 863, 868, 869, 870, 872, 894, 902, 903, 909, 912, 913, 914, 915, 916, 917, 918, 955, 956, 965, 968, 973, 977, 979, 998, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1019, 1021, 1022, 1025, 1026, 1028, 1029, 1031, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "impli": [43, 174, 190, 357, 358, 359, 420, 422, 425, 481, 581, 590, 618, 619, 630, 743, 942, 1005, 1006, 1051], "implic": [366, 383], "implicit": [2, 217, 397, 422, 423, 580, 690, 691, 1003, 1008, 1028, 1049], "implicitli": [359, 392, 422, 605, 640, 641, 891, 999, 1001, 1016, 1019, 1024, 1058], "import": [2, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 372, 377, 378, 379, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 400, 401, 402, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 969, 970, 971, 972, 973, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1030, 1033, 1035, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1058], "importance_gett": [424, 601, 602, 605, 1052], "importances_mean": [144, 151, 192, 193, 325, 642, 1017], "importances_std": [144, 642, 1017], "important_word": 57, "importantli": [43, 53, 124, 180, 191, 195, 316, 383, 415, 1058], "importerror": [50, 88, 126, 296, 309, 391], "importlib": 1053, "impos": [74, 92, 155, 205, 211, 221, 322, 395, 415, 420, 422, 423, 535, 665, 1005], "imposs": [150, 359, 1029], "impract": 917, "impress": 1033, "improp": [397, 1047], "improv": [0, 30, 43, 61, 62, 69, 111, 112, 115, 128, 133, 137, 138, 143, 146, 148, 149, 150, 152, 153, 158, 168, 186, 190, 195, 203, 217, 225, 235, 269, 276, 278, 293, 296, 299, 314, 321, 331, 349, 350, 358, 366, 371, 381, 386, 388, 389, 391, 392, 395, 397, 398, 409, 420, 422, 424, 456, 457, 539, 540, 542, 545, 546, 547, 549, 550, 551, 554, 562, 565, 566, 567, 568, 569, 570, 572, 573, 618, 619, 651, 660, 672, 674, 675, 676, 680, 681, 682, 683, 684, 686, 693, 695, 700, 737, 738, 791, 792, 795, 796, 861, 869, 870, 886, 888, 900, 920, 921, 923, 956, 998, 1003, 1005, 1006, 1009, 1012, 1013, 1023, 1024, 1025, 1027, 1028, 1029, 1033, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "improvis": [50, 309], "impur": [151, 193, 365, 400, 422, 424, 561, 562, 565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923, 924, 926, 1025, 1035, 1045, 1046, 1047, 1048], "imput": [2, 105, 153, 158, 192, 246, 256, 258, 326, 329, 375, 387, 396, 397, 406, 416, 422, 497, 509, 573, 588, 635, 636, 637, 638, 647, 653, 680, 834, 855, 873, 937, 939, 1028, 1029, 1030, 1035, 1042, 1043], "imputation_const": 256, "imputation_mean": 256, "imputation_ord": [635, 1050], "imputation_sequence_": 635, "impute_estim": 185, "impute_scor": 186, "imran": [1042, 1043, 1044], "imread": 68, "imshow": [44, 45, 53, 68, 75, 81, 82, 83, 85, 86, 88, 89, 93, 115, 123, 126, 133, 176, 177, 178, 182, 193, 208, 233, 238, 253, 286, 300, 314, 335, 336, 346, 354, 377, 640, 705, 1054], "in1d": 1047, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 90, "inaccur": 1059, "inact": [359, 377, 383], "inadvert": [189, 397], "inadvis": 409, "inappropri": [378, 419, 425, 717, 829], "inbuilt": 419, "inc": [0, 104, 274, 999, 1021, 1033], "incap": 90, "incentiv": 387, "incept": 1029, "includ": [0, 11, 18, 43, 68, 70, 90, 113, 143, 147, 148, 149, 189, 190, 192, 202, 217, 221, 235, 251, 276, 293, 296, 312, 316, 328, 329, 331, 346, 351, 357, 359, 366, 370, 371, 377, 379, 381, 383, 384, 385, 387, 388, 389, 391, 392, 397, 398, 401, 409, 412, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 451, 453, 457, 463, 473, 476, 477, 478, 479, 480, 481, 482, 483, 496, 497, 498, 504, 508, 509, 510, 512, 513, 518, 542, 549, 565, 572, 582, 640, 646, 654, 655, 660, 668, 669, 670, 673, 689, 696, 697, 705, 721, 737, 738, 743, 745, 746, 779, 791, 792, 795, 803, 808, 810, 811, 812, 821, 822, 825, 828, 835, 838, 860, 862, 863, 864, 885, 886, 887, 891, 909, 912, 913, 920, 922, 924, 926, 938, 939, 942, 944, 948, 950, 951, 965, 998, 1005, 1008, 1009, 1010, 1012, 1013, 1019, 1023, 1024, 1025, 1028, 1029, 1032, 1033, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "include_bia": [43, 197, 290, 887, 891, 1054], "include_boundari": [942, 1054], "include_self": [74, 79, 102, 703, 865, 866, 1044], "include_valu": 705, "inclus": [0, 383, 385, 391, 457, 463, 762, 794, 1009, 1010, 1040, 1054], "incom": [316, 378, 447], "incoming_count": 55, "incompat": [504, 999, 1048, 1049], "incomplet": [383, 401, 411, 415, 713, 803, 999, 1006, 1044, 1046], "inconsist": [2, 397, 409, 423, 516, 517, 584, 914, 917, 942, 1015, 1024, 1035, 1040, 1045, 1046, 1047, 1048, 1050, 1053, 1055, 1056, 1057], "inconsistentversionwarn": [2, 409, 1056], "incorpor": [331, 383, 416, 422, 1008, 1028, 1033], "incorrect": [137, 189, 338, 366, 383, 415, 615, 616, 640, 641, 742, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1059], "incorrectli": [199, 282, 422, 423, 561, 567, 569, 742, 748, 1009, 1041, 1046, 1048, 1049, 1051, 1056], "incr_mean_variance_axi": [2, 1046, 1052], "increas": [2, 43, 46, 54, 63, 72, 78, 90, 92, 93, 96, 109, 126, 137, 138, 140, 143, 146, 148, 153, 155, 168, 172, 174, 178, 179, 180, 190, 191, 195, 198, 200, 208, 217, 218, 219, 221, 235, 242, 248, 261, 262, 269, 275, 276, 277, 282, 288, 289, 311, 317, 318, 321, 327, 333, 336, 346, 353, 358, 359, 361, 370, 371, 372, 382, 391, 392, 397, 413, 415, 417, 420, 422, 423, 426, 447, 451, 453, 459, 470, 478, 479, 485, 540, 544, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 635, 643, 644, 645, 653, 658, 659, 662, 663, 664, 666, 667, 674, 675, 676, 684, 685, 686, 690, 691, 693, 694, 700, 714, 715, 720, 786, 790, 797, 811, 812, 841, 860, 862, 863, 864, 867, 869, 870, 886, 912, 920, 921, 922, 923, 956, 998, 1000, 1004, 1005, 1006, 1008, 1009, 1012, 1019, 1023, 1024, 1025, 1033, 1040, 1042, 1045, 1049, 1051, 1052, 1055, 1058], "increasing_": 643, "increasing_bool": 644, "increment": [2, 106, 122, 128, 129, 130, 131, 187, 278, 387, 389, 449, 454, 470, 512, 541, 542, 543, 544, 547, 549, 552, 610, 654, 666, 674, 814, 836, 844, 845, 847, 848, 849, 850, 851, 881, 882, 892, 912, 913, 983, 1005, 1011, 1030, 1043, 1044], "incrementalpca": [2, 127, 372, 420, 541, 543, 547, 549, 552, 1044, 1047, 1048, 1050, 1051, 1054], "incur": [63, 627, 912, 1024, 1048], "ind": [53, 77, 149, 160, 358, 852, 853], "inde": [44, 46, 62, 64, 70, 74, 75, 88, 90, 93, 115, 118, 128, 137, 140, 171, 172, 174, 190, 192, 197, 202, 204, 206, 217, 219, 277, 278, 282, 284, 293, 296, 316, 321, 353, 358, 366, 370, 382, 388, 396, 397, 398, 415, 417, 422, 575, 576, 1005, 1019, 1023, 1054], "indecisiveus": [1051, 1052], "indefinit": 387, "indent": [385, 974], "independ": [2, 32, 52, 62, 64, 72, 81, 124, 125, 127, 142, 146, 181, 191, 253, 254, 275, 278, 280, 284, 295, 316, 323, 325, 358, 366, 370, 371, 379, 385, 396, 397, 401, 409, 412, 413, 415, 416, 417, 418, 419, 423, 427, 456, 471, 495, 511, 523, 524, 525, 526, 528, 540, 541, 543, 545, 547, 548, 554, 555, 559, 560, 612, 615, 616, 633, 648, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 680, 681, 682, 683, 712, 713, 725, 744, 745, 763, 765, 803, 810, 837, 841, 843, 845, 846, 884, 888, 889, 890, 892, 896, 897, 898, 899, 901, 902, 903, 906, 914, 915, 916, 917, 918, 950, 998, 1001, 1003, 1005, 1006, 1009, 1010, 1011, 1014, 1016, 1019, 1024, 1025, 1034, 1035, 1040, 1041, 1046, 1048, 1050, 1055], "inder128": 1050, "inderjeet": 1051, "inderjit": [412, 460], "indeterminaci": 552, "index": [2, 51, 54, 55, 72, 73, 74, 75, 76, 84, 85, 93, 105, 106, 137, 142, 144, 153, 169, 172, 185, 189, 190, 191, 192, 193, 217, 221, 235, 255, 258, 261, 262, 266, 270, 273, 274, 275, 276, 278, 286, 287, 289, 296, 316, 321, 322, 323, 329, 333, 335, 336, 358, 359, 378, 380, 381, 383, 385, 387, 392, 395, 397, 412, 416, 419, 420, 422, 423, 430, 450, 454, 455, 456, 457, 458, 460, 461, 464, 466, 467, 471, 474, 511, 517, 565, 566, 567, 568, 572, 573, 574, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 625, 640, 641, 648, 705, 712, 713, 720, 724, 726, 739, 746, 765, 787, 788, 794, 796, 802, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 838, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 885, 920, 921, 922, 923, 929, 960, 979, 982, 987, 988, 1009, 1011, 1012, 1013, 1023, 1025, 1028, 1040, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "index_alpha_path_a": 204, "index_alpha_path_b": 204, "index_map": 55, "indexerror": [1048, 1049], "indexhash": 648, "indexhash_": 648, "indian": 378, "indic": [2, 51, 57, 58, 62, 63, 83, 94, 95, 101, 109, 118, 120, 123, 137, 142, 148, 179, 182, 186, 189, 191, 214, 239, 248, 251, 268, 269, 277, 278, 281, 282, 296, 309, 335, 336, 339, 357, 358, 359, 365, 371, 378, 383, 384, 385, 387, 391, 392, 395, 397, 411, 412, 413, 415, 417, 419, 420, 422, 423, 426, 430, 435, 444, 447, 451, 457, 458, 459, 460, 462, 463, 464, 467, 471, 474, 479, 494, 516, 517, 519, 520, 521, 531, 540, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 589, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 628, 635, 636, 637, 638, 640, 641, 647, 654, 655, 658, 659, 660, 661, 662, 663, 669, 671, 673, 681, 683, 690, 691, 698, 700, 702, 704, 711, 715, 720, 721, 726, 727, 728, 730, 733, 736, 737, 738, 739, 742, 746, 747, 748, 749, 762, 779, 786, 787, 788, 789, 791, 792, 793, 795, 796, 800, 801, 802, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 845, 846, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 876, 879, 883, 885, 893, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 928, 929, 934, 938, 939, 944, 960, 971, 972, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 999, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1016, 1019, 1020, 1023, 1024, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059], "indicator_": [635, 636, 638], "indicator_matrix_": 1045, "indigo": 234, "indirect": [278, 384, 397], "indirectli": [235, 350], "indispens": 1033, "indistinguish": 316, "individu": [2, 43, 81, 95, 113, 136, 138, 140, 158, 167, 170, 183, 187, 188, 190, 193, 217, 235, 245, 254, 255, 269, 278, 280, 295, 325, 332, 333, 350, 353, 371, 384, 385, 387, 390, 392, 397, 400, 406, 412, 416, 419, 422, 423, 444, 459, 469, 471, 504, 509, 511, 517, 563, 564, 567, 568, 570, 571, 573, 575, 576, 577, 578, 611, 617, 618, 640, 641, 651, 653, 665, 666, 667, 676, 679, 680, 681, 682, 683, 684, 685, 686, 695, 720, 727, 736, 742, 758, 759, 793, 798, 799, 808, 822, 840, 844, 845, 847, 848, 849, 850, 851, 870, 873, 881, 882, 884, 885, 886, 889, 891, 892, 897, 898, 899, 912, 913, 1009, 1010, 1019, 1024, 1030, 1035, 1041, 1044, 1046, 1052, 1054, 1056], "indptr": [55, 296, 365, 983, 984, 985, 986, 987, 988, 989, 990, 991, 1048, 1056], "induc": [25, 63, 91, 190, 202, 208, 210, 215, 218, 232, 250, 254, 353, 359, 412, 420, 422, 453, 456, 547, 551, 561, 565, 566, 567, 568, 572, 573, 574, 651, 734, 764, 885, 920, 921, 922, 923, 1002, 1009, 1023], "induct": [43, 47, 64, 71, 135, 150, 182, 187, 251, 397, 415, 422, 429, 448, 520, 572, 635, 639, 907, 908, 969, 992, 1005, 1022, 1030, 1042], "inductive_learn": 91, "inductivecluster": 91, "industri": [415, 1028], "ineffect": [320, 413, 1019, 1048, 1049], "ineffici": [2, 422, 450, 582, 840, 841, 1012, 1014], "inequ": [365, 397, 415, 450, 454, 466, 707, 1006, 1007, 1012], "inertia": [92, 93, 96, 358, 415, 450, 454, 456, 459, 466, 467, 469, 470, 1051], "inertia_": [93, 96, 99, 450, 454, 456, 1051], "inf": [109, 177, 306, 392, 415, 425, 453, 457, 462, 463, 464, 468, 478, 479, 485, 561, 562, 567, 568, 601, 602, 605, 614, 615, 616, 627, 635, 643, 645, 656, 657, 658, 660, 677, 679, 680, 684, 685, 686, 688, 695, 736, 738, 754, 786, 793, 797, 868, 877, 884, 936, 937, 938, 939, 954, 1009, 1019, 1047, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1058], "infant": 1019, "infeas": [1005, 1012, 1014], "infer": [25, 187, 188, 190, 212, 261, 265, 266, 275, 362, 377, 385, 395, 409, 419, 420, 499, 504, 516, 517, 523, 542, 544, 546, 548, 555, 557, 558, 561, 567, 568, 640, 643, 665, 717, 730, 731, 749, 793, 805, 806, 814, 831, 838, 848, 886, 893, 907, 908, 920, 921, 922, 923, 971, 999, 1005, 1008, 1009, 1014, 1019, 1022, 1025, 1028, 1029, 1030, 1041, 1045, 1046, 1051, 1054, 1057], "inferencesess": 409, "inferenti": 91, "inferior": [448, 452, 1051], "infin": [2, 275, 353, 549, 690, 691, 720, 833, 919, 937, 1012], "infinit": [64, 218, 260, 278, 350, 370, 425, 453, 630, 631, 786, 805, 936, 938, 939, 1001, 1008, 1019, 1024, 1048, 1050, 1053, 1054, 1055, 1057, 1058], "inflammatori": 378, "inflat": [92, 189, 190, 192, 415, 419, 1009, 1019], "inflect": 277, "influenc": [42, 48, 52, 113, 114, 137, 187, 190, 200, 260, 283, 316, 323, 346, 350, 353, 366, 372, 417, 420, 422, 438, 447, 461, 472, 489, 490, 491, 496, 509, 562, 564, 566, 568, 570, 573, 576, 578, 619, 636, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 684, 686, 687, 742, 758, 838, 845, 846, 854, 855, 862, 863, 870, 889, 890, 901, 913, 915, 918, 921, 923, 938, 998, 1003, 1004, 1005, 1012, 1015, 1019, 1023, 1024, 1030, 1033, 1043, 1048, 1049], "influenti": [221, 358, 1033], "info": [2, 45, 77, 105, 123, 190, 191, 251, 269, 273, 380, 382, 387, 397, 423, 471, 504, 569, 570, 964], "inform": [2, 3, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 84, 88, 93, 101, 102, 104, 105, 118, 120, 129, 143, 144, 145, 166, 168, 169, 171, 172, 174, 179, 187, 190, 191, 193, 195, 196, 197, 198, 202, 218, 221, 232, 234, 235, 251, 255, 262, 263, 265, 269, 270, 272, 275, 276, 277, 280, 282, 284, 299, 302, 303, 306, 323, 328, 332, 349, 353, 357, 358, 359, 362, 365, 366, 370, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 391, 395, 396, 397, 398, 406, 409, 412, 414, 419, 420, 422, 423, 424, 425, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 500, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 518, 523, 532, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 614, 615, 616, 617, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 698, 699, 700, 703, 705, 709, 712, 713, 723, 734, 738, 751, 763, 764, 765, 794, 796, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 931, 965, 992, 997, 999, 1001, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1023, 1025, 1029, 1030, 1032, 1033, 1040, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "informatik": 1009, "informed": 1009, "infrastructur": [313, 331, 1028, 1029], "infrequ": [885, 886, 893, 1009, 1040, 1054, 1055, 1056], "infrequent_categories_": [329, 331, 885, 886, 893, 1019], "infrequent_if_exist": [885, 1019], "infrequent_sklearn": [885, 1019], "infti": [235, 425, 627, 1005, 1019, 1047], "ing": 423, "ingela": 1054, "ingest": 423, "ingredi": 425, "ingrid": 1050, "inher": [133, 212, 366, 415, 420, 571, 999, 1001, 1003, 1004, 1006, 1010], "inherit": [251, 383, 385, 396, 397, 429, 585, 684, 932, 948, 950, 961, 1005, 1040, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1055, 1056, 1057], "inhibit": [426, 451], "inhomogen": [425, 622], "ini": 263, "init": [2, 54, 77, 80, 93, 94, 96, 99, 191, 198, 237, 238, 240, 241, 242, 261, 263, 296, 358, 386, 391, 415, 420, 422, 450, 454, 456, 458, 460, 466, 467, 546, 548, 555, 556, 567, 568, 640, 641, 698, 700, 702, 861, 1006, 1040, 1049, 1052, 1054, 1055, 1056], "init_": [567, 568], "init_param": [260, 263, 266, 805, 806], "init_s": [96, 358, 456], "init_size_": 1052, "init_tim": 263, "initi": [0, 46, 51, 55, 71, 77, 78, 80, 92, 93, 95, 98, 99, 114, 151, 159, 160, 161, 175, 180, 187, 190, 198, 210, 232, 237, 238, 242, 259, 261, 262, 275, 296, 327, 337, 346, 358, 366, 371, 378, 383, 385, 391, 392, 395, 397, 415, 420, 422, 424, 425, 427, 449, 450, 454, 455, 456, 457, 458, 459, 460, 466, 467, 468, 469, 520, 523, 539, 540, 541, 545, 546, 548, 551, 553, 554, 555, 556, 561, 562, 567, 568, 571, 601, 615, 616, 618, 619, 627, 628, 635, 648, 653, 654, 655, 656, 660, 661, 666, 668, 669, 670, 671, 674, 675, 676, 677, 679, 684, 685, 686, 688, 689, 692, 698, 699, 700, 702, 703, 805, 806, 842, 861, 868, 869, 870, 908, 941, 955, 956, 977, 982, 983, 1001, 1005, 1006, 1008, 1013, 1014, 1015, 1023, 1025, 1028, 1030, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "initial_imputer_": 635, "initial_strategi": 635, "initial_theta": [618, 619], "initialis": [123, 546, 548, 555, 1040, 1048, 1049], "initializedcheck": 384, "inject": [254, 378, 422], "inki": 1046, "inli": [244, 1005, 1015], "inlier": [113, 154, 220, 244, 254, 316, 397, 417, 437, 476, 571, 679, 685, 858, 889, 901, 915, 916, 918, 1005, 1015, 1047, 1048, 1053], "inlier_mask": 220, "inlier_mask_": [220, 679], "inlier_plot": 113, "inliers_mask": 114, "inlin": [228, 383, 384, 1025], "inner": [64, 128, 150, 153, 276, 280, 295, 337, 370, 423, 450, 522, 590, 597, 626, 656, 677, 688, 783, 785, 1001, 1009, 1019, 1024, 1041, 1044, 1054, 1057], "inner_clf": 1009, "inner_cv": [280, 332], "inner_it": 389, "inner_numb": 337, "inner_stat": 1054, "inner_stats_": 1054, "inpaint": 420, "inplac": [2, 235, 254, 287, 461, 489, 490, 491, 492, 867, 875, 878, 881, 882, 884, 888, 889, 890, 892, 981, 984, 985, 986, 990, 991, 1049], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 392], "inplace_csr_row_normalize_l1": [2, 392], "inplace_csr_row_normalize_l2": [2, 392], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 43, 45, 49, 64, 67, 69, 107, 123, 127, 146, 150, 151, 180, 181, 182, 190, 195, 197, 217, 220, 221, 225, 232, 235, 247, 248, 250, 251, 258, 270, 293, 300, 301, 313, 317, 318, 319, 320, 325, 328, 330, 333, 346, 350, 354, 359, 377, 380, 383, 386, 388, 392, 393, 395, 396, 397, 409, 412, 413, 416, 419, 420, 421, 422, 423, 424, 425, 427, 433, 436, 437, 438, 439, 440, 444, 445, 446, 447, 448, 449, 452, 455, 456, 457, 461, 464, 465, 468, 471, 472, 474, 475, 476, 478, 479, 489, 490, 491, 496, 511, 517, 524, 525, 526, 528, 532, 536, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 628, 630, 635, 636, 637, 638, 639, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 693, 694, 695, 696, 697, 698, 700, 701, 704, 705, 706, 707, 708, 709, 710, 729, 730, 731, 732, 736, 753, 754, 756, 758, 759, 761, 762, 769, 775, 779, 780, 782, 786, 787, 788, 789, 793, 798, 799, 805, 806, 807, 808, 811, 812, 814, 822, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899, 900, 904, 905, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 929, 931, 932, 933, 935, 936, 937, 938, 939, 940, 944, 950, 953, 955, 965, 967, 968, 972, 981, 983, 989, 990, 991, 994, 995, 997, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1017, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "input_featur": [197, 385, 397, 431, 436, 449, 450, 452, 454, 456, 471, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 574, 575, 576, 577, 578, 589, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 696, 697, 700, 856, 861, 864, 868, 871, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 1056], "input_nam": [937, 939, 971, 1054], "input_tag": 931, "input_typ": [359, 423, 590], "inputtag": [2, 931], "inria": [0, 666, 1040], "insensit": [250, 651, 684, 686, 796, 913, 1002, 1023, 1024, 1040], "insepar": [172, 380], "insert": [95, 190, 217, 395, 415, 494, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 927], "insid": [2, 55, 57, 63, 191, 219, 251, 275, 337, 346, 372, 377, 378, 385, 389, 406, 415, 423, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 807, 809, 810, 815, 817, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 965, 968, 1016, 1033, 1057], "insight": [43, 46, 190, 191, 205, 218, 219, 235, 269, 313, 316, 357, 365, 413, 414, 808, 811, 812, 822, 835, 1016, 1025, 1033], "insist": 104, "inspect": [2, 43, 48, 66, 67, 70, 91, 96, 139, 144, 151, 153, 154, 155, 159, 169, 174, 179, 180, 190, 191, 192, 193, 201, 209, 226, 231, 255, 269, 275, 278, 287, 299, 304, 307, 321, 325, 326, 327, 328, 330, 332, 342, 343, 344, 345, 347, 348, 350, 357, 362, 371, 385, 397, 415, 416, 422, 423, 471, 561, 562, 565, 566, 567, 568, 572, 573, 574, 639, 640, 641, 642, 841, 872, 873, 920, 921, 922, 923, 996, 1009, 1010, 1013, 1016, 1017, 1024, 1028, 1030, 1035, 1043], "inspir": [112, 155, 191, 235, 383, 395, 422, 569, 570, 943, 999, 1049], "instabl": [74, 190, 306, 425, 459, 543, 547, 551, 703, 1047, 1050, 1053], "instal": [88, 258, 296, 325, 326, 327, 328, 329, 330, 331, 332, 333, 370, 371, 383, 384, 386, 387, 389, 391, 395, 396, 402, 408, 409, 411, 415, 423, 459, 469, 504, 699, 703, 1025, 1047, 1048, 1049, 1053, 1054], "installment_commit": 269, "instanc": [2, 43, 47, 49, 52, 61, 63, 64, 88, 91, 93, 140, 153, 169, 172, 186, 191, 192, 201, 202, 246, 251, 254, 269, 271, 273, 284, 286, 287, 307, 325, 332, 340, 342, 343, 349, 350, 357, 358, 359, 369, 370, 371, 377, 378, 380, 381, 382, 383, 385, 388, 389, 391, 392, 395, 397, 401, 406, 409, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 429, 439, 440, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 495, 498, 500, 503, 504, 505, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 589, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 618, 619, 628, 635, 636, 637, 638, 640, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 715, 728, 737, 738, 746, 779, 782, 786, 787, 788, 789, 791, 792, 795, 796, 797, 800, 801, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 901, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 938, 939, 941, 950, 951, 955, 956, 964, 965, 966, 967, 977, 978, 979, 982, 992, 993, 997, 998, 999, 1005, 1006, 1009, 1011, 1012, 1015, 1017, 1019, 1023, 1024, 1025, 1029, 1035, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "instanci": 1049, "instant": 211, "instantan": 516, "instanti": [106, 177, 328, 386, 406, 422, 457, 575, 576, 610, 638, 808, 811, 812, 814, 822, 831, 833, 834, 835, 836, 837, 839, 946, 1015, 1040, 1048, 1052, 1056], "instead": [0, 43, 44, 45, 52, 58, 83, 88, 90, 91, 92, 105, 128, 140, 145, 155, 169, 172, 174, 217, 219, 232, 235, 241, 254, 266, 271, 272, 276, 277, 295, 301, 316, 325, 326, 327, 328, 329, 346, 348, 350, 357, 359, 365, 366, 370, 371, 377, 378, 381, 382, 383, 384, 385, 387, 388, 391, 392, 395, 396, 397, 406, 409, 411, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 438, 444, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 463, 466, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 517, 518, 541, 542, 543, 546, 548, 549, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 615, 616, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 638, 640, 643, 646, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 698, 700, 702, 715, 717, 750, 754, 782, 786, 787, 788, 790, 791, 805, 806, 807, 808, 809, 810, 811, 812, 815, 817, 820, 822, 824, 826, 827, 828, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 873, 874, 875, 877, 878, 879, 884, 885, 890, 891, 892, 902, 903, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 925, 926, 944, 951, 956, 965, 983, 998, 999, 1001, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1019, 1023, 1024, 1025, 1028, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "instinct": 357, "institut": [0, 269, 380, 1012], "instruct": [370, 383, 384, 385, 386, 387, 388, 391, 395, 396, 397, 511, 596, 597, 599, 1032, 1040], "instrument": [51, 104, 124, 189], "insuffici": [400, 1008], "insur": [187, 196, 217, 414, 471, 504, 560, 656, 677, 688, 714, 753, 758, 760, 838, 873, 876, 877, 885, 892, 1005, 1030], "int": [47, 49, 52, 53, 55, 72, 79, 97, 114, 140, 149, 153, 154, 164, 165, 175, 176, 177, 183, 186, 189, 199, 208, 210, 217, 235, 242, 244, 250, 254, 260, 269, 270, 273, 274, 275, 296, 301, 303, 309, 323, 336, 359, 378, 383, 385, 395, 397, 413, 416, 419, 423, 426, 427, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 511, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 615, 616, 618, 619, 625, 635, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 712, 713, 715, 717, 721, 734, 735, 737, 738, 739, 742, 746, 764, 765, 777, 782, 786, 787, 788, 789, 790, 791, 792, 795, 797, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 934, 938, 939, 941, 942, 955, 956, 958, 959, 960, 962, 973, 977, 979, 982, 987, 988, 1005, 1016, 1040, 1046, 1050, 1051], "int32": [254, 296, 323, 383, 397, 450, 454, 456, 458, 460, 466, 914, 915, 916, 917, 918, 973, 1024, 1049, 1055, 1056, 1057], "int64": [43, 53, 89, 105, 190, 191, 269, 284, 289, 293, 322, 332, 365, 397, 423, 433, 449, 455, 457, 504, 522, 523, 527, 593, 596, 648, 654, 655, 660, 661, 673, 722, 723, 726, 752, 802, 848, 877, 906, 936, 963, 994, 1010, 1048, 1051, 1053, 1055, 1056, 1057], "int64dtyp": 1057, "intact": 885, "integ": [2, 43, 55, 83, 88, 105, 190, 217, 235, 326, 327, 366, 370, 377, 378, 380, 385, 388, 392, 396, 397, 415, 416, 419, 420, 422, 423, 440, 444, 469, 471, 474, 479, 494, 504, 506, 509, 510, 511, 513, 516, 517, 520, 522, 523, 527, 530, 558, 567, 568, 569, 570, 571, 575, 576, 580, 590, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 640, 641, 652, 659, 663, 667, 673, 681, 683, 684, 686, 707, 722, 743, 808, 810, 811, 812, 813, 815, 817, 822, 823, 824, 827, 828, 830, 832, 835, 843, 846, 848, 851, 852, 853, 877, 885, 886, 891, 892, 893, 896, 906, 908, 920, 921, 922, 923, 934, 971, 972, 973, 977, 999, 1005, 1010, 1012, 1019, 1022, 1024, 1025, 1040, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "integr": [0, 52, 77, 105, 169, 182, 206, 313, 327, 371, 381, 385, 386, 387, 389, 391, 397, 401, 420, 425, 453, 723, 763, 794, 983, 1008, 1016, 1033, 1041, 1043, 1044, 1052, 1053, 1057, 1059], "intel": [1009, 1028], "intelex": [401, 1028], "intellectu": 189, "intellig": [98, 172, 269, 357, 380, 415, 422, 455, 563, 564, 646, 704, 733, 842, 869, 870, 1010, 1021, 1029, 1033], "intend": [92, 93, 127, 218, 258, 350, 357, 383, 384, 390, 395, 397, 415, 419, 475, 590, 681, 707, 881, 882, 892, 910, 929, 1004, 1005, 1009, 1013, 1020, 1028, 1059], "intens": [101, 126, 296, 380, 384, 395, 397, 420, 450, 454, 466, 615, 616, 640, 641, 810, 998, 1016, 1033, 1048], "intention": 64, "inter": [2, 75, 144, 366, 422, 724], "interact": [2, 42, 151, 153, 187, 217, 242, 246, 276, 326, 382, 384, 385, 387, 389, 395, 397, 398, 409, 416, 567, 568, 569, 570, 640, 641, 887, 891, 998, 1001, 1005, 1006, 1007, 1014, 1016, 1019, 1027, 1029, 1042, 1047, 1054, 1055], "interaction_cst": [191, 330, 422, 569, 570, 1055], "interaction_onli": [43, 887, 1005, 1019], "interactiveshellapp": 389, "intercept": [126, 209, 226, 234, 354, 397, 489, 490, 491, 557, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 887, 891, 894, 912, 913, 919, 1005, 1007, 1009, 1014, 1023, 1024, 1043, 1045, 1049, 1050], "intercept_": [200, 207, 209, 226, 252, 344, 351, 354, 385, 397, 489, 490, 491, 557, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 912, 913, 914, 915, 916, 917, 918, 1003, 1005, 1023, 1024, 1040, 1047, 1052, 1054, 1057], "intercept_hidden_": 868, "intercept_init": [674, 675, 676, 684, 686], "intercept_sc": [210, 666, 667, 912, 913, 919, 1005, 1024], "intercept_visible_": 868, "intercepts_": [869, 870, 1013], "interchang": [1028, 1057], "interclass": 75, "interdepend": 523, "interest": [0, 43, 45, 52, 77, 79, 85, 90, 97, 101, 106, 137, 145, 150, 158, 169, 172, 179, 185, 190, 191, 192, 206, 217, 218, 219, 235, 238, 249, 268, 269, 272, 275, 276, 278, 284, 289, 293, 333, 346, 353, 358, 365, 370, 378, 380, 383, 388, 389, 391, 395, 398, 414, 415, 417, 420, 423, 425, 501, 502, 508, 512, 518, 654, 655, 912, 999, 1005, 1006, 1009, 1014, 1015, 1016, 1029, 1033, 1040, 1057], "interestingli": [111, 172, 1019], "interfac": [2, 42, 137, 187, 376, 377, 384, 385, 392, 395, 397, 419, 425, 426, 448, 452, 457, 504, 561, 707, 808, 811, 812, 822, 872, 873, 898, 993, 998, 1012, 1024, 1028, 1029, 1033, 1040, 1042, 1045, 1046, 1048, 1049, 1054, 1056], "interfer": [332, 1050], "interim": 1047, "interior": [678, 1005, 1055], "interleav": [2, 379, 395, 530], "intermedi": [43, 46, 87, 90, 142, 150, 254, 346, 395, 423, 567, 568, 627, 872, 1009, 1052, 1058], "intern": [0, 43, 63, 105, 115, 128, 143, 148, 151, 153, 163, 172, 175, 185, 187, 217, 251, 269, 289, 296, 298, 315, 322, 337, 359, 366, 371, 378, 380, 385, 389, 392, 395, 397, 406, 411, 412, 415, 419, 420, 422, 423, 424, 425, 426, 444, 446, 451, 472, 475, 519, 542, 543, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 601, 602, 618, 619, 648, 651, 654, 660, 676, 680, 684, 686, 704, 716, 739, 742, 766, 767, 791, 838, 852, 853, 868, 869, 870, 872, 873, 877, 891, 893, 907, 908, 910, 912, 913, 914, 917, 920, 921, 922, 923, 1005, 1006, 1007, 1009, 1012, 1015, 1019, 1021, 1024, 1025, 1030, 1033, 1040, 1043, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "internet": [378, 388, 1019], "interop": 1028, "interoper": [409, 425, 1029], "interp": [284, 285, 346], "interp1d": [661, 671, 692], "interp_tpr": 285, "interpol": [43, 53, 68, 75, 85, 86, 89, 93, 115, 123, 126, 178, 181, 187, 196, 197, 208, 233, 247, 253, 284, 290, 300, 301, 308, 314, 336, 346, 425, 643, 653, 661, 671, 680, 692, 708, 715, 855, 863, 873, 887, 891, 1000, 1005, 1009, 1019, 1030, 1047, 1052], "interpret": [43, 64, 153, 172, 181, 187, 188, 189, 191, 213, 217, 218, 222, 233, 235, 268, 275, 277, 278, 289, 314, 317, 320, 327, 357, 359, 370, 381, 383, 384, 389, 391, 392, 397, 400, 413, 415, 416, 421, 423, 459, 471, 472, 474, 504, 549, 580, 619, 647, 651, 661, 680, 681, 699, 700, 703, 709, 737, 761, 766, 767, 791, 800, 801, 814, 823, 835, 836, 838, 841, 873, 885, 892, 1003, 1005, 1009, 1010, 1016, 1017, 1019, 1025, 1028, 1030, 1040, 1041, 1045, 1048, 1053, 1054, 1055], "interquartil": [254, 890, 902], "interquartile_rang": 890, "interrog": 423, "interrupt": 1005, "intersect": [276, 343, 412, 415, 746], "interv": [2, 52, 64, 136, 153, 181, 187, 202, 217, 218, 219, 235, 275, 378, 397, 413, 419, 422, 425, 445, 446, 524, 525, 526, 565, 566, 568, 570, 572, 573, 643, 644, 646, 685, 750, 756, 758, 812, 829, 838, 875, 877, 891, 914, 915, 916, 942, 1001, 1005, 1009, 1019, 1025, 1030, 1047, 1051], "intervent": [90, 190], "intl": [64, 419], "intp": [430, 458, 460], "intra": [43, 596, 599, 800, 801], "intract": [91, 420, 1006, 1014], "intric": [221, 520], "intricaci": 383, "intrins": [197, 397, 420, 422, 1012, 1017, 1023, 1052], "introduc": [43, 111, 113, 114, 128, 153, 171, 187, 192, 197, 202, 221, 243, 248, 251, 254, 256, 282, 330, 331, 359, 379, 381, 383, 385, 387, 388, 391, 395, 397, 406, 413, 415, 417, 419, 420, 422, 423, 439, 448, 449, 450, 452, 454, 456, 466, 471, 475, 489, 490, 491, 492, 504, 512, 523, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 563, 564, 574, 575, 576, 577, 578, 589, 590, 591, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 666, 672, 693, 694, 696, 697, 700, 838, 856, 861, 864, 868, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 906, 910, 1003, 1005, 1008, 1011, 1012, 1015, 1019, 1021, 1023, 1024, 1030, 1040, 1041, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "introduct": [171, 235, 273, 383, 414, 419, 420, 423, 598, 796, 797, 847, 851, 1005, 1007, 1009, 1011, 1027, 1034, 1035], "introductori": [150, 173, 174, 179, 180, 183, 187, 243, 425, 619, 630, 1030, 1033], "introspect": [43, 45, 105, 389, 567, 568, 597, 1019], "intrus": 378, "intuit": [43, 52, 67, 79, 87, 97, 128, 137, 140, 147, 167, 174, 190, 191, 218, 219, 239, 244, 276, 293, 301, 318, 321, 343, 346, 350, 358, 383, 397, 413, 415, 417, 419, 421, 653, 790, 791, 792, 795, 883, 912, 914, 915, 917, 918, 1001, 1005, 1006, 1009, 1010, 1016, 1019, 1020, 1024, 1033, 1040], "inv": [111, 115, 312], "inv_boxcox": 1059, "inv_kw_arg": 876, "invalid": [2, 47, 217, 397, 453, 586, 679, 720, 782, 997, 1005, 1009, 1046, 1048, 1050, 1051, 1053, 1054, 1056, 1059], "invalidparametererror": 1009, "invalu": 1033, "invari": [75, 380, 397, 415, 425, 622, 697, 755, 826, 827, 1005, 1006, 1009, 1024, 1029, 1048, 1051, 1052, 1053], "invent": 1012, "inventor": 1011, "inventori": 1033, "invers": [2, 8, 51, 89, 110, 111, 112, 137, 187, 265, 282, 284, 291, 299, 346, 358, 359, 375, 397, 416, 418, 419, 420, 422, 423, 427, 452, 472, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 535, 541, 542, 543, 547, 549, 551, 565, 569, 572, 597, 598, 599, 636, 652, 653, 666, 667, 674, 676, 682, 683, 684, 685, 686, 688, 732, 751, 760, 805, 806, 854, 855, 862, 863, 869, 870, 872, 876, 879, 885, 886, 888, 904, 905, 912, 913, 914, 917, 918, 920, 922, 944, 1003, 1005, 1009, 1012, 1013, 1019, 1023, 1024, 1030, 1034, 1035, 1040, 1043, 1048, 1051, 1052, 1054, 1058, 1059], "inverse_components_": [904, 905, 1021, 1054], "inverse_func": [109, 190, 416, 472, 876, 1019, 1048, 1058], "inverse_transform": [44, 86, 89, 128, 169, 300, 358, 406, 420, 423, 452, 472, 489, 490, 491, 541, 542, 543, 546, 547, 548, 549, 551, 552, 589, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 638, 808, 811, 812, 822, 872, 876, 877, 879, 880, 881, 882, 883, 885, 886, 888, 889, 890, 892, 904, 905, 1019, 1020, 1021, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "invert": [115, 128, 169, 238, 358, 359, 395, 417, 423, 638, 697, 701, 1019, 1049], "invert_yaxi": [186, 359], "invest": [389, 1033], "investig": [128, 133, 137, 186, 353, 383, 409, 1005], "invok": [385, 539, 545, 547, 553, 554, 575, 577, 578, 807, 830, 833, 909, 1052, 1057], "involv": [321, 323, 325, 333, 346, 350, 370, 372, 378, 383, 397, 398, 409, 418, 425, 707, 840, 841, 1006, 1010, 1012, 1016, 1017, 1024, 1028, 1033, 1048], "invscal": [312, 684, 685, 686, 869, 870, 1023], "io": [377, 380, 383, 387, 389, 391, 397, 700, 1028, 1035, 1038], "ioangatop": 1057, "ioanni": 742, "ioerror": 1056, "iofal": 1054, "ion": 1055, "ionescu": [650, 1001, 1050], "iowa": [147, 158, 254], "ipca": [2, 127, 541, 542], "ipdb": 391, "ipm": 678, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365], "ipython": [385, 388, 389, 391], "ipython_config": 389, "iq": 189, "iqbal": 1052, "iqr": [254, 890, 902], "ir": [247, 420, 598, 734, 764, 847, 851, 1007, 1009], "iren": [1055, 1056], "iri": [2, 50, 55, 66, 67, 69, 76, 80, 108, 119, 122, 125, 127, 128, 133, 136, 137, 138, 139, 141, 156, 159, 165, 168, 173, 175, 178, 179, 187, 195, 196, 201, 209, 210, 214, 249, 258, 262, 268, 280, 281, 284, 285, 291, 299, 305, 307, 311, 312, 318, 327, 334, 339, 341, 342, 344, 346, 348, 349, 350, 360, 361, 363, 364, 365, 376, 377, 396, 409, 415, 416, 419, 420, 422, 454, 504, 512, 549, 557, 561, 565, 572, 618, 630, 639, 684, 808, 822, 907, 908, 909, 912, 917, 920, 924, 925, 926, 998, 999, 1003, 1008, 1009, 1012, 1016, 1019, 1022, 1023, 1024, 1025, 1030, 1035, 1053], "iris": [120, 281, 282], "iris_61": 377, "iris_969": 377, "iris_version_3": 377, "irreduc": [140, 1009], "irregular": [179, 350, 415, 1012], "irregularities_kernel": 179, "irrelev": [167, 202, 366, 389, 417, 422, 424, 612, 748, 1009], "irrespect": [217, 248, 269, 284, 296, 614], "irvin": 380, "is_categor": 640, "is_categorical_": [569, 570], "is_classifi": [2, 385, 397], "is_cluster": [2, 1059], "is_data_valid": [679, 1005], "is_fit": [2, 992], "is_fitted_": [429, 432, 434, 437, 438], "is_inli": [476, 571, 858], "is_leav": 365, "is_max_test_scor": 107, "is_model_valid": [679, 1005], "is_multilabel": [2, 392, 1057], "is_paramet": 996, "is_pypi": 1058, "is_regressor": [2, 397], "is_scalar_nan": 1053, "is_sh": 286, "is_split_nod": 365, "is_stationari": [182, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633], "isa": 57, "isaac": [1046, 1047, 1049, 1050, 1057], "isaack": 1053, "isaactrost": 1057, "isakov": 1052, "isbn": [380, 415, 1005], "isclos": 55, "isdigit": [57, 423], "ish": 69, "ishaan": 1053, "ishan": [1053, 1054], "ishank": [1045, 1046, 1047], "ishikawa": [1052, 1053], "isin": [291, 336], "isinst": [70, 146, 235, 397], "islic": [47, 79, 97], "ism": 1044, "isn": [172, 325, 357, 359, 366, 371, 383, 391, 523, 569, 570, 602, 802, 811, 812, 885, 1012, 1024, 1050, 1058], "iso": [173, 187, 229, 239, 618, 621, 622, 1030], "iso_reg": 643, "isoformat": 55, "isol": [2, 147, 154, 244, 254, 358, 381, 389, 401, 571, 858, 916, 1049, 1050], "isolationforest": [2, 136, 139, 187, 220, 244, 254, 291, 316, 639, 838, 916, 1015, 1030, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1059], "isolationforestifittedisolationforest": 154, "isomap": [2, 51, 87, 142, 187, 236, 239, 241, 248, 306, 325, 329, 422, 510, 552, 557, 574, 697, 698, 699, 700, 861, 873, 882, 905, 1012, 1030, 1034, 1035, 1048, 1050, 1053, 1054, 1055, 1056, 1057], "isomap__n_neighbor": 325, "isometr": [237, 696, 698, 699, 700, 1006], "isoton": [2, 61, 62, 109, 187, 243, 444, 643, 644, 645, 665, 941, 1030, 1031, 1035, 1041, 1042, 1043, 1044, 1046, 1053, 1056], "isotonic_regress": [2, 643, 1053], "isotonicregress": [2, 247, 1000, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1052, 1054, 1055, 1056], "isotonicregression0": 643, "isotrop": [2, 70, 90, 92, 96, 128, 176, 178, 237, 239, 415, 417, 425, 520, 527, 540, 623, 627, 628, 630, 631], "isotropi": 420, "isr": 424, "issam": [0, 1046], "issu": [0, 2, 43, 62, 112, 118, 217, 235, 280, 323, 371, 377, 386, 387, 388, 392, 395, 397, 398, 400, 401, 406, 409, 411, 415, 417, 418, 423, 456, 459, 469, 480, 489, 490, 491, 542, 547, 551, 581, 596, 597, 599, 619, 635, 699, 703, 777, 883, 888, 900, 946, 999, 1006, 1017, 1019, 1024, 1028, 1029, 1032, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1057, 1058], "issuenumb": 391, "ist": 424, "isupp": 423, "isuru": 1052, "itakura": [420, 546, 548, 555, 1047], "itali": 380, "item": [2, 47, 48, 49, 50, 51, 52, 55, 66, 78, 90, 109, 141, 143, 147, 150, 158, 190, 215, 219, 225, 238, 250, 251, 253, 262, 272, 278, 282, 329, 336, 358, 376, 383, 384, 385, 392, 416, 471, 534, 569, 570, 596, 597, 599, 640, 820, 885, 907, 908, 927, 934, 962, 1001, 1022, 1029], "item_idx": 316, "iter": [2, 47, 54, 55, 67, 81, 106, 115, 123, 126, 137, 140, 143, 146, 148, 149, 151, 152, 153, 172, 185, 187, 197, 198, 225, 232, 262, 263, 267, 270, 283, 286, 311, 313, 314, 318, 327, 336, 338, 339, 346, 383, 385, 389, 391, 392, 396, 397, 410, 415, 418, 420, 422, 424, 427, 444, 447, 448, 450, 452, 454, 455, 456, 459, 461, 466, 468, 469, 470, 478, 479, 485, 489, 490, 491, 523, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 561, 562, 567, 568, 569, 570, 572, 575, 576, 589, 590, 596, 597, 599, 601, 602, 610, 618, 635, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 843, 846, 861, 868, 869, 870, 871, 872, 876, 883, 885, 887, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 927, 955, 956, 963, 964, 965, 966, 974, 998, 999, 1005, 1006, 1008, 1009, 1012, 1013, 1014, 1022, 1023, 1024, 1025, 1029, 1030, 1033, 1035, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "iter_minibatch": 47, "iter_offset": 1054, "iter_offset_": 1054, "iterated_pow": [106, 540, 543, 549, 1046], "iterative_impute_scor": 186, "iterativeimput": [2, 184, 186, 187, 387, 406, 497, 573, 588, 636, 637, 638, 647, 653, 680, 834, 855, 873, 1030, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "itergrid": 1042, "itertool": [47, 77, 79, 97, 159, 191, 205, 261, 266, 275, 282, 284, 422], "ith": [504, 782, 786, 848, 869, 870, 885, 886], "ith_cluster_silhouette_valu": 95, "itk": [1050, 1051, 1052], "its": [0, 2, 7, 25, 43, 48, 51, 52, 53, 57, 63, 64, 70, 72, 90, 100, 101, 111, 113, 115, 118, 120, 121, 128, 135, 137, 143, 146, 148, 150, 153, 163, 172, 174, 179, 181, 190, 191, 193, 195, 197, 206, 230, 234, 235, 239, 244, 251, 253, 254, 256, 258, 260, 265, 266, 269, 274, 278, 280, 282, 284, 289, 296, 298, 302, 303, 318, 328, 338, 343, 350, 355, 357, 358, 361, 365, 366, 371, 372, 376, 377, 378, 379, 383, 384, 385, 387, 388, 391, 395, 396, 397, 398, 401, 403, 406, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 431, 447, 449, 451, 453, 457, 461, 463, 467, 470, 471, 472, 474, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 505, 511, 531, 539, 541, 542, 543, 545, 546, 548, 549, 550, 552, 558, 561, 563, 564, 565, 566, 567, 568, 572, 573, 574, 591, 595, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 652, 653, 679, 680, 682, 693, 694, 695, 696, 700, 704, 707, 716, 733, 737, 738, 744, 745, 749, 786, 789, 791, 805, 806, 808, 833, 840, 841, 843, 854, 855, 856, 858, 859, 860, 862, 863, 864, 871, 872, 876, 881, 884, 885, 887, 904, 905, 908, 912, 913, 920, 922, 938, 939, 944, 951, 978, 998, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1028, 1033, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "itsaphel": 1058, "itself": [27, 61, 64, 84, 90, 137, 150, 154, 191, 202, 215, 251, 257, 269, 284, 296, 323, 346, 358, 370, 372, 382, 383, 385, 397, 406, 409, 413, 415, 426, 447, 448, 451, 452, 453, 476, 477, 478, 479, 480, 481, 482, 483, 535, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 559, 574, 577, 591, 600, 603, 604, 606, 607, 608, 610, 611, 647, 648, 649, 650, 651, 653, 663, 697, 699, 800, 801, 847, 848, 849, 850, 851, 852, 853, 857, 865, 866, 877, 878, 879, 907, 908, 965, 1001, 1005, 1006, 1008, 1012, 1013, 1017, 1028, 1044, 1055], "iv": [189, 1009], "ivan": [1048, 1049, 1052, 1055, 1058], "ivanllt": 1055, "iver": 1046, "iverson": 1005, "ivicajov": 1043, "ivl": 193, "ivt": 542, "iv\u00e1n": [1047, 1053], "iwhalv": 1053, "iwona": 1057, "ix": [50, 284, 352], "iy_j": 1019, "iyer": 1051, "izadifar": 1058, "j": [0, 50, 55, 72, 73, 75, 78, 96, 104, 112, 113, 114, 137, 140, 141, 152, 170, 175, 186, 191, 229, 240, 253, 260, 274, 275, 280, 286, 300, 306, 309, 320, 330, 365, 371, 377, 378, 380, 387, 389, 395, 404, 412, 413, 415, 417, 419, 420, 422, 423, 425, 426, 444, 447, 451, 453, 460, 461, 476, 481, 506, 521, 524, 525, 526, 528, 536, 539, 542, 544, 545, 546, 548, 549, 555, 561, 567, 568, 601, 602, 640, 641, 645, 652, 653, 656, 657, 674, 675, 677, 688, 696, 697, 698, 700, 701, 702, 704, 713, 716, 718, 722, 724, 726, 729, 731, 732, 734, 763, 764, 766, 767, 782, 786, 796, 797, 800, 801, 841, 842, 849, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 883, 892, 893, 920, 921, 998, 999, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1021, 1023, 1024, 1025, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "j0rd1smit": 1052, "ja": [418, 1047], "jaccard": [2, 295, 412, 457, 464, 707, 711, 727, 737, 742, 746, 786, 787, 788, 804, 1012, 1048, 1049], "jaccard_scor": [2, 295, 711, 737, 742, 804, 1009, 1049, 1052], "jaccard_similarity_scor": [1042, 1044, 1049], "jaccarddist": 707, "jack": [1042, 1045, 1053, 1054, 1055, 1056, 1058], "jacklangerman": [1048, 1049], "jackman": 1041, "jackmartin": 1046, "jackson": [1046, 1047, 1049], "jacob": [0, 405, 1045, 1046, 1047], "jacobi": 1055, "jacobsen": 1043, "jacopo": [1048, 1049], "jacqu": [1041, 1043], "jaehong": 1050, "jaehyun": 1052, "jaewon": 1048, "jai": [1050, 1054], "jaidev": 1045, "jaim": 1050, "jain": [1046, 1047, 1048, 1052, 1054, 1055], "jair": 1047, "jake": [0, 405, 1027, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1054], "jakemick": 1042, "jakhar": 1052, "jakirkham": [1047, 1048, 1049, 1055, 1056], "jakub": 1057, "jakubek": [1053, 1054], "jalali": [0, 398, 404, 409, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "jalexand3r": 1054, "jamaoui": [1048, 1049, 1052], "jame": [0, 380, 419, 842, 1010, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1057], "jamestwebb": [1042, 1043], "jami": 1048, "jamieson": 998, "jan": [0, 218, 293, 404, 891, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1052, 1056], "jana": 1050, "janet": 380, "jane\u017e": [1041, 1042], "janfidor": [1055, 1056], "janhang": 1050, "janin": 1047, "janna": 1046, "jannik": 1053, "janso": 1040, "jansson": [1043, 1055], "januari": [381, 383, 1040, 1041, 1050, 1052, 1055, 1057], "janvanrijn": [1048, 1049], "jaqu": [0, 405, 1040, 1041, 1042, 1043], "jardim": 1053, "jare": 1055, "jarfa": 1046, "jarir": 1053, "jarkko": 704, "jarosch": 1042, "jaroslaw": 1047, "jarrod": [0, 405, 1049, 1056, 1057], "jarvelin": [734, 764, 1009], "jaskowiak": 453, "jason": [44, 420, 543, 908, 1046, 1048, 1052, 1055], "jatin": [1044, 1046], "jauhar": 1054, "jauvin": 1041, "java": [415, 449], "javier": [1044, 1058], "jawahar": 1001, "jax": 1057, "jay": 1047, "jaya": 1054, "jayaratn": [1051, 1052, 1055, 1056], "jayratn": 1052, "jayzed82": 1047, "jb": [1056, 1057], "jbdelafoss": 1047, "jbirch": [415, 449], "jblackburn": 1046, "jc": [1047, 1048], "jdcaballero": 1044, "jdethuren": [1048, 1049], "je": 1054, "jean": [1040, 1043, 1044, 1045, 1046, 1047, 1053], "jeann": 1054, "jeanselm": 1050, "jeb": 1048, "jeevan": 1052, "jeff": [1044, 1046, 1053, 1054], "jeffrei": [1043, 1046], "jeffrey04": [1045, 1046], "jelfner": 1054, "jell": 1043, "jen": [666, 1048], "jen09": 420, "jenatton": 420, "jenni": 1054, "jennif": 1053, "jensen": [1046, 1052], "jeong": 1050, "jeremi": [1033, 1045, 1046, 1047, 1048, 1051, 1052], "jeremiedbb": [1048, 1049, 1050], "jeremynixon": 1046, "jeroen": 1046, "jeroenpeterbo": 1052, "jeroko": 1047, "jeromedock": 1050, "jerphanion": [0, 404, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "jerryzhu": 907, "jesper": 1050, "jess": [843, 1010, 1053], "jess010": 1043, "jessica": 1046, "jessicakk0711": 1056, "jesu": [57, 357, 358], "jet": 102, "jevnik": 1045, "jewalikar": 1046, "jf": 1049, "jfraj": 1045, "jha": [1044, 1050, 1054], "jhay": 1052, "jhun": 481, "jia": 1046, "jiacheng": 1047, "jiali": 1045, "jian": 415, "jianbo": [415, 459, 469, 699], "jiang": [413, 1044, 1051], "jianzhu": 1053, "jiawei": [1056, 1057, 1058], "jiaxiang": 1052, "jie": [1048, 1049, 1052], "jiefangxuanyan": 1053, "jigna": 1052, "jihan": 1054, "jill": 1046, "jim": 1042, "jim0421": 1052, "jimenez": [1053, 1054], "jimmi": [869, 870, 1013, 1046, 1048], "jim\u00e9nez": [0, 373, 1048, 1051, 1052, 1053, 1054, 1055], "jin": [647, 1051, 1052], "jindal": 1052, "jinkun": 1048, "jiongyan": 1048, "jiquan": 1013, "jirka": 1054, "jiten": 1055, "jitendra": [415, 459, 469, 699], "jitter": [137, 658, 662, 1051], "jiyuan": 1046, "jjabl": 1048, "jjmistri": 1051, "jk": 1006, "jkarolczak": 1055, "jkleint": [1047, 1048], "jl": [248, 905], "jmlr": [0, 415, 674, 675, 684, 712, 1005, 1024], "jmlr_2014": 700, "jmontoyam": 1047, "jnboehm": 1053, "jnt": 419, "joaak": [1048, 1049], "joan": [1047, 1048, 1049, 1050], "joanna": 1050, "joaquin": 1052, "job": [145, 153, 190, 263, 269, 383, 387, 391, 403, 422, 426, 444, 451, 453, 455, 457, 459, 464, 465, 468, 471, 474, 475, 479, 539, 543, 544, 545, 547, 550, 551, 553, 554, 556, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 610, 615, 616, 618, 642, 647, 665, 696, 697, 698, 699, 700, 701, 702, 782, 786, 789, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 871, 874, 907, 908, 910, 974, 1033, 1059], "joblib": [2, 41, 77, 89, 106, 143, 296, 326, 378, 381, 383, 386, 392, 395, 397, 401, 408, 416, 426, 444, 448, 451, 452, 453, 455, 457, 459, 464, 465, 468, 471, 474, 479, 516, 517, 539, 543, 544, 545, 547, 550, 551, 553, 554, 556, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 602, 610, 615, 616, 618, 640, 642, 647, 655, 659, 661, 663, 665, 666, 667, 669, 671, 673, 674, 676, 684, 687, 696, 697, 698, 699, 700, 701, 702, 782, 786, 789, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 854, 855, 858, 860, 862, 863, 865, 866, 871, 872, 873, 874, 907, 908, 974, 975, 978, 993, 1009, 1029, 1035, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1051, 1052, 1055, 1057, 1058, 1059], "joblib_start_method": 395, "jochen": 1042, "jock": 104, "joe": [1045, 1058], "joei": 1056, "joel": [0, 398, 404, 423, 543, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058], "johann": [1042, 1043, 1048, 1050, 1051, 1054], "johanna": [114, 1058], "johannah": 1046, "johanwork": 1053, "john": [380, 423, 544, 716, 743, 777, 887, 914, 915, 917, 918, 999, 1005, 1009, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1053, 1055, 1056, 1057, 1058, 1059], "johnathanpi": [1055, 1056], "johnson": [37, 90, 187, 243, 316, 320, 375, 496, 510, 888, 900, 904, 905, 906, 1019, 1026, 1030, 1035, 1048, 1054, 1056], "johnson_lindenstrauss_min_dim": [2, 248, 1021, 1041], "johnston": [172, 380, 1005, 1049], "johnstott": 1048, "johnthagen": 1055, "johnwon": 320, "join": [50, 51, 57, 90, 185, 235, 275, 318, 378, 398, 470, 1032, 1040, 1048], "joint": [150, 187, 191, 196, 202, 203, 206, 216, 237, 269, 416, 619, 660, 670, 700, 847, 848, 849, 850, 851, 912, 1005, 1006, 1010, 1014, 1016, 1020, 1030, 1040], "jointli": [25, 211, 282, 415, 420, 1005], "joli": [0, 405, 1041, 1042, 1043, 1044, 1045, 1046], "jon": [357, 1047, 1050, 1051, 1053, 1054, 1057], "jona": [1052, 1057], "jonatan": 1048, "jonathan": [378, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1056], "joncral": 1046, "jone": [0, 378, 405, 1040], "jong": 1047, "jonker": [412, 727], "joona": 1040, "jordal": 1046, "jordan": [415, 420, 699, 805, 1050, 1051, 1054, 1055], "jordi": 1046, "jorg": [666, 1043, 1052, 1054], "jori": [0, 404, 1047, 1048, 1049, 1052, 1053], "jose": [172, 380, 666, 1009, 1048, 1050], "joseph": [1043, 1044, 1045, 1046, 1052, 1054, 1055], "josephsalmon": [1047, 1048, 1049], "josh": [423, 1047], "joshi": [1046, 1048, 1054, 1057, 1058], "joshua": [330, 378, 1042, 1043, 1045, 1046, 1052, 1055, 1056], "joshuakennethjon": 1049, "jos\u00e9": [731, 1043, 1053, 1058], "jotasi": 1048, "joudet": [1047, 1048], "journal": [0, 114, 191, 275, 281, 293, 377, 378, 380, 413, 415, 417, 422, 459, 469, 480, 542, 549, 635, 643, 653, 697, 700, 701, 713, 723, 739, 742, 743, 766, 767, 794, 837, 842, 888, 900, 998, 999, 1003, 1005, 1006, 1007, 1010, 1016, 1021, 1023, 1024], "jovan": [1054, 1055], "joydeep": 415, "jo\u00e3o": [1055, 1058], "jo\u00ebl": 1048, "jpcar": 1058, "jpeg": [377, 378, 501, 502], "jpfrancoia": [1046, 1047], "jpg": [83, 514, 592, 595], "jpienaar": 1058, "jpm": 51, "jpmml": 1028, "jpmorgan": [51, 1033], "jr": 1005, "jrenni": 849, "jrfiedler": 1046, "jschendel": [1047, 1048], "jschuerz": 1054, "json": [52, 377, 383, 401], "jth": [782, 786], "juan": [0, 373, 1040, 1051, 1052, 1053, 1054, 1055], "juanfe88": 1055, "judg": [93, 223, 415], "judgment": [266, 1009], "judithabk6": 1051, "juergen": [1050, 1055], "jul": 284, "juli": [172, 380, 424, 742, 893, 1019, 1043, 1047, 1048, 1049, 1058], "julia": [415, 725, 745, 803], "julian": [1047, 1048, 1058], "juliankahnert": 1046, "juliaschoepp": [1055, 1056], "juliathebrav": 1046, "julien": [0, 404, 666, 1005, 1033, 1040, 1043, 1047, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "juliet": 1048, "julietcl": 1048, "julio": 1053, "julyrashchenko": 1053, "jumon": 1051, "jump": [43, 218, 316, 380, 383, 423, 891], "jumpi": 423, "june": [415, 1006, 1046, 1056], "juneja": 1058, "jung": [1047, 1051, 1055], "jungkook": 1045, "jungl": 1006, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 384, 385, 416, 475, 910, 1025, 1028, 1029, 1051, 1054], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365], "jurgen": 1033, "juri": 574, "jurman": 751, "just": [43, 52, 67, 104, 118, 123, 143, 147, 153, 172, 207, 214, 238, 249, 269, 275, 282, 286, 296, 311, 346, 357, 358, 365, 366, 378, 382, 383, 384, 385, 387, 388, 391, 395, 396, 397, 412, 414, 415, 416, 419, 422, 424, 427, 475, 541, 543, 550, 554, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 587, 592, 618, 619, 654, 660, 665, 666, 668, 670, 674, 675, 676, 684, 685, 686, 814, 831, 861, 869, 870, 998, 1005, 1008, 1009, 1010, 1013, 1017, 1019, 1023, 1029, 1040, 1044, 1046, 1048, 1052, 1056], "justglow": 1049, "justif": 684, "justifi": [383, 389, 413, 573], "justin": [1042, 1048, 1052], "jvm": 1053, "jygerardi": [1055, 1056], "j\u00e9r\u00e9mie": [0, 404, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "j\u00e9r\u00f4me": [1049, 1050, 1051, 1057, 1058, 1059], "j\u00eann": 1046, "j\u00f6rg": [415, 457, 464, 1048], "j\u00f6rn": 1047, "j\u00f8rgensen": [1005, 1057], "k": [2, 33, 45, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 75, 77, 81, 84, 85, 88, 90, 91, 95, 98, 100, 108, 109, 113, 120, 121, 123, 126, 129, 130, 137, 139, 146, 150, 154, 156, 157, 159, 160, 163, 165, 168, 169, 172, 175, 177, 178, 182, 183, 186, 187, 190, 191, 192, 193, 198, 200, 201, 205, 211, 214, 229, 231, 248, 250, 252, 253, 254, 260, 263, 271, 275, 278, 279, 284, 285, 288, 289, 296, 298, 301, 302, 303, 304, 305, 307, 308, 309, 317, 318, 319, 320, 323, 325, 329, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 356, 357, 359, 365, 366, 371, 377, 378, 380, 383, 391, 392, 395, 397, 406, 411, 412, 413, 416, 417, 418, 420, 421, 422, 423, 424, 425, 427, 447, 450, 453, 454, 455, 456, 457, 458, 459, 460, 466, 467, 469, 476, 479, 495, 510, 512, 514, 520, 531, 539, 545, 549, 552, 553, 554, 557, 558, 561, 563, 565, 566, 567, 589, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 639, 647, 648, 656, 658, 659, 661, 662, 663, 664, 666, 667, 671, 672, 673, 674, 675, 677, 687, 688, 690, 691, 692, 693, 694, 696, 699, 703, 704, 712, 713, 716, 725, 734, 745, 751, 764, 766, 767, 769, 774, 777, 782, 783, 784, 785, 787, 801, 802, 803, 805, 806, 809, 813, 815, 816, 817, 820, 823, 824, 826, 827, 829, 830, 836, 847, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 873, 877, 878, 879, 883, 884, 885, 887, 888, 892, 900, 905, 919, 927, 941, 951, 956, 982, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1017, 1022, 1023, 1024, 1025, 1028, 1030, 1034, 1035, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058], "k0": 1003, "k1": [425, 629, 632], "k1__": 425, "k1__constant_valu": 178, "k1__k1": 425, "k1__k1__constant_valu": 425, "k1__k1__constant_value_bound": 425, "k1__k2": 425, "k1__k2__length_scal": [180, 425], "k1__k2__length_scale_bound": 425, "k2": [425, 629, 632], "k2__": 425, "k2__length_scal": 425, "k2__length_scale_bound": 425, "k_": [412, 425, 624, 627, 629, 632, 782, 1001, 1019], "k_1": [2, 425, 629, 632], "k_2": [2, 425, 629, 632], "k_best": [600, 909, 1022, 1057], "k_diag": [620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633], "k_fit_all_": 878, "k_fit_rows_": 878, "k_fold": 163, "k_gradient": [620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633], "k_init": [450, 466], "k_mean": [2, 99, 392, 397, 1048, 1056], "k_means_cluster_cent": 99, "k_means_elkan": 1048, "k_means_iris_3": 80, "k_means_iris_8": 80, "k_means_iris_bad_init": 80, "k_means_label": 99, "k_new": 878, "k_ret": [852, 853], "k_true": [852, 853], "ka00ri": [1055, 1056], "kachaiev": 1057, "kaczmarzyk": 1057, "kadatatlu": 1053, "kadota": 1054, "kaggl": [158, 396], "kahni": 1052, "kai": [380, 571, 1015, 1047], "kaicheng": 1044, "kaichogami": 1046, "kailasa": [1054, 1055], "kaim": [869, 870], "kaiser": [420, 540], "kakati": 1055, "kalli": [1048, 1049], "kalyan": 1046, "kamalakerdadi": [1045, 1046], "kamar": 1048, "kamchyev": 1057, "kamel": 1040, "kamishima": [1046, 1047], "kamm": 1009, "kanai": [1046, 1047, 1048], "kanazu": [1055, 1056], "kanchimo": 1058, "kang": [1048, 1050], "kania": [1055, 1056], "kanika": 1050, "kanishk": 1055, "kanissh": 1055, "kanji": 1053, "kanniah": [1043, 1044], "kansal": 1046, "kapadni": 1055, "kapeln": [191, 1016], "kapoor": [1048, 1049], "kappa": [2, 544, 724], "kapur": 1047, "kar": 1046, "karan": [1047, 1048, 1049], "karayev": 1042, "karbownik": 1053, "karen": 1053, "karger": [849, 1011], "karhunen": 542, "karin": [635, 999], "karl": 1048, "karlo": [1057, 1058], "karnofski": 1047, "karnowski": 1052, "karol": 1043, "kartik": 1052, "karypi": 415, "kaseorg": 1050, "kashif": 1045, "kasim": 1044, "kaski": 704, "kasper": 1048, "kassa": [1055, 1056], "kastner": [0, 405, 1042, 1043, 1044, 1051, 1052], "kat": 1047, "kataev": [1048, 1049], "kataki": [728, 742, 748, 1009], "katarina": [1050, 1052], "katheleen": 377, "kathi": [1047, 1050], "kathleen": 1047, "kathryn": 1051, "kati": 1047, "katotten": 1054, "katrin": [1048, 1049], "katrina": 1051, "katriopla": 1048, "katyal": 1050, "katz": [1045, 1052, 1053], "kaufmann": [1021, 1025, 1052], "kaushik": [1047, 1054, 1055, 1056, 1058], "kaushik94": 1043, "kawamura": 1053, "kawwa": 1053, "kayawari": 1053, "kaylani2": 1052, "kaynak": 380, "kazmar": 1044, "kb": [105, 190, 191, 269], "kbest": [106, 600], "kbin": [323, 330], "kbinsdiscret": [2, 43, 88, 121, 187, 198, 217, 235, 255, 315, 318, 323, 330, 520, 665, 875, 891, 921, 1019, 1030, 1048, 1052, 1053, 1054, 1056, 1058], "kbinsdiscretizer__n_bin": 318, "kcachegrind": 386, "kd": [301, 415, 421, 1012, 1048, 1049, 1050], "kd_tree": [426, 451, 453, 457, 464, 696, 697, 854, 855, 856, 857, 858, 860, 862, 863, 864, 1012, 1053, 1057], "kdd": [195, 378, 413, 444, 1021], "kdd06_rp": 905, "kddcup": [254, 376, 500, 1035], "kddcup99": [2, 378, 500], "kde": [189, 190, 289, 293, 300, 301, 309, 421, 857], "kdt": 1012, "kdtree": [2, 453, 457, 464, 696, 697, 852, 854, 855, 856, 857, 858, 860, 862, 863, 864, 1042, 1044, 1048, 1052, 1053, 1056, 1057], "ke": [422, 1051, 1052], "kearn": 1043, "keat": [1055, 1056], "keep": [0, 45, 52, 64, 77, 109, 126, 128, 143, 153, 171, 180, 185, 189, 190, 191, 192, 193, 202, 217, 218, 219, 225, 235, 258, 265, 270, 273, 320, 321, 328, 336, 346, 357, 358, 361, 366, 370, 371, 375, 383, 387, 396, 397, 413, 415, 416, 417, 418, 419, 420, 438, 457, 472, 489, 490, 491, 492, 501, 502, 542, 548, 549, 552, 555, 562, 564, 566, 568, 570, 573, 576, 578, 603, 606, 608, 611, 619, 642, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 684, 685, 686, 687, 716, 826, 845, 846, 855, 863, 869, 870, 908, 913, 915, 918, 921, 923, 1005, 1010, 1014, 1017, 1019, 1029, 1032, 1033, 1035, 1040, 1045, 1048, 1049, 1053, 1054, 1056, 1058], "keep_empty_featur": [635, 636, 638, 999, 1055], "keerti": 1055, "kegl": 1044, "kei": [2, 47, 49, 52, 55, 77, 143, 147, 158, 185, 189, 235, 251, 254, 257, 276, 278, 279, 326, 327, 328, 329, 330, 331, 332, 333, 372, 376, 385, 388, 389, 390, 395, 397, 398, 401, 406, 415, 416, 419, 425, 471, 479, 569, 570, 575, 576, 577, 578, 596, 599, 602, 625, 634, 640, 642, 667, 719, 808, 811, 812, 820, 822, 830, 835, 871, 872, 927, 943, 973, 1017, 1029, 1035, 1037, 1046, 1052, 1053, 1055, 1056, 1058], "keith": [357, 1040, 1045], "kekalainen": [734, 764, 1009], "kelkar": [1047, 1048, 1050], "kelleh": [716, 1009], "kelleher2015": 1009, "kellei": [378, 1042, 1043], "keller": 1052, "kellogg": 51, "kellycarmodi": 1050, "kemal": [0, 1042, 1043], "kemenad": 1051, "kemk": 1051, "ken": [380, 1042, 1049], "ken4git": 1054, "kendal": 1055, "kendrick": 1052, "kennedi": [1047, 1050, 1057], "kennel": 1051, "kenneth": [1021, 1040, 1041, 1046, 1047, 1054, 1055], "kenni": 1052, "kensuk": 1050, "kent": 57, "kenta": 1043, "kento": [1055, 1056], "kept": [64, 265, 296, 353, 377, 409, 425, 504, 543, 546, 548, 549, 555, 605, 618, 619, 627, 628, 652, 703, 805, 806, 939, 1019, 1048, 1049], "kera": [395, 1028], "kerimov": [1047, 1048], "kernal": 128, "kernc": [1040, 1054, 1055], "kernel": [2, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 86, 92, 101, 108, 118, 122, 124, 132, 159, 165, 170, 173, 175, 176, 177, 178, 181, 185, 200, 201, 218, 231, 243, 244, 252, 256, 268, 273, 275, 277, 280, 281, 285, 290, 291, 297, 302, 307, 321, 328, 337, 340, 341, 343, 344, 346, 347, 348, 349, 351, 354, 366, 370, 375, 385, 395, 397, 403, 413, 415, 416, 419, 422, 423, 438, 447, 455, 459, 468, 469, 472, 489, 490, 491, 498, 504, 506, 510, 512, 522, 541, 542, 543, 549, 552, 562, 564, 566, 568, 570, 573, 576, 578, 601, 602, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 639, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 684, 685, 686, 687, 696, 698, 699, 700, 703, 743, 766, 767, 769, 774, 775, 782, 783, 784, 785, 808, 814, 819, 822, 838, 840, 845, 846, 852, 853, 855, 857, 863, 870, 872, 873, 878, 882, 884, 885, 887, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 921, 923, 929, 998, 1004, 1005, 1006, 1009, 1010, 1012, 1015, 1022, 1023, 1030, 1031, 1034, 1035, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "kernel_": [174, 175, 176, 177, 178, 179, 180, 181, 183, 618, 619], "kernel__length_scal": 174, "kernel__period": 174, "kernel_approxim": [2, 43, 185, 187, 194, 195, 231, 244, 249, 327, 646, 647, 648, 649, 650, 685, 766, 767, 878, 1001, 1030, 1041, 1047, 1057], "kernel_dens": [852, 853], "kernel_label": 352, "kernel_metr": [2, 647, 648, 649, 650], "kernel_param": [459, 543, 647, 651], "kernel_pca": [44, 128, 416], "kernel_pca_": 696, "kernel_pca_back_proj_ax": 128, "kernel_pca_proj_ax": 128, "kernel_ridg": [2, 174, 250, 651, 1010, 1044], "kernel_ridge_tun": 174, "kernel_svm": 249, "kernel_svm_scor": 249, "kernel_svm_tim": 249, "kernelapproximationkernel": 403, "kernelcenter": [2, 411, 1019, 1050, 1054, 1056, 1057], "kerneldens": [2, 300, 301, 309, 421, 1042, 1048, 1049, 1053, 1054, 1055], "kernelpca": [2, 44, 416, 420, 541, 542, 549, 552, 696, 698, 700, 878, 1019, 1041, 1042, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "kernelridg": [2, 128, 174, 250, 680, 1002, 1010, 1044, 1057], "kertesz": 1054, "keshat": [674, 675, 1005], "keshavan": 1050, "kesshi": [1050, 1051], "kevad": 1050, "kevin": [651, 1042, 1044, 1046, 1047, 1050, 1051, 1052, 1054, 1055, 1057], "kevlani": 1048, "keyber": 1058, "keyerror": [927, 1050], "keyword": [357, 377, 383, 385, 388, 390, 397, 415, 426, 429, 445, 451, 452, 457, 459, 464, 471, 474, 504, 511, 543, 546, 548, 567, 568, 575, 576, 577, 578, 628, 639, 640, 647, 651, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 696, 700, 705, 706, 707, 708, 709, 710, 782, 786, 787, 788, 789, 800, 801, 814, 831, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 872, 876, 951, 975, 998, 1006, 1009, 1012, 1022, 1040, 1044, 1046, 1047, 1048, 1050, 1052, 1054, 1055, 1056, 1057, 1058], "kf": [419, 813], "kfold": [2, 89, 143, 149, 163, 270, 280, 366, 419, 444, 479, 575, 576, 602, 610, 655, 659, 661, 663, 669, 671, 673, 681, 808, 811, 812, 814, 816, 818, 822, 827, 829, 831, 832, 833, 834, 835, 836, 837, 839, 843, 846, 893, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1058], "khaja": 1055, "khan": [1055, 1056], "khandelw": 1052, "khanduja": 1043, "khant": 1055, "kharsa": 1054, "khedkar": 1054, "khine": 1054, "kho": 1055, "khoo": 1052, "khosasi": 1053, "khosrow": 1009, "khoual": 1053, "khwaja": 1055, "ki": 1009, "kian": [1045, 1055, 1056, 1057], "kid": 1019, "kieker": [1048, 1049], "kielczewski": 1046, "kie\u00dfl": 1051, "kilian": [423, 1055, 1056], "kill": [357, 395], "killer": [383, 1033], "kilobyt": 88, "kilomet": 772, "kim": [1005, 1048, 1049, 1050, 1054], "kimayoung": 1054, "kimberli": 51, "kimbinyi": 1052, "kind": [43, 48, 51, 52, 61, 62, 109, 131, 143, 158, 167, 190, 191, 265, 268, 269, 271, 284, 323, 327, 330, 343, 346, 357, 371, 372, 376, 378, 383, 385, 389, 395, 396, 413, 415, 418, 419, 420, 422, 423, 424, 495, 496, 511, 516, 517, 529, 532, 596, 640, 641, 709, 948, 1005, 1011, 1016, 1025, 1043, 1052, 1054, 1055, 1056], "king": 943, "kingjr": 1046, "kingma": [869, 870, 1013], "kink": 206, "kiragu": 1052, "kiran": 1052, "kirandevraj": 1055, "kiril": [1047, 1048, 1050, 1052], "kirkbi": [1047, 1048], "kirkham": [1045, 1046, 1048], "kirthi": 1050, "kishan": 1057, "kishimoto": 1052, "kishor": 1053, "kislovskii": 1057, "kit": 395, "kitchen": [649, 1001], "kj": [377, 1011], "kjell": 1046, "kk": 1009, "kl": [420, 1006, 1048], "kl_divergence_": [700, 1047], "klarup": 1047, "klass": 100, "klau": [420, 543, 878], "kleczewski": [1047, 1048], "kleiber": 1054, "klevebr": 1048, "klima": 1055, "klopfer": 1049, "kluge": [1055, 1056], "kluger": [2, 412, 458, 521], "klusacek": 1009, "km": [96, 329, 358], "kmatt10": 1053, "kmb": 51, "kmean": [2, 57, 58, 71, 78, 80, 81, 83, 85, 88, 92, 93, 96, 187, 263, 266, 319, 329, 358, 392, 406, 415, 441, 442, 443, 447, 450, 455, 456, 459, 469, 520, 718, 800, 801, 805, 806, 877, 1012, 1019, 1029, 1030, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "kmeans_estim": 123, "kmeans_model": 415, "kmeans_plusplu": [2, 94, 415, 1052, 1057], "kmode": 1028, "kms15": [1048, 1049], "knee": 415, "kneighbor": [321, 329, 854, 855, 856, 858, 860, 1012, 1044, 1049, 1053, 1054, 1055, 1056], "kneighbors_graph": [2, 74, 79, 97, 102, 296, 397, 415, 448, 452, 703, 854, 855, 856, 858, 860, 862, 863, 864, 866, 1012, 1040, 1044, 1049], "kneighborsclassifi": [2, 67, 159, 164, 298, 299, 304, 305, 321, 327, 329, 357, 422, 610, 855, 859, 860, 861, 862, 863, 1010, 1012, 1040, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "kneighborsclassifierkneighbor": 403, "kneighborsregressor": [2, 185, 253, 308, 329, 422, 578, 854, 860, 862, 863, 1010, 1012, 1040, 1042, 1044, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "kneighborstransform": [2, 296, 298, 325, 700, 864, 1012, 1050, 1054, 1055], "knight": 322, "knn": [140, 159, 164, 185, 299, 304, 305, 308, 321, 327, 337, 357, 422, 610, 861, 907, 908, 1012, 1022, 1046], "knn__weight": 299, "knn_graph": 74, "knn_impute_scor": 186, "knnimput": [2, 186, 325, 635, 638, 999, 1050, 1051, 1054, 1055, 1056, 1057, 1059], "knnquerybatch": 296, "knot": [43, 218, 328, 891, 1019, 1053], "know": [88, 101, 169, 172, 174, 183, 190, 235, 251, 252, 269, 275, 293, 295, 329, 335, 353, 358, 370, 383, 395, 406, 409, 415, 418, 419, 420, 423, 508, 512, 518, 654, 660, 666, 667, 734, 764, 808, 822, 897, 898, 900, 901, 902, 903, 920, 921, 922, 923, 998, 1008, 1009, 1010, 1012, 1021, 1046, 1047, 1050, 1052], "knowledg": [92, 145, 153, 190, 234, 254, 269, 275, 289, 378, 383, 386, 389, 396, 397, 415, 419, 422, 426, 451, 519, 563, 564, 571, 728, 744, 748, 791, 841, 1009, 1010, 1021, 1058], "known": [2, 50, 55, 62, 64, 74, 84, 92, 93, 114, 131, 132, 158, 179, 181, 186, 202, 217, 218, 235, 244, 269, 275, 277, 284, 305, 309, 317, 328, 333, 335, 343, 350, 358, 372, 378, 380, 381, 383, 391, 395, 397, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 445, 470, 489, 491, 506, 516, 517, 552, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 596, 597, 599, 602, 617, 630, 641, 666, 667, 680, 690, 691, 702, 712, 718, 721, 726, 737, 751, 763, 765, 803, 841, 847, 848, 849, 850, 851, 854, 859, 862, 868, 896, 920, 921, 922, 923, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1024, 1025], "known_val": 635, "knox": 1052, "knp": 635, "knr": 422, "knyazev": [415, 459, 469, 703, 1050, 1053, 1054], "ko": [51, 63, 175], "kobak": [700, 1053], "kobaski": 1053, "kobayashi": [1052, 1053], "kober": 1048, "kobi": 743, "koch": [1042, 1048, 1049, 1051, 1052], "kocot": 1051, "koehler": 1044, "koen": [1048, 1049], "koenker": [731, 1005], "koh": [1005, 1033], "kohavi": 419, "kohli": [1057, 1058], "koi8": 423, "koivunen": 114, "kokhlikyan": [1047, 1048], "koki": 1052, "koko": [1048, 1054, 1055], "kolawol": 1053, "kolganov": 1045, "kolh": 1042, "kolstad": 57, "komarov": 1058, "komey": [1054, 1055], "kommireddi": 1054, "kondratyev": 1054, "kong": 1053, "konstantin": [1045, 1046, 1047], "konstantino": [1048, 1057], "konwar": 1051, "koonc": 1048, "korba": 378, "korean": 1028, "kornel": 1046, "kornev": 1055, "korobko": [1057, 1058, 1059], "korobov": [1041, 1042, 1043, 1046, 1047], "korolev": 1050, "kosic": 1052, "kosobrodov": 1048, "kossaifi": [1040, 1044, 1045], "kossen": [1055, 1056], "kossori": [1048, 1049], "kostelac": [1055, 1056], "kot271828": 1053, "kothari": 1051, "kotwalia": [1048, 1049], "koumenti": 1055, "koushik": 1054, "koustav": [1057, 1058], "kovalevskyi": 1046, "kowalski87": 1043, "koyama": 1054, "kozachenko": [615, 616], "kozynet": [1052, 1054], "kpca": [2, 541, 542, 543, 1034, 1035, 1040], "kr": [250, 275, 1054], "kr_fit": 250, "kr_predict": 250, "kraig": 1055, "kraktu": 1058, "kranthi": 1054, "kranz": 1033, "kraskov": [615, 616], "krasouli": [1047, 1048, 1049, 1050, 1052, 1053], "kratzwald": 1046, "krawczyk": 1054, "krawutschk": [1055, 1056], "krell": [1044, 1046], "kriegel": [415, 426, 451, 457, 464, 858, 1015], "krinitsyn": 1048, "krishna": [1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055], "krishnachaitanya9": 1051, "krishnakalyan3": 1046, "krishnan": 1050, "krivich": [1046, 1047, 1049], "kronovet": 1045, "krr": [250, 651, 1002], "krsto": 1058, "krum": [1052, 1054], "krumetoft": 1054, "krump": 1045, "kruskal": [643, 698, 702, 1006], "krzeminski": 1047, "krzysztof": 377, "ksemb": 1048, "kshitij": [1055, 1056, 1058], "ksvd": [672, 693, 694, 1005], "ksvm": 195, "ksvm_score": 195, "ksvm_time": 195, "kth": [57, 829], "ku": [1044, 1045], "kuai": [1048, 1049], "kubin": 1051, "kuhlmann": [1047, 1048], "kulbear": 1049, "kulkarni": 1048, "kull": [413, 1009], "kullback": [54, 237, 420, 546, 548, 555, 700, 1006, 1047], "kulsinski": [457, 464, 707, 786, 787, 788], "kulsinskidist": [707, 1056], "kumar": [0, 172, 378, 405, 415, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "kumaresshan": [1048, 1049, 1052], "kumawat": 1054, "kund": [1056, 1057], "kunj": 1053, "kuno": 1058, "kuo": 1044, "kurumeyuta": 1053, "kurz": [1054, 1055], "kusanagi": [1051, 1053], "kusanagi2": 1052, "kushal": [1048, 1049], "kushan": 1057, "kushwah": [1056, 1057], "kushwaha": 1052, "kusterl": 1050, "kuth": 1046, "kvam": [1041, 1043], "kvle": 1046, "kw_arg": [142, 876, 1019, 1046], "kwarg": [76, 126, 251, 385, 390, 429, 433, 437, 445, 449, 455, 457, 471, 476, 543, 546, 548, 571, 639, 654, 655, 660, 661, 668, 669, 670, 671, 685, 689, 692, 706, 707, 708, 710, 750, 871, 872, 876, 916, 927, 968, 974, 976, 997, 1047, 1051, 1053, 1057], "kwd": [779, 782, 786, 789, 800, 801], "kwei": [1043, 1044, 1045, 1046, 1047], "kxytim": 1053, "kybernetika": 380, "kye": 1048, "kyeongpil": 1048, "kyle": [0, 405, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052], "kyledrogo": 1048, "kyler": 1045, "k\u00e4rkk\u00e4inen": 1005, "l": [0, 46, 53, 55, 75, 81, 82, 101, 102, 114, 140, 172, 192, 209, 212, 221, 226, 227, 280, 281, 282, 293, 312, 320, 353, 380, 381, 389, 391, 412, 413, 415, 419, 420, 422, 425, 481, 524, 525, 526, 546, 548, 555, 563, 564, 565, 566, 573, 574, 598, 615, 616, 618, 619, 623, 627, 630, 631, 642, 656, 657, 666, 677, 680, 682, 688, 695, 697, 700, 701, 713, 723, 733, 734, 739, 764, 794, 849, 883, 920, 921, 922, 923, 998, 1003, 1005, 1006, 1009, 1011, 1012, 1013, 1017, 1021, 1023, 1025, 1043, 1048, 1052, 1053, 1054, 1055, 1057], "l1": [2, 25, 42, 46, 55, 66, 75, 101, 115, 117, 187, 196, 197, 203, 204, 205, 206, 211, 212, 221, 228, 232, 246, 276, 296, 313, 328, 392, 395, 415, 417, 420, 448, 452, 457, 464, 471, 476, 477, 478, 479, 480, 481, 482, 483, 485, 504, 510, 512, 539, 545, 546, 547, 548, 550, 551, 555, 556, 566, 573, 597, 598, 599, 605, 652, 653, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 680, 684, 685, 686, 687, 689, 696, 743, 770, 776, 781, 786, 787, 788, 793, 822, 829, 838, 854, 855, 856, 858, 859, 860, 862, 863, 864, 865, 866, 884, 892, 899, 912, 913, 919, 921, 923, 941, 990, 1005, 1007, 1009, 1012, 1019, 1023, 1024, 1025, 1030, 1045, 1047, 1053, 1056], "l1_color": 228, "l1_contour": 228, "l1_distanc": 1040, "l1_min_c": [2, 210, 1005, 1024, 1040], "l1_plot": 233, "l1_ratio": [46, 49, 54, 202, 205, 208, 283, 288, 370, 395, 420, 546, 548, 555, 654, 655, 660, 666, 667, 668, 669, 670, 671, 676, 684, 686, 689, 1005, 1023, 1041, 1043, 1045, 1052, 1054], "l1_ratio_": [655, 667, 669], "l1_ratios_": 667, "l2": [2, 53, 66, 75, 115, 117, 187, 189, 190, 196, 197, 202, 205, 208, 210, 213, 217, 222, 228, 232, 233, 235, 276, 288, 296, 316, 323, 339, 357, 358, 385, 392, 395, 415, 417, 420, 422, 423, 448, 452, 457, 464, 532, 546, 548, 555, 566, 569, 570, 573, 597, 598, 599, 651, 654, 655, 656, 657, 660, 665, 666, 667, 668, 669, 670, 671, 676, 677, 680, 684, 686, 688, 689, 694, 695, 696, 743, 758, 769, 770, 786, 787, 788, 822, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 869, 870, 884, 892, 899, 912, 913, 917, 918, 919, 921, 923, 991, 998, 1002, 1005, 1007, 1012, 1013, 1019, 1023, 1025, 1030, 1042, 1044, 1045, 1047, 1049], "l2014": 422, "l2_color": 228, "l2_contour": 228, "l2_regular": [328, 422, 569, 570], "l_": [412, 619, 660, 749, 1009], "l_i": 1019, "l_inf": 55, "l_m": 422, "l_p": [457, 464, 696, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866], "l_x": 53, "la": [0, 322, 380, 404, 1033, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "lab": [0, 378, 475, 544, 910, 1033, 1051], "labb\u00e9": 1058, "label": [2, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 83, 84, 86, 87, 90, 91, 93, 95, 98, 99, 100, 101, 102, 107, 109, 111, 112, 113, 114, 117, 118, 121, 125, 127, 129, 130, 131, 132, 137, 138, 139, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 161, 168, 170, 174, 175, 179, 180, 181, 182, 183, 185, 187, 190, 193, 195, 197, 198, 200, 201, 202, 204, 206, 207, 211, 217, 218, 219, 220, 223, 224, 225, 226, 227, 231, 232, 234, 235, 238, 239, 240, 244, 245, 249, 250, 252, 254, 255, 262, 268, 269, 270, 273, 274, 276, 277, 278, 279, 281, 284, 285, 286, 287, 288, 289, 290, 295, 301, 303, 305, 308, 312, 314, 316, 317, 321, 325, 326, 329, 332, 334, 338, 339, 340, 348, 350, 352, 353, 357, 358, 361, 362, 363, 364, 372, 375, 376, 377, 382, 383, 385, 387, 388, 392, 397, 398, 412, 413, 414, 425, 426, 432, 433, 437, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 468, 469, 472, 476, 494, 495, 496, 501, 502, 503, 504, 510, 511, 516, 517, 520, 522, 523, 527, 530, 531, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 575, 577, 578, 600, 601, 602, 603, 604, 606, 607, 608, 612, 613, 614, 617, 618, 639, 666, 667, 674, 675, 676, 681, 682, 683, 684, 685, 686, 705, 706, 708, 710, 711, 712, 713, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 730, 733, 734, 735, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 751, 762, 763, 764, 765, 790, 791, 792, 794, 795, 796, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 822, 823, 824, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 858, 859, 861, 862, 869, 870, 872, 876, 879, 880, 883, 885, 886, 893, 896, 907, 908, 909, 912, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 928, 932, 938, 943, 944, 971, 972, 979, 998, 1005, 1006, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1023, 1024, 1025, 1028, 1030, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "label1": 397, "label2": 397, "label_a": 284, "label_b": 284, "label_binar": [2, 282, 284, 879, 1044], "label_binarizer_": 841, "label_distributions_": [335, 336, 907, 908, 1051], "label_im": 101, "label_out": 78, "label_pr": [725, 744, 745, 763, 765, 803], "label_prop_model": [907, 908], "label_propag": 1041, "label_ranking_average_precision_scor": [2, 1009, 1044, 1048, 1049, 1055], "label_ranking_loss": [2, 1009, 1045], "label_spread": 337, "label_tru": [712, 725, 745, 763, 765, 803], "labelbinar": [2, 284, 397, 730, 749, 841, 876, 885, 893, 896, 1010, 1043, 1044, 1045, 1049, 1054], "labelbottom": [161, 275], "labeled_iter_": [338, 909], "labelencod": [2, 397, 577, 886, 1020, 1040, 1048, 1055, 1056, 1059], "labeling1": 1009, "labeling2": 1009, "labelkfold": [1045, 1046], "labelleft": 260, "labelpad": 275, "labelpropag": [2, 329, 337, 908, 909, 1010, 1022, 1041, 1046, 1047, 1050, 1051, 1052, 1054, 1055, 1056], "labels": [54, 320], "labels_": [73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 86, 87, 90, 93, 96, 97, 98, 100, 102, 329, 331, 358, 383, 397, 415, 433, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 462, 718, 1045], "labels_050": 100, "labels_200": 100, "labels_a": 72, "labels_b": 72, "labels_pr": [415, 712, 713, 722, 723, 725, 739, 744, 745, 763, 765, 794, 803], "labels_random": 83, "labels_tru": [73, 84, 90, 99, 415, 712, 713, 722, 723, 725, 739, 744, 745, 763, 765, 794, 803], "labels_uniqu": 98, "labelshufflesplit": [1045, 1046], "labelspread": [2, 329, 335, 336, 337, 339, 340, 907, 909, 1010, 1022, 1041, 1046, 1047, 1050, 1051, 1054, 1055, 1056], "labelspreadingifittedlabelspread": 337, "labex": 0, "labl": 153, "laboratori": [378, 1028], "lacchia": 1047, "lack": [43, 64, 350, 383, 395, 419, 837, 927, 1024, 1054], "lacost": [666, 1005], "lacouth": 1053, "lacrosse91": 1053, "lad": 1053, "lag": [42, 43, 150, 153, 187, 219, 499, 570, 709, 750, 753, 754, 756, 798, 829, 834, 835, 838, 1030], "lagacheri": 1044, "lagard": 1043, "lagat": 1050, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 321, 350, 1015], "laid": [0, 189, 383], "lakhotia": [1050, 1051], "lakshmi": 1050, "lakshmikanth": 1047, "lakshya": [1048, 1049, 1050], "lal": 908, "lalliacqua": [1050, 1053], "lam": [326, 327, 1051, 1058], "lama": 502, "lamb": [1045, 1053], "lambda": [43, 46, 47, 49, 57, 91, 149, 198, 235, 275, 276, 320, 339, 409, 411, 415, 420, 422, 423, 652, 653, 654, 655, 876, 888, 1001, 1005, 1019, 1048, 1054], "lambda_": [198, 652, 653, 888, 1005, 1047], "lambda_1": [652, 653, 1005], "lambda_2": [652, 653, 1005], "lambda_i": [1005, 1019], "lambda_init": [197, 198, 653, 1005, 1050], "lambdas_": [320, 888, 1053, 1056], "lami": 1048, "lamond": 1044, "lamp": 1033, "lamu": 1046, "lan": [666, 1055, 1056], "land": [50, 309, 387, 398, 422], "land_mask": 309, "land_refer": [50, 309], "landeau": 1057, "landmark": [889, 901, 1019], "landscap": 175, "lane": 1046, "langford": [423, 696, 1006], "langl": [1001, 1009, 1023, 1024], "languag": [0, 359, 388, 420, 423, 1023, 1028, 1029, 1033], "language_level": 384, "lanigan": 1047, "lanl": 55, "lannuzel": 1052, "lanterni": 1054, "lanzani": 1046, "lapack": [370, 371, 381, 540, 543, 549, 696, 1055], "lapack_lit": 389, "lapack_svd_driv": 1055, "laplac": [2, 175, 425, 618, 619, 847, 848, 849, 851, 1011], "laplacian": [2, 237, 375, 412, 447, 459, 469, 628, 647, 651, 699, 703, 773, 774, 782, 908, 1005, 1006, 1022, 1035, 1041, 1046], "laplacian_kernel": [2, 773, 1007, 1045], "laptop": [52, 391, 475, 910, 1054, 1055, 1056], "lar": [0, 2, 126, 172, 187, 196, 202, 203, 206, 208, 211, 380, 405, 478, 479, 485, 509, 539, 545, 547, 550, 551, 553, 554, 556, 659, 660, 661, 662, 663, 664, 671, 672, 673, 686, 689, 690, 691, 692, 693, 694, 1010, 1030, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053, 1058], "laradji": [0, 1046], "larg": [0, 2, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 82, 84, 85, 87, 88, 90, 107, 109, 123, 127, 140, 142, 143, 150, 153, 154, 156, 168, 179, 180, 192, 193, 197, 198, 206, 208, 217, 219, 221, 222, 223, 235, 249, 254, 269, 272, 278, 281, 284, 298, 305, 313, 316, 318, 328, 329, 332, 346, 351, 353, 358, 359, 370, 378, 383, 389, 392, 395, 396, 397, 401, 409, 415, 417, 419, 420, 421, 422, 424, 426, 428, 449, 451, 453, 454, 457, 458, 459, 460, 465, 469, 480, 482, 507, 522, 542, 544, 546, 548, 549, 552, 555, 557, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 590, 597, 642, 649, 651, 654, 655, 658, 660, 661, 662, 665, 666, 667, 672, 679, 680, 682, 685, 687, 693, 695, 697, 699, 700, 701, 703, 754, 787, 788, 808, 816, 818, 822, 826, 837, 847, 848, 849, 850, 851, 852, 853, 858, 869, 870, 877, 881, 882, 890, 892, 904, 905, 912, 913, 917, 918, 920, 921, 922, 923, 955, 956, 998, 1001, 1003, 1005, 1006, 1008, 1011, 1012, 1013, 1017, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "larger": [43, 46, 64, 72, 74, 77, 82, 90, 113, 115, 121, 132, 140, 151, 153, 175, 180, 181, 186, 190, 191, 195, 198, 202, 232, 233, 234, 242, 248, 250, 260, 266, 269, 276, 278, 284, 285, 293, 296, 298, 311, 312, 314, 316, 346, 350, 358, 359, 376, 378, 383, 389, 397, 412, 413, 415, 416, 417, 419, 420, 422, 423, 425, 447, 450, 456, 457, 459, 461, 463, 523, 535, 549, 552, 569, 570, 571, 575, 576, 590, 597, 651, 660, 680, 681, 682, 683, 687, 695, 700, 712, 727, 744, 805, 857, 858, 889, 891, 892, 893, 901, 906, 955, 956, 979, 982, 1001, 1002, 1005, 1006, 1008, 1009, 1012, 1013, 1017, 1019, 1023, 1024, 1044, 1045, 1048, 1049, 1050, 1053, 1054, 1057, 1058, 1059], "largest": [115, 125, 143, 172, 219, 380, 415, 417, 420, 450, 535, 549, 565, 566, 567, 568, 572, 573, 596, 717, 805, 806, 827, 850, 882, 920, 921, 922, 923, 956, 1006, 1009, 1019, 1024, 1025], "largest_clust": [415, 450], "largest_coef": [115, 535], "larrald": 1057, "lars_path": [2, 205, 392, 539, 545, 547, 550, 551, 553, 554, 556, 658, 659, 660, 661, 662, 663, 664, 671, 672, 673, 691, 692, 693, 694, 1005, 1040, 1042, 1045, 1049, 1051], "lars_path_gram": [2, 690, 1005, 1049], "larscv": [2, 406, 658, 673, 690, 691, 1047, 1053, 1057], "larson": [1045, 1049, 1050, 1052, 1054], "larsson": [1052, 1053, 1054], "lasagna": 1046, "laska": 1046, "lasso": [2, 42, 55, 101, 132, 158, 163, 187, 190, 196, 208, 216, 225, 265, 328, 332, 353, 370, 395, 417, 418, 420, 422, 423, 424, 478, 479, 485, 509, 532, 539, 545, 547, 550, 551, 553, 554, 556, 605, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 678, 680, 686, 689, 690, 691, 692, 693, 694, 729, 731, 732, 833, 834, 835, 873, 892, 998, 1009, 1010, 1023, 1030, 1031, 1035, 1040, 1044, 1045, 1046, 1048, 1049, 1051, 1053, 1054, 1058], "lasso_cd": [539, 545, 550, 556], "lasso_cv": 163, "lasso_lar": [132, 539, 545, 550, 556, 1050], "lasso_lars_": [204, 206], "lasso_path": [2, 205, 659, 660, 661, 662, 663, 664, 671, 690, 691, 1005, 1040, 1042, 1044, 1053], "lasso_pipelin": 158, "lassocolumntransform": 158, "lassocv": [2, 53, 158, 163, 190, 202, 206, 406, 422, 424, 659, 660, 662, 663, 664, 671, 692, 1005, 1040, 1043, 1047, 1050, 1051, 1053, 1054, 1057, 1058, 1059], "lassocvlassocv": 158, "lassolar": [2, 659, 660, 661, 663, 664, 671, 672, 673, 690, 691, 692, 1005, 1010, 1040, 1041, 1043, 1047, 1050, 1051, 1053], "lassolars": [2, 204, 206, 424, 659, 662, 663, 1005, 1040, 1047, 1049, 1053, 1054], "lassolarscv": [2, 206, 406, 424, 660, 661, 662, 664, 671, 673, 690, 691, 692, 1005, 1040, 1047, 1053, 1057], "lassolarsic__criterion": [204, 206], "last": [43, 58, 79, 93, 150, 190, 197, 217, 218, 225, 230, 244, 266, 278, 286, 287, 321, 327, 329, 338, 361, 370, 378, 381, 385, 387, 388, 391, 397, 401, 409, 415, 416, 423, 427, 445, 449, 454, 466, 471, 474, 475, 523, 541, 567, 568, 569, 570, 591, 592, 595, 601, 602, 605, 618, 690, 691, 693, 694, 705, 706, 708, 709, 710, 715, 790, 805, 806, 811, 812, 827, 852, 853, 857, 872, 873, 877, 885, 891, 927, 959, 983, 997, 998, 1004, 1005, 1006, 1008, 1010, 1013, 1023, 1029, 1040, 1046, 1047, 1048, 1049, 1054, 1056, 1057], "last_hour": [43, 52], "last_mean": 983, "last_n": 983, "last_var": 983, "lat": [50, 309, 506, 772], "late": [322, 372], "latenc": [42, 46, 187, 369, 532, 573, 680, 686, 838, 892, 918, 973, 982, 1028, 1030, 1035, 1043], "latent": [2, 42, 45, 55, 133, 187, 314, 358, 418, 423, 425, 495, 540, 544, 546, 547, 548, 551, 552, 596, 599, 868, 1008, 1028, 1030, 1034, 1035, 1042, 1045], "latentdirichletalloc": [2, 54, 372, 388, 420, 1028, 1045, 1047, 1054, 1055], "later": [0, 50, 88, 137, 142, 151, 174, 191, 195, 197, 254, 269, 293, 309, 359, 366, 381, 389, 395, 396, 409, 422, 858, 881, 882, 890, 892, 1001, 1019, 1043, 1046, 1048, 1052], "latest": [325, 326, 327, 328, 329, 330, 331, 332, 333, 381, 383, 387, 389, 391, 1025, 1054], "latestst": 387, "latex": 1040, "latexpdf": 383, "latin": [47, 423], "latitud": [309, 316, 378, 506, 707, 772], "lattarini": 1042, "latter": [43, 54, 265, 275, 284, 285, 304, 321, 353, 372, 380, 397, 414, 419, 422, 423, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 750, 805, 806, 807, 808, 811, 812, 817, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 975, 1012, 1017, 1049], "laughlin": 1047, "launch": [357, 358, 401, 1033], "laur": 1040, "lauren": [0, 367, 700, 704, 1006, 1052, 1055], "laurent": [1043, 1044, 1047, 1048, 1055, 1056], "laurenz": 1052, "lauritzen": 1048, "laveen": 1053, "law": 1033, "lawrenc": 269, "lawson": [1047, 1048, 1049], "lawton": 1048, "layer": [2, 43, 67, 146, 156, 165, 176, 178, 187, 224, 233, 255, 310, 313, 314, 318, 319, 340, 351, 370, 391, 422, 522, 523, 530, 575, 838, 868, 869, 870, 873, 892, 1014, 1030, 1031, 1035, 1046], "layout": [137, 316, 395, 912, 913, 914, 917, 939, 1024, 1043, 1045, 1057], "layton": [0, 405, 1040, 1041, 1042, 1043, 1045], "lazaru": 1058, "lazebnik": [766, 767, 1007], "lazi": [52, 398, 423, 1023, 1044], "lazyfram": 107, "lazz": 1055, "lb": [879, 1020], "lbfg": [311, 385, 656, 657, 666, 667, 677, 680, 682, 688, 695, 843, 846, 869, 870, 1005, 1013, 1044, 1045, 1047, 1048, 1053, 1054, 1055, 1057], "lbfgsb": 666, "lbfin": 1050, "lc": [51, 240, 247], "lceil": [412, 1015], "lda": [54, 69, 120, 122, 125, 127, 133, 187, 305, 366, 380, 411, 512, 544, 549, 557, 558, 861, 1028, 1030, 1031, 1034, 1035, 1045], "lda_featur": 388, "lda_model": 388, "lda_np": 411, "ldavid": 1046, "ldflag": 381, "ldirer": 1047, "ldl": [172, 380], "ldot": [1005, 1009, 1011, 1013, 1023], "ldwy4": [1057, 1058], "le": [666, 880, 1000, 1005, 1012, 1020, 1022, 1048, 1052, 1053, 1057], "le_": 577, "lead": [0, 46, 62, 64, 67, 72, 87, 90, 96, 106, 143, 147, 148, 150, 171, 172, 190, 191, 192, 197, 202, 206, 208, 217, 221, 249, 251, 254, 269, 275, 276, 278, 282, 301, 302, 313, 316, 318, 321, 322, 327, 346, 353, 358, 361, 366, 370, 371, 377, 382, 391, 392, 396, 397, 412, 413, 414, 415, 417, 419, 420, 421, 422, 424, 459, 469, 472, 475, 504, 523, 535, 543, 546, 547, 548, 551, 555, 559, 565, 566, 567, 568, 571, 572, 573, 574, 614, 638, 654, 655, 658, 660, 661, 662, 668, 669, 670, 671, 687, 699, 703, 754, 805, 811, 812, 840, 852, 853, 857, 876, 883, 893, 904, 905, 910, 912, 920, 921, 922, 923, 998, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1019, 1022, 1023, 1025, 1033, 1043, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1056, 1057, 1058, 1059], "leader": [383, 1033], "leadership": 0, "leaf": [76, 142, 154, 156, 361, 365, 415, 422, 426, 448, 449, 450, 451, 452, 453, 457, 464, 470, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 920, 921, 922, 923, 924, 925, 1012, 1025, 1043, 1045, 1047, 1051, 1054], "leaf_id": 365, "leaf_rot": 193, "leaf_siz": [426, 451, 453, 457, 462, 463, 464, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 1012], "leagu": 378, "leak": [142, 280, 357, 366, 416, 419, 872, 897, 898, 900, 901, 902, 903, 1019, 1040, 1047, 1050, 1056, 1057, 1058], "leakag": [396, 397, 416, 1035], "lean": 409, "leandro": [1049, 1053], "lear": 1033, "learn": [2, 15, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 334, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 375, 376, 377, 378, 380, 382, 386, 389, 390, 391, 392, 396, 397, 400, 402, 403, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 423, 424, 425, 429, 430, 432, 433, 434, 435, 437, 438, 439, 444, 445, 446, 449, 450, 453, 454, 456, 457, 464, 471, 472, 474, 475, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 516, 517, 518, 520, 522, 523, 524, 525, 526, 528, 529, 530, 532, 533, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 584, 589, 590, 591, 592, 595, 596, 597, 598, 599, 601, 602, 607, 610, 611, 618, 619, 622, 627, 630, 634, 636, 638, 640, 642, 646, 648, 649, 651, 652, 653, 654, 656, 660, 665, 666, 676, 677, 684, 685, 686, 688, 696, 697, 698, 699, 700, 704, 705, 708, 709, 710, 716, 721, 725, 726, 729, 731, 732, 734, 740, 743, 749, 750, 751, 756, 764, 786, 787, 788, 792, 793, 795, 796, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 854, 856, 861, 868, 869, 870, 871, 872, 873, 875, 877, 879, 882, 884, 885, 886, 887, 890, 891, 892, 893, 896, 904, 905, 907, 908, 909, 910, 912, 913, 914, 917, 920, 921, 922, 923, 928, 930, 941, 950, 951, 961, 974, 975, 998, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1030, 1032, 1035, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "learn_rat": 1041, "learnalgorithm": 403, "learner": [2, 47, 138, 148, 158, 372, 562, 567, 568, 569, 570, 590, 597, 638, 854, 855, 860, 862, 863, 1011, 1014, 1025, 1028, 1029, 1056], "learning_curv": [2, 277, 330, 406, 814, 1004, 1043, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1057, 1059], "learning_decai": 544, "learning_method": [54, 388, 544], "learning_offset": [54, 544], "learning_r": [46, 137, 148, 149, 150, 151, 152, 153, 242, 296, 312, 314, 326, 328, 422, 561, 562, 567, 568, 569, 570, 676, 684, 685, 686, 700, 868, 869, 870, 1006, 1016, 1023, 1041, 1049, 1053], "learning_rate_": [700, 870], "learning_rate_init": [191, 312, 313, 869, 870], "learningcurvedisplai": [2, 250, 277, 330, 1004, 1055, 1056], "learnt": [153, 190, 323, 366, 397, 419, 893, 998, 1019], "least": [2, 37, 44, 52, 54, 113, 114, 116, 117, 125, 126, 140, 151, 170, 172, 182, 187, 189, 196, 197, 200, 202, 207, 210, 213, 217, 219, 221, 222, 225, 234, 235, 248, 254, 275, 293, 295, 321, 327, 328, 346, 358, 359, 370, 376, 378, 380, 382, 383, 387, 389, 391, 395, 397, 398, 406, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 451, 455, 457, 463, 464, 465, 468, 481, 488, 489, 490, 491, 492, 502, 524, 539, 545, 547, 549, 550, 551, 553, 554, 555, 556, 557, 565, 566, 567, 568, 570, 572, 573, 574, 601, 602, 610, 643, 651, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 700, 705, 720, 724, 726, 793, 809, 813, 814, 820, 822, 823, 824, 826, 827, 829, 833, 836, 837, 838, 869, 870, 873, 884, 892, 917, 920, 921, 922, 923, 948, 971, 999, 1002, 1006, 1009, 1012, 1021, 1023, 1024, 1025, 1029, 1030, 1031, 1033, 1035, 1040, 1042, 1043, 1046, 1047, 1051], "least_absolute_devi": [1050, 1052, 1053], "least_angl": 392, "least_squar": 1053, "leastangle_2002": [172, 380], "leastsquareserror": 1049, "leav": [2, 88, 137, 142, 151, 191, 193, 235, 282, 321, 365, 366, 370, 380, 382, 388, 397, 415, 422, 448, 449, 452, 453, 470, 511, 565, 566, 567, 568, 569, 570, 572, 573, 574, 681, 683, 810, 815, 816, 817, 818, 826, 827, 852, 853, 920, 921, 922, 923, 998, 1006, 1012, 1016, 1025, 1040, 1047, 1049, 1051, 1052, 1056], "leaveonegroupout": [2, 280, 419, 809, 816, 817, 1046], "leaveonelabelout": 1046, "leaveoneout": [2, 280, 419, 1058], "leavepgroupsout": [2, 419, 810, 1046], "leaveplabelout": 1046, "leaveplabelsout": 1046, "leavepout": [2, 419, 816], "leaves_parallel": 924, "lebedev": [1046, 1047], "lebel": 1055, "lebourgeoi": 1033, "lectur": [415, 652, 1001, 1027], "lecture2": 652, "lecun": [1013, 1023], "led": 1040, "ledoit": [2, 49, 65, 70, 110, 111, 114, 115, 187, 305, 480, 482, 486, 487, 520, 557, 1003, 1030], "ledoit_wolf": [2, 115, 417, 1053], "ledoit_wolf_shrinkag": [2, 1053], "ledoitwolf": [2, 69, 110, 112, 115, 130, 152, 187, 307, 417, 476, 477, 481, 482, 483, 484, 808, 1030, 1044], "lee": [420, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1055, 1059], "leepei": 1044, "leereev": 1047, "leeuw": 643, "lefebvr": [1053, 1054], "lefevr": [420, 546], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 80, 86, 90, 97, 99, 106, 109, 114, 115, 121, 125, 126, 137, 140, 142, 143, 144, 147, 150, 153, 158, 160, 177, 183, 186, 190, 193, 210, 217, 218, 219, 221, 228, 230, 231, 234, 235, 244, 248, 252, 254, 255, 260, 262, 263, 266, 271, 272, 273, 274, 276, 284, 285, 287, 299, 301, 302, 309, 311, 314, 316, 329, 331, 332, 336, 345, 346, 350, 365, 378, 383, 385, 387, 412, 415, 418, 419, 421, 422, 423, 425, 432, 438, 453, 479, 489, 490, 491, 492, 501, 506, 557, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 595, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 643, 647, 651, 659, 663, 805, 806, 808, 811, 812, 815, 822, 829, 885, 892, 920, 921, 922, 923, 924, 942, 956, 979, 982, 998, 1001, 1003, 1005, 1007, 1009, 1011, 1016, 1021, 1023, 1025, 1047, 1049, 1054, 1059], "left_h": 316, "left_impur": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923], "leftarrow": [415, 1013, 1023], "leftmost": 1013, "legaci": [377, 387, 397, 950, 951, 1040, 1047, 1052], "legarreta": [1051, 1053, 1054], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 69, 72, 75, 96, 106, 107, 109, 111, 112, 113, 114, 117, 118, 120, 125, 127, 130, 131, 132, 137, 138, 139, 140, 141, 143, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 168, 174, 175, 179, 180, 181, 182, 183, 190, 191, 195, 197, 198, 200, 204, 205, 206, 207, 211, 217, 218, 219, 220, 223, 224, 225, 226, 227, 230, 231, 232, 234, 235, 240, 245, 247, 248, 249, 250, 252, 255, 262, 269, 270, 272, 274, 275, 277, 278, 279, 280, 282, 285, 287, 288, 289, 290, 293, 299, 301, 302, 303, 308, 312, 317, 321, 326, 329, 332, 337, 345, 348, 350, 352, 357, 361, 362, 363, 364, 708, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "legend_el": [120, 154, 230, 278, 299, 350], "legend_handl": 303, "legend_lin": 48, "legend_titl": 223, "legitim": [269, 1006], "legitimate_accept": 269, "legitimate_refus": 269, "lego": 1028, "lehoucq": 420, "leibler": [54, 237, 420, 546, 548, 555, 700, 1006, 1047], "leibniz": 1009, "leig": 1046, "leightonzhang": 1046, "leinweb": [1048, 1049], "leisur": 43, "lejeun": 1047, "lekhwani": 1049, "leland": [1046, 1047, 1048, 1050, 1051, 1056], "lemaitr": [0, 404, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "lemir": 1051, "lemma": [37, 248, 375, 542, 549, 557, 904, 905, 906, 1003, 1035, 1043], "lemmat": 423, "lemmatoken": 423, "lemo": [1056, 1057], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 84, 85, 86, 90, 95, 96, 97, 98, 99, 100, 104, 106, 126, 132, 133, 135, 140, 143, 146, 147, 153, 164, 165, 170, 174, 182, 186, 191, 193, 216, 217, 235, 240, 244, 247, 248, 249, 251, 253, 254, 260, 262, 263, 270, 273, 275, 276, 283, 284, 286, 290, 295, 296, 303, 305, 306, 311, 317, 318, 319, 322, 331, 333, 335, 336, 339, 346, 352, 355, 357, 358, 359, 365, 395, 397, 422, 425, 433, 437, 439, 444, 452, 457, 463, 471, 515, 523, 558, 577, 578, 590, 605, 640, 641, 790, 808, 822, 834, 838, 840, 842, 843, 893, 907, 908, 1049, 1052], "lenail": [1048, 1052], "lend": 1033, "lene": 1056, "length": [2, 80, 104, 120, 121, 131, 133, 146, 172, 174, 175, 176, 179, 180, 182, 195, 201, 251, 252, 255, 258, 299, 327, 330, 343, 359, 376, 380, 383, 391, 392, 397, 416, 420, 422, 423, 425, 452, 497, 516, 517, 520, 523, 531, 559, 571, 589, 590, 597, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 640, 654, 655, 658, 659, 660, 661, 662, 664, 665, 668, 669, 670, 671, 689, 692, 789, 808, 811, 812, 822, 838, 840, 843, 844, 846, 854, 855, 856, 858, 860, 899, 925, 938, 940, 944, 962, 963, 979, 982, 1008, 1015, 1019, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1056], "length_scal": [174, 175, 178, 179, 180, 181, 183, 425, 620, 623, 626, 627, 629, 630, 631, 632], "length_scale_bound": [174, 180, 181, 183, 425, 619, 623, 627, 630, 631], "length_scale_grid": 180, "lengthi": [383, 395], "lenient": [886, 1029, 1057], "lenz": [1051, 1055], "leo": 1057, "leogrin": 1058, "leon": [684, 685, 686, 1040, 1058], "leonardo": 1053, "leonenko": [615, 616], "leonieborn": 1046, "leopoldo": 1053, "leq": [177, 420, 422, 1005, 1009, 1012, 1023, 1024, 1025], "lera": 1047, "leriqu": [1046, 1048], "lernen": 457, "lesne": 1054, "less": [43, 44, 47, 64, 87, 88, 95, 121, 123, 126, 133, 137, 144, 150, 151, 153, 174, 181, 190, 200, 202, 217, 219, 221, 250, 254, 261, 263, 269, 275, 276, 284, 286, 289, 290, 317, 320, 321, 322, 327, 329, 333, 350, 357, 358, 366, 370, 372, 378, 383, 385, 395, 397, 409, 415, 419, 420, 422, 423, 427, 446, 448, 450, 452, 455, 457, 459, 464, 467, 469, 470, 489, 490, 491, 504, 523, 539, 543, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 598, 604, 627, 635, 642, 655, 669, 684, 686, 700, 709, 729, 730, 731, 732, 733, 744, 760, 772, 787, 788, 793, 803, 805, 806, 810, 811, 812, 818, 836, 847, 848, 849, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 875, 887, 889, 890, 892, 895, 901, 902, 912, 913, 920, 921, 922, 923, 944, 959, 998, 999, 1001, 1002, 1003, 1006, 1008, 1009, 1012, 1014, 1019, 1023, 1024, 1025, 1028, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1050, 1054, 1055, 1057], "lessen": [223, 666, 667], "lesser": [311, 397, 449, 549, 1005], "let": [43, 44, 52, 88, 90, 99, 105, 109, 120, 123, 128, 144, 147, 150, 151, 153, 155, 174, 180, 181, 186, 190, 191, 192, 199, 206, 217, 219, 235, 237, 241, 251, 258, 269, 270, 275, 278, 282, 289, 333, 357, 359, 365, 366, 378, 383, 385, 389, 395, 409, 412, 414, 415, 419, 422, 423, 452, 498, 508, 512, 518, 542, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 689, 692, 878, 885, 886, 1005, 1006, 1007, 1008, 1009, 1016, 1017, 1019, 1024, 1025, 1033, 1050, 1059], "letelli": 1046, "letter": [172, 182, 378, 380, 387, 423, 796, 797, 814, 831, 1009], "leu": 1054, "leung": 1051, "lev_metr": 395, "levarag": 332, "level": [43, 48, 50, 51, 64, 70, 76, 88, 123, 142, 146, 165, 172, 173, 174, 175, 178, 181, 183, 187, 190, 191, 228, 229, 230, 231, 232, 235, 244, 248, 249, 264, 269, 275, 278, 284, 285, 302, 309, 344, 345, 347, 348, 350, 353, 358, 365, 370, 378, 380, 383, 385, 389, 395, 397, 400, 401, 406, 413, 420, 423, 425, 429, 461, 475, 501, 502, 504, 511, 529, 539, 544, 545, 553, 554, 555, 569, 570, 575, 576, 619, 623, 630, 631, 633, 674, 675, 676, 684, 685, 686, 695, 698, 700, 702, 708, 710, 724, 731, 736, 793, 833, 834, 835, 837, 840, 841, 868, 869, 870, 910, 925, 998, 1005, 1009, 1010, 1012, 1017, 1023, 1025, 1028, 1029, 1030, 1043, 1051, 1054, 1055, 1056, 1059], "levelnam": 123, "leven": 395, "levenshtein": [333, 395], "levenshtein_dist": 333, "levequ": [850, 892], "leverag": [43, 47, 72, 84, 118, 235, 333, 357, 358, 370, 371, 381, 397, 419, 422, 887, 998, 1005, 1043, 1055, 1058], "levesqu": 1046, "levi": [542, 1047], "levinson": [1048, 1049], "levitski": [1055, 1056, 1057], "levitskii": 1053, "lewi": [378, 1047, 1051], "lex": [415, 459, 469], "lexicograph": [397, 575, 796, 802, 854, 862], "lexicon": 1019, "lexsort": 61, "lf": 391, "lfw": [2, 45, 378, 501, 502, 1040], "lfw_home": 378, "lfw_pairs_train": [378, 501], "lfw_peopl": [45, 378, 502], "lg2012": 422, "lgtm": 1047, "li": [0, 338, 378, 404, 405, 647, 650, 704, 734, 764, 905, 998, 1001, 1009, 1012, 1019, 1021, 1024, 1040, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "liabil": 235, "liac": [330, 377, 383, 504, 1055, 1056], "liam": [1048, 1049], "liang": [1046, 1051, 1052, 1057, 1058], "liau": 1043, "lib": [371, 381, 401, 1028], "liberti": 266, "libisel": 1058, "liblinear": [210, 344, 389, 666, 667, 796, 912, 913, 914, 917, 918, 1005, 1009, 1024, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1056], "libomp": [381, 1052], "librari": [45, 269, 275, 328, 330, 363, 366, 375, 377, 378, 381, 382, 383, 384, 389, 391, 395, 396, 397, 401, 409, 411, 471, 666, 912, 913, 914, 915, 917, 918, 1005, 1009, 1024, 1025, 1028, 1029, 1033, 1038, 1043, 1047, 1048, 1049, 1050, 1051, 1053, 1057], "libsvm": [2, 195, 344, 376, 389, 494, 516, 571, 912, 913, 914, 915, 916, 917, 918, 1024, 1035, 1040, 1042, 1048, 1051, 1054], "libsvmtool": [195, 377, 494, 516, 517], "licenc": 377, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 377, 395, 397, 1025, 1033], "lichman": 380, "liddel": 1048, "lidston": [847, 848, 849, 851, 1011], "lie": [52, 95, 117, 171, 190, 249, 316, 337, 344, 346, 420, 422, 614, 860, 862, 863, 864, 912, 913, 1003, 1006, 1009, 1019, 1024], "lieg": 422, "lieret": 1055, "lieu": [1046, 1047], "life": [52, 153, 268, 333, 391, 1006], "lifecycl": [1028, 1029], "lifo": 927, "lift": 401, "light": [140, 378], "lighter": [370, 708, 710, 790, 797, 1056], "lightfm": 1028, "lightgbm": [153, 422, 569, 570, 1028, 1049, 1056], "lightgreen": [160, 223, 234], "lightgrei": 49, "lightweight": [384, 808, 822, 833, 834], "ligo": 1047, "lihaitao": 1058, "lik_max": 111, "lik_min": 111, "like": [0, 2, 43, 51, 52, 87, 90, 93, 95, 104, 121, 126, 130, 132, 135, 137, 139, 144, 150, 153, 154, 174, 180, 190, 198, 217, 251, 266, 269, 275, 278, 279, 282, 283, 290, 305, 314, 316, 321, 322, 325, 338, 346, 350, 357, 358, 366, 370, 372, 375, 377, 378, 382, 383, 385, 387, 390, 391, 392, 395, 396, 397, 406, 409, 411, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 520, 521, 523, 527, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 587, 589, 590, 591, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 934, 936, 943, 944, 958, 962, 971, 972, 979, 980, 981, 993, 995, 997, 998, 1001, 1003, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1015, 1016, 1019, 1024, 1025, 1029, 1033, 1037, 1040, 1043, 1044, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "likelihood": [2, 69, 92, 110, 112, 113, 114, 115, 130, 152, 174, 175, 176, 178, 179, 180, 181, 183, 187, 204, 235, 264, 267, 275, 281, 307, 314, 316, 385, 397, 413, 417, 420, 422, 425, 444, 476, 477, 478, 479, 480, 481, 482, 483, 484, 523, 540, 544, 549, 557, 558, 559, 618, 619, 639, 653, 666, 720, 749, 805, 806, 808, 835, 838, 857, 868, 888, 900, 914, 915, 917, 918, 1005, 1008, 1011, 1019, 1024, 1030, 1043, 1044, 1049, 1055], "likewis": [252, 415, 531], "lil": [397, 561, 562, 879, 934, 962, 1012], "lil_matrix": 55, "lili": [1048, 1049], "lilian": [1045, 1046, 1057], "lim": [177, 542], "lima": [1053, 1054], "limit": [43, 47, 55, 64, 72, 77, 92, 101, 115, 137, 144, 145, 151, 158, 185, 190, 191, 192, 197, 217, 218, 234, 248, 282, 318, 322, 328, 353, 359, 366, 371, 384, 385, 388, 395, 397, 398, 413, 414, 415, 418, 420, 424, 453, 470, 475, 567, 568, 569, 570, 640, 658, 687, 690, 691, 696, 786, 829, 860, 862, 863, 864, 885, 886, 910, 914, 915, 916, 917, 918, 998, 1005, 1006, 1008, 1009, 1016, 1017, 1019, 1029, 1035, 1048, 1050, 1053, 1054, 1057, 1059], "limits_": 1012, "lin": [0, 542, 666, 1024, 1045, 1046, 1047, 1048], "lin_clf": 1024, "linalg": [70, 89, 111, 112, 115, 130, 132, 203, 260, 261, 262, 265, 266, 332, 383, 389, 420, 458, 459, 460, 469, 529, 540, 543, 549, 552, 665, 680, 682, 695, 699, 703, 954], "linalgerror": 1050, "linalgwarn": 1059, "lincoln": 378, "lindenbaum": 542, "lindenstrauss": [37, 90, 187, 243, 375, 496, 510, 904, 905, 906, 1026, 1030, 1035], "lindgren": 1058, "lindquist": 1055, "line": [48, 50, 52, 55, 75, 78, 95, 104, 113, 123, 128, 137, 143, 149, 173, 185, 186, 187, 190, 191, 204, 206, 207, 209, 212, 213, 215, 218, 220, 225, 226, 228, 229, 231, 244, 248, 249, 252, 254, 272, 279, 281, 282, 302, 306, 309, 317, 327, 345, 348, 350, 351, 354, 355, 357, 377, 378, 381, 383, 384, 385, 387, 388, 389, 390, 391, 395, 420, 421, 422, 445, 494, 495, 496, 516, 517, 550, 561, 562, 563, 564, 618, 621, 622, 640, 678, 694, 708, 709, 710, 814, 831, 1003, 1009, 1013, 1016, 1023, 1028, 1030, 1032, 1042, 1051, 1053, 1056, 1057], "line0": [51, 240], "line1": [46, 51, 240], "line2": [46, 51, 240, 354], "line2d": [48, 113, 231, 302, 345, 348, 814, 831], "line_": [390, 445, 706, 708, 709, 710, 814, 831], "line_bin": 317, "line_fig": 143, "line_i": 220, "line_kw": [153, 155, 255, 277, 326, 332, 640, 814, 831], "line_kwarg": [158, 709], "line_profil": 389, "line_trac": 143, "line_x": [220, 234], "line_y_ransac": 220, "linea": 403, "linear": [2, 12, 44, 48, 49, 51, 52, 53, 64, 65, 66, 67, 72, 87, 92, 108, 109, 111, 112, 113, 114, 115, 118, 120, 123, 128, 131, 140, 142, 156, 158, 161, 163, 165, 167, 172, 178, 180, 185, 186, 188, 189, 191, 195, 198, 200, 202, 203, 204, 206, 207, 212, 214, 215, 218, 219, 221, 222, 225, 229, 231, 233, 234, 235, 236, 239, 241, 247, 248, 250, 252, 253, 256, 265, 268, 271, 272, 273, 275, 278, 280, 281, 282, 283, 284, 285, 290, 301, 302, 304, 305, 306, 314, 316, 317, 318, 321, 323, 327, 328, 341, 343, 346, 347, 348, 351, 353, 354, 357, 363, 364, 371, 375, 379, 380, 381, 385, 386, 388, 397, 400, 403, 413, 415, 418, 419, 420, 421, 422, 423, 424, 425, 427, 449, 451, 462, 472, 474, 482, 489, 490, 491, 504, 509, 510, 520, 523, 529, 532, 540, 541, 542, 543, 544, 547, 549, 551, 552, 556, 557, 558, 562, 574, 590, 597, 601, 602, 614, 617, 622, 628, 639, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 695, 696, 697, 698, 699, 700, 701, 709, 715, 724, 727, 758, 761, 773, 775, 782, 793, 808, 819, 823, 835, 838, 852, 853, 857, 861, 868, 869, 870, 873, 877, 878, 879, 882, 885, 887, 889, 890, 891, 892, 901, 905, 912, 913, 914, 915, 916, 917, 918, 998, 1000, 1001, 1002, 1004, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1023, 1024, 1030, 1031, 1033, 1034, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054], "linear_baselin": 327, "linear_kernel": [2, 411, 769, 773, 1007, 1048, 1059], "linear_model": [2, 43, 46, 47, 49, 53, 62, 64, 66, 89, 105, 107, 109, 118, 142, 158, 160, 161, 163, 164, 170, 171, 172, 174, 185, 187, 189, 190, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 244, 245, 246, 247, 251, 253, 256, 258, 269, 271, 278, 283, 284, 288, 289, 290, 295, 314, 317, 318, 321, 323, 325, 326, 327, 328, 329, 331, 332, 333, 339, 357, 366, 370, 372, 382, 383, 385, 389, 391, 392, 396, 397, 406, 411, 414, 416, 422, 435, 440, 445, 472, 545, 547, 550, 551, 553, 554, 556, 575, 576, 577, 578, 605, 639, 640, 642, 643, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 708, 709, 796, 807, 822, 831, 833, 834, 835, 837, 839, 843, 844, 845, 846, 870, 887, 891, 912, 913, 916, 919, 948, 950, 951, 952, 992, 1001, 1005, 1009, 1010, 1015, 1017, 1019, 1023, 1030, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "linear_model_preprocessor": 217, "linear_pca": 416, "linear_preprocessor": 158, "linear_regress": [219, 290], "linear_sum_assign": [412, 727], "linear_svc": 1024, "linear_svm": 249, "linear_svm_scor": 249, "linear_svm_tim": 249, "lineardiscriminantanalysi": [2, 69, 70, 131, 238, 305, 366, 411, 544, 558, 861, 1003, 1010, 1012, 1040, 1043, 1044, 1045, 1046, 1047, 1049, 1052, 1054, 1055, 1056], "linearli": [67, 128, 139, 172, 190, 197, 231, 238, 244, 284, 285, 318, 321, 350, 357, 370, 380, 395, 420, 422, 523, 561, 650, 715, 881, 882, 1009, 1012, 1015, 1024, 1047, 1056], "linearly_separ": [67, 311], "linearmodel": 1053, "linearoper": [332, 695], "linearregress": [2, 118, 161, 189, 197, 207, 212, 213, 214, 215, 220, 223, 234, 247, 251, 253, 271, 290, 317, 366, 383, 395, 396, 416, 422, 472, 578, 640, 643, 654, 657, 660, 662, 679, 680, 695, 1005, 1009, 1010, 1019, 1044, 1045, 1049, 1052, 1053, 1054, 1056], "linearregressionifittedlinearregress": 247, "linearregressionlinearregress": 161, "linearsvc": [2, 62, 64, 104, 106, 168, 169, 187, 195, 249, 272, 274, 282, 318, 325, 341, 343, 347, 348, 353, 357, 370, 385, 389, 413, 423, 424, 444, 520, 575, 585, 639, 647, 651, 660, 680, 681, 682, 683, 684, 695, 743, 750, 835, 840, 913, 914, 917, 919, 1005, 1009, 1010, 1024, 1030, 1040, 1041, 1042, 1046, 1048, 1051, 1056], "linearsvc__c": 318, "linearsvclinearsvc": [106, 169, 282], "linearsvr": [2, 576, 918, 1024, 1044, 1046, 1051, 1056], "linecollect": [51, 240, 247, 640], "linen": [51, 240], "lineno": 389, "lineplot": [153, 275], "liner": [385, 838], "lines_": [390, 640, 814, 831], "linestyl": [49, 50, 69, 95, 107, 113, 130, 132, 137, 149, 160, 163, 165, 174, 177, 179, 181, 183, 192, 193, 204, 205, 206, 217, 218, 219, 223, 227, 229, 230, 235, 252, 254, 269, 272, 274, 278, 279, 284, 289, 301, 309, 312, 317, 344, 347, 348, 350, 351, 353], "linewidth": [61, 69, 70, 72, 75, 93, 107, 111, 118, 121, 125, 138, 150, 153, 155, 174, 178, 182, 206, 207, 211, 212, 213, 215, 218, 220, 223, 231, 234, 244, 252, 254, 284, 288, 302, 306, 317, 326, 332, 344, 345, 347, 363], "linger": 219, "linguist": [724, 909, 1022], "lingyi1110": 1055, "link": [51, 55, 137, 190, 191, 197, 217, 221, 235, 260, 269, 278, 306, 361, 371, 377, 382, 383, 384, 385, 387, 391, 397, 413, 415, 417, 420, 422, 425, 569, 570, 618, 656, 677, 688, 696, 713, 937, 939, 1005, 1012, 1025, 1026, 1028, 1032, 1038, 1040, 1043, 1044, 1047, 1048, 1051, 1057], "link_thickness_i": 306, "linkag": [71, 74, 75, 76, 79, 82, 87, 90, 91, 92, 102, 187, 193, 447, 448, 452, 453, 470, 520, 522, 530, 892, 1028, 1030, 1043, 1048, 1051], "linkage_matrix": 76, "linkage_tre": 1044, "linkedin": 387, "linker": 384, "linnerrud": [376, 1035], "linnerud": [2, 380, 513], "linprog": [678, 1005], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 84, 90, 113, 114, 124, 132, 138, 150, 174, 175, 177, 178, 179, 180, 181, 183, 191, 197, 198, 200, 202, 207, 211, 217, 218, 219, 223, 227, 228, 229, 230, 231, 235, 242, 244, 247, 248, 250, 252, 264, 275, 277, 278, 282, 283, 284, 285, 290, 301, 302, 308, 309, 317, 319, 329, 330, 345, 346, 349, 350, 351, 353, 354, 355, 639, 640, 814, 836, 852, 853], "lint": [383, 391], "linter": 587, "linthresh": [197, 202], "linu": [1056, 1057, 1058], "linux": [383, 385, 386, 391, 1028, 1040], "lipoprotein": [172, 380], "lippert": 1005, "lippmann": 378, "lipschitz": [37, 1021], "lisa": [1048, 1049, 1051, 1052, 1054, 1055], "lise": 1054, "list": [0, 2, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 84, 97, 104, 132, 133, 141, 143, 149, 158, 193, 221, 254, 255, 270, 273, 275, 276, 278, 279, 284, 288, 305, 318, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 349, 358, 359, 372, 377, 378, 381, 382, 383, 385, 386, 388, 389, 390, 391, 392, 395, 396, 397, 398, 401, 402, 406, 413, 415, 416, 419, 421, 422, 423, 438, 440, 444, 457, 463, 464, 471, 472, 473, 474, 478, 479, 485, 489, 490, 491, 495, 496, 497, 498, 500, 501, 504, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 531, 540, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 599, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 640, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 689, 692, 694, 695, 700, 704, 705, 707, 718, 719, 720, 721, 724, 726, 733, 741, 750, 754, 762, 786, 789, 791, 796, 802, 805, 806, 808, 811, 812, 814, 819, 820, 822, 831, 833, 834, 835, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 876, 880, 883, 885, 886, 891, 893, 909, 913, 915, 918, 920, 921, 922, 923, 926, 933, 934, 938, 939, 940, 944, 947, 948, 949, 951, 959, 960, 963, 974, 979, 982, 992, 998, 999, 1005, 1009, 1011, 1012, 1013, 1016, 1017, 1020, 1025, 1028, 1029, 1033, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "list_param": 383, "listedcolormap": [67, 70, 146, 304, 307, 311, 318], "listen": 357, "listinfo": 391, "lite": 1040, "liter": [383, 1033], "literatur": [83, 179, 275, 293, 358, 380, 383, 389, 391, 395, 396, 415, 418, 420, 422, 450, 454, 456, 509, 544, 546, 548, 555, 563, 564, 596, 599, 716, 805, 998, 1001, 1005, 1009, 1050], "litsidi": [1055, 1056], "littl": [190, 191, 192, 193, 244, 378, 423, 469, 652, 808, 822, 956, 999, 1006, 1008, 1024, 1025, 1041, 1052, 1057], "lituiev": 1053, "liu": [0, 373, 394, 571, 734, 764, 1009, 1015, 1043, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "liutong": 1048, "live": [50, 104, 190, 269, 309, 378, 383, 415, 506, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 1032], "livesei": 357, "livni": [415, 449], "lizao": 1048, "lizsz": 1046, "lj2017": 415, "lk": 1043, "lkjcalc": 1048, "lkubin": 1051, "ll": [50, 90, 145, 270, 309, 383, 395, 540, 549, 1001, 1012, 1025], "llcrnrlat": [50, 309], "llcrnrlon": [50, 309], "lle": [237, 238, 239, 241, 538, 697, 701, 1006, 1052], "lle_hessian": 237, "lle_ltsa": 237, "lle_method": 237, "lle_mod": 237, "lle_standard": 237, "lloyd": [415, 450, 454, 456, 466, 1054, 1055], "llvm": 381, "lm": 199, "lmbda": 320, "lmbda_bc": 320, "lmbda_yj": 320, "lml": [175, 176, 180, 425], "ln": [387, 1005, 1013, 1019], "loa": [173, 181, 187, 425, 504, 619, 623, 630, 631, 633, 1030], "load": [2, 10, 43, 45, 50, 51, 52, 54, 63, 68, 81, 83, 88, 105, 106, 123, 133, 142, 144, 146, 148, 154, 155, 158, 159, 161, 169, 170, 179, 190, 191, 195, 199, 213, 214, 217, 225, 233, 246, 247, 251, 253, 254, 255, 256, 258, 265, 269, 271, 273, 275, 280, 282, 287, 289, 293, 296, 300, 305, 312, 313, 314, 326, 327, 329, 330, 332, 337, 338, 339, 362, 365, 370, 375, 378, 380, 386, 389, 396, 409, 418, 419, 420, 422, 489, 490, 491, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 540, 542, 551, 852, 853, 956, 1019, 1029, 1035, 1040, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "load_ames_h": 158, "load_boston": [1046, 1048, 1053], "load_breast_canc": [2, 172, 193, 338, 361, 388, 600, 603, 604, 606, 682, 683, 796, 1009, 1045, 1046, 1051], "load_cont": 511, "load_dataset": 357, "load_diabet": [2, 46, 151, 161, 163, 172, 186, 204, 205, 206, 213, 214, 255, 271, 330, 422, 566, 570, 576, 681, 709, 833, 834, 835, 921, 923, 1017, 1046, 1051, 1054], "load_digit": [2, 68, 86, 87, 93, 106, 107, 164, 170, 208, 224, 238, 248, 249, 273, 274, 277, 283, 291, 298, 300, 305, 312, 314, 331, 335, 336, 389, 416, 427, 452, 453, 540, 541, 542, 543, 607, 608, 646, 647, 676, 696, 697, 698, 699, 701, 703, 1046, 1051], "load_fil": [2, 377, 378, 1042, 1054], "load_iri": [2, 66, 76, 80, 108, 120, 127, 129, 131, 133, 146, 159, 165, 168, 176, 201, 210, 226, 258, 262, 268, 280, 281, 282, 284, 285, 299, 304, 307, 312, 325, 327, 330, 340, 342, 343, 346, 349, 362, 365, 396, 409, 415, 416, 419, 422, 424, 435, 569, 575, 609, 610, 618, 627, 628, 630, 631, 639, 666, 667, 719, 796, 808, 811, 812, 814, 822, 840, 861, 907, 908, 909, 920, 922, 924, 925, 926, 999, 1004, 1009, 1010, 1011, 1012, 1016, 1019, 1025, 1046, 1048, 1051], "load_lfw_pair": 1045, "load_linnerud": [2, 845, 1046, 1051], "load_mnist": [225, 296], "load_mtpl2": 235, "load_sample_imag": [2, 83, 591, 592, 595, 1049], "load_svmlight_fil": [2, 377, 1040, 1041, 1046, 1047, 1048, 1055], "load_win": [2, 48, 257, 321, 856, 864, 1037, 1051], "loader": [2, 276, 339, 357, 376, 377, 378, 506, 507, 516, 1029, 1040, 1045, 1047, 1048, 1051], "loan": [422, 542, 1005, 1033], "loayza": 1054, "lobpcg": [81, 459, 469, 696, 699, 703, 1050, 1053, 1054, 1055], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 106, 109, 112, 113, 114, 117, 120, 125, 127, 130, 131, 132, 137, 139, 140, 141, 149, 150, 151, 152, 153, 155, 158, 160, 161, 168, 174, 175, 181, 183, 190, 191, 200, 205, 207, 211, 217, 218, 219, 220, 223, 224, 227, 230, 231, 234, 235, 240, 247, 248, 249, 250, 252, 254, 262, 263, 270, 273, 274, 275, 278, 279, 282, 285, 288, 289, 290, 299, 301, 302, 312, 317, 320, 321, 326, 329, 332, 337, 345, 348, 350, 352, 353, 357, 362, 364, 822, 889, 901], "loc_a": 320, "loc_b": 320, "local": [2, 43, 48, 51, 58, 74, 87, 92, 96, 123, 126, 142, 143, 155, 172, 179, 180, 187, 191, 218, 231, 236, 239, 241, 244, 248, 254, 297, 306, 345, 363, 364, 371, 380, 381, 383, 387, 389, 391, 401, 415, 420, 422, 423, 425, 454, 459, 469, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 510, 546, 548, 552, 555, 557, 567, 568, 571, 574, 618, 619, 696, 697, 698, 699, 700, 701, 703, 704, 766, 767, 855, 858, 861, 863, 873, 882, 905, 908, 916, 974, 1007, 1008, 1012, 1013, 1025, 1030, 1032, 1034, 1035, 1044, 1048, 1052, 1055, 1058, 1059], "local_filenam": 499, "localcach": 401, "locally_linear_embed": [2, 241, 1006, 1059], "locallylinearembed": [2, 51, 237, 238, 239, 329, 696, 698, 700, 1006, 1012, 1045, 1046, 1054, 1055, 1056, 1059], "localoutlierfactor": [2, 244, 254, 302, 303, 329, 397, 571, 916, 1015, 1047, 1048, 1050, 1054, 1055, 1056, 1057, 1059], "localoutlierfactor__n_neighbor": 254, "locat": [48, 62, 88, 89, 106, 113, 114, 211, 309, 327, 346, 376, 378, 381, 383, 387, 388, 391, 392, 401, 402, 415, 417, 421, 455, 467, 468, 476, 477, 478, 479, 480, 481, 482, 483, 495, 508, 509, 512, 513, 520, 523, 993, 999, 1005, 1010, 1015, 1019, 1025, 1048], "location_": [113, 114, 476, 477, 478, 479, 480, 481, 482, 483], "location_reweight": [476, 481], "lock": [386, 401, 408, 409, 974, 1058], "loev": 542, "lof": [2, 48, 187, 231, 244, 254, 297, 345, 571, 858, 916, 1015, 1030], "lof_kw": 254, "lofti": [1050, 1051], "log": [2, 43, 58, 62, 63, 64, 111, 123, 137, 148, 150, 158, 168, 172, 175, 176, 178, 179, 180, 183, 204, 206, 210, 217, 222, 227, 235, 248, 250, 264, 269, 306, 321, 357, 378, 380, 381, 383, 391, 392, 397, 412, 413, 415, 416, 417, 420, 422, 423, 425, 455, 458, 467, 472, 477, 478, 479, 480, 481, 482, 483, 540, 544, 549, 557, 558, 559, 561, 563, 565, 567, 570, 572, 598, 599, 601, 602, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 650, 653, 656, 666, 667, 677, 679, 684, 688, 730, 749, 763, 805, 806, 808, 811, 812, 822, 847, 848, 849, 850, 851, 852, 853, 857, 868, 869, 876, 877, 906, 909, 914, 917, 919, 920, 922, 954, 998, 1001, 1003, 1005, 1006, 1011, 1012, 1014, 1017, 1019, 1023, 1025, 1028, 1029, 1042, 1043, 1044, 1049, 1050, 1051, 1054, 1057, 1058, 1059], "log10": [168, 180, 190, 210, 276, 346], "log1p": [109, 247, 876, 1009, 1019], "log2": [141, 227, 256, 565, 566, 567, 568, 572, 573, 920, 921, 922, 923, 1010], "log_": 1009, "log_2": [412, 571, 1015], "log_bas": 734, "log_den": 301, "log_dens": 857, "log_likelihood": [111, 618, 619, 805, 806], "log_likelihood_gradi": [618, 619], "log_logist": 1057, "log_loss": [2, 62, 63, 149, 152, 175, 321, 339, 357, 397, 413, 422, 565, 567, 569, 572, 654, 666, 684, 920, 922, 998, 1005, 1009, 1023, 1025, 1042, 1044, 1046, 1054, 1055, 1056, 1057], "log_marginal_likelihood": [175, 176, 178, 180, 183, 425, 618, 619, 1050], "log_marginal_likelihood_value_": [618, 619], "log_prob": [805, 806, 807, 830], "log_reg": [258, 329], "log_reg_input_featur": 329, "log_scal": 1056, "log_scale_transform": [217, 235], "log_scaled_numer": [217, 235], "log_y_prob": 869, "logaddexp": 1057, "logan": [1054, 1055, 1056], "logarithm": [2, 109, 158, 190, 221, 248, 276, 346, 397, 424, 467, 598, 666, 667, 684, 712, 734, 749, 759, 763, 764, 765, 799, 807, 830, 843, 852, 853, 954, 1025, 1047], "logcosh": [427, 541], "logdet": 954, "logged_in": 378, "logger": 1051, "logic": [135, 371, 384, 385, 390, 411, 422, 1025, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "logical_and": [53, 150], "logical_not": [57, 99, 132, 220], "logical_or": [219, 225, 284, 389], "logical_xor": [53, 178, 350], "loginov": 1046, "logist": [2, 62, 64, 66, 103, 105, 109, 120, 133, 142, 164, 170, 187, 196, 205, 212, 214, 215, 221, 223, 226, 228, 234, 245, 247, 258, 269, 283, 286, 289, 295, 307, 313, 314, 321, 329, 342, 343, 353, 354, 357, 397, 398, 413, 416, 422, 424, 425, 444, 496, 504, 510, 512, 520, 549, 567, 569, 618, 639, 654, 665, 666, 667, 674, 676, 684, 749, 808, 822, 838, 841, 868, 869, 870, 872, 892, 919, 941, 943, 1009, 1013, 1014, 1023, 1024, 1030, 1031, 1033, 1035, 1044, 1047, 1048, 1050, 1051], "logistic__c": 107, "logistic_regress": [269, 831, 839], "logistic_regression_path": [1048, 1049], "logisticregress": [2, 62, 66, 105, 107, 142, 160, 164, 170, 171, 172, 201, 207, 208, 209, 210, 224, 232, 233, 245, 246, 256, 258, 269, 278, 284, 289, 314, 318, 325, 326, 327, 328, 329, 331, 333, 357, 370, 383, 385, 389, 391, 396, 406, 413, 414, 416, 422, 424, 435, 440, 445, 575, 577, 605, 639, 642, 651, 660, 667, 680, 681, 682, 683, 684, 695, 708, 796, 807, 822, 831, 837, 839, 843, 844, 846, 897, 898, 900, 901, 902, 903, 919, 950, 951, 952, 992, 1005, 1009, 1010, 1019, 1023, 1024, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "logisticregression__c": [269, 318], "logisticregressioncv": [2, 64, 321, 397, 406, 666, 1005, 1010, 1044, 1045, 1046, 1048, 1049, 1050, 1054, 1055, 1057, 1058, 1059], "logisticregressionifittedlogisticregress": 314, "logisticregressionlogisticregress": [105, 142, 245, 246, 256, 258, 269, 289, 326, 329], "logit": [2, 413, 425, 666, 667, 1005], "loglik_lw": 111, "loglik_oa": 111, "loglik_r": 111, "loglike_": 540, "loglog": [111, 248], "logloss": 1051, "lognorm": [150, 180, 199, 264, 320, 1019], "logo": [0, 419, 815], "logprob": 857, "logreg": [201, 846], "logspac": [43, 51, 64, 107, 111, 130, 163, 172, 175, 180, 190, 210, 221, 222, 248, 250, 264, 269, 276, 288, 291, 300, 311, 318, 321, 346, 353, 831, 839, 1004, 1005], "logsumexp": [306, 1047], "loguniform": [45, 174, 283, 998, 1050], "logx": [221, 353], "lohit": 1057, "loic": [1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "loki": [371, 1009, 1048, 1051], "lomp": 381, "lon": 772, "london": [416, 423, 473], "londschien": [1053, 1057], "lone": [1055, 1056], "long": [0, 30, 43, 50, 51, 79, 97, 150, 179, 186, 190, 192, 217, 251, 252, 254, 278, 309, 316, 326, 357, 358, 366, 371, 381, 383, 391, 395, 397, 398, 409, 415, 460, 506, 546, 684, 685, 686, 811, 812, 847, 848, 849, 850, 851, 869, 870, 880, 1009, 1015, 1019, 1020, 1022, 1023, 1027, 1042, 1046, 1052, 1054], "long_term_trend_kernel": 179, "long_titl": 350, "longer": [0, 43, 70, 88, 140, 190, 191, 205, 313, 328, 383, 385, 415, 419, 422, 423, 456, 544, 571, 1004, 1008, 1009, 1011, 1014, 1024, 1032, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "longest": 296, "longitud": [309, 316, 378, 506, 707, 772], "longpathsen": 401, "longstand": [1041, 1047], "loo": [397, 816, 1051], "look": [43, 44, 64, 88, 90, 123, 126, 128, 150, 151, 174, 179, 180, 186, 190, 191, 219, 237, 241, 244, 251, 266, 269, 270, 275, 277, 289, 313, 332, 357, 358, 366, 371, 372, 377, 378, 383, 384, 385, 387, 389, 391, 395, 396, 415, 418, 420, 421, 422, 423, 455, 495, 496, 565, 566, 567, 568, 572, 573, 610, 611, 639, 667, 700, 892, 920, 921, 922, 923, 1005, 1006, 1019, 1023, 1024, 1026, 1040, 1048, 1050], "lookup": [392, 973, 1049], "loop": [46, 47, 140, 150, 190, 270, 280, 357, 365, 370, 383, 384, 389, 415, 419, 424, 654, 655, 660, 661, 667, 668, 669, 670, 671, 998, 1022, 1023, 1043, 1044, 1047, 1052, 1053, 1056, 1057], "loopym": 1050, "loos": [266, 272, 1024, 1048], "looser": 210, "lopusz": 1051, "lorain": 330, "lorek": 1047, "lorentzen": [0, 404, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "lorenz": [217, 235, 1045, 1057], "lorenz_curv": [217, 235], "lose": [221, 234, 359, 378, 397, 418, 423, 425, 955, 956, 999, 1005], "losi": [0, 405, 1040], "loss": [2, 25, 46, 52, 61, 62, 63, 64, 132, 143, 149, 150, 151, 152, 174, 175, 187, 196, 200, 207, 210, 219, 221, 222, 224, 225, 229, 235, 250, 269, 283, 312, 313, 321, 328, 332, 333, 339, 343, 344, 348, 350, 353, 357, 395, 397, 413, 420, 425, 471, 472, 504, 516, 517, 540, 546, 547, 548, 551, 555, 560, 561, 562, 566, 567, 568, 569, 570, 573, 651, 654, 657, 666, 667, 674, 675, 676, 677, 678, 679, 680, 684, 685, 686, 687, 711, 714, 717, 730, 731, 742, 743, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 798, 799, 804, 808, 811, 812, 822, 834, 835, 838, 869, 870, 872, 873, 876, 877, 885, 886, 887, 892, 912, 913, 918, 919, 921, 923, 956, 960, 1002, 1005, 1013, 1017, 1022, 1023, 1024, 1025, 1030, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "loss_": [312, 869, 870, 1013, 1054], "loss_curve_": [312, 869, 870], "loss_func": 52, "loss_funct": 52, "loss_function_": 1057, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1049, "lossi": 415, "lossili": 397, "lost": [58, 92, 115, 378, 384, 395, 409, 1006, 1009], "lostanlen": 1050, "lostcoast": 1050, "lot": [43, 115, 153, 190, 221, 378, 383, 384, 385, 391, 420, 422, 811, 812, 904, 905, 998, 1021, 1023, 1024, 1028, 1029, 1033, 1040, 1045, 1047, 1048, 1049, 1050, 1052], "lot_area": 254, "lotan": 1033, "lotconfig": 147, "lotfrontag": 109, "loui": [330, 1045, 1046, 1050, 1052, 1054, 1056, 1057], "louib": [1048, 1049], "loupp": [0, 405, 422, 563, 564, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "lourida": 1046, "low": [2, 37, 43, 50, 51, 72, 85, 114, 118, 125, 127, 130, 137, 140, 154, 172, 192, 210, 212, 217, 219, 221, 231, 237, 239, 244, 248, 254, 260, 261, 263, 266, 268, 269, 275, 277, 281, 282, 291, 302, 303, 313, 320, 322, 323, 331, 338, 345, 346, 357, 365, 379, 380, 383, 388, 391, 395, 397, 401, 412, 413, 414, 419, 420, 423, 449, 451, 456, 475, 529, 532, 543, 590, 597, 611, 687, 700, 704, 713, 734, 750, 797, 857, 886, 893, 910, 956, 973, 998, 1004, 1005, 1006, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1019, 1021, 1024, 1025, 1031, 1035, 1041, 1044, 1045, 1046, 1048, 1049, 1054, 1055], "low_cardin": 322, "low_cardinality_featur": 322, "low_cardinalityindex": 322, "low_i": 212, "low_x": 212, "lower": [37, 44, 52, 63, 64, 67, 69, 93, 112, 118, 120, 123, 125, 130, 137, 140, 143, 146, 150, 153, 154, 170, 174, 176, 178, 180, 182, 190, 191, 192, 202, 203, 205, 207, 217, 218, 219, 220, 230, 237, 241, 247, 248, 253, 262, 266, 269, 274, 275, 277, 278, 282, 283, 285, 288, 289, 299, 300, 302, 303, 318, 321, 329, 333, 338, 346, 357, 358, 359, 362, 378, 383, 397, 413, 414, 415, 418, 419, 420, 421, 422, 423, 426, 451, 455, 471, 474, 506, 517, 540, 542, 549, 552, 561, 567, 568, 569, 570, 571, 596, 597, 599, 611, 619, 621, 622, 623, 625, 627, 628, 630, 631, 633, 640, 641, 643, 645, 685, 687, 720, 724, 733, 736, 742, 747, 805, 806, 858, 860, 862, 863, 864, 866, 893, 912, 913, 914, 915, 916, 919, 942, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1023, 1024, 1025, 1042, 1043, 1048, 1055, 1057], "lower_bound": 274, "lower_bound_": [805, 806, 1048], "lowercas": [423, 431, 449, 450, 452, 454, 456, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 596, 597, 599, 647, 648, 649, 650, 696, 697, 700, 856, 861, 864, 868, 873, 878, 904, 905, 1053], "lowest": [2, 109, 118, 191, 202, 265, 377, 415, 419, 643, 645, 811, 812, 815, 919, 920, 1006, 1009, 1025, 1055], "loyal": 1045, "loyola": [0, 373, 1053, 1054], "lo\u00efc": [0, 404, 1048, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "lp_model": [335, 336], "lpgo": [419, 817], "lpo": 818, "lprun": 389, "lr": [62, 64, 142, 160, 161, 220, 246, 247, 271, 278, 396, 406, 422, 576, 577, 578, 720, 992], "lr_": 1009, "lr__c": 422, "lr_base": 278, "lrap": [747, 1009], "lrjball": [1050, 1051], "lrlinearregress": 161, "ls100": 340, "ls2010": 1001, "ls30": 340, "ls50": 340, "ls_pipelin": 339, "lsa": [2, 420, 552, 1042], "lsa_vector": 358, "lshforest": [1044, 1047], "lsi": 420, "lsqr": [69, 323, 557, 680, 682, 695, 1003, 1041, 1047, 1054], "lstrip": [67, 79, 97, 244, 311, 318], "lstsq": [132, 383, 665, 678], "lsturtew": 1053, "lsvc": 424, "lsvm": 195, "lsvm_score": 195, "lsvm_time": 195, "lt": [105, 106, 142, 158, 190, 265, 273, 287, 383, 403], "ltd": [269, 378], "ltg": [172, 380, 509], "ltorgo": 378, "ltsa": [237, 238, 239, 697, 701, 1006, 1059], "lu": [549, 552, 955, 956, 1046, 1047, 1048, 1049, 1056, 1057, 1058], "luangkot": 1047, "luca": [1040, 1050, 1051, 1052, 1053], "lucca": 1053, "luce": 1043, "lucen": 423, "lucgiffon": 1051, "luci": [0, 373, 394, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "luciano": [1048, 1055], "lucieclair": 1054, "lucija": 1048, "lucio": 1049, "lucki": 366, "lucyleeow": 1051, "ludwig": 1040, "luessi": 1042, "lui": [666, 1041, 1043, 1044, 1048, 1057], "luiz": 1054, "luk": 1049, "luka": [1044, 1051, 1057, 1058], "luke": 1048, "lukowski": 1055, "luk\u00e1\u0161": 1057, "luna": 1054, "lunt": 1043, "luo": 1044, "lupo": 1052, "luqi": 1049, "luqu": 1050, "lurk": 1040, "lustig": 1005, "lutz": [1046, 1050, 1053, 1057], "luxburg": [415, 459, 469, 699], "luzgin": 1050, "lv_ep": 249, "lvdmaaten": [700, 1047], "lw": [95, 111, 112, 114, 127, 131, 132, 211, 218, 220, 223, 227, 234, 240, 263, 270, 285, 301, 316, 337, 352], "lw_cov_": 115, "lw_mse": 112, "lw_prec_": 115, "lw_score": 130, "lw_shrinkag": 112, "lwda": 457, "lx": 1012, "ly": [249, 860, 862, 863, 864, 1044], "ly648499246": 1053, "lynch": [1041, 1047], "lyon": [1046, 1047], "lyra": [1041, 1044, 1045], "lyrl2004": [378, 505], "l\u00e9o": 1048, "l\u00e9on": [1023, 1054, 1055, 1056], "l\u00e9onard": [1050, 1055], "l\u00e9one": 1046, "l\u00e9oni": 1046, "l\u00f3pez": [1044, 1048, 1049, 1052], "l\u00f6fstedt": 1047, "l\u00f6ning": 1052, "m": [0, 43, 47, 50, 57, 63, 64, 79, 93, 94, 98, 99, 100, 113, 114, 123, 137, 161, 200, 217, 235, 275, 279, 309, 332, 339, 342, 352, 357, 370, 371, 377, 378, 380, 381, 383, 387, 389, 397, 401, 412, 413, 415, 417, 420, 422, 424, 426, 451, 452, 453, 457, 464, 480, 481, 508, 521, 536, 540, 542, 544, 549, 647, 653, 657, 672, 679, 693, 694, 697, 701, 716, 724, 734, 749, 764, 766, 767, 805, 806, 858, 883, 956, 987, 988, 999, 1001, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1023, 1025, 1033, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058], "m1": [381, 411], "m11": 378, "m2": 411, "m2012": 1002, "m2019": 1016, "m_max": 176, "ma": [115, 322, 346, 1005, 1046, 1051], "maascha": 1055, "maaten": [700, 704, 1006], "mabel": [1048, 1052], "mabu": 1053, "mac": [57, 322, 339, 378, 383, 716, 1009], "macaulei": 322, "macbook": 1048, "macdonald": [1050, 1051], "mach": [280, 413, 419, 601, 602], "machado": [413, 731], "machin": [0, 2, 39, 43, 45, 47, 48, 52, 64, 98, 107, 117, 143, 168, 169, 172, 174, 179, 188, 192, 207, 212, 229, 257, 269, 275, 278, 281, 293, 310, 316, 321, 323, 327, 330, 333, 342, 347, 350, 353, 357, 359, 370, 371, 376, 377, 378, 380, 383, 386, 390, 395, 396, 397, 400, 403, 409, 413, 415, 419, 420, 422, 423, 425, 444, 446, 455, 478, 479, 485, 510, 512, 518, 524, 525, 526, 538, 540, 542, 549, 552, 563, 564, 565, 566, 567, 568, 572, 573, 574, 601, 602, 618, 619, 622, 627, 630, 642, 646, 647, 649, 651, 652, 653, 658, 659, 662, 663, 664, 665, 666, 667, 684, 690, 691, 700, 716, 721, 733, 743, 749, 751, 793, 796, 805, 837, 838, 852, 853, 858, 861, 868, 869, 870, 872, 890, 892, 898, 912, 913, 914, 915, 917, 918, 922, 923, 998, 999, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1012, 1015, 1016, 1017, 1019, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1040, 1042, 1052, 1053, 1054, 1055, 1057], "machineri": 961, "maciej": 1051, "maci\u00e0": [1009, 1053, 1055], "mackai": [652, 653, 1005], "mackenbach": 1051, "maco": [384, 386, 401, 411, 1048, 1052, 1054], "macosx": 1040, "macro": [45, 68, 104, 169, 273, 314, 325, 335, 336, 378, 419, 715, 721, 737, 738, 746, 791, 792, 795, 796, 830, 1009, 1040, 1048, 1056], "macro_roc_auc_ovo": 284, "macro_roc_auc_ovr": 284, "macroscop": 415, "macsween": [1049, 1050], "mad": [679, 1046], "madan": 1052, "made": [0, 52, 64, 104, 114, 128, 137, 143, 161, 181, 190, 191, 217, 235, 254, 266, 279, 322, 326, 346, 362, 370, 378, 380, 383, 387, 397, 398, 406, 415, 422, 423, 427, 450, 453, 454, 456, 466, 504, 511, 596, 597, 599, 638, 639, 664, 673, 687, 693, 694, 743, 791, 808, 811, 812, 822, 826, 827, 828, 849, 852, 853, 1010, 1015, 1025, 1028, 1033, 1040, 1041, 1042, 1043, 1044, 1047, 1049, 1050, 1053, 1054, 1058], "madelon": 523, "madhura": [1049, 1051, 1052, 1055, 1056], "madinak": 1055, "madsen": [1046, 1048], "mae": [43, 52, 158, 217, 219, 566, 573, 753, 921, 923, 1009, 1025, 1047, 1048, 1052, 1053], "mae_test": 190, "mae_train": 190, "maennel": 1055, "magali": 1054, "magazin": [114, 424], "magda": 1051, "magenta": [111, 152], "maggi": [1054, 1058], "maggiecheg": [1050, 1054], "maggio": [1051, 1052, 1053], "magic": [251, 384, 389, 425, 624, 629, 632], "magnesium": 380, "magnitud": [43, 132, 139, 175, 186, 190, 234, 254, 280, 316, 321, 328, 333, 370, 378, 389, 415, 422, 425, 621, 660, 712, 892, 1005, 1009, 1013, 1019, 1023, 1025, 1042, 1049, 1058], "mahajan": [1048, 1050, 1057], "mahal": 113, "mahal_emp_cov": 113, "mahal_robust_cov": 113, "mahalanobi": [110, 114, 187, 220, 415, 417, 457, 464, 476, 477, 478, 479, 480, 481, 482, 483, 707, 786, 787, 788, 1003, 1012, 1015, 1030, 1048, 1051, 1052], "mahalanobisdist": 707, "mahapatra": 1047, "mahdavi": 647, "maheshakya": [0, 1043, 1044, 1045], "mahieux": 1033, "mahimkar": 1058, "mahmood": 1058, "mahout": 849, "mai": [0, 2, 25, 47, 57, 62, 74, 79, 81, 91, 105, 118, 123, 147, 148, 153, 172, 178, 180, 182, 190, 193, 195, 198, 202, 206, 221, 223, 242, 251, 254, 278, 280, 282, 283, 289, 311, 321, 336, 346, 350, 353, 357, 358, 359, 366, 370, 371, 372, 375, 377, 378, 379, 380, 382, 383, 385, 387, 388, 391, 395, 397, 398, 401, 406, 409, 412, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 438, 446, 447, 448, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 466, 469, 472, 476, 479, 489, 490, 491, 494, 495, 496, 504, 516, 517, 523, 542, 543, 546, 548, 549, 552, 555, 556, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 580, 582, 589, 602, 605, 610, 618, 619, 625, 628, 642, 643, 645, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 684, 685, 686, 687, 689, 692, 694, 696, 697, 699, 700, 701, 703, 705, 713, 719, 720, 723, 724, 726, 727, 729, 730, 731, 732, 734, 746, 764, 771, 793, 794, 808, 810, 811, 812, 813, 822, 823, 824, 827, 828, 833, 837, 840, 845, 846, 847, 848, 849, 851, 854, 855, 856, 858, 860, 862, 863, 864, 870, 871, 872, 875, 877, 887, 889, 890, 891, 892, 893, 895, 901, 904, 905, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 925, 936, 938, 939, 945, 959, 960, 998, 999, 1001, 1003, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1040, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "maikia": [1048, 1049, 1051, 1052], "mail": [378, 383, 387, 391, 395, 398, 1048, 1049], "mailhot": 1040, "mailman": 391, "main": [2, 37, 48, 68, 97, 118, 127, 147, 187, 244, 284, 295, 324, 353, 357, 370, 371, 372, 376, 381, 383, 385, 387, 389, 391, 395, 396, 397, 400, 401, 413, 415, 420, 422, 423, 425, 511, 533, 538, 557, 558, 633, 721, 842, 912, 913, 998, 1006, 1008, 1009, 1016, 1021, 1029, 1032, 1040, 1043, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "mainak": 1047, "maingret": 1051, "mainli": [64, 88, 137, 140, 174, 284, 293, 370, 385, 413, 619, 1011, 1016], "maint": 387, "maintain": [90, 222, 235, 237, 251, 275, 371, 382, 386, 389, 390, 391, 395, 397, 398, 401, 415, 422, 447, 449, 881, 882, 888, 889, 892, 897, 900, 901, 903, 1005, 1006, 1019, 1028, 1029, 1035, 1055, 1059], "mainten": [0, 383, 391, 395, 401, 408, 1005, 1029, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "mainy": 1052, "mair": 643, "mairal": [420, 539, 545], "maisonneuv": 1052, "maithreyi": 1050, "maj": 577, "major": [2, 49, 54, 70, 143, 269, 282, 316, 320, 325, 326, 327, 328, 329, 330, 331, 332, 350, 359, 370, 378, 382, 383, 387, 389, 395, 398, 409, 415, 419, 421, 423, 559, 577, 578, 702, 924, 926, 1009, 1012, 1023, 1029, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "majorfeatur": 387, "make": [0, 2, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 91, 96, 97, 102, 107, 128, 137, 143, 147, 150, 153, 156, 169, 172, 174, 179, 182, 189, 190, 191, 192, 197, 202, 203, 206, 209, 210, 211, 213, 217, 218, 219, 221, 223, 235, 238, 246, 248, 250, 251, 252, 254, 260, 262, 265, 266, 269, 270, 275, 277, 278, 284, 285, 286, 289, 295, 305, 313, 316, 317, 322, 329, 331, 333, 346, 355, 357, 358, 359, 366, 370, 371, 372, 377, 378, 381, 382, 384, 385, 386, 387, 388, 389, 391, 395, 397, 401, 406, 409, 412, 413, 415, 416, 417, 419, 420, 422, 423, 424, 427, 447, 448, 449, 450, 452, 454, 456, 458, 459, 460, 465, 466, 467, 469, 495, 511, 522, 523, 530, 531, 535, 540, 542, 549, 559, 560, 563, 564, 569, 570, 591, 592, 615, 616, 639, 657, 663, 664, 679, 699, 703, 738, 745, 750, 776, 777, 789, 805, 806, 808, 810, 813, 819, 823, 824, 827, 828, 834, 835, 842, 843, 846, 879, 888, 891, 892, 896, 900, 902, 903, 904, 905, 918, 926, 931, 938, 939, 950, 956, 963, 969, 994, 999, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1033, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "make_": 1049, "make_biclust": [2, 59, 521, 1042], "make_blob": [2, 61, 63, 69, 73, 77, 78, 79, 84, 90, 91, 92, 94, 95, 97, 98, 99, 209, 229, 244, 263, 319, 326, 329, 344, 347, 348, 354, 379, 386, 422, 523, 704, 718, 800, 801, 928, 1048, 1051, 1054], "make_cbar": 286, "make_checkerboard": [2, 58, 519, 1042], "make_circl": [2, 67, 79, 97, 128, 156, 242, 311, 312, 318, 337, 379, 1041, 1048, 1051], "make_classif": [2, 62, 64, 67, 141, 142, 144, 169, 171, 272, 278, 286, 287, 306, 311, 318, 325, 327, 331, 333, 353, 366, 379, 386, 411, 414, 422, 444, 445, 494, 520, 561, 563, 565, 572, 613, 615, 674, 705, 706, 708, 710, 807, 830, 831, 836, 837, 839, 842, 869, 872, 912, 919, 998, 1009, 1010, 1019, 1024, 1046, 1047, 1048, 1050], "make_column_selector": [2, 105, 147, 158, 254, 416, 471, 474, 1050], "make_column_transform": [2, 147, 158, 190, 246, 326, 416, 471, 473, 1048], "make_data": [70, 96], "make_dataset": 1049, "make_default": 978, "make_ellips": 262, "make_estim": 254, "make_friedman1": [2, 379, 422, 547, 551, 601, 602, 640], "make_friedman2": [2, 379, 619, 621, 622, 623, 624, 625, 629, 632, 633], "make_friedman3": [2, 379], "make_gaussian_quantil": [2, 137, 139, 379, 477, 481, 482, 483, 488, 528], "make_hastie_10_2": [2, 152, 279, 379, 422, 567, 1016], "make_heatmap": 286, "make_low_rank_matrix": [2, 331, 333, 532], "make_ml_clf": 121, "make_moon": [2, 67, 79, 97, 244, 275, 311, 312, 318, 379, 998, 1047, 1051], "make_multilabel_classif": [2, 121, 252, 379, 523, 544, 796, 843, 844, 1009, 1042, 1043, 1045, 1051], "make_pipelin": [2, 43, 67, 93, 118, 142, 147, 158, 168, 169, 172, 185, 186, 190, 191, 195, 197, 204, 206, 217, 218, 223, 231, 235, 238, 244, 245, 246, 254, 255, 256, 258, 269, 272, 282, 289, 296, 305, 311, 318, 321, 322, 323, 325, 326, 327, 328, 329, 330, 358, 366, 396, 406, 416, 419, 575, 684, 686, 864, 872, 897, 898, 900, 901, 902, 903, 912, 913, 914, 915, 917, 918, 999, 1012, 1019, 1023, 1024, 1043, 1050, 1053], "make_plot": 316, "make_regress": [2, 49, 109, 197, 199, 200, 203, 220, 221, 288, 326, 332, 366, 379, 386, 396, 562, 564, 568, 573, 614, 616, 617, 643, 654, 655, 657, 659, 660, 661, 663, 668, 669, 670, 671, 672, 673, 675, 679, 687, 689, 690, 691, 693, 694, 695, 870, 913, 930, 1009, 1010, 1012], "make_s_curv": [2, 237, 242], "make_scor": [2, 52, 150, 153, 269, 279, 333, 406, 414, 419, 719, 808, 830, 834, 835, 1009, 1049, 1057], "make_sparse_coded_sign": [2, 216, 539, 545, 553, 554, 1054, 1056], "make_sparse_spd_matrix": [2, 115, 485, 537, 1057], "make_sparse_uncorrel": [2, 379], "make_spd_matrix": [2, 535], "make_subplot": 143, "make_swiss_rol": [2, 102, 241, 1054], "make_union": [2, 416, 871, 1043, 1047], "makedir": 1047, "maker": [189, 190], "makhija": 1055, "makoeppel": 1053, "maksym": 1055, "maladier": 1055, "maladi\u00e8r": [1055, 1056], "malcolm": 1048, "maldonado": [1050, 1053], "male": [105, 190, 330, 388, 885, 886, 1019], "malem": 1057, "malet": 1040, "malform": [55, 1044], "malic": [321, 380], "malic_acid": 48, "malici": 409, "malign": [172, 380, 508], "malik": [415, 459, 469, 699], "mallat": [672, 693, 694, 1005], "mallatpursuit93": [672, 693, 694], "mallow": [739, 1046], "maloo": [1048, 1049], "malt": [1053, 1054, 1055, 1057], "maltimor": 1050, "malu": 235, "malzer": 453, "mal\u00e9zieux": 1053, "mamba": 409, "mame": 1057, "mammal": 50, "mammalian": 420, "man": [420, 598, 777, 847, 851, 1007, 1009, 1011], "manag": [0, 2, 118, 258, 369, 377, 381, 384, 385, 387, 391, 395, 397, 398, 409, 422, 457, 475, 634, 910, 1003, 1025, 1028, 1029, 1033, 1035, 1053, 1056, 1059], "manaileng": 1053, "manasimj": 1058, "mandal": 1050, "mandatori": [383, 423], "mandatorili": 1047, "mandera": 1043, "mandi": [1051, 1054], "mandjev": 1054, "mandyam": 1050, "mangasarian": [172, 380], "mangipudi": 1046, "manh": 1048, "manhattan": [415, 448, 452, 457, 464, 707, 770, 779, 786, 787, 788, 859, 1007, 1012, 1044, 1049, 1056], "manhattan_dist": [2, 457, 464, 696, 770, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 1040, 1050, 1055, 1056], "manhattandist": 707, "mani": [43, 46, 49, 57, 90, 91, 108, 111, 115, 137, 143, 144, 145, 146, 151, 168, 172, 192, 217, 237, 248, 261, 268, 269, 275, 283, 287, 296, 316, 321, 322, 325, 326, 327, 328, 329, 331, 332, 333, 357, 366, 370, 372, 378, 380, 382, 383, 385, 396, 397, 398, 401, 409, 412, 413, 415, 416, 417, 420, 422, 423, 424, 425, 427, 511, 549, 561, 562, 565, 566, 567, 568, 572, 573, 574, 614, 617, 635, 647, 658, 662, 666, 667, 674, 675, 676, 684, 685, 686, 700, 703, 782, 786, 808, 812, 822, 869, 870, 885, 890, 892, 912, 920, 921, 922, 923, 998, 999, 1001, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1019, 1022, 1024, 1026, 1027, 1028, 1029, 1033, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1055, 1056], "manideep": 1058, "manifest": [391, 1006, 1012], "manifold": [2, 51, 74, 87, 102, 142, 240, 241, 242, 248, 296, 306, 325, 329, 330, 337, 376, 397, 415, 420, 422, 510, 533, 538, 552, 557, 574, 696, 697, 698, 699, 700, 701, 702, 703, 704, 861, 873, 882, 905, 941, 1012, 1030, 1034, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1057], "manimaran": [1049, 1051, 1052, 1053, 1054], "manipul": [2, 377, 411, 515, 1028, 1046], "manish": 1051, "maniteja": [1046, 1047, 1048], "mankoo": 1055, "mann": 1050, "mannbi": 1048, "manner": [43, 109, 123, 169, 191, 195, 262, 329, 330, 371, 383, 389, 415, 420, 422, 423, 717, 852, 853, 998, 1009, 1025, 1043, 1050], "mannila": 1021, "manning2008": 1009, "manoharan": [1047, 1048], "manoj": [0, 172, 405, 1043, 1044, 1045, 1046, 1047], "manraj": 1047, "mansi": 1055, "mansingh": 1054, "mansouri": 1056, "mantovani": 1055, "manu": 378, "manual": [2, 43, 81, 90, 190, 191, 193, 218, 228, 277, 296, 338, 344, 357, 359, 370, 371, 378, 383, 387, 388, 395, 396, 401, 409, 415, 419, 420, 421, 444, 456, 575, 807, 830, 862, 885, 891, 998, 1003, 1004, 1005, 1008, 1009, 1012, 1019, 1029, 1048, 1050, 1056, 1058], "manuel": [1040, 1044, 1048, 1049, 1052, 1053, 1058], "manufactur": [190, 422], "manvendra": [1046, 1047], "maocx": 1050, "map": [2, 23, 37, 43, 44, 49, 50, 55, 57, 63, 88, 118, 128, 141, 149, 152, 156, 174, 187, 195, 217, 235, 237, 239, 243, 251, 254, 276, 279, 284, 304, 307, 309, 315, 316, 339, 346, 350, 358, 359, 377, 378, 384, 395, 397, 406, 409, 413, 415, 416, 419, 420, 422, 423, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 504, 506, 510, 517, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 770, 773, 805, 806, 807, 808, 811, 812, 819, 820, 822, 830, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 900, 901, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 962, 965, 966, 998, 1001, 1006, 1009, 1011, 1021, 1024, 1025, 1030, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057], "mapd": 1009, "mape": [2, 52, 754, 1009], "mape_cv_mean": 147, "mape_cv_std": 147, "mapi": 52, "mar": 51, "marc": [1047, 1049, 1050, 1056, 1059], "march": [179, 734, 764, 1009, 1040, 1044, 1048, 1050, 1055], "marchand": 1054, "marchman": [1041, 1042], "marco": [1046, 1048, 1049, 1053, 1054, 1055, 1058], "marcofalk": 1047, "marcogorelli": [1048, 1049], "marcolini": 1053, "marcom": 1054, "marcu": [1048, 1057], "mare": 1057, "marek": [1040, 1057], "maren": [0, 373, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "margeta": 1048, "margin": [30, 43, 51, 62, 64, 139, 165, 175, 176, 177, 178, 179, 180, 187, 190, 191, 196, 227, 228, 230, 252, 254, 275, 293, 316, 319, 322, 341, 342, 344, 345, 346, 348, 350, 354, 355, 380, 413, 420, 422, 425, 520, 618, 619, 639, 653, 684, 743, 841, 889, 901, 914, 917, 1005, 1009, 1011, 1015, 1016, 1019, 1023, 1024, 1030, 1047, 1049], "marguli": 1050, "mari": [104, 1048, 1049, 1050, 1051, 1054], "maria": [172, 415, 1051, 1052, 1053, 1054, 1055], "mariam": 1052, "mariana": 1051, "mariangela": 1053, "mariano": 275, "mariel": 1051, "marielaraj": 1053, "marija": [1051, 1052, 1058], "marijn": 1052, "marin": [536, 1058], "marina": 415, "marinelm": 1049, "mario": [413, 1044, 1046, 1054, 1055, 1056], "marit": [332, 504], "mari\u00e9": [0, 373, 1049, 1050, 1051, 1052, 1053, 1054], "mark": [2, 70, 93, 121, 167, 186, 279, 286, 375, 383, 387, 391, 392, 397, 415, 543, 615, 616, 619, 640, 666, 865, 866, 907, 908, 925, 931, 946, 951, 956, 1005, 1033, 1035, 1040, 1041, 1046, 1048, 1049, 1056, 1057, 1058], "markdown": 386, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 87, 90, 93, 94, 95, 98, 99, 117, 121, 125, 143, 157, 181, 182, 195, 204, 210, 212, 214, 215, 217, 219, 220, 232, 234, 238, 260, 262, 263, 269, 270, 275, 277, 278, 279, 303, 316, 321, 337, 361, 386, 387, 423, 1048, 1050, 1051, 1056], "markeredgecolor": [84, 90, 96, 98, 99], "markeredgewidth": [113, 279], "markerfacecolor": [84, 90, 96, 98, 99], "markers": [84, 90, 93, 96, 98, 99, 150, 177, 181, 247, 269, 329], "markerstyl": 269, "market": [42, 81, 87, 153, 187, 237, 238, 415, 417, 461, 478, 479, 697, 1030, 1033], "marketplac": 1033, "markham": [1044, 1051, 1052], "markiwanchyshyn": 1048, "marko": [1040, 1049, 1050, 1056], "markou": 1053, "markov": [425, 619, 1014, 1028, 1040], "markovtsev": 1048, "marktab": 1045, "marku": [415, 457, 464, 1048, 1050, 1051, 1052], "marmo": [0, 374, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "maron": [415, 449], "marr": 190, "marr_unmarri": 190, "marreddi": 1054, "marri": 190, "marriott": 51, "marsgui": 1048, "marsh": 1051, "marshal": 380, "marsi": 1043, "marsland": 538, "marslast": 538, "marszalek": [766, 767, 1007], "mart": [51, 1050], "martel": 1054, "martha": 322, "martian": 1050, "martin": [0, 373, 729, 731, 732, 1005, 1009, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1057, 1058], "martin1997": 1009, "martina": [1050, 1052], "martinbpr": [1045, 1046], "martinez": 1047, "martino": 1045, "martinosorb": 1045, "martinsson": [55, 543, 549, 956], "martynov": 1053, "mart\u00edn": [1053, 1054], "marufo": 1055, "marufur": 1047, "marvin": [1055, 1056], "marwaha": 1048, "marx": 1019, "maryanmorel": [1045, 1046], "marzinotto": [1048, 1049], "mar\u00eda": [1054, 1055, 1056], "mas_vnr_typ": 254, "masafumi": 1045, "masanori": [1055, 1056], "masashi": [1050, 1052], "masecchia": 1040, "mash": 423, "mask": [2, 53, 77, 101, 145, 217, 225, 254, 273, 274, 339, 392, 397, 416, 422, 471, 476, 481, 569, 570, 589, 593, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 637, 638, 640, 641, 657, 679, 808, 811, 812, 822, 980, 999, 1016, 1040, 1043, 1045, 1046, 1048, 1050, 1058], "mask_al": 999, "mask_false_neg": 269, "mask_false_posit": 269, "mask_missing_values_onli": 999, "mask_out": 53, "mask_test": 235, "mask_train": [191, 235], "mask_true_neg": 269, "mask_true_posit": 269, "mask_y_pr": 66, "maskani": [1048, 1050, 1051, 1052], "masked_arrai": [346, 808, 822], "masked_equ": 115, "maskedarrai": [279, 1046], "mason": 1044, "mass": [172, 255, 380, 453, 805, 1005, 1016], "massachusett": 378, "massia": [0, 1051, 1053, 1054], "massich": [1047, 1048, 1049, 1050], "massil": 1046, "masstran": 1049, "master": [51, 296, 330, 383, 1033], "masurel": 1041, "masvnrarea": [109, 158], "masvnrtyp": [147, 158], "mat": [377, 423], "match": [2, 43, 58, 72, 123, 124, 126, 129, 132, 143, 187, 195, 196, 217, 239, 247, 254, 288, 350, 359, 378, 381, 385, 415, 420, 422, 423, 436, 456, 471, 473, 499, 516, 517, 523, 534, 539, 545, 550, 556, 559, 575, 576, 580, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 666, 672, 673, 693, 694, 707, 711, 712, 713, 721, 723, 727, 742, 786, 787, 788, 794, 852, 853, 857, 861, 875, 876, 877, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 912, 919, 925, 942, 1006, 1008, 1009, 1011, 1012, 1030, 1031, 1035, 1040, 1046, 1047, 1048, 1050, 1052, 1053, 1056, 1058], "matchingdist": 707, "matchmak": 1033, "matcovici": 1050, "mate": 357, "matem\u00e1tica": 1005, "mateo": 1053, "materi": [53, 190, 332, 398, 549, 589, 902, 903], "matern": [2, 183, 425, 1051, 1055], "mateusz": [1044, 1051, 1052, 1057, 1058], "math": [84, 104, 153, 172, 254, 275, 276, 380, 401, 772], "mathbb": [123, 140, 177, 418, 1009, 1016, 1024], "mathbf": [177, 350, 420, 1005, 1009, 1013, 1014, 1023], "mathcal": [221, 353, 420, 422, 635, 704, 1001, 1003, 1005, 1009, 1023, 1053], "mathemat": [37, 137, 190, 204, 234, 278, 375, 380, 383, 397, 400, 415, 417, 420, 421, 425, 557, 558, 565, 572, 643, 654, 664, 800, 801, 806, 870, 914, 917, 920, 922, 1005, 1009, 1013, 1019, 1021, 1031, 1033, 1035, 1054], "matheu": 1046, "mathew": 1055, "mathi": 1053, "mathia": 1054, "mathieu": [0, 405, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1053], "mathrm": [415, 417, 420, 424, 1005, 1025], "mathschi": 1052, "mathur": [1047, 1049, 1050, 1055, 1056, 1058], "mathurin": [0, 1051, 1053, 1054], "mathurinm": [1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "matjansen": 1054, "mato": 1052, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 329, 330, 332, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 377, 379, 383, 390, 401, 408, 445, 510, 639, 640, 705, 706, 708, 709, 710, 814, 831, 926, 1004, 1028, 1037, 1049, 1052, 1053, 1054, 1055, 1058], "matric": [2, 37, 70, 74, 75, 113, 115, 123, 222, 261, 262, 264, 265, 266, 296, 309, 326, 332, 339, 357, 358, 375, 377, 385, 386, 395, 396, 397, 415, 416, 417, 418, 420, 423, 424, 430, 457, 458, 460, 471, 480, 488, 489, 490, 491, 534, 542, 543, 546, 548, 549, 552, 555, 557, 558, 563, 564, 571, 574, 589, 590, 597, 651, 654, 655, 660, 661, 666, 672, 680, 682, 695, 762, 768, 776, 782, 786, 787, 788, 789, 800, 805, 806, 838, 856, 859, 864, 875, 879, 881, 884, 887, 889, 890, 892, 895, 897, 899, 901, 902, 903, 904, 905, 914, 915, 917, 918, 934, 956, 963, 972, 979, 981, 982, 999, 1001, 1003, 1006, 1007, 1008, 1010, 1012, 1013, 1021, 1023, 1024, 1028, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "matrix": [2, 8, 11, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 89, 97, 104, 112, 113, 114, 115, 117, 123, 124, 125, 133, 181, 187, 193, 196, 203, 218, 222, 245, 248, 249, 265, 267, 269, 282, 313, 329, 332, 335, 336, 350, 357, 358, 359, 365, 370, 378, 379, 380, 383, 385, 389, 392, 395, 396, 397, 412, 416, 417, 418, 423, 424, 425, 426, 427, 437, 438, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 461, 464, 466, 467, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 500, 504, 505, 508, 509, 510, 511, 512, 513, 516, 517, 518, 527, 529, 531, 532, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 593, 594, 596, 597, 598, 599, 601, 602, 611, 612, 613, 614, 615, 616, 617, 619, 628, 637, 638, 639, 641, 643, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 720, 721, 722, 723, 724, 726, 730, 737, 738, 739, 742, 746, 747, 748, 749, 762, 763, 766, 767, 768, 769, 771, 772, 774, 775, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 795, 796, 800, 801, 804, 805, 806, 807, 808, 811, 812, 822, 830, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 877, 878, 879, 881, 883, 884, 885, 887, 889, 890, 891, 892, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 929, 934, 936, 937, 938, 939, 944, 953, 954, 955, 956, 957, 960, 962, 963, 971, 972, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 997, 999, 1001, 1003, 1005, 1006, 1010, 1011, 1012, 1013, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "matrixorz": 1043, "matshow": [58, 59, 101, 145, 170, 313, 510], "matsubara": 1009, "matt": [1043, 1044, 1045, 1050, 1051, 1055, 1056], "matteo": [1044, 1046, 1054], "matter": [132, 266, 350, 366, 415, 416, 422, 575, 676, 684, 686, 1005, 1044], "matthew": [2, 382, 388, 544, 751, 1040, 1043, 1047, 1049, 1053, 1054, 1058], "matthews_corrcoef": [2, 1009, 1040, 1046, 1047, 1054], "matthia": [1040, 1042, 1043, 1046, 1047, 1048, 1052, 1055], "matthieu": [0, 405, 1040, 1044, 1055], "matti": [1041, 1044, 1045], "matur": [383, 1028, 1029], "mat\u00e9rn": 627, "mat\u00eda": 1054, "maud": 1043, "mauna": 179, "maura": 1051, "mauroantonioserrano": 1055, "mav": 1058, "mavani": 1048, "mavroforaki": [1044, 1046], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 67, 69, 75, 79, 87, 93, 97, 102, 106, 107, 110, 112, 115, 123, 126, 130, 133, 137, 139, 146, 152, 156, 163, 164, 165, 167, 168, 172, 176, 178, 179, 186, 187, 190, 200, 204, 206, 210, 212, 219, 220, 223, 231, 233, 235, 240, 248, 252, 273, 274, 275, 286, 288, 295, 296, 298, 302, 303, 307, 309, 311, 313, 316, 318, 319, 321, 328, 333, 338, 340, 354, 370, 415, 417, 420, 476, 477, 478, 479, 480, 481, 482, 483, 484, 520, 544, 563, 564, 565, 566, 567, 568, 571, 572, 573, 614, 635, 639, 640, 656, 657, 677, 680, 682, 688, 699, 700, 704, 707, 712, 713, 765, 800, 801, 808, 869, 870, 881, 882, 884, 891, 898, 899, 920, 921, 922, 923, 1005, 1007, 1012, 1019, 1023, 1024, 1030, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "max_": [415, 1009], "max_abs_": 881, "max_abs_scal": 1019, "max_bin": [328, 329, 422, 569, 570, 1057], "max_categori": [322, 329, 331, 885, 886, 1019, 1054, 1056], "max_cluster_s": 453, "max_column": 235, "max_degre": [887, 1053], "max_depth": [46, 67, 138, 139, 142, 146, 147, 148, 149, 150, 151, 152, 156, 157, 159, 185, 238, 272, 287, 293, 327, 328, 361, 363, 364, 365, 396, 397, 414, 422, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 574, 719, 811, 812, 836, 920, 921, 922, 923, 924, 925, 926, 998, 1016, 1025, 1049, 1051], "max_df": [54, 276, 339, 357, 358, 596, 599, 1051, 1058], "max_dist": 248, "max_doc_update_it": 544, "max_ep": [415, 457, 462, 463, 464], "max_error": [2, 411, 1009, 1049, 1059], "max_estim": 141, "max_featur": [54, 67, 141, 152, 253, 272, 287, 327, 422, 424, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 596, 599, 605, 920, 921, 922, 923, 998, 1005, 1040, 1042, 1043, 1047, 1048, 1051, 1054, 1057], "max_features_": [567, 568, 605, 920, 921, 922, 923, 1054], "max_fpr": [796, 1009, 1048], "max_fun": [869, 870, 1050], "max_i": [252, 1011], "max_idf": 1053, "max_it": [43, 47, 52, 54, 55, 62, 64, 66, 67, 106, 107, 123, 126, 142, 143, 147, 153, 160, 163, 164, 185, 186, 190, 191, 197, 203, 209, 210, 224, 225, 226, 229, 230, 232, 237, 238, 239, 240, 242, 255, 256, 260, 261, 262, 263, 266, 288, 306, 311, 312, 313, 322, 327, 328, 329, 335, 336, 343, 357, 358, 389, 397, 422, 427, 447, 450, 454, 455, 456, 461, 466, 468, 478, 479, 485, 489, 490, 491, 539, 540, 541, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 569, 570, 635, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 680, 682, 684, 685, 686, 687, 688, 690, 691, 695, 696, 697, 698, 700, 701, 702, 805, 806, 822, 861, 869, 870, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 999, 1001, 1005, 1012, 1013, 1022, 1023, 1041, 1044, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058], "max_iter": 336, "max_iter_list": 153, "max_iter_predict": 618, "max_j": [654, 660], "max_leaf_nod": [137, 143, 152, 217, 328, 365, 422, 565, 566, 567, 568, 569, 570, 572, 573, 574, 920, 921, 922, 923, 1043, 1049, 1051], "max_n": [596, 597, 599, 1040], "max_n_alpha": [659, 663], "max_nbyt": 974, "max_no_improv": [77, 96, 99, 456, 545, 546, 547, 554, 1054, 1055], "max_patch": [85, 423, 591, 592, 1048], "max_resourc": [150, 811, 812, 998], "max_resources_": [811, 812], "max_sampl": [154, 185, 422, 563, 564, 565, 566, 571, 572, 573, 642, 1050, 1053, 1056], "max_samples_": 571, "max_skip": 679, "max_subpopul": [234, 687, 1054], "max_thread": [371, 384], "max_train_s": [43, 52, 419, 829, 1047], "max_trial": [679, 1005], "max_val": 942, "max_valu": [635, 1051, 1052], "max_x": 252, "maxabs_scal": [2, 397, 881, 1048], "maxabsscal": [2, 372, 411, 876, 897, 999, 1019, 1045, 1048, 1049, 1050, 1051, 1056, 1057], "maxent": [2, 666, 667, 1005], "maxent_du": 666, "maxi": 1055, "maxim": [117, 118, 120, 123, 133, 150, 197, 265, 266, 269, 276, 280, 284, 285, 289, 306, 321, 327, 346, 350, 361, 365, 380, 397, 412, 414, 415, 418, 420, 422, 424, 425, 557, 602, 618, 619, 652, 653, 656, 677, 687, 688, 728, 808, 811, 812, 822, 881, 887, 897, 1003, 1005, 1008, 1009, 1012, 1014, 1024, 1043, 1045, 1050, 1053, 1055, 1058], "maxima": 415, "maximesaur": [1055, 1056], "maximis": [163, 261, 304, 1003, 1012], "maximum": [2, 43, 47, 50, 64, 69, 72, 92, 111, 112, 113, 114, 115, 125, 137, 139, 142, 143, 146, 153, 175, 177, 180, 181, 187, 196, 204, 254, 269, 285, 298, 302, 303, 309, 316, 341, 342, 344, 345, 348, 358, 361, 363, 364, 370, 378, 388, 389, 396, 397, 412, 413, 415, 417, 418, 420, 422, 423, 425, 426, 427, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 461, 464, 466, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 489, 490, 491, 506, 517, 519, 520, 521, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 591, 592, 605, 618, 635, 639, 640, 643, 645, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 682, 684, 685, 686, 687, 690, 691, 693, 694, 695, 696, 697, 698, 700, 701, 702, 724, 752, 789, 805, 808, 811, 812, 814, 822, 829, 836, 861, 868, 869, 870, 876, 877, 881, 882, 884, 887, 888, 889, 891, 900, 901, 906, 907, 908, 909, 912, 913, 917, 920, 921, 922, 923, 924, 926, 935, 942, 998, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1019, 1023, 1024, 1025, 1030, 1047, 1048, 1050, 1051, 1054, 1055, 1057], "maxin": [1050, 1051], "maxsiz": 625, "maxval": [519, 521], "maxwel": [0, 373, 1050, 1053, 1054, 1055, 1056], "maxwelllzh": 1055, "may_share_memori": 1057, "mayb": [108, 313, 397, 423, 1024, 1029], "mayer": [422, 1052, 1054, 1057, 1058], "mayer2022": 422, "mayilvahanan": 415, "mayorov": [1043, 1044, 1045, 1046], "mayur": 1048, "mazari": 1048, "mb": [47, 248, 269, 357, 359, 378, 389, 504, 914, 915, 916, 917, 918, 1024, 1030, 1036], "mbilling": 1045, "mbillingr": 1050, "mbk": [77, 99], "mbk_means_cluster_cent": 99, "mbk_means_label": 99, "mbk_means_labels_uniqu": 77, "mblondel": [377, 516], "mbnmf": 54, "mc4229": 1051, "mc_clf": 1016, "mcar": 153, "mcc": [2, 751, 1009, 1054], "mccall": 104, "mccallum": [847, 1011], "mccarthi": [0, 367, 1040, 1048], "mcclish": [284, 796], "mcconaghi": 1033, "mccullagh": 1005, "mcculloh": [1045, 1046], "mcd": [2, 51, 113, 114, 417, 476, 481], "mcdermott": [1042, 1057], "mcdonald": 51, "mcdowel": 1048, "mcfadden": 1009, "mcfee": [1045, 1046], "mcgibbon": [1042, 1043, 1046], "mcgushion": 1049, "mcinn": [415, 1046, 1047, 1048, 1050, 1051, 1056], "mcivor": [1055, 1056], "mcm": [762, 1009], "mcm_": 762, "mcmahon": 1057, "mcsherri": [734, 764, 1009], "mctiernan": [1054, 1055], "mcve": [388, 395], "md": [2, 237, 238, 239, 240, 387, 696, 700, 702, 1034, 1035, 1040, 1052, 1055], "md5": 1052, "md5_checksum": 377, "md_scale": 237, "mdarii": 1056, "mdbecker": 1033, "mdi": [144, 151, 187, 188, 193, 422, 471, 504, 572, 638, 642, 838, 872, 886, 1017, 1030], "mdi_import": [192, 193], "mds_result": 702, "me": 357, "me1": 293, "me2": 293, "me3": 293, "mea": 93, "mean": [2, 43, 44, 45, 47, 50, 52, 53, 54, 57, 61, 62, 64, 70, 71, 72, 73, 75, 77, 79, 81, 84, 85, 88, 89, 90, 95, 105, 112, 113, 114, 115, 118, 120, 121, 123, 126, 127, 128, 129, 130, 137, 139, 140, 143, 146, 147, 150, 151, 153, 158, 159, 160, 171, 172, 174, 179, 180, 181, 183, 185, 187, 190, 191, 198, 200, 206, 208, 210, 213, 214, 217, 219, 223, 224, 226, 232, 233, 234, 235, 240, 242, 244, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 261, 262, 263, 265, 266, 269, 271, 272, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 295, 296, 307, 316, 319, 321, 322, 323, 325, 328, 331, 333, 338, 346, 349, 350, 353, 355, 356, 357, 359, 366, 370, 375, 377, 378, 380, 381, 383, 384, 385, 387, 388, 389, 391, 392, 395, 396, 397, 406, 412, 413, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 438, 444, 445, 446, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 495, 509, 510, 512, 514, 520, 527, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 591, 596, 597, 598, 599, 602, 605, 610, 614, 615, 616, 617, 618, 619, 621, 630, 635, 636, 638, 640, 641, 642, 643, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 692, 696, 697, 698, 699, 700, 701, 702, 703, 712, 713, 715, 717, 720, 721, 724, 725, 732, 734, 737, 738, 739, 744, 745, 746, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 765, 782, 786, 787, 789, 791, 792, 793, 795, 796, 798, 799, 800, 801, 803, 805, 806, 807, 808, 811, 812, 814, 822, 826, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 858, 859, 860, 862, 863, 865, 866, 868, 869, 870, 871, 873, 874, 876, 877, 881, 882, 884, 888, 890, 892, 893, 898, 900, 901, 903, 905, 907, 908, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 934, 938, 939, 941, 982, 983, 989, 993, 998, 999, 1000, 1003, 1005, 1006, 1008, 1011, 1012, 1013, 1014, 1016, 1017, 1022, 1023, 1024, 1025, 1030, 1033, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "mean_": [124, 279, 540, 541, 542, 547, 549, 551, 892, 1019, 1048], "mean_absolute_error": [2, 52, 217, 219, 235, 411, 1009, 1041, 1043, 1059], "mean_absolute_percentage_error": [2, 52, 147, 411, 1009, 1052, 1054, 1059], "mean_auc": 285, "mean_change_tol": 544, "mean_fit_tim": [143, 298, 808, 822], "mean_fpr": 285, "mean_gamma_devi": [2, 411, 1009, 1050, 1059], "mean_impute_scor": 186, "mean_l1_ratio": 1043, "mean_pinball_loss": [2, 52, 150, 153, 328, 1005, 1009, 1053], "mean_pinball_loss_95p": 1009, "mean_poisson_devi": [2, 217, 411, 1009, 1050, 1059], "mean_precis": 273, "mean_precision_": 805, "mean_precision_prior": [260, 266, 805], "mean_precision_prior_": 805, "mean_predict": [52, 181], "mean_predictions_gpr": 174, "mean_prior": 805, "mean_prior_": 805, "mean_recal": 273, "mean_scor": [106, 284, 287, 358, 1053], "mean_score_tim": [143, 273, 276, 808, 822], "mean_shift": [2, 1045, 1048], "mean_square_error": 1041, "mean_squared_error": [2, 46, 148, 150, 151, 213, 217, 219, 221, 223, 235, 366, 411, 422, 760, 1009, 1041, 1043, 1050, 1051, 1057, 1059], "mean_squared_log_error": [2, 411, 719, 1009, 1047, 1053, 1057, 1059], "mean_test_": 279, "mean_test_precis": [273, 279], "mean_test_recal": 273, "mean_test_scor": [105, 106, 107, 115, 143, 163, 171, 265, 274, 275, 276, 283, 286, 287, 298, 346, 479, 602, 808, 822, 998, 1046, 1053], "mean_tim": 1046, "mean_tpr": [284, 285], "mean_train_precis": [808, 822], "mean_train_scor": [808, 822, 1046], "mean_tweedie_devi": [2, 235, 411, 1009, 1050, 1059], "mean_variance_axi": [2, 392, 1046, 1053], "mean_y_pr": 179, "meaning": [72, 193, 242, 305, 333, 359, 412, 414, 419, 423, 424, 556, 737, 738, 746, 791, 792, 795, 861, 1013, 1023, 1024, 1040, 1056], "meaningfulli": [217, 1009], "meaningless": [191, 423, 914, 917, 1043], "means_": [70, 260, 261, 262, 263, 265, 266, 557, 558, 805, 806], "means_init": [262, 263, 806], "meanshift": [2, 79, 329, 415, 447, 1043, 1044, 1045, 1048, 1050, 1051, 1054, 1055, 1056, 1058], "meant": [92, 153, 172, 254, 333, 378, 392, 481, 501, 685, 858, 931, 974, 975, 997, 999, 1013, 1015, 1019, 1041], "meanwhil": [395, 1024], "measur": [2, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 84, 93, 95, 96, 124, 140, 141, 150, 154, 161, 172, 174, 179, 187, 189, 190, 191, 195, 206, 211, 216, 217, 221, 223, 235, 267, 273, 275, 281, 282, 288, 321, 350, 357, 358, 370, 378, 380, 385, 389, 397, 412, 417, 419, 420, 421, 422, 423, 456, 459, 469, 506, 523, 546, 548, 555, 559, 565, 566, 567, 568, 571, 572, 573, 612, 615, 616, 619, 635, 639, 666, 698, 700, 706, 710, 712, 713, 715, 717, 720, 721, 724, 725, 728, 733, 734, 735, 737, 739, 744, 745, 747, 748, 751, 755, 763, 764, 765, 790, 791, 792, 794, 795, 796, 797, 800, 803, 833, 835, 838, 858, 889, 901, 920, 921, 922, 923, 929, 999, 1005, 1007, 1012, 1014, 1015, 1017, 1023, 1025, 1030, 1040, 1043, 1045, 1046, 1048, 1050], "mechan": [74, 251, 354, 357, 371, 383, 385, 409, 413, 415, 423, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 1007, 1025, 1033], "mecopur": 1057, "med": [57, 104, 284, 378, 1019], "meda": [109, 190, 1009], "media": [415, 1033], "median": [2, 43, 52, 72, 105, 109, 113, 114, 150, 185, 186, 190, 219, 223, 234, 246, 254, 316, 326, 328, 329, 378, 417, 422, 424, 447, 461, 465, 468, 481, 560, 562, 566, 573, 605, 635, 638, 643, 678, 679, 687, 729, 761, 859, 890, 902, 921, 923, 999, 1019, 1025, 1043, 1044], "median_absolute_error": [2, 109, 190, 1009, 1044, 1050, 1052], "median_predict": 52, "medic": [278, 419, 720, 1005, 1033], "medicin": [278, 720, 1009], "medina": [1040, 1042], "medinc": [316, 327, 378, 497], "medium": [42, 187, 250, 291, 323, 346, 415, 651, 886, 1002, 1005], "medoid": 453, "medoids_": 453, "medri": 1043, "meekail": [0, 404, 1054, 1055, 1056, 1057], "meer": [98, 415, 455], "meet": [383, 395, 398, 424, 580, 611, 869, 870, 909, 1009, 1022, 1033, 1048, 1049, 1050], "megabyt": 1054, "megasari": 1052, "meghann": [1048, 1050], "mehak": 1047, "mehdi": [1044, 1053], "mehgarg": 1055, "mehmet": [1047, 1053], "mehmetcanakbai": 1055, "mehrdad": 1054, "mehta": [1044, 1045, 1046, 1048, 1049, 1050, 1051, 1055, 1056], "mehul": 1047, "mei": [1045, 1050], "meier": 1047, "meila": 415, "mein": 423, "meinshausen": 202, "meirel": 1051, "meketon": 1047, "melani": [1033, 1047, 1048], "melderi": 1048, "melemo2": 1054, "meli": [1053, 1054, 1055], "melissa": 1048, "mellon": 907, "melnik": 1055, "melsyt": [1048, 1049], "mem": [89, 389, 516, 517, 1030], "member": [0, 357, 358, 378, 383, 386, 398, 415, 430, 449, 453, 455, 458, 460, 500, 563, 564, 565, 566, 571, 572, 573, 574, 589, 666, 667, 674, 675, 676, 684, 685, 686, 712, 713, 723, 725, 739, 744, 745, 765, 794, 803, 808, 912, 1005, 1012, 1040, 1052, 1055], "membership": [30, 91, 398, 412, 415, 519, 520, 521, 522, 523, 527, 530, 1024], "memit": 389, "memmap": [371, 378, 397, 420, 516, 542, 1048, 1057], "memoiz": [106, 378, 397], "memor": 192, "memori": [2, 47, 89, 105, 106, 127, 190, 191, 269, 298, 322, 325, 327, 329, 330, 333, 357, 358, 359, 371, 372, 377, 383, 386, 392, 395, 397, 409, 415, 416, 419, 420, 423, 426, 427, 448, 449, 450, 451, 452, 453, 454, 456, 457, 461, 464, 466, 475, 480, 486, 504, 511, 516, 517, 541, 542, 543, 546, 549, 563, 564, 565, 566, 571, 572, 573, 574, 589, 590, 596, 597, 599, 654, 655, 656, 660, 661, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 692, 786, 787, 788, 789, 808, 814, 822, 831, 833, 834, 835, 836, 839, 840, 841, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 872, 873, 890, 892, 902, 903, 905, 910, 912, 913, 920, 921, 922, 923, 939, 977, 993, 1005, 1011, 1012, 1019, 1021, 1022, 1024, 1025, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "memory_profil": [389, 401, 408], "memoryerror": [1048, 1052], "memoryview": 384, "memorywis": 409, "men": 380, "menes": 1055, "meng": [1040, 1041, 1044, 1046, 1047], "menoci": 1058, "menon": 413, "mensch": [1045, 1046, 1047, 1048], "mention": [90, 118, 137, 235, 289, 326, 366, 370, 383, 387, 388, 395, 415, 704, 904, 905, 998, 1003, 1005, 1029, 1032, 1033, 1047, 1048, 1049], "menu": 401, "menuet": 1049, "mercer": 1001, "mere": [43, 275, 397, 839, 1023], "merg": [74, 76, 81, 86, 328, 381, 383, 386, 391, 395, 398, 415, 447, 448, 449, 452, 453, 470, 828, 1040, 1047], "merit": [383, 387, 398], "meritocrat": 398, "merritt": 1046, "mersenn": 1051, "merz": 413, "mesfer": 1053, "mesh": [93, 146, 156, 176, 249, 304, 311, 318, 340, 342], "meshgrid": [50, 63, 77, 93, 113, 146, 156, 175, 176, 177, 178, 180, 191, 228, 229, 230, 231, 242, 244, 264, 302, 309, 311, 318, 319, 340, 345, 346, 350, 351, 354, 355, 639], "meshulam": 1043, "meson": [381, 386, 401, 408, 1059], "mess": 1054, "messag": [73, 79, 97, 104, 123, 251, 357, 358, 378, 381, 382, 386, 387, 388, 391, 392, 415, 447, 461, 475, 547, 551, 556, 582, 635, 720, 808, 811, 812, 814, 822, 831, 836, 839, 841, 861, 869, 870, 910, 937, 938, 939, 942, 946, 971, 992, 997, 1009, 1019, 1040, 1044, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "met": [145, 251, 385, 424, 542, 549, 635, 679, 1005, 1009, 1048], "meta": [2, 7, 30, 31, 91, 104, 136, 161, 187, 217, 280, 284, 289, 292, 295, 331, 332, 364, 366, 377, 381, 385, 387, 395, 397, 406, 413, 424, 425, 435, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 504, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 583, 589, 590, 596, 598, 599, 605, 611, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 807, 808, 809, 810, 815, 817, 824, 826, 830, 835, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 929, 961, 968, 997, 998, 1010, 1029, 1030, 1031, 1035, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1054, 1055, 1057], "meta_clf_sample_weight": 251, "meta_est": 251, "meta_meta_est": 251, "metaclassifi": [251, 252], "metaclassifierifittedmetaclassifi": 251, "metadata": [2, 47, 91, 135, 182, 187, 199, 243, 269, 333, 358, 377, 378, 409, 429, 432, 435, 438, 439, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 495, 496, 504, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 964, 965, 966, 967, 968, 992, 1009, 1028, 1029, 1030, 1035, 1056], "metadata_rout": [2, 251, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 807, 809, 810, 815, 817, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 964, 965, 966, 967, 968], "metadatarequest": [2, 251, 429, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 476, 477, 478, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 565, 566, 567, 568, 569, 570, 572, 573, 574, 589, 590, 591, 596, 597, 598, 599, 600, 603, 604, 606, 607, 608, 611, 618, 619, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 660, 662, 664, 665, 666, 668, 670, 672, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 965, 967, 1057], "metadatarout": [2, 251, 444, 471, 472, 479, 563, 564, 571, 575, 576, 577, 578, 601, 602, 605, 610, 635, 655, 659, 661, 663, 667, 669, 671, 673, 679, 681, 683, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 871, 872, 909, 967, 1057], "metaestim": [2, 91, 397, 909, 929, 969, 1044, 1053, 1054, 1057], "metaestimatormixin": [2, 251], "metaireau": [1040, 1043], "metal": 411, "metaregressor": 251, "metatransfom": 1045, "meteorologi": 413, "meth_nam": 320, "method": [2, 5, 8, 14, 18, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 71, 72, 74, 75, 76, 79, 82, 84, 85, 87, 88, 89, 91, 92, 93, 94, 96, 100, 103, 106, 112, 113, 116, 118, 121, 123, 126, 128, 131, 132, 133, 135, 137, 142, 144, 145, 151, 158, 167, 168, 172, 185, 195, 205, 206, 218, 225, 234, 236, 238, 240, 241, 242, 244, 248, 250, 251, 252, 254, 258, 259, 262, 269, 277, 280, 282, 283, 284, 289, 293, 296, 302, 303, 305, 316, 320, 323, 325, 327, 328, 349, 357, 358, 359, 365, 366, 370, 371, 372, 375, 380, 381, 383, 384, 385, 389, 390, 392, 395, 396, 400, 406, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 433, 434, 437, 438, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 466, 469, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 512, 520, 522, 530, 533, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 713, 718, 719, 730, 739, 740, 743, 744, 749, 750, 771, 776, 777, 782, 786, 791, 796, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 900, 901, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 929, 932, 941, 945, 946, 956, 964, 965, 966, 967, 968, 969, 974, 977, 992, 993, 996, 997, 998, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "method_map": [251, 965], "method_max_it": [553, 554, 1050], "method_nam": [251, 965, 968], "methodmap": [2, 251, 965], "methodmetadatarequest": 964, "methodol": 1019, "methodolog": [419, 1032], "methodologi": [549, 885, 999, 1009, 1033], "methodpair": 966, "metric": [2, 13, 43, 45, 46, 50, 52, 55, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 82, 83, 84, 87, 93, 95, 99, 104, 109, 115, 137, 142, 148, 149, 151, 152, 153, 158, 169, 172, 175, 185, 187, 189, 190, 192, 202, 206, 212, 213, 217, 219, 221, 223, 235, 240, 245, 248, 249, 254, 257, 267, 268, 271, 272, 273, 275, 276, 278, 282, 284, 285, 289, 295, 296, 298, 306, 309, 314, 316, 321, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 357, 358, 366, 370, 375, 378, 383, 385, 395, 396, 397, 400, 406, 410, 413, 414, 420, 421, 422, 425, 426, 432, 444, 448, 451, 452, 453, 457, 461, 462, 463, 464, 469, 476, 528, 543, 557, 558, 559, 561, 563, 565, 566, 567, 569, 570, 572, 573, 575, 577, 586, 610, 618, 628, 636, 639, 642, 646, 647, 648, 649, 650, 651, 666, 667, 671, 674, 676, 682, 683, 684, 696, 698, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 837, 840, 841, 842, 843, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 878, 884, 907, 908, 912, 914, 917, 920, 922, 929, 999, 1001, 1004, 1006, 1010, 1012, 1015, 1017, 1028, 1029, 1030, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "metric_kwarg": [787, 788], "metric_obj": 707, "metric_param": [426, 451, 453, 457, 462, 463, 464, 696, 700, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 1044, 1047, 1054], "metsi": [847, 1011], "metzen": [0, 404, 1040, 1043, 1044, 1045, 1046], "mexican": 132, "meyer89": 1051, "mferrari3": [1048, 1049], "mgrid": [53, 165], "mhg": 1045, "mi": [64, 72, 167, 415, 615, 616, 712, 763, 765, 999, 1009, 1023], "mia": 1055, "miao": 1053, "mib": [370, 475, 910], "mic": [893, 1019], "micah": 1050, "micci": [893, 1019], "mice": [377, 635, 999], "miceprotein": 377, "michael": [380, 413, 415, 457, 636, 645, 699, 805, 999, 1005, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1054, 1055, 1057, 1058], "michal": [1044, 1047, 1053, 1054], "michali": 415, "michalkrawczyk": [1053, 1054], "micha\u0142": 1051, "micha\u0142owski": 1049, "michel": [0, 405, 1040, 1042, 1043, 1045, 1047, 1054, 1055], "michelbach": 1044, "michiaki": 1046, "micka\u00ebl": [1048, 1049], "micky774": [1054, 1055], "micro": [49, 309, 339, 370, 387, 715, 721, 737, 738, 746, 791, 792, 795, 796, 1009, 1040, 1048, 1049, 1055, 1058], "micro_roc_auc_ovr": 284, "microarrai": [412, 458, 521, 636, 999], "microcontrol": 1028, "microphon": 124, "microryzomi": [50, 309, 378, 506], "microryzomys_minutu": 506, "microryzomys_minutus_0": 50, "microsoft": [0, 51, 381, 384, 401], "mid": [63, 346, 1009, 1011], "middl": [43, 61, 70, 95, 128, 202, 354, 380, 1016, 1019], "mideast": [57, 378], "midina": 1047, "midnight": 43, "midpoint": 346, "midpointnorm": 346, "midvidi": 1053, "midwest": [172, 380], "might": [0, 43, 44, 52, 67, 77, 79, 95, 97, 104, 146, 153, 156, 169, 180, 186, 190, 191, 192, 195, 217, 235, 244, 269, 275, 277, 289, 299, 312, 327, 333, 350, 355, 366, 370, 371, 377, 381, 383, 384, 385, 387, 388, 389, 391, 395, 397, 398, 401, 409, 413, 414, 416, 419, 420, 421, 422, 423, 425, 440, 450, 495, 504, 509, 511, 516, 523, 531, 544, 563, 564, 565, 569, 570, 572, 587, 588, 590, 618, 619, 635, 658, 662, 663, 664, 666, 667, 684, 686, 700, 765, 802, 810, 811, 812, 825, 828, 836, 861, 877, 892, 905, 924, 926, 928, 930, 934, 938, 939, 956, 977, 998, 999, 1001, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1016, 1017, 1019, 1024, 1025, 1041, 1043, 1048, 1049, 1051, 1054, 1055, 1056, 1057], "mignon": [1040, 1043, 1044, 1047], "migrat": [383, 1040], "miguel": [1050, 1058], "miguelbarao": 1050, "miguelcsilva": 1058, "mihael": [415, 457, 464], "mihevc": 1050, "mike": 1047, "mikebenfield": 1047, "miketip": [542, 549], "mikhail": [1041, 1042, 1043, 1046, 1047, 1055, 1056], "miki": [1057, 1058], "mikulski": 1051, "milajev": 1044, "milan": 1052, "milana2": 1054, "mileag": 370, "milen": 1047, "mileston": 387, "militari": 104, "mill": 1050, "millawel": 1054, "miller": [378, 1048, 1049, 1053], "million": [77, 91, 179, 195, 423, 700, 1006, 1024, 1033, 1054, 1055], "millman": [0, 405, 1049, 1056, 1057], "milman": 1048, "miln": 378, "miltenberg": 1055, "milton": 1057, "milutinov": 1049, "mimic": [185, 217, 357, 826], "mimicri": 357, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 87, 93, 109, 123, 126, 137, 139, 146, 149, 150, 156, 165, 172, 176, 178, 179, 180, 186, 190, 200, 204, 206, 212, 219, 220, 223, 238, 248, 249, 252, 295, 302, 303, 309, 311, 313, 316, 318, 319, 321, 333, 340, 354, 392, 415, 418, 420, 489, 490, 492, 520, 542, 543, 546, 548, 549, 557, 558, 571, 635, 639, 640, 662, 663, 664, 665, 690, 691, 712, 765, 788, 811, 812, 861, 869, 870, 882, 891, 898, 956, 973, 1000, 1005, 1009, 1012, 1019, 1046, 1049, 1051, 1052, 1055], "min_": [328, 415, 422, 882, 1005, 1019, 1023, 1024, 1025], "min_arg": 52, "min_batch_s": 959, "min_bin_freq": [455, 468], "min_c": 1011, "min_categori": [848, 1052], "min_cluster_s": [79, 100, 331, 415, 453, 457, 463, 1049], "min_degre": [887, 1053], "min_df": [54, 57, 104, 276, 339, 357, 358, 423, 596, 599, 1040, 1042, 1051, 1058], "min_dist": 248, "min_estim": 141, "min_faces_per_person": [45, 378, 502], "min_features_to_select": [171, 602, 1048], "min_frequ": [329, 331, 885, 886, 1019, 1054, 1056], "min_grad_norm": [700, 1046], "min_i": 252, "min_idf": 1053, "min_impurity_decreas": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923, 1025, 1047], "min_impurity_split": 1047, "min_max_axi": 1049, "min_max_scal": 1019, "min_n": [596, 597, 599, 1040], "min_n_compon": 248, "min_po": [2, 392], "min_resourc": [150, 811, 812, 998], "min_resources_": [811, 812], "min_sampl": [79, 84, 100, 395, 397, 415, 426, 451, 453, 457, 462, 463, 464, 679, 1005, 1049, 1053], "min_sample_split": 1055, "min_samples_leaf": [143, 149, 150, 192, 325, 328, 361, 422, 565, 566, 567, 568, 569, 570, 572, 573, 574, 920, 921, 922, 923, 1025, 1046], "min_samples_split": [150, 151, 152, 279, 287, 317, 327, 422, 565, 566, 567, 568, 572, 573, 574, 811, 812, 920, 921, 922, 923, 998, 1025, 1046], "min_val": [935, 942], "min_valu": [635, 1051, 1052], "min_w": 1005, "min_weight_fraction_leaf": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923, 1025, 1043, 1046, 1047], "min_x": 252, "mina": [1050, 1051], "mincovdet": [2, 113, 114, 417, 476, 477, 480, 482, 483, 1015, 1040, 1047, 1059], "mind": [128, 153, 189, 190, 191, 235, 320, 321, 357, 358, 366, 383, 409, 417, 419, 422, 654, 655, 712, 1005, 1024, 1028], "minden": [415, 459, 469], "mine": [0, 275, 358, 378, 415, 426, 451, 519, 571, 728, 742, 748, 791, 1005, 1009, 1015, 1021], "ming": [571, 1015, 1044, 1048, 1049, 1050, 1054], "minghui": [1047, 1048], "mingw": 1043, "minh": 1048, "mini": [2, 47, 99, 123, 329, 372, 397, 423, 447, 449, 454, 456, 458, 460, 539, 541, 544, 545, 546, 547, 548, 550, 551, 553, 554, 1013, 1014, 1040, 1051, 1053], "mini_batch": [458, 460], "minibatch": [47, 79, 415, 420, 456, 542, 684, 868, 869, 870, 1040], "minibatch_iter": 47, "minibatch_kmean": 358, "minibatch_s": [47, 372], "minibatchdictionarylearn": [2, 123, 126, 372, 420, 539, 546, 550, 553, 554, 1041, 1043, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "minibatchkmean": [2, 57, 71, 73, 78, 79, 85, 93, 94, 96, 98, 187, 358, 372, 415, 420, 447, 449, 454, 520, 787, 1030, 1041, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "minibatchnmf": [2, 54, 372, 420, 1054, 1056, 1057, 1058], "minibatchsparsepca": [2, 539, 541, 545, 548, 550, 551, 553, 554, 1040, 1041, 1051, 1053, 1054, 1055, 1056, 1057], "miniforg": [381, 391, 401, 402], "miniforge3": [381, 391], "minim": [2, 43, 51, 52, 64, 92, 101, 111, 112, 150, 174, 182, 197, 213, 215, 217, 219, 221, 225, 235, 237, 247, 248, 260, 265, 269, 276, 284, 285, 316, 325, 328, 343, 350, 353, 361, 382, 383, 386, 391, 395, 397, 409, 413, 415, 417, 420, 422, 447, 448, 452, 453, 457, 470, 546, 548, 555, 565, 566, 567, 568, 572, 573, 617, 618, 619, 649, 654, 657, 665, 666, 675, 679, 680, 682, 686, 687, 695, 700, 702, 703, 756, 788, 859, 861, 870, 888, 900, 906, 920, 921, 922, 923, 1005, 1006, 1009, 1012, 1013, 1019, 1021, 1022, 1023, 1024, 1028, 1031, 1035, 1044, 1049, 1050], "minima": [180, 204, 420, 454, 700, 1006, 1048], "minimal_reproduc": 391, "minimalist": [388, 423, 1032], "minimis": [52, 274, 415, 419, 666, 667, 1025], "minimum": [2, 48, 90, 92, 113, 150, 151, 153, 171, 206, 227, 248, 254, 285, 302, 303, 385, 392, 401, 408, 412, 415, 422, 423, 448, 452, 453, 457, 461, 463, 476, 477, 480, 481, 482, 483, 519, 521, 549, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 602, 635, 639, 640, 643, 645, 676, 679, 684, 686, 687, 690, 691, 700, 713, 733, 787, 788, 811, 812, 833, 848, 869, 870, 881, 882, 885, 886, 887, 891, 905, 906, 919, 920, 921, 922, 923, 935, 938, 939, 942, 959, 1006, 1009, 1013, 1015, 1019, 1021, 1025, 1040, 1043, 1047, 1048, 1052, 1053, 1057], "minimum_cluster_s": 415, "minka": [130, 549, 1005], "minknowski": 1053, "minkowski": [426, 451, 457, 462, 463, 464, 696, 707, 786, 787, 788, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 1012, 1040, 1043, 1054, 1055, 1056], "minkowski_dist": [457, 464, 696, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866], "minkowskidist": [707, 1053], "minmax_scal": [2, 314, 316, 882, 1045, 1048], "minmaxscal": [2, 43, 44, 106, 168, 170, 195, 238, 254, 312, 327, 372, 411, 416, 471, 898, 999, 1019, 1042, 1045, 1048, 1050, 1051, 1052, 1056, 1057, 1059], "minmaxscalerminmaxscal": 106, "minnesota": 415, "minor": [254, 269, 278, 282, 378, 387, 398, 504, 1009, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "minu": [275, 768, 1009], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 378, 383, 1006, 1027], "minutu": [50, 309, 378, 506], "minval": [519, 521], "minwoo": 1040, "minyushkin": 1046, "miola": 1055, "miott": [1040, 1043], "miotto": 1051, "mir": 423, "miroslav": [1041, 1042, 1045], "mirror": [849, 998], "mirza": 1053, "misa": 1055, "misc": [57, 88, 126, 276, 339, 357, 358, 359, 378], "misc_featur": 254, "miscalibr": 64, "miscellan": [376, 377, 1030, 1046, 1047, 1054, 1055, 1057, 1058, 1059], "miscfeatur": 158, "misclassif": [46, 137, 269, 350, 804, 1023, 1024, 1025, 1041], "misclassifi": [70, 137, 268, 269, 350, 357, 1024], "misclassification_error": 137, "misdetect": 1057, "mish": 423, "mishra": [1052, 1053], "mislabel": [268, 422, 1011], "mislead": [72, 144, 145, 151, 190, 384, 400, 422, 561, 562, 565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923, 1035, 1053], "mismatch": [79, 1008, 1049], "misread": 242, "miss": [2, 20, 105, 158, 172, 192, 246, 256, 269, 275, 296, 326, 330, 333, 366, 370, 375, 378, 380, 382, 383, 388, 397, 411, 414, 415, 416, 417, 453, 479, 497, 504, 506, 509, 565, 566, 569, 570, 572, 573, 574, 635, 636, 637, 638, 647, 653, 680, 698, 702, 735, 777, 834, 855, 873, 881, 882, 886, 888, 889, 892, 893, 897, 900, 901, 903, 920, 921, 922, 923, 929, 1005, 1006, 1009, 1028, 1029, 1030, 1031, 1033, 1035, 1042, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "missclassif": 137, "missforest": [185, 999], "missing": [153, 422, 635, 636, 638, 1049], "missing_featur": [185, 186], "missing_fract": 153, "missing_fraction_list": 153, "missing_r": 186, "missing_sampl": [185, 186], "missing_valu": [185, 186, 256, 397, 635, 636, 637, 638, 777, 999, 1048, 1049], "missingind": [2, 635, 636, 638, 999, 1048, 1049, 1050, 1054, 1056], "mission": [0, 358, 1033], "misspecifi": 64, "misspel": 423, "mistak": [137, 169, 289, 336, 366, 415, 419, 743, 883, 897, 898, 900, 901, 902, 903, 1005, 1010], "misti": [43, 191], "mit": [293, 378, 389, 415, 425, 618, 619, 622, 627, 630, 651, 674, 675, 684, 849, 1002], "mitar": 1049, "mitig": [64, 90, 153, 192, 323, 371, 372, 1006, 1025, 1052], "mitra": [1050, 1051, 1055], "mitrov": 1049, "mitzi": [1053, 1054], "miwojc": 1054, "mix": [2, 43, 97, 103, 104, 124, 125, 147, 187, 190, 217, 246, 256, 258, 276, 316, 322, 377, 385, 395, 397, 416, 420, 427, 471, 473, 474, 504, 541, 546, 548, 555, 608, 612, 638, 654, 655, 660, 666, 667, 668, 669, 670, 671, 676, 684, 686, 689, 808, 822, 838, 872, 885, 886, 892, 893, 972, 979, 982, 1005, 1014, 1030, 1052, 1054, 1055], "mixed_encoded_preprocessor": 322, "mixed_pip": 322, "mixed_target": 322, "mixin": [2, 383, 397, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 609, 950, 1042, 1051, 1055], "mixing_": [124, 125, 541], "mixtur": [2, 46, 48, 70, 79, 90, 92, 100, 121, 177, 186, 204, 262, 263, 286, 306, 332, 378, 379, 397, 415, 420, 421, 425, 631, 805, 806, 808, 1029, 1030, 1034, 1035, 1040, 1044, 1045, 1046, 1047], "mizil": [62, 64, 413, 444, 446], "mizuki": 1054, "mk": 1025, "mkdir": [47, 389, 391], "mkdtemp": [89, 416], "mkl": [370, 371, 381, 391, 395, 1040], "mkl_num_thread": 371, "mksol": 104, "ml": [47, 172, 293, 377, 380, 388, 508, 510, 518, 1005, 1007, 1028, 1029, 1033], "ml_map": 403, "mlant": 1054, "mlb": [378, 883], "mlc": 380, "mlcomp": 1040, "mld": 47, "mldata": [1040, 1048], "mle": [113, 130, 549, 1048, 1051], "mlewis1729": 1047, "mlflow": 1028, "mlg": 1044, "mlinari\u0107": 1055, "mline": [48, 113, 231, 302, 345, 348], "mljar": 1028, "mlle": [697, 701, 1006], "mlliou112": 1047, "mlo": 179, "mlondschien": 1053, "mlop": 1028, "mlp": [187, 191, 255, 310, 312, 504, 838, 869, 870, 1013, 1030], "mlp_disp": 255, "mlp_model": 191, "mlp_preprocessor": 191, "mlpclassifi": [2, 67, 152, 164, 187, 310, 311, 313, 372, 510, 512, 522, 530, 868, 870, 882, 1010, 1013, 1030, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "mlpregressor": [2, 43, 191, 255, 372, 868, 869, 1013, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "mlpregressormlpregressor": 255, "mlxtend": 1028, "mm": 195, "mm_bunch": 50, "mmap_mod": [409, 974], "mmm": 51, "mmse": [112, 417, 428, 482], "mn193": 1057, "mnb": 1011, "mnist": [66, 187, 196, 208, 210, 225, 232, 296, 310, 312, 504, 666, 838, 869, 892, 941, 1005, 1013, 1030], "mnist_10000": 296, "mnist_20000": 296, "mnist_784": [225, 233, 296, 313], "mo": [330, 1051], "mobil": 391, "mock": 1050, "mockdatafram": 1050, "modal": [2, 244, 481, 958], "mode": [2, 48, 49, 81, 82, 113, 217, 244, 296, 298, 314, 325, 381, 383, 387, 391, 392, 395, 412, 418, 422, 426, 450, 451, 454, 456, 459, 466, 469, 478, 479, 485, 489, 494, 516, 517, 565, 569, 572, 600, 603, 604, 606, 607, 608, 618, 635, 652, 653, 666, 667, 674, 676, 681, 682, 683, 684, 687, 690, 691, 697, 701, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 868, 912, 914, 917, 920, 922, 944, 955, 956, 958, 1012, 1015, 1028, 1041, 1049, 1054, 1057], "model": [2, 7, 8, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 64, 70, 74, 75, 76, 83, 84, 89, 90, 91, 93, 96, 103, 105, 106, 107, 111, 115, 118, 122, 123, 132, 133, 136, 137, 138, 140, 142, 146, 149, 150, 152, 153, 155, 157, 158, 161, 163, 165, 166, 168, 169, 177, 178, 180, 181, 182, 183, 186, 188, 189, 193, 198, 200, 203, 205, 207, 208, 210, 212, 213, 214, 218, 219, 221, 222, 223, 225, 229, 230, 232, 233, 234, 244, 247, 252, 260, 262, 263, 264, 268, 270, 271, 273, 276, 278, 279, 280, 281, 283, 284, 288, 289, 290, 293, 296, 298, 299, 300, 302, 305, 309, 317, 320, 322, 323, 325, 327, 329, 330, 331, 333, 335, 336, 343, 345, 346, 347, 348, 349, 351, 353, 355, 358, 359, 362, 363, 364, 366, 375, 377, 378, 386, 389, 397, 400, 406, 411, 412, 413, 414, 415, 416, 418, 420, 421, 422, 423, 424, 425, 434, 438, 440, 444, 449, 456, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 495, 496, 497, 504, 506, 508, 509, 510, 511, 517, 530, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 596, 597, 601, 602, 605, 610, 614, 617, 618, 619, 623, 635, 640, 641, 642, 643, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 709, 714, 719, 729, 730, 731, 732, 742, 743, 749, 758, 761, 793, 796, 797, 800, 805, 806, 807, 808, 811, 812, 813, 814, 822, 823, 824, 825, 829, 830, 831, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 857, 858, 859, 861, 863, 868, 869, 870, 872, 873, 875, 877, 879, 884, 885, 887, 888, 889, 891, 892, 893, 897, 898, 900, 901, 902, 903, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 927, 992, 999, 1001, 1002, 1003, 1006, 1007, 1010, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1059], "model_1": 275, "model_1_scor": 275, "model_2": 275, "model_2_scor": 275, "model__estimator__max_depth": 998, "model_coef": 189, "model_color": 352, "model_detail": 146, "model_displai": 142, "model_fixed_threshold": 269, "model_from_prevision_vers": 409, "model_i": 275, "model_i_scor": 275, "model_idx": 254, "model_k": 275, "model_k_scor": 275, "model_l1": 353, "model_l2": 353, "model_nam": [143, 254, 295], "model_no_cf": 323, "model_param": 232, "model_prop": 43, "model_scor": [275, 295], "model_select": [2, 43, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 89, 105, 106, 107, 108, 109, 111, 118, 128, 130, 137, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 163, 168, 169, 171, 174, 185, 186, 187, 189, 190, 192, 193, 195, 202, 212, 217, 219, 224, 225, 232, 233, 235, 245, 250, 251, 254, 256, 257, 258, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 298, 299, 300, 304, 305, 311, 313, 314, 318, 320, 321, 322, 323, 325, 326, 327, 330, 331, 332, 333, 338, 339, 346, 349, 353, 361, 365, 366, 383, 385, 388, 396, 397, 406, 411, 414, 416, 419, 422, 444, 445, 566, 568, 575, 576, 587, 667, 705, 706, 708, 710, 750, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 861, 869, 870, 872, 920, 921, 922, 923, 998, 999, 1004, 1009, 1011, 1012, 1017, 1019, 1024, 1029, 1030, 1037, 1044, 1046, 1047], "model_selection_tut": 163, "model_step": 43, "model_titl": 146, "model_with_cf": 323, "moder": [275, 383, 425, 461, 1015], "modern": [43, 153, 423, 475, 511, 598, 698, 702, 738, 910, 1006, 1028, 1029, 1056], "modif": [383, 418, 422, 423, 453, 1022, 1057, 1058], "modifi": [109, 202, 227, 237, 238, 239, 251, 254, 331, 355, 383, 385, 397, 412, 415, 422, 425, 450, 454, 461, 466, 475, 489, 490, 491, 492, 503, 518, 589, 618, 619, 621, 627, 684, 686, 697, 701, 727, 737, 738, 776, 791, 792, 795, 936, 990, 991, 1005, 1022, 1023, 1029, 1034, 1035, 1040, 1042, 1043, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1055, 1059], "modified_fil": 383, "modified_hub": [46, 684, 1023], "modified_huber_loss": 227, "modified_tol": [697, 701], "modrak": [1055, 1056], "modroiu": 1009, "modul": [7, 11, 16, 30, 31, 71, 72, 84, 88, 110, 116, 119, 122, 123, 136, 166, 173, 184, 187, 188, 194, 196, 232, 236, 237, 259, 267, 292, 293, 294, 297, 310, 312, 313, 315, 334, 341, 356, 360, 363, 377, 378, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 395, 397, 400, 401, 409, 413, 415, 418, 422, 423, 424, 426, 451, 511, 543, 587, 588, 667, 948, 998, 1003, 1005, 1007, 1009, 1010, 1013, 1015, 1016, 1019, 1021, 1023, 1025, 1026, 1033, 1041, 1042, 1043, 1045, 1046, 1050, 1054], "modulo": [423, 1051], "moeller": 1046, "mogavero": 1050, "moham": [1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058], "mohamedbsh": 1055, "mohammad": [1048, 1049], "mohit": [1054, 1057], "mohn": [1048, 1052], "mohr": 1046, "moin": 1052, "mois\u00e9": 1021, "moitra": [1040, 1041, 1042], "mojca": 1051, "mojdeh": 1057, "mola": [1051, 1057], "molden": 1042, "molecul": 1006, "molin": 1055, "molla": [1041, 1042], "molnar": [191, 1016], "moment": [370, 420, 425, 447, 623, 631, 869, 870, 972, 1013, 1014], "momentum": [312, 869, 870, 1013], "mon": [43, 153, 191], "mona": [173, 181, 187, 425, 504, 619, 623, 630, 631, 633, 1030], "monaf": 1055, "monei": [0, 235, 1033], "monitor": [148, 202, 225, 386, 397, 561, 562, 567, 568, 569, 570, 1013, 1032, 1043, 1048, 1050, 1052], "mono": [654, 655, 660, 661, 668, 669, 670, 671, 689, 692], "monografia": 1005, "monomi": 218, "monotoinc": 326, "monoton": [2, 22, 43, 62, 136, 187, 191, 235, 247, 255, 326, 413, 565, 566, 567, 568, 569, 570, 572, 573, 640, 643, 644, 702, 714, 888, 900, 914, 917, 920, 921, 922, 923, 1006, 1010, 1019, 1024, 1030, 1047, 1051, 1055, 1057], "monotonic_cst": [153, 155, 326, 328, 332, 422, 565, 566, 569, 570, 572, 573, 920, 921, 922, 923, 1055, 1058], "mont": [249, 425, 619, 649, 650, 1001, 1014], "montecchio": 1044, "montesel": 1058, "month": [0, 43, 179, 191, 322, 378, 383, 387, 398, 1040], "month_co": 43, "month_sin": 43, "monthli": [179, 398, 1009], "montoya": 1047, "montreal": 330, "moodi": 1045, "moon": [275, 312, 318, 357, 358, 530], "moonkyung94": 1054, "moor": [0, 743, 1009, 1033, 1057], "moosmann": 574, "moradizadeh": 1054, "morai": 1058, "moral": [57, 357, 666, 1048, 1052, 1053, 1058], "morawiec": [1047, 1048], "more": [0, 2, 11, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 66, 67, 72, 74, 75, 78, 79, 81, 84, 87, 88, 90, 92, 95, 102, 109, 113, 120, 121, 123, 126, 129, 130, 137, 138, 140, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 158, 170, 172, 174, 180, 183, 186, 187, 190, 191, 193, 195, 197, 198, 202, 203, 206, 208, 211, 215, 217, 218, 219, 221, 232, 233, 234, 235, 237, 241, 244, 249, 250, 251, 252, 254, 256, 260, 262, 263, 265, 266, 268, 269, 273, 275, 276, 277, 278, 282, 284, 289, 293, 295, 296, 298, 299, 306, 311, 312, 314, 316, 317, 318, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 336, 343, 346, 350, 351, 353, 355, 357, 358, 359, 361, 362, 365, 366, 370, 371, 372, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 389, 390, 391, 396, 397, 398, 401, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 432, 438, 440, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 582, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 928, 930, 931, 952, 954, 956, 958, 971, 974, 992, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1031, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "moreau": [1046, 1047, 1048, 1049, 1050], "moreov": [163, 180, 318, 329, 366, 415, 419, 425, 905, 978, 1009, 1017, 1033, 1048, 1054, 1055], "moreyra": 1053, "morgan": [1021, 1025], "mori": 1055, "morikko": 1047, "morina": 1053, "moritz": [1053, 1055], "morn": 43, "moroz": 1046, "morril": 1040, "mors": 1051, "moslei": 1009, "mosley2013": 1009, "mosold": 158, "most": [2, 11, 43, 45, 47, 51, 53, 57, 61, 64, 87, 88, 90, 97, 111, 117, 118, 131, 137, 143, 144, 151, 153, 158, 167, 168, 169, 171, 172, 179, 186, 189, 190, 191, 192, 193, 195, 202, 217, 218, 235, 251, 255, 260, 266, 269, 272, 273, 278, 282, 283, 285, 289, 293, 295, 305, 316, 322, 323, 325, 328, 331, 333, 336, 346, 350, 357, 358, 359, 366, 370, 371, 372, 378, 379, 381, 383, 384, 385, 387, 388, 389, 391, 395, 397, 398, 401, 406, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 450, 451, 453, 457, 463, 464, 467, 475, 504, 511, 529, 532, 540, 542, 547, 551, 557, 559, 569, 570, 574, 575, 596, 597, 599, 601, 612, 619, 635, 638, 657, 666, 680, 682, 684, 686, 695, 696, 700, 703, 733, 736, 754, 766, 767, 771, 793, 802, 805, 806, 811, 812, 827, 840, 841, 854, 855, 856, 858, 860, 861, 862, 863, 864, 887, 889, 897, 898, 900, 901, 902, 903, 910, 929, 955, 956, 958, 971, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1033, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1055, 1057, 1059], "most_common": 57, "most_frequ": [278, 559, 635, 638, 862, 999, 1009, 1048, 1050, 1052], "mostli": [0, 2, 81, 104, 217, 235, 321, 385, 391, 395, 397, 420, 422, 423, 529, 787, 788, 1024, 1028, 1033, 1048, 1049, 1050, 1056], "mother": 1006, "motiv": [132, 383, 385, 397, 1001, 1009, 1019, 1033, 1053], "motmoti": 1050, "motoda": 415, "motor": 235, "motorcycl": [57, 378], "mottl": [1048, 1049], "moudgalya": [1056, 1057], "moufad": 1055, "moulavi": [415, 453], "mount": 391, "mountain": 1048, "mountford": [1056, 1057], "mous": 377, "mouseid": 377, "moussa": 1046, "move": [64, 146, 276, 314, 346, 382, 383, 389, 413, 415, 557, 558, 579, 580, 581, 583, 585, 586, 950, 951, 975, 1040, 1041, 1045, 1048, 1050, 1053, 1054, 1059], "moveabl": 416, "movelikeriv": 1049, "movement": 378, "movi": 423, "movie_entri": 423, "moya": 1052, "mp": 1005, "mpce": 57, "mpl": [70, 260, 261, 262, 266, 316], "mpl_toolkit": [50, 80, 102, 120, 129, 191, 214, 237, 239, 309], "mplot3d": [80, 102, 120, 129, 191, 214, 237, 239], "mpoemsl": 1054, "mppca": [542, 549], "mprun": 389, "mpy": 423, "mr": [330, 1041, 1044, 1054], "mrandrewandrad": 1046, "mrastgoo": [1055, 1057], "mrg": 391, "mridul": 1046, "mrinal": 1054, "mrinaltyagi": 1054, "mrl09": 420, "mrmjauh": 1047, "mro": [385, 432, 438, 1050, 1051], "mrs2008": 598, "msabati": 1054, "msc": 380, "mschaffenroth": 1050, "mse": [44, 46, 111, 112, 148, 150, 151, 185, 186, 217, 219, 221, 223, 290, 332, 655, 661, 1009, 1025, 1051, 1053], "mse_path_": [206, 655, 659, 661, 663, 669, 671], "mse_valu": 46, "mses_california": 186, "mses_diabet": 186, "msft": 51, "msg": [296, 992], "msle": 1009, "msm": [172, 380], "mssubclass": 158, "mst": 415, "msvc": 1043, "msvcp140": 1054, "mt19937": [282, 287, 941, 1051], "mthorrel": [1047, 1050], "mtrand": 366, "mtse": 687, "mu": [54, 113, 114, 275, 420, 428, 480, 482, 483, 486, 487, 488, 548, 555, 1003, 1005, 1047, 1050], "mu_i": 1011, "mu_j": 415, "mu_k": 1003, "muayyad": 1048, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 90, 113, 115, 121, 126, 132, 142, 150, 151, 158, 159, 160, 174, 185, 186, 190, 191, 192, 193, 195, 214, 215, 219, 248, 251, 254, 269, 275, 277, 278, 281, 286, 313, 317, 321, 322, 323, 327, 328, 330, 346, 351, 357, 358, 366, 370, 371, 372, 378, 383, 384, 385, 388, 391, 395, 396, 401, 409, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 454, 455, 504, 542, 543, 544, 546, 567, 568, 569, 570, 666, 667, 674, 675, 676, 684, 685, 686, 700, 787, 788, 811, 812, 826, 887, 905, 912, 998, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1017, 1021, 1022, 1024, 1025, 1029, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "mudd": 1053, "mueller": [0, 404, 1033, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "muhammad": [1048, 1049, 1053], "mukherje": 1051, "mula": 1052, "multi": [2, 50, 67, 136, 138, 146, 156, 159, 161, 165, 176, 178, 187, 196, 202, 203, 206, 209, 216, 224, 233, 236, 239, 243, 244, 252, 255, 267, 272, 284, 295, 310, 317, 318, 319, 325, 330, 340, 351, 357, 360, 361, 362, 363, 365, 371, 378, 380, 386, 392, 397, 401, 415, 422, 423, 425, 432, 444, 459, 469, 476, 481, 503, 504, 512, 513, 518, 522, 523, 527, 528, 530, 549, 557, 558, 559, 561, 563, 565, 566, 567, 569, 572, 573, 575, 577, 618, 639, 641, 651, 654, 655, 660, 661, 665, 666, 668, 669, 670, 671, 674, 676, 680, 681, 682, 683, 684, 689, 692, 698, 711, 721, 728, 742, 748, 750, 791, 807, 808, 822, 830, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 859, 860, 862, 868, 869, 870, 873, 879, 892, 896, 907, 908, 912, 914, 917, 920, 921, 922, 924, 925, 926, 928, 932, 938, 941, 944, 998, 1010, 1012, 1016, 1019, 1023, 1028, 1029, 1030, 1031, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1056, 1057, 1058], "multi_class": [209, 284, 325, 618, 666, 667, 796, 912, 928, 1005, 1010, 1024, 1040, 1044, 1048, 1053, 1055, 1058], "multi_confus": 762, "multi_label": [928, 930], "multi_layer_regressor": 422, "multi_output": [392, 932, 938, 997], "multi_target_forest": 1010, "multialign": 287, "multiarch": 391, "multiclass": [2, 31, 63, 66, 143, 196, 209, 233, 245, 252, 254, 257, 267, 272, 280, 282, 285, 295, 314, 343, 354, 378, 379, 385, 386, 388, 397, 406, 415, 422, 444, 459, 469, 496, 504, 512, 565, 567, 569, 572, 575, 576, 602, 610, 618, 639, 640, 641, 666, 667, 674, 676, 681, 682, 683, 684, 710, 714, 716, 737, 738, 742, 743, 746, 751, 762, 791, 792, 795, 796, 797, 802, 808, 809, 811, 812, 813, 814, 822, 824, 826, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 879, 893, 912, 914, 917, 920, 922, 970, 971, 972, 1003, 1005, 1019, 1020, 1024, 1025, 1030, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1055, 1056, 1057], "multicollinear": [144, 145, 151, 187, 188, 192, 281, 338, 418, 508, 572, 642, 663, 838, 1005, 1017, 1030], "multicor": [1052, 1053], "multidimension": [2, 418, 696, 698, 700, 702, 1006, 1012], "multigrid": 469, "multiindex": 1054, "multilabel": [2, 30, 31, 117, 119, 187, 243, 282, 293, 294, 378, 385, 386, 397, 410, 489, 494, 504, 505, 516, 517, 523, 531, 549, 565, 572, 575, 666, 682, 683, 711, 715, 721, 734, 737, 738, 742, 743, 746, 747, 762, 764, 791, 792, 795, 796, 802, 804, 838, 841, 843, 845, 869, 876, 879, 883, 885, 896, 917, 920, 922, 930, 944, 970, 971, 972, 1020, 1030, 1031, 1035, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058], "multilabel_": [841, 1045], "multilabel_confusion_matrix": [2, 721, 737, 738, 746, 792, 795, 1009, 1049], "multilabelbinar": [2, 397, 841, 876, 885, 1010, 1043, 1045, 1046, 1048, 1049], "multilay": [395, 1007], "multilearn": 1028, "multimetr": [719, 998, 1050, 1055, 1059], "multimetric_": [808, 811, 812, 822], "multimod": 244, "multinomi": [2, 47, 66, 187, 196, 208, 210, 226, 232, 252, 270, 284, 313, 354, 378, 379, 383, 420, 422, 504, 520, 531, 559, 561, 567, 569, 639, 666, 667, 749, 838, 841, 847, 848, 849, 850, 851, 892, 941, 1009, 1025, 1030, 1031, 1035, 1040, 1044, 1046, 1047, 1048, 1053, 1054, 1058], "multinomialdevi": 1051, "multinomialhmm": 1040, "multinomialnb": [2, 47, 372, 378, 423, 847, 848, 849, 850, 1011, 1042, 1044, 1047, 1048, 1052, 1053, 1055], "multiouput": 1050, "multioutput": [2, 41, 157, 284, 295, 397, 406, 438, 472, 489, 490, 491, 559, 562, 564, 565, 566, 568, 570, 572, 573, 576, 578, 619, 640, 641, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 729, 731, 736, 753, 754, 756, 758, 759, 761, 793, 796, 798, 799, 833, 841, 843, 844, 845, 846, 855, 863, 870, 879, 913, 915, 918, 920, 921, 922, 923, 944, 971, 972, 1009, 1030, 1031, 1035, 1040, 1041, 1042, 1046, 1047, 1053, 1054, 1059], "multioutput_arrai": 383, "multioutputclassifi": [2, 406, 796, 841, 843, 845, 1009, 1047, 1049, 1050, 1051, 1052, 1056, 1057], "multioutputregressor": [2, 157, 406, 438, 472, 489, 490, 491, 562, 564, 566, 568, 570, 573, 576, 578, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 844, 846, 855, 863, 870, 913, 915, 918, 921, 923, 1046, 1047, 1049, 1051, 1052, 1056, 1057], "multipl": [2, 25, 52, 81, 103, 106, 121, 132, 137, 143, 145, 146, 148, 168, 187, 190, 211, 249, 269, 275, 280, 283, 287, 293, 295, 298, 325, 331, 349, 370, 371, 372, 377, 379, 380, 383, 385, 386, 387, 388, 395, 397, 409, 415, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 451, 467, 471, 473, 474, 476, 481, 495, 498, 500, 503, 504, 505, 511, 512, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 559, 561, 562, 563, 564, 567, 568, 569, 570, 571, 589, 607, 615, 616, 618, 619, 635, 640, 642, 647, 648, 649, 650, 654, 655, 658, 660, 661, 662, 665, 668, 669, 670, 671, 674, 675, 676, 679, 681, 684, 686, 687, 697, 698, 700, 701, 702, 719, 729, 731, 736, 753, 754, 756, 758, 759, 761, 793, 796, 798, 799, 801, 805, 806, 808, 810, 811, 812, 813, 814, 820, 822, 823, 824, 825, 826, 827, 828, 834, 835, 836, 838, 842, 843, 844, 845, 846, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 874, 877, 889, 893, 901, 904, 905, 912, 913, 914, 917, 934, 950, 955, 956, 979, 982, 1001, 1004, 1005, 1006, 1010, 1011, 1012, 1016, 1017, 1022, 1023, 1025, 1028, 1029, 1030, 1040, 1041, 1043, 1046, 1047, 1050, 1051, 1052, 1053, 1055, 1056, 1057], "multipleloc": [237, 301], "multiplex": 1025, "multipli": [190, 221, 235, 275, 365, 370, 392, 397, 420, 422, 423, 428, 471, 482, 523, 546, 548, 549, 555, 565, 569, 572, 654, 656, 660, 662, 666, 667, 668, 670, 676, 677, 678, 680, 684, 685, 686, 688, 694, 695, 697, 701, 772, 914, 917, 920, 922, 944, 984, 985, 986, 998, 1001, 1005, 1009, 1023, 1051], "multiprocess": [395, 397, 974, 1012, 1040, 1048, 1054], "multirespons": 1005, "multiscal": 469, "multisurfac": [172, 380], "multitarget": 392, "multitask": [295, 423, 1010], "multitaskelasticnet": [2, 654, 655, 660, 669, 670, 671, 689, 1005, 1010, 1040, 1047, 1048, 1051, 1053], "multitaskelasticnetcv": [2, 406, 654, 655, 660, 668, 670, 671, 689, 1005, 1010, 1043, 1050, 1051, 1053, 1057], "multitasklasso": [2, 211, 660, 668, 671, 1005, 1010, 1040, 1048, 1051, 1053], "multitasklassocv": [2, 406, 669, 670, 1010, 1043, 1050, 1051, 1053, 1057], "multithread": [370, 415, 782, 786, 912, 913, 914, 915, 916, 917, 918], "multivari": [2, 123, 190, 375, 417, 420, 423, 480, 524, 525, 526, 635, 636, 637, 638, 657, 679, 686, 687, 847, 848, 849, 850, 851, 1003, 1005, 1008, 1011, 1028, 1035], "multivariate_norm": [115, 118, 260, 428, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488], "multiwai": 1025, "muma": 114, "mungui": 1053, "munoz": [1046, 1052], "muoki": 1052, "murad": 1043, "murashkin": 1044, "murata": [1053, 1054], "murder": 357, "murezzda": 1056, "murmurhash": 392, "murmurhash3": [2, 423, 590, 597, 973], "murmurhash3_32": [2, 392], "murmurhash3_x86_32": [392, 973], "murphi": [413, 651, 1002], "murrai": [1046, 1047], "music": 1033, "must": [90, 190, 191, 193, 199, 202, 234, 235, 244, 255, 270, 302, 317, 322, 357, 366, 378, 382, 383, 384, 385, 387, 389, 391, 397, 398, 406, 411, 413, 415, 416, 419, 420, 422, 423, 424, 425, 426, 436, 445, 448, 451, 452, 453, 454, 456, 457, 458, 462, 464, 466, 468, 469, 471, 473, 474, 476, 481, 494, 516, 517, 520, 531, 539, 545, 546, 547, 548, 549, 551, 552, 555, 561, 562, 567, 568, 569, 570, 575, 576, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 619, 625, 628, 635, 636, 637, 638, 639, 640, 641, 646, 650, 651, 656, 657, 660, 666, 667, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 690, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 707, 711, 714, 717, 743, 754, 772, 779, 782, 786, 789, 796, 800, 801, 802, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 817, 818, 820, 822, 823, 824, 826, 827, 829, 833, 836, 838, 839, 847, 848, 849, 850, 851, 854, 855, 856, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 872, 875, 876, 877, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 912, 913, 914, 915, 916, 917, 918, 919, 925, 983, 992, 994, 997, 998, 999, 1005, 1006, 1007, 1009, 1012, 1013, 1015, 1016, 1023, 1024, 1025, 1040, 1043, 1047, 1051, 1053, 1054, 1057], "mutat": [366, 997, 1048], "mutual": [2, 72, 73, 84, 90, 93, 166, 187, 397, 422, 424, 453, 600, 603, 604, 607, 608, 614, 615, 616, 617, 712, 713, 723, 763, 765, 794, 803, 810, 825, 828, 998, 1005, 1009, 1010, 1030, 1040, 1046, 1056], "mutual_info_classif": [2, 106, 424, 600, 603, 604, 607, 608, 1046, 1052, 1055, 1058], "mutual_info_regress": [2, 167, 329, 424, 600, 603, 604, 607, 608, 617, 1046, 1047, 1052, 1054, 1055, 1056, 1058], "mutual_info_scor": [2, 72, 415, 712, 1009, 1048, 1051, 1052], "mu\u00f1oz": [1053, 1055], "mwestt": 1049, "my": [377, 383, 388, 391, 504], "my_custom_loss_func": 1009, "my_data": 388, "my_dataset": 494, "my_estim": [385, 416], "my_extra_param": 385, "my_featur": 383, "my_fil": 389, "my_func": [384, 389], "my_g": [427, 541], "my_group": [251, 406], "my_kernel": [342, 1024], "my_memb": [96, 98, 99], "my_other_weight": [251, 406], "my_pipelin": 1049, "my_script": 371, "my_test_script": 391, "my_token": 423, "my_weight": [251, 406], "myatt": [1049, 1050], "mycach": [516, 517], "mycluster": 433, "myenugula": 1058, "myer": [1043, 1047], "myestim": [385, 429, 431, 432, 434, 435, 436, 437, 438], "myestimator0": 431, "myestimator1": 431, "mymultioutputestim": 385, "mypi": [383, 387, 401, 408, 1051], "myself": 383, "mysvmlightfil": 516, "mytransform": [385, 439], "m\u00e9hault": [1048, 1049], "m\u00f6rtberg": 1046, "m\u00fcller": [0, 398, 420, 543, 878, 1013, 1019, 1023, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1054], "n": [2, 43, 44, 46, 47, 49, 50, 54, 55, 57, 68, 69, 72, 74, 75, 93, 104, 109, 113, 117, 121, 123, 126, 128, 130, 132, 133, 137, 139, 140, 144, 160, 167, 170, 172, 174, 178, 183, 191, 193, 198, 202, 213, 217, 218, 221, 232, 234, 235, 237, 247, 248, 249, 252, 260, 262, 263, 273, 275, 278, 280, 281, 282, 284, 285, 296, 299, 301, 314, 318, 320, 321, 327, 330, 332, 336, 350, 353, 365, 370, 377, 380, 381, 383, 387, 389, 391, 392, 397, 401, 402, 406, 412, 413, 415, 418, 419, 420, 421, 422, 423, 425, 426, 451, 452, 454, 455, 457, 476, 478, 481, 485, 496, 523, 524, 525, 526, 531, 536, 546, 548, 549, 555, 565, 566, 567, 568, 571, 572, 573, 574, 596, 597, 598, 599, 615, 616, 622, 635, 657, 679, 687, 700, 704, 707, 714, 715, 763, 813, 816, 818, 823, 824, 827, 848, 852, 853, 857, 877, 904, 906, 920, 921, 922, 923, 935, 954, 959, 960, 983, 987, 988, 998, 1001, 1003, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1021, 1023, 1024, 1025, 1040, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058], "n1": 126, "n2": 126, "n4": 126, "n_": [113, 114, 193, 275, 328, 415, 420, 422, 654, 660, 693, 704, 1001, 1005, 1009, 1011, 1012, 1016, 1019, 1021, 1024, 1025], "n_alpha": [222, 479, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 681, 683, 689, 690, 691, 692, 1043], "n_atom": 1041, "n_averag": 69, "n_bar": 186, "n_batch_iter_": 544, "n_best": 458, "n_bin": [61, 62, 64, 88, 217, 235, 317, 319, 323, 445, 446, 877, 1019], "n_bins_": 877, "n_bootstrap": [278, 1041], "n_bulk_repeat": 49, "n_byte": 248, "n_c": [415, 667], "n_call": [852, 853], "n_candid": [811, 812, 998], "n_candidates_": [287, 811, 812, 998], "n_candidates_0": 998, "n_candidates_i": 998, "n_categori": [323, 848, 886, 1019], "n_categorical_featur": [147, 569, 570, 640, 641], "n_categories_": 848, "n_center": [77, 520], "n_channel": [591, 592, 595], "n_class": [2, 45, 72, 121, 137, 139, 144, 146, 169, 171, 232, 238, 249, 252, 262, 282, 283, 284, 305, 306, 325, 362, 365, 366, 379, 383, 385, 397, 422, 444, 495, 496, 510, 523, 527, 531, 557, 558, 559, 561, 563, 565, 567, 569, 572, 575, 577, 601, 602, 612, 618, 642, 647, 666, 667, 674, 675, 676, 682, 683, 684, 685, 705, 715, 724, 726, 730, 743, 746, 749, 762, 796, 802, 807, 808, 811, 812, 822, 830, 833, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 854, 859, 861, 862, 869, 872, 879, 880, 883, 886, 893, 896, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 922, 924, 925, 943, 944, 1005, 1009, 1010, 1013, 1020, 1023, 1024, 1045, 1046, 1047, 1049, 1050, 1051, 1057], "n_classes_": [559, 561, 563, 565, 567, 572, 618, 840, 841, 920, 922, 1041, 1050, 1052], "n_classes_pr": [722, 763], "n_classes_tru": [722, 763], "n_classifi": [66, 577, 578], "n_cluster": [2, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 123, 329, 358, 383, 397, 415, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 466, 467, 468, 469, 470, 519, 521, 718, 800, 801, 1040, 1044, 1046, 1048, 1049, 1051, 1054], "n_clusters_": [73, 84, 90, 98, 448, 452], "n_clusters_list": 78, "n_clusters_per_class": [67, 141, 169, 171, 272, 306, 311, 318, 379, 388, 523, 613, 615], "n_clusters_rang": 72, "n_clusters_tru": 96, "n_col": [45, 57, 123, 253, 430, 458, 460, 519, 521, 640], "n_color": 83, "n_column": [412, 458, 460], "n_column_clust": [458, 460, 521], "n_comp": [133, 195], "n_comparison": 275, "n_compon": [43, 44, 45, 51, 54, 79, 87, 92, 93, 94, 104, 106, 107, 108, 117, 118, 120, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 156, 195, 216, 237, 238, 239, 240, 241, 242, 244, 248, 249, 252, 256, 260, 261, 262, 263, 264, 265, 266, 274, 300, 305, 314, 321, 327, 329, 332, 333, 358, 385, 388, 389, 397, 416, 418, 420, 427, 458, 459, 469, 471, 489, 490, 491, 492, 534, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 647, 648, 649, 650, 696, 697, 698, 699, 700, 701, 702, 703, 704, 805, 806, 861, 868, 871, 904, 905, 906, 956, 1001, 1003, 1006, 1008, 1012, 1041, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1057, 1058, 1059], "n_components_": [107, 130, 397, 448, 452, 542, 546, 547, 548, 549, 550, 551, 904, 905, 1049, 1051], "n_components_fa": 130, "n_components_pca": 130, "n_components_pca_ml": 130, "n_components_rang": 248, "n_connected_compon": 470, "n_connected_components_": [448, 452, 1049], "n_core": 143, "n_core_sampl": [426, 451], "n_cpu": [371, 397], "n_cv": [419, 444], "n_cv_alpha": [659, 663], "n_cv_fold": [147, 322, 814, 831, 836, 839], "n_digit": 93, "n_dim": [485, 535, 537, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 1057], "n_dimens": [805, 806], "n_dimensions_of_x": [914, 915, 916, 917, 918], "n_dir": 53, "n_e": 415, "n_element": [425, 625], "n_encoded_featur": [885, 886], "n_error": 303, "n_error_outli": [231, 302, 345], "n_error_outliers_sgd": 231, "n_error_test": [231, 302, 345], "n_error_test_sgd": 231, "n_error_train": [231, 345], "n_error_train_sgd": 231, "n_estim": [46, 49, 63, 67, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 156, 157, 160, 185, 193, 238, 253, 257, 262, 272, 287, 318, 325, 327, 370, 396, 397, 422, 424, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 640, 811, 812, 998, 1015, 1016, 1037, 1048, 1056], "n_estimators_": [148, 567, 568], "n_estimators_ful": 148, "n_exampl": 47, "n_face": 253, "n_featur": [45, 47, 54, 62, 63, 64, 66, 67, 68, 69, 70, 75, 87, 93, 95, 96, 111, 112, 113, 114, 115, 121, 123, 130, 137, 139, 141, 143, 144, 169, 171, 172, 185, 186, 195, 197, 200, 202, 203, 211, 212, 216, 220, 221, 232, 234, 238, 244, 248, 249, 251, 260, 265, 272, 278, 282, 284, 285, 287, 288, 306, 311, 318, 325, 326, 327, 329, 331, 332, 333, 353, 357, 358, 359, 366, 370, 376, 377, 379, 383, 385, 388, 395, 396, 397, 406, 415, 417, 418, 420, 422, 423, 426, 427, 428, 430, 432, 433, 434, 437, 438, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 466, 467, 468, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 497, 498, 500, 502, 509, 512, 516, 517, 520, 523, 524, 527, 529, 531, 532, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 708, 709, 710, 718, 733, 766, 767, 768, 769, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 930, 956, 983, 984, 985, 986, 987, 988, 989, 990, 991, 997, 1001, 1005, 1010, 1012, 1013, 1019, 1023, 1024, 1025, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "n_feature_influ": 49, "n_features_": [171, 601, 602, 1053, 1055], "n_features_a": 861, "n_features_b": 861, "n_features_in_": [385, 397, 436, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 635, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 997, 1051, 1053, 1055, 1058], "n_features_max": 69, "n_features_missing_ind": 638, "n_features_new": [439, 449, 452, 540, 542, 544, 545, 547, 550, 551, 557, 575, 577, 578, 590, 591, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 636, 638, 643, 646, 647, 648, 649, 650, 861, 868, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 904, 905], "n_features_opt": 106, "n_features_out": 638, "n_features_out_": 891, "n_features_rang": 69, "n_features_to_comput": 1048, "n_features_to_select": [170, 172, 327, 424, 601, 610, 1052, 1054], "n_features_to_select_": 610, "n_features_with_miss": 637, "n_features_with_missing_": 635, "n_fold": [163, 655, 659, 661, 663, 667, 669, 671, 1041, 1042, 1046], "n_gram_rang": 1040, "n_group": [419, 817, 1046], "n_i": [1011, 1019], "n_imag": 273, "n_index": [854, 855, 856, 858, 860, 862, 863], "n_inform": [62, 64, 67, 141, 144, 169, 171, 197, 202, 220, 221, 272, 278, 288, 306, 311, 318, 325, 353, 379, 388, 523, 532, 561, 562, 563, 564, 572, 573, 613, 614, 615, 616, 617, 654, 655, 660, 668, 669, 670, 673, 689, 690, 691, 842, 930, 1010, 1048], "n_init": [57, 77, 78, 80, 85, 92, 93, 96, 99, 237, 238, 239, 240, 326, 329, 358, 415, 450, 454, 456, 458, 459, 460, 466, 469, 698, 702, 805, 806, 1040, 1048, 1054, 1055, 1056], "n_init_rang": 96, "n_inlier": 244, "n_input_features_": 1053, "n_instanc": [49, 641], "n_iter": [45, 55, 105, 153, 174, 225, 276, 283, 296, 314, 348, 385, 389, 396, 427, 461, 485, 540, 541, 552, 553, 554, 555, 654, 655, 660, 661, 668, 669, 670, 671, 689, 690, 691, 692, 693, 694, 695, 700, 702, 811, 812, 820, 822, 868, 870, 955, 956, 998, 1023, 1041, 1046, 1047, 1048, 1052, 1054, 1055, 1056, 1058], "n_iter_": [43, 126, 153, 225, 263, 397, 447, 454, 455, 456, 478, 479, 489, 490, 491, 539, 540, 541, 544, 545, 546, 547, 548, 551, 569, 570, 635, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 687, 688, 698, 700, 805, 806, 861, 869, 870, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 1044, 1047, 1048, 1050, 1053, 1054, 1056], "n_iter_no_chang": [46, 143, 148, 153, 225, 328, 357, 388, 397, 422, 567, 568, 569, 570, 674, 675, 676, 684, 685, 686, 869, 870, 1023, 1048, 1051], "n_iter_search": 283, "n_iter_without_progress": [238, 700, 1045, 1046], "n_iterations_": [287, 811, 812], "n_iters_": 1046, "n_job": [52, 89, 106, 107, 143, 144, 145, 150, 151, 158, 171, 172, 185, 190, 191, 192, 193, 238, 240, 256, 269, 274, 276, 277, 279, 291, 293, 296, 325, 326, 327, 330, 353, 371, 383, 397, 422, 426, 444, 451, 453, 455, 457, 459, 462, 463, 464, 465, 468, 471, 474, 479, 539, 543, 544, 545, 547, 550, 551, 553, 554, 556, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 602, 610, 615, 616, 618, 640, 642, 647, 655, 659, 661, 663, 665, 666, 667, 669, 671, 673, 674, 676, 684, 687, 696, 697, 698, 699, 700, 701, 702, 782, 786, 789, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 871, 874, 907, 908, 974, 998, 1009, 1010, 1012, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1058], "n_k": [415, 558], "n_kernel": 620, "n_kernel_param": [618, 619], "n_knot": [43, 218, 328, 891, 1019, 1053], "n_l1_ratio": [655, 667, 669, 1043], "n_l1_ratios_": 667, "n_label": [51, 121, 252, 397, 494, 531, 721, 728, 734, 747, 748, 762, 764, 800, 801, 828, 1009, 1046, 1048], "n_labeled_point": [335, 336], "n_layer": [869, 870], "n_layers_": [869, 870], "n_leav": [470, 920, 921, 922, 923], "n_leaves_": [448, 452], "n_left": 571, "n_local_tri": 467, "n_m": 1025, "n_mask": 217, "n_missing_featur": 637, "n_missing_sampl": 186, "n_nearest_featur": [186, 635], "n_neighbor": [51, 79, 97, 102, 159, 185, 237, 238, 239, 241, 244, 254, 296, 298, 299, 302, 303, 304, 305, 308, 321, 325, 327, 357, 422, 459, 610, 615, 616, 636, 696, 697, 699, 701, 703, 704, 854, 855, 856, 858, 860, 861, 865, 907, 908, 999, 1006, 1012, 1015, 1022, 1047, 1054, 1056, 1057], "n_neighbors_": [699, 858], "n_neighbors_list": [254, 298], "n_neighbour": 1054, "n_node": [365, 448, 452, 470, 565, 566, 572, 573, 574, 920, 921, 922, 923, 962], "n_node_sampl": 365, "n_nodes_ptr": [565, 566, 572, 573, 574], "n_noise_": 84, "n_nonzero": 132, "n_nonzero_coef": [216, 534, 539, 545, 550, 553, 554, 556, 658, 672, 693, 694, 1058], "n_nonzero_coefs_": [672, 673, 1058], "n_nonzero_column": 359, "n_numerical_featur": 147, "n_order": 198, "n_original_featur": [600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611], "n_out": 574, "n_outlier": [113, 114, 154, 220, 244, 303], "n_output": [365, 397, 422, 432, 438, 439, 444, 449, 452, 472, 476, 489, 490, 491, 540, 542, 544, 545, 547, 550, 551, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 590, 591, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 636, 638, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 684, 686, 687, 729, 731, 736, 753, 754, 756, 758, 759, 761, 762, 793, 796, 798, 799, 807, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 859, 861, 862, 863, 868, 869, 870, 871, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 904, 905, 907, 908, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 944, 979, 1009, 1010, 1025, 1047, 1050], "n_output_featur": 636, "n_output_features_": 887, "n_outputs_": [559, 560, 565, 566, 572, 573, 574, 869, 870, 920, 921, 922, 923], "n_oversampl": [458, 460, 549, 552, 956, 1054], "n_pack": [2, 959, 960], "n_patch": [591, 592, 595], "n_permut": [281, 419, 837], "n_pixel": [253, 273], "n_point": [270, 852, 853], "n_points_per_clust": 100, "n_popul": [392, 977], "n_possible_iterations_": [811, 812], "n_predict": 49, "n_pt": 53, "n_q": 415, "n_quantil": [109, 191, 320, 889, 901, 1049], "n_quantiles_": 889, "n_queri": [696, 854, 855, 856, 858, 860, 862, 863, 864], "n_random_featur": 206, "n_redund": [62, 64, 67, 144, 169, 171, 272, 278, 306, 311, 318, 379, 388, 444, 523, 561, 563, 572, 842], "n_refin": 479, "n_region": 81, "n_regions_plu": 81, "n_regressor": 578, "n_relevant_featur": 211, "n_remaining_candidates_": [811, 812], "n_repeat": [140, 144, 151, 171, 190, 192, 193, 275, 289, 293, 325, 419, 523, 642, 823, 824, 1017], "n_required_iterations_": [811, 812], "n_resourc": 998, "n_resources_": [287, 811, 812, 998], "n_resources_0": 998, "n_resources_i": 998, "n_restarts_optim": [180, 181, 425, 618, 619], "n_retri": [495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 1054, 1058], "n_row": [45, 57, 123, 412, 430, 458, 460, 519, 521], "n_row_clust": [458, 460, 521], "n_run": [72, 96, 195, 358], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 83, 84, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 104, 109, 111, 112, 113, 114, 115, 118, 121, 123, 124, 128, 130, 137, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 154, 155, 164, 165, 171, 172, 183, 185, 186, 189, 197, 199, 200, 202, 203, 204, 207, 209, 211, 212, 216, 217, 218, 220, 221, 225, 229, 232, 234, 235, 237, 238, 239, 240, 241, 242, 244, 248, 249, 251, 254, 261, 263, 264, 265, 266, 272, 273, 275, 278, 279, 282, 284, 285, 286, 287, 288, 290, 296, 306, 318, 319, 320, 323, 326, 327, 329, 331, 332, 333, 337, 344, 347, 348, 353, 357, 358, 366, 376, 380, 383, 385, 388, 392, 395, 396, 397, 406, 414, 415, 417, 418, 419, 420, 422, 426, 427, 428, 430, 432, 433, 434, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 502, 509, 512, 516, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 629, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 778, 779, 780, 781, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 928, 930, 943, 944, 956, 958, 960, 970, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 997, 998, 1001, 1005, 1009, 1010, 1012, 1013, 1019, 1020, 1021, 1023, 1024, 1025, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "n_samples1": 878, "n_samples2": 878, "n_samples_": 549, "n_samples_1": [348, 1024], "n_samples_2": [348, 1024], "n_samples_a": [800, 801], "n_samples_fit": [438, 472, 489, 490, 491, 562, 564, 566, 568, 570, 573, 576, 578, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 696, 845, 846, 854, 855, 856, 858, 860, 862, 863, 864, 870, 913, 915, 918, 921, 923], "n_samples_fit_": [296, 854, 855, 856, 858, 860, 862, 863, 864], "n_samples_i": [620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 782, 783, 784, 785, 786, 787, 788, 789], "n_samples_per_cent": 96, "n_samples_rang": [112, 248], "n_samples_seen": 892, "n_samples_seen_": [542, 881, 882, 892, 1048], "n_samples_test": [288, 914, 915, 916, 917, 918, 1012, 1019], "n_samples_train": [288, 914, 915, 916, 917, 918], "n_samples_transform": [296, 856, 864], "n_samples_x": [619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 782, 783, 784, 785, 786, 787, 788, 789], "n_seed": 468, "n_selected_featur": [600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611], "n_skips_": 1047, "n_skips_invalid_data_": 679, "n_skips_invalid_model_": 679, "n_skips_no_inliers_": 679, "n_spline": [43, 891], "n_split": [43, 52, 143, 149, 153, 185, 186, 190, 262, 270, 275, 277, 280, 285, 289, 293, 332, 338, 346, 353, 366, 419, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829, 835, 1046, 1048, 1058], "n_splits_": [808, 811, 812, 822], "n_steps_": [126, 456, 545, 546, 1053], "n_subpopulation_": 687, "n_subsampl": [687, 944], "n_subsets_of_featur": 602, "n_support_": [914, 915, 916, 917, 918, 1024, 1050], "n_support_vector": 46, "n_sv": [914, 915, 916, 917, 918, 1024, 1050], "n_svd_vec": [458, 460], "n_t": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923], "n_t_l": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923], "n_t_r": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923], "n_target": [397, 418, 489, 490, 491, 492, 532, 564, 619, 651, 654, 655, 658, 659, 660, 661, 662, 664, 665, 668, 669, 670, 671, 672, 673, 679, 680, 681, 682, 683, 689, 692, 693, 694, 695, 1010, 1052, 1054, 1056], "n_task": [211, 1005], "n_test": [47, 49, 69, 140, 275, 1040, 1043], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [643, 735, 790, 797], "n_tick": [814, 831, 836, 839], "n_top": 283, "n_top_word": 54, "n_topic": [388, 544, 1047], "n_tot": 707, "n_total_sampl": [335, 336], "n_train": [47, 49, 69, 140, 275, 1040, 1043], "n_train_po": 47, "n_transformed_featur": 872, "n_tree": 46, "n_trees_per_iter": 569, "n_trees_per_iteration_": [567, 568, 569, 570], "n_trials_": 679, "n_uncorrelated_featur": 281, "n_unequ": 707, "n_unique_categori": 322, "n_unique_label": [737, 738, 746, 791, 792, 795, 972], "n_unique_tick": [814, 836], "n_valu": [831, 839, 1048], "n_values_": 1048, "n_values_feature_j": 641, "n_x": [89, 593], "n_y": [89, 593, 1011, 1019], "n_z": 593, "na": [635, 636, 637, 638, 777, 786, 936, 938, 939, 1050, 1051, 1054, 1055, 1056, 1057], "nabarun": 1048, "nabla": 1013, "nabsolut": 223, "nacross": 289, "nada": 57, "nadeau": [275, 1048], "nadia": 1052, "nadim": 1053, "nadirhan": 1054, "nadya": 1046, "nagarajan": [653, 1005], "nagarjuna": [1047, 1048], "nagasaka": 1053, "naghshhnejad": [1050, 1051], "naipawat": [1054, 1055], "naiv": [2, 32, 64, 67, 156, 275, 277, 295, 357, 359, 378, 413, 422, 423, 444, 552, 847, 848, 849, 850, 851, 1003, 1004, 1012, 1017, 1031, 1035, 1040, 1041, 1042, 1043, 1048, 1050, 1053, 1055], "naive_bay": [2, 47, 61, 62, 64, 67, 156, 160, 276, 277, 357, 366, 372, 378, 422, 444, 577, 847, 848, 849, 850, 851, 873, 1003, 1010, 1011, 1041, 1042, 1044, 1045, 1046, 1047], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 372, "naivebayesna": 403, "naivelycalibratedlinearsvc": [62, 64], "najera": 1047, "najork": [734, 764, 1009], "naka": 1053, "nakamura": 1054, "nakano": [1047, 1048], "nalepa": 1047, "naman": 1057, "name": [2, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 80, 93, 97, 105, 107, 109, 115, 124, 129, 140, 141, 142, 143, 147, 150, 153, 158, 190, 191, 192, 206, 215, 217, 219, 221, 223, 224, 232, 234, 235, 237, 238, 244, 250, 251, 253, 254, 258, 262, 269, 270, 272, 273, 276, 278, 279, 282, 284, 285, 289, 293, 296, 304, 305, 311, 312, 318, 320, 322, 329, 330, 333, 339, 351, 357, 358, 359, 371, 372, 377, 378, 381, 383, 385, 387, 388, 390, 391, 397, 401, 406, 412, 415, 419, 422, 423, 425, 429, 431, 436, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 584, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 698, 699, 700, 705, 706, 707, 708, 710, 716, 717, 719, 721, 740, 741, 750, 787, 788, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 820, 822, 826, 830, 831, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 937, 938, 939, 942, 947, 948, 949, 951, 964, 965, 966, 968, 971, 978, 992, 996, 997, 998, 1003, 1005, 1009, 1010, 1016, 1017, 1019, 1025, 1029, 1040, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "name_to_color": 322, "named_estim": [575, 576, 577, 578], "named_estimators_": [575, 576, 577, 578, 1048, 1050], "named_step": [107, 118, 170, 416, 601, 602, 605, 872, 873, 912, 913, 1005, 1047, 1049], "named_transform": [871, 1055], "named_transformers_": 471, "namedtupl": [2, 625, 1056], "namespac": 411, "namiya": 1047, "nan": [2, 109, 147, 153, 185, 186, 190, 235, 254, 256, 258, 270, 278, 322, 325, 330, 331, 332, 333, 370, 375, 392, 397, 422, 453, 475, 504, 563, 564, 565, 569, 570, 572, 601, 602, 605, 611, 614, 617, 635, 636, 637, 638, 643, 720, 721, 722, 724, 729, 730, 731, 732, 736, 737, 738, 777, 786, 791, 792, 793, 795, 808, 811, 812, 814, 822, 831, 834, 835, 836, 839, 881, 882, 886, 888, 889, 892, 893, 897, 900, 901, 903, 929, 936, 937, 938, 939, 983, 998, 1009, 1019, 1025, 1035, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1059], "nan_euclidean": [636, 770, 786], "nan_euclidean_dist": [2, 325, 770, 999, 1050], "nandana": [1046, 1047, 1048], "nandiyawar": 1059, "nanshan": 1053, "nanta": 1043, "nanxin": 1048, "nanyang": 380, "naois": [1055, 1057], "naoki": [1042, 1052], "naoya": [1046, 1047, 1048, 1049], "naozin555": 1053, "napa": 322, "narasimhan": 859, "nardelli": 1043, "narendra": [1051, 1057], "narendramukherje": 1051, "narendran": 1048, "narin": [1047, 1048], "narinek": [1047, 1048], "narr": [383, 397, 666, 912, 917, 1040, 1041], "narrai": 602, "narrow": [52, 140, 150, 316, 318, 388, 852, 853], "nartayxd": 1054, "nasa": [104, 357, 358, 380], "nasdaq": 51, "naser": 1050, "nasir": 1048, "nass": 1055, "nastegiano": 1054, "nat": [615, 616, 712, 763, 765, 1054], "natasha": 1050, "natchiappan": [1053, 1054], "nate": [1046, 1047, 1053], "nath": [1048, 1059], "nathan": [543, 1048, 1052, 1055, 1058], "nathaniel": [1047, 1048, 1050], "nathansquan": 1054, "nati": 1055, "nation": [50, 113, 309, 378, 859], "nativ": [43, 153, 157, 179, 185, 269, 371, 378, 397, 409, 422, 504, 569, 570, 844, 845, 1005, 1009, 1010, 1028, 1050, 1052], "native_result": 147, "natl": [697, 701, 1006], "natur": [43, 64, 67, 143, 150, 181, 190, 191, 195, 202, 217, 218, 234, 235, 241, 254, 260, 266, 284, 295, 357, 383, 385, 397, 420, 422, 423, 426, 451, 457, 464, 559, 598, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 700, 712, 749, 763, 765, 854, 855, 856, 858, 860, 862, 863, 864, 891, 954, 1005, 1006, 1008, 1009, 1012, 1014, 1019, 1023, 1028, 1040, 1048], "naul": [1045, 1046], "nav": 51, "navarret": [1048, 1049, 1050], "navarro": 1055, "navi": [69, 104, 112, 127, 131, 132, 157, 197, 220, 228, 240, 261, 262, 263, 266, 282, 284, 301, 308, 337, 364], "navig": [391, 1042], "navin": 908, "navistar": 51, "navkal": 1048, "navractil": 1009, "navratil2007": 1009, "nawazish": [1055, 1056], "naziya": 1058, "nb": [47, 130, 156, 366, 849, 1011], "nbclaim": 235, "nber": 49, "nbr": [860, 1012], "nbrown": 1058, "nbrs_": [696, 697], "nbsp": [150, 206], "nbviewer": [51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 330, 332, 337, 365], "nbyte": [88, 248], "nca": [238, 304, 305, 306, 861, 1012], "nca_pip": 1012, "ncall": 389, "ncanip": 861, "nclass": 270, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 88, 92, 101, 123, 128, 133, 148, 191, 217, 218, 219, 225, 235, 237, 238, 247, 254, 269, 271, 277, 278, 286, 289, 296, 299, 312, 317, 318, 320, 321, 330, 352, 353, 358, 379], "ncorrect": 275, "ncsu": [172, 380], "ncv": [458, 460], "nd": [1053, 1057], "ndarrai": [88, 93, 120, 217, 258, 273, 274, 275, 383, 384, 385, 389, 390, 411, 423, 426, 427, 430, 431, 433, 436, 437, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 505, 508, 509, 510, 511, 512, 513, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 723, 726, 729, 730, 731, 732, 735, 736, 746, 753, 754, 756, 759, 761, 762, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 797, 798, 799, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 935, 936, 937, 938, 943, 944, 953, 955, 956, 957, 958, 963, 970, 972, 973, 977, 980, 981, 983, 984, 985, 986, 989, 994, 995, 997, 1009, 1024, 1029, 1043, 1047, 1050, 1051, 1054, 1055, 1056, 1057], "ndata": 281, "ndataset": [232, 318], "ndbscan": 100, "ndcg": [734, 764, 1009, 1047], "ndcg_score": [2, 734, 1009, 1047, 1050, 1055, 1056], "ndenumer": 229, "ndepend": 191, "ndim": [654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 938, 939], "ndimag": [53, 81, 82, 89, 314], "ndingwal": 1047, "ndirangu": [1050, 1054], "ne": [1009, 1012], "neal": [1005, 1053], "near_uniqu": 323, "nearbi": [415, 1012], "nearer": [2, 856, 864, 1012], "nearest": [2, 33, 51, 53, 67, 68, 74, 75, 85, 86, 89, 93, 96, 101, 106, 111, 115, 123, 126, 154, 164, 178, 186, 199, 208, 229, 233, 239, 242, 253, 254, 268, 278, 300, 302, 305, 306, 313, 314, 321, 342, 346, 351, 355, 375, 380, 392, 395, 397, 415, 421, 422, 426, 429, 439, 451, 453, 455, 457, 459, 464, 468, 469, 504, 510, 512, 615, 616, 635, 636, 638, 639, 643, 696, 697, 699, 700, 704, 800, 801, 808, 838, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 872, 873, 877, 892, 982, 1006, 1015, 1024, 1029, 1030, 1031, 1035, 1040, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1052], "nearest_neighbor": [79, 459, 699], "nearest_neighbor_algorithm": [854, 862, 863], "nearest_neighbors_algorithm": [855, 860], "nearestcentroid": [2, 307, 357, 1010, 1012, 1040, 1044, 1047, 1052, 1055], "nearestneighbor": [2, 296, 329, 401, 415, 426, 451, 453, 455, 468, 696, 697, 701, 854, 855, 856, 858, 862, 863, 864, 1012, 1040, 1044, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "nearli": [37, 62, 278, 378, 397, 772, 1009, 1012, 1021], "neat": 1040, "necess": [1006, 1012], "necessari": [46, 53, 141, 202, 217, 222, 260, 269, 275, 276, 282, 298, 350, 363, 370, 378, 381, 382, 383, 384, 385, 386, 387, 391, 395, 415, 417, 422, 459, 469, 495, 496, 498, 500, 501, 502, 503, 505, 542, 652, 653, 654, 660, 664, 665, 668, 669, 670, 671, 672, 673, 679, 681, 683, 684, 699, 703, 803, 875, 884, 895, 899, 905, 998, 1001, 1005, 1008, 1011, 1019, 1025, 1040, 1048], "necessarili": [43, 67, 106, 126, 190, 217, 225, 235, 249, 250, 261, 282, 318, 357, 358, 377, 409, 411, 413, 415, 422, 635, 860, 862, 863, 864, 1003, 1006, 1008, 1009], "need": [0, 30, 43, 48, 51, 68, 81, 83, 88, 90, 92, 115, 125, 135, 143, 147, 149, 150, 151, 153, 158, 172, 174, 179, 185, 186, 190, 204, 219, 234, 235, 238, 244, 247, 249, 251, 254, 255, 260, 261, 265, 266, 269, 273, 275, 277, 278, 280, 293, 295, 296, 298, 321, 325, 332, 338, 346, 357, 358, 366, 370, 371, 372, 377, 378, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 396, 397, 398, 400, 401, 406, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 431, 444, 448, 452, 456, 471, 472, 474, 511, 549, 559, 580, 590, 591, 596, 597, 598, 599, 635, 643, 646, 647, 648, 650, 657, 674, 676, 679, 684, 687, 700, 719, 728, 729, 730, 731, 732, 789, 793, 805, 806, 808, 811, 812, 822, 823, 824, 833, 841, 844, 852, 853, 869, 872, 875, 879, 884, 885, 889, 907, 914, 917, 929, 965, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1022, 1023, 1024, 1025, 1029, 1033, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "needl": [172, 380], "needs_proba": [750, 1049, 1057], "needs_threshold": [750, 1057], "neeraj": 1047, "neg": [2, 42, 43, 45, 61, 95, 109, 111, 118, 143, 149, 150, 155, 187, 189, 190, 196, 207, 213, 215, 217, 235, 264, 265, 269, 272, 275, 278, 282, 284, 285, 289, 296, 316, 320, 329, 333, 357, 389, 397, 398, 415, 419, 422, 423, 424, 426, 427, 438, 447, 451, 459, 472, 476, 489, 490, 491, 495, 539, 541, 543, 544, 545, 546, 548, 550, 552, 555, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 596, 599, 600, 603, 604, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 677, 678, 680, 681, 685, 686, 687, 688, 695, 706, 707, 712, 713, 720, 721, 723, 724, 726, 727, 729, 730, 731, 732, 735, 737, 738, 739, 743, 746, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 790, 791, 792, 793, 795, 798, 799, 801, 805, 806, 814, 831, 833, 838, 845, 846, 855, 858, 863, 870, 879, 888, 890, 891, 896, 900, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 939, 954, 956, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1023, 1024, 1030, 1034, 1035, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1059], "neg_": [814, 831, 1046], "neg_brier_scor": [1009, 1050], "neg_label": [269, 289, 879, 896], "neg_log_loss": [64, 269, 1009], "neg_lr": 278, "neg_lr_bas": 278, "neg_lr_base_std": 278, "neg_max_error": [1009, 1059], "neg_mean_absolute_error": [43, 158, 219, 1009], "neg_mean_absolute_percentage_error": [52, 147, 1009, 1017], "neg_mean_gamma_devi": 1009, "neg_mean_pinball_loss_05p_scor": 150, "neg_mean_pinball_loss_95p_scor": 150, "neg_mean_poisson_devi": 1009, "neg_mean_squared_error": [185, 186, 219, 250, 290, 332, 835, 1009, 1017, 1046], "neg_mean_squared_log_error": 1009, "neg_median_absolute_error": 1009, "neg_root_mean_squared_error": [43, 153, 322, 1009], "neg_root_mean_squared_log_error": 1009, "neg_root_mean_squared_log_error_scor": 1057, "negat": [397, 814, 831, 1009], "negate_scor": [250, 814, 831], "negative_class": 720, "negative_likelihood_ratio": [278, 720], "negative_linestyl": 244, "negative_loglik": 111, "negative_mahal_dist": 476, "negative_outlier_factor": 858, "negative_outlier_factor_": [254, 303, 858, 1015], "neglig": [190, 1012, 1043, 1057], "neigh": [789, 854, 855, 856, 858, 860, 862, 863, 864], "neigh_dist": [854, 855, 856, 858, 860, 862, 863, 864], "neigh_ind": [854, 855, 856, 858, 860, 862, 863, 864], "neighbor": [2, 51, 67, 74, 79, 82, 95, 101, 106, 153, 154, 156, 159, 164, 185, 186, 199, 238, 239, 241, 242, 244, 253, 254, 268, 278, 300, 301, 302, 303, 305, 306, 307, 309, 313, 327, 329, 330, 357, 375, 380, 392, 395, 397, 401, 415, 421, 422, 423, 426, 429, 439, 448, 451, 452, 453, 455, 457, 459, 464, 465, 468, 470, 504, 510, 512, 571, 578, 610, 615, 616, 635, 636, 639, 696, 697, 698, 699, 700, 701, 703, 704, 789, 808, 838, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 872, 873, 892, 908, 916, 982, 1010, 1015, 1029, 1030, 1031, 1034, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047], "neighbor_feat_idx": 635, "neighborhood": [2, 90, 115, 131, 164, 187, 237, 297, 298, 299, 307, 308, 380, 397, 415, 420, 426, 451, 457, 464, 510, 512, 523, 549, 557, 636, 639, 704, 838, 854, 855, 858, 860, 861, 862, 863, 864, 866, 872, 873, 892, 1006, 1015, 1030, 1031, 1035, 1049], "neighborhoodcomponentanalysi": 305, "neighborhoodcomponentsanalysi": [2, 238, 304, 305, 306, 1012, 1049, 1054, 1058], "neighbors_algorithm": [696, 697], "neighborsbas": [1052, 1055], "neighborsclassifi": [860, 862, 863, 864, 1040], "neighborsregressor": 1040, "neighbour": [453, 469, 700, 1014], "neighbourhood": [861, 1012], "neighbourhood_components_analysi": 861, "neil": 1052, "neill": 1052, "neither": [186, 190, 325, 357, 366, 395, 413, 444, 602, 636, 942, 1012, 1025], "nelder": 1005, "nell": [0, 404, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1052], "nelson": [0, 1046, 1047, 1052, 1058], "nemour": 51, "neo": 1048, "nep": 1050, "neptun": 1028, "neq": [415, 1009, 1011, 1019], "ness": [186, 235], "nest": [128, 137, 187, 206, 251, 267, 269, 270, 293, 332, 371, 389, 397, 401, 415, 419, 425, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 469, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 512, 527, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 813, 822, 830, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 1009, 1012, 1030, 1040, 1041, 1044, 1046, 1047, 1048, 1054], "nested_lin": 280, "nested_scor": 280, "nesterov": [312, 869, 870, 1013, 1056, 1057], "nesterovs_momentum": [312, 869, 870], "nestor": 1055, "net": [2, 25, 67, 187, 196, 202, 203, 206, 208, 211, 228, 288, 389, 419, 478, 479, 485, 509, 532, 565, 566, 567, 568, 572, 573, 574, 654, 655, 660, 665, 666, 667, 668, 669, 670, 671, 676, 684, 686, 689, 690, 692, 868, 920, 921, 922, 923, 998, 1009, 1014, 1023, 1030, 1031, 1033, 1035, 1040, 1045, 1049, 1050, 1052], "netbsd": 1040, "neto": [598, 738, 1058], "nettei": 1053, "network": [34, 45, 254, 313, 370, 371, 372, 377, 378, 397, 398, 409, 415, 420, 422, 427, 504, 541, 543, 575, 576, 704, 749, 869, 870, 1005, 1007, 1009, 1023, 1025, 1028, 1031, 1034, 1035, 1040, 1054, 1058], "networkx": [55, 392], "neural": [34, 44, 45, 67, 275, 313, 397, 409, 419, 420, 422, 427, 541, 543, 546, 548, 555, 575, 576, 647, 653, 704, 749, 805, 861, 868, 869, 870, 878, 1001, 1005, 1006, 1007, 1009, 1012, 1015, 1019, 1023, 1025, 1028, 1031, 1033, 1034, 1035, 1040, 1052], "neural_network": [2, 67, 187, 191, 255, 310, 311, 312, 313, 314, 372, 395, 868, 869, 870, 1010, 1013, 1030, 1042, 1057], "neuro": 1028, "neurodebian": 0, "neuroimag": [1027, 1033], "neuron": [869, 870, 1007, 1013], "neutral": 724, "nevalu": 158, "never": [143, 252, 333, 366, 383, 392, 395, 409, 414, 415, 416, 418, 419, 457, 464, 531, 563, 564, 565, 572, 872, 873, 997, 1001, 1019, 1050, 1053], "nevertheless": [43, 193, 422], "new": [2, 43, 46, 47, 49, 85, 91, 93, 95, 104, 105, 120, 130, 137, 139, 141, 142, 143, 148, 150, 153, 157, 158, 169, 172, 174, 180, 186, 192, 193, 217, 223, 231, 244, 251, 258, 269, 274, 277, 282, 295, 300, 302, 322, 326, 329, 332, 333, 336, 339, 345, 350, 366, 371, 372, 377, 378, 380, 381, 382, 385, 386, 387, 389, 391, 392, 396, 397, 398, 401, 409, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 440, 444, 445, 447, 449, 450, 452, 454, 455, 456, 459, 469, 470, 471, 479, 489, 490, 491, 512, 516, 517, 542, 549, 552, 563, 564, 565, 566, 571, 572, 573, 574, 589, 610, 638, 639, 643, 648, 649, 650, 653, 654, 660, 696, 697, 698, 705, 706, 708, 709, 710, 796, 805, 806, 807, 808, 811, 812, 814, 822, 830, 831, 842, 858, 881, 882, 887, 888, 889, 891, 892, 893, 900, 901, 909, 927, 936, 941, 978, 983, 998, 999, 1001, 1005, 1009, 1010, 1012, 1013, 1014, 1015, 1019, 1021, 1022, 1023, 1024, 1029, 1033, 1035, 1038, 1042, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "new_data": [300, 385], "new_valu": [575, 576, 577, 578], "newaxi": [51, 53, 57, 61, 77, 115, 132, 138, 175, 199, 207, 213, 218, 219, 220, 222, 223, 234, 247, 249, 290, 301, 308, 363, 364, 412, 544, 1005], "newei": 1048, "newer": [174, 382, 401, 420], "newgroups20": 232, "newli": [381, 396, 422, 470, 1016, 1046, 1047, 1055], "newsgroup": [2, 46, 54, 57, 248, 276, 339, 358, 359, 376, 412, 423, 495, 496, 1035], "newsgroups_test": 378, "newsgroups_train": [378, 495], "newsgroups_vector": 496, "newsl": [893, 1019], "newslett": 377, "newswir": 378, "newton": [217, 235, 314, 618, 656, 666, 667, 677, 688, 869, 870, 1005, 1044, 1045, 1047, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "newton_cg": 1050, "next": [46, 62, 95, 113, 146, 147, 151, 161, 181, 189, 193, 210, 214, 217, 245, 251, 253, 257, 258, 262, 270, 281, 295, 321, 322, 323, 327, 336, 357, 361, 365, 366, 381, 383, 385, 387, 403, 409, 412, 415, 416, 419, 422, 516, 517, 618, 642, 700, 706, 708, 710, 789, 805, 806, 838, 974, 998, 1002, 1008, 1009, 1019, 1033, 1037, 1040, 1053, 1054], "nezar": 1050, "nff": 707, "nfit": 336, "nfkd": [596, 597, 599, 1050], "nfor": 252, "nfrom": 179, "nft": 707, "ng": [415, 420, 699, 858, 1013, 1015, 1051], "ngiam": 1013, "ngo": 1052, "ngram_rang": [276, 339, 423, 596, 597, 599], "ngram_vector": 423, "ngroup": 270, "ngshya": 1051, "nguyen": [1050, 1051, 1054, 1055], "nguy\u1ec5n": 1055, "ni": [1046, 1051], "nic": 1053, "nice": [43, 102, 218, 251, 316, 370, 420], "nicer": 639, "nichol": 1044, "nichola": [1048, 1049, 1051], "nicholson": [1046, 1047, 1048], "nick": [172, 380, 1040, 1046, 1047, 1048, 1049], "nicki": 1054, "nickledav": 1046, "nicknam": 378, "nico": [1046, 1053], "nicol": 1047, "nicola": [0, 172, 404, 666, 1005, 1022, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "nicolashug": 1049, "nicolasservel": 1051, "nicolau": 1048, "nicula": [0, 123, 404, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "niculescu": [62, 64, 413, 444, 446], "nidhin": 1050, "niederb\u00fchl": 1048, "niederhut": [1048, 1050], "nielsen": [751, 1048], "nielsenmarkus11": [1047, 1048], "nigam": [847, 1011], "nigel": 1053, "night": 52, "nightli": [0, 371, 386, 387], "nightwalkx": 1056, "nihal": 1055, "nihar": 1048, "niket": 1054, "nikhil": 1054, "nikita": [1047, 1048, 1050, 1053, 1054, 1055], "nikla": [1050, 1051], "nikolai": [1043, 1044, 1045, 1046, 1048, 1049, 1054, 1056], "nil": 1052, "nilearn": 1028, "nilesh": 1048, "nilotp": [643, 645], "nima": 1055, "nima10khodaveisi": 1055, "ninertia": 99, "ningchi": 1046, "ninh": 195, "ninja": [381, 1033], "nip": [130, 380, 523, 549, 574, 649, 1009], "nipal": [418, 490, 491], "nipy_spectr": [51, 74, 81, 82, 86, 87, 95, 96, 129], "nirvan": [1048, 1052], "nishan": 1050, "nishihara": 1052, "nishu": 1056, "nist": [380, 1009], "nistir": 380, "nit": 383, "nithish": 1058, "nitinramvelraj": 1055, "nitish": 1047, "nitya": 1050, "niuk": 1056, "niyogi": 1006, "nizam": 1048, "nizhibitski": 1041, "nk": 704, "nkish": 1051, "nkmean": 79, "nl": [52, 389], "nl1_ratio": 208, "nlasso": 202, "nlathia": 1046, "nlearn": 312, "nlog": 180, "nlogn": 700, "nlp": [378, 420, 423, 847, 851, 1007, 1033], "nls_max_it": 1045, "nltk": [423, 1027, 1028], "nm": 370, "nmcd": 113, "nmd": 240, "nmean": 127, "nmf": [2, 11, 54, 106, 389, 423, 543, 546, 552, 555, 1034, 1035, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "nmf_estim": 123, "nmi": [72, 415, 725, 744, 745, 765], "nmixtur": 79, "nmle": 113, "nmse": [44, 290], "nmslib": 296, "nmslib_": 296, "nmslibtransform": 296, "nn": [253, 423, 703], "nn_candid": 287, "nn_compon": [248, 249], "nn_sampl": [248, 287], "nndsvd": [420, 546, 548, 555, 1049, 1052], "nndsvda": [54, 420, 546, 548, 555, 1049, 1052], "nndsvdar": [420, 546, 548, 555, 1049], "nneq": 707, "nnl": [212, 665], "nnlnr": [1055, 1056], "nnmf": [423, 1034, 1035, 1040], "nntp": [357, 378], "nnz": [203, 358, 378, 707], "no_chang": 909, "no_interact": [569, 570, 1055], "no_mathjax": 383, "no_structur": [79, 97], "no_valid": [931, 997], "no_weight": 230, "no_weights_handl": 230, "noa": [1051, 1057], "noah": 1005, "noc": 51, "noced": 666, "nodar": 1053, "node": [2, 51, 76, 147, 151, 202, 325, 331, 332, 361, 365, 391, 392, 415, 417, 420, 422, 448, 449, 452, 470, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 658, 662, 664, 690, 691, 700, 852, 853, 920, 921, 922, 923, 924, 926, 962, 1012, 1014, 1015, 1016, 1025, 1043, 1044, 1045, 1046, 1047, 1049, 1052, 1053, 1054, 1055, 1057, 1059], "node_count": [325, 361, 365, 920, 921, 922, 923], "node_depth": 365, "node_id": [365, 924, 926], "node_idx": 365, "node_ind": 365, "node_index": 365, "node_position_model": 51, "noel": [0, 405, 1040, 1041, 1042, 1043, 1044, 1052], "noelano": 1052, "nof": 154, "nogil": 384, "noinfo": 254, "noir": 322, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 84, 87, 89, 90, 96, 97, 102, 109, 118, 123, 124, 126, 128, 130, 138, 140, 150, 155, 156, 173, 174, 175, 179, 183, 187, 197, 199, 200, 202, 206, 207, 212, 215, 216, 219, 220, 221, 222, 234, 240, 242, 244, 246, 247, 250, 275, 283, 288, 290, 308, 311, 312, 318, 323, 326, 332, 352, 363, 364, 366, 379, 385, 388, 413, 415, 420, 422, 424, 425, 426, 451, 453, 459, 519, 521, 522, 523, 524, 525, 526, 530, 532, 533, 538, 540, 542, 549, 614, 615, 616, 617, 619, 621, 622, 623, 624, 625, 629, 630, 632, 633, 652, 653, 657, 658, 659, 661, 662, 663, 664, 671, 672, 673, 679, 687, 693, 694, 700, 889, 901, 907, 930, 1002, 1004, 1005, 1006, 1009, 1012, 1022, 1030, 1041, 1046, 1051, 1053, 1054], "noise_coef": 89, "noise_kernel": 179, "noise_level": [174, 179, 180, 620, 633], "noise_level_bound": [179, 180, 633], "noise_level_grid": 180, "noise_std": 181, "noise_vari": [204, 540, 664, 1005, 1054], "noise_variance_": [123, 204, 540, 542, 549, 664, 1047, 1054], "noise_variance_init": 540, "noiseless": [126, 1007], "noisi": [44, 69, 84, 90, 97, 124, 137, 168, 174, 180, 202, 216, 219, 240, 247, 266, 276, 282, 284, 285, 321, 363, 364, 366, 415, 423, 425, 426, 451, 453, 457, 529, 532, 956, 1004, 1006, 1012, 1024], "noisier": 1006, "noisili": 191, "noisy_circl": [79, 97], "noisy_moon": [79, 97], "noiz": 117, "nolan": 1057, "noll": [217, 235], "nomenclatur": [1005, 1046], "nomin": [191, 377, 397, 398, 422, 423, 589, 590, 724, 1019, 1029], "non": [0, 2, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 69, 70, 72, 84, 92, 97, 105, 109, 113, 115, 124, 125, 126, 128, 139, 147, 155, 156, 158, 168, 169, 171, 178, 180, 186, 187, 189, 190, 191, 192, 193, 196, 197, 202, 203, 205, 207, 210, 211, 213, 215, 216, 218, 219, 223, 231, 232, 233, 235, 240, 241, 245, 246, 247, 248, 250, 254, 260, 262, 266, 267, 268, 269, 270, 275, 284, 293, 296, 300, 302, 314, 316, 318, 320, 321, 326, 327, 328, 329, 331, 332, 339, 341, 343, 348, 349, 350, 353, 354, 357, 358, 359, 365, 366, 370, 371, 375, 378, 379, 383, 384, 385, 388, 389, 391, 392, 395, 397, 398, 409, 413, 415, 416, 419, 421, 422, 423, 424, 425, 427, 444, 448, 452, 453, 457, 459, 463, 469, 470, 471, 472, 474, 475, 495, 504, 505, 511, 512, 516, 534, 540, 543, 544, 546, 548, 552, 555, 557, 559, 560, 561, 565, 566, 567, 568, 569, 570, 572, 573, 574, 580, 596, 597, 599, 600, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 639, 643, 646, 651, 658, 660, 665, 666, 667, 668, 672, 673, 674, 675, 676, 677, 680, 684, 685, 686, 693, 694, 695, 696, 697, 698, 699, 700, 702, 706, 707, 710, 714, 715, 720, 723, 725, 727, 728, 734, 735, 736, 743, 745, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 786, 790, 793, 796, 797, 798, 799, 802, 805, 806, 808, 809, 813, 815, 816, 817, 818, 820, 826, 834, 838, 841, 860, 862, 863, 864, 867, 872, 873, 875, 876, 877, 880, 884, 885, 886, 887, 888, 889, 891, 892, 899, 900, 901, 902, 903, 905, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 937, 938, 939, 954, 956, 960, 963, 971, 998, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1030, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "non_determinist": [385, 931, 1054], "non_neg": [590, 1047], "non_negative_factor": [2, 1049, 1051, 1052, 1053, 1057], "non_nest": 280, "non_nested_scor": 280, "non_nested_scores_lin": 280, "non_noisy_label": 331, "non_outliers_mask": 316, "non_zero": [46, 51], "nonblasdotwarn": 1052, "none": [43, 47, 48, 49, 52, 55, 63, 66, 69, 74, 76, 77, 79, 87, 89, 90, 91, 97, 125, 128, 132, 141, 146, 147, 149, 152, 153, 165, 172, 175, 181, 182, 193, 197, 217, 218, 225, 228, 235, 237, 250, 251, 252, 254, 268, 270, 275, 276, 287, 301, 303, 307, 320, 323, 327, 328, 336, 339, 344, 346, 347, 350, 351, 352, 357, 358, 378, 379, 380, 383, 385, 390, 392, 397, 406, 409, 415, 419, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 711, 715, 716, 717, 719, 720, 721, 722, 724, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 742, 743, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 901, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 931, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 948, 950, 955, 956, 959, 960, 962, 963, 967, 968, 971, 974, 977, 979, 982, 983, 989, 992, 993, 995, 997, 998, 1005, 1009, 1019, 1022, 1025, 1035, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "nonecheck": 384, "nonetheless": [397, 1009], "nonexist": 640, "nonflavanoid": 380, "nonlinear": [290, 328, 652, 696, 697, 701, 704, 878, 1005, 1006, 1014, 1019], "nonmetr": [698, 702, 1006], "nonneg": [415, 420, 460, 546, 548, 555, 889], "nonner": 1051, "nono": 403, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 403, "nonoisomapisomapspectralembeddingspectr": 403, "nonojustlookingjust": 403, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 403, "nonolinearsvclinear": 403, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 403, "nonopredict": 403, "nonopredictingstructurepredict": 403, "nonosvcsvcensembleclassifiersensembl": 403, "nonosvr": 403, "nonotoughlucktough": 403, "nonoverlap": 380, "nonparametr": [424, 425, 615, 616], "nonzero": [55, 57, 132, 216, 248, 279, 359, 412, 426, 451, 531, 532, 539, 545, 550, 556, 596, 599, 693, 694, 707, 854, 855, 858, 860, 862, 863, 1009], "nonzero_coef": 1005, "noptic": 100, "noptimum": 180, "noqa": [80, 102, 120, 129, 150, 172, 185, 186, 191, 214, 237, 239, 286, 287, 327, 357, 387, 587, 588, 635, 811, 812, 998, 1049], "nor": [150, 278, 357, 366, 370, 388, 395, 413, 423, 444, 453, 602, 942, 1013, 1025, 1051], "norbert": [0, 373, 1042, 1052, 1053, 1054], "nordbi": 1057, "nore\u00f1a": 1053, "norm": [2, 51, 53, 54, 55, 66, 70, 75, 89, 126, 177, 180, 197, 202, 203, 208, 240, 260, 261, 262, 264, 266, 272, 276, 301, 316, 346, 358, 389, 392, 397, 415, 423, 424, 449, 450, 454, 466, 467, 471, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 496, 539, 542, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 597, 598, 599, 605, 651, 654, 655, 660, 661, 665, 666, 667, 668, 669, 670, 671, 672, 680, 682, 684, 686, 689, 692, 693, 694, 698, 700, 701, 702, 778, 849, 884, 899, 912, 914, 917, 990, 991, 1002, 1005, 1007, 1009, 1019, 1023, 1043, 1045, 1047, 1051], "norm1": 471, "norm2": 471, "norm_diag": 535, "norm_laplacian": 703, "norm_ord": [605, 1047], "norm_y_weight": 1052, "normal": [2, 25, 36, 44, 49, 51, 55, 57, 58, 63, 65, 70, 72, 75, 79, 81, 92, 96, 97, 101, 107, 109, 111, 112, 113, 117, 118, 124, 137, 138, 140, 143, 149, 150, 153, 154, 155, 167, 177, 180, 181, 186, 187, 189, 190, 196, 197, 198, 199, 200, 202, 207, 210, 212, 215, 219, 220, 221, 223, 231, 235, 240, 254, 260, 265, 266, 268, 269, 272, 275, 281, 301, 302, 305, 315, 317, 321, 326, 329, 332, 333, 338, 346, 358, 359, 366, 375, 378, 379, 380, 383, 388, 392, 396, 397, 411, 412, 413, 415, 416, 418, 421, 422, 423, 427, 447, 456, 458, 459, 460, 469, 471, 472, 482, 489, 490, 491, 496, 504, 520, 523, 527, 534, 535, 541, 544, 549, 550, 552, 556, 557, 560, 561, 562, 565, 566, 567, 568, 570, 571, 572, 573, 574, 587, 588, 590, 596, 597, 598, 599, 619, 633, 635, 647, 666, 667, 677, 680, 684, 688, 695, 699, 703, 705, 711, 712, 714, 726, 732, 734, 742, 744, 749, 753, 757, 758, 760, 763, 764, 765, 769, 778, 802, 803, 804, 811, 812, 838, 840, 849, 851, 857, 858, 861, 872, 873, 876, 877, 880, 882, 885, 886, 887, 888, 889, 890, 892, 897, 898, 900, 901, 902, 903, 907, 908, 920, 921, 922, 923, 955, 956, 960, 984, 985, 990, 991, 1001, 1003, 1005, 1006, 1007, 1008, 1011, 1015, 1020, 1022, 1024, 1025, 1030, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "normalis": [190, 619, 796], "normalization_": [647, 1001], "normalize_compon": [1048, 1050], "normalize_i": [179, 183, 425, 619, 1054], "normalized_discounted_cumulative_gain": 764, "normalized_mutual_info_scor": [2, 72, 415, 744, 763, 803, 1009, 1048, 1054], "normalized_stress": [237, 698, 702, 1006, 1055], "normalized_weight": 199, "norms_squar": 694, "north": [380, 415], "northern": 322, "northrop": 51, "northwestern": 666, "norvan": 1050, "nose": [380, 1043, 1047], "nosetest": 1042, "not_memb": 190, "notabl": [251, 316, 377, 397, 414, 504, 736, 885, 1006, 1008, 1012, 1044, 1047, 1054], "notarstefano": [1048, 1049], "notat": [154, 397, 416, 420, 423, 598, 720, 1005, 1009, 1049, 1056], "notch": 1033, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 88, 101, 105, 106, 113, 115, 117, 118, 121, 126, 140, 141, 143, 146, 150, 151, 155, 172, 174, 181, 185, 189, 190, 191, 192, 193, 195, 204, 206, 210, 217, 218, 219, 221, 225, 231, 233, 235, 237, 238, 239, 241, 244, 245, 247, 249, 250, 251, 252, 254, 261, 269, 270, 271, 275, 278, 281, 283, 289, 295, 296, 298, 302, 303, 312, 316, 317, 320, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 340, 346, 350, 357, 365, 370, 371, 377, 380, 381, 383, 384, 385, 387, 389, 390, 395, 396, 397, 401, 406, 409, 410, 413, 415, 417, 418, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 438, 440, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 494, 497, 504, 506, 517, 523, 527, 535, 538, 541, 542, 546, 547, 548, 549, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 605, 607, 608, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 638, 640, 641, 643, 644, 646, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 707, 708, 715, 716, 721, 723, 728, 729, 730, 731, 732, 736, 737, 738, 740, 742, 746, 749, 754, 762, 763, 766, 771, 772, 776, 778, 782, 786, 790, 791, 792, 793, 795, 796, 797, 800, 801, 802, 804, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 925, 928, 929, 931, 934, 944, 946, 955, 956, 968, 971, 983, 992, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1035, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 384, 385, 389, 416, 475, 910, 1025, 1027, 1028, 1029, 1051, 1054], "notes_neighbor": 1040, "notfittederror": [2, 135, 397, 861, 992, 1044, 1046, 1049, 1050, 1056, 1057], "noth": [57, 104, 333, 357, 358, 388, 550, 722, 875, 884, 939, 1019], "nothman": [0, 398, 404, 423, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058], "notic": [46, 52, 62, 63, 70, 88, 92, 113, 140, 142, 143, 150, 153, 171, 197, 202, 244, 257, 272, 273, 275, 276, 278, 284, 285, 296, 321, 350, 357, 358, 359, 366, 385, 388, 398, 414, 419, 422, 504, 549, 571, 998, 1008, 1009, 1015, 1037, 1053], "notifi": [2, 580, 581, 582, 1038, 1050], "notimplementederror": [561, 562, 899, 1047, 1057], "notin": 415, "notion": [284, 350, 358, 372, 395, 415, 420, 422, 1005, 1009], "notmatthancock": [1048, 1050], "noto": 1053, "notplancha": 1058, "noun": 397, "nouri": [370, 1041, 1043], "novak": 1043, "novarti": 51, "novaya": [1050, 1053], "novel": [231, 302, 345, 366, 413, 998], "novelti": [187, 231, 244, 254, 297, 303, 345, 858, 1030, 1031, 1034, 1035, 1040, 1048], "novemb": [172, 217, 235, 380, 387, 1045, 1046, 1048], "novic": 1042, "now": [43, 44, 46, 52, 55, 58, 88, 92, 105, 118, 128, 137, 138, 142, 144, 146, 147, 150, 151, 158, 161, 172, 174, 179, 180, 181, 186, 189, 190, 191, 192, 195, 197, 199, 203, 204, 206, 218, 219, 221, 241, 249, 251, 269, 271, 275, 278, 286, 287, 289, 293, 299, 321, 326, 327, 329, 330, 331, 332, 333, 337, 346, 357, 358, 359, 366, 370, 372, 378, 383, 384, 385, 389, 395, 396, 397, 401, 412, 415, 419, 420, 422, 423, 427, 435, 501, 516, 517, 520, 544, 557, 587, 588, 590, 635, 638, 657, 661, 666, 671, 692, 734, 764, 805, 806, 811, 812, 844, 859, 871, 872, 983, 999, 1005, 1009, 1015, 1018, 1019, 1024, 1025, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "nowadai": 383, "nozawa": [1055, 1056], "np": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 121, 124, 125, 126, 127, 129, 130, 132, 133, 138, 139, 140, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 165, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 197, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 242, 244, 247, 248, 249, 250, 251, 252, 253, 254, 256, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 295, 296, 300, 301, 302, 303, 305, 306, 307, 308, 309, 311, 314, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 370, 377, 378, 383, 385, 388, 389, 392, 395, 397, 406, 412, 415, 416, 419, 420, 421, 422, 423, 425, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 492, 501, 504, 505, 508, 512, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 565, 566, 567, 568, 569, 571, 572, 573, 574, 577, 578, 589, 590, 593, 594, 596, 597, 601, 602, 605, 609, 612, 614, 617, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 644, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 695, 699, 700, 702, 703, 707, 710, 711, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 751, 752, 756, 761, 762, 763, 764, 771, 777, 781, 786, 789, 790, 791, 792, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 834, 835, 836, 838, 839, 840, 841, 844, 845, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 862, 863, 864, 868, 869, 876, 877, 879, 880, 885, 886, 887, 888, 889, 891, 892, 893, 900, 901, 904, 905, 906, 907, 908, 909, 912, 914, 915, 917, 918, 920, 921, 922, 923, 929, 934, 935, 936, 937, 938, 939, 941, 943, 944, 954, 955, 956, 962, 963, 970, 971, 973, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 998, 999, 1004, 1005, 1007, 1009, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1023, 1024, 1025, 1041, 1043, 1046, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "npach": [1055, 1056], "npo": 240, "npolynomi": 43, "nprior": 260, "npropag": 79, "nqy18": 423, "nreceiv": 284, "nrow": [43, 44, 66, 68, 70, 92, 101, 107, 123, 153, 183, 191, 217, 219, 225, 235, 237, 238, 241, 254, 269, 277, 278, 296, 318, 320, 321, 330, 336, 352, 353, 379], "nsampl": [385, 805, 806], "nswdemand": 153, "nswprice": 153, "nt": 55, "nt_uri": 55, "ntest": 305, "ntf": 707, "nth": [282, 715, 1009], "nthe": [191, 273, 365], "ntime": [50, 286], "nto": [223, 284], "ntol": 172, "ntrain": 85, "ntree": 43, "ntrue": [45, 335, 336], "ntt": 707, "ntu": [195, 377, 494, 516, 517, 666], "ntwo": 379, "nu": [2, 46, 48, 50, 183, 231, 244, 345, 370, 422, 425, 627, 685, 914, 915, 916, 1015, 1023, 1024, 1051, 1055], "nuanc": 397, "nuc": 293, "nuclear": [172, 380], "nuclei": [172, 380], "nudge_dataset": 314, "nuff": 1047, "nugmanov": [1048, 1049], "nuisanc": 425, "nukariya": [1052, 1053], "null": [79, 105, 190, 191, 192, 269, 275, 281, 415, 419, 504, 656, 677, 688, 712, 739, 765, 803, 837, 1005, 1006, 1009, 1024, 1050], "null_count": 52, "nullabl": [635, 636, 637, 638, 1051, 1055], "nullformatt": [237, 239, 242, 296], "nullloc": 301, "num": [43, 51, 105, 172, 174, 179, 180, 181, 191, 192, 219, 282, 283, 329, 331, 332, 422, 504, 640], "num_col": 258, "num_cor": 389, "num_depend": 269, "num_featur": [1007, 1055], "num_linear_processor": 158, "num_missing_cel": 153, "num_pip": 258, "num_preprocess": 471, "num_proc": [246, 326], "num_sampl": [808, 822, 1055], "num_selector": 158, "num_sent": 104, "num_thread": 296, "num_tree_processor": 158, "num_trial": 280, "numba": [296, 1029], "number": [2, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 92, 96, 97, 98, 102, 104, 105, 106, 107, 109, 115, 117, 118, 121, 123, 125, 127, 128, 130, 137, 138, 140, 143, 145, 146, 148, 149, 150, 151, 154, 158, 160, 168, 169, 170, 172, 182, 183, 186, 187, 190, 191, 195, 202, 206, 216, 217, 218, 219, 224, 225, 231, 232, 233, 234, 235, 237, 244, 248, 252, 254, 255, 260, 261, 263, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 293, 296, 298, 302, 303, 316, 318, 319, 322, 325, 326, 327, 328, 329, 330, 331, 333, 339, 346, 351, 353, 358, 359, 361, 365, 366, 371, 372, 375, 377, 378, 379, 380, 381, 383, 386, 387, 389, 390, 391, 392, 395, 396, 397, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 589, 590, 591, 592, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 711, 712, 713, 715, 720, 721, 722, 724, 726, 728, 732, 736, 737, 738, 739, 742, 743, 746, 748, 760, 763, 782, 786, 789, 790, 791, 792, 793, 794, 795, 796, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 901, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 938, 939, 942, 955, 956, 959, 960, 977, 979, 982, 983, 998, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "number_norm": 57, "numbernormalizingvector": 57, "numer": [2, 43, 52, 57, 101, 105, 109, 145, 147, 158, 172, 179, 182, 191, 192, 206, 217, 235, 254, 256, 258, 282, 306, 322, 328, 332, 359, 377, 378, 380, 386, 388, 389, 395, 396, 397, 411, 415, 417, 422, 423, 424, 425, 427, 428, 447, 450, 454, 466, 478, 479, 482, 485, 496, 497, 498, 504, 508, 509, 510, 512, 513, 518, 539, 541, 543, 548, 549, 555, 569, 570, 575, 589, 598, 619, 625, 628, 635, 638, 640, 641, 654, 660, 662, 680, 695, 698, 702, 722, 786, 796, 802, 808, 811, 812, 814, 822, 831, 834, 835, 836, 839, 847, 848, 849, 850, 851, 869, 870, 875, 880, 885, 886, 893, 924, 925, 926, 938, 939, 955, 956, 998, 999, 1005, 1006, 1010, 1017, 1019, 1020, 1025, 1032, 1033, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "numeric_featur": [105, 329], "numeric_onli": 191, "numeric_preprocessor": 256, "numeric_transform": [105, 329], "numerical_column": [190, 192, 474], "numerical_columns_subset": 147, "numerical_featur": [191, 322], "numerical_pip": 192, "numerical_transform": 105, "numfocu": 0, "numpi": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 129, 130, 132, 133, 138, 139, 140, 144, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 163, 165, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 197, 198, 199, 200, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 242, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 295, 296, 300, 301, 302, 303, 305, 306, 307, 308, 309, 311, 314, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 370, 376, 377, 378, 381, 383, 384, 385, 386, 389, 391, 392, 395, 396, 397, 401, 406, 408, 409, 411, 412, 415, 416, 419, 420, 421, 422, 423, 428, 429, 430, 431, 432, 433, 436, 437, 438, 439, 446, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 492, 497, 501, 502, 504, 511, 514, 516, 517, 529, 535, 539, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 577, 578, 589, 590, 593, 594, 596, 597, 599, 609, 612, 626, 635, 636, 637, 638, 639, 640, 641, 651, 654, 655, 657, 660, 661, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 680, 684, 685, 686, 692, 695, 696, 699, 700, 701, 702, 703, 707, 710, 711, 714, 715, 717, 720, 722, 734, 735, 737, 738, 740, 742, 743, 746, 747, 762, 764, 781, 787, 789, 790, 791, 792, 795, 796, 797, 802, 804, 805, 806, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 835, 838, 839, 840, 841, 844, 845, 847, 848, 849, 850, 851, 852, 853, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 876, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 912, 914, 915, 917, 918, 920, 934, 935, 936, 937, 941, 943, 953, 954, 955, 956, 960, 962, 963, 970, 971, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 995, 998, 999, 1004, 1005, 1007, 1009, 1010, 1012, 1015, 1019, 1021, 1024, 1025, 1027, 1029, 1040, 1043, 1044, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "numpydoc": [383, 397, 401, 408], "nune": 1041, "nuniformli": 154, "nuniqu": 322, "nurseit": 1057, "nusvc": [2, 370, 444, 915, 1010, 1024, 1040, 1041, 1042, 1045, 1048, 1050, 1051, 1052, 1054], "nusvr": [2, 46, 370, 918, 1024, 1042, 1048, 1050, 1051, 1052, 1054, 1055], "nutshel": 1007, "nv": 51, "nvidia": [0, 395], "nvirginica": 284, "nwanna": 1055, "nweight": 160, "nwith": [72, 92, 96, 171, 358], "nx": [50, 309, 378, 506], "nxorabl": 1050, "ny": [50, 52, 274, 309, 378, 380, 506, 999, 1021], "nyc": [1027, 1033], "nymark": 1055, "nystroem": [2, 43, 185, 231, 244, 249, 375, 648, 649, 650, 685, 878, 917, 918, 1035, 1041, 1047, 1050, 1052, 1053, 1054], "nystroem_approx_svm": 249, "nystroem_scor": 249, "nystroem_tim": 249, "nystrom": [887, 1049, 1050], "nystr\u00f6m": [43, 1001], "nyu": [0, 861], "nz": 538, "nzw": 1048, "n\u00e1jera": [1044, 1045, 1046, 1047], "n\u00e1pole": 1053, "o": [0, 55, 57, 64, 66, 73, 84, 90, 95, 96, 98, 99, 115, 117, 125, 155, 172, 182, 204, 210, 215, 217, 232, 250, 260, 269, 275, 277, 284, 316, 317, 321, 326, 329, 332, 339, 350, 361, 370, 378, 380, 383, 391, 401, 415, 417, 420, 422, 426, 428, 451, 454, 455, 457, 480, 482, 507, 542, 612, 635, 674, 675, 700, 840, 868, 883, 924, 977, 1001, 1003, 1005, 1006, 1009, 1010, 1012, 1013, 1023, 1024, 1025, 1040, 1043, 1046, 1048, 1049, 1052, 1053, 1055, 1056, 1057], "oa": [2, 49, 65, 70, 110, 114, 115, 130, 152, 187, 305, 307, 417, 476, 477, 480, 481, 483, 484, 520, 557, 808, 1003, 1030], "oa_ms": 112, "oa_shrinkag": 112, "oak": 322, "oarc": 1005, "ob2019": 1009, "obaja": 1044, "obatin": 321, "obei": [397, 1007], "obj": [251, 409, 575, 576, 946, 965, 967, 968, 969, 974], "obj_func": [618, 619], "object": [2, 43, 50, 53, 54, 57, 63, 64, 79, 85, 97, 101, 104, 105, 126, 135, 153, 158, 163, 171, 179, 187, 191, 202, 213, 217, 233, 235, 243, 251, 255, 257, 258, 269, 273, 282, 284, 285, 287, 309, 322, 328, 329, 331, 332, 335, 358, 359, 366, 376, 377, 378, 383, 384, 386, 388, 389, 390, 392, 396, 397, 398, 406, 409, 415, 416, 417, 420, 423, 424, 425, 429, 431, 436, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708, 709, 710, 719, 726, 740, 741, 750, 766, 767, 789, 790, 797, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 927, 938, 939, 940, 941, 942, 945, 946, 950, 952, 961, 963, 964, 965, 966, 967, 968, 969, 971, 973, 974, 993, 994, 996, 1005, 1006, 1007, 1008, 1012, 1015, 1016, 1019, 1022, 1023, 1024, 1028, 1029, 1030, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "object_nam": [251, 965, 968], "obozinski": 420, "obscur": [1016, 1056], "observ": [2, 43, 44, 46, 48, 50, 52, 53, 58, 61, 64, 70, 72, 75, 78, 88, 97, 105, 111, 113, 114, 115, 124, 125, 128, 130, 137, 140, 141, 143, 144, 150, 153, 154, 157, 172, 174, 177, 179, 180, 181, 183, 190, 191, 192, 197, 198, 212, 213, 215, 217, 218, 219, 221, 231, 235, 241, 242, 247, 248, 254, 269, 271, 275, 277, 278, 282, 289, 296, 299, 302, 309, 321, 331, 333, 338, 345, 346, 350, 351, 357, 358, 359, 363, 364, 378, 380, 397, 401, 413, 415, 417, 418, 419, 420, 421, 424, 425, 448, 450, 452, 453, 454, 456, 466, 467, 476, 477, 478, 479, 480, 481, 482, 483, 532, 540, 559, 560, 571, 618, 619, 654, 660, 665, 709, 724, 726, 766, 829, 850, 858, 891, 893, 1005, 1008, 1009, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1032, 1041, 1053, 1054, 1055, 1056], "observatori": 179, "obsolet": [1040, 1056], "obstruct": 1047, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 83, 90, 92, 93, 105, 108, 109, 128, 130, 137, 147, 150, 151, 156, 163, 172, 176, 178, 190, 191, 202, 217, 219, 221, 231, 241, 254, 260, 261, 262, 269, 271, 275, 276, 277, 281, 284, 299, 321, 328, 344, 350, 358, 359, 365, 366, 378, 380, 385, 397, 409, 413, 414, 415, 417, 418, 420, 422, 423, 424, 425, 444, 449, 476, 504, 540, 541, 563, 564, 565, 566, 567, 568, 571, 572, 573, 601, 614, 622, 653, 667, 669, 674, 676, 680, 682, 684, 685, 695, 716, 720, 734, 747, 764, 801, 814, 831, 837, 840, 841, 844, 858, 869, 889, 901, 914, 917, 920, 921, 956, 998, 999, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1019, 1023, 1024, 1046, 1048, 1051, 1053, 1054, 1055, 1056, 1057], "obviat": 1001, "obviou": [190, 350, 366, 370, 383, 412, 420], "obvious": [186, 370], "oc": 1055, "occas": 383, "occasion": [398, 735, 1049], "occup": [190, 316, 332, 504], "occupation_cler": 190, "occupation_manag": 190, "occupation_oth": 190, "occupation_profession": 190, "occupation_sal": 190, "occupation_servic": 190, "occupi": [415, 1009], "occur": [54, 104, 148, 217, 221, 235, 353, 366, 383, 391, 398, 412, 415, 417, 419, 423, 451, 516, 517, 580, 589, 598, 635, 679, 806, 808, 811, 812, 814, 822, 831, 834, 835, 836, 839, 882, 943, 1009, 1011, 1019, 1040, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "occurr": [2, 217, 322, 358, 359, 378, 383, 387, 415, 423, 577, 578, 589, 597, 598, 625, 635, 636, 637, 638, 791, 847, 875, 1011, 1041, 1046], "ocean": 309, "ocsvm": [48, 231], "oct": [700, 777, 1006, 1012], "octob": [112, 378, 1040, 1047, 1053, 1054, 1056], "od280": 380, "od315": 380, "odd": [278, 422, 522, 720, 1009, 1047, 1048], "ofcategoriesknownnumb": 403, "off": [44, 51, 53, 72, 74, 75, 82, 83, 87, 88, 111, 115, 117, 123, 143, 153, 171, 172, 187, 221, 238, 249, 253, 267, 268, 274, 276, 277, 278, 293, 316, 333, 336, 338, 340, 346, 355, 357, 378, 383, 385, 397, 414, 415, 417, 424, 449, 504, 561, 562, 567, 568, 596, 599, 642, 664, 666, 700, 723, 805, 806, 808, 811, 812, 822, 824, 830, 835, 873, 892, 960, 1008, 1014, 1024, 1029, 1030, 1040, 1044, 1045, 1047], "offer": [43, 143, 205, 385, 391, 395, 396, 397, 401, 409, 419, 420, 422, 423, 998, 999, 1010, 1013, 1025, 1028, 1029, 1033, 1046, 1058, 1059], "offic": 1033, "offici": [378, 385, 395, 397, 401, 501, 505, 1028, 1048, 1049, 1052], "offlin": [269, 370, 383], "offset": [140, 195, 395, 417, 420, 476, 516, 517, 571, 640, 641, 649, 650, 652, 653, 685, 736, 783, 785, 858, 916, 1009, 1023, 1048, 1059], "offset_": [476, 571, 685, 858, 916, 1048], "offset_init": 685, "offsetbox": 238, "offsetimag": 238, "ofmulticlass": 1024, "often": [43, 57, 61, 62, 64, 69, 104, 108, 143, 153, 156, 178, 185, 190, 191, 218, 235, 238, 254, 262, 277, 280, 316, 321, 346, 355, 357, 358, 359, 370, 371, 377, 378, 380, 383, 385, 388, 391, 395, 396, 397, 400, 403, 409, 413, 415, 416, 417, 419, 420, 422, 423, 425, 427, 475, 529, 532, 541, 544, 640, 654, 655, 660, 661, 668, 669, 670, 671, 680, 682, 695, 736, 882, 890, 898, 910, 998, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1014, 1015, 1016, 1019, 1022, 1023, 1025, 1041, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "og": 423, "ogbonna": 1053, "ogordon100": 1053, "ogrid": 53, "ogu": 423, "ogura": 1055, "oh": [885, 1050], "ohad": 1054, "ohayon": [1048, 1049, 1056], "ohio": 378, "ohno": 413, "oj_lappi": 1052, "oja": [427, 541], "ojala": [281, 419, 837], "ojeda": 1054, "ok": [49, 383, 1015], "okal": 1044, "okbalefthand": 1046, "okhlopkov": [1046, 1047], "okon": 1054, "okroshiashvili": 1053, "ol": [197, 207, 212, 214, 215, 223, 234, 328, 664, 1005], "ol2001": 999, "olatunji": 1055, "old": [235, 383, 387, 389, 415, 475, 544, 654, 660, 910, 1006, 1029, 1040, 1045, 1046, 1048, 1053, 1054, 1055], "olden": 1048, "older": [251, 382, 387, 409, 471, 1032, 1038, 1043, 1050, 1052], "oldest": 504, "oldid": 1009, "oldja": 1052, "oleg": 1050, "oleggio": 1044, "olegovich": 1047, "oleh": [1052, 1054], "oleksandr": [1048, 1049, 1050, 1051, 1054], "oleksii": 1057, "olemiss": 687, "olga": [636, 999], "oli": 1047, "oliblum90": [1047, 1048], "olicairn": 1051, "olimpio": 1048, "oliph": 1040, "oliv": [1048, 1049, 1051, 1052, 1053], "oliveira": [1046, 1048, 1050, 1054], "olivetti": [2, 123, 145, 376, 420, 503, 1035, 1040, 1048], "olivetti_fac": 503, "olivi": [0, 398, 404, 908, 1022, 1027, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "oll": 1055, "olr": 197, "olsen": 1047, "olshen": [920, 921, 1025], "olson": 1046, "olszewski": 1053, "olvi": [172, 380], "om": 1047, "omar": [0, 404, 1050, 1055, 1056, 1057, 1058, 1059], "omarmanzoor": 1056, "omega": [353, 418, 1003], "omega_": 1003, "omega_k": [418, 1003], "omer": 1045, "omit": [144, 189, 190, 340, 388, 428, 482, 542, 674, 676, 684, 815, 817, 840, 841, 844, 847, 848, 849, 850, 851, 869, 1007, 1014], "omohundro": 1012, "omp": [2, 126, 132, 216, 420, 539, 545, 550, 556, 672, 673, 693, 694, 1031, 1035, 1040, 1048], "omp_cv": 216, "omp_get_max_thread": 384, "omp_num_thread": 371, "omtcyfz": 1047, "onc": [2, 43, 47, 85, 169, 172, 174, 179, 238, 251, 254, 269, 273, 276, 289, 293, 296, 322, 325, 329, 357, 359, 365, 366, 370, 372, 377, 378, 381, 383, 387, 388, 389, 390, 391, 396, 397, 398, 409, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 456, 458, 460, 479, 516, 517, 546, 552, 559, 567, 568, 598, 599, 605, 619, 627, 635, 655, 659, 661, 663, 669, 671, 673, 674, 675, 676, 684, 685, 686, 705, 720, 724, 726, 744, 789, 809, 813, 816, 826, 830, 847, 848, 849, 850, 851, 924, 1005, 1006, 1012, 1019, 1023, 1024, 1025, 1037, 1040, 1048, 1050, 1051, 1052, 1053, 1057], "one": [0, 2, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 82, 88, 90, 92, 93, 95, 96, 99, 101, 105, 114, 120, 123, 126, 128, 132, 142, 143, 148, 150, 153, 154, 158, 161, 171, 172, 174, 181, 182, 185, 189, 190, 191, 192, 193, 195, 197, 198, 202, 206, 207, 209, 210, 211, 213, 217, 219, 226, 227, 232, 235, 239, 244, 251, 252, 254, 258, 262, 265, 269, 271, 272, 273, 275, 276, 278, 279, 282, 283, 284, 285, 293, 295, 296, 301, 314, 317, 318, 321, 322, 325, 327, 328, 329, 333, 338, 345, 346, 354, 357, 358, 359, 361, 365, 366, 370, 371, 372, 377, 378, 379, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 397, 398, 400, 401, 403, 406, 409, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 467, 469, 471, 476, 481, 494, 495, 497, 498, 500, 501, 502, 503, 504, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 522, 542, 547, 548, 549, 551, 555, 559, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 589, 591, 592, 596, 597, 598, 599, 618, 619, 623, 624, 628, 635, 638, 640, 641, 642, 643, 651, 655, 656, 657, 658, 662, 665, 666, 667, 669, 674, 676, 677, 679, 681, 682, 683, 684, 686, 688, 696, 700, 703, 707, 711, 717, 719, 728, 737, 738, 742, 746, 758, 759, 762, 771, 779, 782, 786, 787, 788, 789, 791, 792, 795, 796, 798, 799, 800, 801, 804, 805, 806, 807, 808, 811, 812, 814, 815, 816, 818, 820, 822, 826, 827, 830, 831, 833, 835, 836, 838, 839, 840, 841, 842, 844, 845, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 868, 872, 875, 876, 877, 879, 880, 882, 883, 884, 885, 886, 891, 892, 893, 896, 898, 912, 914, 915, 916, 917, 918, 920, 921, 922, 923, 931, 934, 944, 948, 958, 979, 998, 999, 1001, 1003, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1023, 1024, 1025, 1026, 1027, 1028, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "one_class": 252, "one_d_arrai": 929, "one_d_label": 932, "one_hot": [322, 333], "one_hot_encod": [43, 147], "one_hot_encoder_": 574, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 147, "one_hot_tim": 43, "one_imag": [423, 592, 595], "one_vs_on": [425, 618, 1010], "one_vs_rest": [618, 1010], "oneclasssvm": [2, 48, 50, 231, 244, 328, 345, 571, 685, 858, 1015, 1023, 1024, 1042, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "oned": 401, "onehot": [256, 317, 318, 416, 877, 1019], "onehot_categor": [217, 235], "onehotencod": [2, 43, 105, 142, 147, 158, 190, 191, 217, 235, 246, 254, 256, 258, 322, 326, 328, 331, 332, 333, 377, 397, 416, 422, 473, 474, 574, 589, 590, 875, 879, 880, 883, 886, 893, 999, 1019, 1041, 1044, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "onehotencoderonehotencod": [105, 142, 158, 190, 191, 246, 256, 326, 329], "ones": [43, 50, 70, 78, 90, 105, 114, 148, 154, 174, 195, 202, 221, 222, 244, 247, 251, 275, 283, 286, 303, 320, 336, 355, 370, 371, 383, 391, 397, 415, 417, 419, 422, 430, 433, 437, 457, 540, 574, 589, 618, 619, 626, 652, 653, 666, 667, 678, 684, 711, 804, 810, 815, 826, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 887, 891, 962, 1005, 1009, 1014, 1015, 1019, 1024, 1040, 1048, 1049, 1050], "onetoonefeaturemixin": [2, 385, 439], "onevsoneclassifi": [2, 293, 406, 841, 842, 1041, 1043, 1044, 1046, 1047, 1049, 1052, 1054, 1057], "onevsrestclassifi": [2, 66, 209, 232, 252, 282, 284, 293, 406, 413, 666, 667, 840, 842, 912, 1041, 1042, 1044, 1046, 1047, 1053, 1054, 1057, 1058], "ong": 716, "ongari": 1057, "onggo": 1056, "ongo": [331, 384, 398], "onli": [2, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 80, 84, 88, 90, 93, 101, 104, 105, 106, 108, 109, 114, 120, 126, 127, 129, 133, 137, 139, 144, 145, 146, 147, 149, 157, 158, 167, 168, 169, 172, 174, 176, 181, 183, 186, 187, 189, 190, 191, 195, 196, 201, 202, 206, 213, 217, 218, 220, 223, 225, 226, 235, 237, 238, 244, 246, 248, 250, 251, 255, 258, 260, 261, 262, 265, 266, 269, 271, 273, 275, 277, 278, 281, 282, 283, 284, 286, 287, 289, 293, 295, 296, 302, 304, 307, 309, 313, 316, 317, 321, 322, 327, 328, 335, 336, 338, 342, 343, 346, 350, 351, 353, 354, 357, 358, 359, 361, 362, 365, 366, 370, 371, 372, 376, 377, 378, 380, 381, 383, 385, 387, 388, 389, 390, 391, 392, 395, 397, 398, 401, 406, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 435, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 496, 497, 498, 500, 502, 504, 505, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 524, 527, 531, 532, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 707, 715, 717, 721, 734, 737, 738, 742, 744, 745, 746, 749, 750, 751, 764, 766, 768, 782, 786, 787, 788, 789, 791, 792, 795, 796, 800, 801, 802, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 822, 826, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 931, 932, 933, 934, 936, 937, 938, 939, 942, 944, 948, 956, 958, 962, 964, 969, 974, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1028, 1029, 1030, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "onlin": [2, 44, 47, 54, 71, 86, 123, 126, 187, 196, 225, 231, 253, 269, 312, 372, 378, 382, 388, 397, 415, 420, 423, 425, 449, 453, 454, 456, 503, 510, 539, 544, 545, 546, 547, 553, 554, 590, 592, 666, 674, 675, 676, 684, 686, 838, 847, 848, 849, 850, 851, 854, 855, 860, 862, 863, 881, 882, 892, 912, 913, 1001, 1005, 1013, 1015, 1027, 1030, 1031, 1033, 1035, 1040, 1044, 1045, 1047, 1055], "onlineldavb": 544, "only_non_neg": 1053, "only_physical_cor": 143, "onnx": [1028, 1029, 1035], "onnxruntim": 409, "onto": [118, 238, 239, 249, 316, 395, 420, 423, 427, 453, 455, 468, 541, 547, 551, 635, 636, 638, 696, 1003, 1007, 1012], "onward": [886, 1044, 1058, 1059], "onx": 409, "oob": [136, 149, 187, 422, 523, 572, 1029, 1030, 1042, 1053, 1057], "oob_best_it": 149, "oob_color": 149, "oob_decision_function_": [563, 565, 572], "oob_error": 141, "oob_improvement_": [149, 422, 567, 568, 1042], "oob_lin": 149, "oob_prediction_": [564, 566, 573], "oob_scor": [141, 422, 563, 564, 565, 566, 572, 573, 1045, 1047], "oob_score_": [141, 563, 564, 565, 566, 567, 568, 572, 573, 1042, 1056], "oob_scores_": [567, 568, 1056], "op": [387, 434, 666, 667, 674, 675, 676, 684, 685, 686, 869, 870, 912, 1019], "opaqu": 1017, "open": [0, 47, 51, 55, 239, 377, 378, 381, 382, 383, 387, 389, 395, 396, 398, 409, 416, 423, 494, 504, 516, 517, 999, 1028, 1033, 1043, 1047, 1048, 1050, 1056], "open_pric": 51, "openbla": [370, 371, 381, 391, 395, 1053, 1057, 1058], "openblas_num_thread": 371, "opencv": 378, "opengraph": [383, 401, 408], "openml": [2, 43, 52, 105, 158, 179, 190, 217, 225, 233, 235, 245, 269, 289, 293, 295, 313, 376, 401, 504, 1035, 1048, 1050, 1053], "openml1": 52, "openml100": 377, "openmp": [326, 381, 386, 395, 397, 415, 422, 1051, 1053, 1056, 1058], "opentsn": 700, "oper": [2, 19, 53, 172, 182, 187, 245, 250, 257, 267, 269, 270, 272, 282, 359, 370, 371, 380, 381, 383, 386, 389, 395, 397, 398, 401, 409, 411, 414, 419, 420, 422, 423, 424, 428, 449, 455, 468, 475, 482, 489, 490, 491, 492, 512, 541, 542, 549, 559, 560, 574, 580, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 624, 629, 632, 638, 643, 651, 666, 697, 701, 710, 714, 715, 716, 735, 782, 789, 790, 796, 797, 827, 838, 841, 852, 853, 875, 879, 884, 895, 896, 910, 917, 920, 958, 981, 1005, 1012, 1019, 1024, 1028, 1030, 1033, 1044, 1046, 1047, 1048, 1050, 1051, 1056, 1059], "operand": 425, "operation": [235, 1033], "operatornam": [420, 749, 1005, 1009, 1025], "opinion": 398, "opitz": 1009, "opportun": [542, 1023], "oppos": [102, 251, 411, 415, 908, 1012, 1024, 1040, 1058], "opposit": [62, 88, 102, 128, 190, 191, 206, 269, 282, 397, 413, 417, 419, 424, 450, 454, 456, 476, 546, 548, 555, 571, 720, 738, 858, 916, 1040], "opposite_lof_scor": 858, "opt": [381, 385], "opta": 905, "optic": [2, 71, 79, 187, 329, 338, 376, 426, 451, 453, 462, 463, 464, 510, 1030, 1034, 1035, 1049, 1053, 1054, 1055, 1056, 1057, 1058], "optim": [46, 52, 53, 64, 88, 89, 92, 95, 106, 111, 112, 123, 148, 149, 151, 153, 171, 172, 174, 175, 178, 179, 180, 181, 182, 202, 204, 206, 210, 225, 233, 250, 254, 269, 273, 280, 283, 288, 289, 293, 295, 300, 314, 316, 321, 329, 333, 338, 348, 353, 357, 358, 359, 366, 370, 377, 380, 383, 385, 386, 395, 397, 401, 410, 412, 414, 415, 417, 419, 420, 422, 424, 425, 426, 451, 454, 455, 456, 457, 459, 464, 468, 469, 479, 480, 486, 539, 542, 543, 545, 547, 551, 565, 566, 567, 568, 582, 618, 619, 627, 628, 643, 646, 648, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 692, 695, 698, 700, 702, 703, 709, 727, 731, 738, 807, 808, 822, 830, 854, 855, 856, 858, 860, 861, 862, 863, 864, 869, 870, 888, 900, 904, 905, 912, 913, 914, 915, 916, 917, 918, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1023, 1024, 1025, 1028, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1056], "optima": 425, "optimis": [385, 415, 1012, 1043, 1053, 1055], "optimist": [52, 206, 280, 357, 366, 715, 1005, 1009], "optimum": [96, 180, 190, 195, 269, 288, 414, 420, 479, 1005, 1008], "option": [2, 43, 66, 81, 87, 130, 143, 151, 180, 186, 199, 202, 218, 254, 269, 278, 284, 326, 333, 357, 361, 366, 372, 377, 378, 379, 381, 383, 384, 386, 388, 389, 391, 392, 395, 397, 398, 401, 409, 415, 416, 418, 419, 420, 422, 423, 426, 439, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 466, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 695, 696, 697, 698, 700, 702, 703, 719, 721, 725, 737, 738, 743, 744, 745, 765, 766, 767, 772, 774, 775, 779, 782, 783, 784, 785, 786, 789, 791, 792, 795, 800, 801, 803, 807, 809, 810, 811, 812, 814, 815, 817, 826, 830, 831, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 901, 904, 905, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 946, 994, 998, 999, 1005, 1008, 1009, 1012, 1019, 1022, 1024, 1025, 1029, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "option_context": 235, "ora": 1053, "oracl": [2, 69, 217, 235, 428, 476, 477, 480, 481, 482, 483, 1003, 1040], "orallo": 1009, "orang": [46, 48, 88, 113, 121, 124, 125, 130, 137, 152, 153, 155, 181, 186, 204, 206, 227, 252, 263, 269, 307, 326, 332, 364, 1010, 1057], "orazbayev": 1054, "orbit": [357, 358], "order": [2, 43, 53, 58, 61, 64, 82, 90, 99, 100, 106, 111, 132, 145, 146, 147, 151, 153, 165, 179, 189, 190, 193, 195, 206, 210, 213, 217, 218, 223, 231, 235, 239, 248, 251, 254, 258, 262, 270, 273, 275, 282, 295, 314, 316, 321, 322, 323, 327, 328, 333, 353, 357, 359, 366, 370, 371, 378, 383, 384, 385, 387, 388, 389, 392, 397, 401, 402, 406, 409, 415, 416, 417, 419, 420, 421, 422, 423, 425, 427, 444, 447, 450, 453, 454, 456, 457, 462, 463, 464, 466, 471, 495, 496, 497, 503, 505, 523, 542, 543, 547, 548, 549, 551, 555, 559, 561, 563, 564, 565, 566, 567, 571, 572, 573, 574, 575, 589, 596, 599, 601, 602, 605, 614, 615, 616, 618, 630, 635, 639, 648, 666, 667, 673, 684, 693, 694, 696, 697, 701, 705, 707, 708, 710, 712, 720, 721, 726, 730, 734, 737, 738, 746, 748, 749, 750, 762, 764, 786, 790, 791, 792, 795, 796, 797, 802, 807, 808, 809, 811, 812, 813, 815, 819, 822, 826, 827, 830, 833, 840, 841, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 862, 869, 872, 883, 885, 886, 887, 891, 892, 893, 896, 897, 898, 900, 901, 902, 903, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 938, 939, 944, 956, 972, 977, 999, 1005, 1006, 1009, 1010, 1012, 1013, 1019, 1022, 1023, 1024, 1025, 1029, 1040, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "order_": [843, 846], "order_centroid": 358, "ordered_sampl": 235, "ordereddict": 141, "ordering_": [100, 415, 457, 462, 463, 464], "ordin": [43, 88, 105, 158, 254, 319, 322, 323, 327, 330, 377, 397, 422, 504, 575, 717, 877, 880, 885, 886, 893, 1005, 1006, 1019, 1029, 1048, 1054], "ordinal_encod": [147, 254], "ordinal_result": 147, "ordinalencod": [2, 147, 158, 191, 192, 217, 254, 322, 330, 377, 397, 589, 848, 880, 885, 893, 999, 1011, 1019, 1048, 1049, 1052, 1053, 1054, 1055, 1056, 1057], "ordinalencoderordinalencod": [158, 191, 192, 322], "ordinari": [2, 125, 140, 187, 196, 197, 200, 202, 207, 213, 219, 220, 222, 234, 328, 643, 654, 660, 662, 663, 664, 665, 680, 686, 690, 691, 695, 1023, 1030, 1031, 1035], "ordinarili": [395, 397], "ordowski": 1009, "oregon": 322, "oren": 1048, "oresti": 1049, "orfano": [1053, 1054, 1055, 1056, 1057], "org": [43, 51, 52, 55, 61, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 195, 199, 217, 225, 233, 235, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 295, 313, 314, 322, 326, 327, 329, 330, 332, 337, 365, 371, 376, 381, 383, 386, 389, 391, 398, 419, 603, 644, 676, 679, 684, 703, 713, 777, 854, 855, 860, 861, 862, 863, 890, 906, 920, 921, 950, 951, 1005, 1009, 1025, 1035, 1048, 1052], "organ": [0, 50, 52, 104, 113, 357, 377, 382, 383, 398, 860, 1028], "ori": 1046, "orient": [66, 123, 190, 237, 316, 397, 924, 1006], "orig": [53, 303], "orig_coin": [81, 82], "orig_data_ax": 128, "origin": [43, 44, 53, 58, 59, 81, 82, 83, 86, 91, 93, 108, 109, 120, 123, 125, 126, 132, 153, 156, 168, 169, 172, 174, 176, 178, 179, 185, 186, 191, 195, 204, 206, 221, 237, 238, 239, 241, 242, 248, 249, 250, 254, 266, 269, 272, 278, 299, 304, 314, 317, 321, 331, 336, 350, 357, 359, 366, 371, 378, 380, 382, 383, 385, 387, 388, 395, 397, 409, 412, 415, 416, 419, 420, 422, 423, 425, 426, 427, 428, 440, 444, 448, 450, 451, 452, 453, 454, 456, 457, 466, 470, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 501, 502, 503, 509, 527, 539, 541, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 584, 589, 590, 592, 596, 598, 599, 602, 615, 616, 618, 619, 622, 638, 640, 643, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 700, 704, 709, 736, 771, 777, 807, 809, 810, 815, 817, 826, 830, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 862, 863, 869, 870, 872, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 888, 889, 890, 891, 892, 901, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 936, 938, 939, 943, 944, 967, 979, 982, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1015, 1020, 1021, 1022, 1023, 1026, 1028, 1033, 1043, 1044, 1046, 1048, 1050, 1052, 1054, 1056], "original_param": 152, "original_shap": 83, "original_sklearn_vers": [409, 584], "original_space_centroid": 358, "orii": 1042, "orphan": [455, 468, 1040], "orr": [1013, 1023], "orr\u00f9": 1043, "orthogon": [2, 37, 124, 125, 126, 132, 187, 196, 288, 420, 534, 539, 545, 547, 550, 551, 556, 672, 673, 693, 694, 1021, 1030, 1031, 1035, 1040], "orthogonal_mp": [2, 556, 672, 673, 694, 1005], "orthogonal_mp_gram": [2, 672, 673, 693, 1054], "orthogonalmatchingpursuit": [2, 216, 673, 693, 694, 1005, 1010, 1040, 1042, 1045, 1048, 1053, 1058], "orthogonalmatchingpursuitcv": [2, 216, 406, 672, 1042, 1053, 1057], "orthonorm": [2, 45, 392, 955, 1001], "orthotrop": 1012, "ortiz": [1050, 1056], "os": 1058, "osa": 1048, "osaid": 1048, "osborn": [1043, 1044], "oscar": [1043, 1047], "oscil": [155, 191, 222, 415, 447], "oscillatori": [218, 1019], "osei": 1054, "osendorf": [1040, 1041], "oserror": [401, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506], "osindero": [868, 1014], "osman": [1049, 1055], "osx": 370, "other": [0, 2, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 87, 92, 101, 103, 105, 106, 118, 125, 126, 128, 130, 140, 142, 143, 146, 147, 150, 151, 153, 154, 160, 167, 185, 186, 187, 189, 190, 191, 192, 195, 197, 205, 210, 217, 221, 235, 237, 238, 239, 241, 244, 245, 246, 248, 250, 251, 254, 255, 262, 265, 269, 270, 272, 275, 276, 277, 284, 285, 289, 293, 301, 302, 303, 315, 316, 320, 321, 323, 325, 326, 328, 332, 333, 335, 346, 350, 352, 355, 357, 358, 361, 365, 366, 370, 375, 376, 378, 379, 380, 381, 383, 385, 387, 388, 389, 391, 392, 396, 397, 398, 401, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 444, 450, 451, 453, 454, 455, 456, 457, 459, 464, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 495, 504, 505, 511, 541, 542, 543, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 605, 610, 618, 619, 620, 621, 628, 635, 636, 638, 643, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 698, 700, 704, 707, 712, 726, 771, 782, 786, 793, 800, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 822, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 867, 869, 870, 872, 873, 875, 877, 878, 879, 881, 882, 884, 885, 886, 888, 889, 890, 891, 892, 893, 900, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 950, 951, 965, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1035, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1053, 1054, 1055, 1056, 1057, 1059], "other_parti": 269, "other_payment_plan": 269, "other_scor": 388, "otherwis": [50, 91, 97, 139, 183, 186, 199, 219, 225, 269, 309, 350, 353, 366, 372, 385, 387, 389, 397, 406, 415, 417, 419, 423, 425, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 460, 461, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 504, 535, 541, 542, 543, 544, 546, 548, 549, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 605, 610, 618, 619, 622, 639, 640, 641, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 693, 694, 698, 700, 704, 705, 706, 708, 710, 711, 715, 717, 721, 722, 732, 734, 735, 736, 737, 738, 746, 749, 760, 762, 763, 764, 774, 782, 786, 789, 790, 791, 792, 793, 795, 796, 797, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 822, 826, 827, 830, 831, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 867, 869, 870, 872, 875, 876, 877, 878, 879, 883, 884, 891, 892, 893, 894, 897, 898, 899, 901, 902, 903, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 925, 927, 938, 939, 941, 945, 955, 956, 967, 969, 992, 994, 997, 1004, 1005, 1006, 1009, 1012, 1013, 1015, 1016, 1019, 1021, 1023, 1024, 1028, 1033, 1042, 1048, 1049, 1050, 1053, 1056], "ott": 1044, "oudshoorn": [635, 999], "ought": 370, "our": [0, 43, 44, 46, 50, 51, 52, 77, 88, 91, 104, 105, 113, 114, 118, 123, 124, 137, 138, 144, 147, 148, 150, 151, 167, 172, 174, 179, 180, 181, 187, 189, 190, 191, 192, 193, 217, 221, 235, 239, 241, 251, 268, 269, 275, 278, 281, 282, 299, 313, 316, 322, 326, 328, 333, 340, 343, 349, 351, 353, 357, 358, 359, 366, 371, 382, 387, 388, 391, 395, 396, 397, 398, 406, 415, 419, 422, 423, 425, 426, 451, 457, 571, 652, 700, 716, 728, 734, 746, 764, 854, 855, 856, 858, 860, 862, 863, 864, 998, 999, 1005, 1006, 1009, 1015, 1019, 1022, 1023, 1024, 1029, 1032, 1033, 1047, 1048, 1050, 1051, 1054, 1055, 1057], "our_rand_r": 1049, "oura": [1053, 1054, 1055], "ourselv": 1033, "ouss1508": [1055, 1056], "out": [0, 2, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 66, 75, 85, 90, 91, 104, 105, 130, 135, 136, 141, 143, 144, 151, 152, 165, 182, 187, 189, 190, 192, 202, 217, 219, 221, 225, 235, 251, 254, 260, 262, 269, 273, 275, 278, 283, 287, 293, 295, 321, 322, 328, 338, 340, 342, 343, 346, 353, 357, 369, 378, 380, 381, 383, 385, 386, 387, 389, 395, 397, 403, 409, 415, 418, 420, 422, 423, 425, 431, 441, 442, 443, 449, 450, 452, 453, 454, 456, 479, 489, 490, 491, 492, 507, 523, 524, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 596, 597, 599, 612, 615, 616, 642, 647, 648, 649, 650, 659, 663, 674, 676, 681, 683, 684, 696, 697, 700, 709, 735, 749, 750, 808, 810, 811, 812, 813, 815, 816, 817, 818, 822, 838, 847, 848, 849, 850, 851, 856, 861, 864, 868, 869, 870, 878, 882, 889, 901, 904, 905, 927, 970, 972, 977, 997, 999, 1003, 1004, 1008, 1009, 1010, 1012, 1017, 1019, 1029, 1030, 1031, 1033, 1035, 1040, 1042, 1044, 1046, 1048, 1049, 1052, 1053, 1056, 1058], "out_activation_": [869, 870], "out_bounds_predict": 219, "out_fil": [924, 1025], "out_of_bound": [247, 643], "out_of_cluster_doc": 57, "outcom": [43, 143, 190, 397, 403, 422, 577, 666, 717, 750, 802, 840, 907, 908, 909, 914, 917, 1005, 1009, 1025, 1032, 1044, 1048, 1050], "outdat": 386, "outer": [58, 128, 280, 337, 458, 522, 648, 658, 659, 662, 1001, 1041], "outer_cv": [280, 332], "outer_numb": 337, "outermost": 350, "outli": [48, 113, 397, 476, 481, 1005, 1015], "outlier": [2, 42, 70, 79, 89, 113, 114, 150, 154, 174, 187, 196, 215, 219, 220, 221, 222, 223, 231, 243, 297, 315, 320, 323, 345, 355, 378, 397, 415, 417, 422, 437, 453, 471, 473, 476, 477, 480, 481, 482, 483, 497, 498, 500, 504, 518, 520, 530, 532, 571, 639, 647, 657, 678, 679, 680, 684, 685, 686, 687, 700, 710, 838, 858, 862, 873, 881, 882, 884, 885, 886, 888, 889, 890, 891, 892, 897, 898, 899, 900, 901, 902, 903, 915, 916, 918, 1009, 1023, 1024, 1028, 1030, 1031, 1034, 1035, 1040, 1045, 1046, 1048, 1059], "outlier_detector": [254, 437], "outlier_label": [862, 1050], "outlier_label_": 862, "outlier_mask": 220, "outlier_plot": 113, "outliermixin": [2, 1057], "outliers_": 657, "outliers_cov": 113, "outliers_fract": 244, "outliers_index": 114, "outliers_offset": 114, "outlin": [101, 146, 383, 385, 397, 398, 400, 415, 998, 1035], "outlying": 1015, "outperform": [111, 118, 153, 158, 293, 321, 395, 419, 422, 459, 469, 1011, 1019], "output": [2, 30, 31, 51, 54, 62, 64, 72, 88, 94, 126, 136, 137, 138, 140, 146, 158, 161, 174, 182, 185, 186, 187, 190, 213, 243, 251, 255, 258, 263, 268, 269, 273, 275, 278, 282, 284, 285, 289, 293, 296, 317, 320, 322, 323, 325, 328, 329, 331, 333, 358, 359, 360, 361, 363, 365, 376, 377, 378, 380, 383, 385, 389, 391, 395, 396, 397, 413, 414, 415, 416, 418, 419, 422, 423, 424, 425, 431, 436, 439, 444, 448, 449, 450, 452, 453, 454, 456, 457, 459, 466, 467, 469, 470, 471, 472, 473, 474, 475, 489, 490, 491, 492, 495, 498, 500, 501, 502, 503, 504, 505, 511, 513, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 635, 636, 637, 638, 639, 640, 641, 643, 646, 647, 648, 649, 650, 654, 655, 658, 660, 661, 662, 665, 666, 668, 669, 670, 671, 674, 675, 676, 679, 681, 682, 684, 686, 687, 689, 690, 691, 692, 696, 697, 698, 700, 702, 704, 707, 708, 721, 722, 729, 731, 732, 734, 736, 743, 753, 754, 756, 758, 759, 760, 761, 762, 764, 769, 775, 780, 793, 796, 798, 799, 805, 806, 807, 810, 811, 812, 813, 814, 820, 822, 823, 824, 825, 826, 827, 828, 830, 833, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 855, 856, 857, 861, 862, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 900, 901, 904, 905, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 932, 933, 938, 939, 941, 944, 956, 957, 964, 965, 967, 975, 995, 998, 999, 1001, 1003, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1016, 1019, 1024, 1030, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "output_dict": [721, 1048, 1052], "output_distribut": [109, 316, 320, 416, 888, 889, 900, 901, 1019], "output_fil": 494, "output_indices_": [471, 1053], "output_label": 337, "output_label_arrai": 337, "outputcodeclassifi": [2, 293, 406, 840, 841, 1047, 1052, 1056, 1057], "outputs_2d_": [854, 862, 1050], "outreach": 398, "outsid": [45, 48, 57, 146, 218, 219, 247, 258, 409, 423, 453, 643, 891, 1015, 1048], "outward": 316, "outweigh": 1044, "ouvert": [766, 767, 1007], "ova": [226, 674, 676, 684, 1023], "ovb": [189, 190], "over": [0, 2, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 85, 90, 91, 106, 107, 108, 123, 140, 143, 148, 153, 154, 167, 171, 174, 182, 185, 189, 191, 200, 211, 217, 225, 235, 244, 254, 269, 275, 276, 278, 280, 282, 283, 284, 287, 301, 309, 311, 312, 318, 328, 329, 331, 335, 357, 358, 370, 371, 372, 378, 379, 382, 383, 384, 385, 389, 396, 397, 411, 413, 415, 416, 419, 420, 421, 422, 423, 427, 453, 456, 471, 479, 517, 541, 542, 544, 545, 546, 547, 554, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 589, 590, 596, 597, 599, 602, 610, 638, 640, 641, 642, 652, 653, 654, 655, 660, 661, 666, 668, 669, 670, 671, 673, 674, 675, 676, 684, 685, 686, 693, 694, 705, 724, 726, 747, 771, 796, 801, 805, 808, 811, 812, 814, 819, 820, 822, 831, 833, 834, 835, 836, 837, 839, 868, 869, 870, 871, 887, 891, 912, 920, 922, 929, 935, 944, 950, 951, 998, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1033, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1053], "overal": [43, 78, 83, 137, 140, 143, 148, 158, 179, 235, 269, 272, 296, 321, 322, 358, 370, 382, 383, 389, 412, 413, 422, 454, 456, 471, 478, 479, 485, 557, 893, 1006, 1009, 1025, 1033, 1050], "overallqu": 158, "overcom": [144, 221, 370, 423], "overcomplet": 420, "overconstrain": 153, "overestim": [130, 366, 419], "overfit": [43, 64, 142, 148, 150, 153, 187, 191, 192, 193, 197, 218, 221, 244, 262, 267, 269, 270, 276, 280, 289, 291, 311, 317, 318, 320, 321, 322, 323, 346, 353, 361, 363, 364, 378, 397, 413, 414, 419, 422, 444, 495, 496, 569, 570, 575, 576, 665, 808, 811, 812, 822, 830, 834, 835, 869, 870, 872, 887, 891, 1004, 1013, 1015, 1017, 1019, 1025, 1030, 1033, 1043], "overflow": [382, 391, 395, 411, 1032, 1043, 1047, 1048, 1049, 1050, 1051, 1053], "overflowerror": 1050, "overhead": [47, 296, 371, 372, 383, 389, 392, 395, 397, 422, 448, 452, 456, 542, 707, 844, 845, 847, 848, 849, 850, 851, 852, 853, 1011, 1012, 1043, 1048, 1049, 1052], "overlai": [391, 640], "overlaid": 1016, "overlap": [2, 51, 52, 72, 90, 120, 151, 171, 240, 262, 358, 412, 415, 419, 422, 423, 595, 800, 801, 809, 810, 813, 815, 816, 817, 818, 825, 826, 828, 1006, 1019, 1046], "overli": [52, 62, 63, 206, 280, 366, 420, 1009], "overlin": [275, 412], "overparameter": 1005, "overrid": [385, 423, 453, 457, 464, 550, 556, 596, 597, 599, 601, 602, 605, 664, 672, 693, 694, 814, 831, 854, 855, 856, 858, 860, 862, 863, 864, 1040, 1048, 1050, 1054, 1056], "overridden": [385, 397, 425, 550, 556, 624, 629, 632, 702, 1048, 1049, 1056], "oversampl": [552, 1040], "oversc": 1055, "overset": [420, 1016], "overst": 190, "oversubscript": [786, 1054], "overview": [109, 187, 280, 292, 295, 384, 386, 396, 397, 504, 742, 751, 808, 824, 835, 840, 841, 842, 920, 1011, 1023, 1030, 1034, 1035], "overwhelm": 383, "overwrit": [153, 453, 504, 639, 1040, 1051, 1056, 1057], "overwrite_": 1040, "overwritten": [449, 540, 541, 542, 544, 549, 556, 615, 616, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 680, 682, 687, 689, 690, 691, 692, 694, 978, 1053], "ovo": [293, 325, 796, 840, 914, 917, 1009, 1010, 1024], "ovo_tpr": 284, "ovo_tre": 293, "ovr": [2, 66, 209, 232, 293, 295, 325, 354, 666, 667, 796, 841, 912, 914, 917, 1009, 1010, 1024, 1040, 1045, 1046, 1048, 1049, 1050, 1054, 1055], "ovr_jaccard_scor": 295, "ovr_tre": 293, "ow": 95, "owen": [657, 1049, 1050], "own": [2, 16, 52, 70, 143, 235, 251, 265, 296, 298, 337, 358, 371, 377, 386, 388, 391, 392, 401, 414, 415, 427, 431, 447, 461, 541, 565, 572, 654, 805, 806, 854, 855, 856, 858, 860, 862, 863, 864, 886, 920, 922, 944, 950, 1005, 1011, 1012, 1015, 1019, 1024, 1028, 1033, 1047, 1048, 1050, 1057], "own_telephon": 269, "owner": [251, 378, 380, 964, 965], "ownership": 385, "oyamada": 1045, "oyindamola": 1055, "oywa": 1050, "ozga": 1048, "ozsvald": 1042, "p": [0, 2, 50, 53, 61, 63, 64, 76, 96, 113, 114, 117, 121, 130, 149, 168, 172, 177, 195, 229, 234, 235, 237, 239, 248, 275, 281, 282, 309, 377, 378, 380, 381, 388, 391, 412, 413, 414, 415, 417, 418, 420, 422, 424, 425, 426, 428, 449, 451, 453, 454, 457, 462, 463, 464, 476, 478, 481, 482, 485, 506, 536, 542, 546, 548, 549, 555, 557, 558, 559, 561, 563, 564, 565, 566, 567, 569, 572, 573, 574, 598, 600, 601, 602, 603, 604, 606, 607, 608, 612, 613, 614, 615, 616, 617, 623, 624, 635, 648, 651, 696, 698, 700, 702, 707, 713, 723, 732, 749, 760, 794, 796, 810, 816, 817, 818, 821, 837, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 868, 872, 873, 888, 900, 906, 922, 923, 924, 1002, 1003, 1005, 1006, 1007, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1023, 1024, 1040, 1041, 1043, 1046, 1048, 1055, 1056, 1057], "p0": 63, "p1": [63, 160], "p1d": 63, "p2": [63, 160, 235], "p3": 160, "p4": 160, "p5": 956, "p592": 141, "p_": [168, 1009, 1012, 1025], "p_c": [121, 531], "p_e": 724, "p_grid": 280, "p_i": [1009, 1012], "p_k": [282, 1009], "p_n": [282, 715, 1009], "p_o": 724, "p_val": 275, "p_val_uncorrect": 275, "p_valu": [612, 613, 614], "p_w": 121, "p_w_c": [121, 531], "pa": [674, 675, 909, 1005, 1009, 1022], "pab": [1055, 1056], "pablo": [1050, 1053, 1054], "pabloduque0": 1053, "pace": 378, "pacha": 1048, "pacif": 275, "pack": [392, 1048], "packag": [0, 81, 88, 185, 251, 296, 371, 376, 377, 380, 381, 383, 384, 385, 387, 391, 392, 395, 397, 401, 402, 409, 417, 422, 423, 459, 485, 654, 655, 999, 1005, 1008, 1012, 1019, 1025, 1033, 1040, 1046, 1048, 1049, 1050], "packet": 370, "packg": 401, "pacman": 401, "paczuski": [1048, 1049], "pad": [123, 146, 185, 191, 237, 254, 357, 362, 423, 596, 597, 599], "page": [0, 51, 55, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 172, 179, 190, 191, 192, 199, 237, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 330, 332, 337, 365, 370, 378, 380, 383, 385, 387, 389, 391, 398, 415, 417, 480, 524, 525, 526, 636, 652, 842, 907, 956, 999, 1005, 1009, 1010, 1038, 1040, 1044, 1045], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": 55, "pagh": [195, 1001], "pai": [0, 190, 235, 269, 383], "paid": 1005, "pain": 395, "paint": [924, 926], "pair": [2, 49, 52, 72, 79, 93, 99, 128, 139, 141, 146, 150, 165, 178, 182, 198, 201, 209, 226, 229, 235, 248, 270, 275, 282, 284, 340, 342, 344, 346, 347, 348, 350, 358, 362, 378, 395, 397, 412, 413, 416, 419, 423, 425, 444, 447, 448, 452, 457, 464, 470, 478, 479, 485, 501, 516, 517, 590, 600, 603, 604, 606, 607, 608, 618, 621, 622, 623, 625, 627, 628, 630, 631, 633, 635, 640, 641, 651, 653, 700, 707, 708, 713, 714, 715, 723, 739, 748, 766, 767, 771, 774, 777, 778, 779, 780, 781, 782, 784, 786, 787, 788, 789, 790, 794, 840, 852, 853, 927, 1009, 1010, 1011, 1012, 1019, 1025, 1040, 1052, 1053, 1055, 1056, 1057], "pair_confusion_matrix": [2, 415, 1052], "pair_list": 284, "pair_scor": 284, "paired_cosine_dist": [2, 411, 1059], "paired_dist": [2, 771, 777, 786, 1044], "paired_euclidean_dist": [2, 411, 1059], "paired_manhattan_dist": 2, "pairidx": 362, "pairplot": [189, 190], "pairwis": [2, 37, 99, 189, 190, 248, 254, 284, 325, 329, 330, 357, 370, 375, 397, 411, 415, 420, 425, 453, 461, 465, 468, 469, 475, 494, 516, 517, 543, 569, 570, 628, 646, 647, 648, 649, 650, 651, 696, 698, 700, 702, 704, 707, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 796, 800, 801, 840, 856, 860, 864, 878, 910, 929, 1001, 1009, 1012, 1021, 1024, 1035, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1055, 1056, 1057, 1058, 1059], "pairwise_bayesian": 275, "pairwise_bayesian_df": 275, "pairwise_comp_df": 275, "pairwise_dist": [2, 75, 333, 397, 415, 426, 451, 453, 457, 464, 696, 704, 770, 779, 787, 788, 800, 801, 856, 858, 860, 864, 1007, 1040, 1044, 1046, 1048, 1049, 1051, 1052, 1057, 1058, 1059], "pairwise_dist_chunk_s": [475, 910], "pairwise_distance_funct": [700, 704, 786, 789, 1012], "pairwise_distances_argmin": [2, 83, 99, 329, 788, 1048, 1054, 1055, 1056, 1057], "pairwise_distances_argmin_min": [2, 329, 787, 1043, 1048, 1054, 1055, 1056, 1057], "pairwise_distances_chunk": [2, 370, 786, 1048, 1051, 1057], "pairwise_indices_": 840, "pairwise_kernel": [2, 397, 425, 459, 469, 651, 773, 878, 1007, 1040, 1047, 1057], "pairwise_kernel_funct": [628, 651, 782], "pairwise_kernels_kwarg": 628, "pairwise_t_test": 275, "pairwisedistancesreduct": 371, "pairwisekernel": [2, 425], "paislei": [420, 544], "pakdd": 415, "pal": [1048, 1054], "palac": 83, "palacio": 1053, "palafox": 1040, "palett": [83, 190, 275], "palevioletr": [231, 302, 345], "palioura": [847, 1011], "paliw": 1048, "palladium": 1033, "palmol": 51, "pami": [380, 415, 733], "pamnani": 1048, "pan": 403, "panchal": 1052, "pancholi": 1047, "panda": [2, 43, 51, 62, 104, 105, 106, 137, 143, 144, 147, 150, 153, 155, 171, 179, 185, 189, 190, 191, 192, 193, 197, 202, 206, 217, 221, 225, 235, 254, 255, 258, 265, 269, 273, 275, 276, 278, 286, 287, 289, 293, 321, 322, 323, 325, 328, 329, 353, 357, 358, 377, 378, 381, 382, 383, 385, 386, 391, 397, 401, 408, 416, 439, 449, 450, 452, 454, 456, 471, 473, 475, 489, 490, 491, 492, 496, 497, 498, 500, 504, 508, 509, 510, 512, 513, 518, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 569, 570, 574, 575, 576, 577, 578, 589, 590, 591, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 640, 641, 643, 646, 647, 648, 649, 650, 696, 697, 700, 808, 811, 812, 822, 838, 856, 861, 864, 868, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 910, 934, 998, 999, 1019, 1028, 1029, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "pandata": [1055, 1056], "pandei": [1047, 1052], "panel": [266, 301, 316, 421, 1028], "panga": [1055, 1056], "panico": [1048, 1052], "pankaj": 1052, "pano": 1046, "panpiort8": [1050, 1052], "paolo": [0, 405, 1040, 1044, 1050, 1058], "papadopoulo": [1053, 1054, 1055, 1056, 1057], "papapanagiot": 1047, "paper": [0, 172, 195, 269, 275, 380, 389, 395, 415, 417, 422, 449, 456, 485, 512, 542, 549, 571, 649, 666, 674, 675, 679, 684, 687, 700, 796, 849, 858, 861, 904, 905, 1005, 1009, 1012, 1015, 1024, 1040, 1047, 1048], "paper355": 679, "papier": [672, 693, 694], "par": 1019, "paraboloid": 1005, "paradi": 1055, "paradigm": 1005, "paragraph": [423, 511], "paralel": 1056, "parallel": [2, 53, 136, 141, 143, 144, 146, 187, 191, 192, 193, 219, 276, 326, 327, 329, 351, 365, 369, 375, 381, 383, 384, 386, 387, 395, 397, 416, 424, 426, 427, 444, 451, 453, 455, 456, 457, 459, 464, 465, 468, 471, 474, 479, 503, 539, 541, 542, 543, 545, 547, 549, 550, 551, 553, 554, 556, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 597, 602, 610, 615, 616, 618, 640, 642, 647, 666, 696, 697, 698, 699, 700, 701, 702, 789, 808, 811, 812, 814, 819, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 871, 874, 907, 908, 975, 978, 1029, 1030, 1035, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1059], "parallel_backend": [2, 371, 426, 444, 451, 453, 455, 457, 459, 464, 465, 468, 471, 474, 479, 539, 543, 544, 545, 547, 550, 551, 553, 554, 556, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 602, 610, 615, 616, 618, 640, 642, 647, 655, 659, 661, 663, 665, 666, 667, 669, 671, 673, 674, 676, 684, 687, 696, 697, 698, 699, 700, 701, 702, 782, 786, 789, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 854, 855, 858, 860, 862, 863, 865, 866, 871, 874, 907, 908, 1048, 1058], "parallel_batch_queri": 296, "parallel_coordin": 276, "parallel_help": 1050, "parallelbackendbas": 978, "parallelis": [276, 475, 910, 1047], "param": [79, 90, 96, 97, 105, 148, 149, 151, 152, 237, 250, 251, 273, 275, 283, 287, 300, 312, 332, 379, 383, 385, 397, 406, 422, 425, 429, 432, 438, 439, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 820, 822, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 964, 965, 968, 997, 998, 1046, 1050, 1051, 1053, 1054, 1057, 1058, 1059], "param1": 385, "param2": 385, "param3": 385, "param_": 143, "param_c": [286, 808], "param_classifier__c": 105, "param_covariance_typ": 265, "param_degre": 808, "param_dist": [283, 287, 327], "param_distribut": [105, 174, 276, 283, 287, 327, 396, 812, 820, 822, 1056], "param_gamma": [286, 808, 822], "param_grid": [43, 45, 105, 106, 107, 108, 143, 150, 250, 256, 265, 269, 273, 274, 275, 279, 280, 283, 286, 293, 298, 318, 332, 346, 397, 406, 416, 422, 750, 808, 811, 819, 820, 998, 1009], "param_kernel": [808, 822], "param_list": 820, "param_min_samples_split": 279, "param_n_compon": 265, "param_nam": [143, 276, 291, 331, 353, 406, 831, 839, 1004], "param_pca__n_compon": 107, "param_preprocessor__cat__selector__percentil": 105, "param_preprocessor__num__imputer__strategi": 105, "param_rang": [291, 331, 353, 831, 839, 1004, 1056], "param_reduce_dim__n_compon": 274, "param_valu": 46, "paramet": [2, 25, 27, 43, 44, 48, 49, 50, 53, 54, 64, 70, 79, 89, 90, 93, 95, 96, 97, 105, 106, 107, 112, 114, 115, 121, 123, 135, 137, 141, 143, 146, 147, 148, 151, 152, 153, 163, 169, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 197, 198, 199, 200, 202, 204, 205, 206, 208, 217, 219, 221, 222, 225, 234, 235, 241, 242, 244, 246, 249, 250, 251, 260, 261, 262, 263, 265, 266, 268, 269, 274, 275, 276, 277, 279, 280, 283, 286, 287, 288, 291, 293, 296, 298, 299, 302, 303, 309, 311, 312, 314, 316, 317, 318, 321, 325, 326, 328, 329, 330, 331, 339, 341, 343, 348, 350, 351, 352, 354, 355, 357, 358, 359, 361, 362, 363, 364, 366, 370, 371, 372, 375, 376, 378, 386, 388, 390, 391, 392, 395, 406, 410, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1025, 1028, 1029, 1030, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "parameter": [361, 425, 622, 623, 630, 631, 805, 806, 1005, 1006, 1014, 1019, 1025], "parameter_grid": 276, "parameter_nam": [575, 576, 577, 578], "parametergrid": [2, 808, 1042, 1048], "parameters_str": 90, "parametersampl": [2, 822, 1042, 1048, 1052], "parametr": [2, 48, 61, 62, 115, 247, 300, 320, 328, 413, 416, 421, 422, 444, 559, 561, 643, 693, 704, 888, 900, 950, 951, 1005, 1008, 1011, 1012, 1019, 1022, 1025, 1048, 1050, 1053], "parametrize_with_check": [2, 325, 385, 931, 950, 1050, 1051, 1059], "params_str": 287, "parcel": [89, 102, 415], "parch": [192, 330], "pardeep": 1052, "parel": 1044, "parent": [47, 189, 251, 365, 383, 387, 397, 415, 449, 470, 965, 966, 1040, 1057], "parent_hourly_wag": 189, "parenthes": 946, "parenthesi": [76, 383], "paresh": [1049, 1050], "pareto": 219, "pargent": 1019, "pari": [0, 380, 416, 473, 772, 880, 1020, 1054], "pariet": [1033, 1040], "parikh": [1049, 1054, 1055, 1056, 1057, 1058], "parimi": 1058, "paris_in_radian": 772, "paristech": 0, "pariti": 1025, "parizi": 1055, "park": [1045, 1050, 1052, 1055, 1056], "parmet": 1057, "parmind": 1047, "parquet": 52, "parra": 1048, "parri": [1045, 1046, 1047], "parrot": 357, "pars": [47, 55, 370, 377, 378, 384, 516], "parse_vers": [151, 193, 325, 678], "parser": [47, 153, 269, 289, 325, 329, 504, 1055, 1056], "parsifalxu": 1058, "parsimoni": [420, 1019], "parsing_tim": 47, "parson": [1051, 1053], "part": [0, 44, 67, 71, 86, 96, 105, 115, 123, 126, 140, 143, 146, 150, 156, 163, 164, 165, 169, 179, 187, 197, 251, 253, 263, 269, 270, 272, 290, 311, 318, 321, 323, 359, 372, 378, 380, 383, 385, 389, 391, 396, 397, 401, 403, 411, 413, 414, 415, 419, 420, 422, 423, 425, 453, 456, 501, 502, 503, 529, 539, 545, 550, 582, 592, 593, 594, 621, 633, 801, 877, 895, 897, 898, 899, 900, 901, 902, 903, 998, 999, 1001, 1006, 1010, 1027, 1028, 1029, 1030, 1031, 1033, 1035, 1040, 1048, 1049, 1051, 1053, 1055, 1059], "part3": 419, "part_of_speech": 423, "partev": [1054, 1055, 1056, 1057], "parthiv": 1052, "parti": [235, 293, 331, 371, 382, 385, 395, 409, 810, 817, 1040, 1051, 1056, 1057, 1059], "partial": [2, 43, 47, 51, 85, 116, 117, 155, 187, 188, 235, 243, 327, 330, 380, 383, 397, 400, 417, 418, 420, 422, 425, 471, 489, 490, 491, 492, 504, 509, 542, 544, 549, 570, 597, 640, 641, 665, 796, 838, 840, 841, 868, 869, 870, 873, 885, 886, 889, 892, 921, 1006, 1013, 1023, 1030, 1035, 1037, 1041, 1048, 1049, 1053, 1057], "partial_correl": 51, "partial_depend": [2, 191, 640, 1016, 1041, 1049, 1050, 1051, 1052, 1055, 1056], "partial_fit": [47, 85, 123, 329, 372, 385, 397, 415, 420, 449, 456, 542, 544, 545, 546, 597, 605, 666, 667, 674, 675, 676, 684, 685, 686, 840, 841, 844, 845, 847, 848, 849, 850, 851, 868, 869, 870, 881, 882, 892, 912, 997, 1005, 1011, 1013, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051, 1053, 1054, 1055, 1056, 1057], "partial_fit_": 1053, "partial_fit_classifi": 47, "partial_fit_param": [605, 840, 841, 844, 845], "partialdependencedisplai": [2, 153, 155, 191, 255, 326, 327, 328, 330, 332, 390, 641, 1016, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "particip": [382, 383, 398, 1033], "particl": 1014, "particular": [0, 43, 50, 53, 64, 72, 74, 75, 95, 105, 111, 121, 128, 131, 147, 150, 153, 154, 178, 185, 190, 191, 217, 219, 225, 249, 269, 272, 276, 278, 284, 296, 305, 309, 316, 325, 326, 329, 358, 359, 366, 370, 371, 377, 378, 381, 382, 383, 385, 387, 388, 389, 391, 392, 396, 397, 401, 415, 416, 419, 420, 422, 423, 424, 425, 453, 476, 480, 504, 552, 571, 617, 661, 666, 671, 680, 682, 692, 695, 720, 736, 793, 844, 937, 939, 999, 1001, 1003, 1005, 1009, 1012, 1013, 1014, 1015, 1017, 1019, 1029, 1033, 1040, 1043, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1057], "particularli": [58, 67, 104, 105, 108, 132, 156, 190, 218, 246, 275, 289, 318, 326, 333, 355, 366, 370, 383, 385, 392, 397, 415, 416, 418, 421, 423, 504, 814, 831, 849, 956, 977, 1005, 1006, 1009, 1011, 1017, 1029, 1033, 1040, 1045, 1047, 1048, 1054], "partit": [81, 101, 104, 154, 156, 275, 313, 397, 412, 413, 415, 419, 422, 456, 458, 460, 469, 519, 565, 566, 567, 568, 571, 572, 573, 712, 713, 723, 794, 860, 920, 921, 922, 923, 1008, 1012, 1015, 1019, 1025], "partli": [81, 409, 777], "partnership": 1033, "parvu": 380, "pasbi": [1047, 1048], "pascal": 1009, "pascual": 1043, "paskov": 1047, "pass": [2, 43, 46, 47, 58, 59, 70, 73, 143, 153, 155, 169, 199, 202, 218, 245, 247, 248, 251, 254, 255, 257, 265, 269, 273, 276, 323, 325, 328, 333, 351, 359, 366, 370, 371, 372, 378, 383, 384, 385, 388, 389, 390, 391, 392, 395, 397, 406, 409, 411, 414, 415, 416, 419, 420, 422, 423, 425, 426, 427, 432, 433, 437, 438, 444, 445, 447, 449, 450, 451, 453, 454, 455, 456, 457, 459, 461, 464, 466, 467, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 495, 498, 500, 503, 504, 505, 511, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 589, 590, 596, 597, 598, 599, 601, 602, 605, 610, 615, 616, 618, 619, 625, 628, 634, 639, 640, 642, 643, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 719, 740, 741, 750, 771, 782, 786, 787, 788, 789, 796, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 883, 884, 885, 886, 887, 889, 891, 892, 893, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 931, 932, 937, 938, 939, 946, 950, 951, 955, 956, 958, 960, 963, 965, 968, 969, 978, 979, 982, 992, 997, 998, 999, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1016, 1019, 1022, 1023, 1024, 1029, 1033, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "passiv": [2, 47, 224, 674, 675, 1031, 1035, 1041], "passiveaggress": [372, 423], "passiveaggressiveclassifi": [2, 47, 224, 370, 372, 1005, 1010, 1041, 1044, 1045, 1047, 1048, 1051, 1053, 1058], "passiveaggressiveregressor": [2, 372, 1005, 1041, 1044, 1047, 1048, 1051, 1053, 1058], "passo": [0, 405, 1040, 1041], "passthrough": [43, 106, 147, 190, 191, 217, 235, 254, 322, 330, 416, 471, 474, 575, 576, 871, 872, 1019, 1049, 1051, 1054, 1055, 1057], "passthrough_numer": [217, 235], "passthroughpassthrough": [191, 322], "past": [50, 52, 387, 388, 391, 395, 398, 419, 420, 422, 546, 563, 564, 686, 1033, 1056], "pat": [636, 999], "patch": [2, 70, 85, 254, 260, 261, 262, 265, 266, 270, 378, 395, 420, 422, 563, 564, 591, 592, 595, 1040, 1048], "patch_height": [591, 592, 595], "patch_siz": [85, 126, 423, 591, 592, 595], "patch_width": [591, 592, 595], "patchextractor": [2, 423, 1056], "patel": [1048, 1050, 1051, 1052, 1054], "path": [2, 47, 55, 187, 196, 202, 203, 206, 208, 211, 221, 233, 353, 361, 377, 381, 383, 387, 391, 392, 397, 409, 448, 452, 457, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 516, 517, 556, 565, 566, 571, 572, 573, 574, 601, 602, 605, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 689, 690, 691, 692, 693, 694, 696, 872, 873, 919, 920, 921, 922, 923, 962, 998, 1005, 1006, 1015, 1029, 1030, 1040, 1041, 1044, 1046, 1047, 1049, 1050, 1052, 1053, 1055, 1056], "path_length": 962, "path_method": [696, 1006], "pathak": [1055, 1056], "patheffect": 75, "pathlib": [47, 1055, 1056], "pathlik": [504, 1056], "patholog": [87, 1008, 1046], "pathwai": 384, "pati": 1042, "patienc": [391, 397], "patient": [46, 161, 172, 186, 380, 391, 414, 419, 1005], "patil": [1054, 1057], "paton": 1053, "patric": [1052, 1053], "patricio": 1054, "patrick": [1047, 1048, 1053, 1054, 1057, 1058], "patrini": [1045, 1046, 1047], "pattaniyil": 1050, "pattern": [43, 52, 58, 98, 115, 120, 122, 130, 174, 185, 187, 191, 202, 221, 251, 254, 328, 350, 357, 358, 359, 366, 380, 383, 385, 398, 412, 415, 416, 420, 422, 423, 455, 471, 473, 512, 540, 542, 549, 563, 564, 646, 716, 733, 749, 777, 796, 797, 805, 892, 1001, 1003, 1005, 1009, 1010, 1016, 1024, 1026, 1029, 1030, 1033, 1052], "patterson": [502, 1045], "paul": [378, 1043, 1046, 1047, 1048, 1049, 1053, 1054], "paula": [1050, 1051, 1058], "pauli": 1045, "paulo": [1047, 1053, 1055], "paus": 81, "pava": 643, "pavel": [1041, 1049], "pavlo": [1048, 1049], "pavlyk": [1048, 1049, 1050, 1051], "pawel": 1049, "pawe\u0142": [1043, 1047, 1052, 1053], "payn": 1050, "pazzani": 64, "pb_q": [328, 1005], "pbl": 150, "pc": [57, 339, 359, 378], "pca": [2, 11, 42, 45, 68, 69, 80, 86, 101, 103, 104, 106, 108, 109, 118, 122, 125, 132, 133, 164, 187, 214, 238, 240, 247, 249, 252, 256, 274, 283, 286, 296, 300, 305, 314, 328, 366, 375, 385, 397, 411, 415, 416, 421, 431, 480, 483, 491, 504, 510, 512, 522, 540, 541, 542, 543, 547, 548, 551, 552, 557, 651, 666, 696, 698, 700, 704, 808, 834, 838, 861, 868, 871, 872, 874, 882, 890, 892, 1001, 1003, 1006, 1012, 1019, 1023, 1025, 1030, 1034, 1035, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1053, 1054, 1055, 1057, 1058], "pca0": 431, "pca1": [416, 431], "pca2": [416, 431], "pca_2": 118, "pca__n_compon": 107, "pca_back_proj_ax": 128, "pca_estim": 123, "pca_proj_ax": 128, "pca_scor": 130, "pcapca": [106, 256], "pcd": [868, 1014], "pchelintsev": 1052, "pclass": [105, 192, 258, 325, 329, 330], "pcolor": 175, "pcolormesh": [70, 156, 165, 201, 299, 304, 342, 346, 350, 639], "pcr": [118, 418], "pd": [43, 51, 62, 105, 106, 137, 143, 144, 150, 155, 171, 185, 189, 190, 191, 192, 193, 197, 202, 206, 217, 221, 225, 235, 255, 258, 265, 273, 275, 276, 278, 286, 287, 289, 293, 321, 322, 323, 328, 329, 353, 357, 358, 388, 397, 416, 471, 473, 635, 636, 637, 638, 640, 786, 936, 938, 939, 998, 999, 1016, 1019, 1051, 1053, 1054, 1055, 1057], "pd2000": 1009, "pd_": 1016, "pd_line_kw": 640, "pd_result": 640, "pdb": 391, "pdbcl": 391, "pdf": [172, 275, 301, 316, 380, 383, 415, 424, 449, 456, 539, 542, 545, 549, 649, 652, 657, 666, 672, 674, 675, 679, 684, 687, 690, 691, 693, 694, 700, 849, 861, 868, 905, 907, 1005, 1022, 1025, 1032, 1036, 1040], "pdist": [700, 786, 789], "pdp": [2, 640, 1016, 1054], "pdp_lim": 640, "pdp_line_kw": 640, "pe": 591, "pe_tran": 591, "peai": 1049, "peak": [43, 52, 64, 191, 413, 419, 1054], "pear": 1010, "pearson": [2, 614, 617, 1053], "pearu": 1040, "pedersen": [1044, 1056], "pedigo": [1052, 1053], "pedregosa": [0, 405, 1040, 1041, 1042, 1043, 1044, 1046], "pedro": [1041, 1043, 1044, 1048], "peek": [191, 383, 1016], "peer": 1033, "peev": [1048, 1051], "pegaso": 1023, "pei": [415, 1047], "peixinho": 1054, "pelennor": 1054, "penal": [2, 53, 66, 115, 158, 202, 206, 210, 217, 221, 233, 235, 321, 353, 415, 417, 420, 422, 424, 476, 477, 478, 479, 480, 481, 482, 483, 485, 569, 570, 655, 660, 661, 669, 671, 684, 713, 723, 742, 794, 803, 885, 912, 913, 919, 1005, 1009, 1011, 1013, 1023, 1024], "penalis": [215, 232, 704], "penalti": [2, 25, 46, 49, 66, 115, 187, 196, 197, 202, 205, 206, 210, 217, 221, 224, 232, 233, 246, 283, 311, 328, 339, 351, 357, 370, 391, 395, 417, 420, 424, 478, 479, 480, 481, 482, 483, 485, 510, 539, 545, 546, 547, 548, 550, 551, 555, 556, 605, 651, 654, 655, 656, 657, 660, 661, 662, 665, 666, 667, 668, 669, 670, 676, 677, 678, 680, 684, 686, 688, 689, 695, 822, 892, 912, 913, 915, 917, 918, 919, 998, 1005, 1008, 1013, 1019, 1023, 1024, 1030, 1042, 1045, 1047, 1049, 1050, 1052, 1053, 1055, 1056], "peng": [687, 1005, 1046, 1047, 1048, 1050, 1052], "peopl": [2, 45, 104, 190, 253, 278, 357, 358, 371, 372, 378, 380, 382, 383, 387, 398, 421, 501, 502, 649, 849, 1028], "pep": [51, 391, 1040], "pep073": 384, "pep257": 397, "pep440": 387, "pep8": [385, 387, 391], "pepsi": 51, "per": [43, 49, 58, 70, 83, 88, 99, 142, 143, 147, 179, 181, 190, 191, 217, 232, 235, 254, 258, 261, 269, 271, 282, 284, 316, 322, 327, 332, 333, 353, 357, 359, 370, 378, 379, 383, 388, 389, 392, 395, 397, 413, 415, 419, 420, 421, 422, 423, 425, 453, 455, 457, 464, 468, 471, 475, 494, 504, 508, 510, 511, 512, 516, 518, 520, 523, 531, 540, 542, 543, 544, 547, 549, 551, 557, 558, 569, 570, 577, 591, 596, 599, 618, 619, 640, 641, 649, 650, 666, 667, 674, 675, 676, 679, 681, 682, 683, 684, 686, 700, 704, 721, 724, 728, 730, 749, 762, 766, 767, 789, 791, 805, 806, 833, 840, 841, 842, 844, 845, 848, 850, 868, 871, 877, 879, 881, 882, 885, 886, 892, 893, 910, 912, 913, 914, 915, 916, 917, 918, 943, 944, 956, 983, 998, 1001, 1005, 1008, 1009, 1010, 1013, 1016, 1023, 1024, 1025, 1029, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1052, 1053, 1054, 1056, 1057], "perc": 270, "percal": 389, "percent": [137, 500, 608, 1022], "percent10": [254, 500], "percentag": [2, 52, 89, 131, 147, 208, 235, 270, 278, 281, 419, 424, 542, 549, 552, 557, 601, 602, 656, 677, 688, 711, 742, 754, 826, 827, 828, 842, 924, 926, 1010, 1025, 1042, 1046, 1052, 1053], "percentil": [2, 49, 52, 105, 150, 153, 254, 258, 316, 370, 600, 603, 604, 606, 607, 608, 611, 614, 640, 641, 756, 1019, 1045, 1053], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 270, "percept": [167, 191, 1016], "perceptron": [2, 47, 67, 146, 156, 165, 176, 178, 187, 224, 227, 233, 255, 310, 318, 319, 340, 351, 372, 395, 423, 522, 523, 530, 674, 684, 838, 868, 869, 870, 873, 892, 1007, 1010, 1014, 1023, 1030, 1031, 1035, 1044, 1046, 1047, 1048, 1052], "percol": 74, "perdisci": [415, 449], "perdok": 1055, "pere": 1057, "peredachi": [615, 616], "pereira": [1045, 1048, 1049, 1059], "peretti": 1055, "perez": [1048, 1055], "perf_count": 254, "perfect": [58, 63, 72, 104, 114, 126, 128, 213, 217, 357, 358, 383, 415, 419, 561, 562, 698, 702, 712, 713, 716, 725, 734, 736, 739, 745, 751, 764, 765, 793, 794, 803, 1005, 1009, 1012, 1024, 1033, 1054], "perfectli": [63, 64, 72, 278, 290, 350, 400, 415, 422, 445, 575, 614, 712, 713, 723, 725, 744, 745, 765, 794, 803, 885, 1004, 1006, 1009, 1024, 1053, 1054], "perform": [2, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 75, 83, 84, 88, 92, 93, 94, 95, 96, 97, 99, 101, 102, 104, 105, 108, 111, 118, 126, 132, 135, 137, 143, 145, 147, 148, 149, 151, 152, 153, 157, 158, 163, 167, 170, 171, 172, 175, 183, 185, 186, 187, 190, 191, 192, 193, 195, 202, 206, 217, 219, 221, 223, 224, 225, 234, 235, 238, 239, 241, 244, 249, 252, 254, 261, 262, 265, 267, 269, 270, 271, 272, 273, 275, 276, 277, 280, 281, 283, 284, 286, 288, 289, 291, 293, 295, 296, 309, 314, 316, 318, 320, 322, 323, 325, 331, 332, 334, 336, 337, 346, 349, 350, 353, 357, 359, 366, 369, 371, 372, 378, 380, 385, 386, 387, 389, 391, 392, 395, 396, 397, 400, 406, 409, 410, 411, 412, 413, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 433, 437, 447, 449, 450, 451, 453, 454, 455, 457, 459, 461, 462, 466, 468, 475, 476, 489, 490, 491, 492, 502, 510, 520, 523, 539, 540, 541, 543, 545, 550, 551, 552, 553, 554, 556, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 589, 590, 591, 596, 597, 598, 599, 602, 609, 610, 611, 618, 619, 635, 638, 639, 646, 648, 653, 659, 662, 663, 664, 666, 672, 673, 674, 675, 676, 678, 681, 683, 684, 685, 686, 690, 691, 693, 695, 697, 698, 701, 702, 705, 711, 712, 713, 715, 716, 720, 721, 734, 737, 738, 746, 748, 750, 763, 764, 765, 786, 791, 792, 794, 795, 796, 802, 803, 804, 805, 806, 808, 811, 812, 819, 820, 822, 826, 833, 834, 835, 837, 838, 841, 844, 845, 847, 848, 849, 850, 851, 852, 853, 859, 861, 867, 868, 869, 870, 872, 873, 875, 878, 879, 881, 882, 884, 885, 886, 888, 889, 892, 893, 895, 897, 898, 899, 901, 902, 903, 907, 908, 910, 914, 915, 916, 917, 918, 920, 921, 922, 923, 938, 939, 981, 992, 997, 998, 999, 1001, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "performancetip": 389, "perhap": [104, 146, 380, 382, 391, 397, 421, 1029], "perimet": [172, 380], "period": [2, 52, 153, 174, 179, 183, 387, 397, 398, 413, 425, 623, 829, 891, 1048, 1053, 1055], "periodic_spline_transform": 43, "periodicity_bound": [174, 179, 183, 623], "peripheri": 415, "perla": 1043, "perm_scores_iri": 281, "perm_scores_rand": 281, "perm_sorted_idx": 193, "permalink": 387, "perman": 391, "permiss": [382, 387, 398, 401, 402, 1033, 1055], "permit": [416, 474, 596, 597, 599, 808, 811, 812, 822, 834, 873, 874, 1009, 1010, 1011, 1046], "permut": [2, 58, 59, 72, 114, 145, 151, 165, 167, 187, 188, 233, 267, 275, 320, 323, 338, 400, 410, 415, 422, 471, 504, 508, 512, 567, 568, 572, 573, 635, 638, 642, 687, 712, 713, 725, 744, 745, 763, 765, 803, 825, 827, 837, 838, 872, 886, 917, 920, 921, 956, 977, 979, 982, 1009, 1023, 1030, 1035, 1040, 1046, 1053, 1055], "permutation_import": [2, 144, 145, 151, 192, 193, 325, 422, 561, 562, 565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923, 1017, 1050, 1052, 1053, 1057], "permutation_scor": 837, "permutation_test_scor": [2, 281, 406, 419, 1040, 1047, 1052, 1059], "permuted_categori": 323, "perp_tol": 544, "perpendicular": [70, 351], "perperogl": 1019, "perplex": [187, 236, 237, 239, 241, 296, 522, 533, 544, 700, 1006, 1030, 1045, 1047, 1054], "perri": 1050, "perrin": 1046, "perrot": [0, 1040], "persian": 1028, "persist": [391, 395, 420, 453, 618, 619, 868, 1014, 1028, 1035, 1046, 1049], "persola": 1048, "person": [45, 190, 269, 278, 378, 382, 419, 423, 501, 502, 503, 1019, 1048], "personal_statu": 269, "perspect": [90, 95, 217, 289, 370, 378, 395, 398, 538, 651, 912, 1002], "pertin": 217, "perturb": [190, 234, 314, 420, 422, 1008], "peru": [50, 309, 378, 506], "pervas": [366, 383], "pessimist": [149, 422], "pessoa": 1053, "pestrickland": 1046, "pet": [328, 332, 796, 1009], "pet_cat": 328, "pet_dog": 328, "pet_fish": 328, "petal": [80, 120, 131, 133, 146, 258, 327, 330, 380, 416, 925, 1025], "petal_col": 330, "petar": 1055, "pete": [1047, 1051, 1052], "peter": [0, 98, 405, 415, 455, 457, 464, 657, 800, 801, 1005, 1009, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1055, 1056, 1057], "peterlongo": 1057, "peterson": [1040, 1042], "petfood": 1033, "petrov": [1047, 1048, 1056], "petrushev": 1049, "pe\u00f1a": 1044, "pfaffel": 1053, "pfahring": [843, 1010], "pfe": 51, "pfister": 1019, "pfizer": 51, "pft": 218, "pg": [51, 389, 657, 1005, 1045], "pg_i": 657, "pgithub": 1052, "ph": 1052, "pham": [195, 1001, 1047], "phan": 420, "pharmaceut": 380, "phase": [43, 202, 211, 370, 635, 1001, 1006, 1012, 1033, 1048, 1050], "phase_nois": 75, "phd": [0, 415, 422, 1029, 1033], "phenol": 380, "phenomena": 179, "phenomenon": [358, 1019], "phi": [75, 420, 422, 751, 878, 1001, 1009, 1019, 1024], "phi_coeffici": 1009, "phil": [1045, 1056], "philipp": [1042, 1043, 1046, 1055], "phillip": [2, 50, 309, 378, 506], "phlypo": 1043, "phongpanagnam": 1053, "phongpanangam": 1053, "photo": 83, "photogrammetr": 1005, "php": 1009, "phrase": 423, "phy": [615, 616], "phyo": 1054, "physic": [2, 104, 143, 371, 513, 973, 1005, 1056], "physician": 414, "physiolog": [278, 380], "pi": [43, 53, 70, 74, 75, 124, 132, 155, 157, 167, 174, 198, 202, 204, 211, 218, 239, 260, 261, 262, 265, 266, 290, 309, 326, 332, 364, 401, 421, 425, 524, 525, 526, 623, 650, 1003, 1004, 1005, 1011], "pianomania": 1045, "pick": [83, 90, 95, 193, 252, 283, 329, 335, 378, 383, 387, 415, 422, 450, 467, 531, 681, 922, 923, 998, 1005, 1006, 1008, 1023, 1051], "pickl": [387, 397, 423, 597, 852, 853, 1028, 1029, 1035, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057], "pickleabl": [876, 1046], "pickup": 1048, "pico": [1043, 1044], "pict": [842, 1010], "pictur": [51, 55, 59, 71, 83, 101, 187, 248, 266, 378, 398, 415, 420, 423, 469, 501, 502, 529, 1029, 1030], "piec": [70, 82, 218, 371, 1008], "piecewis": [132, 328, 412, 1000, 1005, 1019, 1025], "pierr": [1040, 1048, 1049, 1051, 1053, 1055, 1057, 1058], "pierreablin": 1048, "pierreattard": [1053, 1054], "pierretallott": [1048, 1049, 1050], "pierron": 1043, "piet": [1054, 1055], "pieter": [55, 1046, 1047, 1054], "pietro": [1040, 1043, 1057], "pietruh": 1048, "pig": 791, "pillow": [383, 401, 408], "pim": 1049, "pin": [389, 409], "pinaki": 1048, "pinbal": [2, 52, 150, 153, 328, 422, 570, 678, 731, 756, 1005, 1053, 1054], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [905, 1021, 1046, 1047], "pink": 198, "pinki": 1054, "pinot": 322, "pinto": 1040, "pintor": 1051, "pinvh": [1047, 1049], "piontek": 1056, "piotr": [1048, 1049, 1058], "pip": [296, 325, 326, 327, 328, 329, 330, 331, 332, 333, 371, 381, 383, 387, 389, 391, 401, 409, 411, 1025], "pip3": [381, 401], "pipe": [106, 107, 147, 170, 251, 256, 274, 322, 327, 328, 396, 406, 416, 423, 598, 872, 897, 898, 900, 901, 902, 903, 998, 1019], "pipe_sgd": 231, "pipegraph": 395, "pipelin": [2, 7, 43, 67, 89, 93, 105, 108, 109, 118, 142, 143, 147, 164, 166, 168, 170, 171, 172, 185, 186, 191, 192, 195, 197, 204, 206, 217, 218, 223, 231, 235, 238, 243, 244, 245, 247, 249, 254, 255, 258, 267, 269, 272, 274, 275, 282, 283, 286, 289, 290, 296, 298, 299, 304, 305, 311, 314, 318, 321, 323, 325, 326, 327, 328, 329, 330, 331, 339, 357, 358, 366, 370, 375, 377, 378, 383, 386, 397, 406, 409, 419, 423, 425, 429, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 495, 510, 523, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 613, 615, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 705, 706, 708, 709, 710, 721, 805, 806, 807, 808, 809, 810, 811, 812, 815, 817, 822, 826, 830, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 999, 1001, 1005, 1012, 1013, 1018, 1019, 1023, 1024, 1028, 1029, 1030, 1031, 1033, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1057], "pipelineifittedpipelin": [105, 142, 169, 190, 192, 245, 255, 258, 282, 329], "pipelineinot": [158, 246, 256, 276, 289, 322, 326], "pipelinepipelin": [105, 106, 256, 269], "pita": 1057, "pitfal": [172, 187, 188, 189, 192, 213, 221, 222, 275, 327, 396, 397, 400, 419, 472, 474, 504, 661, 680, 681, 709, 761, 823, 835, 838, 873, 885, 892, 1005, 1030, 1035], "pitkin": [191, 1016], "pitt": 57, "pitter": 1055, "pivot": [81, 286, 287], "pivot_t": 286, "pixel": [2, 44, 45, 53, 58, 68, 82, 83, 88, 123, 136, 144, 170, 187, 192, 193, 195, 248, 273, 313, 314, 380, 415, 420, 422, 423, 424, 501, 502, 503, 572, 593, 594, 615, 616, 642, 1012, 1014, 1025, 1030], "pixelwis": 123, "pixi": 409, "piyg": 318, "pkdd": 0, "pkg": 381, "pkgsrc": 401, "pkl": 409, "pl": [2, 52, 107, 118, 179, 332, 380, 418, 489, 490, 491, 492, 1045], "place": [2, 43, 95, 245, 255, 300, 370, 383, 384, 385, 388, 390, 398, 413, 423, 425, 448, 449, 452, 453, 489, 490, 491, 523, 589, 598, 636, 638, 639, 776, 789, 805, 895, 897, 898, 899, 900, 901, 902, 903, 987, 988, 1028, 1040, 1047, 1050, 1051, 1053, 1057, 1058, 1059], "placehold": [57, 387, 635, 636, 637, 638, 823, 824, 827, 828, 997, 999], "plagre": 1047, "plai": [124, 151, 176, 201, 226, 268, 307, 342, 343, 370], "plain": [348, 425, 665, 1023], "plan": [51, 377, 381, 383, 384, 398, 409, 1019, 1043], "planar": 415, "plane": [51, 172, 229, 249, 302, 348, 350, 351, 355, 380, 459, 469, 1003, 1005, 1024], "plant": [281, 284, 285, 376, 1009, 1035], "plasma": 316, "plasma_r": 316, "plateau": [143, 148, 171, 269, 273, 277], "platform": [386, 397, 398, 1028, 1032, 1033, 1045, 1048, 1049, 1051, 1053, 1054, 1057, 1058], "platt": [413, 444, 914, 915, 917, 918, 1024], "platypu": 357, "pldtc325": 1047, "pleas": [0, 2, 51, 55, 63, 105, 106, 142, 144, 145, 151, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 221, 245, 246, 247, 249, 251, 254, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 296, 306, 314, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 337, 350, 365, 371, 377, 378, 381, 383, 384, 385, 387, 391, 395, 396, 397, 401, 406, 409, 411, 415, 422, 423, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 504, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 635, 636, 637, 638, 639, 640, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 835, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 901, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 1009, 1013, 1019, 1023, 1024, 1028, 1029, 1032, 1040, 1043, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "pleasant": [382, 1033], "plenti": 62, "plgreenliru": 1051, "plo": [377, 615, 616], "plot": [2, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 80, 89, 90, 91, 93, 94, 95, 96, 97, 100, 106, 107, 108, 109, 112, 113, 114, 118, 119, 123, 126, 127, 130, 131, 132, 133, 136, 137, 139, 140, 141, 142, 144, 148, 149, 150, 152, 153, 155, 156, 157, 165, 167, 168, 170, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 192, 193, 195, 196, 200, 201, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 227, 229, 230, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 247, 248, 250, 252, 253, 258, 260, 261, 262, 264, 266, 267, 268, 269, 270, 275, 276, 278, 280, 281, 285, 286, 287, 289, 290, 293, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 323, 326, 329, 330, 331, 332, 336, 337, 340, 341, 342, 346, 347, 348, 351, 352, 353, 354, 355, 358, 359, 360, 361, 363, 364, 365, 383, 386, 392, 395, 400, 401, 410, 413, 415, 417, 419, 421, 422, 445, 448, 453, 457, 463, 471, 478, 504, 509, 510, 512, 520, 531, 561, 565, 568, 570, 572, 573, 577, 578, 618, 630, 639, 640, 641, 665, 666, 680, 684, 705, 706, 708, 709, 710, 711, 726, 735, 743, 769, 790, 792, 795, 796, 797, 808, 814, 825, 831, 833, 834, 835, 836, 839, 841, 850, 854, 870, 873, 885, 886, 887, 889, 892, 912, 914, 917, 920, 921, 926, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1013, 1015, 1023, 1024, 1025, 1028, 1029, 1030, 1035, 1041, 1043, 1044, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "plot_": [328, 401], "plot_2d": [121, 237], "plot_3d": 237, "plot_accuraci": 47, "plot_adaboost_multiclass": [137, 1030], "plot_adaboost_regress": [138, 1030], "plot_adaboost_twoclass": [139, 1030], "plot_adjusted_for_chance_measur": [72, 1030], "plot_affinity_propag": [73, 447, 461, 1030], "plot_agglomerative_clust": [74, 1030], "plot_agglomerative_clustering_metr": [75, 1030], "plot_agglomerative_dendrogram": [76, 1030], "plot_all_sc": [316, 1030], "plot_anomaly_comparison": [244, 1030], "plot_ard": [197, 652, 1030], "plot_arg": 312, "plot_bayesian_ridge_curvefit": [198, 1030], "plot_benchmark_throughput": 49, "plot_bias_vari": [140, 1030], "plot_bicluster_newsgroup": [57, 1030], "plot_birch_vs_minibatchkmean": [77, 1030], "plot_bisect_kmean": [78, 1030], "plot_caching_nearest_neighbor": [298, 1030], "plot_calibr": [61, 383, 1030], "plot_calibration_curv": [62, 1030], "plot_calibration_multiclass": [63, 1030], "plot_causal_interpret": [189, 1030], "plot_chance_level": [254, 269, 282, 284, 285, 708, 710, 1056], "plot_classif": [299, 1030], "plot_classification_prob": [66, 1030], "plot_classifier_chain_yeast": [295, 1030], "plot_classifier_comparison": [67, 1030], "plot_clust": 87, "plot_cluster_comparison": [79, 1030], "plot_cluster_iri": [80, 1030], "plot_coin_segment": [81, 1030], "plot_coin_ward_segment": [82, 1030], "plot_color": [139, 362], "plot_color_quant": [83, 1030], "plot_column_transform": [104, 1030], "plot_column_transformer_mixed_typ": [105, 1030], "plot_compare_calibr": [64, 1030], "plot_compare_cross_decomposit": [117, 1030], "plot_compare_gpr_krr": [174, 1030], "plot_compare_method": [237, 1030], "plot_compare_reduct": [106, 1030], "plot_concentration_prior": [260, 1030], "plot_confusion_matrix": [268, 325, 1030, 1050, 1051, 1052, 1053], "plot_cost_complexity_prun": [361, 1030], "plot_cost_sensitive_learn": [269, 1030], "plot_covariance_estim": [111, 1030], "plot_custom_kernel": [342, 1030], "plot_cv_diabet": [163, 1030], "plot_cv_indic": [270, 1030], "plot_cv_predict": [271, 1030], "plot_cyclical_feature_engin": [43, 1030], "plot_dbscan": [84, 426, 451, 1030], "plot_decision_funct": 355, "plot_dendrogram": 76, "plot_det": [272, 1030], "plot_det_curv": [1052, 1053], "plot_dict_face_patch": [85, 1030], "plot_digit": 44, "plot_digits_agglomer": [86, 1030], "plot_digits_classif": [68, 1030], "plot_digits_classification_exercis": [164, 1030], "plot_digits_denois": [44, 1030], "plot_digits_kde_sampl": [300, 1030], "plot_digits_linkag": [87, 1030], "plot_digits_pip": [107, 1030], "plot_discret": [317, 1030], "plot_discretization_classif": [318, 1030], "plot_discretization_strategi": [319, 1030], "plot_display_object_visu": [245, 1030], "plot_distribut": 316, "plot_document_classification_20newsgroup": [357, 1030], "plot_document_clust": [358, 1030], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [199, 1030], "plot_ellips": [70, 260], "plot_embed": 238, "plot_ensemble_oob": [141, 1030], "plot_estimator_represent": [246, 1030], "plot_f_test_vs_mi": [167, 1030], "plot_face_compress": [88, 1030], "plot_face_recognit": [45, 1030], "plot_faces_decomposit": [123, 1030], "plot_feature_agglomeration_vs_univariate_select": [89, 1030], "plot_feature_effect": 357, "plot_feature_select": [168, 1030], "plot_feature_selection_pipelin": [169, 1030], "plot_feature_transform": [142, 1030], "plot_feature_union": [108, 1030], "plot_fig": 214, "plot_forest_hist_grad_boosting_comparison": [143, 1030], "plot_forest_import": [144, 1030], "plot_forest_importances_fac": [145, 1030], "plot_forest_iri": [146, 1030], "plot_galleri": [45, 123], "plot_gmm": [261, 1030], "plot_gmm_covari": [262, 1030], "plot_gmm_init": [263, 1030], "plot_gmm_pdf": [264, 1030], "plot_gmm_select": [265, 1030], "plot_gmm_sin": [266, 1030], "plot_gpc": [175, 1030], "plot_gpc_iri": [176, 1030], "plot_gpc_isoprob": [177, 1030], "plot_gpc_xor": [178, 1030], "plot_gpr_co2": [179, 1030], "plot_gpr_noisi": [180, 1030], "plot_gpr_noisy_target": [181, 1030], "plot_gpr_on_structured_data": [182, 1030], "plot_gpr_prior_posterior": [183, 1030], "plot_gpr_sampl": 183, "plot_gradient_boosting_categor": [147, 1030], "plot_gradient_boosting_early_stop": [148, 1030], "plot_gradient_boosting_oob": [149, 1030], "plot_gradient_boosting_quantil": [150, 1030], "plot_gradient_boosting_regress": [151, 1030], "plot_gradient_boosting_regular": [152, 1030], "plot_grid_search_digit": [273, 1030], "plot_grid_search_refit_cal": [274, 1030], "plot_grid_search_stat": [275, 1030], "plot_grid_search_text_feature_extract": [276, 1030], "plot_hashing_vs_dict_vector": [359, 1030], "plot_hdbscan": [90, 1030], "plot_hgbt_regress": [153, 1030], "plot_huber_vs_ridg": [200, 1030], "plot_hyperplan": [209, 226, 252], "plot_ica_blind_source_separ": [124, 1030], "plot_ica_vs_pca": [125, 1030], "plot_idx": 146, "plot_image_denois": [126, 1030], "plot_incremental_pca": [127, 1030], "plot_indic": 278, "plot_inductive_clust": [91, 1030], "plot_influ": 46, "plot_info": 147, "plot_iris_dataset": [120, 1030], "plot_iris_dtc": [362, 1030], "plot_iris_exercis": [165, 1030], "plot_iris_logist": [201, 1030], "plot_iris_svc": [343, 1030], "plot_isolation_forest": [154, 1030], "plot_isotonic_regress": [247, 1030], "plot_iterative_imputer_variants_comparison": [185, 1030], "plot_johnson_lindenstrauss_bound": [248, 1030], "plot_kde_1d": [301, 1030], "plot_kernel_approxim": [249, 1030], "plot_kernel_pca": [128, 1030], "plot_kernel_ridge_regress": [250, 1030], "plot_kind": 43, "plot_kmeans_assumpt": [92, 1030], "plot_kmeans_digit": [93, 1030], "plot_kmeans_plusplu": [94, 1030], "plot_kmeans_silhouette_analysi": [95, 1030], "plot_kmeans_stability_low_dim_dens": [96, 1030], "plot_label_propagation_digit": [335, 1030], "plot_label_propagation_digits_active_learn": [336, 1030], "plot_label_propagation_structur": [337, 1030], "plot_lasso_and_elasticnet": [202, 1030], "plot_lasso_dense_vs_sparse_data": [203, 1030], "plot_lasso_lars_": [204, 1030], "plot_lasso_lasso_lars_elasticnet_path": [205, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 1030], "plot_lasso_model_select": [206, 655, 661, 1030], "plot_lda": [69, 1030], "plot_lda_qda": [70, 1030], "plot_learning_curv": [277, 1030], "plot_likelihood_ratio": [278, 1030], "plot_linear_model_coefficient_interpret": [190, 1030], "plot_linearsvc_support_vector": [344, 1030], "plot_linkage_comparison": [97, 1030], "plot_lle_digit": [238, 1030], "plot_lof_novelty_detect": [302, 1030], "plot_lof_outlier_detect": [303, 1030], "plot_logist": [207, 1030], "plot_logistic_l1_l2_spars": [208, 1030], "plot_logistic_multinomi": [209, 1030], "plot_logistic_path": [210, 1030], "plot_lw_vs_oa": [112, 1030], "plot_mahalanobis_dist": [113, 1030], "plot_manifold_spher": [239, 1030], "plot_map_data_to_norm": [320, 1030], "plot_md": [240, 1030], "plot_mean_shift": [98, 1030], "plot_metadata_rout": [251, 1030], "plot_method": [48, 70, 201, 231, 299, 304, 342, 344, 345, 347, 348, 350, 639], "plot_mini_batch_kmean": [99, 1030], "plot_missing_valu": [186, 1030], "plot_mlp_alpha": [311, 1030], "plot_mlp_training_curv": [312, 1030], "plot_mnist_filt": [313, 1030], "plot_model_complexity_influ": [46, 1030], "plot_monotonic_constraint": [155, 1030], "plot_multi_metric_evalu": [279, 1030], "plot_multi_task_lasso_support": [211, 1030], "plot_multiclass_overview": [293, 1030], "plot_multilabel": [252, 1030], "plot_multioutput_face_complet": [253, 1030], "plot_n_features_influ": 49, "plot_nca_classif": [304, 1030], "plot_nca_dim_reduct": [305, 1030], "plot_nca_illustr": [306, 1030], "plot_nearest_centroid": [307, 1030], "plot_nested_cross_validation_iri": [280, 1030], "plot_nnl": [212, 1030], "plot_num": [79, 97, 244], "plot_obs_pr": 235, "plot_ol": [213, 1030], "plot_ols_3d": [214, 1030], "plot_ols_ridge_vari": [215, 1030], "plot_omp": [216, 1030], "plot_on_dataset": 312, "plot_oneclass": [345, 1030], "plot_opt": [100, 1030], "plot_out_of_core_classif": [47, 1030], "plot_outlier_detection_bench": [254, 1030], "plot_outlier_detection_win": [48, 1030], "plot_partial_depend": [191, 325, 326, 327, 1030, 1045, 1049, 1050, 1051, 1052, 1053, 1054], "plot_partial_dependence_visualization_api": [255, 1030], "plot_pca_iri": [129, 1030], "plot_pca_vs_fa_model_select": [130, 1030], "plot_pca_vs_lda": [131, 1030], "plot_pcr_vs_pl": [118, 1030], "plot_permutation_import": [192, 193, 1030], "plot_permutation_importance_multicollinear": [193, 1030], "plot_permutation_tests_for_classif": [281, 1030], "plot_pipeline_displai": [256, 1030], "plot_poisson_regression_non_normal_loss": [217, 1030], "plot_polynomial_interpol": [218, 887, 891, 1030], "plot_precision_recal": [282, 1030], "plot_precision_recall_curv": [325, 1050, 1052, 1053], "plot_prediction_lat": [49, 1030], "plot_quantile_regress": [219, 1030], "plot_random_forest_embed": [156, 1030], "plot_random_forest_regression_multioutput": [157, 1030], "plot_random_multilabel_dataset": [121, 1030], "plot_randomized_search": [283, 1030], "plot_rang": 139, "plot_ransac": [220, 1030], "plot_rbf_paramet": [346, 1030], "plot_rbm_logistic_classif": [314, 1030], "plot_regress": [308, 1030], "plot_release_highlights_0_22_0": [325, 1030], "plot_release_highlights_0_23_0": [326, 1030], "plot_release_highlights_0_24_0": [327, 1030], "plot_release_highlights_1_0_0": [328, 1030], "plot_release_highlights_1_1_0": [329, 1030], "plot_release_highlights_1_2_0": [330, 1030], "plot_release_highlights_1_3_0": [331, 1030], "plot_release_highlights_1_4_0": [332, 1030], "plot_release_highlights_1_5_0": [333, 1030], "plot_result": [70, 147, 260, 261, 266], "plot_rfe_digit": [170, 1030], "plot_rfe_with_cross_valid": [171, 1030], "plot_ridge_coeff": [221, 1030], "plot_ridge_path": [222, 1030], "plot_robust_fit": [223, 1030], "plot_robust_vs_empirical_covari": [114, 1030], "plot_roc": [284, 1030], "plot_roc_crossv": [285, 1030], "plot_roc_curv": [325, 1050, 1052], "plot_roc_curve_visualization_api": [257, 1030], "plot_roc_pr_curv": 269, "plot_sampl": [125, 266], "plot_scalable_poly_kernel": [195, 1030], "plot_scaling_import": [321, 1030], "plot_scatt": 91, "plot_segmentation_toi": [101, 1030], "plot_select_from_model_diabet": [172, 1030], "plot_self_training_varying_threshold": [338, 1030], "plot_semi_supervised_newsgroup": [339, 1030], "plot_semi_supervised_versus_svm_iri": [340, 1030], "plot_separating_hyperplan": [347, 1030], "plot_separating_hyperplane_unbalanc": [348, 1030], "plot_set_output": [258, 1030], "plot_sgd_comparison": [224, 1030], "plot_sgd_early_stop": [225, 1030], "plot_sgd_iri": [226, 1030], "plot_sgd_loss_funct": [227, 1030], "plot_sgd_penalti": [228, 1030], "plot_sgd_separating_hyperplan": [229, 1030], "plot_sgd_weighted_sampl": [230, 1030], "plot_sgdocsvm_vs_ocsvm": [231, 1030], "plot_sparse_cod": [132, 1030], "plot_sparse_cov": [115, 1030], "plot_sparse_logistic_regression_20newsgroup": [232, 1030], "plot_sparse_logistic_regression_mnist": [233, 1030], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 506, 1030], "plot_species_kd": [309, 1030], "plot_spectral_biclust": [58, 1030], "plot_spectral_coclust": [59, 1030], "plot_stack_predictor": [158, 1030], "plot_step": [139, 146, 362], "plot_step_coars": 146, "plot_stock_market": [51, 1030], "plot_subfigur": 252, "plot_successive_halving_heatmap": [286, 1030], "plot_successive_halving_iter": [287, 1030], "plot_surfac": [191, 214], "plot_svm_anova": [349, 1030], "plot_svm_kernel": [350, 1030], "plot_svm_margin": [351, 1030], "plot_svm_regress": [352, 1030], "plot_svm_scale_c": [353, 1030], "plot_svm_tie_break": [354, 1030], "plot_swissrol": [241, 1030], "plot_t_sne_perplex": [242, 1030], "plot_target_encod": [322, 1030], "plot_target_encoder_cross_v": [323, 1030], "plot_theilsen": [234, 1030], "plot_time_series_lagged_featur": [52, 1030], "plot_titl": 260, "plot_tomography_l1_reconstruct": [53, 1030], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1030], "plot_train_error_vs_test_error": [288, 1030], "plot_training_data_with_decision_boundari": 350, "plot_transformed_target": [109, 1030], "plot_tre": [2, 362, 365, 1025, 1049, 1051, 1052, 1053, 1055, 1056, 1058], "plot_tree_regress": [363, 1030], "plot_tree_regression_multioutput": [364, 1030], "plot_tuned_decision_threshold": [289, 1030], "plot_tweedie_regression_insurance_claim": [235, 1030], "plot_underfitting_overfit": [290, 1030], "plot_unveil_tree_structur": [365, 1030], "plot_validation_curv": [291, 1030], "plot_varimax_fa": [133, 1030], "plot_voting_decision_region": [159, 1030], "plot_voting_proba": [160, 1030], "plot_voting_regressor": [161, 1030], "plot_ward_structured_vs_unstructur": [102, 1030], "plot_weighted_sampl": [355, 1030], "plotli": [143, 276, 383, 401, 408], "pls1": [418, 491], "pls2": [418, 491], "plsca": [117, 490], "plscanon": [2, 117, 489, 491, 492, 1010, 1031, 1035, 1044, 1048, 1050, 1052, 1054, 1058], "plsregress": [2, 117, 118, 1010, 1031, 1035, 1047, 1050, 1052, 1054, 1056, 1058, 1059], "plssvd": [2, 489, 490, 1031, 1035, 1052, 1054, 1058], "plsw2a": 418, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 329, 330, 332, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 379, 390, 445, 510, 639, 640, 705, 706, 708, 709, 710, 814, 831, 926, 1016, 1037], "plu": [282, 380, 388, 687, 843, 846, 1010, 1023], "plug": [420, 1005, 1033], "plugin": 401, "plural": 1046, "pm": [183, 191, 285, 422, 1009], "pmlr": 704, "pmml": 1028, "png": [0, 68, 924], "pnucci": 1056, "po": [151, 240, 423], "podshumok": [1046, 1047], "poesio": 724, "poetri": 409, "poh": [1048, 1049], "point": [2, 8, 37, 43, 48, 50, 52, 53, 63, 67, 72, 73, 75, 76, 83, 84, 87, 90, 93, 95, 99, 102, 113, 114, 117, 120, 121, 122, 124, 126, 128, 137, 139, 143, 146, 147, 148, 153, 156, 171, 172, 176, 181, 182, 187, 190, 191, 192, 197, 201, 206, 209, 211, 213, 215, 217, 218, 219, 221, 223, 226, 229, 230, 234, 235, 237, 238, 239, 240, 241, 244, 247, 249, 262, 266, 267, 268, 272, 276, 277, 278, 282, 284, 285, 293, 295, 296, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 317, 318, 320, 322, 333, 335, 336, 338, 340, 342, 346, 347, 348, 350, 351, 354, 355, 357, 358, 359, 362, 366, 370, 371, 372, 377, 378, 379, 380, 381, 382, 383, 385, 387, 388, 389, 391, 395, 397, 398, 411, 414, 415, 420, 421, 422, 423, 426, 427, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 459, 461, 462, 463, 464, 465, 467, 468, 476, 479, 481, 504, 506, 512, 520, 522, 523, 527, 530, 533, 538, 541, 543, 549, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 618, 619, 636, 639, 640, 641, 645, 646, 647, 652, 653, 659, 663, 665, 666, 678, 679, 681, 683, 684, 686, 687, 690, 691, 696, 697, 698, 699, 700, 701, 702, 709, 714, 715, 718, 721, 725, 731, 733, 739, 744, 745, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 772, 787, 788, 798, 799, 805, 806, 808, 822, 824, 830, 833, 835, 842, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 869, 870, 873, 877, 882, 891, 892, 906, 907, 908, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 936, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1021, 1022, 1024, 1025, 1028, 1029, 1030, 1035, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "pointer": [383, 391, 449, 1049], "pointplot": 153, "points_color": 237, "pointwis": [140, 181, 426, 451], "poisson": [2, 43, 52, 187, 196, 252, 379, 422, 471, 472, 504, 531, 560, 566, 570, 573, 656, 677, 680, 688, 714, 732, 753, 757, 758, 760, 838, 872, 873, 876, 877, 885, 886, 887, 892, 921, 923, 960, 1005, 1025, 1030, 1050, 1051, 1052, 1053, 1054, 1056, 1057], "poisson_gbrt": 217, "poisson_glm": 217, "poissonregressor": [2, 217, 235, 326, 329, 656, 688, 1005, 1051, 1054, 1055], "pokorni": 1055, "pola": 52, "polar": [107, 179, 383, 401, 408, 439, 449, 450, 452, 454, 456, 471, 475, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 569, 570, 574, 575, 576, 577, 578, 589, 590, 591, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 696, 697, 700, 856, 861, 864, 868, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 910, 1057, 1058], "pole": 239, "poli": [43, 165, 195, 275, 343, 350, 352, 459, 543, 628, 773, 782, 808, 887, 914, 915, 916, 917, 918, 1005, 1019], "polici": [153, 189, 190, 217, 235, 269, 386, 397, 543, 549, 1005, 1055], "policyhold": [217, 235, 1005], "polit": [57, 357, 378, 382, 1005, 1010], "pollak": 1058, "polli": 357, "pollut": [357, 736, 793, 1009, 1015], "polmauri": 1047, "poloso": 1054, "polycollect": [814, 831], "polynomi": [2, 54, 185, 187, 194, 196, 217, 223, 249, 256, 275, 290, 301, 327, 328, 343, 352, 375, 379, 459, 498, 628, 647, 648, 649, 651, 653, 680, 773, 782, 783, 838, 873, 882, 884, 887, 891, 912, 914, 915, 916, 917, 918, 1004, 1024, 1030, 1031, 1035, 1052, 1053], "polynomial_featur": 290, "polynomial_kernel": [2, 411, 773, 1007, 1057, 1059], "polynomialcountsketch": [2, 195, 647, 649, 1001, 1052, 1054, 1057], "polynomialfeatur": [2, 43, 197, 217, 218, 223, 256, 290, 327, 350, 891, 1005, 1019, 1044, 1048, 1049, 1050, 1053, 1054, 1056, 1057], "polynomialfeaturespolynomialfeatur": 256, "polysemi": 420, "polytop": 523, "pomegran": 1028, "ponc": [420, 539, 545], "poncho": 1033, "pone": 377, "ponnuthurai": 380, "ponzi": 322, "pooch": [88, 383, 401, 408], "pooja": [1055, 1056, 1057], "pool": [284, 395, 452, 643, 977, 1029, 1051], "pooling_func": [452, 1048], "poolqc": 147, "poolsawat": [1054, 1055], "poor": [191, 195, 281, 291, 338, 413, 419, 420, 698, 702, 746, 849, 852, 853, 1003, 1004, 1006, 1011, 1029, 1047, 1048, 1049, 1051, 1053], "poor_scor": [928, 930], "poorer": [147, 366, 420], "poorest": 1011, "poorli": [62, 64, 97, 111, 118, 140, 152, 241, 371, 415, 422, 536, 638, 1005, 1006, 1046], "poorna": [1050, 1052], "pop": [365, 395, 927, 1048], "popa": [1050, 1051], "popitem": 927, "popo": 1043, "popul": [106, 111, 113, 153, 190, 217, 254, 278, 316, 378, 392, 397, 417, 447, 497, 720, 726, 854, 855, 856, 858, 860, 862, 863, 864, 977, 1009, 1015, 1019, 1025], "popular": [6, 10, 185, 241, 378, 381, 388, 391, 395, 397, 421, 422, 423, 425, 459, 469, 999, 1001, 1005, 1007, 1014, 1023, 1029], "port": [381, 401, 1050], "portabl": [409, 1028], "portfolio": [217, 235, 1003], "portion": [45, 47, 114, 148, 172, 284, 370, 378, 380, 383, 389, 397, 796, 833, 850, 998, 1008, 1012], "portland": [415, 426, 451], "portnoi": [1005, 1057], "portrait": [45, 420], "pos_class": 47, "pos_label": [245, 254, 269, 289, 397, 414, 445, 446, 706, 708, 710, 714, 715, 717, 735, 737, 738, 746, 790, 791, 792, 795, 797, 807, 879, 896, 1009, 1048, 1052, 1054, 1058], "pos_lr": 278, "pos_lr_bas": 278, "pos_lr_base_std": 278, "pos_tagg": 423, "pos_vector": 423, "pos_window": 423, "pose": [221, 283, 1005], "posit": [0, 2, 43, 45, 47, 50, 51, 61, 62, 64, 102, 133, 153, 155, 160, 170, 183, 189, 190, 202, 205, 212, 217, 218, 219, 221, 235, 240, 248, 254, 269, 272, 275, 278, 282, 284, 285, 289, 316, 326, 327, 331, 333, 357, 365, 370, 378, 382, 383, 385, 390, 392, 397, 398, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 427, 445, 446, 449, 453, 454, 456, 471, 474, 502, 506, 508, 512, 516, 517, 518, 533, 535, 537, 538, 539, 541, 543, 544, 545, 550, 553, 554, 556, 557, 558, 565, 569, 570, 571, 572, 600, 601, 602, 603, 604, 606, 607, 608, 610, 614, 618, 619, 628, 639, 640, 651, 654, 655, 656, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 677, 680, 681, 682, 683, 685, 688, 689, 690, 691, 692, 695, 698, 706, 708, 710, 715, 717, 720, 721, 723, 724, 726, 728, 730, 732, 735, 737, 738, 739, 743, 744, 746, 747, 748, 749, 750, 751, 752, 760, 762, 766, 774, 790, 791, 792, 795, 796, 797, 805, 806, 807, 811, 812, 835, 852, 853, 854, 856, 858, 860, 862, 864, 865, 875, 876, 879, 885, 888, 891, 896, 900, 904, 905, 907, 908, 912, 913, 916, 917, 918, 920, 922, 929, 932, 935, 954, 956, 973, 975, 1000, 1001, 1005, 1007, 1009, 1010, 1012, 1013, 1014, 1016, 1019, 1024, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "position": 397, "positive_class": [47, 720], "positive_cod": [123, 539, 545, 550, 553, 554], "positive_dict": [123, 539, 545, 553, 554], "positive_featur": 388, "positive_likelihood_ratio": [278, 720], "positive_onli": [929, 932], "posix": [371, 395], "posixpath": 52, "possa": 1047, "possibl": [30, 43, 52, 55, 63, 64, 72, 84, 90, 105, 111, 123, 140, 143, 153, 155, 174, 190, 191, 192, 193, 217, 234, 235, 249, 251, 269, 275, 276, 277, 278, 280, 281, 282, 284, 285, 295, 325, 346, 353, 357, 358, 366, 370, 371, 372, 376, 377, 378, 383, 384, 385, 386, 387, 389, 391, 395, 396, 397, 401, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 425, 427, 429, 438, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 504, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 698, 699, 700, 717, 729, 730, 731, 732, 736, 750, 764, 786, 791, 793, 796, 805, 806, 807, 808, 810, 811, 812, 814, 820, 821, 822, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 936, 938, 939, 942, 948, 979, 982, 998, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1017, 1019, 1024, 1025, 1029, 1033, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056], "possibli": [92, 118, 172, 217, 232, 350, 358, 380, 382, 391, 409, 415, 422, 423, 458, 460, 597, 847, 848, 849, 850, 851, 917, 918, 920, 921, 922, 923, 998, 1001, 1006, 1012, 1019, 1055, 1059], "post": [2, 46, 54, 57, 104, 171, 172, 187, 245, 267, 279, 282, 293, 329, 333, 338, 357, 358, 359, 360, 365, 370, 378, 382, 383, 388, 396, 410, 415, 455, 495, 496, 504, 508, 559, 565, 566, 567, 568, 569, 572, 573, 666, 708, 710, 720, 726, 750, 792, 795, 807, 808, 824, 830, 835, 838, 873, 892, 910, 920, 921, 922, 923, 1009, 1025, 1030, 1032, 1033, 1035, 1051], "post1": [381, 401, 407, 408, 1038], "poster": [357, 382, 383], "posterior": [92, 173, 174, 175, 180, 187, 197, 269, 275, 289, 420, 425, 557, 558, 560, 618, 619, 621, 622, 623, 627, 630, 631, 635, 652, 653, 716, 805, 807, 830, 1003, 1028, 1030, 1046, 1049], "posteriori": [1005, 1011], "postfit_hook": 46, "postiv": 282, "postpon": [385, 387], "postprocess": [61, 413, 543, 549], "postprocessor": 1051, "postscript": 924, "potenti": [2, 43, 64, 90, 111, 153, 186, 189, 191, 197, 269, 302, 303, 311, 331, 332, 350, 359, 370, 371, 381, 397, 401, 406, 414, 415, 419, 422, 423, 475, 489, 490, 491, 492, 504, 532, 557, 565, 566, 569, 570, 572, 573, 581, 614, 619, 642, 771, 830, 902, 903, 910, 920, 921, 922, 923, 1015, 1023, 1025, 1028, 1043, 1050, 1051, 1054, 1057, 1058], "poughon": 1047, "poundal": 104, "pour": 1009, "pourbozorg": [1048, 1049, 1050], "pow": [684, 685, 686, 869, 870], "powel": [45, 378], "power": [2, 43, 46, 55, 143, 148, 189, 218, 235, 266, 278, 283, 300, 316, 317, 320, 335, 343, 370, 371, 396, 413, 415, 418, 421, 422, 423, 426, 451, 489, 490, 491, 540, 543, 549, 552, 638, 688, 702, 732, 755, 757, 760, 854, 855, 862, 863, 865, 866, 887, 888, 889, 900, 901, 955, 956, 1005, 1006, 1009, 1017, 1019, 1023, 1024, 1033, 1043, 1046, 1048, 1050, 1051, 1053, 1057], "power_iteration_norm": [411, 549, 552, 955, 956, 1054], "power_t": [684, 685, 686, 869, 870, 1023], "power_transform": [2, 888, 901, 1048], "powers_": 887, "powershel": 381, "powertransform": [2, 320, 889, 900, 999, 1019, 1048, 1051, 1054, 1056, 1059], "pox": 293, "poznik": [1053, 1054, 1055], "pp": [0, 98, 172, 274, 380, 415, 417, 423, 426, 427, 451, 455, 459, 469, 519, 541, 542, 549, 598, 643, 651, 672, 693, 694, 728, 734, 738, 748, 764, 777, 791, 847, 849, 851, 868, 888, 900, 1002, 1009, 1011, 1012, 1022], "pp2013": 1001, "pp84": 425, "ppc64le": 391, "ppf": 275, "ppm": 179, "pprint": [55, 150, 251, 276, 378, 951], "pq": [52, 330], "pr": [0, 160, 371, 383, 386, 387, 391, 423, 749, 1009, 1032, 1050, 1052], "pr_displai": 245, "pr_number": 391, "prabakaran": [1048, 1049, 1052, 1054, 1055], "prabhakar": 420, "practic": [64, 88, 105, 113, 118, 126, 143, 147, 148, 153, 174, 189, 190, 195, 202, 219, 244, 250, 276, 283, 302, 303, 327, 333, 346, 350, 371, 383, 385, 386, 387, 389, 391, 396, 397, 415, 417, 419, 420, 421, 422, 423, 425, 454, 459, 469, 529, 532, 597, 640, 641, 678, 805, 851, 905, 912, 998, 999, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1019, 1028, 1029, 1031, 1033, 1034, 1035, 1042, 1046, 1048, 1050, 1052], "practicalswift": 1046, "practis": 222, "practition": [141, 221], "pradeep": [1048, 1049], "pragmat": 383, "prakash": [1045, 1047, 1053], "pramod": 1054, "pranayanchuri": 1053, "prang": 384, "prasanth": 1055, "pratama": 1051, "pratap": [1044, 1047, 1054], "prathmesh": 1049, "pratik": 1047, "pratiqu": 380, "pravar": 1048, "pravarmahajan": [1047, 1048], "pre": [44, 105, 190, 206, 316, 359, 381, 383, 397, 401, 414, 417, 419, 420, 422, 423, 424, 426, 427, 450, 451, 454, 466, 541, 543, 698, 720, 771, 807, 875, 917, 1009, 1014, 1019, 1024, 1025, 1028, 1029, 1035, 1043, 1048, 1054, 1058, 1059], "pre_dispatch": [808, 814, 822, 831, 833, 834, 835, 836, 839, 974, 1043], "preambl": 90, "prec": [115, 245, 535, 1009], "prec_": 115, "prec_macro": 419, "preced": [371, 383, 387, 494, 1009, 1040], "precipit": 413, "precis": [2, 8, 45, 52, 62, 68, 104, 109, 115, 123, 169, 180, 181, 187, 195, 245, 267, 268, 269, 273, 314, 316, 335, 336, 383, 385, 397, 411, 412, 413, 414, 415, 417, 420, 422, 450, 476, 477, 478, 479, 480, 481, 482, 483, 485, 512, 531, 540, 542, 549, 552, 652, 653, 654, 656, 658, 659, 660, 662, 663, 664, 677, 680, 682, 688, 690, 691, 695, 707, 708, 714, 715, 716, 721, 735, 737, 738, 739, 747, 749, 771, 790, 791, 792, 795, 796, 805, 806, 830, 838, 841, 852, 853, 858, 873, 892, 896, 912, 917, 924, 926, 956, 1003, 1005, 1012, 1013, 1024, 1030, 1040, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "precision_": [51, 115, 476, 477, 478, 479, 480, 481, 482, 483], "precision_macro": 419, "precision_recall_curv": [2, 245, 282, 708, 714, 715, 735, 1009, 1041, 1042, 1046, 1053, 1054, 1056, 1058], "precision_recall_fscore_support": [2, 721, 737, 738, 792, 795, 1009, 1044, 1048, 1050, 1056], "precision_scor": [2, 62, 269, 282, 716, 795, 1009, 1040, 1042, 1043, 1044, 1045, 1050, 1056], "precision_threshold": 273, "precisionrecalldisplai": [2, 269, 282, 328, 790, 792, 795, 1009, 1050, 1053, 1056, 1057, 1058], "precisions_": [805, 806], "precisions_cholesky_": [805, 806, 1054], "precisions_init": [806, 1054, 1056], "precompil": 381, "precomput": [122, 123, 124, 187, 196, 240, 296, 298, 385, 392, 395, 397, 415, 423, 426, 438, 447, 448, 451, 452, 453, 457, 459, 464, 472, 478, 489, 490, 491, 532, 539, 543, 545, 548, 549, 550, 556, 562, 564, 566, 568, 570, 573, 576, 578, 618, 619, 628, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 689, 690, 692, 693, 696, 698, 699, 700, 704, 782, 786, 789, 800, 801, 808, 822, 845, 846, 854, 855, 856, 858, 859, 860, 862, 863, 864, 870, 913, 914, 915, 916, 917, 918, 921, 923, 929, 984, 985, 986, 1001, 1005, 1007, 1012, 1024, 1029, 1030, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "precompute_dist": [1044, 1051], "precompute_gram": 1042, "precomputed_nearest_neighbor": [459, 699], "precondit": [415, 459, 469, 703, 1025, 1056], "pred": [43, 46, 50, 52, 68, 354, 357, 378, 656, 677, 688, 705, 710, 714, 726, 737, 738, 746, 791, 792, 795, 796, 1009], "pred1": 161, "pred2": 161, "pred3": 161, "pred4": 161, "pred_background": 50, "pred_decis": [743, 1009, 1053], "pred_entropi": [335, 336], "pred_nam": 45, "pred_ort": 409, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [137, 457, 462, 463, 464, 1057], "predecessor_": [457, 464], "predecessor_correct": [457, 463], "predefin": [2, 279, 821, 998, 1012, 1055, 1057], "predefinedsplit": [2, 419, 1044], "predetermin": [415, 1006], "predict": [2, 5, 13, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 83, 91, 92, 93, 97, 104, 105, 106, 107, 109, 117, 133, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 158, 159, 160, 169, 170, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 195, 197, 200, 201, 202, 209, 212, 213, 214, 215, 218, 219, 220, 221, 223, 224, 225, 226, 231, 232, 234, 235, 244, 245, 247, 249, 251, 253, 261, 262, 263, 264, 265, 266, 267, 268, 273, 275, 277, 278, 281, 284, 285, 289, 290, 293, 295, 299, 302, 303, 304, 307, 308, 314, 316, 317, 321, 322, 325, 326, 327, 328, 329, 331, 332, 333, 336, 338, 339, 340, 342, 343, 345, 346, 350, 352, 353, 354, 357, 358, 362, 363, 364, 365, 366, 369, 371, 375, 378, 380, 383, 385, 390, 392, 397, 400, 406, 409, 410, 411, 413, 415, 416, 418, 420, 422, 423, 424, 429, 432, 437, 438, 444, 445, 446, 447, 449, 450, 451, 454, 455, 456, 472, 476, 489, 490, 491, 494, 509, 516, 532, 542, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 590, 601, 602, 610, 614, 618, 619, 621, 622, 623, 624, 630, 633, 635, 636, 638, 639, 640, 641, 642, 643, 645, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 720, 722, 723, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 746, 749, 750, 751, 754, 756, 758, 760, 764, 790, 791, 792, 793, 794, 795, 796, 797, 801, 802, 804, 805, 806, 807, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 858, 859, 862, 863, 869, 870, 872, 879, 892, 893, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 931, 982, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1033, 1035, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "predict_ecoc": 1044, "predict_joint_log_proba": [847, 848, 849, 850, 851, 1055], "predict_log_proba": [385, 397, 557, 558, 559, 561, 563, 565, 567, 572, 601, 602, 666, 667, 684, 807, 808, 811, 812, 822, 830, 833, 843, 847, 848, 849, 850, 851, 869, 872, 909, 914, 917, 920, 922, 1024, 1040, 1053, 1057, 1059], "predict_ovo": 1044, "predict_ovr": 1044, "predict_param": [251, 472, 575, 576, 601, 602, 1053], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 156, 160, 172, 175, 176, 177, 178, 269, 284, 289, 295, 311, 318, 321, 325, 327, 333, 357, 385, 390, 397, 413, 414, 422, 444, 445, 557, 558, 559, 561, 563, 565, 567, 569, 572, 575, 577, 601, 602, 618, 627, 628, 630, 631, 639, 640, 641, 666, 667, 684, 706, 708, 710, 730, 749, 750, 796, 805, 806, 807, 808, 811, 812, 822, 830, 833, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 854, 862, 869, 872, 879, 907, 908, 909, 914, 917, 920, 922, 931, 1005, 1009, 1011, 1013, 1016, 1022, 1023, 1024, 1025, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059], "predict_proba_ovr": 1044, "predicted_label": [335, 336], "prediction_df": 153, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [2, 43, 52, 109, 158, 190, 271, 330, 1009, 1055, 1057], "predictions_kr": 174, "predictive_analyt": 1025, "predictive_word": 357, "predictor": [2, 109, 136, 147, 161, 185, 187, 217, 235, 246, 271, 385, 396, 397, 416, 418, 419, 422, 425, 473, 474, 489, 490, 491, 504, 524, 525, 526, 563, 564, 570, 573, 576, 610, 618, 638, 640, 641, 656, 661, 665, 677, 681, 688, 709, 833, 835, 844, 845, 872, 873, 885, 886, 892, 982, 1005, 1010, 1030, 1041, 1047, 1050], "predispatch": [814, 831, 836, 839], "predit": 118, "predomin": [385, 1041], "prefer": [73, 79, 90, 153, 266, 284, 316, 366, 370, 371, 372, 383, 384, 385, 397, 415, 419, 420, 422, 423, 447, 461, 478, 479, 485, 494, 516, 517, 635, 640, 641, 662, 666, 667, 709, 734, 736, 750, 765, 766, 843, 861, 887, 912, 913, 962, 974, 998, 1001, 1003, 1005, 1009, 1014, 1024, 1025, 1028, 1032, 1041, 1047, 1049, 1053, 1054, 1057], "prefetch": 974, "prefit": [63, 269, 397, 413, 414, 424, 444, 575, 576, 605, 807, 830, 1029, 1052, 1053, 1054, 1059], "prefix": [2, 55, 104, 276, 298, 325, 383, 387, 389, 391, 425, 431, 449, 450, 452, 454, 456, 471, 474, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 647, 648, 649, 650, 696, 697, 700, 814, 836, 856, 861, 864, 868, 871, 872, 878, 904, 905, 1046, 1047, 1053, 1055, 1058], "prein": [0, 373, 1052, 1053, 1054], "preiss": 1053, "preliminari": 469, "prematur": 1053, "prepar": [218, 251, 357, 370, 387, 389, 391, 931, 1025, 1033, 1048, 1056], "prepend": [190, 1040], "preprint": 380, "preprocess": [2, 43, 44, 45, 49, 64, 67, 77, 79, 84, 88, 90, 93, 97, 104, 105, 106, 107, 109, 118, 123, 133, 142, 147, 168, 170, 172, 179, 192, 195, 197, 199, 204, 206, 208, 217, 218, 223, 233, 235, 238, 245, 246, 255, 258, 269, 272, 282, 284, 289, 290, 299, 304, 305, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 339, 346, 349, 358, 372, 375, 377, 380, 383, 388, 396, 397, 409, 411, 412, 415, 416, 419, 422, 423, 424, 471, 472, 473, 474, 496, 575, 589, 590, 596, 597, 599, 638, 666, 667, 680, 682, 684, 686, 695, 841, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 912, 913, 914, 915, 917, 918, 999, 1005, 1010, 1013, 1020, 1023, 1024, 1026, 1028, 1030, 1032, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "preprocessor": [105, 158, 190, 217, 246, 254, 256, 322, 326, 328, 329, 330, 332, 416, 423, 596, 597, 599, 1028, 1040, 1043, 1048, 1050], "preprocessor__cat__selector__percentil": 105, "preprocessor__num__imputer__strategi": 105, "preprocessor_list": 254, "prescrib": 397, "presenc": [2, 48, 95, 97, 113, 114, 135, 189, 193, 202, 221, 254, 316, 381, 384, 397, 417, 420, 720, 734, 764, 777, 841, 875, 883, 885, 892, 992, 999, 1005, 1009, 1010, 1023, 1032, 1043, 1044, 1046, 1050, 1052, 1054], "present": [0, 2, 43, 44, 52, 78, 84, 121, 123, 130, 142, 143, 150, 153, 154, 171, 172, 180, 183, 197, 200, 202, 206, 217, 244, 247, 251, 265, 269, 273, 278, 281, 284, 285, 296, 316, 319, 321, 358, 380, 381, 385, 388, 395, 397, 406, 413, 415, 417, 420, 422, 423, 433, 434, 437, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 496, 497, 498, 499, 500, 504, 508, 509, 510, 511, 512, 513, 518, 539, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 557, 558, 569, 570, 571, 574, 577, 578, 589, 590, 591, 596, 597, 599, 625, 635, 636, 637, 638, 658, 662, 685, 696, 697, 698, 699, 720, 737, 738, 746, 777, 791, 792, 795, 805, 806, 808, 811, 812, 820, 822, 836, 854, 855, 856, 858, 860, 862, 863, 864, 871, 876, 884, 885, 886, 887, 888, 890, 893, 904, 905, 916, 924, 926, 927, 956, 992, 1008, 1009, 1010, 1011, 1016, 1019, 1027, 1029, 1043, 1048, 1050, 1051, 1052, 1054, 1055, 1057], "preserv": [37, 43, 83, 128, 241, 248, 270, 386, 419, 420, 422, 423, 589, 596, 597, 599, 654, 660, 704, 750, 782, 786, 826, 827, 828, 896, 933, 938, 939, 999, 1005, 1006, 1019, 1021, 1028, 1040, 1043, 1044, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1058], "preserves_dtyp": 933, "preservs": 1054, "preset": [674, 676, 684, 1013], "presort": [1045, 1050], "press": [378, 415, 420, 425, 426, 451, 598, 618, 619, 622, 627, 630, 651, 847, 851, 1002, 1005, 1007, 1011], "pressur": [172, 380], "preston": [1045, 1046, 1047], "presum": [190, 295, 415, 423, 847], "prettenhof": [0, 405, 1040, 1041, 1042, 1043, 1044, 1045], "pretti": [191, 241, 273, 357, 370, 383, 395, 869, 870, 1013, 1049], "preuss": 1056, "prev_scor": 55, "preval": [137, 325, 397, 708, 720, 1009], "prevalence_pos_label": [282, 708], "prevent": [43, 90, 148, 150, 169, 189, 218, 221, 316, 322, 323, 346, 357, 361, 366, 383, 385, 387, 395, 396, 409, 411, 415, 420, 423, 449, 456, 495, 496, 569, 570, 598, 599, 619, 736, 793, 869, 870, 897, 898, 900, 901, 902, 903, 1009, 1011, 1014, 1015, 1019, 1025, 1042, 1043, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "previou": [43, 78, 88, 105, 123, 140, 147, 148, 150, 158, 174, 179, 180, 189, 190, 191, 202, 203, 218, 248, 250, 251, 269, 275, 278, 282, 316, 321, 329, 357, 358, 359, 366, 370, 378, 383, 385, 387, 388, 389, 391, 395, 397, 398, 401, 414, 415, 422, 423, 475, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 638, 654, 656, 660, 661, 666, 668, 670, 674, 675, 676, 677, 684, 685, 686, 688, 715, 827, 843, 846, 861, 869, 870, 909, 926, 1005, 1009, 1013, 1019, 1029, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "previous": [46, 88, 92, 105, 137, 180, 190, 269, 273, 282, 289, 329, 378, 391, 395, 401, 415, 420, 423, 447, 450, 461, 532, 542, 549, 657, 666, 667, 674, 675, 676, 684, 685, 686, 912, 1005, 1019, 1028, 1037, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "previous_loss": [674, 675, 676, 685], "previs": 245, "price": [51, 109, 147, 148, 153, 158, 254, 322, 999, 1005, 1033], "priceless": 383, "prieur": 1053, "primal": [666, 667, 685, 912, 913, 1023, 1024], "primari": [397, 420, 523, 929, 1016, 1032, 1033], "primarili": [266, 280, 383, 397, 411, 415, 966, 1033, 1049, 1050], "primat": 357, "primdal": 1048, "primit": 1055, "princ": 1053, "princip": [2, 42, 116, 117, 120, 125, 127, 128, 129, 131, 156, 187, 237, 249, 252, 305, 321, 327, 375, 415, 418, 427, 491, 539, 540, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 558, 665, 696, 697, 698, 700, 701, 838, 861, 873, 892, 955, 956, 1006, 1012, 1030, 1034, 1035, 1040], "principl": [137, 181, 301, 359, 383, 395, 397, 398, 419, 422, 956, 998, 1008, 1012, 1023, 1047], "print": [2, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 66, 68, 73, 77, 78, 81, 82, 83, 84, 85, 87, 88, 93, 95, 96, 98, 102, 104, 105, 107, 108, 109, 113, 117, 118, 121, 123, 126, 130, 131, 133, 137, 140, 143, 144, 145, 146, 147, 149, 151, 153, 163, 164, 168, 169, 171, 172, 174, 175, 177, 179, 183, 189, 191, 192, 193, 195, 202, 203, 205, 208, 209, 212, 213, 217, 219, 220, 221, 224, 225, 232, 233, 235, 238, 239, 242, 246, 248, 250, 251, 254, 258, 263, 268, 269, 273, 274, 275, 276, 278, 280, 283, 284, 288, 296, 300, 307, 309, 312, 313, 314, 318, 321, 323, 325, 326, 327, 329, 331, 332, 333, 335, 336, 339, 346, 357, 358, 359, 361, 365, 366, 370, 377, 378, 381, 384, 385, 391, 397, 406, 409, 416, 419, 422, 423, 425, 471, 474, 475, 479, 485, 497, 502, 510, 520, 521, 549, 552, 557, 558, 567, 568, 569, 570, 572, 573, 577, 578, 585, 591, 592, 593, 595, 596, 597, 599, 620, 625, 626, 638, 654, 655, 657, 658, 660, 661, 662, 664, 668, 669, 670, 671, 674, 675, 684, 685, 692, 704, 721, 725, 745, 803, 805, 806, 807, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 834, 835, 836, 837, 839, 841, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 869, 870, 871, 872, 873, 874, 882, 888, 892, 900, 910, 911, 912, 913, 914, 917, 919, 925, 937, 942, 969, 992, 999, 1009, 1010, 1011, 1012, 1017, 1025, 1040, 1042, 1048, 1049, 1051, 1055, 1059], "print_changed_onli": [475, 910, 1049, 1051, 1052], "print_datafram": 273, "print_progress": 974, "print_rout": 251, "printabl": 1032, "prior": [2, 42, 46, 55, 81, 82, 92, 100, 101, 102, 121, 173, 174, 180, 186, 187, 192, 197, 199, 202, 259, 261, 265, 266, 269, 275, 286, 306, 383, 385, 397, 401, 406, 415, 418, 420, 422, 425, 472, 531, 544, 556, 557, 558, 559, 567, 619, 621, 622, 623, 627, 630, 631, 638, 652, 653, 654, 655, 659, 660, 662, 663, 664, 668, 669, 670, 680, 686, 689, 724, 805, 847, 848, 849, 850, 851, 872, 873, 887, 914, 917, 975, 998, 1001, 1003, 1005, 1008, 1009, 1011, 1017, 1025, 1026, 1030, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1053, 1056], "prior_k": 557, "priori": [217, 234, 284, 295, 316, 397, 415, 422, 596, 602, 1008, 1056], "priorit": [414, 1029, 1047], "prioriti": [382, 640, 840, 841, 1029, 1043], "priors_": [557, 558], "privaci": 1028, "privat": [0, 385, 387, 397, 398, 934, 1033, 1040, 1048, 1050, 1051, 1053, 1054, 1059], "privileg": [254, 391], "priyam": 1055, "priyank": 1058, "priyansh": 1058, "priyash": 1058, "prng": 115, "pro": [409, 1008], "proanthocyanin": 380, "prob_pos_clf": 61, "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [445, 446], "prob_tru": [445, 446], "proba": [62, 64, 160, 444, 920, 922], "proba_": [914, 917, 1051], "proba_map": 90, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 64, 66, 115, 122, 123, 132, 133, 173, 174, 177, 180, 181, 187, 250, 269, 357, 397, 413, 421, 422, 444, 480, 483, 540, 542, 543, 549, 567, 596, 597, 618, 630, 651, 653, 684, 711, 749, 808, 834, 879, 914, 915, 917, 918, 1002, 1003, 1005, 1008, 1009, 1014, 1019, 1024, 1025, 1028, 1030, 1033, 1040, 1043, 1047], "probabilisticpca": [1040, 1043], "probabilities_": [90, 453], "probabilities_or_label": 577, "probabl": [0, 2, 5, 30, 52, 60, 64, 65, 70, 90, 109, 121, 136, 151, 153, 159, 167, 173, 174, 175, 176, 187, 190, 193, 209, 229, 232, 233, 237, 241, 245, 247, 248, 269, 275, 277, 278, 281, 282, 285, 289, 293, 295, 314, 316, 320, 325, 327, 333, 338, 340, 352, 353, 370, 378, 379, 385, 389, 395, 397, 414, 415, 419, 420, 423, 424, 425, 441, 442, 443, 444, 445, 446, 453, 454, 456, 512, 520, 523, 531, 535, 557, 558, 559, 561, 563, 565, 567, 569, 572, 575, 577, 578, 601, 602, 618, 621, 622, 630, 635, 639, 640, 641, 666, 667, 679, 684, 700, 706, 708, 710, 711, 714, 715, 717, 720, 724, 728, 730, 734, 735, 737, 747, 748, 749, 750, 764, 790, 792, 795, 796, 797, 802, 805, 806, 807, 808, 811, 812, 822, 830, 837, 838, 841, 843, 844, 847, 848, 849, 850, 851, 854, 857, 862, 868, 869, 893, 905, 906, 907, 908, 909, 912, 914, 917, 920, 922, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1021, 1022, 1023, 1025, 1029, 1030, 1031, 1035, 1040, 1042, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1054], "probable_clust": 91, "probas_pr": [790, 1058], "probb_": [914, 917, 1051], "probe": 1017, "probinette4": 1052, "probl": [615, 616], "problem": [2, 11, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 72, 89, 90, 92, 101, 123, 137, 140, 143, 145, 150, 151, 174, 187, 192, 195, 197, 202, 203, 206, 210, 211, 217, 219, 221, 234, 235, 239, 244, 245, 252, 254, 257, 273, 275, 280, 284, 285, 289, 290, 293, 295, 296, 301, 308, 320, 328, 332, 333, 343, 346, 350, 353, 354, 357, 358, 365, 366, 370, 378, 379, 380, 381, 382, 384, 385, 388, 389, 391, 392, 395, 397, 403, 413, 414, 415, 417, 419, 421, 422, 423, 424, 425, 426, 427, 451, 454, 456, 457, 459, 464, 469, 472, 485, 511, 516, 517, 523, 524, 525, 526, 531, 532, 536, 539, 541, 545, 547, 550, 551, 552, 553, 554, 555, 556, 559, 560, 565, 569, 572, 575, 579, 581, 597, 618, 639, 651, 656, 658, 660, 662, 663, 664, 665, 666, 667, 672, 673, 674, 676, 677, 680, 681, 682, 683, 684, 685, 687, 688, 693, 694, 695, 696, 697, 699, 701, 703, 716, 724, 727, 737, 738, 743, 746, 747, 791, 792, 795, 796, 805, 806, 809, 810, 811, 812, 813, 815, 816, 817, 818, 823, 824, 825, 826, 827, 828, 832, 840, 841, 842, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 878, 879, 885, 893, 896, 902, 903, 912, 913, 920, 922, 944, 956, 999, 1000, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1023, 1026, 1029, 1031, 1033, 1034, 1035, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "problemat": [43, 190, 269, 271, 416, 999, 1048], "proc": [64, 112, 413, 423, 457, 697, 701, 847, 998, 1006, 1011, 1015], "proce": [85, 169, 199, 381, 387, 418, 419, 422, 447, 1005], "procedur": [25, 81, 91, 143, 150, 172, 198, 204, 265, 277, 319, 323, 346, 357, 366, 383, 395, 396, 397, 398, 413, 417, 419, 420, 422, 424, 539, 545, 546, 548, 553, 554, 555, 561, 562, 563, 564, 567, 568, 601, 603, 610, 617, 652, 680, 682, 695, 736, 793, 869, 870, 889, 901, 929, 979, 998, 1005, 1011, 1019, 1022, 1023, 1024, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "proceed": [113, 172, 378, 380, 415, 426, 446, 451, 519, 704, 716, 734, 764, 859, 909, 1009, 1021, 1022, 1023], "process": [0, 2, 19, 37, 43, 44, 47, 57, 63, 66, 67, 70, 80, 81, 82, 83, 85, 91, 92, 101, 104, 106, 108, 112, 114, 124, 125, 127, 135, 137, 146, 148, 150, 155, 156, 165, 189, 197, 200, 219, 221, 227, 228, 229, 230, 250, 251, 252, 254, 260, 261, 264, 266, 269, 275, 277, 278, 287, 293, 311, 316, 318, 319, 327, 331, 336, 340, 350, 351, 355, 358, 359, 361, 370, 371, 372, 378, 382, 383, 385, 387, 389, 392, 395, 396, 397, 409, 415, 416, 417, 419, 420, 421, 422, 423, 424, 428, 455, 456, 482, 504, 512, 531, 542, 543, 544, 545, 546, 569, 570, 571, 596, 597, 599, 618, 619, 621, 622, 623, 625, 626, 627, 630, 631, 633, 635, 640, 641, 647, 651, 672, 680, 693, 694, 711, 731, 749, 789, 805, 807, 808, 811, 812, 822, 830, 833, 834, 835, 844, 845, 861, 875, 879, 881, 882, 883, 892, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 974, 998, 1001, 1005, 1009, 1012, 1019, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1033, 1035, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "process_rout": [2, 251, 1057], "processor": [105, 158, 190, 426, 444, 451, 453, 455, 457, 459, 464, 465, 468, 471, 474, 479, 539, 543, 544, 545, 547, 550, 551, 553, 554, 556, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 602, 610, 615, 616, 618, 640, 642, 647, 655, 659, 661, 663, 665, 666, 667, 669, 671, 673, 674, 676, 684, 687, 696, 697, 698, 699, 700, 701, 702, 782, 786, 789, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 854, 855, 858, 860, 862, 863, 865, 866, 871, 874, 907, 908], "procter": 51, "prod": [358, 629], "prod_": 1011, "prod_i": 1001, "proding": 1056, "produc": [52, 53, 62, 63, 79, 92, 104, 126, 150, 151, 152, 154, 202, 281, 314, 338, 366, 371, 378, 379, 383, 385, 388, 397, 398, 415, 416, 419, 420, 422, 447, 450, 453, 459, 527, 544, 567, 571, 589, 596, 601, 602, 640, 641, 810, 811, 812, 820, 825, 828, 833, 877, 887, 914, 917, 1000, 1001, 1005, 1007, 1008, 1009, 1012, 1015, 1016, 1020, 1022, 1023, 1024, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "product": [2, 58, 105, 123, 159, 174, 179, 191, 350, 366, 370, 385, 386, 389, 392, 412, 420, 422, 458, 546, 548, 555, 590, 597, 598, 599, 621, 622, 641, 648, 672, 673, 693, 694, 769, 771, 783, 785, 884, 887, 904, 905, 957, 998, 1001, 1005, 1007, 1019, 1021, 1023, 1024, 1028, 1033, 1035, 1048], "production": 1033, "prof": 389, "profession": 190, "professor": 1033, "profil": [217, 370, 383, 386, 529, 532, 1005, 1033], "profile_default": 389, "profit": [0, 269, 333, 1057], "prog": [172, 380], "prognosi": [172, 380], "program": [0, 85, 172, 358, 366, 371, 372, 380, 381, 383, 385, 389, 395, 516, 643, 678, 902, 903, 1005, 1024, 1025, 1028, 1029, 1032, 1040, 1042], "programmat": [385, 507, 1049], "progress": [43, 46, 47, 123, 161, 172, 186, 210, 301, 329, 380, 387, 388, 398, 406, 411, 415, 567, 568, 700, 841, 843, 846, 861, 869, 870, 1033, 1040, 1042, 1049, 1054], "prohibit": [189, 254, 419, 422, 635, 1014, 1022, 1047], "proj": [53, 657], "proj_gradi": 389, "proj_oper": 53, "project": [2, 37, 45, 47, 50, 53, 55, 69, 80, 90, 93, 102, 120, 122, 123, 125, 127, 129, 133, 178, 180, 182, 183, 187, 191, 214, 237, 238, 239, 241, 243, 245, 249, 252, 261, 300, 305, 309, 314, 343, 358, 370, 375, 377, 381, 382, 383, 388, 389, 392, 397, 398, 401, 412, 418, 420, 421, 427, 447, 453, 458, 459, 469, 481, 489, 490, 491, 492, 496, 510, 512, 539, 541, 542, 543, 545, 547, 549, 550, 551, 552, 556, 557, 581, 590, 597, 649, 650, 657, 680, 682, 696, 699, 703, 704, 842, 861, 889, 904, 905, 906, 955, 956, 1003, 1005, 1006, 1007, 1010, 1012, 1013, 1015, 1022, 1025, 1030, 1033, 1035, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "projected_data": 248, "projected_dist": 248, "projectedgradientnmf": 1045, "prokopi": [1045, 1048], "prolifer": 385, "prolin": [57, 321, 380], "promin": [126, 397], "promis": [397, 1029], "promot": [190, 449, 716, 1028, 1051, 1053, 1057], "prompt": [381, 383, 387, 401, 408, 423], "prone": [64, 217, 262, 320, 395, 413], "pronounc": [74, 75, 87, 179], "proof": [395, 422, 906, 1021], "prop": [107, 114, 223, 262, 302, 345, 365], "propag": [2, 58, 68, 71, 72, 84, 98, 99, 170, 187, 334, 378, 447, 461, 510, 520, 522, 705, 712, 713, 721, 722, 725, 726, 745, 801, 803, 872, 886, 907, 908, 909, 974, 975, 1013, 1030, 1031, 1034, 1035, 1040, 1052, 1055], "proper": [64, 90, 206, 235, 269, 372, 385, 389, 413, 422, 456, 549, 561, 684, 956, 983, 1004, 1005, 1006, 1009, 1024, 1040, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "properli": [43, 52, 62, 90, 155, 179, 270, 325, 372, 381, 383, 387, 391, 421, 912, 913, 914, 915, 916, 917, 918, 998, 1043, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "properti": [51, 62, 181, 182, 219, 234, 261, 298, 321, 365, 370, 376, 383, 385, 401, 412, 413, 415, 417, 420, 422, 424, 425, 430, 449, 452, 458, 459, 460, 471, 472, 550, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 599, 601, 602, 605, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 640, 654, 660, 663, 668, 670, 682, 683, 707, 712, 713, 716, 807, 808, 811, 812, 822, 830, 840, 841, 871, 872, 885, 886, 887, 893, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 1001, 1004, 1005, 1006, 1009, 1010, 1012, 1015, 1019, 1022, 1024, 1025, 1026, 1029, 1045, 1049, 1050, 1053, 1054, 1057, 1058], "property_magnitud": 269, "propon": 104, "proport": [54, 63, 75, 153, 171, 203, 217, 224, 230, 244, 254, 269, 278, 282, 299, 303, 306, 353, 355, 365, 370, 378, 413, 415, 417, 419, 420, 422, 423, 445, 446, 453, 476, 481, 523, 557, 558, 563, 565, 567, 568, 569, 570, 571, 572, 591, 592, 596, 599, 635, 640, 666, 667, 674, 675, 676, 682, 683, 684, 686, 704, 709, 720, 730, 809, 810, 811, 812, 825, 828, 838, 858, 869, 870, 886, 912, 913, 914, 917, 918, 920, 922, 924, 926, 944, 998, 1008, 1009, 1012, 1015, 1023, 1024, 1025, 1045, 1057], "propos": [92, 111, 112, 296, 378, 383, 385, 395, 397, 415, 417, 422, 427, 457, 543, 615, 616, 684, 685, 686, 869, 870, 1005, 1008, 1012, 1023, 1047], "proprietari": 1025, "propto": [421, 1011], "prorokovi\u0107": 1058, "protect": [384, 387, 974], "protein": 377, "protocol": [409, 1009, 1028, 1043, 1056, 1057], "protocol_typ": 254, "prototyp": 1033, "prove": [124, 1033], "proven": [275, 1003, 1007, 1033], "provenc": 322, "provid": [0, 2, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 90, 95, 114, 123, 144, 145, 153, 156, 158, 174, 180, 190, 191, 197, 203, 204, 206, 218, 221, 238, 242, 245, 246, 251, 265, 269, 275, 276, 277, 281, 306, 309, 313, 316, 320, 325, 326, 328, 330, 344, 350, 353, 357, 358, 361, 365, 366, 370, 372, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 389, 391, 392, 395, 396, 397, 400, 401, 406, 409, 411, 412, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 426, 427, 429, 436, 444, 447, 449, 450, 451, 453, 454, 456, 457, 459, 466, 467, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 499, 501, 502, 504, 506, 509, 540, 541, 542, 543, 546, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 601, 602, 609, 613, 618, 619, 635, 640, 641, 642, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 698, 702, 707, 719, 730, 743, 749, 750, 772, 782, 786, 796, 800, 802, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 820, 821, 822, 824, 826, 827, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 869, 870, 872, 875, 877, 878, 879, 882, 883, 884, 887, 889, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 928, 930, 944, 950, 961, 965, 967, 984, 985, 986, 997, 998, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1032, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "provinc": 322, "provost": [796, 1009], "proxi": [189, 190, 420, 868, 1045], "prun": 389, "prune": [187, 360, 365, 424, 508, 565, 566, 567, 568, 572, 573, 601, 652, 838, 920, 921, 922, 923, 1012, 1030, 1031, 1035, 1040, 1043, 1050, 1051], "przybocki": 1009, "ps_lsvm_score": 195, "ps_lsvm_time": 195, "pseudo": [218, 314, 385, 419, 427, 447, 459, 461, 469, 476, 477, 478, 480, 481, 482, 483, 541, 569, 570, 571, 635, 642, 647, 649, 650, 654, 655, 660, 661, 668, 669, 670, 671, 685, 699, 703, 811, 812, 820, 822, 861, 868, 904, 905, 909, 912, 913, 914, 917, 955, 956, 1005, 1021, 1045, 1054], "pseudo_likelihood": 868, "pseudocount": [544, 1048], "psf": 383, "psi": 420, "psi_1": 420, "psi_2": 420, "psi_n": 420, "pspachtholz": [1050, 1051, 1052], "psycholog": [415, 713, 724], "psychometrica": 643, "psychometrika": [698, 702, 1006], "pt": [50, 378, 424, 888, 1019], "pt_i": 306, "pt_j": 306, "ptocca": 1050, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [242, 907], "public": [0, 112, 377, 383, 385, 387, 388, 395, 396, 397, 398, 419, 422, 475, 672, 679, 693, 694, 700, 910, 1005, 1013, 1040, 1045, 1046, 1051, 1052, 1053, 1056], "publicli": [383, 1050], "publish": [377, 378, 385, 387, 391, 397, 1021, 1029, 1052], "pubu": [231, 248, 302, 345], "pubu_r": 113, "puerta": 1055, "puggioni": 1044, "puhuk": [1054, 1055], "pujalt": 1054, "pulapakura": [1057, 1058], "pulchritud": 357, "pulido": 1053, "pulkit": [1048, 1049, 1051], "pull": [104, 328, 371, 381, 386, 397, 398, 1032, 1050], "puls": 380, "punctuat": [423, 596, 597, 599], "puneet": 1047, "puneeth": [1057, 1058], "puor": 126, "puor_r": 178, "pure": [113, 114, 118, 202, 217, 397, 415, 480, 486, 504, 565, 566, 567, 568, 572, 573, 574, 713, 723, 794, 803, 920, 921, 922, 923, 1019], "pure_emp_cov": 114, "pure_loc": 114, "pure_x": 114, "purepremium": 235, "puriti": [139, 924, 926], "purna": 1054, "purpl": [111, 121, 241], "purport": 1047, "purpos": [48, 51, 72, 118, 148, 153, 185, 231, 232, 233, 237, 239, 252, 263, 265, 269, 271, 272, 346, 347, 353, 357, 358, 366, 378, 383, 396, 397, 398, 401, 408, 412, 415, 416, 420, 422, 423, 424, 425, 834, 835, 872, 929, 1006, 1009, 1010, 1012, 1015, 1028, 1052, 1054, 1058], "pursu": 190, "pursuit": [2, 124, 126, 132, 187, 196, 288, 420, 481, 534, 539, 545, 550, 556, 672, 673, 693, 694, 1030, 1031, 1035, 1040], "push": [64, 383, 387, 413, 1032], "pushd": 391, "put": [75, 93, 165, 174, 176, 245, 249, 256, 260, 289, 311, 318, 329, 340, 351, 355, 372, 385, 387, 388, 391, 409, 425, 450, 454, 466, 523, 622, 655, 669, 805, 889, 893, 901, 914, 915, 916, 917, 918, 946, 999, 1006, 1008, 1009, 1010, 1016, 1019], "putnam": 1046, "putschblo": 1053, "pvalu": [2, 600, 603, 604, 606, 607, 608, 837], "pvalue_iri": 281, "pvalue_rand": 281, "pvalues_": [168, 600, 603, 604, 606, 607, 608, 1040], "pvnguyen": 1044, "pwalchessen": 1052, "pwd": 391, "px": [143, 276], "pxd": 383, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 371, 383, 384, 387, 389, 391, 397, 401, 423, 426, 447, 451, 461, 506, 538, 652, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 887, 891, 951, 1009, 1028, 1030, 1040, 1042, 1046, 1050, 1054], "py3": 401, "py39": 401, "pyamg": [81, 401, 408, 415, 459, 469, 699, 703], "pyarrow": [401, 408], "pybrain": 1040, "pycon": [409, 1027], "pyd": 384, "pydata": [43, 383, 391, 401, 408, 409, 1027, 1033], "pydata_2013": 1033, "pydebug": 389, "pyflak": 385, "pyfunc": [707, 1012], "pyfuncdist": 707, "pymc": 1028, "pynndesc": 296, "pynndescenttransform": 296, "pyodid": 383, "pyoxid": 1053, "pypi": [371, 381, 385, 387, 389, 401, 1025, 1048, 1052, 1054, 1055, 1057], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 193, 195, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 329, 330, 332, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 379, 383, 390, 445, 510, 639, 640, 705, 706, 708, 709, 710, 814, 831, 1037, 1054], "pyplpt": 377, "pypy3": 1048, "pysniak": 1043, "pystruct": 395, "pytabl": 377, "pytb": 391, "pytest": [2, 325, 371, 381, 383, 385, 386, 401, 408, 411, 931, 950, 951, 1050, 1053], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 370, 372, 377, 381, 383, 384, 385, 386, 387, 388, 391, 392, 395, 397, 401, 402, 408, 409, 411, 416, 423, 504, 516, 517, 589, 707, 819, 886, 1009, 1019, 1024, 1025, 1029, 1032, 1033, 1035, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057], "python2": 1048, "python3": [381, 401], "python37": 401, "pythonsoftwarefound": 401, "pythonx": 381, "pytorch": [45, 333, 395, 1028, 1029, 1056, 1057], "pytorch_enable_mps_fallback": 411, "pyx": [383, 384, 389, 391], "p\u00e9rez": 1048, "p\u00f6lsterl": [1047, 1050, 1053], "q": [51, 105, 117, 150, 217, 328, 412, 415, 420, 955, 1005, 1024], "q1": 517, "q327": 380, "q_": 1024, "q_m": 1025, "q_max": [890, 902], "q_min": [890, 902], "qaiser": 1057, "qda": [67, 380, 557, 558, 1031, 1035, 1045], "qdeffens": [1050, 1053], "qemu": 391, "qi": [517, 1052], "qian": [1046, 1051], "qiang": 1044, "qianm": 1052, "qid": [494, 516, 517, 1041, 1046], "qimu": 1046, "qin": [0, 380, 404, 423, 1047, 1048, 1049, 1050, 1051, 1059], "qingi": 1048, "qizhi": 1051, "qmarcou": 1057, "qn": 517, "qodari": 1058, "qp": 1024, "qr": [81, 219, 411, 542, 549, 552, 955, 956, 1006, 1046, 1057], "qt": [320, 889], "qtconsol": 389, "quad": [425, 1012, 1023], "quadcontourset": 639, "quadmesh": 639, "quadrant": 316, "quadrat": [2, 12, 43, 48, 65, 69, 113, 114, 115, 179, 187, 231, 254, 265, 277, 328, 447, 465, 468, 557, 558, 631, 639, 656, 666, 667, 677, 684, 688, 724, 917, 918, 1005, 1006, 1009, 1012, 1015, 1019, 1023, 1024, 1030, 1031, 1035, 1041], "quadraticdiscriminantanalysi": [2, 67, 70, 557, 1003, 1010, 1012, 1040, 1045, 1047, 1055, 1059], "quadro": 1053, "quadv": 1054, "qualifi": 388, "qualit": [44, 45, 88, 90, 96, 143, 150, 217, 330, 378, 415, 446, 709, 1055], "qualiti": [0, 13, 27, 45, 58, 61, 72, 81, 83, 84, 93, 126, 146, 153, 190, 223, 268, 273, 282, 283, 284, 350, 383, 391, 395, 397, 410, 415, 417, 420, 459, 469, 476, 481, 565, 566, 567, 568, 572, 573, 751, 822, 904, 905, 920, 921, 922, 923, 956, 1004, 1006, 1014, 1021, 1025, 1028, 1029, 1033, 1035], "quang": 1051, "quansight": 0, "quantifi": [13, 27, 43, 72, 84, 111, 179, 235, 269, 282, 333, 385, 397, 410, 581, 875, 1004, 1017, 1019, 1035], "quantil": [2, 79, 88, 98, 137, 139, 187, 196, 316, 319, 320, 379, 395, 422, 445, 446, 465, 527, 560, 561, 568, 570, 665, 678, 731, 753, 756, 758, 835, 877, 889, 890, 891, 901, 902, 1009, 1019, 1030, 1031, 1035, 1040, 1044, 1047, 1049, 1053, 1054, 1056, 1058], "quantile_list": 52, "quantile_rang": [316, 890, 902, 1046], "quantile_regress": 219, "quantile_transform": [2, 109, 889, 900, 1019, 1047, 1048, 1049, 1058], "quantileregressor": [2, 328, 1005, 1009, 1053, 1054, 1055], "quantiles_": [889, 1019, 1050], "quantiletransform": [2, 109, 191, 320, 416, 472, 888, 901, 999, 1019, 1047, 1048, 1049, 1050, 1051, 1056, 1058], "quantiletransformerquantiletransform": 191, "quantit": [43, 44, 45, 52, 62, 96, 150, 153, 161, 172, 271, 290, 380], "quantiti": [51, 147, 275, 327, 370, 397, 415, 422, 729, 730, 731, 732, 793, 868, 998, 1000, 1003, 1005, 1045], "quantiz": [45, 71, 81, 93, 126, 187, 377, 378, 415, 450, 454, 456, 514, 787, 877, 982, 1019, 1030], "quantum": 1007, "quartil": 890, "quartimax": [540, 1052], "quasi": [385, 869, 870, 1005], "quazi": [1047, 1048], "queensland": 380, "quentin": [1047, 1048, 1049, 1056, 1057], "queqichao": 1044, "queri": [197, 299, 309, 370, 421, 426, 451, 453, 457, 464, 560, 618, 619, 636, 652, 653, 734, 764, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 1009, 1012, 1025, 1028, 1032, 1042, 1044, 1045, 1048], "query_id": [494, 516, 517], "query_radiu": [852, 853], "question": [0, 163, 189, 269, 275, 353, 382, 383, 388, 391, 409, 419, 422, 841, 914, 917, 1005, 1008, 1009, 1015, 1033], "queue": [47, 1012, 1043], "quick": [43, 128, 257, 383, 385, 389, 401, 614, 838, 1009, 1010, 1019, 1033, 1037], "quicker": 1008, "quickest": 381, "quickli": [74, 255, 312, 325, 380, 383, 384, 419, 422, 700, 786, 1005, 1012, 1013, 1033, 1051], "quinlan": 1025, "quinonez": 1048, "quintana": 1009, "quit": [43, 52, 64, 88, 92, 118, 140, 163, 172, 190, 191, 215, 235, 269, 283, 293, 328, 357, 370, 388, 396, 415, 423, 1004, 1006, 1011, 1033, 1048], "quiver": 125, "quot": [37, 51, 52, 54, 104, 276, 357, 358, 371, 377, 378, 381, 383, 387, 401, 402, 411, 495, 496, 504, 1009, 1021, 1024, 1055], "quota": [1053, 1054], "quotat": 378, "quotient": 1009, "r": [0, 2, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 100, 109, 111, 112, 113, 114, 118, 123, 130, 133, 137, 140, 141, 146, 150, 151, 152, 161, 168, 175, 176, 177, 181, 182, 183, 185, 186, 190, 200, 202, 205, 206, 217, 224, 227, 235, 242, 247, 250, 260, 263, 266, 274, 275, 278, 280, 281, 282, 285, 288, 291, 295, 298, 299, 303, 307, 309, 322, 329, 348, 350, 359, 366, 378, 380, 384, 387, 395, 397, 409, 412, 413, 415, 417, 418, 419, 420, 422, 423, 432, 438, 444, 453, 458, 460, 472, 476, 481, 485, 489, 490, 491, 506, 512, 521, 528, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 596, 597, 598, 599, 602, 614, 617, 618, 619, 635, 643, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 693, 694, 700, 704, 724, 729, 730, 731, 732, 736, 738, 789, 793, 796, 807, 808, 822, 825, 830, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 861, 862, 863, 869, 870, 883, 888, 900, 907, 908, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 925, 974, 999, 1001, 1003, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1019, 1023, 1024, 1025, 1028, 1040, 1044, 1047, 1050, 1051, 1052, 1053, 1055, 1057], "r0": [811, 812], "r1": 578, "r11": [217, 235], "r2": [109, 138, 143, 158, 189, 191, 212, 250, 416, 422, 562, 578, 681, 835, 870, 930, 1009, 1017, 1049], "r2007": 422, "r22": 217, "r25": 235, "r26": 217, "r2_score": [2, 109, 189, 202, 212, 213, 411, 422, 438, 472, 489, 490, 491, 562, 564, 566, 568, 570, 573, 576, 578, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 732, 736, 845, 846, 855, 863, 870, 913, 915, 918, 921, 923, 998, 1009, 1041, 1043, 1049, 1053, 1054, 1058], "r2_score_ard": 202, "r2_score_enet": 202, "r2_score_lasso": 202, "r2_score_nnl": 212, "r2_score_ol": 212, "r2_with_abl": 189, "r2_without_": 189, "r3": 578, "r72": 217, "r73": 235, "r82": 217, "r93": 217, "r_": [50, 132, 230, 231, 261, 282, 302, 303, 345, 351, 355, 415, 715, 1009, 1025], "r_0": 998, "r_k": 282, "r_multi": 1017, "r_n": [282, 715, 1009], "r_regress": [2, 424, 614, 1053, 1054, 1057], "r_squar": 396, "raamana": [1048, 1049], "rabbit": [329, 331, 1019], "raccoon": [88, 126, 420], "raccoon_fac": [88, 126], "race": [190, 332, 378, 504, 1043], "race_hispan": 190, "race_oth": 190, "race_whit": 190, "rachel": [1052, 1055], "rachelcjordan": 1051, "rachez": [1045, 1046], "rachit": [1046, 1052, 1055], "rachum": 1052, "radar": 1033, "radford": 1005, "radhakrishnan": 1048, "radial": [2, 44, 128, 174, 179, 181, 346, 350, 375, 459, 630, 699, 1007, 1024, 1035], "radian": [309, 707, 772], "radii": [852, 853], "radiu": [2, 172, 291, 303, 346, 380, 415, 449, 457, 696, 772, 789, 852, 853, 854, 855, 856, 860, 862, 863, 864, 866, 1012, 1042, 1044, 1054, 1057], "radius1": 101, "radius2": 101, "radius3": 101, "radius4": 101, "radius_neighbor": [329, 860, 862, 863, 864, 1044, 1049, 1050, 1052, 1053, 1054, 1055], "radius_neighbors_graph": [2, 415, 426, 451, 854, 855, 856, 858, 860, 862, 863, 864, 865, 1012, 1044, 1049, 1052], "radiusneighborsclassifi": [2, 329, 854, 855, 860, 863, 1010, 1012, 1040, 1042, 1046, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "radiusneighborsregressor": [2, 329, 854, 855, 860, 862, 1010, 1012, 1040, 1042, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "radiusneighborstransform": [2, 325, 856, 1012, 1050, 1052, 1054, 1055], "radostin": [1048, 1049], "raduspaimoc": 1051, "raf": 1049, "rafael": [1033, 1041, 1042, 1044, 1047], "rafal": [1055, 1056], "rafei": 1052, "raff": 1043, "raffaello": 1049, "rafiqu": [1048, 1049], "raghav": [0, 405, 1044, 1045, 1046, 1047, 1048, 1052], "raghavan": [420, 598, 847, 851, 1007, 1009, 1011], "raghu": [415, 449], "raghunathan": [1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "raghuv": [1055, 1056], "raghuwanshi": 1054, "rah": 649, "rahiel": 1044, "rahil": [1054, 1055, 1056, 1057, 1058], "rahimi": [649, 1001], "rahmaan": 1050, "rahman": [1047, 1048, 1052], "rahn": [1047, 1050], "rahul": [1052, 1057], "rai": [0, 405, 1009, 1040, 1050, 1052, 1053], "raimundo": 1048, "rain": [43, 52, 191, 414, 1005], "rainbow": [61, 239], "rainfal": 1005, "rais": [2, 135, 218, 251, 252, 269, 278, 320, 328, 383, 385, 387, 388, 389, 392, 395, 397, 406, 409, 416, 419, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 517, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 581, 584, 585, 589, 590, 596, 597, 598, 599, 611, 618, 619, 625, 637, 640, 643, 644, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 704, 706, 710, 717, 719, 720, 721, 722, 724, 735, 737, 738, 746, 786, 790, 791, 792, 795, 796, 797, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 822, 826, 830, 831, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 861, 862, 863, 867, 869, 870, 871, 872, 875, 876, 877, 878, 879, 884, 885, 886, 890, 891, 892, 899, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 931, 936, 938, 939, 941, 942, 960, 965, 969, 992, 993, 994, 995, 997, 998, 1009, 1019, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "raisadz": 1058, "raise_exc": [719, 1059], "raise_except": 994, "raise_warn": [278, 720, 994], "raj": [1057, 1058], "rajagopalan": [0, 405, 1048, 1052], "rajaona": [1046, 1047], "rajat": [1043, 1050], "rajdeep": 1049, "rajendra": 1048, "raji": [1055, 1056], "rakotoarison": [1047, 1048, 1050], "ralf": [1043, 1046, 1047, 1055, 1056, 1058], "ralph": 1058, "ram": [55, 88, 372, 409, 422, 904, 905, 1011, 1024, 1046, 1052, 1055, 1056], "ramakrishnan": [415, 449], "ramana": [1046, 1047], "ramanath": 1045, "ramesh": [378, 1033, 1043, 1046, 1050], "rameshwar": [1047, 1048], "ramil": [1048, 1049], "rammig": [1033, 1046], "ramo": 1055, "rampin": 1047, "ramyanp": [1052, 1053], "ramzi": 1052, "ram\u00edrez": 1009, "rand": [2, 53, 61, 72, 73, 74, 75, 79, 84, 93, 97, 130, 140, 155, 157, 167, 197, 202, 239, 240, 244, 250, 251, 290, 308, 326, 327, 332, 339, 340, 352, 358, 363, 364, 392, 406, 552, 712, 713, 723, 765, 789, 794, 904, 905, 907, 908, 909, 1021, 1040, 1051, 1052], "rand_index": 713, "rand_scor": [2, 72, 415, 723, 1009, 1052], "randal": [892, 1044, 1054], "randi": 1046, "randint": [50, 72, 114, 121, 149, 186, 192, 240, 247, 251, 253, 287, 327, 332, 385, 388, 396, 406, 812, 829, 847, 848, 849, 851, 998, 999], "randn": [53, 69, 70, 74, 89, 100, 101, 113, 114, 126, 130, 154, 167, 174, 178, 189, 192, 206, 211, 212, 216, 230, 231, 234, 261, 264, 265, 270, 282, 284, 285, 290, 302, 303, 323, 326, 327, 332, 345, 350, 351, 355, 385, 388, 651, 678, 680, 686, 695, 829, 915, 918], "randolf": 1058, "random": [2, 14, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 80, 83, 85, 87, 89, 90, 92, 93, 95, 96, 97, 99, 100, 101, 105, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 121, 124, 125, 126, 129, 130, 136, 138, 140, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 158, 161, 165, 167, 168, 171, 174, 175, 178, 180, 181, 183, 185, 186, 187, 188, 189, 197, 198, 199, 200, 202, 206, 207, 211, 212, 215, 216, 217, 218, 219, 220, 223, 224, 226, 230, 231, 234, 235, 237, 238, 240, 241, 242, 243, 244, 249, 250, 251, 252, 253, 254, 260, 261, 263, 264, 265, 266, 267, 270, 272, 273, 274, 275, 276, 278, 280, 282, 284, 285, 286, 287, 290, 295, 296, 301, 302, 303, 308, 311, 317, 319, 320, 323, 326, 327, 329, 331, 333, 335, 336, 339, 340, 345, 346, 348, 349, 350, 351, 352, 355, 357, 358, 363, 364, 370, 371, 375, 379, 386, 388, 395, 396, 397, 406, 410, 411, 413, 415, 423, 424, 428, 440, 447, 450, 454, 456, 458, 459, 460, 461, 465, 466, 467, 469, 471, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 495, 496, 497, 498, 500, 503, 504, 505, 510, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 544, 546, 547, 548, 549, 552, 555, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 590, 591, 592, 597, 615, 616, 618, 619, 635, 638, 640, 642, 647, 648, 649, 650, 651, 654, 655, 657, 658, 660, 661, 662, 666, 668, 669, 670, 671, 678, 679, 680, 684, 685, 686, 687, 695, 697, 698, 699, 700, 701, 702, 703, 709, 712, 713, 716, 739, 751, 789, 796, 801, 805, 806, 808, 810, 811, 812, 813, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 837, 838, 843, 845, 846, 847, 848, 849, 851, 852, 853, 857, 861, 868, 869, 870, 872, 875, 877, 886, 889, 893, 901, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 941, 953, 955, 956, 977, 979, 982, 999, 1001, 1004, 1006, 1008, 1009, 1013, 1014, 1015, 1017, 1019, 1024, 1025, 1029, 1030, 1031, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "random_": 206, "random_02": 206, "random_05": 206, "random_08": 206, "random_11": 206, "random_cat": [192, 1017], "random_choice_csc": 1050, "random_forest": 142, "random_from_data": [263, 805, 806, 1008], "random_label": 72, "random_num": [192, 1017], "random_offset_": [649, 650], "random_project": [2, 238, 248, 904, 905, 906, 1021, 1026, 1041, 1046, 1056, 1057], "random_sampl": [202, 852, 853, 857], "random_se": [49, 121, 146], "random_search": [276, 283], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 81, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 109, 115, 118, 121, 123, 125, 128, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 163, 168, 169, 171, 174, 180, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 199, 200, 203, 209, 216, 217, 220, 221, 223, 224, 225, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 249, 252, 253, 254, 255, 257, 258, 260, 262, 263, 266, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 293, 295, 296, 299, 300, 304, 305, 306, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 338, 344, 346, 347, 348, 353, 354, 357, 358, 361, 365, 366, 379, 385, 388, 392, 396, 397, 411, 414, 415, 416, 419, 420, 422, 423, 427, 440, 444, 445, 447, 450, 454, 456, 458, 459, 460, 461, 465, 466, 467, 469, 476, 481, 485, 494, 495, 498, 500, 503, 505, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 591, 592, 601, 602, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 640, 641, 642, 643, 646, 647, 648, 649, 650, 654, 655, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 682, 684, 685, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 718, 743, 796, 800, 801, 805, 806, 807, 810, 811, 812, 813, 814, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 857, 861, 868, 869, 870, 872, 877, 889, 893, 901, 904, 905, 912, 913, 914, 917, 919, 920, 921, 922, 923, 925, 926, 928, 930, 931, 953, 955, 956, 977, 979, 982, 998, 999, 1001, 1004, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1019, 1024, 1025, 1037, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053], "random_state_": [385, 544, 635, 861, 1054], "random_tre": 574, "random_tree_embed": 142, "random_unlabeled_point": [327, 907, 908, 909], "random_weights_": [649, 650], "randomforest": [49, 146, 370, 422, 920, 921, 1045], "randomforestclassifi": [2, 63, 64, 67, 91, 141, 142, 143, 144, 145, 146, 160, 192, 193, 256, 257, 272, 287, 325, 327, 332, 357, 366, 396, 397, 413, 422, 424, 565, 566, 567, 569, 574, 575, 577, 811, 812, 830, 842, 922, 998, 999, 1010, 1017, 1033, 1037, 1044, 1045, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057], "randomforestclassifierifittedrandomforestclassifi": [63, 144, 145, 332], "randomforestclassifierinot": 332, "randomforestclassifierrandomforestclassifi": [63, 192, 256, 287], "randomforestregressor": [2, 49, 143, 157, 158, 161, 185, 186, 327, 332, 396, 422, 565, 566, 568, 570, 574, 576, 578, 640, 641, 922, 999, 1010, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057], "randomforestregressorrandomforestregressor": [158, 161], "randomgeek78": 1054, "randomized_range_find": [2, 392, 1041, 1046], "randomized_svd": [2, 55, 392, 458, 460, 540, 549, 552, 554, 1040, 1041, 1046, 1053, 1054, 1055], "randomized_svd_low_rank": 1047, "randomizedlasso": 1047, "randomizedlogisticregress": 1047, "randomizedpca": [1033, 1040, 1042, 1043, 1045, 1046, 1047], "randomizedsearchcv": [2, 45, 105, 174, 276, 283, 327, 366, 396, 406, 411, 583, 998, 1009, 1023, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1055, 1057, 1058, 1059], "randomizedsearchcvinot": 105, "randomli": [2, 52, 72, 83, 85, 96, 105, 117, 119, 140, 153, 154, 185, 187, 191, 234, 248, 252, 265, 270, 281, 293, 295, 335, 366, 371, 392, 395, 396, 415, 419, 422, 425, 456, 465, 523, 531, 539, 545, 553, 554, 559, 567, 568, 569, 570, 571, 572, 573, 618, 619, 679, 687, 698, 702, 724, 805, 806, 868, 906, 920, 921, 922, 923, 1008, 1010, 1012, 1015, 1017, 1021, 1025, 1030, 1051, 1055, 1057, 1059], "randomst": [2, 44, 53, 58, 59, 61, 67, 70, 72, 79, 85, 96, 97, 114, 115, 118, 123, 125, 130, 138, 149, 150, 153, 154, 155, 157, 168, 174, 175, 178, 180, 181, 183, 185, 186, 189, 192, 197, 198, 199, 200, 202, 206, 211, 218, 219, 224, 231, 240, 244, 250, 251, 260, 263, 270, 278, 281, 282, 284, 285, 286, 287, 308, 311, 317, 319, 320, 323, 326, 327, 329, 331, 332, 335, 336, 340, 349, 363, 364, 385, 388, 392, 397, 406, 420, 427, 428, 447, 450, 454, 456, 458, 459, 460, 461, 465, 466, 467, 469, 476, 477, 481, 482, 483, 485, 486, 487, 488, 495, 498, 500, 503, 505, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 591, 592, 615, 616, 618, 619, 635, 640, 642, 647, 648, 649, 650, 651, 654, 655, 657, 658, 660, 661, 662, 666, 667, 668, 669, 670, 671, 674, 675, 676, 678, 679, 680, 682, 684, 685, 686, 687, 695, 697, 698, 699, 700, 701, 702, 703, 709, 789, 801, 805, 806, 810, 811, 812, 813, 814, 820, 822, 823, 824, 825, 826, 827, 828, 830, 836, 837, 838, 842, 843, 846, 847, 848, 849, 851, 852, 853, 857, 861, 868, 869, 870, 877, 889, 893, 901, 904, 905, 907, 908, 909, 912, 913, 914, 917, 918, 920, 921, 922, 923, 941, 955, 956, 977, 979, 982, 1019, 1035], "randomtreesembed": [2, 142, 156, 238, 422, 922, 999, 1041, 1048, 1049, 1053, 1054, 1055], "randomtreesembedding_": 574, "randomtreesembeddingrandomtreesembed": 142, "rang": [2, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 81, 82, 83, 85, 86, 90, 95, 96, 98, 99, 111, 112, 114, 115, 137, 139, 140, 141, 144, 150, 153, 157, 167, 170, 171, 175, 190, 191, 195, 202, 206, 207, 211, 215, 217, 218, 221, 224, 225, 233, 235, 238, 240, 247, 248, 253, 254, 260, 262, 265, 266, 269, 270, 274, 275, 276, 278, 279, 280, 282, 283, 284, 286, 287, 288, 290, 295, 300, 306, 308, 309, 314, 316, 321, 322, 325, 329, 330, 336, 346, 353, 357, 358, 362, 365, 371, 377, 378, 380, 383, 385, 389, 392, 397, 409, 415, 419, 422, 425, 447, 468, 476, 478, 479, 480, 481, 482, 483, 485, 488, 498, 502, 503, 522, 535, 549, 561, 562, 567, 568, 571, 596, 597, 599, 637, 640, 646, 648, 656, 657, 677, 679, 684, 685, 686, 688, 700, 720, 739, 754, 796, 838, 844, 858, 860, 862, 863, 868, 882, 889, 890, 891, 897, 898, 901, 902, 905, 906, 955, 956, 998, 1005, 1009, 1013, 1023, 1029, 1033, 1045, 1046, 1047, 1048, 1050, 1053, 1056], "range_n_clust": 95, "range_n_outli": 114, "rangeindex": [190, 269, 504], "rangl": [1001, 1009, 1023, 1024], "ranjanikrishnan": 1053, "rank": [2, 43, 55, 62, 113, 127, 130, 144, 170, 192, 193, 235, 273, 275, 283, 379, 410, 412, 413, 417, 418, 420, 422, 423, 516, 517, 529, 532, 557, 558, 601, 602, 614, 656, 665, 677, 688, 704, 728, 734, 735, 747, 748, 764, 796, 802, 811, 812, 956, 998, 1000, 1001, 1006, 1017, 1019, 1033, 1035, 1041, 1046, 1049, 1050, 1054, 1055, 1058], "rank_": 665, "rank_t": 808, "rank_test_": 279, "rank_test_precis": [273, 279], "rank_test_recal": 273, "rank_test_scor": [275, 283, 808, 822, 1046], "rankdata": 1047, "ranked_exposur": [217, 235], "ranked_frequ": 217, "ranked_pure_premium": 235, "ranking_": [170, 601, 602], "rankylau": 1048, "ransac": [2, 187, 196, 223, 234, 532, 657, 665, 679, 686, 687, 1030], "ransacregressor": [2, 220, 223, 234, 406, 657, 686, 687, 1005, 1010, 1043, 1045, 1046, 1047, 1048, 1051, 1053, 1054, 1058], "rao": [419, 1052, 1055], "raphael": 1057, "rapha\u00ebl": 1050, "raphson": [656, 677, 688], "rapid": 1033, "rapidli": [221, 277, 1024, 1033], "rare": [64, 191, 322, 366, 387, 395, 397, 400, 413, 415, 419, 597, 656, 666, 667, 677, 688, 912, 943, 1005, 1019, 1033, 1047, 1048, 1049, 1053, 1055, 1058], "rarer": [357, 359, 423], "raschka": [1045, 1046, 1047, 1048, 1049, 1052], "rashchedrin": 1047, "rasmu": [195, 1047], "rasmussen": [179, 425, 618, 619, 622, 627, 630], "raspberri": 401, "raster": 104, "rastgoo": 1057, "rastogi": 1048, "rastrojo": [415, 713], "rasul": [1045, 1047, 1048], "rat": [50, 309, 378, 506], "rate": [2, 43, 137, 141, 147, 153, 167, 191, 217, 224, 235, 248, 254, 269, 272, 275, 284, 285, 312, 313, 314, 372, 383, 414, 415, 416, 420, 424, 453, 473, 544, 561, 562, 567, 568, 569, 570, 600, 603, 604, 606, 607, 608, 614, 652, 653, 676, 684, 685, 686, 700, 706, 710, 735, 790, 797, 868, 869, 870, 906, 998, 1005, 1006, 1009, 1012, 1013, 1023, 1025, 1033, 1044, 1048, 1049], "rather": [51, 64, 88, 115, 137, 140, 153, 185, 190, 217, 218, 231, 254, 289, 320, 321, 357, 358, 366, 371, 379, 381, 383, 385, 388, 389, 391, 395, 396, 397, 398, 415, 419, 420, 422, 423, 425, 455, 468, 470, 471, 474, 573, 589, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 637, 654, 655, 660, 661, 668, 669, 670, 671, 789, 822, 843, 845, 846, 875, 912, 913, 924, 929, 956, 1003, 1005, 1006, 1009, 1011, 1012, 1016, 1029, 1040, 1041, 1042, 1043, 1047, 1048, 1049, 1050, 1055, 1056, 1058, 1059], "ratio": [2, 46, 88, 101, 107, 131, 187, 248, 250, 263, 267, 370, 383, 415, 417, 419, 422, 457, 463, 501, 502, 523, 549, 557, 558, 559, 639, 666, 718, 720, 724, 733, 738, 744, 747, 790, 791, 792, 795, 803, 835, 838, 858, 905, 977, 1003, 1015, 1025, 1030, 1055, 1057], "ration": [2, 179, 269, 631, 1007], "rationalquadrat": [2, 179, 183, 425, 624], "raton": 1005, "raul": [1042, 1043], "rausch": [1048, 1049, 1052], "rauwuckl": 1052, "ravel": [2, 44, 53, 55, 57, 63, 77, 88, 89, 93, 113, 132, 138, 140, 146, 150, 156, 157, 158, 165, 174, 176, 178, 179, 180, 181, 190, 197, 207, 208, 210, 217, 230, 231, 238, 242, 244, 248, 250, 254, 258, 262, 264, 269, 278, 282, 284, 289, 296, 301, 302, 308, 309, 311, 312, 313, 314, 318, 319, 329, 333, 340, 346, 351, 352, 354, 355, 357, 363, 364, 472, 501, 502, 503, 639, 726, 995, 1009, 1056], "ravi": [1052, 1055], "raw": [2, 17, 43, 51, 52, 54, 72, 114, 125, 158, 179, 190, 195, 314, 323, 337, 359, 370, 378, 385, 391, 397, 413, 415, 417, 420, 423, 476, 481, 509, 510, 511, 567, 568, 569, 571, 590, 596, 597, 598, 599, 642, 685, 698, 702, 713, 794, 858, 916, 1006, 1009, 1013, 1015, 1016, 1019, 1022, 1041, 1045, 1048, 1051, 1057], "raw_coef_": [912, 913], "raw_covariance_": [417, 476, 481], "raw_data": 359, "raw_docu": [596, 599], "raw_location_": [417, 476, 481], "raw_model": 323, "raw_pixel_classifi": 314, "raw_support_": [476, 481], "raw_target_regr": 416, "raw_valu": [729, 731, 736, 753, 754, 756, 758, 759, 761, 793, 798, 799, 1009, 1048, 1051], "raw_x": [423, 590], "raytheon": 51, "raz": 1054, "ra\u00fal": 1049, "rb": [47, 409], "rbf": [2, 44, 45, 49, 50, 66, 67, 128, 159, 165, 174, 175, 176, 178, 179, 180, 181, 183, 187, 195, 231, 243, 244, 250, 273, 275, 277, 280, 291, 302, 340, 341, 343, 352, 375, 403, 416, 420, 422, 459, 469, 510, 512, 543, 549, 618, 619, 620, 621, 624, 626, 627, 628, 629, 631, 632, 639, 647, 648, 649, 650, 651, 684, 699, 773, 782, 784, 808, 819, 822, 828, 872, 892, 907, 908, 912, 914, 915, 916, 917, 918, 998, 1001, 1002, 1004, 1006, 1009, 1015, 1019, 1022, 1030, 1035, 1046, 1051], "rbf_featur": [649, 1001], "rbf_kernel": [2, 411, 773, 1007, 1044, 1059], "rbf_svc": [340, 1024], "rbfsampler": [2, 249, 647, 648, 650, 1001, 1044, 1054, 1055], "rbm": [2, 314, 868, 869, 870, 1014], "rbm_features_classifi": 314, "rc": [231, 387], "rceil": [412, 1015], "rcond": 132, "rcparam": [47, 244, 249, 323], "rcv1": [2, 376, 505, 1035, 1045], "rcwoolston": 1051, "rd": 423, "rd9e56ef97513": 2, "rda": 380, "rdbu": [67, 70, 123, 233, 311, 346, 351], "rdbu_r": [89, 115, 133, 346], "rdownload": 47, "rdylbu": [146, 362], "re": [43, 47, 53, 63, 64, 91, 104, 105, 137, 147, 177, 189, 190, 235, 251, 261, 265, 278, 280, 284, 326, 357, 359, 371, 383, 384, 391, 396, 398, 406, 413, 419, 423, 476, 477, 478, 479, 480, 481, 482, 483, 499, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 654, 660, 668, 670, 810, 825, 828, 920, 921, 922, 923, 1005, 1010, 1012, 1019, 1024, 1029, 1033, 1040, 1044, 1045, 1047, 1049, 1059], "reach": [96, 143, 148, 172, 180, 217, 219, 233, 235, 269, 277, 329, 346, 365, 388, 398, 401, 415, 420, 424, 457, 464, 516, 517, 601, 602, 635, 652, 653, 654, 655, 660, 661, 662, 663, 664, 668, 669, 670, 671, 674, 675, 676, 684, 685, 686, 687, 689, 690, 691, 692, 737, 738, 791, 805, 806, 869, 870, 909, 998, 1009, 1013, 1023, 1025, 1033, 1051, 1055, 1056, 1057], "reachability_": [100, 415, 457, 462, 463, 464], "reachabl": [2, 90, 100, 453, 457, 462, 463, 464, 858, 962], "react": 308, "reactiv": 389, "read": [47, 52, 55, 123, 237, 282, 325, 326, 327, 329, 331, 370, 377, 384, 385, 386, 387, 388, 390, 391, 395, 396, 397, 403, 409, 415, 426, 427, 428, 429, 432, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 621, 622, 623, 624, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 868, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 952, 998, 1005, 1009, 1010, 1028, 1033, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1057, 1058], "read_byt": 47, "read_csv": [51, 388, 504, 1055], "read_csv_kwarg": [504, 1056], "read_parquet": 52, "readabl": [115, 276, 328, 388, 389, 391, 542, 1049, 1052, 1053, 1054, 1055], "reader": [45, 77, 328, 372, 383], "readi": [43, 46, 179, 218, 269, 378, 383, 387, 391, 471], "readili": [329, 420, 1025, 1033], "readm": [391, 423, 501], "readonli": [912, 913, 1053, 1055, 1056], "readonly_memmap": 1057, "readthedoc": 397, "real": [52, 67, 70, 90, 92, 104, 108, 111, 113, 114, 137, 153, 177, 190, 221, 241, 244, 254, 268, 269, 281, 290, 300, 303, 317, 318, 345, 350, 359, 370, 376, 377, 380, 387, 389, 392, 395, 396, 397, 412, 413, 415, 417, 419, 420, 422, 423, 476, 496, 497, 501, 502, 503, 504, 505, 508, 509, 512, 518, 559, 560, 561, 563, 564, 565, 566, 567, 568, 572, 573, 600, 602, 603, 604, 605, 606, 607, 608, 639, 707, 712, 732, 736, 760, 763, 765, 793, 803, 837, 869, 870, 914, 915, 916, 917, 918, 921, 923, 999, 1000, 1001, 1006, 1009, 1011, 1013, 1014, 1015, 1025, 1027, 1030, 1035, 1040, 1053, 1057], "real_cov": [111, 112, 428, 477, 480, 481, 482, 483, 486, 487, 488], "real_data": 300, "realist": [43, 47, 277, 284, 285, 343, 378, 1009], "realiti": 379, "realiz": [217, 1033], "realli": [111, 192, 206, 387, 388, 389, 1009, 1015, 1033, 1054], "reappli": 422, "rearrang": [58, 59, 412], "reason": [43, 47, 51, 64, 77, 88, 104, 150, 153, 172, 190, 191, 195, 217, 218, 225, 235, 244, 248, 249, 251, 254, 269, 272, 275, 276, 281, 293, 296, 317, 321, 350, 358, 359, 366, 370, 371, 372, 378, 382, 383, 384, 385, 387, 391, 395, 396, 397, 398, 414, 415, 416, 417, 420, 422, 423, 516, 540, 582, 646, 654, 660, 662, 680, 695, 700, 771, 808, 822, 856, 861, 868, 887, 909, 928, 930, 931, 998, 999, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1015, 1019, 1023, 1024, 1025, 1033, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "reassign": [85, 383, 454, 456, 1041, 1045], "reassignment_ratio": 456, "rebalanc": 397, "rebas": 387, "rebecca": 1047, "rebekah": [1048, 1049, 1050], "reboul": 1050, "rebuild": [370, 381, 409, 423, 449], "rebuilt": [68, 381, 852, 853], "rec": [57, 359, 378, 649], "rec_l1": 53, "rec_l2": 53, "rec_macro": 419, "recal": [2, 45, 62, 68, 104, 115, 128, 169, 187, 245, 254, 267, 269, 273, 293, 314, 335, 336, 383, 397, 414, 415, 512, 612, 708, 714, 715, 716, 720, 721, 735, 737, 738, 739, 790, 791, 792, 795, 796, 830, 838, 841, 873, 892, 896, 912, 1005, 1025, 1030, 1043, 1044, 1047, 1049, 1050, 1052, 1053, 1054, 1056, 1057], "recalcul": [255, 257, 415, 1037, 1040], "recall_macro": [419, 1009], "recall_scor": [2, 62, 269, 282, 419, 716, 792, 1009, 1040, 1042, 1043, 1044, 1045, 1050, 1056], "recant": 398, "receiv": [0, 2, 57, 163, 187, 245, 251, 257, 267, 269, 270, 272, 359, 366, 383, 385, 391, 397, 414, 419, 422, 512, 666, 710, 714, 716, 735, 790, 796, 797, 827, 838, 840, 841, 879, 917, 1010, 1013, 1014, 1023, 1030, 1050, 1051], "recent": [52, 251, 381, 388, 391, 397, 415, 475, 546, 573, 1023, 1033, 1043, 1052], "recht": [649, 1001], "recip": [387, 409, 1006, 1033], "reciproc": [379, 1009], "reckon": 378, "recogn": [43, 44, 65, 86, 88, 118, 126, 145, 170, 187, 218, 268, 300, 328, 335, 336, 389, 406, 415, 423, 510, 705, 721, 838, 917, 1009, 1030, 1057], "recognit": [42, 48, 54, 123, 187, 250, 253, 314, 321, 376, 388, 420, 422, 424, 502, 510, 540, 542, 549, 705, 716, 721, 749, 777, 796, 797, 805, 822, 838, 892, 917, 1001, 1005, 1009, 1010, 1014, 1024, 1026, 1030, 1035, 1040], "recommend": [118, 145, 185, 234, 245, 251, 271, 284, 320, 327, 350, 370, 371, 377, 378, 381, 383, 385, 389, 391, 395, 401, 409, 418, 419, 420, 422, 424, 445, 454, 456, 458, 467, 504, 516, 543, 546, 552, 557, 569, 570, 577, 590, 591, 597, 614, 619, 639, 640, 646, 666, 667, 678, 684, 700, 705, 706, 708, 710, 814, 820, 822, 831, 868, 875, 877, 884, 891, 892, 897, 898, 900, 901, 902, 903, 905, 914, 917, 956, 997, 998, 1006, 1009, 1011, 1013, 1016, 1019, 1021, 1023, 1024, 1025, 1027, 1033, 1035, 1042, 1043, 1049, 1050, 1051, 1052, 1054, 1056], "recompil": [384, 389, 401], "recomput": [90, 91, 255, 257, 298, 325, 476, 481, 1005, 1021, 1045, 1056], "reconstruct": [2, 42, 55, 58, 101, 123, 124, 128, 187, 216, 240, 241, 329, 409, 420, 423, 489, 490, 491, 539, 541, 543, 545, 546, 547, 548, 550, 551, 553, 554, 556, 591, 595, 660, 680, 696, 697, 701, 904, 905, 1005, 1006, 1030, 1054], "reconstruct_from_patches_2d": [2, 126, 423, 591], "reconstruction_err_": [546, 548], "reconstruction_error": 696, "reconstruction_error_": 697, "record": [2, 50, 124, 141, 153, 192, 251, 269, 322, 359, 370, 383, 409, 415, 417, 457, 464, 506, 628, 651, 700, 779, 782, 786, 787, 788, 789, 835, 858, 1053, 1054], "recov": [75, 100, 115, 124, 125, 130, 147, 174, 189, 202, 216, 217, 221, 237, 359, 417, 421, 424, 427, 467, 541, 567, 1005, 1006, 1008, 1029, 1046], "recoveri": [51, 115, 202, 216, 417, 424], "recreat": [83, 255], "recreate_imag": 83, "rect": [47, 87, 197], "rect_colorbar": 316, "rect_histi": 316, "rect_histx": 316, "rect_scatt": 316, "rectangl": 47, "rectangular": [378, 397, 956, 1029], "rectifi": [869, 870], "recurs": [2, 18, 52, 86, 154, 163, 166, 169, 172, 187, 270, 273, 274, 280, 289, 300, 361, 385, 415, 419, 447, 448, 449, 452, 470, 510, 523, 571, 601, 602, 605, 610, 640, 641, 666, 827, 872, 882, 1009, 1012, 1015, 1016, 1025, 1030, 1031, 1035, 1040, 1050, 1051], "recursionerror": 1058, "red": [48, 49, 50, 63, 69, 70, 95, 113, 121, 123, 124, 125, 140, 158, 161, 183, 195, 197, 198, 207, 215, 242, 255, 270, 281, 309, 312, 317, 321, 322, 337, 346, 364, 381, 397, 415, 420, 1010], "reda": 1046, "redden": 1051, "reddi": [1047, 1048, 1049, 1054, 1057], "redefin": [58, 150, 190], "redesign": [395, 1040], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 449, "redo": 358, "reduc": [2, 37, 43, 46, 77, 80, 81, 82, 83, 88, 105, 106, 111, 140, 150, 152, 153, 156, 169, 190, 197, 198, 202, 215, 221, 222, 225, 246, 248, 251, 254, 276, 282, 293, 305, 318, 321, 322, 330, 358, 359, 366, 375, 377, 380, 383, 389, 395, 397, 409, 413, 414, 415, 417, 419, 420, 422, 423, 424, 426, 451, 452, 457, 464, 467, 501, 542, 552, 557, 563, 564, 565, 566, 571, 572, 573, 574, 581, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 618, 635, 651, 660, 680, 681, 682, 683, 695, 700, 703, 789, 808, 811, 812, 814, 822, 831, 833, 834, 835, 836, 839, 881, 882, 889, 901, 904, 905, 912, 913, 920, 921, 922, 923, 998, 1001, 1003, 1004, 1005, 1006, 1009, 1012, 1021, 1022, 1024, 1026, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1054, 1056, 1058], "reduce_dim": [106, 256, 274, 416], "reduce_dim__k": 106, "reduce_dim__n_compon": [106, 274, 416], "reduce_func": [789, 1051], "reduced_data": 93, "reducer_label": 106, "reduct": [2, 11, 45, 57, 89, 92, 103, 107, 118, 123, 131, 140, 156, 187, 236, 238, 239, 242, 248, 252, 297, 304, 306, 329, 343, 366, 370, 375, 415, 416, 418, 420, 422, 424, 475, 489, 490, 491, 492, 510, 538, 540, 542, 543, 546, 547, 548, 549, 552, 555, 557, 561, 562, 565, 566, 567, 568, 572, 573, 574, 607, 615, 696, 697, 698, 699, 700, 701, 789, 808, 838, 854, 861, 868, 872, 873, 882, 892, 910, 912, 920, 921, 922, 923, 1001, 1006, 1021, 1025, 1028, 1029, 1030, 1031, 1033, 1035, 1041, 1042, 1043, 1046, 1054, 1055, 1056], "redund": [62, 64, 133, 171, 261, 266, 332, 366, 379, 382, 383, 388, 397, 413, 523, 642, 1029, 1052], "redundantli": 397, "ref": [383, 391, 999, 1046], "ref_lin": 445, "refactor": [329, 435, 1040, 1042, 1043, 1044, 1050, 1053, 1054, 1055], "refer": [43, 44, 72, 73, 95, 98, 105, 113, 120, 137, 151, 153, 158, 172, 179, 183, 192, 204, 235, 251, 254, 269, 275, 280, 281, 282, 289, 299, 306, 316, 325, 326, 327, 328, 329, 330, 331, 332, 333, 358, 371, 377, 378, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 395, 396, 397, 398, 401, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 428, 444, 445, 446, 447, 449, 451, 453, 454, 455, 457, 458, 459, 460, 461, 464, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 506, 511, 519, 521, 523, 524, 525, 526, 527, 528, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 552, 555, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 598, 601, 602, 603, 610, 615, 616, 618, 619, 622, 627, 630, 631, 635, 636, 639, 640, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 655, 657, 659, 661, 663, 664, 666, 669, 671, 673, 674, 675, 676, 679, 681, 683, 684, 686, 687, 690, 691, 696, 697, 698, 699, 700, 701, 702, 703, 704, 709, 712, 713, 715, 716, 717, 718, 720, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 737, 738, 739, 742, 743, 744, 745, 746, 748, 749, 751, 764, 766, 767, 777, 791, 793, 794, 796, 797, 800, 801, 803, 805, 806, 808, 809, 810, 811, 812, 813, 814, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 842, 843, 847, 848, 849, 851, 854, 857, 858, 859, 861, 868, 869, 870, 872, 877, 878, 879, 881, 882, 884, 885, 886, 888, 889, 890, 892, 893, 900, 905, 906, 907, 908, 909, 910, 912, 914, 915, 917, 918, 920, 921, 922, 923, 943, 950, 951, 956, 974, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1029, 1032, 1040, 1044, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "referenc": [380, 383, 385, 391, 397, 904, 905, 1012, 1047, 1053], "references_": 889, "refin": [62, 115, 479, 717, 1009], "refit": [144, 163, 169, 171, 187, 267, 274, 276, 279, 282, 283, 287, 397, 414, 419, 425, 510, 575, 576, 635, 667, 673, 721, 808, 811, 812, 822, 830, 838, 917, 998, 1005, 1009, 1030, 1047, 1048, 1049, 1058], "refit_strategi": 273, "refit_time_": [808, 811, 812, 822, 1048], "reflect": [51, 75, 81, 82, 113, 121, 124, 147, 191, 192, 217, 235, 284, 300, 358, 379, 382, 383, 387, 397, 400, 412, 457, 463, 1006, 1009, 1015, 1017, 1041, 1049, 1058], "reformul": 382, "refrain": [218, 383], "refurbish": 7, "refus": [269, 395, 902, 903], "reg": [151, 190, 198, 251, 317, 326, 351, 422, 566, 568, 576, 658, 659, 661, 662, 663, 664, 665, 671, 672, 673, 678, 679, 686, 687, 697, 701, 923, 1005, 1045], "reg1": [161, 422], "reg2": [161, 422], "reg3": [161, 422], "reg_covar": [260, 805, 806], "reg_nnl": 212, "reg_ol": 212, "reg_param": [558, 1059], "regard": [0, 11, 44, 46, 50, 52, 88, 90, 105, 120, 128, 164, 174, 179, 191, 192, 206, 214, 219, 239, 250, 254, 277, 284, 285, 299, 358, 378, 383, 384, 388, 395, 397, 403, 409, 415, 420, 422, 423, 425, 450, 454, 459, 466, 469, 509, 622, 627, 664, 666, 709, 751, 806, 814, 830, 831, 836, 854, 855, 1002, 1005, 1009, 1011, 1012, 1014, 1016, 1023, 1024, 1025, 1047, 1050], "regardless": [235, 276, 277, 278, 371, 383, 415, 543, 640, 641, 666, 712, 723, 1009, 1021, 1048, 1055, 1056], "regedit": 401, "regener": 877, "regex": [275, 359, 471, 473], "regexp": [596, 597, 599], "regim": [43, 397, 912, 913, 1008], "region": [51, 55, 59, 62, 71, 82, 83, 84, 88, 91, 101, 159, 181, 187, 190, 217, 235, 244, 248, 249, 266, 308, 319, 346, 353, 380, 390, 397, 415, 422, 425, 455, 457, 463, 469, 595, 1006, 1009, 1012, 1015, 1019, 1023, 1025, 1030], "region_1": 322, "region_2": 322, "regist": [2, 202, 357, 389, 978], "register_parallel_backend": [2, 1048, 1058], "registri": [381, 401, 1028], "regr": [213, 416, 562, 564, 573, 654, 655, 675, 845, 870, 913, 915, 918, 1024], "regr_1": [138, 363, 364], "regr_2": [138, 363, 364], "regr_3": 364, "regr_multirf": 157, "regr_rf": 157, "regress": [2, 14, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 89, 103, 105, 113, 114, 116, 120, 124, 125, 126, 133, 136, 137, 140, 142, 143, 144, 145, 148, 149, 152, 153, 157, 158, 164, 170, 172, 173, 175, 183, 185, 186, 187, 189, 190, 191, 193, 196, 199, 200, 202, 203, 205, 207, 211, 212, 214, 218, 220, 221, 222, 223, 226, 228, 233, 240, 243, 245, 253, 254, 255, 258, 269, 271, 283, 286, 288, 289, 290, 295, 297, 299, 307, 313, 314, 316, 317, 320, 321, 327, 328, 329, 330, 332, 341, 342, 343, 353, 354, 357, 360, 361, 365, 371, 372, 375, 376, 378, 380, 383, 385, 388, 391, 392, 395, 396, 397, 410, 413, 417, 418, 419, 420, 422, 424, 438, 444, 471, 472, 481, 491, 496, 497, 500, 504, 509, 510, 512, 513, 520, 524, 525, 526, 532, 536, 539, 543, 545, 547, 549, 550, 551, 553, 554, 556, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 573, 574, 575, 578, 600, 601, 602, 603, 604, 605, 606, 607, 608, 612, 613, 614, 617, 618, 619, 622, 623, 630, 631, 633, 639, 640, 641, 642, 643, 645, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 702, 709, 714, 729, 731, 732, 736, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 793, 798, 799, 808, 811, 812, 814, 822, 831, 835, 836, 838, 839, 841, 843, 845, 846, 854, 855, 860, 862, 863, 869, 870, 872, 873, 876, 877, 879, 885, 886, 887, 889, 892, 893, 896, 901, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 926, 930, 932, 938, 941, 943, 960, 998, 999, 1001, 1004, 1006, 1016, 1017, 1019, 1020, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "regression_data": 46, "regression_model": 1047, "regression_test": 391, "regressioncriterion": 1048, "regressionregressionramdomizedpcaramdom": 403, "regressor": [2, 30, 43, 109, 118, 151, 157, 158, 161, 174, 179, 186, 187, 190, 196, 198, 200, 202, 217, 218, 220, 223, 234, 235, 251, 278, 290, 301, 321, 326, 327, 370, 383, 385, 395, 397, 413, 416, 425, 438, 441, 442, 443, 472, 489, 490, 491, 492, 532, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 573, 574, 575, 576, 577, 578, 613, 614, 617, 619, 640, 641, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 677, 678, 680, 681, 686, 687, 709, 840, 841, 844, 845, 846, 855, 863, 868, 869, 870, 873, 879, 887, 892, 893, 913, 915, 918, 920, 921, 922, 923, 926, 930, 931, 932, 945, 948, 950, 998, 999, 1005, 1009, 1010, 1012, 1017, 1023, 1028, 1030, 1031, 1035, 1040, 1041, 1045, 1046, 1047, 1049, 1050, 1053, 1054, 1055, 1057, 1059], "regressor_": [190, 472, 601, 602, 605], "regressor__sample_weight": 217, "regressor_tag": [931, 945], "regressor_with_": 189, "regressor_without_": 189, "regressorchain": [2, 406, 843, 845, 1048, 1051, 1055], "regressormixin": [2, 251, 385, 397, 472, 932, 1051], "regressortag": [2, 931, 945], "regul": 0, "regular": [2, 62, 64, 67, 71, 75, 92, 94, 95, 96, 105, 107, 112, 128, 136, 146, 148, 149, 151, 156, 163, 165, 174, 175, 176, 178, 181, 183, 185, 187, 189, 196, 197, 198, 200, 202, 204, 205, 206, 208, 213, 215, 217, 224, 231, 233, 235, 250, 261, 268, 271, 276, 277, 279, 288, 301, 302, 310, 312, 313, 314, 318, 319, 321, 322, 323, 340, 341, 343, 345, 346, 347, 350, 351, 357, 359, 361, 370, 383, 395, 396, 413, 415, 417, 418, 420, 421, 422, 425, 444, 450, 454, 478, 479, 483, 485, 486, 487, 488, 512, 520, 522, 523, 528, 530, 532, 536, 546, 547, 548, 551, 555, 556, 558, 567, 569, 570, 596, 597, 599, 646, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 697, 701, 743, 749, 758, 805, 806, 825, 838, 839, 869, 870, 873, 892, 912, 913, 914, 915, 917, 918, 919, 998, 999, 1001, 1002, 1003, 1006, 1008, 1014, 1015, 1019, 1022, 1023, 1024, 1030, 1031, 1033, 1035, 1040, 1041, 1042, 1044, 1045, 1049, 1050, 1052, 1053, 1058], "regularis": [221, 428, 480, 482], "regularli": [146, 293, 395, 1011], "regulatori": 153, "rehan": 1055, "rehman": 1048, "reiichiro": [1047, 1048], "reilli": 1057, "reimburs": 269, "reimplement": [389, 395, 397, 1046, 1050], "reinforc": 1029, "reinit": 391, "reiniti": 395, "reinstal": 401, "reintroduc": 1056, "reitsam": 1052, "reject": [252, 269, 397, 398, 531, 679, 735, 938, 939, 1005, 1009, 1048], "rel": [43, 45, 47, 55, 58, 64, 90, 96, 128, 144, 179, 193, 195, 198, 217, 235, 263, 302, 303, 317, 326, 329, 346, 350, 357, 358, 378, 382, 385, 391, 397, 413, 415, 419, 422, 423, 425, 447, 450, 454, 456, 466, 529, 532, 539, 542, 545, 549, 553, 554, 565, 566, 567, 568, 572, 573, 574, 612, 657, 666, 667, 679, 680, 682, 698, 702, 737, 755, 808, 811, 812, 814, 822, 831, 836, 839, 852, 853, 857, 869, 870, 881, 882, 892, 908, 912, 913, 914, 917, 919, 920, 921, 922, 923, 1005, 1006, 1009, 1011, 1012, 1013, 1015], "relabel": [382, 826, 827, 909], "relat": [8, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 377, 378, 379, 382, 383, 387, 388, 390, 391, 392, 395, 397, 398, 400, 406, 409, 414, 415, 416, 417, 418, 419, 420, 422, 425, 457, 471, 476, 504, 557, 558, 570, 571, 647, 681, 685, 700, 709, 731, 751, 829, 835, 870, 871, 873, 876, 877, 882, 885, 887, 888, 891, 900, 916, 998, 1001, 1003, 1009, 1010, 1012, 1013, 1016, 1019, 1024, 1025, 1026, 1029, 1030, 1032, 1035, 1040, 1044, 1045, 1046, 1048, 1049, 1052, 1053, 1056], "relate_point": 306, "relationship": [2, 43, 52, 58, 137, 138, 153, 180, 189, 190, 197, 202, 205, 217, 219, 220, 282, 289, 295, 317, 323, 332, 397, 415, 417, 419, 469, 504, 644, 722, 1006, 1009, 1011, 1012, 1016, 1017, 1045], "relative_tim": 263, "relax": [46, 415, 423, 460, 1022, 1047], "releas": [0, 54, 90, 105, 141, 142, 155, 172, 185, 186, 191, 192, 195, 217, 218, 219, 246, 251, 256, 257, 258, 269, 270, 287, 289, 298, 322, 338, 365, 371, 381, 383, 384, 386, 391, 395, 397, 423, 450, 453, 454, 471, 474, 497, 498, 504, 509, 510, 512, 520, 523, 529, 532, 546, 549, 569, 570, 572, 573, 575, 607, 610, 636, 638, 640, 642, 648, 654, 656, 660, 666, 677, 688, 696, 705, 709, 710, 725, 726, 740, 750, 756, 786, 796, 803, 807, 808, 809, 811, 812, 814, 822, 830, 831, 834, 835, 838, 854, 856, 873, 877, 882, 885, 886, 887, 891, 892, 893, 909, 910, 912, 917, 920, 921, 951, 1025, 1030, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "release_highlight": 1030, "relev": [46, 48, 57, 110, 114, 172, 187, 197, 211, 220, 275, 276, 282, 366, 370, 372, 378, 380, 382, 383, 385, 388, 389, 397, 398, 406, 417, 418, 424, 425, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 734, 748, 764, 807, 809, 810, 811, 812, 815, 817, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 890, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 1009, 1010, 1015, 1026, 1029, 1030, 1043, 1048, 1054], "reli": [128, 143, 147, 172, 193, 204, 206, 293, 296, 326, 330, 357, 370, 371, 385, 388, 391, 392, 395, 397, 411, 412, 415, 420, 422, 423, 557, 601, 605, 615, 616, 786, 836, 839, 877, 961, 974, 998, 1001, 1003, 1005, 1009, 1012, 1017, 1019, 1024, 1033, 1048, 1049, 1050, 1054, 1056, 1057], "reliabl": [2, 62, 64, 413, 419, 445, 446, 654, 1025, 1033], "relianc": [128, 221], "religion": [57, 276, 357, 358, 359, 378, 1010], "reloc": 1049, "relova": 1053, "relu": [869, 870], "remain": [47, 62, 64, 105, 137, 144, 149, 151, 171, 190, 217, 221, 233, 260, 273, 277, 281, 284, 412, 415, 416, 417, 419, 423, 453, 471, 474, 523, 524, 529, 536, 542, 578, 618, 619, 771, 777, 811, 812, 813, 816, 818, 847, 848, 849, 851, 960, 998, 999, 1001, 1008, 1009, 1013, 1019, 1025, 1029, 1042, 1048, 1054, 1057], "remaind": [43, 147, 190, 206, 217, 219, 235, 254, 330, 361, 416, 471, 474, 1040, 1047, 1048, 1049, 1052, 1053, 1056, 1058], "remaining_column": 471, "remark": [90, 118, 172, 269, 372, 383, 1019], "remedi": 234, "rememb": [90, 385, 387, 388, 401, 423, 1012, 1016, 1025], "remi": 1047, "remind": [251, 398], "reminisc": 126, "remot": [195, 336, 383, 386], "remov": [1, 2, 44, 54, 55, 89, 90, 104, 109, 170, 172, 185, 186, 190, 193, 276, 316, 323, 325, 326, 327, 332, 357, 358, 361, 366, 375, 378, 382, 383, 384, 385, 387, 388, 392, 397, 401, 408, 415, 416, 419, 422, 423, 425, 426, 435, 449, 451, 452, 457, 464, 489, 490, 491, 492, 495, 496, 535, 542, 543, 546, 548, 549, 561, 575, 576, 577, 578, 587, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 619, 638, 652, 662, 663, 664, 666, 667, 681, 683, 687, 700, 717, 750, 786, 787, 788, 790, 808, 811, 812, 814, 822, 831, 833, 834, 835, 836, 837, 839, 859, 871, 872, 876, 877, 889, 890, 892, 901, 909, 927, 936, 938, 939, 950, 951, 999, 1006, 1012, 1025, 1031, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "remove_zero_eig": [543, 1042, 1049], "rempfler": 1051, "renaissance0n": 1058, "renam": [151, 193, 265, 276, 325, 383, 387, 415, 454, 466, 471, 478, 479, 485, 535, 544, 561, 562, 563, 564, 565, 566, 571, 572, 573, 574, 786, 885, 936, 938, 939, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "rename_axi": 275, "render": [51, 63, 88, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 212, 221, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 330, 332, 337, 365, 383, 385, 387, 388, 389, 397, 559, 597, 639, 708, 710, 889, 901, 924, 926, 1008, 1025, 1053, 1057], "rene": 1053, "renni": [2, 847, 849, 1011, 1048], "renorm": 63, "rent": 43, "rental": [43, 52, 191, 1016], "reorder": [58, 129, 397, 705, 726, 1029, 1048], "reordered_data": 58, "reordered_row": 58, "reorgan": 1046, "rep": 380, "reparameter": 1024, "reparametr": 353, "repartit": 43, "repeat": [2, 49, 69, 101, 112, 114, 149, 172, 174, 180, 181, 191, 195, 219, 269, 270, 275, 276, 287, 293, 336, 358, 359, 385, 392, 397, 398, 412, 413, 415, 420, 423, 424, 596, 601, 615, 616, 623, 635, 642, 667, 813, 823, 824, 827, 944, 999, 1008, 1025, 1035, 1048, 1050], "repeatedkfold": [2, 190, 419, 813, 824, 1047], "repeatedli": [137, 329, 366, 397, 415, 422, 425, 516, 554, 674, 675, 684, 685, 686, 789, 999, 1013], "repeatedstratifiedkfold": [2, 275, 289, 293, 419, 823, 827, 1047, 1059], "repercuss": 321, "repetit": [275, 289, 293, 388, 419, 823, 824, 1017, 1054], "replac": [2, 43, 62, 113, 127, 137, 153, 174, 179, 181, 185, 191, 203, 218, 258, 278, 296, 318, 323, 327, 348, 381, 383, 387, 389, 392, 397, 409, 416, 419, 422, 423, 448, 452, 471, 511, 523, 563, 564, 571, 590, 596, 597, 598, 599, 615, 616, 635, 638, 642, 647, 649, 736, 793, 814, 820, 822, 831, 871, 872, 875, 895, 908, 909, 915, 928, 930, 977, 979, 982, 998, 999, 1001, 1005, 1009, 1019, 1024, 1025, 1028, 1029, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1059], "replai": [811, 812], "repli": [54, 357, 382, 383, 386], "replic": [275, 382, 385, 1035], "repo": [383, 387, 1029, 1032], "report": [0, 2, 43, 47, 52, 68, 104, 109, 169, 182, 204, 269, 273, 283, 289, 293, 325, 335, 366, 378, 382, 384, 385, 386, 389, 391, 395, 397, 401, 409, 415, 419, 619, 657, 666, 672, 693, 694, 708, 721, 737, 738, 746, 791, 792, 795, 841, 850, 869, 870, 907, 925, 950, 1005, 1012, 1017, 1028, 1029, 1032, 1041, 1044, 1047, 1048, 1050, 1051, 1053, 1055, 1056], "reporthook": 47, "repositori": [43, 47, 52, 195, 269, 331, 376, 378, 380, 381, 383, 385, 387, 391, 395, 398, 401, 512, 1028, 1032, 1035], "repr": [585, 1051, 1052, 1054], "repreat": 275, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 68, 70, 79, 83, 84, 85, 88, 123, 125, 131, 132, 144, 145, 154, 190, 197, 209, 219, 221, 222, 226, 239, 241, 249, 254, 263, 268, 269, 272, 275, 278, 282, 301, 318, 350, 357, 359, 365, 372, 375, 378, 380, 385, 395, 396, 397, 398, 409, 413, 415, 419, 420, 421, 422, 423, 424, 445, 449, 453, 459, 470, 471, 477, 478, 479, 480, 481, 482, 483, 495, 497, 498, 500, 502, 504, 506, 508, 509, 510, 512, 513, 518, 535, 542, 544, 546, 548, 549, 555, 558, 563, 571, 589, 596, 599, 602, 637, 640, 642, 648, 684, 686, 705, 707, 709, 719, 738, 751, 797, 808, 810, 821, 822, 825, 828, 830, 835, 837, 838, 841, 842, 848, 854, 855, 856, 858, 859, 860, 862, 863, 864, 869, 870, 879, 885, 886, 909, 912, 913, 938, 939, 960, 999, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1020, 1022, 1023, 1025, 1046, 1048, 1051, 1052, 1055, 1058], "represent": [2, 43, 51, 55, 58, 63, 88, 105, 106, 123, 126, 142, 144, 145, 154, 155, 156, 158, 161, 169, 179, 190, 192, 195, 199, 202, 237, 238, 239, 245, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 293, 306, 314, 322, 327, 329, 330, 332, 337, 358, 359, 365, 366, 375, 377, 386, 397, 409, 415, 416, 420, 421, 422, 429, 470, 539, 543, 545, 548, 550, 556, 574, 596, 598, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 638, 651, 654, 660, 666, 667, 668, 670, 674, 675, 676, 684, 685, 686, 777, 805, 806, 814, 831, 868, 881, 885, 886, 890, 892, 905, 912, 924, 926, 929, 935, 952, 974, 1001, 1006, 1008, 1010, 1012, 1013, 1014, 1016, 1019, 1024, 1029, 1040, 1041, 1044, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "reproduc": [44, 51, 95, 137, 190, 195, 204, 284, 293, 314, 371, 382, 383, 385, 386, 391, 395, 397, 415, 419, 420, 423, 427, 447, 461, 467, 476, 481, 495, 498, 500, 503, 505, 511, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 559, 561, 562, 563, 564, 567, 568, 569, 570, 571, 615, 616, 618, 619, 642, 647, 648, 649, 650, 654, 655, 658, 660, 661, 662, 668, 669, 670, 671, 674, 675, 676, 679, 684, 686, 687, 697, 698, 700, 701, 702, 801, 805, 806, 810, 811, 812, 813, 814, 820, 822, 823, 824, 825, 826, 827, 828, 836, 837, 838, 842, 843, 846, 857, 861, 868, 869, 870, 877, 889, 893, 901, 904, 905, 912, 913, 914, 917, 955, 956, 979, 982, 1001, 1028, 1032, 1040, 1048, 1053, 1054], "reproduct": [395, 1005], "request": [2, 47, 55, 81, 217, 235, 251, 328, 371, 377, 381, 382, 386, 397, 398, 406, 409, 420, 423, 424, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 589, 590, 596, 598, 599, 607, 608, 618, 619, 640, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 707, 807, 809, 810, 815, 817, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 964, 965, 967, 1009, 1012, 1032, 1046, 1047, 1048, 1057, 1058], "request_rout": 251, "requir": [30, 31, 43, 46, 53, 62, 80, 81, 83, 88, 90, 92, 93, 102, 104, 120, 127, 129, 142, 143, 147, 148, 151, 153, 154, 158, 172, 191, 202, 206, 214, 217, 237, 239, 245, 248, 251, 254, 258, 269, 276, 284, 286, 289, 296, 298, 316, 321, 327, 328, 357, 358, 359, 377, 380, 381, 383, 384, 385, 389, 391, 395, 397, 398, 401, 402, 406, 409, 411, 415, 416, 417, 419, 420, 422, 423, 424, 426, 432, 438, 444, 445, 446, 451, 453, 457, 459, 464, 469, 471, 474, 476, 489, 490, 491, 504, 516, 529, 532, 543, 549, 557, 558, 559, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 580, 587, 588, 589, 610, 618, 619, 627, 635, 640, 641, 642, 651, 654, 655, 660, 661, 666, 667, 674, 675, 676, 679, 682, 683, 684, 685, 686, 694, 697, 699, 700, 701, 703, 707, 732, 737, 738, 750, 755, 757, 760, 771, 791, 792, 795, 807, 808, 811, 812, 815, 817, 822, 830, 835, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 864, 869, 872, 873, 874, 876, 886, 887, 888, 892, 900, 904, 905, 907, 908, 912, 913, 914, 917, 920, 921, 922, 923, 929, 931, 932, 938, 939, 945, 950, 951, 965, 968, 974, 994, 997, 998, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1023, 1024, 1025, 1029, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "requires_fit": [931, 992, 1059], "requires_i": [432, 438, 997, 1051], "requires_positive_x": [1050, 1055], "requires_vector_input": [620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633], "requisit": 385, "rerais": 1057, "rerun": [51, 63, 77, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 330, 332, 337, 365, 391], "resampl": [2, 87, 150, 190, 235, 300, 392, 395, 397, 563, 564, 982, 1029, 1049, 1053], "resampled_arrai": 979, "rescal": [43, 81, 82, 90, 128, 199, 204, 240, 254, 316, 355, 417, 422, 427, 476, 477, 478, 479, 480, 481, 482, 483, 541, 546, 654, 657, 660, 884, 890, 914, 915, 916, 917, 918, 1009, 1019, 1044, 1045, 1059], "rescaled_coin": [81, 82], "rescu": [409, 423], "research": [0, 172, 189, 269, 275, 281, 293, 378, 380, 395, 415, 509, 521, 643, 653, 700, 743, 837, 842, 998, 1006, 1010, 1012, 1024, 1029, 1033], "resembl": [74, 221, 251], "reserv": [269, 322, 383, 569, 570, 1033], "reserva": 322, "reservoir": 977, "reservoir_sampl": 977, "reset": [258, 366, 391, 542, 684, 685, 686, 852, 853, 881, 882, 892, 997, 1042], "reset_n_cal": [852, 853], "reshama": [0, 368, 373, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1058], "reshap": [2, 43, 44, 45, 53, 61, 68, 81, 82, 83, 85, 86, 88, 89, 93, 106, 113, 117, 123, 126, 132, 140, 145, 146, 156, 165, 170, 174, 176, 177, 178, 179, 180, 181, 183, 197, 208, 214, 230, 231, 233, 234, 238, 240, 242, 244, 249, 253, 264, 273, 300, 302, 309, 311, 313, 314, 317, 318, 319, 323, 325, 328, 329, 331, 332, 340, 345, 346, 351, 354, 355, 395, 412, 420, 422, 423, 452, 472, 592, 639, 740, 838, 887, 891, 1005, 1019, 1025, 1045], "resid": 378, "residence_sinc": 269, "residenti": 158, "residu": [2, 109, 213, 219, 271, 438, 472, 489, 490, 491, 560, 562, 564, 566, 568, 570, 573, 576, 578, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 679, 680, 681, 682, 686, 687, 693, 694, 709, 752, 793, 845, 846, 855, 863, 870, 913, 915, 918, 921, 923, 1005, 1009, 1052, 1053, 1055], "residual_metr": 1046, "residual_threshold": [234, 679, 1005, 1053], "residual_vs_predict": [43, 52, 109, 271, 330, 709], "residues_": 1045, "resign": 398, "resili": 423, "resist": [113, 114, 383], "resiz": [45, 81, 82, 255, 378, 501, 502], "resolut": [43, 50, 55, 132, 191, 308, 309, 346, 398, 413, 1050], "resolv": [55, 382, 383, 387, 391, 398, 423, 453, 459, 469, 699, 703, 956, 999, 1009, 1047, 1049, 1050, 1053, 1058], "resort": [277, 378, 409, 563, 1050], "resourc": [55, 77, 150, 153, 185, 217, 313, 327, 369, 386, 395, 397, 414, 422, 811, 812, 998, 1010, 1029, 1033, 1035, 1048, 1053, 1054, 1059], "resourcewarn": 1043, "resp": [378, 422, 605, 805, 806, 1023, 1048], "respect": [64, 90, 102, 120, 128, 137, 141, 143, 146, 155, 182, 195, 197, 202, 206, 219, 231, 234, 237, 239, 245, 248, 250, 254, 265, 269, 284, 302, 303, 314, 321, 329, 343, 350, 365, 370, 371, 378, 379, 383, 413, 415, 418, 420, 422, 423, 425, 453, 471, 474, 477, 478, 479, 480, 481, 482, 483, 542, 548, 549, 555, 561, 569, 570, 605, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 636, 644, 651, 679, 698, 702, 720, 736, 790, 793, 805, 806, 848, 858, 869, 870, 924, 926, 997, 998, 1002, 1003, 1005, 1006, 1009, 1012, 1013, 1014, 1015, 1019, 1024, 1028, 1032, 1033, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "respond": [190, 383, 415], "respons": [0, 25, 172, 191, 213, 217, 220, 251, 285, 357, 380, 383, 397, 415, 416, 422, 453, 471, 489, 490, 491, 575, 576, 639, 640, 641, 682, 683, 706, 708, 710, 750, 805, 806, 1010, 1016, 1057], "response_method": [48, 66, 70, 91, 139, 154, 159, 201, 209, 226, 231, 269, 278, 299, 304, 307, 321, 333, 342, 343, 345, 350, 362, 639, 640, 641, 706, 708, 710, 750, 807, 830, 1009, 1057], "rest": [2, 30, 62, 66, 147, 151, 187, 196, 202, 226, 232, 251, 254, 263, 293, 325, 339, 343, 354, 389, 397, 425, 520, 618, 639, 652, 666, 667, 684, 762, 796, 840, 841, 842, 861, 912, 914, 917, 1005, 1009, 1010, 1013, 1016, 1024, 1030, 1033, 1044, 1045, 1054, 1055, 1056, 1058], "restart": [92, 180, 386, 391, 454, 539, 545, 546, 551, 553, 554, 618, 619, 1006, 1053], "restor": [1043, 1048, 1049, 1050, 1051, 1055], "restrict": [2, 64, 101, 102, 107, 117, 185, 187, 207, 234, 310, 385, 389, 395, 413, 415, 422, 423, 472, 501, 510, 540, 589, 618, 661, 662, 663, 664, 666, 690, 691, 721, 790, 796, 797, 838, 860, 862, 863, 864, 866, 868, 869, 870, 872, 898, 1009, 1025, 1030, 1034, 1035, 1040, 1042, 1050, 1052, 1057], "restructuredtext": 383, "result": [0, 2, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 81, 83, 88, 89, 90, 95, 97, 101, 105, 107, 109, 114, 118, 123, 126, 128, 129, 133, 140, 141, 142, 144, 147, 148, 150, 151, 154, 156, 157, 165, 171, 172, 174, 176, 178, 180, 182, 185, 190, 191, 192, 193, 198, 203, 205, 206, 207, 212, 218, 219, 221, 225, 231, 232, 235, 237, 238, 241, 244, 247, 249, 255, 260, 265, 266, 268, 269, 270, 273, 275, 276, 278, 281, 282, 283, 284, 286, 287, 289, 291, 293, 296, 298, 302, 311, 312, 313, 316, 317, 318, 321, 325, 327, 329, 330, 331, 332, 333, 335, 338, 340, 346, 350, 351, 353, 357, 359, 363, 364, 365, 370, 371, 372, 377, 378, 380, 383, 385, 387, 388, 389, 391, 395, 396, 397, 398, 409, 411, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 440, 447, 448, 450, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 466, 469, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483, 486, 496, 516, 517, 519, 521, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 587, 588, 589, 590, 592, 596, 597, 599, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 638, 639, 640, 642, 644, 648, 651, 660, 661, 666, 672, 673, 674, 675, 683, 684, 685, 686, 694, 697, 698, 699, 700, 701, 702, 703, 716, 718, 719, 720, 725, 733, 734, 736, 737, 738, 739, 740, 744, 745, 746, 762, 764, 765, 772, 779, 782, 786, 787, 788, 789, 791, 792, 793, 795, 801, 802, 805, 806, 808, 810, 811, 812, 813, 818, 822, 823, 824, 827, 828, 833, 839, 840, 841, 843, 844, 845, 846, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 876, 877, 885, 886, 889, 890, 893, 901, 905, 909, 912, 914, 917, 920, 921, 922, 923, 924, 925, 938, 939, 955, 956, 958, 963, 973, 974, 979, 982, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1023, 1024, 1025, 1028, 1029, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "results_df": [225, 275, 322], "results_for_preval": 278, "results_sc": 353, "retail": 1033, "retain": [2, 197, 397, 415, 418, 419, 423, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 502, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 703, 704, 807, 809, 810, 815, 817, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 885, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 1022, 1040], "retbin": 1019, "retent": [600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611], "retrac": 251, "retract": 383, "retrain": [409, 1029, 1056, 1058], "retri": [192, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 1048, 1054, 1058, 1059], "retriev": [2, 118, 190, 221, 282, 358, 365, 387, 397, 420, 423, 424, 475, 504, 598, 601, 602, 634, 661, 671, 692, 707, 734, 738, 740, 741, 764, 789, 847, 851, 884, 910, 1005, 1007, 1009, 1011, 1028, 1029, 1045, 1050, 1052, 1054, 1057], "return": [2, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 83, 88, 91, 96, 104, 109, 121, 130, 132, 135, 137, 140, 142, 149, 150, 153, 154, 158, 172, 177, 180, 182, 186, 193, 197, 198, 204, 206, 209, 217, 218, 225, 226, 227, 235, 251, 254, 257, 258, 263, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 282, 290, 296, 301, 306, 309, 314, 316, 318, 321, 325, 333, 342, 346, 357, 359, 361, 365, 370, 376, 377, 378, 383, 384, 385, 389, 390, 392, 395, 397, 413, 414, 415, 416, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 934, 935, 936, 938, 939, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 977, 978, 979, 980, 981, 982, 983, 989, 992, 993, 994, 995, 996, 997, 999, 1009, 1012, 1016, 1017, 1024, 1025, 1029, 1037, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "return_a": [593, 594, 974, 1043], "return_cent": [520, 1051], "return_cod": 554, "return_cost": [478, 479, 485], "return_count": [338, 358, 864], "return_cov": [397, 575, 576, 619, 872], "return_dist": [89, 470, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 1012, 1044], "return_distribut": [121, 531], "return_estim": [43, 190, 289, 332, 419, 835, 1048], "return_ind": 531, "return_indic": [419, 835, 1056], "return_inner_stat": 1054, "return_intercept": [695, 1049], "return_invers": [152, 385], "return_log": [852, 853], "return_model": [1042, 1044], "return_n_it": [427, 461, 466, 485, 553, 554, 654, 655, 660, 661, 668, 669, 670, 671, 689, 690, 691, 692, 693, 694, 695, 702, 1054], "return_norm": [899, 1047], "return_path": [690, 691, 693, 694], "return_std": [174, 179, 180, 181, 183, 197, 198, 397, 560, 575, 576, 619, 621, 622, 623, 624, 633, 635, 652, 653, 872, 1047, 1048, 1052, 1057], "return_sum_weight": 989, "return_tim": [277, 836, 1050], "return_train_scor": [143, 279, 289, 322, 419, 808, 811, 812, 822, 835, 1046, 1047, 1049], "return_x_i": [44, 46, 54, 93, 104, 105, 106, 107, 123, 143, 147, 161, 163, 164, 168, 185, 186, 192, 193, 195, 204, 205, 206, 208, 213, 214, 224, 232, 233, 245, 253, 254, 257, 258, 271, 274, 277, 282, 283, 291, 293, 295, 298, 305, 312, 313, 314, 321, 325, 327, 329, 330, 331, 332, 338, 349, 359, 361, 376, 388, 389, 396, 409, 415, 416, 419, 422, 424, 427, 435, 453, 495, 496, 497, 498, 500, 502, 503, 504, 505, 508, 509, 510, 512, 513, 518, 540, 541, 542, 543, 566, 569, 570, 575, 576, 600, 603, 604, 606, 607, 608, 609, 610, 618, 627, 628, 630, 631, 646, 647, 666, 667, 676, 681, 682, 683, 696, 697, 698, 699, 701, 703, 709, 719, 796, 811, 812, 814, 840, 845, 856, 861, 864, 921, 922, 923, 999, 1004, 1009, 1010, 1011, 1012, 1019, 1037, 1046, 1048, 1050, 1053], "return_x_mean": 427, "reuben": 1040, "reus": [52, 174, 210, 269, 276, 325, 359, 385, 397, 415, 416, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 642, 654, 656, 657, 660, 666, 668, 670, 674, 675, 676, 677, 684, 685, 686, 688, 869, 870, 1017, 1021, 1033, 1047, 1057], "reuter": [370, 378], "reuters21578": 47, "reuterspars": 47, "rev": [383, 615, 616], "revamp": [385, 1050], "reveal": [43, 52, 190, 192, 357, 389, 412, 1006, 1056], "revers": [109, 172, 222, 275, 542, 549, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 797, 872, 1009, 1040, 1041, 1050, 1052, 1056], "revert": [124, 411, 638, 640, 641, 1047, 1052, 1057], "review": [293, 322, 370, 378, 385, 386, 388, 389, 395, 398, 419, 420, 543, 549, 1009, 1019], "revillet": 1040, "revis": [398, 678], "revisit": [415, 426, 451], "revolv": 1006, "reward": 383, "reweight": [137, 358, 397, 417, 422, 598, 599, 656, 677, 688], "reweight_covari": [476, 481], "rewrit": [389, 395, 1025, 1040], "rewritten": [383, 657, 1042, 1044], "rey": 1055, "reza": 1050, "rezazadeh": 1053, "rf": [142, 143, 157, 160, 161, 192, 325, 366, 422, 575, 577, 578], "rf_123": 366, "rf__n_estim": 422, "rf_appli": 142, "rf_applyfunctiontransform": 142, "rf_cst": 332, "rf_inst": 366, "rf_leaves_yield": 142, "rf_model": 142, "rf_no_cst": 332, "rf_pipelin": 158, "rfc": [64, 257, 325, 1037], "rfc_disp": [257, 325, 1037], "rfe": [2, 170, 171, 406, 424, 602, 605, 610, 1040, 1044, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1059], "rfecv": [2, 171, 406, 424, 601, 605, 610, 1044, 1046, 1048, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1059], "rfrandomforestregressor": 161, "rgb": [83, 378, 423, 501, 502, 591, 592, 595], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1047, "rho": [228, 420, 685, 1005, 1023, 1041], "rho_k": 421, "ri": [415, 713, 794], "ribeiro": [598, 738, 1053], "ricardo": [1043, 1053, 1054, 1057], "ricardojnf": 1053, "riccadonna": 751, "riccardo": [1051, 1057], "rice": [50, 309, 378, 506, 1053], "rich": [87, 153, 391, 395, 415, 446, 1033, 1051, 1054], "richard": [378, 424, 666, 1041, 1050, 1052, 1054, 1055, 1058], "richardscottoz": 1053, "richer": [87, 132, 415], "richi": 1048, "rick": 1051, "ricker": 132, "ricker_funct": 132, "ricker_matrix": 132, "rickiepark": 1047, "rid": [48, 1023], "riddel": [1043, 1045, 1047], "ridg": [2, 24, 44, 49, 53, 89, 109, 124, 125, 140, 158, 163, 172, 173, 179, 180, 181, 185, 187, 189, 190, 191, 196, 197, 202, 207, 210, 213, 217, 218, 243, 253, 288, 317, 320, 352, 353, 357, 370, 395, 411, 420, 422, 425, 532, 543, 547, 551, 619, 623, 630, 633, 651, 652, 653, 655, 657, 665, 669, 681, 682, 683, 686, 695, 709, 758, 808, 814, 822, 845, 918, 1009, 1010, 1017, 1019, 1023, 1024, 1030, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1053, 1054, 1055, 1056, 1058], "ridge_alpha": [547, 551, 1047], "ridge_cv": 109, "ridge_cv_with_trans_target": 109, "ridge_glm": 217, "ridge_regress": [2, 1048, 1049, 1055], "ridgeclassifi": [2, 357, 370, 680, 681, 683, 1005, 1010, 1045, 1049, 1053, 1054, 1055, 1058], "ridgeclassifiercv": [2, 406, 681, 682, 796, 1005, 1009, 1010, 1048, 1050, 1051, 1053, 1054, 1058, 1059], "ridgecv": [2, 43, 109, 158, 172, 190, 253, 397, 406, 422, 576, 651, 680, 683, 1005, 1010, 1040, 1042, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1058, 1059], "ridgecvridgecv": [158, 190], "ridgeridg": 190, "ridgewai": [149, 422], "riedmann": 1052, "ries": 1054, "rifkin": 1005, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 80, 86, 88, 95, 97, 99, 112, 113, 115, 120, 121, 125, 126, 128, 130, 132, 137, 139, 140, 141, 150, 151, 152, 153, 160, 168, 174, 177, 186, 193, 205, 207, 218, 219, 220, 221, 223, 224, 227, 228, 244, 247, 248, 260, 262, 263, 265, 266, 269, 270, 271, 275, 278, 282, 285, 286, 288, 289, 301, 309, 311, 314, 316, 318, 321, 331, 332, 336, 346, 348, 350, 353, 355, 357, 362, 365, 366, 383, 385, 391, 395, 396, 398, 412, 414, 415, 418, 420, 421, 422, 425, 471, 489, 490, 491, 492, 542, 549, 552, 565, 566, 567, 568, 569, 570, 572, 573, 574, 595, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 643, 684, 686, 877, 920, 921, 922, 923, 924, 942, 956, 998, 1001, 1003, 1005, 1007, 1009, 1011, 1012, 1016, 1021, 1023, 1024, 1025, 1029, 1033, 1035, 1042, 1048, 1054, 1056, 1057, 1059], "right_impur": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923], "rightarrow": [425, 627, 1013], "rijn": [377, 1048], "rileran": 1054, "rio": [1050, 1052, 1053, 1054], "ripe": 322, "rise": 179, "rishabh": 1054, "rishi": 1052, "rishikesh": 1047, "risk": [16, 48, 90, 153, 217, 221, 235, 317, 353, 366, 382, 383, 397, 409, 414, 419, 422, 575, 576, 897, 898, 900, 901, 902, 903, 1005, 1009, 1033, 1047], "riski": 235, "riskiest": [217, 235], "ritchi": 1051, "rithvik": 1052, "ritter": [1054, 1055], "ritual": 357, "rival": [43, 909, 1022], "rk": 100, "rkf": [419, 823], "rl2007": 1005, "rlm": 1050, "rm": [113, 177, 387, 391, 417], "rmse": [43, 52, 114, 153, 322, 1009, 1051], "rmse_": 322, "rmse_test_mean": 322, "rmse_test_scor": 322, "rmse_test_std": 322, "rmse_train_mean": 322, "rmse_train_scor": 322, "rmse_train_std": 322, "rmsle": 1009, "rmtree": [89, 106, 416], "rna": 395, "rnd": 317, "rng": [44, 58, 59, 67, 70, 72, 79, 85, 97, 114, 118, 123, 125, 130, 138, 150, 153, 154, 155, 157, 174, 175, 178, 180, 181, 183, 185, 186, 189, 192, 197, 198, 199, 200, 202, 206, 211, 218, 219, 224, 231, 244, 250, 251, 253, 260, 270, 278, 281, 286, 287, 308, 311, 320, 323, 326, 327, 329, 331, 332, 335, 336, 340, 349, 363, 364, 366, 371, 385, 388, 406, 428, 477, 481, 482, 483, 485, 486, 487, 488, 651, 657, 678, 680, 686, 695, 820, 847, 848, 849, 851, 852, 853, 857, 860, 862, 863, 864, 889, 901, 904, 905, 907, 908, 909, 918], "ro": 63, "road": 395, "rob": [1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1052, 1055], "robert": [0, 172, 204, 293, 380, 405, 420, 536, 543, 636, 664, 729, 731, 732, 743, 878, 999, 1005, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1055, 1058], "roberto": [415, 449, 1058], "robertson": 1053, "robin": [185, 186, 635, 999, 1046, 1049, 1054, 1055], "robinson": 1053, "robl": 1047, "robson": 1050, "robust": [2, 48, 70, 96, 98, 110, 112, 148, 150, 172, 186, 187, 190, 191, 196, 207, 219, 221, 234, 244, 254, 290, 316, 331, 372, 380, 391, 415, 422, 423, 453, 455, 476, 477, 480, 481, 482, 483, 532, 542, 567, 568, 657, 665, 678, 679, 686, 687, 758, 842, 873, 887, 889, 890, 901, 907, 954, 1009, 1013, 1015, 1019, 1022, 1023, 1028, 1030, 1031, 1033, 1034, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1056], "robust_contour": 113, "robust_cov": 113, "robust_mah": 113, "robust_scal": [2, 890, 901, 1048], "robustli": [8, 220], "robustscal": [2, 254, 889, 902, 999, 1019, 1045, 1046, 1048, 1050, 1051, 1052, 1056], "roc": [2, 50, 62, 142, 172, 187, 243, 245, 254, 255, 267, 269, 270, 277, 332, 333, 390, 413, 414, 419, 512, 518, 572, 666, 710, 714, 715, 716, 735, 750, 790, 796, 797, 827, 838, 841, 879, 917, 1015, 1030, 1037, 1042, 1043, 1045, 1046, 1050, 1052, 1056], "roc_auc": [50, 172, 275, 279, 284, 285, 390, 642, 710, 741, 1009, 1037], "roc_auc_ovo": [1009, 1050], "roc_auc_ovo_weight": [1009, 1050], "roc_auc_ovr": [1009, 1050], "roc_auc_ovr_weight": [1009, 1050], "roc_auc_scor": [2, 62, 172, 275, 284, 325, 332, 710, 714, 715, 716, 797, 1009, 1042, 1043, 1048, 1050, 1054, 1055], "roc_curv": [2, 50, 245, 272, 284, 710, 714, 735, 790, 796, 1009, 1040, 1041, 1042, 1045, 1046, 1048, 1053, 1056, 1058], "roc_displai": 245, "rocchio": [357, 859], "rocco": [1053, 1054, 1055], "roccurvedisplai": [2, 142, 254, 257, 269, 272, 284, 285, 325, 390, 796, 797, 1015, 1037, 1050, 1056, 1057, 1058], "rock": 114, "rocklin": [382, 388], "roddi": [1049, 1050], "rodent": [50, 309, 378, 506], "roderick": 999, "rodion": 1053, "rodrigo": [1048, 1058], "rodrigu": [1047, 1048, 1053], "rodr\u00edguez": 322, "roeder": 1050, "roehr": [1056, 1057], "roei": 1052, "roeschk": 1049, "roger": [731, 1047, 1048, 1052], "rogerstanimoto": [457, 464, 707, 786, 787, 788, 1012], "rogerstanimotodist": 707, "rohan": [1045, 1046, 1048, 1049, 1053], "rohit": [1043, 1044, 1048, 1049], "roi": [1040, 1054], "roi_siz": 89, "roic": 1055, "rok": 1050, "rokem": [1040, 1046], "rokhlin": [543, 549, 956], "roland": [1042, 1043], "rolando": [1041, 1042], "role": [0, 284, 370, 382, 420], "roll": [2, 102, 187, 236, 237, 242, 386, 415, 538, 700, 701, 950, 1030, 1033, 1050, 1055], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1047, 1052], "roman": [0, 404, 635, 926, 1042, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "roman4oo": 1055, "romaniuk": 1044, "romero": 1058, "romijnd": 1052, "romuald": 1049, "ron": [0, 405, 1040], "ronald": [378, 1013, 1043, 1053], "ronan": [1040, 1043, 1048], "ronchetti": [657, 1005], "rong": 1024, "ronrubin": [672, 693, 694, 1005], "ronsin": [1048, 1049, 1057], "room": [316, 378, 388, 415, 1032], "roopam": [1048, 1049], "root": [2, 43, 113, 153, 172, 199, 365, 380, 383, 391, 415, 449, 509, 549, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 647, 798, 799, 920, 921, 922, 923, 924, 926, 1009, 1015, 1025, 1042, 1048, 1049, 1050, 1051, 1054, 1055, 1059], "root_": 449, "root_mean_squared_error": [2, 52, 153, 411, 1009, 1057, 1059], "root_mean_squared_log_error": [2, 411, 1009, 1057, 1059], "rope": 275, "rope_interv": 275, "rope_prob": 275, "rori": 1051, "rosa": 1055, "rosal": 419, "rosati": 1058, "rose": 378, "rosenberg": [415, 725, 745, 803], "rosenfeld": 1048, "ross": [542, 615, 616, 1025, 1054, 1055], "rosset": [137, 422, 527, 561], "rossi": 1043, "rosslimlinyang_ijcv": 542, "rostamizadeh": 998, "rostomyan": 1048, "rotat": [47, 75, 122, 125, 128, 130, 149, 160, 187, 193, 240, 286, 287, 295, 346, 352, 418, 420, 425, 427, 512, 540, 549, 558, 622, 705, 892, 924, 1005, 1030, 1051, 1052], "rotation_mod": 286, "rotations_": 558, "roth": [1045, 1048, 1055], "rough": [25, 403, 1015], "roughli": [137, 150, 206, 266, 285, 296, 321, 370, 397, 420, 423, 527, 1006, 1040], "rouli": 1043, "round": [46, 48, 62, 117, 143, 153, 185, 186, 224, 235, 275, 281, 318, 320, 357, 397, 457, 463, 464, 572, 573, 601, 602, 605, 635, 700, 721, 810, 820, 877, 909, 924, 926, 999, 1013, 1025, 1042, 1044, 1046, 1048, 1049, 1051, 1053, 1054, 1056, 1057], "rounded_list": 820, "rouseeuw1984": 481, "rousseeuw": [113, 114, 415, 417, 476, 481, 800, 801, 1015], "rousseuw": [113, 114], "rout": [2, 47, 91, 135, 182, 187, 199, 243, 269, 333, 429, 432, 435, 438, 439, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 965, 966, 967, 968, 992, 1030, 1035, 1054, 1056], "route_param": [251, 965], "routed_param": [251, 968], "routemappingpair": 965, "router": [2, 251, 397, 406, 965, 966, 967, 968], "routerconsumerclassifi": 251, "routerconsumerclassifierifittedrouterconsumerclassifi": 251, "routin": [332, 372, 377, 380, 383, 384, 385, 386, 391, 395, 397, 424, 680, 682, 695, 855, 914, 915, 916, 917, 918, 1006, 1012, 1019, 1020, 1023, 1033, 1040, 1054, 1055, 1056], "routing_info": 965, "routlei": 1046, "rouvinen": 1045, "roux": [666, 1005, 1022], "row": [2, 43, 57, 58, 59, 62, 64, 70, 79, 95, 109, 120, 121, 143, 146, 156, 159, 185, 217, 218, 219, 245, 248, 254, 255, 269, 318, 365, 370, 378, 385, 392, 396, 397, 412, 415, 418, 423, 430, 449, 450, 454, 456, 457, 458, 460, 463, 464, 466, 471, 475, 495, 497, 498, 500, 501, 502, 503, 508, 509, 510, 512, 513, 518, 519, 521, 534, 542, 550, 556, 559, 598, 599, 628, 636, 640, 651, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 700, 704, 705, 718, 726, 727, 733, 766, 767, 771, 774, 776, 777, 778, 779, 781, 782, 784, 786, 787, 788, 789, 805, 806, 841, 847, 848, 849, 850, 851, 857, 860, 861, 862, 863, 864, 867, 878, 882, 884, 885, 887, 897, 898, 899, 902, 903, 906, 910, 929, 934, 938, 939, 956, 979, 982, 986, 988, 990, 991, 994, 995, 998, 999, 1001, 1003, 1005, 1007, 1009, 1010, 1012, 1019, 1020, 1023, 1024, 1029, 1047, 1048, 1049, 1050, 1055], "row_compl": 57, "row_id_attribut": 377, "row_idx": [59, 217], "row_idx_shuffl": 58, "row_ind": [430, 458, 460], "row_indic": 153, "row_labels_": [57, 58, 59, 412, 458, 460], "row_norm": 263, "rowan": 1055, "rowei": [697, 701, 861, 1006, 1012], "rows_": [57, 412, 430, 458, 460], "royal": [549, 635, 888, 900, 1023], "rp": 248, "rpath": 381, "rr2007": 1001, "rragundez": 1048, "rsalakhu": 652, "rsh": [287, 327], "rskf": 824, "rsme": 1009, "rsnegrin": 1054, "rsplit": [45, 55, 276], "rst": [371, 383, 391, 1040], "rstride": 191, "rt": 142, "rt_model": 142, "rtn": 51, "rtol": [385, 852, 853, 857], "ruben": 1055, "rubi": 1052, "rubia": 1043, "rubial": 1053, "rubin": 999, "rubinstein": [672, 693, 694], "rubric": 1006, "ruchitagard": 1050, "rudi": 1046, "rudresh": 1055, "ruff": [383, 401, 408], "ruifeng": [1046, 1047, 1052], "ruin": 383, "ruiter": 1055, "rule": [2, 13, 27, 43, 64, 143, 195, 269, 362, 365, 366, 370, 380, 383, 384, 385, 395, 397, 398, 410, 413, 414, 415, 419, 420, 422, 424, 544, 557, 558, 559, 560, 561, 569, 570, 577, 578, 602, 610, 642, 653, 666, 667, 674, 675, 676, 681, 683, 684, 685, 686, 714, 715, 719, 808, 811, 812, 814, 822, 830, 831, 834, 835, 836, 837, 839, 861, 912, 925, 998, 1003, 1011, 1012, 1023, 1025, 1029, 1035, 1042, 1045, 1052, 1057], "ruleset": 1025, "rumelhart": 1013, "rumsfeld": [45, 378], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 381, 383, 384, 385, 387, 388, 389, 390, 391, 395, 397, 398, 401, 402, 409, 411, 415, 417, 419, 422, 425, 426, 427, 444, 450, 451, 453, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 469, 471, 474, 475, 478, 479, 539, 540, 541, 542, 543, 545, 547, 549, 550, 551, 553, 554, 556, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 590, 600, 602, 603, 604, 606, 607, 608, 610, 618, 619, 638, 642, 648, 654, 655, 657, 659, 660, 661, 663, 664, 668, 669, 670, 671, 690, 691, 696, 697, 698, 699, 700, 701, 702, 789, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 844, 845, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 869, 870, 871, 874, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 929, 931, 950, 951, 979, 982, 998, 1008, 1010, 1013, 1022, 1024, 1025, 1028, 1029, 1033, 1040, 1043, 1045, 1047, 1048, 1049, 1050, 1054, 1055, 1056, 1059], "run_histori": 47, "run_id": 96, "run_tim": [232, 233], "rung": 1019, "runnabl": [54, 387, 388], "runtim": [30, 47, 49, 93, 137, 203, 232, 234, 249, 314, 318, 371, 385, 386, 395, 397, 409, 415, 422, 457, 571, 687, 822, 912, 913, 914, 915, 916, 917, 918, 1023, 1024, 1043, 1047, 1048, 1054, 1055, 1057, 1058, 1059], "runtime_histori": 47, "runtimewarn": 183, "runxfail": 391, "rupesh": 1043, "rush": [43, 52, 383], "rushabh": 1051, "rushil": [1055, 1056], "russ": [636, 999], "russel": [1046, 1047], "russellrao": [457, 464, 707, 786, 787, 788, 1012], "russellraodist": 707, "russian": 423, "ruth": 1050, "rutter": 1053, "ruusmann": 1046, "rv": [0, 812, 820, 822, 998, 1040, 1041, 1044, 1045, 1046, 1047, 1048], "rv_discrete_frozen": 287, "rvd": [476, 481], "rvdriessen": [476, 481], "rw2006": [425, 618, 619], "rwelsch427": 1058, "ryad": 1046, "ryan": [1043, 1046, 1048, 1049], "ryb": 362, "ryder": 51, "ryotaro": 1052, "r\u00e9my": 1046, "r\u00fcdiger": [1048, 1049, 1051], "s1": [124, 172, 182, 204, 206, 380], "s2": [124, 172, 182, 204, 206, 380, 558], "s22": 506, "s3": [57, 124, 172, 204, 206, 380], "s4": [172, 204, 206, 380], "s5": [172, 204, 206, 380, 1017], "s6": [172, 204, 206, 380], "s_": [124, 279, 1005, 1006, 1017, 1019], "s__p": 872, "s_color": 237, "s_hessian": 237, "s_i": [415, 1005, 1019], "s_ica_": 125, "s_isomap": 237, "s_j": 415, "s_ltsa": 237, "s_mod": 237, "s_pca_": 125, "s_point": 237, "s_scale": 237, "s_spectral": 237, "s_standard": 237, "s_t_sne": 237, "sa": [378, 500], "saaba": 1045, "saad": 1058, "sabharw": 1050, "sabri": 1055, "sach": 51, "sachdev": 1055, "sachdeva": 1047, "sachin": [1047, 1048, 1054], "sackei": 1050, "saclai": 0, "sacr": 1028, "sad": [826, 827], "sadak": 1052, "sadhana": 1048, "sadli": 150, "sadra": 1056, "sad\u0142ocha": 1053, "saeed": 1009, "saeger": [1045, 1046, 1047], "safari": 1019, "safe": [2, 72, 190, 206, 269, 358, 383, 385, 415, 416, 440, 472, 516, 517, 575, 576, 601, 605, 782, 786, 836, 837, 839, 871, 906, 974, 980, 1012, 1046, 1047, 1048, 1053, 1054], "safe_copi": 1047, "safe_index": [392, 1050], "safe_mask": [2, 392], "safe_realloc": 1043, "safe_sparse_dot": [2, 392, 1050], "safe_sqr": [2, 392], "safeguard": 409, "safer": [358, 366, 381, 415, 419, 1040], "safest": [217, 235, 366, 377], "safeti": [104, 395, 416, 974, 1029, 1050], "safikh": 1055, "safiuddin": 1055, "sag": [209, 224, 666, 667, 680, 682, 695, 1005, 1023, 1045, 1046, 1047, 1049, 1050], "sag_solv": 1049, "saga": [66, 208, 232, 233, 666, 667, 680, 682, 695, 822, 1005, 1047, 1049], "sagar": 1050, "sagnik": 1048, "saha": 1054, "sahil": 1056, "sahin": 1050, "sahu": 1052, "sai": [203, 244, 353, 357, 358, 383, 413, 415, 416, 420, 422, 423, 453, 454, 508, 512, 518, 685, 998, 1015, 1022, 1033, 1057, 1058], "said": [153, 190, 244, 276, 378, 383, 800, 1007, 1015], "saihttam": 1046, "sailesh": [1047, 1048], "saint": 1046, "saito": [420, 546, 548, 555, 1047], "saiw": 1046, "sake": [43, 64, 150, 153, 186, 190, 217, 321, 350, 357, 359, 391, 395, 678], "saket": [1044, 1045, 1052], "sakinaouisrani": 1054, "salahuddin": 1055, "salakhutdinov": [652, 861, 1012], "salamin": 1044, "sale": [147, 254, 275, 1009, 1033], "saleem": 1050, "salerno": 380, "salim": [1057, 1058], "sallisaw": [416, 473], "salman": [0, 404, 1055, 1056, 1057, 1058, 1059], "salt": [67, 249, 318, 1054], "salvator": [1040, 1054, 1055, 1057, 1058], "salz": 1047, "salzmann": [217, 235], "sam": [1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055], "sambhav": 1051, "same": [2, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 88, 90, 92, 93, 99, 104, 105, 106, 121, 123, 125, 128, 130, 132, 138, 140, 144, 147, 150, 151, 153, 156, 172, 174, 190, 191, 193, 203, 204, 206, 211, 217, 218, 219, 225, 235, 251, 255, 265, 269, 270, 271, 272, 273, 275, 276, 278, 280, 281, 283, 288, 289, 296, 299, 301, 313, 316, 317, 319, 321, 322, 325, 327, 338, 346, 357, 358, 359, 365, 366, 370, 371, 372, 377, 378, 380, 382, 383, 385, 387, 389, 391, 392, 395, 396, 397, 398, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 436, 440, 445, 446, 453, 457, 463, 472, 476, 477, 478, 479, 480, 481, 482, 483, 485, 501, 503, 504, 506, 512, 516, 517, 539, 540, 543, 544, 545, 546, 547, 548, 551, 555, 557, 559, 560, 561, 562, 565, 567, 568, 569, 570, 572, 573, 575, 576, 597, 598, 610, 611, 614, 618, 619, 621, 630, 635, 636, 637, 640, 641, 654, 657, 660, 661, 663, 666, 667, 671, 674, 675, 676, 680, 681, 682, 683, 684, 685, 686, 692, 695, 707, 712, 713, 720, 721, 723, 725, 734, 739, 740, 744, 750, 763, 764, 765, 786, 787, 788, 794, 796, 800, 802, 803, 805, 806, 808, 809, 811, 812, 814, 816, 817, 822, 826, 827, 830, 831, 833, 834, 835, 836, 837, 838, 839, 854, 855, 856, 860, 862, 863, 864, 875, 876, 877, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 894, 901, 912, 913, 920, 922, 933, 940, 944, 956, 974, 979, 982, 983, 993, 998, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1023, 1024, 1025, 1028, 1029, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "same_kind": 1057, "samesh": [1050, 1051], "samm": [67, 137, 139, 146, 422, 561, 1056, 1057], "samoocha": 1048, "sampl": [2, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 81, 83, 84, 88, 91, 92, 93, 94, 95, 100, 113, 114, 115, 118, 120, 121, 123, 127, 128, 131, 132, 137, 138, 139, 140, 141, 142, 143, 146, 147, 149, 150, 151, 153, 154, 159, 160, 161, 169, 171, 172, 174, 178, 179, 180, 181, 183, 185, 187, 190, 191, 195, 196, 202, 203, 204, 206, 217, 219, 221, 224, 225, 227, 228, 229, 231, 233, 234, 235, 237, 244, 248, 249, 251, 252, 254, 260, 261, 263, 264, 265, 266, 267, 269, 270, 274, 275, 277, 278, 279, 281, 283, 287, 289, 290, 295, 296, 300, 301, 302, 303, 305, 306, 307, 309, 313, 314, 316, 318, 319, 320, 321, 323, 325, 327, 328, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 344, 346, 348, 350, 351, 353, 354, 357, 358, 362, 365, 370, 376, 378, 379, 382, 383, 385, 386, 395, 396, 406, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 432, 433, 434, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 463, 464, 465, 468, 469, 470, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 618, 619, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 695, 696, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 742, 743, 744, 745, 746, 747, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 769, 771, 772, 776, 777, 778, 779, 781, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 934, 938, 939, 943, 944, 956, 960, 977, 979, 982, 983, 986, 989, 997, 998, 999, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1032, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "sample_i": [183, 425, 619, 1054], "sample_id": [365, 378, 505], "sample_interv": 646, "sample_interval_": 1056, "sample_posterior": [186, 635, 999], "sample_s": [93, 249, 358, 801], "sample_score_mean": 279, "sample_score_std": 279, "sample_silhouette_valu": 95, "sample_step": 646, "sample_weight": [61, 199, 217, 230, 235, 251, 326, 331, 332, 355, 383, 397, 406, 415, 422, 426, 432, 438, 444, 450, 451, 454, 456, 466, 467, 472, 476, 489, 490, 491, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 618, 619, 640, 641, 642, 643, 645, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 705, 706, 708, 710, 711, 715, 716, 717, 720, 721, 724, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 742, 743, 746, 747, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 790, 791, 792, 793, 795, 796, 797, 798, 799, 802, 804, 807, 808, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 877, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 968, 996, 1009, 1023, 1024, 1025, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "sample_weight1": 251, "sample_weight2": 251, "sample_weight_const": 355, "sample_weight_last_ten": 355, "sample_weight_vect": 944, "sample_without_replac": [2, 392, 1046], "samples_weight": 230, "samplewis": [762, 1009], "samson": 1047, "samuel": [704, 1033, 1043, 1044, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "samuela": 1043, "samu\u00ebl": 1047, "san": [172, 380, 423, 1021], "sanchez": [1048, 1049], "sandbox": 409, "sandeep": 1052, "sander": [415, 426, 451, 453, 457, 464, 858, 1015, 1049, 1050], "sandi": 1053, "sandip": [1057, 1058], "sandra": [1049, 1055], "sandro": [1048, 1055], "sandrocasagrand": [1048, 1049], "sandrovskii": 1047, "sangam": 1055, "sangamswadik": 1055, "sangeeth": 1049, "saniti": [386, 876, 1009, 1040, 1041], "sanjabi": 1050, "sanjai": 1054, "sanjai_3": [1055, 1056], "sanjoi": [906, 1021], "sano": 1054, "sanofi": 51, "santa": [182, 1055], "santana": [1051, 1054], "santhanam": 1048, "santhosh": 1051, "santhoshbala18": 1051, "santi": [1045, 1047, 1048], "santiago": 1051, "sap": 51, "sapiro": [420, 539, 545], "saqib": 1048, "sara": 1053, "sarah": [1047, 1049, 1052], "sarahremu": [1055, 1058], "sarajpoor": 1055, "sarat": 1051, "sarawagi": 791, "sarra": 1050, "sartaj": 1046, "sasank": 1046, "sashka": [1055, 1056], "sass": [383, 401, 408], "sassenhagen": [1052, 1057], "sat": [43, 153, 191, 423], "satellit": 1012, "satisfi": [415, 658, 662, 707, 725, 744, 745, 852, 853], "satish": 1048, "sato": 1043, "satrajit": [0, 405, 1040, 1041], "satur": [72, 190, 316], "sauerbrei": 1019, "sauerkraut": 423, "saul": [697, 701, 1006, 1047, 1048, 1050], "saurabh": [1044, 1045, 1046, 1047, 1048, 1052], "sauvignon": 322, "saval": 1049, "savard": 1040, "save": [88, 104, 106, 254, 314, 382, 383, 387, 389, 390, 391, 397, 409, 419, 427, 475, 499, 542, 543, 635, 852, 853, 910, 1005, 1009, 1019, 1025, 1033, 1040, 1043, 1047, 1050, 1058], "savings_statu": 269, "savkomax": 1055, "saw": [124, 218, 221], "sawtooth": 124, "say_hello": 969, "sc": [377, 415], "scaja": 1057, "scala": 1029, "scalabl": [77, 79, 97, 187, 194, 249, 267, 330, 358, 383, 415, 422, 423, 455, 498, 510, 597, 648, 814, 825, 836, 838, 850, 873, 882, 884, 912, 914, 917, 918, 1001, 1004, 1006, 1009, 1022, 1024, 1030, 1033, 1040, 1043, 1044, 1050, 1051, 1054, 1055], "scalar": [2, 123, 328, 333, 389, 397, 411, 416, 425, 427, 471, 474, 532, 541, 623, 624, 625, 630, 631, 635, 636, 638, 746, 750, 934, 942, 1001, 1013, 1015, 1019, 1023, 1028, 1050, 1051, 1054, 1056, 1059], "scalarmapp": 66, "scale": [2, 36, 43, 44, 51, 62, 64, 72, 75, 78, 81, 82, 91, 93, 96, 105, 106, 112, 115, 118, 125, 128, 148, 155, 172, 174, 175, 176, 179, 180, 181, 187, 191, 195, 198, 199, 204, 208, 217, 219, 221, 231, 232, 233, 235, 236, 239, 244, 250, 254, 265, 272, 275, 276, 277, 278, 282, 299, 301, 312, 313, 314, 315, 316, 326, 329, 331, 332, 340, 341, 343, 346, 350, 366, 369, 370, 375, 376, 377, 380, 383, 388, 392, 395, 396, 397, 415, 416, 420, 422, 423, 424, 425, 453, 454, 457, 458, 464, 471, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 509, 518, 522, 523, 532, 542, 546, 548, 549, 555, 557, 558, 569, 570, 590, 598, 599, 605, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 639, 640, 649, 652, 653, 654, 655, 657, 660, 666, 667, 668, 669, 670, 680, 682, 684, 685, 686, 689, 695, 696, 697, 698, 700, 702, 707, 711, 724, 749, 755, 765, 767, 777, 783, 785, 822, 825, 838, 839, 840, 852, 853, 854, 869, 870, 873, 876, 881, 882, 884, 887, 889, 890, 892, 897, 898, 899, 901, 902, 904, 905, 912, 913, 914, 915, 916, 917, 918, 983, 984, 985, 986, 989, 998, 1001, 1002, 1005, 1009, 1010, 1011, 1012, 1013, 1017, 1023, 1024, 1029, 1030, 1033, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "scale_": [657, 881, 882, 890, 892, 902, 1019, 1045], "scaled_clf": 321, "scaled_pca": 321, "scaled_x_train": 321, "scaler": [45, 105, 107, 170, 187, 233, 234, 249, 254, 256, 258, 289, 299, 304, 315, 320, 321, 330, 346, 349, 366, 388, 416, 419, 497, 666, 667, 680, 682, 695, 872, 881, 882, 884, 888, 889, 890, 892, 897, 898, 899, 900, 901, 902, 903, 1013, 1019, 1023, 1030, 1040, 1045, 1048, 1053], "scaler2": 258, "scalewai": 391, "scaling_": 558, "scalings_": [557, 558], "scanpi": 1057, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 80, 84, 87, 91, 92, 93, 94, 95, 97, 102, 113, 118, 121, 125, 127, 128, 129, 131, 138, 139, 143, 146, 154, 156, 157, 159, 165, 167, 174, 175, 176, 178, 180, 181, 182, 183, 189, 190, 195, 198, 201, 207, 209, 213, 214, 215, 218, 219, 220, 226, 229, 230, 231, 234, 237, 238, 239, 240, 241, 242, 244, 249, 250, 252, 260, 261, 262, 263, 264, 265, 266, 270, 276, 278, 290, 296, 299, 302, 303, 304, 305, 306, 307, 308, 311, 316, 318, 319, 321, 329, 337, 340, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 355, 357, 362, 363, 364, 379, 417, 639, 709, 1003, 1005], "scatter_": 709, "scatter_fig": 143, "scatter_kwarg": [43, 52, 109, 158, 190, 709], "scatter_trac": 143, "scatterplot": [117, 197, 275], "scatterpoint": [127, 131, 240, 262, 337], "scenario": [92, 104, 153, 174, 195, 221, 278, 366, 390, 401, 414, 419, 422, 545, 551, 553, 554, 1003, 1009, 1019, 1050], "scene": [380, 391, 1012, 1014, 1053], "schapir": [50, 293, 309, 378, 422, 506, 561, 562], "schedul": [153, 312, 371, 387, 684, 685, 686, 869, 870, 1023, 1033, 1047], "scheidegg": 1040, "scheme": [284, 301, 322, 323, 378, 387, 397, 415, 419, 421, 423, 574, 598, 666, 667, 713, 821, 855, 879, 880, 883, 885, 889, 893, 896, 901, 912, 917, 998, 1005, 1019, 1023, 1040, 1048, 1051, 1052, 1057, 1058], "scherer": 1046, "scheubrein": 1052, "schloss": 1009, "schl\u00fcter": [1040, 1048], "schmerler": 1055, "schmid": [766, 767, 1007], "schmidt": [666, 1005, 1043], "schmitt": [1050, 1051], "schmitz": 1057, "schneider": [357, 1053, 1058], "schoelkopf": 908, "schoentgen": [1048, 1049], "schofield": 1040, "schole": 1052, "scholkopf1997": 420, "scholkopf1998": 1019, "scholz": 1058, "school": [104, 179, 190, 380, 415, 796, 1009], "schreiber": [0, 405, 1045, 1046, 1047], "schroeder": [45, 378], "schubert": [415, 426, 451, 457, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1054, 1058], "schucker": 1046, "schuder": [1048, 1049, 1050], "schuetz": [847, 851], "schuldt": 1044, "schult": 55, "schulz": 1040, "schumach": [1043, 1044, 1045], "schut": 1040, "schwardt": 1040, "schwartz": [1040, 1042, 1054], "schwetlick": [1051, 1052], "sch\u00f6lkopf": [44, 420, 543, 878, 1015, 1019, 1024], "sch\u00f6nberger": [1042, 1043], "sch\u00fctze": [420, 598, 1007, 1009, 1011], "sci": [57, 104, 357, 358, 359, 378, 395, 495, 697, 701, 883, 1006, 1019], "scibol": 1051, "scienc": [0, 73, 113, 172, 182, 190, 293, 377, 380, 395, 415, 447, 461, 546, 548, 555, 696, 697, 701, 859, 999, 1001, 1005, 1006, 1009, 1012, 1021, 1029, 1033, 1048], "scientif": [0, 68, 249, 377, 381, 395, 401, 415, 459, 469, 509, 1033, 1035], "scientist": [999, 1033], "scikera": 1028, "scikit": [2, 15, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 372, 375, 377, 378, 379, 380, 382, 383, 386, 389, 390, 391, 392, 396, 397, 402, 403, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 429, 430, 432, 433, 434, 435, 437, 438, 439, 445, 450, 453, 454, 457, 464, 471, 472, 474, 475, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 520, 523, 529, 532, 546, 549, 569, 570, 572, 573, 575, 584, 589, 590, 591, 597, 607, 610, 619, 634, 636, 638, 640, 642, 646, 648, 654, 656, 660, 666, 677, 688, 696, 705, 708, 709, 710, 725, 726, 740, 750, 756, 786, 787, 788, 796, 803, 807, 808, 809, 810, 811, 812, 813, 814, 822, 825, 826, 827, 828, 829, 830, 831, 834, 835, 838, 840, 841, 854, 856, 872, 873, 875, 877, 879, 882, 884, 885, 886, 887, 891, 892, 893, 896, 909, 910, 912, 917, 920, 921, 928, 930, 950, 951, 961, 974, 975, 998, 999, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1022, 1023, 1024, 1025, 1027, 1030, 1032, 1035, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "scikit_learn": 1028, "scikit_learn_data": [52, 378, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507], "scipi": [0, 2, 45, 53, 55, 57, 76, 81, 82, 88, 89, 111, 112, 115, 124, 126, 130, 149, 174, 190, 193, 203, 207, 261, 265, 266, 272, 275, 283, 287, 296, 301, 306, 314, 326, 327, 332, 333, 335, 336, 370, 377, 378, 381, 383, 385, 389, 391, 392, 395, 396, 397, 401, 408, 409, 411, 412, 415, 420, 423, 457, 458, 459, 460, 464, 469, 470, 504, 511, 516, 540, 542, 543, 549, 552, 589, 590, 593, 594, 596, 597, 618, 619, 656, 657, 661, 665, 666, 667, 671, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 688, 692, 695, 699, 700, 703, 727, 768, 771, 786, 787, 788, 789, 800, 801, 812, 820, 822, 838, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 869, 875, 884, 885, 890, 891, 892, 895, 899, 902, 903, 912, 914, 915, 917, 918, 953, 957, 958, 963, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 998, 999, 1005, 1007, 1010, 1012, 1013, 1019, 1023, 1024, 1027, 1029, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1059], "sckit": 1056, "scls19fr": 1045, "scognamiglio": 422, "scope": [45, 57, 269, 370, 372, 383, 395, 423, 1028, 1029], "score": [0, 2, 13, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 93, 95, 104, 105, 106, 107, 108, 109, 111, 115, 118, 130, 135, 137, 139, 146, 147, 148, 149, 150, 153, 154, 157, 158, 164, 167, 168, 169, 172, 185, 187, 189, 190, 191, 192, 193, 195, 202, 208, 209, 212, 217, 219, 223, 225, 233, 235, 244, 249, 250, 251, 254, 258, 264, 267, 269, 273, 275, 276, 277, 278, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 293, 295, 303, 304, 305, 311, 312, 313, 314, 318, 320, 321, 322, 323, 325, 326, 327, 328, 332, 333, 335, 336, 338, 339, 346, 353, 357, 358, 361, 366, 378, 383, 385, 388, 396, 397, 409, 410, 411, 412, 413, 414, 416, 418, 420, 422, 424, 432, 434, 438, 444, 450, 454, 456, 459, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 510, 512, 540, 544, 549, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 600, 601, 602, 603, 604, 606, 607, 608, 610, 611, 612, 614, 617, 618, 619, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 706, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 750, 763, 764, 765, 790, 791, 792, 793, 794, 795, 796, 797, 802, 803, 804, 805, 806, 807, 808, 811, 812, 814, 822, 827, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 858, 859, 861, 862, 863, 868, 869, 870, 872, 892, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 928, 930, 958, 998, 1001, 1005, 1007, 1012, 1015, 1017, 1019, 1023, 1029, 1030, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 280, "score_estim": [217, 235], "score_full_data": 185, "score_func": [72, 105, 106, 424, 600, 603, 604, 606, 607, 608, 750, 1040, 1042, 1057], "score_iri": 281, "score_iterative_imput": 185, "score_label": [235, 281], "score_mean": 349, "score_nam": [62, 72, 250, 277, 291, 331, 358, 814, 831], "score_param": [601, 602, 667, 1057], "score_rand": 281, "score_sampl": [264, 301, 302, 303, 309, 397, 421, 476, 540, 549, 571, 685, 805, 806, 808, 811, 812, 822, 857, 858, 868, 872, 916, 1015, 1043, 1048, 1050, 1052], "score_simple_imput": 185, "score_std": 349, "score_tim": [277, 419, 835, 836], "score_times_nb": 277, "score_times_svm": 277, "score_typ": [250, 277, 291, 331, 814, 831, 1056], "score_valu": 358, "scorer": [2, 153, 158, 235, 251, 269, 279, 332, 385, 397, 406, 414, 419, 422, 424, 569, 570, 602, 610, 642, 667, 681, 683, 719, 740, 741, 750, 808, 811, 812, 814, 822, 830, 831, 834, 835, 836, 837, 839, 966, 998, 1005, 1009, 1017, 1029, 1044, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "scorer1_nam": 419, "scorer2_nam": 419, "scorer_": [808, 811, 812, 822], "scorer_nam": [279, 808, 822], "scores_": [197, 198, 600, 603, 604, 606, 607, 608, 652, 653, 667, 1040, 1050], "scores_df": 52, "scores_glm_pure_premium": 235, "scores_matrix": 286, "scores_max": 55, "scores_product_model": 235, "scores_std": 163, "scoring_cal": 719, "scoring_inner_cv": 332, "scoring_on_bootstrap": 278, "scoring_weight": 406, "scott": [421, 857, 1040, 1041, 1046, 1048, 1049, 1050, 1055, 1056], "scottlog": 1058, "scratch": [384, 449, 1009, 1042], "screen": [48, 1053], "screenporch": 147, "screenshot": 381, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 371, 383, 384, 385, 386, 387, 389, 395, 397, 401, 409, 423, 1029, 1032], "scroll": 403, "scrollbar": 388, "scrutin": 284, "scsi": 57, "scullei": 415, "sdenton4": 1043, "sdg_param": 339, "se": [172, 239, 380, 401], "seabold": [1043, 1045, 1046], "seaborn": [72, 138, 153, 189, 190, 197, 202, 265, 275, 383, 401, 408, 1028], "seagreen": 211, "seal": 1046, "seamu": 1042, "sean": [1052, 1053, 1055], "seanpwilliam": 1047, "sear": 1046, "search": [2, 45, 52, 64, 81, 89, 105, 106, 107, 108, 150, 167, 169, 171, 172, 174, 187, 235, 250, 251, 265, 267, 269, 274, 276, 279, 280, 282, 287, 295, 296, 298, 300, 314, 318, 330, 346, 352, 357, 366, 380, 381, 383, 385, 395, 397, 410, 415, 416, 419, 422, 423, 424, 426, 450, 455, 457, 459, 464, 465, 468, 471, 478, 479, 485, 510, 523, 530, 565, 566, 567, 568, 572, 573, 574, 587, 607, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 636, 661, 684, 696, 697, 700, 701, 721, 736, 793, 796, 808, 811, 812, 819, 820, 822, 824, 838, 839, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 872, 917, 920, 921, 922, 923, 962, 996, 1002, 1004, 1006, 1009, 1012, 1013, 1023, 1025, 1029, 1030, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1052, 1054, 1055, 1057, 1059], "search_05p": 150, "search_95p": 150, "search_cv": 105, "searchcv": [396, 1055], "searchforpass": 1056, "searchgrid": 1029, "searchsort": 50, "season": [43, 52, 179, 191, 218, 382], "seasonal_kernel": 179, "seasoncountcatu32": 52, "sebastian": [1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057], "sebastien": 1048, "sebastin": [1047, 1048], "sebasti\u00e1n": 1046, "seberg": 1041, "sec": [49, 225, 239, 242, 296], "sec65": 1055, "secant": 650, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 378, 385, 389, 397, 412, 414, 415, 419, 420, 422, 423, 425, 471, 474, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 512, 518, 561, 591, 596, 597, 598, 599, 629, 632, 639, 640, 707, 720, 724, 766, 767, 771, 772, 774, 775, 782, 783, 784, 785, 786, 789, 808, 811, 812, 822, 836, 842, 843, 846, 849, 860, 862, 863, 864, 869, 870, 998, 999, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1016, 1019, 1020, 1025, 1055], "secondari": [643, 1044], "secondli": [381, 395, 415, 422, 665, 1005], "sect": 44, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 123, 128, 140, 148, 153, 158, 163, 164, 165, 179, 183, 189, 190, 191, 193, 197, 202, 204, 206, 219, 241, 245, 251, 254, 256, 269, 273, 275, 278, 284, 321, 322, 323, 327, 357, 358, 359, 366, 376, 378, 381, 383, 384, 385, 387, 388, 389, 390, 391, 398, 406, 413, 414, 416, 418, 419, 420, 422, 423, 424, 425, 446, 450, 466, 542, 622, 627, 630, 645, 653, 796, 806, 914, 917, 998, 1003, 1005, 1009, 1010, 1012, 1013, 1015, 1016, 1023, 1024, 1025, 1026, 1040, 1042, 1043, 1044, 1047], "sector": 190, "sector_construct": 190, "sector_manufactur": 190, "sector_oth": 190, "secur": [387, 397, 1028, 1029, 1033, 1035], "sed": [387, 1040], "sedamaki": 1054, "sedykh": 1055, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 84, 85, 88, 90, 92, 93, 97, 99, 100, 102, 103, 113, 118, 120, 123, 128, 129, 133, 137, 138, 139, 140, 143, 144, 145, 146, 147, 149, 150, 151, 153, 155, 158, 163, 168, 169, 170, 172, 174, 179, 180, 181, 185, 187, 190, 191, 193, 195, 197, 198, 199, 202, 208, 218, 219, 220, 221, 223, 234, 235, 237, 239, 246, 248, 251, 254, 255, 256, 258, 261, 262, 263, 268, 269, 270, 272, 274, 275, 276, 277, 278, 280, 282, 284, 285, 286, 289, 290, 291, 293, 296, 302, 303, 305, 309, 316, 322, 323, 325, 326, 327, 328, 329, 330, 331, 337, 346, 350, 353, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 372, 375, 376, 377, 378, 380, 381, 382, 383, 385, 387, 389, 390, 391, 395, 396, 397, 403, 409, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 495, 498, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 617, 618, 619, 622, 627, 630, 631, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 714, 716, 719, 721, 751, 771, 782, 786, 787, 788, 789, 796, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 931, 955, 956, 977, 979, 982, 992, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "seed": [2, 46, 50, 63, 64, 70, 74, 75, 79, 80, 87, 89, 92, 94, 95, 99, 100, 105, 111, 112, 113, 121, 124, 129, 140, 146, 165, 167, 192, 207, 212, 215, 220, 223, 226, 230, 234, 240, 261, 263, 264, 265, 266, 278, 281, 290, 301, 302, 303, 350, 351, 355, 358, 366, 371, 385, 392, 395, 397, 415, 419, 420, 450, 454, 455, 457, 459, 464, 466, 467, 468, 469, 478, 479, 480, 544, 552, 561, 562, 563, 564, 567, 568, 635, 654, 655, 660, 661, 668, 669, 670, 671, 685, 697, 699, 701, 703, 805, 806, 812, 843, 846, 861, 915, 941, 955, 956, 973, 977, 998, 999, 1004, 1006, 1044, 1045, 1049, 1050, 1056], "seeger": [647, 1001], "seek": [237, 239, 241, 382, 383, 395, 398, 516, 517, 1006], "seel": 1054, "seem": [43, 48, 52, 81, 90, 150, 153, 180, 191, 217, 241, 244, 276, 293, 312, 320, 353, 357, 358, 382, 383, 388, 414, 419, 509, 1005, 1009], "seemingli": [235, 366, 395], "seen": [55, 62, 75, 90, 101, 115, 126, 132, 144, 150, 153, 190, 191, 213, 241, 247, 251, 312, 316, 346, 357, 378, 385, 387, 396, 397, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 431, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 529, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 631, 635, 636, 637, 638, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 983, 989, 998, 1004, 1009, 1012, 1013, 1019, 1025, 1033, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "segfault": [371, 384, 1040, 1048, 1053], "segment": [51, 53, 55, 59, 71, 82, 83, 187, 240, 247, 378, 391, 415, 423, 459, 469, 516, 517, 699, 868, 1009, 1030, 1033, 1048, 1050, 1052], "seguin": 1045, "sei": 423, "seismic_r": [197, 202], "sejourn": 1049, "sel": [406, 424], "seladu": 1056, "seldom": 912, "sele": [1054, 1055], "selecci\u00f3n": 322, "select": [2, 18, 29, 43, 46, 48, 49, 52, 58, 70, 71, 79, 90, 92, 97, 103, 105, 108, 115, 121, 122, 123, 132, 133, 137, 139, 145, 147, 150, 153, 158, 167, 169, 179, 181, 190, 191, 193, 195, 196, 198, 200, 202, 203, 205, 216, 221, 225, 232, 235, 238, 244, 248, 250, 254, 259, 260, 261, 262, 269, 273, 274, 275, 276, 280, 288, 289, 300, 316, 321, 322, 327, 331, 333, 335, 336, 339, 341, 346, 353, 357, 358, 359, 366, 370, 378, 380, 381, 383, 385, 391, 396, 397, 412, 415, 416, 417, 420, 422, 423, 425, 450, 452, 453, 454, 456, 458, 460, 465, 466, 467, 471, 473, 474, 479, 480, 483, 495, 496, 500, 501, 504, 505, 508, 509, 510, 512, 520, 523, 540, 542, 543, 548, 549, 552, 557, 559, 566, 567, 568, 571, 573, 589, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 635, 639, 640, 653, 654, 655, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 679, 681, 684, 686, 690, 691, 699, 700, 705, 720, 724, 726, 762, 796, 800, 801, 805, 806, 808, 811, 812, 813, 814, 822, 834, 835, 836, 838, 840, 854, 855, 856, 858, 860, 862, 863, 864, 872, 873, 877, 882, 888, 892, 909, 912, 913, 917, 920, 921, 922, 923, 934, 977, 978, 1003, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1019, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "select__k": 998, "select_dtyp": [109, 147, 330, 473], "selected_featur": 193, "selected_features_nam": 193, "selectfdr": [2, 424, 600, 604, 606, 607, 608, 614, 1044, 1046, 1047, 1056], "selectfpr": [2, 383, 424, 600, 603, 606, 607, 608, 614, 1056], "selectfrommodel": [2, 172, 397, 406, 601, 610, 611, 1031, 1035, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1056, 1057], "selectfw": [2, 424, 600, 603, 604, 607, 608, 614, 1056], "selectkbest": [2, 106, 108, 168, 169, 329, 366, 383, 406, 416, 424, 589, 600, 603, 604, 606, 608, 614, 998, 1041, 1046, 1056, 1057], "selectkbestselectkbest": [169, 329], "selector": [2, 52, 105, 168, 169, 254, 353, 391, 423, 424, 473, 589, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 1042, 1050, 1052, 1056], "selectormixin": [2, 1051], "selectpercentil": [2, 89, 105, 258, 349, 424, 600, 603, 604, 606, 607, 611, 614, 1041, 1046, 1056, 1057], "selectpercentileselectpercentil": [105, 258], "self": [2, 47, 57, 62, 64, 91, 100, 135, 182, 187, 251, 289, 296, 334, 340, 346, 357, 377, 383, 384, 385, 388, 389, 390, 391, 415, 423, 425, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 508, 516, 517, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 711, 805, 806, 807, 808, 809, 810, 811, 812, 815, 817, 822, 826, 827, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 961, 965, 966, 968, 969, 974, 982, 997, 1012, 1029, 1030, 1031, 1033, 1035, 1042, 1047, 1054], "self_request": 251, "self_training_clf": 338, "self_training_model": [327, 909], "selftrain": 339, "selftrainingclassifi": [2, 327, 338, 339, 340, 406, 1022, 1052, 1057, 1059], "selftrainingclassifierifittedselftrainingclassifi": 327, "seljak": 1055, "sell": 109, "selvan": 1052, "semant": [54, 357, 358, 397, 552, 1034, 1035, 1042], "semi": [2, 38, 57, 67, 165, 176, 249, 252, 318, 327, 343, 346, 350, 359, 378, 397, 495, 512, 543, 596, 598, 684, 737, 838, 872, 876, 907, 908, 909, 917, 1007, 1012, 1015, 1030, 1031, 1035, 1040, 1052, 1055], "semi_supervis": [2, 187, 327, 329, 334, 335, 336, 337, 338, 339, 340, 406, 907, 908, 909, 1010, 1022, 1030, 1041, 1046, 1047, 1054, 1055], "semiconductor": 1033, "semidefinit": [183, 1019, 1024], "semilogi": [205, 248], "semilogx": [163, 205, 206, 288], "semin": 422, "seminar": 1009, "semisupervis": [335, 397], "sen": [2, 187, 196, 220, 223, 316, 657, 665, 679, 686, 687, 1030], "send": [383, 398, 415, 427, 541], "sender": [357, 378], "sendyk": 1049, "seng": 1052, "senger": [0, 1056, 1057, 1058, 1059], "senior": [1019, 1033], "sens": [42, 43, 52, 55, 62, 90, 101, 180, 187, 190, 195, 248, 316, 322, 336, 346, 357, 366, 370, 383, 384, 397, 415, 417, 419, 424, 469, 476, 477, 478, 479, 480, 481, 482, 483, 660, 663, 664, 680, 809, 819, 909, 1003, 1005, 1012, 1013, 1015, 1019, 1022, 1030], "sensibl": [87, 185, 293, 358, 385, 1005, 1019], "sensit": [43, 79, 90, 113, 114, 140, 150, 187, 191, 219, 220, 221, 244, 245, 254, 267, 279, 282, 289, 316, 333, 346, 371, 372, 398, 414, 417, 422, 459, 469, 504, 559, 569, 666, 700, 708, 710, 720, 721, 726, 750, 792, 795, 796, 807, 808, 830, 838, 873, 892, 910, 1004, 1005, 1006, 1008, 1009, 1013, 1015, 1023, 1024, 1030, 1044, 1058], "sensor": 202, "sent": [153, 415, 841, 1025], "sentenc": [104, 357, 359, 378, 398, 423], "seoeun": 1056, "sep": [121, 284], "sepal": [80, 120, 131, 133, 146, 176, 201, 258, 299, 327, 330, 343, 380, 1019], "sepal_col": 330, "separ": [52, 53, 61, 62, 66, 67, 75, 90, 95, 97, 101, 107, 113, 122, 123, 125, 128, 137, 139, 142, 145, 156, 172, 177, 186, 187, 191, 192, 195, 196, 216, 218, 238, 252, 262, 275, 278, 284, 285, 316, 318, 321, 327, 338, 341, 342, 344, 345, 346, 350, 351, 357, 366, 370, 379, 380, 385, 388, 391, 395, 397, 409, 413, 415, 416, 417, 420, 422, 423, 425, 471, 520, 527, 541, 546, 548, 549, 555, 557, 589, 596, 597, 599, 618, 639, 646, 654, 655, 681, 684, 685, 698, 702, 733, 740, 753, 754, 756, 761, 800, 827, 844, 845, 871, 872, 914, 916, 917, 922, 923, 998, 999, 1001, 1003, 1005, 1006, 1008, 1015, 1016, 1019, 1023, 1024, 1030, 1040, 1043, 1045, 1046, 1050, 1052, 1053, 1056, 1057], "seper": 561, "septemb": [742, 1009, 1040, 1043, 1046, 1048, 1053, 1056, 1058], "seq": 641, "seq_dataset": [1040, 1050], "seqlearn": 395, "sequenc": [2, 51, 137, 146, 204, 240, 385, 397, 416, 419, 420, 422, 423, 511, 520, 561, 562, 569, 570, 577, 578, 589, 590, 596, 597, 599, 654, 808, 811, 819, 838, 872, 896, 959, 960, 971, 979, 982, 1040, 1043, 1045, 1046], "sequencekernel": 182, "sequenti": [2, 52, 146, 166, 169, 187, 211, 276, 327, 381, 420, 422, 423, 508, 509, 542, 601, 605, 610, 611, 613, 614, 654, 655, 660, 661, 666, 668, 669, 670, 671, 681, 796, 872, 873, 892, 999, 1017, 1023, 1030, 1031, 1035, 1040, 1049, 1052], "sequentialfeatureselector": [2, 172, 406, 424, 601, 605, 611, 1052, 1053, 1054, 1055, 1056, 1059], "sergei": [415, 1042, 1046, 1047, 1048, 1049, 1050], "sergeyf": 1042, "sergio": [1040, 1042, 1043, 1052, 1055], "sergiodsr": 1051, "sergul": [1047, 1048, 1051], "seri": [2, 42, 43, 51, 58, 115, 144, 150, 153, 187, 189, 192, 193, 200, 217, 219, 221, 237, 258, 280, 289, 323, 329, 335, 375, 378, 388, 397, 415, 496, 497, 498, 499, 500, 504, 508, 509, 510, 512, 513, 518, 549, 570, 698, 702, 709, 750, 753, 754, 756, 798, 829, 834, 835, 838, 934, 1000, 1005, 1006, 1010, 1012, 1023, 1028, 1030, 1043, 1046, 1047, 1048, 1052, 1055, 1057, 1058], "serial": [397, 409, 429, 964, 1028, 1029, 1040, 1048, 1052, 1057], "serializetostr": 409, "serious": 1011, "serum": [172, 380], "serv": [104, 127, 137, 180, 269, 278, 350, 416, 559, 1001, 1035, 1054], "server": [0, 172, 370, 380, 381, 383, 504, 1032, 1048], "servic": [0, 43, 245, 254, 383, 387, 409, 1033, 1048], "sess": 409, "session": [385, 389, 395, 401, 1027, 1033], "set": [2, 3, 8, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 81, 84, 85, 88, 89, 90, 92, 93, 95, 97, 99, 100, 101, 104, 105, 107, 113, 114, 115, 118, 120, 122, 123, 127, 128, 131, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 160, 163, 168, 169, 172, 174, 180, 181, 182, 187, 189, 190, 191, 192, 193, 197, 202, 204, 205, 206, 208, 210, 212, 213, 214, 216, 217, 218, 219, 222, 225, 230, 231, 235, 237, 238, 239, 244, 245, 246, 247, 249, 250, 251, 254, 258, 260, 262, 264, 265, 268, 270, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 286, 290, 293, 295, 298, 302, 303, 304, 305, 306, 309, 312, 313, 314, 316, 318, 320, 321, 322, 323, 325, 327, 328, 332, 335, 336, 339, 340, 343, 345, 348, 350, 353, 357, 358, 359, 363, 364, 365, 366, 370, 371, 372, 375, 376, 378, 380, 381, 383, 385, 387, 388, 390, 391, 396, 397, 398, 401, 406, 409, 411, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 429, 432, 439, 440, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 495, 496, 501, 503, 504, 505, 507, 510, 511, 512, 516, 517, 518, 523, 531, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 587, 588, 589, 590, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 705, 706, 707, 708, 709, 710, 711, 719, 721, 722, 724, 727, 729, 731, 734, 735, 736, 737, 738, 739, 742, 746, 748, 753, 754, 756, 758, 759, 761, 764, 787, 788, 790, 791, 792, 793, 795, 797, 798, 799, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 938, 939, 945, 950, 951, 956, 960, 964, 965, 977, 978, 979, 982, 983, 989, 992, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "set1": [275, 305, 306], "set_": [251, 406, 1058], "set_alpha": [70, 260, 261, 262, 265, 266], "set_arrai": [51, 240, 247], "set_aspect": [43, 125, 177, 228, 262, 354], "set_autoscaley_on": 77, "set_axis_bgcolor": 115, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 300, "set_clip_box": [70, 260, 261, 262, 265, 266], "set_color": [46, 228], "set_config": [2, 251, 256, 258, 269, 323, 326, 332, 370, 371, 406, 416, 444, 450, 451, 454, 456, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 601, 602, 605, 610, 618, 619, 634, 635, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 807, 809, 810, 815, 817, 826, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 1049, 1051, 1054, 1056], "set_constrained_layout_pad": 123, "set_edgecolor": 123, "set_facecolor": [115, 260], "set_fit_request": [251, 332, 406, 444, 450, 451, 454, 456, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 596, 599, 643, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 698, 844, 845, 847, 848, 849, 850, 851, 857, 877, 878, 891, 892, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923], "set_fmt_str_length": 52, "set_i": 92, "set_index": [62, 137, 150, 206, 235, 275, 322, 358], "set_inverse_transform_request": [541, 589, 879, 892], "set_label": [75, 177, 248], "set_label_posit": 46, "set_linewidth": [51, 240, 247], "set_major_formatt": [237, 239, 242, 296, 301], "set_major_loc": [237, 301], "set_output": [187, 191, 243, 256, 321, 322, 386, 439, 449, 450, 452, 454, 456, 471, 475, 489, 490, 491, 492, 504, 512, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 574, 575, 576, 577, 578, 589, 590, 591, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 666, 696, 697, 700, 838, 856, 861, 864, 868, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 910, 1030, 1055, 1056, 1057, 1059], "set_param": [126, 133, 141, 147, 150, 191, 192, 198, 204, 206, 210, 221, 225, 249, 254, 258, 269, 288, 299, 325, 349, 358, 386, 397, 415, 416, 422, 425, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 999, 1015, 1040, 1046, 1047, 1048, 1053, 1054], "set_partial_fit_request": [456, 542, 674, 675, 676, 684, 685, 686, 840, 841, 844, 845, 847, 848, 849, 850, 851, 869, 892], "set_path_effect": 75, "set_posit": [102, 129, 228, 316], "set_predict_proba_request": [920, 922], "set_predict_request": [251, 489, 490, 491, 560, 619, 643, 652, 653, 920, 921, 922, 923], "set_printopt": 268, "set_prop_cycl": 218, "set_score_request": [251, 269, 332, 406, 444, 450, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 807, 830, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 854, 855, 859, 862, 863, 869, 870, 872, 907, 908, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 1009], "set_siz": 303, "set_size_inch": [95, 163, 255], "set_split_request": [809, 810, 815, 817, 826], "set_start_method": 395, "set_stat": 998, "set_tick_param": 260, "set_ticklabel": [80, 120, 129, 214, 357], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 80, 88, 90, 92, 95, 99, 100, 106, 109, 113, 120, 121, 128, 133, 137, 142, 144, 148, 154, 156, 158, 159, 183, 185, 186, 189, 190, 191, 192, 193, 197, 198, 206, 208, 215, 217, 218, 219, 225, 237, 238, 241, 242, 247, 249, 250, 254, 255, 260, 268, 269, 270, 271, 272, 275, 277, 278, 282, 286, 287, 289, 291, 293, 295, 296, 299, 300, 301, 306, 311, 312, 316, 317, 318, 319, 320, 321, 325, 329, 335, 336, 343, 350, 353, 354, 355, 357, 361, 379], "set_transform_request": [251, 489, 490, 491, 541, 590, 596, 598, 599, 643, 875, 878, 884, 892], "set_vis": [54, 70, 300, 306, 316], "set_xlabel": [46, 49, 80, 88, 95, 106, 107, 109, 120, 121, 128, 148, 183, 185, 186, 189, 191, 192, 193, 195, 206, 212, 214, 215, 217, 219, 232, 233, 249, 269, 275, 277, 281, 286, 287, 289, 291, 293, 301, 316, 317, 321, 338, 358, 359, 361], "set_xlim": [67, 77, 95, 109, 113, 121, 142, 156, 186, 191, 215, 217, 222, 249, 260, 279, 281, 293, 301, 311, 316, 318, 319, 320, 321, 326, 332, 354], "set_xscal": [206, 222], "set_xtick": [43, 47, 49, 67, 78, 95, 99, 133, 156, 160, 191, 193, 208, 233, 249, 260, 286, 287, 295, 311, 313, 318, 319, 343], "set_xticklabel": [47, 49, 113, 133, 160, 177, 191, 193, 286, 287, 295], "set_ylabel": [46, 47, 49, 66, 70, 80, 88, 95, 100, 106, 107, 109, 113, 120, 121, 128, 133, 137, 144, 148, 183, 191, 195, 206, 208, 212, 214, 215, 217, 219, 221, 232, 249, 260, 269, 275, 277, 281, 286, 287, 289, 295, 301, 316, 317, 321, 325, 338, 353, 358, 361], "set_ylim": [47, 49, 67, 77, 95, 106, 121, 142, 155, 156, 183, 191, 198, 215, 217, 218, 249, 260, 279, 291, 295, 301, 311, 316, 318, 319, 321, 326, 332, 338, 354], "set_yscal": [148, 217], "set_ytick": [43, 67, 78, 95, 99, 133, 156, 185, 186, 193, 208, 233, 260, 286, 311, 313, 318, 319, 343, 359], "set_yticklabel": [133, 177, 185, 186, 193, 286, 359], "set_zlabel": [80, 120, 214], "set_zord": 125, "setattr": 385, "setdefault": [55, 927], "setdiff1d": 352, "seth": 1046, "sethdandridg": 1044, "setminu": 1025, "setosa": [80, 120, 129, 131, 284, 285, 380, 512], "setp": [47, 49, 286, 290], "settabl": 1009, "settingwithcopywarn": 191, "setup": [282, 284, 370, 381, 385, 389, 391, 1012], "setuptool": 1058, "seuclidean": [457, 464, 707, 786, 787, 788, 1012, 1048, 1051, 1052], "seuclideandist": 707, "seung": 420, "seven": [378, 1002], "seventh": [519, 1021], "sever": [0, 43, 48, 51, 52, 62, 64, 67, 70, 72, 90, 91, 92, 96, 108, 140, 153, 156, 158, 161, 169, 172, 174, 179, 180, 187, 190, 195, 202, 206, 217, 221, 236, 237, 240, 241, 242, 248, 262, 270, 275, 280, 289, 296, 298, 312, 316, 328, 353, 357, 358, 370, 377, 378, 380, 383, 385, 388, 391, 395, 397, 412, 415, 416, 419, 421, 422, 423, 425, 454, 456, 471, 494, 507, 516, 517, 546, 563, 564, 567, 568, 571, 572, 573, 578, 596, 597, 599, 618, 653, 654, 660, 696, 697, 698, 699, 700, 701, 805, 806, 808, 811, 812, 822, 840, 841, 847, 848, 849, 850, 851, 871, 872, 879, 896, 920, 921, 922, 923, 941, 998, 1001, 1006, 1009, 1010, 1012, 1017, 1019, 1023, 1025, 1026, 1027, 1028, 1030, 1032, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1053, 1056, 1057], "sevin": 1048, "sewook": 1050, "sex": [105, 172, 190, 192, 204, 206, 258, 330, 332, 380, 504, 1017], "sex_mal": 190, "seyedsaman": 1054, "sf": [172, 275, 327, 378, 424, 500, 610], "sfm": 172, "sfs_backward": 172, "sfs_forward": 172, "sfu": [415, 449], "sgd": [2, 46, 47, 50, 132, 139, 149, 150, 159, 177, 178, 187, 196, 199, 208, 209, 224, 231, 244, 264, 283, 309, 312, 313, 328, 347, 348, 351, 355, 357, 362, 366, 372, 512, 520, 639, 657, 674, 675, 676, 679, 684, 685, 686, 687, 869, 870, 998, 1013, 1030, 1031, 1035, 1040, 1043, 1044, 1045, 1047, 1051, 1053], "sgdclassifi": [2, 25, 46, 47, 224, 225, 226, 227, 228, 229, 230, 249, 283, 339, 348, 357, 366, 370, 372, 389, 397, 413, 423, 646, 648, 649, 650, 654, 666, 674, 676, 912, 917, 1001, 1005, 1010, 1023, 1024, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058], "sgdoneclasssvm": [2, 231, 244, 328, 916, 1015, 1023, 1053, 1055, 1056, 1057, 1058], "sgdregressor": [2, 25, 49, 228, 370, 372, 395, 654, 657, 675, 679, 684, 687, 870, 913, 918, 1005, 1023, 1042, 1044, 1046, 1047, 1048, 1051, 1053, 1054, 1055, 1056, 1058], "sgi": 357, "sgkf": [419, 826], "sgm": 47, "sgml": [47, 370], "sh": [286, 391, 998], "sh_color": 241, "sh_err": 241, "sh_lle": 241, "sh_point": 241, "sh_tsne": 241, "sha256": [47, 52, 499, 1055, 1059], "shack": [1050, 1051, 1052], "shade": [58, 88, 170, 201, 299, 304, 342, 420], "shader": 411, "shadi": [1055, 1056], "shadow": [127, 131, 132, 240, 337, 352, 359, 423], "shafer": 104, "shagun": 1046, "shah": [1044, 1045, 1046, 1052, 1058], "shaharyar": 1058, "shahebaz": 1048, "shahriar": 1042, "shaikh": [0, 368, 373, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1058], "shail": 1052, "shakerimoff": 1054, "shalev": [674, 675, 1005, 1023], "shalil": 1048, "shall": 179, "shallow": [389, 422, 569, 570, 927], "shamsi": 1048, "shandeng123": 1054, "shane": [1049, 1052, 1055], "shanghai": [697, 701, 1006], "shangwu": [1048, 1049], "shankar": 1050, "shanmuga": 1046, "shanno": 1005, "shannon": [565, 572, 920, 922, 1006, 1025], "shantanu": 791, "shao": [1052, 1053, 1054], "shape": [2, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 76, 81, 82, 83, 86, 87, 88, 89, 90, 93, 95, 96, 101, 104, 108, 109, 113, 123, 124, 126, 138, 143, 144, 145, 146, 147, 150, 151, 152, 153, 156, 157, 165, 168, 170, 175, 176, 178, 179, 180, 181, 185, 186, 187, 191, 192, 204, 206, 217, 219, 224, 226, 229, 230, 231, 232, 233, 236, 238, 239, 240, 244, 247, 248, 249, 250, 251, 253, 254, 260, 262, 264, 265, 266, 273, 275, 277, 278, 281, 282, 284, 285, 296, 301, 302, 306, 309, 311, 313, 318, 319, 325, 327, 330, 331, 332, 337, 338, 340, 343, 346, 349, 350, 351, 354, 355, 357, 358, 365, 370, 376, 377, 378, 383, 385, 397, 412, 413, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 935, 940, 943, 944, 950, 954, 956, 958, 962, 963, 970, 972, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 997, 999, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1030, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1056, 1057], "shape_fit_": [914, 915, 916, 917, 918], "shape_img": 593, "sharad": 1048, "sharan": [1047, 1048], "share": [70, 117, 156, 190, 265, 357, 365, 366, 370, 371, 385, 391, 409, 415, 420, 423, 557, 676, 712, 716, 805, 806, 811, 812, 1003, 1016, 1032, 1040, 1042, 1048, 1050, 1052, 1055], "shared_yax": 143, "sharedmem": 1048, "sharei": [43, 52, 70, 109, 121, 128, 133, 159, 183, 191, 217, 219, 225, 277, 286, 289, 301, 317, 322, 352, 353, 358, 379], "sharex": [43, 46, 54, 70, 107, 121, 128, 159, 183, 191, 219, 277, 289, 301, 338, 379], "sharma": [1044, 1046, 1048, 1049, 1051, 1052, 1054, 1057, 1058], "sharmadharmp": 1054, "sharon": [45, 378], "sharova": 1047, "sharp": [43, 191, 1016, 1019], "sharper": 734, "shashank": [1046, 1052], "shaun": 1041, "shawpan": 1046, "shaymernaturalint": 1054, "she": [383, 902, 903, 1050], "shea": [1048, 1049], "shebanov": [1048, 1049], "sheep": 1033, "sheer": [383, 1033], "sheerman": 1040, "sheet": 1042, "sheetscikit": 403, "shekhar": 1046, "shell": [384, 391, 395], "shellyfung": 1055, "shen": 1053, "sheng": 1050, "shengxiduan": 1046, "shenhanc78": 1048, "sheni": 1052, "shenk": 1048, "shenoi": 1047, "sherlock": [636, 999], "sheth": 1048, "shetti": 1053, "shi": [415, 459, 469, 699], "shibata": 1050, "shiebler": 1046, "shield": 397, "shift": [2, 52, 71, 73, 79, 84, 99, 187, 197, 240, 265, 301, 314, 316, 350, 417, 421, 447, 455, 465, 468, 476, 520, 523, 697, 701, 858, 881, 1019, 1030, 1034, 1035, 1040, 1044, 1048], "shifted_gaussian": 264, "shifted_opposite_lof_scor": 858, "shih": [849, 1011], "shiki": 1051, "shilt": 1043, "shinehid": 1053, "shinitski": 1057, "shinnar": 1053, "shinsuk": 1055, "ship": [57, 158, 186, 362, 371, 381, 401, 423, 1005, 1040, 1049], "shiqiao": [0, 405, 1040, 1041], "shirsat": 1055, "shiva": [1055, 1056], "shivam": [1048, 1049, 1050], "shivamgargsya": [1047, 1051, 1053], "shivan": 1045, "shivram": 1048, "shiyu": 1049, "shleifer": [1046, 1047], "shmelkov": 1045, "shoaib": 1055, "shoemak": 1051, "shogo": [1055, 1056], "shooter23": [1052, 1053], "shop": 1033, "short": [44, 120, 147, 154, 208, 273, 313, 357, 383, 391, 419, 423, 427, 1005, 1006, 1012, 1032, 1045, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "short_nam": 55, "shortcom": 1005, "shortcut": [391, 409, 425], "shorten": [383, 1024, 1053], "shorten_param": 276, "shorter": [43, 180, 263, 395, 415, 420, 457, 464, 571, 705, 1011, 1015, 1051], "shortest": [2, 74, 388, 392, 696, 962, 1006, 1053], "shortest_path": 1053, "shorthand": [93, 397, 416, 474, 569, 570, 873, 874, 1043], "shortlog": 387, "shortname_slic": 55, "shota": 1046, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 64, 67, 72, 88, 135, 137, 140, 143, 147, 150, 153, 172, 185, 190, 195, 197, 198, 202, 217, 235, 244, 249, 250, 251, 254, 269, 275, 278, 281, 282, 284, 289, 293, 296, 317, 318, 323, 337, 346, 353, 358, 366, 370, 371, 372, 378, 381, 382, 383, 385, 387, 388, 390, 391, 392, 396, 397, 401, 406, 409, 411, 413, 414, 415, 417, 419, 420, 422, 423, 424, 425, 426, 427, 429, 432, 438, 444, 447, 449, 450, 451, 452, 454, 456, 457, 459, 461, 464, 465, 466, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 504, 511, 516, 517, 524, 529, 531, 532, 535, 540, 541, 542, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 601, 602, 605, 610, 615, 616, 618, 619, 628, 635, 636, 637, 639, 640, 641, 643, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 695, 697, 698, 699, 700, 701, 702, 703, 704, 709, 717, 735, 736, 750, 774, 779, 782, 786, 787, 788, 789, 790, 793, 796, 797, 800, 807, 809, 810, 815, 816, 817, 818, 825, 826, 827, 828, 830, 834, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 869, 870, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 891, 892, 893, 895, 899, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 938, 942, 944, 948, 956, 961, 965, 969, 974, 977, 979, 982, 983, 984, 985, 986, 987, 988, 989, 997, 998, 999, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1014, 1015, 1016, 1019, 1022, 1023, 1024, 1025, 1029, 1032, 1033, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "shouldn": [261, 266, 383], "show": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 335, 336, 337, 338, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 361, 362, 363, 364, 365, 371, 372, 379, 383, 389, 395, 396, 401, 402, 406, 412, 413, 414, 417, 419, 420, 421, 422, 424, 425, 445, 510, 567, 601, 602, 639, 640, 705, 706, 708, 709, 710, 721, 814, 831, 854, 872, 924, 925, 926, 998, 1001, 1003, 1004, 1006, 1008, 1009, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1023, 1024, 1029, 1042, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1054, 1056, 1057, 1058, 1059], "show_top10": 378, "show_vers": [2, 370, 381, 383, 391, 401, 402, 1048], "show_weight": 925, "show_with_diff": 126, "showcas": [135, 138, 143, 147, 150, 151, 153, 187, 385], "shown": [62, 83, 92, 135, 139, 143, 150, 183, 189, 191, 202, 207, 215, 235, 242, 244, 249, 254, 262, 275, 278, 281, 284, 293, 301, 312, 313, 316, 317, 318, 335, 353, 357, 358, 383, 388, 398, 413, 415, 416, 419, 420, 421, 423, 425, 445, 467, 640, 706, 708, 709, 710, 721, 808, 822, 924, 926, 1004, 1005, 1006, 1009, 1012, 1019, 1023, 1024, 1025, 1044, 1049, 1050, 1051, 1054], "shown_imag": 238, "shrankhla": 1055, "shreekant": 1059, "shreesha": [1056, 1057], "shreya": 1050, "shrink": [63, 115, 123, 151, 191, 202, 212, 215, 221, 237, 264, 316, 353, 420, 567, 568, 684, 686, 859, 869, 870, 914, 915, 916, 917, 918, 1012, 1024], "shrink_threshold": [307, 859, 1012, 1040, 1052], "shrinkag": [2, 69, 110, 112, 115, 130, 152, 187, 307, 428, 476, 477, 480, 481, 482, 483, 484, 486, 487, 488, 547, 551, 557, 569, 570, 808, 1005, 1019, 1030, 1031, 1035, 1040, 1044, 1045, 1047], "shrinkage_": [111, 112, 480, 482], "shrinkage_coeffici": 487, "shroff": 1058, "shrunk": [2, 111, 130, 316, 323, 331, 428, 480, 482, 483, 486, 487, 488, 557, 893, 1003, 1023, 1034, 1035], "shrunk_cov": [428, 486, 488], "shrunk_cov_scor": 130, "shrunk_covari": [2, 417, 1057], "shrunkcovari": [2, 111, 130, 417, 476, 477, 480, 481, 482], "shrunken": [859, 1040], "shruti": 1059, "shu": [1041, 1044, 1048], "shuangchi": [1054, 1055], "shubernetskii": 1042, "shubh": 1051, "shubhal": 1057, "shubham": [1047, 1050, 1058], "shubhanshu": 1052, "shubhraneel": 1054, "shuckle16": 1046, "shuffl": [2, 49, 52, 54, 58, 59, 61, 64, 68, 83, 95, 96, 123, 143, 144, 146, 153, 158, 186, 202, 225, 226, 231, 244, 276, 280, 281, 288, 296, 323, 335, 336, 337, 338, 348, 357, 358, 366, 378, 392, 397, 410, 476, 481, 495, 496, 498, 500, 503, 505, 511, 519, 520, 521, 522, 523, 527, 530, 532, 539, 545, 547, 548, 554, 555, 561, 562, 563, 564, 572, 573, 575, 576, 610, 613, 615, 666, 667, 674, 675, 676, 680, 682, 684, 685, 686, 695, 808, 810, 811, 812, 813, 814, 822, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 842, 869, 870, 893, 912, 913, 914, 917, 955, 956, 977, 979, 1004, 1005, 1010, 1017, 1023, 1024, 1035, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "shuffle_param": 353, "shuffled_arrai": 982, "shufflesplit": [2, 270, 277, 353, 419, 810, 816, 818, 828, 838, 1040, 1041, 1043, 1045, 1046], "shuhei": 1053, "shuhua": 1052, "shutil": [89, 106, 416], "shuttl": 358, "shuzh": 1050, "shwartz": [674, 675, 1005, 1023], "shwed": 1048, "shyam": 1053, "si": 104, "siam": [415, 419, 459, 467, 469, 543, 549], "siang": 1043, "siavash": 1053, "siavrez": 1054, "sibsp": [192, 330], "sid": 1047, "siddharth": [1047, 1051], "siddiqui": 1058, "side": [43, 64, 94, 150, 210, 221, 235, 239, 247, 269, 316, 350, 357, 366, 378, 395, 413, 416, 419, 420, 423, 432, 438, 523, 808, 822, 1005, 1006, 1009, 1011, 1024, 1049], "sidebar": 383, "sidhpura": 1055, "siebert": 1048, "sierra": [539, 545], "sievert": 1050, "siftikha": 1048, "sig": 124, "sigh": 357, "sigkdd": [377, 378, 519, 684, 893, 1019, 1021], "sigma": [53, 81, 82, 89, 113, 130, 150, 273, 275, 412, 417, 420, 422, 622, 657, 1003, 1005, 1007, 1011, 1014], "sigma2": [542, 549], "sigma_": [417, 652, 653, 1053, 1057], "sigma_0": [177, 178, 183, 425, 622], "sigma_0_bound": [183, 622], "sigma_i": [1011, 1019], "sigma_k": [420, 1003], "sigmod": [415, 457, 464, 858, 1015], "sigmoid": [2, 61, 62, 63, 64, 375, 422, 444, 459, 543, 569, 628, 647, 651, 773, 782, 785, 869, 870, 914, 915, 916, 917, 918, 1014, 1024, 1035, 1053, 1057], "sigmoid_kernel": [2, 411, 773, 1007, 1059], "sign": [75, 112, 118, 124, 127, 139, 202, 265, 311, 353, 383, 415, 420, 423, 552, 590, 597, 614, 643, 644, 666, 667, 674, 676, 682, 683, 684, 685, 743, 750, 912, 916, 954, 956, 973, 1005, 1009, 1014, 1019, 1023, 1024, 1040, 1044, 1049, 1053, 1055, 1058], "signal": [2, 11, 53, 114, 123, 124, 125, 132, 148, 150, 174, 179, 180, 187, 196, 197, 203, 204, 205, 206, 211, 212, 216, 218, 266, 328, 415, 417, 423, 424, 425, 428, 482, 511, 529, 534, 539, 542, 545, 549, 553, 554, 633, 652, 653, 654, 655, 660, 661, 671, 672, 680, 692, 693, 694, 793, 829, 838, 886, 1005, 1009, 1026, 1030, 1033, 1034, 1035], "signatur": [251, 357, 358, 378, 495, 496, 565, 566, 572, 573, 602, 618, 619, 667, 681, 683, 719, 750, 814, 831, 834, 836, 839, 885, 968, 998, 1047, 1053, 1057], "signif": [45, 1001], "signifi": [415, 589, 819, 1014], "signific": [2, 43, 90, 143, 150, 167, 168, 170, 187, 221, 235, 267, 275, 295, 296, 320, 357, 366, 377, 378, 395, 415, 418, 419, 422, 512, 540, 542, 557, 635, 666, 667, 674, 675, 676, 684, 685, 686, 827, 837, 912, 914, 915, 916, 917, 918, 998, 1008, 1009, 1012, 1030, 1040, 1042, 1043, 1044, 1048], "significantli": [43, 61, 62, 64, 72, 111, 112, 137, 143, 148, 150, 153, 172, 190, 191, 192, 217, 221, 225, 233, 235, 269, 275, 296, 326, 327, 358, 359, 366, 371, 387, 415, 420, 422, 423, 428, 476, 481, 486, 487, 546, 548, 555, 566, 573, 654, 655, 660, 661, 668, 669, 670, 671, 692, 700, 852, 853, 1001, 1005, 1006, 1012, 1017, 1024, 1040, 1042, 1043, 1047, 1048, 1053, 1054, 1055], "sijaranamu": 1046, "silenc": [251, 1059], "silent": [251, 423, 589, 868, 1019, 1045, 1046, 1048, 1049, 1053, 1054], "silhouett": [2, 58, 71, 73, 84, 92, 93, 187, 358, 454, 520, 800, 801, 1030, 1040, 1044], "silhouette_avg": 95, "silhouette_sampl": [2, 95, 801, 1044, 1046, 1048, 1056], "silhouette_scor": [2, 73, 84, 93, 95, 358, 383, 415, 1040, 1044, 1046, 1048, 1050, 1054], "silicon": 381, "silk": 1054, "sillanp\u00e4\u00e4": 1040, "silva": [413, 696, 1006, 1051, 1053, 1058], "silverman": [421, 857, 1055], "silverthorn": 1040, "silvestrin": 1057, "sim": 420, "sim4n6": 1055, "simd": [397, 1055], "similar": [2, 43, 44, 46, 51, 55, 58, 62, 63, 70, 72, 84, 86, 92, 95, 109, 118, 123, 127, 137, 150, 171, 174, 181, 189, 190, 191, 192, 202, 217, 219, 231, 237, 239, 240, 241, 244, 250, 251, 266, 269, 272, 275, 278, 281, 282, 283, 293, 295, 296, 316, 328, 345, 350, 353, 358, 359, 366, 370, 375, 377, 379, 382, 383, 385, 388, 389, 391, 392, 395, 397, 409, 412, 413, 415, 418, 419, 420, 422, 423, 424, 425, 426, 447, 450, 451, 457, 459, 461, 462, 511, 516, 517, 544, 590, 597, 598, 599, 618, 685, 700, 703, 711, 713, 723, 727, 733, 736, 737, 739, 742, 746, 748, 763, 768, 769, 794, 800, 801, 804, 805, 806, 834, 839, 884, 905, 908, 912, 913, 914, 915, 929, 939, 998, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1015, 1016, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1035, 1040, 1044, 1045, 1046, 1048, 1052, 1053], "similarli": [43, 51, 72, 90, 121, 154, 191, 193, 202, 206, 217, 245, 254, 269, 275, 311, 316, 331, 333, 346, 366, 371, 379, 381, 385, 388, 397, 409, 411, 412, 418, 419, 423, 737, 738, 746, 791, 792, 795, 830, 1004, 1006, 1007, 1009, 1016, 1023, 1024, 1026, 1048, 1054, 1056], "simmon": 1033, "simon": [1005, 1033, 1043, 1044, 1053, 1054, 1055, 1056], "simona": [1051, 1052, 1053], "simonamaggio": [1051, 1052, 1053], "simoncw": 1050, "simonpl": 1045, "simpl": [2, 13, 37, 43, 64, 90, 105, 109, 111, 117, 118, 123, 143, 148, 181, 187, 191, 202, 218, 234, 257, 276, 293, 297, 300, 309, 329, 342, 357, 359, 362, 366, 381, 383, 385, 386, 387, 388, 390, 395, 396, 397, 398, 406, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 429, 436, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 522, 530, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 794, 796, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 964, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1019, 1021, 1023, 1025, 1029, 1030, 1033, 1037, 1040], "simplefilt": 409, "simpleimput": [2, 105, 158, 185, 186, 192, 246, 256, 258, 326, 329, 366, 397, 635, 636, 637, 999, 1019, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "simpleimputersimpleimput": [105, 158, 192, 246, 256, 326, 329], "simplepipelin": 251, "simpler": [151, 193, 235, 325, 346, 370, 382, 415, 420, 1005, 1010, 1045], "simplest": [88, 419, 1006], "simplex": [63, 678, 805, 887], "simpli": [74, 118, 156, 174, 182, 241, 252, 254, 284, 309, 327, 328, 370, 378, 383, 385, 388, 395, 397, 417, 418, 419, 420, 422, 423, 492, 703, 770, 773, 879, 931, 958, 1001, 1009, 1010, 1011, 1012, 1023, 1047, 1048, 1049], "simplic": [43, 53, 67, 202, 350, 357, 359, 397, 421, 1012, 1013, 1014, 1024], "simplif": [379, 382, 388, 1040, 1046], "simplifi": [43, 105, 204, 251, 346, 382, 384, 388, 415, 418, 523, 570, 871, 872, 1009, 1011, 1019], "simplist": [217, 423], "simul": [112, 125, 153, 190, 211, 252, 275, 1033], "simultan": [58, 90, 124, 279, 283, 331, 353, 364, 375, 412, 415, 998, 1009, 1010, 1025, 1033, 1047], "sin": [43, 53, 57, 74, 124, 138, 149, 150, 155, 157, 167, 174, 180, 181, 183, 197, 198, 202, 211, 218, 223, 239, 250, 266, 308, 317, 326, 332, 352, 363, 364, 425, 524, 623, 707, 772], "sin_transform": 43, "sina": 1053, "sinayev": 1042, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 84, 88, 90, 101, 104, 105, 106, 124, 147, 163, 169, 172, 174, 179, 190, 191, 193, 195, 200, 217, 219, 221, 234, 245, 249, 250, 251, 262, 265, 269, 271, 275, 277, 278, 284, 285, 289, 293, 295, 296, 298, 299, 322, 328, 329, 340, 343, 346, 353, 357, 358, 359, 366, 371, 378, 381, 383, 384, 385, 387, 388, 391, 395, 396, 397, 401, 406, 409, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 432, 435, 444, 449, 452, 453, 457, 460, 463, 476, 489, 490, 491, 492, 504, 535, 544, 546, 548, 555, 557, 558, 559, 560, 561, 563, 565, 567, 569, 570, 571, 572, 575, 577, 596, 597, 599, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 640, 641, 646, 659, 663, 666, 667, 674, 676, 681, 682, 683, 684, 687, 700, 715, 717, 743, 750, 786, 790, 797, 807, 808, 811, 812, 822, 830, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 847, 848, 849, 850, 851, 854, 859, 862, 869, 870, 872, 877, 902, 903, 907, 908, 909, 912, 914, 917, 920, 922, 936, 938, 939, 956, 965, 998, 1001, 1002, 1003, 1005, 1006, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1023, 1024, 1025, 1033, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "sinclert": 1048, "sind": 423, "sine": [2, 43, 174, 179, 180, 187, 211, 223, 259, 260, 261, 262, 264, 265, 363, 379, 623, 805, 806, 1008, 1025, 1030], "singer": [293, 674, 675, 743, 1005, 1009, 1023, 1024], "singh": [1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "singl": [2, 30, 31, 70, 74, 83, 87, 88, 90, 93, 96, 97, 106, 125, 136, 137, 138, 146, 147, 157, 172, 174, 180, 185, 187, 191, 193, 195, 202, 217, 219, 221, 255, 257, 265, 269, 271, 284, 293, 313, 329, 331, 346, 357, 358, 359, 362, 364, 366, 370, 371, 377, 378, 383, 388, 390, 391, 392, 395, 396, 397, 406, 413, 414, 416, 418, 419, 420, 422, 423, 424, 440, 444, 447, 448, 452, 453, 454, 456, 461, 471, 473, 474, 501, 502, 504, 514, 517, 542, 561, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 590, 600, 607, 608, 610, 614, 635, 640, 642, 651, 674, 675, 681, 684, 685, 686, 698, 700, 702, 718, 719, 729, 730, 731, 732, 733, 744, 745, 746, 749, 782, 793, 805, 806, 808, 811, 812, 822, 829, 830, 834, 835, 837, 838, 841, 849, 852, 853, 857, 869, 870, 871, 881, 882, 885, 886, 887, 892, 893, 907, 908, 920, 921, 922, 923, 932, 934, 972, 995, 998, 1004, 1005, 1006, 1009, 1010, 1012, 1014, 1016, 1017, 1019, 1023, 1024, 1025, 1028, 1030, 1033, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057], "single_output": [385, 932], "single_prior": 183, "single_source_shortest_path_length": [2, 392], "singleton": [371, 816, 941, 1053, 1056], "singular": [2, 123, 392, 412, 415, 418, 458, 460, 489, 490, 491, 492, 529, 532, 542, 546, 548, 549, 552, 555, 557, 558, 665, 680, 681, 682, 695, 956, 1005, 1006, 1008, 1034, 1035, 1046, 1047, 1058], "singular_": 665, "singular_values_": [542, 549, 552, 1047], "sinha": [1048, 1057, 1058], "sinhrk": [1044, 1045], "sink": [649, 1001], "sinoisoid": 150, "sinusoid": [124, 138, 150, 202, 250, 653, 1002], "sio": 409, "siola": [1055, 1056], "sip\u0151cz": [1050, 1051, 1052, 1056, 1058], "siqi": 1054, "siqueira": 1050, "sir": 380, "sister": 1028, "site": [381, 383, 391, 401, 422, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 1033, 1048], "situat": [62, 79, 92, 106, 189, 190, 223, 244, 278, 383, 391, 409, 417, 419, 420, 422, 475, 536, 542, 590, 885, 888, 900, 910, 1003, 1005, 1011, 1012, 1022, 1025, 1048], "situp": 380, "sivamani": 1050, "sivaprasad": [1043, 1044], "six": [172, 218, 238, 320, 380, 1049], "sixteenth": 1021, "sixth": 378, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 81, 82, 87, 89, 90, 92, 93, 95, 96, 97, 101, 102, 107, 111, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 126, 127, 130, 132, 140, 149, 150, 153, 154, 155, 168, 174, 176, 177, 180, 181, 187, 189, 191, 192, 197, 198, 199, 200, 203, 207, 212, 215, 218, 219, 220, 223, 230, 231, 237, 242, 244, 247, 248, 249, 250, 251, 253, 254, 262, 268, 271, 273, 275, 277, 278, 280, 281, 282, 293, 302, 303, 304, 311, 314, 317, 318, 319, 320, 323, 326, 329, 331, 332, 336, 340, 342, 344, 345, 346, 353, 355, 357, 358, 359, 361, 370, 371, 372, 378, 379, 383, 388, 392, 395, 396, 397, 401, 406, 412, 413, 415, 417, 419, 420, 423, 425, 426, 428, 451, 452, 453, 455, 456, 457, 464, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 501, 502, 503, 523, 535, 542, 544, 546, 548, 555, 565, 566, 567, 568, 569, 570, 572, 573, 591, 595, 596, 602, 640, 641, 651, 665, 674, 675, 687, 691, 700, 703, 713, 727, 746, 748, 751, 789, 801, 810, 813, 814, 818, 825, 828, 829, 830, 833, 836, 838, 847, 848, 849, 851, 854, 855, 856, 857, 858, 860, 862, 863, 864, 869, 870, 887, 889, 901, 906, 910, 914, 915, 916, 917, 918, 920, 921, 922, 923, 926, 955, 959, 960, 971, 972, 974, 977, 983, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1019, 1021, 1023, 1024, 1025, 1032, 1033, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1055, 1056, 1058, 1059], "size_cluster_i": 95, "size_mb": 357, "sizeabl": [810, 825, 828], "sk": 558, "skaft": 1054, "skeleton": 1043, "sketch": [2, 23, 195, 372, 375, 392, 647, 648, 649, 973, 1035, 1052], "skew": [2, 48, 150, 220, 248, 254, 316, 331, 375, 413, 419, 647, 648, 649, 650, 888, 900, 1005, 1019, 1035, 1043, 1047, 1056], "skewed": [650, 1047], "skewedchi2sampl": [2, 646, 647, 648, 649, 1001, 1047, 1054, 1055], "skf": [262, 419, 827], "skfold": 338, "skforecast": 1028, "skill": 1009, "skimag": [81, 82, 377], "skip": [371, 383, 392, 411, 423, 475, 654, 655, 660, 668, 669, 670, 679, 689, 910, 931, 1044, 1047, 1050, 1052, 1054, 1056], "skip_check_arrai": 997, "skip_complet": 635, "skip_comput": 1050, "skip_parameter_valid": [475, 910, 1056], "skipper": [1043, 1045, 1046], "skiptestwarn": 931, "skl2onnx": 409, "sklear": 384, "sklearn": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 370, 371, 372, 376, 377, 378, 379, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 395, 396, 397, 400, 401, 402, 406, 409, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "sklearn2pmml": 1028, "sklearn_api": 0, "sklearn_assume_finit": 370, "sklearn_cache_": 325, "sklearn_enable_debug_cython_direct": 384, "sklearn_fail_no_openmp": 381, "sklearn_graph_cache_": 298, "sklearn_is_fit": [135, 1030], "sklearn_run_float32_test": 383, "sklearn_site_joblib": 1048, "sklearn_warning_as_error": 371, "sklearnex": 401, "skop": [1028, 1035], "skorch": 1028, "sktime": [52, 1028], "sl": 217, "slack": 1023, "slai": 357, "slama": [1050, 1052], "slep": [383, 397], "slep000": 398, "slep009": [1051, 1053, 1054], "slep010": [385, 1051], "slep011": 1029, "slep018": [258, 385, 1055], "slep020": 398, "slice": [2, 43, 52, 55, 146, 153, 226, 239, 249, 304, 307, 328, 329, 342, 378, 384, 392, 416, 471, 474, 501, 502, 516, 554, 647, 782, 786, 789, 929, 934, 959, 960, 979, 1052, 1054, 1058], "slice_": [501, 502, 1055], "sliceabl": 963, "slide": [276, 652, 1005, 1027], "slight": [147, 222, 327, 409, 422, 456, 1050], "slightli": [43, 62, 64, 99, 115, 140, 143, 147, 150, 154, 158, 172, 174, 175, 176, 192, 197, 217, 235, 240, 242, 251, 254, 283, 289, 296, 325, 343, 359, 382, 383, 413, 415, 422, 423, 425, 427, 453, 596, 597, 599, 646, 666, 811, 812, 912, 914, 917, 955, 956, 998, 1005, 1019, 1023, 1024, 1025, 1049, 1053, 1054, 1056, 1058, 1059], "slishak": 1054, "sloan": 0, "slogdet": 954, "slope": [191, 215, 219, 234, 415, 498, 731, 756, 1007, 1009], "sloppili": 423, "sloth": [50, 309, 378, 506], "slow": [298, 316, 357, 370, 377, 381, 383, 420, 423, 454, 707, 886, 887, 891, 914, 917, 956, 1006, 1012, 1029, 1047], "slower": [106, 126, 143, 147, 185, 250, 284, 359, 397, 422, 423, 424, 453, 458, 460, 546, 548, 555, 563, 564, 565, 566, 571, 572, 573, 574, 596, 597, 599, 639, 640, 641, 651, 667, 680, 682, 695, 700, 712, 840, 844, 845, 1002, 1006, 1007, 1008, 1010, 1012, 1025, 1044, 1051], "slowest": [147, 955, 956], "slowli": [395, 397, 552, 956], "slug": 104, "smacof": [2, 698, 1055], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 83, 84, 88, 90, 104, 111, 115, 118, 128, 138, 140, 147, 149, 150, 179, 181, 190, 191, 198, 203, 207, 208, 218, 221, 223, 232, 234, 235, 262, 269, 275, 282, 287, 289, 298, 309, 312, 314, 316, 318, 320, 327, 335, 340, 346, 351, 353, 357, 358, 372, 376, 378, 380, 383, 386, 392, 395, 397, 409, 412, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 428, 448, 450, 452, 453, 454, 456, 465, 466, 470, 482, 504, 506, 546, 548, 549, 555, 563, 564, 565, 569, 570, 571, 572, 590, 597, 598, 610, 615, 616, 658, 662, 663, 664, 666, 667, 687, 690, 691, 754, 811, 812, 826, 837, 840, 869, 870, 877, 905, 914, 917, 956, 998, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1021, 1022, 1025, 1028, 1029, 1033, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "smaller": [2, 37, 47, 61, 75, 81, 90, 115, 137, 153, 172, 179, 180, 185, 205, 206, 208, 221, 248, 293, 302, 303, 311, 316, 333, 346, 353, 358, 383, 412, 415, 417, 419, 420, 422, 424, 446, 447, 453, 457, 461, 463, 522, 542, 543, 565, 566, 567, 568, 569, 570, 572, 573, 601, 618, 627, 641, 654, 655, 657, 658, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 680, 682, 690, 691, 700, 717, 805, 811, 812, 858, 861, 885, 886, 904, 905, 912, 920, 921, 922, 923, 956, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1015, 1019, 1021, 1023, 1024, 1025, 1029, 1048, 1053, 1057], "smallest": [113, 114, 217, 296, 333, 361, 378, 415, 417, 424, 535, 549, 638, 662, 663, 664, 690, 691, 698, 702, 703, 808, 811, 812, 822, 827, 882, 935, 1025, 1053], "smallest_ab": 333, "smallest_coef": [115, 535], "smari": [1049, 1050, 1051], "smart": [251, 450, 466, 467, 598], "smartphon": 1033, "smedbergm": 1046, "smedemark": 1050, "smile": [109, 378, 1054], "sminchisescu": [650, 1001], "smirnov": 1052, "smith": [1046, 1047, 1048, 1049, 1050, 1052], "sml": [868, 1014], "smo": [912, 913], "smola": [420, 423, 543, 878, 1019, 1024], "smolskii": 1055, "smooth": [43, 81, 82, 89, 172, 179, 210, 218, 233, 322, 346, 380, 398, 415, 421, 422, 425, 455, 456, 545, 546, 547, 554, 565, 566, 567, 568, 572, 573, 574, 598, 599, 627, 630, 684, 847, 848, 849, 851, 889, 893, 901, 920, 921, 922, 923, 1005, 1011, 1019, 1023, 1024, 1025], "smooth_idf": [423, 598, 599], "smoothened_coin": [81, 82], "smoother": [43, 44, 150, 191, 313, 421], "smoothli": 377, "smt": 1056, "smtp": [378, 500], "smujjiga": 1050, "sn": [72, 138, 153, 189, 190, 197, 202, 265, 275], "snake": [329, 331, 590, 893, 1019], "snapshot": [409, 567, 568, 1029], "sne": [51, 187, 236, 237, 238, 239, 241, 296, 522, 533, 700, 1030, 1034, 1035], "snippet": [135, 366, 383, 388, 391, 395, 411, 422, 423, 424, 999, 1019, 1032, 1053], "snowhit": 1051, "snr": 89, "snuderl": 1044, "sny": 51, "snyder": [700, 1006], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 83, 90, 91, 96, 100, 114, 143, 146, 147, 148, 149, 153, 157, 174, 179, 190, 192, 195, 198, 217, 218, 244, 251, 254, 269, 275, 293, 296, 302, 303, 306, 312, 313, 317, 322, 323, 326, 338, 346, 357, 359, 365, 366, 370, 371, 372, 377, 378, 381, 382, 383, 385, 387, 388, 389, 391, 392, 397, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 428, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 504, 516, 517, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 703, 713, 716, 724, 734, 764, 786, 796, 805, 806, 807, 808, 811, 812, 814, 815, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 902, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 956, 974, 983, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1019, 1021, 1022, 1023, 1024, 1028, 1029, 1033, 1040, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1057], "soar": 1055, "sobkevich": 1052, "sobolev": 1044, "soc": [57, 378], "socastro": [1050, 1056, 1059], "socg2006": 454, "social": [190, 398, 415, 1033], "societi": [172, 380, 415, 417, 476, 481, 549, 635, 888, 900, 1005, 1023], "sodhani": 1046, "soft": [2, 132, 159, 160, 383, 397, 577, 578, 908, 916, 1023, 1033, 1045], "softmax": [422, 569, 666, 667, 1005, 1012, 1013], "softw": 1005, "softwar": [0, 172, 370, 380, 383, 391, 395, 397, 409, 423, 635, 643, 666, 999, 1033], "soil_typ": 254, "sokalmichen": [457, 464, 707, 786, 787, 788, 1012], "sokalmichenerdist": 707, "sokalsneath": [457, 464, 707, 786, 787, 788, 1012], "sokalsneathdist": 707, "sok\u00f3\u0142": [1057, 1058], "sole": [102, 383, 395, 415], "soledad": 1052, "soler": [0, 405], "solid": [50, 67, 69, 149, 177, 229, 230, 244, 254, 309, 318, 1033], "solntz": 357, "solosil": 1053, "solut": [81, 197, 202, 206, 208, 222, 231, 244, 250, 328, 346, 381, 397, 409, 412, 414, 415, 417, 419, 420, 423, 424, 456, 458, 460, 539, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 618, 654, 656, 658, 660, 662, 663, 664, 666, 668, 670, 672, 673, 674, 675, 676, 677, 680, 682, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 805, 806, 822, 861, 869, 870, 1002, 1003, 1005, 1006, 1008, 1013, 1015, 1023, 1024, 1027, 1033, 1040, 1043, 1053, 1054, 1055], "solutu": 1048, "solutusimmensu": 1048, "solv": [2, 44, 45, 101, 174, 206, 249, 275, 295, 382, 383, 384, 385, 388, 395, 403, 415, 417, 419, 420, 425, 454, 460, 469, 485, 539, 545, 546, 547, 551, 553, 554, 555, 556, 643, 645, 654, 660, 662, 663, 672, 673, 678, 680, 682, 685, 693, 694, 695, 727, 842, 912, 913, 916, 956, 1000, 1003, 1005, 1006, 1009, 1010, 1023, 1024, 1025, 1027, 1028, 1033, 1046, 1050, 1053], "solvabl": 415, "solver": [54, 66, 69, 70, 81, 101, 187, 196, 206, 208, 209, 210, 217, 225, 232, 233, 235, 311, 312, 313, 314, 323, 332, 333, 357, 389, 395, 397, 401, 411, 415, 427, 459, 469, 478, 479, 485, 510, 541, 543, 548, 549, 552, 555, 557, 654, 655, 656, 660, 661, 666, 667, 668, 669, 670, 671, 674, 676, 677, 678, 680, 682, 684, 688, 689, 692, 695, 696, 697, 699, 701, 703, 796, 822, 838, 843, 846, 869, 870, 914, 915, 916, 917, 918, 1003, 1006, 1009, 1010, 1013, 1023, 1024, 1030, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "solver_": [680, 682], "solver_opt": 678, "somani": 1052, "some": [0, 42, 43, 44, 47, 48, 52, 57, 61, 62, 64, 72, 79, 85, 88, 90, 91, 93, 97, 102, 105, 108, 111, 113, 114, 118, 123, 138, 139, 143, 147, 150, 151, 153, 154, 155, 158, 159, 168, 174, 176, 179, 180, 181, 182, 183, 185, 186, 187, 190, 191, 192, 193, 195, 197, 199, 201, 202, 204, 205, 206, 207, 211, 212, 217, 218, 221, 225, 226, 231, 234, 235, 237, 239, 244, 248, 251, 254, 261, 262, 263, 268, 269, 270, 275, 276, 277, 278, 281, 283, 289, 293, 295, 299, 302, 307, 312, 313, 316, 321, 326, 327, 328, 329, 330, 331, 332, 333, 342, 343, 345, 346, 353, 355, 357, 358, 359, 365, 366, 370, 371, 372, 376, 377, 378, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 401, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 438, 444, 450, 451, 454, 456, 458, 460, 466, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 504, 507, 516, 517, 523, 531, 532, 541, 542, 544, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 589, 590, 596, 598, 599, 614, 617, 618, 619, 640, 641, 643, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 697, 698, 700, 701, 705, 706, 708, 709, 710, 715, 716, 723, 728, 734, 735, 746, 747, 748, 754, 762, 764, 765, 771, 790, 792, 795, 796, 797, 802, 805, 807, 809, 810, 815, 817, 826, 827, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 938, 939, 965, 998, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1033, 1037, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "some_funct": [383, 946], "some_integ": 419, "some_iter": 383, "some_param": 383, "somebodi": 398, "someestim": 382, "somehow": 191, "someon": [383, 387, 397, 1040], "someth": [190, 238, 293, 357, 383, 386, 387, 391, 423, 928, 930, 1009, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "sometim": [106, 158, 189, 269, 275, 313, 358, 366, 371, 372, 383, 385, 389, 396, 397, 415, 417, 420, 422, 423, 456, 542, 543, 546, 548, 549, 877, 878, 879, 927, 1004, 1005, 1006, 1009, 1014, 1019, 1020, 1024, 1037, 1041, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1056], "somewhat": [353, 366, 372, 383, 420, 422, 914, 917, 1005, 1024, 1025], "somewher": [389, 1009], "sommer": 1058, "somya": 1048, "son": [380, 999], "song": 1006, "soni": [51, 1050, 1052], "sonni": 1045, "sonniv": [1055, 1056], "sonoiya": 1050, "sonoma": 322, "soon": [114, 397, 1059], "sooner": 1057, "sophist": [999, 1011], "sorbaro": 1045, "sorensen": 420, "soriano": 1049, "sornarajah": 1045, "sorri": 1048, "sorro": 1049, "sorski": [1054, 1055], "sort": [2, 43, 47, 49, 51, 58, 61, 95, 104, 107, 135, 140, 147, 150, 157, 172, 179, 197, 202, 217, 218, 235, 253, 275, 276, 279, 290, 308, 352, 357, 363, 364, 383, 387, 391, 392, 397, 419, 422, 423, 425, 542, 549, 563, 574, 589, 602, 618, 625, 705, 720, 726, 737, 738, 746, 762, 791, 792, 795, 797, 808, 835, 847, 848, 849, 850, 851, 852, 853, 860, 862, 863, 864, 867, 877, 883, 885, 886, 889, 891, 893, 901, 914, 917, 956, 962, 1005, 1012, 1015, 1019, 1033, 1040, 1044, 1050, 1051, 1052, 1054, 1055, 1058], "sort_graph_by_row_valu": [2, 392, 1055], "sort_index": 293, "sort_result": [852, 853, 860, 862, 863, 864, 1052], "sort_valu": [105, 192, 193, 258, 265, 275, 286, 322, 323], "sorted_idx": [151, 325], "sorted_importances_idx": 192, "sortofamudkip": [1055, 1056], "sought": 789, "soumirai": 1050, "sound": [172, 366], "sounder": 1046, "sourav": [1047, 1050], "sourc": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 377, 380, 382, 383, 384, 386, 387, 389, 391, 392, 395, 396, 401, 409, 412, 416, 420, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 994, 995, 996, 997, 1006, 1019, 1025, 1028, 1030, 1033, 1050, 1054, 1058, 1059], "south": [50, 153, 190, 309, 378, 421], "south_y": 190, "sp": [43, 190, 332, 999], "sp_version": 678, "space": [2, 37, 43, 47, 49, 57, 67, 81, 83, 88, 92, 93, 95, 96, 98, 100, 104, 105, 108, 118, 123, 125, 131, 133, 142, 146, 150, 156, 169, 172, 174, 180, 195, 202, 218, 237, 238, 239, 241, 248, 249, 250, 254, 255, 261, 266, 283, 286, 287, 296, 305, 306, 318, 327, 350, 357, 358, 359, 365, 366, 370, 375, 378, 379, 380, 383, 390, 395, 396, 397, 412, 415, 418, 420, 421, 422, 423, 425, 450, 454, 455, 456, 459, 469, 471, 472, 473, 474, 489, 490, 491, 495, 506, 540, 542, 543, 546, 547, 548, 549, 551, 552, 557, 581, 590, 596, 597, 599, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 640, 641, 646, 648, 649, 650, 651, 696, 697, 698, 700, 701, 702, 704, 707, 808, 811, 812, 814, 822, 831, 842, 852, 853, 860, 861, 862, 863, 872, 877, 878, 884, 889, 904, 905, 906, 925, 960, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1029, 1034, 1035, 1040, 1041, 1043, 1048, 1049, 1050, 1054, 1055, 1056], "spacek": 1045, "spain": 322, "spam": [589, 717, 749, 847, 1009, 1011, 1033], "span": [52, 90, 111, 150, 249, 269, 272, 378, 415, 423, 557, 644, 808, 811, 1009], "spanish": 1028, "spannbauer": 1052, "sparciti": 358, "spare": [377, 682, 683], "spark": [378, 1029], "sparrai": 1057, "spars": [2, 25, 45, 46, 51, 53, 55, 57, 66, 74, 75, 89, 90, 92, 104, 110, 111, 112, 122, 124, 142, 156, 187, 196, 197, 204, 205, 206, 209, 211, 212, 216, 233, 248, 250, 276, 282, 296, 314, 326, 330, 333, 339, 356, 359, 365, 370, 375, 377, 378, 379, 383, 385, 386, 387, 388, 395, 396, 397, 409, 415, 416, 422, 423, 425, 426, 430, 437, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 464, 466, 467, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 494, 495, 496, 504, 505, 511, 516, 531, 532, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 593, 594, 596, 597, 598, 599, 601, 602, 611, 612, 613, 614, 615, 616, 617, 637, 638, 639, 641, 646, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 720, 721, 722, 737, 738, 739, 742, 746, 747, 748, 762, 763, 768, 769, 771, 772, 774, 775, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 795, 800, 801, 804, 807, 808, 811, 812, 822, 829, 830, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 854, 855, 856, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 875, 876, 877, 879, 881, 882, 883, 884, 885, 887, 889, 890, 891, 892, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 929, 934, 936, 937, 938, 939, 944, 953, 956, 957, 960, 962, 963, 971, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 994, 997, 999, 1002, 1005, 1006, 1007, 1009, 1010, 1012, 1022, 1024, 1025, 1029, 1030, 1031, 1034, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "sparse_cg": [357, 680, 682, 695, 1005, 1041, 1047, 1049, 1050, 1054, 1056], "sparse_coef_": [654, 660, 668, 670, 1040], "sparse_encod": [2, 550, 658, 659, 660, 661, 662, 663, 664, 671, 672, 673, 690, 691, 692, 693, 694, 1040, 1047, 1048, 1050, 1054], "sparse_encode_parallel": 1040, "sparse_format": [535, 1057], "sparse_func": [1046, 1052], "sparse_input_": 879, "sparse_lasso": 203, "sparse_output": [43, 147, 258, 322, 329, 332, 574, 879, 883, 885, 891, 896, 1019, 1055, 1056], "sparse_output_": [471, 559], "sparse_symmetric_arrai": 994, "sparse_threshold": [191, 471, 474, 1048], "sparsearrai": 1051, "sparsecod": [2, 132, 420, 539, 545, 548, 556, 1047, 1048, 1050, 1052, 1054], "sparsecodingmixin": 1040, "sparsefunc": [2, 392, 983, 984, 985, 986, 987, 988, 989, 1053], "sparsefuncs_fast": [2, 392, 990, 991], "sparsepca": [2, 123, 539, 541, 542, 543, 545, 547, 548, 549, 550, 553, 554, 1040, 1047, 1048, 1050, 1051, 1053, 1054, 1055, 1058], "sparser": [90, 197, 208, 420, 478, 485, 547, 551, 1005, 1012, 1023], "sparserandomproject": [2, 238, 248, 904, 1021, 1041, 1046, 1054, 1056, 1057], "sparsetool": 1047, "sparsifi": [46, 202, 370, 666, 667, 674, 675, 676, 684, 685, 686, 912, 992, 1042], "sparsiti": [2, 53, 66, 80, 115, 129, 187, 196, 202, 205, 210, 228, 232, 233, 250, 353, 358, 370, 397, 417, 420, 422, 424, 509, 510, 535, 539, 545, 546, 547, 548, 551, 553, 554, 555, 654, 660, 665, 666, 684, 686, 729, 731, 732, 881, 887, 892, 897, 1002, 1005, 1012, 1019, 1030, 1042], "sparsity_en_lr": 208, "sparsity_l1_lr": 208, "sparsity_l2_lr": 208, "sparsity_ratio": 370, "spatial": [82, 84, 90, 193, 202, 234, 313, 378, 397, 415, 426, 451, 453, 457, 459, 464, 687, 700, 768, 771, 786, 787, 788, 789, 800, 801, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 865, 866, 1005, 1012, 1019, 1042, 1046, 1053, 1056], "spawn": [370, 395, 808, 822, 833, 834, 835, 1051], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365], "speak": [358, 370, 383, 1023], "spearman": [193, 643, 644, 1000], "spearmanr": 193, "spec": [1055, 1056], "speci": [2, 42, 120, 187, 254, 297, 357, 376, 421, 506, 714, 797, 857, 916, 927, 1009, 1015, 1030, 1035, 1040], "special": [149, 190, 207, 235, 293, 306, 322, 346, 377, 379, 385, 389, 395, 397, 415, 418, 420, 471, 474, 561, 563, 567, 833, 924, 998, 1003, 1005, 1007, 1008, 1009, 1010, 1012, 1025, 1047, 1050, 1052, 1054, 1059], "special_charact": [924, 1025], "species_nam": [50, 309], "specif": [2, 43, 50, 51, 58, 64, 70, 79, 90, 97, 100, 104, 106, 143, 153, 158, 179, 182, 187, 190, 191, 195, 221, 235, 269, 270, 275, 293, 316, 325, 326, 330, 333, 350, 357, 358, 359, 366, 370, 371, 378, 383, 386, 388, 389, 391, 395, 397, 401, 409, 411, 415, 416, 419, 420, 422, 423, 424, 425, 439, 504, 511, 542, 559, 565, 572, 575, 576, 577, 578, 582, 596, 599, 601, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 648, 651, 654, 655, 660, 666, 680, 695, 705, 707, 720, 721, 754, 808, 809, 810, 815, 816, 817, 822, 835, 848, 929, 948, 950, 951, 971, 984, 985, 986, 1003, 1005, 1006, 1008, 1009, 1011, 1012, 1014, 1016, 1017, 1019, 1023, 1025, 1026, 1027, 1032, 1040, 1044, 1048, 1049, 1050, 1051, 1054, 1055, 1057], "specifi": [2, 43, 58, 64, 90, 123, 147, 148, 153, 175, 178, 180, 181, 182, 206, 218, 225, 260, 269, 283, 370, 371, 377, 383, 385, 391, 392, 396, 397, 406, 409, 413, 415, 416, 419, 420, 422, 424, 425, 427, 429, 444, 448, 452, 457, 459, 470, 471, 474, 476, 477, 479, 480, 481, 482, 483, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 511, 523, 535, 539, 541, 545, 546, 548, 549, 554, 555, 560, 565, 567, 568, 569, 570, 572, 575, 576, 591, 592, 601, 602, 605, 610, 618, 619, 628, 639, 640, 641, 646, 651, 654, 655, 656, 659, 660, 661, 663, 664, 666, 667, 668, 669, 670, 671, 673, 676, 677, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 695, 699, 706, 708, 710, 717, 719, 737, 738, 746, 750, 762, 779, 787, 788, 791, 792, 795, 808, 811, 812, 814, 815, 817, 821, 822, 825, 830, 831, 832, 833, 834, 835, 836, 837, 839, 843, 846, 847, 848, 850, 851, 852, 853, 857, 862, 885, 886, 887, 890, 891, 893, 908, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 951, 958, 992, 999, 1005, 1006, 1008, 1009, 1012, 1016, 1017, 1019, 1022, 1023, 1024, 1040, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "spector": 419, "spectral": [2, 53, 56, 71, 79, 81, 84, 90, 104, 187, 238, 239, 337, 339, 357, 358, 359, 383, 423, 456, 458, 459, 460, 469, 476, 477, 478, 479, 480, 481, 482, 483, 495, 519, 521, 599, 696, 697, 698, 699, 700, 703, 727, 803, 1012, 1022, 1030, 1034, 1035, 1040, 1041], "spectral_clust": [2, 81, 101, 1048, 1050, 1052, 1053, 1054, 1055, 1057], "spectral_embed": [2, 397, 1006, 1041, 1044, 1046, 1048, 1050, 1053, 1054, 1055, 1057], "spectralbiclust": [2, 412, 460, 1042, 1046, 1047, 1051], "spectralclust": [2, 79, 329, 415, 447, 1012, 1040, 1041, 1050, 1052, 1053, 1054, 1055, 1056, 1057], "spectralcoclust": [2, 57, 59, 412, 458, 1042, 1047, 1051], "spectralembed": [2, 87, 237, 238, 239, 696, 697, 698, 700, 1006, 1041, 1046, 1050, 1054, 1055, 1057], "spectrum": [107, 532, 552, 703, 956, 1033, 1048], "speech": [423, 1009], "speed": [81, 82, 92, 104, 126, 135, 143, 186, 191, 203, 206, 210, 254, 296, 327, 336, 357, 359, 372, 383, 386, 392, 395, 397, 411, 413, 415, 420, 422, 423, 426, 450, 451, 454, 455, 456, 457, 459, 464, 466, 467, 468, 469, 539, 540, 618, 635, 640, 641, 642, 647, 654, 655, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 672, 689, 692, 700, 805, 806, 814, 836, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 887, 956, 998, 1001, 1006, 1008, 1010, 1023, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "speedi": 370, "speedup": [332, 370, 420, 422, 658, 662, 665, 1040, 1041, 1042, 1043, 1055, 1059], "speer": 1042, "spell": 423, "spend": 423, "spent": [296, 322, 384, 389, 836, 1055], "sperret6": 1058, "sphere": [137, 187, 236, 237, 240, 241, 242, 296, 358, 421, 527, 597, 696, 697, 698, 699, 700, 772, 941, 1003, 1007, 1012, 1030], "sphere_data": 239, "spheric": [70, 92, 117, 154, 239, 262, 264, 265, 309, 379, 772, 805, 806, 1005, 1008, 1012], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 371, 387, 397, 401, 408, 1040, 1047], "sphinxcontrib": [383, 401, 408], "sphinxext": [383, 401, 408], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1040, "spidlen": [700, 1006], "spie": [172, 380], "spielman": 1050, "spike": 191, "spikebh": 1054, "spikhalskii": 1045, "spiki": 43, "spin": 391, "spine": [46, 54, 70, 228, 316], "spirit": 420, "spite": 1011, "spline": [2, 187, 196, 197, 290, 301, 524, 525, 526, 680, 873, 887, 891, 1028, 1030, 1053], "spline_": 43, "splines_df": 43, "splinetransform": [2, 43, 218, 254, 328, 887, 1019, 1053, 1055, 1056], "split": [2, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 104, 128, 137, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 163, 168, 189, 190, 193, 202, 212, 213, 217, 220, 225, 235, 245, 254, 261, 262, 268, 269, 270, 273, 275, 280, 282, 285, 289, 293, 299, 305, 311, 313, 317, 318, 323, 329, 331, 338, 346, 357, 359, 365, 378, 390, 396, 397, 401, 406, 413, 414, 415, 420, 422, 423, 424, 444, 449, 450, 479, 480, 486, 487, 505, 539, 545, 547, 550, 554, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 596, 597, 599, 602, 610, 655, 659, 661, 663, 669, 671, 673, 681, 683, 703, 712, 713, 725, 739, 745, 765, 803, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 846, 852, 853, 869, 870, 893, 897, 898, 900, 901, 902, 903, 920, 921, 922, 923, 979, 998, 1001, 1005, 1006, 1012, 1015, 1016, 1017, 1019, 1023, 1025, 1029, 1035, 1040, 1043, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "split0_test_precis": [808, 822], "split0_test_scor": [808, 822, 1046], "split0_train_scor": [808, 822, 1046], "split1_test_scor": [808, 822], "split1_train_scor": [808, 822], "split2_test_scor": 808, "split_cod": 420, "split_sign": [539, 545, 550], "splitter": [43, 251, 331, 332, 397, 406, 419, 444, 479, 572, 573, 575, 576, 602, 610, 655, 659, 661, 663, 667, 669, 671, 673, 681, 683, 808, 810, 811, 812, 813, 814, 822, 823, 824, 827, 828, 831, 832, 833, 834, 835, 836, 837, 839, 843, 846, 920, 921, 922, 923, 1025, 1029, 1046, 1047, 1048, 1049, 1056, 1057, 1058, 1059], "splot": [261, 266], "splt": 218, "sply88": 1054, "spmatrix": 1057, "spolski": 423, "sport": [57, 378], "spot": [88, 246, 415], "spottabl": 389, "spread": [43, 75, 239, 276, 316, 335, 336, 337, 340, 353, 370, 383, 415, 459, 469, 523, 889, 901, 909, 1009], "spring": [43, 52, 191], "springboard": 1028, "springer": [140, 141, 152, 179, 274, 413, 415, 419, 420, 422, 528, 543, 567, 568, 698, 702, 704, 713, 728, 734, 748, 749, 764, 805, 920, 921, 1006, 1009, 1010, 1016, 1025], "sprint": [382, 383, 1040], "spuriou": [346, 391, 1019, 1053, 1054, 1055], "spy": 211, "sq": 777, "sqeuclidean": [73, 457, 464, 786, 787, 788], "sqft": 254, "sql": 377, "sqr": 75, "sqrt": [51, 113, 114, 115, 126, 132, 141, 163, 193, 197, 199, 240, 242, 256, 260, 261, 262, 265, 266, 275, 351, 353, 415, 422, 423, 425, 470, 476, 477, 478, 479, 480, 481, 482, 483, 546, 548, 555, 565, 566, 567, 568, 572, 573, 627, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 707, 739, 771, 772, 777, 892, 905, 920, 921, 922, 923, 1001, 1005, 1006, 1009, 1011, 1021, 1054], "squar": [2, 43, 44, 52, 96, 105, 112, 113, 114, 116, 117, 124, 125, 133, 140, 151, 153, 154, 172, 174, 179, 187, 189, 190, 196, 197, 199, 200, 202, 206, 207, 213, 217, 219, 222, 227, 234, 235, 247, 248, 250, 263, 290, 320, 327, 328, 330, 343, 357, 375, 380, 383, 389, 392, 397, 415, 417, 418, 420, 421, 422, 426, 427, 438, 447, 449, 450, 451, 453, 454, 456, 457, 461, 464, 466, 467, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 509, 539, 545, 547, 549, 551, 553, 554, 555, 557, 560, 562, 564, 566, 567, 568, 570, 573, 576, 578, 598, 599, 600, 603, 604, 606, 607, 608, 612, 613, 614, 617, 619, 623, 630, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 690, 691, 693, 694, 695, 696, 698, 700, 702, 704, 717, 729, 730, 731, 732, 758, 759, 766, 767, 771, 777, 778, 793, 798, 799, 838, 845, 846, 854, 855, 858, 859, 860, 862, 863, 870, 873, 892, 912, 913, 915, 917, 918, 919, 921, 923, 954, 981, 994, 1000, 1002, 1003, 1012, 1013, 1017, 1023, 1025, 1030, 1031, 1035, 1040, 1043, 1045, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1059], "square_dist": 1052, "squared_epsilon_insensit": [675, 684, 686, 913, 1005, 1046], "squared_error": [46, 52, 132, 150, 151, 328, 422, 566, 567, 568, 570, 573, 679, 684, 686, 701, 921, 923, 1023, 1025, 1053, 1056, 1057], "squared_hing": [224, 353, 674, 684, 912, 919, 1005, 1024], "squared_loss": [395, 1053], "squareform": 193, "squash": [254, 387, 425, 539, 545, 550, 556], "squeez": [109, 180, 181, 254, 296, 316, 1059], "sr": 1033, "sr_color": 241, "sr_err": 241, "sr_lle": 241, "sr_point": 241, "sr_tsne": 241, "srajan": 1048, "sre": 1055, "srebro": 1023, "srep30750": 415, "sri": [679, 1005, 1047, 1048], "sridharan": 1045, "sriharsha": [1048, 1049], "srikantan": 1005, "srimukh": 1052, "srinath": [1054, 1055], "srinivasan": [1048, 1051], "sripada": 1052, "srivastava": [1043, 1055, 1058], "srivatsan": [1046, 1047, 1050], "srvanrel": 1046, "sr\u0161e\u0148": 1058, "ss": 419, "sse": 450, "sseg": 1045, "ssrn": [217, 235], "sss": 828, "ssvm": 395, "st": [82, 102, 275, 330, 1043, 1046, 1048], "st30": 340, "st50": 340, "st_pipelin": 339, "sta4273": 652, "stabil": [72, 141, 148, 190, 238, 280, 316, 353, 358, 397, 412, 453, 658, 662, 678, 850, 869, 870, 888, 900, 955, 999, 1005, 1008, 1019, 1029, 1040, 1044, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "stabilis": 197, "stabl": [43, 64, 190, 211, 215, 219, 296, 326, 353, 358, 381, 383, 387, 392, 397, 401, 419, 423, 427, 478, 479, 485, 541, 549, 663, 680, 682, 695, 700, 732, 760, 955, 956, 1005, 1011, 1012, 1019, 1029, 1036, 1040, 1041, 1046, 1051, 1053, 1057], "stack": [2, 14, 109, 136, 147, 161, 185, 187, 217, 246, 271, 301, 365, 382, 391, 395, 397, 421, 471, 473, 474, 504, 523, 570, 573, 575, 576, 620, 635, 636, 638, 661, 681, 709, 833, 835, 873, 877, 885, 886, 892, 982, 999, 1029, 1030, 1031, 1032, 1035, 1040, 1043, 1047, 1048, 1049, 1050, 1051], "stack_method": [422, 575], "stack_method_": [422, 575, 576], "stacking_regressor": 158, "stackingclassifi": [2, 325, 366, 397, 406, 422, 576, 999, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1059], "stackingregressor": [2, 158, 325, 397, 406, 422, 575, 999, 1050, 1051, 1052, 1053, 1054, 1057, 1059], "stackingregressorinot": 158, "stackoverflow": [388, 391, 395], "stade": 1044, "stage": [0, 46, 63, 106, 137, 142, 148, 151, 269, 387, 397, 411, 415, 422, 455, 561, 562, 567, 568, 569, 570, 596, 597, 599, 610, 1006, 1019, 1027, 1048, 1052], "staged_decision_funct": [561, 567, 569], "staged_predict": [137, 148, 151, 422, 561, 562, 567, 568, 569, 570, 1040, 1052], "staged_predict_proba": [149, 152, 561, 567, 569, 1040], "staged_scor": [561, 562], "stagewis": 137, "stagg": 1053, "stai": [43, 52, 63, 72, 132, 190, 358, 382, 383, 387, 397, 398, 1014, 1032, 1046], "stairstep": 282, "stalei": [1049, 1050], "stall": [382, 386], "stallei": 1052, "stan": [850, 1057], "stand": [278, 359, 387, 395, 420, 539, 545, 553, 554, 604, 617, 686, 713, 725, 744, 745, 765, 794, 796, 803, 1008, 1009, 1015], "standalon": [389, 666, 912], "standard": [2, 50, 51, 52, 58, 63, 68, 70, 90, 96, 104, 105, 107, 113, 114, 118, 124, 137, 140, 142, 143, 144, 145, 146, 154, 158, 172, 174, 179, 181, 183, 190, 197, 205, 206, 215, 217, 226, 237, 238, 239, 249, 254, 265, 269, 270, 273, 274, 275, 276, 278, 316, 321, 344, 357, 370, 371, 375, 376, 377, 379, 380, 381, 383, 385, 386, 388, 389, 392, 395, 397, 401, 409, 411, 415, 417, 418, 419, 423, 425, 453, 471, 475, 479, 495, 504, 509, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 532, 533, 538, 540, 543, 549, 560, 598, 602, 619, 642, 652, 653, 680, 681, 682, 683, 684, 686, 695, 697, 701, 796, 814, 829, 831, 849, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 876, 881, 882, 885, 888, 889, 890, 892, 900, 901, 902, 903, 910, 912, 913, 938, 998, 1001, 1005, 1006, 1009, 1011, 1012, 1013, 1015, 1023, 1024, 1029, 1033, 1035, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1058], "standard_coef_": 1051, "standard_intercept_": 1051, "standard_norm": [366, 695], "standard_scal": 256, "standard_t": 125, "standardscal": [2, 45, 49, 67, 79, 84, 90, 93, 97, 105, 107, 118, 133, 158, 172, 190, 197, 204, 206, 208, 217, 233, 235, 245, 246, 254, 255, 256, 258, 269, 272, 282, 289, 299, 304, 305, 311, 318, 321, 325, 326, 328, 329, 330, 332, 333, 346, 349, 366, 372, 383, 385, 388, 392, 396, 416, 419, 436, 473, 474, 575, 684, 686, 872, 873, 876, 889, 903, 912, 913, 914, 915, 917, 918, 999, 1006, 1013, 1019, 1023, 1024, 1026, 1042, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "standardscalerifittedstandardscal": 258, "standardscalerstandardscal": [105, 158, 190, 245, 246, 255, 256, 258, 269, 282, 289, 326, 329], "standpoint": 85, "stanford": [172, 380, 657, 690, 691, 847, 850, 851, 905, 1007], "stanislav": [1055, 1056], "stanlei": [1054, 1055, 1056], "stap": 1048, "stapl": 1044, "star": [70, 121, 161, 383], "stareh": 1051, "start": [0, 43, 46, 49, 51, 52, 58, 63, 88, 93, 99, 102, 108, 118, 126, 142, 148, 150, 169, 172, 179, 181, 191, 195, 198, 199, 206, 217, 218, 219, 225, 235, 237, 241, 245, 249, 251, 263, 269, 275, 283, 296, 329, 331, 336, 357, 365, 366, 370, 371, 372, 383, 384, 385, 387, 388, 389, 395, 397, 401, 412, 415, 419, 420, 424, 425, 447, 449, 457, 461, 463, 546, 618, 625, 640, 653, 661, 667, 674, 675, 676, 684, 685, 686, 698, 702, 789, 790, 797, 805, 806, 808, 811, 812, 822, 854, 855, 856, 858, 860, 868, 962, 992, 998, 1005, 1008, 1013, 1014, 1023, 1029, 1033, 1043, 1045, 1048, 1050, 1052, 1053, 1054, 1055, 1056], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 240], "start_reut": 47, "start_tim": [46, 49, 57, 144, 145, 148, 158, 174, 206, 238], "start_titl": 47, "start_top": 47, "startstart": 403, "startswith": [52, 104, 238, 309], "startup": 1033, "stat": [2, 45, 47, 49, 104, 113, 172, 174, 193, 272, 275, 283, 287, 301, 327, 335, 336, 380, 392, 396, 417, 481, 600, 603, 604, 606, 607, 608, 612, 613, 614, 617, 690, 691, 812, 820, 822, 920, 921, 958, 998, 1005, 1019, 1047, 1049, 1053], "stat_learn_tut_index": [163, 164, 165], "state": [37, 88, 92, 104, 106, 113, 153, 219, 248, 256, 261, 269, 281, 327, 366, 371, 372, 383, 385, 389, 391, 395, 397, 398, 414, 422, 423, 428, 447, 450, 454, 456, 461, 466, 482, 552, 597, 687, 811, 812, 820, 822, 824, 852, 853, 859, 907, 908, 941, 998, 999, 1005, 1011, 1014, 1021, 1029, 1033, 1042, 1044, 1046, 1048, 1050, 1053, 1056], "state_to_print": 384, "stateless": [104, 358, 372, 397, 423, 590, 591, 597, 646, 875, 876, 884, 931, 992, 1019, 1056, 1059], "statement": [190, 385, 388, 391, 395, 397, 420], "static": [383, 385, 389, 391, 654, 655, 660, 661, 668, 669, 670, 671], "station": 179, "stationari": [178, 425, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633], "statist": [2, 47, 52, 114, 137, 140, 141, 152, 167, 171, 172, 187, 189, 190, 191, 192, 202, 204, 221, 267, 269, 272, 274, 277, 284, 293, 295, 316, 322, 327, 366, 376, 378, 380, 389, 397, 413, 414, 415, 416, 417, 419, 420, 422, 424, 440, 476, 481, 501, 502, 524, 525, 526, 528, 530, 549, 561, 567, 568, 570, 612, 613, 614, 617, 635, 638, 642, 643, 652, 657, 664, 698, 702, 704, 718, 724, 729, 731, 732, 739, 751, 796, 808, 824, 842, 869, 870, 888, 889, 890, 892, 897, 900, 901, 903, 917, 920, 921, 983, 998, 999, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1016, 1017, 1019, 1023, 1024, 1025, 1026, 1027, 1030, 1045, 1048, 1051, 1052, 1054, 1055, 1058], "statistician": [397, 892], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 638, "statlearnspars": [729, 731, 732], "statlib": 378, "statnikov": 1009, "statsmodel": [1005, 1028], "statu": [52, 135, 332, 377, 401, 504, 852, 853, 1058], "statweb": [657, 690, 691], "staub": 1046, "staubda": 1043, "std": [43, 50, 51, 52, 72, 81, 85, 89, 96, 101, 112, 114, 115, 124, 125, 126, 144, 146, 147, 153, 158, 180, 183, 185, 186, 190, 198, 205, 226, 248, 273, 274, 275, 277, 278, 280, 283, 285, 289, 290, 322, 338, 349, 358, 366, 397, 415, 419, 422, 523, 614, 617, 837, 892, 903, 1019, 1048, 1052], "std_": [279, 1045], "std_auc": 285, "std_display_styl": [250, 277, 814, 831], "std_error": 163, "std_fit_tim": [143, 298, 808, 822], "std_i": 190, "std_precis": 273, "std_predict": 181, "std_predictions_gpr": 174, "std_recal": 273, "std_scaler": 333, "std_score": [358, 1053], "std_score_tim": [143, 276, 808, 822], "std_test_precis": 273, "std_test_recal": 273, "std_test_scor": [105, 107, 143, 163, 171, 274, 275, 276, 283, 298, 479, 602, 808, 822, 1046, 1053], "std_time": 1046, "std_tpr": 285, "std_train_scor": [808, 822, 1046], "std_y_pr": 179, "stderr": [51, 841], "stdin": 391, "stdout": [47, 123, 225, 841, 861, 869, 870], "stds_california": 186, "stds_diabet": 186, "steadi": [907, 908], "steelblu": [124, 125, 160], "steep": [2, 175, 191, 284, 285, 415, 419, 425, 457, 463], "stef": [635, 999], "stefan": [1043, 1044, 1048, 1050], "stefani": [0, 1053, 1055, 1056, 1057, 1058, 1059], "stefanini": 1054, "stefano": 1042, "steffen": 1058, "stehl": [1054, 1055], "stein": 1046, "steinbach": [415, 1055, 1057], "steinfurt": [1050, 1052], "steingold": [1047, 1048], "steinlei": [415, 713], "steinley2004": 713, "stella": [415, 459, 469], "stellalin7": 1055, "stem": [140, 148, 192, 216, 266, 419, 423, 1001, 1011], "step": [52, 58, 63, 69, 77, 89, 90, 93, 102, 104, 105, 106, 107, 108, 114, 118, 126, 130, 137, 142, 146, 147, 148, 158, 169, 170, 171, 176, 179, 190, 192, 217, 225, 235, 245, 246, 249, 255, 258, 266, 269, 273, 276, 282, 284, 289, 296, 298, 299, 304, 311, 314, 318, 321, 322, 326, 329, 340, 342, 346, 358, 359, 361, 366, 370, 378, 381, 382, 383, 385, 386, 388, 391, 395, 397, 409, 412, 413, 415, 417, 418, 420, 422, 423, 424, 449, 454, 456, 544, 545, 546, 547, 554, 571, 596, 597, 599, 601, 602, 605, 614, 635, 652, 656, 674, 675, 677, 684, 686, 687, 688, 702, 708, 805, 806, 808, 811, 812, 822, 843, 844, 845, 846, 868, 869, 870, 872, 873, 875, 912, 913, 914, 915, 917, 918, 955, 956, 979, 983, 999, 1005, 1008, 1013, 1014, 1019, 1023, 1025, 1026, 1028, 1032, 1040, 1044, 1045, 1047, 1048, 1049, 1051, 1052, 1053, 1056, 1058], "stephan": [716, 1043, 1049, 1050, 1052], "stephani": 1051, "stephen": [1033, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053], "stepwis": [153, 643, 662, 663, 664, 690, 691, 1005], "stern": [796, 1009], "steve": [1042, 1044, 1048, 1053, 1055], "steven": [1042, 1043, 1045, 1047, 1048, 1053, 1055, 1056, 1058], "steward": 1047, "stewart": [1045, 1050, 1053, 1055, 1058], "stick": [48, 805, 1008], "stijn": 1047, "stikhin": 1050, "still": [43, 52, 64, 68, 79, 88, 90, 92, 97, 115, 120, 127, 145, 150, 153, 158, 174, 180, 189, 190, 192, 193, 197, 202, 205, 217, 219, 235, 249, 278, 284, 316, 327, 328, 331, 357, 358, 366, 372, 377, 382, 383, 387, 388, 389, 391, 397, 415, 419, 422, 423, 426, 447, 451, 461, 481, 504, 635, 640, 643, 645, 666, 667, 725, 764, 786, 789, 800, 801, 810, 811, 812, 825, 828, 890, 892, 912, 936, 961, 998, 999, 1003, 1005, 1008, 1009, 1012, 1015, 1017, 1024, 1025, 1027, 1029, 1032, 1033, 1040, 1042, 1045, 1046, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1058, 1059], "stine": [1048, 1049], "stochast": [2, 46, 93, 148, 149, 152, 164, 187, 195, 196, 204, 239, 241, 244, 249, 302, 304, 305, 310, 313, 328, 345, 415, 420, 422, 469, 495, 504, 510, 511, 512, 522, 530, 544, 552, 567, 568, 612, 635, 639, 647, 666, 667, 676, 680, 682, 684, 685, 686, 687, 695, 696, 697, 698, 700, 838, 861, 868, 869, 870, 873, 882, 916, 955, 956, 982, 998, 1012, 1013, 1015, 1030, 1031, 1034, 1035, 1040, 1041, 1044, 1045, 1047, 1049, 1051], "stochastic_gradi": [1042, 1043, 1049], "stock": [42, 81, 87, 187, 237, 238, 415, 417, 461, 478, 479, 697, 1030], "stogbauer": [615, 616], "stojanov": [1054, 1055], "stolbunov": 1045, "stone": [383, 920, 921, 1025], "stop": [43, 46, 51, 55, 79, 97, 136, 137, 143, 179, 181, 187, 191, 196, 204, 219, 320, 326, 383, 385, 391, 392, 397, 415, 420, 422, 424, 447, 448, 450, 452, 454, 456, 459, 461, 469, 470, 478, 479, 485, 489, 490, 491, 497, 504, 516, 517, 540, 544, 545, 546, 547, 548, 551, 553, 554, 555, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 596, 597, 599, 610, 625, 635, 652, 653, 654, 656, 657, 660, 664, 666, 667, 674, 675, 676, 677, 679, 684, 685, 686, 688, 699, 700, 703, 722, 758, 805, 806, 838, 869, 870, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 962, 982, 998, 1005, 1013, 1014, 1024, 1025, 1029, 1030, 1031, 1033, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057], "stop_n_inli": [679, 1005], "stop_prob": 679, "stop_scor": [679, 1005], "stop_word": [54, 57, 357, 358, 423, 596, 597, 599], "stop_words_": 1058, "stopiter": 1052, "stopword": 496, "storag": [0, 359, 397, 666, 667, 674, 675, 676, 684, 685, 686, 912, 1012, 1024, 1043, 1048], "storch": 1049, "store": [2, 68, 88, 89, 104, 106, 114, 120, 169, 182, 195, 203, 206, 221, 238, 245, 255, 265, 269, 280, 284, 335, 359, 365, 370, 377, 378, 383, 385, 390, 391, 392, 395, 397, 409, 411, 416, 418, 420, 422, 423, 425, 426, 445, 447, 451, 453, 457, 464, 471, 474, 476, 477, 480, 481, 482, 483, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 511, 516, 542, 543, 549, 557, 558, 563, 564, 565, 566, 571, 572, 573, 574, 577, 578, 593, 597, 618, 619, 635, 639, 640, 643, 657, 658, 662, 668, 669, 670, 671, 674, 675, 681, 683, 684, 685, 686, 696, 697, 698, 700, 705, 706, 708, 709, 710, 789, 805, 806, 808, 814, 822, 830, 831, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 867, 883, 890, 892, 893, 907, 908, 909, 938, 939, 965, 966, 979, 982, 994, 999, 1001, 1005, 1010, 1012, 1021, 1024, 1025, 1028, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "store_cent": [453, 1057], "store_covari": [70, 557, 558, 1045, 1047], "store_cv_result": [269, 681, 683, 830, 1058], "store_cv_valu": [681, 683, 1048, 1051, 1058], "store_precis": [69, 112, 476, 477, 480, 481, 482, 483], "stori": [189, 275, 293, 378, 1008], "stork": 1003, "stott": 1048, "stoyanov": [1048, 1049], "str": [47, 49, 52, 93, 95, 131, 133, 146, 170, 235, 254, 275, 287, 296, 306, 344, 357, 377, 378, 392, 423, 426, 427, 431, 436, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 464, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 584, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 625, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 700, 704, 705, 706, 707, 708, 710, 715, 717, 719, 721, 735, 737, 738, 740, 741, 746, 750, 779, 782, 786, 787, 788, 789, 790, 791, 792, 795, 797, 800, 801, 807, 808, 809, 810, 811, 812, 814, 815, 817, 819, 820, 822, 826, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 931, 933, 934, 937, 938, 939, 942, 946, 948, 952, 964, 965, 966, 968, 971, 992, 993, 996, 1055], "str_": [51, 284, 501, 508, 512, 518, 880], "strai": 1014, "straight": [128, 207, 213, 215, 272, 350, 370], "straightforward": [317, 382, 414, 420, 1033], "straka": 1052, "strateg": 398, "strategi": [2, 30, 43, 52, 87, 89, 93, 96, 105, 147, 152, 153, 158, 164, 169, 171, 185, 186, 187, 192, 202, 206, 217, 225, 235, 246, 254, 256, 267, 269, 274, 276, 278, 279, 280, 282, 283, 284, 285, 287, 289, 295, 310, 313, 315, 317, 318, 322, 323, 325, 326, 329, 359, 369, 385, 389, 396, 397, 409, 414, 419, 422, 423, 424, 427, 444, 445, 446, 454, 459, 469, 479, 510, 512, 520, 522, 530, 541, 546, 559, 560, 569, 570, 572, 573, 575, 576, 596, 597, 599, 600, 602, 610, 635, 636, 638, 642, 653, 655, 659, 661, 663, 669, 671, 673, 681, 683, 699, 703, 712, 719, 721, 740, 763, 765, 803, 808, 810, 811, 812, 814, 822, 825, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 869, 870, 877, 882, 893, 907, 912, 914, 917, 920, 921, 922, 923, 979, 998, 999, 1008, 1010, 1011, 1012, 1013, 1015, 1017, 1019, 1023, 1024, 1025, 1030, 1035, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1058], "stratif": [809, 810, 816, 817, 824, 826, 827, 828, 979, 1049], "stratifi": [2, 44, 128, 144, 154, 168, 192, 232, 245, 254, 258, 269, 270, 275, 278, 284, 299, 304, 305, 325, 385, 397, 414, 559, 567, 575, 576, 610, 667, 674, 676, 684, 807, 808, 811, 812, 814, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 846, 861, 869, 979, 1009, 1012, 1045, 1046, 1047, 1049, 1050, 1053], "stratifiedgroupkfold": [2, 270, 1053], "stratifiedkfold": [2, 171, 262, 270, 281, 285, 338, 419, 444, 575, 576, 602, 610, 667, 681, 808, 809, 811, 812, 813, 814, 816, 818, 822, 826, 828, 831, 832, 833, 834, 835, 836, 837, 839, 893, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1053], "stratifiedshufflesplit": [2, 270, 346, 419, 1040, 1041, 1046, 1047, 1053], "stream": [47, 415, 420, 423, 469, 597, 881, 882, 892, 1001, 1048, 1051], "stream_reuters_docu": 47, "streamhandl": 1051, "streamlin": 1005, "street": [158, 172, 380], "strehl": 415, "strength": [51, 158, 181, 205, 217, 221, 276, 325, 370, 418, 422, 453, 575, 576, 651, 656, 657, 660, 666, 667, 677, 680, 681, 682, 683, 684, 686, 688, 695, 791, 869, 870, 912, 913, 917, 918, 998, 1005, 1012, 1015, 1023, 1024], "stress": [698, 702, 1006, 1055], "stress_": 698, "stretch": [241, 264], "stretched_gaussian": 264, "strickland": 1046, "strict": [366, 381, 397, 411, 420, 511, 543, 596, 597, 599, 1005, 1040, 1049, 1052, 1058], "stricter": 185, "strictli": [64, 217, 235, 251, 316, 331, 358, 388, 397, 413, 418, 420, 422, 423, 516, 517, 543, 549, 552, 569, 570, 596, 599, 610, 650, 678, 679, 681, 683, 703, 708, 747, 774, 808, 811, 812, 818, 822, 835, 861, 888, 900, 904, 905, 907, 908, 912, 913, 917, 918, 954, 998, 1000, 1005, 1009, 1019, 1023, 1041, 1051, 1056], "striebel": [1046, 1047], "strife": 1006, "strike": [148, 191, 221], "string": [2, 47, 105, 146, 182, 235, 246, 269, 279, 328, 333, 359, 370, 377, 378, 383, 384, 385, 389, 397, 416, 419, 422, 423, 424, 426, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 496, 497, 504, 513, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 625, 628, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 707, 717, 719, 727, 740, 770, 773, 779, 782, 786, 787, 788, 789, 800, 801, 805, 806, 808, 811, 812, 814, 822, 830, 831, 835, 840, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 929, 936, 938, 939, 947, 948, 949, 972, 992, 993, 998, 999, 1009, 1022, 1024, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "strip": [54, 235, 358, 370, 377, 378, 504], "strip_acc": [596, 597, 599], "strip_accents_unicod": 1050, "stripe": 319, "stripplot": 190, "strive": [382, 398, 1033], "strong": [32, 43, 52, 89, 174, 187, 189, 190, 196, 210, 214, 215, 221, 222, 223, 250, 295, 323, 353, 413, 420, 422, 532, 657, 680, 1002, 1003, 1005, 1006, 1008, 1016, 1024, 1030], "stronger": [276, 651, 660, 666, 667, 680, 681, 682, 683, 684, 686, 695], "strongest": [55, 210], "strongli": [62, 64, 115, 118, 126, 147, 151, 190, 200, 232, 251, 281, 357, 383, 400, 401, 413, 422, 666, 744, 803, 1005, 1006, 1035, 1049, 1056], "stroudsburg": [909, 1022], "strubel": 1053, "struct": [381, 397, 1043], "structur": [0, 2, 42, 47, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 81, 87, 88, 89, 90, 91, 97, 115, 133, 135, 154, 173, 187, 237, 238, 241, 246, 251, 266, 270, 281, 301, 321, 326, 329, 334, 346, 350, 360, 361, 362, 370, 378, 380, 383, 385, 388, 395, 397, 398, 401, 412, 415, 417, 418, 419, 420, 422, 423, 424, 425, 448, 449, 452, 453, 457, 458, 459, 460, 461, 464, 469, 470, 478, 479, 504, 511, 512, 516, 519, 521, 522, 529, 538, 543, 549, 552, 571, 618, 619, 620, 624, 625, 626, 697, 704, 717, 721, 838, 860, 865, 892, 904, 905, 908, 920, 921, 922, 923, 926, 955, 956, 979, 982, 1006, 1008, 1009, 1012, 1014, 1015, 1019, 1022, 1025, 1028, 1029, 1030, 1040, 1041, 1043, 1044, 1046, 1050], "struggl": [382, 398, 415], "stuck": [96, 700, 1006], "student": [0, 125, 275, 1006, 1029, 1033], "studi": [43, 64, 95, 150, 217, 235, 278, 281, 282, 289, 357, 378, 380, 419, 424, 704, 716, 766, 767, 837, 1007, 1009, 1023], "studio": [381, 1033], "study_135": 377, "study_14": 377, "study_34": 377, "study_98": 377, "study_99": 377, "stuff": 1033, "stump": [139, 422, 567, 1051], "stupp": [1046, 1047], "stupperich": 1052, "sturla": 1042, "style": [114, 150, 206, 225, 235, 279, 383, 390, 415, 423, 450, 454, 466, 708, 814, 831, 938, 939, 952, 1040, 1043, 1054], "st\u00e9fan": 384, "st\u00e9phan": 1050, "st\u00e9phane": [1049, 1050, 1054, 1055], "su": [729, 731, 732], "sub": [47, 72, 83, 88, 90, 92, 95, 104, 132, 251, 253, 260, 327, 335, 336, 343, 346, 354, 378, 383, 385, 389, 397, 416, 422, 423, 444, 450, 451, 454, 456, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 596, 598, 599, 605, 618, 619, 635, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 807, 809, 810, 815, 817, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 871, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 929, 966, 1005, 1009, 1023, 1050, 1054, 1056, 1057], "sub_sampl": 544, "subclass": [135, 385, 425, 582, 974, 1045, 1048, 1053, 1057], "subclust": [415, 449], "subcluster_centers_": [77, 449], "subcluster_labels_": 449, "subcompon": [123, 420], "subdirectori": 383, "subdivid": [378, 425], "subestim": 385, "subestimator__c": 385, "subestimator__class_weight": 385, "subestimator__du": 385, "subestimator__fit_intercept": 385, "subestimator__intercept_sc": 385, "subestimator__l1_ratio": 385, "subestimator__max_it": 385, "subestimator__multi_class": 385, "subestimator__n_job": 385, "subestimator__penalti": 385, "subestimator__random_st": 385, "subestimator__solv": 385, "subestimator__tol": 385, "subestimator__verbos": 385, "subestimator__warm_start": 385, "subexpress": 52, "subfold": [2, 381, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 511, 1053], "subgraph": 412, "subhash": 1054, "subhodeep": [1040, 1041, 1042], "subi": [1049, 1050, 1055], "subject": [16, 104, 155, 266, 278, 357, 378, 383, 385, 387, 395, 397, 398, 413, 417, 419, 420, 503, 666, 667, 693, 830, 875, 931, 978, 1000, 1005, 1024, 1027, 1049, 1050, 1053, 1055], "subject_body_extractor": 104, "subject_body_transform": 104, "subjectbodi": 104, "subjectbodyextractor": 104, "sublinear": [420, 598, 599], "sublinear_tf": [357, 420, 423, 598, 599], "submatric": 412, "submatrix": [412, 430, 458, 460], "submiss": 383, "submit": [380, 381, 382, 385, 386, 387, 388, 391, 397, 398, 401], "submitt": 382, "submodel": 419, "submodul": [387, 1001, 1007, 1040], "subobject": [429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 811, 812, 822, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923], "suboptim": [419, 708, 710, 790, 797, 1012, 1048, 1056], "subpackag": [383, 387, 1044, 1049], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 85, 86, 88, 89, 90, 91, 92, 95, 97, 100, 101, 107, 109, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 128, 132, 133, 137, 139, 140, 142, 143, 144, 146, 147, 148, 151, 153, 155, 156, 158, 159, 160, 167, 176, 178, 183, 185, 186, 190, 191, 193, 195, 198, 201, 208, 209, 211, 212, 215, 216, 217, 218, 219, 221, 225, 230, 231, 233, 235, 237, 238, 241, 242, 244, 245, 247, 249, 250, 252, 253, 254, 255, 260, 261, 262, 263, 265, 266, 269, 270, 271, 272, 275, 277, 278, 280, 281, 282, 284, 285, 286, 288, 289, 290, 295, 296, 298, 299, 300, 301, 304, 305, 307, 308, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 329, 330, 338, 340, 343, 344, 345, 346, 350, 352, 353, 354, 355, 357, 358, 359, 361, 362, 379, 390], "subplot_kw": [237, 300], "subplot_spec": 390, "subplot_titl": 143, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 80, 85, 86, 89, 97, 99, 113, 115, 121, 125, 126, 132, 139, 140, 158, 190, 216, 217, 232, 235, 244, 252, 260, 262, 263, 266, 270, 286, 288, 301, 309, 311, 314, 318, 327, 336, 343, 346], "subpopul": [234, 687, 1005], "subproblem": 1045, "subrahmanyam": [1040, 1043], "subramaniam": [1055, 1056, 1057], "subramaniyan": 1052, "subramanyam": 1047, "subrat": 1052, "subrat93": 1052, "subsampl": [132, 149, 152, 191, 234, 271, 323, 327, 465, 567, 568, 569, 570, 571, 640, 687, 709, 811, 812, 838, 877, 889, 901, 934, 944, 1001, 1005, 1029, 1040, 1050, 1054, 1056, 1057, 1058], "subscrib": 1038, "subscript": [371, 1053], "subsect": [25, 371, 383], "subsequ": [46, 68, 93, 109, 126, 137, 169, 204, 219, 277, 280, 296, 298, 346, 366, 383, 385, 387, 389, 397, 411, 415, 416, 422, 425, 444, 504, 516, 561, 562, 567, 569, 570, 674, 676, 684, 811, 812, 840, 841, 844, 847, 848, 849, 850, 851, 869, 887, 891, 999, 1008, 1010, 1049, 1050, 1054, 1056, 1058], "subset": [2, 46, 57, 58, 63, 64, 68, 104, 105, 113, 114, 144, 146, 147, 148, 163, 169, 172, 191, 193, 206, 218, 232, 233, 234, 235, 247, 249, 253, 254, 269, 273, 276, 278, 284, 285, 287, 293, 321, 322, 327, 335, 339, 357, 358, 359, 366, 378, 383, 391, 395, 397, 412, 413, 415, 416, 419, 422, 423, 425, 432, 444, 456, 471, 473, 474, 476, 495, 496, 500, 501, 505, 516, 557, 558, 559, 561, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 610, 618, 637, 647, 648, 649, 650, 659, 663, 666, 674, 675, 676, 679, 682, 683, 684, 685, 686, 687, 705, 711, 712, 719, 721, 724, 726, 739, 742, 763, 765, 801, 804, 807, 810, 830, 836, 838, 840, 841, 842, 843, 847, 848, 849, 850, 851, 854, 859, 862, 869, 878, 907, 908, 912, 914, 917, 920, 922, 934, 977, 998, 1005, 1009, 1010, 1020, 1022, 1024, 1025, 1043, 1048, 1049, 1051, 1053, 1058, 1059], "subset_featur": 105, "subset_label": 235, "subset_mask": 291, "subsidi": 190, "subspac": [130, 418, 422, 459, 523, 563, 564, 699, 703, 956, 1003, 1012, 1015, 1021, 1033], "substanti": [163, 298, 302, 303, 317, 383, 858, 1015, 1044, 1047], "substitut": [406, 992, 1029, 1046], "subtl": [355, 366, 1008, 1029], "subtleti": 1035, "subtract": [179, 190, 254, 418, 420, 450, 454, 466, 542, 652, 653, 1047, 1057], "subtre": [565, 566, 567, 568, 572, 573, 920, 921, 922, 923, 1025], "subwindow": 1025, "succe": [130, 153, 202, 289], "succeed": 383, "success": [2, 85, 167, 187, 267, 279, 282, 283, 352, 366, 410, 415, 419, 420, 422, 523, 572, 587, 808, 811, 812, 829, 917, 1012, 1030, 1033, 1035, 1052], "successfulli": [43, 53, 320, 382, 387, 409, 415, 423, 1023], "successor": [457, 463, 1025, 1028], "suchak": 1053, "sudo": [381, 401], "suen": 1013, "suffer": [118, 145, 192, 296, 316, 358, 370, 415, 422, 552, 771, 1004, 1005, 1009, 1012, 1049], "suffic": [92, 93, 385], "suffici": [2, 64, 90, 158, 225, 290, 346, 370, 397, 415, 424, 540, 665, 690, 691, 824, 827, 828, 1010, 1012, 1029, 1049, 1055, 1056], "suffix": [401, 835, 1009, 1050], "suganthan": 380, "sugar": [172, 380], "suggest": [113, 126, 140, 144, 190, 193, 275, 346, 370, 382, 383, 390, 397, 419, 420, 422, 476, 481, 573, 653, 837, 1003, 1005, 1006, 1014, 1017, 1024, 1044, 1051, 1054, 1057], "suh": 1048, "suha": 1058, "suit": [58, 123, 156, 190, 217, 218, 244, 265, 328, 329, 331, 357, 371, 383, 385, 388, 389, 391, 401, 403, 409, 418, 420, 422, 457, 459, 511, 685, 849, 893, 950, 998, 1001, 1006, 1009, 1011, 1012, 1023, 1028, 1029, 1033, 1047, 1054], "suitabl": [141, 150, 202, 203, 221, 312, 359, 377, 378, 389, 392, 409, 415, 420, 423, 459, 469, 475, 494, 513, 516, 635, 643, 847, 848, 851, 886, 887, 910, 973, 977, 1003, 1005, 1008, 1019, 1021, 1023, 1028, 1054, 1055], "sullivan": [1043, 1044, 1045], "sultan": 1054, "sum": [2, 30, 47, 55, 57, 63, 96, 114, 121, 126, 132, 149, 150, 168, 172, 182, 190, 199, 213, 217, 221, 232, 235, 238, 240, 254, 269, 284, 296, 303, 306, 329, 333, 339, 350, 351, 353, 357, 358, 359, 365, 380, 389, 397, 412, 413, 415, 417, 418, 420, 421, 422, 423, 425, 438, 449, 450, 454, 456, 466, 471, 472, 489, 490, 491, 523, 528, 531, 539, 542, 544, 545, 549, 552, 553, 554, 557, 558, 560, 562, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 598, 599, 619, 621, 631, 633, 643, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 684, 685, 686, 687, 689, 692, 698, 702, 704, 707, 717, 718, 727, 734, 749, 764, 766, 767, 771, 796, 840, 841, 845, 846, 855, 859, 863, 870, 871, 891, 892, 912, 913, 915, 918, 920, 921, 922, 923, 958, 983, 989, 994, 1005, 1009, 1010, 1011, 1012, 1024, 1025, 1043, 1044, 1046, 1048, 1049, 1051, 1056, 1057], "sum_": [275, 284, 353, 412, 413, 415, 420, 421, 422, 546, 548, 555, 704, 763, 1003, 1005, 1006, 1009, 1011, 1013, 1014, 1016, 1017, 1019, 1023, 1024, 1025], "sum_gradi": 422, "sum_h": 1014, "sum_hessian": 422, "sum_i": [328, 422, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 1000, 1001, 1005, 1007, 1009, 1014], "sum_j": [654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 1005, 1009, 1014], "sum_k": [422, 557, 1025], "sum_m": 422, "sum_n": [282, 715, 1009], "sum_n_compon": [471, 871], "sum_over_featur": [1040, 1055], "sum_weight": 989, "sumit": 1054, "summar": [217, 266, 282, 284, 359, 383, 385, 400, 422, 529, 666, 702, 714, 715, 1005, 1006, 1009, 1015, 1035], "summari": [52, 172, 329, 365, 366, 380, 395, 569, 570, 700, 721, 796, 925, 1007, 1010, 1028, 1059], "summaris": [246, 326], "summat": [1011, 1013], "summer": [0, 43, 52, 83, 179, 1040], "sun": [43, 153, 191, 1048, 1053, 1054], "sundai": 43, "sundaramahalingam": 1057, "sung": 1051, "sunglok": 1005, "sunita": 791, "sunitha": 1052, "sunmi": 1051, "super": [57, 62, 64, 385, 423, 1048], "superflu": 420, "superimpos": 420, "superior": 422, "superposit": 202, "supersed": [382, 1045], "superset": [419, 829, 1009], "supervis": [2, 27, 32, 34, 38, 57, 62, 64, 67, 72, 84, 89, 93, 118, 131, 142, 153, 165, 176, 238, 249, 252, 262, 275, 305, 327, 338, 343, 346, 350, 358, 359, 370, 378, 385, 396, 397, 413, 415, 418, 419, 420, 422, 423, 425, 444, 446, 471, 495, 511, 512, 561, 596, 598, 601, 602, 642, 684, 737, 809, 810, 813, 815, 816, 817, 818, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 837, 838, 861, 871, 872, 876, 886, 893, 907, 908, 909, 917, 1003, 1006, 1009, 1011, 1012, 1015, 1019, 1020, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1035, 1040, 1046, 1052], "supervised_learning_tut": [164, 165], "supp": 391, "suppli": [153, 395, 415, 654, 938, 939, 1012, 1033, 1044, 1046, 1048, 1053], "support": [2, 39, 43, 45, 46, 47, 48, 49, 61, 66, 68, 81, 104, 105, 106, 136, 141, 157, 158, 168, 169, 179, 191, 218, 227, 228, 229, 235, 249, 250, 251, 257, 268, 273, 280, 282, 293, 296, 314, 316, 320, 329, 333, 335, 336, 339, 340, 342, 343, 346, 347, 348, 349, 350, 351, 353, 370, 371, 372, 377, 381, 383, 385, 387, 388, 389, 390, 392, 393, 396, 397, 398, 409, 415, 419, 420, 423, 424, 425, 444, 447, 457, 459, 460, 471, 473, 474, 476, 481, 494, 504, 520, 546, 548, 549, 552, 555, 557, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 621, 622, 623, 625, 627, 628, 630, 631, 633, 635, 639, 640, 641, 651, 653, 665, 666, 667, 678, 679, 680, 682, 683, 684, 685, 686, 695, 698, 702, 707, 715, 721, 737, 738, 746, 751, 786, 787, 788, 791, 792, 795, 796, 808, 811, 812, 814, 822, 830, 835, 836, 844, 845, 850, 852, 853, 856, 858, 864, 872, 873, 877, 883, 885, 886, 888, 892, 900, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 934, 944, 950, 951, 996, 998, 999, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1019, 1020, 1023, 1028, 1029, 1030, 1031, 1033, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "support_": [250, 352, 476, 481, 601, 602, 610, 914, 915, 916, 917, 918, 1024], "support_fract": [48, 476, 481], "support_reweight": [476, 481], "support_vector": [344, 350], "support_vector_indic": 344, "support_vectors_": [46, 49, 347, 350, 351, 914, 915, 916, 917, 918, 1024], "suppos": [251, 278, 335, 370, 371, 383, 385, 387, 389, 417, 422, 423, 424, 565, 569, 572, 666, 667, 674, 676, 682, 683, 684, 750, 858, 912, 914, 917, 920, 922, 944, 1013, 1049, 1051, 1057], "suppress": [190, 370, 391, 700, 1012, 1047], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 85, 88, 92, 95, 102, 109, 123, 126, 133, 137, 146, 147, 155, 158, 183, 190, 191, 193, 211, 216, 232, 233, 237, 238, 239, 253, 263, 269, 271, 289, 314, 316, 318, 325, 327, 335, 336, 340, 352, 353, 362], "surac": 1050, "sure": [2, 63, 91, 210, 223, 251, 252, 269, 366, 370, 371, 377, 381, 382, 383, 384, 385, 387, 388, 391, 395, 401, 413, 416, 423, 501, 531, 657, 938, 939, 950, 961, 994, 999, 1006, 1023, 1028, 1029, 1047, 1048, 1050, 1055], "suresh": 1054, "surf": 191, "surfac": [67, 127, 136, 137, 138, 139, 141, 159, 187, 201, 209, 226, 281, 299, 342, 343, 360, 361, 363, 364, 365, 422, 512, 561, 565, 572, 639, 772, 920, 926, 1003, 1008, 1023, 1024, 1025, 1030], "surface_": 639, "surgan12": 1049, "surpass": [137, 350, 869, 870], "surplu": 419, "surpris": [88, 191, 381, 1005, 1028, 1042], "surprisingli": [235, 378, 423], "surrend": 57, "surrog": 1033, "surround": [252, 383, 858, 1015], "survei": [190, 418], "surviv": [105, 192, 998, 1028], "surya": [1053, 1054], "suscept": 409, "susik": 1044, "suspect": 43, "suspici": 378, "sustain": 0, "sutherland": [1042, 1044, 1045, 1047, 1048, 1049, 1050], "sutiono": 1051, "suzuki": [1051, 1052], "sv": 1024, "sv_ind": 250, "sv_ratio": 250, "svc": [2, 45, 62, 64, 66, 67, 68, 104, 108, 148, 159, 165, 175, 187, 195, 208, 221, 249, 252, 256, 268, 273, 275, 277, 280, 281, 282, 285, 286, 291, 318, 321, 325, 327, 338, 340, 341, 342, 343, 344, 346, 347, 348, 349, 351, 354, 355, 357, 370, 385, 389, 397, 413, 416, 419, 422, 441, 442, 443, 444, 475, 523, 563, 705, 706, 708, 710, 808, 825, 839, 841, 872, 909, 910, 912, 914, 915, 918, 996, 998, 1004, 1007, 1009, 1010, 1019, 1030, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1058], "svc__c": [318, 872], "svc_disp": [257, 325, 1037], "svc_isoton": 62, "svc_sigmoid": 62, "svcifittedsvc": 257, "svcsvc": [256, 273, 275, 327], "svd": [2, 70, 130, 156, 238, 358, 392, 411, 418, 427, 458, 460, 489, 490, 492, 529, 540, 541, 542, 543, 547, 548, 549, 552, 554, 557, 558, 672, 680, 681, 682, 693, 694, 695, 871, 956, 1003, 1042, 1046, 1047, 1053, 1055, 1058], "svd__n_compon": 871, "svd_lapack_driv": 956, "svd_method": [57, 458, 460, 540, 1043], "svd_solver": [45, 104, 123, 130, 332, 333, 411, 420, 543, 549, 1046, 1058], "sven": [1054, 1055], "svg": [0, 403], "svm": [2, 42, 46, 48, 49, 50, 54, 62, 64, 66, 67, 68, 104, 106, 108, 123, 146, 156, 159, 162, 164, 166, 171, 172, 176, 178, 187, 196, 199, 201, 209, 210, 227, 228, 229, 230, 244, 250, 252, 253, 256, 257, 268, 272, 273, 274, 275, 277, 278, 280, 281, 282, 283, 285, 286, 290, 291, 302, 307, 308, 311, 313, 318, 319, 325, 327, 334, 338, 339, 341, 344, 352, 353, 357, 370, 378, 385, 389, 397, 416, 419, 420, 422, 424, 441, 442, 443, 444, 502, 512, 520, 523, 549, 563, 564, 571, 575, 576, 585, 601, 602, 607, 608, 613, 639, 647, 651, 676, 684, 685, 686, 697, 705, 706, 708, 710, 721, 743, 750, 769, 808, 822, 828, 834, 835, 838, 840, 841, 858, 872, 873, 885, 887, 892, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 996, 998, 1001, 1004, 1006, 1007, 1009, 1010, 1014, 1022, 1024, 1026, 1030, 1031, 1035, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047], "svm1": 416, "svm2": 416, "svm__c": 108, "svm_weight": 168, "svm_weights_select": 168, "svmlight": [2, 376, 494, 516, 517, 1035, 1040, 1041, 1047, 1049], "svmlight_file_test": 517, "svmlight_file_train": 517, "svmsgd": 1023, "svr": [2, 46, 49, 187, 243, 325, 341, 370, 403, 441, 442, 443, 564, 575, 576, 601, 602, 651, 686, 808, 814, 913, 915, 917, 1002, 1030, 1040, 1042, 1044, 1045, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1058], "svr_fit": 250, "svr_lin": 352, "svr_poli": 352, "svr_predict": 250, "svr_rbf": 352, "sw": 296, "sw_test": [61, 326], "sw_train": [61, 326], "swap": [2, 415, 420, 724, 744, 987, 988, 1040], "swapnil": 1054, "swart": 55, "sweep": 868, "swier": [1051, 1052], "swiss": [2, 102, 187, 236, 237, 242, 415, 538, 700, 701, 1030, 1054], "switch": [369, 686, 712, 725, 745, 763, 765, 803, 852, 853, 955, 956, 1009, 1012, 1035, 1040], "swpeas": 1053, "swu": 1044, "sy": [47, 51, 57, 225, 248, 296, 339, 359, 378, 395, 625], "syd": 1055, "sydnei": 0, "syhw": [1041, 1042], "sylvain": [0, 373, 1044, 1049, 1050, 1051, 1052, 1053, 1054], "sylvainlan": [1048, 1049, 1050, 1051, 1052], "symbol": [51, 359, 371, 385, 389, 417, 423, 507, 590, 596, 597, 599, 924, 926, 1028], "symbol_dict": 51, "symlink": 387, "symlognorm": [197, 202], "symmetr": [2, 79, 150, 183, 193, 219, 397, 413, 415, 459, 469, 470, 481, 527, 535, 537, 698, 702, 703, 712, 713, 723, 724, 725, 730, 732, 736, 744, 745, 763, 765, 771, 793, 803, 805, 806, 994, 998, 1005, 1009, 1012, 1056], "symmetri": [172, 380, 707, 885, 888, 900, 1007], "symmetric_arrai": 994, "symposium": [172, 380, 415, 467], "symptomat": 269, "synchron": [383, 423], "syndrom": 377, "synonym": [397, 854, 855, 856, 862, 863, 864], "synonymi": 420, "syntax": [371, 383, 388, 391, 416, 475, 871, 872, 910, 998, 1051, 1053], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 84, 144, 150, 156, 174, 179, 181, 191, 207, 219, 234, 311, 318, 353, 366, 370, 376, 386, 398, 415, 417, 424, 666, 667, 912, 913, 919, 1003, 1046], "synthetic_feature_weight": [666, 667], "syonekura": 1048, "system": [44, 128, 202, 275, 282, 333, 366, 370, 371, 372, 378, 380, 383, 384, 385, 386, 391, 395, 401, 409, 415, 420, 422, 426, 451, 478, 479, 485, 543, 547, 551, 558, 647, 653, 658, 659, 662, 663, 664, 690, 691, 734, 764, 777, 805, 861, 907, 908, 1005, 1009, 1012, 1021, 1028, 1029, 1033, 1040, 1048, 1049], "systemat": [43, 153, 275, 720, 736, 928, 930, 1009, 1055], "sysuresh": 1054, "szabo": [1042, 1043], "szepieniec": 1046, "szlam": [420, 955, 956], "szpak": [1047, 1050], "szyma\u0144ski": [1048, 1049], "s\u00e1nchez": 1052, "s\u00e3o": 1058, "s\u00e4ger": [1043, 1046], "s\u00e9bastien": [1033, 1046, 1048], "s\u00e9rgio": 1059, "s\u00f6nke": 1050, "s\u00f8ren": 1057, "s\u0142apek": 1051, "t": [2, 16, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 87, 89, 93, 104, 106, 111, 112, 113, 115, 117, 121, 124, 125, 130, 132, 133, 137, 140, 141, 149, 150, 151, 152, 153, 157, 158, 172, 175, 177, 178, 179, 182, 183, 187, 190, 191, 192, 193, 197, 199, 202, 211, 214, 215, 216, 217, 218, 235, 236, 238, 239, 240, 241, 251, 252, 261, 264, 266, 269, 274, 275, 289, 295, 296, 309, 313, 325, 328, 329, 331, 335, 336, 338, 342, 343, 346, 347, 351, 357, 358, 359, 364, 365, 366, 370, 371, 377, 378, 380, 383, 385, 387, 389, 391, 396, 397, 401, 406, 409, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 428, 432, 435, 438, 440, 444, 454, 455, 457, 463, 470, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 503, 504, 521, 522, 523, 527, 528, 533, 538, 540, 542, 549, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 598, 599, 602, 615, 616, 618, 619, 635, 636, 638, 639, 640, 641, 643, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 703, 704, 712, 718, 724, 725, 734, 744, 745, 763, 764, 765, 775, 796, 797, 802, 803, 807, 808, 811, 812, 822, 830, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 858, 859, 862, 863, 868, 869, 870, 878, 881, 882, 883, 885, 886, 892, 893, 905, 907, 908, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 931, 956, 957, 972, 998, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1023, 1024, 1025, 1030, 1034, 1035, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 81, 83, 85, 87, 93, 97, 99, 126, 202, 203, 232, 233, 234, 239, 242, 244, 248, 250, 276, 332, 357, 358, 359, 684, 685, 686], "t1": [79, 81, 97, 232, 239, 242, 244], "t15h": 1047, "t_": [674, 675, 676, 684, 685, 686, 869, 870, 1023], "t_0": 1023, "t_batch": 99, "t_i": 1011, "t_k": [422, 1009, 1025], "t_m": 1025, "t_mini_batch": [77, 99], "t_p": 282, "t_post": 275, "t_sne": [237, 1048], "t_stat": 275, "t_stat_uncorrect": 275, "t_t": 1025, "taa": 182, "taac": 182, "tab": [46, 48, 70, 88, 113, 137, 153, 155, 158, 174, 179, 181, 204, 206, 269, 326, 332, 416, 1047], "tab10": [249, 265], "tab20b": 43, "taba": 1059, "tabea": [1055, 1056], "tabibian": 1046, "tabl": [93, 235, 275, 383, 384, 392, 415, 423, 590, 666, 688, 808, 822, 849, 973, 1005, 1009, 1010, 1015, 1028, 1041], "tabular": [43, 52, 191, 385, 422, 1017, 1028], "tacit": 397, "tacitli": 1042, "tackl": [151, 275, 371, 383, 415, 849, 1011, 1033], "tadej": [1041, 1042], "tae": 1052, "taehoon": [1047, 1048], "taemin": 1005, "tag": [2, 47, 84, 105, 244, 337, 377, 382, 386, 387, 391, 395, 397, 411, 423, 432, 438, 504, 840, 928, 929, 930, 932, 933, 945, 961, 992, 997, 1029, 1032, 1045, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1059], "tahar": 1047, "tahiri": 1052, "taifi": 1046, "tail": [52, 150, 186, 190, 217, 219, 275, 316, 529, 532, 1005], "tail_strength": [333, 529, 532], "takanori": 1048, "take": [2, 44, 47, 52, 58, 66, 81, 88, 90, 92, 101, 109, 113, 121, 123, 137, 146, 174, 176, 179, 183, 190, 195, 201, 221, 225, 226, 241, 251, 262, 263, 269, 270, 276, 280, 284, 285, 295, 296, 299, 302, 303, 304, 306, 307, 316, 329, 333, 338, 342, 343, 346, 355, 358, 359, 362, 370, 371, 372, 377, 378, 381, 383, 385, 388, 389, 390, 391, 395, 397, 398, 406, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 427, 444, 450, 453, 454, 456, 457, 459, 464, 465, 466, 468, 470, 476, 527, 541, 546, 547, 548, 554, 555, 589, 600, 603, 604, 606, 607, 608, 618, 619, 624, 628, 629, 632, 640, 651, 657, 679, 681, 682, 683, 684, 687, 699, 700, 707, 713, 715, 717, 727, 737, 738, 746, 750, 751, 764, 779, 782, 786, 787, 788, 789, 791, 792, 795, 796, 808, 809, 813, 814, 822, 826, 836, 854, 855, 856, 858, 860, 861, 862, 863, 864, 876, 886, 907, 908, 912, 913, 914, 915, 916, 917, 918, 942, 978, 998, 1001, 1005, 1006, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1019, 1024, 1025, 1033, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "takeawai": 295, "taken": [37, 43, 46, 67, 77, 88, 90, 152, 172, 179, 190, 248, 249, 263, 281, 293, 318, 378, 380, 382, 383, 387, 397, 415, 419, 423, 427, 447, 541, 569, 570, 591, 592, 654, 655, 658, 660, 661, 662, 666, 667, 668, 669, 670, 671, 685, 687, 689, 692, 703, 885, 886, 906, 909, 915, 916, 967, 1009, 1011, 1019, 1021, 1046, 1049, 1052, 1053], "takeshi": [1048, 1053, 1054, 1055], "takeuchi": 378, "takingitcasu": [1048, 1049], "talbot": 280, "talgatomarov": 1051, "talk": [57, 104, 276, 357, 358, 359, 378, 397, 409, 1033, 1035], "talli": 421, "tallott": 1048, "talwalkar": 998, "tamara": [378, 1057, 1059], "tamer": 1055, "tami": 93, "tamir": [1051, 1054], "tamirlan1": 1051, "tamper": 47, "tampermonkei": 391, "tan": [869, 870, 1013, 1047], "tandfonlin": 415, "tang": [380, 1050, 1051, 1052], "tangent": [237, 350, 697, 701, 1007, 1034, 1035], "tanh": [350, 785, 869, 870, 1007, 1024], "tanjina": 1057, "tann": [1048, 1053], "tao": [1056, 1057], "tar": [47, 387], "taranjeet": 1046, "tarashanski": 1057, "tarbal": [387, 1055], "tarcusx": 1048, "tarfil": 47, "target": [2, 43, 45, 52, 55, 57, 63, 66, 68, 69, 80, 87, 103, 105, 107, 108, 118, 120, 127, 129, 131, 138, 145, 146, 147, 148, 150, 151, 153, 155, 157, 158, 159, 161, 165, 167, 170, 172, 174, 176, 179, 180, 186, 187, 189, 190, 191, 192, 197, 201, 202, 210, 213, 217, 219, 221, 222, 225, 226, 238, 245, 247, 248, 249, 250, 253, 254, 255, 262, 268, 269, 271, 273, 276, 278, 280, 281, 284, 285, 289, 293, 295, 296, 299, 304, 307, 308, 312, 315, 316, 326, 327, 329, 331, 335, 336, 339, 340, 342, 343, 346, 350, 352, 357, 358, 362, 363, 364, 365, 366, 370, 372, 375, 376, 377, 378, 379, 380, 383, 385, 387, 388, 391, 392, 396, 400, 409, 415, 418, 419, 422, 425, 439, 444, 445, 446, 449, 452, 471, 472, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512, 513, 516, 518, 528, 532, 539, 540, 542, 544, 545, 547, 550, 551, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 581, 590, 591, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 635, 636, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694, 695, 705, 706, 708, 709, 710, 715, 716, 717, 720, 721, 726, 728, 729, 731, 732, 734, 735, 736, 737, 738, 743, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 790, 791, 792, 793, 795, 796, 797, 798, 799, 802, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 859, 861, 862, 863, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 893, 896, 901, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 931, 932, 938, 970, 971, 972, 997, 1000, 1001, 1002, 1005, 1006, 1009, 1013, 1016, 1017, 1023, 1024, 1025, 1029, 1030, 1032, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "target_class": 321, "target_column": [496, 497, 504], "target_encod": 323, "target_filenam": [509, 513], "target_gener": 180, "target_idx": 640, "target_mean_": [893, 1019], "target_nam": [45, 57, 66, 87, 120, 127, 131, 189, 226, 238, 262, 268, 276, 284, 285, 299, 322, 339, 357, 362, 376, 378, 495, 496, 498, 500, 501, 502, 504, 505, 508, 510, 511, 512, 513, 518, 721, 1009, 1025, 1050], "target_opset": 409, "target_tag": [385, 931, 945], "target_test": [269, 517], "target_train": [269, 517], "target_typ": [322, 893, 942, 971, 1057], "target_type_": 893, "targetencod": [2, 322, 323, 397, 885, 886, 999, 1019, 1028, 1056, 1057], "targetencodertargetencod": 322, "targets_test": 249, "targets_train": 249, "targettag": [2, 931], "tari": 93, "tashai": [1048, 1049], "task": [2, 38, 43, 46, 126, 144, 145, 151, 153, 171, 182, 187, 196, 202, 203, 206, 216, 217, 233, 237, 254, 269, 272, 289, 295, 350, 359, 370, 372, 378, 380, 382, 383, 388, 389, 392, 395, 396, 397, 420, 422, 423, 424, 425, 455, 468, 501, 513, 523, 600, 603, 604, 606, 607, 608, 612, 613, 614, 617, 640, 641, 654, 655, 660, 661, 668, 669, 670, 671, 682, 689, 692, 735, 737, 738, 762, 790, 792, 795, 797, 809, 813, 826, 832, 974, 975, 1006, 1009, 1010, 1011, 1012, 1020, 1022, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1040, 1045, 1049, 1055], "tast": 1040, "tata": 1057, "tau": 1019, "tau_0": 544, "tavenard": 1052, "tax": 0, "taxonom": 380, "taylor": [422, 1048, 1050, 1051, 1054], "tb": 391, "tc": [172, 380, 398], "tcg": 182, "tch": [172, 380], "tcompl": 93, "tcpdump": 378, "tda": 1028, "teach": 383, "teacher": 104, "teal": [218, 227, 282], "team": [378, 386, 395, 397, 398, 1028, 1033, 1040], "teas": 190, "tech": [51, 380, 850], "technic": [182, 190, 218, 238, 329, 378, 380, 383, 397, 422, 660, 672, 693, 694, 907, 998, 1005, 1006, 1012], "technion": [672, 693, 694, 1005], "techniqu": [11, 26, 51, 56, 104, 106, 125, 133, 138, 148, 164, 171, 172, 186, 187, 189, 225, 239, 241, 280, 293, 300, 328, 336, 350, 361, 372, 380, 395, 397, 409, 413, 415, 419, 420, 421, 422, 423, 424, 454, 455, 456, 457, 542, 562, 685, 697, 698, 701, 702, 734, 764, 1001, 1005, 1006, 1008, 1009, 1012, 1015, 1017, 1021, 1023, 1025, 1029, 1033, 1053], "technolog": 380, "technologi": [172, 380, 415, 1028, 1033], "technometr": [380, 417, 476, 481, 1015], "tediou": [158, 269], "teen": 1019, "teevan": [849, 1011], "teh": [868, 1014], "tejesh95": 1044, "telecom": 1033, "telenczuk": [172, 1049, 1052, 1053, 1055], "tell": [174, 190, 191, 251, 275, 346, 351, 371, 378, 415, 423, 571, 587, 998, 1003, 1016], "temp": [43, 191], "temp_fold": 974, "temperatur": [191, 423, 1016], "tempfil": [89, 298, 325, 416, 1012], "templat": [383, 387, 388, 397, 398, 565, 566, 571, 572, 573, 574, 1028], "templateclassifi": 385, "tempor": [52, 153, 202, 1028, 1029], "temporari": [89, 104, 106, 370, 475, 695, 789, 910, 1012, 1043, 1044, 1047, 1053, 1054], "temporarili": [415, 1045], "temporarydirectori": [298, 325], "tempt": 190, "temptat": [366, 383], "ten": [54, 57, 137, 143, 153, 172, 238, 266, 378, 380, 422, 528, 917, 1049], "tenavi": 1054, "tend": [43, 51, 64, 72, 74, 78, 87, 90, 92, 170, 172, 190, 191, 206, 217, 222, 235, 254, 260, 263, 272, 276, 295, 314, 350, 359, 370, 372, 383, 385, 397, 413, 415, 417, 420, 422, 424, 444, 455, 661, 858, 889, 901, 956, 1005, 1006, 1012, 1025], "tendenc": [153, 242, 1005, 1006, 1008, 1011, 1014], "tenenbaum": [696, 1006], "tenenhau": 380, "tensor": [2, 195, 375, 411, 420, 546, 548, 555, 647, 648, 649, 1035, 1052, 1058], "tensorflow": [45, 395], "tensorsketch": 1001, "tent": 389, "tenur": 1033, "teon": 1052, "terenc": [1052, 1053], "term": [2, 43, 53, 54, 62, 68, 93, 128, 140, 143, 147, 150, 179, 189, 202, 204, 205, 206, 217, 219, 221, 231, 234, 235, 254, 269, 273, 277, 296, 311, 328, 350, 353, 357, 359, 372, 383, 385, 395, 413, 415, 417, 419, 420, 422, 450, 454, 456, 459, 466, 469, 532, 543, 546, 548, 552, 555, 557, 596, 597, 598, 599, 612, 615, 616, 640, 641, 648, 650, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 680, 681, 682, 683, 684, 686, 688, 695, 703, 738, 746, 791, 792, 795, 869, 870, 887, 891, 894, 912, 913, 914, 915, 916, 917, 918, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1013, 1014, 1019, 1023, 1024, 1048, 1054, 1055, 1056], "term1": 423, "term2": 423, "term3": 423, "termin": [371, 388, 389, 391, 401, 415, 429, 455, 468, 561, 562, 566, 567, 568, 571, 573, 674, 675, 676, 684, 686, 869, 870, 921, 923, 1015, 1025], "terminalipythonapp": 389, "terminalpdb": 391, "termination_condition_": 909, "terminologi": [397, 1048], "terraza": 1052, "terri": 1044, "terrycojon": 1044, "tesson": 415, "test": [2, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 67, 68, 69, 89, 104, 105, 117, 128, 137, 140, 142, 143, 144, 145, 149, 150, 151, 152, 153, 163, 165, 166, 168, 171, 174, 175, 187, 189, 190, 191, 192, 193, 195, 202, 206, 212, 213, 216, 217, 218, 219, 221, 224, 225, 232, 233, 235, 241, 245, 250, 251, 253, 262, 267, 268, 269, 270, 273, 274, 275, 276, 277, 279, 280, 282, 283, 285, 286, 287, 289, 295, 299, 304, 305, 311, 313, 318, 320, 321, 322, 323, 332, 339, 346, 353, 359, 366, 370, 371, 377, 378, 380, 386, 387, 388, 389, 395, 396, 397, 400, 401, 408, 410, 411, 413, 414, 416, 417, 420, 422, 423, 424, 425, 432, 434, 435, 438, 441, 442, 443, 444, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 495, 496, 501, 505, 506, 510, 512, 532, 539, 545, 547, 551, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 600, 602, 603, 604, 606, 607, 608, 610, 612, 613, 614, 616, 617, 618, 619, 635, 636, 638, 643, 644, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 720, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 859, 862, 863, 869, 870, 872, 897, 898, 900, 901, 902, 903, 907, 908, 910, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 928, 929, 930, 931, 937, 948, 950, 951, 1004, 1005, 1008, 1009, 1012, 1013, 1017, 1019, 1023, 1024, 1025, 1028, 1029, 1030, 1032, 1033, 1035, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1059], "test_": [52, 158, 419], "test_0": 43, "test_4": 43, "test_accuraci": [262, 276, 289], "test_auc": 835, "test_ax": 128, "test_balanced_accuraci": 289, "test_best_it": 149, "test_check_estim": 951, "test_color": 149, "test_common": [383, 391], "test_dataset": 377, "test_devi": 152, "test_enable_hist_gradient_boost": 387, "test_error": 288, "test_fn": 1009, "test_fold": [419, 821], "test_fract": 1040, "test_idx": [52, 397], "test_import": 192, "test_index": [262, 338, 419, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829], "test_indx": 419, "test_lin": 149, "test_logist": [383, 391], "test_ms": 332, "test_neg_mean_absolute_error": [43, 219], "test_neg_mean_squared_error": [219, 835], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 278, "test_positive_likelihood_ratio": 278, "test_prec_macro": 419, "test_precision_macro": 419, "test_r2": 835, "test_rec_macro": 419, "test_recall_macro": 419, "test_requiring_mpl_fixtur": 383, "test_result": 192, "test_scor": [147, 149, 151, 153, 225, 274, 277, 293, 322, 353, 361, 396, 419, 814, 831, 835, 836, 839], "test_scores_nb": 277, "test_scores_svm": 277, "test_set": 413, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 67, 68, 105, 142, 148, 149, 151, 152, 153, 157, 189, 195, 202, 212, 217, 224, 225, 232, 233, 269, 272, 273, 277, 282, 284, 288, 295, 304, 305, 311, 313, 314, 318, 320, 321, 327, 346, 353, 366, 388, 419, 706, 810, 825, 828, 829, 838, 840, 861, 999, 1011, 1012, 1040, 1041, 1046, 1047, 1052], "test_sklearn_compatible_estim": [325, 951], "test_sparsifi": 391, "test_stat": 47, "test_tim": [250, 357], "test_tp": 1009, "test_val": 384, "test_your_test_nam": 371, "tested_neg": 289, "tested_posit": 289, "testpypi": 387, "teunp": 1054, "texa": [51, 104], "text": [2, 42, 45, 46, 49, 50, 51, 54, 57, 67, 68, 72, 75, 79, 88, 91, 92, 93, 95, 96, 97, 99, 104, 113, 114, 135, 143, 148, 170, 182, 193, 198, 211, 212, 244, 248, 251, 255, 256, 260, 262, 267, 274, 275, 281, 282, 286, 301, 304, 306, 311, 318, 328, 334, 336, 352, 361, 370, 372, 375, 376, 377, 383, 388, 395, 397, 403, 413, 415, 416, 418, 419, 420, 422, 425, 454, 456, 471, 475, 494, 495, 496, 507, 511, 516, 529, 544, 552, 572, 596, 597, 598, 599, 623, 633, 660, 666, 674, 676, 682, 684, 705, 711, 713, 715, 721, 725, 737, 738, 745, 801, 803, 808, 822, 838, 847, 849, 851, 854, 859, 872, 873, 875, 876, 884, 908, 909, 910, 912, 924, 925, 926, 953, 998, 1001, 1005, 1007, 1009, 1010, 1011, 1013, 1016, 1019, 1021, 1023, 1024, 1027, 1029, 1030, 1033, 1035, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "text1": 423, "text2": 423, "text2d": 241, "text3": 423, "text3d": [80, 129], "text_": 705, "text_kw": [705, 1055], "text_preprocess": 471, "text_stat": 104, "text_stats_transform": 104, "textbook": [423, 598], "textcoord": [48, 195], "textrm": 1024, "texttt": 1009, "textual": [420, 429, 1025, 1049], "textur": [172, 380, 766, 767, 1007], "tf": [2, 54, 57, 248, 357, 358, 359, 378, 420, 529, 552, 596, 597, 598, 599, 851, 859, 884, 998, 1007, 1011, 1019, 1028], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 598, "tfidf": [54, 104, 339, 423, 599], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [2, 339, 358, 359, 423, 496, 599, 1047, 1048, 1054, 1056, 1057, 1058], "tfidfvector": [2, 54, 57, 104, 276, 357, 378, 420, 423, 496, 596, 597, 598, 1040, 1042, 1048, 1049, 1050, 1053, 1054, 1058], "tfidfvectorizertfidfvector": 276, "tfifi": 1053, "tfrac": 425, "tgct": 182, "tgz": 45, "th": [137, 328, 365, 396, 415, 419, 422, 430, 448, 452, 453, 458, 460, 466, 470, 479, 558, 565, 566, 567, 568, 569, 570, 572, 573, 574, 601, 602, 640, 656, 657, 677, 679, 688, 704, 726, 788, 829, 893, 943, 999, 1005, 1009, 1013, 1016, 1023, 1024, 1055], "th0rwa": [1050, 1051], "thakur": [1043, 1044], "thaler": 1046, "than": [2, 25, 43, 44, 46, 50, 51, 53, 57, 64, 66, 67, 75, 79, 82, 88, 90, 106, 109, 113, 115, 118, 121, 123, 126, 128, 130, 137, 139, 140, 142, 143, 144, 146, 147, 150, 153, 170, 172, 174, 180, 185, 190, 191, 192, 195, 197, 202, 203, 206, 217, 219, 223, 233, 234, 235, 241, 244, 250, 251, 252, 254, 261, 269, 272, 273, 275, 276, 277, 278, 281, 284, 289, 293, 295, 296, 302, 303, 314, 316, 320, 321, 322, 323, 327, 329, 331, 333, 336, 350, 357, 358, 359, 366, 370, 371, 372, 377, 378, 379, 381, 382, 383, 385, 388, 389, 391, 397, 398, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 461, 464, 467, 470, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 501, 502, 504, 517, 522, 523, 531, 539, 542, 543, 544, 545, 546, 548, 549, 550, 552, 555, 556, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 581, 589, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 635, 636, 638, 642, 648, 650, 651, 652, 654, 655, 660, 661, 663, 666, 667, 668, 669, 670, 671, 674, 675, 676, 679, 680, 682, 684, 685, 686, 687, 690, 695, 700, 702, 704, 712, 713, 720, 728, 729, 730, 731, 732, 743, 744, 747, 772, 787, 788, 789, 791, 793, 803, 805, 806, 808, 811, 812, 818, 822, 827, 829, 830, 833, 834, 835, 836, 837, 840, 842, 843, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 866, 869, 870, 875, 885, 886, 887, 889, 890, 892, 895, 901, 902, 906, 909, 912, 913, 914, 917, 918, 920, 921, 922, 923, 924, 929, 944, 956, 958, 959, 965, 971, 977, 979, 982, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1019, 1023, 1024, 1025, 1028, 1029, 1032, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "thanh": 1058, "thank": [0, 43, 55, 62, 90, 118, 192, 195, 217, 284, 357, 358, 382, 391, 1028, 1033, 1040, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "tharak": 1057, "thebabush": [1057, 1058], "thedevpanda": 1055, "thei": [0, 8, 25, 30, 31, 43, 52, 63, 72, 85, 92, 115, 125, 135, 138, 144, 145, 147, 149, 151, 153, 154, 168, 171, 172, 174, 175, 179, 190, 191, 202, 203, 206, 212, 217, 218, 235, 238, 241, 244, 250, 251, 254, 268, 272, 275, 276, 278, 284, 289, 293, 296, 298, 312, 316, 321, 327, 329, 350, 357, 358, 363, 364, 366, 370, 371, 372, 376, 378, 379, 380, 381, 382, 383, 384, 385, 387, 391, 392, 395, 396, 397, 398, 406, 409, 412, 414, 415, 416, 417, 418, 420, 422, 424, 425, 427, 447, 449, 453, 460, 461, 474, 504, 516, 517, 541, 543, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 605, 618, 627, 637, 651, 654, 655, 660, 666, 667, 668, 669, 670, 678, 680, 684, 686, 689, 695, 770, 771, 773, 776, 782, 797, 808, 822, 841, 847, 848, 849, 850, 851, 869, 872, 874, 880, 891, 892, 914, 917, 920, 921, 922, 923, 927, 998, 999, 1001, 1003, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1025, 1033, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056], "theil": [2, 187, 196, 220, 223, 316, 657, 665, 679, 686, 687, 1030], "theilsen": 223, "theilsenregressor": [2, 223, 234, 657, 679, 686, 1005, 1044, 1052, 1054, 1059], "theirs": 357, "them": [16, 43, 44, 47, 68, 74, 75, 84, 88, 90, 91, 95, 100, 101, 104, 105, 118, 123, 125, 128, 138, 154, 167, 172, 174, 185, 186, 190, 191, 192, 195, 197, 202, 205, 212, 218, 219, 221, 235, 248, 251, 254, 255, 269, 273, 275, 276, 278, 284, 293, 298, 316, 321, 323, 328, 339, 346, 359, 365, 370, 372, 378, 383, 384, 385, 386, 387, 391, 395, 397, 398, 400, 406, 409, 413, 414, 415, 416, 419, 420, 422, 423, 425, 451, 454, 456, 457, 464, 471, 474, 501, 502, 516, 575, 576, 577, 578, 615, 616, 624, 628, 629, 632, 640, 647, 672, 700, 776, 779, 782, 786, 787, 788, 789, 797, 808, 822, 829, 837, 872, 876, 881, 882, 886, 890, 892, 893, 902, 903, 909, 920, 921, 950, 951, 965, 974, 998, 999, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1019, 1024, 1025, 1027, 1028, 1032, 1033, 1040, 1041, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "themat": 397, "theme": [378, 383, 401, 408, 1040], "themrmax": [1046, 1047], "themselv": [64, 190, 316, 379, 385, 391, 397, 406, 412, 415, 422, 423, 425, 453, 623, 800, 1025, 1050], "theodor": 1045, "theofilo": 1047, "theoptip": [1050, 1051], "theorem": [32, 174, 353, 1011], "theoret": [37, 72, 92, 174, 269, 415, 422, 561, 562, 647, 712, 734, 764, 912, 998, 1005, 1006, 1008, 1009, 1011, 1021, 1023, 1024, 1033], "theori": [8, 147, 250, 265, 353, 380, 415, 419, 422, 698, 702, 734, 764, 904, 905, 956, 998, 1005, 1006, 1008, 1009, 1010, 1024, 1025], "theotheo": 1050, "thereaft": [190, 197], "therebi": [43, 190, 419, 422, 1001, 1050], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 87, 88, 105, 106, 109, 113, 118, 128, 132, 137, 140, 142, 150, 153, 156, 158, 171, 189, 192, 217, 221, 233, 234, 260, 265, 266, 269, 276, 278, 289, 293, 295, 299, 313, 316, 321, 335, 346, 353, 354, 357, 358, 365, 370, 377, 381, 385, 388, 395, 406, 409, 411, 415, 416, 417, 419, 420, 422, 423, 444, 543, 549, 557, 559, 561, 562, 567, 568, 572, 573, 612, 614, 666, 667, 673, 676, 679, 684, 686, 687, 709, 720, 743, 765, 805, 872, 873, 885, 889, 893, 901, 928, 999, 1003, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1017, 1019, 1024, 1025, 1029, 1049, 1050, 1053, 1054, 1055, 1056, 1057], "therein": 676, "thereof": 397, "theriley106": 1048, "thesi": [0, 380, 415, 422], "theta": [175, 176, 178, 180, 182, 183, 252, 420, 425, 531, 544, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 700, 1011, 1025], "theta0": 175, "theta1": 175, "theta_": [850, 1011], "theta_c": [252, 531], "theta_d": 420, "theta_i": 1011, "theta_l": 425, "theta_opt": [618, 619], "thi": [0, 2, 7, 11, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 372, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 400, 401, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 489, 490, 491, 492, 494, 496, 497, 501, 502, 504, 505, 506, 507, 509, 510, 511, 513, 516, 517, 523, 524, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 708, 709, 710, 711, 712, 714, 715, 717, 719, 720, 721, 722, 724, 725, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 740, 744, 745, 746, 747, 748, 749, 750, 751, 756, 762, 763, 764, 765, 766, 767, 769, 770, 771, 773, 776, 777, 782, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 927, 928, 929, 931, 932, 933, 934, 938, 939, 944, 945, 946, 948, 950, 951, 956, 958, 961, 964, 965, 966, 967, 968, 969, 971, 974, 975, 978, 979, 982, 983, 992, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "thibault": 1049, "thibaut": 1054, "thibsej": 1049, "thick": [95, 306, 1012], "thierno": 1050, "thierri": [0, 1033, 1046, 1047, 1054], "thij": [1052, 1055, 1056], "thin": [239, 628], "thing": [48, 70, 238, 270, 357, 371, 372, 378, 382, 383, 385, 395, 398, 415, 417, 423, 567, 568, 1005, 1019, 1033, 1046], "think": [44, 72, 190, 191, 357, 358, 383, 391, 421, 1008, 1029, 1033], "thinner": 102, "third": [70, 146, 151, 167, 172, 182, 235, 244, 266, 293, 301, 318, 331, 371, 378, 382, 385, 395, 398, 409, 423, 542, 596, 597, 598, 599, 810, 811, 812, 817, 854, 855, 856, 858, 860, 890, 902, 998, 1020, 1040, 1051, 1056, 1057, 1059], "thirion": [0, 404, 1040, 1046, 1047, 1053], "thirteen": 380, "thirti": 1027, "thiruvenkadam": 1054, "this_centroid": 77, "this_cov": 115, "this_cv": 270, "this_di": 51, "this_dx": 51, "this_i": [61, 223], "this_max_it": 232, "this_p": 63, "this_prec": 115, "this_scor": 349, "this_sw": 61, "this_x": [61, 215, 223], "thoma": [0, 130, 371, 373, 398, 404, 908, 1005, 1019, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "thomas9292": 1052, "thomaz": 1051, "thomo": 93, "thompson": [1043, 1055, 1056], "thorben": 1052, "thorough": 1033, "thoroughli": 1014, "thorsten": 1033, "those": [43, 46, 51, 55, 57, 90, 95, 105, 138, 150, 153, 170, 172, 189, 190, 191, 192, 193, 217, 219, 221, 235, 242, 248, 251, 253, 254, 266, 268, 269, 275, 278, 281, 293, 312, 316, 321, 333, 343, 346, 357, 358, 359, 370, 371, 377, 383, 385, 387, 388, 389, 390, 395, 397, 398, 401, 412, 413, 414, 415, 419, 420, 422, 423, 425, 455, 457, 468, 471, 475, 502, 503, 504, 511, 565, 566, 572, 573, 577, 578, 589, 700, 705, 720, 726, 744, 808, 811, 812, 820, 822, 829, 854, 855, 856, 858, 860, 861, 862, 863, 864, 912, 913, 914, 917, 920, 921, 922, 923, 968, 998, 1001, 1005, 1008, 1009, 1011, 1012, 1013, 1016, 1019, 1025, 1027, 1028, 1033, 1040, 1043, 1046, 1047, 1048, 1053, 1054, 1055, 1056, 1057, 1058], "though": [80, 90, 143, 172, 195, 197, 254, 281, 301, 318, 320, 358, 359, 366, 370, 377, 380, 383, 396, 397, 415, 420, 421, 422, 423, 424, 707, 815, 817, 912, 998, 999, 1001, 1006, 1009, 1012, 1017, 1019, 1023, 1048], "thought": [237, 301, 397, 415, 453, 1006, 1010], "thoui": [0, 405, 1040], "thousand": [77, 143, 153, 248, 250, 320, 358, 378, 415, 422, 869, 870, 917, 1006, 1049, 1051], "thread": [296, 326, 329, 381, 383, 395, 397, 415, 422, 571, 844, 845, 974, 975, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1055, 1056, 1057], "threadpoolctl": [41, 371, 381, 401, 408], "threadsaf": 1053, "three": [43, 46, 63, 70, 75, 76, 80, 81, 90, 93, 111, 120, 137, 142, 144, 147, 148, 149, 159, 160, 161, 169, 172, 182, 190, 202, 209, 214, 217, 219, 226, 228, 250, 251, 260, 263, 295, 322, 323, 326, 371, 376, 379, 380, 387, 401, 409, 412, 415, 419, 420, 421, 423, 458, 469, 506, 717, 958, 1002, 1004, 1005, 1006, 1009, 1012, 1019, 1023, 1024, 1027, 1040], "three_d_arrai": 929, "thresh": 1044, "threshold": [2, 50, 62, 77, 100, 126, 132, 172, 187, 191, 193, 212, 245, 247, 267, 272, 273, 274, 279, 282, 295, 331, 332, 334, 362, 365, 397, 410, 415, 420, 422, 424, 448, 449, 452, 453, 476, 504, 508, 516, 517, 539, 545, 550, 556, 557, 558, 559, 569, 571, 596, 599, 601, 605, 610, 611, 652, 666, 675, 679, 684, 686, 700, 706, 708, 710, 711, 714, 715, 726, 728, 734, 735, 747, 748, 750, 764, 790, 792, 795, 796, 797, 802, 805, 806, 807, 808, 827, 830, 838, 847, 858, 859, 873, 875, 877, 879, 892, 895, 907, 908, 909, 910, 917, 924, 926, 982, 1005, 1009, 1012, 1013, 1015, 1019, 1022, 1024, 1025, 1029, 1030, 1035, 1040, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1059], "threshold_": [605, 1047], "threshold_lambda": 652, "threshold_sign": 365, "thriller": [423, 883], "thrive": [0, 383], "throat": [50, 309, 378, 506], "through": [0, 2, 46, 52, 70, 142, 172, 182, 190, 221, 237, 249, 270, 275, 278, 301, 320, 321, 344, 351, 359, 365, 380, 383, 385, 390, 392, 397, 398, 401, 406, 414, 415, 418, 420, 422, 424, 425, 432, 438, 453, 471, 474, 479, 543, 549, 565, 566, 569, 572, 573, 574, 589, 601, 602, 605, 655, 659, 661, 663, 666, 667, 669, 671, 673, 676, 684, 685, 696, 699, 728, 814, 831, 888, 900, 904, 905, 920, 921, 922, 923, 963, 966, 998, 999, 1006, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1023, 1024, 1025, 1033, 1040, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059], "throughout": [331, 366, 397, 635, 809, 869, 870, 1043, 1048], "throughput": [369, 1028, 1035, 1043], "throw": [2, 313, 392, 937, 1044, 1047, 1048, 1049, 1050, 1054], "thrown": [719, 1049, 1050], "thu": [43, 44, 61, 62, 63, 64, 75, 88, 90, 95, 111, 115, 126, 128, 140, 142, 143, 145, 147, 153, 168, 174, 179, 180, 191, 202, 204, 206, 217, 219, 235, 244, 250, 255, 262, 269, 273, 275, 280, 281, 282, 289, 299, 323, 325, 328, 361, 366, 370, 371, 378, 385, 389, 395, 397, 406, 413, 414, 415, 419, 420, 422, 423, 425, 426, 444, 446, 470, 523, 535, 561, 562, 563, 564, 565, 566, 571, 572, 573, 574, 611, 614, 618, 630, 635, 640, 641, 651, 653, 666, 685, 713, 726, 733, 796, 803, 808, 810, 815, 817, 822, 829, 843, 846, 881, 912, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1015, 1016, 1019, 1021, 1022, 1023, 1024, 1029, 1033, 1040, 1042, 1046, 1048, 1049, 1050, 1052, 1056], "thuan": 1051, "thukarama": 1055, "thumb": [13, 143, 195, 370, 383, 384, 395, 415, 666, 667, 674, 675, 676, 684, 685, 686, 912, 1009], "thumbnail": 1040, "th\u00e9ophil": 1056, "ti": [104, 217, 262, 265, 273, 354, 370, 391, 413, 415, 607, 608, 643, 728, 734, 764, 805, 806, 914, 917, 920, 1008, 1009, 1024, 1041, 1043, 1044, 1048, 1050, 1054, 1055, 1056], "tiago": [1041, 1045], "tialo": [1057, 1058, 1059], "tian": [415, 449, 1045, 1046, 1047], "tianqi": 422, "tiao": [1045, 1046], "tib": [690, 691], "tibshirani": [140, 141, 152, 172, 204, 274, 380, 419, 422, 528, 567, 568, 636, 664, 729, 731, 732, 842, 859, 920, 921, 999, 1003, 1005, 1010, 1016, 1025], "tic": [172, 191, 254, 286, 1011], "tic_bwd": 172, "tic_fwd": 172, "ticconi": 1046, "tick": [47, 78, 95, 177, 255, 286, 383, 640, 836], "tick_bottom": 316, "tick_label": [151, 193, 325], "tick_labels_dict": [151, 193, 325], "tick_labels_parameter_nam": [151, 193, 325], "tick_left": 316, "tick_param": [46, 54, 161, 260, 275, 320, 338], "tick_right": 46, "ticker": [237, 239, 242, 296], "ticket": [330, 383], "tidelift": 0, "tie": [187, 209, 341, 395, 422, 520, 840, 917, 1010, 1024, 1025, 1030, 1041, 1056], "tieleman": [868, 1014], "tien": 1045, "tiernei": [1048, 1049, 1050], "tight": [75, 132, 139, 146, 165, 168, 205, 209, 210, 211, 222, 226, 229, 234, 239, 242, 264, 296, 302, 303, 307, 308, 342, 346, 349, 351, 362, 590, 700, 1052], "tight_layout": [45, 47, 62, 64, 67, 75, 87, 90, 100, 107, 109, 118, 123, 124, 125, 133, 137, 139, 144, 146, 148, 151, 156, 158, 160, 176, 178, 183, 185, 189, 190, 192, 193, 197, 198, 202, 207, 215, 217, 225, 228, 232, 235, 237, 249, 254, 270, 271, 287, 295, 296, 298, 308, 317, 318, 319, 320, 321, 325, 329, 344, 358, 361, 362, 379], "tijanajovanov": 1052, "tikhonov": [181, 425, 680], "tild": [878, 1017, 1019], "tilen": 1050, "till": [415, 449, 796, 1009], "tim": [0, 404, 1040, 1045, 1046, 1049, 1050, 1051, 1053, 1055, 1056, 1057, 1058, 1059], "time": [0, 2, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 372, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 391, 395, 397, 398, 406, 409, 411, 412, 413, 415, 417, 418, 420, 422, 423, 426, 444, 448, 450, 451, 452, 453, 454, 457, 459, 462, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 479, 499, 504, 507, 509, 527, 531, 542, 544, 546, 548, 549, 555, 570, 575, 576, 577, 578, 598, 618, 627, 635, 636, 637, 638, 642, 647, 648, 651, 654, 658, 660, 662, 668, 670, 672, 674, 675, 680, 681, 682, 684, 685, 686, 693, 694, 698, 700, 702, 709, 750, 753, 754, 756, 798, 802, 805, 806, 808, 810, 811, 812, 813, 815, 817, 822, 823, 824, 827, 829, 833, 834, 835, 836, 837, 838, 840, 842, 847, 848, 849, 850, 851, 852, 853, 860, 862, 863, 864, 868, 869, 870, 871, 872, 873, 874, 876, 877, 879, 882, 885, 887, 891, 896, 904, 905, 909, 910, 914, 917, 918, 926, 950, 951, 958, 974, 998, 999, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1033, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "time_dens": 332, "time_spars": 332, "time_step": [202, 870], "timeit": [232, 263, 389], "timeout": [504, 974, 1054], "timer": [263, 389], "times_init": 263, "timescal": 249, "timeseri": 43, "timeseriessplit": [2, 43, 52, 153, 202, 270, 419, 1046, 1047, 1052], "timo": 1052, "timofei": 1055, "timotheemathieu": 1053, "timothi": [1045, 1053], "timsaur": 1050, "tinertia": 93, "ting": [571, 1015, 1048, 1049], "tingshan": 1053, "tini": [1042, 1055, 1058], "tinoco": 1057, "tinta": 322, "tip": [366, 369, 383, 386, 389, 410, 423, 542, 549, 653, 700, 1005, 1031, 1032, 1034, 1035, 1043], "tiphain": 1051, "tirth": [1050, 1051], "titan": [105, 192, 258, 325, 329, 330, 1017], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 111, 112, 114, 115, 117, 118, 120, 123, 124, 125, 126, 127, 130, 131, 132, 138, 139, 140, 143, 145, 146, 147, 150, 151, 153, 154, 157, 160, 161, 165, 167, 168, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 190, 197, 198, 200, 202, 204, 205, 206, 209, 210, 216, 217, 219, 221, 222, 223, 225, 226, 231, 234, 235, 237, 238, 239, 244, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 274, 275, 276, 278, 279, 280, 284, 285, 290, 298, 299, 302, 303, 304, 305, 307, 308, 309, 316, 320, 321, 322, 323, 337, 340, 342, 343, 344, 345, 346, 349, 350, 354, 355, 357, 362, 363, 364, 379, 382, 383, 387, 391, 416, 1009, 1032], "title_bow": 416, "titles_opt": 268, "titov": [1048, 1050, 1053, 1054], "titu": 1051, "tiwari": 1052, "tiziano": 1040, "tjoa": 1044, "tkammi": 1046, "tkdd": 571, "tliu68": 1053, "tm": [51, 1012], "tmp": 387, "tmpdir": [298, 325], "tn": [269, 333, 720, 726, 1009], "tn_c": 284, "tnr": 269, "tnwei": 1052, "to_british": 423, "to_fram": 109, "to_list": 193, "to_numpi": [179, 269], "to_onnx": 409, "to_replac": [43, 191], "toarrai": [46, 332, 339, 365, 416, 423, 574, 590, 596, 598, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 885, 902, 903, 957, 979, 980, 982, 990, 991, 999, 1012, 1019, 1057], "toastedcornflak": [1046, 1047], "toastedyeast": [1054, 1055], "tobia": [1048, 1053, 1055], "tobychees": [1047, 1048], "toc": [172, 254], "toc_bwd": 172, "toc_fwd": 172, "toccac": 1050, "tocsc": 203, "tocsr": 55, "toctre": [383, 401, 408], "tod": [415, 426, 451], "todai": 179, "todens": [983, 984, 985, 986, 987, 988, 989], "todo": [81, 248, 387, 391, 415, 1059], "toeplitz": 112, "togeth": [43, 51, 86, 95, 105, 146, 158, 174, 180, 190, 199, 238, 241, 254, 271, 322, 329, 349, 362, 366, 385, 395, 396, 397, 415, 422, 423, 424, 430, 458, 460, 575, 576, 602, 697, 723, 808, 822, 872, 873, 886, 1005, 1006, 1009, 1010, 1016, 1019, 1025, 1026, 1033, 1046, 1057], "toi": [48, 58, 71, 74, 75, 76, 77, 82, 84, 87, 88, 90, 92, 102, 113, 118, 127, 140, 154, 159, 160, 187, 200, 207, 221, 231, 243, 254, 260, 302, 303, 312, 343, 352, 376, 389, 395, 415, 422, 423, 447, 448, 449, 451, 453, 455, 456, 457, 459, 465, 476, 520, 522, 530, 571, 647, 685, 734, 764, 806, 858, 865, 873, 892, 916, 1006, 1008, 1009, 1015, 1019, 1030, 1035], "tok": [359, 423], "token": [2, 57, 359, 370, 378, 387, 423, 544, 596, 597, 598, 599, 1040, 1048, 1052, 1058], "token_featur": 423, "token_freq": 359, "token_pattern": [359, 423, 596, 597, 599], "tokoroten": 1045, "tokyo": [880, 1020], "tol": [46, 49, 55, 107, 123, 148, 153, 172, 185, 198, 208, 210, 224, 225, 231, 233, 244, 255, 261, 263, 314, 328, 353, 357, 385, 389, 422, 427, 450, 454, 456, 459, 466, 469, 478, 479, 485, 489, 490, 491, 539, 540, 541, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 567, 568, 569, 570, 610, 635, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 680, 682, 684, 685, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 699, 701, 703, 805, 806, 822, 861, 869, 870, 907, 908, 912, 913, 914, 915, 916, 917, 918, 994, 1005, 1023, 1024, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1057, 1058], "tola": 1050, "told": 423, "toledano": 1048, "toler": [81, 107, 153, 185, 208, 210, 233, 234, 350, 359, 378, 385, 392, 415, 427, 450, 454, 459, 466, 469, 478, 479, 485, 489, 490, 491, 539, 540, 541, 543, 544, 548, 549, 550, 551, 552, 553, 555, 556, 567, 568, 569, 570, 635, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 684, 686, 687, 689, 690, 691, 692, 696, 697, 698, 699, 701, 702, 703, 852, 853, 857, 861, 869, 870, 907, 908, 912, 913, 914, 915, 916, 917, 918, 994, 1005, 1009, 1023, 1024, 1052, 1053, 1054, 1055], "toleranbc": 1049, "tolist": [43, 149, 185, 274, 327, 378], "tom": [0, 404, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "tom1092": 1053, "toma": 1044, "tomasz": 1053, "tomato": 218, "tomatti": 1055, "tomdlt": 1046, "tomiock": [1055, 1056], "tommaso": 1053, "tommi": [1047, 1048, 1049], "tomographi": [42, 55, 101, 187, 660, 680, 1005, 1030], "tomohiro": 1053, "tomorrow": 414, "tom\u00e1": [1053, 1054], "tongyu": 1057, "toni": [45, 378, 571, 892, 1015, 1053, 1054], "tonk": 1047, "too": [43, 46, 51, 52, 55, 64, 79, 85, 90, 92, 97, 104, 108, 115, 127, 150, 153, 185, 190, 192, 202, 218, 221, 238, 248, 254, 261, 268, 269, 273, 282, 291, 313, 322, 346, 357, 363, 364, 370, 380, 383, 389, 391, 395, 397, 413, 415, 417, 419, 422, 423, 424, 427, 444, 456, 546, 687, 700, 715, 847, 848, 849, 850, 851, 877, 890, 892, 1004, 1006, 1008, 1009, 1011, 1012, 1016, 1041, 1044, 1047, 1048, 1049, 1050, 1052, 1058], "took": [0, 43, 77, 283], "tool": [21, 29, 41, 48, 50, 52, 148, 190, 251, 269, 273, 278, 366, 376, 377, 378, 381, 383, 385, 386, 388, 389, 390, 391, 396, 397, 398, 400, 401, 406, 409, 415, 416, 417, 494, 700, 709, 998, 1004, 1005, 1009, 1015, 1019, 1024, 1026, 1028, 1029, 1033, 1047, 1050, 1053, 1054, 1055], "toolbox": [395, 1028, 1033], "toolchain": 381, "toolkit": [370, 1028, 1033], "toolset": 1033, "tooth": 124, "tootoonian": 1053, "top": [2, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 80, 86, 97, 99, 105, 125, 135, 142, 143, 146, 153, 158, 161, 190, 217, 219, 228, 232, 244, 254, 255, 260, 262, 263, 266, 272, 276, 284, 285, 301, 316, 318, 322, 326, 332, 335, 336, 346, 350, 357, 366, 383, 385, 389, 395, 412, 413, 415, 420, 421, 422, 494, 595, 596, 599, 607, 734, 764, 802, 924, 926, 998, 1001, 1005, 1007, 1017, 1028, 1033, 1054, 1059], "top10": 378, "top5": 357, "top_featur": 54, "top_features_ind": 54, "top_indic": 357, "top_k_accuraci": 1009, "top_k_accuracy_scor": [2, 1009, 1052, 1054], "tophat": [301, 421, 852, 853, 857], "topic": [42, 45, 46, 47, 104, 187, 357, 358, 359, 378, 379, 419, 420, 423, 495, 505, 544, 546, 548, 555, 596, 599, 1005, 1010, 1028, 1029, 1030, 1045, 1047], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [420, 544], "topic_word_prior_": 544, "topisan": 1050, "toplak": 1056, "topolog": [470, 1028], "topologi": [241, 242], "torch": [411, 1058], "torgo": 377, "toro": 322, "toronto": [542, 652, 868], "torr": [1049, 1058], "torrella": [1049, 1050, 1056, 1059], "tortois": 1005, "tosequ": 1058, "toshihiro": [1046, 1047, 1053], "toshniw": 1052, "tot": 51, "total": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 362, 363, 364, 365, 371, 377, 378, 380, 389, 397, 412, 415, 421, 423, 426, 438, 451, 472, 489, 490, 491, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 513, 518, 520, 522, 523, 527, 530, 531, 544, 552, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 591, 592, 598, 602, 604, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 678, 679, 680, 681, 684, 685, 686, 687, 705, 712, 713, 721, 737, 738, 739, 742, 746, 747, 765, 777, 791, 792, 795, 802, 803, 804, 808, 822, 833, 834, 835, 845, 846, 847, 848, 855, 857, 863, 870, 887, 891, 913, 915, 918, 920, 921, 922, 923, 956, 998, 1005, 1006, 1009, 1010, 1011, 1012, 1019, 1023, 1024, 1025, 1030, 1041, 1046, 1048, 1056, 1057], "total_cel": 153, "total_fit_tim": 47, "total_sampl": [338, 544], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 158, "totrmsabvgrd": 147, "tottim": 389, "tour": [0, 404, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "tournament": 998, "toward": [0, 63, 64, 98, 115, 144, 150, 157, 174, 192, 197, 221, 222, 242, 254, 353, 383, 397, 415, 455, 459, 469, 684, 686, 703, 886, 1008, 1023, 1025, 1027, 1029], "toyota": 51, "tp": [333, 415, 720, 726, 737, 738, 739, 790, 791, 792, 795, 924, 1009], "tp_c": 284, "tpng": 924, "tpot": 1028, "tpr": [50, 245, 254, 269, 272, 284, 285, 390, 710, 714, 797, 1009, 1037, 1040, 1056], "tpr_a": 284, "tpr_b": 284, "tpr_score": 269, "tprs_lower": 285, "tprs_upper": 285, "tr": [270, 380, 387, 415, 417, 476, 477, 478, 479, 480, 481, 482, 483], "trace": [391, 415, 428, 480, 482, 483, 486, 487, 488, 697, 701, 1006, 1051], "traceback": [383, 388, 391, 395, 475, 719, 1032, 1057], "traceord": 143, "tracer0tong": 1046, "trach": 1040, "track": [135, 141, 149, 336, 383, 386, 387, 411, 542, 977, 1010, 1028, 1029, 1047, 1050], "tracker": [382, 386, 391, 395, 398, 401, 409, 1029], "tracking_select": 977, "tractabl": [43, 419, 549, 642, 1028, 1053], "trade": [37, 96, 111, 143, 153, 192, 221, 274, 276, 277, 346, 357, 397, 414, 415, 417, 561, 562, 567, 568, 642, 664, 700, 808, 811, 812, 822, 835, 1006, 1013, 1021, 1023, 1024, 1029], "tradeoff": [90, 140, 187, 249, 257, 267, 282, 283, 284, 285, 357, 370, 383, 391, 421, 523, 572, 706, 710, 735, 797, 838, 873, 892, 912, 1006, 1030, 1049, 1052], "tradit": [55, 90, 217, 232, 358, 372, 413, 422, 423, 640, 702, 1005, 1008, 1019, 1028, 1033], "tradition": 1025, "traffic": 1033, "trail": [385, 992], "train": [2, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 89, 91, 93, 99, 100, 104, 105, 109, 117, 118, 123, 126, 127, 128, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 155, 158, 159, 160, 163, 169, 174, 175, 176, 179, 180, 181, 182, 183, 187, 189, 190, 191, 192, 193, 195, 201, 202, 203, 204, 206, 208, 209, 210, 212, 213, 216, 217, 218, 219, 224, 225, 226, 229, 231, 232, 235, 244, 247, 249, 253, 262, 264, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 295, 296, 299, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 316, 318, 320, 321, 325, 328, 332, 334, 335, 336, 339, 340, 342, 345, 352, 353, 359, 360, 363, 364, 366, 370, 371, 372, 375, 378, 380, 385, 388, 395, 396, 397, 411, 413, 414, 415, 416, 417, 418, 420, 422, 423, 424, 425, 427, 444, 447, 448, 450, 451, 454, 456, 458, 459, 460, 461, 466, 472, 476, 477, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 495, 496, 501, 504, 505, 506, 508, 512, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 635, 636, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 695, 696, 697, 699, 700, 704, 711, 749, 796, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 877, 878, 881, 882, 885, 886, 890, 891, 892, 893, 897, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 982, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1035, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "train_0": 43, "train_4": 43, "train_accuraci": [262, 289], "train_auc": 835, "train_ax": 128, "train_balanced_accuraci": 289, "train_cover_std": 50, "train_dataset": [190, 377], "train_error": 288, "train_errors_with": 148, "train_errors_without": 148, "train_fract": 1040, "train_idx": [52, 190, 397], "train_import": 192, "train_index": [262, 338, 419, 809, 810, 813, 815, 816, 817, 818, 821, 823, 824, 825, 826, 827, 828, 829], "train_indx": 419, "train_pr": 148, "train_prec_macro": 419, "train_r2": 835, "train_rec_macro": 419, "train_result": 192, "train_sampl": [64, 232, 233], "train_scor": [225, 322, 353, 361, 814, 831, 835, 836, 839, 1004], "train_score_": [151, 422, 567, 568, 569, 570], "train_set": 413, "train_siz": [44, 46, 49, 137, 157, 175, 195, 233, 250, 254, 277, 288, 327, 330, 353, 810, 814, 825, 828, 836, 838, 1004, 1040, 1041, 1046, 1047], "train_size_ab": 836, "train_size_idx": 353, "train_sizes_ab": 836, "train_test_s": 250, "train_test_split": [2, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 105, 109, 118, 128, 137, 142, 144, 148, 149, 150, 151, 152, 153, 154, 157, 168, 169, 189, 190, 192, 193, 195, 202, 212, 217, 224, 225, 232, 233, 235, 245, 254, 257, 258, 268, 269, 272, 273, 278, 282, 284, 288, 295, 299, 304, 305, 311, 313, 314, 318, 320, 321, 323, 325, 326, 327, 332, 333, 339, 361, 365, 366, 388, 396, 411, 416, 419, 422, 444, 445, 566, 568, 575, 576, 705, 706, 708, 710, 807, 808, 830, 840, 843, 861, 869, 870, 872, 922, 923, 998, 999, 1009, 1011, 1012, 1017, 1019, 1024, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1053, 1057, 1058], "train_tim": [232, 250, 357, 358], "trainabl": 385, "traine": 1033, "training_data": 174, "training_data_": 1050, "training_idx": 182, "training_indic": 181, "training_noisy_target": 174, "training_sample_indic": 174, "training_tim": [148, 357], "training_time_early_stop": 148, "training_time_ful": 148, "trajectori": 141, "tran": 112, "trans_data": 239, "transact": [98, 269, 333, 380, 415, 417, 426, 428, 451, 455, 482, 542, 546, 548, 555, 571, 652, 672, 693, 694, 733, 734, 764, 777, 1005, 1009], "transax": [79, 97, 241, 244, 262, 304, 318], "transcript": 383, "transcriptom": 700, "transduc": 336, "transduct": [397, 415, 907, 908, 1029], "transduction_": [335, 336, 337, 907, 908, 909], "transfer": [153, 406, 411, 1005, 1029], "transform": [2, 7, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 81, 82, 83, 86, 89, 92, 97, 103, 107, 108, 118, 120, 125, 126, 128, 129, 131, 132, 136, 141, 143, 147, 157, 158, 169, 180, 186, 187, 190, 191, 192, 195, 209, 217, 218, 225, 231, 233, 235, 238, 241, 244, 246, 247, 249, 251, 252, 254, 258, 262, 271, 272, 273, 276, 284, 295, 296, 298, 304, 305, 306, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 330, 332, 333, 346, 349, 350, 357, 359, 366, 377, 378, 379, 380, 383, 385, 388, 392, 397, 406, 409, 411, 413, 415, 417, 418, 419, 420, 422, 423, 424, 425, 431, 436, 439, 444, 448, 449, 450, 452, 454, 456, 459, 471, 472, 473, 474, 475, 489, 490, 491, 492, 495, 496, 504, 511, 516, 517, 522, 523, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 565, 567, 569, 572, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 644, 646, 647, 648, 649, 650, 661, 666, 671, 681, 684, 692, 696, 697, 698, 699, 700, 702, 709, 710, 721, 761, 762, 793, 808, 811, 812, 822, 838, 841, 847, 856, 861, 864, 868, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 910, 912, 914, 917, 918, 931, 933, 945, 948, 950, 998, 999, 1001, 1003, 1005, 1006, 1009, 1010, 1013, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "transform_algorithm": [126, 132, 539, 545, 550, 1056], "transform_alpha": [126, 132, 539, 545, 550, 1053], "transform_dur": 296, "transform_func": 276, "transform_list": 871, "transform_max_it": [539, 545, 546, 550, 1050], "transform_method": 420, "transform_n_nonzero_coef": [126, 132, 539, 545, 550], "transform_n_nozero_coef": 132, "transform_output": [258, 269, 323, 475, 910, 1055, 1056], "transformed_grid": 156, "transformedtargetregressor": [2, 109, 190, 217, 395, 406, 416, 601, 602, 605, 1010, 1048, 1050, 1053, 1058, 1059], "transformedtargetregressortransformedtargetregressor": 190, "transformer_": [251, 472], "transformer_list": [108, 416, 871, 874, 999, 1051, 1052], "transformer_nam": [296, 471], "transformer_tag": [931, 945], "transformer_weight": [104, 471, 474, 871, 1045, 1052], "transformermixin": [2, 251, 296, 385, 397, 472, 1048, 1055, 1056, 1057], "transformers_": [471, 474, 1057, 1058], "transformertag": [2, 931, 945], "transfus": 245, "transit": [55, 353, 387, 409, 1051], "transitive_target": 55, "translat": [109, 385, 425, 535, 622, 881, 882, 898, 1006, 1009, 1033], "transluc": 163, "transpar": [67, 318, 993, 1033], "transpos": [62, 275, 427, 546, 548, 555, 668, 669, 670, 671, 796, 956, 994, 1001, 1009, 1021, 1040, 1054], "transposit": 956, "trapezoid": [2, 282, 714, 715, 1009], "travel": 0, "travers": [365, 1012, 1016, 1058, 1059], "travi": [1040, 1048], "treat": [43, 45, 105, 147, 158, 185, 190, 217, 284, 322, 327, 332, 338, 366, 383, 395, 397, 412, 422, 423, 449, 569, 570, 596, 597, 599, 615, 616, 640, 646, 653, 679, 682, 737, 738, 746, 762, 791, 792, 795, 796, 881, 882, 888, 889, 892, 893, 897, 900, 901, 903, 912, 913, 965, 999, 1001, 1005, 1009, 1010, 1016, 1019, 1023, 1025, 1044, 1052, 1056, 1057], "treatment": [114, 189, 377, 414, 420, 476, 481, 1025], "tree": [2, 43, 46, 52, 63, 64, 67, 76, 79, 90, 97, 127, 136, 139, 140, 141, 143, 147, 148, 149, 150, 151, 154, 155, 157, 158, 159, 161, 172, 182, 185, 191, 193, 201, 225, 226, 238, 251, 252, 253, 254, 255, 272, 279, 281, 293, 295, 296, 299, 301, 309, 316, 317, 321, 326, 327, 329, 366, 370, 378, 380, 389, 396, 397, 400, 413, 414, 415, 421, 426, 444, 448, 449, 450, 451, 452, 453, 455, 457, 464, 470, 503, 504, 508, 512, 522, 523, 527, 552, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 639, 640, 641, 642, 666, 696, 700, 710, 711, 719, 750, 756, 796, 798, 814, 829, 835, 836, 838, 847, 852, 853, 854, 855, 856, 857, 858, 860, 862, 863, 864, 873, 876, 885, 920, 921, 922, 923, 924, 925, 926, 951, 999, 1006, 1009, 1010, 1015, 1016, 1028, 1029, 1030, 1031, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "tree_": [325, 361, 365, 857, 920, 921, 922, 923, 1057], "tree_copi": [852, 853], "tree_disp": 255, "tree_importance_sorted_idx": 193, "tree_optim": 293, "tree_preprocessor": [158, 217], "tree_stat": [852, 853], "treelit": 1028, "trein": 1043, "tremend": [322, 422], "trend": [155, 179, 191, 247, 312, 1033, 1047], "trent": [1033, 1046], "trevor": [172, 204, 330, 380, 636, 664, 729, 731, 732, 999, 1005, 1021, 1044, 1045, 1048, 1049, 1050, 1052], "trevorstephen": [1044, 1046], "tri": [101, 131, 237, 305, 350, 371, 385, 388, 395, 398, 413, 456, 458, 460, 639, 640, 641, 678, 700, 706, 708, 710, 822, 1014, 1042, 1048, 1052, 1058], "triag": [0, 383, 386, 398], "trial": [43, 280, 454, 456, 467, 679, 805, 806, 1005, 1046], "triangl": [397, 420, 450, 454, 466, 707, 1007, 1012], "triangular": [415, 470, 619, 1006], "tribe": 378, "trick": [2, 174, 250, 306, 350, 359, 369, 372, 386, 395, 416, 590, 597, 651, 680, 1001, 1002, 1013, 1023, 1024, 1035, 1041, 1049, 1057], "tricki": [413, 1006], "trickiest": 383, "trigg": 574, "trigger": [105, 106, 383, 387, 397, 409, 416, 869, 870, 872, 873, 938, 939, 956, 1005, 1048, 1054, 1055], "triglycerid": [172, 380], "trim": [232, 415, 852, 853], "trimeta": 1051, "trinh": 1055, "tripl": 388, "triplet": 517, "tripramudya": 1056, "trishnendu": 1048, "tristan": 1005, "triu": 51, "trivial": [48, 219, 269, 361, 383, 415, 826, 914, 917, 1006, 1029, 1040], "troillard": [1056, 1057], "tropp": [543, 549], "troubl": [66, 423], "troubleshoot": 423, "troyanskaya": [636, 999], "true": [2, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 63, 64, 66, 68, 70, 72, 79, 84, 85, 88, 89, 90, 92, 93, 95, 98, 104, 105, 106, 107, 109, 111, 112, 113, 114, 115, 117, 121, 123, 124, 125, 126, 128, 133, 135, 137, 141, 143, 147, 149, 150, 152, 153, 154, 155, 158, 159, 161, 163, 164, 168, 171, 174, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 202, 204, 205, 206, 208, 210, 212, 213, 214, 217, 219, 220, 221, 224, 225, 231, 232, 233, 235, 237, 240, 241, 244, 245, 248, 250, 251, 252, 253, 254, 257, 258, 260, 263, 265, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 301, 302, 305, 309, 311, 312, 313, 314, 317, 321, 322, 323, 325, 327, 329, 330, 331, 332, 333, 336, 338, 339, 340, 349, 350, 352, 353, 354, 357, 358, 359, 361, 362, 365, 366, 370, 371, 376, 378, 379, 381, 383, 384, 385, 388, 389, 390, 392, 396, 397, 400, 406, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 425, 427, 428, 429, 430, 432, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 466, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 527, 530, 531, 532, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 715, 716, 717, 719, 720, 721, 722, 723, 726, 727, 728, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 746, 747, 748, 749, 750, 751, 760, 762, 764, 769, 775, 777, 786, 790, 791, 792, 793, 794, 795, 796, 797, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 822, 826, 827, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 931, 932, 936, 937, 938, 939, 945, 950, 951, 956, 957, 969, 970, 973, 974, 978, 979, 980, 981, 989, 994, 996, 997, 998, 999, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1021, 1022, 1023, 1024, 1025, 1028, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "true_": [204, 545, 644], "true_coef": [189, 202, 212, 654, 655, 660, 668, 669, 670, 689, 690, 691], "true_cov": [476, 478, 479, 485], "true_den": 301, "true_fac": 253, "true_fun": 290, "true_h": 329, "true_k": 358, "true_label": [331, 335, 336], "true_nam": 45, "true_relev": [734, 764], "true_w": 329, "true_weight": 197, "trujillo": [1054, 1055], "truli": [278, 372, 720, 1009], "truncat": [2, 107, 156, 238, 392, 542, 543, 547, 548, 549, 552, 684, 686, 734, 764, 805, 861, 925, 956, 998, 1008, 1009, 1023, 1034, 1035, 1046, 1048], "truncate_mod": 76, "truncatedsvd": [2, 156, 238, 358, 420, 542, 543, 547, 548, 549, 700, 871, 874, 1042, 1047, 1051, 1052, 1054, 1058], "truong": 1046, "trust": [0, 51, 63, 105, 106, 114, 137, 142, 144, 145, 154, 155, 158, 161, 169, 179, 190, 191, 192, 193, 199, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 330, 332, 337, 365, 398, 409, 413, 1054], "trustworthi": [2, 329, 1048, 1049, 1054, 1055, 1056, 1057], "truth": [2, 27, 58, 68, 75, 80, 84, 92, 93, 96, 111, 115, 118, 126, 130, 154, 182, 202, 211, 217, 218, 254, 266, 278, 358, 397, 415, 711, 712, 713, 716, 720, 721, 722, 723, 725, 726, 729, 731, 732, 734, 736, 737, 738, 742, 744, 745, 746, 747, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 791, 792, 793, 794, 795, 798, 799, 803, 804, 1009, 1048, 1054], "truthi": [2, 969], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 88, 105, 106, 126, 137, 142, 143, 144, 145, 146, 153, 154, 155, 158, 161, 169, 174, 179, 180, 186, 189, 190, 191, 192, 195, 197, 199, 206, 245, 246, 247, 251, 255, 256, 257, 258, 261, 262, 265, 269, 273, 275, 276, 282, 287, 289, 293, 296, 309, 314, 322, 326, 327, 329, 330, 332, 337, 348, 353, 357, 358, 365, 378, 381, 382, 383, 385, 388, 389, 391, 395, 397, 401, 403, 406, 409, 415, 418, 419, 422, 423, 495, 496, 497, 498, 500, 501, 502, 503, 505, 506, 511, 575, 585, 597, 666, 681, 683, 697, 701, 807, 808, 811, 812, 820, 822, 830, 833, 834, 835, 837, 890, 892, 895, 897, 898, 899, 900, 901, 902, 903, 912, 931, 937, 992, 998, 1005, 1006, 1015, 1024, 1025, 1029, 1032, 1033, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057], "tr\u00e9segni": [0, 1042], "ts_cv": [43, 52, 153], "tscv": [419, 829], "tseng": 415, "tsetogl": 1055, "tsilhouett": 93, "tslearn": 1028, "tsne": [2, 187, 237, 238, 239, 241, 242, 297, 298, 329, 397, 429, 439, 504, 696, 697, 698, 856, 860, 873, 982, 1006, 1012, 1030, 1043, 1045, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "tsne_param": 296, "tsoumaka": [728, 742, 748, 1009], "tspeng": [1055, 1056], "tsuga": 1053, "tsujii": 1023, "tsukada": 1052, "tsuruoka": 1023, "tsutomu": 1051, "tt": [159, 270, 472], "ttang131": 1050, "ttime": 93, "tttthomasssss": 1044, "tube": [918, 1024], "tue": [43, 52, 153, 191, 1046], "tuft": 456, "tuhin": 1058, "tuk": 1058, "tulio": [1048, 1049], "tulken": 1050, "tulloch": [1043, 1044], "tumor": [172, 380, 414], "tune": [2, 43, 64, 79, 90, 105, 128, 137, 143, 153, 171, 172, 174, 185, 187, 191, 206, 221, 222, 234, 241, 245, 254, 267, 268, 278, 279, 280, 282, 293, 298, 317, 338, 346, 350, 353, 357, 366, 370, 371, 372, 396, 397, 410, 413, 415, 419, 422, 424, 425, 459, 469, 504, 559, 567, 568, 569, 602, 621, 622, 623, 625, 627, 628, 630, 631, 633, 651, 666, 667, 698, 702, 708, 710, 726, 750, 792, 795, 807, 808, 824, 830, 835, 838, 868, 873, 892, 910, 917, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1015, 1023, 1024, 1028, 1030, 1035, 1040, 1054, 1056, 1058, 1059], "tuned_classifi": 333, "tuned_model": [269, 289], "tuned_model_coef": 289, "tuned_param": 46, "tuned_paramet": [111, 163, 273], "tunedthresholdclassifiercv": [2, 269, 289, 414, 807, 1058], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 269, "tupl": [47, 83, 84, 90, 132, 191, 235, 376, 377, 378, 397, 419, 427, 440, 458, 460, 471, 474, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 513, 516, 518, 519, 520, 521, 522, 530, 541, 569, 570, 575, 576, 577, 578, 590, 591, 592, 595, 596, 597, 599, 635, 640, 641, 642, 719, 720, 727, 750, 789, 791, 805, 808, 822, 835, 852, 853, 871, 872, 882, 883, 887, 890, 898, 902, 914, 915, 916, 917, 918, 927, 939, 940, 942, 947, 948, 949, 950, 974, 975, 992, 997, 1016, 1046, 1047, 1051, 1052, 1053, 1058], "tur": 1058, "turn": [2, 30, 43, 68, 111, 185, 186, 190, 202, 232, 233, 249, 275, 300, 333, 359, 370, 371, 372, 378, 395, 397, 398, 415, 416, 418, 420, 423, 424, 425, 589, 590, 597, 615, 616, 841, 845, 914, 917, 941, 999, 1003, 1011, 1014, 1019, 1033, 1045, 1047, 1048, 1053], "turquois": [127, 131, 132, 152, 223, 234, 240, 262, 263, 282], "tushar": 1058, "tutori": [114, 163, 164, 165, 206, 219, 235, 275, 383, 384, 389, 391, 409, 415, 459, 469, 699, 1024, 1035, 1043], "tuveri": 1055, "tuzova": 1048, "tv": 93, "tw": [195, 377, 494, 516, 517, 666, 1024], "tweak": [2, 115, 251, 419, 974, 1008, 1051], "tweedi": [2, 187, 196, 217, 471, 504, 560, 656, 677, 688, 714, 732, 753, 755, 757, 758, 760, 838, 873, 876, 877, 885, 892, 1005, 1030, 1050, 1051, 1053], "tweedie_pow": 235, "tweedieregressor": [2, 43, 326, 329, 656, 677, 1005, 1051, 1054, 1055], "tweet": 1033, "twelfth": 704, "twenti": [57, 248, 380, 412, 415], "twice": [64, 269, 287, 289, 357, 359, 385, 425, 627, 738, 740, 958, 1049, 1057], "twine": 387, "twinx": 338, "twister": 1051, "twitter": 387, "two": [2, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 90, 95, 99, 104, 105, 109, 113, 117, 118, 120, 121, 123, 125, 126, 128, 131, 136, 137, 138, 145, 146, 147, 148, 150, 153, 154, 155, 156, 159, 169, 172, 174, 175, 176, 177, 180, 181, 185, 186, 187, 190, 191, 192, 197, 201, 202, 204, 206, 207, 208, 213, 217, 218, 219, 225, 226, 229, 234, 235, 239, 241, 242, 244, 249, 251, 252, 254, 260, 261, 262, 264, 265, 266, 269, 270, 272, 276, 282, 293, 299, 301, 304, 305, 307, 309, 316, 318, 321, 325, 326, 328, 329, 333, 337, 342, 343, 346, 347, 348, 350, 354, 357, 358, 359, 362, 366, 376, 377, 378, 379, 380, 381, 383, 385, 387, 389, 390, 391, 395, 397, 398, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 448, 449, 450, 451, 452, 454, 457, 458, 459, 460, 464, 466, 471, 476, 477, 478, 479, 480, 481, 482, 483, 495, 497, 498, 500, 501, 502, 504, 506, 508, 509, 510, 511, 512, 513, 515, 518, 522, 527, 530, 544, 546, 548, 552, 555, 557, 558, 561, 568, 578, 589, 592, 598, 599, 600, 603, 604, 606, 607, 608, 609, 610, 611, 614, 615, 616, 618, 619, 628, 629, 632, 636, 639, 640, 647, 651, 653, 678, 679, 681, 700, 707, 711, 712, 713, 720, 723, 724, 727, 729, 730, 731, 732, 739, 740, 743, 744, 746, 749, 751, 762, 763, 765, 771, 772, 779, 782, 785, 786, 787, 788, 789, 793, 794, 802, 803, 804, 805, 841, 852, 853, 854, 855, 856, 858, 860, 862, 863, 864, 869, 870, 876, 877, 884, 885, 886, 887, 906, 907, 908, 912, 913, 920, 922, 923, 971, 987, 988, 994, 998, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1030, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "two_d_arrai": 929, "two_d_label": 932, "two_mean": 79, "two_point_correl": [852, 853], "twoclass_output": 139, "twosigmajab": 1048, "twx": 51, "tx": 418, "tx_k": [418, 1003], "txn": 51, "txt": [357, 377, 501, 511], "ty": 418, "ty_k": 418, "tyagi": 1054, "tygert": [543, 549, 956], "tyler": [1047, 1053, 1054, 1055], "type": [2, 46, 52, 88, 89, 100, 103, 104, 114, 120, 121, 132, 146, 147, 149, 179, 186, 187, 189, 190, 191, 195, 202, 217, 219, 246, 251, 256, 258, 259, 261, 262, 265, 266, 269, 270, 276, 281, 282, 284, 285, 286, 289, 293, 306, 322, 332, 350, 357, 359, 365, 366, 371, 376, 377, 378, 380, 383, 386, 387, 388, 389, 395, 396, 401, 403, 409, 412, 416, 423, 439, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 504, 516, 517, 523, 575, 580, 589, 590, 596, 597, 599, 608, 612, 625, 635, 637, 638, 646, 664, 666, 680, 682, 687, 695, 697, 700, 701, 707, 709, 715, 722, 724, 737, 738, 741, 746, 791, 792, 795, 796, 805, 806, 808, 814, 822, 831, 836, 838, 839, 854, 855, 856, 858, 859, 860, 862, 863, 864, 865, 866, 872, 873, 874, 877, 879, 885, 886, 892, 893, 910, 914, 915, 916, 917, 918, 933, 934, 936, 938, 939, 942, 947, 948, 971, 972, 995, 999, 1001, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1021, 1025, 1030, 1032, 1033, 1040, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "type_check": 387, "type_filt": 948, "type_of_target": [2, 397, 879, 893, 1010, 1054, 1055, 1057, 1058], "type_of_target_": 893, "typed_ndarrai": 383, "typeerror": [251, 328, 388, 719, 942, 965, 992, 1047, 1048, 1051, 1053, 1057], "typic": [25, 62, 64, 127, 135, 148, 195, 202, 217, 221, 235, 250, 277, 278, 282, 284, 285, 302, 303, 327, 346, 358, 370, 376, 377, 378, 381, 385, 386, 392, 396, 397, 409, 411, 413, 415, 416, 419, 420, 422, 423, 425, 450, 454, 456, 504, 549, 559, 561, 563, 564, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 637, 646, 648, 651, 662, 663, 664, 679, 690, 691, 720, 879, 886, 890, 893, 955, 956, 961, 965, 968, 993, 998, 1002, 1005, 1006, 1008, 1009, 1010, 1011, 1015, 1017, 1033, 1049, 1053, 1056, 1057], "typo": [383, 398, 406, 1040], "tzu": 1044, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 70, 85, 87, 91, 120, 123, 130, 147, 148, 153, 174, 183, 189, 190, 191, 214, 218, 221, 225, 235, 238, 241, 248, 251, 257, 258, 261, 262, 266, 269, 270, 275, 278, 282, 289, 322, 350, 357, 365, 371, 378, 383, 387, 389, 391, 395, 401, 406, 412, 415, 418, 420, 422, 423, 438, 470, 472, 489, 490, 491, 539, 545, 553, 554, 558, 560, 562, 564, 566, 568, 570, 573, 576, 578, 596, 597, 599, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 689, 692, 697, 701, 712, 728, 748, 763, 845, 846, 855, 863, 870, 892, 906, 913, 915, 918, 921, 923, 956, 1001, 1003, 1008, 1009, 1016, 1019, 1033, 1037, 1050], "u2uwz2": [172, 380], "u_": [412, 489, 490, 491], "u_1": [412, 1001], "u_2": [412, 1001], "u_i": [415, 489, 490, 491, 763], "u_init": 551, "u_k": [418, 420], "uai": 1021, "ubuntu": [370, 381, 389, 391], "uchida": 1050, "uci": [47, 172, 269, 321, 377, 380, 508, 510, 512, 518], "ucl": 1022, "ucla": 1005, "udi": 1040, "udit": 1054, "ufmay": 1052, "ufunc": [190, 1057], "ugli": [226, 304, 307, 342], "ugo": 1054, "ugurcaliskan": 1044, "ugurthemast": [1043, 1044], "uhmann": 1053, "uieda": 1053, "uint": 1051, "uint32": [378, 505], "uint8": [88, 126, 377, 505, 514, 515, 1052], "uk": 1022, "ulloa": 1046, "ulrik": [415, 459, 469, 699], "ulterior": 52, "ultim": [90, 241, 384], "umar": [1048, 1049], "umass": [45, 57, 378], "umberto": 1052, "umbrella": 414, "umpi": 423, "un": [51, 383, 413, 423, 427, 541, 597, 803, 875, 884, 895, 899, 1049], "unabl": [51, 63, 105, 106, 142, 144, 145, 154, 155, 158, 161, 169, 179, 189, 190, 191, 192, 199, 202, 217, 245, 246, 247, 251, 255, 256, 257, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 330, 332, 337, 365, 372, 892, 1019, 1049], "unadjust": [415, 1009, 1052], "unaffect": 1012, "unalt": 1009, "unambigu": [284, 1010, 1046], "unanim": 398, "unavail": [397, 666, 667, 969, 1047, 1053], "unbalanc": [2, 187, 278, 341, 344, 347, 419, 520, 639, 917, 943, 944, 998, 1023, 1030], "unbias": [111, 413, 417, 420, 444, 558, 664, 680, 682, 695, 1005], "unbound": [72, 1008, 1054, 1058], "uncalibr": [61, 62, 63, 444], "uncent": 199, "uncertain": [275, 336, 382], "uncertainti": [62, 153, 174, 181, 197, 277, 413, 415, 575, 576, 651, 872, 999, 1021], "uncertainty_index": [335, 336], "unchang": [180, 190, 235, 282, 422, 439, 444, 449, 450, 451, 452, 453, 454, 456, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 618, 619, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 700, 771, 807, 809, 810, 815, 817, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 859, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 997, 1012, 1048, 1054, 1056], "unclaim": 386, "unclear": [382, 383, 509], "unclust": 453, "uncommon": [417, 666, 912, 1024], "uncompress": [47, 516, 517], "unconstrain": [153, 155, 191, 326, 332, 378, 1023], "uncorrect": [275, 603, 606], "uncorrel": [2, 281, 379, 536, 542, 549, 1009], "uncorrupt": 44, "uncov": [133, 703], "undefin": [52, 278, 397, 720, 737, 746, 791, 977, 1009, 1048, 1052, 1056, 1059], "undefinedmetricwarn": [2, 314, 737, 738, 791, 792, 795, 1049], "under": [2, 43, 46, 50, 61, 62, 64, 76, 102, 111, 112, 130, 147, 150, 191, 205, 217, 244, 254, 275, 282, 284, 285, 317, 331, 377, 383, 385, 387, 389, 391, 397, 401, 409, 413, 415, 417, 419, 420, 423, 424, 453, 458, 460, 477, 478, 479, 480, 481, 482, 483, 499, 540, 547, 549, 551, 662, 663, 664, 710, 714, 715, 716, 723, 750, 762, 796, 797, 805, 806, 857, 964, 1005, 1006, 1007, 1009, 1012, 1019, 1023, 1024, 1025, 1028, 1029, 1040, 1042, 1043, 1045, 1048, 1052], "underdetermin": 202, "underestim": [52, 150, 191, 217, 235, 275, 383], "underfit": [43, 70, 150, 174, 187, 192, 218, 221, 267, 291, 311, 322, 353, 422, 665, 808, 811, 812, 822, 834, 835, 872, 887, 1004, 1005, 1030], "underflow": [1048, 1053], "undergo": 281, "undergrad": 1033, "underli": [64, 91, 113, 157, 172, 190, 193, 218, 220, 221, 251, 269, 280, 300, 301, 350, 364, 371, 383, 395, 397, 400, 406, 411, 413, 415, 417, 419, 420, 421, 422, 424, 425, 444, 458, 459, 460, 469, 471, 472, 478, 479, 485, 532, 563, 564, 572, 573, 575, 576, 577, 578, 601, 602, 605, 610, 666, 667, 673, 676, 681, 683, 688, 699, 703, 807, 808, 811, 812, 822, 830, 833, 834, 835, 840, 841, 842, 843, 844, 845, 846, 855, 857, 909, 912, 920, 921, 922, 923, 973, 997, 1005, 1006, 1010, 1015, 1022, 1024, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1056, 1057, 1058, 1059], "underrepres": 383, "underscor": [245, 359, 385, 397, 992, 1040, 1050, 1053], "underset": [420, 1005, 1012, 1025], "understand": [43, 48, 52, 76, 137, 179, 187, 191, 251, 269, 270, 273, 289, 327, 328, 343, 350, 357, 360, 361, 366, 382, 383, 384, 389, 395, 400, 415, 422, 423, 512, 838, 869, 870, 920, 921, 922, 923, 926, 998, 999, 1006, 1008, 1025, 1027, 1028, 1030, 1033, 1040, 1054], "understood": [276, 383, 415, 965], "undertak": 395, "undesir": [92, 175, 425, 830], "undistinguish": 419, "undistort": 126, "undo": [276, 882, 1044], "undocu": 1047, "unequ": [92, 1048], "uneth": 189, "uneven": [87, 270, 415, 419], "unevenli": [92, 217, 270], "unexpect": [92, 251, 366, 383, 388, 391, 401, 409, 543, 704, 1009, 1024, 1042, 1048, 1049, 1052, 1054, 1056, 1058], "unexpectedli": [397, 1048], "unfair": 366, "unfinish": [382, 383], "unfit": [2, 91, 416, 440, 471, 577, 578, 610, 619, 1048, 1050, 1057], "unfold": [128, 386, 1006], "unfortun": [150, 189, 190, 235, 391, 395, 422, 516, 517], "unhandl": 1049, "unhelp": 383, "unicod": [359, 423, 494, 511, 590, 596, 597, 599, 973, 1040, 1048, 1052], "unicodedata": [596, 597, 599], "unicodedecodeerror": [423, 596, 597, 599], "unifi": [293, 384, 392, 395, 396, 422, 645, 1028, 1040], "unifom": 299, "uniform": [2, 58, 67, 72, 88, 149, 150, 154, 168, 175, 180, 183, 197, 198, 231, 242, 244, 247, 283, 299, 302, 303, 308, 311, 317, 319, 320, 323, 329, 331, 345, 385, 388, 409, 415, 445, 446, 559, 577, 578, 618, 619, 636, 647, 657, 658, 662, 676, 684, 685, 686, 707, 729, 731, 736, 753, 754, 756, 758, 759, 761, 793, 798, 799, 812, 820, 822, 847, 848, 851, 854, 855, 862, 863, 877, 889, 891, 901, 943, 958, 998, 999, 1008, 1009, 1012, 1046, 1048, 1050, 1054, 1056, 1059], "uniform_averag": [438, 472, 489, 490, 491, 562, 564, 566, 568, 570, 573, 576, 578, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 729, 731, 736, 753, 754, 756, 758, 759, 761, 793, 798, 799, 845, 846, 855, 863, 870, 913, 915, 918, 921, 923, 1009, 1049, 1059], "uniform_labelings_scor": 72, "uniformli": [72, 143, 150, 167, 244, 260, 325, 385, 524, 525, 526, 559, 650, 812, 820, 822, 891, 998, 999, 1009, 1012, 1019, 1044, 1049], "unigram": [276, 378, 423, 596, 597, 599, 1047], "unilev": 51, "unimod": [244, 481], "unimport": [424, 1017], "uninform": [62, 64, 323, 379, 388, 423, 998, 1005, 1048], "uniniti": 391, "uninstal": 381, "unintention": 1019, "unintuit": 92, "union": [104, 190, 416, 746, 762, 871, 1047], "union_not_memb": 190, "uniqu": [2, 43, 61, 66, 77, 82, 83, 92, 93, 98, 102, 107, 144, 145, 151, 152, 153, 190, 192, 202, 232, 235, 262, 284, 305, 322, 323, 331, 338, 357, 358, 359, 377, 385, 392, 397, 415, 416, 419, 422, 423, 447, 457, 461, 463, 471, 474, 504, 557, 558, 559, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 574, 618, 641, 642, 643, 674, 676, 684, 705, 717, 719, 762, 790, 808, 810, 822, 835, 840, 841, 844, 850, 859, 862, 864, 869, 871, 883, 885, 886, 893, 896, 912, 914, 920, 921, 922, 923, 943, 956, 971, 972, 1005, 1010, 1019, 1033, 1048, 1051, 1052, 1054, 1055, 1056, 1057, 1058], "unique_label": [2, 84, 90, 358, 385, 392], "unit": [2, 63, 104, 113, 190, 195, 217, 235, 301, 313, 316, 333, 358, 378, 383, 385, 389, 391, 392, 420, 423, 427, 471, 496, 497, 527, 532, 540, 541, 542, 549, 550, 597, 598, 599, 615, 616, 619, 666, 667, 684, 693, 707, 778, 859, 868, 869, 870, 876, 882, 884, 888, 890, 892, 898, 899, 900, 902, 903, 912, 913, 1005, 1007, 1008, 1009, 1014, 1019, 1025, 1044, 1048, 1054, 1055], "unit_eig_vec": 260, "unit_vari": [890, 902, 1052], "unitari": 956, "uniti": 30, "univ": [697, 701, 1006], "univ_select": 108, "univari": [2, 18, 48, 49, 71, 106, 108, 166, 167, 169, 187, 200, 216, 232, 288, 341, 375, 415, 416, 423, 452, 512, 533, 538, 600, 603, 604, 606, 607, 608, 610, 613, 614, 615, 616, 617, 635, 636, 637, 638, 653, 808, 813, 834, 838, 872, 873, 882, 887, 891, 892, 912, 917, 1005, 1024, 1026, 1030, 1031, 1035, 1040, 1046], "univers": [0, 182, 190, 357, 378, 380, 386, 415, 420, 423, 598, 796, 847, 851, 907, 1005, 1007, 1009, 1011], "unix": 423, "unknown": [52, 91, 190, 251, 275, 335, 337, 372, 378, 397, 409, 412, 423, 879, 885, 886, 971, 1008, 1019, 1044, 1048, 1052, 1053], "unknown_typ": 409, "unknown_v": 158, "unknown_valu": [147, 158, 192, 254, 322, 886, 1019, 1052, 1054, 1055], "unlabel": [38, 45, 252, 327, 335, 336, 337, 339, 340, 397, 415, 907, 908, 909, 1008, 1052], "unlabeled_indic": 336, "unlabeled_set": 335, "unless": [189, 251, 261, 266, 383, 386, 395, 397, 409, 413, 415, 418, 426, 444, 451, 453, 455, 457, 459, 464, 465, 468, 471, 474, 479, 496, 504, 516, 517, 539, 543, 544, 545, 547, 550, 551, 553, 554, 555, 556, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 602, 610, 615, 616, 618, 619, 640, 642, 647, 654, 655, 659, 660, 661, 663, 665, 666, 667, 669, 671, 673, 674, 676, 684, 687, 696, 697, 698, 699, 700, 701, 702, 717, 722, 782, 786, 789, 808, 811, 812, 814, 822, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 854, 855, 858, 860, 862, 863, 865, 866, 869, 870, 871, 874, 893, 897, 898, 900, 901, 902, 903, 907, 908, 920, 921, 922, 923, 931, 934, 938, 939, 956, 1005, 1008, 1010, 1040, 1042, 1046, 1048, 1051, 1052, 1057, 1058], "unlik": [90, 91, 143, 190, 191, 237, 239, 265, 316, 344, 383, 385, 389, 395, 397, 406, 409, 417, 419, 420, 423, 453, 457, 543, 658, 659, 662, 663, 664, 690, 691, 793, 829, 852, 853, 892, 903, 915, 1005, 1008, 1009, 1016, 1024, 1040, 1046], "unlimit": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923], "unlucki": 366, "unmaintain": 1040, "unmarri": 190, "unmeaning": 1047, "unmix": [124, 427, 541], "unmixing_matrix": 541, "unmodifi": [385, 397], "unnecessari": [143, 260, 388, 435, 450, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 713, 1012, 1019, 1029, 1033, 1043, 1045, 1050, 1051, 1053, 1056], "unnecessarili": [241, 1047, 1050], "unnorm": [397, 544, 1006, 1046, 1047], "unobserv": [153, 189, 190, 420], "unord": [415, 422, 1019], "unpack": 385, "unpen": [413, 656, 677, 688, 1005], "unpickl": [2, 397, 584, 852, 853, 1046, 1052, 1056], "unpleas": 1042, "unpract": 1008, "unprefix": 1046, "unprocess": [457, 596, 597, 599], "unprotect": 974, "unprun": [565, 566, 572, 573, 920, 921, 922, 923], "unquot": 235, "unrealist": 378, "unreason": [235, 419], "unreg": 351, "unregular": [885, 908, 1049], "unrel": [322, 371, 383, 388, 391, 423, 523], "unreli": [269, 416], "unrepresent": 927, "unrestrict": 501, "unrol": 241, "unrot": 133, "unsaf": 542, "unsampl": 1001, "unscal": [316, 321, 1005, 1009, 1048, 1054], "unscaled_clf": 321, "unseen": [111, 148, 169, 206, 221, 225, 288, 302, 350, 372, 375, 385, 396, 397, 415, 419, 858, 889, 901, 1000, 1009, 1015, 1017, 1019, 1025, 1043, 1048, 1052], "unseen_featur": [423, 589], "unset": [371, 397, 1048], "unsetmetadatapassederror": [406, 1059], "unshad": 420, "unshifft": 685, "unshift": 916, "unsign": [88, 127, 378, 590, 973], "unsmooth": 421, "unsort": [1012, 1041, 1044, 1048], "unspecifi": [607, 608, 1006], "unstabl": [74, 101, 190, 411, 415, 417, 418, 697, 701, 955, 956, 1025, 1044, 1045, 1047, 1052, 1054, 1056], "unstack": [235, 278], "unstructur": [53, 71, 74, 75, 76, 82, 187, 241, 313, 415, 448, 452, 470, 511, 538, 865, 1021, 1030, 1033, 1044], "unsuccess": 50, "unsupervis": [2, 6, 27, 34, 45, 51, 72, 84, 106, 107, 118, 123, 142, 156, 244, 252, 302, 303, 345, 357, 358, 366, 375, 378, 385, 396, 397, 415, 418, 420, 421, 422, 423, 424, 439, 449, 452, 540, 542, 544, 545, 547, 550, 551, 557, 571, 574, 575, 577, 578, 590, 591, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 636, 638, 642, 643, 646, 647, 648, 649, 650, 685, 808, 811, 812, 814, 822, 831, 836, 839, 854, 855, 858, 860, 861, 862, 863, 868, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 889, 890, 891, 892, 893, 904, 905, 909, 916, 1006, 1009, 1015, 1022, 1031, 1035, 1040, 1043, 1053, 1057], "unsupport": [406, 409, 501, 1048, 1053], "unsur": 913, "untangl": 128, "untar": 47, "unterthin": [1043, 1044, 1045], "until": [90, 172, 225, 287, 327, 329, 388, 397, 398, 412, 415, 419, 424, 516, 517, 565, 566, 567, 568, 572, 573, 574, 601, 654, 655, 660, 661, 666, 667, 668, 669, 670, 671, 674, 675, 676, 679, 684, 685, 686, 702, 805, 806, 811, 812, 869, 870, 909, 912, 920, 921, 922, 923, 983, 998, 1005, 1006, 1014, 1022, 1025, 1043, 1047, 1048, 1054, 1059], "untransform": [350, 471, 474, 1020], "untru": 1009, "untrust": 409, "untun": [150, 333], "unus": [120, 129, 191, 214, 237, 239, 470, 587, 771, 779, 998, 1006, 1040, 1048, 1050, 1051, 1053, 1055], "unusu": [64, 412, 1015, 1019, 1048], "unveil": 1046, "unvendor": 1048, "unwant": [218, 357], "unweight": [186, 230, 470, 655, 661, 686, 715, 721, 737, 738, 746, 791, 792, 795, 796, 847, 848, 849, 850, 851, 999], "unwieldi": 883, "uoa": 905, "up": [2, 47, 50, 72, 79, 81, 82, 83, 87, 90, 92, 97, 104, 113, 114, 121, 135, 142, 153, 186, 190, 191, 197, 202, 210, 218, 233, 234, 262, 269, 277, 280, 296, 309, 314, 317, 322, 329, 333, 336, 343, 350, 353, 357, 359, 372, 377, 378, 383, 389, 390, 391, 392, 395, 397, 398, 413, 415, 420, 422, 423, 450, 454, 455, 456, 457, 459, 463, 466, 467, 468, 516, 517, 544, 557, 558, 565, 566, 567, 568, 569, 570, 572, 573, 574, 618, 635, 640, 641, 647, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 672, 689, 690, 691, 692, 700, 713, 777, 805, 806, 810, 811, 812, 814, 836, 886, 887, 890, 902, 920, 921, 922, 923, 926, 956, 959, 960, 998, 1001, 1005, 1006, 1009, 1012, 1019, 1023, 1024, 1029, 1032, 1033, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "upadhyai": [1046, 1047, 1048, 1049], "upcast": [1050, 1054], "upcom": [179, 381], "updat": [47, 79, 97, 137, 143, 152, 249, 325, 359, 382, 383, 386, 391, 397, 409, 415, 420, 422, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 470, 472, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 805, 806, 807, 808, 809, 810, 811, 812, 815, 817, 822, 826, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 983, 1005, 1012, 1013, 1014, 1023, 1032, 1033, 1041, 1047, 1048, 1049, 1051, 1053, 1055, 1056, 1058, 1059], "update_environments_and_lock_fil": 383, "update_from": 303, "update_func": 303, "update_h": 555, "update_layout": [143, 276], "update_legend_marker_s": 303, "update_terminal_region": 1049, "upgrad": [325, 326, 327, 328, 329, 330, 331, 332, 333, 401, 1029, 1040, 1045, 1048], "upload": [377, 381, 387, 395, 679], "upload_d": 377, "upon": [235, 242, 251, 309, 378, 383, 395, 397, 409, 569, 570, 635, 638, 679, 797, 805, 806, 852, 853, 998, 1005, 1025, 1054], "upper": [43, 46, 48, 61, 106, 109, 112, 113, 114, 125, 139, 140, 141, 149, 150, 151, 152, 158, 160, 168, 178, 180, 183, 190, 211, 217, 223, 224, 227, 231, 234, 235, 248, 252, 253, 274, 275, 276, 289, 301, 302, 312, 321, 338, 345, 348, 350, 352, 415, 421, 470, 596, 597, 599, 603, 621, 622, 623, 625, 627, 628, 630, 631, 633, 640, 641, 643, 645, 658, 662, 685, 743, 796, 885, 886, 914, 915, 916, 942, 1008, 1009, 1012, 1019, 1023, 1024, 1025, 1048], "upperbound": 742, "uppercas": [397, 1053], "uppercase_initi": 423, "upperlimit": 712, "upright": 378, "upstream": [370, 383, 387, 391, 395, 1019, 1049], "upward": [457, 463], "ur": 1051, "urbanowicz": 1009, "urbanowicz2015": 1009, "urcrnrlat": [50, 309], "urcrnrlon": [50, 309], "uri": 55, "url": [51, 52, 55, 172, 377, 380, 385, 387, 499], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1058, "urvang": [1048, 1050], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 118, 120, 121, 122, 125, 127, 128, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 159, 160, 161, 163, 164, 165, 168, 169, 170, 171, 173, 174, 175, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 213, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 229, 232, 234, 235, 237, 238, 239, 240, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 293, 294, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 335, 336, 339, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 353, 356, 359, 361, 363, 364, 369, 370, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 390, 392, 396, 397, 398, 400, 401, 402, 403, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 431, 433, 434, 435, 436, 437, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 501, 502, 504, 506, 507, 511, 514, 516, 517, 519, 522, 523, 524, 527, 528, 530, 531, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 734, 735, 736, 737, 738, 740, 743, 744, 745, 746, 747, 749, 750, 751, 753, 754, 756, 758, 759, 761, 763, 764, 765, 766, 767, 771, 772, 774, 775, 776, 777, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 934, 937, 938, 939, 941, 944, 946, 951, 953, 955, 956, 960, 961, 964, 965, 966, 968, 971, 975, 977, 979, 980, 982, 984, 985, 986, 992, 997, 998, 999, 1001, 1002, 1004, 1007, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "usa": [274, 378, 909, 999, 1006, 1021, 1022], "usabl": [153, 377, 383, 385, 397, 409, 423, 808, 1040, 1047, 1054, 1055], "usag": [41, 77, 88, 105, 108, 117, 127, 135, 169, 190, 191, 245, 249, 251, 268, 269, 305, 307, 313, 342, 359, 370, 378, 382, 383, 386, 390, 391, 393, 397, 398, 401, 409, 415, 419, 420, 425, 426, 451, 453, 457, 468, 471, 478, 496, 502, 504, 531, 542, 543, 549, 557, 569, 570, 599, 617, 648, 656, 666, 667, 668, 674, 675, 676, 677, 684, 685, 686, 687, 688, 698, 786, 789, 800, 801, 868, 869, 871, 912, 920, 921, 922, 923, 931, 956, 998, 999, 1001, 1008, 1009, 1010, 1012, 1024, 1031, 1032, 1035, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058], "usd": 254, "use_encoded_valu": [147, 158, 192, 254, 322, 886, 1019, 1052], "use_group": 270, "use_idf": [420, 423, 598, 599], "usecas": [326, 329, 331, 415, 570], "useless": [54, 146, 278, 389, 424, 523, 536, 666, 720, 1005, 1019, 1049], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 90, 103, 123, 143, 151, 183, 187, 190, 193, 204, 237, 251, 265, 272, 282, 284, 293, 296, 302, 303, 306, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 366, 370, 371, 377, 381, 382, 383, 385, 387, 389, 390, 391, 395, 396, 397, 401, 403, 406, 409, 413, 415, 416, 417, 419, 420, 422, 423, 424, 426, 427, 428, 429, 432, 438, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 627, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 926, 952, 956, 998, 999, 1005, 1006, 1008, 1009, 1010, 1012, 1019, 1023, 1028, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "user_guid": 43, "user_r": 416, "userguid": 1047, "usernam": 401, "userscript": 391, "userwarn": [79, 97, 245, 388, 720, 1019, 1046, 1048, 1053, 1058], "ushtanit": [1052, 1053], "using_kernels_tut": 165, "usp": 44, "usr": 381, "usual": [43, 52, 75, 111, 112, 114, 149, 150, 152, 158, 189, 191, 203, 217, 218, 268, 269, 272, 275, 284, 285, 289, 317, 328, 346, 366, 370, 371, 381, 383, 385, 387, 391, 395, 396, 397, 401, 406, 412, 415, 416, 419, 420, 422, 423, 424, 457, 463, 546, 548, 550, 555, 567, 568, 615, 616, 638, 648, 666, 667, 674, 675, 676, 684, 685, 686, 700, 734, 766, 814, 836, 840, 912, 929, 956, 998, 999, 1001, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1019, 1023, 1024, 1025, 1055], "utc": 1009, "utf": [357, 359, 423, 494, 511, 590, 596, 597, 599], "util": [2, 4, 10, 17, 35, 38, 47, 49, 50, 83, 90, 91, 96, 135, 137, 151, 158, 193, 217, 225, 233, 239, 247, 251, 253, 263, 281, 283, 296, 318, 325, 338, 346, 350, 357, 371, 377, 378, 383, 384, 385, 386, 395, 396, 397, 411, 414, 415, 416, 419, 420, 423, 444, 450, 451, 454, 456, 460, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 541, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 585, 589, 590, 596, 598, 599, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 698, 807, 808, 809, 810, 815, 817, 826, 830, 832, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 857, 859, 862, 863, 869, 870, 872, 875, 877, 878, 879, 884, 891, 892, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1004, 1007, 1009, 1010, 1019, 1020, 1028, 1033, 1035, 1040, 1041, 1043, 1044, 1046, 1047], "utilis": 1046, "utkarsh": [1046, 1047, 1048, 1049], "utl": 424, "utstat": 652, "uttam": 1053, "uv": [123, 420], "uw": [172, 380, 1052], "uwha": [1053, 1054], "v": [0, 2, 30, 43, 48, 52, 53, 55, 57, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 82, 84, 90, 93, 104, 109, 110, 113, 115, 116, 117, 123, 125, 126, 130, 141, 143, 144, 145, 150, 152, 163, 168, 174, 187, 188, 193, 196, 206, 215, 216, 217, 218, 221, 222, 226, 232, 241, 248, 261, 262, 265, 266, 267, 271, 291, 293, 307, 323, 325, 343, 354, 358, 366, 371, 375, 380, 383, 389, 391, 397, 411, 412, 413, 417, 418, 420, 423, 438, 448, 452, 459, 469, 470, 471, 472, 477, 480, 481, 482, 483, 484, 489, 490, 491, 504, 520, 532, 538, 539, 545, 549, 553, 554, 558, 560, 562, 564, 566, 568, 570, 572, 573, 576, 578, 589, 597, 601, 602, 608, 614, 619, 638, 639, 642, 643, 647, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 684, 686, 687, 696, 703, 707, 709, 712, 725, 744, 745, 747, 762, 763, 765, 796, 803, 808, 813, 820, 822, 834, 838, 840, 841, 842, 845, 846, 847, 855, 863, 865, 868, 870, 872, 873, 876, 879, 885, 886, 887, 892, 893, 896, 906, 912, 913, 914, 915, 917, 918, 921, 923, 927, 1003, 1004, 1005, 1006, 1009, 1010, 1011, 1014, 1017, 1019, 1023, 1024, 1026, 1030, 1035, 1040, 1043, 1044, 1045, 1048, 1050, 1051, 1054, 1055, 1058], "v0": [478, 479, 485, 520, 596, 597, 599, 808, 822, 871, 874, 1041, 1048, 1049, 1050], "v1": [269, 330, 377, 401, 569, 570, 805, 806, 1052, 1055, 1056, 1057, 1058], "v10": 269, "v11": 269, "v12": 269, "v13": 269, "v14": 269, "v15": 269, "v16": 269, "v17": 269, "v18": 269, "v19": 269, "v2": [269, 378, 505, 672, 693, 694, 1005], "v20": 269, "v21": 269, "v22": 269, "v23": 269, "v24": 269, "v25": 269, "v26": 269, "v27": 269, "v28": 269, "v3": 269, "v4": 269, "v5": [269, 1048], "v6": 269, "v7": 269, "v8": 269, "v9": 269, "v_": [412, 423], "v_1": 412, "v_2": 412, "v_i": 1014, "v_ih_j": 1014, "v_init": 551, "v_j": [415, 763, 1014], "v_k": [418, 420, 539, 545, 553, 554], "v_measur": [744, 803], "v_measure_scor": [2, 57, 72, 73, 84, 93, 331, 358, 415, 725, 744, 745, 765, 1009, 1049], "v_new": 868, "va": [47, 148, 170, 286, 304, 306, 352], "vac": 293, "vacaliuc": [1048, 1049], "vacat": 378, "vachan": 1051, "vadim": [1048, 1052, 1053], "vaerenbergh": [1055, 1056], "vaggi": [1042, 1043], "vaillant": 1052, "val": [107, 229, 275, 958], "val_errors_with": 148, "val_errors_without": 148, "val_pr": 148, "val_scor": 149, "vale": 1050, "valencia": [1054, 1056], "valentin": [1043, 1045, 1055, 1056], "valero": 51, "valgrind": 386, "valid": [2, 47, 52, 53, 63, 64, 89, 90, 91, 92, 105, 106, 108, 109, 111, 115, 130, 135, 141, 143, 146, 147, 148, 149, 150, 153, 154, 162, 166, 169, 170, 172, 182, 187, 190, 192, 196, 202, 203, 204, 205, 211, 217, 219, 225, 235, 251, 253, 257, 262, 265, 267, 272, 275, 276, 277, 279, 281, 282, 283, 284, 287, 288, 289, 290, 293, 300, 314, 317, 322, 325, 327, 332, 338, 346, 353, 361, 371, 378, 383, 386, 395, 396, 397, 409, 410, 413, 415, 416, 417, 420, 421, 422, 423, 424, 429, 431, 444, 449, 450, 452, 453, 454, 456, 457, 464, 470, 471, 475, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 501, 509, 510, 512, 523, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 580, 583, 585, 590, 591, 597, 601, 602, 605, 610, 640, 642, 646, 647, 648, 649, 650, 651, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 696, 697, 700, 707, 709, 710, 714, 721, 736, 770, 773, 782, 786, 787, 788, 793, 800, 801, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 843, 846, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 875, 876, 878, 884, 892, 904, 905, 907, 908, 910, 912, 914, 917, 919, 920, 921, 922, 923, 929, 931, 938, 939, 940, 941, 942, 950, 963, 965, 968, 992, 993, 994, 995, 996, 997, 999, 1008, 1009, 1010, 1012, 1013, 1017, 1019, 1021, 1023, 1024, 1025, 1029, 1030, 1033, 1035, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "valid_metr": [852, 853, 1012, 1056], "valid_scor": 1004, "validate_data": [2, 1059], "validate_metadata": [251, 965], "validate_separ": 997, "validation_curv": [2, 331, 353, 406, 831, 1004, 1047, 1048, 1049, 1052, 1056, 1059], "validation_fract": [148, 153, 225, 328, 422, 567, 568, 569, 570, 674, 675, 676, 684, 686, 869, 870, 1023, 1048, 1054], "validation_score_": [153, 569, 570], "validation_scores_": [869, 870, 1055], "validationcurvedisplai": [2, 291, 1004, 1056], "validationerror": 1054, "vallei": 322, "vall\u00e9": 1047, "valu": [2, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 58, 59, 63, 64, 68, 72, 75, 77, 79, 81, 88, 90, 95, 96, 97, 101, 105, 107, 109, 111, 113, 115, 123, 126, 133, 135, 137, 139, 141, 142, 143, 144, 145, 147, 150, 151, 154, 155, 157, 158, 167, 168, 170, 171, 174, 177, 178, 180, 182, 189, 190, 191, 192, 193, 195, 197, 198, 200, 202, 203, 204, 206, 207, 208, 210, 215, 217, 218, 219, 221, 223, 232, 235, 236, 239, 240, 244, 245, 246, 247, 248, 249, 250, 254, 257, 258, 260, 266, 268, 269, 271, 273, 275, 276, 278, 280, 281, 282, 284, 286, 287, 288, 289, 291, 296, 299, 308, 309, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 327, 333, 338, 346, 350, 351, 353, 357, 358, 359, 361, 366, 370, 371, 372, 375, 376, 377, 378, 380, 384, 385, 386, 388, 389, 390, 392, 395, 396, 397, 400, 401, 406, 412, 413, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 429, 438, 439, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 494, 497, 498, 501, 504, 505, 506, 509, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 709, 710, 712, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 777, 779, 782, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 817, 819, 820, 822, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 933, 935, 936, 937, 938, 939, 942, 943, 944, 946, 948, 956, 958, 965, 968, 969, 970, 971, 972, 984, 985, 986, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1022, 1023, 1024, 1030, 1031, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "valuabl": [148, 269, 383, 999, 1033], "valuat": 422, "value_count": [43, 52, 191, 269, 289, 293], "value_kei": [395, 927], "value_typ": [425, 625], "valueerror": [2, 251, 252, 385, 389, 406, 475, 585, 611, 625, 643, 679, 722, 844, 862, 871, 877, 891, 937, 939, 941, 942, 993, 994, 995, 1019, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058], "values_format": [705, 1050], "vamsi": 1055, "van": [0, 377, 404, 417, 476, 481, 542, 635, 700, 704, 999, 1006, 1009, 1015, 1033, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1053, 1055, 1056], "vandana": 1051, "vander": 198, "vandermond": [218, 1019], "vanderpla": [0, 405, 1027, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "vang": 1053, "vanilla": [217, 411, 414, 415, 454, 456, 467, 637], "vanilla_model": 269, "vanilla_model_coef": 289, "vanrel": 1046, "vanschoren": [377, 1052], "vapnik": [601, 602], "var": [117, 118, 140, 172, 198, 275, 380, 384, 424, 649, 653, 914, 915, 916, 917, 918, 1009, 1048], "var_": [542, 850, 892, 1053], "var_smooth": [850, 1048], "varanasi": [1040, 1043], "vardhan": 1044, "varepsilon": [415, 1023, 1024], "vari": [46, 52, 64, 67, 70, 79, 81, 90, 97, 100, 109, 143, 144, 146, 156, 165, 171, 176, 178, 187, 190, 191, 205, 206, 208, 211, 215, 224, 242, 249, 254, 265, 271, 275, 278, 289, 310, 316, 318, 319, 321, 331, 334, 340, 346, 349, 351, 366, 370, 372, 378, 397, 409, 448, 452, 453, 508, 516, 522, 523, 530, 567, 568, 572, 573, 654, 655, 658, 659, 660, 661, 662, 663, 668, 669, 670, 671, 689, 692, 711, 771, 827, 831, 836, 838, 839, 869, 873, 877, 892, 909, 917, 920, 921, 982, 1001, 1004, 1005, 1009, 1012, 1013, 1022, 1025, 1030, 1033, 1047, 1048, 1056], "variabl": [2, 43, 48, 50, 51, 52, 72, 104, 140, 144, 147, 150, 151, 153, 167, 172, 181, 182, 185, 186, 191, 192, 195, 202, 206, 217, 221, 222, 235, 239, 251, 254, 266, 269, 275, 278, 285, 293, 295, 321, 322, 323, 366, 370, 372, 378, 380, 381, 383, 385, 387, 388, 391, 397, 406, 411, 415, 416, 417, 418, 420, 422, 423, 424, 457, 489, 490, 491, 494, 507, 509, 516, 523, 540, 542, 544, 549, 552, 561, 567, 568, 612, 614, 615, 616, 648, 658, 659, 662, 663, 669, 690, 691, 703, 717, 755, 809, 810, 813, 815, 816, 817, 818, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 837, 840, 844, 845, 875, 886, 889, 893, 901, 913, 998, 999, 1001, 1005, 1008, 1009, 1010, 1011, 1012, 1014, 1016, 1017, 1019, 1023, 1025, 1028, 1029, 1040, 1045, 1048, 1050, 1053, 1055, 1059], "varianc": [2, 37, 43, 44, 52, 64, 79, 90, 92, 97, 107, 111, 113, 117, 118, 120, 123, 124, 125, 128, 130, 131, 133, 136, 152, 153, 181, 187, 190, 196, 198, 200, 202, 206, 207, 213, 217, 219, 222, 235, 265, 269, 272, 275, 278, 284, 285, 288, 289, 305, 311, 316, 321, 333, 358, 366, 375, 379, 392, 412, 413, 415, 417, 418, 419, 420, 421, 422, 427, 448, 452, 456, 470, 529, 532, 540, 541, 542, 549, 552, 557, 558, 563, 564, 566, 567, 568, 573, 611, 615, 616, 619, 633, 651, 652, 653, 660, 664, 665, 668, 670, 680, 681, 682, 683, 684, 695, 718, 736, 793, 805, 806, 850, 861, 876, 882, 888, 890, 892, 898, 900, 902, 903, 921, 923, 983, 984, 985, 989, 1003, 1004, 1005, 1007, 1012, 1013, 1014, 1017, 1021, 1023, 1024, 1025, 1026, 1030, 1031, 1035, 1040, 1048, 1050, 1051, 1052, 1053, 1054, 1055], "variance_weight": [736, 793, 1009], "variances_": 611, "variancethreshold": [2, 424, 877, 999, 1043, 1050, 1053, 1056], "variant": [2, 64, 78, 123, 184, 186, 187, 275, 328, 329, 358, 359, 389, 415, 418, 420, 423, 425, 456, 467, 497, 501, 502, 520, 523, 551, 567, 568, 573, 623, 627, 630, 631, 635, 638, 646, 647, 649, 653, 680, 712, 809, 813, 815, 816, 817, 826, 834, 855, 873, 909, 999, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1023, 1029, 1030, 1040, 1048], "variat": [2, 43, 46, 51, 72, 100, 121, 155, 172, 179, 180, 186, 187, 190, 222, 259, 261, 266, 272, 286, 295, 306, 326, 346, 380, 409, 419, 420, 450, 454, 466, 544, 651, 680, 682, 683, 805, 806, 826, 827, 829, 998, 1009, 1019, 1022, 1025, 1028, 1030, 1034, 1035, 1043, 1045, 1046], "variegatu": [50, 309, 378, 506], "variet": 322, "varieti": [25, 62, 185, 262, 322, 346, 391, 415, 417, 423, 651, 1012, 1025, 1028, 1033, 1042, 1055, 1056], "varimax": [133, 420, 540, 1052], "variou": [4, 41, 43, 51, 71, 72, 74, 90, 93, 95, 96, 97, 114, 117, 126, 187, 190, 196, 225, 227, 236, 237, 238, 239, 248, 293, 296, 312, 320, 326, 335, 336, 357, 359, 365, 366, 370, 377, 378, 379, 380, 383, 385, 388, 396, 398, 413, 415, 417, 444, 448, 479, 510, 522, 523, 533, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 602, 610, 655, 659, 661, 663, 666, 669, 671, 673, 674, 676, 681, 683, 684, 699, 700, 707, 808, 811, 812, 814, 822, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 872, 912, 913, 998, 999, 1006, 1009, 1012, 1016, 1019, 1023, 1025, 1028, 1030, 1032, 1033, 1040, 1043, 1044, 1057], "varma": [1049, 1059], "varoquaux": [0, 398, 404, 1027, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "varun": [1046, 1047, 1048, 1054, 1055], "varunchaduvula": 1058, "vasani": 1051, "vasilei": [1033, 1047], "vasileva": 1054, "vasiloudi": 1045, "vassard": 1054, "vassilvitskii": [415, 454, 467], "vast": [269, 383], "vastli": 321, "vathsala": [1047, 1048, 1049, 1050], "vatsan": 1046, "vavrova": 1047, "vazelh": [1048, 1049, 1050], "vazirgianni": 415, "vb": 544, "vbgmm": [1040, 1044, 1046], "vc": 381, "vcvarsal": 381, "vd": 1058, "ve": [358, 383, 423, 1033, 1047], "veal": 57, "veb2009": 415, "veb2010": 415, "vec": [123, 423, 546, 548, 555], "veclib": [370, 395], "vect": [47, 104, 276, 339, 423], "vect__": 276, "vect__max_df": 276, "vect__min_df": 276, "vect__ngram_rang": 276, "vect__norm": 276, "vector": [2, 17, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 66, 68, 71, 75, 83, 106, 123, 125, 126, 168, 174, 182, 199, 221, 222, 229, 233, 249, 250, 257, 273, 275, 276, 280, 302, 314, 316, 333, 340, 342, 343, 346, 347, 348, 349, 350, 351, 353, 355, 358, 370, 372, 378, 388, 389, 392, 395, 397, 412, 413, 415, 417, 418, 419, 420, 422, 425, 426, 427, 444, 450, 451, 452, 454, 456, 457, 458, 460, 471, 472, 474, 475, 489, 490, 491, 492, 494, 496, 505, 517, 520, 529, 532, 539, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 559, 560, 575, 576, 577, 578, 589, 590, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 639, 646, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 699, 700, 701, 703, 707, 727, 743, 771, 776, 777, 778, 779, 781, 782, 783, 785, 786, 807, 808, 811, 812, 822, 830, 836, 839, 840, 841, 847, 848, 849, 850, 851, 854, 855, 856, 858, 859, 860, 862, 863, 864, 869, 870, 877, 879, 884, 892, 896, 899, 910, 912, 913, 914, 915, 916, 917, 918, 919, 938, 953, 955, 956, 971, 977, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1019, 1023, 1025, 1030, 1031, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1051, 1053, 1058], "vectori": [397, 1050], "vectorizer2": 596, "vectorizer_param": 339, "vectorizermixin": 1050, "vectorizing_tim": 47, "vectors_test": 378, "ved": 1057, "vedaldi": [646, 1001], "veenhui": [1055, 1056, 1057, 1058, 1059], "veerkhar": 1055, "veerlosar": 1050, "veghit": 1056, "vehag": [217, 235], "vehbrand": [217, 235], "vehga": [217, 235], "vehicl": [217, 235], "vehpow": [217, 235], "vel": 380, "velkov": 1042, "veloc": 383, "vembu": 413, "vempati": 1001, "vendor": [251, 1045, 1048, 1049], "venezuela": [50, 309, 378, 506], "venkat": [0, 405], "venkatachalam": [1050, 1051, 1052, 1053, 1054, 1057, 1058], "venkatesh": 1050, "venna": 704, "venthur": 1048, "venu": [0, 397], "venv": [381, 401], "vera": [1054, 1055], "verbos": [49, 77, 85, 89, 99, 104, 106, 108, 158, 276, 313, 314, 316, 328, 339, 357, 381, 387, 397, 447, 450, 454, 456, 459, 461, 466, 469, 471, 474, 478, 479, 485, 539, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 601, 602, 635, 640, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 698, 700, 702, 773, 786, 805, 806, 808, 811, 812, 814, 822, 831, 833, 834, 835, 836, 837, 839, 841, 843, 846, 861, 868, 869, 870, 871, 872, 873, 874, 909, 912, 913, 914, 915, 916, 917, 918, 974, 1029, 1042, 1043, 1045, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1058, 1059], "verbose_feature_names_out": [147, 190, 191, 192, 258, 322, 328, 329, 330, 332, 416, 471, 474, 871, 1053, 1057, 1058, 1059], "verbose_interv": [805, 806], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 85, 87, 95, 97, 113, 114, 115, 117, 121, 126, 150, 156, 163, 179, 185, 190, 191, 192, 206, 217, 218, 219, 222, 225, 235, 241, 244, 250, 251, 254, 260, 269, 277, 278, 281, 282, 284, 285, 291, 296, 313, 316, 328, 335, 338, 346, 350, 355, 357, 359, 366, 370, 378, 382, 383, 388, 389, 391, 395, 396, 397, 409, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 449, 454, 459, 469, 478, 479, 485, 508, 512, 518, 549, 565, 566, 569, 570, 572, 573, 575, 576, 597, 598, 630, 658, 659, 662, 663, 664, 672, 690, 691, 693, 699, 700, 703, 713, 751, 754, 800, 805, 808, 810, 816, 818, 822, 825, 828, 852, 853, 877, 881, 882, 883, 892, 904, 905, 914, 917, 920, 921, 922, 923, 931, 956, 998, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1040, 1045, 1046, 1048, 1051, 1053, 1055, 1056, 1057], "verif": [378, 1009, 1033], "verifi": [88, 95, 135, 153, 190, 217, 383, 388, 409, 411, 499, 992, 1012], "verlag": 704, "vermeil": 1048, "veronda": 1041, "verrier": 1055, "versa": [190, 272, 357, 415, 425, 449, 615, 616, 841, 1044], "versatil": [425, 1024, 1033], "versicolor": [120, 284, 285, 512], "versicolour": [80, 120, 129, 131, 380], "version": [2, 7, 43, 66, 81, 88, 90, 105, 123, 128, 137, 153, 176, 186, 191, 192, 195, 202, 215, 218, 225, 231, 233, 251, 254, 258, 295, 313, 321, 325, 326, 327, 328, 330, 331, 332, 333, 346, 357, 370, 378, 382, 384, 385, 386, 387, 389, 391, 392, 395, 397, 398, 401, 402, 406, 408, 409, 415, 416, 418, 420, 422, 423, 425, 426, 427, 433, 435, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 512, 513, 516, 517, 518, 520, 522, 530, 531, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 709, 710, 712, 715, 716, 717, 719, 721, 722, 724, 726, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 742, 747, 748, 749, 750, 751, 754, 761, 762, 765, 766, 767, 769, 774, 775, 777, 786, 790, 791, 792, 793, 795, 797, 798, 799, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 821, 822, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 898, 900, 901, 902, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 936, 938, 939, 950, 951, 955, 956, 964, 965, 966, 967, 968, 971, 974, 975, 978, 983, 989, 994, 995, 997, 998, 1001, 1003, 1006, 1009, 1011, 1013, 1015, 1017, 1022, 1023, 1025, 1028, 1029, 1032, 1036, 1038], "versionchang": 383, "versionwarn": 387, "versu": [67, 125, 136, 158, 165, 176, 187, 190, 196, 226, 232, 244, 249, 250, 263, 267, 270, 293, 302, 304, 334, 339, 343, 345, 346, 350, 415, 419, 422, 425, 512, 542, 564, 618, 639, 647, 666, 667, 674, 676, 682, 683, 684, 685, 791, 808, 813, 834, 844, 873, 908, 909, 916, 917, 921, 998, 1005, 1009, 1010, 1015, 1022, 1023, 1024, 1030, 1048], "vert": [151, 192, 193, 325, 1023], "vertex": [55, 63, 415, 460, 1053], "vertic": [45, 55, 95, 149, 193, 206, 248, 249, 279, 295, 316, 319, 351, 352, 397, 412, 415, 420, 523, 705, 789], "verticalalign": [51, 63, 74, 75], "vese": 1052, "vesteghem": 1050, "veto": 398, "vettigli": 1049, "vga": 57, "vh": 956, "vi": [45, 47, 378, 707, 1048, 1051], "via": [0, 2, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 375, 380, 381, 384, 385, 387, 391, 395, 396, 397, 398, 401, 406, 412, 413, 415, 416, 418, 419, 420, 424, 425, 444, 509, 543, 547, 549, 551, 554, 567, 568, 575, 576, 605, 619, 624, 629, 632, 635, 646, 647, 648, 649, 664, 674, 676, 679, 681, 684, 695, 697, 700, 701, 717, 808, 822, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 850, 858, 869, 871, 872, 873, 892, 893, 998, 1003, 1005, 1006, 1008, 1009, 1010, 1016, 1017, 1023, 1024, 1029, 1030, 1033, 1035, 1040, 1044, 1045, 1048, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "viacheslav": 1046, "viard": 1051, "vibrantabhi19": 1047, "vicdemand": 153, "vice": [190, 272, 357, 415, 425, 449, 615, 616, 841, 1044], "vicent": [1053, 1054, 1055], "vicpric": 153, "victoireloui": 1054, "victor": [415, 459, 469, 1047, 1050], "victoria": 153, "video": [330, 377, 386, 511, 1010, 1033, 1035], "vie": 1046, "viega": 1009, "view": [43, 77, 81, 111, 125, 153, 191, 214, 256, 370, 372, 383, 415, 423, 544, 653, 665, 852, 853, 927, 1005, 1006], "view_init": [191, 237, 239, 241], "viewabl": 383, "vighnesh": [1045, 1046, 1048], "vignesh": 1056, "vigni": 1057, "vijai": [1033, 1043], "vijalapuram": 1048, "vijeth": [1056, 1057], "vijitbenjaronk": [1047, 1048], "vika": [1052, 1054], "vikram": [1046, 1055, 1056], "vikrant": 1054, "vila": [1050, 1052], "vilhelm": [1047, 1048], "villalba": [1045, 1048, 1052], "villanova": [1052, 1053], "villaz\u00f3n": 1052, "villu": 1046, "vil\u00e9m": 1053, "vinayak": [1044, 1045, 1046, 1048, 1049, 1055, 1056], "vincent": [0, 405, 1033, 1040, 1042, 1044, 1045, 1047, 1050, 1055, 1056, 1057], "vineet": 1058, "vineyard": 322, "vinh": [415, 712], "vinh10a": 415, "viniciu": [1052, 1053], "vinit": 1048, "vink": [1051, 1053], "vinod": 1048, "vin\u00edciu": 1048, "viola": [378, 1048], "violat": [62, 346, 391, 395, 397, 643, 942, 1016, 1023, 1025], "violet": [130, 1056], "violeta": 1052, "vipin": 415, "viraj": 1048, "virchan": 1058, "virgil": [0, 405, 1040, 1041, 1043, 1059], "virgilefritsch": 1040, "virginica": [80, 120, 129, 131, 284, 285, 380, 512, 1009], "viridi": [66, 73, 296, 705], "viridis_r": 276, "virshup": 1057, "virtanen": 1045, "virtual": [384, 401, 419, 1033], "virtualenv": [381, 383], "visag": 1033, "visconti": 1044, "vishaal": [1048, 1049], "vishal": 1055, "vishwakarma": 1054, "visibl": [52, 190, 191, 219, 355, 377, 383, 415, 868, 1014, 1045, 1055], "vision": [542, 766, 767, 1001, 1005, 1007, 1025, 1028, 1033, 1041], "visit": [365, 383, 1016, 1032], "visual": [2, 27, 42, 43, 48, 52, 58, 62, 66, 68, 78, 81, 84, 87, 92, 95, 96, 113, 122, 125, 127, 130, 132, 142, 143, 151, 153, 154, 156, 160, 161, 170, 182, 186, 187, 191, 193, 202, 208, 217, 219, 235, 237, 238, 242, 243, 246, 249, 255, 256, 265, 267, 268, 271, 272, 276, 277, 280, 282, 284, 285, 301, 305, 306, 308, 310, 312, 316, 320, 321, 325, 327, 336, 350, 375, 379, 381, 389, 390, 412, 417, 419, 420, 421, 422, 445, 448, 452, 453, 461, 478, 479, 504, 510, 512, 515, 518, 522, 530, 540, 542, 549, 572, 574, 639, 641, 653, 666, 697, 700, 705, 706, 708, 709, 710, 726, 735, 790, 797, 809, 810, 813, 814, 825, 826, 827, 828, 829, 831, 838, 869, 873, 877, 881, 882, 884, 888, 889, 890, 892, 912, 914, 915, 917, 918, 926, 952, 1004, 1006, 1007, 1012, 1013, 1015, 1016, 1019, 1025, 1028, 1030, 1035, 1043, 1050, 1051, 1052, 1054], "visualis": [123, 126, 133, 252, 552, 809, 810, 813, 825, 826, 827, 828, 829, 1012, 1029], "visualize_group": 270, "vitor": 1055, "vivek": [1047, 1048, 1049, 1057], "viz": [285, 390], "vjacheslav": 1044, "vlad": [0, 123, 404, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049], "vladimir": [543, 956, 1005, 1050, 1054, 1057], "vlahava": [728, 748, 1009], "vlajic": [1051, 1052, 1058], "vlasio": [1033, 1047], "vlasovet": 1053, "vlb": 57, "vliet": 1052, "vline": [111, 125, 204, 206, 218, 275, 288, 317], "vlines_": 640, "vlo": 51, "vmax": [66, 86, 115, 123, 126, 133, 177, 180, 197, 202, 208, 233, 249, 264, 270, 313, 346], "vmin": [66, 75, 115, 123, 126, 133, 177, 180, 197, 202, 208, 233, 249, 264, 270, 313, 346], "vnherdeiro": 1050, "vo": [1046, 1054], "voc": 1009, "vocabulari": [121, 232, 357, 358, 395, 423, 596, 597, 598, 599, 1011, 1040, 1042, 1045, 1048, 1051, 1053], "vocabulary_": [359, 423, 589, 596, 599, 1040], "void": 384, "vol": [64, 182, 202, 269, 281, 380, 415, 481, 567, 568, 636, 643, 653, 672, 693, 694, 805, 837, 849, 999, 1011, 1012], "volgen": [412, 727], "voltag": 57, "volum": [0, 101, 112, 172, 179, 378, 380, 415, 417, 480, 542, 777, 1005, 1024, 1033], "volume11": 415, "volume2": 684, "volume7": [674, 675], "volunt": 391, "voluntari": 357, "von": [415, 459, 469, 699, 1047, 1048], "voronoi": [81, 101, 415], "voss": 1048, "vote": [2, 14, 136, 138, 143, 158, 159, 160, 187, 295, 350, 397, 398, 509, 563, 564, 565, 568, 572, 573, 577, 578, 665, 840, 854, 855, 860, 862, 1010, 1012, 1030, 1031, 1035, 1040, 1043, 1045, 1050], "votingclassifi": [2, 61, 63, 136, 187, 226, 406, 422, 512, 572, 578, 639, 666, 850, 854, 917, 920, 998, 999, 1030, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1057, 1058], "votingregressor": [2, 161, 406, 422, 577, 999, 1049, 1050, 1051, 1054, 1057, 1058], "votingregressorifittedvotingregressor": 161, "voxel": [81, 101, 593], "vp": 1033, "vq": [83, 93], "vqean3": [1048, 1049], "vredevoogd": [1042, 1043], "vrigazov": 1055, "vrishank": [1047, 1048], "vs_buildtool": 381, "vstack": [51, 63, 92, 100, 177, 178, 200, 260, 264, 296, 309, 351, 639, 1010, 1048], "vstolbunov": 1045, "vt": 558, "vufg": 1048, "vukolov": [1048, 1049], "vulner": 409, "vuw": 538, "vvz2010": 1001, "vx": 72, "vya": [1048, 1049, 1050], "vyom": [1055, 1056], "vz2010": 1001, "v\u00e1zquez": 1043, "v\u0103n": 1055, "w": [2, 45, 51, 53, 66, 70, 75, 77, 80, 83, 93, 99, 129, 132, 172, 185, 216, 221, 234, 251, 252, 260, 261, 262, 265, 266, 286, 314, 328, 329, 350, 351, 353, 359, 366, 371, 378, 380, 389, 409, 415, 416, 420, 422, 423, 427, 432, 438, 444, 472, 476, 479, 481, 489, 490, 491, 531, 546, 548, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 596, 597, 599, 602, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 701, 707, 733, 734, 764, 807, 808, 822, 830, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 854, 855, 858, 859, 862, 863, 869, 870, 905, 907, 908, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 953, 958, 1005, 1009, 1013, 1014, 1019, 1021, 1023, 1024, 1050, 1054, 1055, 1056, 1057], "w0": 121, "w1": [121, 422, 665], "w1992": 422, "w2": 422, "w3": 422, "w_": [420, 654, 655, 660, 661, 668, 669, 670, 671, 689, 692, 1005, 1009, 1011, 1014], "w_0": 1005, "w_1": [422, 1005, 1013], "w_1x_1": 1013, "w_2": [422, 1005, 1013], "w_2x_2": 1013, "w_3": 1005, "w_4": 1005, "w_5": 1005, "w_i": [422, 1000, 1009], "w_ij": 668, "w_init": [427, 541], "w_intercept": [912, 913], "w_j": [654, 660, 1009, 1023], "w_k": [415, 422, 1005], "w_l": 1005, "w_mx_m": 1013, "w_n": 422, "w_new": 420, "w_p": 1005, "w_pad": [123, 146, 362], "w_x_1": [912, 913], "w_x_n": [912, 913], "wa": [0, 43, 47, 53, 64, 75, 104, 105, 113, 118, 121, 155, 158, 172, 183, 190, 195, 221, 241, 251, 254, 266, 268, 269, 271, 273, 275, 281, 282, 289, 293, 313, 321, 325, 326, 330, 337, 338, 357, 359, 365, 366, 370, 378, 380, 381, 383, 387, 388, 397, 401, 406, 409, 411, 412, 414, 415, 418, 419, 423, 427, 439, 447, 448, 449, 450, 452, 453, 454, 456, 457, 461, 464, 467, 471, 475, 476, 481, 489, 490, 491, 492, 523, 531, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 561, 562, 563, 564, 565, 566, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 666, 667, 672, 680, 682, 687, 693, 694, 696, 697, 700, 721, 737, 738, 786, 791, 792, 795, 805, 806, 808, 811, 812, 822, 835, 837, 849, 856, 859, 861, 864, 868, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 901, 904, 905, 909, 910, 936, 938, 939, 950, 951, 975, 996, 997, 998, 999, 1008, 1009, 1012, 1015, 1019, 1022, 1025, 1028, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "wadawson": 1044, "wadsworth": [920, 921, 1025], "waelbenamara": 1051, "wagner": 1054, "wai": [0, 2, 37, 43, 55, 64, 85, 95, 105, 108, 142, 149, 154, 156, 172, 181, 190, 192, 193, 218, 221, 222, 232, 235, 246, 247, 250, 251, 254, 255, 270, 275, 282, 284, 316, 317, 328, 330, 331, 366, 370, 371, 372, 377, 379, 381, 382, 385, 386, 391, 392, 397, 398, 401, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 430, 450, 451, 458, 459, 460, 466, 467, 469, 470, 476, 504, 563, 564, 571, 580, 597, 607, 608, 619, 640, 674, 675, 684, 685, 686, 707, 712, 714, 725, 744, 745, 762, 763, 765, 771, 782, 786, 796, 803, 833, 841, 858, 879, 885, 890, 896, 922, 923, 979, 982, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1019, 1021, 1023, 1024, 1025, 1028, 1029, 1032, 1033, 1040, 1042, 1048, 1053, 1054, 1058, 1059], "waijean": 1053, "wainwright": [729, 731, 732], "waist": 380, "wait": [55, 381, 383, 387, 397, 674, 675, 676, 684, 686, 1052], "waithera": 1050, "wal": 51, "waldo": 330, "wale": 153, "walk": [415, 421, 1043], "walker": 1044, "wall": 415, "wallach": [1044, 1045], "walli": 1048, "wallygauz": 1048, "walsh": [1052, 1054], "walt": [1043, 1044, 1048], "walter": 1046, "walton": 330, "wan": 1048, "wang": [420, 544, 687, 697, 701, 734, 764, 1005, 1006, 1009, 1043, 1045, 1046, 1047, 1048, 1052, 1055, 1056, 1058], "wangz10": 1045, "want": [0, 30, 43, 51, 58, 61, 62, 63, 90, 99, 105, 172, 186, 190, 217, 218, 219, 251, 254, 266, 269, 275, 290, 293, 299, 313, 340, 343, 357, 366, 370, 371, 372, 381, 382, 383, 384, 385, 387, 388, 389, 395, 396, 397, 398, 401, 406, 409, 413, 414, 415, 416, 417, 422, 423, 424, 508, 511, 512, 518, 543, 557, 662, 663, 664, 666, 667, 674, 676, 682, 683, 684, 772, 807, 830, 858, 861, 877, 884, 905, 912, 998, 1005, 1008, 1009, 1010, 1013, 1015, 1019, 1020, 1024, 1028, 1029, 1040, 1054, 1058], "ward": [0, 2, 53, 59, 71, 74, 75, 76, 79, 81, 87, 88, 89, 91, 97, 187, 193, 241, 405, 423, 448, 452, 470, 538, 865, 1030, 1040, 1043, 1045], "ward__n_clust": 89, "ward_tre": [2, 89, 448, 452, 1040, 1044], "wardagglom": 1045, "wardagglomer": 1043, "wardclust": 1043, "wareh": 742, "warm": [386, 397, 539, 545, 551, 553, 554, 618, 661, 667, 674, 675, 676, 684, 685, 686, 1005, 1029, 1050, 1052, 1054], "warm_start": [141, 178, 210, 328, 385, 389, 397, 422, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 618, 654, 656, 657, 660, 666, 668, 670, 674, 675, 676, 677, 684, 685, 686, 688, 805, 806, 861, 869, 870, 1015, 1031, 1035, 1040, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1054, 1056], "warn": [2, 15, 79, 97, 106, 180, 217, 232, 251, 278, 296, 312, 313, 320, 370, 371, 383, 386, 387, 388, 397, 409, 423, 504, 558, 561, 562, 565, 566, 567, 568, 569, 570, 572, 573, 574, 579, 580, 581, 582, 583, 584, 586, 610, 644, 701, 720, 721, 724, 737, 738, 746, 791, 792, 795, 862, 876, 877, 915, 916, 917, 918, 920, 921, 922, 923, 938, 939, 946, 956, 965, 978, 994, 995, 1009, 1019, 1040, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "warn_for": 791, "warn_on_dtyp": 1049, "warn_when_not_sort": 867, "warner": [51, 1055, 1056], "warshal": [696, 1006], "warshaw": 1046, "warut": [1047, 1048], "wase": [1057, 1058], "wasn": [104, 251, 1049], "waspa": 546, "wast": [143, 389, 419, 420, 998], "watanab": [1057, 1058], "watch": [52, 371], "watchtheblur": 1052, "water": 50, "waterburi": [1048, 1049], "waterland": 1043, "waterponei": [1046, 1047], "watson": [322, 416], "wattai": 1055, "wav": 377, "wave": [211, 383, 1008], "waveform": 75, "wavelet": [53, 132, 420], "wavfil": 377, "waweru": 1057, "wa\u00ebl": 1058, "wb": [55, 409], "wchathura": 1055, "wclf": 348, "wconnel": 1051, "wdbc": [172, 380], "wderos": 1051, "wdevazelh": 1048, "wdisp": 348, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 82, 84, 85, 88, 90, 91, 92, 93, 97, 99, 100, 101, 104, 105, 106, 107, 109, 111, 113, 114, 115, 118, 120, 121, 123, 124, 125, 126, 128, 130, 131, 133, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 158, 160, 161, 163, 167, 168, 169, 171, 172, 174, 176, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 204, 206, 208, 210, 212, 214, 217, 218, 219, 220, 221, 223, 225, 226, 229, 230, 231, 232, 233, 235, 237, 238, 241, 242, 244, 245, 247, 248, 249, 251, 252, 254, 255, 257, 258, 260, 261, 262, 263, 265, 266, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 284, 285, 286, 287, 289, 290, 293, 295, 296, 298, 299, 301, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 372, 377, 378, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 395, 396, 397, 398, 406, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 457, 476, 477, 478, 479, 480, 481, 482, 483, 509, 531, 539, 540, 542, 545, 553, 554, 557, 569, 570, 571, 577, 578, 590, 591, 597, 619, 625, 635, 640, 641, 646, 648, 659, 663, 666, 667, 674, 676, 681, 682, 683, 684, 685, 700, 726, 728, 734, 754, 764, 772, 789, 807, 814, 830, 831, 833, 854, 855, 856, 858, 860, 861, 862, 863, 864, 875, 884, 885, 886, 892, 897, 898, 900, 901, 902, 903, 905, 908, 912, 916, 931, 950, 951, 961, 972, 974, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1033, 1037, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1058], "wea": 413, "weak": [117, 148, 151, 221, 235, 281, 419, 562, 567, 568, 638, 1012, 1033, 1056], "weak_learn": 137, "weak_learners_info": 137, "weak_learners_misclassification_error": 137, "weaker": [109, 569, 570], "weakest": [361, 1025], "weaklearn": 561, "weakli": 101, "weather": [43, 52, 179, 191, 414, 1005, 1009], "web": [2, 172, 377, 378, 380, 383, 391, 409, 415, 423, 499, 529, 905, 1009, 1019, 1036, 1040, 1059], "weber": 1047, "weblog": 415, "webpag": [55, 195, 383], "websit": [377, 378, 380, 383, 386, 398, 401, 1013, 1023, 1032, 1033, 1041, 1042, 1043], "wed": [43, 153, 191], "weed": 612, "week": [43, 52, 153, 332, 382, 383, 398, 504, 1033, 1054], "weekdai": [43, 191], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 153], "weezel": [1055, 1056], "wegelin": 418, "wehenkel": [422, 565, 566, 573, 574, 922, 923], "wei": [0, 405, 1023, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1053, 1056], "weibul": 320, "weidemann": 1054, "weigh": [419, 1047], "weight": [2, 45, 50, 53, 54, 57, 61, 68, 89, 104, 133, 150, 159, 160, 168, 169, 178, 179, 186, 187, 190, 196, 202, 206, 208, 217, 221, 222, 224, 227, 228, 229, 231, 232, 233, 235, 251, 256, 260, 264, 269, 273, 278, 282, 284, 299, 308, 309, 310, 311, 312, 314, 321, 323, 325, 328, 332, 333, 335, 336, 341, 346, 348, 350, 351, 353, 354, 357, 358, 359, 365, 366, 379, 380, 392, 395, 397, 414, 415, 417, 418, 420, 421, 424, 426, 432, 438, 444, 447, 450, 451, 453, 454, 456, 460, 466, 467, 470, 471, 472, 474, 476, 481, 489, 490, 491, 504, 523, 532, 546, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 594, 597, 598, 599, 601, 605, 610, 611, 618, 619, 636, 640, 641, 642, 643, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 697, 701, 705, 706, 708, 710, 711, 715, 716, 717, 720, 721, 724, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 742, 743, 744, 746, 747, 748, 749, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 766, 767, 777, 790, 791, 792, 793, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 830, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 868, 869, 870, 871, 874, 877, 891, 892, 893, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 943, 944, 958, 983, 989, 999, 1000, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1016, 1019, 1022, 1023, 1024, 1025, 1029, 1030, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "weight_concentration_": 805, "weight_concentration_prior": [260, 266, 805, 1008], "weight_concentration_prior_": 805, "weight_concentration_prior_typ": [260, 266, 805, 1008, 1046], "weight_vector": [1040, 1050], "weighted_acc": 406, "weighted_mod": [2, 392], "weighted_n_node_sampl": 365, "weightedmetaregressor": 251, "weights_": [260, 805, 806, 1054], "weights_handl": 230, "weights_init": 806, "weijiadu": 1054, "weinberg": 423, "weinsberg": 1040, "weinstein": 1041, "weisberg": 1005, "weiss": [0, 405, 415, 699, 1040], "weitzenfeld": 1033, "weka": 849, "welch": 1046, "welcom": [382, 383, 391, 398, 1029], "welind": 1040, "well": [0, 8, 43, 48, 51, 58, 61, 62, 64, 70, 74, 83, 88, 92, 93, 97, 104, 111, 118, 137, 138, 140, 143, 148, 150, 156, 158, 172, 179, 181, 189, 190, 191, 192, 195, 202, 204, 215, 217, 218, 219, 221, 225, 237, 238, 239, 242, 244, 248, 251, 254, 262, 269, 275, 282, 284, 286, 291, 293, 296, 299, 301, 302, 303, 323, 326, 327, 328, 329, 330, 331, 332, 333, 350, 353, 357, 358, 359, 366, 378, 380, 382, 383, 387, 389, 391, 392, 395, 396, 397, 398, 409, 413, 415, 417, 419, 420, 422, 424, 426, 429, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 466, 467, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 708, 729, 730, 731, 732, 793, 796, 800, 803, 805, 806, 807, 808, 811, 812, 822, 830, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 954, 955, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1019, 1022, 1023, 1025, 1026, 1028, 1029, 1033, 1040, 1041, 1044, 1046, 1047, 1048, 1051, 1058], "wellcom": 0, "wen": 1055, "wenbo": [1050, 1052], "wendi": 1050, "wendling": 1047, "weng": 1024, "wenhao": [1048, 1049], "wenhua": 1046, "wenjian": 1046, "wenliwyan": 1051, "went": [387, 1009], "were": [0, 43, 68, 104, 105, 108, 113, 114, 143, 147, 150, 153, 169, 172, 179, 186, 217, 218, 221, 245, 254, 282, 284, 286, 313, 314, 321, 326, 327, 329, 330, 331, 332, 333, 338, 350, 357, 359, 365, 366, 377, 378, 380, 383, 384, 385, 387, 391, 395, 397, 406, 412, 416, 422, 423, 471, 474, 475, 504, 569, 570, 610, 811, 812, 827, 836, 859, 909, 910, 998, 1001, 1009, 1010, 1025, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059], "weren": [357, 886, 1049], "werman": 1052, "werneck": 1048, "werner": [1047, 1052], "werror": 391, "wersd\u00f6rfer": 1042, "weslei": [598, 738], "westermann": [0, 373, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "western": 423, "weston": [44, 420, 543, 601, 602, 908], "westov": 1048, "wetter": 191, "weyb": 1058, "wfc": 51, "wget": 391, "wh": [420, 546, 548, 555], "wh_i": 420, "what": [0, 2, 43, 48, 51, 52, 75, 80, 87, 88, 118, 124, 128, 146, 189, 190, 206, 223, 225, 233, 246, 251, 258, 313, 357, 359, 361, 366, 371, 378, 381, 383, 384, 385, 387, 389, 391, 396, 397, 398, 400, 414, 415, 421, 422, 423, 511, 544, 596, 597, 599, 654, 660, 704, 897, 898, 900, 901, 902, 903, 920, 921, 922, 923, 1008, 1009, 1010, 1012, 1025, 1029, 1040, 1047, 1058], "whatnot": 357, "whats_new": [387, 391], "wheel": [381, 383, 387, 401, 403, 1050, 1052, 1054], "wheeler": [1051, 1052], "wheelhouse_upload": 387, "when": [0, 2, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 70, 74, 75, 78, 91, 95, 102, 104, 105, 106, 111, 113, 114, 118, 123, 126, 127, 128, 130, 140, 143, 146, 147, 148, 150, 153, 154, 158, 159, 160, 169, 174, 185, 189, 190, 191, 192, 193, 197, 198, 202, 206, 208, 210, 214, 217, 219, 221, 222, 233, 244, 245, 246, 250, 251, 258, 261, 263, 271, 274, 275, 276, 277, 278, 282, 284, 285, 289, 293, 296, 298, 299, 302, 303, 304, 316, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 332, 333, 337, 338, 340, 346, 349, 350, 353, 357, 358, 359, 361, 365, 366, 370, 371, 372, 377, 378, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 401, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 431, 438, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 523, 532, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 583, 584, 586, 589, 590, 591, 592, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 614, 617, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 708, 709, 710, 712, 713, 715, 716, 720, 721, 724, 735, 736, 737, 738, 740, 742, 743, 746, 754, 756, 759, 762, 763, 765, 769, 771, 775, 776, 777, 779, 782, 786, 789, 790, 791, 792, 793, 795, 796, 797, 799, 800, 801, 803, 805, 806, 807, 808, 811, 812, 813, 814, 822, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 898, 899, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 931, 933, 934, 937, 938, 939, 946, 950, 954, 955, 956, 957, 959, 960, 961, 966, 969, 977, 997, 998, 999, 1001, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1029, 1032, 1033, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "whenev": [181, 189, 269, 366, 377, 391, 397, 401, 413, 489, 490, 491, 504, 636, 638, 1000, 1008, 1029, 1050], "where": [47, 50, 51, 53, 55, 57, 58, 61, 62, 63, 68, 88, 90, 92, 113, 118, 121, 123, 126, 132, 133, 137, 139, 141, 143, 147, 148, 150, 153, 155, 169, 170, 172, 174, 180, 183, 186, 190, 197, 202, 209, 218, 221, 226, 227, 228, 230, 234, 235, 237, 239, 240, 244, 245, 248, 251, 252, 254, 256, 266, 269, 271, 272, 275, 277, 281, 282, 284, 286, 287, 289, 293, 295, 314, 316, 318, 319, 320, 321, 322, 323, 325, 327, 328, 333, 336, 337, 344, 350, 353, 354, 355, 357, 361, 362, 366, 370, 371, 372, 377, 379, 380, 382, 383, 385, 387, 389, 390, 391, 395, 396, 397, 398, 401, 406, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 438, 444, 451, 454, 455, 459, 468, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 494, 504, 534, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 590, 591, 592, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 614, 617, 618, 619, 621, 623, 627, 630, 631, 633, 635, 636, 637, 638, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 696, 699, 700, 701, 704, 715, 719, 720, 724, 733, 737, 738, 739, 747, 749, 763, 771, 776, 777, 778, 781, 789, 790, 791, 792, 795, 796, 800, 802, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 835, 836, 837, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 855, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 875, 882, 885, 887, 888, 891, 892, 898, 900, 906, 907, 908, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 929, 947, 948, 949, 950, 956, 961, 965, 968, 993, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1020, 1021, 1023, 1024, 1025, 1029, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "wherea": [52, 70, 83, 88, 102, 113, 154, 231, 254, 276, 277, 278, 284, 299, 321, 350, 353, 354, 372, 398, 419, 422, 451, 453, 573, 666, 667, 810, 826, 840, 1001, 1008, 1010, 1012, 1019, 1025, 1053, 1058], "wherein": 397, "whether": [2, 47, 49, 52, 105, 135, 154, 177, 182, 190, 191, 217, 221, 235, 238, 245, 251, 269, 273, 316, 365, 366, 371, 378, 381, 382, 383, 385, 387, 388, 389, 397, 406, 414, 415, 416, 417, 419, 420, 422, 424, 427, 447, 449, 458, 460, 461, 466, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 494, 495, 498, 500, 504, 505, 511, 516, 517, 522, 530, 535, 539, 540, 545, 546, 547, 548, 550, 553, 554, 556, 560, 563, 564, 565, 566, 569, 570, 571, 572, 573, 574, 589, 596, 597, 598, 599, 605, 610, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 637, 639, 640, 641, 643, 644, 645, 646, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 698, 702, 703, 705, 706, 708, 710, 712, 719, 720, 750, 769, 775, 782, 786, 790, 797, 807, 808, 811, 812, 813, 814, 822, 826, 827, 830, 831, 832, 835, 836, 838, 841, 843, 846, 847, 848, 849, 851, 854, 855, 856, 858, 860, 862, 863, 864, 865, 866, 869, 870, 876, 893, 899, 912, 913, 914, 915, 916, 917, 918, 924, 926, 928, 929, 930, 931, 932, 936, 938, 939, 940, 942, 950, 951, 955, 956, 964, 965, 981, 992, 996, 997, 998, 999, 1004, 1005, 1009, 1014, 1015, 1021, 1023, 1024, 1033, 1047, 1048, 1049, 1057, 1059], "whi": [190, 192], "which": [0, 2, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 70, 72, 74, 75, 78, 79, 81, 84, 88, 90, 91, 92, 93, 100, 102, 104, 105, 106, 109, 111, 113, 114, 118, 120, 121, 125, 127, 128, 133, 137, 140, 141, 142, 143, 147, 149, 150, 153, 154, 156, 157, 158, 159, 160, 161, 163, 167, 169, 171, 172, 174, 175, 179, 180, 181, 185, 186, 189, 190, 191, 193, 195, 197, 198, 202, 206, 210, 217, 218, 219, 221, 223, 225, 231, 233, 234, 235, 237, 238, 239, 241, 244, 245, 248, 249, 250, 251, 252, 254, 255, 260, 261, 265, 266, 268, 269, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 293, 295, 296, 301, 302, 303, 312, 316, 318, 319, 320, 321, 322, 323, 325, 327, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 346, 350, 353, 355, 357, 358, 359, 361, 365, 366, 370, 371, 372, 375, 377, 378, 380, 381, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 398, 400, 401, 403, 406, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 494, 531, 539, 540, 541, 542, 545, 546, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 587, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 619, 620, 621, 622, 623, 625, 627, 630, 635, 636, 637, 638, 640, 641, 642, 648, 650, 651, 652, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 669, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 688, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 715, 717, 724, 725, 727, 728, 731, 733, 734, 742, 743, 744, 745, 750, 751, 754, 764, 766, 786, 787, 788, 789, 790, 791, 797, 805, 806, 807, 808, 811, 812, 813, 814, 816, 818, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 862, 863, 864, 865, 866, 869, 872, 876, 879, 883, 885, 886, 887, 890, 891, 892, 893, 894, 896, 904, 905, 907, 908, 909, 912, 914, 917, 918, 920, 921, 922, 923, 924, 928, 930, 933, 934, 938, 939, 945, 948, 950, 951, 955, 956, 958, 961, 964, 965, 966, 968, 977, 980, 983, 989, 992, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "whichev": [415, 422, 453, 552, 569, 570, 641, 658, 662, 664, 672, 690, 691, 705], "whidou": 1053, "while": [0, 2, 25, 43, 46, 47, 49, 51, 55, 58, 61, 64, 70, 72, 74, 78, 79, 83, 90, 97, 101, 104, 107, 109, 121, 127, 128, 137, 140, 143, 144, 148, 153, 155, 158, 172, 175, 180, 182, 183, 185, 189, 190, 191, 192, 195, 197, 199, 202, 205, 206, 211, 217, 219, 221, 233, 244, 247, 248, 251, 252, 261, 262, 266, 268, 269, 270, 274, 275, 276, 278, 282, 283, 284, 285, 286, 288, 298, 316, 317, 318, 321, 322, 323, 325, 328, 331, 332, 343, 346, 357, 359, 365, 366, 371, 375, 376, 377, 378, 379, 382, 383, 385, 387, 388, 389, 391, 392, 395, 397, 398, 409, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 427, 451, 471, 474, 475, 490, 492, 504, 529, 540, 560, 565, 566, 567, 568, 572, 573, 574, 575, 576, 577, 578, 583, 590, 596, 597, 598, 599, 602, 605, 610, 614, 642, 651, 654, 655, 657, 664, 665, 666, 667, 684, 685, 686, 687, 716, 738, 762, 782, 786, 796, 802, 805, 808, 809, 810, 813, 814, 815, 816, 817, 818, 822, 823, 824, 826, 831, 833, 834, 835, 836, 837, 839, 847, 858, 860, 862, 863, 864, 871, 872, 873, 874, 875, 888, 900, 905, 910, 912, 913, 920, 921, 922, 923, 934, 960, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1015, 1016, 1019, 1021, 1024, 1025, 1028, 1029, 1040, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "whilst": [141, 239], "whisker": 49, "white": [2, 93, 95, 123, 179, 190, 231, 237, 302, 314, 318, 340, 345, 420, 423, 633, 1025, 1040, 1043, 1046, 1050, 1054], "whitekernel": [2, 174, 179, 180, 425, 619, 620, 622, 1051], "whiten": [45, 123, 124, 125, 300, 420, 427, 541, 542, 549, 890, 892, 1019, 1044, 1046, 1054, 1055, 1058], "whiten_solv": [427, 541, 1055, 1058], "whitening_": 541, "whitespac": 423, "whl": 387, "who": [0, 104, 190, 371, 378, 383, 390, 398, 401, 854, 855, 856, 858, 860, 862, 863, 864, 1028, 1042, 1045, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "whole": [49, 85, 108, 153, 161, 186, 218, 254, 272, 279, 308, 346, 350, 361, 370, 383, 395, 396, 416, 418, 422, 425, 456, 490, 546, 563, 564, 565, 566, 571, 572, 573, 574, 578, 693, 694, 808, 811, 812, 822, 836, 847, 848, 849, 850, 851, 998, 1009, 1019, 1048, 1050], "whose": [2, 90, 112, 113, 114, 172, 179, 217, 245, 344, 378, 391, 392, 397, 413, 415, 417, 422, 424, 425, 428, 444, 445, 446, 455, 468, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 523, 542, 546, 548, 549, 552, 555, 557, 580, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 648, 679, 703, 726, 808, 815, 822, 837, 858, 877, 904, 905, 955, 987, 988, 1003, 1010, 1014, 1015, 1016, 1024, 1043, 1048, 1049, 1051, 1054], "why": [64, 72, 87, 123, 137, 143, 153, 190, 192, 195, 206, 269, 272, 275, 293, 357, 358, 383, 391, 397, 415, 417, 420, 426, 451, 454, 458, 1009, 1011, 1024, 1043], "wick": 1052, "wide": [64, 95, 96, 120, 140, 248, 317, 395, 415, 420, 423, 998, 1005, 1028, 1033, 1040, 1042, 1056], "widehat": 177, "wider": [52, 219, 423, 925, 1005], "widetild": 1025, "width": [47, 49, 52, 80, 88, 113, 120, 125, 126, 131, 132, 133, 140, 146, 147, 150, 160, 168, 176, 182, 201, 258, 260, 274, 299, 316, 318, 319, 322, 327, 330, 343, 380, 416, 445, 446, 459, 471, 501, 502, 514, 529, 594, 877, 925, 1019, 1023, 1025, 1048], "wiesel": [417, 428, 482], "wignal": [1043, 1044, 1050, 1051], "wijewardena": [0, 1043, 1044, 1045], "wiki": [55, 61, 389, 391, 603, 644, 676, 679, 703, 713, 854, 855, 860, 861, 862, 863, 890, 906, 920, 921, 1005, 1009, 1025], "wikic": 1001, "wikipedia": [37, 42, 61, 187, 391, 415, 603, 615, 616, 644, 664, 676, 679, 690, 691, 703, 712, 713, 715, 717, 720, 724, 726, 734, 737, 738, 739, 742, 743, 746, 751, 764, 791, 793, 794, 796, 797, 800, 801, 854, 855, 860, 861, 862, 863, 890, 906, 920, 921, 1001, 1005, 1009, 1012, 1021, 1025, 1030, 1040, 1047], "wikipedia_principal_eigenvector": [55, 1030], "wikipediadet2017": 1009, "wikipediamcc2021": 1009, "wil": 1052, "wild": [2, 45, 376, 501, 502, 516, 517, 1035, 1040], "wilderness_area": 254, "wildli": [301, 1008], "wilei": [380, 999], "wilhelm": [1044, 1046, 1050], "wilk": 413, "wilksch": 1055, "willamett": 322, "willard": 1052, "willdarnel": 1050, "willduan": 1047, "william": [172, 378, 380, 425, 618, 619, 622, 627, 630, 647, 1001, 1009, 1013, 1047, 1048, 1049, 1050, 1055, 1056], "williamson": 1050, "willing": [189, 272, 414], "willocx": 1050, "willpeppo": 1052, "wilson": [113, 380, 1040, 1043], "wiman": 1040, "wimld": 1054, "win": [52, 269], "winata": [1050, 1052], "wind": [191, 1010], "windber": 1051, "windiana42": 1056, "window": [57, 339, 378, 383, 385, 386, 391, 423, 1040, 1043, 1047, 1051, 1053, 1054, 1058], "windowsapp": 401, "windowserror": 1056, "windspe": [43, 191], "wine": [2, 48, 257, 321, 322, 376, 518, 1035], "wine_review": 322, "wineri": 322, "winn": 1009, "winter": [43, 52], "winterman": 1041, "wip": [391, 401], "wipf": [653, 1005], "wire": [389, 542, 549], "wiryadi": [1052, 1058], "wisc": [172, 380, 907], "wisconsin": [2, 172, 193, 376, 508, 1017, 1035, 1045], "wise": [2, 46, 63, 83, 182, 218, 244, 285, 316, 358, 370, 397, 413, 415, 419, 420, 424, 465, 539, 542, 545, 549, 553, 554, 557, 558, 561, 563, 564, 567, 568, 600, 603, 604, 606, 607, 608, 614, 648, 660, 708, 762, 840, 859, 889, 902, 903, 906, 981, 983, 984, 985, 986, 989, 1001, 1003, 1005, 1009, 1010, 1023, 1029, 1040, 1045, 1048, 1049, 1050], "wish": [377, 383, 385, 390, 392, 401, 415, 956, 1047], "wishart": 805, "wissen": 457, "with_cent": [890, 902], "with_error": 709, "with_mean": [388, 892, 903, 1019, 1048, 1053], "with_scal": [890, 902], "with_std": [892, 903, 1019, 1048], "withheld": 419, "within": [2, 41, 43, 58, 95, 142, 144, 145, 148, 153, 157, 169, 171, 172, 213, 218, 219, 229, 235, 251, 255, 273, 274, 278, 288, 316, 317, 327, 344, 347, 350, 353, 359, 366, 370, 378, 383, 387, 392, 395, 397, 398, 406, 411, 412, 413, 415, 416, 419, 421, 422, 426, 451, 455, 468, 470, 471, 473, 476, 481, 523, 557, 575, 576, 577, 578, 601, 602, 640, 700, 704, 707, 718, 733, 789, 805, 806, 813, 814, 826, 827, 836, 837, 852, 853, 854, 855, 860, 862, 863, 864, 871, 872, 873, 885, 893, 897, 898, 900, 901, 902, 903, 914, 915, 916, 917, 918, 920, 921, 922, 923, 998, 1003, 1005, 1006, 1012, 1015, 1019, 1022, 1024, 1025, 1029, 1033, 1042, 1043, 1047, 1048, 1053, 1054, 1056, 1057, 1058, 1059], "without": [2, 43, 44, 52, 53, 61, 71, 77, 79, 82, 87, 90, 91, 97, 102, 109, 128, 143, 148, 149, 152, 153, 155, 158, 164, 168, 172, 181, 187, 189, 190, 191, 202, 206, 225, 244, 248, 251, 252, 254, 255, 257, 268, 269, 276, 280, 282, 293, 297, 298, 299, 305, 306, 307, 308, 316, 317, 321, 323, 325, 350, 353, 358, 372, 378, 379, 381, 383, 384, 385, 387, 388, 389, 392, 395, 396, 397, 406, 409, 415, 416, 420, 422, 423, 424, 425, 440, 446, 448, 453, 465, 476, 481, 499, 504, 512, 523, 540, 542, 563, 564, 571, 587, 588, 619, 635, 639, 642, 647, 667, 700, 708, 789, 811, 812, 813, 820, 822, 837, 838, 854, 861, 865, 871, 872, 875, 878, 881, 882, 884, 888, 889, 890, 892, 897, 912, 934, 977, 998, 999, 1001, 1003, 1005, 1006, 1009, 1012, 1015, 1019, 1023, 1024, 1025, 1028, 1029, 1030, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1055, 1056, 1057, 1058, 1059], "withstrok": 75, "witten": 419, "wittenau": 1045, "wk": 713, "wl": 381, "wminkowski": [1052, 1054], "wmt": 51, "wnl": 423, "wo": 423, "wojdyla": [1055, 1056], "wolberg": [172, 380], "wolf": [2, 49, 65, 70, 110, 111, 114, 115, 187, 305, 480, 482, 486, 487, 520, 557, 1003, 1030, 1047], "wolframalpha": 1050, "wolodzko": 1053, "wolosonovich": 1048, "wolpert": [422, 575, 576], "wolsza": 1058, "wompner": 1048, "won": [158, 313, 358, 387, 391, 415, 475, 504, 635, 636, 638, 695, 712, 725, 744, 745, 763, 765, 803, 1008, 1019, 1045, 1046, 1051], "wonder": [357, 381], "wonpil": 1005, "wood": 1049, "woolam": 1040, "word": [47, 54, 57, 104, 174, 205, 248, 252, 346, 358, 359, 370, 378, 379, 383, 385, 388, 397, 412, 414, 415, 417, 418, 419, 420, 460, 519, 531, 542, 544, 549, 596, 597, 599, 704, 841, 851, 909, 1003, 1007, 1011, 1014, 1019, 1022, 1023, 1033, 1040, 1048], "word_col": 57, "word_scor": 57, "word_token": 423, "wordnetlemmat": 423, "work": [0, 3, 43, 48, 52, 55, 68, 79, 80, 83, 87, 102, 111, 140, 147, 161, 172, 180, 181, 189, 190, 191, 206, 221, 234, 251, 273, 293, 302, 303, 322, 326, 328, 329, 331, 348, 350, 358, 359, 366, 371, 372, 377, 378, 381, 383, 384, 385, 386, 387, 388, 389, 391, 396, 397, 398, 409, 411, 412, 413, 415, 416, 417, 420, 422, 423, 424, 427, 428, 429, 430, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 467, 471, 472, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 490, 491, 492, 512, 516, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 703, 716, 750, 782, 786, 787, 788, 789, 796, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 956, 960, 998, 999, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1015, 1016, 1019, 1022, 1023, 1028, 1029, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "workabl": 388, "workaround": [322, 383, 808, 822], "workclass": [332, 504], "worker": [371, 397, 423, 974, 975, 1055], "workflow": [383, 386, 387, 396, 419, 1032, 1035], "working_memori": [370, 371, 475, 789, 910, 1048], "workingdai": [43, 191], "workload": 1028, "workshop": [0, 415, 423, 847, 1011, 1027], "workstat": 391, "world": [0, 90, 104, 108, 190, 221, 241, 254, 269, 357, 370, 376, 380, 415, 420, 423, 973, 999, 1009, 1011, 1027, 1029, 1033, 1035, 1040], "worldwid": 1033, "wornbb": 1051, "worri": [89, 1006], "wors": [43, 118, 137, 175, 191, 223, 275, 283, 295, 321, 366, 413, 415, 425, 438, 472, 489, 490, 491, 560, 562, 564, 566, 568, 570, 573, 576, 578, 618, 619, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 677, 678, 680, 681, 686, 687, 688, 713, 729, 730, 731, 732, 736, 793, 845, 846, 855, 863, 870, 913, 915, 918, 921, 923, 1009, 1019, 1049], "worse_prob": 275, "worsen": 148, "worst": [172, 217, 322, 380, 415, 451, 454, 716, 737, 738, 791, 792, 795, 800, 801, 837, 1009, 1033, 1040, 1053], "worth": [90, 146, 191, 217, 383, 391, 1033], "worthwhil": [106, 397], "would": [0, 25, 43, 45, 48, 52, 63, 64, 68, 80, 88, 90, 93, 104, 111, 113, 114, 118, 121, 128, 137, 150, 172, 174, 179, 180, 190, 191, 192, 193, 195, 202, 207, 217, 218, 219, 232, 235, 244, 251, 254, 262, 269, 271, 275, 276, 281, 283, 285, 289, 293, 296, 302, 308, 313, 316, 317, 321, 322, 328, 331, 338, 346, 350, 353, 354, 357, 359, 365, 366, 370, 378, 379, 383, 384, 385, 389, 391, 392, 395, 396, 397, 398, 406, 409, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 438, 453, 472, 475, 489, 490, 491, 496, 535, 540, 542, 544, 549, 552, 560, 562, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 591, 592, 595, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 684, 686, 687, 708, 710, 716, 720, 721, 728, 764, 786, 790, 793, 797, 808, 810, 822, 837, 845, 846, 855, 863, 870, 897, 898, 900, 901, 902, 903, 904, 905, 910, 912, 913, 915, 918, 920, 921, 922, 923, 965, 968, 998, 999, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1019, 1024, 1028, 1029, 1033, 1037, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "wp": [423, 665, 679], "wpd": 357, "wprd": 423, "wrap": [123, 142, 150, 296, 333, 377, 385, 397, 409, 439, 516, 665, 684, 838, 896, 999, 1009, 1012, 1024, 1028, 1040, 1045, 1048, 1050, 1051, 1053, 1055], "wraparound": 384, "wrapper": [2, 64, 296, 389, 392, 419, 425, 552, 628, 676, 679, 750, 912, 1005, 1025, 1028, 1044, 1052, 1059], "wrapt": [666, 667], "wrath": 416, "write": [47, 55, 151, 186, 193, 251, 325, 357, 370, 371, 377, 381, 382, 383, 387, 388, 389, 391, 392, 395, 397, 409, 411, 416, 420, 423, 1020, 1029, 1041, 1053, 1057], "writeabl": [938, 939, 1058], "writer": 357, "written": [41, 44, 46, 65, 86, 88, 126, 170, 187, 224, 268, 300, 328, 335, 336, 371, 380, 383, 384, 385, 389, 391, 395, 397, 416, 421, 494, 510, 516, 705, 721, 838, 917, 924, 1003, 1005, 1009, 1013, 1014, 1023, 1030, 1049], "wrong": [95, 217, 269, 302, 357, 366, 380, 383, 385, 423, 512, 734, 764, 801, 1009, 1015, 1024, 1043, 1045, 1047, 1048, 1049, 1050, 1053, 1057, 1058], "wrongli": [217, 346, 1058], "wrote": [158, 378], "ws2001": 1001, "wspace": [53, 54, 74, 79, 80, 97, 113, 123, 139, 217, 235, 244, 260, 262, 263, 266, 301, 309, 336, 343], "wstate": 1053, "wtv": 389, "wtw": 389, "wu": [1024, 1044, 1052], "wurp": [1054, 1055], "wuthrich": [217, 235], "ww": 420, "www": [45, 105, 195, 217, 233, 235, 289, 295, 313, 377, 378, 383, 391, 415, 419, 449, 456, 494, 516, 517, 539, 542, 545, 549, 652, 666, 672, 679, 693, 694, 861, 868, 920, 921, 1005, 1022], "www4": [172, 380], "wyseguy7": 1046, "w\u00fcthrich": 413, "x": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 109, 112, 113, 114, 115, 117, 118, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 237, 238, 239, 242, 244, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 376, 377, 378, 379, 383, 384, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 406, 409, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 501, 502, 503, 506, 508, 509, 510, 513, 514, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 714, 718, 719, 733, 740, 743, 750, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 796, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 931, 933, 934, 935, 936, 937, 938, 939, 942, 953, 955, 956, 957, 958, 968, 969, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1021, 1022, 1023, 1024, 1025, 1029, 1037, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059], "x0": [51, 209, 226, 240, 258, 316, 343, 397, 436, 471, 575, 576, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 875, 876, 877, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893], "x00": 423, "x006": 1041, "x00a": 423, "x00b": 423, "x00c": 423, "x00d": 423, "x00e": 423, "x00f": 423, "x00g": 423, "x00h": 423, "x00i": 423, "x00l": 423, "x00n": 423, "x00o": 423, "x00r": 423, "x00t": 423, "x00u": 423, "x00z": 423, "x0_cat": [329, 1019], "x0_infrequent_sklearn": [329, 1019], "x0_label": 316, "x0_rabbit": [329, 1019], "x0_str_femal": 885, "x0_str_male": 885, "x0l": 1044, "x1": [51, 117, 139, 149, 177, 229, 240, 316, 343, 385, 397, 436, 471, 517, 575, 576, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 635, 636, 637, 638, 707, 875, 876, 877, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893], "x110": 1055, "x1_int_1": 885, "x1_int_2": 885, "x1_int_3": 885, "x1_label": 316, "x2": [117, 139, 149, 177, 229, 258, 385, 416, 596, 637, 707], "x27": [63, 105, 106, 142, 158, 161, 169, 190, 191, 192, 245, 246, 255, 256, 258, 265, 269, 273, 275, 276, 282, 287, 289, 314, 322, 326, 327, 329, 337], "x2_tr": 637, "x3": [149, 258, 416], "x64": 381, "x8": 88, "x86": 381, "x86_64": [386, 401], "x9ft": 423, "x_": [167, 175, 266, 275, 325, 385, 415, 418, 420, 635, 643, 772, 867, 907, 908, 1005, 1011, 1016, 1046], "x_0": [218, 665], "x_1": [123, 167, 177, 214, 218, 418, 420, 422, 425, 621, 633, 665, 885, 912, 913, 1005, 1011, 1013, 1019, 1023], "x_1d": 329, "x_1x_2": 1019, "x_1x_2x_3": 1019, "x_1x_3": 1019, "x_2": [167, 177, 214, 420, 422, 423, 425, 621, 633, 1005, 1013, 1019], "x_20": 339, "x_2d": 346, "x_2x_3": 1019, "x_3": [167, 1019], "x_6": 885, "x_7": 885, "x_a": 320, "x_adult": 332, "x_aniso": [79, 92, 97], "x_axi": [125, 225, 279], "x_b": 320, "x_bimod": 320, "x_bin": 317, "x_bound": [425, 625], "x_c": [489, 490, 492, 1016], "x_calib": 444, "x_california": 186, "x_cardiotocographi": 254, "x_center": 199, "x_check": 939, "x_chisq": 320, "x_cluster": 864, "x_convert": 938, "x_copi": 1051, "x_cu": 411, "x_d": [425, 622], "x_dens": [332, 552], "x_df": 155, "x_diabet": 186, "x_different_covari": 70, "x_digit": [107, 164, 312, 416], "x_dist_graph": 856, "x_embed": [305, 306, 700, 704, 861, 1012], "x_error": 223, "x_errors_larg": 223, "x_featur": [108, 648, 649, 650, 1001], "x_filter": 92, "x_fit": 696, "x_fit_": [543, 651], "x_forestcov": 254, "x_full": [185, 186, 316], "x_full_train": 142, "x_gaussian": 320, "x_hashed_lsa": 358, "x_hat": [539, 545, 553, 554], "x_hetero": 130, "x_homo": 130, "x_i": [52, 113, 141, 167, 190, 218, 328, 353, 415, 420, 421, 422, 425, 622, 623, 627, 630, 631, 633, 847, 848, 851, 1000, 1001, 1005, 1011, 1012, 1013, 1019, 1023, 1024, 1025], "x_idx_sort": 1052, "x_imput": 638, "x_indic": 168, "x_inform": 323, "x_inlier": 303, "x_inv": [596, 599], "x_ipca": 127, "x_iri": 280, "x_isotropic_covari": 70, "x_j": [415, 425, 622, 623, 627, 630, 631, 633, 1000, 1001, 1005, 1012, 1024, 1025], "x_k": [418, 420, 1003, 1012], "x_label": 186, "x_leav": [565, 566, 567, 568, 572, 573, 574, 920, 921, 922, 923], "x_left_lower_corn": [50, 309, 378, 506], "x_legend": 47, "x_list": 319, "x_loadings_": [489, 490, 491], "x_lognorm": [320, 1019], "x_lsa": 358, "x_m": 1013, "x_max": [67, 87, 93, 139, 146, 156, 165, 176, 249, 311, 318, 340, 350, 351], "x_max_": 643, "x_mean": 427, "x_mean_": 1052, "x_min": [67, 87, 93, 139, 146, 150, 156, 165, 176, 206, 249, 311, 318, 340, 350, 351], "x_min_": 643, "x_miss": [153, 185, 186], "x_miss_california": 186, "x_miss_diabet": 186, "x_n": [123, 420, 912, 913, 1011, 1013, 1023], "x_near_unique_categori": 323, "x_new": [91, 416, 420, 424, 439, 449, 450, 452, 454, 456, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 551, 552, 557, 575, 577, 578, 590, 591, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 636, 638, 643, 646, 647, 648, 649, 650, 696, 697, 698, 699, 700, 861, 868, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 904, 905, 1021], "x_new_again": 1021, "x_new_invers": 1021, "x_norm_squar": [771, 1045, 1057], "x_normal": 1019, "x_np": 411, "x_offset": 199, "x_offset_": [652, 653, 1052], "x_origin": [542, 547, 549, 551, 552, 638, 904, 905], "x_out": [330, 876, 885, 886], "x_outlier": [200, 231, 302, 303, 345], "x_p": [415, 453, 1005], "x_pca": 127, "x_plot": [197, 218, 223, 250, 278, 301, 321], "x_plot_ext": 218, "x_plot_scal": 321, "x_po": 295, "x_q": 415, "x_r": [131, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611], "x_r2": 131, "x_rand": 281, "x_random": 206, "x_reconstruct": [329, 489, 490, 491, 591], "x_reconstructed_kernel_pca": [44, 128], "x_reconstructed_pca": [44, 128], "x_red": 87, "x_reduc": [86, 120, 156, 452], "x_restor": 86, "x_right": 70, "x_rope": 275, "x_rotations_": [418, 489, 490, 491], "x_scale": [199, 882, 898, 1019], "x_scale_": [652, 653, 1052], "x_scaler": 49, "x_score": [303, 489, 490, 491, 492], "x_scores_": [491, 1052], "x_select": 366, "x_shared_covari": 70, "x_shuffl": 323, "x_size": 114, "x_sp": 203, "x_spars": [332, 542, 979, 982], "x_sparse_embed": 574, "x_squared_norm": [263, 467], "x_src": 301, "x_std": [882, 898, 1019], "x_std_": 1052, "x_t": [471, 635, 871], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 111, 117, 118, 128, 137, 140, 142, 144, 149, 150, 151, 152, 153, 154, 157, 164, 165, 168, 169, 179, 182, 189, 190, 191, 192, 193, 195, 198, 202, 207, 212, 214, 215, 223, 224, 225, 231, 232, 233, 235, 245, 247, 253, 257, 258, 262, 268, 269, 272, 273, 278, 282, 284, 288, 290, 295, 299, 302, 304, 305, 308, 311, 313, 314, 318, 320, 321, 323, 325, 326, 327, 332, 333, 338, 339, 345, 357, 361, 363, 364, 365, 366, 370, 377, 385, 388, 396, 409, 416, 419, 422, 445, 477, 478, 479, 480, 481, 482, 483, 517, 566, 567, 568, 575, 576, 705, 706, 708, 710, 807, 830, 838, 840, 843, 861, 869, 870, 872, 886, 922, 923, 999, 1009, 1011, 1012, 1013, 1015, 1019, 1023, 1024, 1025, 1037, 1040], "x_test_df": 258, "x_test_kernel_pca": 128, "x_test_maxab": 1019, "x_test_minmax": 1019, "x_test_miss": 153, "x_test_no_cf_encod": 323, "x_test_noisi": 44, "x_test_np": 258, "x_test_pca": [45, 128], "x_test_r": 117, "x_test_scal": 258, "x_test_sel": 193, "x_test_select": 366, "x_test_text": 47, "x_test_tran": 1019, "x_test_transform": [366, 419], "x_text": 47, "x_tfidf": 358, "x_thresholds_": [247, 643, 1052], "x_torch": 411, "x_tr": [875, 881, 884, 885, 886, 890, 892, 895, 897, 898, 902, 903], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 111, 117, 118, 128, 137, 140, 144, 148, 149, 150, 151, 152, 153, 154, 157, 164, 165, 168, 169, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 198, 202, 212, 214, 215, 218, 224, 225, 231, 232, 233, 235, 245, 253, 257, 258, 262, 264, 268, 269, 272, 273, 278, 282, 284, 288, 295, 299, 302, 304, 305, 308, 311, 313, 314, 318, 320, 321, 323, 325, 326, 327, 332, 333, 338, 339, 345, 357, 361, 365, 366, 370, 377, 385, 388, 396, 416, 419, 422, 444, 445, 517, 566, 567, 568, 575, 576, 705, 706, 708, 710, 807, 830, 838, 840, 843, 861, 869, 870, 872, 886, 922, 923, 999, 1009, 1011, 1012, 1013, 1015, 1017, 1019, 1023, 1024, 1037], "x_train_": 619, "x_train_ensembl": 142, "x_train_linear": 142, "x_train_maxab": 1019, "x_train_minmax": 1019, "x_train_miss": 153, "x_train_no_cf_encod": 323, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 190, "x_train_r": 117, "x_train_sel": 193, "x_train_select": 366, "x_train_std_transform": 321, "x_train_text": 47, "x_train_tran": 1019, "x_train_transform": [321, 366, 419], "x_train_valid": 63, "x_tran": [320, 331, 411, 449, 471, 888, 893, 900, 933, 1019], "x_trans_bc": 320, "x_trans_qt": 320, "x_trans_yj": 320, "x_transform": [127, 156, 251, 492, 539, 540, 541, 542, 543, 545, 547, 551, 574, 646, 647, 696, 697, 698, 699], "x_transformed_fit_": 543, "x_true": 240, "x_uniform": 320, "x_val": [148, 1017], "x_valid": 63, "x_valu": 338, "x_vari": 92, "x_weibul": 320, "x_weights_": [418, 489, 490, 491, 492], "x_wrong": 70, "xa": 589, "xanchor": 276, "xarg": 1040, "xavier": [869, 870, 1048, 1049, 1050, 1052, 1053, 1058], "xaxi": [80, 120, 129, 143, 214, 237, 239, 242, 296, 301, 357], "xaxis2": 143, "xb": [117, 891], "xbar_": 557, "xbc": 423, "xc3": 423, "xcjason": 1050, "xcode": 381, "xd": 534, "xdang": 687, "xerox": 51, "xerr": [185, 186, 358], "xethan": 1052, "xfail": [391, 931], "xfc": 423, "xfcche": 423, "xfea": 423, "xff": 423, "xgamma": 693, "xgboost": [153, 155, 422, 1028], "xgrid": [50, 309], "xhan": 1049, "xhy": 1047, "xi": [2, 79, 100, 380, 415, 418, 423, 457, 463, 517, 1023, 1051], "xi_i": 1023, "xi_k": 418, "xiang": 1058, "xiangyin": 1053, "xiao": [0, 394, 404, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "xiaojin": 907, "xiaoyu": 1052, "xiaoyuchai": 1053, "xin": [687, 1005, 1048], "xinfan": [1040, 1041, 1044], "xing": [1048, 1049], "xinv": 877, "xinyu": 415, "xinyuliu12": 1049, "xiong": [1048, 1049, 1054], "xj": 413, "xk": [100, 558], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 96, 111, 112, 114, 115, 117, 118, 120, 125, 130, 138, 139, 141, 147, 149, 150, 151, 152, 153, 157, 161, 163, 167, 168, 171, 174, 175, 176, 177, 179, 180, 181, 190, 197, 200, 201, 202, 204, 205, 206, 207, 210, 211, 217, 219, 220, 222, 224, 226, 227, 231, 235, 248, 250, 252, 254, 270, 274, 275, 279, 280, 284, 285, 288, 290, 298, 299, 302, 303, 322, 323, 343, 345, 346, 349, 357, 362, 363, 364, 639], "xlim": [51, 63, 79, 93, 97, 107, 111, 112, 113, 125, 139, 140, 141, 157, 163, 175, 176, 190, 197, 207, 209, 216, 223, 226, 231, 244, 252, 261, 266, 270, 284, 290, 302, 303, 345, 350, 351, 354, 364], "xm": [51, 240], "xmax": [50, 111, 207, 209, 226, 227, 309], "xmin": [50, 111, 207, 209, 226, 227, 309], "xn": 517, "xom": 51, "xor": [173, 175, 176, 177, 187, 227, 228, 230, 264, 319, 351, 355, 618, 622, 630, 1005, 1025, 1030, 1047], "xp": [418, 887], "xpreprocessor": 381, "xrang": 1046, "xred": [452, 1056], "xrot": 53, "xrx": 51, "xs_sp": 203, "xsat": 1050, "xscale": [175, 180, 250], "xt": [161, 296, 397, 452, 546, 548, 635, 637, 808, 811, 812, 822, 856, 864, 872, 877, 882, 889, 901, 936, 1056, 1058], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 81, 85, 86, 87, 93, 94, 97, 115, 117, 126, 147, 149, 153, 176, 177, 178, 182, 201, 207, 213, 230, 244, 252, 261, 262, 263, 266, 274, 275, 290, 300, 309, 314, 322, 335, 346, 349, 351, 705], "xtick_period": 191, "xtick_start": 191, "xticklabel": [43, 49, 147, 153, 191, 322], "xticks_label": 149, "xticks_po": 149, "xticks_rot": [45, 705], "xtrain": 309, "xu": [415, 418, 426, 451, 1023, 1053, 1054, 1057, 1058, 1059], "xue": [0, 1044, 1045, 1046, 1048, 1049, 1052], "xuefeng": [1057, 1058, 1059], "xueqin": [687, 1005], "xun": [1050, 1052], "xuniu": 1055, "xval": 186, "xw": [216, 328, 654, 655, 657, 660, 661, 662, 663, 664, 668, 669, 670, 671, 680, 689, 690, 691, 692, 1005], "xx": [77, 93, 113, 146, 150, 156, 165, 176, 177, 178, 191, 224, 227, 228, 229, 230, 231, 242, 244, 252, 264, 302, 311, 318, 319, 340, 345, 346, 350, 351, 354, 355], "xx0": [139, 639], "xx1": [139, 639], "xx_coarser": 146, "xxx": 397, "xy": [48, 63, 84, 282, 309, 351, 401, 654, 655, 658, 659, 660, 661, 662, 663, 668, 669, 670, 671, 672, 689, 690, 691, 692, 694], "xycoord": [48, 63], "xyguo": [1046, 1048], "xytext": [48, 63, 195], "xyz": 382, "y": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 74, 75, 77, 78, 79, 80, 87, 89, 91, 92, 95, 96, 97, 100, 101, 105, 106, 108, 109, 114, 117, 118, 121, 125, 127, 128, 129, 131, 132, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 235, 237, 238, 239, 242, 245, 247, 248, 249, 250, 251, 252, 254, 255, 257, 258, 260, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 295, 296, 298, 299, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 361, 362, 363, 364, 365, 366, 375, 376, 377, 378, 379, 381, 383, 385, 387, 388, 390, 391, 392, 396, 397, 406, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 492, 494, 506, 508, 510, 513, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 591, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 708, 709, 710, 714, 719, 734, 740, 743, 749, 750, 764, 766, 767, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 796, 797, 800, 801, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 904, 905, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 931, 932, 938, 943, 944, 968, 970, 971, 972, 979, 982, 995, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1019, 1023, 1024, 1025, 1029, 1035, 1037, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "y0": [51, 240], "y1": [51, 139, 240, 517, 724, 1010, 1011], "y1_label": 46, "y2": [139, 724, 1010], "y2_label": 46, "y3": 1010, "y_": [247, 261, 265, 266, 308, 385, 418, 420, 645, 656, 677, 688, 737, 738, 746, 772, 791, 792, 795, 1005, 1009, 1046], "y_1": [138, 363, 364, 418, 1009, 1013, 1023], "y_2": [138, 363, 364, 1013], "y_20": 339, "y_2d": 346, "y_3": 364, "y_30": 340, "y_50": 340, "y_adult": 332, "y_all": [674, 676, 684, 840, 841, 869], "y_ard": 197, "y_ard_std": 197, "y_axi": [125, 225], "y_bia": 140, "y_brr": 197, "y_brr_std": 197, "y_c": [489, 490, 492], "y_calib": 444, "y_california": 186, "y_coclust": 57, "y_convert": 938, "y_cov": 619, "y_cu": 411, "y_decis": [332, 843], "y_dens": 1010, "y_diabet": 186, "y_different_covari": 70, "y_digit": [107, 164, 312, 416], "y_error": [140, 223], "y_errors_larg": 223, "y_filter": 92, "y_full": [185, 186, 316], "y_full_train": 142, "y_grid_pr": 156, "y_hat": 472, "y_high": 150, "y_i": [141, 328, 353, 413, 422, 1000, 1001, 1005, 1009, 1013, 1023, 1024, 1025], "y_indic": 883, "y_iri": 280, "y_isotropic_covari": 70, "y_j": [1001, 1009, 1011, 1019, 1024], "y_k": [418, 1019], "y_kmean": 57, "y_kr": 250, "y_l": 1009, "y_label": 235, "y_left_lower_corn": [50, 309, 378, 506], "y_limit": 147, "y_loadings_": [489, 490, 491], "y_loc": 357, "y_log_prob": 843, "y_log_proba": 872, "y_low": 150, "y_lower": [95, 150], "y_mask": 339, "y_max": [67, 93, 139, 146, 156, 165, 176, 235, 249, 311, 318, 340, 350, 351, 643, 645], "y_mean": [179, 180, 183, 619, 652, 653], "y_mean_": 1052, "y_med": 150, "y_min": [67, 93, 139, 146, 156, 165, 176, 249, 311, 318, 340, 350, 351, 643, 645], "y_miss": [185, 186], "y_miss_california": 186, "y_miss_diabet": 186, "y_multirf": 157, "y_n": [1009, 1013, 1023], "y_new": 91, "y_nois": 140, "y_noisi": 216, "y_norm_squar": 771, "y_normal": 219, "y_np": 411, "y_numer": [938, 997], "y_observ": 333, "y_onehot_test": 284, "y_org": 943, "y_outlier": 200, "y_pareto": 219, "y_plot": [197, 218, 223, 278], "y_plot_ext": 218, "y_po": 359, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 92, 97, 104, 109, 137, 150, 151, 153, 158, 169, 190, 217, 219, 224, 227, 232, 234, 235, 244, 245, 254, 269, 271, 273, 278, 303, 307, 314, 321, 333, 338, 339, 366, 383, 390, 397, 422, 438, 446, 472, 489, 490, 491, 557, 560, 562, 564, 565, 566, 568, 570, 572, 573, 575, 576, 578, 619, 639, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 705, 706, 708, 709, 710, 711, 716, 720, 721, 726, 729, 730, 731, 732, 736, 737, 738, 742, 744, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 791, 792, 793, 795, 796, 798, 799, 804, 808, 811, 812, 822, 833, 843, 845, 846, 855, 863, 870, 872, 912, 913, 914, 915, 916, 917, 918, 921, 923, 1009, 1011, 1046, 1047, 1049, 1051, 1055, 1056, 1057], "y_pred_ard": 202, "y_pred_bin": 217, "y_pred_chain": 295, "y_pred_empti": [737, 738], "y_pred_enet": 202, "y_pred_ensembl": 295, "y_pred_lasso": 202, "y_pred_lr": 219, "y_pred_nnl": 212, "y_pred_ol": 212, "y_pred_outli": [231, 302, 345], "y_pred_outliers_sgd": 231, "y_pred_ovr": 295, "y_pred_product": 235, "y_pred_qr": 219, "y_pred_ridg": 109, "y_pred_ridge_with_trans_target": 109, "y_pred_scal": 321, "y_pred_seg": 217, "y_pred_test": [231, 302, 345], "y_pred_test_sgd": 231, "y_pred_tot": 235, "y_pred_train": [231, 345], "y_pred_train_sgd": 231, "y_pred_with_": 189, "y_pred_without_": 189, "y_predict": [140, 385, 1040], "y_prob": [62, 64, 177, 445, 446, 717, 843, 869, 1009, 1054, 1058], "y_proba": [149, 152, 321, 397, 717, 872, 1058], "y_proba_sc": 321, "y_rand": 340, "y_reconstruct": [489, 490, 491], "y_rf": 157, "y_right": 70, "y_rotations_": [418, 489, 490, 491], "y_sampl": [183, 619], "y_scaler": 49, "y_score": [245, 282, 284, 397, 489, 490, 491, 715, 728, 734, 735, 747, 748, 764, 790, 796, 797, 802, 808, 811, 812, 822, 872, 1009, 1046, 1054, 1056, 1058], "y_scores_": [491, 1052], "y_shared_covari": 70, "y_spars": 1010, "y_std": [180, 183, 560, 619, 652, 653, 1053], "y_std_": 1052, "y_svr": 250, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 117, 118, 128, 137, 140, 142, 144, 149, 150, 151, 152, 153, 154, 157, 164, 165, 168, 169, 182, 189, 190, 191, 192, 193, 195, 202, 212, 214, 217, 223, 224, 225, 232, 233, 235, 245, 253, 257, 258, 262, 268, 269, 272, 273, 278, 282, 284, 288, 295, 299, 304, 305, 311, 313, 314, 318, 321, 323, 325, 326, 327, 332, 333, 338, 339, 357, 361, 365, 366, 377, 388, 396, 416, 419, 422, 445, 517, 566, 567, 568, 575, 576, 705, 706, 708, 710, 807, 830, 838, 840, 843, 861, 869, 870, 872, 922, 923, 1009, 1011, 1012, 1019, 1024, 1037, 1040], "y_test_pr": 262, "y_test_predict": 253, "y_test_r": 117, "y_test_tru": 338, "y_thresholds_": [247, 643, 1052], "y_torch": 411, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 104, 105, 109, 117, 118, 128, 137, 140, 144, 148, 149, 150, 151, 152, 153, 154, 157, 164, 165, 168, 169, 180, 181, 182, 183, 189, 190, 191, 192, 193, 195, 198, 202, 212, 214, 215, 218, 224, 225, 232, 233, 245, 253, 257, 258, 262, 268, 269, 272, 273, 278, 282, 284, 288, 295, 299, 304, 305, 311, 313, 314, 318, 321, 323, 325, 326, 327, 332, 333, 335, 336, 338, 339, 340, 357, 361, 365, 366, 370, 377, 385, 388, 396, 416, 419, 422, 444, 445, 517, 566, 567, 568, 575, 576, 705, 706, 708, 710, 807, 830, 838, 840, 843, 861, 869, 870, 872, 922, 923, 999, 1009, 1011, 1012, 1017, 1019, 1024, 1037], "y_train_": 619, "y_train_ensembl": 142, "y_train_linear": 142, "y_train_noisi": 181, "y_train_pr": 262, "y_train_r": 117, "y_train_valid": 63, "y_tran": 109, "y_transform": 492, "y_true": [43, 52, 57, 68, 94, 109, 137, 158, 177, 217, 227, 235, 254, 263, 269, 338, 383, 438, 445, 446, 472, 489, 490, 491, 560, 562, 564, 565, 566, 568, 570, 572, 573, 576, 578, 619, 643, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 678, 680, 681, 686, 687, 705, 706, 708, 709, 710, 711, 715, 716, 717, 720, 721, 726, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 790, 791, 792, 793, 795, 796, 797, 798, 799, 802, 804, 807, 845, 846, 855, 863, 870, 913, 915, 918, 921, 923, 1009, 1041, 1046, 1047, 1048, 1049, 1051, 1052, 1054, 1055, 1057], "y_true_bin": 217, "y_true_categor": [717, 1009], "y_true_empti": 737, "y_true_mean": 219, "y_true_seg": 217, "y_type_": 879, "y_uniqu": 61, "y_upper": [95, 150], "y_val": [148, 1017], "y_valid": 63, "y_var": 140, "y_vari": 92, "y_weights_": [418, 489, 490, 491, 492], "y_wrong": 70, "yacin": 1048, "yadav": 1054, "yagi": 1052, "yahoo": 51, "yair": [415, 699], "yakov": 1052, "yalburgi": [1047, 1048], "yaman": 1055, "yamanishi": 378, "yamin": 1040, "yaml": [387, 391], "yan": [1044, 1052], "yanchor": 276, "yang": [378, 415, 420, 542, 647, 1046, 1047, 1050, 1052, 1053, 1054, 1056, 1057], "yangarbit": 1047, "yanhong": 1055, "yanlend": 1046, "yann": [1040, 1042], "yanni": 415, "yannick": [1040, 1042], "yao": [0, 380, 394, 404, 1046, 1047, 1048, 1049, 1056, 1057, 1058, 1059], "yap": 1047, "yar": 1054, "yareyaredesuyo": 1058, "yaroslav": [0, 404, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1056, 1057, 1058, 1059], "yarowski": [327, 909, 1022], "yashika": 1052, "yasmeen": 1053, "yat2016": 415, "yate": [598, 738], "yates2011": 598, "yau": [1043, 1044, 1045, 1046, 1047], "yaxi": [46, 49, 80, 95, 120, 129, 143, 214, 237, 239, 242, 260, 296, 301, 357], "ye": [357, 391, 397, 409, 666, 667, 879, 896, 1005], "year": [0, 43, 161, 172, 179, 189, 190, 191, 217, 218, 235, 333, 380, 382, 387, 395, 419, 423, 810, 815, 817, 891, 1005, 1009, 1029, 1033], "yearli": [43, 398], "yearremodadd": 158, "yeast": [295, 843], "yee": [1047, 1048], "yegelwel": 1052, "yeh": 1053, "yelit": 1046, "yellow": [70, 121, 346, 1010], "yellowbrick": 1028, "yellowgreen": [218, 220, 227, 363], "yen": [1046, 1047], "yenchen": [0, 1046], "yenchenlin": 1046, "yenugula": 1058, "yeo": [316, 320, 888, 900, 1019, 1048, 1054, 1056], "yep": 386, "yerr": [107, 112, 114, 144, 147, 171, 298, 322, 338], "yesy": 403, "yesyesclassificationclassificationnumb": 403, "yesyesdo": 403, "yesyesfew": 403, "yesyesllel": 403, "yesyespredict": 403, "yesyessgdclassifiersgd": 403, "yesyessgdregressorsgd": 403, "yesyestextdatatext": 403, "yet": [48, 92, 202, 235, 265, 276, 359, 372, 378, 382, 395, 400, 401, 406, 419, 420, 422, 423, 425, 455, 459, 468, 469, 561, 562, 585, 786, 992, 998, 1005, 1009, 1015, 1023, 1029, 1049, 1057], "yeung": 1046, "ygrid": [50, 309], "yhoo": 51, "yi": [517, 1011, 1044, 1048, 1049, 1052], "yichuan": [1046, 1047], "yield": [47, 48, 62, 80, 90, 111, 112, 113, 114, 150, 202, 212, 217, 232, 235, 280, 295, 311, 316, 343, 348, 357, 358, 366, 370, 372, 377, 388, 397, 412, 415, 417, 419, 420, 422, 423, 424, 444, 456, 475, 479, 516, 517, 545, 546, 547, 549, 554, 561, 562, 567, 568, 569, 570, 575, 576, 602, 610, 655, 659, 660, 661, 663, 669, 671, 673, 681, 683, 694, 734, 789, 796, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 835, 836, 837, 839, 843, 846, 904, 905, 950, 957, 959, 960, 966, 1001, 1003, 1005, 1006, 1009, 1024, 1025, 1045, 1046, 1048, 1051, 1053], "yifan": 1013, "yime": 1048, "ying": [415, 459, 469, 1054], "yinglr": 1050, "yisheng": 1057, "yiyangq": 1054, "yj": [117, 320], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 96, 111, 112, 114, 115, 117, 118, 120, 125, 130, 138, 139, 141, 149, 150, 151, 152, 153, 157, 161, 163, 167, 168, 171, 174, 175, 176, 177, 179, 180, 181, 190, 197, 200, 201, 202, 204, 205, 206, 207, 210, 211, 217, 219, 220, 222, 224, 226, 227, 235, 248, 250, 252, 270, 274, 275, 278, 279, 280, 284, 285, 288, 290, 299, 323, 343, 346, 349, 357, 362, 363, 364, 639], "ylim": [51, 61, 63, 69, 72, 79, 93, 97, 111, 112, 113, 125, 139, 140, 147, 150, 157, 160, 175, 176, 190, 206, 207, 209, 210, 211, 223, 226, 227, 231, 244, 252, 261, 266, 270, 274, 278, 284, 288, 290, 302, 303, 345, 350, 351, 354, 357, 364], "ylorbr_r": 113, "ym": [51, 240], "ymax": [47, 49, 50, 111, 206, 209, 210, 218, 226, 275, 309], "ymazari": 1048, "ymean": 198, "ymin": [50, 111, 206, 209, 210, 218, 226, 275, 309], "yml": 391, "yn": [517, 1010, 1011], "yoav": 1046, "yoch": 1053, "yogendrasingh": 1055, "yojana": 1055, "yokasr": 1050, "yoni": 1043, "yoon": 1051, "yoram": [293, 743], "york": [274, 796, 805, 999, 1009, 1021], "yoshihiro": 1050, "yoshiki": [1043, 1046], "yoshizawa": 1048, "yoshua": [869, 870, 1022], "yosshi999": 1054, "yosuk": [1052, 1053], "yotam": 1056, "you": [0, 30, 54, 58, 61, 105, 120, 145, 146, 149, 151, 169, 172, 186, 191, 193, 204, 218, 221, 246, 251, 258, 263, 270, 275, 276, 282, 291, 302, 325, 326, 329, 331, 332, 336, 339, 350, 357, 366, 370, 371, 372, 377, 378, 381, 382, 383, 384, 385, 387, 388, 389, 391, 392, 396, 397, 401, 402, 403, 406, 409, 411, 413, 414, 415, 416, 417, 419, 422, 423, 424, 426, 427, 432, 444, 450, 451, 453, 454, 456, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483, 489, 490, 491, 508, 511, 512, 517, 518, 540, 541, 542, 544, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 587, 588, 589, 590, 596, 597, 598, 599, 615, 616, 618, 619, 635, 643, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 698, 707, 708, 793, 806, 807, 809, 810, 811, 812, 813, 815, 817, 823, 824, 826, 827, 828, 830, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 862, 863, 869, 870, 871, 872, 875, 876, 877, 878, 879, 884, 885, 886, 891, 892, 897, 898, 900, 901, 902, 903, 905, 907, 908, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 931, 956, 974, 998, 999, 1004, 1005, 1009, 1010, 1013, 1015, 1016, 1019, 1020, 1023, 1024, 1025, 1027, 1028, 1032, 1033, 1040, 1043, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "youden": 1009, "younger": 235, "your": [16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 370, 371, 372, 377, 381, 382, 383, 384, 386, 387, 389, 391, 392, 395, 396, 397, 401, 402, 403, 409, 411, 414, 415, 416, 417, 422, 423, 426, 427, 451, 453, 511, 541, 569, 570, 610, 642, 654, 695, 719, 808, 811, 812, 814, 822, 831, 835, 837, 931, 950, 1006, 1013, 1019, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1032, 1033, 1041, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "yourlogin": 383, "yourself": [105, 382, 383, 384, 388, 391, 1013], "ypred": 1047, "yrsold": 158, "yscale": [175, 180, 217, 250, 357], "ystd": 198, "yt": 883, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 81, 85, 86, 87, 93, 94, 97, 115, 117, 126, 151, 168, 176, 177, 178, 182, 201, 207, 213, 230, 244, 252, 261, 262, 263, 266, 270, 290, 300, 309, 314, 335, 346, 351, 357], "yticklabel": [270, 357], "ytrain": 309, "ytrue": 1047, "yu": [202, 415, 459, 469, 666, 1005, 1013, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "yuan": [1054, 1055, 1056, 1057, 1058], "yuchen": [1056, 1057], "yucheng": 1045, "yue": [1052, 1058], "yufeng": 1048, "yuichi": 1047, "yuki": 1054, "yule": [457, 464, 786, 787, 788], "yulia": 1050, "yum": 381, "yun": [1055, 1056], "yung": [1043, 1046], "yunqian": 1005, "yurchak": [0, 404, 423, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054], "yuri": [1043, 1045], "yusuf": [1055, 1056], "yusuk": 1053, "yusukenagasaka": 1053, "yutaro": 1052, "yuusuk": 1057, "yuval": [412, 458], "yv": 418, "yve": 1053, "yy": [77, 93, 113, 146, 156, 165, 176, 178, 191, 224, 228, 229, 230, 231, 242, 244, 252, 302, 311, 318, 319, 340, 345, 346, 350, 351, 354, 355], "yy_": 224, "yy_coars": 146, "yy_down": 351, "yy_up": 351, "yzhenman": 1053, "z": [50, 93, 146, 165, 176, 178, 191, 227, 229, 230, 237, 239, 244, 249, 264, 302, 309, 311, 318, 321, 340, 346, 351, 355, 380, 387, 412, 420, 422, 561, 562, 593, 647, 672, 679, 693, 694, 697, 701, 707, 732, 793, 892, 1005, 1006, 1013, 1014, 1055], "z_": 420, "z_1": 1005, "z_2": 1005, "z_3": 1005, "z_4": 1005, "z_5": 1005, "z_i": [141, 1013], "z_l": 1013, "z_points_coars": 146, "zablit": 1055, "zac": 1045, "zacchari": 1052, "zach": [1048, 1049, 1054], "zachariah": 1048, "zadrozni": [64, 413, 444, 684], "zaffalon": 275, "zahlii": 1053, "zain": [0, 404, 1054, 1055, 1056, 1057], "zalkow": 1045, "zambelli": 1043, "zamrii": 1050, "zanouda": 1047, "zaxi": [80, 120, 129, 214, 237], "zayd": 1049, "zaytsev": 1043, "zdzieblo": 1057, "zebra": 720, "zedan": 1056, "zeel": 1054, "zeeshan": [1055, 1056], "zempleni": 1054, "zen": 943, "zenin": 1046, "zentrum": 1009, "zero": [2, 25, 49, 50, 53, 64, 70, 72, 75, 76, 87, 89, 112, 114, 115, 123, 126, 128, 139, 140, 149, 151, 152, 157, 169, 172, 186, 197, 202, 203, 205, 208, 210, 211, 216, 217, 218, 221, 222, 223, 227, 232, 235, 248, 251, 252, 254, 260, 264, 266, 272, 275, 280, 284, 285, 301, 316, 326, 327, 350, 353, 358, 359, 361, 365, 370, 371, 378, 385, 389, 397, 413, 415, 417, 420, 422, 423, 424, 425, 428, 453, 459, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 494, 505, 516, 517, 531, 534, 535, 539, 540, 543, 545, 546, 547, 548, 550, 551, 555, 556, 560, 565, 566, 567, 568, 569, 570, 572, 573, 574, 589, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 615, 616, 619, 644, 647, 651, 652, 653, 658, 666, 667, 672, 673, 674, 675, 676, 679, 684, 685, 686, 693, 694, 711, 717, 720, 721, 723, 724, 733, 737, 738, 742, 746, 748, 754, 791, 792, 793, 795, 804, 805, 823, 824, 827, 828, 841, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 875, 882, 884, 885, 887, 888, 889, 891, 892, 898, 899, 900, 901, 905, 912, 920, 921, 922, 923, 954, 983, 994, 999, 1005, 1007, 1008, 1011, 1012, 1013, 1019, 1020, 1021, 1023, 1024, 1025, 1040, 1042, 1044, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "zero_bas": [494, 516, 517], "zero_class": 252, "zero_divis": [314, 721, 724, 737, 738, 746, 791, 792, 795, 1009, 1050, 1052, 1056, 1059], "zero_impute_scor": 186, "zero_on": [383, 1041], "zero_one_loss": [2, 383, 411, 711, 742, 1009, 1041, 1042, 1043, 1057, 1058], "zero_one_scor": 1041, "zerodivisionerror": [1047, 1050, 1056], "zeros_lik": [84, 219, 284], "zeta": 1024, "zeta_i": 1024, "zev": [1046, 1047, 1048, 1049], "zeyusun": 1053, "zha": [697, 701, 1006], "zhai_pro": 1045, "zhan": 1055, "zhang": [415, 449, 672, 687, 693, 694, 697, 701, 766, 767, 1005, 1006, 1007, 1011, 1023, 1044, 1045, 1047, 1048, 1049, 1050, 1052, 1056, 1057, 1058], "zhang02c": 684, "zhang96": [415, 449], "zhao": [1050, 1052, 1053, 1054, 1055], "zhaowei": 1052, "zhaoweiwang": 1053, "zhauniarovich": 1045, "zhdanovich": 1048, "zhechev": 1055, "zhehao": [1053, 1054, 1055, 1056, 1058], "zhenfish": 1054, "zheng": [1046, 1047, 1052], "zhenq": 1048, "zhi": [571, 1015], "zhiqe": 1048, "zhou": [571, 647, 908, 1015, 1048, 1056, 1057], "zht2007": 204, "zhu": [137, 422, 527, 561, 666, 907], "zhuyi": [1048, 1049], "zhuzhunashvili": [415, 469], "ziad": 1058, "zibulevski": [672, 693, 694], "zichen": 1045, "zielinska": 1051, "zihna": [1053, 1059], "ziji": [1048, 1049], "zijlstra": 1043, "zike": 1046, "zimek": 453, "zimmer": [1044, 1054], "zinkov": [1040, 1041, 1042, 1044, 1045], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 361, 362, 363, 364, 365, 381, 422, 836, 1019, 1036], "zisserman": [646, 1001, 1009], "zito": [1040, 1053], "ziv": 1046, "zivori": 1046, "zj": [1048, 1049], "zoj613": 1052, "zolisa": 1052, "zoom": [43, 142, 316, 403], "zoom_in_percentile_rang": 316, "zorder": [51, 93, 125, 155, 165, 175, 183, 207, 215, 238, 240, 247, 250, 260, 326, 332, 351], "zou": [137, 204, 422, 527, 561, 664, 1005, 1023], "zou_et_al_criterion_resc": 204, "zoubin": 907, "zoubir": 114, "zouhar": 1053, "zsh": 371, "zuckerberg": 0, "zwinck": 1042, "zxcvbniu": 1047, "zz": 113, "zzrh2009": 422, "z\u00e9": 1048, "\u00e4yr\u00e4m\u00f6": 1005, "\u00f3scar": [1044, 1045, 1046, 1047], "\u00f6zer": 1053, "\u0142ukasz": 1055, "\u015fahin": 1054, "\u0161t\u011bp\u00e1n": 1058, "\u675c\u4e16\u6a4b": [0, 405], "\u8d75\u4e30": 1054}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "The Iris Dataset", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "default_tags", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [192, 321, 323, 386, 395, 422, 1009], "0": [186, 325, 326, 327, 328, 1025, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "1": [191, 214, 328, 329, 330, 331, 332, 333, 395, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "10": [102, 1040], "11": 1040, "12": 1040, "13": 1041, "14": 1042, "15": 1043, "16": 1044, "17": 1045, "18": 1046, "19": 1047, "1d": 301, "2": [214, 330, 1043, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "20": [104, 357, 378, 1048], "2018": 1029, "20newgroup": 232, "21": 1049, "22": [325, 1050], "23": [326, 1051], "24": [327, 1052], "2d": [51, 87, 125, 131, 191], "3": [63, 201, 331, 1048, 1049, 1054, 1056], "3d": 191, "4": [332, 1040, 1048, 1057], "5": [333, 1025, 1040, 1058], "6": [1040, 1059], "7": 1040, "8": 1040, "9": 1040, "99": 378, "A": [52, 58, 59, 82, 93, 98, 217, 328, 382, 389, 419], "And": [241, 398], "In": 282, "NOT": 388, "One": [209, 231, 284, 328, 345, 419, 1015, 1023], "The": [0, 118, 120, 189, 190, 217, 242, 248, 269, 273, 282, 289, 293, 378, 387, 391, 419, 423, 1008, 1009, 1021], "Will": 395, "With": 255, "__sklearn_is_fitted__": 135, "_safe_index": 934, "abil": 180, "ablat": 254, "about": [0, 190, 395], "absolut": 1009, "access": 416, "accuraci": [192, 249, 357, 361, 1009], "accuracy_scor": 711, "across": 366, "action": 383, "activ": [0, 336], "ad": 415, "adaboost": [137, 138, 139, 422], "adaboostclassifi": [137, 561], "adaboostregressor": 562, "add": [332, 395], "add_dummy_featur": 894, "addit": [422, 1001], "additive_chi2_kernel": 766, "additivechi2sampl": 646, "address": 269, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 712, "adjusted_rand_scor": 713, "advanc": 255, "advantag": 415, "affin": [51, 73, 415, 1007], "affinity_propag": 461, "affinitypropag": 447, "agglom": [74, 75, 87], "agglomer": [86, 89, 1026], "agglomerativeclust": 448, "aggress": [998, 1005], "aic": [206, 1005], "algebra": [370, 392], "algorithm": [57, 58, 59, 73, 79, 84, 90, 98, 99, 100, 237, 244, 389, 395, 1003, 1005, 1010, 1012, 1013, 1017, 1025], "alias": 391, "align": 1006, "all": [275, 284, 329, 401, 1055, 1056, 1057], "all_displai": 947, "all_estim": 948, "all_funct": 949, "alloc": [54, 420], "alpha": [163, 361], "alpin": 401, "alreadi": 55, "altern": 998, "am": [147, 254], "amount": 287, "an": [82, 94, 135, 186, 199, 206, 306, 325, 329, 391, 395, 423, 998, 1015], "anaconda": 401, "analysi": [43, 64, 69, 70, 95, 123, 130, 133, 137, 150, 191, 202, 260, 277, 278, 285, 304, 305, 306, 357, 418, 420, 1003, 1012, 1026], "analyz": [52, 998], "angl": [206, 1005], "ani": 395, "anomali": 244, "anova": [169, 349], "api": [2, 41, 135, 257, 258, 325, 328, 330, 371, 385, 390, 397, 406, 411, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1057, 1058, 1059], "appli": 163, "applic": 423, "approach": [111, 206, 275], "approxim": [187, 194, 195, 249, 296, 327, 417, 1001], "ar": [102, 269, 328, 395], "arch": 401, "architectur": 1029, "ard": [202, 1005], "ardregress": 652, "arff": 377, "argument": [328, 385, 1051, 1053], "arm64": 391, "arrai": [41, 330, 333, 365, 392, 411, 1057, 1058, 1059], "artifact": 409, "artwork": 0, "as_float_arrai": 936, "ask": 395, "assert": 385, "assert_all_finit": 937, "assign": 415, "assumpt": 92, "atom": [49, 370], "attent": 395, "attribut": [385, 397, 411, 998], "auc": [325, 714], "author": [387, 1040], "autom": 383, "automat": [202, 396, 1005], "auxiliari": 41, "avail": [329, 1036, 1037], "available_if": 969, "averag": [282, 284, 415, 422, 1009], "average_precision_scor": 715, "avoid": [366, 416], "aweb": 1033, "ax": 390, "b": 117, "backend": 391, "backward": 383, "bag": [140, 149, 357, 422, 423, 998], "baggingclassifi": 563, "baggingregressor": 564, "balanc": [274, 1009], "balanced_accuracy_scor": 716, "ball": 1012, "balltre": [852, 1012], "base": [4, 41, 42, 43, 117, 144, 145, 172, 187, 202, 250, 325, 326, 328, 330, 331, 332, 383, 415, 419, 422, 424, 1005, 1017, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1059], "baseestim": [385, 429], "baselin": [195, 217], "basi": [44, 183, 425, 1001, 1005], "basic": [181, 235, 396, 417, 425], "batch": [415, 420], "bay": [61, 62, 1011], "bayesian": [25, 197, 198, 260, 275, 1005, 1008], "bayesiangaussianmixtur": 805, "bayesianridg": 653, "befor": 186, "behavior": 270, "behind": 0, "being": 190, "benchmark": [46, 49, 93, 357], "bernoulli": [1011, 1014], "bernoullinb": 847, "bernoullirbm": 868, "best": [265, 384, 395], "bestofmedia": 1033, "beta": 420, "betawork": 1033, "between": [99, 286, 1005], "bia": 140, "bic": [206, 265, 1005], "biclust": [27, 56, 57, 58, 187, 379, 412], "biclustermixin": 430, "bigger": 372, "bike": [43, 52, 191], "bin": 1019, "binar": [875, 895, 1019, 1020], "binari": [282, 295, 333, 1005, 1009], "birch": [77, 415, 449], "birchbox": 1033, "bisect": [78, 415], "bisectingkmean": [329, 450], "blind": 124, "bnp": 1033, "boil": 388, "boltzmann": [314, 1014], "bonu": 163, "book": 1033, "boost": [43, 143, 147, 148, 149, 150, 151, 152, 153, 191, 217, 325, 326, 328, 330, 331, 422], "bouldin": 415, "bound": 248, "boundari": [154, 159, 299, 340, 350], "branch": 391, "break": 354, "breast": [193, 380], "brier": 1009, "brier_score_loss": 717, "brute": [998, 1012], "bug": [382, 383, 1032, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "build": [179, 186, 381, 383, 391, 416, 1058, 1059], "bulk": [49, 370], "bunch": [395, 927], "busi": 269, "c": 389, "c4": 1025, "c5": 1025, "cach": [106, 298, 416], "calcul": [148, 160], "calibr": [5, 60, 61, 62, 63, 64, 150, 187, 217, 413, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "calibratedclassifiercv": 444, "calibration_curv": 446, "calibrationdisplai": 445, "california": 378, "calinski": 415, "calinski_harabasz_scor": 718, "call": [366, 382], "callgrind": 389, "can": [163, 395], "cancer": [193, 380], "candid": [287, 998], "canon": [117, 418], "card": 269, "cardif": 1033, "cardiotocographi": 254, "cart": 1025, "case": [353, 1005, 1009], "categor": [147, 322, 327, 332, 395, 422, 1011, 1019], "categori": [43, 329, 331, 1019], "categoricalnb": 848, "caus": 401, "causal": [189, 190], "cautiou": 190, "cca": [117, 489], "center": [123, 1019], "central": 55, "centroid": [307, 1012], "chain": [107, 256, 295, 396, 416], "chanc": 72, "chang": [251, 383, 398, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "changelog": [1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "characterist": [284, 285, 1009], "check": [190, 277, 325, 391, 411, 1048, 1049, 1050], "check_arrai": 939, "check_consistent_length": 940, "check_cv": 832, "check_estim": 950, "check_increas": 644, "check_is_fit": [385, 992], "check_memori": 993, "check_random_st": 941, "check_scalar": 942, "check_scor": 719, "check_symmetr": 994, "check_x_i": 938, "checker": 41, "checklist": 383, "chi": [1001, 1007], "chi2": 612, "chi2_kernel": 767, "choic": 420, "choos": [46, 403], "ci": [383, 391], "circl": 101, "cite": 0, "claim": [217, 235], "class": [41, 63, 72, 137, 139, 160, 201, 226, 231, 278, 282, 284, 328, 345, 348, 397, 414, 419, 422, 423, 1009, 1012, 1015, 1023, 1024, 1040, 1041], "class_likelihood_ratio": 720, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 104, 164, 175, 176, 177, 178, 182, 187, 233, 252, 278, 281, 282, 285, 295, 299, 307, 314, 325, 334, 339, 350, 357, 379, 425, 1005, 1009, 1010, 1012, 1013, 1023, 1024, 1025], "classifi": [25, 41, 61, 62, 64, 67, 135, 161, 201, 256, 272, 289, 295, 299, 325, 333, 340, 343, 346, 357, 365, 413, 422, 1003, 1012], "classification_report": 721, "classifierchain": [843, 1010], "classifiermixin": 432, "classifiertag": 928, "classnameprefixfeaturesoutmixin": 431, "clear": 1050, "clear_data_hom": 493, "clone": [385, 440], "close": [382, 391], "cloud": 125, "cloudpickl": 409, "cluster": [6, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 80, 82, 84, 87, 90, 91, 93, 95, 98, 99, 100, 101, 102, 123, 187, 329, 331, 358, 379, 412, 415, 420, 1009, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "cluster_optics_dbscan": 462, "cluster_optics_xi": 463, "clustermixin": 433, "co": [57, 59, 412], "co2": 179, "code": [0, 46, 123, 132, 383, 385, 388, 389, 391, 420, 1044, 1045, 1046, 1047, 1048], "coeffici": [172, 190, 197, 221, 222, 415, 1009], "cohen": 1009, "cohen_kappa_scor": 724, "coin": [81, 82], "color": 83, "column": [104, 105, 256], "column_or_1d": 995, "columntransform": [333, 416, 471], "com": 1033, "combin": [158, 245], "comment": 388, "commit": 383, "committe": 398, "common": [190, 366, 397, 411, 423, 1009], "commun": [0, 383], "compact": 246, "compar": [63, 77, 79, 97, 111, 117, 143, 157, 168, 195, 197, 203, 219, 224, 244, 250, 275, 283, 304, 312, 316, 322, 395], "comparison": [64, 67, 70, 78, 99, 113, 131, 147, 148, 167, 174, 237, 238, 250, 275, 286, 293, 359, 1005], "compat": [41, 325, 383, 385, 411], "compil": [381, 389], "complement": 1011, "complementnb": 849, "complet": [253, 415], "completeness_scor": 725, "complex": [46, 246, 256, 274, 277, 337, 361, 370, 1005, 1012, 1013, 1023, 1024, 1025], "compon": [118, 123, 304, 305, 306, 420, 1012, 1026], "compos": [7, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "composit": [103, 187, 416, 998], "compoundkernel": 620, "compress": [53, 88, 370], "comput": [41, 55, 73, 82, 84, 98, 99, 102, 111, 143, 210, 222, 288, 369, 370, 416, 419, 1016, 1030], "computation": 372, "compute_class_weight": 943, "compute_optics_graph": 464, "compute_sample_weight": 944, "concaten": 108, "concentr": 260, "concept": [397, 1005], "conclud": [43, 241], "conclus": [46, 52, 174, 202, 206, 293, 299, 323, 350], "conda": 381, "condit": [191, 327, 1016], "confid": 150, "config_context": 475, "configur": [370, 371], "confus": [268, 415, 1009], "confusion_matrix": 726, "confusionmatrixdisplai": [245, 705], "connect": [415, 423], "consensu": 1005, "consensus_scor": 727, "consider": 269, "constant": [217, 269, 999], "constantkernel": 621, "constraint": [153, 155, 330, 332, 415, 422], "construct": 250, "consum": 251, "content": 395, "conting": 415, "contingency_matrix": 722, "continu": [317, 383], "contribut": [383, 395], "contributor": [0, 382, 383, 398, 1044, 1045, 1046, 1047, 1048], "control": [366, 422, 1013], "convent": 384, "converg": 137, "convergencewarn": 579, "convex": 227, "cookbook": 183, "coordin": 206, "core": [0, 47, 372, 382, 389, 395, 398, 1011], "corpu": 423, "correl": [190, 193, 418, 1009, 1017], "cosin": 1007, "cosine_dist": 768, "cosine_similar": 769, "cost": [269, 361, 1025], "countvector": 596, "covari": [8, 70, 110, 111, 113, 114, 115, 187, 262, 417, 1003, 1048, 1052, 1053, 1054, 1056, 1057, 1059], "coverag": [383, 391, 1009], "coverage_error": 728, "covertyp": [254, 378], "craft": 388, "crash": 395, "creat": [104, 130, 137, 221, 245, 282, 323, 349, 350, 395], "credit": 269, "criteria": [204, 395, 1005, 1025], "criterion": [206, 327, 998, 1023], "cross": [43, 116, 117, 163, 171, 187, 206, 269, 270, 271, 273, 274, 278, 280, 285, 323, 349, 366, 414, 418, 419, 998, 1005], "cross_decomposit": [9, 1050, 1052, 1054, 1056, 1058, 1059], "cross_val_predict": 833, "cross_val_scor": [279, 834], "cross_valid": [419, 835], "cubic": 198, "cumul": 1009, "curat": 382, "curv": [62, 64, 198, 250, 257, 266, 272, 277, 282, 284, 291, 413, 1004], "custom": [135, 273, 333, 342, 423, 1019, 1024], "cut": [269, 289], "cv": [270, 366], "cv_results_": 998, "cython": [384, 389, 391], "d": [419, 1012], "d2_absolute_error_scor": 729, "d2_log_loss_scor": 730, "d2_pinball_scor": 731, "d2_tweedie_scor": 732, "data": [43, 46, 48, 51, 55, 58, 61, 63, 70, 73, 82, 84, 85, 90, 92, 93, 98, 99, 101, 102, 104, 109, 111, 113, 115, 117, 118, 124, 125, 128, 129, 130, 138, 144, 145, 148, 151, 153, 154, 158, 168, 171, 172, 180, 182, 186, 189, 192, 193, 195, 198, 203, 210, 211, 221, 245, 250, 257, 265, 270, 272, 276, 281, 282, 284, 285, 288, 299, 303, 308, 314, 316, 320, 321, 322, 332, 335, 346, 349, 352, 353, 358, 359, 366, 370, 372, 388, 395, 397, 415, 416, 419, 424, 1019, 1023, 1033], "dataconversionwarn": 580, "datadimensionalitywarn": 581, "datafram": [325, 332, 395, 1057], "dataiku": 1033, "datarobot": 1033, "dataset": [10, 42, 43, 44, 47, 52, 61, 62, 68, 79, 93, 97, 104, 117, 119, 120, 121, 123, 131, 137, 143, 146, 147, 158, 163, 174, 176, 178, 179, 181, 183, 187, 189, 190, 191, 197, 200, 202, 206, 217, 219, 226, 235, 237, 238, 244, 249, 254, 255, 269, 273, 281, 282, 289, 293, 295, 323, 339, 340, 343, 350, 357, 362, 375, 376, 377, 378, 379, 380, 388, 395, 425, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "davi": 415, "davies_bouldin_scor": 733, "dbscan": [84, 415, 426, 451], "dbscan_clust": 90, "dcg_score": 734, "deal": [41, 395], "debian": 401, "debug": 391, "debugg": 389, "decis": [137, 138, 146, 154, 159, 187, 249, 269, 289, 299, 331, 333, 340, 350, 360, 361, 362, 363, 364, 365, 395, 398, 414, 1025], "decisionboundarydisplai": 639, "decisiontre": 138, "decisiontreeclassifi": 920, "decisiontreeregressor": [327, 921], "decod": 423, "decompos": 420, "decomposit": [11, 116, 117, 122, 123, 140, 187, 379, 418, 420, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "decreas": [144, 145, 192], "deep": 395, "default": [251, 303, 383], "default_tag": 945, "defin": [72, 82, 93, 102, 237, 270, 272, 273, 359, 1009], "definit": [235, 314, 1016, 1050], "deflat": 117, "delai": 975, "demand": [43, 52], "demo": [58, 59, 73, 82, 84, 90, 93, 98, 100], "demonstr": [92, 279, 319, 335], "dendrogram": 76, "denois": [44, 126], "dens": 203, "densiti": [264, 300, 301, 309, 331, 421, 953, 1024], "densitymixin": 434, "depend": [191, 251, 255, 381, 1016, 1040, 1053, 1054], "deploi": 395, "deploy": 401, "deprec": [1, 251, 383, 946, 1050], "descent": [206, 225, 231, 1005, 1023], "descript": 189, "design": 179, "det": [272, 1009], "det_curv": 735, "detail": [1001, 1023, 1024], "detcurvedisplai": 706, "detect": [48, 244, 254, 272, 302, 303, 1009, 1015, 1024], "determin": [114, 202, 417, 1005, 1009], "develop": [134, 135, 187, 251, 381, 384, 385, 386, 390, 391, 392, 998, 1035, 1056], "devianc": [151, 1009], "devic": 411, "diabet": [163, 255, 289, 380], "diagnost": 380, "dict": 423, "dict_learn": 553, "dict_learning_onlin": 554, "dictionari": [85, 123, 126, 132, 420], "dictionarylearn": 539, "dictvector": [359, 589], "did": 395, "diff": 391, "differ": [75, 79, 97, 111, 183, 191, 316, 319, 322, 343, 350, 385, 395, 406, 415, 1005], "digit": [68, 87, 93, 164, 238, 314, 335, 336, 380], "dimension": [106, 237, 240, 256, 305, 321, 358, 1003, 1006, 1012, 1026], "direct": 234, "directli": 395, "dirichlet": [54, 420, 1008], "discount": 1009, "discov": 41, "discret": [154, 182, 317, 318, 1019], "discrimin": [69, 70, 1003], "discriminant_analysi": [12, 1048, 1049, 1052, 1054, 1055, 1056, 1059], "discuss": 382, "disk": 55, "dispatch": 393, "displai": [126, 222, 245, 246, 256, 330, 331, 332, 391, 1037, 1056], "distanc": [27, 113, 333], "distance_metr": 770, "distancemetr": 707, "distort": 126, "distribut": [50, 235, 237, 309, 320, 378, 401, 1006, 1019], "diverg": 420, "divid": 329, "do": [388, 395], "document": [0, 47, 57, 187, 327, 328, 356, 357, 358, 383, 1028, 1029, 1032, 1036, 1040, 1043, 1044, 1047, 1048], "doe": 395, "domain": 1028, "donat": 0, "dot": [183, 425], "dotproduct": 622, "down": 388, "download": [55, 158, 186, 377], "drawback": 415, "drop": [147, 1059], "dtype": 332, "dummi": [13, 1009, 1048, 1049, 1050, 1053, 1054, 1058], "dummyclassifi": 559, "dummyregressor": 560, "dump_svmlight_fil": 494, "dure": 366, "d\u00b2": 1009, "each": [282, 287, 357], "earli": [148, 153, 225], "earlier": 1040, "eas": 384, "effect": [109, 153, 189, 242, 316, 321, 338, 361], "effici": [330, 332, 392], "efficiencywarn": 582, "eigenfac": [45, 123], "eigenmap": 1006, "eigenvector": 55, "elast": [199, 205, 1005], "elasticnet": [202, 326, 654], "elasticnetcv": 655, "element": 397, "elimin": [170, 171, 424, 998], "ellipsoid": [70, 261], "ellipt": 1015, "ellipticenvelop": 476, "embed": [51, 87, 237, 238, 248, 306, 422, 1006], "emeritu": 0, "empir": [96, 114, 248, 417], "empirical_covari": 484, "empiricalcovari": 477, "enable_halving_search_cv": 587, "enable_iterative_imput": 588, "encod": [88, 147, 322, 323, 331, 1019, 1020], "enet_path": 689, "enforc": [1051, 1053], "engin": [43, 52, 192, 1028, 1033], "enhanc": [330, 398, 1028, 1043, 1044, 1045, 1046, 1047], "enrich": 332, "ensembl": [14, 136, 142, 146, 187, 422, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "enthought": 401, "entir": 395, "entri": 1022, "envelop": 1015, "environ": [371, 391, 409], "equival": 275, "error": [137, 141, 148, 150, 163, 197, 221, 272, 288, 391, 401, 1005, 1009], "establish": [99, 195], "estim": [41, 103, 110, 111, 112, 113, 114, 115, 134, 135, 140, 147, 149, 157, 180, 186, 187, 197, 220, 223, 246, 251, 253, 254, 264, 283, 293, 300, 301, 309, 325, 326, 327, 330, 332, 366, 385, 395, 396, 397, 403, 411, 416, 417, 419, 421, 422, 998, 999, 1003, 1005, 1009, 1024, 1028, 1041, 1048, 1049, 1050], "estimate_bandwidth": 465, "estimator_html_repr": 952, "euclidean_dist": 771, "evalu": [52, 72, 93, 96, 114, 217, 254, 269, 276, 279, 314, 322, 358, 396, 410, 412, 415, 419, 422, 998, 1004, 1009], "evernot": 1033, "exact": 420, "exampl": [42, 45, 48, 88, 94, 109, 119, 129, 135, 154, 181, 187, 213, 214, 221, 351, 354, 372, 388, 395, 406, 411, 414, 423, 425, 429, 432, 435, 438, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 512, 514, 518, 519, 520, 521, 522, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 592, 595, 596, 597, 598, 599, 601, 602, 605, 607, 608, 610, 612, 613, 614, 615, 616, 618, 619, 621, 622, 623, 625, 626, 627, 630, 631, 633, 635, 636, 638, 639, 640, 641, 642, 643, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 660, 661, 663, 664, 665, 666, 667, 670, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 692, 696, 697, 698, 699, 700, 701, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 717, 720, 721, 725, 726, 727, 735, 737, 740, 742, 743, 745, 746, 749, 750, 753, 754, 756, 757, 758, 760, 761, 763, 765, 769, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 865, 868, 869, 870, 871, 872, 873, 876, 877, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 898, 901, 905, 906, 908, 909, 910, 912, 915, 916, 917, 918, 919, 920, 921, 926, 927, 941, 951, 953, 960, 965, 966, 967, 968, 969, 982, 992, 1040], "except": [15, 392, 1052, 1056], "execut": [366, 395], "exercis": [162, 163, 164, 165, 187], "exhaust": 998, "exist": 383, "exp": [183, 425], "expans": 197, "expect": [191, 327, 1016], "experi": [0, 72, 382], "experiment": [16, 330, 387, 411, 1056], "explain": 1009, "explained_variance_scor": 736, "explicit": 249, "explor": 43, "exponenti": 624, "export": [40, 395], "export_graphviz": 924, "export_text": 925, "expsinesquar": 623, "extend": 1005, "extens": [389, 401], "extern": [377, 1027, 1040, 1049], "extract": [54, 108, 126, 235, 276, 358, 370, 372, 423], "extract_patches_2d": 592, "extrapol": 179, "extratreeclassifi": 922, "extratreeregressor": 923, "extratreesclassifi": 565, "extratreesregressor": 566, "extrem": [388, 422], "f": [167, 1009], "f1": 282, "f1_score": 737, "f_classif": 613, "f_regress": 614, "fa": [123, 130], "face": [45, 85, 123, 253, 378, 1033], "factor": [54, 123, 130, 133, 302, 303, 420, 1015], "factoranalysi": 540, "fail": 388, "failur": [189, 998], "fast_logdet": 954, "faster": [330, 422], "fastica": [123, 124, 125, 427, 541], "fbeta_scor": 738, "featur": [43, 52, 86, 89, 108, 128, 142, 144, 145, 147, 151, 153, 155, 156, 166, 168, 170, 171, 172, 187, 192, 193, 195, 197, 211, 214, 235, 249, 255, 276, 314, 317, 318, 321, 322, 325, 327, 328, 349, 357, 358, 370, 372, 383, 387, 406, 416, 422, 423, 424, 999, 1017, 1019, 1026, 1043, 1044, 1045, 1046, 1047], "feature_extract": [17, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "feature_select": [18, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "featureagglomer": [415, 452], "featurehash": [359, 590], "featureunion": [416, 871], "fedora": 401, "fetch_20newsgroup": 495, "fetch_20newsgroups_vector": 496, "fetch_california_h": 497, "fetch_covtyp": 498, "fetch_fil": 499, "fetch_kddcup99": 500, "fetch_lfw_pair": 501, "fetch_lfw_peopl": 502, "fetch_olivetti_fac": 503, "fetch_openml": [330, 504], "fetch_rcv1": 505, "fetch_species_distribut": 506, "file": [55, 383, 391, 401, 423], "final": [92, 174], "find": 1012, "first": [48, 72], "fit": [29, 58, 63, 92, 124, 130, 144, 145, 150, 151, 179, 197, 198, 199, 211, 214, 219, 223, 282, 295, 303, 308, 323, 352, 366, 385, 396, 406, 411, 422, 1011, 1015], "fitfailedwarn": 583, "fix": [72, 1040, 1043, 1044, 1045, 1046, 1047, 1053], "fixedthresholdclassifi": [333, 807], "flag": 391, "flexibl": [328, 999], "float64": 411, "fold": [391, 419], "footprint": 88, "forc": [998, 1012], "forecast": [52, 179], "forest": [141, 143, 144, 145, 157, 192, 193, 254, 257, 332, 378, 422, 1015], "forg": 381, "format": [377, 388, 395, 1010], "formul": [412, 422, 1003, 1012, 1023, 1024, 1025], "four": 101, "fowlk": 415, "fowlkes_mallows_scor": 739, "framework": 1028, "free": 181, "freebsd": 381, "freez": 395, "french": 217, "frequenc": 235, "frequent": 395, "frequentist": 275, "frobeniu": 420, "from": [17, 51, 126, 172, 192, 322, 325, 371, 377, 381, 395, 423, 1009, 1050], "fruit": 382, "fulli": 189, "function": [41, 49, 70, 183, 207, 221, 222, 227, 238, 270, 288, 289, 327, 349, 359, 392, 419, 422, 425, 1001, 1005, 1009, 1024, 1057], "functiontransform": 876, "fund": 0, "futur": 395, "futurewarn": 1050, "gain": [269, 1009], "galleri": [429, 432, 435, 438, 439, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 495, 496, 497, 498, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 512, 514, 518, 519, 520, 521, 522, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 589, 590, 592, 595, 596, 597, 598, 599, 601, 602, 605, 607, 608, 610, 612, 613, 614, 615, 616, 618, 619, 621, 622, 623, 625, 626, 627, 630, 631, 633, 635, 636, 638, 639, 640, 641, 642, 643, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 660, 661, 663, 664, 665, 666, 667, 670, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 692, 696, 697, 698, 699, 700, 701, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 717, 720, 721, 725, 726, 727, 735, 737, 740, 742, 743, 745, 746, 749, 750, 753, 754, 756, 757, 758, 760, 761, 763, 765, 769, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 865, 868, 869, 870, 871, 872, 873, 876, 877, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 898, 901, 905, 906, 908, 909, 910, 912, 915, 916, 917, 918, 919, 920, 921, 926, 927, 941, 951, 953, 960, 965, 966, 967, 968, 969, 982, 992], "gamma": [235, 331, 1009], "gammaregressor": 656, "gaussian": [61, 62, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 259, 260, 261, 264, 265, 266, 316, 425, 1008, 1011, 1019, 1021], "gaussian_process": [19, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "gaussianmixtur": 806, "gaussiannb": 850, "gaussianprocessclassifi": 618, "gaussianprocessregressor": 619, "gaussianrandomproject": 904, "gdb": 389, "gen_batch": 959, "gen_even_slic": 960, "gener": [10, 25, 52, 58, 61, 70, 73, 82, 84, 90, 92, 98, 99, 101, 102, 111, 113, 115, 121, 124, 125, 126, 144, 154, 168, 171, 174, 180, 181, 183, 187, 196, 197, 198, 202, 211, 217, 219, 250, 265, 272, 288, 303, 308, 314, 326, 335, 352, 353, 366, 379, 383, 397, 420, 422, 1005, 1019, 1029], "genericunivariateselect": 600, "german": 269, "get": [366, 391, 395, 396], "get_config": 634, "get_data_hom": 507, "get_feature_names_out": 329, "get_param": 385, "get_routing_for_object": 967, "get_scor": 740, "get_scorer_nam": 741, "get_tag": 961, "git": 383, "github": 383, "gitter": 1032, "glm": 25, "glossari": 397, "gmm": [262, 263], "goal": 1029, "good": [383, 388], "govern": [0, 398], "gpc": [175, 176, 177, 178, 425], "gperftool": 389, "gpr": [179, 180, 425], "gprof": 389, "gpu": 395, "gradient": [43, 143, 147, 148, 149, 150, 151, 152, 153, 191, 217, 225, 231, 325, 326, 328, 330, 331, 422, 1005, 1023], "gradientboostingclassifi": [422, 567], "gradientboostingregressor": [422, 568], "gram": 199, "graph": [41, 51, 325, 392, 395, 415, 423], "graphic": [395, 1014], "graphical_lasso": 485, "graphicallasso": 478, "graphicallassocv": 479, "greek": 81, "grid": [256, 273, 275, 283, 286, 998], "grid_to_graph": 593, "gridsearchcv": [106, 163, 279, 808], "ground": [72, 197], "group": [329, 331, 419, 1033], "groupkfold": 809, "groupshufflesplit": 810, "grow": 72, "guid": [386, 1035], "guidelin": [383, 385], "halv": [286, 287, 327, 998], "halvinggridsearchcv": 811, "halvingrandomsearchcv": 812, "ham": 1009, "hamming_loss": 742, "hand": 68, "handl": [41, 193, 999], "handwritten": [93, 238, 380], "harabasz": 415, "hard": 422, "has_fit_paramet": 996, "hash": [156, 392, 423], "hashingvector": [358, 597], "haversine_dist": 772, "hdbscan": [90, 331, 415, 453], "help": [382, 395], "helper": [49, 183, 238, 392], "here": 365, "hessian": 1006, "heterogen": [104, 416], "hierarch": [76, 82, 97, 102, 331, 415], "hierarchi": 415, "higher": 371, "highlight": [187, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 1040, 1043, 1044, 1047, 1048], "hing": 1009, "hinge_loss": 743, "histgradientboost": [327, 332], "histgradientboostingclassifi": [422, 569], "histgradientboostingregressor": [329, 570], "histogram": [143, 153, 326, 328, 330, 421, 422], "histori": [0, 1038], "hmm": 395, "hoc": 289, "hole": 241, "home": 275, "homebrew": 381, "homogen": 415, "homogeneity_completeness_v_measur": 744, "homogeneity_scor": 745, "hot": 147, "hour": 52, "hourli": 189, "hous": [147, 254, 378], "how": [163, 366, 383, 389, 395], "howaboutw": 1033, "html": [246, 385], "huber": 1005, "huberregressor": [200, 657], "hug": 1033, "hyper": [29, 150, 273, 327, 998], "hyperparamet": [90, 179, 180, 276, 283, 293, 625], "hyperplan": [229, 347, 348], "i": [333, 365, 388, 395, 419, 1033], "ic": [191, 1016], "ica": [124, 420], "id3": 1025, "idf": 423, "illustr": [106, 178, 183, 306, 425], "imag": [17, 44, 82, 85, 88, 101, 126, 377, 395, 423], "img_to_graph": 594, "impact": [43, 96, 1055, 1056, 1057, 1058, 1059], "implement": [135, 203, 395, 1009, 1012, 1023, 1024], "import": [144, 145, 151, 172, 192, 193, 249, 293, 321, 325, 414, 422, 1017], "improv": [326, 327, 328, 329, 330, 332, 333, 382, 383, 1043, 1044], "impur": [144, 145, 192, 361, 1017], "imput": [20, 184, 185, 186, 187, 325, 333, 999, 1019, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "includ": 395, "inclus": 395, "incom": 189, "inconsist": 366, "inconsistentversionwarn": 584, "incr_mean_variance_axi": 983, "increment": [127, 372, 420], "incrementalpca": 542, "independ": [123, 420], "index": [415, 963], "indic": 270, "individu": [161, 191, 327, 1016], "induct": 91, "infer": 189, "influenc": [46, 49, 370], "infonea": 1033, "inform": [167, 186, 204, 206, 387, 415, 998, 1005], "infrastructur": 0, "infrequ": [329, 331, 1019], "init": 385, "initi": [94, 96, 263], "inplace_column_scal": 984, "inplace_csr_column_scal": 985, "inplace_csr_row_normalize_l1": 990, "inplace_csr_row_normalize_l2": 991, "inplace_row_scal": 986, "inplace_swap_column": 987, "inplace_swap_row": 988, "input": [41, 370, 385, 411, 415, 1019], "inputtag": 929, "inria": 1033, "inspect": [21, 187, 188, 400, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "instal": [381, 401], "instanc": [366, 372], "instanti": 385, "instead": 269, "instruct": 381, "insur": 235, "integr": 383, "intel": 401, "interact": [43, 191, 330, 422], "interfac": [27, 406], "intern": [323, 414], "internet": 51, "interoper": 1028, "interpol": 218, "interpret": [179, 190, 221, 254, 295, 420, 422], "interv": 150, "introduc": 258, "introduct": 1006, "introductori": 181, "invari": [90, 278], "invers": [115, 417, 1021], "io": 409, "iri": [120, 129, 131, 146, 176, 226, 340, 343, 362, 380, 425], "is_classifi": 441, "is_cluster": 442, "is_multilabel": 970, "is_regressor": 443, "iso": [177, 282], "isol": 1015, "isolationforest": [154, 571], "isomap": [237, 238, 696, 1006], "isoton": [22, 247, 413, 1000, 1048, 1049, 1050, 1052, 1054, 1055], "isotonic_regress": 645, "isotonicregress": 643, "issu": [382, 383, 391], "iter": [186, 287, 419], "iterativeimput": [185, 635, 999], "j": 1033, "jaccard": 1009, "jaccard_scor": 746, "job": 395, "joblib": [371, 389, 409], "johnson": [248, 1021], "johnson_lindenstrauss_min_dim": 906, "joint": 211, "k": [78, 80, 83, 92, 93, 94, 96, 99, 102, 117, 299, 321, 358, 415, 419, 1009, 1012, 1019], "k_mean": 466, "kappa": 1009, "kbinsdiscret": [317, 319, 877], "kcachegrind": 389, "kddcup": 378, "kddcup99": 254, "kdtree": [853, 1012], "keep": 999, "kei": 409, "kernel": [19, 43, 44, 128, 174, 179, 180, 182, 183, 187, 194, 195, 249, 250, 300, 301, 309, 327, 342, 345, 350, 352, 420, 421, 425, 626, 1001, 1002, 1007, 1019, 1024], "kernel_approxim": [23, 1050, 1052, 1053, 1054, 1055, 1056], "kernel_metr": 773, "kernel_ridg": [24, 1057], "kernelcenter": 878, "kerneldens": 857, "kernelpca": [128, 543], "kernelridg": 651, "keyword": [328, 1051, 1053], "kfold": 813, "kmean": [95, 99, 326, 454], "kmeans_plusplu": 467, "kneighbors_graph": 865, "kneighborsclassifi": 854, "kneighborsregressor": 855, "kneighborstransform": 856, "knn": [186, 325], "knnimput": 636, "knowledg": 384, "known": [1048, 1049], "kpca": 420, "l": 198, "l1": [53, 202, 208, 210, 233, 353, 424], "l1_min_c": 919, "l2": [221, 353], "label": [41, 72, 282, 335, 336, 337, 378, 379, 415, 419, 422, 1009, 1020, 1022], "label_binar": 896, "label_ranking_average_precision_scor": 747, "label_ranking_loss": 748, "labelbinar": [879, 1020], "labelencod": 880, "labelpropag": 907, "labelspread": 908, "lag": 52, "laplacian": 1007, "laplacian_kernel": 774, "lar": [205, 658, 1005], "larg": 423, "lars_path": 690, "lars_path_gram": 691, "larscv": 659, "lasso": [53, 202, 203, 204, 205, 206, 211, 326, 660, 1005], "lasso_path": 692, "lassocv": 661, "lassolar": 662, "lassolars": 664, "lassolarscv": 663, "latenc": [49, 370], "latent": [54, 117, 420], "latentdirichletalloc": 544, "latest": 401, "layer": [191, 311, 1013], "lda": [70, 131, 420, 1003], "leakag": 366, "learn": [0, 41, 44, 51, 85, 123, 126, 173, 187, 189, 190, 191, 195, 236, 237, 238, 239, 250, 251, 269, 270, 277, 306, 312, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 369, 370, 372, 379, 381, 383, 384, 385, 387, 388, 395, 398, 401, 420, 422, 1004, 1006, 1014, 1022, 1028, 1029, 1031, 1033, 1034, 1036], "learner": [137, 422], "learning_curv": 836, "learningcurvedisplai": 814, "least": [118, 150, 206, 212, 215, 1005], "leav": [361, 419, 1005], "leaveonegroupout": 815, "leaveoneout": 816, "leavepgroupsout": 817, "leavepout": 818, "ledoit": [69, 112, 417], "ledoit_wolf": 486, "ledoit_wolf_shrinkag": 487, "ledoitwolf": [111, 480], "lemma": 1021, "length": [154, 401], "lesson": [189, 190], "level": [179, 180, 371, 415, 422], "liabil": 217, "librari": [370, 371], "libsvm": 377, "likelihood": [111, 197, 198, 278, 1009, 1014], "limit": [147, 174, 370, 401, 409, 423], "lindenstrauss": [248, 1021], "line": [163, 177], "linear": [25, 43, 62, 69, 70, 150, 174, 187, 190, 196, 197, 213, 217, 220, 223, 237, 238, 249, 326, 345, 350, 352, 370, 392, 395, 1003, 1005, 1006, 1007, 1019], "linear_kernel": 775, "linear_model": [25, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "lineardiscriminantanalysi": [330, 557], "linearregress": [219, 665], "linearsvc": [344, 912], "linearsvr": 913, "link": [370, 1009], "linkag": [97, 415], "linnerrud": 380, "linux": [381, 395, 401], "list": [72, 387, 1032], "loa": 179, "load": [44, 46, 55, 85, 93, 120, 143, 145, 147, 151, 163, 172, 192, 210, 235, 238, 245, 249, 257, 276, 284, 285, 295, 299, 321, 322, 346, 349, 357, 358, 359, 376, 377, 388, 395, 423], "load_breast_canc": 508, "load_diabet": 509, "load_digit": 510, "load_fil": 511, "load_iri": 512, "load_linnerud": 513, "load_sample_imag": [514, 515], "load_svmlight_fil": [516, 517], "load_win": 518, "loader": 10, "local": [237, 238, 302, 303, 1006, 1015], "locally_linear_embed": 701, "locallylinearembed": 697, "localoutlierfactor": 858, "lock": [383, 391], "lof": [302, 303], "log": [197, 198, 1009], "log_loss": 749, "logarithm": 1009, "logist": [107, 201, 207, 208, 209, 210, 232, 233, 1005], "logisticregress": [295, 666], "logisticregressioncv": 667, "loo": 419, "look": [52, 250, 352], "loss": [153, 217, 227, 326, 329, 331, 422, 1009, 1057], "lot": 395, "love": 1033, "low": [415, 422, 424], "lower": 371, "lpo": 419, "lsa": 358, "mac": 401, "machin": [173, 187, 189, 190, 191, 314, 341, 391, 1014, 1024], "machinali": 1033, "maco": 381, "macport": 401, "macro": 284, "mahalanobi": 113, "mail": 1032, "main": [47, 217], "maintain": [0, 383, 387, 409], "major": [422, 1048, 1049], "make": [158, 161, 186, 383, 398], "make_biclust": 519, "make_blob": [388, 520], "make_checkerboard": 521, "make_circl": 522, "make_classif": [388, 523], "make_column_selector": 473, "make_column_transform": 474, "make_friedman1": 524, "make_friedman2": 525, "make_friedman3": 526, "make_gaussian_quantil": 527, "make_hastie_10_2": 528, "make_low_rank_matrix": 529, "make_moon": 530, "make_multilabel_classif": 531, "make_pipelin": 873, "make_regress": [388, 532], "make_s_curv": 533, "make_scor": 750, "make_sparse_coded_sign": 534, "make_sparse_spd_matrix": 535, "make_sparse_uncorrel": 536, "make_spd_matrix": 537, "make_swiss_rol": 538, "make_union": 874, "mallow": 415, "manag": [371, 401], "manhattan_dist": 776, "mani": [270, 330, 371, 395, 1057, 1058, 1059], "manifold": [26, 187, 236, 237, 238, 239, 379, 1006, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059], "manual": [269, 414], "map": [249, 320, 1019], "mar": 1033, "margin": [197, 198, 229, 347, 351], "mark": 999, "markdown": 388, "marker": 383, "market": 51, "match": [216, 1005], "matern": 627, "mathemat": [41, 412, 422, 1001, 1003, 1012, 1016, 1023, 1024, 1025], "matric": [41, 392, 1019], "matrix": [54, 55, 182, 199, 268, 415, 420, 1009], "matter": 190, "matthew": 1009, "matthews_corrcoef": 751, "mat\u00e9rn": [183, 425], "max": [111, 1009], "max_error": 752, "maxabs_scal": 897, "maxabsscal": [316, 881], "maximum": [229, 347, 1014], "md": [698, 1006], "mdi": [145, 192], "mean": [78, 80, 83, 92, 93, 94, 96, 98, 99, 144, 145, 186, 192, 221, 358, 415, 1009, 1019], "mean_absolute_error": 753, "mean_absolute_percentage_error": 754, "mean_gamma_devi": 755, "mean_pinball_loss": 756, "mean_poisson_devi": 757, "mean_shift": 468, "mean_squared_error": 758, "mean_squared_log_error": 759, "mean_tweedie_devi": 760, "mean_variance_axi": 989, "meanshift": [98, 455], "measur": [158, 278, 415, 1009], "media": 1032, "median": [1005, 1009], "median_absolute_error": 761, "member": 382, "memori": [88, 332, 370, 389, 391], "merg": 387, "meson": [391, 1058], "messag": [275, 383], "meta": [41, 157, 251, 293, 327, 411, 422], "metadata": [41, 251, 331, 332, 357, 397, 406, 1057, 1058, 1059], "metadatarequest": 964, "metadatarout": 965, "metaestimatormixin": 435, "method": [97, 108, 117, 136, 174, 187, 237, 239, 263, 292, 294, 397, 409, 415, 1001, 1015, 1016], "methodmap": 966, "metric": [27, 72, 75, 150, 269, 279, 411, 415, 419, 998, 1007, 1009, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "micro": [282, 284], "min_cluster_s": 90, "min_po": 935, "min_sampl": 90, "mincovdet": 481, "mini": [415, 420], "minibatchdictionarylearn": 545, "minibatchkmean": [77, 99, 123, 456], "minibatchnmf": [329, 546], "minibatchsparsepca": [123, 420, 547], "minim": [388, 1025, 1053, 1054], "minimum": [114, 417], "minmax_scal": 898, "minmaxscal": [316, 882], "misc": 1040, "miscellan": [25, 187, 243, 1048, 1049, 1050, 1051, 1052, 1053, 1056], "mislead": 1017, "miss": [153, 184, 185, 186, 187, 325, 331, 332, 422, 999, 1019, 1025], "missingind": 637, "mix": 105, "mixin": 385, "mixtur": [28, 187, 259, 260, 261, 264, 265, 266, 1008, 1048, 1049, 1053, 1054, 1056, 1058], "mlp": 313, "mlpclassifi": [312, 869], "mlpregressor": 870, "mnist": [233, 313], "mode": [117, 370], "model": [25, 27, 29, 43, 46, 50, 52, 92, 109, 117, 124, 130, 143, 144, 145, 147, 148, 151, 154, 171, 172, 174, 179, 187, 190, 191, 192, 195, 196, 197, 202, 204, 206, 211, 217, 220, 235, 245, 250, 254, 255, 259, 261, 265, 266, 267, 269, 274, 275, 277, 282, 295, 303, 308, 314, 321, 326, 328, 332, 350, 352, 357, 370, 385, 395, 396, 398, 409, 410, 419, 998, 1004, 1005, 1008, 1009, 1011, 1013, 1014, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058], "model_select": [29, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "modifi": 1006, "modul": [1040, 1048, 1049, 1055, 1056, 1057, 1058, 1059], "mona": 179, "monitor": 383, "monoton": [153, 155, 332, 422], "more": [328, 395, 1013], "morgan": 1033, "most": 335, "motor": 217, "mp": 411, "much": 163, "multi": [25, 90, 137, 157, 191, 211, 226, 240, 253, 279, 282, 311, 364, 389, 1005, 1006, 1009, 1013, 1024, 1025], "multiclass": [30, 41, 187, 232, 284, 292, 293, 325, 392, 413, 1009, 1010, 1049, 1052, 1053, 1054], "multicollinear": 193, "multidimension": 237, "multilabel": [27, 121, 252, 295, 379, 392, 1009, 1010], "multilabel_confusion_matrix": 762, "multilabelbinar": [883, 1020], "multinomi": [209, 233, 1005, 1011], "multinomialnb": 851, "multioutput": [31, 187, 294, 1010, 1048, 1049, 1050, 1051, 1052, 1055, 1056, 1057, 1058], "multioutputclassifi": [844, 1010], "multioutputregressor": [845, 1010], "multipl": [108, 256, 279, 366, 390, 419, 998, 999, 1009, 1048, 1049], "multitaskelasticnet": 668, "multitaskelasticnetcv": 669, "multitasklasso": 670, "multitasklassocv": 671, "multivari": [117, 999], "murmurhash3_32": 973, "mutual": [167, 415], "mutual_info_classif": 615, "mutual_info_regress": 616, "mutual_info_scor": 763, "my": 395, "n_featur": 49, "n_job": 395, "naiv": [43, 52, 61, 62, 1011], "naive_bay": [32, 1048, 1050, 1051, 1052, 1053, 1055, 1056], "name": [155, 328, 395, 416], "nan": 999, "nan_euclidean_dist": 777, "nativ": [147, 322, 325, 327, 332], "ndcg_score": 764, "nearest": [102, 187, 296, 297, 298, 299, 304, 307, 308, 325, 999, 1012], "nearestcentroid": 859, "nearestneighbor": 860, "necessari": 388, "need": 395, "neg": [54, 123, 172, 212, 420, 1005], "neighbor": [33, 102, 187, 237, 296, 297, 298, 299, 304, 308, 321, 325, 999, 1006, 1012, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "neighborhood": [304, 305, 306, 1012], "neighborhoodcomponentsanalysi": 861, "nest": [280, 416], "net": [199, 205, 1005], "netbsd": 401, "network": [187, 191, 310, 1013, 1014], "neural": [187, 191, 310, 1013, 1014], "neural_network": [34, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056], "new": [325, 327, 328, 330, 331, 383, 395, 1027, 1040, 1041, 1043, 1044, 1045, 1046, 1047], "newsgroup": [104, 357, 378], "next": [52, 396], "nightli": 381, "nmf": [123, 329, 420, 548], "nnmf": 420, "nois": [180, 181, 198], "noisi": [126, 181, 221], "non": [43, 54, 123, 150, 212, 217, 221, 237, 280, 333, 345, 352, 420, 1005, 1019], "non_negative_factor": 555, "none": 366, "norm": 420, "normal": [69, 195, 217, 316, 320, 884, 899, 1009, 1019], "normalized_mutual_info_scor": 765, "note": [372, 411, 414, 419], "notfittederror": 585, "novelti": [302, 1015, 1024], "now": [325, 328, 1050], "number": [72, 95, 147, 153, 171, 287, 370, 385, 999], "numer": [190, 333, 371, 385], "numpi": [371, 388], "nusvc": 914, "nusvr": 915, "nystroem": [647, 1001], "oa": [69, 111, 112, 428, 482], "object": [41, 245, 270, 385, 395, 998, 1009, 1037], "observ": 189, "obtain": [395, 419], "off": [269, 289, 1005], "offici": 1059, "okcupid": 1033, "older": 1040, "olivetti": 378, "omp": 1005, "one": [118, 147, 255, 1005, 1009], "oneclasssvm": 916, "onehotencod": [329, 885], "onetoonefeaturemixin": 436, "onevsoneclassifi": [840, 1010], "onevsrestclassifi": [295, 841, 1010], "onli": [214, 234, 1051, 1053], "onlin": [85, 224, 328, 329, 1023], "onnx": 409, "oob": 141, "openml": [44, 322, 325, 377], "openmp": [371, 384], "oper": [41, 284, 285, 382, 392, 425, 1009], "optic": [100, 380, 415, 457], "optim": [29, 41, 389, 998], "optimis": 180, "option": [385, 414], "oracl": 417, "ordin": 147, "ordinalencod": [331, 886], "ordinari": [215, 1005], "org": [377, 387, 1033], "origin": [88, 128, 281, 306, 316], "orthogon": [216, 1005], "orthogonal_mp": 693, "orthogonal_mp_gram": 694, "orthogonalmatchingpursuit": 672, "orthogonalmatchingpursuitcv": 673, "osx": [395, 401], "other": [322, 377, 395, 422, 1028, 1040], "otto": 1033, "our": [93, 270, 273, 289, 383], "out": [47, 149, 372, 391, 419, 998, 1005, 1011], "outdat": 391, "outlier": [25, 48, 200, 234, 244, 254, 302, 303, 316, 1005, 1015, 1019], "outliermixin": 437, "outlin": 1017, "output": [157, 253, 316, 330, 332, 364, 1025], "outputcodeclassifi": [842, 1010], "over": 256, "overfit": 290, "overhead": 370, "oversubscript": 371, "overview": [293, 390, 409, 415, 1015], "ovo": 284, "ovr": 284, "own": [385, 395, 1009], "p": [419, 1033], "packag": [249, 1028, 1052], "pair": 415, "pair_confusion_matrix": 723, "paired_cosine_dist": 778, "paired_dist": 779, "paired_euclidean_dist": 780, "paired_manhattan_dist": 781, "pairwis": [27, 43, 275, 333, 1007], "pairwise_dist": 786, "pairwise_distances_argmin": 787, "pairwise_distances_argmin_min": 788, "pairwise_distances_chunk": 789, "pairwise_kernel": 782, "pairwisekernel": 628, "panda": [330, 388, 395], "parallel": [41, 145, 371, 389, 415, 422, 974, 998], "parallel_backend": 976, "paramet": [29, 41, 46, 111, 150, 273, 327, 346, 353, 383, 385, 396, 397, 416, 422, 998, 1005, 1009, 1024], "parametergrid": 819, "parametersampl": 820, "parametr": 1014, "parametrize_with_check": 951, "pariba": 1033, "paristech": 1033, "pariti": 99, "parser": [330, 377], "part": [85, 424], "parti": [217, 251, 401], "partial": [118, 189, 191, 255, 1016], "partial_depend": 641, "partialdependencedisplai": 640, "partit": 195, "passiv": 1005, "passiveaggressiveclassifi": 674, "passiveaggressiveregressor": 675, "past": 0, "patch": [126, 423], "patchextractor": 591, "path": [154, 205, 210, 222, 365, 401], "pattern": 133, "pca": [44, 93, 107, 120, 123, 124, 127, 128, 129, 130, 131, 321, 332, 333, 420, 549, 1026], "pdp": 191, "peerindex": 1033, "penalti": [208, 228, 353], "peopl": [0, 395, 1040, 1041, 1042, 1043], "per": 358, "percentag": 1009, "percentil": 349, "perceptron": [191, 311, 676, 1005, 1013], "perform": [72, 78, 278, 321, 327, 329, 333, 335, 358, 370, 383, 384, 415, 419], "period": [43, 218], "permiss": 395, "permut": [144, 192, 193, 281, 325, 419, 1017], "permutation_import": 642, "permutation_test_scor": 837, "perplex": 242, "persist": 409, "phimeca": 1033, "pickl": 409, "pictur": 81, "pinbal": 1009, "pipelin": [35, 103, 104, 106, 107, 158, 169, 187, 190, 246, 251, 256, 276, 322, 349, 385, 395, 396, 416, 424, 872, 1026, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "pitfal": [190, 366], "pixel": 145, "pl": 117, "plai": 349, "plan": 395, "plant": 380, "platform": [381, 391, 401], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 82, 84, 85, 92, 98, 99, 101, 102, 111, 115, 117, 120, 121, 124, 125, 138, 143, 146, 151, 154, 158, 159, 160, 161, 163, 171, 186, 191, 197, 198, 202, 209, 210, 211, 221, 222, 226, 238, 245, 249, 254, 255, 257, 265, 271, 272, 277, 279, 282, 284, 288, 291, 295, 303, 314, 322, 325, 327, 328, 335, 343, 344, 349, 350, 357, 362, 390, 1004, 1016, 1037], "plot_tre": 926, "pls1": 117, "pls2": 117, "plscanon": [418, 490], "plsregress": [418, 491], "plssvd": [418, 492], "point": [125, 269, 289, 306, 409], "poisson": [217, 235, 326, 327, 1009], "poissonregressor": 677, "polar": [52, 332], "polici": 383, "polynomi": [43, 195, 197, 198, 218, 350, 1001, 1005, 1007, 1019], "polynomial_kernel": 783, "polynomialcountsketch": [327, 648], "polynomialfeatur": 887, "posit": [123, 328], "possibl": [92, 388], "post": [29, 269, 278, 289, 361, 414], "post1": 1050, "posterior": 183, "power": [118, 217], "power_transform": 900, "powertransform": [316, 888], "pr": 382, "practic": [275, 366, 384, 388, 1006, 1013, 1023, 1024, 1025], "pre": [278, 366, 396], "precis": [282, 1009], "precision_recall_curv": 790, "precision_recall_fscore_support": 791, "precision_scor": 792, "precisionrecalldisplai": [245, 708], "precomput": [132, 199, 325, 420], "predefin": [419, 1009], "predefinedsplit": 821, "predict": [43, 49, 52, 61, 118, 138, 150, 161, 175, 189, 198, 217, 250, 269, 271, 282, 335, 370, 395, 396, 414, 419, 425, 1009, 1020], "predictionerrordisplai": 709, "predictor": 158, "premium": 235, "prepar": [123, 138, 148, 153, 195, 237, 284, 285, 321, 346], "preprocess": [36, 151, 158, 187, 190, 191, 254, 256, 315, 359, 366, 395, 1019, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "preprocessor": 191, "preserv": 391, "preval": 278, "princip": [55, 118, 420, 1026], "prior": [53, 183, 260], "privat": 1057, "probabilist": [130, 175, 420, 425], "probabl": [61, 62, 63, 66, 160, 177, 413, 422, 1024], "problem": [190, 269, 420, 1024, 1025], "process": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 366, 398, 425, 1008], "process_rout": 968, "processor": 396, "product": [183, 235, 391, 395, 409, 425, 629], "profil": 389, "project": [0, 118, 128, 131, 248, 385, 395, 1021, 1026, 1028], "pronounc": 395, "propag": [51, 73, 335, 336, 337, 415, 1022], "proper": [52, 179], "properti": 397, "propos": 398, "provid": 388, "prune": [325, 361, 1025], "public": 1050, "publica": 1033, "pull": [383, 387, 391, 395], "pure": 235, "purpos": [221, 359, 1029], "pursuit": [216, 1005], "pypi": [395, 1059], "pytest": 391, "python": [249, 371, 389, 1027, 1028], "pytorch": 411, "qda": [70, 1003], "quadrat": [70, 183, 425, 1003], "quadraticdiscriminantanalysi": 558, "qualit": [43, 52], "qualiti": [358, 1009], "quantifi": [358, 1009], "quantil": [52, 150, 153, 219, 328, 329, 1005], "quantile_transform": 901, "quantileregressor": [219, 678], "quantiletransform": [316, 889], "quantiz": [83, 88], "question": [395, 1032], "r2_score": 793, "r_regress": 617, "radial": [183, 425, 1001], "radius_neighbors_graph": 866, "radiusneighborsclassifi": 862, "radiusneighborsregressor": 863, "radiusneighborstransform": 864, "rand": 415, "rand_scor": 794, "random": [41, 55, 123, 141, 143, 156, 157, 192, 193, 248, 257, 281, 283, 332, 366, 385, 392, 419, 420, 422, 998, 1005, 1021, 1026], "random_project": [37, 1054], "random_st": 395, "randomforestclassifi": 572, "randomforestregressor": 573, "randomized_range_find": 955, "randomized_svd": 956, "randomizedsearchcv": 822, "randomli": 121, "randomst": 366, "randomtreesembed": 574, "rang": 1019, "rangespan": 1033, "rank": [27, 217, 1009], "ransac": [220, 1005], "ransacregressor": 679, "rate": 422, "ratio": [278, 1009], "ration": [183, 425], "rationalquadrat": 631, "rbf": [249, 345, 346, 350, 425, 630, 1007, 1024], "rbf_kernel": 784, "rbfsampler": 649, "rcv1": 378, "reachabl": 415, "read": 383, "real": [42, 48, 109, 187, 378], "recal": [282, 1009], "recall_scor": 795, "receiv": [284, 285, 1009], "recent": 1, "recogn": 68, "recognit": [45, 378, 380], "recommend": [366, 1028], "reconstruct": [44, 53, 126], "reconstruct_from_patches_2d": 595, "recov": 197, "recurs": [170, 171, 424], "redirect": 55, "reduc": [93, 370], "reduct": [106, 237, 241, 256, 305, 321, 358, 1003, 1012, 1026], "refer": [2, 50, 62, 64, 114, 126, 140, 195, 202, 293, 309, 387, 425, 999], "refit": [269, 273], "regard": [269, 414], "region": [81, 275], "register_parallel_backend": 978, "regress": [25, 27, 43, 52, 107, 109, 117, 118, 138, 150, 151, 161, 174, 179, 180, 181, 182, 197, 198, 201, 206, 208, 209, 210, 213, 215, 217, 219, 232, 234, 235, 247, 250, 308, 352, 363, 364, 379, 416, 425, 1000, 1002, 1005, 1009, 1010, 1012, 1013, 1023, 1024, 1025], "regressor": [25, 49, 138, 150, 197, 221, 323, 325, 328, 422], "regressorchain": [846, 1010], "regressormixin": 438, "regressortag": 930, "regular": [78, 111, 152, 190, 210, 221, 222, 311, 353, 1005, 1013], "reinforc": 395, "relat": [43, 47, 1017, 1028, 1047], "releas": [187, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 387, 401, 1038], "relev": [113, 202, 1005], "remark": [43, 92, 241, 248], "remot": 391, "remov": [395, 424, 1019, 1040], "repeat": [366, 416, 419], "repeatedkfold": 823, "repeatedstratifiedkfold": 824, "replac": 186, "repli": 391, "replic": 409, "report": [383, 388, 1009], "repositori": 377, "represent": [120, 191, 246, 326, 370, 385, 423], "reproduc": [366, 388], "request": [383, 387, 391, 395], "resampl": 979, "rescal": 321, "reshap": 370, "resourc": [287, 371, 383, 1027, 1032], "respect": 278, "respons": [117, 398], "rest": [209, 284], "restart": 389, "restrict": [314, 1014], "result": [46, 47, 58, 64, 73, 82, 84, 85, 92, 93, 98, 99, 102, 111, 113, 115, 124, 125, 138, 143, 158, 161, 186, 195, 202, 222, 250, 254, 279, 288, 295, 303, 322, 352, 358, 366, 998], "retriev": [51, 325], "return": 411, "reuter": 47, "review": [382, 383, 391], "rfe": 601, "rfecv": 602, "rich": [246, 326], "ridg": [174, 198, 200, 215, 221, 222, 250, 323, 680, 1002, 1005], "ridge_regress": 695, "ridgeclassifi": 682, "ridgeclassifiercv": 683, "ridgecv": 681, "right": 403, "roadmap": 1029, "robust": [25, 90, 113, 114, 197, 220, 223, 366, 417, 998, 1005], "robust_scal": 902, "robustscal": [316, 890], "roc": [257, 272, 284, 285, 325, 1009], "roc_auc_scor": 796, "roc_curv": 797, "roccurvedisplai": [245, 710], "role": 398, "roll": [241, 385], "root_mean_squared_error": 798, "root_mean_squared_log_error": 799, "rotat": 133, "rout": [41, 251, 331, 332, 397, 406, 1057, 1058, 1059], "routin": [47, 371, 392], "rule": 1009, "run": [46, 93, 279], "runtim": [332, 381], "r\u00b2": 1009, "sa": 254, "safe_mask": 980, "safe_sparse_dot": 957, "safe_sqr": 981, "sampl": [10, 41, 58, 73, 90, 98, 111, 124, 125, 168, 199, 230, 250, 276, 288, 308, 326, 352, 355, 377, 392, 397, 422, 1005], "sample_without_replac": 977, "saniti": 391, "save": 395, "scalabl": [195, 277, 326], "scale": [90, 190, 237, 240, 321, 353, 372, 903, 1006, 1015, 1019, 1026], "scaler": 316, "scatter": [117, 120], "scenario": 1005, "scientif": 1027, "scikit": [0, 41, 251, 270, 325, 326, 327, 328, 329, 330, 331, 332, 333, 369, 370, 381, 384, 385, 387, 388, 395, 398, 401, 1028, 1029, 1033, 1036], "scipi": [371, 1057], "score": [55, 117, 143, 163, 171, 186, 197, 265, 274, 281, 282, 349, 406, 415, 419, 1004, 1009, 1024], "script": 388, "search": [256, 273, 275, 283, 286, 293, 396, 998], "second": [48, 72], "secur": [409, 1058], "segment": [81, 101], "select": [25, 27, 89, 95, 106, 130, 163, 166, 168, 171, 172, 187, 204, 206, 211, 265, 267, 349, 395, 406, 410, 419, 424, 998, 1005, 1046], "selectfdr": 603, "selectfpr": 604, "selectfrommodel": [424, 605], "selectfw": 606, "selectkbest": 607, "selectormixin": 609, "selectpercentil": 608, "self": [327, 338, 1022], "selftrainingclassifi": 909, "semant": 420, "semi": [187, 334, 335, 339, 340, 1022], "semi_supervis": [38, 1050, 1051, 1052, 1056, 1059], "sen": [234, 1005], "sens": 53, "sensit": 269, "separ": [124, 229, 347, 348], "sequenc": [182, 395], "sequenti": [172, 424], "sequentialfeatureselector": [327, 610], "seri": [52, 211, 419], "serv": 409, "set": [48, 109, 111, 129, 158, 186, 221, 269, 282, 333, 346, 361, 395, 414, 419, 1005], "set_config": 910, "set_output": [258, 330, 332, 385], "set_param": 385, "setuptool": 1059, "sever": [235, 239], "sgd": [226, 227, 228, 229, 230, 1005, 1023], "sgdclassifi": 684, "sgdoneclasssvm": 685, "sgdregressor": 686, "shape": 242, "share": [43, 52, 191], "shift": [98, 415], "should": 395, "show": [163, 284], "show_vers": 911, "shrinkag": [111, 417, 422, 1003], "shrunk": 417, "shrunk_covari": 488, "shrunkcovari": 483, "shrunken": 1012, "shuffl": [419, 982], "shufflesplit": 825, "sigmoid": [350, 413, 1007], "sigmoid_kernel": 785, "signal": [202, 420], "signific": 281, "silhouett": [95, 415], "silhouette_sampl": 800, "silhouette_scor": 801, "similar": [182, 1007, 1009], "simpl": [135, 174, 251, 301, 389], "simpleimput": [333, 638], "simul": 189, "sine": [183, 266, 425], "singl": [140, 158, 235, 245, 379, 415, 999], "single_source_shortest_path_length": 962, "singular": [55, 420], "sinusoid": 198, "size": 422, "sketch": 1001, "skew": 1001, "skewedchi2sampl": 650, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "sklearn_assume_finit": 371, "sklearn_build_enable_debug_symbol": 371, "sklearn_enable_debug_cython_direct": 371, "sklearn_pairwise_dist_chunk_s": 371, "sklearn_run_float32_test": 371, "sklearn_se": 371, "sklearn_skip_network_test": 371, "sklearn_tests_global_random_se": 371, "sklearn_warnings_as_error": 371, "sklearn_working_memori": 371, "skop": 409, "slep": 398, "smacof": 702, "small": 388, "sne": [242, 1006], "so": 395, "social": 1032, "soft": 422, "solido": 1033, "solut": 92, "solver": [224, 420, 1005], "some": 349, "someth": 388, "sometim": 395, "sort_graph_by_row_valu": 867, "sourc": [104, 124, 381], "space": [51, 128, 416, 998, 1006], "spars": [41, 115, 123, 132, 190, 202, 203, 232, 325, 332, 357, 358, 392, 417, 420, 424, 1019, 1021, 1023, 1057], "sparse_encod": 556, "sparsecod": 550, "sparsefunc": 1049, "sparsepca": [420, 551], "sparserandomproject": 905, "sparsiti": [208, 214, 423], "spawn": 371, "speci": [50, 309, 378], "special": 359, "specif": [284, 381, 385, 998, 1028, 1029], "specifi": [155, 395, 998], "spectral": [57, 58, 59, 101, 237, 412, 415, 1006], "spectral_clust": 469, "spectral_embed": 703, "spectralbiclust": [58, 458], "spectralclust": 459, "spectralcoclust": 460, "spectralembed": 699, "speed": [49, 389], "sphere": 239, "sphinx": 383, "spline": [43, 218, 328, 1019], "splinetransform": 891, "split": [147, 327, 366, 419], "splitter": [29, 366], "sponsor": 0, "spotifi": 1033, "sprint": 0, "squar": [118, 150, 183, 212, 215, 221, 425, 1001, 1005, 1007, 1009], "stabil": 326, "stabl": 328, "stack": [158, 325, 422], "stackingclassifi": 575, "stackingregressor": 576, "stall": 383, "standard": [391, 1019], "standardscal": [316, 892], "start": 396, "statement": 1029, "statist": [275, 1028], "statlog": 269, "statu": 406, "std": [163, 197], "step": [43, 256, 387, 396, 416], "stochast": [225, 231, 237, 312, 1005, 1006, 1014, 1023], "stock": 51, "stop": [148, 153, 225, 423, 1023], "strategi": [88, 273, 293, 312, 319, 331, 333, 372, 415, 1009], "stratif": 419, "stratifi": 419, "stratifiedgroupkfold": [419, 826], "stratifiedkfold": 827, "stratifiedshufflesplit": 828, "stream": 372, "string": 395, "strip": 357, "strong": 200, "strongli": 1017, "structur": [51, 74, 82, 102, 182, 337, 365], "studi": 254, "submit": 383, "subpackag": 1029, "subsampl": 422, "subscript": 333, "subtleti": 366, "success": [286, 287, 327, 998], "sum": 632, "summar": 409, "summari": [62, 148, 206, 358, 359, 409, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "supervis": [187, 334, 335, 339, 340, 1013, 1022, 1031], "support": [0, 62, 147, 153, 187, 211, 322, 325, 326, 327, 328, 330, 331, 332, 341, 344, 352, 395, 401, 406, 411, 413, 422, 1024, 1025, 1032, 1057, 1058, 1059], "surfac": [146, 249, 362], "svc": [257, 350, 353, 917, 1024], "svd": [55, 123, 420], "svm": [39, 45, 165, 168, 169, 195, 231, 249, 328, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 354, 355, 1005, 1015, 1023, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058], "svmlight": 377, "svr": [250, 352, 918, 1024], "swiss": 241, "switch": 371, "symmetr": 117, "synthet": [61, 109, 197, 202, 272, 323, 388], "system": 381, "t": [237, 242, 1006], "tabl": 395, "tag": [381, 383, 385, 931], "take": 275, "takeawai": 217, "talk": 1027, "tangent": 1006, "target": [41, 109, 181, 235, 322, 323, 395, 397, 416, 1010, 1019, 1020], "targetencod": [331, 893], "targettag": 932, "task": [25, 211, 1005, 1028], "team": [0, 382], "technic": 398, "techniqu": 238, "templat": 385, "tensor": 1001, "term": [358, 397, 423], "test": [44, 111, 167, 278, 281, 288, 357, 361, 381, 383, 385, 391, 392, 419], "text": [17, 47, 187, 246, 276, 339, 356, 357, 358, 359, 378, 423], "tf": 423, "tfidftransform": 598, "tfidfvector": [358, 359, 599], "than": 395, "theil": [234, 1005], "theilsenregressor": 687, "them": [126, 382], "theoret": 248, "thi": [221, 1029], "third": [217, 251, 401], "thread": 371, "threshold": [269, 289, 333, 338, 414], "throughput": [49, 370], "tie": 354, "time": [43, 52, 143, 211, 249, 250, 357, 419, 1030], "timeseriessplit": 829, "tip": [370, 384, 391, 998, 1006, 1013, 1023, 1024, 1025], "togeth": [255, 284], "toi": [79, 97, 244, 380], "toler": 172, "tomographi": 53, "too": 371, "tool": [392, 395, 411], "top": [358, 1009], "top_k_accuracy_scor": 802, "topic": 54, "total": [156, 361, 422], "tough": 382, "track": [391, 416], "tracker": [383, 1032], "trade": 1005, "tradeoff": [272, 1009], "train": [137, 138, 148, 151, 154, 161, 171, 221, 245, 250, 254, 255, 257, 265, 288, 293, 314, 322, 323, 327, 338, 346, 350, 357, 361, 362, 365, 409, 419, 1012, 1022], "train_test_split": 838, "transform": [104, 105, 106, 109, 117, 142, 156, 256, 327, 328, 329, 375, 395, 396, 416, 1012, 1019, 1020, 1021], "transformedtargetregressor": 472, "transformermixin": 439, "transformertag": 933, "translat": 1028, "tree": [40, 137, 138, 142, 144, 145, 146, 153, 156, 187, 192, 217, 325, 330, 331, 332, 360, 361, 362, 363, 364, 365, 395, 422, 424, 1012, 1017, 1025, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "triag": 382, "trick": [370, 389, 391, 423], "trigonometr": 43, "troubleshoot": 401, "true": [197, 198], "truncat": 420, "truncatedsvd": 552, "trust": 163, "trustworthi": 704, "truth": [72, 197], "tsne": [296, 700], "tune": [29, 150, 269, 273, 276, 289, 327, 333, 414, 998], "tunedthresholdclassifiercv": [333, 830], "tutori": [162, 187, 1027], "tweedi": [235, 1009], "tweedieregressor": [235, 688], "two": [101, 139, 203, 255, 275], "type": [105, 260, 384, 385, 397, 411, 415], "type_of_target": 971, "typic": 382, "t\u00e9l\u00e9com": 1033, "u": 0, "ubuntu": 401, "uci": 293, "unbalanc": [348, 1024], "uncertain": 335, "uncertainti": 52, "unclaim": 383, "undefinedmetricwarn": 586, "under": [182, 395, 1035, 1056], "underfit": 290, "understand": 365, "unfold": 391, "uniform": [316, 1019], "unique_label": 972, "univari": [89, 117, 168, 349, 424, 999], "univers": 385, "unlabel": 1022, "unless": 388, "unstructur": 102, "unsupervis": [1012, 1014, 1026, 1034], "unweight": 406, "up": 1015, "updat": [387, 1050], "us": [44, 45, 51, 55, 83, 123, 124, 126, 155, 156, 158, 172, 179, 220, 231, 233, 275, 279, 284, 295, 317, 352, 357, 358, 365, 366, 372, 384, 388, 389, 391, 395, 419, 420, 423, 424, 1003, 1005, 1006, 1009, 1013, 1023, 1024, 1025, 1033, 1050], "usabl": 395, "usag": [389, 395, 406, 411, 413, 416, 422, 423, 1005], "user": [1032, 1035], "util": [41, 376, 388, 392, 1037, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "v": [89, 102, 111, 112, 114, 118, 128, 171, 191, 192, 200, 209, 235, 278, 284, 288, 290, 361, 415, 422, 999], "v_measure_scor": 803, "valgrind": [389, 391], "valid": [29, 41, 43, 163, 171, 206, 248, 269, 270, 271, 273, 274, 278, 280, 285, 291, 349, 366, 370, 385, 392, 414, 419, 998, 1004, 1005], "validate_data": 997, "validation_curv": 839, "validationcurvedisplai": [331, 831], "valu": [153, 172, 184, 185, 186, 187, 242, 251, 325, 331, 332, 365, 383, 411, 420, 422, 999, 1009, 1017, 1019, 1025], "vanilla": [269, 289], "vari": [72, 311, 338, 415], "variabl": [25, 117, 189, 190, 371, 395], "varianc": [140, 215, 424, 1009, 1019], "variancethreshold": 611, "variant": 185, "variat": [260, 1008], "variou": [49, 87, 224, 242], "vector": [55, 62, 88, 187, 341, 344, 352, 357, 359, 423, 1024], "version": [329, 377, 381, 383, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059], "versu": [140, 231, 280, 340, 370], "via": [44, 52, 88, 204, 206, 235, 422, 1001], "video": [383, 1027], "visual": [5, 29, 51, 93, 133, 148, 245, 250, 257, 270, 313, 326, 346, 415, 416, 1009, 1037], "vote": [161, 422], "votingclassifi": [159, 160, 577], "votingregressor": 578, "wage": [189, 190], "wai": [191, 383, 395], "ward": [82, 102, 415], "ward_tre": 470, "warm": 389, "warm_start": 1013, "warn": 392, "we": 102, "weak": [137, 422], "websit": [387, 1050], "weight": [41, 137, 197, 199, 230, 313, 326, 355, 406, 422, 423], "weighted_mod": 958, "what": [365, 395], "when": 269, "which": 1005, "whitekernel": 633, "who": 1033, "why": [395, 422], "wikipedia": 55, "wild": 378, "window": [381, 401], "wine": 380, "winpython": 401, "wisconsin": 380, "within": 106, "without": [74, 304, 357], "wolf": [69, 112, 417], "word": [357, 423], "work": [41, 187, 356, 370, 382, 395], "workflow": [382, 409], "world": [42, 109, 187, 378], "wrap": 295, "written": 68, "wrong": [190, 395], "x": 234, "x86_64": 391, "xor": [178, 350, 425], "y": [234, 395, 1020, 1022], "yeast": 293, "yep": 389, "yhat": 1033, "you": [163, 395], "your": [385, 388, 1009], "zero": 1009, "zero_one_loss": 804, "zopa": 1033}})