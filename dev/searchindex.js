Search.setIndex({"docnames": ["about", "authors", "authors_emeritus", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/sg_execution_times", "auto_examples/applications/svm_gui", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/bicluster/sg_execution_times", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/calibration/sg_execution_times", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/classification/sg_execution_times", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_cluster_iris", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_color_quantization", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/cluster/sg_execution_times", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/compose/sg_execution_times", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/covariance/sg_execution_times", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/cross_decomposition/sg_execution_times", "auto_examples/datasets/index", "auto_examples/datasets/plot_digits_last_image", "auto_examples/datasets/plot_iris_dataset", "auto_examples/datasets/plot_random_dataset", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/datasets/sg_execution_times", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_3d", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/decomposition/sg_execution_times", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_importances_faces", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/ensemble/sg_execution_times", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_cv_digits", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/exercises/sg_execution_times", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/feature_selection/sg_execution_times", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/gaussian_process/sg_execution_times", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/impute/sg_execution_times", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/inspection/sg_execution_times", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/kernel_approximation/sg_execution_times", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_coordinate_descent_path", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_3d", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/linear_model/sg_execution_times", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/manifold/sg_execution_times", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/miscellaneous/sg_execution_times", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/mixture/sg_execution_times", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/model_selection/plot_validation_curve", "auto_examples/model_selection/sg_execution_times", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multiclass/sg_execution_times", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/multioutput/sg_execution_times", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neighbors/sg_execution_times", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/neural_networks/sg_execution_times", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/preprocessing/sg_execution_times", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/sg_execution_times", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/semi_supervised/sg_execution_times", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_nonlinear", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/svm/sg_execution_times", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/text/sg_execution_times", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_tree_regression_multioutput", "auto_examples/tree/plot_unveil_tree_structure", "auto_examples/tree/sg_execution_times", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contents", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "inspection", "install", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classes", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "preface", "presentations", "related_projects", "roadmap", "supervised_learning", "support", "testimonials/testimonials", "tune_toc", "tutorial/basic/tutorial", "tutorial/index", "tutorial/machine_learning_map/index", "tutorial/statistical_inference/index", "tutorial/statistical_inference/model_selection", "tutorial/statistical_inference/putting_together", "tutorial/statistical_inference/settings", "tutorial/statistical_inference/supervised_learning", "tutorial/statistical_inference/unsupervised_learning", "tutorial/text_analytics/working_with_text_data", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4"], "filenames": ["about.rst", "authors.rst", "authors_emeritus.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/sg_execution_times.rst", "auto_examples/applications/svm_gui.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/bicluster/sg_execution_times.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/classification/sg_execution_times.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_cluster_iris.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_color_quantization.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/cluster/sg_execution_times.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/compose/sg_execution_times.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/covariance/sg_execution_times.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/cross_decomposition/sg_execution_times.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_digits_last_image.rst", "auto_examples/datasets/plot_iris_dataset.rst", "auto_examples/datasets/plot_random_dataset.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/datasets/sg_execution_times.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_3d.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/decomposition/sg_execution_times.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_importances_faces.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/ensemble/sg_execution_times.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_cv_digits.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/exercises/sg_execution_times.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/feature_selection/sg_execution_times.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/gaussian_process/sg_execution_times.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/impute/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/inspection/sg_execution_times.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/kernel_approximation/sg_execution_times.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_coordinate_descent_path.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_3d.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/linear_model/sg_execution_times.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/manifold/sg_execution_times.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/miscellaneous/sg_execution_times.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/mixture/sg_execution_times.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/model_selection/plot_validation_curve.rst", "auto_examples/model_selection/sg_execution_times.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multiclass/sg_execution_times.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/multioutput/sg_execution_times.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neighbors/sg_execution_times.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/neural_networks/sg_execution_times.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/preprocessing/sg_execution_times.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/sg_execution_times.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/semi_supervised/sg_execution_times.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_nonlinear.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/svm/sg_execution_times.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/text/sg_execution_times.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_tree_regression_multioutput.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "auto_examples/tree/sg_execution_times.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contents.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "inspection.rst", "install.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classes.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "preface.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "tune_toc.rst", "tutorial/basic/tutorial.rst", "tutorial/index.rst", "tutorial/machine_learning_map/index.rst", "tutorial/statistical_inference/index.rst", "tutorial/statistical_inference/model_selection.rst", "tutorial/statistical_inference/putting_together.rst", "tutorial/statistical_inference/settings.rst", "tutorial/statistical_inference/supervised_learning.rst", "tutorial/statistical_inference/unsupervised_learning.rst", "tutorial/text_analytics/working_with_text_data.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst"], "titles": ["About us", "&lt;no title&gt;", "&lt;no title&gt;", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Computation times", "Libsvm GUI", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Computation times", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Computation times", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Computation times", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "K-means Clustering", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Color Quantization using K-Means", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Computation times", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Computation times", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Computation times", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Computation times", "Dataset examples", "The Digit Dataset", "The Iris Dataset", "Plot randomly generated classification dataset", "Plot randomly generated multilabel dataset", "Computation times", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal components analysis (PCA)", "PCA example with Iris Data-set", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Computation times", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Pixel importances with a parallel forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Computation times", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Cross-validation on Digits Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Computation times", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Computation times", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Computation times", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Computation times", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Computation times", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Computation times", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso and Elastic Net", "Lasso on dense and sparse data", "Lasso path using LARS", "Lasso model selection via information criteria", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Linear Regression Example", "Sparsity Example: Fitting only features 1  and 2", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Computation times", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Computation times", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Computation times", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Computation times", "Model Selection", "Confusion matrix", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Train error vs Test error", "Underfitting vs. Overfitting", "Plotting Validation Curves", "Computation times", "Multiclass methods", "Overview of multiclass training meta-estimators", "Computation times", "Multioutput methods", "Multilabel classification using a classifier chain", "Computation times", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Computation times", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Computation times", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Computation times", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Computation times", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Computation times", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Non-linear SVM", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Computation times", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Computation times", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Multi-output Decision Tree Regression", "Understanding the decision tree structure", "Computation times", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "Table Of Contents", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer / core-developer information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "API Reference", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.fastica", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.oas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BaseEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.BiclusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassNamePrefixFeaturesOutMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClassifierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.ClusterMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.DensityMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.MetaEstimatorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OneToOneFeatureMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.OutlierMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.RegressorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.TransformerMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.clone", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_classifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.base</span></code>.is_regressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibratedClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.CalibrationDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.calibration</span></code>.calibration_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AffinityPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.AgglomerativeClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.Birch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.BisectingKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.DBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.FeatureAgglomeration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.HDBSCAN", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.KMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MeanShift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.MiniBatchKMeans", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.OPTICS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralBiclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.SpectralCoclustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.affinity_propagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_dbscan", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.cluster_optics_xi", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.compute_optics_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.estimate_bandwidth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.k_means", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.kmeans_plusplus", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.mean_shift", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.spectral_clustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cluster</span></code>.ward_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.ColumnTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.TransformedTargetRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_selector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.compose</span></code>.make_column_transformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.config_context", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EllipticEnvelope", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.MinCovDet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.empirical_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.graphical_lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.ledoit_wolf_shrinkage", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.covariance</span></code>.shrunk_covariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.CCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSCanonical", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.cross_decomposition</span></code>.PLSSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.clear_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.dump_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_20newsgroups_vectorized", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_california_housing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_covtype", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_kddcup99", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_pairs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_lfw_people", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_olivetti_faces", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_openml", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_rcv1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.fetch_species_distributions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.get_data_home", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_breast_cancer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_diabetes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_digits", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_iris", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_linnerud", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_image", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_sample_images", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_file", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_svmlight_files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.load_wine", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_biclusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_blobs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_checkerboard", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_circles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_friedman3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_gaussian_quantiles", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_hastie_10_2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_low_rank_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_moons", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_multilabel_classification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_s_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_coded_signal", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_sparse_uncorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_spd_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.datasets</span></code>.make_swiss_roll", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.DictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FactorAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.FastICA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.IncrementalPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.KernelPCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.LatentDirichletAllocation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchDictionaryLearning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchNMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.MiniBatchSparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.NMF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.PCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparseCoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.SparsePCA", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.TruncatedSVD", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.dict_learning_online", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.non_negative_factorization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.decomposition</span></code>.sparse_encode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.LinearDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.discriminant_analysis</span></code>.QuadraticDiscriminantAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.dummy</span></code>.DummyRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.AdaBoostRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.BaggingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.GradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.HistGradientBoostingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.IsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.RandomTreesEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.StackingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.ensemble</span></code>.VotingRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.ConvergenceWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataConversionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.DataDimensionalityWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.EfficiencyWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.FitFailedWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.InconsistentVersionWarning", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.NotFittedError", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.exceptions</span></code>.UndefinedMetricWarning", "sklearn.experimental.enable_halving_search_cv", "sklearn.experimental.enable_iterative_imputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.DictVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction</span></code>.FeatureHasher", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.PatchExtractor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.extract_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.grid_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.img_to_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.image</span></code>.reconstruct_from_patches_2d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.CountVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.HashingVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_extraction.text</span></code>.TfidfVectorizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.GenericUnivariateSelect", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.RFECV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFdr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFpr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFromModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectFwe", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectKBest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectPercentile", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SelectorMixin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.SequentialFeatureSelector", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.VarianceThreshold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.chi2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.f_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_classif", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.mutual_info_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.feature_selection</span></code>.r_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process</span></code>.GaussianProcessRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.CompoundKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ConstantKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.DotProduct", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.ExpSineSquared", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Exponentiation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Hyperparameter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Matern", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.PairwiseKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Product", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RBF", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.RationalQuadratic", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.Sum", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.gaussian_process.kernels</span></code>.WhiteKernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.get_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.IterativeImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.KNNImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.MissingIndicator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.impute</span></code>.SimpleImputer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.DecisionBoundaryDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.PartialDependenceDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.partial_dependence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.inspection</span></code>.permutation_importance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.IsotonicRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.check_increasing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.isotonic</span></code>.isotonic_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.AdditiveChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.Nystroem", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.PolynomialCountSketch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.RBFSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_approximation</span></code>.SkewedChi2Sampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.kernel_ridge</span></code>.KernelRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ARDRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.BayesianRidge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.GammaRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.HuberRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Lasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLars", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LassoLarsIC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LinearRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.LogisticRegressionCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskElasticNetCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLasso", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.MultiTaskLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.OrthogonalMatchingPursuitCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PassiveAggressiveClassifier", "sklearn.linear_model.PassiveAggressiveRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Perceptron", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.PoissonRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.QuantileRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RANSACRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.Ridge", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.RidgeClassifierCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDOneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.SGDRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TheilSenRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.TweedieRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.enet_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lars_path_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.lasso_path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.orthogonal_mp_gram", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.linear_model</span></code>.ridge_regression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.Isomap", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.LocallyLinearEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.MDS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.SpectralEmbedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.TSNE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.locally_linear_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.smacof", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.spectral_embedding", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.manifold</span></code>.trustworthiness", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ConfusionMatrixDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DetCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.DistanceMetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PrecisionRecallDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.PredictionErrorDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.RocCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.adjusted_rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.auc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.balanced_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.brier_score_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.calinski_harabasz_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.check_scoring", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.class_likelihood_ratios", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.classification_report", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.contingency_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.cluster</span></code>.pair_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.cohen_kappa_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.completeness_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.consensus_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.coverage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_absolute_error_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_pinball_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.d2_tweedie_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.davies_bouldin_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.dcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.det_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.explained_variance_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.f1_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fbeta_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.fowlkes_mallows_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.get_scorer_names", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hamming_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.hinge_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_completeness_v_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.homogeneity_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.jaccard_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_average_precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.label_ranking_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.log_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.matthews_corrcoef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.max_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_absolute_percentage_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_gamma_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_pinball_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_poisson_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mean_tweedie_deviance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.median_absolute_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.multilabel_confusion_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.ndcg_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.normalized_mutual_info_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.additive_chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.chi2_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.cosine_similarity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.distance_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.haversine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.kernel_metrics", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.laplacian_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.linear_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.nan_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_cosine_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_euclidean_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.paired_manhattan_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.pairwise_kernels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.polynomial_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.rbf_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics.pairwise</span></code>.sigmoid_kernel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_argmin_min", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.pairwise_distances_chunked", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_recall_fscore_support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.precision_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.r2_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.rand_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.recall_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_auc_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.roc_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.root_mean_squared_log_error", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_samples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.silhouette_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.top_k_accuracy_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.v_measure_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.metrics</span></code>.zero_one_loss", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.BayesianGaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.mixture</span></code>.GaussianMixture", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.GroupShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingGridSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.HalvingRandomSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.KFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LearningCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneGroupOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeaveOneOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePGroupsOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.LeavePOut", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterGrid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ParameterSampler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.PredefinedSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RandomizedSearchCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.RepeatedStratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedGroupKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedKFold", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.StratifiedShuffleSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.TimeSeriesSplit", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.ValidationCurveDisplay", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.check_cv", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_val_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.cross_validate", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.learning_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.permutation_test_score", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.train_test_split", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.model_selection</span></code>.validation_curve", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsOneClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OneVsRestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multiclass</span></code>.OutputCodeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.ClassifierChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.MultiOutputRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.multioutput</span></code>.RegressorChain", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.BernoulliNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.CategoricalNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.ComplementNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.GaussianNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.naive_bayes</span></code>.MultinomialNB", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.BallTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KDTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.KernelDensity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.LocalOutlierFactor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestCentroid", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NearestNeighbors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.NeighborhoodComponentsAnalysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.RadiusNeighborsTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.kneighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.radius_neighbors_graph", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neighbors</span></code>.sort_graph_by_row_values", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.BernoulliRBM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.neural_network</span></code>.MLPRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.FeatureUnion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.Pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_pipeline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.pipeline</span></code>.make_union", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Binarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.FunctionTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KBinsDiscretizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.KernelCenterer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.LabelEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MaxAbsScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MinMaxScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.MultiLabelBinarizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.Normalizer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OneHotEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.OrdinalEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PolynomialFeatures", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.PowerTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.QuantileTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.RobustScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.SplineTransformer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.StandardScaler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.TargetEncoder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.add_dummy_feature", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.label_binarize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.maxabs_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.minmax_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.normalize", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.power_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.quantile_transform", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.robust_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.preprocessing</span></code>.scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.GaussianRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.SparseRandomProjection", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.random_projection</span></code>.johnson_lindenstrauss_min_dim", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelPropagation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.LabelSpreading", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.semi_supervised</span></code>.SelfTrainingClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.set_config", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn</span></code>.show_versions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.LinearSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.NuSVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.OneClassSVM", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVC", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.SVR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.svm</span></code>.l1_min_c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_graphviz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.export_text", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.tree</span></code>.plot_tree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.Bunch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>._safe_indexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.arrayfuncs</span></code>.min_pos", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.as_float_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.assert_all_finite", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_X_y", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_array", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_consistent_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_random_state", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.check_scalar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_class_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.class_weight</span></code>.compute_sample_weight", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.deprecated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_estimators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.discovery</span></code>.all_functions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.check_estimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.estimator_checks</span></code>.parametrize_with_checks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.estimator_html_repr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.density", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.fast_logdet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_range_finder", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.randomized_svd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.safe_sparse_dot", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.extmath</span></code>.weighted_mode", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_batches", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.gen_even_slices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.graph</span></code>.single_source_shortest_path_length", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.indexable", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRequest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MetadataRouter", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.MethodMapping", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.get_routing_for_object", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metadata_routing</span></code>.process_routing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.metaestimators</span></code>.available_if", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.is_multilabel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.type_of_target", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.multiclass</span></code>.unique_labels", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.murmurhash3_32", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.Parallel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.parallel</span></code>.delayed", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.random</span></code>.sample_without_replacement", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.register_parallel_backend", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.resample", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_mask", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.safe_sqr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils</span></code>.shuffle", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.incr_mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_csr_column_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_row_scale", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_column", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.inplace_swap_row", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs</span></code>.mean_variance_axis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.sparsefuncs_fast</span></code>.inplace_csr_row_normalize_l2", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_is_fitted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_memory", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.check_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.column_or_1d", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sklearn.utils.validation</span></code>.has_fit_parameter", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.4. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.3. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "Welcome to scikit-learn", "External Resources, Videos and Talks", "Related Projects", "Roadmap", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Who is using scikit-learn?", "&lt;no title&gt;", "An introduction to machine learning with scikit-learn", "scikit-learn Tutorials", "Choosing the right estimator", "A tutorial on statistical-learning for scientific data processing", "Model selection: choosing estimators and their parameters", "Putting it all together", "Statistical learning: the setting and the estimator object in scikit-learn", "Supervised learning: predicting an output variable from high-dimensional observations", "Unsupervised learning: seeking representations of the data", "Working With Text Data", "<span class=\"section-number\">2. </span>Unsupervised learning", "User guide: contents", "Available documentation for Scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Version 0.12.1", "Version 0.13.1", "Version 0.14", "Version 0.15.2", "Version 0.16.1", "Version 0.17.1", "Version 0.18.2", "Version 0.19.2", "Version 0.20.4", "Version 0.21.3", "Version 0.22.2.post1", "Version 0.23.2", "Version 0.24.2", "Version 1.0.2", "Version 1.1.3", "Version 1.2.2", "Version 1.3.2", "Version 1.4.0"], "terms": {"click": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "more": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "detail": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "thi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 427, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 479, 480, 481, 482, 484, 486, 487, 490, 493, 494, 495, 496, 498, 499, 500, 502, 505, 506, 512, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 699, 700, 701, 703, 704, 706, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 728, 732, 733, 734, 735, 736, 737, 738, 739, 744, 750, 751, 752, 753, 754, 755, 757, 758, 759, 761, 764, 765, 770, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 918, 919, 924, 925, 927, 929, 930, 935, 937, 942, 943, 944, 945, 946, 947, 949, 952, 953, 954, 956, 957, 960, 961, 970, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "wa": [0, 4, 8, 14, 17, 41, 71, 72, 81, 87, 93, 129, 132, 149, 161, 170, 176, 204, 225, 239, 252, 255, 257, 259, 261, 267, 268, 279, 302, 311, 316, 317, 321, 327, 328, 350, 352, 359, 361, 365, 374, 376, 377, 379, 383, 384, 393, 396, 397, 400, 402, 403, 406, 409, 410, 414, 418, 430, 437, 438, 439, 440, 442, 443, 444, 446, 447, 451, 454, 457, 461, 465, 466, 471, 479, 480, 481, 482, 512, 520, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 647, 648, 651, 652, 653, 655, 661, 662, 682, 683, 685, 686, 689, 710, 725, 726, 764, 779, 780, 783, 793, 794, 795, 798, 799, 809, 821, 823, 835, 842, 845, 847, 850, 854, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 895, 896, 901, 902, 904, 929, 930, 953, 974, 975, 976, 985, 986, 989, 992, 996, 999, 1002, 1006, 1012, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "start": [0, 4, 7, 10, 12, 13, 21, 27, 54, 59, 65, 68, 75, 87, 99, 117, 123, 125, 146, 149, 157, 159, 171, 176, 180, 181, 189, 200, 201, 202, 208, 218, 221, 225, 234, 236, 249, 261, 269, 284, 320, 322, 326, 350, 359, 361, 365, 366, 367, 368, 372, 379, 380, 381, 383, 384, 385, 391, 393, 396, 403, 406, 410, 411, 415, 416, 437, 439, 447, 451, 453, 535, 607, 614, 629, 642, 650, 656, 663, 664, 665, 673, 674, 675, 687, 691, 777, 778, 785, 793, 794, 795, 798, 799, 809, 840, 841, 842, 844, 846, 854, 940, 970, 975, 982, 985, 990, 991, 1000, 1007, 1010, 1012, 1020, 1021, 1031, 1033, 1036, 1038, 1040, 1041, 1042, 1043, 1044], "2007": [0, 39, 188, 374, 406, 415, 437, 449, 451, 457, 459, 563, 653, 688, 714, 730, 733, 754, 755, 791, 978, 982, 984, 986], "googl": [0, 18, 391, 406, 439, 1005, 1017, 1028], "summer": [0, 4, 13, 49, 1028], "code": [0, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 373, 377, 378, 380, 382, 383, 388, 391, 393, 394, 396, 397, 400, 402, 405, 406, 413, 414, 439, 440, 444, 446, 456, 493, 523, 527, 528, 534, 535, 539, 540, 542, 543, 545, 563, 569, 578, 579, 582, 583, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 661, 662, 679, 680, 682, 683, 826, 827, 828, 865, 872, 954, 983, 987, 996, 998, 1000, 1001, 1006, 1007, 1009, 1010, 1013, 1021, 1028, 1030, 1031], "david": [0, 2, 38, 58, 82, 118, 179, 184, 202, 239, 262, 264, 311, 350, 351, 352, 374, 406, 413, 416, 459, 529, 533, 564, 565, 619, 620, 625, 721, 793, 895, 976, 982, 990, 999, 1010, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "cournapeau": [0, 2, 1028, 1031], "later": [0, 11, 54, 112, 117, 126, 152, 171, 176, 179, 239, 279, 297, 352, 361, 385, 391, 392, 396, 400, 844, 867, 868, 876, 878, 978, 996, 1016, 1021, 1031, 1034, 1036, 1040], "year": [0, 4, 13, 135, 149, 157, 169, 170, 171, 200, 201, 218, 376, 378, 383, 391, 410, 414, 797, 802, 804, 877, 982, 986, 1007, 1010, 1019], "matthieu": [0, 2, 1028, 1032, 1043], "brucher": [0, 2, 1028], "work": [0, 4, 9, 13, 18, 33, 45, 46, 49, 53, 68, 79, 115, 122, 135, 149, 158, 159, 169, 170, 171, 189, 204, 217, 236, 246, 248, 259, 279, 290, 291, 312, 317, 319, 320, 322, 339, 351, 352, 361, 366, 367, 368, 373, 374, 377, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 402, 403, 404, 406, 407, 408, 411, 413, 414, 415, 418, 419, 420, 421, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 457, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 501, 505, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 692, 705, 738, 770, 774, 775, 776, 777, 784, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 886, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 935, 939, 954, 975, 976, 978, 980, 981, 982, 983, 985, 986, 988, 989, 992, 993, 996, 999, 1000, 1006, 1007, 1010, 1012, 1013, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "part": [0, 13, 32, 37, 62, 69, 72, 83, 115, 118, 121, 125, 130, 138, 139, 140, 141, 146, 157, 167, 179, 236, 249, 256, 258, 275, 300, 308, 311, 313, 352, 367, 374, 376, 379, 381, 385, 387, 392, 393, 396, 402, 404, 406, 410, 411, 413, 414, 416, 443, 446, 490, 491, 492, 518, 528, 534, 539, 571, 581, 582, 583, 610, 622, 789, 863, 881, 883, 884, 885, 886, 887, 888, 889, 975, 976, 978, 983, 987, 1005, 1006, 1007, 1008, 1010, 1014, 1021, 1023, 1028, 1036, 1037, 1039, 1041, 1043], "hi": [0, 407, 986, 1021], "thesi": [0, 376, 406, 413], "In": [0, 4, 5, 7, 9, 11, 12, 13, 14, 15, 26, 27, 28, 35, 38, 40, 49, 50, 54, 56, 58, 59, 61, 67, 68, 72, 73, 75, 76, 79, 81, 82, 83, 87, 90, 91, 96, 98, 101, 104, 105, 110, 112, 115, 117, 118, 119, 120, 121, 122, 125, 127, 128, 129, 130, 132, 135, 145, 146, 148, 149, 152, 156, 157, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 184, 188, 189, 191, 195, 200, 201, 202, 203, 204, 205, 208, 217, 218, 229, 230, 231, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 249, 251, 255, 258, 259, 261, 262, 263, 264, 266, 267, 270, 271, 273, 275, 276, 279, 284, 287, 290, 291, 293, 303, 306, 307, 308, 311, 312, 313, 316, 317, 318, 320, 321, 327, 329, 337, 341, 345, 350, 351, 352, 355, 359, 361, 365, 366, 367, 372, 373, 374, 375, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 395, 396, 397, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 434, 437, 438, 439, 440, 441, 444, 445, 446, 449, 459, 460, 461, 466, 469, 472, 490, 493, 500, 505, 506, 508, 520, 531, 533, 535, 537, 538, 539, 541, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 588, 599, 603, 606, 607, 608, 627, 629, 630, 631, 633, 640, 641, 642, 644, 645, 646, 648, 650, 652, 655, 656, 658, 660, 662, 663, 665, 666, 671, 672, 673, 676, 677, 681, 682, 683, 693, 696, 700, 709, 715, 717, 722, 724, 725, 730, 731, 734, 736, 738, 750, 752, 753, 777, 779, 781, 784, 790, 792, 793, 794, 795, 798, 799, 801, 809, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 840, 841, 842, 844, 845, 846, 848, 849, 850, 855, 863, 865, 871, 872, 876, 877, 879, 883, 884, 886, 887, 888, 889, 890, 891, 893, 894, 895, 898, 899, 900, 903, 906, 908, 913, 917, 919, 935, 975, 976, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1007, 1009, 1010, 1012, 1019, 1020, 1021, 1025, 1028, 1029, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "2010": [0, 48, 68, 80, 171, 266, 267, 403, 406, 408, 410, 411, 419, 472, 533, 701, 705, 716, 717, 736, 823, 855, 856, 978, 982, 986, 990, 1000, 1005, 1028], "fabian": [0, 2, 187, 205, 222, 296, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1037], "pedregosa": [0, 2, 187, 205, 222, 296, 1028, 1029, 1030, 1031, 1032, 1034], "gael": [0, 1, 12, 33, 40, 41, 47, 53, 54, 67, 68, 83, 98, 102, 189, 190, 222, 234, 248, 1005, 1007, 1010, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "varoquaux": [0, 1, 12, 32, 33, 40, 41, 46, 47, 52, 53, 54, 67, 68, 74, 83, 90, 91, 98, 102, 103, 183, 189, 190, 197, 198, 222, 224, 232, 234, 248, 308, 341, 342, 394, 1005, 1010, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "alexandr": [0, 1, 2, 25, 26, 31, 43, 48, 55, 68, 96, 98, 104, 185, 187, 188, 189, 191, 193, 194, 229, 232, 267, 274, 296, 394, 1010, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "gramfort": [0, 1, 25, 26, 31, 43, 48, 55, 68, 96, 98, 104, 185, 187, 188, 189, 191, 193, 194, 229, 232, 267, 274, 296, 394, 1010, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "vincent": [0, 2, 48, 68, 155, 159, 1010, 1028, 1030, 1032, 1033, 1035, 1038, 1043, 1044], "michel": [0, 2, 48, 68, 1028, 1030, 1031, 1033, 1035, 1042, 1043], "inria": [0, 5, 9, 31, 38, 53, 55, 58, 76, 83, 118, 158, 179, 184, 185, 187, 191, 193, 194, 205, 222, 223, 229, 232, 239, 262, 264, 267, 274, 296, 311, 345, 350, 351, 352, 655, 1004, 1028], "took": [0, 4, 43, 269], "leadership": 0, "made": [0, 13, 71, 82, 90, 101, 112, 118, 135, 159, 170, 171, 200, 218, 239, 252, 265, 312, 317, 337, 356, 365, 374, 376, 379, 383, 393, 394, 406, 413, 414, 418, 440, 443, 444, 446, 456, 493, 500, 585, 586, 588, 627, 628, 653, 662, 682, 683, 731, 779, 795, 798, 799, 809, 813, 814, 815, 835, 838, 839, 987, 992, 1002, 1006, 1010, 1018, 1020, 1028, 1029, 1030, 1031, 1032, 1035, 1037, 1038, 1041, 1042], "first": [0, 4, 5, 7, 8, 11, 13, 18, 21, 26, 27, 31, 32, 33, 35, 40, 56, 57, 59, 62, 65, 66, 67, 68, 71, 72, 73, 76, 81, 86, 87, 90, 91, 92, 101, 105, 112, 113, 117, 119, 120, 121, 122, 124, 126, 129, 132, 133, 134, 135, 145, 146, 149, 152, 153, 154, 157, 158, 159, 160, 165, 169, 170, 171, 173, 176, 179, 181, 183, 189, 196, 197, 198, 201, 202, 208, 209, 214, 222, 225, 233, 234, 236, 237, 238, 240, 242, 243, 248, 252, 256, 261, 263, 264, 268, 270, 272, 273, 279, 282, 284, 286, 289, 293, 294, 295, 300, 302, 306, 308, 311, 312, 313, 317, 318, 326, 329, 333, 334, 337, 339, 350, 351, 352, 355, 356, 359, 361, 366, 367, 373, 374, 376, 377, 378, 381, 383, 384, 385, 387, 391, 393, 403, 404, 406, 409, 410, 411, 413, 414, 415, 416, 418, 440, 443, 444, 447, 456, 457, 461, 469, 480, 484, 485, 487, 488, 489, 491, 494, 497, 499, 501, 505, 506, 507, 525, 530, 531, 535, 538, 550, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 579, 581, 585, 586, 587, 588, 590, 607, 608, 614, 618, 621, 628, 629, 630, 631, 643, 649, 656, 663, 665, 671, 673, 685, 692, 695, 696, 697, 699, 709, 713, 732, 738, 759, 760, 778, 790, 793, 794, 798, 799, 800, 801, 802, 807, 809, 816, 817, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 843, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 863, 871, 875, 876, 877, 879, 880, 887, 888, 900, 903, 906, 907, 908, 909, 911, 913, 918, 919, 920, 937, 939, 953, 957, 960, 972, 975, 976, 980, 981, 982, 983, 985, 986, 987, 988, 989, 993, 996, 997, 1000, 1001, 1002, 1010, 1012, 1018, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "public": [0, 80, 373, 379, 381, 383, 384, 391, 392, 393, 394, 410, 413, 465, 661, 668, 682, 683, 689, 896, 982, 990, 1028, 1033, 1034, 1039, 1040, 1041, 1044], "releas": [0, 236, 323, 366, 368, 377, 379, 380, 382, 387, 391, 393, 414, 440, 443, 444, 461, 464, 487, 488, 493, 498, 499, 501, 509, 512, 518, 521, 535, 558, 559, 561, 562, 564, 596, 599, 625, 627, 629, 631, 637, 643, 645, 649, 655, 666, 677, 685, 698, 699, 714, 744, 784, 791, 795, 798, 799, 801, 809, 817, 820, 824, 840, 842, 859, 863, 868, 871, 872, 873, 877, 878, 879, 895, 896, 898, 903, 906, 907, 930, 954, 1002, 1004, 1028, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "februari": [0, 408, 470, 986, 1029, 1033], "1st": [0, 4, 61, 91, 160, 201, 311, 876, 877], "sinc": [0, 4, 5, 11, 13, 26, 28, 35, 38, 50, 54, 56, 67, 71, 72, 73, 97, 122, 138, 146, 149, 152, 157, 170, 171, 173, 176, 182, 200, 202, 204, 217, 230, 234, 235, 236, 248, 251, 257, 261, 263, 264, 270, 271, 279, 282, 284, 286, 287, 312, 319, 320, 330, 334, 337, 345, 350, 351, 352, 361, 366, 374, 377, 379, 380, 381, 383, 384, 387, 391, 392, 393, 396, 397, 404, 406, 407, 408, 409, 410, 411, 413, 414, 416, 423, 434, 438, 442, 443, 444, 446, 447, 450, 453, 466, 475, 493, 523, 524, 533, 534, 535, 536, 537, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 564, 566, 585, 586, 588, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 629, 630, 635, 641, 642, 647, 648, 651, 652, 653, 655, 656, 661, 662, 663, 665, 671, 672, 673, 676, 704, 706, 731, 737, 738, 746, 747, 764, 785, 798, 799, 801, 819, 820, 821, 826, 827, 828, 829, 833, 834, 835, 836, 837, 840, 845, 848, 855, 856, 863, 871, 888, 889, 893, 894, 898, 900, 901, 902, 903, 904, 906, 908, 932, 935, 943, 975, 978, 979, 980, 982, 983, 987, 988, 989, 990, 992, 994, 996, 1000, 1001, 1002, 1010, 1012, 1021, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "sever": [0, 4, 9, 12, 13, 26, 32, 35, 38, 56, 57, 58, 62, 75, 92, 115, 123, 130, 132, 135, 146, 149, 152, 157, 158, 167, 170, 176, 184, 189, 200, 204, 220, 221, 227, 233, 248, 256, 261, 266, 286, 301, 306, 319, 345, 350, 351, 365, 373, 374, 376, 379, 381, 384, 391, 393, 403, 405, 406, 407, 410, 412, 413, 414, 416, 444, 446, 461, 484, 496, 505, 506, 535, 552, 553, 556, 557, 560, 561, 562, 567, 585, 586, 588, 607, 642, 643, 649, 685, 686, 687, 688, 689, 690, 793, 794, 795, 798, 799, 809, 826, 827, 833, 834, 835, 836, 837, 857, 858, 865, 882, 906, 907, 908, 909, 921, 975, 978, 983, 986, 987, 989, 994, 996, 1000, 1002, 1003, 1005, 1006, 1009, 1010, 1012, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1041, 1044, 1045], "have": [0, 4, 5, 7, 8, 9, 11, 12, 13, 14, 25, 26, 27, 28, 38, 40, 43, 44, 46, 47, 48, 51, 54, 56, 58, 61, 63, 65, 66, 71, 72, 79, 81, 87, 90, 92, 93, 101, 103, 112, 119, 121, 122, 123, 125, 145, 146, 149, 152, 153, 157, 158, 159, 165, 169, 170, 171, 172, 173, 176, 179, 184, 200, 201, 202, 204, 218, 225, 229, 231, 236, 237, 239, 240, 247, 248, 249, 251, 255, 261, 262, 264, 267, 268, 275, 279, 284, 286, 287, 290, 291, 306, 311, 312, 313, 316, 318, 319, 326, 327, 328, 334, 340, 341, 342, 345, 350, 351, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 489, 491, 492, 493, 505, 506, 511, 520, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 684, 685, 686, 687, 688, 689, 696, 701, 702, 709, 712, 717, 722, 727, 732, 738, 752, 753, 754, 755, 778, 781, 782, 788, 791, 793, 794, 795, 798, 799, 800, 801, 806, 809, 813, 817, 819, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 886, 887, 888, 889, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 918, 920, 922, 924, 935, 961, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1010, 1012, 1013, 1016, 1017, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "appear": [0, 8, 47, 49, 115, 170, 173, 256, 258, 259, 290, 291, 300, 302, 307, 326, 341, 350, 351, 352, 374, 377, 379, 384, 393, 408, 411, 485, 486, 552, 564, 565, 576, 607, 624, 625, 627, 694, 697, 699, 709, 713, 715, 778, 785, 796, 813, 833, 834, 835, 836, 837, 900, 903, 937, 982, 988, 992, 1028, 1036, 1040, 1041], "follow": [0, 4, 7, 20, 27, 33, 38, 46, 55, 56, 58, 64, 68, 72, 73, 93, 96, 106, 112, 115, 125, 129, 144, 157, 164, 169, 170, 171, 172, 173, 179, 181, 184, 188, 189, 198, 200, 201, 215, 218, 230, 236, 237, 239, 252, 261, 270, 271, 279, 306, 312, 313, 316, 317, 319, 320, 321, 334, 345, 350, 351, 352, 355, 359, 361, 365, 366, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 427, 430, 438, 440, 442, 443, 444, 445, 446, 450, 458, 460, 461, 462, 465, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 512, 531, 535, 537, 538, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 578, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 628, 630, 631, 643, 649, 655, 656, 667, 668, 677, 689, 691, 696, 702, 706, 710, 715, 814, 835, 840, 841, 842, 844, 846, 848, 849, 850, 857, 861, 862, 863, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 896, 898, 899, 906, 907, 908, 909, 913, 914, 934, 954, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1012, 1021, 1025, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "3": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 74, 75, 76, 79, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 172, 176, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 229, 233, 234, 235, 236, 237, 239, 241, 243, 246, 247, 248, 250, 251, 252, 256, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 323, 325, 326, 328, 329, 330, 333, 334, 336, 337, 340, 341, 342, 343, 344, 345, 346, 350, 351, 352, 356, 357, 359, 361, 366, 367, 373, 374, 376, 377, 379, 380, 381, 384, 385, 391, 392, 393, 396, 398, 399, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 431, 434, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 490, 491, 493, 494, 499, 501, 502, 503, 504, 507, 509, 512, 513, 514, 515, 516, 518, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 578, 579, 580, 581, 584, 585, 587, 588, 590, 591, 599, 600, 604, 605, 607, 608, 609, 614, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 689, 690, 691, 696, 697, 699, 700, 701, 702, 704, 706, 710, 713, 714, 718, 719, 720, 722, 724, 725, 726, 727, 730, 731, 732, 733, 737, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 752, 753, 764, 765, 771, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 886, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 924, 933, 934, 935, 937, 938, 939, 940, 942, 943, 944, 945, 946, 949, 950, 952, 953, 954, 960, 975, 976, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 992, 993, 996, 997, 999, 1001, 1002, 1004, 1005, 1006, 1012, 1013, 1016, 1017, 1019, 1020, 1024, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1038, 1040, 1041, 1043, 1045], "month": [0, 4, 13, 157, 171, 312, 374, 379, 383, 394, 1028], "cycl": [0, 4, 43, 45, 51, 63, 96, 185, 247, 252, 268, 270, 319, 320, 379, 383, 397, 405, 411, 576, 577, 624, 798, 799, 914, 975, 976, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045], "thrive": [0, 379], "intern": [0, 4, 27, 72, 83, 101, 118, 126, 138, 149, 153, 164, 167, 200, 284, 286, 305, 314, 327, 352, 361, 366, 374, 376, 381, 385, 388, 391, 393, 397, 400, 402, 403, 406, 410, 411, 413, 414, 416, 417, 434, 436, 441, 462, 465, 508, 531, 532, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 590, 591, 607, 608, 635, 637, 640, 643, 649, 665, 669, 673, 675, 693, 705, 727, 730, 754, 755, 779, 824, 838, 839, 854, 855, 856, 858, 859, 863, 877, 879, 893, 894, 896, 898, 899, 900, 903, 906, 907, 908, 909, 954, 982, 983, 984, 986, 989, 992, 996, 998, 1001, 1002, 1010, 1028, 1031, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "ha": [0, 4, 5, 8, 11, 12, 13, 17, 26, 31, 35, 38, 45, 51, 56, 57, 58, 61, 75, 81, 82, 87, 96, 110, 117, 121, 123, 125, 129, 134, 148, 152, 157, 158, 159, 165, 170, 171, 172, 173, 176, 193, 197, 200, 201, 202, 206, 217, 218, 221, 229, 233, 235, 236, 239, 240, 243, 246, 247, 249, 251, 252, 256, 259, 260, 261, 264, 265, 267, 272, 273, 282, 287, 290, 291, 292, 294, 302, 306, 307, 309, 311, 316, 317, 318, 319, 320, 322, 325, 328, 337, 341, 342, 344, 350, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 394, 396, 397, 400, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 418, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 458, 459, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 490, 491, 494, 495, 505, 506, 513, 523, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 616, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 684, 685, 686, 687, 688, 689, 692, 708, 710, 717, 737, 759, 770, 774, 775, 776, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 809, 813, 816, 817, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 913, 917, 918, 919, 937, 971, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 998, 999, 1000, 1001, 1002, 1007, 1010, 1012, 1016, 1019, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "been": [0, 4, 9, 17, 27, 45, 54, 61, 82, 101, 110, 112, 149, 152, 157, 159, 170, 225, 229, 231, 236, 237, 259, 261, 267, 316, 317, 318, 319, 320, 322, 327, 350, 361, 366, 373, 374, 376, 377, 378, 379, 381, 383, 385, 387, 388, 391, 392, 393, 394, 397, 400, 403, 404, 406, 408, 410, 411, 413, 416, 431, 434, 466, 468, 469, 471, 475, 484, 520, 531, 533, 546, 547, 564, 565, 578, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 630, 631, 655, 656, 663, 664, 665, 670, 672, 673, 674, 675, 717, 774, 775, 776, 789, 795, 798, 799, 801, 809, 817, 822, 823, 847, 895, 898, 976, 978, 979, 981, 982, 983, 986, 987, 989, 992, 996, 998, 1000, 1001, 1007, 1010, 1012, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lead": [0, 7, 26, 32, 38, 53, 56, 62, 73, 118, 122, 125, 148, 149, 170, 171, 172, 179, 184, 189, 191, 200, 204, 234, 236, 239, 261, 262, 264, 268, 289, 290, 302, 306, 308, 311, 312, 318, 337, 345, 351, 355, 361, 365, 366, 373, 378, 387, 388, 392, 393, 400, 403, 404, 406, 408, 410, 411, 412, 413, 415, 449, 459, 462, 465, 493, 512, 524, 532, 535, 536, 537, 540, 544, 548, 554, 555, 556, 557, 560, 561, 562, 563, 603, 627, 643, 644, 647, 649, 650, 651, 657, 658, 659, 660, 676, 688, 692, 742, 793, 798, 799, 826, 838, 839, 843, 862, 869, 879, 890, 891, 896, 898, 906, 907, 908, 909, 975, 980, 982, 983, 985, 986, 987, 989, 990, 992, 994, 996, 999, 1000, 1002, 1010, 1012, 1031, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045], "The": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 27, 31, 32, 33, 35, 38, 40, 41, 45, 46, 47, 48, 49, 51, 53, 54, 56, 58, 59, 61, 62, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 89, 92, 93, 94, 96, 99, 101, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 135, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 171, 172, 173, 176, 179, 181, 182, 183, 184, 185, 188, 189, 191, 192, 193, 194, 195, 196, 198, 201, 202, 203, 204, 206, 208, 209, 217, 218, 220, 224, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 249, 251, 252, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 282, 284, 286, 289, 290, 291, 292, 293, 294, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 327, 328, 334, 335, 337, 341, 342, 343, 345, 346, 347, 350, 351, 352, 355, 357, 358, 359, 361, 365, 366, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 428, 429, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 748, 749, 750, 751, 752, 753, 754, 755, 758, 760, 761, 762, 763, 766, 767, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 921, 922, 923, 924, 925, 929, 930, 931, 932, 933, 934, 935, 937, 938, 942, 943, 946, 949, 951, 952, 953, 954, 956, 957, 960, 970, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "decis": [0, 4, 17, 26, 28, 32, 35, 57, 59, 61, 111, 114, 115, 117, 130, 136, 149, 156, 170, 182, 183, 192, 209, 210, 213, 229, 230, 232, 240, 264, 279, 292, 295, 300, 306, 307, 308, 311, 324, 331, 333, 334, 335, 336, 337, 338, 339, 343, 346, 347, 350, 360, 365, 368, 375, 376, 379, 393, 404, 406, 413, 434, 466, 497, 501, 516, 533, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 590, 591, 628, 629, 630, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 695, 697, 699, 700, 704, 717, 722, 723, 731, 735, 736, 738, 752, 778, 784, 785, 790, 795, 798, 799, 809, 824, 826, 827, 829, 840, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 980, 986, 987, 988, 989, 990, 992, 993, 994, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1019, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1041, 1042, 1044, 1045], "make": [0, 4, 7, 8, 11, 13, 15, 18, 21, 22, 26, 27, 28, 40, 41, 44, 45, 57, 62, 63, 68, 74, 101, 112, 118, 122, 125, 130, 146, 149, 152, 157, 160, 169, 170, 171, 172, 179, 184, 186, 189, 192, 193, 194, 196, 200, 201, 202, 204, 206, 218, 222, 231, 233, 235, 236, 237, 239, 246, 248, 251, 252, 256, 261, 263, 264, 270, 271, 272, 282, 293, 302, 306, 307, 312, 320, 322, 337, 347, 350, 351, 352, 361, 365, 366, 367, 368, 373, 374, 377, 378, 380, 381, 382, 384, 385, 387, 391, 393, 396, 400, 403, 404, 406, 407, 408, 410, 411, 413, 414, 415, 418, 437, 438, 439, 440, 442, 444, 446, 448, 449, 450, 455, 456, 457, 459, 485, 500, 511, 512, 519, 520, 524, 529, 531, 538, 548, 549, 552, 553, 558, 559, 580, 581, 604, 605, 628, 646, 652, 653, 668, 688, 692, 726, 733, 738, 764, 765, 777, 793, 794, 795, 797, 800, 806, 810, 811, 812, 814, 815, 820, 821, 828, 829, 832, 865, 874, 877, 878, 882, 886, 888, 889, 890, 891, 904, 912, 918, 919, 929, 935, 941, 947, 972, 975, 976, 978, 980, 982, 983, 985, 986, 987, 988, 989, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1017, 1019, 1021, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "process": [0, 4, 5, 20, 27, 31, 32, 35, 46, 47, 48, 49, 51, 67, 71, 73, 75, 80, 82, 97, 98, 100, 112, 129, 138, 139, 140, 141, 162, 169, 179, 202, 204, 236, 237, 239, 246, 247, 252, 261, 263, 264, 273, 279, 306, 318, 322, 326, 341, 351, 352, 355, 365, 366, 367, 368, 374, 378, 379, 381, 383, 385, 388, 391, 392, 393, 400, 406, 407, 408, 410, 411, 412, 413, 414, 415, 419, 445, 446, 472, 493, 501, 520, 531, 532, 533, 534, 535, 558, 559, 560, 585, 586, 588, 607, 608, 610, 611, 612, 614, 615, 616, 619, 620, 622, 624, 629, 630, 636, 640, 661, 669, 682, 683, 700, 719, 737, 777, 793, 795, 798, 799, 809, 819, 820, 821, 830, 831, 847, 861, 865, 867, 868, 869, 878, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 952, 954, 975, 978, 982, 986, 989, 996, 998, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1020, 1021, 1023, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "structur": [0, 3, 9, 13, 15, 16, 18, 21, 37, 44, 45, 56, 69, 83, 107, 128, 151, 162, 167, 221, 225, 231, 236, 252, 256, 267, 289, 311, 317, 320, 324, 331, 337, 341, 354, 356, 360, 365, 374, 376, 379, 381, 384, 391, 393, 394, 396, 403, 406, 408, 409, 410, 411, 413, 414, 415, 416, 438, 439, 442, 443, 447, 448, 449, 450, 451, 454, 459, 460, 469, 493, 500, 501, 505, 508, 510, 511, 518, 527, 532, 538, 541, 560, 607, 608, 609, 613, 614, 615, 686, 693, 706, 710, 824, 846, 851, 878, 890, 891, 894, 906, 907, 908, 909, 912, 934, 935, 957, 960, 983, 985, 986, 989, 991, 992, 996, 999, 1002, 1006, 1007, 1015, 1020, 1021, 1028, 1029, 1031, 1032, 1034, 1038], "i": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 335, 336, 337, 341, 342, 343, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 361, 365, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 933, 934, 935, 937, 940, 941, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 956, 957, 958, 960, 961, 967, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "laid": [0, 169, 379], "out": [0, 3, 4, 7, 9, 12, 13, 15, 16, 18, 27, 31, 41, 51, 56, 71, 72, 104, 111, 116, 118, 119, 126, 136, 141, 167, 169, 172, 184, 200, 202, 204, 208, 218, 239, 246, 248, 259, 261, 264, 269, 273, 279, 282, 311, 312, 319, 328, 330, 333, 334, 337, 345, 350, 364, 374, 376, 377, 379, 381, 382, 383, 385, 391, 393, 406, 409, 411, 413, 414, 416, 422, 432, 433, 439, 440, 442, 443, 444, 446, 469, 479, 480, 481, 482, 496, 512, 513, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 585, 586, 588, 601, 604, 605, 631, 636, 637, 638, 639, 648, 652, 663, 665, 670, 672, 673, 685, 686, 689, 698, 723, 737, 738, 795, 797, 798, 799, 800, 802, 803, 804, 805, 809, 824, 833, 834, 835, 836, 837, 842, 847, 850, 854, 855, 856, 864, 868, 875, 887, 890, 891, 913, 948, 950, 976, 980, 981, 985, 986, 987, 989, 994, 996, 1007, 1008, 1009, 1010, 1016, 1019, 1021, 1023, 1028, 1030, 1032, 1034, 1036, 1037, 1040, 1041, 1044], "peopl": [0, 6, 71, 170, 238, 264, 350, 351, 366, 367, 374, 376, 378, 379, 383, 394, 412, 490, 491, 638, 835, 1006, 1017], "ar": [0, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 33, 35, 38, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 65, 67, 71, 72, 73, 75, 76, 79, 80, 81, 82, 83, 86, 87, 91, 93, 96, 98, 101, 104, 107, 110, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 133, 134, 145, 146, 148, 149, 152, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 204, 209, 211, 218, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 243, 247, 248, 249, 251, 255, 256, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 279, 282, 284, 286, 289, 290, 294, 297, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 320, 321, 322, 325, 327, 328, 329, 330, 335, 337, 339, 341, 345, 346, 350, 351, 352, 355, 359, 361, 365, 366, 367, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 396, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 422, 427, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 485, 486, 490, 492, 493, 495, 497, 498, 499, 500, 501, 505, 506, 507, 509, 512, 513, 514, 515, 516, 517, 520, 521, 523, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 706, 709, 710, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 736, 737, 738, 739, 741, 742, 744, 746, 747, 749, 750, 752, 753, 757, 758, 759, 761, 763, 764, 765, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 807, 809, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 922, 923, 924, 927, 929, 934, 935, 936, 939, 940, 942, 943, 946, 949, 950, 952, 954, 957, 960, 961, 965, 966, 967, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "current": [0, 8, 47, 112, 157, 170, 218, 306, 316, 366, 367, 374, 377, 379, 380, 381, 384, 388, 391, 393, 394, 402, 403, 405, 406, 410, 413, 414, 415, 416, 437, 443, 447, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 529, 532, 538, 550, 551, 554, 555, 556, 557, 559, 561, 562, 563, 573, 588, 590, 607, 614, 623, 624, 643, 655, 664, 668, 672, 673, 674, 675, 784, 793, 794, 843, 847, 855, 856, 874, 886, 896, 906, 907, 908, 909, 912, 953, 961, 975, 980, 982, 986, 989, 990, 996, 1007, 1019, 1036, 1040, 1042, 1043, 1044], "": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 17, 18, 20, 21, 25, 28, 35, 39, 40, 41, 43, 44, 45, 47, 48, 49, 53, 54, 56, 58, 59, 60, 61, 62, 63, 65, 66, 68, 71, 72, 79, 80, 83, 86, 91, 92, 93, 96, 97, 98, 101, 102, 105, 106, 107, 110, 112, 114, 118, 119, 121, 122, 124, 125, 126, 128, 129, 130, 131, 133, 141, 144, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 167, 170, 171, 173, 176, 180, 181, 182, 184, 186, 188, 189, 190, 191, 192, 198, 200, 202, 204, 206, 207, 209, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 229, 230, 233, 235, 236, 237, 239, 246, 248, 249, 251, 256, 261, 262, 263, 264, 265, 268, 272, 274, 275, 284, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 303, 305, 306, 309, 312, 314, 316, 318, 319, 320, 321, 322, 326, 327, 334, 335, 336, 337, 338, 341, 342, 343, 344, 347, 350, 351, 352, 356, 357, 358, 359, 361, 365, 366, 367, 368, 372, 373, 374, 376, 377, 378, 379, 380, 381, 383, 385, 386, 387, 388, 393, 394, 395, 396, 397, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 414, 416, 418, 420, 427, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 486, 493, 495, 497, 501, 507, 508, 516, 522, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 569, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 684, 685, 686, 687, 688, 689, 690, 697, 698, 699, 705, 708, 713, 717, 731, 737, 754, 755, 775, 776, 793, 794, 795, 797, 798, 799, 804, 809, 813, 814, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 913, 916, 918, 919, 922, 935, 937, 943, 944, 946, 970, 974, 975, 977, 978, 980, 982, 983, 984, 987, 988, 989, 990, 991, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1012, 1016, 1017, 1019, 1020, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "mainten": [0, 379, 387, 391, 396, 399, 982, 1007, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "j\u00e9r\u00e9mie": [0, 1, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "du": [0, 1, 2, 1028, 1029, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "boisberrang": [0, 1, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "jori": [0, 1, 1035, 1036, 1037, 1040, 1041], "van": [0, 1, 373, 408, 466, 471, 531, 624, 689, 693, 976, 983, 986, 992, 1010, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044], "den": [0, 1, 1029, 1030, 1035, 1036, 1037, 1040, 1041], "bossch": [0, 1, 1035, 1036, 1037, 1041], "lo\u00efc": [0, 1, 1036, 1039, 1041, 1042, 1043, 1044], "est\u00e8v": [0, 1, 1036, 1039, 1041, 1042, 1043, 1044], "thoma": [0, 1, 104, 229, 306, 366, 369, 394, 894, 982, 996, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "j": [0, 1, 11, 18, 38, 39, 41, 44, 62, 71, 80, 81, 82, 112, 115, 116, 127, 153, 165, 171, 212, 224, 238, 246, 260, 261, 266, 272, 288, 294, 297, 310, 321, 359, 366, 373, 374, 376, 383, 385, 391, 403, 404, 406, 408, 410, 411, 413, 414, 416, 417, 434, 437, 441, 443, 450, 451, 466, 471, 495, 510, 513, 514, 515, 517, 525, 528, 531, 533, 534, 535, 537, 538, 544, 550, 556, 557, 590, 591, 629, 630, 634, 641, 642, 645, 646, 663, 664, 666, 677, 685, 686, 687, 689, 690, 691, 693, 702, 705, 707, 711, 713, 715, 718, 719, 720, 722, 751, 752, 754, 755, 770, 774, 784, 785, 788, 789, 827, 828, 835, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 869, 878, 879, 906, 907, 975, 976, 980, 982, 983, 984, 986, 987, 988, 989, 990, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1004, 1021, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "fan": [0, 1, 366, 394, 1001, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "olivi": [0, 1, 15, 18, 38, 49, 62, 189, 200, 218, 222, 262, 264, 350, 351, 352, 394, 894, 999, 1005, 1007, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "grisel": [0, 1, 15, 18, 38, 49, 62, 189, 200, 218, 222, 262, 264, 350, 351, 352, 394, 1005, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "yaroslav": [0, 1, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1044, 1045], "halchenko": [0, 1, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1044], "tim": [0, 1, 117, 131, 1028, 1033, 1034, 1037, 1038, 1039, 1041, 1043, 1044, 1045], "head": [0, 1, 13, 27, 72, 117, 131, 157, 170, 188, 189, 218, 243, 251, 312, 316, 321, 379, 387, 411, 1010, 1033, 1034, 1043, 1044, 1045], "nicola": [0, 1, 149, 310, 655, 982, 999, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "hug": [0, 1, 149, 310, 1004, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "adrin": [0, 1, 66, 346, 394, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "jalali": [0, 1, 66, 346, 394, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "julien": [0, 1, 655, 982, 1010, 1028, 1031, 1035, 1036, 1040, 1041, 1042, 1043, 1044, 1045], "jerphanion": [0, 1, 1040, 1041, 1042, 1043, 1044, 1045], "guillaum": [0, 1, 5, 7, 73, 76, 101, 132, 152, 157, 158, 159, 161, 188, 189, 202, 222, 306, 1010, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lemaitr": [0, 1, 5, 7, 73, 76, 101, 132, 152, 157, 158, 159, 161, 188, 189, 202, 222, 306, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "christian": [0, 1, 20, 200, 201, 202, 218, 350, 351, 374, 1010, 1021, 1028, 1029, 1032, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lorentzen": [0, 1, 200, 201, 202, 218, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "jan": [0, 1, 25, 26, 27, 28, 152, 153, 155, 156, 157, 158, 159, 161, 201, 235, 279, 877, 1028, 1031, 1032, 1033, 1034, 1036, 1037, 1040, 1044], "hendrik": [0, 1, 25, 26, 27, 28, 152, 153, 155, 156, 157, 158, 159, 161, 235, 1028, 1031, 1032, 1033, 1034], "metzen": [0, 1, 25, 26, 27, 28, 152, 153, 155, 156, 157, 158, 159, 161, 235, 1028, 1031, 1032, 1033, 1034], "andrea": [0, 1, 32, 75, 101, 116, 191, 234, 307, 308, 327, 345, 346, 394, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "mueller": [0, 1, 75, 101, 116, 191, 234, 327, 345, 346, 1010, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "vlad": [0, 1, 96, 237, 303, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "nicula": [0, 1, 96, 237, 303, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037], "joel": [0, 1, 73, 394, 414, 532, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "nothman": [0, 1, 73, 394, 414, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "hanmin": [0, 1, 307, 1035, 1036, 1037, 1038, 1039], "qin": [0, 1, 307, 376, 414, 1035, 1036, 1037, 1038, 1039], "omar": [0, 1, 1038, 1043, 1044, 1045], "salman": [0, 1, 1043, 1044, 1045], "bertrand": [0, 1, 1028, 1034, 1035, 1040, 1041], "thirion": [0, 1, 1028, 1034, 1035, 1041], "tom": [0, 1, 192, 208, 284, 286, 308, 309, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "dupr\u00e9": [0, 1, 308, 309, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "la": [0, 1, 192, 208, 284, 286, 308, 309, 312, 376, 1010, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "tour": [0, 1, 192, 208, 284, 286, 308, 309, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "nell": [0, 1, 40, 224, 232, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1040], "roman": [0, 1, 200, 218, 624, 912, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "yurchak": [0, 1, 200, 218, 414, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "meekail": [0, 1, 1042, 1043, 1044, 1045], "zain": [0, 1, 1042, 1043, 1044, 1045], "pleas": [0, 12, 18, 27, 72, 73, 117, 119, 120, 126, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 204, 230, 231, 232, 234, 236, 239, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 284, 294, 303, 312, 316, 317, 318, 319, 320, 321, 322, 327, 341, 359, 366, 373, 374, 377, 379, 380, 381, 383, 387, 391, 392, 393, 396, 397, 400, 402, 405, 406, 413, 414, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 493, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 600, 607, 608, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 986, 990, 996, 1000, 1001, 1006, 1007, 1009, 1012, 1019, 1021, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "do": [0, 4, 10, 13, 26, 43, 56, 62, 68, 75, 91, 100, 102, 103, 106, 116, 119, 121, 123, 125, 126, 132, 139, 146, 157, 164, 170, 171, 172, 197, 200, 204, 218, 221, 223, 236, 237, 239, 252, 256, 259, 262, 264, 282, 284, 286, 290, 319, 330, 334, 337, 341, 342, 345, 350, 351, 352, 359, 361, 365, 366, 367, 374, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 393, 394, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 447, 458, 500, 533, 535, 539, 541, 549, 552, 578, 579, 585, 586, 588, 629, 630, 642, 643, 649, 652, 653, 656, 663, 665, 673, 733, 759, 774, 778, 812, 815, 830, 831, 835, 862, 863, 865, 872, 876, 878, 883, 884, 886, 887, 888, 889, 906, 907, 908, 909, 917, 960, 975, 978, 980, 982, 983, 986, 987, 989, 990, 994, 996, 1001, 1002, 1006, 1007, 1010, 1012, 1019, 1020, 1021, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "email": [0, 350, 379, 391, 414, 833, 988, 1010], "directli": [0, 6, 20, 28, 46, 47, 57, 72, 117, 122, 149, 160, 184, 188, 200, 206, 218, 230, 266, 303, 306, 320, 352, 361, 365, 377, 379, 380, 381, 383, 385, 392, 393, 394, 402, 403, 404, 406, 407, 408, 409, 410, 414, 416, 439, 449, 459, 461, 466, 471, 524, 564, 565, 566, 567, 594, 608, 617, 629, 640, 643, 644, 649, 650, 657, 658, 659, 660, 661, 674, 678, 681, 687, 770, 774, 777, 788, 789, 795, 798, 799, 809, 841, 843, 857, 858, 859, 865, 875, 877, 880, 887, 954, 975, 982, 984, 989, 991, 993, 996, 1001, 1002, 1007, 1013, 1016, 1017, 1028, 1036, 1037, 1039, 1040, 1041, 1044, 1045], "ask": [0, 164, 165, 261, 368, 378, 379, 383, 384, 387, 393, 394, 415, 840, 841, 842, 844, 846, 848, 849, 850, 1004, 1009, 1044], "assist": [0, 379, 391, 996, 1010], "report": [0, 4, 8, 13, 33, 71, 76, 146, 160, 188, 259, 269, 279, 316, 325, 361, 374, 378, 380, 381, 382, 385, 387, 391, 393, 396, 400, 406, 410, 608, 646, 655, 661, 682, 683, 697, 710, 725, 726, 734, 779, 780, 783, 827, 836, 855, 856, 893, 911, 929, 982, 989, 1006, 1007, 1009, 1029, 1032, 1035, 1036, 1038, 1039, 1041, 1043, 1044], "issu": [0, 4, 26, 80, 87, 200, 218, 266, 313, 366, 368, 373, 382, 383, 384, 387, 388, 391, 393, 394, 395, 396, 397, 400, 402, 406, 408, 409, 414, 446, 449, 459, 470, 479, 480, 481, 531, 536, 540, 570, 582, 583, 585, 586, 588, 608, 624, 688, 692, 765, 869, 874, 886, 925, 975, 976, 983, 989, 994, 996, 1001, 1006, 1007, 1009, 1020, 1021, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043], "instead": [0, 4, 5, 6, 13, 21, 49, 54, 56, 57, 58, 72, 101, 115, 120, 129, 146, 149, 152, 200, 202, 215, 218, 225, 239, 252, 257, 258, 262, 263, 282, 289, 306, 316, 317, 318, 319, 320, 337, 339, 341, 350, 352, 359, 361, 365, 366, 373, 374, 377, 378, 379, 380, 381, 383, 384, 387, 388, 391, 392, 393, 400, 402, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 453, 456, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 506, 507, 530, 531, 532, 534, 535, 536, 537, 538, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 591, 604, 605, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 627, 629, 632, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 687, 691, 704, 738, 742, 746, 747, 770, 774, 775, 776, 779, 793, 794, 795, 796, 797, 799, 801, 802, 804, 807, 809, 813, 814, 815, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 859, 860, 861, 863, 864, 865, 870, 871, 876, 877, 878, 888, 889, 892, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 912, 924, 930, 935, 943, 954, 961, 975, 976, 978, 982, 983, 985, 986, 987, 990, 991, 996, 1000, 1001, 1002, 1006, 1009, 1017, 1019, 1021, 1025, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "see": [0, 4, 5, 7, 13, 21, 25, 26, 28, 38, 45, 50, 51, 54, 56, 58, 59, 63, 65, 66, 68, 70, 81, 87, 90, 91, 96, 101, 103, 107, 112, 113, 114, 115, 118, 119, 120, 121, 122, 124, 126, 129, 132, 138, 145, 146, 147, 149, 152, 157, 158, 159, 164, 167, 170, 171, 173, 176, 179, 180, 181, 184, 191, 201, 202, 203, 204, 206, 217, 218, 221, 223, 231, 233, 236, 239, 240, 241, 243, 247, 248, 249, 255, 256, 258, 260, 261, 262, 263, 264, 268, 270, 271, 272, 275, 276, 279, 284, 290, 291, 293, 297, 306, 312, 313, 316, 317, 318, 319, 320, 321, 322, 327, 337, 341, 345, 350, 351, 352, 355, 356, 357, 358, 361, 365, 366, 367, 371, 372, 373, 374, 376, 377, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 396, 402, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 430, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 606, 607, 608, 611, 616, 619, 620, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 698, 703, 705, 708, 710, 739, 759, 770, 774, 775, 776, 777, 784, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 934, 935, 957, 960, 970, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1010, 1012, 1014, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "what": [0, 4, 9, 12, 13, 41, 46, 53, 54, 87, 97, 101, 121, 169, 170, 189, 206, 208, 216, 231, 236, 243, 302, 350, 352, 355, 361, 366, 374, 379, 380, 381, 383, 385, 387, 392, 393, 394, 395, 397, 406, 412, 413, 414, 500, 533, 585, 586, 588, 643, 649, 693, 883, 884, 886, 887, 888, 889, 906, 907, 908, 909, 985, 986, 987, 989, 1002, 1007, 1009, 1012, 1028, 1035], "best": [0, 4, 6, 8, 12, 13, 14, 20, 25, 27, 41, 47, 55, 56, 62, 71, 72, 73, 74, 79, 86, 96, 100, 104, 105, 106, 115, 118, 122, 123, 124, 125, 126, 132, 135, 149, 152, 153, 158, 164, 170, 179, 184, 188, 189, 196, 214, 215, 216, 221, 224, 229, 234, 235, 239, 248, 252, 255, 259, 260, 261, 262, 265, 268, 269, 272, 273, 275, 282, 288, 293, 307, 312, 318, 319, 337, 340, 341, 350, 351, 352, 358, 365, 366, 368, 373, 376, 378, 379, 382, 385, 392, 393, 396, 397, 403, 404, 406, 410, 411, 413, 414, 415, 416, 429, 440, 443, 444, 446, 448, 449, 450, 456, 459, 462, 469, 479, 480, 481, 535, 542, 543, 549, 551, 553, 554, 555, 556, 557, 559, 561, 562, 563, 565, 567, 590, 591, 594, 599, 607, 608, 632, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 672, 673, 675, 676, 677, 685, 686, 687, 690, 691, 700, 705, 716, 717, 718, 719, 720, 724, 725, 735, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 779, 780, 781, 783, 786, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 809, 821, 823, 826, 831, 832, 841, 849, 855, 856, 899, 901, 904, 906, 907, 908, 909, 975, 980, 981, 982, 983, 986, 989, 990, 992, 1000, 1002, 1006, 1007, 1010, 1012, 1017, 1021, 1028, 1031, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "wai": [0, 4, 18, 28, 51, 61, 72, 75, 117, 124, 128, 130, 149, 159, 170, 172, 173, 201, 204, 205, 215, 231, 232, 235, 236, 239, 240, 256, 261, 268, 270, 306, 307, 319, 321, 322, 361, 365, 366, 367, 373, 375, 377, 378, 381, 382, 387, 388, 393, 394, 396, 397, 400, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 421, 440, 441, 448, 449, 450, 456, 457, 459, 460, 466, 493, 552, 553, 560, 569, 586, 596, 597, 608, 629, 663, 664, 673, 674, 675, 696, 701, 703, 714, 732, 733, 750, 751, 753, 759, 770, 774, 784, 791, 819, 827, 844, 865, 871, 876, 882, 908, 909, 957, 960, 975, 976, 980, 981, 982, 983, 984, 985, 986, 987, 989, 991, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1012, 1020, 1021, 1028, 1030, 1036, 1041, 1042], "question": [0, 138, 169, 261, 345, 368, 378, 379, 384, 387, 410, 413, 827, 900, 903, 982, 985, 986, 992, 1004, 1010], "faq": [0, 387, 410, 689, 983, 996], "how": [0, 4, 5, 7, 8, 9, 10, 13, 21, 22, 26, 27, 33, 34, 38, 51, 52, 53, 54, 58, 61, 70, 71, 72, 75, 79, 81, 87, 102, 106, 112, 113, 116, 120, 121, 122, 123, 125, 126, 130, 132, 146, 157, 159, 167, 170, 171, 172, 173, 176, 181, 189, 190, 196, 201, 202, 203, 204, 207, 208, 214, 218, 225, 226, 231, 234, 236, 238, 239, 240, 242, 252, 256, 257, 259, 261, 262, 263, 268, 270, 271, 273, 274, 275, 282, 284, 286, 287, 288, 290, 291, 302, 311, 313, 317, 318, 319, 322, 334, 335, 337, 340, 341, 345, 350, 351, 355, 359, 365, 366, 367, 368, 374, 377, 378, 380, 381, 382, 384, 387, 392, 393, 394, 397, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 420, 430, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 501, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 619, 620, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 701, 717, 753, 788, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 970, 975, 976, 980, 981, 982, 983, 985, 986, 992, 993, 994, 996, 998, 999, 1001, 1002, 1005, 1007, 1009, 1010, 1012, 1014, 1016, 1021, 1023, 1028, 1030, 1033, 1039, 1042, 1043, 1044], "you": [0, 15, 17, 21, 25, 72, 91, 120, 121, 124, 126, 146, 149, 165, 171, 188, 201, 202, 204, 231, 236, 243, 249, 256, 261, 262, 268, 276, 290, 316, 317, 320, 322, 326, 329, 350, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 392, 393, 396, 397, 400, 402, 404, 405, 406, 407, 408, 410, 413, 414, 415, 417, 418, 423, 434, 440, 441, 443, 444, 446, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 497, 500, 501, 506, 507, 529, 530, 531, 533, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 576, 577, 578, 579, 585, 586, 587, 588, 591, 604, 605, 607, 608, 624, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 687, 696, 697, 781, 794, 796, 797, 798, 799, 800, 802, 804, 810, 811, 812, 813, 814, 815, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 848, 849, 855, 856, 857, 858, 861, 862, 863, 864, 865, 870, 871, 872, 877, 878, 883, 884, 886, 887, 888, 889, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 935, 952, 954, 975, 976, 981, 982, 986, 987, 990, 992, 993, 996, 997, 1000, 1001, 1002, 1005, 1006, 1009, 1010, 1012, 1013, 1016, 1019, 1021, 1028, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "can": [0, 4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 20, 21, 25, 26, 27, 28, 32, 33, 34, 38, 41, 43, 44, 47, 49, 50, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 71, 72, 73, 74, 79, 80, 81, 82, 83, 87, 91, 97, 99, 100, 101, 102, 104, 106, 107, 110, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 144, 145, 146, 148, 149, 152, 157, 158, 159, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 184, 185, 188, 189, 191, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 208, 216, 217, 218, 221, 222, 223, 229, 230, 231, 232, 233, 235, 236, 239, 240, 243, 246, 247, 248, 249, 251, 252, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 268, 270, 272, 273, 275, 276, 279, 282, 284, 286, 288, 289, 290, 291, 293, 301, 302, 303, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 326, 327, 329, 330, 334, 335, 337, 340, 341, 345, 350, 351, 352, 357, 358, 359, 361, 365, 366, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 392, 393, 394, 395, 396, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 429, 431, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 469, 479, 480, 481, 484, 493, 496, 500, 505, 506, 509, 518, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 576, 577, 578, 579, 580, 581, 585, 586, 588, 589, 591, 594, 599, 600, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 627, 629, 631, 632, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 684, 686, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 701, 704, 706, 708, 709, 715, 717, 718, 719, 720, 722, 723, 725, 726, 728, 729, 733, 734, 735, 736, 738, 739, 742, 748, 751, 752, 753, 754, 755, 759, 775, 776, 778, 779, 780, 781, 783, 784, 785, 790, 791, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 855, 856, 857, 858, 861, 862, 863, 865, 866, 867, 871, 872, 873, 876, 877, 878, 883, 890, 891, 896, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 910, 911, 914, 916, 918, 922, 924, 929, 934, 935, 941, 943, 944, 946, 949, 952, 954, 956, 957, 960, 967, 970, 971, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "contribut": [0, 14, 21, 126, 157, 184, 204, 270, 311, 368, 376, 377, 381, 382, 383, 387, 393, 394, 396, 411, 412, 413, 444, 446, 550, 551, 556, 557, 722, 725, 752, 980, 986, 989, 994, 1001, 1004, 1006, 1007, 1010, 1019, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "help": [0, 4, 9, 11, 17, 56, 71, 75, 101, 107, 171, 184, 218, 221, 262, 264, 279, 303, 334, 337, 351, 352, 361, 365, 366, 377, 380, 381, 382, 383, 384, 385, 387, 388, 393, 394, 395, 400, 406, 407, 410, 414, 416, 430, 533, 574, 624, 647, 651, 662, 682, 683, 689, 711, 834, 906, 907, 908, 909, 976, 980, 981, 983, 985, 986, 988, 990, 996, 997, 1002, 1005, 1006, 1007, 1009, 1010, 1021, 1034, 1035, 1036, 1039, 1042], "arturo": [0, 38, 58, 118, 179, 184, 239, 262, 264, 311, 350, 351, 352, 390, 1042, 1043, 1044], "amor": [0, 38, 58, 118, 179, 184, 239, 262, 264, 311, 350, 351, 352, 390, 1042, 1043, 1044], "luci": [0, 267, 369, 390, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "liu": [0, 267, 369, 390, 560, 722, 752, 986, 992, 1031, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "activ": [0, 167, 208, 246, 252, 262, 324, 331, 352, 373, 374, 377, 379, 380, 385, 387, 391, 393, 394, 396, 407, 493, 499, 523, 629, 632, 634, 647, 648, 650, 651, 652, 660, 661, 662, 679, 680, 681, 682, 683, 710, 715, 793, 854, 855, 856, 894, 952, 982, 983, 984, 985, 989, 990, 991, 999, 1039], "who": [0, 71, 366, 368, 374, 379, 386, 394, 396, 840, 841, 842, 844, 846, 848, 849, 850, 1004, 1006, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "also": [0, 4, 7, 11, 13, 18, 20, 21, 25, 26, 27, 28, 33, 47, 49, 54, 58, 59, 61, 65, 71, 72, 79, 81, 86, 87, 96, 104, 106, 112, 115, 118, 120, 122, 124, 125, 126, 130, 132, 145, 146, 147, 149, 152, 154, 157, 165, 170, 171, 172, 173, 176, 180, 181, 183, 189, 192, 193, 196, 200, 201, 202, 204, 205, 209, 217, 218, 221, 232, 234, 236, 239, 240, 252, 259, 261, 262, 263, 264, 267, 268, 270, 271, 272, 279, 282, 284, 292, 295, 297, 300, 306, 307, 308, 310, 311, 316, 317, 318, 319, 330, 333, 334, 335, 337, 339, 341, 350, 351, 352, 355, 356, 359, 361, 365, 366, 367, 372, 373, 374, 376, 377, 378, 379, 381, 382, 385, 387, 388, 391, 392, 393, 394, 396, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 434, 435, 436, 438, 439, 442, 443, 444, 445, 447, 449, 459, 460, 462, 464, 479, 481, 489, 493, 495, 500, 505, 529, 530, 532, 533, 538, 543, 546, 548, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 604, 605, 606, 607, 608, 619, 629, 630, 632, 640, 641, 642, 643, 644, 647, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 669, 673, 675, 678, 681, 684, 688, 691, 692, 696, 707, 710, 719, 725, 726, 734, 739, 759, 775, 776, 779, 780, 783, 793, 794, 795, 798, 799, 809, 812, 815, 820, 821, 822, 823, 824, 825, 827, 837, 840, 841, 842, 844, 845, 846, 848, 849, 850, 854, 855, 856, 858, 860, 861, 866, 867, 871, 875, 878, 883, 887, 900, 903, 906, 907, 908, 909, 918, 937, 943, 950, 954, 975, 976, 978, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1012, 1017, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "triag": [0, 368, 379, 382, 394], "pr": [0, 134, 366, 379, 382, 387, 414, 737, 986, 1038, 1040, 1045], "gener": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 22, 26, 27, 28, 30, 31, 32, 33, 34, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 66, 71, 72, 73, 74, 75, 76, 80, 82, 86, 87, 89, 90, 91, 94, 96, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 146, 147, 149, 153, 154, 155, 156, 157, 160, 164, 165, 169, 170, 171, 172, 173, 176, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 252, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 313, 316, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 365, 366, 368, 371, 372, 374, 376, 380, 381, 382, 383, 384, 385, 387, 388, 391, 392, 400, 403, 404, 406, 410, 412, 414, 415, 416, 418, 422, 427, 429, 434, 437, 440, 443, 444, 446, 449, 451, 455, 456, 457, 459, 461, 462, 464, 466, 469, 471, 479, 480, 481, 485, 488, 489, 492, 493, 494, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 535, 537, 538, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 607, 608, 611, 612, 615, 616, 617, 619, 620, 624, 625, 626, 627, 629, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 682, 683, 686, 687, 688, 689, 690, 691, 692, 698, 701, 703, 714, 718, 719, 720, 733, 739, 753, 774, 777, 781, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 828, 829, 830, 831, 832, 838, 839, 841, 843, 844, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 886, 887, 888, 889, 890, 891, 898, 899, 900, 901, 903, 904, 907, 909, 910, 911, 912, 929, 930, 934, 935, 938, 939, 951, 957, 960, 975, 976, 978, 980, 981, 983, 985, 986, 987, 989, 991, 992, 993, 994, 998, 999, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1012, 1015, 1019, 1020, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044], "juan": [0, 369, 1028, 1039, 1040, 1041, 1042, 1043], "carlo": [0, 234, 369, 413, 416, 608, 638, 639, 978, 991, 1028, 1039, 1040, 1041, 1042, 1043, 1044], "alfaro": [0, 369, 1039, 1040, 1041, 1042, 1043], "jim\u00e9nez": [0, 369, 1036, 1039, 1040, 1041, 1042, 1043], "maxwel": [0, 369, 1038, 1041, 1042, 1043, 1044], "martin": [0, 369, 718, 719, 720, 982, 986, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045], "loyola": [0, 369, 1041, 1042], "sylvain": [0, 369, 1032, 1037, 1038, 1039, 1040, 1041, 1042], "mari\u00e9": [0, 369, 1037, 1038, 1039, 1040, 1041, 1042], "norbert": [0, 369, 1030, 1040, 1041, 1042], "prein": [0, 369, 1040, 1041, 1042], "reshama": [0, 363, 369, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "shaikh": [0, 363, 369, 1036, 1037, 1039, 1040, 1041, 1042, 1043], "albert": [0, 229, 369, 1035, 1036, 1037, 1040, 1041], "maren": [0, 369, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "westermann": [0, 369, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "around": [0, 4, 27, 38, 53, 86, 112, 115, 125, 158, 171, 176, 236, 239, 264, 303, 325, 327, 328, 337, 340, 341, 350, 351, 352, 361, 374, 376, 379, 385, 391, 397, 406, 410, 411, 414, 468, 469, 512, 541, 617, 637, 646, 665, 701, 738, 793, 801, 817, 844, 846, 848, 849, 850, 878, 982, 983, 985, 986, 992, 996, 1000, 1006, 1007, 1010, 1019, 1021, 1032, 1033], "lauren": [0, 362, 689, 693, 983, 1040, 1043], "burk": [0, 362, 1043], "francoisgoupil": [0, 362, 1042], "longer": [0, 4, 35, 54, 115, 171, 185, 302, 319, 379, 381, 406, 410, 413, 414, 446, 533, 560, 981, 985, 986, 988, 991, 1001, 1010, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "mathieu": [0, 2, 25, 49, 101, 191, 201, 222, 237, 262, 350, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1041], "blondel": [0, 2, 25, 49, 101, 191, 201, 222, 237, 262, 350, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1041], "lar": [0, 2, 15, 99, 149, 167, 178, 189, 219, 350, 351, 352, 376, 468, 469, 475, 498, 528, 534, 536, 539, 540, 542, 543, 545, 648, 649, 650, 651, 652, 653, 660, 661, 662, 675, 679, 680, 681, 682, 683, 1008, 1019, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1041], "buitinck": [0, 2, 15, 350, 351, 352, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "noel": [0, 2, 112, 113, 114, 1028, 1029, 1030, 1031, 1032, 1040], "daw": [0, 2, 112, 113, 114, 1028, 1029, 1030, 1031, 1032], "dubourg": [0, 2, 155, 159, 1010, 1028, 1032], "edouard": [0, 2, 1028], "duchesnai": [0, 2, 1028], "alexand": [0, 2, 406, 411, 532, 864, 1030, 1031, 1032, 1034, 1035, 1036, 1040, 1041, 1042, 1045], "fabisch": [0, 2, 1030, 1031, 1032, 1034], "virgil": [0, 2, 9, 1028, 1029, 1031], "fritsch": [0, 2, 9, 1028, 1029, 1031], "satrajit": [0, 2, 1028, 1029], "ghosh": [0, 2, 406, 1028, 1029], "angel": [0, 2], "soler": [0, 2], "gollonet": [0, 2], "chri": [0, 2, 1028, 1031, 1036, 1037, 1038, 1039, 1042], "gorgolewski": [0, 2, 1028, 1031], "jaqu": [0, 2, 32, 46, 52, 54, 74, 90, 91, 102, 183, 196, 197, 198, 223, 342, 345, 1028, 1029, 1030, 1031], "grobler": [0, 2, 32, 46, 52, 54, 74, 90, 91, 102, 183, 196, 197, 198, 223, 342, 345, 1028, 1029, 1030, 1031], "brian": [0, 2, 47, 705, 986, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1041, 1042], "holt": [0, 2, 1028], "arnaud": [0, 2, 1029, 1030, 1031, 1032, 1033, 1034], "joli": [0, 2, 1029, 1030, 1031, 1032, 1033, 1034], "thoui": [0, 2, 1028], "rai": [0, 2, 954, 986, 1028, 1038, 1040, 1041], "jone": [0, 2, 374, 1028], "kyle": [0, 2, 100, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040], "kastner": [0, 2, 100, 1030, 1031, 1032, 1039, 1040], "manoj": [0, 2, 43, 149, 182, 1031, 1032, 1033, 1034, 1035], "kumar": [0, 2, 43, 149, 182, 374, 406, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "robert": [0, 2, 49, 73, 149, 188, 279, 376, 411, 525, 532, 625, 653, 718, 719, 720, 731, 864, 976, 982, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1043], "layton": [0, 2, 49, 1028, 1029, 1030, 1031, 1033], "wei": [0, 2, 1000, 1028, 1029, 1032, 1033, 1034, 1035, 1037, 1041, 1044], "li": [0, 2, 328, 374, 636, 639, 693, 722, 752, 891, 975, 978, 986, 989, 996, 998, 1001, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "paolo": [0, 2, 1028, 1032, 1038], "losi": [0, 2, 1028], "gill": [0, 2, 115, 116, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "loupp": [0, 2, 115, 116, 413, 552, 553, 1028, 1029, 1030, 1031, 1032, 1033, 1034], "jarrod": [0, 2, 1037, 1044], "millman": [0, 2, 1037, 1044], "passo": [0, 2, 1028, 1029], "peter": [0, 2, 11, 17, 64, 124, 126, 127, 262, 350, 351, 406, 445, 447, 454, 646, 788, 789, 982, 986, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1043, 1044], "prettenhof": [0, 2, 11, 17, 124, 126, 127, 262, 350, 351, 1028, 1029, 1030, 1031, 1032, 1033], "venkat": [0, 2], "raghav": [0, 2, 123, 265, 306, 1032, 1033, 1034, 1035, 1036, 1040], "rajagopalan": [0, 2, 1036, 1040], "jacob": [0, 2, 1033, 1034, 1035], "schreiber": [0, 2, 1033, 1034, 1035], "\u675c\u4e16\u6a4b": [0, 2], "shiqiao": [0, 2, 1028, 1029], "jake": [0, 2, 11, 159, 201, 221, 249, 289, 297, 1005, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1040, 1042], "vanderpla": [0, 2, 11, 159, 201, 221, 249, 289, 297, 1005, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036], "ward": [0, 2, 37, 40, 45, 53, 55, 57, 63, 69, 167, 173, 414, 438, 442, 460, 527, 851, 1028, 1031, 1033], "farlei": [0, 2, 1028], "ron": [0, 2, 248, 1028], "weiss": [0, 2, 248, 406, 688, 1028], "respons": [0, 149, 171, 196, 200, 203, 236, 271, 350, 376, 385, 393, 405, 406, 407, 413, 443, 461, 479, 480, 481, 628, 629, 630, 671, 672, 695, 697, 699, 738, 793, 794, 987, 993, 1004, 1012, 1045], "chiara": [0, 370, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "marmo": [0, 370, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "If": [0, 4, 11, 13, 17, 28, 33, 43, 50, 56, 72, 83, 99, 110, 120, 125, 132, 161, 165, 170, 181, 200, 215, 217, 236, 239, 261, 268, 276, 289, 297, 306, 311, 312, 337, 341, 345, 346, 350, 351, 352, 359, 361, 365, 366, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 396, 397, 400, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 427, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 511, 512, 516, 519, 520, 521, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 708, 709, 710, 711, 713, 714, 715, 722, 723, 724, 725, 726, 727, 728, 732, 734, 737, 738, 741, 742, 744, 746, 747, 749, 750, 751, 752, 753, 754, 755, 757, 759, 760, 762, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 801, 807, 809, 812, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 921, 922, 923, 924, 927, 933, 935, 937, 939, 943, 945, 949, 952, 954, 957, 960, 961, 967, 970, 971, 972, 973, 975, 976, 978, 980, 981, 982, 983, 984, 986, 989, 990, 992, 993, 996, 998, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1012, 1013, 1019, 1020, 1021, 1028, 1031, 1032, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1044], "us": [0, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 22, 25, 26, 27, 28, 31, 33, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 69, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 87, 91, 92, 93, 95, 98, 100, 101, 102, 104, 105, 106, 108, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 138, 139, 140, 141, 145, 146, 148, 151, 152, 153, 158, 159, 160, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 193, 196, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 212, 215, 217, 218, 219, 221, 222, 223, 224, 226, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 279, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 301, 302, 303, 305, 306, 308, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 325, 326, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 345, 348, 349, 352, 353, 355, 357, 358, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 386, 388, 392, 393, 394, 395, 396, 397, 400, 402, 403, 404, 406, 407, 408, 409, 412, 416, 417, 418, 419, 422, 424, 425, 427, 428, 436, 453, 454, 456, 458, 460, 468, 475, 477, 478, 482, 490, 500, 505, 506, 513, 528, 542, 543, 544, 545, 552, 569, 571, 572, 574, 575, 580, 582, 583, 589, 592, 593, 595, 598, 600, 606, 613, 617, 618, 621, 626, 633, 635, 639, 647, 648, 651, 657, 658, 660, 664, 672, 680, 682, 683, 684, 691, 692, 693, 696, 708, 711, 712, 713, 718, 719, 720, 722, 724, 726, 728, 732, 735, 739, 747, 752, 754, 755, 759, 760, 762, 763, 764, 765, 767, 770, 771, 772, 773, 776, 777, 779, 787, 790, 802, 803, 804, 805, 806, 807, 808, 818, 830, 832, 834, 838, 839, 848, 849, 850, 852, 860, 861, 864, 866, 869, 880, 881, 883, 885, 886, 888, 889, 890, 893, 897, 899, 908, 909, 910, 911, 914, 917, 918, 919, 924, 925, 934, 935, 942, 949, 953, 954, 957, 958, 962, 963, 964, 968, 969, 975, 976, 978, 979, 981, 984, 985, 987, 988, 989, 991, 992, 993, 994, 996, 997, 998, 999, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "scientif": [0, 33, 138, 139, 140, 141, 234, 368, 373, 377, 391, 396, 406, 449, 459, 498, 1010, 1013], "we": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 25, 26, 27, 28, 31, 33, 35, 38, 41, 42, 43, 45, 48, 50, 51, 54, 56, 57, 58, 59, 63, 65, 66, 67, 71, 72, 73, 74, 76, 79, 81, 82, 83, 87, 90, 91, 93, 96, 97, 98, 99, 101, 104, 105, 107, 112, 113, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 134, 135, 138, 144, 145, 146, 148, 149, 152, 154, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 183, 184, 186, 188, 189, 191, 193, 195, 197, 200, 201, 202, 203, 204, 206, 208, 209, 212, 213, 214, 215, 216, 218, 221, 222, 225, 226, 229, 230, 232, 233, 234, 236, 237, 239, 240, 242, 243, 246, 247, 248, 249, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 275, 279, 282, 284, 286, 287, 289, 292, 293, 294, 295, 297, 300, 301, 302, 303, 306, 307, 308, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 330, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 397, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 447, 466, 467, 468, 469, 470, 471, 472, 473, 498, 520, 528, 529, 531, 534, 546, 558, 559, 560, 566, 567, 579, 580, 586, 608, 614, 624, 629, 630, 635, 637, 648, 652, 655, 656, 663, 665, 670, 671, 672, 673, 674, 689, 708, 715, 717, 722, 742, 752, 760, 777, 801, 817, 819, 840, 841, 842, 844, 846, 847, 848, 849, 850, 861, 870, 871, 872, 878, 883, 884, 886, 887, 888, 889, 891, 894, 898, 902, 950, 952, 975, 976, 978, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "would": [0, 4, 6, 9, 13, 27, 33, 46, 54, 56, 59, 71, 79, 81, 82, 87, 93, 101, 102, 112, 125, 149, 152, 157, 158, 170, 171, 172, 173, 176, 184, 190, 200, 201, 202, 215, 218, 229, 236, 239, 248, 257, 261, 262, 267, 269, 271, 279, 284, 290, 302, 306, 307, 311, 312, 319, 322, 328, 337, 341, 345, 346, 350, 352, 359, 361, 365, 374, 375, 379, 380, 381, 385, 387, 388, 391, 392, 393, 394, 397, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 429, 443, 462, 465, 479, 480, 481, 486, 524, 529, 531, 533, 538, 541, 549, 551, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 567, 580, 581, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 676, 697, 699, 705, 709, 710, 717, 752, 778, 781, 785, 795, 797, 809, 823, 831, 832, 841, 849, 856, 883, 884, 886, 887, 888, 889, 890, 891, 896, 898, 899, 901, 904, 906, 907, 908, 909, 943, 946, 975, 976, 979, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 996, 1001, 1006, 1007, 1010, 1012, 1017, 1019, 1021, 1025, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "appreci": [0, 379], "citat": [0, 373, 376, 391], "paper": [0, 149, 176, 261, 376, 385, 391, 406, 408, 439, 446, 475, 501, 531, 538, 560, 638, 655, 663, 664, 668, 673, 676, 689, 784, 835, 844, 847, 890, 891, 982, 986, 989, 992, 1001, 1021, 1028, 1035, 1036], "machin": [0, 4, 6, 8, 9, 13, 28, 64, 118, 145, 146, 149, 152, 157, 168, 172, 174, 212, 242, 261, 264, 267, 279, 299, 304, 306, 311, 313, 318, 321, 333, 338, 341, 345, 350, 352, 365, 366, 368, 372, 373, 374, 376, 377, 379, 382, 385, 386, 391, 392, 393, 395, 400, 404, 406, 410, 411, 413, 414, 416, 434, 436, 445, 468, 469, 475, 499, 501, 507, 513, 514, 515, 527, 529, 531, 538, 541, 552, 553, 554, 555, 556, 557, 561, 562, 563, 590, 591, 607, 608, 611, 616, 619, 631, 635, 636, 638, 640, 641, 642, 647, 648, 651, 652, 653, 654, 655, 656, 673, 679, 680, 689, 705, 710, 721, 731, 737, 739, 781, 784, 793, 823, 824, 838, 839, 844, 847, 854, 855, 856, 858, 876, 878, 884, 898, 899, 900, 901, 903, 904, 908, 909, 954, 975, 976, 978, 979, 982, 983, 984, 986, 987, 989, 992, 993, 994, 996, 1000, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1021, 1022, 1023, 1025, 1028, 1030, 1040, 1041, 1042, 1043], "python": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 365, 367, 373, 377, 379, 380, 381, 382, 383, 384, 387, 388, 391, 393, 396, 407, 414, 493, 505, 506, 578, 696, 806, 872, 954, 986, 996, 1001, 1002, 1004, 1007, 1009, 1010, 1012, 1013, 1015, 1021, 1023, 1028, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "et": [0, 11, 79, 80, 112, 127, 188, 297, 376, 403, 406, 408, 411, 413, 414, 415, 448, 495, 516, 517, 525, 532, 538, 541, 560, 679, 680, 716, 717, 833, 835, 855, 856, 891, 934, 935, 982, 983, 986, 992, 996, 998, 1001, 1002, 1036, 1044], "al": [0, 11, 79, 80, 112, 127, 188, 297, 376, 403, 406, 408, 411, 413, 414, 415, 448, 495, 516, 517, 525, 532, 538, 541, 560, 679, 680, 716, 717, 833, 835, 855, 856, 891, 934, 935, 982, 983, 986, 992, 996, 998, 1001, 1002, 1036, 1041, 1044], "jmlr": [0, 406, 663, 664, 673, 701, 982, 1001], "12": [0, 4, 6, 13, 21, 35, 41, 43, 44, 54, 56, 57, 58, 74, 75, 86, 121, 122, 126, 136, 149, 155, 156, 157, 165, 170, 171, 173, 180, 184, 186, 200, 208, 218, 221, 224, 225, 229, 230, 232, 240, 243, 248, 249, 260, 261, 263, 264, 267, 273, 287, 303, 310, 311, 312, 321, 345, 350, 352, 376, 377, 384, 392, 394, 396, 398, 399, 406, 410, 414, 440, 444, 446, 479, 480, 481, 482, 529, 531, 538, 567, 661, 666, 668, 682, 683, 686, 689, 690, 793, 794, 796, 813, 816, 829, 850, 866, 975, 976, 978, 982, 984, 987, 996, 1000, 1001, 1004, 1012, 1017, 1026, 1029, 1031, 1035, 1036, 1038, 1039, 1044], "pp": [0, 64, 149, 260, 376, 406, 408, 414, 417, 418, 441, 445, 449, 459, 508, 530, 531, 538, 587, 632, 640, 661, 682, 683, 717, 722, 726, 736, 752, 765, 779, 833, 835, 837, 854, 874, 886, 979, 986, 988, 989, 999], "2825": 0, "2830": 0, "2011": [0, 48, 171, 222, 385, 411, 414, 532, 535, 537, 538, 544, 587, 624, 635, 655, 726, 976, 990, 1000, 1005, 1028], "bibtex": 0, "entri": [0, 17, 72, 76, 132, 165, 170, 171, 257, 316, 351, 361, 383, 385, 387, 392, 393, 403, 404, 406, 411, 413, 416, 460, 469, 528, 529, 534, 542, 543, 558, 559, 585, 588, 591, 608, 617, 629, 635, 637, 644, 648, 650, 652, 653, 656, 658, 660, 661, 662, 670, 672, 679, 680, 682, 683, 696, 701, 704, 706, 709, 712, 713, 715, 722, 725, 726, 727, 730, 731, 734, 739, 752, 754, 755, 779, 781, 784, 785, 788, 789, 808, 822, 838, 839, 846, 847, 848, 849, 850, 869, 875, 887, 972, 975, 976, 982, 986, 989, 996, 1001, 1007, 1012, 1035, 1038, 1039, 1041, 1045], "articl": [0, 18, 71, 350, 374, 378, 379, 387, 410, 419, 472, 702, 982, 986, 1021, 1041], "titl": [0, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 33, 38, 39, 40, 42, 45, 46, 47, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 79, 80, 82, 83, 86, 87, 91, 92, 96, 97, 98, 99, 100, 104, 105, 106, 113, 114, 115, 118, 120, 121, 122, 125, 126, 128, 131, 134, 135, 141, 144, 145, 147, 148, 149, 152, 153, 154, 156, 157, 158, 159, 160, 170, 179, 180, 182, 184, 185, 187, 188, 189, 192, 193, 199, 200, 202, 204, 205, 206, 208, 209, 214, 217, 218, 221, 222, 223, 229, 233, 234, 235, 237, 238, 239, 246, 247, 248, 249, 250, 251, 252, 255, 256, 260, 261, 262, 264, 265, 266, 270, 271, 275, 286, 287, 290, 291, 292, 293, 295, 296, 297, 306, 310, 311, 312, 313, 327, 330, 333, 334, 335, 336, 337, 340, 341, 346, 347, 350, 356, 357, 358, 378, 379, 383, 387, 407, 986, 1009, 1017], "p": [0, 11, 14, 25, 27, 28, 42, 62, 81, 82, 86, 93, 104, 124, 145, 149, 155, 176, 212, 217, 218, 221, 223, 233, 249, 261, 267, 268, 297, 373, 374, 376, 377, 384, 387, 403, 404, 406, 408, 409, 411, 413, 415, 416, 417, 419, 439, 441, 443, 444, 447, 454, 466, 468, 471, 472, 475, 495, 525, 531, 535, 537, 538, 544, 546, 547, 548, 550, 552, 553, 554, 555, 556, 558, 561, 562, 563, 587, 589, 590, 591, 592, 593, 595, 596, 597, 601, 602, 603, 604, 605, 606, 612, 613, 624, 637, 640, 685, 687, 689, 691, 696, 702, 712, 720, 737, 748, 782, 784, 797, 803, 804, 805, 808, 823, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 854, 858, 859, 874, 886, 892, 908, 909, 910, 979, 980, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 996, 1000, 1001, 1004, 1016, 1019, 1028, 1029, 1031, 1034, 1036, 1043, 1044], "ython": 0, "f": [0, 4, 5, 7, 11, 12, 13, 15, 17, 18, 21, 27, 31, 33, 38, 44, 48, 49, 50, 53, 54, 56, 59, 65, 68, 72, 76, 87, 99, 112, 115, 118, 119, 120, 122, 125, 132, 133, 140, 143, 145, 148, 149, 150, 152, 158, 159, 161, 167, 169, 170, 171, 172, 173, 176, 184, 186, 189, 200, 201, 202, 204, 210, 214, 218, 222, 233, 235, 236, 239, 243, 251, 259, 261, 262, 263, 264, 267, 268, 270, 271, 273, 284, 287, 300, 301, 302, 303, 308, 311, 312, 316, 318, 320, 322, 325, 326, 336, 341, 345, 350, 351, 352, 361, 374, 379, 380, 381, 383, 385, 391, 404, 407, 411, 413, 414, 415, 416, 484, 505, 506, 528, 529, 534, 535, 563, 578, 579, 580, 589, 592, 593, 595, 596, 597, 601, 602, 603, 604, 605, 606, 614, 624, 629, 632, 655, 710, 719, 722, 725, 726, 752, 779, 780, 783, 784, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816, 822, 855, 856, 860, 869, 872, 873, 877, 878, 879, 913, 918, 919, 978, 981, 990, 993, 994, 996, 1000, 1030, 1036, 1037, 1038, 1040, 1042], "g": [0, 4, 7, 8, 10, 12, 17, 25, 26, 27, 28, 33, 54, 56, 66, 71, 74, 83, 87, 104, 112, 115, 116, 124, 125, 132, 139, 152, 153, 154, 155, 157, 159, 160, 161, 165, 169, 182, 185, 200, 201, 202, 204, 218, 222, 226, 235, 236, 246, 261, 265, 266, 272, 282, 290, 306, 311, 328, 344, 345, 352, 361, 365, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 391, 393, 397, 400, 402, 404, 405, 406, 408, 410, 411, 413, 414, 415, 416, 418, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 500, 525, 528, 530, 531, 534, 535, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 586, 587, 588, 590, 591, 594, 601, 607, 608, 614, 619, 620, 627, 630, 631, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 683, 687, 689, 694, 717, 724, 734, 736, 759, 781, 796, 797, 798, 799, 801, 802, 804, 813, 817, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 845, 847, 848, 849, 850, 854, 855, 856, 858, 861, 863, 864, 865, 868, 870, 871, 874, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 934, 935, 946, 954, 975, 976, 980, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 996, 1000, 1001, 1002, 1007, 1009, 1010, 1021, 1028, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "A": [0, 17, 18, 19, 23, 26, 28, 32, 37, 40, 61, 69, 76, 79, 82, 87, 93, 97, 98, 99, 104, 113, 114, 119, 120, 122, 131, 135, 138, 139, 140, 141, 146, 147, 148, 152, 155, 157, 159, 160, 161, 167, 170, 171, 184, 188, 201, 204, 210, 214, 215, 218, 222, 236, 239, 261, 262, 264, 268, 275, 279, 300, 306, 308, 311, 316, 318, 321, 326, 328, 330, 337, 342, 350, 351, 352, 357, 359, 361, 365, 367, 368, 373, 374, 376, 377, 379, 381, 382, 384, 387, 391, 392, 393, 394, 395, 397, 401, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 487, 488, 489, 491, 494, 497, 498, 499, 500, 501, 505, 507, 508, 509, 510, 511, 517, 519, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 604, 605, 607, 608, 614, 617, 624, 625, 626, 627, 629, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 701, 702, 707, 708, 709, 713, 714, 716, 718, 719, 720, 721, 722, 727, 732, 733, 736, 738, 739, 740, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 760, 762, 763, 770, 771, 772, 773, 774, 777, 784, 786, 787, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 884, 886, 887, 888, 889, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 933, 934, 935, 942, 943, 944, 945, 946, 971, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1012, 1013, 1019, 1020, 1021, 1023, 1028, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "v": [0, 4, 13, 17, 18, 20, 28, 31, 34, 35, 37, 38, 39, 50, 56, 59, 69, 71, 76, 78, 81, 84, 85, 86, 88, 96, 98, 99, 102, 116, 118, 125, 167, 168, 173, 174, 178, 189, 200, 204, 215, 219, 233, 247, 248, 251, 252, 254, 257, 276, 277, 279, 316, 334, 351, 361, 366, 371, 376, 377, 379, 385, 387, 393, 402, 403, 404, 405, 408, 409, 411, 414, 429, 438, 442, 449, 459, 460, 461, 462, 467, 470, 471, 472, 473, 474, 479, 480, 481, 493, 509, 521, 527, 528, 534, 538, 542, 543, 547, 549, 551, 553, 555, 557, 559, 561, 562, 565, 567, 578, 586, 590, 591, 597, 603, 608, 627, 628, 631, 632, 636, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 673, 675, 676, 685, 692, 696, 698, 701, 714, 732, 733, 735, 750, 751, 753, 784, 791, 795, 800, 807, 809, 820, 824, 826, 827, 828, 831, 832, 833, 841, 849, 851, 854, 856, 858, 859, 862, 865, 871, 872, 873, 878, 879, 882, 892, 898, 899, 900, 901, 903, 904, 907, 909, 913, 980, 981, 982, 983, 986, 987, 988, 991, 994, 1000, 1001, 1003, 1023, 1028, 1031, 1032, 1033, 1036, 1038, 1039, 1042, 1043], "b": [0, 8, 10, 25, 27, 60, 66, 81, 102, 104, 114, 115, 121, 125, 126, 135, 138, 139, 153, 154, 155, 160, 165, 182, 184, 185, 200, 201, 206, 218, 237, 239, 260, 264, 266, 271, 275, 282, 319, 328, 361, 374, 376, 379, 383, 384, 385, 403, 404, 406, 409, 410, 411, 414, 434, 479, 497, 538, 543, 563, 585, 586, 587, 588, 604, 605, 607, 608, 625, 643, 644, 645, 646, 655, 666, 669, 671, 673, 677, 684, 685, 702, 716, 726, 727, 788, 789, 806, 807, 845, 871, 872, 873, 874, 877, 878, 886, 913, 935, 936, 949, 976, 978, 982, 983, 984, 986, 989, 991, 996, 1000, 1001, 1016, 1028, 1036, 1039, 1041, 1042, 1043], "o": [0, 18, 20, 28, 31, 39, 50, 56, 61, 62, 64, 65, 83, 86, 92, 98, 129, 149, 160, 188, 193, 198, 200, 215, 235, 246, 261, 263, 270, 306, 307, 311, 317, 320, 329, 341, 355, 365, 374, 376, 379, 396, 406, 408, 411, 413, 417, 419, 441, 444, 445, 447, 470, 472, 531, 601, 624, 663, 664, 689, 826, 854, 869, 910, 954, 978, 980, 982, 983, 986, 987, 989, 990, 1000, 1001, 1002, 1028, 1031, 1034, 1036, 1037, 1040, 1041, 1043, 1044, 1045], "m": [0, 4, 8, 11, 20, 27, 28, 45, 59, 60, 64, 65, 66, 81, 82, 96, 112, 135, 157, 182, 200, 218, 261, 265, 297, 329, 333, 344, 350, 365, 366, 373, 374, 376, 377, 383, 385, 393, 396, 403, 404, 406, 408, 411, 413, 415, 417, 441, 442, 443, 447, 454, 470, 471, 497, 510, 525, 529, 531, 533, 538, 636, 642, 646, 661, 668, 682, 683, 686, 690, 705, 713, 722, 737, 752, 754, 755, 793, 794, 844, 869, 935, 965, 966, 976, 978, 980, 982, 983, 984, 986, 987, 988, 989, 990, 994, 996, 1000, 1002, 1010, 1036, 1037, 1038, 1039, 1042, 1043, 1044], "r": [0, 8, 10, 11, 12, 14, 17, 25, 26, 27, 28, 40, 44, 66, 76, 79, 80, 81, 82, 87, 96, 104, 107, 112, 115, 116, 121, 125, 126, 127, 135, 145, 153, 154, 155, 159, 160, 161, 164, 165, 170, 182, 184, 185, 189, 200, 207, 210, 218, 226, 232, 235, 246, 249, 252, 260, 261, 264, 266, 267, 268, 271, 274, 276, 282, 286, 287, 291, 295, 297, 312, 320, 339, 341, 352, 361, 374, 376, 380, 383, 391, 393, 403, 404, 406, 408, 409, 410, 411, 413, 414, 423, 429, 434, 443, 448, 450, 462, 466, 471, 475, 479, 480, 481, 495, 501, 510, 517, 531, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 585, 586, 587, 588, 603, 606, 607, 608, 624, 632, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 682, 683, 689, 693, 713, 718, 719, 720, 724, 726, 777, 781, 784, 795, 809, 812, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 845, 847, 848, 849, 855, 856, 869, 874, 886, 893, 894, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 911, 952, 976, 978, 980, 982, 983, 986, 987, 988, 989, 990, 993, 994, 996, 1000, 1001, 1002, 1006, 1021, 1028, 1032, 1035, 1038, 1039, 1040, 1041, 1043, 1045], "d": [0, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 32, 33, 38, 39, 43, 49, 50, 51, 61, 62, 64, 71, 72, 83, 90, 93, 96, 99, 104, 106, 123, 152, 160, 200, 208, 216, 218, 226, 230, 232, 233, 234, 235, 249, 260, 261, 269, 282, 290, 291, 297, 302, 325, 326, 329, 337, 341, 342, 352, 373, 374, 376, 381, 385, 391, 404, 406, 408, 409, 411, 413, 414, 416, 417, 441, 443, 444, 449, 457, 460, 485, 490, 500, 523, 531, 533, 554, 555, 562, 563, 578, 579, 587, 611, 612, 616, 619, 620, 641, 642, 645, 666, 667, 668, 677, 685, 686, 689, 690, 694, 696, 702, 705, 718, 719, 720, 722, 752, 760, 764, 774, 777, 784, 807, 833, 835, 837, 838, 839, 854, 865, 869, 871, 872, 874, 886, 891, 908, 909, 913, 978, 980, 982, 983, 984, 985, 986, 988, 994, 996, 998, 1001, 1002, 1009, 1017, 1018, 1019, 1031, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044], "perrot": [0, 1028], "e": [0, 4, 8, 10, 11, 13, 17, 26, 27, 33, 35, 54, 56, 58, 62, 71, 79, 81, 82, 83, 86, 87, 91, 99, 101, 102, 112, 115, 122, 124, 125, 128, 138, 145, 148, 149, 160, 169, 170, 171, 176, 180, 184, 189, 190, 200, 201, 202, 204, 218, 221, 222, 235, 236, 257, 261, 262, 264, 266, 267, 275, 276, 279, 282, 290, 297, 308, 311, 316, 318, 345, 352, 357, 358, 359, 361, 365, 366, 367, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 391, 392, 393, 396, 397, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 434, 436, 438, 440, 441, 442, 444, 446, 447, 451, 460, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 493, 495, 497, 498, 499, 500, 521, 530, 531, 532, 533, 535, 537, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 578, 579, 585, 586, 587, 588, 590, 591, 594, 600, 601, 603, 604, 605, 606, 607, 608, 614, 619, 620, 627, 630, 631, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 684, 685, 687, 689, 691, 694, 696, 698, 701, 702, 705, 706, 724, 725, 726, 727, 734, 737, 738, 751, 759, 763, 781, 784, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 808, 809, 813, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 848, 849, 850, 854, 855, 856, 858, 861, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 893, 894, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 929, 934, 935, 937, 940, 941, 943, 946, 954, 961, 972, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 996, 997, 1000, 1001, 1002, 1007, 1009, 1010, 1019, 1020, 1021, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "journal": [0, 82, 171, 261, 267, 279, 373, 374, 376, 404, 406, 408, 413, 449, 459, 470, 531, 538, 624, 632, 642, 686, 689, 690, 702, 712, 727, 730, 731, 754, 755, 782, 823, 828, 874, 886, 975, 976, 980, 982, 983, 984, 987, 993, 998, 1000, 1001], "research": [0, 149, 169, 261, 267, 279, 374, 376, 391, 406, 498, 510, 632, 642, 689, 731, 823, 828, 975, 983, 987, 989, 1001, 1006, 1007, 1010], "volum": [0, 67, 80, 149, 157, 374, 376, 406, 408, 470, 531, 765, 982, 1001, 1010], "page": [0, 12, 18, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 170, 171, 172, 181, 221, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359, 365, 374, 376, 379, 381, 383, 385, 387, 394, 405, 406, 408, 470, 513, 514, 515, 625, 641, 828, 893, 935, 976, 982, 986, 987, 1012, 1021, 1026, 1028, 1032, 1033], "want": [0, 4, 12, 21, 25, 26, 27, 56, 65, 72, 149, 165, 170, 200, 201, 202, 236, 239, 252, 261, 275, 279, 287, 302, 330, 334, 350, 361, 365, 366, 367, 377, 378, 380, 381, 383, 384, 385, 391, 392, 393, 394, 396, 397, 400, 404, 405, 406, 407, 408, 413, 414, 415, 497, 500, 501, 507, 532, 546, 651, 652, 653, 655, 656, 663, 665, 671, 672, 673, 760, 844, 847, 863, 870, 891, 898, 975, 982, 985, 986, 987, 990, 992, 996, 997, 1001, 1006, 1007, 1012, 1020, 1028, 1042], "its": [0, 4, 9, 12, 13, 14, 20, 27, 35, 38, 56, 66, 67, 79, 81, 83, 87, 91, 92, 93, 101, 110, 112, 118, 121, 125, 138, 149, 152, 157, 159, 170, 171, 173, 176, 179, 189, 213, 217, 218, 223, 229, 236, 238, 239, 241, 243, 246, 251, 252, 260, 264, 266, 268, 270, 284, 286, 290, 291, 308, 319, 328, 334, 341, 347, 350, 351, 355, 359, 361, 366, 367, 372, 373, 374, 375, 379, 380, 381, 383, 384, 387, 391, 392, 393, 394, 396, 397, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 422, 437, 438, 439, 441, 442, 443, 447, 451, 453, 457, 460, 461, 462, 464, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 494, 500, 520, 528, 530, 531, 534, 535, 537, 538, 539, 541, 547, 550, 552, 553, 554, 555, 556, 557, 561, 562, 563, 580, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 641, 642, 668, 669, 671, 682, 683, 684, 685, 689, 693, 696, 705, 721, 725, 726, 732, 733, 737, 774, 777, 779, 793, 794, 795, 819, 826, 827, 829, 840, 841, 842, 844, 845, 846, 848, 849, 850, 857, 858, 862, 867, 870, 871, 873, 890, 891, 894, 898, 899, 906, 908, 918, 919, 924, 930, 954, 956, 975, 978, 981, 982, 983, 985, 986, 987, 988, 989, 992, 993, 994, 999, 1000, 1001, 1002, 1006, 1010, 1012, 1014, 1016, 1019, 1020, 1021, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "api": [0, 12, 51, 109, 167, 228, 230, 236, 240, 244, 284, 351, 352, 367, 368, 372, 373, 379, 380, 382, 383, 388, 389, 391, 392, 394, 396, 400, 411, 413, 414, 416, 420, 423, 424, 425, 428, 430, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 493, 501, 505, 507, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 560, 561, 563, 564, 565, 566, 567, 576, 577, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 655, 674, 685, 686, 687, 688, 689, 699, 793, 794, 798, 799, 801, 817, 824, 842, 844, 846, 847, 850, 854, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 896, 902, 903, 952, 954, 970, 975, 984, 985, 986, 989, 996, 1000, 1006, 1007, 1010, 1012, 1016, 1018, 1023, 1025, 1026, 1027, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "design": [0, 14, 21, 81, 112, 132, 155, 169, 170, 181, 251, 306, 312, 359, 367, 373, 379, 384, 391, 392, 393, 394, 395, 406, 413, 415, 512, 525, 629, 630, 645, 662, 666, 673, 677, 682, 795, 813, 814, 833, 835, 976, 982, 983, 986, 987, 996, 1006, 1007, 1010, 1014, 1030, 1037], "mai": [0, 8, 20, 26, 40, 45, 47, 57, 72, 87, 96, 122, 149, 156, 158, 160, 170, 173, 176, 180, 184, 189, 204, 206, 226, 236, 239, 264, 266, 268, 269, 300, 311, 326, 337, 341, 345, 350, 351, 352, 361, 365, 366, 367, 371, 373, 374, 375, 376, 378, 379, 381, 383, 384, 387, 391, 393, 394, 397, 400, 403, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 429, 436, 437, 438, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 456, 459, 462, 466, 469, 479, 480, 481, 484, 485, 486, 493, 505, 506, 512, 531, 532, 535, 537, 541, 544, 545, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 571, 578, 591, 594, 599, 607, 608, 614, 617, 631, 632, 634, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 673, 674, 675, 676, 678, 681, 683, 685, 686, 688, 689, 690, 692, 694, 702, 709, 712, 713, 715, 716, 718, 719, 720, 722, 734, 752, 759, 781, 782, 795, 797, 798, 799, 800, 809, 810, 811, 812, 814, 815, 819, 823, 826, 831, 832, 833, 834, 835, 837, 840, 841, 842, 844, 846, 848, 849, 850, 856, 857, 858, 861, 863, 873, 875, 876, 877, 878, 879, 881, 887, 890, 891, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 916, 938, 939, 954, 975, 976, 978, 980, 982, 983, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1007, 1012, 1018, 1019, 1028, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "consid": [0, 4, 12, 13, 14, 21, 26, 40, 56, 67, 72, 82, 91, 96, 100, 122, 123, 125, 144, 148, 149, 165, 171, 200, 202, 236, 261, 264, 268, 272, 284, 287, 290, 291, 306, 318, 334, 341, 342, 345, 350, 361, 365, 366, 367, 371, 378, 379, 381, 385, 387, 391, 393, 394, 402, 406, 411, 412, 413, 414, 415, 416, 417, 418, 435, 441, 443, 447, 454, 471, 505, 506, 518, 530, 546, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 582, 583, 585, 586, 588, 590, 604, 605, 617, 628, 629, 630, 643, 649, 655, 656, 657, 659, 668, 676, 685, 686, 687, 689, 690, 691, 693, 697, 699, 702, 704, 706, 712, 722, 726, 730, 752, 782, 784, 790, 840, 841, 842, 844, 846, 848, 849, 850, 853, 855, 856, 861, 871, 872, 879, 893, 894, 903, 904, 906, 907, 908, 909, 970, 975, 981, 982, 983, 984, 986, 987, 989, 992, 993, 994, 996, 1000, 1001, 1002, 1007, 1012, 1019, 1031, 1032, 1036, 1040, 1041, 1043, 1044, 1045], "softwar": [0, 149, 365, 376, 379, 387, 391, 393, 414, 624, 632, 655, 976, 1010], "from": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 313, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 367, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 429, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 499, 501, 503, 504, 505, 506, 507, 509, 512, 516, 518, 520, 521, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 681, 684, 685, 686, 687, 688, 689, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 759, 760, 764, 765, 767, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 925, 926, 927, 928, 929, 930, 933, 935, 937, 938, 939, 940, 943, 944, 945, 947, 948, 949, 950, 951, 953, 954, 957, 960, 974, 975, 976, 978, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1013, 1015, 1016, 1017, 1018, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "2013": [0, 176, 376, 406, 410, 411, 533, 722, 752, 978, 986, 1005, 1029, 1030], "inproceed": 0, "sklearn_api": 0, "ga": 0, "l": [0, 7, 14, 17, 18, 41, 47, 48, 67, 68, 82, 115, 149, 172, 192, 195, 204, 209, 210, 266, 267, 268, 279, 301, 310, 345, 376, 377, 385, 387, 403, 404, 406, 410, 411, 413, 416, 471, 513, 514, 515, 535, 537, 544, 552, 553, 554, 555, 562, 563, 587, 604, 605, 607, 608, 612, 616, 619, 620, 631, 645, 646, 655, 666, 669, 671, 677, 684, 686, 689, 690, 702, 712, 721, 722, 727, 752, 782, 835, 869, 906, 907, 908, 909, 975, 980, 982, 983, 986, 988, 989, 990, 994, 998, 1000, 1002, 1020, 1031, 1036, 1040, 1041, 1042, 1043], "booktitl": 0, "ecml": 0, "pkdd": 0, "workshop": [0, 406, 414, 833, 988, 1005], "languag": [0, 352, 384, 400, 411, 414, 1000, 1006, 1007, 1010, 1013], "data": [0, 3, 6, 8, 11, 13, 14, 15, 16, 17, 20, 22, 26, 31, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 54, 55, 57, 60, 61, 63, 66, 69, 70, 72, 73, 75, 77, 80, 82, 91, 93, 95, 96, 99, 100, 105, 107, 108, 110, 112, 114, 115, 117, 118, 121, 122, 123, 124, 125, 129, 130, 131, 133, 135, 138, 139, 140, 141, 146, 151, 152, 153, 154, 156, 157, 159, 161, 162, 164, 167, 170, 171, 178, 179, 182, 183, 184, 185, 189, 190, 192, 195, 196, 198, 199, 200, 201, 202, 203, 206, 208, 209, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 225, 229, 232, 233, 234, 236, 238, 239, 240, 243, 246, 247, 248, 249, 250, 252, 255, 259, 261, 263, 264, 265, 266, 269, 275, 279, 282, 284, 288, 290, 292, 293, 294, 295, 297, 301, 302, 305, 307, 308, 309, 313, 314, 316, 318, 320, 321, 322, 326, 327, 329, 330, 333, 334, 336, 341, 342, 350, 356, 357, 358, 359, 364, 366, 368, 371, 372, 373, 375, 376, 379, 381, 382, 385, 386, 387, 388, 392, 396, 397, 400, 402, 403, 404, 405, 408, 411, 412, 413, 414, 416, 417, 418, 419, 421, 423, 424, 425, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 512, 517, 518, 519, 520, 521, 523, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 614, 615, 619, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 707, 708, 710, 714, 715, 717, 721, 723, 724, 725, 726, 727, 730, 732, 733, 734, 736, 737, 750, 751, 753, 757, 759, 760, 765, 779, 780, 781, 783, 784, 785, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 922, 923, 924, 934, 935, 949, 952, 957, 958, 960, 961, 962, 963, 964, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1016, 1017, 1019, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "mine": [0, 261, 351, 374, 406, 417, 441, 508, 560, 717, 730, 736, 779, 982, 986, 992, 998], "108": [0, 8, 316, 323, 1029], "122": [0, 13, 114, 157, 165, 171, 234, 385, 987], "high": [0, 4, 9, 11, 12, 26, 28, 32, 38, 41, 45, 50, 56, 58, 63, 66, 71, 75, 81, 82, 98, 99, 115, 117, 118, 119, 120, 125, 126, 128, 130, 140, 141, 149, 152, 158, 165, 169, 171, 172, 173, 184, 195, 201, 202, 204, 214, 221, 222, 223, 229, 233, 246, 252, 259, 263, 267, 268, 276, 290, 291, 300, 302, 308, 310, 311, 312, 313, 322, 328, 334, 336, 337, 350, 351, 357, 358, 365, 374, 376, 379, 384, 387, 388, 391, 392, 403, 404, 405, 406, 410, 412, 413, 414, 415, 416, 441, 444, 446, 447, 449, 466, 479, 480, 481, 550, 551, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 641, 667, 668, 676, 686, 689, 690, 722, 727, 738, 742, 752, 785, 788, 803, 805, 838, 839, 843, 872, 873, 877, 879, 900, 902, 903, 906, 907, 908, 909, 975, 980, 981, 982, 983, 985, 986, 989, 990, 992, 994, 996, 998, 1001, 1002, 1003, 1006, 1007, 1012, 1013, 1015, 1021, 1028, 1029, 1031, 1032, 1036, 1039, 1040, 1041, 1042, 1043], "qualiti": [0, 6, 21, 25, 38, 47, 49, 50, 59, 99, 121, 170, 206, 255, 259, 268, 269, 270, 341, 379, 387, 391, 393, 400, 401, 405, 406, 408, 411, 449, 459, 466, 471, 554, 555, 556, 557, 561, 562, 739, 809, 890, 891, 906, 907, 908, 909, 935, 981, 983, 991, 998, 1002, 1006, 1007, 1010, 1016, 1017, 1023], "png": [0, 33, 910], "svg": 0, "logo": [0, 410, 802], "avail": [0, 5, 11, 12, 14, 42, 57, 58, 99, 120, 123, 124, 149, 152, 157, 161, 169, 170, 171, 189, 200, 208, 218, 222, 236, 239, 258, 259, 264, 265, 268, 289, 290, 291, 297, 311, 316, 317, 318, 319, 321, 322, 328, 330, 361, 365, 373, 374, 376, 377, 378, 379, 380, 384, 388, 392, 393, 396, 400, 403, 405, 406, 407, 410, 411, 412, 413, 414, 415, 417, 444, 447, 448, 449, 450, 466, 467, 468, 469, 470, 471, 472, 473, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 505, 532, 546, 552, 553, 554, 555, 556, 557, 561, 562, 585, 588, 590, 591, 607, 608, 629, 630, 644, 648, 650, 652, 654, 658, 660, 662, 665, 667, 669, 670, 671, 673, 686, 693, 696, 728, 729, 795, 798, 799, 809, 820, 821, 826, 827, 828, 829, 830, 831, 832, 844, 855, 856, 858, 865, 874, 877, 882, 886, 891, 942, 947, 954, 976, 980, 983, 985, 986, 987, 988, 989, 992, 996, 999, 1000, 1001, 1005, 1006, 1007, 1010, 1012, 1016, 1021, 1023, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1044], "doc": [0, 4, 8, 20, 350, 352, 366, 377, 379, 383, 384, 387, 393, 396, 399, 400, 414, 585, 586, 588, 774, 777, 788, 789, 821, 1021, 1028, 1032, 1042], "sourc": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 373, 376, 378, 379, 380, 382, 383, 385, 387, 388, 391, 392, 396, 400, 403, 407, 411, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 970, 971, 972, 973, 974, 983, 996, 1002, 1006, 1010, 1020, 1021, 1038, 1042], "directori": [0, 8, 286, 373, 377, 379, 381, 385, 387, 393, 396, 407, 438, 442, 447, 483, 496, 858, 859, 1042], "driven": [0, 173, 1010], "howev": [0, 4, 5, 7, 13, 14, 25, 26, 28, 38, 48, 50, 54, 56, 61, 73, 76, 79, 83, 86, 101, 104, 115, 117, 118, 122, 125, 126, 132, 146, 149, 152, 157, 158, 171, 172, 181, 189, 200, 204, 222, 225, 226, 229, 235, 236, 261, 268, 275, 279, 282, 284, 289, 301, 306, 318, 341, 345, 350, 351, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 381, 385, 387, 391, 393, 397, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 437, 440, 444, 446, 448, 451, 456, 493, 505, 529, 548, 564, 578, 579, 580, 586, 603, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 627, 629, 630, 635, 640, 652, 653, 669, 684, 689, 692, 697, 759, 761, 795, 798, 799, 809, 821, 825, 826, 837, 855, 856, 861, 870, 871, 876, 900, 901, 903, 914, 975, 976, 979, 980, 981, 982, 983, 985, 986, 987, 989, 990, 991, 993, 994, 996, 1000, 1001, 1002, 1012, 1016, 1019, 1037, 1038, 1040, 1041, 1044], "institut": [0, 376, 989], "privat": [0, 383, 393, 394, 914, 1010, 1028, 1036, 1038, 1039, 1041, 1042, 1045], "grant": [0, 239, 379], "assur": [0, 393, 793, 794, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "sustain": 0, "like": [0, 4, 12, 13, 20, 53, 56, 59, 61, 71, 90, 93, 99, 104, 106, 110, 112, 114, 119, 125, 128, 152, 158, 170, 180, 200, 252, 261, 264, 265, 268, 269, 275, 293, 303, 306, 311, 312, 316, 328, 337, 341, 350, 351, 361, 365, 367, 371, 373, 374, 377, 378, 379, 381, 383, 386, 387, 388, 391, 392, 393, 400, 402, 404, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 427, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 509, 510, 512, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 576, 578, 579, 580, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 923, 924, 932, 937, 940, 949, 950, 954, 957, 958, 959, 971, 973, 975, 978, 980, 981, 982, 983, 986, 988, 989, 990, 992, 993, 996, 1001, 1002, 1006, 1007, 1009, 1010, 1012, 1019, 1021, 1025, 1028, 1031, 1032, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "thank": [0, 4, 18, 26, 56, 87, 172, 176, 200, 270, 350, 351, 378, 387, 1006, 1010, 1028, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "funder": 0, "member": [0, 350, 351, 374, 379, 382, 394, 406, 421, 439, 443, 445, 448, 450, 489, 552, 553, 554, 555, 560, 561, 562, 563, 578, 655, 656, 663, 664, 665, 673, 674, 675, 701, 702, 712, 714, 727, 732, 733, 753, 782, 791, 795, 898, 982, 989, 1012, 1028, 1040, 1043], "consortium": [0, 1010], "foundat": [0, 132, 379, 404, 989], "fran\u00e7oi": [0, 1031], "goupil": 0, "nvidia": [0, 391], "2022": [0, 366, 413, 702, 996, 1042, 1043], "face": [0, 3, 16, 37, 54, 69, 95, 99, 108, 120, 167, 228, 244, 372, 379, 383, 406, 411, 413, 415, 446, 469, 490, 491, 492, 518, 529, 530, 534, 536, 537, 538, 540, 555, 581, 654, 670, 694, 710, 809, 824, 841, 878, 903, 921, 989, 1002, 1003, 1004, 1015, 1020, 1023, 1028, 1036], "2023": [0, 404, 1043, 1044], "microsoft": [0, 12, 377, 380, 396], "m\u00fcller": [0, 32, 307, 308, 394, 411, 532, 864, 990, 996, 1000, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042], "2020": [0, 374, 1038, 1039, 1040, 1041], "quansight": 0, "lab": [0, 374, 465, 533, 896, 1010, 1039], "2021": [0, 377, 379, 668, 1040, 1041], "columbia": 0, "univers": [0, 160, 350, 374, 376, 382, 406, 411, 414, 587, 784, 833, 837, 893, 982, 984, 986, 988], "2016": [0, 226, 373, 406, 975, 1033, 1034], "sydnei": 0, "2017": [0, 261, 373, 404, 406, 417, 441, 986, 1034, 1035], "receiv": [0, 20, 138, 167, 236, 254, 258, 277, 352, 361, 379, 381, 387, 393, 410, 413, 501, 655, 699, 703, 705, 723, 778, 784, 785, 814, 824, 826, 827, 865, 903, 987, 990, 991, 1000, 1038, 1039], "improv": [0, 4, 25, 26, 34, 79, 80, 83, 101, 107, 112, 113, 118, 121, 123, 124, 125, 127, 132, 145, 165, 170, 176, 186, 200, 208, 218, 262, 264, 279, 284, 287, 303, 311, 322, 340, 341, 351, 361, 366, 377, 382, 384, 385, 387, 388, 391, 393, 394, 400, 405, 411, 413, 415, 446, 447, 528, 529, 531, 534, 535, 536, 538, 539, 540, 543, 551, 554, 555, 556, 557, 558, 559, 561, 562, 607, 608, 640, 649, 661, 663, 664, 665, 669, 670, 671, 672, 673, 675, 682, 684, 689, 725, 726, 780, 783, 784, 847, 855, 856, 872, 874, 886, 906, 907, 909, 935, 980, 982, 983, 986, 989, 990, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1019, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "alfr": 0, "sloan": 0, "posit": [0, 4, 6, 8, 11, 12, 17, 25, 26, 28, 68, 107, 129, 134, 169, 170, 184, 185, 195, 200, 201, 202, 204, 218, 224, 233, 239, 258, 261, 264, 268, 270, 271, 306, 317, 318, 322, 350, 359, 365, 374, 378, 379, 381, 386, 388, 393, 394, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 435, 436, 439, 443, 444, 446, 461, 464, 491, 495, 497, 501, 505, 506, 507, 522, 524, 526, 527, 528, 530, 532, 533, 534, 539, 542, 543, 545, 546, 547, 554, 558, 559, 560, 561, 589, 590, 591, 592, 593, 595, 596, 597, 603, 607, 608, 617, 628, 629, 640, 643, 644, 645, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 666, 669, 670, 671, 672, 674, 677, 678, 679, 680, 681, 684, 687, 695, 697, 699, 704, 706, 709, 710, 712, 715, 717, 720, 723, 725, 726, 727, 731, 732, 734, 735, 736, 737, 738, 739, 740, 748, 750, 754, 762, 778, 779, 780, 783, 784, 785, 793, 794, 798, 799, 821, 838, 839, 840, 842, 844, 846, 848, 850, 851, 861, 862, 865, 871, 874, 877, 882, 886, 890, 891, 893, 894, 898, 899, 902, 903, 904, 906, 908, 915, 933, 935, 951, 953, 977, 978, 982, 984, 986, 987, 989, 990, 991, 993, 996, 1001, 1017, 1019, 1021, 1029, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "It": [0, 4, 7, 8, 9, 13, 17, 21, 26, 35, 38, 41, 54, 56, 59, 73, 79, 81, 83, 96, 99, 100, 106, 112, 115, 117, 118, 121, 125, 132, 149, 157, 158, 159, 164, 165, 170, 171, 172, 180, 184, 188, 189, 197, 200, 204, 214, 217, 218, 221, 222, 229, 234, 236, 239, 256, 257, 259, 261, 262, 264, 267, 268, 279, 284, 290, 291, 292, 294, 295, 297, 306, 310, 311, 313, 316, 322, 333, 337, 341, 345, 350, 351, 352, 361, 365, 366, 367, 372, 374, 376, 377, 379, 381, 383, 384, 385, 387, 388, 391, 392, 393, 396, 397, 400, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 431, 434, 435, 438, 439, 440, 441, 442, 444, 445, 446, 449, 456, 459, 464, 465, 466, 471, 475, 482, 484, 493, 505, 512, 521, 530, 532, 533, 535, 537, 538, 546, 547, 550, 551, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 586, 593, 599, 603, 604, 605, 608, 611, 612, 616, 617, 619, 620, 624, 627, 628, 629, 630, 638, 639, 640, 643, 644, 647, 649, 650, 651, 652, 655, 657, 658, 659, 660, 663, 664, 665, 667, 668, 669, 671, 673, 674, 675, 678, 679, 680, 681, 684, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 699, 701, 705, 706, 707, 713, 719, 730, 738, 739, 743, 754, 755, 758, 761, 777, 779, 795, 797, 798, 799, 801, 807, 808, 809, 817, 819, 822, 825, 834, 835, 840, 841, 842, 844, 847, 848, 849, 850, 854, 855, 856, 860, 861, 862, 866, 867, 868, 872, 875, 877, 887, 890, 891, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 922, 935, 943, 944, 954, 957, 960, 962, 963, 964, 965, 966, 967, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 999, 1000, 1001, 1002, 1006, 1010, 1012, 1018, 1019, 1020, 1021, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "provid": [0, 5, 8, 11, 13, 25, 28, 31, 35, 38, 43, 56, 61, 82, 96, 114, 119, 120, 130, 132, 152, 158, 170, 171, 179, 186, 188, 189, 192, 201, 204, 209, 222, 226, 230, 231, 236, 251, 261, 262, 263, 267, 294, 297, 302, 306, 310, 316, 317, 319, 321, 335, 341, 342, 345, 350, 351, 355, 356, 359, 361, 365, 367, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 385, 387, 388, 391, 392, 393, 395, 396, 397, 400, 402, 403, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 417, 418, 427, 434, 437, 439, 440, 441, 443, 444, 446, 447, 449, 456, 457, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 490, 491, 493, 495, 498, 529, 530, 531, 532, 535, 537, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 590, 591, 598, 602, 607, 608, 624, 629, 630, 631, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 687, 691, 696, 708, 731, 737, 738, 760, 770, 774, 784, 788, 790, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 813, 814, 815, 816, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 855, 856, 858, 861, 863, 864, 865, 868, 869, 870, 873, 875, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 913, 924, 929, 943, 945, 962, 963, 964, 975, 976, 978, 981, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1010, 1012, 1016, 1019, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "2012": [0, 82, 404, 413, 552, 553, 560, 636, 739, 975, 979, 986, 1005, 1028], "full": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 365, 366, 367, 372, 374, 377, 379, 381, 384, 387, 391, 393, 394, 396, 402, 405, 406, 408, 410, 411, 414, 438, 442, 444, 446, 456, 485, 486, 489, 493, 494, 497, 498, 499, 500, 501, 502, 504, 507, 532, 534, 538, 556, 557, 564, 565, 629, 645, 647, 651, 666, 677, 718, 719, 724, 741, 742, 744, 746, 747, 749, 781, 786, 787, 793, 794, 806, 835, 924, 975, 982, 985, 988, 989, 993, 996, 999, 1007, 1019, 1028, 1032, 1034, 1036, 1038, 1039, 1041, 1042, 1044, 1045], "time": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 397, 402, 403, 404, 405, 406, 408, 409, 411, 413, 414, 417, 434, 438, 440, 441, 442, 443, 444, 447, 449, 452, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 469, 493, 496, 498, 516, 520, 531, 533, 535, 537, 544, 559, 564, 565, 566, 567, 587, 607, 616, 624, 625, 626, 627, 631, 636, 637, 640, 643, 647, 649, 651, 657, 659, 661, 663, 664, 670, 673, 674, 675, 682, 683, 687, 689, 691, 698, 738, 741, 742, 744, 786, 790, 793, 794, 795, 797, 798, 799, 800, 802, 804, 809, 810, 811, 814, 816, 819, 820, 821, 822, 823, 824, 826, 828, 833, 834, 835, 836, 837, 838, 839, 846, 848, 849, 850, 854, 855, 856, 857, 858, 859, 860, 862, 863, 865, 868, 871, 873, 877, 882, 890, 891, 895, 896, 900, 903, 904, 912, 937, 952, 975, 976, 978, 979, 982, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1006, 1010, 1012, 1017, 1019, 1020, 1021, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "host": [0, 118, 322, 350, 374, 379, 383, 387, 388, 891, 954, 1021, 1044], "other": [0, 4, 8, 12, 13, 25, 28, 31, 32, 34, 38, 41, 45, 53, 58, 67, 70, 73, 87, 98, 99, 101, 104, 115, 117, 118, 121, 122, 126, 128, 134, 144, 164, 165, 167, 169, 170, 171, 172, 176, 179, 193, 200, 204, 218, 221, 222, 223, 225, 229, 230, 231, 233, 235, 236, 239, 240, 248, 251, 256, 258, 261, 262, 263, 270, 271, 279, 289, 290, 291, 305, 306, 310, 311, 313, 314, 316, 317, 319, 325, 337, 341, 344, 347, 350, 351, 355, 359, 361, 365, 371, 372, 374, 375, 376, 379, 381, 383, 384, 385, 387, 388, 392, 393, 394, 396, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 434, 440, 441, 443, 444, 445, 446, 447, 449, 454, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 493, 494, 500, 530, 531, 532, 535, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 586, 587, 588, 591, 594, 599, 607, 608, 609, 610, 617, 624, 625, 627, 632, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 687, 689, 693, 696, 701, 715, 759, 770, 774, 781, 788, 795, 796, 797, 798, 799, 800, 801, 802, 804, 809, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 853, 855, 856, 858, 859, 861, 863, 864, 865, 867, 868, 870, 871, 872, 874, 875, 876, 877, 878, 879, 886, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 929, 943, 975, 976, 978, 979, 980, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1009, 1010, 1012, 1016, 1019, 1020, 1023, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1041, 1042, 1043, 1044], "event": [0, 4, 17, 200, 218, 264, 404, 406, 585, 586, 633, 833, 923, 982, 987, 988, 1006, 1010, 1034], "pari": [0, 376, 407, 463, 760, 866, 997, 1042], "saclai": 0, "center": [0, 4, 7, 8, 9, 14, 25, 27, 34, 35, 38, 39, 41, 43, 44, 46, 49, 50, 51, 54, 56, 57, 60, 61, 62, 64, 65, 82, 92, 101, 103, 106, 123, 124, 125, 126, 149, 165, 171, 181, 192, 194, 200, 201, 211, 212, 224, 225, 229, 230, 239, 246, 249, 250, 256, 262, 272, 289, 292, 294, 301, 306, 308, 309, 320, 327, 335, 337, 338, 339, 344, 351, 352, 374, 375, 376, 384, 405, 406, 408, 409, 411, 412, 413, 419, 437, 439, 440, 443, 444, 445, 446, 449, 451, 456, 457, 458, 459, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 498, 509, 521, 531, 532, 538, 541, 547, 603, 606, 607, 608, 629, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 675, 687, 691, 793, 863, 864, 867, 876, 878, 888, 889, 898, 899, 980, 982, 983, 985, 993, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042], "scienc": [0, 39, 81, 149, 160, 279, 373, 376, 391, 406, 437, 451, 535, 537, 544, 685, 686, 690, 845, 976, 978, 982, 983, 986, 989, 998, 1007, 1010, 1015, 1036], "one": [0, 4, 8, 9, 10, 13, 15, 17, 18, 26, 27, 28, 33, 34, 35, 38, 41, 48, 54, 56, 58, 59, 61, 62, 65, 67, 72, 82, 90, 91, 92, 96, 99, 101, 102, 106, 117, 118, 125, 128, 132, 135, 148, 149, 152, 159, 160, 164, 169, 170, 171, 172, 173, 176, 179, 180, 184, 189, 190, 192, 193, 194, 196, 200, 202, 209, 210, 215, 218, 223, 229, 236, 237, 239, 248, 251, 257, 258, 259, 261, 262, 264, 265, 268, 269, 270, 271, 279, 282, 284, 289, 303, 307, 308, 311, 312, 316, 318, 319, 320, 328, 336, 337, 346, 350, 351, 352, 355, 359, 361, 365, 366, 367, 373, 374, 375, 376, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 395, 396, 397, 400, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 438, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 453, 454, 457, 459, 461, 466, 471, 484, 485, 487, 488, 489, 490, 491, 492, 493, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 511, 531, 536, 537, 540, 544, 548, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 566, 578, 580, 581, 585, 586, 587, 588, 607, 608, 612, 613, 617, 624, 627, 629, 630, 631, 632, 640, 644, 645, 646, 647, 651, 654, 655, 656, 658, 663, 665, 666, 668, 670, 671, 672, 673, 675, 677, 685, 689, 692, 696, 700, 706, 717, 725, 726, 730, 734, 746, 747, 750, 759, 767, 770, 774, 775, 776, 777, 779, 780, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 798, 799, 801, 802, 803, 805, 807, 809, 813, 814, 817, 819, 821, 822, 824, 825, 826, 827, 828, 830, 831, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 854, 858, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 877, 878, 879, 882, 884, 898, 900, 901, 902, 903, 904, 906, 907, 908, 909, 914, 924, 927, 937, 944, 957, 975, 976, 978, 980, 981, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1010, 1012, 1016, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "2014": [0, 53, 373, 411, 413, 416, 527, 604, 605, 619, 620, 655, 689, 855, 856, 934, 935, 983, 990, 1010, 1031], "2015": [0, 171, 373, 705, 718, 719, 720, 855, 856, 986, 993, 1010, 1032, 1033], "50": [0, 4, 7, 10, 13, 15, 17, 25, 33, 34, 39, 43, 51, 53, 60, 61, 66, 67, 71, 72, 86, 93, 96, 99, 106, 112, 115, 118, 125, 130, 131, 136, 149, 153, 155, 156, 157, 158, 169, 170, 171, 180, 184, 195, 200, 203, 207, 208, 212, 214, 216, 218, 221, 225, 226, 232, 233, 235, 243, 256, 261, 263, 264, 274, 284, 303, 306, 310, 318, 320, 326, 328, 330, 335, 344, 351, 374, 376, 379, 384, 410, 413, 414, 415, 418, 439, 470, 497, 501, 520, 530, 536, 541, 550, 551, 566, 590, 591, 612, 614, 655, 656, 663, 664, 665, 667, 673, 674, 675, 689, 710, 795, 809, 827, 847, 898, 907, 981, 982, 986, 987, 989, 992, 996, 1028, 1045], "2018": [0, 200, 218, 414, 447, 975, 986, 1004, 1010, 1035, 1036], "nyu": [0, 123, 182, 847], "moor": [0, 731, 986, 1010], "environ": [0, 12, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359, 365, 374, 376, 377, 379, 381, 385, 387, 391, 396, 400, 402, 405, 407, 496, 1007, 1010, 1035, 1036, 1045], "student": [0, 98, 261, 983, 1007, 1010], "t\u00e9l\u00e9com": [0, 1004], "paristech": [0, 25, 26, 43, 229, 1004], "rv": [0, 123, 265, 306, 799, 807, 809, 975, 1028, 1029, 1032, 1033, 1034, 1035, 1036], "thierri": [0, 246, 248, 1010, 1034, 1035, 1042], "guillemot": [0, 246, 248, 1034, 1035], "labex": 0, "digicosm": 0, "goix": [0, 1032, 1034, 1035, 1036, 1037], "mathurin": [0, 1039, 1041, 1042], "massia": [0, 1039, 1041, 1042], "2019": [0, 171, 377, 406, 449, 459, 689, 983, 993, 996, 1036, 1037, 1038], "dure": [0, 4, 5, 12, 13, 51, 56, 59, 73, 76, 87, 101, 116, 122, 129, 146, 152, 157, 170, 171, 173, 189, 201, 208, 259, 263, 284, 318, 319, 341, 365, 367, 377, 379, 381, 384, 393, 394, 406, 407, 411, 413, 414, 416, 417, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 610, 611, 612, 614, 616, 617, 619, 620, 622, 624, 625, 626, 627, 629, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 697, 785, 793, 794, 795, 798, 799, 809, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 886, 889, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 976, 978, 982, 983, 989, 996, 998, 1002, 1016, 1021, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "phd": [0, 406, 413, 1007, 1010], "chan": [0, 836, 878], "zuckerberg": 0, "initi": [0, 7, 12, 18, 37, 46, 58, 59, 61, 65, 69, 82, 126, 133, 134, 135, 153, 158, 167, 170, 180, 193, 215, 221, 222, 226, 245, 247, 248, 253, 261, 284, 318, 327, 337, 351, 361, 366, 374, 379, 381, 387, 388, 391, 393, 406, 411, 413, 415, 416, 418, 439, 440, 444, 445, 446, 447, 448, 449, 450, 456, 457, 458, 459, 475, 509, 512, 528, 529, 530, 534, 535, 537, 540, 542, 543, 544, 545, 550, 551, 556, 557, 590, 604, 605, 607, 608, 616, 617, 624, 637, 642, 643, 644, 645, 649, 650, 655, 657, 658, 659, 660, 663, 664, 665, 666, 668, 673, 674, 675, 677, 678, 681, 687, 688, 689, 691, 692, 793, 794, 828, 847, 854, 855, 856, 894, 921, 934, 935, 960, 961, 978, 982, 983, 985, 990, 991, 992, 1000, 1002, 1006, 1018, 1020, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "were": [0, 4, 33, 71, 72, 75, 81, 82, 118, 122, 125, 146, 149, 157, 165, 200, 201, 204, 230, 239, 270, 272, 302, 303, 311, 317, 318, 320, 321, 322, 328, 341, 350, 352, 359, 361, 373, 374, 376, 379, 380, 383, 391, 393, 397, 403, 407, 413, 414, 461, 464, 465, 493, 558, 559, 585, 588, 599, 798, 799, 814, 822, 895, 896, 932, 975, 978, 986, 987, 1002, 1009, 1020, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "through": [0, 7, 13, 35, 117, 149, 160, 170, 204, 221, 234, 236, 256, 261, 264, 289, 310, 311, 335, 342, 352, 359, 376, 377, 379, 381, 386, 388, 393, 394, 396, 397, 406, 409, 411, 413, 415, 416, 443, 461, 464, 469, 532, 554, 555, 558, 561, 562, 563, 578, 590, 591, 594, 644, 648, 650, 652, 655, 656, 658, 660, 662, 665, 673, 674, 685, 688, 717, 801, 817, 874, 886, 890, 891, 906, 907, 908, 909, 941, 944, 975, 976, 983, 986, 988, 989, 990, 992, 994, 996, 1000, 1001, 1002, 1010, 1012, 1019, 1021, 1028, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045], "program": [0, 51, 149, 351, 361, 366, 367, 376, 377, 379, 381, 385, 391, 505, 632, 667, 888, 889, 982, 1001, 1002, 1006, 1007, 1028, 1030], "immanuel": [0, 1028, 1029, 1033], "bayer": [0, 1028, 1029, 1033], "kemal": [0, 21, 22, 1030, 1031], "eren": [0, 21, 22, 1030, 1031], "tr\u00e9segni": [0, 1030], "hamzeh": [0, 1031, 1032], "alsalhi": [0, 1031, 1032], "issam": [0, 300, 1034], "laradji": [0, 300, 1034], "maheshakya": [0, 1031, 1032, 1033], "wijewardena": [0, 1031, 1032, 1033], "xue": [0, 1032, 1033, 1034, 1036, 1037, 1040], "nelson": [0, 1034, 1035, 1040], "yenchen": [0, 1034], "lin": [0, 531, 655, 1001, 1033, 1034, 1035, 1036], "neurodebian": 0, "debian": [0, 365, 377, 385], "packag": [0, 47, 54, 164, 236, 284, 366, 372, 373, 376, 377, 379, 380, 381, 383, 385, 388, 391, 393, 396, 405, 408, 413, 414, 449, 475, 643, 644, 976, 982, 985, 989, 996, 1002, 1010, 1015, 1028, 1034, 1036, 1037, 1038], "dr": [0, 149, 376, 406, 1042], "jame": [0, 376, 410, 828, 987, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1044], "haxbi": 0, "dartmouth": 0, "colleg": [0, 169], "organ": [0, 11, 13, 71, 81, 350, 373, 378, 379, 394, 846, 1006], "kindli": 0, "axa": 0, "some": [0, 3, 4, 5, 8, 9, 13, 20, 25, 26, 28, 38, 45, 51, 54, 56, 57, 59, 63, 68, 72, 75, 79, 81, 82, 87, 96, 113, 114, 125, 128, 129, 132, 133, 145, 152, 154, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 172, 173, 176, 179, 181, 183, 184, 188, 189, 190, 194, 195, 200, 201, 204, 208, 209, 214, 217, 218, 221, 223, 229, 233, 236, 239, 247, 248, 249, 255, 256, 261, 262, 263, 264, 267, 269, 279, 282, 287, 290, 295, 301, 302, 306, 311, 317, 318, 319, 320, 321, 322, 333, 334, 336, 337, 345, 347, 350, 351, 352, 359, 361, 365, 366, 367, 372, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 396, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 429, 434, 440, 441, 444, 446, 448, 450, 456, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 493, 496, 505, 506, 512, 520, 521, 530, 531, 533, 535, 538, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 578, 579, 585, 587, 588, 591, 603, 606, 607, 608, 629, 630, 632, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 686, 687, 689, 690, 694, 695, 697, 698, 699, 704, 705, 712, 717, 722, 723, 734, 735, 736, 742, 750, 752, 753, 759, 778, 780, 783, 784, 785, 790, 793, 796, 797, 802, 804, 813, 814, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 918, 919, 943, 954, 975, 976, 978, 981, 982, 983, 985, 986, 987, 988, 989, 990, 992, 993, 996, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1012, 1017, 1019, 1020, 1021, 1025, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "particip": [0, 378, 379, 394, 1010], "could": [0, 4, 9, 13, 14, 28, 38, 43, 54, 72, 73, 96, 99, 113, 114, 122, 125, 146, 152, 157, 165, 169, 170, 171, 200, 201, 204, 209, 218, 225, 234, 235, 236, 255, 261, 282, 292, 295, 319, 333, 334, 350, 355, 367, 379, 385, 387, 393, 396, 400, 404, 410, 413, 414, 418, 471, 530, 535, 604, 605, 626, 668, 797, 802, 804, 975, 976, 982, 983, 993, 994, 996, 1001, 1007, 1020, 1025, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "attend": 0, "psf": [0, 379], "dataia": 0, "possibl": [0, 4, 13, 18, 27, 38, 50, 56, 72, 79, 96, 115, 118, 129, 152, 170, 171, 172, 173, 200, 217, 218, 234, 236, 261, 262, 263, 264, 266, 267, 268, 270, 271, 282, 316, 337, 345, 350, 351, 361, 365, 366, 367, 372, 373, 374, 377, 379, 380, 381, 382, 383, 385, 387, 391, 392, 393, 396, 400, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 416, 418, 420, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 493, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 706, 718, 719, 720, 724, 738, 752, 774, 779, 781, 784, 793, 794, 795, 797, 798, 799, 801, 807, 808, 809, 813, 814, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 916, 918, 919, 922, 927, 954, 957, 960, 975, 978, 981, 982, 983, 985, 986, 987, 988, 989, 994, 996, 1001, 1002, 1007, 1010, 1012, 1019, 1020, 1021, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044], "tinyclu": 0, "french": [0, 218, 312], "associ": [0, 11, 25, 26, 81, 112, 152, 169, 170, 204, 249, 312, 325, 327, 350, 387, 406, 408, 410, 411, 413, 414, 443, 446, 466, 467, 468, 469, 470, 471, 472, 473, 490, 491, 492, 521, 554, 558, 561, 602, 603, 627, 642, 655, 656, 663, 665, 671, 672, 673, 686, 692, 696, 727, 735, 821, 841, 849, 863, 875, 887, 895, 904, 906, 908, 924, 985, 986, 989, 996, 999, 1010, 1020, 1028, 1040, 1044], "fond": [0, 1010], "de": [0, 12, 25, 26, 27, 28, 75, 116, 132, 152, 153, 155, 156, 157, 158, 159, 161, 191, 234, 235, 312, 327, 345, 376, 632, 685, 760, 982, 983, 1007, 1029, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "recherch": 0, "scientifiqu": 0, "granada": 0, "interest": [0, 4, 6, 13, 43, 45, 51, 56, 63, 67, 73, 112, 120, 125, 132, 146, 149, 157, 164, 171, 172, 189, 200, 201, 202, 218, 222, 234, 255, 258, 261, 262, 264, 270, 279, 337, 345, 351, 359, 365, 374, 376, 379, 384, 385, 387, 391, 394, 406, 408, 411, 414, 416, 490, 491, 497, 501, 507, 643, 644, 898, 976, 982, 983, 986, 991, 992, 993, 1007, 1010, 1017, 1019, 1020, 1028, 1045], "our": [0, 4, 5, 7, 11, 12, 13, 43, 54, 57, 71, 72, 81, 82, 87, 96, 97, 112, 113, 119, 122, 125, 126, 144, 149, 152, 157, 159, 169, 170, 171, 172, 173, 200, 204, 218, 223, 225, 236, 255, 261, 264, 267, 268, 287, 302, 306, 312, 317, 319, 330, 334, 340, 342, 345, 350, 351, 352, 361, 366, 378, 383, 384, 387, 391, 392, 393, 394, 397, 406, 410, 413, 414, 416, 417, 441, 447, 560, 641, 689, 705, 717, 722, 734, 752, 840, 841, 842, 844, 846, 848, 849, 850, 975, 976, 982, 983, 986, 992, 996, 999, 1000, 1001, 1007, 1010, 1012, 1019, 1020, 1021, 1035, 1036, 1038, 1039, 1042, 1043, 1045], "via": [0, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 371, 376, 377, 380, 381, 383, 387, 391, 392, 393, 394, 396, 397, 400, 403, 404, 406, 407, 409, 410, 411, 415, 416, 434, 498, 532, 536, 538, 540, 543, 556, 557, 594, 608, 613, 618, 621, 635, 636, 637, 638, 653, 663, 665, 670, 673, 684, 686, 689, 690, 706, 795, 818, 819, 820, 821, 826, 827, 828, 830, 836, 844, 855, 858, 859, 878, 879, 975, 980, 982, 983, 985, 986, 987, 993, 994, 1000, 1001, 1007, 1010, 1012, 1023, 1028, 1032, 1033, 1036, 1040, 1041, 1042, 1043, 1044, 1045], "numfocu": 0, "all": [0, 4, 5, 7, 8, 11, 14, 17, 20, 25, 26, 28, 35, 39, 40, 41, 43, 44, 49, 53, 54, 55, 56, 61, 65, 76, 83, 92, 96, 98, 99, 110, 117, 118, 120, 121, 125, 134, 135, 149, 157, 158, 160, 167, 169, 170, 171, 173, 179, 184, 186, 192, 193, 194, 200, 201, 202, 203, 204, 209, 211, 215, 217, 218, 221, 222, 229, 235, 236, 239, 240, 243, 247, 249, 251, 259, 262, 263, 264, 265, 267, 268, 269, 271, 273, 279, 284, 287, 289, 302, 306, 307, 311, 316, 317, 318, 319, 321, 322, 325, 327, 328, 329, 334, 337, 341, 342, 345, 346, 350, 351, 352, 356, 359, 361, 365, 366, 367, 372, 374, 375, 376, 377, 379, 381, 383, 384, 385, 387, 388, 391, 392, 393, 394, 397, 402, 403, 404, 405, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 425, 428, 429, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 505, 506, 512, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 702, 706, 710, 711, 712, 713, 714, 715, 717, 718, 719, 722, 724, 725, 726, 728, 729, 731, 732, 733, 734, 738, 741, 742, 744, 746, 747, 749, 752, 757, 765, 770, 774, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 805, 807, 809, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 918, 919, 920, 924, 926, 927, 928, 929, 940, 943, 944, 949, 954, 961, 970, 975, 976, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 996, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1021, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "handl": [0, 4, 9, 72, 118, 122, 128, 132, 176, 184, 235, 236, 263, 268, 270, 279, 282, 284, 291, 312, 316, 350, 352, 359, 365, 371, 373, 377, 379, 380, 381, 388, 391, 393, 397, 413, 414, 416, 493, 541, 574, 578, 579, 582, 583, 585, 586, 588, 607, 632, 643, 644, 649, 655, 656, 657, 658, 659, 665, 672, 673, 675, 678, 717, 784, 862, 871, 872, 898, 899, 903, 910, 936, 943, 946, 983, 986, 987, 988, 989, 992, 994, 1001, 1002, 1006, 1007, 1010, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "non": [0, 3, 5, 9, 10, 13, 14, 16, 25, 26, 34, 35, 38, 50, 58, 63, 72, 76, 81, 83, 97, 98, 99, 101, 114, 122, 129, 130, 132, 145, 146, 148, 156, 158, 165, 167, 170, 171, 172, 173, 178, 179, 184, 186, 193, 194, 199, 201, 202, 206, 215, 216, 218, 219, 224, 225, 230, 231, 232, 233, 235, 239, 246, 248, 252, 254, 255, 261, 270, 277, 284, 288, 303, 306, 308, 310, 311, 317, 318, 319, 320, 322, 329, 332, 334, 339, 340, 341, 345, 346, 348, 350, 351, 352, 359, 361, 365, 366, 371, 374, 375, 379, 380, 381, 384, 385, 387, 388, 391, 393, 394, 404, 405, 406, 407, 410, 412, 413, 414, 415, 416, 418, 434, 438, 442, 443, 447, 449, 453, 459, 460, 461, 462, 464, 465, 485, 493, 494, 500, 501, 505, 523, 529, 532, 533, 535, 537, 541, 544, 546, 548, 549, 550, 554, 555, 556, 557, 558, 559, 561, 562, 563, 569, 585, 586, 588, 589, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 628, 632, 635, 640, 647, 649, 654, 655, 656, 657, 661, 662, 663, 664, 665, 666, 669, 673, 674, 675, 682, 683, 684, 685, 686, 687, 688, 689, 691, 695, 696, 699, 703, 704, 709, 712, 714, 716, 717, 722, 723, 724, 731, 733, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 754, 755, 778, 781, 784, 785, 786, 787, 790, 793, 794, 795, 796, 800, 802, 803, 804, 805, 807, 813, 820, 824, 827, 846, 848, 849, 850, 853, 858, 859, 861, 862, 863, 866, 870, 871, 872, 873, 874, 875, 877, 878, 885, 886, 887, 888, 889, 891, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 918, 919, 933, 935, 939, 941, 949, 975, 976, 977, 978, 979, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 997, 998, 999, 1000, 1001, 1002, 1007, 1019, 1020, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "profit": 0, "which": [0, 4, 7, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 26, 27, 28, 35, 38, 40, 41, 44, 45, 47, 50, 54, 56, 57, 58, 59, 66, 68, 71, 72, 73, 76, 79, 81, 82, 87, 91, 93, 98, 100, 101, 102, 107, 112, 115, 116, 117, 118, 122, 123, 124, 125, 128, 130, 131, 132, 133, 134, 135, 138, 144, 146, 148, 149, 152, 153, 157, 158, 159, 164, 165, 169, 170, 171, 173, 176, 179, 180, 184, 189, 193, 200, 201, 202, 204, 206, 208, 214, 216, 217, 218, 221, 222, 223, 225, 229, 230, 233, 234, 235, 236, 237, 239, 240, 246, 247, 251, 252, 255, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 279, 282, 284, 289, 290, 291, 301, 306, 308, 309, 310, 311, 312, 313, 316, 318, 319, 320, 321, 322, 325, 327, 328, 329, 337, 341, 345, 347, 350, 351, 352, 355, 359, 361, 365, 366, 367, 371, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 456, 457, 459, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 484, 520, 528, 529, 530, 531, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 576, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 607, 608, 609, 610, 611, 612, 614, 616, 619, 624, 625, 626, 627, 629, 630, 631, 637, 639, 640, 641, 644, 645, 646, 648, 649, 650, 651, 652, 653, 655, 656, 658, 660, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 677, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 704, 706, 713, 714, 716, 717, 719, 721, 722, 730, 731, 732, 733, 738, 739, 742, 752, 754, 774, 775, 776, 777, 778, 779, 785, 793, 794, 795, 798, 799, 800, 801, 803, 805, 809, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 855, 858, 862, 865, 869, 871, 872, 873, 876, 877, 878, 879, 880, 882, 890, 891, 893, 894, 895, 898, 900, 903, 904, 906, 907, 908, 909, 910, 914, 927, 930, 934, 935, 937, 942, 943, 944, 946, 954, 958, 961, 967, 970, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1012, 1014, 1016, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "manag": [0, 87, 243, 364, 373, 377, 380, 381, 383, 387, 391, 393, 394, 413, 447, 465, 623, 896, 954, 980, 1002, 1006, 1007, 1010, 1021, 1023, 1041, 1044], "board": 0, "scipi": [0, 6, 14, 18, 20, 42, 47, 48, 54, 55, 79, 80, 83, 97, 99, 102, 104, 124, 152, 170, 173, 186, 190, 202, 247, 251, 252, 258, 261, 269, 273, 284, 289, 294, 303, 317, 318, 325, 326, 365, 373, 374, 377, 379, 381, 385, 388, 391, 392, 393, 396, 399, 405, 406, 411, 414, 447, 448, 449, 450, 454, 459, 460, 493, 500, 505, 529, 531, 532, 538, 541, 578, 579, 582, 583, 585, 586, 607, 608, 645, 646, 650, 654, 655, 656, 660, 663, 664, 665, 666, 667, 669, 671, 673, 674, 675, 677, 681, 684, 688, 689, 692, 756, 759, 774, 775, 776, 777, 788, 789, 799, 807, 809, 824, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 861, 870, 871, 876, 877, 878, 881, 885, 888, 889, 898, 900, 901, 903, 904, 937, 957, 960, 975, 976, 982, 984, 987, 989, 990, 996, 1000, 1001, 1005, 1007, 1015, 1017, 1020, 1021, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "mission": [0, 351, 1010], "foster": [0, 1036], "comput": [0, 4, 6, 7, 11, 13, 14, 21, 27, 38, 40, 42, 43, 47, 53, 55, 58, 59, 61, 62, 71, 73, 80, 81, 82, 83, 97, 106, 115, 119, 120, 124, 125, 126, 127, 148, 149, 152, 157, 159, 160, 164, 170, 171, 172, 173, 176, 180, 181, 184, 185, 186, 187, 188, 189, 200, 202, 204, 208, 214, 217, 218, 222, 225, 230, 232, 233, 235, 239, 240, 242, 257, 259, 261, 262, 263, 264, 268, 270, 272, 284, 286, 288, 290, 291, 293, 294, 297, 306, 316, 320, 321, 326, 328, 337, 341, 345, 350, 351, 352, 359, 366, 367, 368, 373, 374, 376, 379, 384, 385, 386, 388, 391, 392, 393, 395, 396, 400, 401, 402, 403, 404, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 454, 456, 458, 459, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 513, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 579, 582, 583, 586, 587, 588, 590, 591, 600, 601, 602, 603, 606, 607, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 721, 722, 723, 725, 726, 727, 730, 732, 734, 735, 736, 738, 739, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 788, 789, 790, 792, 793, 794, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 863, 864, 867, 868, 873, 874, 875, 876, 877, 878, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 932, 933, 934, 935, 951, 952, 959, 961, 967, 975, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 996, 998, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1016, 1017, 1020, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "particular": [0, 4, 11, 14, 38, 40, 41, 61, 72, 79, 93, 101, 105, 122, 125, 128, 156, 164, 170, 171, 200, 202, 208, 234, 258, 262, 264, 270, 284, 293, 297, 306, 316, 317, 320, 351, 352, 361, 365, 373, 374, 377, 378, 379, 381, 383, 384, 385, 387, 388, 392, 393, 396, 406, 407, 410, 411, 413, 414, 415, 416, 443, 466, 470, 493, 541, 560, 606, 650, 655, 660, 669, 671, 681, 684, 709, 724, 781, 830, 845, 917, 919, 976, 978, 980, 982, 986, 989, 990, 991, 992, 994, 996, 1007, 1010, 1020, 1028, 1031, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1045], "As": [0, 4, 7, 21, 26, 28, 31, 41, 44, 54, 56, 58, 59, 67, 83, 87, 101, 112, 113, 119, 122, 124, 126, 131, 144, 152, 157, 165, 170, 172, 173, 176, 179, 182, 184, 189, 191, 200, 204, 208, 218, 226, 236, 249, 256, 258, 259, 261, 262, 264, 274, 282, 289, 307, 319, 328, 337, 351, 352, 355, 357, 358, 361, 365, 366, 374, 377, 378, 379, 381, 383, 384, 392, 393, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 443, 490, 551, 559, 563, 616, 629, 652, 653, 669, 671, 684, 731, 754, 760, 840, 841, 842, 844, 846, 877, 975, 980, 982, 983, 985, 986, 987, 989, 993, 996, 1000, 1001, 1002, 1006, 1007, 1010, 1012, 1016, 1019, 1020, 1021, 1028, 1034, 1039, 1044], "fiscal": 0, "home": [0, 12, 114, 132, 156, 158, 160, 161, 192, 209, 247, 303, 321, 342, 356, 374, 377, 387, 396, 405, 483, 496, 676, 1010], "ensur": [0, 21, 42, 58, 83, 93, 112, 118, 119, 173, 200, 222, 256, 264, 302, 359, 361, 365, 366, 379, 381, 383, 384, 385, 394, 396, 397, 404, 406, 407, 410, 418, 466, 530, 531, 538, 608, 624, 693, 702, 778, 785, 819, 891, 918, 919, 935, 941, 952, 982, 983, 986, 996, 1002, 1016, 1030, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "monei": [0, 218, 1010], "when": [0, 4, 9, 10, 11, 13, 21, 25, 26, 27, 28, 35, 40, 41, 44, 57, 61, 68, 71, 72, 73, 79, 81, 82, 87, 96, 99, 100, 101, 104, 115, 118, 121, 122, 123, 125, 128, 132, 133, 134, 146, 152, 164, 169, 170, 171, 172, 173, 179, 180, 184, 189, 191, 193, 197, 200, 202, 204, 205, 216, 229, 230, 231, 235, 236, 243, 247, 249, 257, 260, 261, 262, 263, 264, 268, 270, 271, 279, 284, 286, 287, 290, 291, 292, 306, 308, 310, 311, 312, 313, 316, 317, 318, 319, 320, 327, 328, 330, 337, 340, 341, 345, 350, 351, 352, 355, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 396, 397, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 422, 429, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 486, 487, 488, 489, 493, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 512, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 575, 578, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 603, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 697, 698, 699, 701, 702, 704, 705, 709, 710, 713, 723, 724, 725, 726, 728, 730, 731, 734, 742, 744, 747, 750, 751, 753, 757, 759, 763, 764, 765, 767, 770, 774, 777, 778, 779, 780, 781, 783, 784, 785, 787, 788, 789, 791, 793, 794, 795, 798, 799, 800, 801, 809, 813, 814, 817, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 884, 885, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 917, 918, 919, 925, 929, 933, 934, 935, 936, 938, 939, 944, 947, 954, 975, 976, 978, 980, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1007, 1010, 1012, 1018, 1019, 1020, 1021, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "need": [0, 4, 9, 12, 33, 47, 49, 54, 56, 58, 83, 98, 110, 118, 122, 124, 125, 126, 132, 149, 152, 157, 164, 165, 170, 188, 202, 217, 218, 222, 229, 232, 234, 236, 240, 246, 247, 251, 252, 259, 261, 263, 264, 266, 279, 282, 284, 286, 311, 316, 328, 337, 350, 351, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 422, 434, 438, 442, 446, 462, 500, 538, 548, 569, 579, 580, 585, 586, 587, 588, 624, 632, 635, 636, 637, 639, 646, 663, 665, 668, 673, 676, 689, 717, 718, 719, 720, 777, 781, 793, 794, 795, 798, 799, 809, 810, 811, 819, 827, 830, 838, 839, 855, 858, 861, 865, 870, 871, 875, 893, 900, 903, 943, 975, 976, 978, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 997, 999, 1000, 1001, 1002, 1007, 1010, 1018, 1019, 1020, 1021, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "keep": [0, 6, 13, 43, 76, 99, 101, 118, 148, 164, 169, 170, 171, 172, 173, 184, 200, 201, 202, 208, 218, 251, 256, 259, 310, 311, 319, 326, 337, 350, 351, 355, 361, 365, 366, 371, 379, 383, 392, 393, 404, 406, 407, 408, 409, 410, 411, 429, 447, 462, 479, 480, 481, 482, 490, 491, 531, 537, 538, 541, 544, 551, 553, 555, 557, 559, 562, 565, 567, 592, 595, 597, 600, 608, 631, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 673, 674, 675, 676, 705, 813, 831, 832, 841, 849, 855, 856, 894, 899, 901, 904, 907, 909, 982, 987, 991, 994, 996, 1007, 1010, 1012, 1017, 1019, 1021, 1023, 1028, 1033, 1036, 1037, 1041, 1042, 1044], "while": [0, 4, 7, 8, 10, 12, 18, 21, 25, 28, 35, 38, 40, 44, 45, 49, 56, 63, 67, 71, 74, 76, 93, 100, 101, 112, 115, 118, 119, 129, 132, 149, 153, 158, 160, 161, 164, 169, 170, 171, 172, 176, 179, 181, 184, 189, 194, 200, 202, 204, 216, 229, 232, 233, 236, 237, 247, 248, 252, 255, 256, 260, 261, 262, 264, 268, 269, 270, 271, 272, 274, 286, 306, 307, 308, 311, 312, 313, 316, 319, 322, 334, 337, 350, 352, 359, 361, 366, 371, 372, 373, 374, 375, 378, 379, 381, 383, 384, 385, 387, 388, 391, 393, 394, 400, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 441, 461, 464, 465, 480, 482, 493, 518, 529, 549, 554, 555, 556, 557, 561, 562, 563, 564, 565, 566, 567, 572, 579, 585, 586, 587, 588, 591, 594, 599, 603, 631, 640, 643, 644, 646, 653, 654, 655, 656, 673, 674, 675, 676, 705, 726, 750, 770, 774, 784, 790, 793, 795, 796, 797, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 817, 819, 820, 821, 822, 823, 825, 833, 844, 846, 848, 849, 850, 857, 858, 859, 860, 861, 874, 886, 891, 896, 898, 899, 906, 907, 908, 909, 914, 939, 975, 976, 978, 979, 980, 982, 983, 985, 986, 987, 988, 989, 992, 993, 996, 998, 1001, 1002, 1006, 1007, 1012, 1018, 1019, 1021, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "complianc": 0, "tax": 0, "regul": 0, "mostli": [0, 47, 71, 200, 218, 311, 387, 391, 393, 411, 413, 414, 518, 775, 776, 1001, 1006, 1010, 1036, 1037, 1038, 1044], "go": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 374, 379, 381, 384, 388, 394, 396, 407, 411, 413, 415, 440, 558, 559, 582, 583, 717, 938, 939, 996, 1002, 1006, 1007, 1012, 1021, 1039], "toward": [0, 27, 28, 64, 83, 119, 125, 131, 152, 172, 179, 204, 205, 226, 239, 345, 379, 393, 406, 445, 449, 459, 673, 675, 692, 872, 985, 1000, 1002, 1005, 1007], "cover": [0, 53, 176, 200, 218, 361, 371, 374, 379, 392, 632, 717, 790, 986, 987, 1005], "travel": 0, "expens": [0, 57, 118, 132, 152, 169, 171, 230, 258, 270, 337, 341, 350, 351, 352, 367, 385, 393, 406, 407, 410, 413, 414, 446, 465, 505, 795, 798, 799, 809, 821, 896, 898, 983, 985, 996, 1001, 1006, 1010, 1021, 1032], "well": [0, 4, 9, 12, 21, 25, 26, 28, 35, 40, 49, 54, 58, 59, 63, 71, 79, 87, 112, 113, 115, 118, 123, 125, 130, 132, 149, 157, 159, 169, 170, 171, 172, 176, 184, 188, 198, 200, 201, 202, 204, 208, 221, 222, 223, 226, 229, 233, 236, 239, 248, 261, 268, 270, 272, 276, 279, 284, 287, 289, 290, 291, 313, 317, 318, 319, 320, 321, 322, 341, 345, 350, 351, 352, 361, 374, 376, 378, 379, 383, 385, 387, 388, 391, 392, 393, 394, 404, 406, 408, 410, 411, 413, 417, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 456, 457, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 697, 718, 719, 720, 781, 784, 788, 791, 793, 794, 795, 798, 799, 809, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 933, 934, 954, 975, 976, 978, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 996, 999, 1000, 1002, 1003, 1006, 1007, 1010, 1020, 1021, 1028, 1029, 1032, 1034, 1035, 1036, 1039], "budget": [0, 122, 833, 834, 835, 836, 837, 975], "1": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 172, 173, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 392, 393, 394, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 424, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 488, 490, 492, 493, 494, 497, 498, 499, 501, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 759, 760, 762, 764, 765, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 918, 919, 924, 929, 932, 933, 935, 937, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 957, 960, 961, 967, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1006, 1007, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1024, 1026, 1030], "note": [0, 4, 5, 7, 8, 11, 12, 14, 20, 21, 27, 33, 38, 54, 67, 72, 73, 81, 83, 86, 87, 93, 99, 115, 116, 118, 121, 125, 126, 129, 149, 152, 159, 164, 169, 170, 171, 172, 173, 176, 188, 189, 193, 200, 201, 202, 204, 208, 214, 216, 218, 221, 222, 223, 225, 229, 230, 232, 234, 235, 236, 237, 239, 247, 256, 257, 261, 264, 267, 268, 269, 282, 284, 286, 290, 291, 301, 306, 307, 310, 316, 317, 318, 319, 320, 321, 322, 326, 328, 330, 337, 341, 350, 359, 365, 366, 373, 376, 377, 379, 380, 381, 383, 385, 386, 391, 392, 393, 396, 397, 401, 404, 405, 406, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 429, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 456, 457, 458, 459, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 484, 487, 493, 495, 501, 506, 512, 516, 524, 527, 530, 531, 535, 536, 537, 538, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 582, 583, 585, 586, 587, 588, 590, 591, 594, 596, 597, 599, 600, 601, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 629, 630, 632, 633, 635, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 696, 697, 700, 704, 705, 710, 712, 717, 718, 719, 720, 724, 725, 726, 728, 730, 734, 737, 742, 750, 751, 754, 759, 760, 764, 766, 770, 774, 778, 779, 780, 781, 783, 784, 785, 788, 789, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 914, 924, 925, 934, 935, 946, 949, 954, 961, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1012, 1019, 1020, 1021, 1023, 1026, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "regard": [0, 5, 7, 11, 13, 54, 56, 72, 91, 101, 140, 152, 157, 171, 172, 189, 197, 202, 223, 235, 239, 263, 270, 271, 287, 351, 375, 379, 380, 384, 391, 393, 400, 405, 406, 411, 413, 414, 416, 440, 444, 449, 456, 459, 498, 611, 616, 653, 655, 698, 739, 794, 801, 817, 822, 840, 841, 979, 982, 986, 988, 989, 991, 993, 1000, 1001, 1002, 1014, 1021, 1035, 1038], "might": [0, 4, 5, 13, 32, 43, 45, 61, 63, 71, 121, 130, 146, 158, 165, 170, 171, 172, 176, 200, 218, 229, 261, 263, 287, 301, 318, 341, 347, 361, 365, 366, 373, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 396, 400, 404, 407, 410, 411, 412, 413, 414, 416, 431, 440, 485, 493, 498, 500, 505, 512, 520, 533, 552, 553, 554, 558, 559, 561, 576, 577, 579, 607, 608, 624, 647, 651, 652, 653, 655, 656, 673, 675, 689, 753, 790, 798, 799, 822, 847, 863, 878, 891, 910, 912, 914, 918, 919, 935, 975, 976, 978, 980, 982, 983, 985, 986, 988, 989, 993, 994, 996, 1001, 1002, 1021, 1029, 1031, 1036, 1037, 1039, 1042, 1043, 1044, 1045], "pai": [0, 218, 379], "dn": [0, 989], "continu": [0, 13, 18, 20, 43, 122, 123, 152, 167, 171, 201, 208, 218, 222, 225, 239, 242, 247, 251, 252, 302, 305, 311, 312, 314, 318, 319, 359, 374, 377, 381, 382, 383, 384, 387, 391, 393, 394, 396, 406, 411, 413, 465, 489, 589, 592, 593, 596, 597, 604, 605, 606, 629, 643, 644, 649, 650, 654, 657, 658, 659, 660, 722, 738, 752, 807, 809, 861, 863, 865, 867, 868, 877, 878, 879, 895, 896, 907, 949, 975, 982, 983, 986, 987, 989, 990, 996, 1002, 1007, 1009, 1010, 1012, 1019, 1025, 1028, 1030, 1031, 1036, 1041, 1042, 1043], "integr": [0, 43, 72, 146, 160, 189, 302, 318, 377, 381, 382, 383, 385, 387, 393, 396, 411, 416, 443, 712, 751, 782, 961, 985, 993, 1010, 1015, 1029, 1031, 1032, 1040, 1041], "servic": [0, 4, 230, 239, 379, 383, 1010, 1036], "azur": [0, 379], "cirru": [0, 379], "cl": [0, 8, 12, 17, 386, 393, 908], "circlecl": 0, "free": [0, 5, 56, 157, 158, 165, 199, 251, 306, 373, 378, 379, 380, 387, 391, 396, 414, 449, 606, 668, 854, 904, 975, 978, 982, 986, 1007, 1036], "cpu": [0, 62, 262, 284, 321, 365, 366, 377, 385, 393, 396, 402, 414, 493, 629, 644, 648, 650, 652, 655, 656, 658, 660, 662, 663, 665, 673, 676, 795, 809, 819, 820, 821, 842, 850, 891, 954, 986, 1012, 1016, 1021, 1033, 1042, 1043, 1045], "server": [0, 149, 365, 376, 377, 493, 1036], "anaconda": [0, 366, 377, 383], "inc": [0, 71, 260, 976, 998, 1010], "storag": [0, 352, 393, 655, 656, 663, 664, 665, 673, 674, 675, 898, 989, 1001, 1031, 1036], "thei": [0, 4, 13, 27, 28, 38, 51, 58, 83, 98, 110, 113, 119, 120, 122, 124, 126, 128, 145, 148, 149, 152, 153, 157, 170, 171, 184, 186, 189, 195, 200, 201, 218, 222, 225, 229, 235, 236, 239, 255, 258, 261, 262, 264, 270, 279, 284, 286, 301, 306, 311, 318, 320, 341, 350, 351, 357, 358, 361, 365, 366, 367, 372, 374, 375, 376, 377, 378, 379, 380, 381, 383, 387, 388, 391, 392, 393, 394, 397, 403, 405, 406, 407, 408, 409, 411, 413, 415, 416, 418, 437, 439, 443, 444, 450, 451, 456, 464, 493, 505, 506, 530, 532, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 585, 588, 594, 607, 616, 626, 640, 643, 644, 649, 655, 656, 657, 658, 659, 667, 669, 673, 675, 678, 684, 758, 759, 761, 764, 770, 785, 795, 809, 827, 833, 834, 835, 836, 837, 855, 858, 860, 866, 877, 878, 900, 903, 906, 907, 908, 909, 913, 975, 976, 978, 980, 982, 985, 986, 987, 988, 989, 991, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1010, 1012, 1016, 1018, 1019, 1021, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "stage": [0, 7, 27, 73, 112, 117, 123, 126, 377, 383, 393, 402, 406, 413, 445, 550, 551, 556, 557, 558, 559, 585, 586, 588, 599, 983, 996, 1005, 1036, 1040], "nightli": [0, 366, 382, 383], "build": [0, 4, 7, 18, 33, 44, 56, 68, 75, 100, 112, 121, 123, 129, 135, 146, 148, 163, 164, 166, 167, 170, 208, 266, 269, 279, 282, 284, 302, 303, 307, 312, 313, 352, 361, 365, 366, 367, 375, 381, 382, 383, 384, 385, 393, 396, 399, 405, 406, 410, 413, 414, 439, 487, 498, 500, 521, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 582, 583, 585, 586, 588, 624, 625, 627, 688, 710, 711, 796, 800, 804, 813, 818, 820, 859, 876, 878, 906, 907, 908, 909, 911, 931, 975, 976, 983, 986, 990, 992, 996, 1001, 1002, 1006, 1007, 1010, 1013, 1015, 1019, 1020, 1028, 1031, 1033, 1034, 1035, 1037, 1040], "applic": [3, 5, 20, 50, 56, 81, 167, 176, 200, 217, 223, 255, 264, 306, 365, 367, 374, 376, 379, 381, 385, 387, 388, 391, 393, 404, 406, 410, 411, 412, 413, 416, 418, 441, 443, 449, 493, 495, 529, 530, 531, 550, 551, 626, 685, 686, 687, 691, 709, 725, 726, 734, 779, 780, 783, 824, 975, 982, 983, 984, 985, 986, 990, 992, 998, 1002, 1006, 1007, 1010, 1019, 1021, 1028, 1029, 1034, 1036, 1039], "problem": [3, 4, 5, 6, 11, 13, 14, 15, 27, 38, 55, 56, 58, 67, 96, 112, 115, 118, 120, 125, 126, 152, 167, 172, 176, 179, 184, 186, 189, 193, 194, 200, 202, 204, 217, 218, 223, 229, 230, 237, 239, 242, 259, 261, 266, 270, 271, 275, 279, 282, 284, 289, 296, 310, 319, 334, 337, 341, 345, 346, 350, 351, 359, 361, 365, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 391, 393, 404, 405, 406, 408, 410, 412, 413, 414, 415, 416, 417, 418, 441, 444, 446, 447, 449, 454, 459, 462, 475, 500, 505, 506, 512, 513, 514, 515, 520, 521, 525, 528, 530, 534, 536, 539, 540, 541, 542, 543, 544, 545, 548, 549, 554, 558, 561, 564, 568, 570, 586, 607, 628, 640, 645, 647, 649, 651, 652, 653, 654, 655, 656, 661, 662, 663, 665, 666, 669, 670, 671, 672, 673, 674, 676, 677, 682, 683, 684, 685, 686, 688, 690, 692, 705, 713, 725, 726, 731, 734, 735, 779, 780, 783, 784, 793, 794, 796, 797, 798, 799, 800, 802, 803, 804, 805, 810, 811, 812, 813, 814, 815, 818, 826, 827, 828, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 864, 865, 871, 879, 882, 888, 889, 898, 899, 906, 908, 924, 935, 976, 977, 981, 982, 983, 985, 986, 987, 988, 989, 990, 994, 996, 1000, 1003, 1007, 1008, 1010, 1013, 1014, 1015, 1021, 1022, 1023, 1028, 1029, 1031, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "medium": [3, 167, 235, 276, 313, 337, 406, 640, 872, 979, 982], "size": [3, 4, 5, 6, 8, 11, 12, 13, 14, 25, 32, 34, 38, 40, 41, 43, 45, 47, 48, 53, 55, 56, 58, 59, 61, 62, 63, 67, 68, 74, 79, 80, 81, 82, 83, 86, 87, 93, 96, 97, 98, 99, 100, 102, 104, 106, 115, 124, 125, 128, 129, 145, 152, 154, 155, 158, 159, 167, 169, 171, 172, 179, 180, 181, 182, 186, 190, 195, 198, 201, 202, 203, 206, 213, 214, 221, 226, 229, 232, 233, 234, 235, 236, 238, 239, 248, 255, 257, 259, 261, 263, 264, 266, 267, 268, 279, 290, 291, 292, 300, 303, 307, 308, 309, 310, 313, 317, 320, 322, 326, 330, 333, 335, 336, 337, 345, 347, 350, 351, 352, 355, 365, 366, 367, 374, 375, 379, 384, 388, 391, 392, 393, 396, 397, 403, 404, 405, 408, 410, 411, 414, 416, 417, 441, 442, 443, 445, 446, 447, 454, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 490, 491, 492, 512, 524, 531, 533, 535, 537, 544, 554, 555, 556, 557, 558, 559, 561, 562, 580, 584, 585, 588, 591, 629, 630, 640, 654, 663, 664, 676, 680, 689, 692, 702, 716, 734, 736, 739, 777, 789, 797, 800, 801, 805, 812, 815, 816, 819, 822, 824, 833, 834, 835, 837, 840, 841, 842, 843, 844, 846, 848, 849, 850, 855, 856, 873, 875, 887, 892, 896, 900, 901, 902, 903, 904, 906, 907, 908, 909, 912, 934, 938, 939, 949, 950, 952, 961, 976, 978, 979, 981, 982, 983, 985, 986, 987, 988, 989, 990, 993, 996, 998, 1000, 1001, 1002, 1010, 1015, 1017, 1019, 1020, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1043, 1044], "interact": [3, 126, 167, 200, 226, 231, 262, 317, 378, 380, 381, 383, 385, 391, 393, 394, 407, 556, 557, 558, 559, 629, 630, 873, 877, 975, 978, 982, 983, 984, 991, 993, 996, 1005, 1007, 1030, 1035, 1042, 1043], "user": [3, 26, 56, 70, 96, 118, 161, 167, 170, 188, 221, 236, 251, 258, 268, 270, 279, 284, 290, 291, 294, 312, 316, 317, 318, 319, 320, 321, 322, 361, 365, 366, 368, 373, 377, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 396, 397, 400, 404, 405, 406, 407, 408, 410, 411, 413, 414, 415, 417, 418, 419, 420, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 931, 935, 975, 976, 982, 983, 985, 986, 987, 989, 996, 1000, 1004, 1006, 1007, 1010, 1014, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "interfac": [3, 112, 167, 372, 373, 380, 381, 388, 391, 393, 410, 416, 417, 438, 442, 447, 493, 550, 696, 795, 798, 799, 809, 858, 859, 884, 971, 975, 989, 1001, 1006, 1007, 1010, 1028, 1030, 1033, 1034, 1036, 1037, 1042, 1044], "compress": [3, 11, 16, 49, 167, 279, 306, 374, 406, 411, 414, 415, 649, 669, 689, 828, 871, 957, 960, 982, 996, 1020, 1028, 1037], "sens": [3, 4, 13, 16, 26, 56, 158, 167, 170, 176, 233, 236, 306, 312, 326, 337, 350, 361, 365, 379, 380, 393, 406, 408, 410, 415, 459, 466, 467, 468, 469, 470, 471, 472, 473, 649, 652, 653, 669, 796, 806, 895, 980, 982, 989, 990, 992, 996, 999], "tomographi": [3, 16, 167, 649, 669, 982], "reconstruct": [3, 16, 21, 96, 97, 101, 167, 199, 224, 225, 320, 411, 414, 479, 480, 481, 528, 530, 532, 534, 535, 536, 537, 539, 540, 545, 580, 584, 649, 669, 685, 686, 690, 890, 891, 982, 983, 1042], "l1": [3, 7, 16, 31, 41, 83, 86, 167, 178, 185, 189, 211, 215, 219, 231, 262, 284, 319, 388, 391, 405, 406, 408, 411, 438, 442, 447, 454, 461, 466, 467, 468, 469, 470, 471, 472, 473, 475, 493, 499, 501, 528, 534, 535, 536, 537, 539, 540, 544, 545, 555, 562, 586, 587, 588, 594, 641, 642, 643, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 669, 673, 674, 675, 676, 678, 685, 731, 758, 764, 769, 774, 775, 776, 781, 809, 816, 824, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 870, 878, 885, 898, 899, 905, 907, 909, 921, 968, 982, 984, 986, 989, 996, 1000, 1001, 1002, 1019, 1033, 1035, 1041, 1044], "prior": [3, 16, 47, 48, 58, 68, 151, 152, 162, 167, 172, 179, 181, 184, 245, 247, 251, 252, 253, 261, 379, 381, 383, 393, 396, 406, 409, 411, 413, 416, 462, 520, 533, 545, 546, 547, 548, 556, 582, 583, 608, 610, 611, 612, 616, 619, 620, 627, 641, 642, 643, 644, 648, 649, 651, 652, 653, 657, 658, 659, 669, 675, 678, 713, 793, 833, 834, 835, 836, 837, 858, 859, 873, 900, 903, 953, 975, 978, 980, 982, 985, 986, 988, 994, 1002, 1003, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1044], "lasso": [3, 16, 106, 132, 138, 167, 170, 178, 219, 319, 345, 365, 391, 408, 409, 411, 413, 414, 415, 468, 469, 475, 498, 521, 528, 534, 536, 539, 540, 542, 543, 545, 594, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 667, 669, 675, 678, 679, 680, 681, 682, 683, 718, 719, 720, 819, 820, 821, 859, 878, 975, 986, 1000, 1008, 1016, 1019, 1023, 1028, 1032, 1033, 1034, 1036, 1037, 1039, 1041, 1042], "recognit": [3, 9, 16, 167, 303, 311, 372, 384, 411, 413, 415, 491, 499, 529, 531, 538, 694, 705, 710, 737, 765, 784, 785, 793, 809, 824, 878, 903, 978, 982, 986, 987, 991, 1001, 1003, 1012, 1015, 1023, 1028], "eigenfac": [3, 16, 167, 374, 411, 491, 538, 694, 710, 809, 824, 878, 903, 1003, 1015, 1028], "svm": [3, 7, 9, 10, 11, 16, 17, 26, 28, 31, 32, 33, 71, 73, 75, 133, 137, 139, 142, 143, 147, 150, 167, 178, 193, 219, 229, 235, 237, 241, 242, 255, 258, 259, 260, 261, 263, 264, 266, 267, 268, 269, 271, 272, 276, 308, 316, 318, 324, 328, 331, 332, 335, 344, 345, 348, 350, 365, 368, 374, 381, 385, 393, 400, 407, 410, 411, 413, 415, 434, 491, 501, 509, 512, 538, 552, 553, 560, 564, 565, 574, 590, 591, 596, 597, 602, 628, 636, 640, 665, 673, 674, 675, 686, 694, 695, 697, 699, 710, 731, 738, 757, 795, 809, 815, 820, 821, 824, 826, 827, 844, 858, 859, 871, 873, 878, 894, 895, 974, 975, 978, 981, 983, 984, 986, 987, 991, 999, 1001, 1003, 1008, 1012, 1015, 1016, 1017, 1021, 1023, 1025, 1028, 1029, 1030, 1032, 1033, 1034, 1035], "imag": [3, 6, 14, 16, 21, 33, 37, 47, 49, 52, 55, 59, 69, 71, 90, 95, 96, 108, 120, 147, 149, 156, 167, 191, 222, 231, 234, 238, 259, 293, 302, 303, 317, 325, 326, 350, 351, 371, 372, 374, 376, 379, 384, 387, 391, 393, 396, 399, 406, 411, 438, 442, 449, 459, 490, 491, 492, 493, 499, 500, 503, 504, 531, 532, 534, 538, 604, 605, 688, 694, 734, 824, 868, 982, 986, 987, 989, 991, 998, 1002, 1006, 1010, 1012, 1017, 1018, 1020, 1021, 1023, 1028, 1031, 1036, 1037, 1041, 1043, 1044], "denois": [3, 16, 95, 108, 167, 411, 493, 532, 534, 538, 581, 584, 824, 868], "kernel": [3, 6, 9, 10, 11, 16, 17, 31, 32, 75, 95, 106, 108, 133, 139, 141, 147, 151, 153, 154, 155, 156, 159, 162, 164, 177, 201, 214, 228, 229, 237, 241, 244, 255, 259, 261, 263, 266, 267, 271, 276, 285, 298, 319, 327, 330, 332, 334, 337, 338, 339, 342, 343, 346, 348, 361, 365, 368, 371, 381, 391, 393, 404, 406, 407, 410, 413, 414, 429, 437, 445, 449, 458, 459, 462, 479, 480, 481, 488, 493, 495, 499, 501, 511, 530, 531, 532, 538, 541, 551, 553, 555, 557, 559, 562, 565, 567, 590, 591, 607, 608, 628, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 673, 674, 675, 676, 685, 687, 688, 689, 692, 731, 754, 755, 757, 762, 763, 770, 771, 772, 773, 795, 801, 806, 809, 824, 826, 831, 832, 838, 839, 841, 843, 849, 856, 858, 859, 864, 868, 870, 871, 873, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 907, 909, 975, 981, 982, 983, 986, 987, 989, 992, 999, 1000, 1008, 1012, 1016, 1017, 1022, 1023, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "pca": [3, 6, 16, 70, 71, 73, 75, 77, 87, 95, 98, 107, 108, 167, 222, 224, 234, 237, 241, 260, 284, 288, 293, 319, 361, 371, 381, 393, 402, 405, 406, 407, 412, 422, 470, 473, 493, 499, 501, 511, 529, 530, 531, 532, 536, 537, 540, 541, 546, 640, 655, 685, 687, 689, 795, 820, 824, 847, 854, 857, 858, 860, 868, 876, 878, 978, 980, 983, 989, 996, 1000, 1002, 1017, 1022, 1023, 1028, 1030, 1031, 1032, 1034, 1035, 1036, 1039, 1041, 1042, 1043, 1045], "lag": [3, 16, 167, 493, 559, 698, 738, 741, 742, 744, 786, 816, 820, 821, 824], "featur": [3, 5, 6, 7, 8, 10, 11, 15, 16, 21, 26, 27, 28, 31, 34, 37, 43, 59, 61, 64, 69, 70, 71, 72, 73, 77, 81, 82, 87, 90, 91, 92, 93, 96, 98, 100, 104, 105, 107, 111, 118, 121, 127, 131, 132, 133, 135, 136, 144, 146, 150, 152, 153, 154, 157, 158, 160, 164, 165, 168, 169, 170, 171, 174, 178, 183, 184, 186, 187, 189, 196, 200, 201, 202, 204, 205, 209, 215, 216, 217, 219, 228, 231, 233, 236, 239, 242, 243, 244, 254, 258, 261, 267, 268, 270, 271, 275, 277, 282, 287, 292, 293, 295, 299, 302, 304, 305, 306, 309, 313, 314, 315, 317, 320, 321, 322, 332, 333, 334, 337, 341, 345, 348, 349, 352, 353, 356, 358, 359, 361, 368, 371, 372, 373, 374, 375, 376, 377, 381, 382, 384, 386, 387, 388, 391, 392, 393, 394, 395, 396, 400, 404, 406, 408, 409, 410, 411, 412, 416, 417, 418, 419, 422, 427, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 576, 577, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 615, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 682, 683, 684, 685, 686, 687, 688, 689, 694, 698, 699, 700, 710, 718, 719, 720, 737, 738, 741, 742, 744, 754, 755, 759, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 777, 781, 784, 786, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 918, 919, 932, 951, 961, 962, 963, 967, 975, 978, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1017, 1018, 1019, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "seri": [3, 12, 16, 21, 83, 119, 167, 169, 172, 173, 182, 200, 204, 221, 243, 266, 313, 320, 325, 371, 374, 384, 393, 406, 486, 487, 488, 489, 493, 497, 498, 499, 501, 502, 507, 538, 559, 687, 691, 698, 738, 741, 742, 744, 786, 816, 820, 821, 824, 914, 977, 982, 983, 987, 989, 1000, 1006, 1031, 1034, 1035, 1036, 1040, 1043], "forecast": [3, 4, 16, 151, 162, 167, 261, 404, 416, 493, 559, 608, 612, 619, 620, 622, 698, 738, 741, 742, 744, 786, 816, 820, 821, 824, 986, 1006], "libsvm": [3, 16, 167, 176, 335, 372, 385, 484, 505, 560, 898, 899, 900, 901, 902, 903, 904, 1001, 1023, 1028, 1030, 1036, 1039, 1042], "gui": [3, 16, 167, 484, 902, 903, 1019, 1028, 1029, 1039], "model": [3, 5, 6, 9, 10, 12, 15, 16, 17, 21, 22, 25, 26, 28, 40, 41, 42, 49, 50, 55, 56, 57, 59, 62, 70, 72, 77, 79, 83, 87, 95, 96, 108, 111, 112, 115, 117, 121, 123, 124, 125, 127, 129, 131, 132, 135, 136, 138, 139, 141, 143, 145, 150, 155, 156, 158, 159, 160, 161, 165, 168, 169, 173, 174, 180, 182, 186, 190, 191, 193, 195, 196, 197, 201, 202, 204, 206, 208, 212, 213, 215, 216, 217, 219, 229, 232, 237, 246, 248, 249, 250, 253, 255, 256, 257, 259, 262, 264, 266, 267, 269, 270, 274, 275, 277, 279, 284, 286, 287, 288, 290, 293, 297, 307, 310, 312, 313, 316, 318, 320, 321, 322, 325, 326, 334, 336, 337, 338, 339, 340, 342, 343, 345, 347, 351, 352, 356, 357, 358, 361, 368, 371, 373, 374, 382, 385, 393, 395, 397, 402, 403, 404, 406, 407, 409, 411, 412, 413, 414, 415, 416, 425, 429, 431, 434, 439, 446, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 486, 487, 493, 495, 497, 498, 499, 500, 506, 519, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 585, 586, 588, 590, 591, 594, 599, 603, 606, 607, 608, 612, 624, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 698, 703, 708, 718, 719, 720, 730, 731, 737, 746, 749, 781, 784, 785, 788, 793, 794, 795, 798, 799, 800, 801, 809, 810, 811, 812, 816, 817, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 841, 843, 844, 845, 847, 849, 854, 855, 856, 858, 859, 861, 863, 865, 870, 871, 873, 874, 875, 877, 878, 879, 883, 884, 886, 887, 888, 889, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 976, 978, 979, 980, 983, 984, 987, 989, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1010, 1013, 1015, 1017, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033], "complex": [3, 9, 15, 16, 17, 152, 157, 164, 167, 204, 214, 217, 228, 235, 236, 244, 254, 270, 277, 307, 316, 319, 320, 324, 331, 337, 341, 352, 354, 360, 375, 379, 384, 391, 407, 411, 413, 417, 437, 441, 444, 445, 447, 464, 486, 497, 498, 499, 511, 531, 538, 548, 554, 555, 556, 557, 559, 561, 562, 601, 627, 635, 653, 655, 673, 674, 730, 746, 795, 824, 826, 854, 858, 859, 863, 871, 878, 894, 898, 901, 904, 906, 907, 908, 909, 975, 976, 978, 979, 981, 983, 985, 987, 992, 996, 999, 1007, 1008, 1010, 1023, 1029, 1031, 1037, 1038, 1041], "influenc": [3, 9, 13, 16, 81, 82, 112, 167, 170, 182, 246, 269, 306, 313, 337, 341, 345, 361, 367, 408, 411, 413, 429, 437, 451, 462, 479, 480, 481, 486, 498, 551, 553, 555, 557, 559, 562, 565, 567, 608, 625, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 673, 675, 676, 730, 746, 824, 831, 832, 840, 841, 848, 849, 856, 875, 876, 887, 899, 901, 904, 907, 909, 918, 975, 980, 981, 982, 989, 992, 996, 1000, 1001, 1010, 1031, 1036, 1037], "core": [3, 16, 50, 56, 66, 72, 112, 118, 120, 121, 167, 170, 171, 321, 364, 366, 368, 377, 379, 382, 387, 393, 396, 406, 411, 413, 414, 417, 441, 443, 446, 447, 452, 454, 496, 535, 586, 591, 655, 656, 663, 665, 673, 833, 834, 835, 836, 837, 842, 850, 982, 989, 992, 1001, 1004, 1007, 1008, 1010, 1019, 1021, 1023, 1030, 1032, 1033, 1035, 1038, 1042, 1043, 1044], "classif": [3, 6, 7, 16, 24, 25, 26, 28, 29, 32, 36, 46, 72, 73, 74, 89, 94, 99, 112, 114, 116, 118, 119, 120, 121, 123, 126, 130, 137, 142, 145, 146, 147, 148, 149, 151, 162, 170, 171, 176, 178, 192, 193, 200, 208, 219, 228, 230, 234, 239, 242, 244, 249, 254, 258, 259, 260, 261, 262, 270, 276, 277, 279, 281, 283, 285, 286, 292, 294, 297, 298, 299, 304, 308, 325, 331, 332, 333, 337, 340, 343, 345, 346, 348, 349, 351, 352, 353, 361, 365, 367, 368, 372, 373, 374, 376, 381, 384, 388, 392, 393, 401, 404, 406, 407, 410, 411, 414, 415, 423, 434, 466, 472, 479, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 507, 509, 511, 512, 516, 517, 519, 520, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 566, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 603, 606, 607, 608, 610, 611, 619, 628, 629, 630, 640, 655, 656, 663, 665, 671, 672, 673, 694, 700, 702, 705, 709, 710, 712, 713, 715, 722, 723, 725, 726, 730, 731, 734, 737, 738, 739, 750, 752, 754, 755, 757, 778, 779, 780, 782, 783, 784, 785, 790, 792, 795, 796, 798, 799, 800, 801, 809, 813, 814, 817, 818, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 840, 845, 847, 848, 854, 855, 856, 858, 862, 865, 870, 871, 872, 873, 878, 879, 882, 884, 893, 894, 895, 898, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 921, 924, 932, 975, 976, 978, 979, 980, 983, 984, 988, 991, 993, 994, 996, 997, 999, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1017, 1018, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "text": [3, 7, 11, 12, 15, 16, 17, 20, 32, 33, 41, 45, 54, 58, 61, 63, 65, 71, 81, 82, 118, 123, 173, 180, 194, 195, 229, 233, 240, 241, 246, 248, 254, 267, 268, 272, 277, 289, 292, 294, 300, 308, 319, 324, 326, 331, 344, 353, 355, 365, 367, 368, 371, 372, 373, 379, 384, 391, 393, 404, 406, 407, 409, 410, 411, 413, 416, 444, 446, 465, 484, 485, 486, 496, 500, 505, 518, 533, 541, 561, 612, 622, 649, 655, 663, 665, 671, 673, 694, 700, 702, 704, 710, 714, 725, 733, 789, 791, 795, 809, 824, 833, 835, 837, 840, 845, 858, 859, 861, 862, 870, 894, 895, 896, 898, 910, 911, 912, 932, 975, 978, 982, 984, 986, 987, 988, 990, 993, 996, 998, 1000, 1001, 1005, 1007, 1010, 1013, 1023, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "document": [3, 12, 15, 16, 19, 23, 27, 32, 46, 52, 58, 72, 73, 74, 90, 91, 93, 96, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 183, 197, 198, 215, 230, 231, 232, 233, 236, 237, 239, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 302, 303, 312, 317, 320, 321, 327, 329, 342, 345, 352, 353, 359, 365, 366, 367, 368, 373, 374, 375, 377, 378, 380, 381, 382, 383, 384, 385, 387, 391, 393, 396, 397, 400, 403, 405, 406, 411, 414, 417, 441, 444, 445, 446, 447, 450, 454, 461, 485, 486, 496, 498, 508, 518, 520, 533, 541, 561, 585, 586, 587, 588, 591, 601, 628, 636, 640, 655, 656, 663, 665, 670, 671, 672, 673, 693, 694, 696, 700, 702, 708, 714, 733, 754, 755, 765, 774, 775, 776, 789, 791, 795, 798, 799, 801, 809, 817, 820, 822, 825, 828, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 859, 870, 898, 903, 914, 917, 919, 932, 952, 975, 982, 984, 986, 987, 988, 989, 990, 994, 1000, 1003, 1004, 1005, 1010, 1014, 1019, 1021, 1029, 1030, 1034], "outlier": [3, 16, 45, 81, 82, 125, 128, 167, 178, 202, 203, 204, 206, 219, 228, 244, 285, 298, 305, 314, 347, 374, 393, 406, 408, 413, 428, 443, 461, 463, 466, 467, 470, 471, 472, 473, 487, 488, 489, 493, 507, 509, 519, 521, 560, 628, 636, 646, 667, 668, 669, 673, 674, 675, 676, 689, 699, 824, 844, 848, 859, 867, 868, 870, 871, 872, 874, 875, 876, 877, 878, 883, 884, 885, 886, 887, 888, 889, 901, 902, 904, 986, 1000, 1001, 1006, 1008, 1022, 1023, 1028, 1033, 1034, 1036], "detect": [3, 8, 10, 16, 21, 64, 66, 81, 83, 119, 128, 167, 181, 204, 228, 244, 254, 261, 264, 277, 285, 298, 312, 336, 374, 377, 379, 383, 391, 393, 404, 405, 406, 408, 410, 414, 428, 443, 446, 461, 463, 466, 467, 470, 471, 472, 473, 485, 486, 488, 489, 493, 507, 509, 512, 519, 534, 535, 536, 543, 560, 561, 585, 588, 593, 628, 636, 674, 695, 699, 723, 785, 824, 844, 848, 859, 868, 871, 872, 876, 877, 878, 898, 902, 978, 982, 1006, 1007, 1008, 1010, 1016, 1021, 1022, 1023, 1028, 1031, 1034, 1035, 1036, 1038, 1040, 1041, 1043, 1044], "set": [3, 4, 5, 6, 7, 8, 11, 13, 14, 16, 17, 21, 26, 27, 28, 31, 32, 35, 38, 42, 43, 45, 46, 47, 50, 51, 54, 55, 56, 58, 59, 61, 63, 65, 66, 67, 71, 72, 74, 81, 82, 83, 87, 91, 95, 96, 101, 108, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 134, 138, 145, 146, 149, 152, 158, 159, 160, 161, 167, 169, 170, 171, 172, 173, 179, 184, 185, 188, 189, 191, 193, 195, 196, 199, 200, 201, 202, 205, 208, 213, 214, 218, 221, 222, 223, 229, 230, 231, 232, 234, 235, 236, 239, 243, 246, 248, 250, 251, 255, 256, 259, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 275, 279, 282, 286, 290, 291, 292, 293, 294, 297, 301, 302, 303, 306, 308, 310, 311, 312, 313, 316, 318, 319, 325, 326, 329, 330, 334, 336, 339, 341, 345, 350, 351, 352, 357, 358, 361, 365, 366, 367, 368, 371, 372, 374, 376, 377, 379, 381, 383, 384, 386, 387, 392, 393, 394, 396, 397, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 420, 423, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 485, 486, 490, 492, 493, 494, 496, 499, 500, 501, 505, 506, 507, 512, 520, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 695, 696, 697, 698, 699, 700, 710, 711, 716, 718, 719, 722, 723, 724, 725, 726, 727, 730, 734, 736, 737, 741, 742, 744, 746, 747, 749, 752, 775, 776, 778, 779, 780, 781, 783, 785, 786, 787, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 918, 919, 929, 930, 935, 939, 942, 943, 954, 956, 957, 960, 961, 967, 970, 975, 976, 977, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1013, 1015, 1016, 1017, 1020, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "predict": [3, 6, 7, 8, 11, 16, 24, 26, 27, 28, 31, 33, 35, 38, 45, 49, 57, 59, 63, 71, 72, 73, 74, 76, 86, 107, 110, 111, 112, 114, 115, 116, 118, 120, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 136, 140, 141, 146, 149, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 167, 170, 171, 172, 173, 176, 179, 182, 183, 184, 192, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 208, 209, 214, 215, 217, 218, 229, 230, 232, 234, 236, 238, 247, 248, 249, 250, 251, 252, 254, 255, 259, 261, 263, 264, 267, 270, 271, 275, 277, 279, 282, 287, 290, 291, 292, 295, 296, 303, 306, 307, 311, 312, 316, 317, 318, 319, 320, 322, 326, 328, 329, 330, 333, 334, 336, 337, 341, 343, 344, 345, 346, 350, 351, 356, 357, 358, 359, 361, 364, 366, 368, 371, 374, 376, 379, 381, 386, 388, 393, 395, 397, 400, 401, 402, 404, 405, 406, 407, 411, 413, 414, 415, 423, 429, 434, 435, 436, 437, 439, 440, 441, 444, 445, 446, 462, 466, 479, 480, 481, 484, 498, 505, 521, 531, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 579, 590, 591, 599, 603, 607, 608, 610, 611, 612, 613, 619, 622, 624, 625, 627, 628, 629, 630, 631, 632, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 711, 712, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 730, 731, 734, 737, 738, 739, 742, 744, 746, 748, 752, 778, 779, 780, 781, 782, 783, 784, 785, 789, 790, 792, 793, 794, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 844, 845, 848, 849, 855, 856, 858, 865, 878, 879, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 960, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 987, 988, 989, 990, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1013, 1015, 1016, 1017, 1021, 1023, 1025, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "latenc": [3, 7, 16, 123, 167, 364, 521, 562, 669, 675, 824, 878, 904, 951, 960, 1006, 1023, 1031], "speci": [3, 16, 91, 167, 239, 285, 298, 350, 374, 412, 495, 703, 785, 843, 902, 913, 986, 992, 1028], "distribut": [3, 4, 8, 9, 10, 13, 16, 21, 28, 35, 38, 40, 45, 53, 54, 56, 58, 63, 76, 80, 81, 82, 93, 112, 114, 125, 128, 144, 149, 152, 161, 167, 169, 170, 173, 176, 179, 200, 202, 204, 223, 225, 229, 233, 239, 246, 251, 252, 257, 261, 267, 269, 279, 285, 289, 298, 305, 306, 308, 311, 314, 322, 325, 326, 342, 345, 350, 365, 366, 374, 375, 376, 377, 379, 380, 383, 384, 385, 393, 400, 404, 405, 406, 408, 410, 411, 412, 418, 444, 446, 466, 467, 468, 469, 470, 471, 472, 473, 485, 495, 500, 512, 513, 514, 515, 516, 520, 529, 530, 533, 547, 548, 549, 560, 608, 622, 637, 639, 641, 642, 645, 655, 656, 666, 676, 677, 685, 686, 687, 689, 703, 705, 720, 748, 785, 793, 794, 799, 800, 807, 809, 813, 814, 824, 834, 837, 843, 847, 854, 861, 874, 875, 876, 877, 878, 886, 887, 888, 893, 894, 902, 913, 937, 954, 975, 980, 982, 984, 985, 986, 988, 989, 991, 992, 998, 999, 1004, 1006, 1007, 1012, 1016, 1020, 1022, 1023, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "relat": [3, 7, 12, 13, 16, 18, 45, 63, 97, 99, 101, 167, 168, 170, 195, 204, 236, 239, 254, 268, 321, 341, 350, 359, 368, 374, 375, 378, 382, 383, 384, 386, 387, 388, 391, 393, 394, 395, 397, 400, 405, 406, 407, 408, 409, 410, 411, 413, 416, 447, 461, 466, 493, 546, 547, 559, 560, 636, 670, 674, 689, 698, 719, 739, 816, 821, 856, 857, 859, 862, 863, 868, 871, 873, 874, 877, 886, 902, 975, 978, 980, 986, 987, 989, 990, 993, 996, 1001, 1002, 1003, 1004, 1007, 1023, 1028, 1032, 1033, 1034, 1036, 1037, 1040, 1041, 1044], "engin": [3, 16, 41, 117, 157, 167, 365, 373, 376, 406, 412, 414, 461, 493, 559, 636, 670, 698, 816, 821, 856, 857, 859, 862, 863, 868, 871, 873, 877, 976, 978, 986, 996, 1004, 1034], "topic": [3, 7, 8, 16, 71, 167, 350, 351, 352, 374, 375, 410, 411, 414, 485, 494, 533, 535, 537, 544, 585, 588, 982, 987, 1006, 1007, 1021, 1033, 1035], "extract": [3, 4, 6, 8, 11, 12, 16, 18, 51, 56, 70, 71, 72, 77, 86, 96, 149, 167, 215, 254, 277, 303, 350, 352, 361, 368, 371, 374, 376, 381, 385, 388, 391, 406, 407, 410, 411, 447, 449, 452, 453, 459, 461, 485, 486, 490, 491, 500, 501, 528, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 580, 581, 585, 586, 588, 590, 591, 594, 596, 628, 715, 784, 795, 809, 835, 857, 858, 903, 935, 943, 950, 975, 983, 987, 991, 996, 1000, 1006, 1010, 1013, 1017, 1018, 1023, 1028, 1029, 1037, 1040], "neg": [3, 4, 16, 17, 25, 61, 76, 79, 87, 118, 124, 125, 129, 167, 170, 178, 200, 218, 219, 250, 251, 258, 261, 264, 268, 270, 271, 284, 306, 310, 320, 350, 385, 393, 394, 406, 410, 413, 414, 415, 417, 418, 429, 437, 441, 449, 462, 466, 479, 480, 481, 485, 528, 530, 532, 533, 534, 535, 537, 539, 541, 544, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 585, 588, 589, 592, 593, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 666, 667, 669, 670, 674, 675, 676, 677, 684, 695, 696, 701, 702, 709, 710, 712, 715, 716, 718, 719, 720, 723, 725, 726, 727, 731, 734, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 778, 779, 780, 781, 783, 786, 787, 789, 793, 794, 801, 817, 819, 824, 831, 832, 841, 844, 849, 856, 865, 874, 876, 877, 882, 886, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 933, 935, 954, 984, 986, 987, 989, 990, 991, 992, 1000, 1001, 1021, 1022, 1023, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "matrix": [3, 7, 9, 13, 14, 16, 20, 21, 22, 33, 35, 40, 42, 45, 55, 63, 71, 80, 81, 82, 83, 86, 96, 97, 98, 107, 159, 167, 173, 178, 186, 201, 205, 219, 230, 233, 234, 251, 254, 268, 277, 302, 320, 325, 326, 341, 350, 351, 352, 359, 365, 368, 374, 375, 376, 379, 381, 385, 388, 391, 392, 393, 403, 407, 408, 409, 414, 415, 416, 417, 418, 428, 429, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 451, 454, 456, 457, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 489, 493, 494, 497, 498, 499, 500, 501, 502, 505, 506, 507, 516, 518, 520, 521, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 582, 583, 585, 586, 587, 588, 590, 591, 600, 601, 602, 603, 604, 605, 606, 608, 617, 626, 627, 628, 630, 632, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 709, 710, 711, 712, 713, 715, 725, 726, 727, 730, 734, 735, 736, 737, 750, 751, 754, 755, 756, 757, 759, 760, 762, 763, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 783, 784, 788, 789, 792, 793, 794, 795, 798, 799, 809, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 867, 869, 870, 871, 873, 875, 876, 877, 878, 880, 881, 882, 883, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 914, 916, 917, 918, 919, 924, 933, 934, 935, 936, 939, 940, 941, 949, 950, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 972, 976, 978, 980, 982, 983, 987, 988, 989, 990, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1020, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "factor": [3, 16, 27, 32, 45, 47, 54, 56, 63, 95, 101, 106, 108, 130, 167, 170, 226, 229, 239, 272, 273, 284, 285, 298, 300, 301, 306, 308, 318, 320, 365, 366, 379, 385, 388, 393, 403, 405, 406, 413, 414, 416, 437, 439, 451, 466, 468, 469, 470, 471, 473, 475, 485, 501, 511, 512, 524, 529, 532, 533, 535, 537, 538, 541, 542, 543, 544, 546, 547, 558, 559, 560, 585, 588, 594, 610, 646, 647, 648, 651, 652, 653, 679, 680, 689, 716, 779, 795, 798, 799, 820, 844, 878, 892, 894, 902, 934, 935, 975, 982, 983, 989, 996, 999, 1003, 1006, 1022, 1023, 1028, 1029, 1031, 1032, 1034, 1042, 1044], "latent": [3, 16, 18, 107, 167, 303, 351, 409, 414, 416, 485, 529, 533, 535, 536, 537, 540, 541, 585, 588, 854, 985, 1006, 1021, 1022, 1023, 1030, 1033], "dirichlet": [3, 16, 167, 246, 247, 252, 256, 414, 485, 533, 535, 537, 585, 588, 793, 1006, 1022, 1023, 1028, 1033, 1034], "alloc": [3, 16, 26, 62, 167, 273, 318, 375, 379, 380, 406, 414, 440, 444, 456, 485, 533, 535, 537, 581, 585, 588, 643, 649, 657, 659, 798, 799, 801, 817, 822, 825, 975, 996, 1006, 1022, 1023, 1032, 1033, 1038, 1039, 1045], "visual": [3, 4, 9, 13, 16, 17, 21, 26, 31, 33, 44, 47, 50, 53, 58, 61, 62, 81, 92, 95, 98, 100, 106, 108, 118, 126, 128, 130, 134, 135, 160, 165, 167, 171, 173, 184, 191, 200, 202, 218, 226, 228, 231, 234, 240, 241, 244, 251, 254, 255, 257, 258, 262, 271, 277, 289, 293, 294, 299, 301, 304, 306, 310, 311, 316, 318, 326, 341, 368, 371, 375, 377, 385, 386, 403, 408, 410, 411, 412, 413, 435, 438, 442, 443, 451, 469, 493, 499, 501, 504, 507, 511, 519, 529, 531, 538, 561, 563, 568, 628, 630, 655, 686, 689, 694, 695, 697, 698, 699, 715, 723, 778, 785, 796, 797, 800, 801, 812, 813, 814, 815, 816, 817, 824, 855, 859, 863, 867, 868, 870, 874, 875, 876, 878, 900, 903, 912, 931, 981, 983, 984, 989, 990, 992, 993, 996, 1002, 1006, 1012, 1023, 1031, 1038, 1039, 1040, 1042], "stock": [3, 16, 167, 406, 408, 451, 469, 686, 1015], "market": [3, 16, 167, 406, 408, 451, 469, 686, 1010, 1015], "wikipedia": [3, 16, 25, 167, 387, 405, 406, 592, 604, 605, 633, 653, 665, 668, 679, 680, 692, 701, 702, 704, 706, 709, 713, 715, 722, 725, 726, 727, 730, 731, 734, 739, 752, 779, 781, 782, 784, 785, 788, 789, 840, 841, 846, 847, 848, 849, 876, 892, 906, 907, 978, 982, 986, 989, 998, 1002, 1021, 1028, 1035], "princip": [3, 16, 85, 88, 91, 95, 98, 100, 101, 103, 105, 108, 130, 167, 221, 234, 237, 293, 311, 318, 371, 406, 409, 418, 481, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 547, 654, 685, 686, 687, 689, 690, 824, 847, 859, 878, 934, 935, 983, 989, 1022, 1023, 1028], "eigenvector": [3, 16, 47, 87, 91, 167, 246, 406, 449, 459, 531, 532, 538, 547, 685, 686, 688, 692, 983, 1028, 1032, 1042], "end": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 377, 379, 381, 383, 391, 393, 394, 396, 397, 403, 406, 407, 409, 413, 447, 453, 465, 485, 486, 505, 506, 534, 543, 554, 555, 556, 557, 561, 562, 563, 642, 643, 644, 647, 648, 649, 650, 651, 652, 657, 658, 659, 660, 678, 679, 680, 681, 795, 798, 799, 809, 816, 819, 856, 858, 896, 906, 907, 908, 909, 939, 940, 970, 975, 978, 982, 983, 985, 986, 996, 998, 1000, 1006, 1010, 1018, 1021, 1033, 1035, 1038, 1041, 1042], "download": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 372, 374, 376, 377, 383, 384, 387, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 507, 1002, 1017, 1019, 1021, 1023, 1032, 1033, 1036, 1040, 1041, 1042], "exampl": [4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 365, 366, 368, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 389, 392, 393, 396, 399, 400, 405, 417, 418, 422, 436, 453, 458, 468, 482, 504, 505, 528, 544, 552, 569, 570, 574, 580, 589, 592, 593, 595, 598, 600, 609, 613, 617, 618, 621, 626, 635, 639, 647, 648, 651, 657, 658, 660, 664, 672, 696, 705, 711, 712, 718, 719, 720, 722, 724, 726, 727, 735, 739, 740, 743, 747, 750, 752, 759, 760, 764, 765, 767, 769, 777, 779, 787, 790, 792, 802, 803, 804, 805, 806, 807, 808, 830, 832, 834, 838, 839, 848, 849, 850, 852, 860, 861, 864, 866, 869, 880, 886, 890, 893, 899, 908, 909, 910, 911, 924, 933, 935, 937, 938, 940, 948, 949, 950, 954, 957, 974, 976, 984, 1007, 1008, 1010, 1013, 1016, 1017, 1021, 1023, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1038, 1041, 1043, 1044], "run": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 393, 394, 396, 402, 406, 408, 410, 413, 416, 417, 418, 434, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 459, 461, 464, 465, 468, 469, 528, 529, 530, 531, 532, 534, 536, 538, 539, 540, 542, 543, 545, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 579, 589, 591, 592, 593, 595, 596, 597, 599, 607, 608, 631, 637, 643, 644, 646, 648, 649, 650, 652, 653, 657, 658, 659, 660, 679, 680, 685, 686, 687, 688, 689, 690, 691, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 830, 831, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 855, 856, 857, 860, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 929, 930, 954, 957, 960, 975, 985, 987, 990, 999, 1001, 1002, 1006, 1007, 1010, 1012, 1019, 1021, 1028, 1031, 1033, 1035, 1036, 1037, 1038, 1042, 1043, 1044], "your": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 377, 378, 379, 380, 382, 383, 385, 387, 388, 391, 392, 393, 396, 400, 402, 405, 406, 407, 408, 413, 414, 417, 418, 441, 443, 500, 530, 558, 559, 599, 631, 643, 684, 795, 798, 799, 801, 809, 817, 821, 823, 929, 983, 990, 996, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1014, 1021, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "browser": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 379, 387, 996, 1045], "jupyterlit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359], "binder": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359], "notebook": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 380, 381, 385, 407, 465, 896, 1002, 1005, 1006, 1007, 1039, 1042], "introduc": [4, 79, 81, 82, 101, 148, 167, 172, 179, 184, 204, 228, 233, 236, 239, 244, 268, 321, 322, 352, 372, 375, 377, 379, 381, 383, 384, 387, 391, 393, 397, 404, 406, 408, 410, 411, 413, 414, 430, 438, 439, 440, 442, 444, 446, 456, 461, 465, 479, 480, 481, 482, 493, 501, 512, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 552, 553, 563, 564, 565, 566, 567, 578, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 655, 661, 682, 683, 685, 686, 689, 824, 842, 847, 850, 854, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 892, 896, 980, 982, 985, 988, 989, 992, 996, 998, 1000, 1001, 1012, 1019, 1028, 1029, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "differ": [4, 5, 7, 10, 12, 14, 15, 17, 21, 25, 28, 31, 32, 35, 37, 38, 44, 46, 47, 50, 54, 58, 59, 65, 66, 67, 68, 69, 71, 72, 73, 81, 86, 87, 91, 92, 93, 96, 98, 99, 101, 104, 105, 106, 112, 115, 117, 118, 121, 122, 125, 127, 132, 133, 134, 135, 138, 141, 144, 149, 151, 152, 153, 154, 157, 158, 159, 162, 164, 165, 167, 169, 170, 172, 176, 179, 180, 186, 187, 188, 189, 191, 197, 200, 201, 202, 204, 205, 206, 207, 208, 218, 221, 222, 223, 226, 229, 231, 234, 235, 236, 239, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 275, 276, 279, 282, 284, 287, 290, 291, 293, 300, 301, 305, 310, 311, 314, 316, 332, 336, 337, 345, 346, 348, 350, 351, 352, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 382, 384, 386, 388, 392, 393, 396, 400, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 431, 434, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 455, 456, 459, 461, 472, 475, 487, 490, 491, 493, 500, 501, 505, 506, 509, 511, 519, 534, 535, 536, 537, 543, 544, 546, 547, 552, 553, 560, 578, 579, 585, 586, 587, 588, 591, 608, 610, 611, 612, 616, 619, 620, 624, 628, 629, 630, 631, 635, 640, 641, 644, 646, 648, 650, 652, 655, 658, 663, 664, 665, 669, 671, 673, 674, 675, 677, 687, 689, 691, 695, 697, 698, 701, 702, 703, 704, 706, 712, 714, 715, 723, 724, 725, 726, 727, 730, 731, 733, 739, 753, 754, 755, 757, 764, 774, 778, 779, 780, 782, 783, 785, 788, 789, 791, 794, 795, 797, 798, 799, 800, 801, 804, 809, 810, 811, 812, 813, 814, 815, 817, 819, 821, 822, 825, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 848, 851, 854, 858, 863, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 883, 884, 885, 886, 887, 888, 889, 898, 899, 900, 903, 906, 907, 908, 909, 943, 950, 975, 976, 978, 979, 981, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1010, 1012, 1014, 1015, 1016, 1020, 1021, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "strategi": [4, 13, 53, 55, 59, 62, 72, 122, 127, 132, 148, 164, 165, 167, 172, 184, 189, 200, 208, 218, 231, 239, 241, 254, 262, 264, 266, 270, 271, 277, 282, 299, 304, 305, 312, 313, 314, 316, 317, 320, 352, 364, 381, 385, 392, 393, 410, 413, 414, 415, 418, 434, 435, 436, 444, 449, 459, 469, 499, 501, 509, 511, 519, 530, 535, 548, 549, 558, 559, 561, 562, 564, 565, 568, 585, 586, 588, 589, 591, 599, 624, 625, 627, 631, 642, 644, 648, 650, 652, 658, 660, 662, 670, 672, 688, 692, 701, 710, 751, 753, 791, 795, 798, 799, 801, 809, 812, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 855, 863, 868, 879, 893, 898, 900, 903, 906, 907, 908, 909, 957, 975, 976, 985, 987, 988, 989, 990, 992, 994, 996, 1000, 1001, 1002, 1006, 1016, 1021, 1023, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "leverag": [4, 8, 38, 50, 87, 218, 350, 351, 365, 366, 377, 410, 413, 873, 975, 982, 1012, 1031, 1043], "task": [4, 7, 99, 119, 120, 126, 147, 148, 160, 167, 178, 200, 216, 219, 221, 239, 258, 282, 341, 352, 365, 367, 374, 376, 377, 378, 379, 383, 384, 385, 388, 391, 392, 393, 411, 413, 414, 415, 416, 445, 458, 490, 502, 512, 589, 592, 593, 595, 596, 597, 601, 602, 603, 606, 629, 630, 643, 644, 649, 650, 657, 658, 659, 660, 671, 678, 681, 723, 725, 726, 750, 778, 780, 783, 785, 796, 800, 813, 818, 952, 953, 983, 986, 987, 988, 989, 997, 999, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1019, 1020, 1021, 1023, 1028, 1033, 1037, 1043], "highli": [4, 9, 73, 81, 82, 98, 107, 128, 184, 195, 205, 261, 264, 270, 301, 341, 351, 365, 366, 379, 381, 385, 404, 406, 410, 413, 414, 449, 459, 493, 560, 668, 689, 807, 809, 854, 982, 986, 989, 990, 992, 1000, 1001, 1005, 1006], "depend": [4, 5, 7, 13, 38, 54, 76, 100, 118, 122, 125, 126, 129, 132, 144, 148, 158, 164, 167, 168, 170, 173, 174, 176, 180, 184, 218, 222, 228, 229, 235, 239, 244, 251, 261, 262, 266, 267, 268, 284, 301, 306, 311, 318, 321, 334, 341, 345, 351, 352, 361, 365, 366, 367, 372, 379, 381, 382, 387, 388, 391, 392, 393, 394, 395, 396, 399, 400, 402, 405, 406, 408, 410, 411, 413, 414, 415, 416, 417, 435, 436, 437, 441, 443, 444, 446, 447, 449, 451, 454, 456, 457, 459, 461, 466, 481, 486, 487, 488, 490, 493, 497, 498, 499, 501, 502, 507, 531, 532, 538, 541, 548, 556, 557, 559, 585, 586, 587, 588, 599, 601, 604, 605, 608, 624, 629, 630, 635, 637, 645, 655, 656, 666, 668, 670, 673, 674, 675, 677, 684, 687, 688, 691, 692, 725, 726, 734, 737, 774, 777, 779, 780, 783, 788, 789, 793, 794, 814, 823, 840, 841, 842, 844, 846, 847, 848, 849, 850, 856, 857, 859, 871, 872, 875, 878, 892, 899, 900, 903, 907, 916, 975, 976, 978, 979, 980, 982, 983, 985, 986, 988, 989, 990, 991, 994, 998, 1000, 1001, 1002, 1012, 1019, 1021, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1043, 1044, 1045], "busi": [4, 200, 261, 387, 391, 784, 982, 986, 1010], "dai": [4, 12, 13, 157, 171, 201, 366, 376, 379, 877, 1010, 1034, 1035, 1042, 1043], "week": [4, 13, 378, 379, 394, 1010, 1042], "yearli": 4, "season": [4, 13, 157, 171, 201, 378], "perform": [4, 7, 13, 20, 25, 26, 27, 28, 33, 37, 49, 50, 54, 58, 59, 63, 65, 67, 68, 69, 71, 72, 75, 79, 87, 99, 106, 110, 112, 118, 120, 122, 124, 126, 127, 131, 132, 138, 148, 149, 153, 164, 165, 167, 170, 171, 172, 173, 176, 184, 189, 200, 202, 204, 206, 207, 208, 217, 218, 222, 223, 225, 229, 234, 237, 239, 248, 251, 254, 256, 257, 258, 259, 261, 262, 263, 266, 267, 269, 270, 272, 274, 276, 277, 279, 282, 284, 297, 303, 306, 308, 310, 312, 313, 316, 322, 324, 331, 337, 340, 341, 343, 345, 350, 352, 361, 364, 366, 367, 374, 376, 381, 382, 383, 385, 387, 388, 391, 392, 393, 395, 397, 400, 401, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 424, 428, 437, 439, 440, 441, 443, 444, 445, 447, 449, 451, 452, 456, 458, 465, 466, 479, 480, 481, 482, 491, 499, 509, 512, 528, 529, 530, 532, 534, 536, 539, 540, 541, 542, 543, 545, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 591, 598, 599, 600, 607, 608, 624, 627, 628, 635, 637, 642, 648, 651, 652, 653, 655, 661, 662, 663, 664, 665, 667, 670, 672, 673, 674, 675, 679, 680, 682, 684, 686, 687, 690, 691, 694, 700, 701, 702, 704, 705, 709, 710, 722, 725, 726, 734, 736, 738, 751, 752, 753, 774, 779, 780, 782, 783, 784, 790, 791, 792, 793, 794, 795, 798, 799, 806, 807, 809, 813, 819, 820, 821, 823, 824, 827, 830, 831, 833, 834, 835, 836, 837, 838, 839, 845, 847, 853, 854, 855, 856, 858, 859, 861, 864, 865, 867, 868, 870, 871, 872, 874, 875, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 893, 894, 896, 900, 901, 902, 903, 904, 906, 907, 908, 909, 918, 919, 959, 970, 975, 976, 978, 980, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1012, 1013, 1016, 1019, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "sklearn": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 365, 366, 367, 368, 372, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 395, 396, 397, 400, 402, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 975, 976, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "preprocess": [4, 5, 6, 10, 32, 43, 45, 50, 54, 56, 59, 63, 71, 72, 73, 74, 76, 87, 96, 107, 117, 122, 145, 149, 157, 161, 172, 176, 179, 181, 188, 189, 191, 200, 201, 206, 216, 218, 222, 230, 231, 240, 243, 258, 268, 270, 275, 287, 292, 293, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 329, 337, 340, 351, 367, 368, 371, 373, 376, 379, 384, 392, 393, 402, 403, 406, 407, 410, 413, 414, 415, 461, 462, 463, 464, 486, 564, 578, 579, 585, 586, 588, 627, 655, 656, 669, 671, 673, 675, 684, 827, 858, 859, 898, 899, 900, 901, 903, 904, 976, 982, 987, 990, 997, 1000, 1001, 1003, 1006, 1009, 1010, 1012, 1017, 1018, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "splinetransform": [4, 201, 239, 319, 873, 996, 1041, 1043, 1044], "class": [4, 8, 9, 10, 14, 17, 20, 24, 25, 26, 28, 29, 31, 35, 41, 55, 56, 57, 59, 72, 73, 91, 92, 93, 101, 105, 110, 111, 118, 120, 128, 133, 136, 149, 152, 153, 156, 160, 161, 164, 167, 170, 171, 176, 178, 190, 191, 192, 208, 212, 215, 216, 219, 222, 229, 236, 237, 239, 246, 247, 248, 254, 255, 256, 261, 263, 267, 271, 272, 277, 279, 282, 284, 287, 289, 292, 293, 294, 295, 311, 316, 320, 322, 325, 327, 328, 332, 333, 337, 338, 341, 346, 348, 350, 351, 352, 359, 367, 368, 371, 373, 374, 375, 376, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 396, 402, 404, 406, 407, 409, 411, 415, 416, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 458, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 497, 499, 500, 501, 505, 506, 507, 509, 511, 512, 516, 519, 520, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 717, 723, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 750, 751, 753, 778, 779, 780, 782, 783, 784, 785, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 923, 924, 925, 926, 927, 929, 930, 942, 943, 944, 947, 952, 954, 956, 957, 970, 975, 976, 977, 978, 980, 981, 982, 983, 985, 987, 988, 990, 993, 994, 996, 997, 999, 1002, 1007, 1008, 1010, 1012, 1016, 1019, 1021, 1023, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "extrapol": [4, 152, 179, 201, 232, 264, 877, 986, 996, 1002, 1041, 1043], "option": [4, 31, 47, 53, 104, 118, 126, 158, 165, 181, 184, 201, 239, 264, 270, 317, 350, 355, 361, 367, 373, 374, 375, 377, 379, 380, 382, 384, 385, 387, 388, 391, 393, 394, 396, 400, 406, 407, 409, 410, 411, 413, 414, 417, 430, 434, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 456, 458, 459, 460, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 684, 685, 686, 687, 689, 691, 692, 708, 710, 714, 725, 726, 731, 732, 733, 753, 754, 755, 760, 762, 763, 767, 770, 771, 772, 773, 774, 777, 779, 780, 783, 788, 789, 791, 796, 797, 798, 799, 801, 802, 804, 813, 817, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 925, 972, 975, 976, 982, 985, 986, 989, 996, 999, 1001, 1002, 1007, 1009, 1019, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "load": [4, 6, 11, 12, 13, 15, 27, 33, 47, 49, 54, 72, 73, 90, 96, 107, 117, 119, 121, 128, 129, 132, 133, 135, 146, 147, 157, 170, 171, 176, 181, 196, 197, 200, 208, 216, 231, 232, 236, 238, 239, 240, 241, 243, 251, 257, 259, 261, 266, 268, 273, 279, 284, 288, 293, 301, 302, 303, 317, 318, 320, 321, 327, 328, 329, 356, 359, 365, 368, 371, 374, 376, 382, 385, 392, 400, 405, 409, 410, 411, 413, 479, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 529, 531, 540, 838, 839, 935, 996, 1007, 1013, 1015, 1017, 1023, 1028, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "openml": [4, 13, 72, 132, 157, 170, 200, 208, 216, 218, 230, 279, 282, 302, 372, 396, 493, 1023, 1036, 1038, 1041], "repositori": [4, 8, 13, 176, 322, 372, 374, 376, 377, 379, 381, 383, 387, 394, 396, 501, 1006, 1009, 1023], "import": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 174, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 400, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 485, 492, 493, 497, 499, 500, 501, 503, 504, 505, 507, 509, 512, 518, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 576, 577, 578, 579, 580, 581, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 685, 686, 687, 688, 689, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 714, 715, 718, 719, 720, 722, 723, 724, 725, 726, 727, 730, 731, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 759, 760, 764, 765, 767, 769, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 886, 887, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 925, 930, 933, 935, 937, 938, 939, 940, 947, 948, 949, 950, 954, 957, 960, 974, 975, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 996, 997, 998, 999, 1000, 1001, 1002, 1007, 1010, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1025, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "fetch_openml": [4, 5, 13, 72, 76, 122, 132, 157, 170, 171, 172, 200, 208, 216, 218, 230, 239, 243, 279, 282, 284, 302, 312, 316, 320, 373, 383, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "bike_shar": [4, 13], "bike_sharing_demand": [4, 13, 171], "version": [4, 13, 47, 54, 56, 72, 96, 101, 112, 154, 165, 171, 172, 176, 184, 198, 201, 202, 208, 214, 216, 236, 239, 243, 282, 302, 311, 316, 317, 318, 319, 321, 322, 337, 350, 365, 368, 374, 378, 379, 380, 381, 382, 385, 387, 388, 391, 393, 394, 396, 399, 400, 405, 406, 407, 409, 411, 413, 414, 416, 417, 418, 424, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 497, 498, 499, 501, 502, 505, 506, 507, 509, 511, 519, 520, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 701, 704, 705, 710, 711, 715, 718, 719, 720, 721, 723, 724, 725, 726, 727, 730, 735, 736, 737, 738, 739, 742, 746, 747, 749, 750, 752, 753, 754, 755, 757, 762, 763, 764, 765, 774, 778, 779, 780, 781, 783, 785, 786, 787, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 808, 809, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 884, 886, 887, 888, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 916, 918, 919, 929, 930, 932, 934, 935, 942, 943, 944, 945, 946, 949, 952, 953, 954, 956, 961, 967, 972, 973, 975, 978, 980, 983, 986, 988, 990, 992, 994, 999, 1000, 1002, 1004, 1006, 1007, 1009, 1020, 1024, 1026], "2": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 138, 141, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 366, 367, 373, 374, 376, 377, 379, 381, 383, 384, 385, 386, 388, 391, 392, 393, 396, 397, 398, 399, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 456, 457, 459, 460, 461, 462, 465, 466, 468, 469, 470, 471, 472, 475, 479, 480, 481, 482, 490, 493, 497, 498, 501, 504, 505, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 578, 579, 581, 582, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 600, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 702, 703, 704, 705, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 724, 725, 726, 727, 730, 731, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 759, 760, 764, 765, 767, 769, 772, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 882, 886, 891, 892, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 913, 918, 919, 924, 932, 933, 934, 935, 937, 938, 939, 940, 947, 948, 949, 950, 951, 952, 954, 957, 959, 960, 973, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033], "as_fram": [4, 5, 13, 72, 76, 118, 122, 132, 157, 170, 171, 172, 173, 188, 189, 200, 208, 216, 218, 239, 243, 279, 284, 287, 302, 311, 312, 316, 318, 320, 321, 373, 374, 486, 487, 488, 489, 493, 497, 498, 499, 501, 502, 507, 1038, 1039, 1040, 1041, 1044], "true": [4, 5, 6, 7, 8, 10, 11, 13, 15, 17, 18, 20, 27, 31, 33, 35, 38, 45, 50, 51, 54, 55, 56, 58, 59, 61, 64, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 93, 96, 97, 98, 99, 101, 107, 110, 112, 116, 118, 122, 123, 124, 125, 127, 128, 129, 132, 133, 135, 138, 139, 140, 145, 148, 152, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 184, 185, 187, 188, 189, 191, 193, 195, 196, 197, 200, 202, 203, 204, 207, 208, 214, 215, 216, 218, 221, 224, 225, 229, 230, 233, 235, 236, 237, 238, 239, 242, 243, 246, 249, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 289, 290, 293, 297, 300, 301, 302, 303, 307, 311, 312, 313, 316, 318, 320, 321, 322, 326, 328, 329, 330, 340, 344, 345, 346, 350, 351, 352, 355, 356, 359, 361, 365, 366, 372, 374, 375, 379, 380, 381, 384, 385, 386, 388, 392, 393, 395, 397, 400, 402, 403, 404, 406, 407, 408, 410, 411, 413, 414, 415, 416, 418, 419, 420, 423, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 516, 519, 520, 521, 523, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 709, 710, 711, 712, 715, 717, 720, 722, 723, 724, 725, 726, 727, 730, 731, 734, 735, 736, 737, 738, 739, 746, 747, 748, 750, 752, 757, 763, 764, 765, 774, 778, 779, 780, 781, 782, 783, 784, 785, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 809, 813, 814, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 916, 917, 918, 919, 929, 935, 936, 947, 948, 951, 952, 956, 957, 959, 967, 972, 974, 975, 976, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 998, 999, 1000, 1001, 1002, 1006, 1012, 1016, 1017, 1019, 1020, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "df": [4, 13, 26, 28, 132, 169, 171, 179, 184, 200, 218, 251, 261, 310, 312, 351, 384, 414, 587, 588, 975, 976, 1045], "frame": [4, 13, 17, 72, 157, 170, 171, 200, 312, 374, 379, 391, 394, 486, 487, 488, 489, 493, 497, 498, 499, 501, 502, 507, 1006, 1017, 1040], "To": [4, 8, 17, 27, 28, 33, 47, 56, 58, 79, 81, 83, 87, 101, 112, 122, 125, 126, 134, 138, 149, 157, 158, 161, 164, 165, 169, 170, 176, 181, 184, 188, 200, 201, 202, 204, 208, 218, 233, 234, 236, 239, 241, 243, 251, 256, 258, 259, 261, 263, 264, 266, 268, 279, 282, 302, 306, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 347, 351, 355, 361, 365, 366, 372, 373, 377, 379, 380, 381, 383, 384, 385, 387, 391, 393, 394, 397, 400, 402, 403, 406, 407, 408, 409, 410, 411, 413, 414, 443, 445, 446, 447, 458, 461, 464, 489, 493, 499, 500, 504, 505, 528, 534, 535, 536, 538, 540, 541, 542, 543, 554, 555, 556, 557, 561, 562, 566, 594, 608, 624, 629, 643, 644, 649, 650, 653, 655, 656, 657, 658, 659, 660, 681, 697, 709, 724, 759, 781, 789, 798, 799, 820, 827, 858, 869, 874, 888, 889, 898, 899, 906, 907, 908, 909, 925, 935, 954, 973, 975, 976, 978, 981, 982, 983, 984, 986, 987, 988, 989, 992, 993, 996, 1000, 1001, 1002, 1009, 1010, 1012, 1016, 1018, 1019, 1021, 1028, 1031, 1033, 1034, 1035, 1037, 1039], "get": [4, 5, 9, 12, 17, 18, 20, 38, 49, 53, 57, 97, 101, 125, 134, 146, 149, 152, 157, 158, 164, 170, 171, 172, 173, 193, 202, 215, 218, 221, 237, 259, 262, 263, 265, 269, 272, 279, 284, 289, 297, 307, 316, 326, 329, 334, 337, 339, 342, 347, 350, 352, 355, 366, 368, 372, 373, 374, 377, 379, 380, 381, 384, 385, 386, 387, 393, 396, 400, 402, 404, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 420, 421, 422, 427, 429, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 692, 696, 718, 719, 720, 722, 728, 729, 738, 752, 759, 760, 765, 781, 784, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 913, 926, 927, 928, 934, 935, 945, 975, 981, 982, 983, 985, 986, 996, 999, 1000, 1001, 1002, 1007, 1009, 1016, 1019, 1020, 1021, 1025, 1028, 1031, 1034, 1036, 1039, 1041, 1042, 1045], "quick": [4, 101, 242, 379, 381, 385, 396, 603, 824, 986, 987, 996, 1010, 1019, 1025], "understand": [4, 9, 13, 112, 157, 167, 171, 236, 256, 259, 318, 319, 334, 341, 350, 354, 360, 361, 378, 379, 380, 385, 391, 395, 406, 413, 414, 501, 824, 855, 856, 906, 907, 908, 909, 912, 975, 976, 983, 985, 1002, 1005, 1006, 1010, 1028, 1042], "pattern": [4, 13, 17, 21, 64, 83, 91, 95, 108, 152, 164, 167, 171, 184, 204, 236, 239, 319, 350, 351, 352, 361, 376, 379, 381, 394, 403, 406, 407, 411, 413, 414, 445, 461, 463, 501, 529, 531, 538, 552, 553, 635, 705, 721, 737, 765, 784, 785, 793, 878, 978, 980, 982, 986, 987, 993, 1001, 1003, 1007, 1010, 1040], "let": [4, 5, 13, 54, 56, 65, 72, 76, 91, 96, 101, 119, 122, 125, 126, 129, 152, 158, 159, 165, 170, 171, 172, 181, 189, 200, 202, 218, 221, 225, 236, 243, 256, 261, 264, 268, 350, 352, 359, 361, 374, 379, 381, 385, 391, 403, 406, 410, 413, 414, 497, 501, 507, 531, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 678, 681, 864, 871, 872, 982, 983, 984, 985, 986, 993, 994, 996, 1001, 1002, 1010, 1019, 1021, 1038], "u": [4, 10, 11, 12, 13, 17, 18, 35, 51, 53, 57, 91, 96, 104, 122, 123, 152, 161, 169, 170, 171, 197, 201, 204, 208, 218, 222, 225, 233, 236, 242, 243, 247, 248, 252, 256, 261, 264, 268, 310, 312, 341, 350, 359, 366, 368, 374, 379, 383, 385, 387, 391, 396, 403, 406, 409, 411, 413, 414, 429, 460, 462, 479, 480, 481, 528, 534, 542, 543, 547, 549, 551, 553, 555, 557, 559, 562, 565, 567, 585, 586, 588, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 678, 681, 686, 690, 701, 717, 736, 751, 831, 832, 841, 849, 856, 878, 892, 899, 901, 904, 907, 909, 935, 978, 980, 985, 986, 993, 996, 1004, 1010, 1021, 1025, 1038], "look": [4, 5, 54, 56, 96, 99, 101, 125, 126, 152, 157, 158, 165, 170, 171, 202, 221, 225, 229, 236, 252, 256, 261, 263, 302, 350, 351, 361, 366, 367, 373, 374, 377, 379, 381, 383, 385, 387, 391, 392, 406, 409, 411, 412, 413, 414, 445, 485, 486, 554, 555, 556, 557, 561, 562, 599, 600, 628, 656, 689, 878, 906, 907, 908, 909, 982, 983, 996, 1000, 1001, 1003, 1021, 1028, 1036, 1038], "averag": [4, 13, 26, 28, 38, 40, 41, 45, 53, 61, 63, 115, 116, 121, 125, 128, 133, 134, 135, 149, 157, 171, 181, 189, 200, 207, 218, 239, 264, 266, 269, 271, 282, 306, 316, 322, 329, 350, 361, 365, 374, 376, 381, 403, 404, 408, 410, 414, 415, 417, 418, 434, 435, 438, 441, 442, 443, 444, 446, 487, 490, 491, 520, 528, 529, 530, 534, 535, 537, 538, 544, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 566, 567, 584, 591, 629, 630, 645, 655, 656, 663, 664, 666, 669, 671, 673, 674, 675, 677, 684, 697, 700, 701, 703, 704, 705, 710, 717, 718, 719, 721, 722, 724, 725, 726, 730, 731, 732, 734, 735, 736, 739, 741, 742, 744, 746, 747, 749, 752, 760, 777, 778, 779, 780, 781, 783, 784, 786, 787, 791, 792, 793, 794, 822, 844, 864, 879, 972, 976, 981, 982, 987, 990, 992, 993, 1000, 1001, 1002, 1019, 1021, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045], "per": [4, 10, 21, 35, 49, 54, 65, 92, 117, 118, 122, 157, 159, 170, 171, 200, 215, 218, 239, 243, 247, 257, 268, 270, 306, 312, 318, 345, 350, 352, 365, 374, 375, 379, 384, 385, 388, 391, 393, 404, 406, 410, 411, 412, 413, 414, 416, 443, 445, 447, 454, 458, 461, 465, 484, 497, 499, 500, 501, 505, 507, 509, 512, 520, 529, 531, 532, 533, 536, 538, 540, 546, 547, 558, 559, 566, 580, 585, 588, 607, 608, 629, 630, 638, 639, 655, 656, 663, 664, 665, 668, 670, 671, 672, 673, 675, 689, 693, 710, 713, 717, 737, 750, 754, 755, 777, 779, 793, 794, 819, 826, 827, 828, 830, 831, 834, 836, 854, 857, 863, 865, 867, 868, 871, 872, 878, 879, 896, 898, 899, 900, 901, 902, 903, 904, 923, 924, 935, 961, 975, 978, 982, 985, 986, 987, 990, 993, 1000, 1001, 1002, 1006, 1007, 1019, 1021, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1044, 1045], "hour": [4, 170, 171, 379, 385, 983, 1005], "sundai": 4, "weekend": 4, "clearli": [4, 61, 99, 171, 234, 341, 378, 379, 391, 393, 411, 413, 987, 993], "distinguish": [4, 21, 41, 81, 93, 101, 202, 258, 279, 374, 381, 393, 394, 416, 975, 986, 989, 992], "commut": [4, 13], "morn": 4, "even": [4, 13, 14, 28, 41, 43, 53, 76, 87, 99, 118, 125, 158, 170, 171, 172, 189, 200, 201, 208, 218, 225, 226, 235, 247, 267, 279, 306, 308, 310, 311, 330, 345, 350, 351, 352, 361, 367, 374, 378, 379, 380, 381, 383, 384, 387, 391, 393, 404, 405, 406, 407, 408, 410, 411, 413, 414, 416, 438, 440, 442, 443, 444, 445, 446, 456, 458, 529, 532, 554, 555, 556, 557, 561, 562, 579, 586, 591, 624, 625, 627, 636, 655, 656, 692, 697, 702, 709, 739, 757, 763, 770, 774, 777, 782, 784, 821, 858, 859, 890, 891, 906, 907, 908, 909, 935, 975, 976, 978, 980, 982, 985, 986, 989, 991, 992, 994, 996, 998, 1000, 1001, 1002, 1010, 1021, 1035, 1036, 1037, 1040, 1042], "leisur": 4, "spread": [4, 41, 223, 262, 306, 325, 326, 327, 330, 345, 365, 379, 406, 449, 459, 512, 875, 887, 895, 986], "peak": [4, 13, 28, 171, 404, 410, 1042], "middl": [4, 25, 35, 61, 101, 184, 346, 376, 993, 996], "matplotlib": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 373, 382, 386, 396, 399, 435, 499, 628, 629, 694, 695, 697, 698, 699, 801, 817, 912, 981, 1006, 1015, 1017, 1018, 1019, 1025, 1037, 1040, 1041, 1042, 1043], "pyplot": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 379, 386, 435, 499, 628, 629, 694, 695, 697, 698, 699, 801, 817, 1017, 1018, 1019, 1025, 1042], "plt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 173, 176, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 242, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 386, 435, 499, 628, 629, 694, 695, 697, 698, 699, 801, 817, 912, 993, 1017, 1018, 1019, 1025], "fig": [4, 5, 7, 8, 9, 10, 13, 15, 26, 28, 31, 35, 43, 44, 46, 54, 56, 58, 61, 65, 67, 74, 79, 81, 87, 91, 96, 101, 102, 103, 107, 112, 118, 119, 122, 125, 126, 129, 130, 132, 134, 155, 161, 164, 171, 173, 176, 180, 188, 191, 194, 195, 197, 198, 200, 201, 204, 208, 213, 215, 218, 221, 222, 223, 224, 225, 226, 230, 232, 239, 240, 251, 256, 257, 258, 261, 262, 263, 264, 267, 270, 271, 272, 282, 284, 286, 288, 289, 297, 301, 302, 306, 307, 308, 310, 311, 312, 316, 320, 321, 334, 341, 344, 345, 346, 347, 350, 351, 352, 355, 386, 1017], "ax": [4, 5, 7, 8, 9, 10, 12, 13, 15, 17, 26, 28, 31, 32, 33, 35, 41, 43, 44, 46, 54, 56, 57, 58, 65, 67, 73, 74, 76, 81, 83, 87, 91, 93, 96, 102, 103, 107, 112, 114, 117, 119, 122, 129, 130, 132, 133, 134, 155, 156, 161, 164, 169, 170, 171, 172, 173, 176, 179, 180, 183, 184, 189, 191, 192, 195, 197, 198, 200, 201, 202, 204, 205, 208, 209, 211, 213, 214, 215, 218, 221, 222, 223, 224, 225, 226, 230, 235, 239, 240, 242, 246, 248, 251, 256, 257, 258, 261, 263, 264, 265, 267, 268, 270, 271, 272, 273, 275, 279, 282, 284, 286, 287, 288, 289, 292, 294, 295, 300, 301, 302, 306, 308, 309, 310, 311, 312, 313, 316, 317, 320, 321, 333, 334, 335, 336, 338, 339, 341, 344, 345, 346, 347, 350, 351, 352, 355, 356, 381, 382, 411, 416, 435, 531, 538, 547, 628, 629, 694, 695, 697, 698, 699, 715, 801, 817, 912, 986, 989, 993, 1025, 1038, 1044], "subplot": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 31, 32, 33, 35, 40, 44, 45, 51, 52, 54, 55, 56, 57, 58, 61, 63, 66, 67, 74, 76, 80, 81, 82, 83, 86, 87, 91, 92, 93, 96, 97, 98, 99, 101, 106, 107, 112, 114, 115, 117, 118, 119, 121, 122, 126, 129, 130, 132, 133, 134, 144, 154, 156, 161, 164, 165, 170, 171, 173, 176, 180, 183, 191, 192, 194, 195, 198, 199, 200, 201, 202, 204, 208, 213, 214, 216, 218, 221, 222, 225, 226, 229, 230, 232, 234, 235, 237, 238, 239, 240, 246, 247, 248, 249, 251, 252, 256, 257, 258, 261, 263, 264, 266, 267, 268, 270, 271, 272, 274, 275, 282, 284, 286, 287, 288, 289, 292, 293, 295, 296, 297, 300, 301, 302, 303, 307, 308, 309, 310, 311, 312, 316, 320, 321, 328, 330, 334, 335, 336, 337, 341, 344, 345, 346, 347, 350, 351, 352, 355, 356, 386, 1017], "figsiz": [4, 5, 6, 10, 12, 13, 14, 15, 26, 27, 28, 31, 32, 33, 35, 40, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 74, 76, 81, 83, 86, 87, 90, 91, 92, 93, 96, 99, 100, 101, 102, 103, 106, 107, 112, 114, 115, 122, 123, 124, 125, 126, 130, 132, 133, 144, 154, 156, 160, 161, 164, 165, 170, 171, 173, 176, 179, 180, 183, 184, 190, 194, 197, 198, 199, 200, 201, 202, 204, 206, 208, 211, 214, 216, 218, 221, 222, 223, 225, 226, 229, 230, 232, 234, 237, 238, 239, 240, 246, 248, 249, 252, 256, 257, 258, 263, 264, 265, 268, 270, 271, 275, 282, 284, 286, 287, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 320, 321, 325, 327, 335, 337, 341, 342, 344, 345, 346, 347, 350, 351, 352, 912, 1017], "4": [4, 5, 6, 7, 8, 9, 10, 12, 13, 18, 20, 21, 26, 27, 28, 32, 33, 34, 35, 39, 40, 41, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 65, 66, 67, 71, 72, 73, 74, 75, 82, 83, 86, 87, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 105, 106, 112, 113, 115, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 138, 139, 145, 149, 152, 155, 157, 158, 160, 161, 164, 165, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 204, 206, 207, 208, 210, 213, 214, 218, 221, 229, 233, 234, 235, 236, 237, 238, 239, 241, 243, 246, 247, 248, 249, 251, 252, 256, 257, 258, 259, 261, 262, 263, 264, 266, 268, 269, 270, 272, 273, 275, 282, 284, 286, 288, 289, 290, 291, 294, 300, 302, 303, 306, 307, 309, 310, 312, 316, 317, 319, 321, 322, 325, 326, 327, 328, 329, 334, 336, 337, 340, 341, 342, 345, 346, 347, 350, 351, 352, 359, 361, 366, 373, 374, 376, 377, 379, 384, 385, 388, 391, 392, 393, 396, 397, 398, 399, 404, 406, 407, 408, 410, 411, 413, 414, 415, 416, 418, 424, 428, 430, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 493, 501, 509, 510, 513, 514, 515, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 578, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 611, 614, 616, 619, 624, 625, 626, 627, 628, 630, 632, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 674, 676, 677, 681, 684, 685, 686, 687, 689, 690, 695, 696, 699, 703, 704, 712, 713, 722, 723, 730, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 752, 764, 765, 777, 778, 784, 785, 786, 787, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 826, 827, 828, 829, 832, 833, 834, 835, 837, 842, 846, 847, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 886, 890, 891, 892, 896, 898, 899, 901, 902, 904, 906, 907, 908, 909, 924, 932, 934, 935, 937, 939, 940, 942, 943, 950, 954, 957, 975, 976, 979, 980, 981, 982, 984, 986, 987, 988, 989, 996, 997, 1000, 1001, 1004, 1009, 1012, 1016, 1017, 1018, 1019, 1021, 1024, 1026, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1041, 1042, 1043], "average_week_demand": 4, "groupbi": [4, 74, 171, 208, 218], "weekdai": [4, 13, 171], "count": [4, 13, 15, 26, 28, 42, 50, 54, 71, 72, 93, 133, 134, 170, 171, 200, 202, 233, 243, 270, 279, 284, 317, 318, 351, 352, 359, 374, 376, 383, 388, 393, 394, 404, 405, 406, 411, 413, 414, 443, 446, 486, 533, 541, 578, 585, 586, 587, 588, 591, 601, 614, 637, 694, 702, 712, 715, 725, 726, 734, 750, 779, 780, 782, 783, 833, 837, 838, 839, 847, 850, 861, 910, 912, 937, 951, 975, 978, 982, 986, 988, 989, 996, 1002, 1010, 1021, 1028, 1031, 1033, 1036, 1037, 1039, 1040], "mean": [4, 5, 8, 11, 13, 14, 25, 26, 28, 35, 37, 38, 41, 43, 45, 51, 54, 55, 56, 69, 72, 80, 81, 82, 83, 87, 93, 96, 99, 100, 101, 103, 104, 112, 114, 115, 118, 121, 122, 125, 126, 132, 133, 134, 139, 148, 149, 152, 157, 159, 161, 164, 167, 170, 171, 180, 182, 189, 191, 193, 196, 200, 202, 206, 207, 209, 215, 216, 217, 218, 224, 226, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 246, 247, 248, 249, 251, 252, 257, 258, 261, 262, 263, 264, 266, 268, 269, 270, 271, 272, 273, 275, 276, 279, 282, 284, 295, 306, 309, 311, 312, 313, 316, 319, 322, 328, 337, 340, 341, 345, 347, 349, 350, 352, 353, 361, 365, 371, 373, 374, 376, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 397, 403, 404, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 429, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 485, 498, 499, 501, 503, 509, 516, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 585, 586, 587, 588, 591, 594, 599, 603, 604, 605, 606, 607, 608, 610, 619, 624, 625, 627, 629, 630, 631, 632, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 681, 685, 686, 687, 688, 689, 690, 691, 692, 701, 702, 704, 706, 709, 710, 713, 714, 720, 722, 725, 726, 727, 732, 733, 734, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 753, 770, 774, 775, 777, 779, 780, 781, 783, 784, 786, 787, 788, 789, 791, 793, 794, 795, 798, 799, 801, 809, 813, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 844, 845, 846, 848, 849, 851, 852, 854, 855, 856, 857, 859, 860, 862, 863, 867, 868, 870, 874, 876, 878, 879, 884, 886, 887, 889, 891, 893, 894, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 914, 918, 919, 921, 960, 961, 967, 971, 975, 976, 977, 980, 982, 983, 985, 988, 989, 990, 991, 993, 994, 999, 1000, 1001, 1002, 1006, 1010, 1016, 1019, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "plot": [4, 5, 6, 11, 12, 13, 15, 17, 26, 27, 28, 30, 32, 33, 34, 36, 37, 38, 41, 43, 44, 46, 55, 56, 57, 59, 60, 61, 62, 63, 66, 69, 73, 74, 76, 80, 81, 82, 87, 89, 94, 96, 99, 104, 105, 106, 107, 111, 112, 114, 115, 116, 117, 119, 124, 125, 127, 129, 130, 131, 136, 139, 141, 144, 145, 147, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 167, 168, 169, 170, 172, 173, 174, 176, 178, 182, 183, 185, 187, 188, 189, 190, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 210, 212, 213, 215, 217, 218, 219, 223, 224, 225, 226, 228, 229, 232, 233, 235, 237, 238, 243, 244, 246, 247, 248, 250, 252, 254, 255, 256, 261, 262, 264, 266, 267, 271, 272, 273, 275, 277, 279, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301, 302, 306, 307, 308, 309, 310, 311, 313, 317, 320, 321, 322, 326, 327, 330, 332, 333, 337, 338, 339, 342, 343, 344, 345, 346, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 368, 379, 382, 388, 391, 395, 396, 401, 404, 406, 408, 410, 412, 413, 435, 438, 443, 447, 453, 461, 468, 493, 498, 499, 501, 509, 512, 516, 520, 550, 554, 557, 559, 561, 562, 566, 567, 607, 619, 628, 629, 630, 654, 655, 669, 673, 694, 695, 697, 698, 699, 700, 715, 723, 731, 757, 778, 780, 783, 784, 785, 795, 801, 812, 817, 819, 820, 821, 822, 825, 836, 840, 856, 859, 871, 872, 873, 875, 878, 898, 900, 903, 906, 907, 912, 979, 980, 982, 983, 985, 986, 989, 990, 992, 1000, 1001, 1002, 1006, 1007, 1016, 1017, 1019, 1023, 1029, 1031, 1032, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "_": [4, 5, 7, 8, 9, 11, 12, 13, 15, 21, 26, 27, 28, 31, 33, 34, 41, 44, 51, 54, 56, 59, 64, 68, 71, 83, 91, 93, 96, 101, 102, 104, 106, 115, 116, 117, 144, 152, 157, 158, 159, 169, 170, 171, 173, 176, 179, 183, 184, 185, 187, 188, 189, 192, 197, 198, 200, 202, 204, 213, 214, 217, 222, 225, 230, 235, 239, 243, 256, 261, 263, 264, 265, 267, 268, 270, 279, 287, 292, 295, 303, 308, 311, 312, 313, 317, 320, 321, 322, 326, 327, 336, 341, 345, 350, 352, 356, 381, 385, 393, 411, 413, 414, 443, 529, 530, 531, 532, 533, 535, 536, 537, 540, 544, 563, 594, 649, 650, 660, 681, 685, 686, 687, 688, 693, 695, 697, 760, 795, 801, 809, 817, 842, 850, 871, 872, 879, 976, 982, 983, 986, 988, 989, 990, 993, 994, 996, 1001, 1002, 1019, 1035], "hourli": [4, 170], "xtick": [4, 6, 8, 11, 31, 35, 41, 45, 47, 51, 52, 53, 59, 60, 63, 83, 86, 99, 122, 123, 124, 154, 155, 156, 160, 183, 190, 196, 213, 229, 237, 247, 248, 249, 252, 260, 261, 275, 288, 297, 303, 312, 325, 337, 340, 342, 343, 694, 1017], "24": [4, 5, 13, 67, 132, 136, 167, 171, 184, 284, 315, 316, 323, 325, 326, 350, 383, 396, 406, 413, 414, 434, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 457, 459, 461, 466, 467, 468, 469, 470, 471, 472, 473, 486, 487, 488, 489, 493, 501, 512, 513, 514, 515, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 540, 541, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 578, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 610, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 695, 696, 697, 699, 705, 711, 723, 742, 749, 793, 794, 795, 798, 799, 809, 816, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 859, 861, 862, 863, 864, 867, 868, 870, 872, 873, 874, 875, 876, 878, 888, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 929, 930, 961, 967, 975, 993, 996, 1004, 1024, 1026, 1028, 1036, 1037, 1038, 1039, 1041], "rang": [4, 5, 6, 7, 8, 10, 12, 17, 18, 20, 21, 26, 27, 28, 33, 34, 38, 39, 41, 43, 47, 48, 49, 51, 52, 56, 61, 62, 64, 65, 66, 79, 80, 82, 83, 112, 114, 115, 116, 119, 125, 131, 144, 148, 153, 170, 171, 176, 184, 189, 190, 194, 198, 200, 201, 204, 207, 208, 216, 218, 222, 224, 232, 233, 238, 239, 246, 248, 251, 252, 256, 260, 261, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 282, 288, 294, 297, 303, 306, 311, 312, 316, 320, 321, 326, 337, 345, 350, 351, 356, 359, 366, 373, 374, 376, 379, 381, 385, 388, 393, 400, 406, 410, 413, 416, 437, 458, 466, 468, 469, 470, 471, 472, 473, 475, 478, 488, 491, 492, 511, 524, 538, 550, 551, 556, 557, 560, 585, 586, 588, 626, 629, 635, 637, 645, 646, 666, 668, 673, 677, 689, 709, 727, 742, 784, 824, 830, 844, 846, 848, 849, 854, 868, 875, 876, 877, 883, 884, 887, 888, 891, 892, 934, 935, 954, 975, 982, 986, 990, 1000, 1007, 1010, 1015, 1016, 1017, 1019, 1033, 1034, 1035, 1036, 1038, 1041, 1044], "7": [4, 5, 6, 8, 12, 13, 14, 15, 17, 20, 27, 31, 33, 35, 40, 43, 45, 47, 54, 55, 56, 57, 61, 65, 66, 68, 72, 73, 75, 81, 83, 99, 112, 115, 125, 127, 128, 132, 133, 149, 161, 169, 170, 171, 173, 176, 181, 182, 199, 200, 201, 202, 207, 218, 221, 229, 234, 235, 241, 243, 246, 247, 250, 251, 256, 261, 265, 267, 268, 272, 274, 279, 282, 284, 286, 289, 290, 292, 302, 303, 306, 310, 316, 319, 320, 321, 325, 326, 328, 329, 334, 341, 345, 346, 350, 351, 352, 361, 374, 376, 377, 383, 384, 385, 396, 398, 399, 404, 410, 411, 413, 414, 415, 436, 441, 445, 447, 448, 449, 450, 459, 468, 469, 488, 529, 530, 531, 532, 533, 535, 541, 558, 559, 585, 588, 597, 624, 625, 627, 644, 646, 655, 658, 689, 696, 704, 718, 719, 720, 722, 724, 740, 741, 742, 746, 747, 749, 781, 786, 787, 790, 793, 796, 797, 802, 805, 812, 813, 816, 821, 824, 828, 838, 839, 847, 856, 857, 870, 871, 893, 894, 935, 938, 939, 950, 975, 976, 981, 982, 984, 986, 987, 989, 990, 992, 996, 1000, 1001, 1004, 1012, 1016, 1019, 1024, 1026, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1041], "xticklabel": [4, 10, 122, 171, 312], "sun": [4, 171, 1036, 1041, 1042], "mon": [4, 171], "tue": [4, 171, 1034], "wed": [4, 171], "thu": [4, 5, 25, 26, 27, 28, 41, 54, 56, 61, 79, 83, 99, 101, 115, 117, 118, 120, 122, 145, 152, 157, 158, 171, 184, 188, 189, 200, 202, 218, 229, 235, 240, 248, 259, 261, 266, 267, 268, 287, 313, 316, 319, 355, 361, 365, 366, 374, 381, 385, 391, 393, 404, 406, 410, 411, 413, 414, 416, 417, 434, 436, 460, 512, 524, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 600, 603, 607, 619, 624, 629, 630, 640, 642, 655, 674, 702, 715, 721, 784, 791, 797, 802, 804, 816, 829, 832, 867, 898, 977, 978, 979, 980, 981, 982, 983, 986, 987, 992, 993, 994, 996, 998, 999, 1000, 1001, 1007, 1009, 1010, 1028, 1030, 1034, 1036, 1037, 1038, 1040, 1044], "fri": [4, 171, 374], "sat": [4, 171, 414], "xlabel": [4, 8, 9, 13, 25, 26, 27, 28, 34, 38, 42, 62, 79, 80, 82, 83, 86, 87, 91, 98, 104, 113, 114, 116, 122, 123, 124, 125, 126, 127, 131, 135, 138, 139, 144, 145, 148, 152, 153, 154, 155, 157, 158, 159, 170, 179, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 200, 202, 203, 205, 207, 209, 210, 214, 218, 233, 235, 237, 239, 256, 260, 261, 265, 266, 270, 271, 274, 275, 286, 287, 290, 291, 312, 313, 334, 336, 337, 340, 350, 356, 357, 358, 628], "ylabel": [4, 8, 9, 13, 25, 26, 27, 28, 34, 38, 62, 79, 80, 82, 83, 86, 87, 91, 98, 104, 113, 114, 116, 123, 124, 125, 126, 127, 131, 135, 138, 139, 144, 145, 148, 152, 153, 154, 155, 157, 158, 159, 170, 179, 182, 183, 184, 185, 187, 188, 189, 190, 193, 194, 200, 202, 203, 205, 207, 209, 210, 218, 233, 235, 237, 256, 260, 261, 264, 265, 266, 270, 271, 274, 275, 287, 313, 334, 337, 340, 350, 356, 357, 358, 628], "number": [4, 5, 7, 8, 10, 12, 13, 14, 20, 21, 26, 27, 28, 33, 34, 37, 39, 40, 42, 44, 45, 47, 48, 49, 50, 51, 54, 55, 56, 58, 62, 63, 64, 68, 69, 71, 72, 73, 74, 76, 83, 86, 87, 92, 93, 96, 98, 100, 101, 104, 112, 113, 115, 118, 120, 121, 123, 124, 125, 126, 128, 132, 134, 145, 146, 149, 160, 161, 165, 167, 170, 171, 176, 184, 189, 199, 200, 201, 202, 207, 208, 214, 215, 216, 217, 218, 221, 229, 233, 237, 239, 240, 246, 247, 249, 251, 252, 255, 256, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 279, 284, 286, 290, 291, 306, 308, 309, 312, 316, 317, 318, 319, 320, 321, 322, 329, 337, 342, 345, 351, 352, 355, 359, 361, 366, 367, 371, 373, 374, 375, 376, 377, 379, 382, 383, 385, 386, 387, 388, 391, 392, 393, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 578, 579, 580, 581, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 700, 701, 702, 704, 709, 710, 711, 713, 715, 717, 720, 724, 725, 726, 727, 730, 731, 734, 736, 748, 751, 770, 774, 777, 778, 779, 780, 781, 782, 783, 784, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 918, 919, 922, 934, 935, 938, 939, 954, 957, 960, 961, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1003, 1006, 1007, 1009, 1012, 1019, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "rental": [4, 13, 171, 993], "target": [4, 6, 13, 18, 20, 27, 31, 33, 34, 46, 53, 70, 75, 77, 87, 91, 100, 103, 105, 113, 120, 121, 122, 125, 126, 129, 131, 132, 133, 135, 141, 144, 147, 149, 152, 154, 157, 158, 165, 167, 169, 170, 171, 172, 179, 183, 184, 193, 196, 200, 202, 204, 205, 208, 209, 222, 230, 232, 233, 234, 235, 238, 239, 240, 248, 255, 259, 262, 264, 266, 267, 270, 271, 279, 282, 284, 287, 292, 295, 296, 301, 305, 306, 314, 317, 318, 320, 322, 325, 326, 329, 330, 333, 334, 337, 341, 343, 344, 350, 351, 356, 357, 358, 359, 361, 365, 367, 368, 371, 372, 373, 374, 375, 376, 381, 383, 384, 387, 388, 392, 395, 406, 410, 413, 416, 430, 434, 435, 436, 439, 442, 461, 462, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 505, 507, 517, 521, 528, 529, 531, 533, 534, 536, 539, 540, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 570, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 694, 695, 697, 698, 699, 704, 705, 706, 709, 710, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 731, 734, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 778, 779, 780, 781, 783, 784, 785, 786, 787, 790, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 845, 847, 848, 849, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 882, 887, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 918, 948, 949, 950, 977, 978, 979, 982, 983, 986, 990, 993, 994, 1000, 1001, 1002, 1007, 1009, 1010, 1012, 1017, 1019, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "absolut": [4, 13, 76, 100, 122, 149, 170, 200, 202, 206, 218, 381, 406, 408, 410, 411, 413, 414, 415, 416, 417, 441, 447, 453, 454, 528, 534, 539, 542, 543, 545, 546, 547, 555, 557, 558, 559, 562, 585, 587, 588, 590, 594, 599, 616, 624, 629, 643, 646, 647, 649, 651, 653, 668, 669, 671, 673, 675, 679, 680, 701, 714, 718, 732, 733, 741, 742, 744, 749, 751, 753, 764, 791, 797, 801, 812, 815, 822, 824, 836, 838, 839, 843, 862, 867, 870, 883, 907, 909, 972, 982, 983, 996, 1000, 1002, 1019, 1020, 1029, 1034, 1039, 1040, 1041, 1042], "basi": [4, 6, 14, 101, 152, 157, 159, 201, 302, 319, 337, 341, 371, 377, 380, 406, 411, 413, 449, 531, 619, 629, 636, 688, 877, 984, 996, 1001, 1008, 1016, 1017, 1020, 1023, 1036, 1038, 1041], "max": [4, 8, 10, 11, 12, 13, 18, 20, 26, 28, 32, 41, 45, 53, 59, 63, 68, 73, 78, 83, 84, 96, 99, 107, 112, 114, 121, 130, 138, 140, 141, 144, 145, 149, 154, 156, 157, 165, 167, 170, 182, 187, 188, 189, 193, 195, 202, 203, 206, 214, 216, 218, 224, 233, 237, 259, 260, 261, 272, 274, 282, 284, 286, 290, 291, 297, 300, 302, 306, 308, 309, 311, 319, 328, 330, 343, 346, 365, 406, 408, 411, 466, 467, 468, 469, 470, 471, 472, 473, 474, 509, 533, 552, 553, 554, 555, 556, 557, 560, 561, 562, 603, 624, 628, 629, 645, 646, 666, 669, 671, 677, 688, 689, 693, 696, 701, 702, 737, 753, 788, 789, 795, 855, 856, 867, 868, 870, 877, 884, 885, 906, 907, 908, 909, 954, 982, 984, 989, 996, 1000, 1001, 1019, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "977": [4, 13, 410], "rescal": [4, 47, 48, 56, 101, 181, 188, 224, 239, 306, 347, 408, 418, 466, 467, 468, 469, 470, 471, 472, 473, 530, 535, 643, 646, 649, 870, 876, 900, 901, 902, 903, 904, 986, 996, 1020, 1032, 1033], "variabl": [4, 9, 11, 12, 13, 17, 38, 71, 115, 119, 122, 125, 126, 140, 141, 144, 149, 159, 160, 164, 165, 171, 172, 176, 184, 189, 200, 204, 205, 218, 223, 239, 252, 261, 264, 271, 279, 282, 311, 312, 313, 361, 365, 367, 374, 376, 377, 379, 381, 383, 384, 387, 393, 402, 406, 407, 408, 409, 411, 413, 414, 415, 447, 479, 480, 481, 484, 496, 498, 505, 512, 529, 531, 533, 538, 541, 550, 556, 557, 601, 603, 604, 605, 637, 647, 648, 651, 652, 658, 679, 680, 692, 706, 743, 796, 797, 800, 802, 803, 804, 805, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 823, 826, 830, 831, 861, 872, 875, 879, 887, 899, 975, 976, 978, 982, 985, 986, 987, 988, 989, 991, 993, 994, 996, 1000, 1002, 1006, 1007, 1009, 1012, 1013, 1015, 1017, 1028, 1033, 1036, 1038, 1041, 1043], "rel": [4, 6, 8, 18, 21, 28, 56, 62, 101, 119, 157, 173, 176, 180, 200, 218, 249, 290, 291, 307, 317, 320, 337, 341, 350, 351, 374, 378, 381, 387, 393, 404, 406, 410, 413, 414, 416, 437, 440, 444, 446, 456, 518, 521, 528, 531, 534, 538, 554, 555, 556, 557, 561, 562, 563, 601, 646, 655, 656, 668, 669, 671, 687, 691, 725, 743, 795, 798, 799, 801, 809, 817, 822, 825, 838, 839, 843, 855, 856, 867, 868, 878, 894, 898, 899, 900, 903, 905, 906, 907, 908, 909, 982, 983, 986, 988, 989, 990, 992, 1009, 1017], "so": [4, 9, 12, 13, 17, 18, 43, 49, 56, 57, 62, 66, 82, 118, 121, 122, 124, 131, 152, 157, 170, 172, 176, 180, 200, 201, 229, 236, 239, 261, 279, 284, 290, 291, 294, 301, 302, 307, 312, 313, 317, 328, 337, 350, 352, 359, 361, 365, 366, 367, 373, 374, 378, 379, 381, 383, 384, 385, 387, 388, 393, 397, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 419, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 493, 505, 506, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 692, 702, 705, 713, 722, 737, 752, 784, 793, 794, 795, 798, 799, 801, 802, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 888, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 935, 952, 961, 975, 976, 978, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 992, 996, 998, 999, 1000, 1001, 1006, 1007, 1010, 1019, 1020, 1021, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1044, 1045], "error": [4, 5, 7, 13, 14, 18, 28, 76, 79, 80, 82, 100, 106, 111, 115, 118, 119, 122, 126, 136, 149, 152, 164, 167, 170, 184, 189, 196, 200, 202, 206, 207, 214, 218, 232, 235, 236, 252, 254, 257, 261, 262, 266, 275, 277, 279, 290, 291, 320, 336, 345, 350, 351, 376, 377, 379, 381, 382, 383, 384, 388, 391, 393, 397, 400, 404, 405, 406, 407, 408, 410, 411, 413, 414, 415, 434, 440, 441, 444, 446, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 493, 500, 512, 521, 528, 530, 531, 534, 535, 539, 540, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 578, 579, 585, 587, 588, 589, 591, 592, 593, 595, 596, 597, 603, 607, 608, 626, 629, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 685, 686, 687, 689, 690, 693, 695, 698, 699, 706, 709, 717, 718, 719, 723, 736, 739, 740, 741, 742, 743, 744, 746, 747, 749, 752, 760, 774, 778, 784, 785, 786, 787, 795, 796, 797, 798, 799, 801, 802, 804, 809, 813, 817, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 845, 846, 848, 849, 850, 853, 855, 856, 858, 859, 861, 863, 864, 865, 870, 871, 872, 877, 878, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 916, 917, 918, 919, 922, 949, 970, 973, 975, 976, 977, 979, 980, 981, 983, 987, 990, 994, 996, 1000, 1001, 1002, 1008, 1019, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "easili": [4, 9, 32, 91, 146, 173, 203, 216, 234, 236, 240, 243, 261, 263, 270, 289, 308, 379, 381, 393, 394, 407, 413, 414, 416, 446, 980, 982, 983, 996, 1000, 1001, 1002, 1013, 1016, 1021, 1034], "interpret": [4, 28, 149, 159, 167, 168, 169, 171, 174, 200, 201, 216, 218, 255, 261, 263, 264, 303, 307, 310, 318, 350, 352, 365, 377, 379, 380, 385, 387, 388, 393, 395, 404, 406, 407, 412, 414, 449, 461, 462, 464, 493, 538, 569, 608, 636, 640, 650, 669, 670, 688, 689, 692, 698, 725, 749, 754, 755, 779, 788, 789, 801, 810, 821, 822, 824, 827, 859, 871, 878, 954, 980, 982, 986, 987, 993, 996, 1002, 1006, 1012, 1020, 1028, 1029, 1033, 1036, 1041, 1042, 1043], "fraction": [4, 26, 28, 123, 125, 200, 208, 218, 345, 351, 404, 410, 413, 435, 436, 446, 447, 453, 454, 512, 524, 554, 555, 556, 557, 561, 562, 563, 587, 590, 599, 663, 664, 665, 668, 673, 674, 675, 700, 718, 719, 720, 730, 790, 792, 797, 801, 822, 823, 837, 865, 900, 901, 902, 906, 907, 908, 909, 952, 982, 986, 989, 993, 994, 996, 1001, 1002, 1007, 1029, 1030, 1031, 1042], "maximum": [4, 8, 11, 28, 34, 38, 58, 79, 80, 81, 82, 83, 98, 112, 117, 118, 121, 123, 153, 159, 167, 178, 188, 219, 239, 271, 286, 290, 291, 297, 306, 332, 348, 351, 355, 357, 358, 365, 384, 385, 392, 393, 403, 404, 406, 408, 409, 411, 413, 414, 416, 417, 418, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 451, 454, 456, 458, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 479, 480, 481, 495, 506, 508, 509, 510, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 580, 581, 594, 607, 624, 628, 629, 632, 634, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 671, 673, 674, 675, 676, 679, 680, 682, 683, 684, 685, 686, 687, 689, 690, 691, 713, 740, 777, 793, 795, 798, 799, 801, 809, 816, 822, 847, 854, 855, 856, 862, 863, 867, 868, 870, 873, 874, 875, 877, 886, 887, 892, 893, 894, 895, 898, 899, 903, 906, 907, 908, 909, 910, 912, 915, 922, 975, 981, 982, 983, 985, 986, 988, 989, 990, 992, 996, 1000, 1001, 1002, 1020, 1035, 1036, 1038, 1039, 1042, 1043], "fit": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 22, 25, 26, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 167, 169, 170, 171, 172, 173, 176, 178, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 224, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 279, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 300, 301, 302, 303, 305, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 347, 350, 351, 355, 356, 357, 358, 359, 365, 367, 368, 371, 374, 376, 379, 382, 384, 385, 388, 391, 393, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 422, 424, 428, 429, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 498, 506, 507, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 574, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 691, 694, 695, 697, 698, 699, 708, 719, 731, 746, 784, 793, 794, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 927, 943, 944, 946, 954, 970, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "method": [4, 8, 13, 18, 20, 21, 25, 26, 27, 28, 37, 38, 42, 50, 51, 54, 55, 57, 58, 59, 62, 66, 69, 70, 77, 80, 81, 85, 88, 96, 99, 101, 105, 106, 107, 110, 112, 117, 119, 120, 126, 132, 144, 149, 164, 176, 187, 189, 201, 208, 217, 220, 222, 227, 229, 235, 236, 239, 243, 245, 253, 263, 268, 270, 279, 284, 290, 291, 293, 306, 310, 313, 316, 318, 319, 350, 351, 352, 359, 361, 365, 366, 367, 368, 371, 376, 377, 379, 380, 381, 385, 386, 388, 391, 392, 395, 397, 400, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 456, 459, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 501, 509, 511, 519, 522, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 707, 708, 727, 728, 731, 732, 737, 738, 759, 764, 765, 770, 774, 779, 784, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 886, 887, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 921, 935, 942, 943, 944, 945, 946, 947, 952, 955, 970, 971, 974, 975, 976, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1006, 1010, 1012, 1016, 1018, 1019, 1021, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "minim": [4, 12, 13, 58, 67, 79, 80, 125, 152, 160, 179, 196, 198, 200, 202, 204, 208, 218, 221, 232, 233, 246, 251, 262, 270, 271, 306, 316, 319, 334, 341, 345, 355, 368, 378, 379, 382, 387, 391, 393, 404, 406, 408, 411, 413, 437, 438, 442, 443, 447, 460, 535, 537, 544, 554, 555, 556, 557, 561, 562, 606, 607, 608, 638, 643, 646, 654, 655, 664, 668, 669, 671, 675, 676, 684, 689, 691, 692, 744, 776, 845, 847, 856, 874, 886, 892, 906, 907, 908, 909, 977, 982, 983, 986, 989, 990, 996, 998, 999, 1000, 1001, 1006, 1008, 1019, 1020, 1023, 1032, 1037, 1038], "squar": [4, 5, 13, 62, 72, 80, 81, 82, 85, 88, 97, 107, 115, 126, 128, 149, 152, 157, 167, 170, 178, 179, 181, 184, 189, 196, 200, 202, 205, 210, 217, 218, 219, 232, 233, 235, 249, 275, 310, 318, 319, 321, 334, 350, 371, 376, 379, 385, 388, 393, 406, 408, 409, 411, 412, 413, 417, 418, 429, 437, 439, 440, 441, 443, 444, 446, 447, 454, 456, 457, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 498, 528, 534, 536, 538, 540, 544, 546, 549, 551, 553, 555, 556, 557, 559, 562, 565, 567, 587, 588, 589, 592, 593, 595, 596, 597, 601, 602, 603, 606, 608, 612, 619, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 679, 680, 682, 683, 684, 685, 687, 689, 691, 693, 706, 718, 719, 720, 746, 747, 754, 755, 759, 765, 766, 781, 786, 787, 824, 831, 832, 840, 841, 844, 846, 848, 849, 856, 859, 878, 898, 899, 901, 903, 904, 905, 907, 909, 933, 959, 972, 977, 979, 980, 989, 990, 994, 1000, 1002, 1008, 1019, 1020, 1023, 1028, 1031, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "estim": [4, 6, 7, 8, 9, 10, 11, 12, 13, 25, 27, 28, 31, 34, 35, 38, 39, 45, 46, 50, 55, 56, 57, 58, 59, 62, 64, 72, 73, 75, 84, 86, 87, 96, 97, 98, 104, 106, 111, 112, 117, 118, 119, 121, 123, 125, 129, 132, 133, 134, 135, 136, 138, 139, 147, 148, 149, 151, 152, 157, 159, 162, 163, 164, 166, 169, 170, 178, 181, 184, 188, 189, 195, 200, 202, 204, 205, 207, 208, 217, 218, 219, 228, 229, 230, 235, 241, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 258, 259, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 277, 278, 280, 282, 284, 285, 291, 298, 306, 308, 319, 320, 322, 340, 341, 345, 351, 352, 356, 365, 366, 367, 368, 371, 377, 379, 382, 383, 386, 387, 388, 389, 396, 397, 400, 401, 404, 406, 409, 411, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 492, 493, 495, 498, 499, 521, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 576, 577, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 684, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 704, 705, 708, 709, 710, 713, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 778, 779, 780, 781, 783, 784, 785, 786, 787, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 809, 811, 813, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 886, 887, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 917, 918, 919, 921, 923, 924, 927, 929, 930, 931, 942, 943, 944, 946, 954, 970, 974, 981, 983, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1007, 1008, 1010, 1012, 1013, 1015, 1017, 1019, 1020, 1021, 1022, 1023, 1025, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "condit": [4, 12, 13, 26, 28, 83, 120, 125, 167, 168, 170, 174, 189, 202, 205, 218, 236, 264, 319, 359, 385, 391, 395, 403, 404, 406, 408, 411, 413, 415, 448, 461, 468, 469, 470, 475, 493, 510, 520, 521, 533, 536, 537, 538, 540, 542, 544, 546, 547, 559, 624, 629, 630, 640, 647, 648, 649, 651, 652, 653, 667, 669, 670, 671, 672, 679, 680, 684, 694, 709, 714, 715, 732, 733, 791, 833, 834, 835, 836, 837, 856, 859, 862, 871, 872, 875, 879, 935, 980, 982, 983, 984, 986, 988, 989, 991, 996, 1002, 1006, 1019, 1023, 1029, 1031, 1032, 1033, 1035, 1036, 1038, 1040, 1042, 1043, 1044], "median": [4, 13, 38, 72, 76, 81, 82, 125, 164, 165, 170, 202, 206, 217, 231, 239, 306, 317, 319, 320, 374, 408, 413, 415, 437, 451, 455, 458, 471, 549, 551, 555, 562, 594, 624, 627, 632, 667, 668, 676, 718, 749, 845, 876, 888, 907, 909, 976, 996, 1002, 1031, 1032], "nevertheless": [4, 173, 413], "measur": [4, 7, 8, 10, 11, 13, 20, 26, 38, 39, 50, 59, 61, 62, 97, 115, 116, 125, 128, 135, 149, 152, 157, 167, 169, 170, 171, 176, 189, 194, 199, 200, 204, 206, 218, 254, 259, 261, 267, 268, 274, 277, 311, 341, 350, 351, 365, 374, 376, 381, 385, 393, 403, 405, 408, 410, 411, 412, 413, 414, 446, 449, 459, 495, 512, 535, 537, 544, 548, 554, 555, 556, 557, 560, 561, 562, 601, 604, 605, 608, 624, 628, 655, 687, 689, 695, 699, 701, 702, 704, 706, 709, 710, 713, 714, 717, 721, 722, 723, 725, 727, 732, 733, 735, 736, 739, 743, 751, 752, 753, 778, 779, 780, 782, 783, 785, 788, 791, 819, 821, 824, 844, 875, 887, 906, 907, 908, 909, 976, 982, 984, 989, 991, 992, 994, 1000, 1002, 1016, 1019, 1028, 1031, 1033, 1034, 1036, 1038], "test": [4, 6, 8, 10, 11, 13, 17, 25, 26, 27, 28, 32, 33, 34, 71, 72, 86, 101, 112, 115, 117, 118, 119, 120, 123, 124, 125, 126, 127, 138, 141, 143, 145, 148, 150, 152, 153, 167, 169, 170, 171, 172, 173, 176, 184, 189, 195, 196, 200, 201, 202, 204, 207, 208, 215, 216, 218, 225, 230, 235, 236, 238, 248, 254, 255, 256, 259, 260, 261, 262, 263, 265, 266, 268, 269, 271, 272, 273, 277, 282, 287, 292, 293, 300, 302, 308, 311, 312, 313, 329, 337, 345, 352, 361, 365, 366, 373, 374, 376, 382, 383, 384, 385, 391, 392, 393, 395, 396, 399, 401, 402, 404, 407, 408, 411, 413, 414, 415, 416, 423, 425, 429, 432, 433, 434, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 486, 490, 494, 495, 499, 501, 521, 528, 534, 536, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 589, 591, 592, 593, 595, 596, 597, 599, 601, 602, 603, 605, 606, 607, 608, 624, 625, 627, 632, 633, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 709, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 845, 848, 849, 855, 856, 858, 883, 884, 886, 887, 888, 889, 893, 894, 896, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 927, 929, 930, 981, 982, 985, 986, 989, 990, 994, 996, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1013, 1016, 1017, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "discuss": [4, 54, 59, 149, 170, 189, 221, 226, 264, 279, 350, 361, 367, 374, 376, 379, 384, 385, 387, 391, 393, 394, 406, 408, 412, 413, 416, 495, 679, 680, 840, 841, 846, 848, 849, 976, 980, 982, 983, 986, 989, 996, 1003, 1007, 1031], "choos": [4, 11, 12, 45, 46, 47, 51, 54, 61, 63, 67, 79, 102, 103, 121, 132, 138, 139, 149, 170, 173, 193, 237, 256, 266, 273, 355, 361, 365, 366, 367, 368, 381, 384, 387, 393, 406, 408, 410, 413, 414, 417, 440, 441, 444, 446, 456, 520, 529, 535, 556, 557, 579, 599, 655, 656, 669, 671, 676, 684, 685, 686, 690, 722, 752, 795, 798, 799, 809, 865, 898, 899, 906, 907, 908, 909, 976, 977, 981, 982, 983, 984, 985, 989, 996, 999, 1000, 1001, 1013, 1015, 1019, 1020, 1030, 1031, 1035, 1037, 1039], "focu": [4, 9, 28, 96, 112, 152, 252, 294, 365, 384, 404, 413, 550, 551, 556, 558, 559, 675, 983, 989, 996, 1006, 1007], "root": [4, 17, 81, 149, 181, 359, 376, 379, 387, 406, 439, 498, 538, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 636, 746, 747, 786, 787, 906, 907, 908, 909, 910, 912, 986, 992, 1002, 1030, 1036, 1037, 1038, 1039, 1042, 1043], "becaus": [4, 5, 13, 20, 26, 28, 41, 48, 51, 72, 83, 87, 112, 117, 120, 125, 149, 153, 156, 159, 170, 171, 173, 180, 186, 193, 200, 204, 206, 208, 218, 235, 236, 247, 258, 261, 262, 267, 282, 284, 301, 302, 303, 306, 310, 311, 312, 313, 327, 337, 341, 350, 351, 352, 355, 359, 361, 365, 366, 374, 377, 381, 384, 387, 391, 392, 393, 397, 400, 403, 404, 406, 407, 410, 411, 412, 413, 414, 416, 419, 429, 444, 445, 458, 462, 472, 479, 480, 481, 531, 533, 549, 551, 553, 555, 557, 559, 562, 565, 567, 585, 588, 604, 605, 608, 629, 630, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 669, 670, 673, 674, 675, 676, 677, 686, 696, 706, 709, 710, 718, 719, 720, 742, 759, 781, 784, 790, 795, 809, 822, 826, 831, 832, 841, 844, 846, 848, 849, 850, 856, 867, 868, 876, 878, 879, 883, 884, 886, 887, 888, 889, 899, 901, 904, 907, 909, 950, 976, 978, 979, 980, 981, 982, 983, 984, 986, 987, 989, 991, 993, 996, 1001, 1002, 1010, 1020, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1044], "intuit": [4, 13, 32, 45, 53, 63, 101, 112, 115, 122, 144, 152, 170, 171, 201, 202, 223, 229, 262, 279, 289, 308, 311, 334, 337, 341, 351, 379, 393, 404, 406, 408, 410, 412, 778, 779, 780, 783, 869, 900, 903, 978, 982, 983, 986, 987, 993, 996, 997, 1001, 1010, 1019, 1021, 1028], "studi": [4, 61, 125, 200, 218, 264, 267, 268, 350, 374, 376, 410, 415, 693, 705, 754, 755, 823, 984, 986, 1000, 1012], "metric": [4, 6, 7, 11, 13, 20, 21, 22, 25, 26, 27, 31, 33, 37, 39, 45, 49, 50, 53, 59, 61, 65, 69, 71, 76, 83, 112, 117, 124, 126, 127, 132, 146, 149, 153, 164, 167, 169, 170, 172, 184, 189, 195, 196, 200, 202, 204, 206, 218, 224, 230, 233, 234, 239, 242, 254, 255, 257, 258, 259, 261, 262, 264, 268, 270, 271, 277, 282, 284, 286, 294, 297, 303, 306, 311, 316, 317, 319, 320, 321, 322, 325, 326, 328, 329, 350, 351, 361, 365, 368, 371, 374, 379, 381, 391, 392, 393, 395, 397, 401, 404, 411, 412, 413, 416, 417, 423, 434, 438, 441, 442, 443, 447, 454, 466, 517, 532, 546, 547, 548, 550, 552, 554, 555, 556, 558, 559, 561, 562, 564, 566, 575, 599, 607, 617, 625, 628, 631, 635, 636, 637, 638, 639, 640, 655, 656, 660, 663, 665, 671, 672, 673, 685, 687, 689, 691, 693, 795, 798, 799, 801, 809, 817, 819, 820, 821, 823, 826, 827, 828, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 864, 870, 893, 894, 898, 900, 903, 906, 908, 976, 978, 981, 983, 987, 992, 994, 1006, 1007, 1016, 1017, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "ones": [4, 11, 35, 44, 56, 72, 82, 128, 152, 176, 184, 204, 205, 229, 232, 236, 261, 269, 272, 291, 310, 326, 347, 365, 366, 379, 387, 393, 406, 408, 410, 413, 447, 529, 563, 578, 607, 608, 641, 642, 655, 656, 667, 673, 700, 792, 797, 802, 813, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 873, 877, 940, 982, 986, 991, 992, 996, 1001, 1019, 1028, 1036, 1037, 1038], "term": [4, 14, 15, 26, 33, 59, 101, 115, 118, 122, 125, 157, 169, 184, 188, 189, 200, 202, 204, 214, 217, 218, 239, 259, 263, 284, 300, 319, 341, 345, 350, 352, 367, 368, 379, 381, 383, 391, 400, 404, 405, 406, 408, 410, 411, 413, 440, 444, 446, 449, 456, 459, 521, 532, 535, 537, 541, 544, 546, 585, 586, 587, 588, 601, 604, 605, 629, 630, 637, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 675, 677, 684, 692, 725, 726, 734, 779, 780, 783, 855, 856, 873, 877, 880, 898, 899, 900, 901, 902, 903, 904, 975, 977, 978, 980, 981, 982, 983, 986, 987, 988, 990, 991, 996, 1000, 1001, 1012, 1021, 1036, 1042, 1043, 1044], "y": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 25, 26, 27, 28, 31, 32, 34, 35, 40, 41, 43, 44, 45, 46, 53, 55, 57, 58, 61, 62, 63, 66, 67, 72, 73, 74, 75, 76, 82, 86, 87, 92, 93, 98, 100, 101, 102, 103, 105, 106, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 218, 221, 222, 223, 226, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 246, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 355, 356, 357, 358, 359, 361, 371, 372, 373, 374, 377, 379, 381, 384, 386, 388, 392, 393, 397, 400, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 423, 424, 425, 428, 429, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 495, 497, 499, 502, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 523, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 694, 695, 696, 697, 698, 699, 703, 708, 722, 731, 737, 738, 752, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 784, 785, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 918, 923, 924, 946, 948, 949, 950, 954, 957, 960, 973, 975, 976, 977, 978, 980, 981, 982, 984, 986, 987, 988, 989, 990, 991, 993, 996, 1000, 1001, 1002, 1007, 1012, 1016, 1017, 1019, 1023, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "hist": [4, 26, 28, 54, 76, 114, 118, 200, 202, 233, 239, 267, 289, 306, 310, 312, 320, 413], "bin": [4, 25, 26, 28, 54, 76, 114, 118, 200, 233, 239, 267, 289, 306, 307, 308, 309, 310, 312, 313, 377, 387, 396, 404, 412, 413, 435, 436, 445, 458, 558, 559, 861, 863, 877, 937, 1020, 1036, 1037, 1038, 1042], "30": [4, 8, 10, 13, 15, 16, 20, 35, 40, 41, 45, 55, 61, 72, 74, 79, 93, 102, 104, 112, 121, 125, 131, 138, 149, 152, 153, 156, 158, 171, 176, 179, 194, 198, 200, 218, 221, 222, 226, 234, 238, 239, 250, 261, 266, 275, 279, 284, 293, 294, 310, 311, 312, 321, 322, 325, 326, 330, 335, 338, 340, 343, 365, 374, 376, 384, 385, 410, 414, 417, 441, 447, 454, 497, 528, 532, 534, 535, 536, 538, 540, 567, 589, 592, 593, 595, 645, 689, 731, 779, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 879, 894, 907, 975, 980, 986, 987, 989, 994, 1017, 1028, 1029, 1035, 1036, 1037], "rent": 4, "fleet": 4, "input": [4, 6, 10, 32, 34, 74, 96, 100, 121, 125, 126, 158, 159, 160, 170, 176, 179, 200, 203, 204, 208, 215, 218, 232, 233, 235, 236, 243, 256, 279, 288, 289, 302, 307, 308, 309, 310, 316, 319, 321, 337, 341, 343, 346, 352, 373, 376, 379, 382, 384, 388, 389, 391, 392, 393, 403, 404, 407, 410, 411, 412, 413, 414, 415, 416, 418, 424, 427, 428, 429, 430, 431, 434, 435, 436, 437, 438, 439, 442, 445, 446, 447, 451, 454, 455, 458, 461, 462, 464, 465, 466, 468, 469, 479, 480, 481, 486, 500, 506, 513, 514, 515, 517, 521, 525, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 617, 619, 624, 625, 626, 627, 628, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 682, 683, 684, 685, 686, 687, 689, 690, 693, 694, 695, 696, 697, 698, 699, 718, 719, 720, 724, 741, 742, 744, 746, 747, 749, 750, 757, 763, 764, 767, 768, 770, 774, 775, 776, 777, 781, 786, 787, 793, 794, 795, 798, 799, 801, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 915, 916, 917, 918, 919, 920, 924, 929, 934, 943, 945, 946, 950, 959, 961, 967, 972, 973, 976, 978, 980, 982, 983, 984, 985, 986, 988, 989, 990, 991, 993, 994, 998, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1012, 1016, 1017, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "annot": [4, 9, 27, 134, 176, 222, 265, 268, 350, 379, 380, 381, 406, 713, 912, 986, 1002, 1037], "log": [4, 21, 26, 27, 28, 79, 96, 112, 125, 132, 145, 149, 153, 154, 156, 157, 158, 161, 185, 188, 189, 193, 200, 205, 210, 218, 233, 235, 250, 294, 311, 350, 374, 376, 377, 379, 383, 387, 388, 393, 403, 404, 406, 407, 408, 411, 413, 414, 416, 445, 448, 457, 462, 467, 468, 469, 470, 471, 472, 473, 529, 533, 538, 546, 547, 548, 550, 552, 554, 556, 559, 561, 587, 588, 590, 591, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 639, 642, 645, 655, 656, 666, 668, 673, 677, 737, 747, 751, 793, 794, 795, 798, 799, 809, 833, 834, 835, 836, 837, 838, 839, 843, 854, 855, 862, 863, 892, 895, 900, 903, 905, 906, 908, 933, 975, 978, 980, 982, 983, 988, 989, 991, 994, 996, 1000, 1002, 1006, 1007, 1019, 1030, 1031, 1032, 1037, 1038, 1039, 1042], "describ": [4, 13, 57, 132, 149, 170, 218, 234, 261, 270, 361, 365, 366, 372, 374, 376, 378, 379, 381, 384, 387, 393, 394, 403, 406, 408, 409, 410, 411, 413, 414, 459, 466, 470, 471, 488, 490, 492, 493, 494, 497, 498, 499, 500, 501, 502, 507, 513, 514, 515, 525, 604, 605, 642, 656, 665, 711, 793, 794, 833, 835, 873, 935, 975, 978, 981, 982, 985, 986, 988, 992, 1000, 1001, 1002, 1009, 1012, 1018, 1019, 1036, 1038], "weather": [4, 13, 157, 171, 982, 986], "includ": [4, 33, 35, 56, 81, 118, 122, 124, 169, 170, 172, 184, 200, 204, 218, 236, 262, 279, 284, 301, 306, 319, 320, 322, 337, 342, 350, 352, 361, 365, 366, 373, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 393, 394, 396, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 441, 443, 447, 453, 463, 466, 467, 468, 469, 470, 471, 472, 473, 486, 487, 488, 493, 497, 498, 499, 501, 502, 507, 531, 538, 554, 561, 571, 629, 635, 643, 644, 649, 657, 658, 659, 662, 678, 685, 686, 694, 710, 725, 726, 731, 733, 734, 767, 779, 780, 783, 791, 795, 797, 798, 799, 808, 809, 812, 815, 821, 824, 846, 848, 849, 850, 871, 872, 873, 877, 895, 898, 899, 906, 908, 910, 912, 918, 919, 922, 924, 927, 943, 975, 982, 985, 986, 987, 989, 990, 996, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1019, 1021, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "both": [4, 5, 7, 9, 10, 13, 15, 17, 21, 26, 27, 35, 43, 55, 56, 65, 72, 79, 81, 86, 87, 101, 104, 110, 115, 118, 119, 122, 131, 132, 135, 144, 145, 149, 152, 159, 161, 169, 170, 171, 172, 179, 184, 186, 188, 189, 200, 201, 202, 204, 205, 206, 208, 218, 225, 235, 236, 237, 246, 247, 248, 249, 250, 251, 261, 262, 263, 264, 268, 270, 272, 276, 284, 296, 306, 310, 311, 316, 318, 322, 327, 328, 334, 339, 341, 350, 351, 352, 359, 361, 365, 366, 367, 372, 373, 374, 375, 377, 379, 381, 385, 386, 388, 391, 392, 393, 394, 396, 397, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 416, 419, 434, 443, 444, 449, 456, 459, 465, 472, 479, 480, 481, 482, 485, 486, 493, 494, 497, 499, 502, 504, 505, 506, 531, 535, 537, 544, 548, 552, 553, 554, 560, 561, 562, 563, 564, 574, 585, 586, 588, 594, 604, 605, 624, 629, 630, 640, 654, 655, 656, 669, 671, 673, 675, 684, 696, 701, 709, 713, 725, 726, 727, 732, 734, 753, 757, 763, 770, 774, 779, 780, 783, 784, 785, 791, 798, 799, 801, 817, 827, 855, 856, 870, 872, 874, 886, 891, 896, 898, 899, 906, 908, 922, 936, 949, 961, 975, 976, 977, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1016, 1019, 1020, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "numer": [4, 13, 20, 67, 72, 76, 120, 122, 132, 149, 157, 160, 171, 172, 189, 200, 218, 239, 241, 243, 294, 312, 319, 352, 373, 374, 376, 382, 384, 385, 391, 392, 393, 406, 408, 413, 414, 415, 416, 418, 419, 437, 440, 444, 456, 468, 469, 472, 475, 486, 487, 488, 493, 497, 498, 499, 501, 502, 507, 528, 530, 532, 537, 544, 564, 578, 587, 608, 614, 617, 624, 627, 629, 630, 643, 649, 651, 669, 684, 687, 691, 711, 784, 790, 795, 798, 799, 801, 809, 817, 820, 821, 822, 825, 833, 834, 835, 836, 837, 855, 856, 861, 866, 871, 872, 879, 910, 911, 912, 918, 919, 934, 935, 975, 976, 982, 983, 987, 994, 996, 997, 1002, 1009, 1010, 1012, 1021, 1028, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "categor": [4, 72, 111, 117, 132, 136, 167, 170, 171, 172, 200, 218, 239, 241, 243, 313, 319, 321, 322, 367, 371, 373, 374, 381, 384, 393, 407, 414, 463, 464, 486, 487, 493, 502, 558, 559, 578, 579, 604, 605, 629, 630, 645, 655, 656, 666, 677, 706, 821, 833, 834, 835, 836, 837, 859, 861, 865, 866, 869, 871, 872, 879, 893, 894, 976, 982, 993, 994, 1002, 1006, 1007, 1008, 1009, 1010, 1021, 1023, 1028, 1029, 1032, 1033, 1036, 1038, 1040, 1043, 1044, 1045], "inform": [4, 5, 8, 11, 12, 14, 26, 28, 34, 35, 38, 39, 50, 54, 59, 67, 68, 71, 72, 87, 90, 91, 92, 103, 118, 119, 120, 143, 145, 146, 148, 149, 150, 152, 157, 167, 170, 171, 173, 176, 178, 179, 180, 184, 201, 204, 215, 217, 218, 219, 236, 240, 248, 249, 251, 256, 258, 261, 262, 263, 266, 268, 270, 287, 290, 291, 294, 313, 319, 340, 345, 350, 351, 352, 356, 359, 361, 365, 368, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 384, 385, 387, 391, 392, 393, 394, 397, 400, 403, 410, 411, 413, 414, 415, 416, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 461, 466, 467, 468, 470, 471, 472, 473, 479, 480, 481, 482, 489, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 507, 512, 521, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 603, 604, 605, 606, 607, 608, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 692, 694, 698, 701, 702, 712, 722, 726, 739, 751, 752, 753, 782, 784, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 886, 887, 888, 889, 890, 891, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 943, 976, 978, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 996, 997, 1000, 1002, 1007, 1010, 1018, 1019, 1020, 1021, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "alreadi": [4, 6, 10, 17, 56, 59, 91, 101, 112, 132, 149, 170, 230, 237, 239, 242, 262, 268, 284, 319, 322, 379, 380, 384, 391, 393, 404, 408, 410, 412, 413, 418, 434, 496, 520, 530, 564, 565, 631, 643, 646, 661, 662, 663, 664, 665, 671, 673, 674, 675, 682, 683, 764, 833, 853, 861, 867, 868, 870, 875, 881, 883, 884, 885, 887, 888, 889, 895, 898, 899, 921, 945, 975, 978, 992, 996, 997, 1007, 1012, 1017, 1021, 1025, 1029, 1033, 1036, 1040, 1041, 1042, 1043], "expand": [4, 17, 50, 66, 231, 312, 317, 361, 371, 413, 441, 447, 496, 554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909, 986, 1029, 1036, 1037, 1044], "complementari": [4, 414], "column": [4, 13, 21, 22, 61, 70, 73, 76, 77, 91, 119, 121, 122, 125, 129, 132, 149, 157, 164, 167, 169, 170, 171, 172, 173, 189, 200, 201, 204, 208, 218, 238, 239, 240, 251, 261, 262, 272, 273, 282, 302, 311, 313, 318, 319, 320, 321, 350, 351, 352, 365, 373, 374, 376, 379, 381, 385, 388, 391, 392, 393, 403, 406, 407, 409, 411, 413, 414, 415, 418, 421, 448, 450, 461, 463, 464, 468, 469, 475, 484, 485, 486, 487, 488, 489, 491, 493, 497, 498, 499, 501, 502, 505, 506, 507, 508, 510, 512, 523, 528, 531, 534, 538, 539, 545, 552, 554, 555, 561, 562, 563, 564, 578, 579, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 607, 624, 627, 629, 630, 631, 643, 645, 649, 655, 657, 659, 661, 662, 666, 677, 682, 683, 694, 710, 715, 716, 725, 726, 734, 750, 759, 764, 765, 766, 769, 779, 780, 783, 784, 795, 798, 799, 809, 819, 824, 829, 832, 833, 834, 835, 836, 837, 838, 839, 858, 862, 863, 864, 865, 871, 872, 873, 877, 878, 879, 880, 882, 898, 900, 903, 906, 908, 914, 918, 919, 924, 935, 949, 962, 963, 965, 973, 975, 976, 978, 982, 984, 986, 987, 994, 996, 1001, 1007, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "x": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 25, 26, 27, 28, 31, 32, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 80, 81, 82, 83, 86, 87, 92, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 218, 221, 222, 223, 226, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 372, 373, 374, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 397, 400, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 423, 424, 425, 427, 428, 429, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 484, 490, 491, 492, 495, 497, 498, 499, 502, 503, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 703, 707, 708, 721, 731, 738, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 784, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 922, 934, 935, 937, 946, 947, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 975, 976, 977, 978, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 996, 998, 999, 1000, 1001, 1002, 1007, 1012, 1016, 1017, 1019, 1020, 1021, 1025, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "drop": [4, 5, 13, 72, 76, 87, 157, 169, 170, 171, 173, 200, 204, 218, 239, 243, 271, 312, 318, 321, 351, 383, 387, 407, 411, 413, 461, 464, 564, 565, 566, 567, 692, 697, 699, 778, 785, 857, 871, 877, 976, 982, 986, 994, 996, 1006, 1028, 1029, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "axi": [4, 5, 7, 11, 12, 13, 14, 15, 18, 20, 26, 27, 38, 40, 41, 48, 49, 51, 53, 54, 55, 56, 62, 72, 73, 76, 83, 87, 92, 93, 96, 97, 98, 99, 100, 106, 114, 115, 119, 121, 128, 131, 135, 141, 145, 156, 157, 161, 164, 169, 170, 181, 185, 187, 189, 192, 193, 194, 200, 205, 209, 212, 214, 215, 217, 218, 222, 223, 226, 229, 233, 234, 238, 246, 248, 250, 251, 257, 258, 262, 263, 268, 270, 271, 282, 284, 289, 290, 291, 294, 295, 296, 303, 306, 310, 313, 326, 328, 330, 333, 336, 337, 340, 342, 343, 344, 345, 347, 350, 351, 356, 357, 358, 359, 381, 388, 393, 404, 406, 414, 418, 435, 442, 461, 464, 528, 530, 533, 534, 536, 538, 540, 547, 582, 609, 628, 629, 682, 683, 698, 759, 775, 776, 777, 778, 801, 817, 826, 867, 868, 875, 876, 878, 881, 883, 884, 885, 887, 888, 889, 912, 914, 918, 919, 937, 961, 967, 976, 986, 993, 996, 1001, 1018, 1020, 1036, 1038, 1040, 1045], "holidai": [4, 171], "workingdai": [4, 171], "temp": [4, 13, 171], "feel_temp": [4, 13, 171], "humid": [4, 13, 171, 993], "windspe": [4, 13, 171], "0": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 365, 366, 373, 374, 376, 377, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 393, 396, 397, 398, 399, 400, 402, 403, 404, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 755, 756, 757, 759, 760, 762, 763, 764, 765, 767, 769, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 918, 919, 924, 929, 930, 932, 934, 935, 937, 938, 939, 940, 947, 948, 949, 951, 952, 954, 956, 957, 960, 961, 967, 975, 976, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1012, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026], "spring": [4, 13, 171], "fals": [4, 5, 7, 8, 10, 11, 14, 15, 17, 21, 22, 25, 27, 28, 33, 34, 35, 40, 43, 45, 47, 48, 55, 56, 65, 68, 71, 72, 73, 74, 80, 82, 93, 100, 102, 105, 106, 112, 118, 119, 122, 125, 126, 135, 138, 152, 157, 158, 159, 160, 170, 171, 172, 173, 179, 180, 184, 186, 200, 201, 205, 206, 208, 216, 218, 221, 224, 236, 237, 239, 243, 246, 258, 259, 261, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 284, 288, 294, 297, 301, 302, 306, 307, 312, 313, 316, 318, 319, 320, 321, 327, 337, 339, 345, 346, 350, 351, 373, 379, 380, 381, 384, 393, 397, 404, 406, 407, 408, 410, 411, 413, 414, 415, 416, 418, 419, 431, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 512, 520, 521, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 632, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 691, 692, 694, 695, 696, 697, 698, 699, 700, 705, 706, 708, 709, 710, 711, 712, 715, 722, 723, 724, 725, 726, 727, 734, 738, 739, 746, 747, 750, 752, 757, 759, 763, 764, 765, 770, 774, 778, 779, 780, 781, 783, 785, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 809, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 916, 917, 918, 919, 929, 936, 947, 948, 951, 952, 956, 957, 960, 967, 972, 973, 975, 976, 982, 986, 989, 996, 1000, 1001, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "6": [4, 8, 9, 10, 11, 12, 13, 17, 20, 27, 32, 33, 34, 41, 45, 47, 50, 51, 53, 57, 58, 61, 62, 63, 64, 65, 66, 68, 74, 75, 76, 79, 80, 81, 83, 86, 91, 96, 98, 106, 113, 125, 126, 129, 131, 138, 144, 149, 152, 155, 157, 159, 160, 164, 165, 170, 171, 173, 176, 179, 180, 181, 184, 189, 193, 198, 200, 201, 202, 204, 214, 216, 218, 221, 222, 223, 225, 229, 232, 233, 237, 240, 241, 246, 247, 248, 249, 251, 252, 255, 256, 260, 261, 262, 263, 264, 270, 271, 272, 273, 274, 276, 282, 286, 289, 297, 300, 302, 303, 306, 308, 310, 311, 313, 316, 319, 320, 321, 322, 325, 326, 329, 330, 337, 338, 340, 342, 345, 347, 350, 351, 352, 358, 361, 373, 374, 376, 377, 379, 384, 385, 392, 396, 398, 399, 404, 406, 407, 410, 411, 413, 414, 415, 443, 445, 446, 447, 448, 449, 450, 459, 479, 480, 481, 482, 502, 521, 524, 527, 535, 537, 538, 544, 550, 558, 559, 560, 566, 567, 590, 591, 608, 611, 612, 622, 624, 625, 627, 641, 642, 667, 686, 690, 696, 718, 724, 734, 738, 741, 742, 746, 747, 749, 765, 781, 784, 786, 793, 794, 796, 797, 802, 804, 805, 807, 812, 813, 816, 819, 820, 821, 822, 824, 833, 834, 835, 837, 838, 839, 846, 848, 849, 850, 865, 866, 868, 871, 873, 876, 877, 882, 913, 935, 938, 940, 949, 975, 976, 980, 982, 983, 986, 996, 997, 1000, 1001, 1002, 1004, 1012, 1016, 1017, 1019, 1024, 1026, 1029, 1030, 1031, 1036, 1041, 1045], "clear": [4, 17, 56, 61, 73, 170, 171, 311, 374, 378, 379, 381, 391, 392, 393, 404, 407, 412, 912, 913, 975, 980, 1039, 1040, 1041], "9": [4, 7, 9, 12, 13, 14, 25, 27, 28, 32, 33, 35, 43, 45, 51, 56, 59, 63, 65, 75, 83, 86, 92, 121, 122, 123, 124, 125, 130, 132, 138, 140, 141, 149, 155, 159, 165, 169, 170, 171, 181, 182, 191, 200, 213, 214, 217, 218, 221, 224, 233, 234, 243, 246, 247, 248, 249, 255, 259, 264, 268, 270, 282, 286, 288, 289, 292, 293, 294, 300, 301, 303, 306, 308, 309, 310, 312, 313, 321, 322, 325, 326, 328, 329, 330, 337, 341, 347, 352, 361, 376, 377, 385, 392, 396, 398, 399, 404, 407, 408, 410, 413, 414, 436, 440, 447, 454, 479, 480, 481, 482, 487, 517, 524, 531, 535, 536, 537, 544, 557, 564, 567, 580, 588, 604, 605, 624, 627, 631, 636, 644, 655, 658, 689, 696, 706, 719, 722, 737, 744, 765, 774, 775, 776, 793, 796, 798, 799, 813, 816, 822, 824, 827, 835, 836, 840, 841, 846, 849, 855, 856, 864, 870, 873, 935, 939, 975, 981, 982, 986, 990, 996, 1000, 1001, 1004, 1012, 1016, 1021, 1024, 1026, 1029, 1030, 1031, 1033, 1042, 1044], "84": [4, 6, 71, 146, 191, 218, 308, 325, 361, 376, 413, 414, 784, 809, 986, 996, 1017], "14": [4, 11, 13, 39, 50, 61, 63, 64, 67, 75, 82, 101, 144, 149, 171, 184, 189, 191, 218, 222, 223, 227, 229, 234, 239, 244, 260, 266, 267, 275, 282, 284, 304, 309, 310, 321, 331, 344, 347, 366, 374, 376, 377, 392, 396, 398, 399, 406, 410, 495, 507, 550, 551, 582, 583, 632, 640, 689, 809, 813, 864, 979, 982, 986, 996, 1001, 1004, 1012, 1026, 1028, 1029, 1031, 1032, 1036, 1041], "395": [4, 214, 219], "81": [4, 51, 243, 325, 326, 406, 696, 784, 795, 809, 986, 987, 989, 996], "0000": [4, 321], "02": [4, 12, 13, 16, 29, 31, 36, 45, 51, 53, 59, 63, 65, 69, 77, 83, 84, 86, 96, 99, 108, 114, 121, 136, 149, 154, 159, 162, 169, 170, 174, 181, 218, 229, 237, 239, 244, 256, 262, 268, 277, 289, 300, 303, 304, 306, 308, 330, 333, 351, 356, 373, 376, 384, 410, 438, 442, 594, 655, 673, 795, 809, 877, 893, 907, 982], "13": [4, 6, 10, 11, 13, 45, 56, 69, 75, 101, 106, 121, 123, 124, 126, 149, 164, 166, 170, 176, 186, 209, 226, 233, 239, 244, 255, 262, 265, 267, 298, 303, 306, 310, 337, 350, 353, 374, 376, 379, 385, 392, 410, 418, 507, 510, 529, 530, 548, 549, 579, 632, 636, 730, 813, 842, 857, 864, 890, 891, 982, 986, 987, 992, 993, 996, 1001, 1004, 1012, 1026, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1040], "635": [4, 613], "80": [4, 6, 11, 17, 28, 68, 82, 102, 132, 141, 146, 171, 179, 237, 308, 312, 325, 340, 342, 350, 357, 361, 374, 376, 379, 404, 410, 415, 441, 507, 538, 710, 795, 809, 879, 892, 911, 975, 981, 982, 986, 993, 999, 1002, 1021], "75": [4, 6, 7, 10, 13, 34, 45, 56, 83, 115, 146, 159, 160, 165, 170, 176, 179, 182, 191, 207, 218, 243, 248, 249, 261, 270, 274, 289, 306, 319, 347, 350, 361, 446, 548, 655, 703, 709, 730, 735, 741, 749, 752, 790, 795, 876, 888, 895, 911, 986, 988, 996, 1002, 1005, 1017, 1030], "17374": [4, 13], "19": [4, 13, 43, 157, 170, 176, 177, 200, 204, 219, 226, 251, 310, 311, 323, 326, 376, 377, 383, 393, 396, 398, 399, 406, 407, 414, 417, 441, 489, 513, 514, 515, 533, 537, 538, 544, 546, 547, 554, 555, 556, 557, 561, 562, 563, 579, 586, 645, 655, 656, 663, 664, 665, 668, 669, 671, 673, 675, 684, 704, 777, 781, 795, 809, 821, 826, 827, 829, 830, 844, 845, 864, 875, 896, 900, 903, 906, 907, 908, 909, 975, 986, 996, 1004, 1024, 1026, 1028, 1029, 1030, 1031, 1033, 1036], "misti": [4, 171], "10": [4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18, 21, 26, 27, 28, 31, 32, 33, 38, 40, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 75, 79, 80, 81, 82, 83, 86, 87, 93, 98, 99, 100, 101, 102, 106, 107, 112, 114, 115, 117, 118, 119, 121, 122, 123, 125, 126, 129, 130, 133, 135, 139, 141, 142, 146, 149, 153, 154, 156, 158, 159, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 184, 190, 191, 193, 194, 198, 200, 201, 202, 203, 204, 205, 206, 207, 211, 212, 213, 216, 217, 218, 222, 223, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 272, 275, 279, 282, 289, 300, 301, 302, 303, 306, 307, 309, 310, 311, 316, 317, 318, 319, 320, 322, 325, 326, 327, 329, 335, 336, 337, 339, 340, 342, 344, 345, 347, 350, 351, 352, 361, 365, 373, 374, 375, 376, 377, 379, 381, 384, 385, 391, 392, 393, 396, 397, 398, 399, 403, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 419, 435, 440, 444, 446, 448, 449, 450, 456, 457, 459, 472, 489, 490, 497, 498, 499, 501, 507, 508, 509, 510, 513, 517, 518, 521, 525, 528, 532, 533, 534, 535, 536, 538, 539, 541, 543, 545, 549, 552, 553, 554, 555, 558, 559, 561, 562, 563, 564, 565, 567, 579, 580, 590, 591, 596, 597, 608, 614, 616, 624, 627, 629, 631, 632, 637, 639, 640, 641, 646, 656, 661, 662, 663, 664, 666, 667, 669, 670, 672, 673, 674, 675, 682, 683, 688, 689, 696, 702, 712, 722, 738, 752, 765, 793, 794, 795, 796, 797, 798, 799, 806, 809, 810, 811, 812, 813, 815, 816, 817, 822, 824, 826, 827, 833, 834, 835, 837, 838, 839, 845, 854, 855, 856, 858, 864, 868, 871, 872, 875, 887, 895, 901, 904, 906, 907, 911, 935, 939, 950, 954, 956, 972, 975, 976, 981, 982, 983, 984, 986, 987, 989, 990, 992, 993, 996, 1000, 1001, 1004, 1012, 1016, 1017, 1019, 1020, 1021, 1025, 1026, 1029, 1030, 1031, 1036, 1038, 1039, 1040, 1042, 1043], "66": [4, 225, 312, 376, 406, 529, 629, 709, 779, 780, 791, 877, 986, 998], "880": 4, "60": [4, 6, 17, 60, 74, 83, 200, 212, 218, 221, 222, 243, 249, 269, 274, 326, 340, 350, 373, 406, 410, 447, 454, 710, 795, 986, 996, 1017, 1028, 1031], "11": [4, 11, 13, 16, 20, 36, 51, 75, 82, 98, 149, 155, 170, 171, 174, 184, 200, 201, 202, 205, 221, 223, 227, 239, 258, 266, 267, 273, 277, 287, 288, 290, 310, 318, 321, 322, 323, 336, 340, 345, 350, 352, 373, 376, 377, 385, 392, 406, 409, 410, 413, 447, 454, 479, 480, 481, 482, 498, 514, 515, 609, 647, 653, 667, 712, 718, 719, 720, 774, 775, 776, 796, 799, 813, 816, 823, 850, 907, 950, 978, 982, 984, 996, 1000, 1001, 1004, 1012, 1019, 1021, 1026, 1030, 1034, 1036, 1037, 1039, 1042, 1043], "0014": 4, "17375": [4, 13], "20": [4, 7, 8, 13, 15, 17, 20, 26, 27, 28, 34, 35, 40, 41, 44, 47, 48, 51, 55, 56, 62, 68, 79, 83, 93, 96, 102, 104, 106, 114, 118, 121, 122, 125, 128, 132, 133, 135, 141, 144, 145, 146, 149, 158, 169, 171, 172, 174, 182, 189, 190, 192, 196, 197, 199, 200, 201, 204, 208, 209, 212, 213, 214, 215, 217, 219, 224, 233, 239, 248, 250, 251, 261, 262, 264, 265, 267, 272, 273, 275, 279, 284, 288, 289, 290, 291, 292, 295, 303, 310, 311, 312, 317, 318, 319, 320, 322, 325, 326, 329, 334, 336, 340, 342, 347, 351, 352, 357, 358, 372, 376, 379, 381, 383, 384, 385, 396, 406, 413, 414, 438, 443, 444, 446, 461, 462, 466, 468, 469, 475, 485, 486, 487, 488, 489, 491, 493, 494, 497, 499, 501, 502, 509, 512, 513, 520, 528, 533, 534, 539, 542, 543, 545, 549, 552, 553, 556, 557, 558, 559, 560, 566, 567, 579, 586, 589, 591, 594, 596, 626, 627, 642, 646, 655, 663, 664, 665, 673, 675, 693, 701, 705, 710, 713, 721, 722, 735, 752, 753, 763, 788, 789, 793, 794, 795, 809, 820, 821, 822, 825, 827, 830, 831, 832, 835, 836, 843, 844, 855, 856, 857, 858, 860, 862, 863, 871, 872, 873, 874, 879, 893, 894, 896, 897, 902, 910, 916, 918, 919, 975, 982, 986, 989, 992, 993, 996, 999, 1004, 1009, 1010, 1013, 1019, 1023, 1024, 1026, 1028, 1034, 1037, 1040, 1042, 1043], "17376": [4, 13], "21": [4, 13, 74, 149, 170, 189, 201, 218, 239, 251, 284, 303, 308, 310, 322, 376, 377, 381, 383, 396, 403, 413, 414, 438, 442, 471, 529, 558, 559, 560, 566, 567, 585, 586, 588, 624, 666, 684, 750, 795, 797, 809, 821, 864, 871, 873, 879, 896, 912, 978, 982, 987, 996, 1004, 1024, 1026, 1028, 1029, 1031, 1035, 1036, 1038], "17377": [4, 13], "22": [4, 13, 43, 93, 167, 170, 171, 217, 251, 303, 306, 310, 315, 323, 326, 352, 379, 383, 384, 396, 403, 434, 445, 469, 485, 486, 492, 493, 501, 512, 521, 528, 534, 539, 542, 543, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 591, 624, 625, 629, 631, 642, 644, 648, 650, 652, 655, 656, 658, 660, 662, 666, 685, 689, 699, 701, 710, 753, 765, 774, 779, 780, 784, 795, 796, 800, 809, 814, 816, 818, 819, 820, 821, 822, 823, 824, 825, 842, 844, 846, 848, 849, 850, 855, 856, 857, 859, 862, 878, 898, 900, 901, 902, 903, 904, 906, 907, 908, 909, 929, 930, 978, 986, 996, 1004, 1024, 1026, 1028, 1031, 1036, 1039, 1041], "56": [4, 13, 209, 218, 233, 277, 385, 710, 731, 986, 996, 1024, 1028], "8": [4, 5, 6, 7, 8, 9, 12, 13, 14, 20, 26, 27, 28, 32, 33, 35, 38, 44, 45, 46, 49, 51, 54, 56, 61, 63, 65, 66, 71, 73, 75, 76, 82, 86, 91, 92, 93, 96, 97, 99, 100, 101, 105, 107, 112, 115, 117, 118, 122, 124, 125, 127, 130, 133, 134, 138, 148, 149, 153, 155, 157, 158, 160, 161, 165, 169, 170, 171, 173, 176, 179, 180, 185, 186, 191, 194, 200, 201, 204, 208, 210, 216, 218, 221, 222, 223, 225, 226, 230, 234, 235, 237, 241, 242, 243, 246, 247, 248, 250, 251, 252, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 271, 272, 279, 282, 286, 288, 292, 296, 300, 302, 303, 306, 308, 309, 310, 311, 312, 316, 321, 325, 326, 327, 329, 330, 334, 337, 341, 342, 344, 345, 346, 350, 351, 352, 358, 361, 366, 373, 374, 376, 377, 379, 384, 385, 396, 404, 406, 410, 411, 413, 414, 415, 436, 440, 441, 444, 446, 447, 449, 459, 466, 467, 468, 469, 470, 471, 472, 473, 480, 481, 482, 484, 487, 499, 500, 511, 528, 531, 535, 537, 540, 542, 544, 546, 547, 552, 553, 562, 567, 579, 585, 586, 587, 588, 625, 626, 645, 655, 667, 673, 686, 689, 690, 691, 692, 696, 699, 703, 704, 706, 712, 718, 723, 724, 725, 737, 741, 742, 746, 747, 749, 778, 779, 781, 784, 785, 786, 787, 791, 793, 796, 797, 802, 805, 812, 813, 816, 817, 824, 827, 836, 838, 839, 845, 855, 856, 857, 863, 870, 877, 879, 900, 903, 933, 935, 939, 975, 976, 982, 983, 984, 986, 989, 994, 996, 1000, 1004, 1010, 1012, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1026, 1029, 1030, 1031, 1035, 1036, 1041, 1042, 1044], "9981": 4, "17378": [4, 13], "23": [4, 13, 20, 27, 35, 51, 99, 149, 167, 226, 243, 251, 263, 277, 303, 310, 312, 314, 315, 318, 319, 323, 326, 329, 376, 377, 379, 385, 396, 398, 399, 413, 419, 429, 437, 444, 449, 451, 459, 462, 464, 465, 472, 479, 480, 481, 487, 489, 497, 498, 499, 501, 502, 507, 509, 511, 519, 521, 535, 536, 537, 540, 544, 551, 553, 555, 557, 558, 559, 562, 565, 566, 567, 604, 605, 608, 624, 627, 629, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 666, 667, 669, 670, 672, 675, 676, 677, 714, 726, 774, 824, 830, 831, 832, 841, 849, 856, 859, 871, 878, 886, 887, 896, 899, 901, 904, 907, 909, 916, 918, 919, 929, 930, 935, 986, 1004, 1024, 1026, 1028, 1029, 1035, 1036, 1037, 1040], "65": [4, 34, 171, 200, 270, 312, 406, 436, 499, 594, 696, 737, 788, 789, 993, 1017, 1028, 1029, 1030], "17379": [4, 13, 1040], "row": [4, 20, 21, 22, 26, 28, 35, 45, 61, 76, 91, 93, 118, 121, 130, 133, 164, 200, 201, 202, 230, 233, 239, 240, 308, 359, 365, 374, 381, 388, 392, 393, 403, 406, 409, 414, 421, 439, 440, 444, 446, 447, 448, 450, 453, 454, 456, 461, 465, 485, 487, 488, 489, 490, 491, 492, 497, 498, 499, 501, 502, 507, 508, 510, 531, 539, 545, 548, 587, 588, 617, 629, 640, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 689, 693, 694, 707, 715, 716, 721, 754, 755, 759, 762, 764, 765, 766, 767, 769, 770, 772, 774, 775, 776, 777, 793, 794, 827, 833, 834, 835, 836, 837, 843, 846, 847, 848, 849, 850, 853, 864, 868, 870, 871, 873, 885, 888, 889, 892, 896, 914, 918, 919, 935, 957, 960, 964, 966, 968, 969, 973, 975, 976, 978, 980, 982, 984, 986, 987, 989, 996, 997, 1000, 1001, 1007, 1035, 1036, 1037, 1038, 1043], "onli": [4, 7, 11, 14, 15, 21, 25, 26, 27, 28, 31, 34, 35, 38, 40, 41, 46, 50, 54, 56, 59, 67, 71, 72, 73, 75, 76, 82, 91, 99, 100, 107, 112, 114, 119, 120, 121, 122, 124, 131, 132, 144, 145, 146, 149, 152, 154, 157, 159, 161, 165, 167, 169, 170, 171, 176, 178, 183, 184, 189, 196, 200, 201, 203, 206, 208, 209, 218, 219, 221, 222, 229, 231, 233, 235, 236, 240, 243, 246, 247, 248, 251, 252, 257, 259, 261, 263, 264, 267, 268, 269, 270, 272, 273, 279, 282, 284, 290, 292, 295, 297, 302, 306, 307, 311, 312, 318, 319, 325, 326, 328, 333, 334, 337, 341, 342, 345, 346, 350, 351, 352, 355, 356, 359, 361, 365, 366, 367, 372, 373, 374, 376, 377, 379, 381, 383, 384, 385, 386, 387, 388, 391, 393, 394, 396, 397, 400, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 486, 487, 488, 489, 491, 493, 494, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 513, 516, 520, 521, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 696, 704, 706, 710, 722, 725, 726, 730, 732, 733, 734, 737, 738, 739, 752, 754, 756, 770, 774, 775, 776, 777, 779, 780, 783, 784, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 809, 813, 817, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 916, 918, 919, 922, 924, 927, 935, 937, 940, 942, 947, 952, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1006, 1007, 1010, 1019, 1020, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045], "present": [4, 5, 13, 44, 50, 93, 96, 104, 117, 118, 125, 128, 148, 149, 158, 161, 179, 182, 184, 189, 200, 229, 232, 236, 251, 259, 264, 267, 270, 271, 284, 306, 309, 311, 351, 376, 377, 381, 384, 391, 393, 397, 406, 408, 411, 413, 414, 424, 425, 428, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 461, 465, 466, 467, 468, 469, 470, 471, 472, 473, 486, 487, 488, 489, 493, 497, 498, 499, 500, 501, 502, 507, 528, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 546, 547, 558, 559, 560, 563, 566, 567, 578, 579, 580, 585, 586, 588, 614, 624, 625, 626, 627, 647, 651, 674, 685, 686, 687, 688, 709, 725, 726, 734, 765, 779, 780, 783, 793, 794, 795, 798, 799, 807, 809, 822, 840, 841, 842, 844, 846, 848, 849, 850, 857, 862, 870, 871, 872, 873, 874, 876, 879, 890, 891, 902, 910, 912, 913, 935, 970, 985, 986, 987, 988, 993, 996, 1005, 1007, 1031, 1036, 1038, 1039, 1040, 1042, 1043], "date": [4, 71, 149, 157, 171, 374, 376, 379, 383, 394, 407, 1007], "datetim": [4, 18, 157, 171], "panda": [4, 12, 26, 71, 72, 73, 74, 112, 118, 119, 122, 125, 129, 157, 164, 169, 170, 171, 172, 173, 179, 184, 189, 200, 204, 208, 218, 239, 240, 243, 251, 259, 261, 262, 264, 272, 273, 279, 311, 312, 313, 316, 319, 320, 345, 350, 351, 373, 374, 377, 378, 379, 381, 382, 393, 396, 399, 407, 430, 439, 440, 442, 444, 446, 461, 463, 465, 479, 480, 481, 482, 486, 487, 488, 489, 493, 497, 498, 499, 501, 502, 507, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 558, 559, 563, 564, 565, 566, 567, 578, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 629, 630, 632, 635, 636, 637, 638, 639, 685, 686, 689, 795, 798, 799, 809, 824, 842, 847, 850, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 896, 914, 975, 976, 996, 1006, 1007, 1021, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "http": [4, 6, 7, 8, 12, 18, 25, 72, 126, 132, 149, 161, 165, 176, 200, 208, 216, 218, 226, 230, 279, 282, 284, 302, 373, 374, 376, 377, 379, 383, 384, 385, 387, 391, 393, 396, 402, 406, 410, 415, 439, 446, 449, 459, 484, 489, 493, 497, 499, 505, 506, 507, 527, 528, 531, 533, 534, 538, 592, 633, 638, 641, 646, 655, 661, 663, 664, 665, 668, 673, 676, 679, 680, 682, 683, 688, 689, 692, 702, 718, 719, 720, 754, 755, 765, 833, 835, 836, 837, 840, 841, 846, 847, 848, 849, 854, 876, 891, 892, 893, 906, 907, 982, 984, 986, 989, 999, 1002, 1009, 1010, 1017, 1033, 1038, 1045], "pydata": [4, 1005, 1010], "org": [4, 12, 14, 15, 18, 25, 27, 33, 38, 47, 49, 62, 67, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 157, 161, 170, 171, 172, 176, 181, 191, 192, 200, 208, 216, 218, 222, 230, 231, 232, 234, 236, 240, 241, 242, 243, 251, 259, 261, 262, 264, 268, 273, 282, 302, 303, 312, 317, 318, 320, 321, 325, 326, 327, 330, 350, 351, 352, 359, 366, 372, 377, 379, 382, 385, 387, 394, 396, 410, 592, 633, 665, 668, 673, 692, 702, 765, 840, 841, 846, 847, 848, 849, 876, 892, 906, 907, 982, 986, 1002, 1004, 1023, 1036, 1040], "stabl": [4, 161, 170, 194, 198, 202, 284, 317, 345, 351, 377, 379, 383, 385, 388, 393, 396, 410, 414, 418, 468, 469, 475, 530, 652, 669, 671, 684, 689, 720, 748, 934, 935, 982, 988, 989, 996, 1007, 1024, 1028, 1029, 1034, 1039, 1041], "user_guid": 4, "timeseri": 4, "html": [4, 8, 12, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 161, 170, 171, 172, 176, 181, 230, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359, 374, 376, 379, 380, 382, 383, 387, 407, 410, 414, 484, 505, 506, 655, 833, 837, 931, 984, 1006, 1007, 1039, 1040, 1041, 1042, 1043, 1045], "compon": [4, 5, 18, 45, 59, 63, 71, 74, 85, 86, 88, 91, 95, 97, 98, 100, 101, 103, 104, 105, 107, 108, 130, 157, 167, 169, 184, 221, 233, 234, 237, 246, 247, 250, 251, 252, 260, 262, 285, 298, 303, 311, 318, 365, 371, 374, 379, 381, 385, 388, 391, 402, 405, 406, 407, 409, 414, 416, 418, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 499, 501, 512, 518, 523, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 692, 793, 794, 795, 798, 799, 809, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 934, 935, 978, 983, 985, 996, 998, 1001, 1006, 1007, 1008, 1010, 1015, 1021, 1022, 1023, 1028, 1030, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "now": [4, 5, 7, 13, 18, 21, 54, 58, 72, 87, 101, 112, 113, 117, 119, 121, 122, 125, 126, 132, 135, 149, 152, 157, 158, 159, 165, 169, 170, 171, 172, 176, 179, 181, 186, 188, 189, 201, 202, 204, 225, 234, 236, 257, 261, 264, 272, 273, 279, 287, 311, 317, 318, 320, 321, 322, 327, 337, 350, 351, 352, 361, 365, 367, 374, 379, 380, 381, 385, 391, 392, 393, 403, 406, 410, 411, 413, 414, 418, 490, 505, 506, 509, 533, 546, 576, 577, 579, 624, 627, 646, 650, 655, 660, 681, 722, 752, 793, 794, 798, 799, 830, 845, 858, 961, 975, 976, 982, 986, 992, 995, 996, 1001, 1002, 1005, 1007, 1012, 1019, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "introspect": [4, 6, 72, 385, 556, 557, 585, 586, 588, 996, 1017], "value_count": [4, 13, 171, 279], "11413": 4, "4544": 4, "rain": [4, 13, 171, 982], "1419": 4, "heavy_rain": [4, 171], "name": [4, 6, 7, 9, 10, 11, 12, 13, 18, 20, 26, 28, 31, 32, 38, 45, 46, 59, 63, 72, 74, 76, 83, 97, 103, 115, 116, 117, 118, 122, 123, 125, 132, 170, 171, 172, 189, 198, 200, 202, 204, 206, 207, 215, 217, 218, 221, 222, 229, 235, 236, 238, 239, 243, 248, 256, 258, 259, 262, 264, 265, 268, 270, 271, 279, 284, 292, 293, 300, 301, 308, 310, 312, 320, 321, 329, 342, 350, 351, 352, 366, 367, 373, 374, 377, 379, 381, 383, 384, 386, 387, 393, 396, 400, 403, 406, 410, 413, 414, 416, 420, 422, 427, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 486, 487, 488, 489, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 694, 695, 696, 697, 699, 705, 706, 710, 728, 729, 738, 775, 776, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 807, 809, 813, 817, 821, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 917, 918, 919, 922, 926, 927, 928, 930, 942, 943, 944, 946, 949, 956, 970, 974, 975, 980, 982, 986, 987, 993, 994, 996, 1002, 1007, 1016, 1017, 1019, 1021, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "dtype": [4, 8, 10, 11, 13, 18, 49, 50, 54, 66, 71, 72, 122, 124, 126, 127, 128, 153, 154, 155, 165, 170, 171, 202, 218, 243, 246, 259, 265, 269, 279, 291, 297, 312, 319, 320, 322, 326, 359, 373, 374, 379, 381, 391, 393, 402, 407, 410, 421, 424, 439, 440, 444, 445, 446, 447, 448, 450, 461, 463, 464, 466, 469, 471, 485, 486, 487, 488, 493, 494, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 511, 519, 539, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 582, 583, 585, 586, 588, 590, 591, 599, 603, 624, 625, 626, 627, 629, 630, 637, 638, 641, 642, 643, 649, 653, 654, 657, 658, 659, 660, 661, 662, 668, 670, 672, 694, 696, 702, 711, 712, 727, 734, 737, 751, 782, 801, 819, 821, 822, 834, 838, 839, 841, 849, 863, 869, 871, 872, 878, 879, 892, 900, 901, 902, 903, 904, 906, 907, 908, 909, 915, 916, 918, 919, 951, 961, 962, 963, 964, 967, 973, 976, 996, 999, 1001, 1012, 1029, 1031, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "int64": [4, 13, 14, 55, 72, 170, 171, 279, 312, 359, 393, 414, 424, 439, 445, 447, 585, 637, 711, 712, 834, 863, 1036, 1039, 1041, 1043, 1044, 1045], "cannot": [4, 13, 41, 57, 76, 83, 96, 101, 120, 170, 171, 184, 200, 218, 236, 306, 337, 345, 367, 378, 380, 385, 393, 394, 406, 407, 408, 410, 411, 413, 414, 416, 462, 518, 535, 536, 537, 540, 544, 607, 610, 611, 612, 614, 616, 617, 619, 620, 622, 648, 652, 679, 689, 708, 714, 774, 798, 799, 845, 846, 848, 849, 850, 858, 859, 868, 869, 880, 916, 918, 919, 975, 976, 980, 982, 983, 987, 992, 996, 1001, 1002, 1007, 1010, 1016, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "train": [4, 5, 6, 7, 8, 10, 11, 13, 17, 25, 27, 28, 31, 32, 33, 34, 57, 59, 65, 71, 72, 76, 86, 87, 96, 99, 101, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 129, 132, 133, 134, 138, 146, 152, 153, 154, 157, 158, 159, 160, 161, 167, 169, 170, 171, 172, 173, 176, 183, 184, 186, 188, 189, 191, 192, 193, 195, 196, 200, 201, 202, 207, 208, 209, 212, 214, 215, 218, 229, 232, 234, 238, 248, 250, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 282, 284, 287, 290, 291, 292, 293, 295, 297, 300, 301, 302, 306, 308, 310, 311, 316, 319, 324, 325, 326, 329, 330, 331, 333, 336, 344, 345, 352, 354, 357, 358, 360, 361, 365, 366, 367, 371, 374, 376, 381, 384, 391, 392, 393, 400, 402, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 418, 434, 437, 438, 440, 441, 444, 446, 448, 449, 450, 451, 456, 462, 466, 467, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 490, 493, 494, 495, 497, 501, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 624, 625, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 685, 686, 688, 689, 693, 700, 737, 784, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 863, 864, 867, 868, 871, 872, 876, 877, 878, 879, 883, 884, 886, 887, 888, 889, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 960, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 996, 1000, 1001, 1002, 1006, 1007, 1008, 1010, 1013, 1016, 1017, 1023, 1025, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "learn": [4, 6, 7, 8, 9, 10, 13, 17, 18, 26, 27, 28, 32, 33, 35, 37, 38, 50, 57, 68, 69, 71, 76, 82, 83, 95, 101, 106, 108, 110, 112, 115, 116, 117, 118, 120, 121, 127, 129, 130, 131, 132, 138, 139, 140, 141, 146, 149, 152, 155, 157, 161, 164, 165, 168, 172, 173, 174, 175, 177, 186, 188, 189, 204, 214, 218, 225, 227, 228, 229, 234, 237, 239, 242, 254, 258, 260, 261, 264, 266, 267, 269, 275, 277, 279, 284, 288, 289, 290, 291, 292, 297, 299, 302, 303, 304, 306, 307, 311, 313, 315, 323, 324, 328, 330, 331, 336, 341, 343, 345, 350, 351, 352, 355, 356, 357, 358, 361, 366, 368, 371, 372, 373, 374, 376, 378, 382, 385, 386, 387, 388, 392, 393, 395, 397, 400, 401, 402, 403, 404, 406, 407, 408, 410, 412, 414, 415, 416, 420, 421, 423, 424, 425, 428, 429, 430, 434, 435, 436, 439, 440, 443, 444, 446, 447, 454, 456, 461, 462, 464, 465, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 505, 506, 507, 509, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 568, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 596, 599, 600, 607, 608, 611, 616, 619, 623, 625, 627, 629, 631, 635, 637, 638, 640, 641, 642, 643, 645, 649, 654, 655, 665, 666, 673, 674, 675, 677, 685, 686, 687, 688, 689, 693, 697, 698, 699, 705, 710, 714, 715, 718, 719, 720, 722, 731, 737, 738, 739, 744, 752, 774, 775, 776, 781, 784, 791, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 832, 833, 834, 835, 836, 837, 840, 842, 847, 854, 855, 856, 857, 858, 859, 861, 863, 865, 868, 870, 871, 872, 873, 876, 877, 878, 879, 882, 890, 891, 893, 894, 895, 896, 898, 899, 900, 903, 906, 907, 908, 909, 921, 929, 930, 952, 953, 954, 975, 976, 978, 979, 980, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 997, 1000, 1001, 1002, 1003, 1005, 1009, 1014, 1016, 1017, 1023, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "simplifi": [4, 72, 188, 337, 378, 380, 384, 406, 409, 512, 559, 857, 858, 986, 988, 996], "represent": [4, 12, 18, 21, 27, 54, 72, 73, 96, 99, 117, 119, 120, 128, 129, 130, 132, 135, 146, 157, 170, 172, 176, 181, 184, 221, 222, 223, 230, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 279, 294, 303, 312, 318, 320, 321, 327, 351, 352, 359, 361, 371, 373, 382, 393, 400, 406, 407, 411, 412, 413, 460, 528, 532, 534, 537, 539, 545, 563, 585, 587, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 627, 640, 643, 649, 655, 656, 657, 659, 663, 664, 665, 673, 674, 675, 765, 793, 794, 801, 817, 854, 867, 871, 872, 876, 878, 891, 898, 910, 912, 915, 931, 952, 978, 983, 985, 987, 989, 990, 991, 993, 996, 1001, 1007, 1012, 1013, 1015, 1019, 1021, 1028, 1029, 1032, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "collaps": [4, 171, 239, 306, 337, 391], "those": [4, 7, 12, 18, 20, 56, 61, 72, 113, 125, 149, 161, 169, 171, 172, 173, 200, 202, 204, 218, 226, 233, 236, 238, 239, 252, 255, 261, 264, 267, 279, 301, 306, 311, 334, 337, 350, 351, 352, 365, 366, 373, 379, 381, 383, 384, 385, 386, 391, 393, 394, 396, 403, 404, 406, 410, 411, 413, 414, 416, 445, 447, 458, 461, 465, 491, 492, 493, 500, 554, 555, 561, 562, 566, 567, 578, 689, 694, 709, 715, 732, 795, 798, 799, 807, 809, 816, 840, 841, 842, 844, 846, 847, 848, 849, 850, 898, 899, 900, 903, 906, 907, 908, 909, 946, 975, 978, 982, 985, 986, 988, 989, 990, 993, 996, 1002, 1005, 1006, 1010, 1012, 1021, 1028, 1031, 1034, 1035, 1036, 1041, 1042, 1043, 1044], "replac": [4, 26, 81, 100, 112, 152, 159, 164, 171, 186, 201, 264, 284, 308, 313, 318, 339, 377, 379, 381, 383, 385, 388, 393, 400, 407, 410, 413, 414, 438, 442, 461, 500, 512, 552, 553, 560, 579, 585, 586, 587, 588, 604, 605, 624, 627, 631, 636, 638, 724, 781, 801, 807, 809, 817, 857, 858, 861, 881, 894, 901, 957, 960, 975, 976, 978, 982, 986, 996, 1001, 1002, 1006, 1007, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045], "to_replac": [4, 171], "valu": [4, 5, 7, 11, 12, 13, 14, 17, 18, 20, 21, 22, 27, 28, 33, 38, 41, 43, 45, 47, 54, 56, 61, 62, 63, 67, 72, 74, 76, 79, 81, 83, 96, 99, 107, 110, 112, 114, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 131, 132, 144, 145, 148, 152, 155, 156, 158, 160, 166, 169, 170, 171, 172, 173, 176, 179, 180, 182, 184, 186, 188, 189, 190, 191, 193, 198, 200, 201, 202, 204, 206, 215, 218, 220, 224, 227, 229, 230, 231, 232, 233, 234, 235, 239, 242, 243, 246, 252, 255, 257, 259, 261, 262, 264, 266, 267, 268, 270, 272, 273, 274, 276, 284, 287, 297, 300, 301, 303, 306, 307, 308, 309, 310, 311, 312, 313, 318, 328, 337, 341, 342, 345, 350, 351, 352, 355, 361, 365, 366, 367, 368, 371, 372, 373, 374, 376, 380, 381, 382, 384, 385, 386, 388, 391, 392, 393, 395, 396, 397, 403, 404, 405, 406, 407, 408, 409, 410, 414, 415, 416, 417, 418, 419, 420, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 487, 488, 490, 493, 494, 495, 498, 505, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 765, 767, 770, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 809, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 913, 915, 916, 917, 918, 919, 922, 923, 924, 925, 927, 935, 937, 943, 946, 947, 948, 949, 950, 954, 962, 963, 964, 975, 978, 979, 980, 981, 982, 983, 985, 987, 988, 989, 990, 991, 992, 993, 997, 999, 1000, 1001, 1008, 1010, 1012, 1017, 1019, 1020, 1021, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "inplac": [4, 171, 218, 239, 273, 451, 479, 480, 481, 482, 853, 861, 864, 867, 868, 870, 874, 875, 876, 878, 881, 883, 884, 885, 886, 887, 888, 889, 959, 962, 963, 964, 968, 969, 1037], "1422": 4, "expect": [4, 5, 10, 13, 25, 38, 45, 54, 87, 93, 101, 112, 115, 117, 119, 122, 125, 146, 152, 158, 167, 168, 172, 174, 186, 191, 200, 201, 202, 204, 208, 218, 233, 236, 239, 240, 247, 248, 251, 252, 268, 284, 311, 345, 350, 351, 361, 365, 366, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 397, 402, 404, 406, 407, 408, 410, 413, 414, 415, 429, 461, 462, 464, 465, 466, 479, 480, 481, 493, 520, 529, 533, 535, 538, 549, 551, 552, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 565, 567, 569, 582, 583, 585, 586, 588, 592, 594, 603, 608, 624, 629, 630, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 671, 672, 675, 676, 692, 701, 702, 713, 731, 784, 790, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 844, 848, 849, 850, 851, 856, 859, 864, 871, 872, 875, 878, 879, 888, 889, 896, 898, 899, 900, 901, 902, 903, 904, 907, 909, 949, 975, 982, 985, 986, 988, 992, 996, 1000, 1001, 1002, 1009, 1017, 1020, 1021, 1023, 1028, 1029, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "balanc": [4, 6, 13, 54, 67, 112, 167, 204, 205, 254, 264, 277, 306, 367, 391, 393, 404, 410, 411, 413, 499, 512, 531, 537, 538, 544, 554, 558, 561, 637, 655, 656, 663, 665, 671, 672, 673, 700, 705, 725, 739, 778, 783, 795, 796, 813, 858, 898, 900, 903, 906, 908, 923, 924, 975, 1001, 1002, 1017, 1028, 1030, 1033, 1034, 1037, 1038, 1042], "fall": [4, 13, 125, 159, 260, 261, 379, 381, 405, 406, 414, 431, 443, 444, 505, 506, 723, 724, 790, 875, 887, 985, 986, 996, 1012, 1020, 1037], "4496": [4, 13], "4409": [4, 13], "4242": [4, 13], "winter": [4, 13], "4232": [4, 13], "order": [4, 14, 21, 25, 48, 56, 65, 66, 73, 79, 90, 106, 120, 121, 122, 126, 141, 157, 169, 170, 173, 176, 189, 193, 196, 200, 201, 206, 214, 218, 223, 233, 236, 239, 243, 248, 256, 259, 261, 268, 282, 303, 306, 311, 312, 313, 318, 319, 345, 350, 352, 361, 365, 366, 374, 379, 381, 384, 385, 388, 393, 396, 397, 400, 406, 407, 408, 410, 411, 412, 413, 414, 416, 418, 437, 440, 443, 444, 446, 447, 452, 453, 454, 456, 461, 485, 486, 487, 492, 494, 512, 531, 532, 536, 537, 538, 540, 544, 548, 550, 552, 553, 554, 555, 556, 560, 561, 562, 563, 564, 578, 585, 588, 590, 591, 594, 603, 604, 605, 607, 619, 624, 628, 637, 655, 656, 662, 673, 682, 683, 685, 686, 690, 694, 696, 697, 699, 701, 709, 710, 715, 722, 725, 726, 734, 736, 737, 738, 750, 752, 774, 778, 779, 780, 783, 784, 785, 790, 795, 796, 798, 799, 800, 802, 806, 809, 813, 814, 819, 826, 827, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 848, 855, 858, 869, 871, 872, 873, 877, 878, 879, 882, 883, 884, 886, 887, 888, 889, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 918, 919, 924, 935, 950, 976, 982, 983, 986, 987, 989, 990, 996, 999, 1000, 1001, 1002, 1007, 1016, 1018, 1019, 1021, 1028, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "sensit": [4, 45, 56, 81, 82, 115, 125, 171, 202, 203, 204, 229, 306, 337, 366, 367, 394, 408, 413, 449, 459, 689, 709, 710, 784, 878, 981, 982, 983, 985, 986, 990, 992, 1000, 1001, 1012, 1020, 1032], "splitter": [4, 322, 393, 397, 410, 434, 469, 561, 562, 564, 565, 591, 599, 644, 648, 650, 652, 656, 658, 660, 662, 670, 672, 795, 797, 798, 799, 800, 801, 809, 810, 811, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 829, 832, 906, 907, 908, 909, 1002, 1007, 1034, 1035, 1036, 1037, 1044, 1045], "evalu": [4, 5, 6, 10, 11, 25, 33, 37, 50, 56, 69, 72, 73, 99, 112, 119, 120, 122, 123, 125, 145, 155, 167, 173, 176, 180, 189, 202, 207, 218, 228, 244, 254, 255, 258, 259, 261, 264, 266, 267, 268, 270, 272, 273, 275, 277, 282, 293, 297, 311, 313, 318, 322, 337, 341, 350, 361, 368, 372, 374, 381, 385, 393, 395, 405, 407, 414, 415, 416, 444, 446, 461, 463, 485, 488, 489, 490, 493, 506, 517, 533, 548, 558, 559, 560, 564, 565, 588, 591, 599, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 628, 629, 630, 631, 644, 650, 656, 670, 672, 694, 696, 698, 699, 700, 701, 702, 708, 710, 711, 712, 714, 715, 722, 723, 732, 733, 738, 750, 751, 752, 753, 782, 791, 793, 794, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 824, 825, 829, 835, 838, 839, 844, 856, 858, 859, 865, 868, 871, 872, 876, 877, 878, 883, 884, 886, 887, 888, 889, 900, 903, 906, 921, 929, 960, 978, 982, 984, 988, 989, 992, 993, 994, 997, 1000, 1002, 1006, 1010, 1012, 1013, 1016, 1017, 1019, 1022, 1023, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041], "realist": [4, 8, 263, 270, 271, 334, 374, 986], "gap": [4, 13, 350, 374, 410, 468, 469, 475, 585, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 816, 906, 907, 908, 909, 982, 983, 1036, 1040, 1042], "between": [4, 5, 8, 9, 11, 12, 13, 21, 35, 38, 39, 40, 41, 43, 44, 54, 61, 62, 67, 86, 91, 99, 101, 105, 112, 115, 118, 122, 125, 144, 152, 157, 158, 160, 167, 169, 170, 171, 172, 179, 184, 186, 191, 195, 196, 200, 201, 202, 204, 205, 208, 218, 221, 229, 234, 236, 239, 254, 257, 260, 261, 262, 263, 264, 266, 267, 268, 270, 277, 279, 282, 286, 290, 291, 293, 294, 306, 311, 313, 319, 328, 337, 341, 345, 350, 351, 352, 359, 361, 365, 366, 374, 379, 381, 388, 391, 392, 393, 394, 397, 400, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 427, 437, 438, 441, 442, 443, 447, 449, 450, 451, 453, 454, 455, 460, 466, 467, 468, 469, 470, 471, 472, 473, 488, 490, 491, 492, 493, 494, 495, 499, 511, 512, 518, 521, 524, 531, 533, 534, 535, 536, 537, 538, 543, 544, 546, 550, 551, 556, 557, 559, 560, 561, 562, 581, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 601, 602, 603, 604, 605, 606, 608, 617, 624, 629, 630, 631, 636, 639, 642, 643, 644, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 673, 675, 676, 678, 681, 685, 687, 689, 691, 692, 693, 696, 698, 700, 701, 702, 704, 706, 707, 711, 712, 713, 714, 716, 720, 721, 722, 725, 726, 727, 730, 732, 733, 739, 748, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 782, 783, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 800, 804, 812, 813, 814, 815, 816, 823, 824, 826, 828, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 862, 865, 866, 868, 869, 871, 872, 875, 876, 877, 879, 884, 887, 888, 892, 898, 899, 903, 906, 907, 908, 909, 911, 932, 943, 944, 975, 978, 980, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1003, 1007, 1019, 1020, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "side": [4, 17, 28, 60, 125, 193, 204, 218, 223, 232, 306, 341, 350, 361, 374, 391, 404, 407, 410, 411, 414, 512, 982, 983, 986, 988, 1001, 1037], "split": [4, 5, 6, 11, 13, 15, 18, 25, 27, 32, 33, 71, 101, 112, 117, 118, 119, 121, 124, 125, 126, 127, 128, 138, 145, 149, 169, 170, 173, 184, 195, 196, 200, 203, 208, 218, 230, 236, 239, 247, 248, 255, 256, 259, 261, 266, 268, 271, 279, 287, 293, 300, 302, 307, 308, 313, 320, 322, 328, 337, 350, 352, 359, 374, 379, 386, 392, 393, 396, 397, 404, 406, 411, 413, 414, 415, 434, 439, 440, 469, 470, 476, 477, 494, 528, 534, 536, 539, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 585, 586, 588, 591, 599, 644, 648, 650, 652, 658, 660, 662, 670, 672, 692, 701, 702, 714, 727, 733, 753, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 832, 838, 839, 855, 856, 879, 883, 884, 886, 887, 888, 889, 906, 907, 908, 909, 957, 975, 978, 982, 983, 989, 992, 993, 994, 996, 1000, 1002, 1007, 1012, 1016, 1017, 1019, 1020, 1021, 1023, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "limit": [4, 8, 18, 38, 43, 58, 67, 83, 112, 119, 120, 126, 132, 164, 170, 171, 172, 179, 200, 201, 217, 233, 268, 308, 312, 319, 345, 352, 361, 366, 380, 381, 384, 391, 393, 394, 404, 406, 409, 411, 415, 443, 460, 465, 556, 557, 558, 559, 629, 647, 655, 656, 676, 679, 680, 685, 774, 816, 846, 848, 849, 850, 871, 872, 896, 900, 901, 902, 903, 904, 954, 975, 982, 983, 985, 986, 993, 994, 996, 1007, 1012, 1023, 1036, 1038, 1041, 1042, 1045], "cv": [4, 12, 13, 25, 26, 27, 55, 72, 73, 74, 75, 79, 104, 118, 122, 124, 138, 139, 148, 164, 165, 170, 189, 199, 202, 257, 259, 260, 261, 262, 263, 264, 266, 267, 271, 275, 279, 312, 321, 337, 345, 392, 393, 397, 404, 410, 413, 415, 434, 469, 564, 565, 591, 599, 644, 648, 650, 652, 656, 658, 660, 662, 670, 672, 795, 797, 798, 799, 800, 801, 809, 810, 811, 812, 814, 815, 817, 818, 819, 820, 821, 822, 823, 825, 829, 832, 879, 906, 907, 975, 978, 981, 982, 986, 996, 1007, 1016, 1017, 1021, 1030, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1045], "fold": [4, 68, 75, 79, 118, 121, 124, 138, 148, 170, 189, 248, 256, 257, 259, 261, 262, 264, 271, 313, 328, 345, 361, 374, 379, 382, 383, 392, 393, 397, 406, 415, 434, 469, 490, 533, 564, 565, 591, 599, 644, 648, 650, 652, 656, 658, 660, 662, 670, 672, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 829, 832, 879, 900, 903, 975, 982, 986, 996, 1001, 1016, 1028, 1030, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1045], "1000": [4, 7, 8, 15, 27, 32, 38, 51, 73, 76, 86, 106, 115, 117, 119, 124, 125, 129, 134, 140, 144, 158, 176, 186, 192, 203, 223, 232, 233, 235, 246, 250, 259, 261, 267, 270, 272, 289, 291, 307, 310, 317, 318, 320, 322, 338, 339, 346, 350, 351, 384, 385, 392, 404, 414, 434, 470, 476, 477, 528, 529, 534, 539, 540, 542, 543, 545, 550, 561, 629, 643, 644, 648, 649, 650, 652, 657, 658, 659, 660, 663, 664, 665, 669, 673, 674, 675, 684, 689, 695, 698, 760, 875, 887, 893, 898, 899, 975, 979, 1001, 1016, 1019, 1035, 1037], "datapoint": [4, 43, 53, 57, 156, 159, 183, 234, 235, 239, 256, 261, 282, 343, 416, 443, 499, 554, 555, 556, 557, 561, 562, 563, 608, 906, 907, 908, 909, 979], "should": [4, 5, 6, 8, 9, 13, 15, 18, 26, 28, 32, 38, 54, 110, 112, 115, 118, 122, 125, 149, 164, 170, 176, 179, 180, 184, 200, 202, 218, 229, 234, 235, 236, 239, 261, 264, 267, 268, 270, 279, 284, 307, 308, 313, 327, 337, 345, 351, 361, 365, 366, 367, 374, 377, 378, 379, 381, 383, 384, 386, 387, 388, 392, 393, 396, 397, 400, 402, 404, 406, 408, 410, 411, 413, 414, 415, 416, 417, 418, 420, 434, 437, 439, 440, 441, 442, 444, 446, 447, 449, 451, 454, 455, 456, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 493, 500, 505, 506, 513, 518, 520, 521, 524, 529, 530, 531, 533, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 582, 583, 585, 586, 587, 588, 590, 591, 594, 599, 604, 605, 607, 608, 617, 624, 625, 626, 628, 629, 630, 632, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 681, 684, 686, 687, 688, 689, 690, 691, 692, 693, 698, 706, 723, 724, 738, 762, 767, 770, 774, 775, 776, 777, 778, 781, 784, 785, 788, 796, 797, 802, 803, 804, 805, 812, 813, 814, 815, 820, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 877, 878, 879, 881, 885, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 918, 922, 924, 927, 935, 943, 947, 952, 957, 960, 961, 962, 963, 964, 965, 966, 967, 975, 976, 980, 981, 982, 983, 986, 987, 989, 991, 992, 993, 996, 999, 1000, 1001, 1002, 1007, 1009, 1010, 1017, 1021, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "enough": [4, 13, 38, 45, 63, 118, 121, 152, 164, 171, 172, 189, 200, 234, 237, 239, 310, 350, 352, 361, 377, 379, 383, 394, 404, 405, 406, 408, 410, 413, 564, 565, 586, 795, 798, 799, 801, 809, 822, 935, 975, 980, 983, 985, 992, 996, 1001, 1006, 1010, 1034, 1044, 1045], "quantifi": [4, 38, 50, 79, 157, 218, 268, 381, 393, 401, 405, 570, 861, 981, 994, 996, 1023], "repres": [4, 8, 10, 12, 13, 15, 21, 27, 33, 35, 45, 49, 50, 51, 54, 92, 96, 98, 105, 106, 119, 120, 128, 170, 179, 187, 192, 202, 204, 205, 209, 223, 225, 234, 239, 249, 255, 258, 261, 264, 268, 289, 308, 341, 350, 352, 359, 367, 371, 374, 376, 381, 391, 392, 393, 394, 400, 404, 406, 410, 411, 412, 413, 414, 415, 435, 439, 443, 449, 460, 467, 468, 469, 470, 471, 472, 473, 485, 487, 488, 489, 491, 493, 495, 497, 498, 499, 501, 502, 507, 524, 531, 533, 535, 537, 538, 544, 552, 560, 578, 585, 588, 626, 629, 631, 637, 673, 675, 694, 696, 698, 726, 739, 785, 795, 797, 808, 809, 812, 815, 821, 823, 824, 827, 828, 834, 840, 841, 842, 844, 845, 846, 848, 849, 850, 855, 856, 865, 871, 872, 895, 898, 899, 918, 919, 939, 944, 976, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 994, 996, 997, 999, 1000, 1002, 1012, 1017, 1018, 1020, 1034, 1036, 1039, 1040, 1043], "bit": [4, 13, 49, 54, 79, 99, 198, 202, 279, 306, 337, 351, 361, 365, 374, 377, 413, 414, 579, 586, 655, 828, 918, 919, 983, 987, 1005, 1014, 1021, 1028, 1031, 1034, 1036, 1037, 1040, 1041, 1042], "less": [4, 5, 8, 53, 54, 61, 93, 96, 99, 107, 112, 119, 125, 126, 152, 159, 170, 182, 184, 200, 202, 204, 235, 239, 247, 249, 261, 262, 270, 272, 275, 307, 310, 311, 312, 318, 320, 341, 350, 351, 361, 365, 367, 374, 379, 381, 391, 393, 406, 410, 411, 413, 414, 418, 436, 438, 440, 442, 445, 447, 449, 454, 457, 459, 460, 479, 480, 481, 493, 512, 528, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 587, 593, 616, 624, 631, 644, 658, 673, 675, 689, 698, 718, 719, 720, 721, 732, 748, 760, 775, 776, 781, 791, 793, 794, 797, 798, 799, 805, 822, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 861, 873, 875, 876, 878, 881, 887, 888, 898, 899, 906, 907, 908, 909, 924, 938, 975, 976, 978, 979, 980, 983, 985, 986, 989, 991, 996, 1000, 1001, 1002, 1006, 1019, 1021, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1038, 1042, 1043, 1045], "than": [4, 5, 7, 11, 12, 14, 20, 28, 31, 32, 41, 45, 48, 54, 56, 73, 76, 81, 83, 87, 93, 96, 99, 101, 104, 112, 114, 115, 117, 118, 119, 121, 122, 125, 149, 152, 158, 161, 164, 170, 171, 172, 176, 179, 184, 186, 189, 200, 202, 206, 216, 217, 218, 225, 229, 235, 236, 237, 239, 247, 258, 259, 261, 262, 263, 264, 267, 270, 279, 282, 284, 290, 291, 303, 306, 310, 311, 312, 313, 318, 320, 322, 326, 341, 350, 351, 352, 361, 365, 366, 367, 373, 374, 375, 378, 379, 381, 384, 385, 387, 393, 394, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 449, 451, 454, 457, 460, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 490, 491, 493, 506, 511, 512, 520, 528, 531, 532, 533, 534, 535, 537, 538, 539, 541, 544, 545, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 624, 625, 627, 631, 637, 639, 640, 641, 642, 643, 644, 649, 650, 652, 655, 656, 657, 658, 659, 660, 663, 664, 665, 668, 669, 671, 673, 674, 675, 676, 679, 684, 689, 691, 693, 701, 702, 709, 717, 718, 719, 720, 731, 732, 735, 760, 775, 776, 777, 779, 781, 791, 793, 794, 795, 798, 799, 805, 809, 814, 816, 819, 820, 821, 822, 823, 826, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 861, 871, 872, 873, 875, 876, 878, 881, 887, 888, 892, 895, 898, 899, 900, 903, 904, 906, 907, 908, 909, 910, 924, 935, 937, 938, 943, 949, 957, 960, 975, 976, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 1000, 1001, 1002, 1006, 1007, 1012, 1016, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "half": [4, 25, 99, 234, 238, 259, 261, 273, 374, 375, 411, 460, 519, 559, 590, 594, 599, 766, 857, 865, 986, 989, 1002], "contigu": [4, 22, 381, 391, 403, 410, 414, 440, 444, 446, 456, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 777, 814, 838, 839, 898, 900, 901, 902, 903, 904, 1001, 1031, 1038, 1042], "model_select": [4, 5, 6, 7, 10, 13, 25, 26, 28, 32, 33, 55, 72, 73, 74, 75, 76, 79, 87, 101, 104, 112, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 131, 132, 138, 139, 145, 146, 148, 152, 164, 165, 167, 169, 170, 172, 173, 176, 184, 195, 200, 202, 207, 208, 215, 216, 218, 230, 235, 239, 241, 242, 243, 248, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 286, 287, 288, 292, 293, 300, 302, 303, 308, 310, 311, 312, 313, 316, 317, 318, 321, 328, 329, 337, 340, 345, 355, 359, 361, 368, 379, 381, 384, 392, 393, 397, 402, 407, 410, 413, 434, 435, 555, 557, 564, 565, 576, 656, 694, 695, 697, 699, 738, 826, 829, 847, 855, 856, 858, 906, 907, 908, 909, 954, 975, 976, 981, 986, 988, 989, 994, 996, 1001, 1007, 1016, 1017, 1021, 1025, 1032, 1034, 1035], "timeseriessplit": [4, 13, 184, 256, 410, 1034, 1035, 1040], "ts_cv": [4, 13], "n_split": [4, 13, 118, 124, 164, 165, 170, 248, 256, 261, 263, 266, 271, 279, 328, 337, 345, 361, 410, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816, 821, 1016, 1034, 1036], "5": [4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 25, 26, 27, 32, 33, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 68, 71, 72, 74, 75, 76, 80, 81, 82, 83, 86, 87, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 110, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 138, 141, 144, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 194, 195, 197, 198, 200, 201, 202, 203, 206, 208, 211, 212, 213, 214, 215, 216, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 256, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 272, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 300, 301, 302, 303, 306, 308, 309, 310, 311, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 374, 376, 377, 379, 381, 384, 385, 391, 392, 393, 396, 398, 399, 404, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 434, 435, 436, 437, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 455, 459, 461, 463, 466, 469, 475, 479, 480, 481, 482, 487, 490, 491, 501, 513, 514, 518, 520, 521, 523, 525, 528, 530, 531, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 549, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 579, 589, 590, 591, 594, 599, 607, 610, 611, 612, 613, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 635, 638, 640, 641, 642, 643, 644, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 662, 663, 664, 665, 667, 669, 673, 674, 675, 677, 678, 681, 685, 686, 688, 689, 692, 693, 696, 700, 702, 704, 706, 709, 710, 718, 719, 720, 722, 723, 724, 726, 731, 734, 735, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 765, 777, 778, 780, 781, 783, 784, 785, 786, 787, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 855, 856, 857, 858, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 877, 878, 879, 886, 887, 892, 898, 899, 900, 901, 902, 903, 904, 906, 908, 924, 933, 934, 935, 937, 939, 940, 949, 950, 954, 957, 975, 976, 978, 981, 982, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 998, 1000, 1001, 1004, 1008, 1012, 1016, 1017, 1019, 1020, 1021, 1023, 1024, 1026, 1029, 1030, 1031, 1033, 1035, 1036, 1038, 1042, 1043, 1044], "48": [4, 13, 46, 77, 86, 103, 157, 243, 312, 376, 385, 406, 507, 594, 696, 742, 822, 833, 975, 988, 996, 1024], "max_train_s": [4, 13, 410, 816, 1035], "10000": [4, 11, 13, 31, 44, 64, 73, 74, 126, 138, 186, 193, 200, 208, 216, 233, 235, 274, 318, 334, 336, 361, 367, 413, 414, 558, 559, 641, 676, 875, 904, 998, 1017, 1021], "test_siz": [4, 5, 6, 10, 13, 25, 26, 28, 32, 33, 72, 117, 123, 124, 126, 127, 131, 169, 176, 184, 195, 200, 207, 208, 215, 216, 258, 259, 263, 268, 270, 274, 282, 292, 293, 300, 302, 303, 308, 310, 311, 318, 337, 345, 361, 384, 410, 695, 797, 812, 815, 816, 824, 826, 847, 976, 988, 989, 1016, 1017, 1028, 1029, 1034, 1035, 1040], "manual": [4, 47, 56, 170, 171, 173, 201, 211, 263, 284, 328, 335, 350, 352, 365, 366, 374, 379, 383, 384, 392, 396, 406, 410, 411, 412, 434, 446, 564, 848, 871, 877, 975, 980, 981, 982, 985, 986, 989, 996, 1007, 1012, 1013, 1021, 1036, 1038, 1044], "inspect": [4, 9, 31, 32, 35, 57, 62, 114, 119, 126, 128, 129, 133, 146, 152, 157, 158, 170, 171, 172, 173, 183, 192, 209, 214, 240, 261, 264, 273, 287, 292, 295, 311, 316, 317, 318, 319, 321, 333, 334, 335, 336, 338, 339, 341, 350, 356, 366, 368, 381, 393, 406, 407, 413, 414, 461, 550, 551, 554, 555, 556, 557, 561, 562, 563, 827, 858, 859, 906, 907, 908, 909, 974, 986, 987, 990, 993, 994, 1001, 1006, 1021, 1023, 1031], "variou": [4, 12, 37, 38, 56, 59, 61, 62, 69, 82, 86, 99, 167, 170, 178, 210, 219, 220, 221, 222, 227, 233, 279, 310, 317, 350, 352, 359, 361, 365, 373, 374, 375, 376, 379, 381, 384, 392, 394, 404, 405, 406, 408, 434, 438, 469, 499, 511, 512, 522, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 591, 599, 644, 648, 650, 652, 655, 658, 660, 662, 663, 665, 670, 672, 673, 688, 689, 696, 795, 798, 799, 801, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 858, 898, 899, 975, 976, 983, 986, 989, 993, 996, 1000, 1002, 1006, 1010, 1020, 1021, 1028, 1031, 1032], "check": [4, 5, 8, 18, 47, 54, 57, 100, 110, 118, 132, 152, 167, 169, 171, 172, 186, 188, 189, 200, 222, 236, 247, 254, 270, 277, 279, 319, 327, 359, 365, 366, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 389, 391, 393, 396, 397, 400, 405, 407, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 470, 471, 472, 473, 479, 480, 481, 482, 499, 505, 506, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 545, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 600, 607, 608, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674, 675, 676, 677, 678, 684, 685, 686, 687, 688, 689, 690, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 918, 919, 920, 929, 930, 941, 942, 943, 947, 948, 970, 971, 972, 974, 981, 982, 983, 986, 1001, 1002, 1007, 1010, 1023, 1028, 1029, 1031, 1035, 1039, 1040, 1041, 1042, 1043, 1045], "all_split": [4, 13], "list": [4, 8, 10, 12, 13, 14, 17, 18, 20, 21, 26, 33, 41, 45, 50, 63, 71, 106, 107, 116, 118, 124, 132, 139, 173, 204, 239, 240, 256, 259, 261, 262, 264, 265, 270, 274, 293, 308, 312, 316, 317, 318, 319, 320, 321, 322, 329, 340, 351, 352, 367, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 404, 406, 407, 410, 412, 413, 414, 429, 431, 434, 447, 453, 454, 461, 462, 463, 468, 469, 475, 479, 480, 481, 485, 486, 487, 488, 489, 493, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 520, 529, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 586, 588, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 629, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 678, 681, 683, 689, 693, 694, 696, 707, 709, 710, 713, 715, 721, 729, 738, 742, 750, 774, 777, 779, 784, 790, 793, 794, 795, 798, 799, 801, 806, 807, 809, 817, 819, 820, 821, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 862, 866, 869, 871, 872, 877, 879, 895, 899, 901, 904, 906, 907, 908, 909, 912, 914, 918, 919, 920, 924, 926, 927, 928, 930, 938, 939, 941, 952, 957, 960, 970, 975, 976, 982, 986, 988, 989, 990, 993, 994, 997, 1002, 1004, 1006, 1007, 1010, 1012, 1016, 1018, 1021, 1024, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "train_0": 4, "test_0": 4, "iloc": [4, 13, 132, 170, 171, 218, 261, 287], "12379": 4, "25": [4, 5, 6, 7, 9, 10, 11, 13, 20, 25, 27, 43, 46, 55, 56, 81, 86, 92, 102, 104, 106, 116, 125, 145, 146, 153, 164, 170, 180, 190, 204, 215, 226, 229, 239, 248, 261, 297, 300, 303, 306, 308, 321, 325, 326, 345, 348, 350, 353, 358, 361, 365, 385, 410, 413, 414, 441, 474, 498, 501, 567, 594, 675, 730, 792, 812, 824, 850, 868, 873, 875, 876, 879, 887, 888, 890, 891, 982, 986, 987, 989, 996, 1017, 1028, 1030, 1036, 1039], "760": [4, 149, 150], "68": [4, 13, 161, 191, 303, 325, 406, 532, 538, 587, 1028], "27": [4, 6, 13, 20, 32, 48, 55, 226, 325, 326, 346, 376, 406, 414, 521, 710, 784, 785, 879, 899, 986, 996, 1020, 1028, 1030], "9993": [4, 650, 652, 1036], "12380": 4, "32": [4, 5, 13, 52, 93, 169, 172, 238, 239, 320, 326, 373, 377, 384, 393, 403, 413, 414, 442, 561, 562, 579, 586, 631, 673, 877, 879, 918, 919, 951, 994, 996, 1020, 1028, 1031, 1034, 1036, 1037, 1040, 1041, 1042], "000": [4, 5, 16, 17, 18, 22, 26, 28, 43, 75, 110, 153, 172, 176, 233, 259, 261, 263, 284, 298, 311, 319, 350, 351, 361, 374, 385, 413, 414, 487, 558, 559, 641, 674, 1000, 1021, 1039], "77": [4, 6, 45, 149, 176, 239, 270, 326, 373, 376, 531, 704], "0028": 4, "12381": 4, "72": [4, 6, 7, 13, 118, 155, 384, 822], "9995": 4, "12382": 4, "240": [4, 45, 994, 1028], "82": [4, 8, 31, 54, 59, 121, 146, 203, 295, 325, 784, 795, 809, 986, 989, 1017, 1028], "9980": [4, 1036], "12383": 4, "13374": 4, "34": [4, 125, 149, 152, 289, 303, 325, 326, 359, 376, 410, 517, 567, 594, 646, 664, 713, 760, 1017, 1028], "44": [4, 99, 150, 157, 170, 171, 174, 184, 279, 288, 777, 879, 899, 902, 986, 993, 1028], "40": [4, 13, 15, 55, 67, 79, 91, 96, 102, 128, 134, 149, 150, 152, 184, 191, 192, 194, 217, 223, 225, 237, 239, 250, 262, 290, 296, 302, 308, 325, 326, 335, 336, 338, 340, 342, 344, 359, 366, 374, 410, 443, 492, 514, 515, 838, 839, 843, 855, 856, 975, 987, 996, 1028, 1029], "150": [4, 6, 91, 93, 116, 125, 138, 222, 226, 229, 274, 341, 345, 376, 410, 415, 501, 599, 819, 820, 821, 986, 1016, 1017, 1018], "53": [4, 54, 239, 329, 406, 413, 532, 538, 788, 789], "15": [4, 6, 7, 10, 12, 13, 14, 15, 16, 31, 32, 35, 41, 45, 54, 55, 62, 63, 67, 74, 75, 81, 83, 93, 99, 106, 116, 118, 121, 122, 125, 144, 146, 148, 152, 156, 164, 169, 170, 171, 189, 197, 202, 214, 218, 223, 226, 229, 248, 249, 256, 264, 266, 269, 272, 273, 275, 288, 292, 300, 301, 306, 308, 310, 322, 326, 335, 337, 340, 344, 347, 356, 373, 374, 379, 392, 410, 413, 414, 437, 451, 487, 494, 528, 534, 552, 553, 595, 641, 649, 658, 660, 665, 673, 675, 689, 737, 813, 827, 850, 879, 975, 981, 982, 983, 986, 989, 990, 996, 1001, 1004, 1012, 1017, 1024, 1026, 1030, 1040, 1042, 1043], "0013": 4, "13375": 4, "39": [4, 13, 108, 149, 239, 243, 314, 374, 376, 377, 383, 406, 414, 492, 907], "49": [4, 13, 47, 69, 149, 204, 239, 373, 374, 376, 384, 406, 447, 454, 710, 722, 752, 760, 793, 795, 879, 986, 996, 1031], "13376": 4, "0012": 4, "13377": 4, "36": [4, 6, 7, 13, 14, 98, 149, 158, 170, 218, 239, 340, 376, 385, 413, 414, 552, 553, 567, 731, 986, 1021, 1028], "08": [4, 45, 51, 99, 108, 136, 166, 170, 171, 184, 303, 314, 376, 528, 540, 542, 560, 638, 655, 795, 855, 856, 877, 992], "910": 4, "42": [4, 5, 6, 13, 21, 25, 26, 27, 28, 32, 45, 47, 57, 79, 86, 98, 104, 112, 119, 120, 122, 125, 126, 128, 132, 145, 146, 165, 170, 172, 173, 176, 179, 189, 192, 194, 195, 202, 206, 207, 208, 214, 215, 217, 221, 222, 223, 229, 234, 235, 236, 239, 242, 260, 262, 265, 284, 290, 291, 292, 300, 306, 307, 308, 309, 311, 313, 316, 318, 320, 328, 335, 337, 350, 351, 361, 366, 381, 384, 385, 393, 397, 406, 410, 413, 414, 417, 434, 441, 485, 489, 521, 528, 534, 541, 554, 555, 562, 563, 564, 565, 567, 674, 793, 797, 822, 824, 838, 839, 843, 847, 850, 890, 891, 893, 894, 895, 908, 909, 989, 996, 1017, 1021, 1024, 1025, 1028], "0015": 4, "13378": 4, "35": [4, 6, 7, 9, 11, 47, 56, 72, 114, 134, 170, 171, 179, 188, 229, 279, 311, 325, 326, 348, 541, 645, 646, 653, 699, 703, 704, 723, 737, 752, 778, 785, 831, 975, 982, 986, 992, 993, 996, 1017, 1021, 1028, 1030], "26": [4, 13, 47, 55, 81, 98, 99, 108, 157, 170, 238, 262, 274, 326, 385, 567, 645, 725, 779, 874, 886, 935, 986, 996, 1028, 1031, 1032, 1040], "47": [4, 13, 161, 192, 196, 374, 490, 491, 532, 538], "16": [4, 5, 13, 20, 28, 44, 51, 52, 55, 67, 75, 81, 96, 99, 144, 171, 193, 199, 200, 201, 215, 218, 221, 222, 223, 226, 234, 238, 263, 264, 265, 288, 303, 306, 310, 316, 341, 351, 357, 374, 376, 377, 385, 392, 396, 398, 399, 410, 411, 414, 439, 468, 469, 475, 494, 499, 531, 532, 567, 586, 592, 593, 604, 605, 636, 647, 648, 651, 652, 653, 654, 679, 680, 808, 813, 824, 873, 899, 907, 975, 982, 986, 996, 1001, 1004, 1012, 1021, 1024, 1026, 1028, 1029, 1033, 1034, 1036, 1037], "9979": 4, "2331": 4, "31": [4, 13, 20, 71, 80, 218, 289, 319, 325, 326, 403, 414, 497, 558, 559, 594, 646, 668, 676, 951, 987, 1028], "060": [4, 195, 219, 747], "0032": 4, "2332": 4, "2333": 4, "78": [4, 8, 54, 93, 176, 218, 270, 308, 326, 490, 491, 650, 652, 661, 662, 795, 801, 822, 986, 1007, 1017], "275": [4, 274, 277, 326, 1031], "2334": 4, "96": [4, 13, 33, 49, 63, 159, 229, 239, 259, 303, 308, 311, 312, 325, 326, 376, 410, 550, 975, 981, 986, 996, 1028], "515": [4, 217, 219], "64": [4, 13, 33, 49, 54, 59, 90, 96, 157, 170, 222, 233, 234, 238, 259, 270, 288, 293, 365, 366, 376, 377, 385, 411, 492, 499, 596, 597, 643, 655, 685, 686, 687, 688, 899, 989, 1018, 1024, 1028, 1030, 1036, 1037, 1040, 1041, 1042], "2335": 4, "12326": 4, "12327": 4, "12328": [4, 1037], "12329": 4, "46": [4, 13, 54, 93, 200, 239, 244, 361, 385, 590, 591, 713, 902, 907, 996, 1024], "12330": [4, 1036], "52": [4, 99, 157, 200, 227, 528, 630, 793, 1028], "last": [4, 21, 45, 59, 90, 123, 125, 170, 179, 200, 201, 208, 213, 229, 252, 264, 272, 273, 311, 318, 320, 328, 355, 365, 374, 377, 381, 383, 384, 387, 393, 396, 406, 407, 414, 418, 435, 439, 444, 456, 461, 465, 512, 530, 556, 557, 558, 559, 580, 581, 584, 590, 591, 594, 607, 679, 680, 682, 683, 694, 695, 697, 698, 699, 704, 778, 793, 794, 798, 799, 814, 838, 839, 843, 858, 859, 863, 871, 877, 913, 938, 961, 975, 981, 982, 983, 985, 987, 990, 1000, 1007, 1012, 1019, 1028, 1035, 1036, 1037, 1042, 1044, 1045], "train_4": 4, "test_4": 4, "16379": 4, "94": [4, 8, 20, 33, 35, 55, 98, 121, 199, 237, 274, 308, 325, 326, 413, 660, 784, 981, 986, 987, 996, 1021, 1028], "665": [4, 234, 244], "16380": 4, "71": [4, 8, 13, 93, 149, 204, 218, 376, 507, 726, 986, 1019, 1024, 1030], "16381": 4, "76": [4, 176, 200, 326, 350, 361, 376, 385, 777, 858, 1019], "16382": 4, "16383": 4, "18": [4, 7, 8, 13, 20, 41, 45, 50, 54, 61, 63, 75, 104, 125, 161, 170, 211, 219, 223, 229, 234, 261, 303, 310, 312, 326, 350, 351, 352, 379, 385, 407, 410, 411, 414, 444, 456, 489, 497, 498, 499, 501, 502, 507, 532, 533, 535, 537, 538, 554, 555, 556, 557, 560, 561, 562, 563, 566, 568, 569, 570, 571, 572, 574, 575, 586, 591, 596, 597, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 643, 646, 655, 656, 668, 711, 715, 727, 730, 731, 737, 739, 793, 794, 816, 831, 854, 855, 856, 862, 868, 876, 877, 888, 898, 899, 906, 907, 908, 909, 910, 934, 935, 975, 984, 986, 996, 1004, 1024, 1026, 1028, 1029, 1032, 1033, 1035, 1036, 1038, 1039], "940": 4, "6331": 4, "28": [4, 67, 125, 149, 170, 216, 262, 270, 277, 302, 325, 326, 376, 385, 406, 410, 447, 454, 996, 1017, 1028, 1031, 1034], "790": [4, 71], "89": [4, 13, 33, 157, 191, 325, 326, 981, 986, 996, 1021, 1028, 1031, 1039], "6332": 4, "6333": 4, "88": [4, 6, 8, 33, 191, 204, 260, 303, 325, 326, 355, 374, 376, 379, 408, 470, 858, 1017, 1028], "820": [4, 838, 839], "79": [4, 6, 8, 31, 33, 81, 82, 99, 149, 176, 303, 326, 376, 384, 408, 471, 521, 594, 836, 1028, 1030], "6334": 4, "6335": 4, "70": [4, 6, 8, 11, 13, 67, 72, 74, 112, 171, 239, 246, 261, 326, 374, 376, 410, 490, 491, 710, 722, 752, 795, 809, 975, 996, 1017], "33": [4, 13, 47, 81, 200, 269, 321, 326, 359, 374, 376, 377, 383, 384, 385, 396, 398, 399, 406, 414, 529, 645, 709, 710, 725, 726, 734, 739, 779, 780, 783, 801, 822, 824, 826, 909, 982, 986, 996, 1017, 1028, 1036], "335": 4, "74": [4, 13, 216, 325, 326, 376, 587, 795, 809, 877], "16326": [4, 1040], "16327": 4, "16328": 4, "16329": 4, "16330": 4, "readi": [4, 7, 157, 201, 374, 383, 387], "tree": [4, 7, 13, 27, 28, 32, 42, 45, 56, 63, 111, 114, 115, 116, 118, 122, 123, 124, 125, 126, 128, 132, 133, 136, 149, 160, 164, 171, 173, 222, 236, 238, 239, 240, 265, 279, 284, 289, 297, 306, 307, 311, 318, 360, 361, 365, 368, 374, 376, 385, 392, 393, 395, 404, 406, 412, 417, 434, 438, 439, 440, 441, 442, 443, 445, 447, 454, 460, 492, 497, 501, 511, 512, 516, 541, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 628, 629, 630, 631, 655, 685, 689, 699, 700, 784, 801, 822, 824, 833, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 859, 862, 871, 930, 976, 983, 986, 987, 992, 993, 1006, 1007, 1008, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "often": [4, 20, 25, 26, 34, 71, 75, 118, 130, 156, 164, 170, 171, 201, 218, 222, 239, 248, 263, 266, 306, 311, 337, 347, 350, 351, 352, 365, 366, 373, 374, 376, 379, 381, 384, 387, 391, 392, 393, 395, 400, 404, 406, 407, 408, 410, 411, 413, 414, 416, 418, 465, 518, 521, 530, 533, 629, 643, 644, 649, 650, 657, 658, 659, 660, 669, 671, 684, 724, 868, 876, 884, 896, 975, 976, 978, 981, 982, 983, 984, 985, 986, 988, 989, 991, 992, 993, 996, 999, 1000, 1002, 1012, 1014, 1019, 1020, 1021, 1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "flexibl": [4, 26, 122, 164, 200, 307, 334, 352, 381, 386, 410, 416, 671, 898, 899, 975, 980, 982, 986, 990, 996, 1006, 1007, 1010, 1037, 1041], "effici": [4, 5, 12, 14, 43, 47, 54, 56, 96, 118, 130, 176, 189, 193, 202, 208, 289, 350, 365, 371, 373, 379, 381, 382, 384, 385, 391, 393, 400, 403, 405, 406, 411, 412, 413, 416, 418, 439, 440, 443, 444, 446, 447, 449, 451, 454, 456, 458, 459, 493, 530, 531, 532, 535, 537, 538, 541, 560, 563, 571, 578, 579, 585, 586, 588, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 629, 630, 631, 635, 637, 652, 655, 656, 661, 663, 664, 665, 670, 672, 673, 674, 675, 676, 682, 683, 685, 722, 752, 759, 775, 776, 793, 794, 795, 809, 827, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 863, 875, 887, 891, 898, 907, 909, 935, 954, 975, 978, 980, 982, 983, 985, 986, 987, 989, 990, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1006, 1010, 1012, 1016, 1019, 1020, 1021, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "heterogen": [4, 9, 25, 56, 70, 72, 77, 167, 171, 200, 243, 311, 316, 371, 373, 391, 461, 485, 538, 578, 588, 710, 858, 862, 898, 983, 993, 996, 1006, 1023, 1032, 1036, 1038, 1039], "tabular": [4, 13, 171, 381, 413, 994], "mix": [4, 63, 70, 77, 97, 98, 167, 200, 306, 373, 381, 391, 393, 407, 411, 418, 461, 463, 464, 493, 530, 535, 537, 544, 597, 601, 627, 643, 644, 649, 655, 656, 657, 658, 659, 660, 665, 673, 675, 678, 795, 809, 824, 858, 871, 872, 878, 879, 950, 957, 960, 982, 991, 1020, 1040, 1042, 1043], "long": [4, 11, 12, 45, 63, 125, 157, 165, 170, 172, 200, 236, 237, 239, 264, 297, 306, 317, 350, 351, 361, 366, 379, 387, 391, 393, 394, 400, 405, 406, 450, 495, 535, 673, 674, 675, 798, 799, 833, 834, 835, 836, 837, 855, 856, 866, 986, 992, 996, 997, 999, 1000, 1005, 1009, 1030, 1034, 1040, 1042], "sampl": [4, 5, 8, 14, 25, 26, 27, 28, 33, 34, 35, 38, 40, 42, 43, 44, 47, 49, 50, 54, 57, 58, 59, 60, 61, 66, 81, 82, 83, 87, 91, 93, 96, 100, 101, 105, 106, 112, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125, 126, 128, 133, 134, 135, 146, 148, 149, 152, 157, 158, 159, 161, 164, 167, 170, 171, 176, 178, 184, 186, 188, 189, 200, 202, 204, 208, 214, 216, 217, 218, 219, 221, 229, 233, 234, 237, 239, 246, 247, 249, 250, 251, 252, 254, 256, 261, 263, 264, 265, 267, 269, 273, 275, 277, 282, 284, 288, 289, 290, 291, 293, 294, 295, 303, 306, 308, 309, 310, 311, 313, 316, 318, 319, 321, 325, 327, 328, 329, 330, 332, 333, 335, 337, 339, 341, 345, 348, 350, 351, 356, 359, 365, 368, 372, 374, 375, 378, 379, 381, 382, 391, 392, 397, 403, 404, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 423, 425, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 451, 453, 454, 455, 458, 459, 460, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 607, 608, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 684, 685, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 730, 731, 732, 733, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 759, 760, 764, 765, 766, 767, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 862, 863, 864, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 918, 919, 923, 924, 935, 939, 957, 960, 961, 964, 967, 975, 976, 978, 979, 980, 981, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1012, 1018, 1019, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "larg": [4, 12, 13, 14, 22, 27, 38, 40, 44, 48, 50, 51, 53, 54, 56, 74, 76, 96, 100, 115, 117, 118, 125, 128, 130, 145, 157, 158, 172, 173, 179, 180, 189, 191, 200, 202, 204, 205, 206, 218, 234, 239, 258, 264, 267, 270, 286, 293, 302, 306, 308, 319, 320, 337, 342, 345, 351, 352, 365, 374, 379, 385, 388, 391, 392, 393, 396, 400, 405, 408, 410, 411, 412, 413, 415, 417, 419, 439, 441, 443, 444, 447, 448, 449, 450, 455, 459, 470, 472, 496, 511, 531, 533, 535, 537, 541, 544, 546, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 579, 585, 586, 588, 631, 638, 640, 647, 651, 654, 655, 656, 661, 668, 669, 671, 674, 676, 682, 684, 686, 688, 689, 690, 692, 742, 775, 776, 795, 803, 805, 809, 813, 823, 833, 834, 835, 836, 837, 838, 839, 844, 855, 856, 863, 867, 868, 876, 878, 890, 891, 898, 899, 903, 904, 906, 907, 908, 909, 934, 935, 975, 978, 980, 982, 983, 985, 988, 989, 990, 994, 996, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1017, 1019, 1020, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "here": [4, 8, 9, 12, 13, 14, 18, 25, 58, 59, 67, 79, 83, 90, 91, 93, 98, 99, 101, 103, 104, 105, 107, 112, 115, 118, 122, 126, 132, 146, 149, 152, 160, 161, 170, 171, 172, 176, 179, 184, 189, 193, 200, 204, 206, 215, 216, 218, 221, 223, 229, 234, 236, 239, 240, 247, 248, 249, 255, 258, 259, 261, 263, 264, 266, 270, 271, 273, 279, 284, 286, 293, 301, 302, 303, 308, 311, 318, 320, 325, 327, 337, 341, 345, 347, 352, 355, 361, 365, 366, 367, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 391, 392, 397, 400, 402, 403, 406, 407, 409, 410, 411, 412, 413, 414, 417, 419, 434, 437, 438, 439, 440, 441, 442, 444, 446, 449, 461, 469, 472, 533, 535, 536, 540, 541, 564, 565, 566, 567, 578, 579, 581, 585, 588, 591, 599, 625, 627, 644, 648, 650, 652, 658, 660, 662, 670, 672, 686, 688, 692, 696, 709, 722, 742, 752, 790, 795, 798, 799, 801, 809, 817, 818, 819, 820, 821, 822, 823, 825, 834, 838, 839, 862, 870, 873, 876, 879, 890, 891, 901, 952, 975, 978, 982, 983, 984, 985, 986, 989, 992, 996, 998, 999, 1000, 1001, 1006, 1007, 1009, 1010, 1012, 1013, 1019, 1028, 1036, 1041], "modern": [4, 414, 465, 500, 587, 687, 691, 726, 896, 983, 1006, 1007, 1044], "histgradientboostingregressor": [4, 7, 13, 118, 122, 125, 126, 129, 132, 164, 171, 200, 312, 316, 317, 318, 319, 321, 322, 383, 413, 557, 562, 629, 630, 632, 976, 993, 1006, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "nativ": [4, 131, 164, 366, 374, 393, 413, 558, 559, 830, 831, 954, 982, 986, 1006, 1038, 1040], "support": [4, 6, 7, 8, 9, 10, 17, 25, 28, 31, 33, 47, 71, 73, 111, 116, 123, 131, 136, 145, 146, 171, 201, 210, 211, 212, 218, 234, 235, 236, 242, 255, 259, 266, 268, 279, 284, 303, 306, 310, 320, 325, 326, 329, 330, 333, 334, 337, 338, 340, 341, 342, 345, 348, 365, 366, 367, 368, 373, 377, 379, 381, 383, 384, 385, 386, 388, 389, 392, 393, 394, 406, 410, 411, 414, 416, 434, 437, 447, 449, 450, 461, 462, 463, 464, 466, 469, 471, 484, 493, 509, 535, 537, 538, 541, 544, 546, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 610, 611, 612, 614, 616, 617, 619, 620, 622, 624, 628, 629, 630, 640, 642, 654, 655, 656, 667, 668, 669, 670, 671, 672, 673, 674, 675, 684, 687, 691, 696, 704, 710, 725, 726, 734, 739, 764, 774, 775, 776, 779, 780, 783, 784, 795, 798, 799, 801, 809, 821, 822, 830, 831, 836, 838, 839, 842, 844, 845, 850, 857, 858, 859, 863, 869, 871, 872, 874, 878, 886, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 924, 929, 930, 974, 975, 976, 978, 979, 980, 982, 985, 986, 987, 988, 989, 990, 992, 993, 996, 997, 1000, 1004, 1006, 1007, 1008, 1010, 1012, 1015, 1017, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "therefor": [4, 9, 14, 21, 25, 35, 38, 53, 54, 72, 73, 76, 81, 87, 101, 106, 112, 115, 117, 125, 130, 132, 148, 169, 172, 200, 204, 216, 217, 246, 251, 252, 262, 264, 279, 282, 287, 302, 306, 311, 325, 337, 345, 346, 350, 351, 359, 365, 373, 377, 384, 391, 397, 402, 406, 407, 408, 410, 411, 413, 414, 434, 532, 546, 548, 550, 551, 556, 557, 561, 562, 601, 603, 655, 656, 662, 665, 668, 673, 675, 676, 698, 709, 731, 753, 793, 858, 859, 871, 875, 879, 887, 976, 980, 982, 983, 986, 988, 989, 990, 991, 994, 996, 1001, 1002, 1007, 1012, 1019, 1020, 1021, 1037, 1038, 1041, 1042, 1043, 1044], "categorical_featur": [4, 72, 122, 171, 312, 318, 319, 320, 321, 384, 413, 558, 559, 629, 630, 993, 1036, 1040, 1043, 1045], "from_dtyp": [4, 122, 558, 559, 1045], "For": [4, 8, 9, 12, 13, 14, 20, 28, 33, 38, 41, 45, 47, 49, 50, 54, 56, 58, 59, 61, 68, 74, 81, 87, 92, 97, 115, 117, 118, 120, 125, 126, 128, 130, 145, 146, 149, 152, 154, 159, 164, 165, 170, 171, 184, 188, 189, 200, 201, 204, 205, 208, 217, 218, 221, 223, 226, 229, 230, 232, 233, 234, 236, 243, 251, 258, 261, 262, 268, 276, 282, 284, 294, 300, 302, 303, 308, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 328, 330, 337, 339, 341, 345, 350, 351, 352, 355, 356, 359, 361, 365, 367, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 410, 411, 413, 414, 415, 416, 417, 422, 429, 434, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 451, 453, 454, 455, 457, 458, 459, 461, 462, 463, 465, 469, 471, 479, 480, 481, 482, 486, 493, 495, 500, 509, 511, 512, 516, 520, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 578, 579, 580, 581, 582, 583, 585, 586, 588, 589, 590, 591, 594, 599, 604, 605, 606, 607, 608, 611, 616, 619, 620, 624, 625, 626, 627, 628, 629, 630, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 685, 686, 687, 689, 690, 692, 698, 701, 703, 704, 725, 726, 734, 737, 738, 759, 765, 774, 779, 780, 783, 784, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 883, 884, 885, 886, 887, 888, 889, 890, 891, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 918, 924, 949, 970, 975, 976, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 1000, 1001, 1002, 1005, 1009, 1010, 1012, 1019, 1020, 1021, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "refer": [4, 38, 39, 61, 64, 72, 91, 126, 132, 149, 161, 218, 236, 239, 268, 287, 294, 306, 316, 317, 318, 319, 320, 321, 322, 351, 366, 368, 376, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 392, 393, 394, 396, 397, 400, 407, 417, 418, 419, 434, 435, 436, 437, 439, 441, 443, 444, 445, 447, 448, 449, 450, 451, 454, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 495, 500, 508, 510, 512, 513, 514, 515, 516, 517, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 541, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 587, 590, 591, 592, 599, 604, 605, 607, 608, 611, 616, 619, 620, 624, 625, 628, 629, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 644, 646, 648, 650, 652, 653, 655, 658, 660, 662, 663, 664, 665, 668, 670, 672, 673, 675, 676, 679, 680, 685, 686, 687, 688, 689, 690, 691, 692, 693, 698, 701, 702, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 730, 731, 732, 733, 734, 736, 737, 739, 752, 754, 755, 765, 779, 781, 782, 784, 785, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 809, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 828, 829, 833, 834, 835, 837, 840, 843, 844, 845, 847, 854, 855, 856, 858, 863, 864, 865, 867, 868, 870, 871, 872, 874, 875, 876, 878, 879, 886, 891, 892, 893, 894, 895, 896, 898, 900, 901, 903, 904, 906, 907, 908, 909, 923, 935, 952, 988, 997, 1002, 1007, 1012, 1016, 1020, 1021, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "datafram": [4, 13, 26, 71, 72, 73, 74, 112, 118, 122, 125, 129, 157, 164, 169, 170, 171, 172, 179, 184, 189, 204, 208, 218, 240, 243, 251, 259, 261, 262, 264, 272, 273, 279, 311, 312, 313, 319, 320, 321, 345, 350, 351, 373, 374, 379, 381, 384, 393, 407, 430, 439, 440, 442, 444, 446, 461, 463, 464, 465, 479, 480, 481, 482, 486, 487, 488, 489, 493, 497, 498, 499, 501, 502, 507, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 558, 559, 563, 564, 565, 566, 567, 578, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 685, 686, 689, 795, 798, 799, 809, 824, 842, 847, 850, 854, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 896, 914, 941, 957, 960, 975, 976, 1007, 1021, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "dedic": [4, 259, 347, 377, 383, 385, 391, 394, 402, 406, 581, 669, 671, 684, 975, 982, 1006, 1012, 1036, 1045], "rule": [4, 118, 176, 356, 359, 361, 365, 376, 379, 380, 381, 391, 393, 394, 401, 404, 405, 406, 410, 411, 413, 415, 533, 546, 547, 548, 549, 550, 558, 559, 566, 567, 599, 631, 642, 655, 656, 663, 664, 665, 673, 674, 675, 703, 704, 795, 798, 799, 801, 809, 817, 821, 823, 847, 898, 911, 975, 980, 988, 989, 1000, 1002, 1007, 1012, 1019, 1023, 1030, 1033, 1040], "sake": [4, 125, 165, 170, 200, 311, 341, 350, 352, 387, 391, 667], "simplic": [4, 14, 32, 184, 341, 350, 352, 393, 412, 989, 990, 991, 1001], "try": [4, 6, 11, 12, 13, 15, 17, 26, 27, 40, 54, 72, 73, 99, 112, 117, 118, 119, 120, 121, 128, 129, 132, 135, 146, 152, 157, 165, 169, 170, 171, 172, 176, 179, 181, 189, 230, 231, 232, 236, 240, 241, 242, 243, 247, 248, 251, 259, 261, 262, 268, 273, 279, 284, 297, 303, 312, 317, 318, 320, 321, 327, 339, 345, 350, 351, 359, 374, 377, 378, 379, 381, 384, 385, 387, 391, 393, 397, 400, 406, 409, 410, 413, 414, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 500, 564, 574, 586, 655, 670, 672, 686, 690, 795, 798, 799, 807, 809, 819, 820, 821, 823, 876, 878, 898, 975, 982, 983, 992, 1001, 1002, 1007, 1009, 1010, 1012, 1014, 1017, 1019, 1020, 1021, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "default": [4, 13, 15, 26, 28, 31, 43, 46, 47, 49, 56, 60, 96, 118, 145, 152, 164, 171, 179, 180, 189, 200, 201, 218, 231, 233, 239, 241, 243, 249, 256, 264, 270, 282, 284, 306, 310, 313, 316, 317, 321, 341, 345, 346, 350, 351, 352, 355, 361, 365, 366, 373, 374, 377, 381, 382, 383, 384, 385, 386, 388, 391, 392, 393, 396, 397, 400, 404, 406, 407, 410, 411, 413, 414, 415, 417, 418, 419, 420, 422, 423, 427, 429, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 708, 709, 710, 711, 713, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 730, 731, 732, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 922, 924, 925, 927, 929, 934, 935, 936, 937, 938, 939, 940, 949, 951, 952, 954, 956, 957, 959, 960, 961, 967, 970, 972, 973, 975, 976, 978, 980, 982, 985, 986, 987, 989, 990, 992, 993, 996, 998, 1000, 1001, 1002, 1012, 1016, 1019, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "hyper": [4, 72, 118, 255, 261, 266, 303, 337, 361, 381, 391, 392, 393, 401, 410, 413, 415, 465, 641, 642, 799, 807, 809, 854, 896, 981, 982, 986, 989, 1000, 1001, 1012, 1023, 1028, 1042], "paramet": [4, 5, 9, 10, 11, 14, 15, 17, 35, 45, 55, 56, 59, 61, 62, 63, 72, 73, 74, 80, 82, 83, 93, 96, 110, 112, 114, 116, 118, 121, 122, 126, 127, 138, 139, 146, 149, 152, 156, 157, 158, 159, 160, 161, 164, 165, 167, 170, 171, 179, 180, 181, 182, 184, 185, 187, 188, 189, 191, 192, 200, 202, 204, 205, 208, 209, 217, 218, 225, 226, 229, 231, 234, 235, 236, 246, 247, 248, 249, 251, 252, 255, 260, 261, 262, 265, 266, 269, 272, 273, 274, 276, 279, 284, 286, 287, 290, 291, 297, 300, 301, 303, 306, 307, 308, 316, 317, 319, 320, 321, 322, 329, 332, 334, 339, 341, 342, 346, 347, 348, 350, 351, 352, 355, 356, 357, 358, 361, 365, 366, 367, 368, 371, 372, 374, 382, 384, 385, 386, 387, 388, 391, 397, 401, 404, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 983, 985, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1002, 1006, 1007, 1013, 1015, 1017, 1018, 1019, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "compos": [4, 5, 26, 70, 71, 72, 76, 87, 114, 122, 132, 167, 170, 171, 172, 200, 202, 218, 231, 239, 241, 243, 279, 312, 317, 319, 320, 321, 368, 392, 397, 406, 407, 410, 512, 609, 985, 1028], "columntransform": [4, 71, 72, 132, 170, 171, 172, 200, 218, 231, 239, 241, 243, 312, 317, 319, 320, 321, 371, 373, 391, 392, 397, 463, 464, 626, 863, 975, 976, 1007, 1023, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "ensembl": [4, 7, 10, 13, 27, 28, 32, 57, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 164, 165, 171, 172, 173, 200, 222, 229, 238, 239, 241, 242, 258, 273, 279, 282, 308, 312, 316, 317, 318, 319, 321, 322, 350, 361, 365, 368, 383, 384, 392, 393, 397, 404, 406, 410, 415, 434, 501, 512, 629, 630, 632, 655, 699, 798, 799, 824, 828, 829, 859, 862, 871, 902, 906, 908, 909, 975, 986, 987, 992, 993, 1002, 1006, 1007, 1008, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "cross_valid": [4, 13, 122, 132, 170, 202, 257, 264, 279, 312, 379, 392, 397, 572, 819, 820, 986, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1045], "pipelin": [4, 32, 55, 59, 72, 75, 77, 87, 117, 122, 143, 145, 149, 150, 164, 165, 171, 172, 176, 179, 188, 189, 200, 201, 206, 214, 218, 222, 228, 229, 230, 234, 239, 240, 243, 244, 254, 258, 260, 268, 275, 277, 284, 286, 287, 292, 293, 300, 303, 308, 311, 313, 316, 317, 318, 319, 320, 321, 322, 329, 350, 351, 361, 365, 368, 371, 373, 374, 379, 382, 393, 397, 410, 414, 416, 420, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 499, 512, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 604, 607, 608, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 710, 793, 794, 795, 796, 797, 798, 799, 802, 804, 809, 813, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 976, 978, 982, 989, 990, 995, 996, 1000, 1001, 1006, 1007, 1008, 1010, 1013, 1015, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1045], "make_pipelin": [4, 32, 59, 87, 117, 122, 132, 145, 146, 149, 164, 165, 170, 171, 176, 179, 188, 189, 200, 201, 206, 214, 218, 222, 229, 230, 231, 239, 240, 241, 243, 258, 268, 284, 293, 300, 308, 311, 312, 313, 316, 317, 318, 319, 320, 321, 351, 361, 392, 397, 407, 410, 564, 673, 675, 850, 858, 883, 884, 886, 887, 888, 889, 898, 899, 900, 901, 903, 904, 976, 989, 996, 1000, 1001, 1031, 1038, 1041], "gbrt": [4, 13, 200, 413], "random_st": [4, 5, 6, 7, 10, 12, 13, 15, 20, 21, 22, 25, 26, 27, 28, 31, 32, 39, 43, 44, 45, 47, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 76, 83, 87, 93, 96, 98, 101, 112, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 134, 135, 138, 145, 146, 148, 152, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 181, 182, 186, 192, 199, 200, 203, 204, 206, 207, 208, 212, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 234, 237, 238, 239, 240, 242, 243, 246, 248, 249, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 279, 282, 284, 287, 288, 292, 293, 294, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 328, 335, 337, 338, 339, 345, 346, 350, 351, 355, 359, 361, 381, 384, 388, 392, 393, 402, 406, 407, 410, 411, 413, 414, 418, 431, 434, 435, 437, 440, 444, 446, 448, 449, 450, 451, 455, 456, 457, 459, 466, 471, 485, 488, 489, 492, 494, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 581, 590, 591, 604, 605, 607, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 629, 630, 631, 632, 635, 636, 637, 638, 639, 643, 644, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 671, 673, 674, 675, 676, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 731, 784, 789, 793, 794, 797, 798, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 817, 822, 823, 824, 826, 828, 829, 830, 831, 832, 843, 847, 854, 855, 856, 858, 863, 875, 879, 887, 890, 891, 898, 899, 900, 903, 906, 907, 908, 909, 911, 912, 934, 935, 955, 957, 960, 975, 976, 978, 981, 986, 987, 988, 989, 990, 993, 994, 996, 1001, 1002, 1012, 1016, 1017, 1021, 1025, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "categorical_column": [4, 122, 170, 172, 239, 464], "print": [4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 21, 22, 25, 27, 31, 33, 39, 43, 44, 47, 48, 49, 50, 51, 53, 54, 59, 61, 62, 64, 68, 71, 72, 74, 75, 76, 81, 86, 87, 93, 96, 99, 104, 105, 107, 112, 115, 118, 119, 120, 121, 122, 124, 126, 138, 140, 145, 146, 148, 149, 152, 153, 155, 157, 161, 169, 171, 172, 173, 176, 184, 185, 186, 187, 191, 192, 195, 196, 200, 202, 203, 204, 207, 208, 215, 216, 218, 222, 223, 226, 231, 233, 235, 236, 239, 243, 249, 255, 259, 260, 261, 262, 264, 266, 269, 270, 274, 284, 288, 295, 297, 301, 302, 303, 308, 311, 313, 316, 317, 318, 320, 322, 325, 326, 329, 337, 350, 351, 352, 355, 359, 361, 365, 373, 374, 377, 380, 381, 387, 393, 397, 400, 407, 410, 413, 414, 416, 461, 464, 465, 469, 475, 499, 509, 538, 541, 546, 547, 556, 557, 558, 559, 561, 562, 566, 567, 574, 580, 581, 585, 586, 588, 609, 614, 627, 643, 644, 646, 647, 649, 650, 651, 653, 657, 658, 659, 660, 663, 664, 673, 674, 681, 710, 714, 733, 791, 793, 794, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816, 820, 821, 822, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 855, 856, 857, 858, 859, 860, 868, 874, 878, 886, 896, 897, 898, 899, 900, 903, 911, 922, 947, 954, 976, 986, 987, 988, 989, 994, 1002, 1012, 1016, 1017, 1019, 1020, 1021, 1028, 1030, 1036, 1037, 1039, 1043], "tolist": [4, 124, 164, 260, 318, 374], "across": [4, 13, 56, 62, 68, 86, 91, 118, 138, 170, 189, 194, 222, 256, 258, 261, 284, 306, 311, 341, 380, 381, 388, 393, 400, 405, 406, 410, 414, 415, 418, 434, 437, 447, 449, 451, 454, 457, 459, 466, 469, 471, 485, 488, 489, 492, 494, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 548, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 564, 565, 585, 588, 591, 599, 604, 605, 607, 608, 629, 630, 631, 636, 637, 638, 639, 643, 644, 647, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 673, 675, 676, 682, 683, 686, 687, 688, 689, 690, 691, 692, 701, 702, 714, 727, 753, 784, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 843, 847, 854, 855, 856, 863, 867, 868, 875, 876, 878, 879, 887, 890, 891, 893, 894, 898, 899, 900, 903, 906, 907, 934, 935, 954, 957, 960, 975, 982, 984, 986, 996, 1000, 1002, 1007, 1010, 1021, 1028, 1031, 1034, 1035, 1036, 1037, 1038], "numpi": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 91, 93, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 141, 144, 145, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 282, 284, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 303, 306, 307, 308, 309, 310, 311, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 356, 357, 358, 359, 361, 365, 372, 373, 374, 377, 379, 380, 381, 382, 383, 385, 387, 388, 391, 392, 393, 396, 397, 399, 400, 402, 403, 406, 407, 410, 411, 412, 413, 414, 436, 437, 438, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 457, 459, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 482, 487, 490, 491, 493, 500, 503, 505, 506, 524, 528, 531, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 566, 567, 578, 579, 585, 586, 588, 624, 625, 626, 627, 628, 629, 630, 640, 643, 644, 646, 649, 650, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 669, 673, 674, 675, 681, 685, 688, 689, 690, 692, 696, 699, 700, 703, 704, 706, 709, 711, 722, 723, 725, 726, 730, 731, 734, 735, 750, 752, 769, 775, 777, 778, 779, 780, 783, 784, 785, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 824, 826, 827, 830, 831, 833, 834, 835, 836, 837, 838, 839, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 898, 900, 901, 903, 904, 906, 921, 933, 935, 939, 940, 941, 948, 949, 957, 960, 973, 975, 976, 981, 982, 984, 986, 987, 989, 992, 996, 998, 1001, 1002, 1005, 1007, 1009, 1012, 1015, 1016, 1017, 1019, 1020, 1021, 1028, 1031, 1032, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "np": [4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 86, 87, 93, 97, 98, 99, 100, 102, 103, 104, 106, 107, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 141, 144, 145, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 222, 223, 224, 226, 229, 232, 233, 234, 235, 236, 237, 238, 239, 241, 246, 247, 248, 249, 250, 251, 252, 255, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 282, 284, 288, 289, 290, 291, 293, 294, 295, 296, 297, 300, 303, 306, 307, 308, 309, 310, 311, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 356, 357, 358, 359, 361, 365, 373, 374, 379, 381, 384, 385, 388, 391, 393, 397, 403, 406, 407, 410, 411, 412, 413, 414, 416, 419, 421, 424, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 454, 457, 459, 461, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 482, 493, 494, 505, 506, 517, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 554, 555, 556, 557, 558, 560, 561, 562, 563, 566, 567, 578, 579, 582, 583, 585, 586, 590, 591, 594, 603, 606, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 667, 668, 669, 671, 672, 673, 674, 675, 678, 679, 680, 681, 688, 689, 692, 696, 699, 700, 703, 704, 706, 709, 710, 711, 712, 722, 723, 725, 726, 730, 731, 734, 735, 737, 750, 752, 759, 765, 769, 774, 777, 778, 779, 780, 783, 784, 785, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 824, 825, 826, 827, 830, 831, 833, 834, 835, 836, 837, 838, 839, 843, 844, 845, 846, 848, 849, 850, 854, 855, 862, 863, 865, 871, 872, 873, 874, 875, 877, 878, 879, 886, 887, 890, 891, 893, 894, 895, 898, 900, 901, 903, 904, 906, 907, 908, 909, 916, 918, 919, 921, 923, 924, 933, 935, 940, 948, 949, 951, 957, 960, 962, 963, 964, 975, 976, 981, 982, 984, 986, 987, 989, 990, 992, 996, 997, 998, 1000, 1001, 1002, 1012, 1016, 1017, 1019, 1020, 1021, 1029, 1031, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "def": [4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17, 18, 20, 26, 28, 34, 35, 38, 41, 42, 49, 53, 56, 57, 59, 62, 71, 76, 93, 96, 98, 99, 102, 104, 106, 110, 112, 115, 117, 122, 123, 124, 125, 132, 155, 158, 160, 161, 165, 173, 180, 188, 189, 192, 197, 200, 201, 208, 209, 210, 218, 221, 222, 236, 237, 239, 246, 247, 248, 249, 251, 252, 256, 259, 260, 261, 262, 264, 269, 272, 275, 284, 289, 291, 294, 297, 301, 303, 306, 308, 311, 312, 316, 329, 333, 337, 341, 347, 350, 351, 352, 365, 374, 379, 381, 385, 386, 391, 407, 410, 414, 418, 505, 530, 594, 607, 608, 777, 871, 925, 930, 947, 986, 993, 1001, 1017], "model_prop": 4, "none": [4, 8, 9, 10, 13, 17, 18, 27, 31, 34, 40, 42, 43, 45, 53, 55, 56, 57, 63, 98, 101, 106, 116, 121, 122, 124, 127, 141, 149, 153, 159, 160, 173, 179, 200, 201, 208, 211, 218, 221, 235, 236, 237, 239, 255, 261, 262, 273, 289, 291, 295, 310, 313, 318, 319, 326, 329, 335, 337, 338, 341, 342, 344, 350, 351, 374, 376, 379, 381, 386, 388, 393, 397, 406, 410, 413, 416, 417, 418, 422, 423, 424, 425, 427, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 697, 698, 699, 700, 704, 705, 706, 708, 709, 710, 711, 713, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 728, 730, 731, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 915, 917, 918, 919, 921, 922, 923, 924, 927, 929, 934, 935, 938, 939, 940, 941, 945, 946, 949, 952, 954, 955, 957, 960, 961, 967, 970, 971, 973, 975, 982, 986, 996, 999, 1002, 1012, 1016, 1021, 1023, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "model_step": 4, "cv_result": [4, 13, 72, 118, 259, 260, 262, 264, 397, 809, 821, 986], "score": [4, 6, 8, 11, 13, 17, 21, 22, 25, 26, 27, 32, 33, 34, 38, 59, 61, 71, 72, 73, 74, 75, 76, 79, 83, 87, 104, 110, 112, 114, 121, 122, 124, 125, 128, 131, 132, 139, 140, 145, 146, 149, 164, 167, 169, 170, 171, 172, 173, 176, 184, 191, 192, 195, 200, 202, 206, 208, 216, 218, 229, 234, 235, 236, 239, 243, 250, 254, 259, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 275, 276, 277, 279, 282, 291, 292, 293, 300, 301, 302, 303, 308, 311, 312, 313, 316, 317, 318, 319, 325, 326, 328, 329, 337, 345, 350, 351, 355, 361, 374, 379, 381, 384, 392, 393, 400, 401, 403, 404, 405, 407, 409, 411, 413, 415, 423, 425, 429, 434, 440, 444, 446, 449, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 499, 501, 529, 533, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 603, 606, 607, 608, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 732, 733, 734, 735, 736, 738, 751, 752, 753, 778, 779, 780, 781, 782, 783, 784, 785, 790, 791, 792, 793, 794, 795, 798, 799, 801, 809, 814, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 844, 845, 847, 848, 849, 854, 855, 856, 858, 878, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 937, 944, 975, 978, 982, 984, 989, 992, 994, 996, 1000, 1007, 1015, 1017, 1019, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "neg_mean_absolute_error": [4, 132, 202, 986], "neg_root_mean_squared_error": [4, 312, 986], "return_estim": [4, 170, 410, 821, 1036], "getattr": [4, 8, 306, 381, 393, 1044], "els": [4, 8, 11, 12, 13, 17, 20, 35, 42, 45, 50, 56, 57, 63, 83, 100, 115, 121, 122, 125, 160, 170, 171, 189, 202, 218, 222, 229, 233, 235, 236, 237, 238, 239, 261, 262, 265, 272, 284, 289, 297, 300, 301, 308, 350, 351, 359, 379, 383, 385, 413, 414, 416, 418, 434, 446, 505, 517, 530, 566, 622, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 669, 670, 671, 673, 676, 678, 679, 680, 681, 700, 706, 764, 784, 790, 792, 798, 799, 824, 862, 871, 874, 877, 885, 898, 899, 913, 948, 950, 952, 973, 1002], "mae": [4, 13, 132, 200, 202, 555, 562, 741, 907, 909, 986, 1002, 1035, 1036, 1040, 1041], "test_neg_mean_absolute_error": [4, 202], "rmse": [4, 13, 82, 312, 746, 986, 1039], "test_neg_root_mean_squared_error": 4, "3f": [4, 6, 8, 11, 13, 15, 18, 22, 25, 27, 39, 41, 48, 49, 50, 59, 72, 74, 76, 87, 112, 119, 120, 145, 149, 152, 153, 154, 156, 161, 169, 171, 172, 180, 184, 186, 192, 200, 202, 206, 215, 216, 218, 222, 233, 235, 259, 261, 262, 264, 267, 269, 272, 284, 300, 329, 350, 351, 352, 994, 1017], "std": [4, 11, 12, 13, 38, 47, 51, 55, 62, 67, 80, 82, 83, 97, 98, 99, 119, 121, 122, 132, 139, 161, 164, 165, 170, 180, 185, 209, 233, 259, 260, 261, 263, 264, 266, 269, 271, 275, 312, 328, 340, 351, 361, 393, 406, 410, 413, 512, 603, 606, 878, 889, 996, 1020, 1036, 1040], "n": [4, 5, 7, 8, 10, 11, 15, 18, 20, 33, 34, 38, 40, 41, 59, 71, 76, 81, 86, 93, 96, 99, 101, 104, 106, 107, 112, 114, 115, 119, 123, 134, 144, 149, 152, 156, 161, 171, 173, 180, 184, 196, 200, 201, 204, 215, 217, 218, 221, 232, 233, 234, 237, 246, 248, 249, 259, 261, 264, 266, 267, 268, 270, 271, 284, 287, 289, 303, 308, 310, 311, 318, 321, 326, 341, 345, 359, 365, 373, 376, 377, 379, 383, 385, 388, 393, 396, 397, 403, 404, 406, 409, 410, 411, 412, 413, 414, 416, 417, 441, 442, 444, 445, 447, 466, 468, 471, 475, 486, 512, 513, 514, 515, 520, 525, 535, 537, 538, 544, 554, 555, 556, 557, 560, 561, 562, 563, 585, 586, 587, 588, 604, 605, 611, 624, 646, 668, 676, 689, 693, 696, 703, 704, 751, 800, 803, 805, 810, 811, 814, 834, 838, 839, 843, 863, 890, 892, 906, 907, 908, 909, 933, 938, 939, 961, 965, 966, 975, 978, 980, 982, 983, 986, 987, 988, 989, 990, 992, 993, 996, 998, 1000, 1001, 1002, 1012, 1019, 1021, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "n_iter_": [4, 99, 208, 249, 393, 437, 444, 445, 446, 468, 469, 479, 480, 481, 528, 529, 530, 533, 534, 535, 536, 537, 540, 558, 559, 624, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674, 675, 676, 677, 687, 689, 793, 794, 847, 855, 856, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 1032, 1035, 1036, 1038, 1041, 1042, 1044], "100": [4, 5, 7, 10, 12, 13, 17, 18, 20, 26, 28, 38, 43, 51, 54, 58, 62, 67, 72, 73, 76, 80, 81, 96, 98, 99, 106, 113, 118, 128, 131, 134, 153, 157, 160, 161, 170, 171, 173, 176, 179, 180, 182, 184, 186, 190, 191, 192, 194, 199, 200, 201, 202, 204, 209, 210, 211, 213, 215, 216, 218, 223, 224, 226, 232, 233, 234, 235, 236, 240, 246, 248, 252, 256, 257, 259, 261, 264, 266, 271, 272, 275, 289, 290, 291, 303, 307, 308, 310, 312, 313, 319, 329, 330, 335, 336, 338, 339, 340, 344, 345, 347, 350, 351, 355, 358, 359, 365, 367, 374, 376, 379, 381, 384, 385, 397, 403, 406, 407, 410, 411, 412, 413, 414, 434, 438, 442, 446, 468, 469, 475, 487, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 525, 527, 531, 533, 536, 541, 542, 543, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 607, 628, 629, 630, 636, 637, 638, 639, 643, 644, 645, 646, 649, 650, 655, 656, 657, 658, 659, 660, 662, 664, 666, 668, 677, 678, 681, 685, 686, 687, 688, 690, 742, 793, 794, 797, 822, 823, 828, 833, 834, 835, 837, 838, 839, 843, 855, 856, 874, 876, 879, 888, 975, 976, 979, 983, 986, 987, 993, 996, 998, 1012, 1016, 1020, 1021, 1036, 1037, 1038, 1041, 1042], "044": [4, 183, 219, 259, 747, 986], "003": [4, 152, 162], "068": [4, 13, 261, 338, 348], "005": [4, 261, 265, 289, 306, 351, 385], "max_it": [4, 8, 13, 15, 18, 26, 31, 32, 73, 74, 96, 99, 117, 118, 122, 134, 138, 140, 161, 164, 165, 170, 171, 179, 186, 192, 193, 207, 208, 209, 212, 213, 215, 221, 222, 223, 224, 240, 241, 246, 247, 248, 249, 252, 274, 294, 300, 301, 302, 312, 318, 319, 320, 325, 326, 334, 350, 351, 385, 393, 413, 418, 437, 440, 444, 445, 446, 451, 456, 458, 468, 469, 475, 479, 480, 481, 528, 529, 530, 532, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 558, 559, 624, 635, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 669, 671, 673, 674, 675, 676, 677, 679, 680, 684, 685, 686, 687, 690, 691, 793, 794, 809, 847, 855, 856, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 976, 978, 982, 989, 990, 999, 1000, 1017, 1021, 1029, 1032, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044], "earli": [4, 15, 45, 63, 111, 118, 121, 136, 167, 178, 219, 317, 393, 413, 438, 442, 446, 460, 493, 501, 512, 517, 533, 534, 535, 536, 543, 550, 551, 556, 557, 558, 559, 568, 624, 642, 653, 663, 664, 665, 673, 675, 689, 824, 855, 856, 960, 983, 989, 996, 1005, 1007, 1010, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043], "stop": [4, 12, 18, 45, 63, 111, 118, 136, 157, 159, 167, 171, 178, 202, 219, 317, 379, 381, 387, 388, 393, 406, 411, 413, 415, 437, 438, 440, 442, 444, 446, 449, 451, 459, 460, 468, 469, 475, 479, 480, 481, 493, 501, 505, 506, 512, 517, 529, 533, 534, 535, 536, 537, 540, 542, 543, 544, 550, 551, 554, 555, 556, 557, 558, 559, 561, 562, 568, 585, 586, 588, 599, 614, 624, 641, 642, 643, 645, 646, 649, 653, 655, 656, 663, 664, 665, 666, 668, 673, 674, 675, 677, 688, 689, 692, 711, 793, 794, 824, 855, 856, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 940, 960, 975, 982, 990, 991, 1001, 1002, 1007, 1008, 1010, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045], "place": [4, 17, 61, 230, 240, 288, 365, 377, 379, 380, 381, 384, 386, 394, 404, 414, 416, 438, 442, 443, 479, 480, 481, 512, 578, 587, 625, 627, 628, 764, 777, 793, 965, 966, 1006, 1028, 1035, 1038, 1039, 1041], "an": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 26, 27, 28, 34, 35, 37, 38, 45, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 67, 69, 71, 72, 73, 74, 76, 79, 80, 81, 82, 90, 96, 97, 98, 99, 100, 101, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 135, 139, 140, 141, 145, 149, 152, 153, 154, 157, 158, 159, 161, 163, 164, 166, 167, 169, 170, 171, 172, 176, 178, 179, 180, 183, 184, 188, 195, 200, 201, 202, 204, 205, 207, 208, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 229, 230, 232, 233, 234, 235, 236, 237, 239, 243, 246, 247, 251, 252, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 274, 276, 282, 284, 287, 290, 291, 292, 295, 297, 306, 311, 312, 313, 317, 318, 319, 321, 322, 326, 330, 333, 334, 336, 337, 339, 340, 341, 350, 351, 352, 355, 358, 359, 361, 365, 366, 367, 368, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 427, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 572, 573, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 607, 608, 609, 616, 619, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 706, 708, 709, 715, 717, 718, 723, 725, 726, 730, 731, 733, 738, 739, 741, 742, 744, 746, 747, 749, 752, 754, 755, 759, 760, 762, 763, 764, 765, 766, 769, 771, 772, 773, 774, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 915, 916, 918, 919, 921, 922, 925, 929, 930, 931, 933, 934, 935, 937, 939, 942, 943, 944, 945, 946, 947, 949, 950, 951, 954, 956, 957, 960, 961, 967, 970, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1010, 1013, 1015, 1016, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "quit": [4, 13, 54, 58, 87, 115, 138, 149, 170, 171, 198, 218, 269, 279, 319, 350, 365, 384, 392, 406, 414, 981, 983, 988, 1010, 1036], "good": [4, 9, 21, 26, 28, 41, 45, 47, 50, 53, 54, 56, 59, 75, 82, 87, 106, 118, 121, 124, 125, 153, 157, 164, 170, 184, 189, 200, 201, 206, 215, 226, 229, 233, 236, 239, 247, 249, 255, 261, 267, 276, 303, 311, 312, 318, 325, 330, 337, 350, 351, 361, 365, 366, 367, 378, 380, 381, 382, 383, 385, 391, 393, 400, 403, 404, 406, 408, 410, 411, 413, 414, 415, 416, 434, 436, 441, 531, 556, 558, 559, 587, 627, 637, 644, 645, 653, 655, 656, 658, 666, 677, 687, 691, 719, 727, 738, 760, 823, 892, 935, 975, 981, 982, 983, 986, 987, 989, 990, 991, 993, 994, 996, 1000, 1001, 1002, 1007, 1010, 1012, 1016, 1019, 1021, 1034], "trial": [4, 266, 444, 446, 457, 668, 793, 794, 982, 1034], "without": [4, 5, 13, 14, 25, 37, 43, 56, 57, 68, 69, 76, 101, 118, 124, 127, 129, 132, 145, 149, 159, 167, 169, 170, 171, 184, 189, 208, 229, 233, 236, 237, 240, 242, 255, 262, 266, 268, 279, 285, 298, 306, 307, 311, 313, 316, 341, 345, 351, 367, 374, 375, 377, 379, 380, 381, 383, 384, 385, 388, 391, 392, 393, 397, 400, 406, 407, 411, 413, 414, 415, 416, 431, 436, 438, 443, 455, 466, 471, 493, 501, 512, 529, 531, 552, 553, 560, 576, 577, 608, 624, 628, 631, 636, 656, 689, 697, 777, 798, 799, 800, 807, 809, 823, 824, 840, 847, 851, 857, 858, 861, 864, 867, 868, 870, 874, 875, 876, 878, 883, 898, 914, 975, 976, 978, 980, 982, 983, 986, 989, 992, 996, 1000, 1001, 1002, 1006, 1007, 1012, 1013, 1021, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045], "ani": [4, 8, 9, 13, 14, 20, 45, 47, 56, 58, 68, 129, 144, 149, 157, 158, 159, 169, 170, 171, 172, 173, 189, 200, 204, 218, 229, 232, 233, 236, 247, 251, 252, 261, 262, 264, 267, 270, 279, 297, 306, 307, 310, 316, 318, 319, 321, 337, 341, 352, 361, 365, 366, 367, 373, 374, 376, 377, 379, 381, 383, 384, 385, 387, 392, 393, 394, 396, 397, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 431, 437, 443, 445, 446, 447, 449, 451, 453, 454, 458, 461, 464, 485, 486, 505, 506, 520, 531, 534, 536, 543, 548, 554, 555, 556, 557, 561, 562, 563, 564, 565, 566, 567, 576, 577, 579, 585, 586, 588, 590, 600, 607, 608, 617, 624, 629, 630, 642, 645, 655, 656, 663, 664, 665, 666, 673, 674, 675, 676, 677, 689, 693, 696, 697, 701, 713, 714, 716, 720, 732, 733, 748, 751, 753, 770, 774, 775, 776, 777, 788, 789, 791, 795, 798, 799, 807, 808, 827, 830, 838, 839, 844, 848, 857, 858, 862, 863, 867, 869, 871, 872, 879, 888, 889, 892, 895, 898, 899, 906, 907, 908, 909, 910, 912, 914, 918, 919, 956, 970, 975, 976, 978, 981, 982, 983, 986, 987, 988, 989, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1006, 1012, 1014, 1018, 1019, 1021, 1029, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "tune": [4, 45, 56, 72, 101, 112, 118, 148, 152, 164, 171, 189, 204, 205, 217, 225, 239, 255, 266, 286, 307, 337, 341, 345, 350, 361, 365, 366, 367, 392, 393, 401, 405, 406, 410, 413, 415, 416, 449, 459, 556, 557, 591, 610, 611, 612, 614, 616, 617, 619, 620, 622, 640, 656, 687, 691, 854, 980, 981, 982, 983, 985, 986, 989, 990, 992, 1000, 1001, 1013, 1023, 1028, 1042, 1044], "just": [4, 13, 32, 71, 87, 96, 118, 122, 149, 190, 197, 222, 234, 261, 268, 272, 284, 300, 337, 350, 351, 359, 361, 374, 378, 379, 380, 381, 383, 384, 387, 391, 392, 393, 403, 406, 407, 410, 413, 415, 418, 465, 530, 532, 539, 543, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 576, 581, 607, 608, 643, 649, 654, 655, 657, 659, 663, 664, 665, 673, 674, 675, 801, 817, 847, 855, 856, 975, 982, 985, 986, 987, 990, 994, 996, 1000, 1007, 1019, 1028, 1032, 1034, 1036, 1040, 1044], "had": [4, 9, 48, 125, 157, 236, 306, 312, 319, 361, 379, 380, 414, 417, 441, 976, 986, 1010, 1012, 1028, 1029, 1035, 1036, 1037, 1038, 1039, 1043], "explicit": [4, 167, 171, 176, 228, 236, 244, 341, 365, 366, 367, 378, 380, 391, 393, 394, 407, 414, 420, 469, 496, 498, 499, 538, 548, 549, 628, 635, 636, 638, 673, 795, 796, 803, 842, 850, 858, 898, 903, 950, 954, 978, 980, 982, 986, 996, 1002, 1006, 1028, 1032, 1037, 1038, 1041, 1045], "pass": [4, 7, 8, 21, 22, 35, 39, 118, 129, 146, 181, 184, 201, 230, 232, 233, 236, 239, 240, 242, 251, 259, 262, 313, 316, 319, 342, 352, 361, 365, 366, 367, 374, 379, 380, 381, 384, 385, 386, 387, 388, 391, 393, 397, 400, 402, 406, 407, 410, 411, 413, 414, 416, 417, 418, 424, 428, 434, 435, 437, 439, 440, 441, 443, 444, 445, 446, 447, 449, 451, 454, 456, 457, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 488, 489, 492, 493, 494, 500, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 578, 579, 585, 586, 587, 588, 590, 591, 594, 604, 605, 607, 608, 614, 617, 623, 628, 629, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 728, 729, 738, 759, 770, 774, 775, 776, 777, 784, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 807, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 869, 870, 871, 872, 873, 875, 877, 878, 879, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 918, 919, 925, 929, 930, 934, 935, 937, 939, 941, 943, 946, 947, 954, 956, 957, 960, 975, 976, 982, 984, 986, 987, 988, 989, 990, 993, 996, 999, 1000, 1001, 1007, 1010, 1012, 1016, 1025, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "them": [4, 5, 8, 33, 40, 41, 50, 54, 56, 57, 61, 66, 67, 71, 72, 87, 96, 98, 101, 113, 128, 144, 149, 152, 164, 165, 170, 171, 172, 176, 179, 184, 195, 201, 202, 204, 218, 233, 236, 239, 240, 259, 261, 262, 264, 270, 279, 286, 306, 311, 313, 319, 329, 337, 352, 359, 365, 367, 374, 377, 379, 380, 381, 382, 383, 387, 391, 393, 394, 395, 397, 400, 404, 405, 406, 407, 410, 411, 413, 414, 416, 441, 444, 446, 447, 454, 461, 464, 490, 491, 505, 543, 564, 565, 566, 567, 604, 605, 613, 617, 618, 621, 629, 636, 661, 689, 764, 767, 770, 774, 775, 776, 777, 785, 795, 809, 816, 823, 858, 862, 867, 868, 872, 876, 878, 879, 888, 889, 895, 906, 907, 943, 952, 975, 976, 982, 985, 986, 987, 989, 990, 991, 996, 1001, 1002, 1005, 1006, 1009, 1010, 1012, 1019, 1020, 1021, 1028, 1029, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "But": [4, 9, 54, 169, 201, 202, 261, 284, 306, 379, 391, 406, 409, 412, 413, 459, 742, 906, 907, 975, 986, 1001, 1007], "much": [4, 6, 7, 9, 13, 20, 26, 41, 56, 81, 83, 93, 99, 106, 117, 125, 126, 132, 133, 134, 152, 164, 165, 170, 171, 172, 173, 176, 197, 198, 202, 233, 236, 261, 263, 264, 267, 272, 302, 307, 311, 312, 313, 318, 319, 321, 337, 342, 350, 351, 361, 365, 367, 374, 379, 380, 381, 384, 387, 391, 392, 396, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 444, 445, 493, 531, 532, 533, 535, 556, 557, 558, 559, 655, 656, 663, 664, 665, 673, 674, 675, 689, 775, 776, 798, 799, 813, 873, 891, 898, 975, 978, 981, 982, 983, 985, 986, 987, 989, 990, 992, 994, 998, 999, 1001, 1002, 1007, 1010, 1016, 1017, 1019, 1020, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "monoton": [4, 26, 111, 136, 167, 171, 218, 232, 317, 404, 554, 555, 558, 559, 561, 562, 629, 632, 633, 691, 703, 874, 886, 900, 903, 906, 907, 908, 909, 983, 987, 996, 1001, 1035, 1039, 1043, 1045], "relationship": [4, 13, 21, 112, 113, 158, 169, 170, 179, 184, 200, 202, 203, 268, 282, 307, 313, 393, 406, 408, 410, 459, 633, 711, 983, 986, 988, 989, 993, 994, 1019, 1033], "ordin": [4, 54, 72, 132, 239, 309, 312, 313, 318, 321, 373, 393, 413, 493, 564, 706, 863, 866, 871, 872, 879, 982, 983, 996, 1007, 1036, 1042], "case": [4, 7, 8, 13, 26, 28, 35, 38, 50, 53, 56, 58, 62, 67, 72, 73, 82, 87, 101, 104, 115, 117, 118, 125, 126, 132, 146, 148, 149, 152, 159, 170, 171, 173, 184, 186, 189, 191, 200, 201, 202, 204, 205, 208, 214, 216, 217, 218, 229, 233, 234, 235, 236, 239, 240, 251, 255, 258, 260, 261, 262, 264, 267, 268, 270, 279, 284, 287, 291, 302, 306, 308, 311, 313, 316, 319, 341, 350, 351, 352, 359, 361, 365, 366, 367, 373, 374, 377, 379, 380, 381, 383, 384, 385, 386, 388, 391, 392, 393, 394, 396, 397, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 434, 437, 440, 441, 443, 444, 448, 450, 460, 461, 462, 464, 471, 493, 505, 506, 512, 536, 538, 539, 540, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 578, 579, 585, 588, 590, 591, 594, 599, 603, 606, 607, 608, 622, 624, 625, 627, 629, 644, 645, 650, 653, 654, 655, 656, 658, 660, 663, 665, 666, 669, 671, 672, 673, 677, 679, 680, 681, 682, 683, 684, 696, 700, 705, 706, 709, 715, 717, 718, 719, 722, 724, 725, 726, 730, 731, 734, 738, 739, 741, 742, 744, 746, 749, 750, 752, 759, 774, 777, 779, 780, 781, 783, 784, 785, 786, 790, 792, 794, 795, 798, 799, 801, 809, 813, 817, 818, 819, 820, 821, 822, 823, 825, 827, 835, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 858, 865, 867, 868, 871, 872, 873, 876, 877, 878, 879, 882, 888, 889, 890, 891, 898, 900, 903, 906, 907, 913, 914, 924, 935, 936, 954, 975, 976, 978, 980, 981, 983, 984, 985, 987, 988, 989, 990, 992, 993, 996, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1012, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "usual": [4, 13, 41, 79, 80, 82, 124, 125, 127, 132, 169, 171, 186, 200, 201, 255, 258, 261, 270, 271, 307, 319, 337, 361, 365, 366, 377, 379, 381, 387, 391, 392, 393, 397, 403, 406, 407, 410, 411, 413, 414, 415, 447, 453, 535, 537, 539, 544, 556, 557, 604, 605, 627, 637, 655, 656, 663, 664, 665, 673, 674, 675, 689, 722, 754, 801, 822, 826, 898, 935, 975, 976, 978, 981, 982, 983, 985, 986, 987, 990, 991, 992, 993, 996, 1000, 1001, 1002, 1012, 1018, 1019, 1043, 1045], "hot": [4, 72, 117, 120, 132, 170, 200, 270, 307, 308, 312, 318, 337, 393, 413, 414, 548, 563, 578, 645, 655, 656, 666, 677, 861, 863, 865, 866, 869, 871, 872, 879, 982, 996, 1036, 1042, 1043], "encod": [4, 8, 11, 49, 56, 72, 96, 117, 132, 167, 170, 171, 172, 199, 200, 239, 270, 305, 307, 308, 309, 314, 318, 320, 321, 337, 350, 352, 371, 373, 375, 381, 384, 391, 393, 407, 410, 411, 413, 414, 416, 461, 484, 493, 500, 523, 528, 534, 536, 537, 539, 541, 542, 543, 545, 548, 559, 563, 564, 566, 578, 585, 586, 588, 627, 645, 655, 656, 666, 669, 677, 731, 797, 802, 804, 821, 824, 858, 859, 861, 863, 865, 866, 869, 871, 872, 879, 882, 896, 975, 976, 982, 983, 986, 988, 989, 991, 1000, 1006, 1007, 1023, 1029, 1030, 1036, 1040, 1042, 1043, 1044], "consist": [4, 7, 27, 33, 38, 57, 58, 71, 81, 91, 93, 96, 118, 122, 128, 135, 149, 155, 157, 160, 165, 173, 200, 218, 235, 239, 267, 270, 302, 311, 316, 319, 345, 351, 361, 365, 372, 374, 376, 379, 381, 385, 386, 387, 388, 392, 393, 394, 404, 406, 408, 412, 413, 414, 424, 425, 428, 429, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 487, 494, 528, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 588, 608, 624, 625, 626, 627, 632, 635, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 671, 674, 675, 676, 684, 685, 686, 687, 688, 697, 731, 793, 794, 802, 826, 827, 828, 830, 831, 832, 833, 841, 842, 844, 846, 849, 850, 856, 861, 862, 863, 865, 869, 870, 873, 874, 876, 877, 879, 890, 891, 894, 898, 899, 901, 902, 904, 907, 909, 918, 920, 941, 957, 960, 975, 978, 979, 980, 982, 983, 985, 986, 987, 989, 990, 996, 999, 1001, 1002, 1005, 1007, 1010, 1012, 1019, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "scale": [4, 5, 12, 26, 28, 38, 41, 44, 47, 48, 57, 59, 62, 72, 73, 80, 83, 87, 98, 101, 102, 129, 149, 152, 153, 154, 157, 158, 159, 161, 167, 171, 176, 180, 181, 188, 200, 202, 204, 214, 215, 216, 218, 220, 223, 227, 229, 235, 239, 251, 258, 261, 262, 263, 268, 287, 301, 302, 303, 305, 306, 314, 317, 320, 322, 330, 332, 334, 337, 341, 348, 361, 364, 365, 371, 372, 373, 376, 379, 384, 388, 391, 392, 393, 405, 406, 407, 411, 413, 414, 415, 416, 443, 444, 447, 448, 454, 461, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 498, 507, 511, 512, 521, 531, 535, 537, 538, 544, 546, 547, 558, 559, 579, 587, 588, 594, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 628, 629, 638, 641, 642, 643, 644, 646, 649, 655, 656, 657, 658, 659, 669, 671, 673, 674, 675, 678, 684, 685, 686, 687, 689, 691, 696, 700, 713, 737, 743, 753, 755, 765, 771, 773, 801, 809, 812, 824, 825, 826, 838, 839, 840, 855, 856, 859, 862, 867, 868, 870, 873, 875, 876, 878, 883, 884, 885, 887, 888, 890, 891, 898, 899, 900, 901, 902, 903, 904, 962, 963, 964, 975, 978, 979, 982, 986, 987, 988, 989, 990, 994, 1000, 1001, 1007, 1010, 1012, 1019, 1020, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "same": [4, 7, 8, 13, 17, 21, 27, 35, 38, 41, 45, 54, 56, 58, 59, 65, 71, 72, 73, 93, 96, 98, 101, 104, 106, 113, 115, 119, 122, 123, 125, 126, 130, 149, 152, 170, 171, 173, 186, 188, 189, 194, 200, 201, 202, 208, 218, 236, 240, 251, 256, 257, 258, 259, 261, 262, 264, 266, 267, 269, 274, 284, 287, 289, 302, 306, 307, 309, 311, 312, 316, 318, 328, 337, 350, 351, 352, 359, 361, 365, 366, 367, 373, 374, 376, 378, 379, 381, 383, 385, 388, 391, 392, 393, 394, 397, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 427, 431, 435, 436, 443, 447, 453, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 490, 492, 493, 495, 501, 505, 506, 528, 529, 532, 533, 534, 535, 536, 537, 540, 544, 546, 548, 549, 550, 551, 554, 556, 557, 558, 559, 561, 562, 564, 565, 586, 587, 599, 600, 603, 607, 608, 610, 619, 624, 625, 626, 629, 630, 643, 646, 649, 650, 652, 655, 656, 660, 663, 664, 665, 669, 670, 671, 672, 673, 674, 675, 681, 684, 696, 701, 702, 709, 710, 712, 714, 722, 727, 728, 732, 738, 751, 752, 753, 774, 775, 776, 782, 784, 788, 790, 791, 793, 794, 795, 796, 798, 799, 801, 803, 804, 809, 813, 814, 817, 819, 820, 821, 822, 823, 824, 825, 840, 841, 842, 846, 848, 849, 850, 861, 862, 863, 867, 868, 870, 872, 873, 874, 875, 876, 877, 878, 880, 887, 898, 899, 906, 908, 920, 924, 935, 952, 957, 960, 961, 971, 975, 976, 978, 980, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 996, 1000, 1001, 1002, 1006, 1007, 1016, 1021, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "minmaxscal": [4, 5, 73, 145, 176, 222, 239, 301, 318, 367, 402, 407, 461, 884, 976, 996, 1030, 1033, 1036, 1038, 1039, 1040, 1044, 1045], "although": [4, 9, 26, 119, 132, 169, 197, 218, 229, 248, 282, 341, 361, 367, 381, 393, 406, 407, 411, 414, 493, 812, 815, 869, 985, 987, 988, 989, 992, 1002, 1012, 1019, 1020, 1021, 1028, 1036, 1043], "doe": [4, 7, 8, 9, 12, 13, 25, 26, 28, 32, 35, 41, 47, 54, 56, 58, 71, 73, 74, 87, 107, 112, 117, 118, 121, 122, 127, 132, 149, 158, 170, 171, 184, 197, 200, 206, 218, 221, 222, 223, 226, 229, 232, 233, 234, 236, 237, 239, 248, 249, 256, 261, 263, 264, 268, 270, 271, 282, 284, 297, 306, 308, 310, 312, 313, 319, 320, 328, 329, 335, 337, 345, 347, 350, 351, 352, 365, 373, 377, 379, 380, 381, 383, 387, 392, 393, 397, 400, 404, 405, 406, 407, 410, 411, 413, 414, 415, 416, 431, 437, 439, 443, 444, 446, 447, 451, 453, 462, 464, 469, 470, 476, 484, 496, 500, 505, 524, 532, 534, 535, 536, 538, 541, 543, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 578, 579, 580, 585, 586, 588, 590, 591, 594, 599, 603, 607, 624, 629, 635, 646, 647, 648, 651, 652, 653, 656, 668, 670, 672, 679, 680, 695, 697, 699, 704, 724, 725, 726, 730, 732, 734, 739, 742, 774, 779, 780, 783, 784, 790, 795, 798, 799, 809, 855, 857, 859, 860, 861, 863, 865, 867, 870, 871, 872, 875, 878, 879, 887, 890, 891, 895, 898, 899, 906, 907, 908, 909, 913, 918, 922, 935, 938, 939, 952, 954, 970, 975, 976, 978, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 992, 994, 996, 1000, 1001, 1002, 1021, 1028, 1029, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "result": [4, 5, 6, 9, 13, 14, 20, 25, 26, 27, 28, 31, 33, 35, 38, 41, 43, 44, 45, 46, 47, 49, 54, 55, 56, 61, 63, 67, 72, 74, 76, 82, 87, 96, 99, 101, 103, 107, 115, 116, 117, 119, 122, 125, 126, 128, 130, 131, 141, 148, 149, 152, 154, 156, 160, 164, 170, 171, 172, 173, 180, 185, 186, 189, 190, 195, 201, 202, 204, 208, 214, 215, 218, 221, 222, 225, 229, 232, 234, 240, 246, 251, 252, 255, 256, 259, 261, 262, 264, 267, 268, 269, 270, 272, 273, 276, 279, 284, 286, 290, 300, 301, 302, 306, 307, 308, 311, 316, 318, 320, 321, 322, 325, 328, 330, 337, 341, 342, 345, 350, 352, 357, 358, 359, 365, 366, 367, 373, 374, 376, 379, 381, 383, 384, 385, 387, 391, 392, 393, 394, 400, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 431, 437, 438, 440, 442, 443, 444, 447, 448, 449, 450, 451, 452, 454, 456, 459, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 476, 486, 505, 506, 508, 510, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 576, 577, 578, 579, 581, 585, 586, 588, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 627, 628, 629, 631, 633, 637, 640, 649, 650, 655, 661, 662, 663, 664, 673, 674, 675, 683, 686, 687, 688, 689, 690, 691, 692, 705, 707, 709, 714, 721, 722, 724, 725, 726, 727, 728, 732, 733, 734, 750, 752, 753, 760, 767, 770, 774, 775, 776, 777, 779, 780, 781, 783, 789, 790, 793, 794, 795, 797, 798, 799, 800, 805, 809, 810, 811, 812, 814, 815, 819, 825, 826, 827, 829, 830, 831, 832, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 862, 863, 871, 872, 875, 876, 879, 887, 891, 895, 898, 900, 903, 906, 907, 908, 909, 910, 911, 918, 919, 934, 935, 937, 941, 951, 957, 960, 976, 978, 980, 981, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1006, 1007, 1009, 1012, 1016, 1017, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "compar": [4, 5, 13, 20, 21, 25, 26, 28, 35, 37, 38, 44, 50, 55, 56, 58, 59, 65, 69, 73, 82, 85, 87, 88, 99, 104, 106, 111, 112, 113, 115, 121, 122, 125, 130, 132, 136, 149, 156, 164, 165, 167, 170, 172, 173, 178, 182, 184, 188, 189, 195, 197, 200, 203, 204, 206, 208, 210, 217, 218, 219, 221, 222, 225, 228, 231, 234, 239, 240, 242, 244, 248, 249, 254, 256, 258, 266, 268, 270, 272, 277, 279, 285, 289, 293, 294, 298, 299, 304, 305, 307, 311, 314, 318, 341, 350, 351, 352, 359, 361, 367, 374, 376, 379, 381, 403, 404, 406, 408, 409, 410, 411, 413, 415, 416, 437, 438, 439, 441, 442, 443, 445, 446, 447, 449, 455, 460, 461, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 487, 493, 499, 501, 509, 511, 519, 521, 525, 528, 534, 548, 549, 558, 559, 560, 561, 562, 568, 628, 636, 641, 642, 650, 652, 654, 655, 660, 663, 665, 673, 674, 681, 692, 702, 709, 712, 727, 734, 739, 782, 794, 795, 800, 809, 821, 824, 831, 840, 844, 847, 851, 855, 858, 859, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 883, 884, 885, 886, 887, 888, 889, 898, 899, 900, 902, 903, 975, 978, 979, 980, 982, 983, 985, 986, 987, 988, 989, 990, 992, 996, 997, 1000, 1001, 1002, 1005, 1006, 1019, 1020, 1028, 1030, 1035, 1036, 1041], "linear_model": [4, 7, 8, 10, 14, 26, 28, 31, 55, 72, 74, 76, 87, 117, 132, 134, 135, 138, 140, 148, 149, 152, 164, 167, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 229, 230, 231, 232, 236, 238, 241, 243, 257, 264, 269, 270, 274, 275, 282, 303, 307, 308, 311, 313, 316, 317, 318, 319, 320, 322, 329, 350, 361, 365, 367, 368, 378, 379, 381, 385, 387, 388, 392, 393, 397, 407, 413, 435, 462, 534, 536, 539, 540, 542, 543, 545, 564, 565, 566, 567, 594, 628, 629, 631, 632, 635, 637, 638, 639, 640, 697, 698, 784, 809, 817, 819, 820, 821, 829, 830, 831, 832, 856, 873, 877, 898, 899, 902, 905, 930, 978, 982, 986, 987, 992, 994, 996, 1000, 1016, 1017, 1019, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "ridgecv": [4, 76, 132, 149, 170, 238, 393, 397, 413, 565, 640, 669, 672, 982, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "onehotencod": [4, 72, 117, 122, 132, 170, 171, 200, 218, 231, 239, 241, 243, 312, 317, 319, 322, 373, 393, 407, 413, 463, 464, 563, 578, 579, 861, 865, 866, 869, 872, 879, 976, 996, 1029, 1032, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "one_hot_encod": [4, 122], "handle_unknown": [4, 72, 117, 122, 132, 171, 172, 231, 239, 241, 243, 312, 317, 320, 871, 872, 996, 1032, 1036, 1040, 1041], "ignor": [4, 6, 8, 18, 45, 50, 56, 63, 72, 112, 114, 117, 122, 129, 132, 171, 188, 192, 200, 209, 215, 231, 236, 241, 243, 252, 301, 302, 311, 312, 317, 320, 341, 342, 351, 356, 379, 381, 383, 385, 393, 396, 406, 407, 413, 414, 424, 425, 428, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 457, 458, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 500, 505, 506, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 576, 578, 579, 580, 585, 586, 587, 588, 591, 594, 599, 600, 607, 608, 624, 625, 626, 627, 629, 630, 632, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 704, 710, 711, 722, 725, 726, 734, 751, 752, 759, 765, 770, 774, 779, 780, 783, 784, 793, 794, 796, 797, 798, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 856, 857, 858, 861, 862, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 932, 961, 982, 983, 986, 988, 992, 996, 1001, 1017, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "sparse_output": [4, 122, 243, 312, 320, 563, 865, 869, 871, 877, 882, 996, 1043, 1044], "alpha": [4, 5, 7, 8, 10, 12, 13, 14, 17, 18, 25, 27, 32, 35, 38, 41, 43, 46, 53, 57, 61, 66, 76, 83, 87, 96, 98, 99, 101, 102, 103, 105, 106, 112, 114, 115, 121, 125, 128, 129, 131, 132, 133, 149, 152, 155, 157, 158, 159, 160, 161, 164, 165, 170, 179, 180, 181, 182, 184, 185, 186, 188, 189, 194, 195, 197, 198, 200, 201, 202, 204, 205, 209, 212, 213, 218, 221, 222, 225, 234, 235, 242, 246, 261, 262, 263, 264, 265, 268, 269, 271, 273, 274, 282, 284, 287, 289, 292, 294, 300, 302, 306, 307, 308, 309, 311, 313, 317, 319, 320, 327, 329, 334, 335, 338, 339, 341, 342, 345, 346, 347, 350, 365, 374, 381, 385, 391, 408, 409, 411, 413, 415, 416, 418, 443, 468, 469, 475, 524, 528, 530, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 557, 592, 593, 595, 608, 610, 612, 613, 620, 628, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 684, 719, 744, 833, 834, 835, 837, 855, 856, 894, 906, 907, 908, 909, 975, 982, 986, 988, 990, 994, 999, 1000, 1001, 1002, 1016, 1019, 1021, 1025, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1040, 1041, 1042, 1043, 1044], "logspac": [4, 12, 74, 79, 104, 138, 139, 149, 153, 158, 170, 193, 204, 205, 233, 235, 250, 262, 274, 276, 288, 300, 308, 311, 337, 345, 817, 981, 982, 1016, 1017, 1019], "naive_linear_pipelin": 4, "transform": [4, 5, 6, 8, 10, 14, 26, 45, 47, 48, 49, 52, 55, 58, 63, 70, 75, 77, 87, 90, 91, 98, 99, 101, 103, 105, 106, 111, 132, 136, 146, 158, 165, 167, 170, 171, 172, 176, 192, 200, 201, 208, 214, 216, 218, 222, 225, 229, 231, 234, 236, 237, 239, 243, 248, 258, 259, 262, 270, 284, 286, 292, 293, 294, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 321, 337, 340, 341, 350, 352, 361, 368, 373, 374, 375, 376, 379, 381, 384, 388, 393, 397, 402, 404, 405, 406, 408, 411, 413, 414, 415, 416, 422, 427, 430, 434, 438, 439, 440, 442, 444, 446, 449, 461, 462, 463, 464, 465, 479, 480, 481, 482, 485, 486, 493, 500, 505, 506, 511, 512, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 554, 556, 558, 561, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 633, 635, 636, 637, 638, 639, 650, 655, 660, 670, 673, 681, 685, 686, 687, 688, 689, 691, 698, 699, 710, 749, 750, 781, 795, 798, 799, 809, 824, 827, 833, 842, 847, 850, 854, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 896, 898, 900, 903, 904, 927, 929, 944, 975, 976, 978, 980, 982, 983, 986, 987, 990, 1000, 1001, 1003, 1006, 1007, 1008, 1012, 1017, 1018, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "remaind": [4, 122, 170, 189, 200, 202, 218, 239, 321, 355, 407, 461, 464, 1028, 1035, 1036, 1037, 1040, 1041, 1044], "alpha_": [4, 83, 138, 170, 180, 188, 189, 469, 608, 641, 642, 644, 648, 650, 652, 653, 658, 660, 670, 672, 982, 1002, 1016, 1028, 1035], "7298221281347033": 4, "142": [4, 13, 48, 59, 413], "014": [4, 269, 319, 323, 385], "184": [4, 200, 235, 303, 385, 1019], "020": [4, 994], "affirm": 4, "select": [4, 7, 9, 37, 45, 56, 58, 63, 69, 70, 72, 75, 77, 83, 93, 95, 108, 112, 114, 120, 122, 125, 132, 139, 146, 150, 157, 159, 170, 171, 173, 176, 178, 180, 184, 204, 208, 215, 218, 219, 222, 229, 233, 235, 239, 245, 246, 253, 259, 260, 261, 262, 266, 288, 306, 311, 312, 318, 322, 325, 326, 329, 332, 337, 345, 348, 350, 351, 352, 361, 365, 366, 368, 374, 376, 377, 379, 381, 387, 392, 393, 403, 406, 407, 408, 411, 413, 414, 416, 440, 442, 443, 444, 446, 448, 450, 455, 456, 457, 461, 463, 464, 469, 470, 473, 485, 486, 489, 490, 493, 494, 497, 498, 499, 501, 509, 512, 529, 531, 532, 537, 538, 541, 546, 548, 555, 556, 557, 560, 562, 578, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 624, 628, 629, 642, 643, 644, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 668, 670, 673, 675, 679, 680, 688, 689, 694, 709, 713, 715, 750, 784, 788, 789, 793, 794, 795, 798, 799, 800, 801, 809, 820, 821, 822, 824, 826, 840, 841, 842, 844, 846, 848, 849, 850, 858, 859, 863, 868, 874, 878, 895, 898, 899, 903, 906, 907, 908, 909, 914, 956, 980, 981, 983, 985, 986, 987, 989, 990, 992, 996, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1019, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "specifi": [4, 21, 56, 96, 122, 123, 153, 156, 158, 159, 160, 189, 201, 208, 246, 269, 365, 366, 373, 377, 379, 381, 388, 392, 393, 397, 400, 406, 407, 410, 411, 413, 415, 416, 418, 420, 434, 438, 442, 447, 449, 460, 461, 464, 466, 467, 469, 470, 471, 472, 473, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 512, 524, 528, 530, 534, 535, 537, 538, 543, 544, 549, 554, 556, 557, 558, 559, 561, 564, 565, 580, 581, 590, 591, 594, 599, 607, 608, 617, 628, 629, 630, 635, 640, 643, 644, 645, 648, 649, 650, 652, 653, 655, 656, 657, 658, 659, 660, 662, 665, 666, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 684, 688, 695, 697, 699, 706, 708, 725, 726, 734, 738, 750, 767, 775, 776, 779, 780, 783, 795, 797, 798, 799, 801, 802, 804, 808, 809, 812, 817, 818, 819, 820, 821, 822, 823, 825, 829, 832, 833, 834, 836, 837, 838, 839, 843, 848, 871, 872, 873, 876, 877, 879, 894, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 930, 937, 970, 976, 982, 983, 985, 986, 989, 993, 994, 996, 999, 1000, 1001, 1016, 1020, 1028, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045], "three": [4, 7, 27, 35, 41, 42, 47, 56, 59, 79, 91, 92, 112, 117, 119, 122, 124, 133, 134, 135, 146, 149, 160, 170, 184, 192, 197, 200, 202, 209, 211, 235, 236, 246, 249, 282, 312, 313, 317, 366, 372, 376, 383, 396, 403, 406, 410, 411, 412, 414, 448, 459, 495, 706, 937, 979, 981, 982, 983, 986, 989, 996, 1000, 1001, 1005, 1012, 1020, 1028], "higher": [4, 13, 58, 81, 99, 104, 112, 115, 117, 118, 125, 128, 152, 154, 159, 160, 170, 171, 172, 176, 200, 201, 204, 218, 225, 226, 252, 255, 259, 261, 264, 275, 289, 311, 337, 341, 350, 351, 352, 361, 365, 374, 377, 381, 403, 406, 408, 413, 415, 416, 417, 441, 445, 446, 468, 475, 506, 529, 536, 540, 545, 550, 551, 554, 555, 556, 557, 558, 559, 561, 562, 563, 570, 585, 588, 604, 605, 616, 624, 628, 632, 634, 643, 644, 649, 650, 657, 658, 659, 660, 673, 675, 676, 701, 720, 724, 748, 781, 793, 795, 798, 799, 801, 809, 816, 817, 822, 825, 844, 847, 873, 890, 891, 892, 898, 899, 900, 901, 902, 903, 904, 911, 978, 982, 983, 985, 986, 989, 993, 996, 1000, 1001, 1019, 1021, 1029, 1034, 1036, 1043, 1045], "suspect": 4, "origin": [4, 5, 14, 17, 21, 22, 47, 48, 49, 52, 57, 59, 75, 76, 91, 96, 98, 99, 106, 130, 145, 146, 149, 152, 154, 156, 157, 164, 165, 171, 176, 188, 189, 204, 221, 222, 223, 225, 226, 233, 234, 235, 239, 252, 258, 264, 287, 292, 303, 307, 311, 322, 326, 341, 343, 350, 352, 361, 374, 376, 378, 379, 381, 383, 384, 391, 393, 400, 403, 406, 407, 410, 411, 413, 414, 416, 417, 418, 419, 431, 434, 438, 440, 441, 442, 443, 444, 446, 447, 456, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 490, 491, 492, 498, 516, 528, 530, 531, 532, 534, 535, 536, 537, 538, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 573, 578, 579, 581, 585, 587, 588, 591, 604, 605, 607, 608, 611, 627, 629, 632, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 689, 693, 698, 724, 759, 765, 796, 797, 802, 804, 813, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 844, 845, 848, 849, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 874, 875, 876, 877, 878, 887, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 916, 918, 919, 923, 924, 945, 957, 960, 979, 980, 982, 983, 985, 986, 989, 992, 997, 998, 999, 1000, 1003, 1006, 1010, 1012, 1021, 1031, 1032, 1034, 1036, 1038, 1040, 1042, 1044], "mere": [4, 261, 393, 825, 1000], "min": [4, 10, 11, 12, 13, 14, 26, 28, 32, 53, 59, 76, 96, 99, 112, 114, 121, 124, 125, 130, 141, 149, 154, 156, 157, 158, 165, 170, 182, 188, 189, 195, 202, 203, 206, 222, 233, 234, 237, 282, 290, 291, 297, 300, 302, 306, 308, 309, 311, 330, 343, 346, 388, 406, 409, 411, 479, 480, 481, 482, 509, 531, 532, 535, 537, 538, 546, 547, 560, 624, 628, 629, 651, 652, 653, 654, 679, 680, 701, 737, 753, 776, 798, 799, 847, 855, 856, 868, 877, 884, 935, 951, 982, 986, 989, 996, 1034, 1037, 1039, 1040, 1043], "prevent": [4, 56, 125, 146, 169, 201, 204, 306, 312, 313, 337, 350, 355, 361, 379, 381, 383, 391, 392, 406, 411, 414, 439, 446, 485, 486, 558, 559, 587, 588, 608, 724, 781, 855, 856, 883, 884, 886, 887, 888, 889, 986, 988, 991, 992, 996, 1002, 1019, 1030, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "properli": [4, 13, 26, 56, 129, 157, 256, 316, 367, 377, 379, 383, 387, 412, 898, 899, 900, 901, 902, 903, 904, 975, 1031, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "automat": [4, 8, 12, 47, 64, 66, 72, 104, 138, 148, 179, 203, 246, 247, 259, 262, 306, 313, 317, 321, 329, 339, 341, 366, 368, 374, 377, 379, 381, 383, 387, 393, 396, 402, 406, 407, 408, 411, 413, 414, 415, 430, 447, 449, 453, 459, 461, 462, 464, 493, 496, 512, 535, 537, 538, 544, 546, 548, 554, 558, 561, 580, 585, 588, 591, 599, 640, 642, 643, 644, 649, 650, 655, 656, 657, 658, 659, 660, 663, 664, 665, 669, 671, 672, 673, 675, 678, 681, 684, 685, 688, 692, 797, 812, 815, 824, 834, 855, 856, 859, 860, 862, 871, 872, 879, 890, 891, 898, 899, 900, 903, 906, 908, 912, 924, 957, 960, 975, 977, 980, 985, 990, 996, 1000, 1002, 1006, 1007, 1016, 1028, 1031, 1032, 1033, 1039, 1042, 1043, 1044, 1045], "raw": [4, 12, 15, 38, 82, 98, 132, 157, 170, 176, 303, 313, 327, 352, 365, 374, 381, 387, 393, 404, 405, 406, 408, 411, 414, 466, 471, 498, 499, 500, 556, 557, 558, 560, 579, 585, 586, 587, 588, 631, 674, 687, 691, 702, 782, 844, 902, 983, 986, 990, 992, 993, 996, 999, 1018, 1020, 1029, 1033, 1036, 1039], "recogn": [4, 30, 36, 87, 120, 167, 201, 319, 385, 397, 406, 414, 499, 694, 710, 824, 903, 986, 1012, 1045], "increas": [4, 7, 15, 27, 38, 44, 56, 58, 59, 62, 76, 99, 112, 113, 115, 118, 121, 129, 145, 149, 152, 156, 157, 158, 161, 170, 171, 176, 180, 182, 191, 200, 201, 202, 204, 218, 226, 233, 247, 248, 261, 262, 263, 268, 274, 300, 307, 308, 311, 318, 326, 337, 345, 351, 352, 355, 365, 366, 367, 378, 387, 388, 404, 406, 408, 411, 413, 414, 417, 437, 441, 443, 449, 460, 468, 469, 475, 529, 533, 550, 551, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 585, 588, 624, 632, 633, 634, 642, 647, 648, 651, 652, 653, 655, 656, 663, 664, 665, 673, 674, 675, 679, 680, 682, 683, 689, 703, 704, 709, 778, 785, 798, 799, 827, 846, 848, 849, 850, 853, 855, 856, 872, 898, 906, 907, 908, 909, 935, 975, 977, 981, 982, 983, 985, 986, 989, 996, 1000, 1001, 1002, 1010, 1028, 1030, 1033, 1037, 1039, 1040, 1043], "strong": [4, 13, 167, 169, 170, 178, 193, 197, 204, 206, 219, 235, 282, 313, 345, 405, 411, 413, 521, 646, 669, 979, 980, 982, 983, 985, 993, 1001, 1019], "similar": [4, 5, 7, 12, 18, 21, 26, 27, 35, 38, 50, 52, 58, 61, 76, 87, 96, 100, 112, 125, 148, 152, 159, 169, 170, 171, 172, 184, 200, 202, 214, 221, 223, 224, 225, 229, 235, 236, 252, 258, 261, 264, 267, 268, 269, 279, 282, 284, 306, 319, 336, 341, 345, 351, 352, 361, 365, 371, 373, 375, 377, 378, 379, 381, 384, 385, 388, 391, 393, 400, 403, 404, 406, 409, 410, 411, 413, 414, 415, 416, 417, 437, 438, 440, 441, 442, 447, 449, 451, 452, 500, 505, 506, 533, 579, 586, 587, 588, 607, 674, 689, 692, 700, 702, 712, 716, 721, 724, 725, 727, 730, 734, 736, 751, 756, 757, 782, 788, 789, 792, 793, 794, 820, 825, 870, 891, 894, 898, 899, 900, 901, 919, 975, 978, 979, 981, 982, 983, 985, 987, 989, 990, 992, 993, 996, 998, 999, 1000, 1001, 1002, 1006, 1007, 1012, 1020, 1023, 1028, 1032, 1033, 1034, 1036, 1040, 1041], "magnitud": [4, 106, 114, 153, 165, 170, 217, 239, 266, 306, 311, 319, 365, 374, 385, 406, 413, 416, 610, 649, 701, 878, 982, 986, 990, 996, 1000, 1002, 1030, 1037], "discret": [4, 47, 106, 112, 151, 162, 167, 171, 200, 218, 279, 305, 309, 314, 367, 371, 374, 375, 383, 392, 393, 406, 411, 414, 416, 435, 436, 445, 449, 457, 458, 459, 489, 511, 512, 519, 550, 556, 568, 585, 586, 589, 592, 593, 596, 597, 604, 605, 607, 608, 609, 613, 614, 615, 654, 655, 738, 795, 806, 824, 833, 834, 837, 859, 863, 871, 872, 875, 878, 887, 898, 903, 907, 949, 975, 982, 983, 984, 986, 987, 989, 1002, 1006, 1012, 1023, 1030, 1033, 1041, 1042, 1043], "manner": [4, 76, 96, 146, 171, 176, 248, 320, 321, 366, 379, 385, 406, 411, 413, 414, 706, 838, 839, 975, 986, 1002, 1031, 1038], "integ": [4, 18, 49, 54, 72, 170, 200, 218, 317, 318, 361, 365, 373, 374, 376, 381, 384, 388, 392, 393, 406, 407, 410, 411, 413, 414, 431, 434, 459, 461, 464, 469, 484, 493, 495, 498, 499, 500, 502, 505, 506, 509, 511, 512, 516, 519, 547, 556, 557, 558, 559, 560, 564, 565, 569, 579, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 629, 630, 641, 648, 652, 656, 662, 670, 672, 673, 696, 711, 731, 795, 797, 798, 799, 800, 802, 804, 809, 810, 811, 812, 814, 815, 818, 821, 829, 832, 834, 837, 838, 839, 863, 871, 872, 877, 878, 879, 882, 892, 894, 906, 907, 908, 909, 914, 949, 950, 951, 976, 982, 987, 989, 996, 999, 1001, 1002, 1012, 1019, 1021, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "uniqu": [4, 17, 25, 31, 43, 48, 49, 58, 59, 64, 68, 119, 120, 126, 127, 170, 172, 184, 215, 218, 248, 270, 293, 312, 313, 322, 328, 350, 351, 352, 373, 381, 388, 393, 406, 407, 410, 413, 414, 437, 447, 451, 453, 461, 464, 493, 546, 547, 548, 550, 551, 554, 555, 556, 557, 558, 559, 561, 562, 563, 607, 630, 631, 632, 663, 665, 673, 694, 706, 750, 778, 795, 797, 809, 821, 826, 827, 830, 836, 845, 848, 850, 855, 869, 871, 872, 879, 882, 898, 900, 906, 907, 908, 909, 923, 935, 949, 950, 982, 987, 996, 1010, 1019, 1036, 1039, 1040, 1042, 1043, 1044], "decid": [4, 11, 58, 61, 72, 252, 258, 261, 268, 374, 379, 394, 414, 416, 447, 454, 556, 557, 608, 632, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 668, 678, 681, 793, 840, 841, 842, 844, 846, 848, 849, 850, 861, 985, 992, 1010, 1041, 1044], "treat": [4, 6, 72, 122, 132, 164, 170, 200, 270, 312, 318, 328, 361, 379, 391, 393, 403, 413, 414, 439, 558, 559, 585, 586, 588, 604, 605, 629, 635, 642, 668, 671, 725, 726, 734, 750, 779, 780, 783, 784, 867, 868, 874, 875, 878, 879, 883, 886, 887, 889, 898, 899, 943, 976, 978, 982, 986, 987, 993, 996, 1000, 1002, 1017, 1032, 1040, 1044, 1045], "therebi": [4, 170, 410, 413, 978, 1038], "assumpt": [4, 9, 13, 26, 28, 37, 69, 79, 80, 99, 157, 167, 169, 200, 229, 282, 306, 385, 391, 392, 395, 404, 405, 406, 408, 410, 411, 414, 416, 444, 448, 450, 485, 500, 509, 529, 531, 538, 647, 651, 794, 795, 798, 799, 809, 835, 890, 891, 980, 982, 986, 987, 988, 989, 991, 992, 993, 996, 999, 1002, 1035, 1041], "impli": [4, 152, 350, 351, 352, 411, 413, 416, 471, 570, 579, 607, 608, 619, 731, 922, 982, 983, 1021, 1039], "give": [4, 12, 13, 14, 25, 26, 40, 45, 50, 61, 63, 65, 71, 72, 76, 98, 124, 152, 157, 161, 164, 170, 171, 189, 191, 197, 200, 201, 202, 229, 252, 258, 263, 270, 286, 290, 293, 303, 319, 320, 329, 365, 367, 374, 376, 378, 379, 381, 385, 387, 391, 392, 393, 394, 400, 403, 404, 405, 406, 407, 408, 411, 413, 414, 416, 418, 431, 443, 444, 446, 448, 456, 469, 493, 496, 500, 530, 535, 546, 547, 548, 549, 554, 555, 561, 562, 563, 590, 591, 594, 604, 605, 635, 644, 658, 662, 673, 717, 726, 732, 735, 790, 795, 798, 799, 809, 819, 820, 821, 823, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 875, 876, 878, 879, 887, 982, 986, 989, 990, 991, 993, 994, 996, 1000, 1001, 1002, 1006, 1010, 1012, 1014, 1019, 1020, 1021, 1028, 1032, 1035, 1036, 1038, 1039, 1040, 1042, 1044], "lot": [4, 83, 170, 204, 374, 379, 380, 381, 387, 411, 413, 798, 799, 890, 891, 975, 998, 1000, 1001, 1006, 1007, 1010, 1020, 1021, 1028, 1033, 1035, 1036, 1037, 1038, 1040], "addit": [4, 5, 7, 12, 14, 15, 67, 72, 83, 91, 96, 99, 112, 116, 118, 119, 122, 123, 148, 157, 158, 159, 165, 170, 171, 179, 184, 189, 201, 202, 204, 225, 240, 263, 270, 275, 282, 306, 317, 318, 327, 341, 352, 357, 361, 365, 366, 371, 372, 373, 374, 375, 377, 378, 379, 381, 384, 385, 387, 391, 392, 394, 396, 400, 405, 406, 408, 410, 411, 414, 415, 416, 417, 430, 438, 439, 441, 442, 443, 447, 454, 466, 471, 493, 500, 529, 531, 533, 534, 536, 538, 539, 540, 546, 550, 551, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 609, 616, 625, 627, 628, 632, 635, 636, 637, 638, 639, 640, 641, 642, 667, 684, 685, 689, 695, 696, 699, 738, 754, 755, 784, 788, 793, 794, 801, 817, 827, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 880, 890, 891, 898, 899, 929, 935, 975, 980, 982, 986, 987, 989, 990, 993, 996, 998, 999, 1000, 1001, 1002, 1006, 1012, 1023, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "level": [4, 9, 11, 12, 17, 28, 35, 42, 54, 96, 117, 121, 141, 149, 151, 156, 159, 162, 167, 170, 171, 211, 212, 213, 214, 215, 218, 229, 233, 234, 250, 261, 264, 270, 271, 290, 297, 335, 336, 338, 339, 341, 343, 345, 351, 359, 365, 374, 376, 377, 379, 381, 385, 393, 395, 396, 397, 404, 411, 414, 416, 420, 451, 465, 490, 491, 493, 500, 518, 528, 533, 534, 544, 558, 559, 564, 565, 608, 612, 619, 620, 622, 663, 664, 665, 673, 674, 675, 684, 687, 689, 691, 697, 699, 713, 719, 724, 781, 819, 820, 821, 823, 826, 827, 854, 855, 856, 896, 911, 975, 982, 986, 987, 989, 994, 1000, 1002, 1006, 1007, 1021, 1031, 1039, 1042, 1043, 1044], "one_hot_linear_pipelin": 4, "one_hot_tim": 4, "099": 4, "011": [4, 269, 284, 351, 385], "131": [4, 14, 57, 385, 986, 1029], "rate": [4, 112, 116, 122, 144, 171, 200, 207, 218, 233, 239, 258, 261, 268, 270, 271, 301, 302, 303, 367, 379, 406, 407, 411, 415, 443, 463, 533, 550, 551, 556, 557, 558, 559, 589, 592, 593, 595, 596, 597, 603, 641, 642, 665, 673, 674, 675, 689, 695, 699, 723, 778, 785, 854, 855, 856, 892, 975, 982, 983, 986, 989, 990, 1000, 1002, 1010, 1032, 1036, 1037], "better": [4, 5, 9, 13, 20, 21, 25, 32, 51, 56, 75, 76, 79, 80, 81, 82, 87, 91, 96, 99, 115, 118, 124, 125, 132, 144, 156, 157, 158, 160, 164, 172, 180, 184, 186, 189, 200, 201, 202, 208, 215, 217, 218, 225, 234, 235, 236, 239, 251, 255, 261, 263, 264, 267, 270, 271, 279, 282, 303, 310, 311, 320, 321, 337, 345, 350, 351, 352, 355, 361, 365, 374, 378, 379, 380, 381, 383, 384, 385, 387, 393, 395, 400, 402, 404, 406, 408, 410, 411, 412, 413, 414, 416, 446, 447, 535, 537, 544, 556, 557, 558, 559, 604, 605, 627, 668, 674, 689, 706, 721, 730, 735, 738, 759, 794, 823, 833, 834, 835, 836, 837, 838, 839, 844, 855, 856, 875, 876, 879, 887, 890, 891, 898, 899, 975, 976, 978, 979, 980, 982, 983, 985, 986, 988, 989, 990, 994, 996, 999, 1000, 1002, 1007, 1009, 1010, 1014, 1016, 1021, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "confirm": [4, 13, 87, 115, 122, 125, 172, 200, 202, 264, 267, 270, 311, 352, 383, 975, 996, 1036], "benefit": [4, 57, 75, 76, 112, 170, 214, 225, 232, 234, 286, 320, 365, 379, 388, 393, 404, 406, 445, 458, 465, 505, 564, 565, 655, 656, 663, 664, 665, 673, 674, 675, 829, 896, 898, 975, 981, 989, 994, 996, 1007, 1010, 1028, 1031, 1032, 1033, 1040, 1041, 1042, 1043], "ad": [4, 14, 21, 76, 104, 106, 112, 118, 123, 145, 152, 158, 159, 179, 184, 202, 204, 225, 235, 236, 261, 262, 263, 306, 317, 318, 319, 320, 321, 322, 329, 341, 351, 378, 379, 383, 385, 391, 393, 394, 411, 413, 414, 415, 416, 430, 438, 439, 440, 442, 444, 446, 449, 456, 459, 461, 465, 479, 480, 481, 482, 511, 519, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 608, 610, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 645, 647, 651, 655, 656, 666, 673, 675, 677, 685, 686, 689, 692, 710, 711, 725, 726, 771, 773, 779, 780, 783, 785, 793, 794, 795, 809, 819, 826, 836, 842, 847, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 890, 891, 895, 896, 898, 899, 906, 907, 908, 909, 925, 975, 979, 981, 982, 983, 987, 989, 990, 992, 1007, 1010, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "progress": [4, 7, 8, 96, 135, 149, 165, 193, 289, 320, 376, 379, 383, 384, 394, 397, 402, 406, 556, 557, 689, 827, 829, 832, 847, 855, 856, 1010, 1019, 1021, 1028, 1030, 1037, 1042], "veri": [4, 13, 26, 28, 40, 41, 43, 45, 51, 53, 61, 63, 81, 82, 83, 86, 93, 99, 102, 125, 130, 138, 157, 164, 170, 171, 172, 189, 200, 201, 202, 205, 208, 218, 225, 229, 235, 236, 239, 246, 263, 264, 267, 268, 270, 271, 276, 284, 302, 306, 319, 325, 328, 337, 341, 347, 350, 352, 361, 365, 374, 378, 379, 381, 384, 385, 387, 391, 392, 393, 400, 404, 406, 408, 410, 411, 412, 413, 414, 415, 416, 439, 444, 449, 459, 468, 469, 475, 497, 501, 507, 554, 555, 558, 559, 561, 562, 564, 565, 586, 587, 619, 647, 648, 651, 652, 653, 661, 679, 680, 682, 688, 689, 692, 702, 739, 742, 788, 793, 795, 803, 805, 809, 812, 815, 838, 839, 863, 867, 868, 869, 878, 890, 891, 900, 903, 906, 907, 908, 909, 935, 975, 978, 979, 981, 982, 983, 984, 985, 986, 989, 990, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1019, 1020, 1028, 1033, 1034, 1036, 1039, 1041, 1043, 1044], "new": [4, 7, 8, 10, 51, 57, 59, 61, 71, 72, 91, 104, 112, 114, 116, 117, 118, 125, 131, 132, 146, 149, 152, 158, 165, 172, 173, 200, 206, 214, 229, 260, 263, 268, 282, 288, 290, 312, 317, 320, 326, 329, 336, 341, 361, 366, 367, 373, 374, 376, 377, 378, 381, 382, 383, 385, 387, 388, 392, 393, 394, 396, 404, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 424, 428, 430, 431, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 497, 498, 499, 501, 502, 505, 506, 507, 509, 520, 523, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 701, 705, 710, 711, 715, 718, 719, 720, 721, 723, 724, 725, 726, 727, 730, 735, 736, 737, 738, 739, 742, 749, 750, 753, 757, 762, 763, 765, 774, 778, 779, 780, 781, 783, 784, 785, 786, 787, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 808, 809, 813, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 884, 886, 887, 888, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 916, 918, 919, 921, 929, 930, 934, 935, 942, 943, 944, 945, 946, 949, 952, 954, 956, 961, 967, 973, 975, 976, 978, 982, 986, 987, 989, 990, 991, 992, 996, 998, 999, 1000, 1001, 1007, 1010, 1012, 1013, 1016, 1019, 1021, 1026, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "minut": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 374, 379, 983, 1005], "1440": 4, "caus": [4, 26, 28, 125, 153, 170, 198, 200, 204, 205, 218, 282, 313, 341, 352, 361, 377, 384, 404, 406, 411, 412, 414, 416, 440, 444, 446, 456, 506, 529, 579, 586, 607, 608, 833, 834, 835, 837, 862, 871, 873, 876, 877, 918, 919, 975, 976, 982, 986, 994, 996, 999, 1007, 1012, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045], "signific": [4, 56, 118, 125, 145, 167, 204, 218, 254, 261, 277, 282, 284, 350, 361, 373, 374, 391, 406, 409, 410, 413, 501, 529, 531, 546, 547, 624, 655, 656, 663, 664, 665, 673, 674, 675, 814, 823, 898, 900, 901, 902, 903, 904, 985, 986, 989, 1028, 1030, 1031, 1032, 1036], "overfit": [4, 117, 125, 167, 171, 172, 173, 179, 204, 229, 248, 254, 256, 262, 266, 276, 277, 300, 307, 308, 310, 311, 312, 313, 337, 345, 355, 357, 358, 374, 393, 404, 410, 413, 434, 485, 486, 558, 559, 564, 565, 654, 795, 798, 799, 809, 820, 821, 855, 856, 858, 873, 877, 981, 990, 992, 994, 996, 1002, 1010, 1019, 1031], "avoid": [4, 7, 12, 13, 45, 58, 63, 73, 117, 118, 170, 171, 202, 204, 209, 218, 224, 236, 239, 256, 262, 266, 292, 294, 295, 310, 311, 333, 334, 351, 366, 377, 379, 380, 381, 383, 384, 385, 393, 394, 396, 400, 404, 406, 408, 410, 413, 414, 417, 437, 439, 441, 449, 459, 465, 490, 491, 492, 496, 505, 506, 531, 536, 540, 543, 582, 583, 631, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 686, 688, 690, 692, 709, 788, 795, 796, 800, 806, 809, 819, 820, 821, 858, 861, 867, 868, 870, 875, 876, 877, 878, 881, 883, 884, 885, 887, 888, 889, 891, 896, 935, 980, 983, 985, 986, 989, 990, 992, 994, 996, 1001, 1002, 1007, 1021, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "kbinsdiscret": [4, 54, 167, 200, 218, 305, 308, 313, 314, 321, 509, 654, 861, 877, 907, 996, 1036, 1040, 1041, 1042, 1044], "re": [4, 8, 14, 27, 57, 71, 72, 112, 122, 155, 169, 218, 236, 247, 251, 264, 266, 270, 317, 350, 352, 366, 379, 380, 383, 387, 392, 394, 397, 404, 410, 414, 466, 467, 468, 469, 470, 471, 472, 473, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 643, 649, 657, 659, 797, 812, 815, 906, 907, 908, 909, 982, 987, 989, 996, 1001, 1007, 1010, 1021, 1028, 1032, 1033, 1035, 1037], "fine": [4, 38, 121, 149, 204, 216, 252, 259, 341, 357, 358, 376, 383, 393, 414, 443, 935, 954, 989, 992, 1001, 1007, 1038], "grain": [4, 32, 38, 234, 252, 308, 385, 414, 443, 954, 1007], "still": [4, 13, 33, 45, 54, 56, 58, 63, 83, 91, 100, 120, 125, 132, 152, 158, 169, 170, 172, 173, 179, 184, 200, 202, 218, 234, 264, 270, 306, 318, 319, 322, 350, 351, 361, 367, 373, 378, 379, 381, 383, 384, 385, 387, 391, 393, 406, 410, 413, 414, 417, 437, 441, 451, 471, 493, 624, 629, 632, 634, 714, 752, 774, 777, 788, 789, 798, 799, 812, 815, 876, 878, 898, 916, 975, 976, 980, 982, 985, 989, 992, 994, 1001, 1002, 1005, 1007, 1010, 1028, 1030, 1033, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "express": [4, 7, 12, 112, 118, 152, 157, 170, 261, 262, 312, 318, 334, 341, 352, 373, 374, 379, 380, 385, 406, 411, 412, 414, 447, 453, 454, 585, 586, 588, 713, 795, 801, 809, 817, 819, 820, 821, 822, 825, 845, 978, 982, 986, 990, 996, 997, 1002, 1036], "advantag": [4, 5, 40, 56, 58, 96, 101, 200, 201, 229, 247, 262, 282, 320, 361, 393, 404, 410, 411, 414, 416, 438, 442, 457, 531, 586, 646, 671, 672, 759, 826, 827, 828, 858, 859, 898, 899, 900, 901, 902, 903, 904, 975, 978, 981, 982, 983, 986, 987, 989, 990, 996, 1000, 1001, 1002, 1031], "final": [4, 13, 27, 35, 41, 43, 56, 71, 72, 81, 83, 87, 92, 101, 112, 113, 115, 117, 122, 123, 126, 132, 135, 146, 157, 165, 169, 171, 173, 176, 179, 184, 188, 189, 197, 200, 202, 217, 218, 222, 229, 243, 250, 259, 267, 279, 284, 312, 313, 316, 317, 337, 341, 365, 367, 377, 379, 380, 381, 383, 392, 393, 403, 404, 406, 407, 410, 413, 414, 415, 434, 439, 444, 445, 449, 456, 459, 461, 533, 552, 553, 564, 565, 567, 591, 624, 644, 650, 656, 676, 687, 691, 716, 795, 826, 827, 858, 859, 895, 898, 975, 976, 978, 982, 983, 986, 989, 992, 993, 996, 999, 1010, 1019, 1033, 1036, 1037, 1038, 1039, 1041], "observ": [4, 5, 7, 9, 11, 13, 14, 17, 21, 25, 28, 35, 38, 41, 44, 54, 63, 72, 79, 81, 82, 83, 97, 98, 101, 104, 112, 115, 116, 118, 119, 125, 128, 131, 140, 141, 149, 152, 155, 157, 158, 159, 161, 170, 171, 172, 179, 180, 195, 196, 198, 200, 201, 202, 204, 214, 218, 225, 226, 232, 233, 239, 257, 261, 263, 264, 268, 284, 287, 290, 297, 311, 322, 328, 336, 337, 341, 342, 350, 351, 352, 357, 358, 374, 376, 393, 396, 404, 406, 408, 409, 410, 411, 412, 415, 416, 438, 440, 442, 443, 444, 446, 456, 457, 466, 467, 468, 469, 470, 471, 472, 473, 521, 529, 548, 549, 560, 607, 608, 643, 649, 654, 698, 713, 715, 754, 816, 836, 844, 877, 879, 982, 985, 986, 990, 991, 992, 993, 996, 999, 1000, 1001, 1002, 1009, 1013, 1015, 1016, 1018, 1029, 1041, 1042, 1043, 1044], "complet": [4, 38, 39, 40, 45, 50, 53, 59, 63, 87, 130, 144, 146, 149, 167, 172, 173, 206, 228, 229, 236, 239, 244, 259, 311, 313, 316, 351, 361, 374, 379, 383, 384, 387, 391, 407, 410, 411, 413, 414, 438, 442, 446, 449, 459, 460, 461, 464, 492, 533, 534, 535, 536, 541, 543, 555, 566, 567, 578, 584, 585, 586, 588, 624, 625, 626, 627, 642, 646, 654, 668, 670, 701, 702, 712, 713, 714, 727, 732, 733, 753, 782, 791, 826, 829, 832, 841, 857, 858, 859, 860, 921, 971, 975, 980, 982, 986, 987, 989, 1001, 1002, 1012, 1021, 1028, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "induct": [4, 37, 69, 125, 167, 393, 406, 413, 420, 438, 509, 561, 624, 628, 893, 894, 947, 970, 982, 999, 1030], "bia": [4, 28, 79, 111, 119, 120, 125, 136, 167, 170, 172, 179, 180, 182, 266, 300, 341, 345, 361, 374, 381, 393, 404, 408, 412, 413, 416, 521, 553, 556, 557, 604, 605, 611, 639, 645, 646, 655, 656, 666, 667, 677, 855, 856, 871, 873, 877, 883, 884, 886, 887, 888, 889, 907, 981, 982, 985, 986, 990, 991, 994, 1000, 1019], "preserv": [4, 49, 101, 225, 233, 256, 381, 382, 405, 410, 411, 414, 578, 585, 586, 588, 643, 649, 693, 738, 770, 774, 813, 814, 815, 882, 918, 919, 976, 982, 983, 996, 998, 1006, 1016, 1028, 1031, 1032, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "smooth": [4, 47, 48, 55, 149, 157, 193, 201, 216, 312, 337, 376, 394, 406, 412, 416, 445, 446, 534, 535, 536, 543, 554, 555, 556, 557, 561, 562, 563, 587, 588, 616, 619, 673, 833, 834, 835, 837, 875, 879, 887, 906, 907, 908, 909, 982, 988, 996, 1000, 1001, 1002, 1021], "local": [4, 21, 40, 58, 62, 96, 99, 118, 129, 149, 157, 158, 167, 171, 201, 220, 223, 225, 227, 229, 239, 285, 298, 357, 358, 366, 376, 377, 379, 383, 385, 387, 396, 406, 411, 413, 414, 416, 444, 449, 459, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 499, 535, 537, 541, 544, 546, 556, 557, 560, 563, 607, 608, 685, 686, 687, 688, 689, 690, 692, 693, 754, 755, 841, 844, 847, 849, 859, 868, 891, 894, 902, 952, 954, 984, 985, 989, 990, 1002, 1020, 1022, 1023, 1032, 1036, 1040, 1043], "attempt": [4, 55, 171, 196, 206, 256, 350, 365, 378, 393, 406, 418, 443, 447, 454, 465, 628, 685, 686, 690, 813, 840, 841, 842, 844, 846, 848, 849, 850, 876, 878, 896, 918, 919, 982, 983, 989, 1002, 1012, 1035, 1040, 1045], "each": [4, 7, 8, 10, 11, 12, 15, 18, 21, 26, 27, 28, 33, 35, 38, 42, 44, 45, 48, 50, 54, 56, 59, 61, 62, 71, 72, 74, 75, 76, 86, 87, 90, 91, 92, 93, 96, 97, 101, 104, 105, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 128, 130, 131, 132, 133, 134, 135, 145, 147, 149, 154, 156, 161, 164, 165, 169, 170, 171, 173, 176, 179, 186, 187, 189, 194, 198, 200, 201, 202, 204, 205, 208, 215, 218, 222, 229, 230, 233, 234, 235, 236, 237, 239, 240, 241, 243, 246, 249, 251, 255, 256, 257, 259, 261, 262, 264, 266, 267, 270, 271, 279, 282, 284, 287, 289, 293, 295, 297, 300, 301, 303, 306, 307, 308, 309, 311, 312, 313, 316, 318, 319, 320, 322, 325, 326, 327, 330, 337, 341, 343, 345, 351, 352, 355, 356, 359, 361, 365, 366, 367, 373, 374, 375, 376, 377, 379, 380, 381, 383, 384, 385, 387, 388, 391, 392, 393, 397, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 423, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 457, 458, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 516, 519, 520, 523, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 704, 705, 707, 710, 716, 721, 724, 725, 726, 734, 735, 741, 742, 744, 746, 747, 749, 750, 754, 755, 758, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 772, 774, 775, 776, 777, 779, 780, 781, 783, 784, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 883, 884, 885, 887, 888, 889, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 924, 929, 930, 935, 937, 938, 942, 943, 954, 962, 963, 964, 967, 976, 978, 980, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1010, 1012, 1016, 1018, 1019, 1020, 1021, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "sine": [4, 152, 157, 158, 167, 194, 206, 245, 253, 357, 375, 612, 793, 794, 985, 1002], "cosin": [4, 41, 275, 284, 289, 371, 374, 393, 406, 411, 412, 438, 442, 447, 454, 532, 587, 588, 617, 693, 756, 757, 758, 761, 766, 767, 770, 774, 775, 776, 838, 839, 843, 870, 989, 1002, 1023, 1038], "match": [4, 21, 38, 46, 96, 99, 103, 118, 167, 176, 178, 200, 219, 223, 232, 239, 341, 352, 374, 377, 381, 383, 406, 411, 413, 414, 427, 446, 461, 463, 505, 506, 512, 523, 528, 534, 539, 545, 548, 564, 565, 569, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 655, 661, 662, 682, 683, 696, 700, 701, 702, 710, 712, 716, 730, 774, 775, 776, 782, 838, 839, 843, 847, 861, 862, 863, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 898, 905, 911, 922, 954, 983, 985, 986, 988, 989, 1008, 1012, 1021, 1023, 1028, 1034, 1035, 1036, 1038, 1040, 1041, 1044], "togeth": [4, 12, 52, 61, 72, 121, 132, 152, 158, 170, 181, 222, 225, 239, 257, 312, 320, 340, 356, 361, 381, 383, 391, 392, 393, 400, 406, 413, 414, 415, 421, 448, 450, 564, 565, 591, 686, 712, 795, 809, 858, 859, 872, 982, 983, 987, 993, 996, 1002, 1003, 1010, 1013, 1015, 1034], "equival": [4, 15, 35, 56, 58, 122, 128, 148, 152, 157, 170, 184, 218, 251, 270, 284, 311, 341, 352, 361, 365, 377, 385, 388, 392, 393, 406, 407, 408, 409, 410, 411, 413, 415, 416, 438, 440, 441, 442, 443, 444, 446, 447, 454, 461, 466, 471, 506, 531, 538, 555, 558, 559, 560, 561, 562, 585, 588, 610, 613, 616, 618, 621, 643, 644, 645, 649, 651, 655, 656, 663, 664, 665, 666, 669, 673, 674, 677, 680, 684, 685, 690, 705, 706, 719, 730, 737, 738, 743, 744, 745, 757, 766, 775, 776, 793, 794, 798, 799, 803, 805, 829, 832, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 855, 861, 867, 868, 870, 873, 874, 875, 876, 878, 886, 888, 889, 922, 933, 972, 975, 980, 982, 983, 984, 986, 992, 996, 1000, 1001, 1002, 1036, 1037, 1038, 1039, 1041, 1042, 1045], "importantli": [4, 14, 97, 171, 176, 306, 406], "jump": [4, 201, 306, 376, 379, 414, 877], "functiontransform": [4, 71, 117, 200, 218, 329, 461, 462, 996, 1033, 1034, 1036, 1041, 1042, 1043, 1045], "sin_transform": 4, "return": [4, 6, 7, 8, 10, 11, 13, 14, 17, 18, 20, 25, 26, 28, 34, 35, 38, 41, 49, 54, 57, 62, 71, 76, 93, 102, 104, 106, 110, 112, 115, 117, 124, 125, 128, 132, 149, 155, 158, 160, 165, 173, 179, 180, 188, 189, 192, 200, 201, 208, 209, 210, 218, 236, 239, 242, 243, 249, 251, 256, 257, 258, 259, 260, 261, 262, 264, 265, 268, 275, 284, 289, 294, 297, 303, 306, 308, 311, 316, 333, 337, 350, 352, 355, 359, 365, 372, 373, 374, 379, 380, 381, 385, 386, 388, 391, 393, 404, 405, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 956, 957, 958, 959, 960, 961, 967, 970, 971, 972, 973, 974, 976, 986, 989, 993, 994, 1001, 1002, 1007, 1012, 1017, 1019, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lambda": [4, 7, 8, 10, 13, 20, 57, 74, 124, 139, 180, 218, 261, 262, 310, 329, 402, 406, 411, 413, 414, 641, 642, 643, 644, 862, 874, 978, 982, 996, 1016, 1036, 1042], "sin": [4, 14, 20, 40, 97, 113, 124, 125, 129, 131, 144, 152, 158, 159, 161, 179, 180, 184, 194, 201, 206, 223, 235, 252, 296, 307, 317, 344, 357, 358, 416, 513, 612, 696, 760, 1020], "pi": [4, 14, 35, 40, 41, 97, 106, 129, 131, 144, 152, 180, 184, 188, 194, 201, 223, 246, 247, 248, 251, 252, 275, 297, 317, 358, 396, 412, 416, 513, 514, 515, 612, 639, 980, 981, 982, 988, 1020], "cos_transform": 4, "co": [4, 12, 14, 19, 23, 40, 41, 129, 131, 157, 167, 170, 201, 223, 261, 275, 320, 358, 383, 412, 414, 446, 448, 450, 485, 508, 588, 696, 716, 760, 791, 981, 996, 1010, 1022, 1023], "effect": [4, 6, 28, 38, 40, 41, 46, 47, 54, 58, 63, 70, 77, 87, 99, 101, 112, 125, 127, 129, 148, 152, 153, 157, 159, 167, 168, 170, 171, 173, 174, 184, 200, 201, 202, 204, 205, 206, 220, 225, 227, 239, 243, 247, 251, 261, 262, 263, 266, 269, 270, 303, 305, 307, 314, 317, 324, 331, 337, 341, 342, 345, 346, 347, 350, 351, 352, 361, 366, 379, 381, 384, 391, 393, 404, 406, 407, 411, 412, 413, 414, 416, 417, 434, 440, 441, 443, 444, 446, 447, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 487, 493, 497, 511, 521, 522, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 586, 587, 588, 591, 603, 606, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 687, 688, 689, 698, 700, 749, 781, 793, 796, 797, 800, 802, 804, 806, 813, 814, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 844, 845, 848, 849, 855, 856, 858, 861, 862, 863, 864, 865, 867, 868, 870, 874, 875, 876, 877, 878, 879, 883, 884, 885, 886, 887, 888, 889, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 918, 919, 935, 952, 960, 975, 980, 982, 983, 985, 986, 987, 993, 996, 999, 1001, 1002, 1017, 1019, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "expans": [4, 164, 318, 447, 873, 1037], "synthet": [4, 14, 26, 28, 32, 35, 38, 43, 50, 119, 125, 130, 152, 157, 159, 171, 190, 202, 217, 300, 308, 345, 361, 365, 372, 382, 394, 406, 408, 415, 655, 656, 898, 899, 905, 980, 1019, 1034], "beyond": [4, 28, 201, 202, 365, 367, 378, 379, 391, 404, 413, 725, 726, 734, 779, 780, 783, 903, 983, 987, 996, 1001, 1007, 1036], "pd": [4, 12, 13, 26, 72, 73, 74, 112, 118, 119, 125, 129, 157, 164, 169, 170, 171, 172, 173, 179, 184, 189, 200, 204, 208, 218, 240, 243, 251, 259, 261, 262, 264, 272, 273, 279, 311, 312, 313, 319, 320, 345, 350, 351, 384, 393, 407, 461, 463, 624, 625, 626, 627, 629, 774, 916, 918, 919, 975, 976, 993, 996, 1039, 1041, 1042, 1043], "hour_df": 4, "arang": [4, 11, 13, 14, 17, 41, 59, 61, 66, 74, 80, 81, 104, 107, 121, 122, 123, 124, 126, 127, 130, 134, 145, 152, 154, 159, 160, 164, 165, 173, 184, 200, 203, 205, 209, 224, 232, 234, 256, 261, 264, 269, 272, 282, 284, 297, 300, 308, 319, 325, 326, 328, 330, 337, 344, 350, 352, 357, 358, 359, 361, 391, 403, 410, 414, 462, 541, 824, 873, 877, 981, 982, 990, 996, 1000, 1017], "reshap": [4, 5, 6, 14, 17, 25, 33, 47, 48, 49, 51, 52, 54, 55, 59, 73, 81, 86, 96, 99, 106, 115, 120, 121, 130, 141, 147, 152, 154, 155, 156, 157, 158, 159, 161, 179, 191, 197, 213, 214, 216, 217, 222, 224, 226, 229, 234, 238, 250, 259, 288, 290, 297, 300, 302, 303, 307, 308, 309, 313, 316, 319, 320, 322, 330, 336, 337, 342, 343, 346, 347, 391, 403, 411, 413, 414, 442, 462, 581, 628, 824, 873, 877, 982, 996, 1002, 1017, 1020, 1033], "hour_sin": 4, "fit_transform": [4, 5, 6, 10, 12, 15, 20, 45, 50, 53, 54, 59, 63, 91, 97, 100, 107, 130, 176, 191, 216, 218, 221, 222, 223, 224, 225, 226, 232, 233, 236, 237, 243, 284, 288, 301, 306, 307, 311, 312, 313, 316, 319, 321, 322, 337, 350, 351, 352, 361, 371, 374, 381, 384, 385, 393, 402, 407, 411, 414, 415, 422, 430, 439, 440, 442, 444, 446, 461, 463, 465, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 685, 686, 687, 688, 689, 842, 847, 850, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 896, 976, 978, 982, 987, 989, 996, 997, 998, 1012, 1017, 1020, 1021, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1042, 1044, 1045], "hour_co": 4, "2d": [4, 37, 45, 48, 49, 50, 54, 62, 63, 69, 95, 108, 130, 167, 194, 201, 206, 221, 223, 226, 229, 232, 233, 334, 337, 359, 373, 375, 379, 381, 388, 393, 406, 407, 411, 414, 416, 438, 449, 459, 461, 464, 485, 487, 488, 489, 490, 491, 497, 498, 499, 501, 507, 511, 530, 538, 546, 581, 583, 632, 640, 654, 669, 688, 734, 775, 819, 823, 827, 865, 914, 918, 919, 934, 949, 972, 973, 980, 982, 983, 986, 993, 997, 1002, 1012, 1018, 1028, 1032, 1035, 1036, 1037, 1040, 1042], "scatter": [4, 9, 11, 12, 17, 25, 31, 32, 35, 39, 40, 43, 44, 45, 46, 50, 53, 57, 58, 59, 60, 61, 63, 68, 81, 87, 92, 93, 98, 100, 101, 102, 103, 105, 113, 114, 118, 121, 128, 130, 131, 133, 141, 144, 152, 153, 154, 156, 158, 159, 160, 161, 169, 170, 176, 180, 183, 190, 192, 196, 197, 198, 201, 202, 203, 209, 212, 213, 214, 217, 221, 222, 223, 224, 225, 226, 229, 234, 235, 237, 246, 247, 248, 249, 250, 251, 252, 256, 262, 264, 275, 284, 287, 290, 291, 292, 293, 294, 295, 296, 300, 306, 308, 309, 311, 320, 327, 330, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 346, 347, 350, 356, 357, 358, 408, 628, 698, 954, 980, 982, 1019], "color": [4, 7, 8, 9, 10, 11, 12, 13, 17, 21, 25, 26, 27, 28, 32, 34, 35, 37, 39, 41, 43, 45, 46, 47, 48, 50, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 79, 80, 81, 82, 83, 87, 91, 92, 93, 96, 97, 98, 100, 103, 104, 105, 106, 112, 113, 118, 121, 122, 123, 124, 127, 128, 129, 130, 132, 134, 138, 141, 152, 154, 155, 156, 157, 158, 159, 160, 161, 165, 167, 170, 172, 173, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 192, 194, 196, 198, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 214, 217, 218, 222, 223, 224, 226, 229, 233, 234, 235, 237, 240, 246, 247, 248, 249, 250, 251, 252, 256, 260, 262, 264, 265, 266, 267, 268, 270, 271, 272, 274, 282, 286, 289, 290, 291, 292, 295, 296, 297, 300, 306, 307, 308, 310, 311, 312, 317, 327, 328, 330, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 356, 357, 373, 374, 376, 387, 406, 413, 414, 444, 490, 491, 503, 580, 581, 775, 960, 1000, 1002, 1033, 1038, 1040, 1045], "map": [4, 5, 10, 11, 18, 20, 27, 54, 101, 116, 124, 127, 130, 139, 152, 167, 176, 200, 221, 223, 228, 236, 239, 244, 262, 265, 270, 292, 295, 297, 305, 306, 314, 329, 337, 341, 343, 351, 352, 373, 380, 391, 393, 397, 404, 405, 406, 407, 410, 411, 413, 414, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 493, 495, 499, 506, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 758, 761, 793, 794, 795, 798, 799, 806, 807, 809, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 886, 887, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 940, 943, 944, 975, 978, 983, 986, 988, 998, 1001, 1002, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045], "space": [4, 8, 10, 20, 32, 47, 49, 54, 58, 59, 61, 62, 64, 66, 71, 72, 75, 87, 96, 98, 105, 107, 117, 121, 125, 130, 146, 149, 152, 158, 176, 184, 201, 221, 222, 223, 225, 233, 234, 235, 239, 240, 247, 252, 269, 272, 273, 284, 293, 294, 308, 318, 341, 350, 351, 352, 359, 361, 365, 371, 374, 375, 376, 379, 386, 391, 392, 393, 403, 405, 406, 409, 411, 412, 413, 414, 416, 440, 444, 445, 446, 449, 459, 461, 462, 463, 464, 479, 480, 481, 495, 529, 531, 532, 535, 536, 537, 538, 540, 541, 546, 570, 579, 585, 586, 588, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 629, 630, 635, 637, 638, 639, 640, 685, 686, 687, 689, 690, 691, 693, 696, 795, 798, 799, 801, 809, 817, 828, 838, 839, 846, 847, 848, 849, 858, 863, 864, 870, 875, 890, 891, 892, 911, 939, 978, 979, 980, 981, 982, 984, 986, 987, 989, 990, 991, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1006, 1007, 1012, 1019, 1021, 1022, 1023, 1028, 1029, 1031, 1036, 1037, 1038, 1042, 1043, 1044], "akin": [4, 201, 393], "sort": [4, 8, 10, 12, 20, 21, 25, 61, 71, 110, 115, 122, 125, 131, 149, 179, 184, 200, 201, 218, 238, 261, 262, 265, 275, 296, 344, 350, 357, 358, 379, 383, 387, 388, 393, 410, 413, 414, 416, 531, 538, 552, 563, 578, 607, 614, 694, 709, 715, 725, 726, 734, 750, 779, 780, 783, 785, 795, 821, 833, 834, 835, 836, 837, 838, 839, 846, 848, 849, 850, 853, 863, 869, 871, 872, 875, 877, 879, 887, 900, 903, 935, 940, 982, 989, 992, 996, 1010, 1021, 1028, 1032, 1038, 1039, 1040, 1042, 1043], "analog": [4, 20, 127, 385, 413, 986, 987, 1001, 1037], "clock": 4, "25th": [4, 239, 876], "back": [4, 101, 241, 366, 379, 381, 394, 400, 407, 414, 431, 440, 443, 444, 456, 479, 480, 481, 505, 506, 530, 531, 532, 535, 537, 538, 541, 578, 627, 655, 656, 663, 664, 665, 673, 674, 675, 724, 863, 865, 866, 867, 871, 872, 873, 875, 876, 878, 890, 891, 898, 982, 986, 990, 1007, 1012, 1021, 1031, 1036, 1038, 1039, 1042], "natur": [4, 32, 118, 125, 159, 170, 171, 176, 184, 200, 201, 217, 218, 225, 239, 246, 252, 270, 282, 350, 379, 381, 393, 411, 413, 414, 417, 441, 447, 454, 548, 587, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 689, 701, 737, 751, 753, 840, 841, 842, 844, 846, 848, 849, 850, 877, 933, 982, 983, 985, 986, 989, 991, 996, 1000, 1006, 1009, 1028, 1036], "sp": [4, 170, 976, 1020], "c": [4, 6, 7, 8, 11, 12, 17, 20, 25, 26, 28, 31, 32, 35, 40, 41, 43, 44, 46, 53, 57, 58, 60, 61, 62, 66, 72, 73, 75, 87, 91, 92, 93, 101, 102, 103, 112, 114, 115, 121, 122, 128, 130, 131, 133, 134, 139, 141, 147, 149, 153, 154, 155, 156, 160, 176, 183, 185, 190, 191, 192, 193, 195, 197, 198, 207, 209, 211, 212, 213, 214, 216, 217, 221, 222, 223, 225, 226, 234, 235, 237, 241, 247, 249, 250, 251, 252, 255, 256, 258, 259, 260, 261, 264, 266, 270, 272, 284, 287, 289, 290, 292, 293, 294, 295, 296, 297, 300, 301, 303, 306, 307, 308, 311, 316, 317, 318, 319, 320, 321, 322, 327, 330, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 350, 356, 357, 358, 365, 366, 373, 374, 376, 377, 379, 380, 381, 382, 384, 387, 388, 391, 396, 397, 403, 404, 406, 407, 408, 409, 410, 411, 413, 415, 419, 434, 439, 440, 443, 444, 446, 456, 465, 472, 520, 525, 531, 535, 537, 538, 544, 546, 547, 587, 604, 605, 607, 628, 636, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 669, 670, 676, 682, 683, 685, 686, 689, 690, 705, 711, 712, 715, 727, 731, 737, 738, 754, 755, 795, 809, 817, 823, 833, 834, 835, 836, 837, 838, 839, 845, 847, 854, 869, 871, 872, 873, 877, 879, 893, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 913, 918, 919, 949, 975, 978, 979, 981, 982, 983, 984, 986, 988, 989, 991, 993, 996, 998, 1000, 1001, 1002, 1006, 1010, 1012, 1016, 1017, 1019, 1020, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044], "colorbar": [4, 11, 31, 41, 96, 107, 120, 128, 147, 153, 155, 156, 158, 171, 221, 233, 250, 272, 306, 337, 694, 1040], "cyclic_cossin_transform": 4, "month_sin": 4, "month_co": 4, "weekday_sin": 4, "weekday_co": 4, "cyclic_cossin_linear_pipelin": 4, "125": [4, 13, 54, 81, 99, 243, 244, 319, 531, 975, 986, 996], "166": [4, 271, 277, 303, 385, 986, 1028], "simpl": [4, 17, 28, 56, 72, 76, 79, 86, 87, 96, 118, 123, 159, 167, 171, 184, 201, 217, 242, 262, 279, 285, 298, 320, 333, 350, 352, 356, 361, 377, 379, 381, 382, 383, 384, 386, 391, 392, 393, 394, 397, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 420, 427, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 511, 519, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 782, 784, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 942, 978, 980, 981, 982, 983, 985, 986, 989, 996, 998, 1000, 1002, 1007, 1010, 1012, 1021, 1025, 1028], "wors": [4, 87, 112, 153, 171, 206, 261, 269, 282, 311, 361, 404, 406, 416, 429, 462, 479, 480, 481, 549, 551, 553, 555, 557, 559, 562, 565, 567, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 666, 667, 669, 670, 675, 676, 677, 702, 718, 719, 720, 724, 781, 831, 832, 841, 849, 856, 899, 901, 904, 907, 909, 986, 996, 1037], "further": [4, 26, 43, 72, 79, 87, 96, 115, 121, 123, 148, 152, 157, 170, 172, 179, 184, 221, 226, 236, 258, 261, 262, 268, 321, 337, 351, 359, 365, 379, 391, 393, 405, 406, 408, 411, 413, 414, 416, 449, 459, 512, 529, 532, 579, 611, 619, 625, 655, 656, 663, 664, 665, 673, 674, 675, 688, 692, 733, 770, 774, 777, 788, 789, 834, 840, 841, 848, 849, 876, 878, 898, 900, 903, 935, 985, 986, 988, 989, 990, 992, 996, 1000, 1001, 1019, 1021, 1037, 1041], "analyz": [4, 7, 18, 184, 263, 270, 321, 350, 352, 384, 385, 406, 414, 500, 585, 586, 588, 784, 983, 986, 993, 994, 1002, 1021, 1028, 1037], "reason": [4, 8, 12, 43, 54, 71, 125, 149, 170, 171, 176, 200, 201, 208, 218, 229, 233, 234, 236, 239, 258, 261, 262, 267, 279, 284, 307, 311, 351, 352, 361, 365, 366, 367, 374, 378, 379, 381, 383, 387, 391, 392, 393, 394, 406, 407, 408, 411, 413, 414, 505, 529, 571, 635, 643, 649, 651, 669, 684, 689, 759, 795, 809, 842, 847, 854, 873, 895, 975, 976, 981, 982, 983, 986, 988, 989, 990, 992, 996, 1000, 1001, 1010, 1021, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "disappoint": 4, "outcom": [4, 118, 170, 393, 413, 566, 655, 706, 738, 790, 826, 893, 894, 895, 900, 903, 982, 986, 1002, 1009, 1021, 1032, 1036, 1038], "altern": [4, 27, 72, 87, 119, 120, 126, 132, 172, 184, 200, 218, 230, 249, 252, 270, 316, 341, 350, 351, 352, 361, 374, 382, 383, 385, 391, 393, 394, 396, 401, 403, 404, 406, 407, 408, 410, 411, 413, 414, 416, 438, 439, 442, 443, 444, 449, 455, 460, 496, 535, 537, 538, 544, 550, 551, 554, 555, 556, 557, 561, 562, 563, 579, 585, 586, 588, 614, 617, 640, 689, 703, 705, 767, 770, 774, 777, 797, 827, 862, 868, 871, 884, 891, 893, 906, 907, 908, 909, 953, 954, 980, 982, 983, 985, 986, 989, 990, 994, 996, 998, 999, 1001, 1002, 1007, 1016, 1021, 1023, 1033, 1035, 1041, 1042], "larger": [4, 7, 28, 38, 40, 43, 48, 56, 81, 83, 93, 106, 115, 126, 153, 158, 159, 165, 170, 171, 176, 180, 184, 215, 216, 217, 226, 233, 235, 246, 252, 262, 264, 270, 271, 279, 284, 286, 300, 301, 303, 306, 337, 341, 351, 352, 372, 374, 379, 385, 391, 393, 403, 404, 406, 407, 408, 410, 411, 413, 414, 416, 437, 440, 446, 447, 449, 451, 453, 512, 524, 538, 541, 558, 559, 560, 564, 565, 579, 586, 640, 649, 669, 670, 671, 672, 676, 684, 689, 701, 716, 732, 793, 843, 844, 875, 877, 878, 879, 887, 892, 934, 935, 957, 960, 978, 979, 982, 983, 985, 986, 989, 990, 994, 996, 1000, 1001, 1019, 1021, 1032, 1033, 1036, 1037, 1038, 1041, 1042], "periodic_spline_transform": 4, "n_spline": [4, 877], "degre": [4, 17, 35, 98, 114, 157, 164, 169, 171, 176, 179, 184, 188, 189, 201, 204, 235, 241, 246, 247, 248, 251, 252, 261, 275, 303, 318, 319, 334, 341, 344, 411, 415, 443, 449, 495, 532, 538, 636, 637, 640, 653, 771, 793, 795, 844, 873, 877, 900, 901, 902, 903, 904, 978, 979, 981, 982, 983, 984, 986, 987, 989, 992, 993, 996, 999, 1001, 1019, 1031, 1037, 1041, 1042], "n_knot": [4, 201, 319, 877, 996, 1041], "include_bia": [4, 179, 275, 873, 877, 1042], "knot": [4, 201, 319, 877, 996, 1041], "linspac": [4, 8, 10, 11, 14, 25, 27, 38, 39, 41, 43, 50, 56, 81, 82, 97, 106, 113, 123, 125, 152, 153, 155, 156, 157, 158, 159, 161, 171, 179, 180, 182, 184, 190, 194, 200, 201, 202, 206, 210, 211, 212, 213, 214, 218, 226, 229, 232, 233, 235, 237, 250, 261, 263, 264, 268, 269, 270, 271, 275, 289, 290, 296, 297, 307, 309, 320, 321, 336, 337, 340, 342, 343, 345, 346, 347, 628, 629, 801, 822, 838, 839, 1020], "again": [4, 21, 68, 73, 125, 156, 158, 160, 170, 225, 262, 350, 361, 383, 388, 393, 394, 406, 407, 408, 413, 414, 469, 564, 565, 631, 644, 648, 650, 652, 658, 660, 662, 689, 975, 982, 986, 1000, 1025, 1028, 1036, 1045], "splines_df": 4, "spline_": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 13, 14, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 42, 47, 48, 49, 52, 53, 54, 55, 56, 59, 61, 62, 67, 71, 75, 76, 81, 96, 97, 99, 102, 113, 118, 119, 120, 121, 122, 125, 126, 127, 130, 131, 141, 145, 147, 153, 154, 156, 158, 159, 164, 165, 167, 171, 172, 188, 189, 200, 202, 207, 209, 212, 213, 214, 215, 216, 220, 222, 224, 227, 229, 232, 233, 234, 235, 236, 238, 239, 246, 248, 250, 251, 252, 259, 261, 263, 264, 267, 268, 270, 271, 284, 289, 290, 294, 297, 300, 302, 308, 309, 316, 318, 321, 322, 327, 328, 330, 334, 337, 340, 341, 342, 343, 346, 347, 350, 351, 359, 365, 372, 373, 374, 379, 381, 393, 403, 404, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 424, 425, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 920, 923, 924, 929, 933, 935, 937, 940, 948, 950, 957, 961, 962, 963, 964, 965, 966, 967, 976, 981, 982, 986, 987, 988, 989, 990, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1017, 1018, 1020, 1021, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1044, 1045], "concat": [4, 13, 164, 169, 189, 218, 871], "cmap": [4, 5, 6, 11, 12, 14, 17, 21, 22, 31, 32, 33, 35, 40, 41, 47, 48, 51, 52, 54, 55, 59, 81, 83, 90, 96, 99, 103, 107, 114, 120, 121, 141, 147, 155, 156, 171, 179, 183, 184, 191, 192, 209, 212, 213, 214, 216, 222, 223, 224, 233, 234, 238, 255, 256, 284, 288, 290, 292, 293, 295, 297, 300, 302, 303, 306, 308, 325, 326, 330, 333, 334, 335, 336, 337, 338, 339, 342, 343, 346, 347, 356, 694, 1017, 1018], "cm": [4, 6, 11, 12, 14, 17, 21, 22, 25, 31, 32, 33, 39, 40, 47, 48, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 68, 81, 83, 90, 96, 99, 103, 114, 120, 121, 141, 147, 155, 156, 171, 183, 192, 209, 212, 213, 216, 222, 223, 224, 230, 233, 234, 238, 243, 255, 256, 284, 287, 288, 290, 294, 297, 300, 302, 303, 306, 308, 318, 321, 325, 326, 330, 333, 334, 335, 337, 338, 339, 343, 346, 347, 356, 376, 407, 694, 911, 986, 996, 1002, 1017, 1018], "tab20b": 4, "stai": [4, 13, 27, 38, 106, 170, 351, 378, 379, 383, 393, 394, 991, 1034], "midnight": 4, "fewer": [4, 14, 27, 56, 112, 121, 123, 200, 365, 380, 406, 415, 416, 445, 458, 550, 591, 693, 828, 939, 982, 987, 989, 1033, 1034, 1035], "most": [4, 6, 8, 12, 14, 20, 25, 28, 53, 54, 56, 63, 79, 86, 87, 105, 112, 118, 119, 126, 132, 144, 145, 146, 148, 149, 157, 165, 169, 170, 171, 172, 173, 176, 184, 200, 201, 218, 236, 240, 246, 252, 258, 259, 264, 268, 269, 271, 279, 282, 293, 306, 312, 313, 316, 319, 322, 326, 337, 341, 350, 351, 352, 361, 365, 366, 367, 374, 375, 377, 379, 381, 383, 384, 385, 387, 391, 393, 394, 396, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 440, 441, 443, 447, 453, 454, 457, 465, 493, 500, 518, 521, 529, 531, 536, 540, 546, 548, 558, 559, 563, 564, 585, 586, 588, 590, 601, 608, 624, 627, 646, 655, 669, 671, 673, 675, 684, 685, 689, 692, 721, 724, 742, 754, 755, 759, 781, 790, 793, 794, 798, 799, 814, 826, 827, 840, 841, 842, 844, 846, 847, 848, 849, 850, 873, 875, 883, 884, 886, 887, 888, 889, 896, 934, 935, 937, 949, 954, 975, 976, 980, 981, 982, 983, 984, 985, 986, 987, 989, 992, 993, 994, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1017, 1019, 1021, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1045], "cyclic_spline_transform": 4, "cyclic_month": 4, "cyclic_weekdai": 4, "cyclic_hour": 4, "cyclic_spline_linear_pipelin": 4, "097": [4, 72, 77, 149, 376], "132": [4, 8, 14, 57, 413], "013": [4, 269], "successfulli": [4, 14, 310, 378, 383, 406, 414, 1000], "reduc": [4, 7, 43, 46, 47, 48, 49, 54, 72, 73, 79, 115, 123, 125, 127, 130, 146, 170, 179, 180, 184, 198, 204, 205, 208, 231, 233, 236, 239, 262, 268, 279, 293, 308, 311, 312, 321, 351, 352, 361, 371, 373, 376, 379, 385, 391, 393, 404, 405, 406, 408, 410, 411, 413, 414, 415, 417, 441, 442, 447, 454, 457, 490, 531, 541, 546, 552, 553, 554, 555, 560, 561, 562, 563, 570, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 607, 624, 640, 649, 669, 670, 671, 672, 684, 689, 692, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 825, 867, 868, 875, 887, 890, 891, 898, 899, 906, 907, 908, 909, 975, 978, 980, 981, 982, 983, 986, 989, 998, 999, 1001, 1003, 1012, 1020, 1028, 1030, 1031, 1032, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1044], "choic": [4, 7, 41, 47, 56, 66, 71, 79, 104, 152, 153, 159, 164, 189, 201, 239, 255, 259, 261, 264, 289, 313, 318, 350, 351, 361, 365, 377, 381, 384, 391, 396, 406, 408, 410, 412, 413, 415, 416, 449, 459, 468, 469, 470, 471, 472, 473, 475, 535, 537, 538, 544, 556, 635, 644, 645, 653, 655, 656, 658, 666, 677, 689, 702, 738, 827, 840, 841, 846, 848, 849, 875, 878, 887, 889, 898, 899, 922, 975, 980, 982, 983, 984, 985, 986, 987, 992, 994, 999, 1000, 1001, 1002, 1035, 1038, 1039, 1043, 1044], "arbitrari": [4, 56, 87, 96, 97, 98, 117, 159, 179, 200, 217, 218, 259, 306, 310, 312, 318, 350, 359, 366, 379, 391, 393, 407, 410, 411, 413, 414, 418, 443, 447, 452, 454, 462, 529, 530, 556, 557, 578, 636, 645, 666, 677, 685, 738, 785, 796, 797, 802, 804, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 862, 864, 877, 975, 977, 978, 982, 983, 986, 989, 996, 1007, 1021, 1028, 1029, 1032, 1034, 1035, 1036, 1038, 1042, 1044], "held": [4, 8, 72, 104, 126, 172, 208, 248, 264, 269, 282, 413, 556, 557, 558, 559, 698, 795, 798, 799, 809, 855, 856, 868, 975, 976, 985, 994, 1021], "point": [4, 9, 11, 13, 14, 17, 27, 32, 38, 39, 41, 42, 49, 50, 53, 56, 59, 61, 65, 68, 81, 82, 86, 91, 92, 93, 95, 99, 101, 102, 108, 112, 114, 118, 121, 122, 130, 149, 154, 159, 160, 167, 170, 171, 172, 179, 183, 189, 192, 194, 196, 198, 200, 201, 202, 204, 206, 209, 212, 213, 217, 218, 221, 222, 223, 224, 225, 229, 232, 234, 248, 252, 255, 258, 262, 263, 268, 270, 271, 282, 284, 287, 288, 289, 290, 291, 292, 293, 295, 297, 300, 307, 308, 310, 312, 325, 326, 330, 333, 337, 338, 339, 341, 342, 346, 347, 350, 351, 352, 356, 361, 365, 366, 367, 373, 374, 375, 376, 377, 378, 379, 381, 383, 384, 385, 387, 391, 393, 394, 405, 406, 411, 412, 413, 414, 417, 418, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 457, 458, 466, 469, 471, 495, 501, 509, 511, 512, 516, 519, 522, 527, 530, 532, 538, 549, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 607, 608, 625, 628, 629, 630, 634, 635, 636, 641, 642, 648, 652, 654, 667, 668, 670, 672, 673, 675, 676, 679, 680, 685, 686, 687, 688, 689, 690, 691, 698, 703, 704, 707, 710, 714, 719, 721, 727, 732, 733, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 760, 775, 776, 786, 787, 793, 794, 795, 809, 819, 828, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 855, 856, 863, 868, 877, 892, 893, 894, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 916, 978, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 996, 998, 999, 1001, 1002, 1006, 1007, 1016, 1019, 1020, 1021, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044], "naive_linear_predict": 4, "one_hot_linear_predict": 4, "cyclic_cossin_linear_predict": 4, "cyclic_spline_linear_predict": 4, "zoom": [4, 117, 306], "insight": [4, 7, 170, 171, 201, 202, 218, 302, 306, 350, 359, 404, 795, 798, 799, 809, 821, 993, 1002, 1010], "last_hour": [4, 13], "slice": [4, 13, 18, 121, 209, 223, 226, 234, 292, 295, 319, 320, 333, 374, 380, 381, 388, 407, 461, 464, 490, 491, 505, 543, 636, 770, 774, 777, 914, 938, 939, 957, 1040, 1042], "suptitl": [4, 5, 13, 15, 33, 34, 35, 40, 41, 51, 54, 58, 61, 68, 76, 96, 99, 107, 112, 121, 122, 129, 132, 161, 170, 171, 173, 194, 199, 215, 216, 221, 222, 223, 238, 249, 257, 303, 306, 308, 316, 318, 325, 326, 330, 344, 345, 356], "label": [4, 6, 7, 9, 11, 12, 13, 14, 17, 21, 25, 26, 27, 28, 31, 33, 34, 39, 41, 43, 44, 46, 47, 48, 49, 50, 52, 53, 56, 57, 59, 61, 64, 65, 66, 67, 68, 74, 76, 79, 80, 81, 82, 86, 87, 92, 93, 98, 100, 103, 104, 105, 106, 112, 113, 114, 115, 116, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 139, 145, 152, 153, 157, 158, 159, 160, 161, 164, 167, 170, 173, 176, 179, 180, 182, 183, 184, 188, 189, 190, 194, 200, 201, 202, 203, 206, 207, 208, 209, 210, 214, 215, 217, 218, 222, 223, 224, 229, 234, 235, 237, 239, 240, 248, 255, 256, 259, 260, 262, 263, 264, 265, 267, 270, 271, 272, 273, 274, 275, 282, 289, 291, 293, 296, 301, 303, 306, 307, 311, 316, 317, 320, 324, 328, 329, 330, 331, 339, 341, 344, 345, 350, 351, 355, 356, 357, 358, 367, 371, 372, 373, 378, 379, 381, 384, 388, 393, 394, 403, 404, 416, 417, 423, 424, 428, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 462, 466, 484, 485, 486, 490, 491, 492, 493, 499, 500, 505, 506, 509, 511, 512, 516, 519, 520, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 566, 567, 589, 590, 591, 592, 593, 595, 596, 597, 601, 602, 603, 606, 607, 628, 655, 656, 663, 664, 665, 670, 671, 672, 673, 674, 675, 694, 695, 697, 699, 700, 701, 702, 704, 706, 707, 709, 710, 711, 712, 713, 714, 715, 717, 721, 722, 723, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 739, 750, 751, 752, 753, 778, 779, 780, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 844, 845, 847, 848, 855, 856, 858, 862, 865, 866, 869, 871, 872, 879, 882, 893, 894, 895, 898, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 918, 923, 924, 949, 950, 957, 975, 982, 983, 987, 988, 989, 990, 992, 993, 996, 1000, 1001, 1002, 1006, 1008, 1012, 1017, 1019, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "actual": [4, 13, 28, 47, 61, 76, 87, 118, 149, 176, 189, 200, 204, 208, 248, 257, 264, 352, 361, 365, 367, 376, 377, 379, 381, 384, 385, 391, 392, 393, 404, 406, 411, 414, 415, 431, 506, 512, 513, 524, 532, 535, 537, 544, 559, 560, 641, 642, 645, 655, 656, 663, 664, 665, 666, 667, 669, 671, 673, 674, 675, 677, 684, 688, 692, 698, 701, 706, 712, 718, 719, 720, 781, 793, 798, 799, 814, 815, 844, 875, 898, 904, 926, 927, 928, 961, 978, 985, 986, 989, 993, 994, 1035, 1036, 1042, 1043, 1044], "black": [4, 9, 10, 11, 13, 27, 35, 45, 50, 56, 57, 81, 82, 93, 96, 121, 144, 152, 153, 157, 158, 161, 165, 170, 171, 179, 188, 189, 190, 192, 196, 200, 201, 202, 206, 209, 212, 213, 218, 229, 239, 246, 249, 289, 300, 301, 303, 330, 347, 356, 357, 358, 379, 396, 399, 406, 413, 416, 552, 553, 628, 992, 993, 1002, 1006, 1012], "One": [4, 9, 12, 25, 31, 50, 56, 92, 101, 104, 120, 122, 125, 128, 167, 170, 173, 178, 204, 215, 219, 229, 240, 251, 261, 268, 271, 279, 293, 307, 332, 334, 348, 351, 365, 376, 379, 392, 393, 406, 409, 411, 412, 413, 414, 417, 441, 446, 469, 471, 475, 509, 563, 628, 636, 655, 663, 665, 670, 672, 673, 674, 784, 802, 803, 826, 827, 828, 859, 860, 871, 902, 949, 976, 978, 982, 983, 984, 985, 986, 987, 989, 990, 993, 994, 996, 1001, 1008, 1023, 1032, 1034, 1041, 1043], "legend": [4, 7, 8, 9, 11, 13, 25, 27, 34, 38, 41, 62, 73, 74, 76, 79, 80, 81, 82, 86, 87, 91, 98, 100, 104, 105, 106, 112, 113, 114, 115, 116, 118, 123, 124, 125, 126, 127, 128, 129, 131, 132, 134, 135, 145, 152, 153, 157, 158, 159, 160, 161, 170, 171, 176, 179, 180, 182, 185, 188, 189, 190, 194, 200, 201, 202, 203, 206, 207, 208, 209, 210, 213, 214, 215, 217, 218, 224, 232, 233, 234, 235, 237, 240, 248, 256, 258, 260, 261, 263, 264, 265, 266, 268, 271, 273, 274, 275, 279, 287, 289, 290, 291, 296, 301, 307, 311, 317, 320, 327, 336, 339, 341, 344, 350, 355, 356, 357, 358, 697, 1017], "draw": [4, 7, 17, 61, 161, 170, 196, 240, 263, 268, 337, 386, 409, 411, 412, 413, 552, 553, 554, 555, 560, 561, 562, 563, 608, 631, 698, 801, 817, 910, 912, 985, 1006, 1015, 1041, 1042], "conclus": [4, 101, 170, 172, 200, 202, 261, 263, 361, 413, 1015], "abov": [4, 26, 27, 38, 45, 67, 71, 114, 117, 118, 123, 125, 135, 148, 149, 170, 171, 186, 200, 202, 206, 211, 233, 236, 237, 261, 267, 279, 289, 308, 311, 312, 317, 319, 351, 352, 359, 361, 365, 366, 367, 373, 374, 376, 377, 378, 379, 381, 383, 385, 391, 393, 394, 406, 407, 408, 410, 411, 412, 414, 416, 438, 442, 461, 464, 486, 492, 493, 494, 520, 587, 631, 701, 751, 795, 799, 807, 809, 819, 861, 862, 875, 881, 887, 895, 949, 975, 976, 978, 980, 982, 983, 986, 989, 991, 993, 996, 1000, 1001, 1002, 1007, 1012, 1013, 1019, 1020, 1021, 1034], "problemat": [4, 257, 407, 976, 1036], "captur": [4, 9, 12, 13, 38, 40, 87, 125, 129, 144, 157, 170, 179, 184, 200, 204, 252, 282, 317, 337, 341, 387, 406, 413, 414, 415, 568, 585, 586, 588, 844, 953, 986, 991, 999, 1003, 1019, 1040], "big": [4, 45, 61, 63, 205, 222, 239, 252, 366, 379, 385, 394, 408, 414, 418, 535, 558, 559, 561, 562, 801, 822, 833, 834, 835, 836, 837, 1007, 1010, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "goe": [4, 38, 117, 359, 379, 413, 468, 469, 475, 554, 555, 561, 562, 563, 906, 907, 908, 909, 996, 1000], "artifact": [4, 14, 47, 48, 306, 367, 383], "discontinu": [4, 391], "fail": [4, 55, 67, 97, 104, 160, 161, 179, 184, 204, 236, 261, 316, 366, 377, 379, 381, 382, 387, 394, 396, 409, 410, 437, 469, 471, 673, 674, 675, 855, 856, 929, 975, 983, 1028, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "intra": [4, 585, 588, 788, 789], "variat": [4, 12, 38, 129, 149, 157, 158, 167, 170, 205, 245, 247, 252, 253, 258, 282, 317, 337, 376, 410, 411, 440, 444, 456, 533, 640, 669, 671, 672, 793, 794, 813, 814, 816, 975, 986, 996, 999, 1002, 1006, 1017, 1019, 1022, 1023, 1031, 1033, 1034], "harmon": [4, 38, 268, 351, 406, 532, 538, 725, 726, 732, 779, 791, 986], "phase": [4, 184, 194, 365, 624, 978, 983, 989, 1010, 1036, 1038], "potenti": [4, 56, 79, 165, 169, 171, 179, 290, 291, 300, 322, 341, 352, 365, 366, 393, 396, 397, 406, 410, 413, 414, 465, 479, 480, 481, 482, 493, 521, 546, 554, 555, 558, 559, 561, 562, 570, 603, 608, 631, 759, 888, 889, 896, 906, 907, 908, 909, 992, 1000, 1002, 1006, 1021, 1031, 1038, 1039, 1042], "fix": [4, 8, 21, 26, 35, 47, 72, 106, 117, 118, 121, 152, 153, 157, 160, 170, 184, 202, 218, 239, 252, 264, 300, 316, 317, 318, 319, 320, 321, 322, 351, 365, 366, 373, 375, 377, 378, 379, 381, 382, 387, 391, 393, 394, 397, 406, 407, 410, 411, 413, 414, 416, 449, 459, 469, 501, 509, 528, 534, 537, 539, 545, 546, 556, 557, 561, 562, 585, 588, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 627, 650, 660, 665, 667, 681, 684, 688, 692, 704, 781, 793, 809, 816, 840, 841, 843, 846, 848, 849, 865, 868, 882, 906, 907, 935, 953, 975, 982, 985, 986, 989, 996, 1007, 1009, 1021, 1026, 1027, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "two": [4, 7, 9, 11, 15, 21, 25, 27, 31, 35, 38, 40, 41, 44, 56, 61, 65, 71, 72, 76, 81, 86, 87, 91, 92, 93, 96, 98, 99, 101, 105, 111, 112, 113, 120, 121, 122, 125, 128, 129, 130, 133, 136, 146, 149, 152, 153, 154, 155, 158, 159, 164, 165, 167, 170, 171, 172, 179, 183, 184, 188, 189, 190, 191, 196, 200, 201, 202, 208, 209, 212, 217, 218, 223, 225, 226, 229, 234, 236, 237, 239, 246, 247, 248, 250, 251, 252, 256, 258, 262, 268, 279, 287, 289, 292, 293, 295, 297, 306, 308, 311, 316, 317, 319, 320, 327, 333, 334, 337, 338, 339, 341, 346, 350, 351, 352, 356, 361, 372, 373, 374, 375, 376, 377, 379, 381, 383, 385, 386, 387, 391, 393, 394, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 438, 439, 440, 441, 442, 444, 447, 448, 449, 450, 454, 456, 461, 466, 467, 468, 469, 470, 471, 472, 473, 485, 487, 488, 489, 490, 491, 493, 495, 497, 498, 499, 500, 501, 502, 504, 507, 511, 516, 519, 533, 535, 537, 541, 544, 546, 547, 550, 557, 567, 578, 581, 587, 588, 589, 592, 593, 595, 596, 597, 599, 600, 603, 604, 605, 607, 608, 617, 618, 621, 625, 628, 629, 636, 640, 642, 667, 668, 670, 689, 696, 700, 701, 702, 709, 712, 713, 716, 718, 719, 720, 727, 728, 731, 732, 734, 737, 739, 750, 751, 753, 759, 760, 767, 770, 773, 774, 775, 776, 777, 781, 782, 790, 791, 792, 793, 827, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 855, 856, 862, 863, 870, 871, 872, 873, 892, 893, 894, 898, 899, 906, 908, 909, 949, 965, 966, 972, 975, 976, 978, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1012, 1016, 1019, 1020, 1021, 1025, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "onc": [4, 8, 51, 146, 149, 152, 222, 236, 239, 259, 262, 279, 284, 312, 316, 320, 350, 352, 359, 361, 365, 367, 373, 374, 379, 383, 384, 385, 386, 387, 392, 393, 394, 406, 407, 409, 410, 411, 413, 414, 415, 416, 446, 448, 450, 469, 505, 506, 535, 541, 548, 556, 557, 587, 588, 594, 608, 616, 624, 644, 648, 650, 652, 658, 660, 662, 663, 664, 665, 673, 674, 675, 694, 709, 713, 715, 732, 777, 796, 800, 803, 813, 833, 834, 835, 836, 837, 910, 982, 983, 989, 996, 1000, 1001, 1002, 1012, 1021, 1025, 1028, 1036, 1038, 1039, 1040, 1041], "specif": [4, 11, 12, 21, 28, 35, 45, 56, 63, 66, 71, 73, 118, 132, 157, 160, 170, 171, 176, 204, 218, 256, 261, 279, 306, 316, 317, 321, 341, 350, 351, 352, 361, 365, 366, 374, 379, 382, 384, 385, 387, 391, 393, 396, 402, 405, 406, 407, 410, 411, 413, 414, 415, 416, 493, 500, 531, 548, 554, 561, 564, 565, 566, 567, 571, 585, 588, 590, 609, 610, 611, 612, 614, 615, 616, 617, 619, 620, 622, 637, 640, 643, 644, 649, 655, 669, 684, 694, 696, 709, 710, 742, 795, 796, 797, 802, 803, 804, 809, 821, 834, 927, 929, 930, 949, 962, 963, 964, 980, 982, 983, 985, 986, 988, 989, 991, 993, 996, 1000, 1002, 1003, 1004, 1005, 1021, 1023, 1028, 1032, 1036, 1037, 1038, 1039, 1042, 1043, 1045], "furthermor": [4, 13, 38, 118, 158, 171, 172, 239, 240, 242, 284, 350, 351, 365, 367, 386, 406, 411, 413, 414, 559, 587, 603, 616, 701, 732, 742, 751, 753, 791, 898, 982, 994, 1031, 1035], "enforc": [4, 12, 35, 54, 96, 157, 194, 293, 365, 379, 408, 411, 413, 505, 524, 528, 534, 536, 539, 540, 542, 543, 545, 554, 555, 558, 559, 561, 562, 877, 906, 907, 908, 909, 918, 919, 976, 983, 1030, 1036, 1038, 1040, 1044], "behav": [4, 12, 49, 53, 58, 204, 256, 306, 318, 337, 361, 379, 385, 391, 392, 406, 407, 410, 878, 982, 996, 1001, 1003, 1007, 1021, 1028, 1035, 1037, 1041, 1042], "similarli": [4, 12, 38, 56, 93, 128, 171, 173, 184, 189, 200, 230, 239, 261, 300, 306, 322, 337, 361, 366, 375, 377, 381, 384, 393, 403, 409, 410, 414, 725, 726, 734, 779, 780, 783, 981, 983, 984, 986, 993, 1000, 1001, 1003, 1012, 1016, 1036, 1042, 1044], "spiki": 4, "instanc": [4, 8, 10, 13, 25, 27, 28, 54, 57, 59, 115, 146, 149, 165, 171, 172, 183, 184, 231, 236, 239, 257, 259, 270, 272, 273, 295, 316, 330, 333, 334, 340, 341, 350, 351, 352, 364, 365, 366, 373, 374, 376, 377, 378, 379, 381, 383, 384, 385, 387, 388, 391, 393, 396, 397, 403, 404, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 420, 430, 431, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 459, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 488, 489, 492, 493, 494, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 607, 608, 617, 624, 625, 626, 627, 629, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 704, 717, 725, 726, 734, 767, 770, 774, 775, 776, 777, 779, 780, 783, 784, 785, 788, 789, 793, 794, 795, 797, 798, 799, 800, 801, 802, 804, 807, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 918, 919, 921, 929, 930, 934, 935, 942, 943, 944, 945, 954, 956, 957, 960, 970, 971, 975, 976, 982, 983, 986, 988, 989, 992, 994, 996, 1000, 1001, 1002, 1007, 1009, 1012, 1019, 1020, 1021, 1023, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "shorter": [4, 158, 249, 391, 406, 411, 447, 454, 560, 694, 988, 992, 1021, 1039], "necessarili": [4, 32, 73, 99, 170, 200, 208, 218, 234, 235, 247, 308, 350, 351, 373, 383, 402, 404, 406, 413, 624, 846, 848, 849, 850, 980, 983, 985, 986], "59": [4, 176, 184, 218, 342, 376, 385, 407, 507, 986, 1024, 1028], "37": [4, 184, 264, 325, 359, 374, 413, 521, 713, 878, 996, 1028], "creat": [4, 5, 8, 11, 13, 17, 21, 22, 27, 28, 31, 33, 35, 38, 40, 42, 44, 45, 47, 50, 53, 59, 61, 63, 72, 73, 81, 87, 91, 98, 101, 114, 117, 121, 122, 125, 128, 131, 147, 148, 152, 154, 157, 158, 159, 161, 165, 169, 171, 179, 181, 183, 186, 196, 201, 202, 212, 213, 223, 234, 236, 239, 240, 242, 251, 256, 257, 259, 261, 271, 292, 294, 295, 308, 310, 311, 316, 319, 320, 330, 333, 334, 338, 339, 342, 345, 346, 347, 352, 355, 357, 358, 361, 366, 374, 375, 377, 378, 379, 381, 383, 384, 385, 386, 387, 388, 392, 393, 396, 404, 406, 407, 410, 412, 413, 414, 416, 435, 448, 450, 462, 463, 496, 512, 513, 514, 515, 543, 550, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 585, 586, 588, 594, 625, 627, 628, 629, 630, 694, 695, 697, 698, 699, 778, 785, 795, 797, 801, 805, 809, 813, 817, 819, 820, 828, 859, 871, 900, 903, 906, 907, 908, 909, 913, 916, 938, 939, 945, 954, 959, 971, 976, 982, 985, 986, 987, 989, 993, 996, 997, 998, 1000, 1001, 1002, 1006, 1007, 1010, 1017, 1019, 1020, 1025, 1028, 1029, 1031, 1034, 1038, 1041, 1042, 1043, 1044, 1045], "turn": [4, 33, 79, 164, 165, 170, 184, 215, 216, 234, 261, 288, 352, 365, 367, 374, 391, 393, 394, 405, 406, 407, 409, 411, 414, 415, 416, 578, 579, 586, 604, 605, 827, 831, 900, 903, 921, 976, 980, 988, 991, 996, 1010, 1021, 1033, 1035, 1036, 1041], "downstream": [4, 81, 313, 352, 414, 528, 531, 534, 538, 539, 603, 871, 996, 1038], "freedom": [4, 98, 157, 188, 189, 191, 261, 538, 653, 793, 982, 1031], "underfit": [4, 35, 125, 152, 167, 172, 204, 254, 276, 277, 300, 312, 345, 413, 654, 795, 798, 799, 809, 820, 821, 858, 873, 981, 982], "approxim": [4, 5, 28, 34, 47, 54, 81, 100, 101, 106, 116, 124, 125, 149, 153, 170, 177, 180, 196, 200, 201, 214, 218, 228, 229, 232, 235, 244, 252, 261, 266, 275, 285, 293, 298, 306, 308, 309, 311, 316, 319, 350, 352, 357, 358, 361, 368, 371, 376, 388, 391, 393, 403, 404, 407, 409, 410, 411, 413, 416, 418, 419, 420, 430, 446, 466, 467, 470, 471, 472, 473, 479, 480, 481, 488, 493, 499, 518, 521, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 556, 557, 579, 586, 607, 608, 616, 635, 636, 637, 638, 639, 654, 655, 656, 669, 671, 673, 674, 676, 684, 689, 754, 755, 760, 793, 796, 813, 819, 823, 824, 838, 839, 842, 846, 848, 849, 850, 854, 858, 859, 864, 868, 870, 871, 875, 887, 898, 903, 904, 934, 935, 960, 979, 980, 981, 982, 983, 985, 989, 990, 991, 992, 993, 994, 998, 1000, 1001, 1002, 1006, 1007, 1021, 1023, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042], "especi": [4, 8, 13, 56, 57, 122, 125, 170, 200, 236, 312, 321, 351, 361, 366, 373, 379, 387, 391, 393, 404, 406, 414, 440, 446, 498, 535, 554, 555, 556, 557, 561, 562, 563, 643, 644, 645, 647, 649, 650, 651, 655, 656, 657, 658, 659, 660, 666, 677, 692, 702, 742, 833, 834, 835, 836, 837, 906, 907, 908, 909, 982, 988, 989, 994, 996, 1010, 1031, 1036, 1040, 1041, 1042], "sharp": [4, 171, 993, 996], "rush": [4, 13, 379], "flatter": [4, 26], "accur": [4, 9, 13, 22, 26, 27, 81, 96, 127, 152, 159, 170, 171, 204, 215, 218, 261, 268, 272, 279, 320, 350, 351, 361, 378, 404, 406, 408, 411, 413, 414, 415, 434, 440, 444, 448, 450, 456, 528, 535, 537, 539, 540, 542, 543, 544, 604, 605, 631, 798, 799, 838, 839, 934, 935, 978, 983, 986, 1002, 1042], "tend": [4, 12, 28, 38, 40, 44, 53, 56, 58, 149, 170, 171, 189, 200, 205, 218, 246, 249, 258, 262, 282, 303, 341, 352, 365, 367, 379, 381, 393, 404, 406, 408, 411, 413, 415, 434, 445, 650, 844, 875, 887, 935, 982, 983, 989, 1002, 1021], "under": [4, 7, 11, 25, 26, 28, 42, 68, 79, 80, 104, 122, 125, 171, 200, 229, 239, 261, 268, 270, 271, 307, 322, 368, 373, 379, 381, 383, 385, 387, 393, 396, 400, 404, 406, 408, 410, 411, 414, 415, 443, 448, 450, 467, 468, 469, 470, 471, 472, 473, 529, 536, 538, 540, 651, 652, 653, 699, 703, 704, 705, 712, 738, 750, 784, 785, 793, 794, 843, 942, 982, 983, 984, 986, 989, 996, 1000, 1001, 1002, 1006, 1007, 1021, 1028, 1030, 1031, 1033, 1036, 1040], "These": [4, 5, 7, 28, 52, 96, 98, 102, 117, 121, 167, 171, 189, 200, 201, 202, 230, 268, 279, 284, 288, 303, 306, 313, 315, 320, 326, 328, 361, 365, 366, 372, 375, 376, 379, 381, 383, 386, 388, 391, 393, 396, 400, 403, 404, 405, 406, 409, 411, 413, 414, 415, 416, 439, 443, 445, 495, 505, 506, 512, 535, 564, 565, 599, 600, 665, 673, 674, 696, 703, 729, 752, 774, 790, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 843, 844, 863, 975, 977, 980, 982, 983, 986, 987, 997, 999, 1001, 1006, 1012, 1016, 1021, 1028, 1034, 1036, 1037, 1038, 1041, 1045], "systemat": [4, 261, 381, 709, 724, 986, 1043], "reveal": [4, 13, 170, 172, 350, 385, 403, 983, 1044], "form": [4, 9, 20, 33, 43, 61, 68, 96, 135, 159, 160, 170, 235, 236, 252, 261, 325, 361, 373, 376, 379, 381, 383, 393, 394, 403, 405, 406, 409, 410, 411, 412, 413, 414, 416, 418, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 456, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 682, 684, 685, 686, 687, 688, 689, 690, 696, 793, 794, 795, 798, 799, 800, 803, 805, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 924, 943, 946, 975, 977, 979, 980, 982, 983, 986, 987, 990, 991, 992, 996, 1001, 1006, 1012, 1019, 1034, 1038, 1040], "explain": [4, 5, 12, 57, 74, 86, 87, 105, 125, 152, 157, 158, 171, 172, 200, 218, 229, 236, 252, 271, 274, 312, 350, 351, 366, 377, 379, 383, 400, 402, 409, 411, 416, 490, 518, 521, 531, 538, 541, 546, 622, 645, 653, 666, 677, 718, 719, 720, 724, 781, 982, 989, 1002, 1005, 1006, 1017, 1019, 1020, 1039, 1041, 1042], "lack": [4, 341, 379, 381, 391, 410, 823, 913, 1001, 1042], "deriv": [4, 20, 106, 107, 124, 157, 160, 172, 188, 189, 193, 201, 366, 374, 381, 408, 410, 412, 413, 414, 416, 418, 438, 442, 443, 462, 530, 603, 614, 619, 645, 666, 673, 677, 855, 856, 871, 877, 898, 899, 980, 982, 983, 986, 990, 992, 1001, 1028, 1029, 1030, 1035, 1036, 1037, 1043], "address": [4, 49, 204, 350, 374, 379, 406, 414, 654, 982, 983, 988, 989, 990, 991, 992, 996, 1010, 1019, 1036], "section": [4, 38, 96, 101, 115, 132, 138, 139, 140, 141, 157, 161, 169, 170, 171, 173, 179, 184, 188, 189, 202, 225, 230, 236, 239, 241, 259, 261, 264, 270, 311, 312, 313, 318, 350, 351, 352, 361, 372, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 394, 397, 400, 404, 405, 407, 409, 410, 411, 413, 414, 415, 416, 436, 440, 456, 531, 611, 616, 619, 634, 642, 784, 794, 900, 903, 975, 980, 982, 986, 987, 989, 990, 992, 993, 1000, 1001, 1003, 1005, 1019, 1021, 1028, 1030, 1031, 1032, 1035], "margin": [4, 12, 26, 28, 153, 154, 156, 157, 158, 167, 170, 171, 178, 219, 239, 261, 279, 306, 312, 332, 335, 337, 339, 341, 348, 376, 404, 405, 411, 413, 416, 509, 607, 608, 628, 642, 673, 731, 827, 875, 887, 900, 903, 982, 986, 988, 992, 993, 996, 1000, 1001, 1019, 1035, 1037], "construct": [4, 11, 71, 73, 112, 114, 116, 120, 132, 149, 218, 230, 236, 241, 243, 297, 307, 309, 317, 320, 373, 376, 381, 388, 393, 406, 407, 410, 411, 413, 414, 417, 431, 438, 439, 441, 442, 447, 449, 454, 460, 462, 464, 516, 532, 538, 541, 552, 553, 578, 584, 636, 685, 687, 688, 809, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 857, 858, 859, 860, 862, 903, 917, 919, 934, 935, 944, 945, 949, 975, 976, 978, 982, 983, 986, 987, 989, 996, 999, 1001, 1002, 1007, 1012, 1016, 1033, 1035, 1036, 1039, 1042], "polynomialfeatur": [4, 179, 200, 201, 206, 241, 275, 318, 341, 877, 982, 996, 1032, 1036, 1037, 1038, 1041, 1042, 1044, 1045], "coars": [4, 121, 385, 445, 458], "explicitli": [4, 47, 119, 152, 159, 164, 165, 201, 232, 236, 341, 352, 361, 366, 373, 375, 379, 380, 381, 383, 391, 393, 397, 402, 410, 414, 416, 532, 546, 547, 576, 577, 594, 624, 645, 655, 656, 666, 677, 706, 723, 778, 784, 785, 798, 799, 829, 832, 838, 839, 864, 888, 889, 954, 975, 976, 978, 980, 982, 983, 986, 988, 989, 996, 1010, 1021, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042], "too": [4, 7, 12, 13, 18, 45, 51, 56, 58, 63, 71, 75, 83, 100, 125, 164, 172, 184, 201, 204, 222, 233, 239, 247, 255, 259, 268, 276, 302, 312, 337, 350, 357, 358, 365, 376, 379, 385, 387, 391, 393, 406, 408, 410, 413, 414, 415, 418, 434, 446, 535, 585, 588, 676, 689, 704, 833, 834, 835, 836, 837, 863, 876, 878, 981, 983, 985, 986, 988, 989, 993, 1019, 1029, 1032, 1035, 1036, 1037, 1038, 1040], "mani": [4, 7, 10, 20, 56, 57, 75, 79, 83, 112, 118, 119, 120, 121, 123, 126, 145, 149, 172, 200, 221, 233, 247, 255, 261, 268, 269, 273, 284, 306, 311, 312, 316, 317, 318, 319, 320, 322, 350, 361, 365, 367, 374, 376, 378, 379, 392, 393, 394, 396, 397, 403, 404, 406, 407, 408, 411, 413, 414, 415, 416, 418, 500, 550, 551, 554, 555, 556, 557, 561, 562, 563, 585, 588, 603, 606, 624, 636, 647, 651, 655, 656, 663, 664, 665, 673, 674, 675, 689, 692, 770, 774, 795, 799, 809, 855, 856, 871, 876, 878, 898, 906, 907, 908, 909, 975, 976, 978, 982, 983, 985, 986, 987, 988, 989, 992, 993, 994, 996, 999, 1001, 1003, 1005, 1006, 1007, 1010, 1019, 1021, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045], "featureunion": [4, 75, 371, 393, 397, 405, 461, 626, 860, 976, 1007, 1010, 1023, 1029, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "hour_workday_interact": 4, "interaction_onli": [4, 873, 982, 996], "combin": [4, 12, 13, 21, 26, 28, 62, 71, 72, 74, 75, 91, 96, 105, 106, 111, 123, 127, 136, 152, 158, 165, 167, 170, 184, 200, 204, 217, 218, 225, 229, 234, 261, 262, 270, 272, 273, 293, 301, 312, 318, 319, 321, 340, 341, 352, 356, 365, 371, 375, 376, 379, 384, 392, 393, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 418, 419, 442, 461, 463, 464, 470, 472, 473, 476, 477, 478, 486, 493, 505, 506, 512, 518, 521, 523, 528, 534, 535, 537, 539, 544, 546, 557, 559, 562, 564, 565, 607, 611, 613, 618, 621, 627, 631, 640, 643, 644, 649, 650, 655, 656, 657, 658, 659, 660, 663, 665, 669, 670, 671, 672, 673, 675, 676, 678, 681, 698, 726, 784, 795, 798, 799, 806, 807, 819, 821, 825, 857, 858, 859, 863, 871, 872, 873, 878, 898, 960, 975, 978, 979, 982, 986, 987, 989, 992, 996, 999, 1000, 1002, 1003, 1010, 1017, 1019, 1021, 1028, 1033, 1036, 1039, 1040, 1041, 1043, 1044], "previou": [4, 44, 54, 72, 96, 115, 122, 125, 132, 152, 157, 158, 169, 170, 171, 184, 186, 201, 233, 235, 236, 261, 264, 268, 306, 311, 320, 350, 351, 352, 361, 365, 374, 379, 381, 384, 385, 387, 391, 393, 394, 396, 406, 413, 414, 465, 543, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 627, 643, 645, 649, 650, 655, 657, 659, 663, 664, 665, 666, 673, 674, 675, 677, 704, 814, 829, 832, 847, 855, 856, 895, 912, 982, 986, 990, 996, 1007, 1012, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "nice": [4, 68, 201, 236, 306, 365, 411, 1021], "cyclic_spline_interactions_pipelin": 4, "078": 4, "009": [4, 351, 385], "104": [4, 13, 25, 190, 219, 262], "highlight": [4, 13, 81, 93, 152, 153, 158, 218, 310, 323, 350, 352, 368, 379, 383, 384, 387, 391, 416, 440, 443, 444, 461, 464, 487, 488, 493, 498, 499, 501, 509, 512, 518, 521, 535, 558, 559, 561, 562, 564, 596, 599, 625, 627, 629, 631, 637, 643, 645, 649, 655, 666, 677, 685, 698, 699, 714, 744, 784, 791, 795, 798, 799, 801, 809, 817, 820, 824, 840, 842, 859, 863, 868, 871, 872, 873, 877, 878, 879, 895, 896, 898, 903, 906, 907, 930, 983, 986, 994, 996, 1001, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "anoth": [4, 38, 96, 101, 112, 127, 149, 152, 160, 165, 170, 189, 204, 208, 226, 229, 236, 240, 247, 261, 263, 264, 267, 271, 294, 350, 352, 355, 361, 365, 367, 373, 374, 377, 379, 381, 385, 391, 393, 397, 400, 403, 406, 410, 411, 413, 414, 415, 417, 439, 441, 449, 452, 459, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 505, 535, 537, 544, 670, 673, 689, 706, 716, 801, 817, 857, 858, 879, 975, 976, 981, 982, 983, 986, 987, 989, 992, 996, 1000, 1001, 1012, 1019, 1020, 1021, 1037, 1038], "either": [4, 10, 31, 72, 118, 121, 122, 170, 188, 190, 230, 239, 256, 265, 270, 289, 345, 350, 359, 365, 366, 371, 374, 377, 379, 380, 381, 385, 393, 397, 400, 404, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 439, 444, 449, 484, 493, 509, 521, 530, 531, 533, 541, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 579, 580, 581, 585, 586, 587, 588, 590, 591, 594, 599, 604, 605, 607, 608, 619, 624, 627, 629, 630, 647, 651, 653, 661, 673, 675, 679, 680, 687, 694, 695, 699, 703, 704, 708, 709, 717, 720, 722, 723, 724, 725, 726, 731, 734, 735, 736, 738, 748, 752, 765, 770, 774, 778, 779, 780, 781, 783, 784, 785, 790, 795, 798, 799, 801, 809, 817, 818, 819, 820, 821, 822, 823, 825, 828, 858, 888, 889, 895, 898, 899, 906, 907, 908, 909, 913, 943, 947, 975, 982, 986, 987, 988, 989, 990, 991, 994, 996, 1000, 1001, 1012, 1020, 1021, 1028, 1031, 1037, 1038, 1039, 1042], "after": [4, 18, 21, 22, 27, 47, 54, 56, 71, 72, 76, 82, 98, 112, 123, 130, 132, 135, 145, 149, 157, 159, 161, 164, 170, 176, 193, 200, 239, 240, 243, 249, 261, 270, 282, 284, 292, 294, 306, 307, 310, 311, 350, 351, 367, 374, 376, 378, 379, 381, 383, 385, 386, 387, 391, 393, 400, 402, 403, 404, 406, 407, 410, 411, 414, 415, 418, 439, 444, 447, 448, 449, 450, 453, 459, 512, 529, 533, 550, 551, 556, 557, 558, 559, 594, 624, 627, 655, 656, 663, 664, 665, 670, 672, 673, 674, 675, 689, 709, 722, 752, 790, 793, 794, 798, 799, 847, 854, 858, 871, 877, 898, 903, 904, 975, 976, 980, 982, 986, 990, 991, 996, 998, 1000, 1001, 1002, 1007, 1012, 1019, 1021, 1028, 1031, 1035, 1036, 1039, 1040, 1043], "quadrat": [4, 30, 36, 157, 161, 167, 214, 263, 319, 405, 437, 455, 458, 546, 547, 620, 628, 645, 655, 656, 666, 673, 677, 713, 903, 904, 982, 983, 986, 989, 992, 996, 1000, 1001, 1008, 1023, 1029], "tractabl": [4, 410, 631, 1006, 1041], "nystr\u00f6m": [4, 978], "latter": [4, 15, 251, 261, 270, 271, 292, 311, 345, 367, 376, 393, 410, 413, 414, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 738, 793, 794, 795, 798, 799, 804, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 953, 989, 1037], "kernel_approxim": [4, 164, 167, 175, 176, 214, 229, 234, 318, 368, 674, 754, 755, 864, 978, 1012, 1029, 1035, 1045], "nystroem": [4, 164, 214, 229, 234, 371, 637, 638, 639, 674, 864, 903, 904, 1023, 1029, 1035, 1038, 1040, 1041, 1042], "cyclic_spline_poly_pipelin": 4, "poli": [4, 17, 141, 176, 261, 334, 341, 344, 449, 532, 617, 761, 770, 795, 873, 900, 901, 902, 903, 904, 982, 996, 1019], "n_compon": [4, 5, 6, 12, 15, 45, 53, 58, 59, 60, 71, 74, 75, 86, 87, 91, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 130, 176, 199, 221, 222, 223, 224, 225, 226, 229, 233, 234, 237, 241, 246, 247, 248, 249, 250, 251, 252, 260, 288, 293, 303, 311, 318, 320, 351, 381, 384, 385, 393, 409, 411, 418, 448, 449, 459, 461, 479, 480, 481, 482, 523, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 636, 637, 638, 639, 685, 686, 687, 688, 689, 690, 691, 692, 693, 793, 794, 847, 854, 857, 890, 891, 892, 935, 978, 980, 983, 985, 989, 1017, 1020, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1045], "300": [4, 21, 22, 35, 39, 51, 59, 73, 77, 99, 112, 113, 114, 118, 165, 190, 226, 229, 233, 250, 264, 294, 309, 318, 325, 343, 345, 381, 440, 444, 445, 456, 458, 636, 641, 642, 676, 687, 689, 691, 855, 982, 1038], "053": [4, 149, 376, 385], "002": [4, 12, 149, 152, 376], "076": [4, 272, 277, 886], "004": [4, 119, 351], "almost": [4, 35, 118, 123, 124, 202, 208, 236, 239, 275, 311, 328, 361, 372, 374, 383, 385, 391, 392, 393, 397, 406, 410, 411, 467, 468, 469, 470, 472, 473, 474, 793, 975, 981, 982, 985, 986, 1001, 1020, 1021, 1036, 1041], "rival": [4, 895, 999], "intermedi": [4, 7, 53, 56, 117, 125, 239, 337, 414, 556, 557, 616, 858, 986, 1040], "compound": [4, 218, 414, 607, 609, 677, 720, 748, 982, 1021], "one_hot_poly_pipelin": 4, "passthrough": [4, 73, 122, 170, 171, 200, 218, 239, 312, 321, 407, 461, 464, 564, 565, 857, 858, 996, 1037, 1039, 1042, 1043, 1045], "082": 4, "006": [4, 6, 41, 69, 269, 385], "111": [4, 7, 8, 17, 68, 91, 102, 103, 197, 215, 225, 261, 284, 850, 1031], "competit": [4, 125, 350, 413, 641, 989], "low": [4, 11, 12, 38, 51, 82, 87, 98, 100, 104, 112, 115, 128, 149, 172, 193, 195, 200, 202, 204, 214, 221, 223, 229, 233, 239, 246, 247, 249, 252, 255, 261, 263, 267, 268, 276, 290, 291, 302, 310, 312, 313, 322, 328, 336, 337, 350, 359, 375, 376, 379, 384, 387, 393, 396, 403, 404, 405, 410, 411, 414, 439, 441, 446, 465, 518, 521, 532, 579, 586, 600, 676, 689, 693, 702, 722, 738, 785, 843, 872, 879, 896, 935, 951, 954, 975, 981, 982, 983, 985, 986, 989, 991, 992, 993, 994, 996, 998, 1001, 1002, 1008, 1023, 1029, 1032, 1033, 1034, 1036, 1037, 1042, 1043], "rank": [4, 18, 26, 81, 100, 104, 119, 147, 172, 173, 218, 259, 261, 269, 375, 401, 403, 404, 408, 409, 411, 413, 414, 505, 506, 518, 521, 546, 547, 590, 591, 603, 645, 654, 666, 677, 693, 717, 722, 723, 735, 736, 752, 790, 798, 799, 935, 975, 977, 978, 983, 994, 996, 1010, 1023, 1029, 1034, 1037, 1038, 1042, 1043], "fact": [4, 11, 20, 26, 82, 87, 112, 125, 172, 233, 243, 279, 282, 350, 373, 386, 391, 393, 409, 411, 412, 413, 414, 646, 665, 667, 701, 980, 982, 989, 996, 1000, 1001, 1007, 1010, 1042], "smoother": [4, 5, 125, 171, 302, 412], "allow": [4, 21, 57, 59, 75, 76, 91, 100, 101, 115, 116, 130, 152, 157, 159, 161, 194, 200, 204, 218, 222, 230, 233, 240, 242, 243, 246, 261, 282, 316, 317, 318, 319, 321, 341, 342, 350, 359, 361, 365, 373, 377, 379, 380, 381, 383, 386, 388, 393, 394, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 434, 438, 440, 441, 442, 443, 444, 446, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 493, 520, 521, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 590, 591, 594, 600, 607, 608, 612, 624, 625, 627, 631, 632, 635, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 687, 689, 696, 738, 758, 761, 770, 774, 777, 788, 789, 793, 794, 795, 796, 797, 798, 799, 802, 804, 806, 809, 813, 816, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 844, 845, 848, 849, 853, 855, 856, 858, 860, 861, 863, 864, 865, 870, 877, 878, 882, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 916, 918, 919, 929, 930, 950, 954, 975, 976, 978, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 996, 998, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1012, 1025, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "find": [4, 5, 6, 12, 18, 41, 47, 48, 49, 50, 53, 54, 56, 58, 66, 74, 81, 82, 96, 98, 100, 101, 107, 123, 132, 152, 156, 158, 160, 171, 184, 188, 189, 202, 208, 221, 223, 225, 226, 232, 239, 251, 260, 261, 262, 272, 287, 292, 293, 294, 311, 316, 322, 339, 340, 341, 345, 350, 351, 355, 366, 376, 377, 379, 380, 381, 384, 385, 388, 391, 392, 393, 394, 403, 406, 408, 409, 411, 413, 414, 415, 417, 438, 441, 442, 443, 447, 448, 449, 450, 459, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 555, 562, 579, 586, 607, 608, 644, 647, 650, 651, 652, 653, 655, 656, 668, 685, 704, 725, 726, 734, 778, 779, 780, 783, 784, 790, 795, 809, 840, 841, 842, 844, 846, 848, 849, 850, 871, 872, 877, 890, 891, 892, 906, 907, 909, 915, 934, 935, 937, 975, 976, 978, 981, 982, 983, 985, 986, 987, 990, 992, 996, 1000, 1001, 1002, 1005, 1007, 1010, 1012, 1014, 1016, 1017, 1019, 1020, 1021, 1028, 1035, 1036, 1037, 1038, 1040, 1042, 1043], "function": [4, 5, 6, 7, 8, 13, 15, 21, 22, 38, 47, 54, 55, 56, 58, 60, 67, 71, 72, 73, 76, 96, 99, 101, 110, 117, 118, 122, 124, 125, 126, 127, 145, 152, 155, 156, 157, 158, 159, 160, 165, 167, 169, 170, 171, 173, 178, 179, 182, 184, 187, 198, 200, 201, 206, 208, 213, 216, 218, 219, 221, 230, 232, 235, 236, 239, 240, 242, 243, 251, 259, 261, 262, 263, 264, 269, 270, 275, 279, 284, 300, 306, 316, 317, 319, 320, 322, 330, 334, 335, 336, 337, 338, 339, 341, 343, 345, 347, 350, 351, 356, 361, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 391, 392, 393, 396, 397, 400, 404, 406, 407, 408, 409, 411, 412, 414, 415, 417, 418, 434, 437, 440, 441, 442, 444, 445, 447, 449, 451, 454, 455, 456, 457, 458, 461, 462, 465, 466, 468, 469, 471, 475, 485, 486, 488, 489, 492, 494, 500, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 569, 572, 578, 579, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 601, 604, 605, 606, 607, 608, 612, 614, 616, 617, 619, 620, 624, 625, 628, 629, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 699, 700, 701, 703, 708, 709, 713, 716, 718, 719, 720, 724, 728, 730, 731, 734, 736, 737, 738, 746, 751, 753, 757, 758, 759, 761, 764, 767, 770, 774, 775, 776, 777, 778, 779, 781, 785, 788, 789, 790, 792, 793, 794, 795, 797, 798, 799, 800, 801, 806, 807, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 867, 868, 870, 874, 875, 876, 877, 878, 879, 882, 884, 887, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 916, 925, 927, 928, 929, 934, 935, 945, 946, 952, 953, 954, 956, 957, 960, 961, 970, 975, 976, 977, 979, 981, 983, 984, 987, 989, 990, 991, 992, 993, 994, 996, 999, 1000, 1002, 1006, 1007, 1008, 1012, 1015, 1016, 1017, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "abl": [4, 5, 9, 25, 48, 56, 62, 83, 87, 100, 101, 129, 158, 170, 173, 184, 189, 200, 216, 218, 225, 267, 272, 337, 361, 365, 366, 367, 373, 377, 379, 381, 383, 384, 391, 406, 408, 410, 414, 482, 500, 531, 823, 870, 975, 976, 982, 985, 986, 987, 992, 996, 999, 1002, 1003, 1007, 1012, 1020, 1021, 1034, 1035, 1039], "gbrt_predict": 4, "one_hot_poly_predict": 4, "cyclic_spline_poly_predict": 4, "grow": [4, 13, 40, 176, 184, 286, 345, 352, 365, 402, 408, 414, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 805, 838, 839, 906, 907, 908, 909, 975, 986, 989, 1002, 1010, 1015, 1019, 1031, 1032], "depth": [4, 117, 122, 126, 128, 133, 279, 355, 357, 358, 359, 365, 377, 379, 383, 392, 413, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 838, 839, 843, 906, 907, 908, 909, 910, 912, 940, 991, 992, 1002, 1030, 1031, 1039], "accuraci": [4, 6, 7, 8, 17, 26, 31, 32, 33, 34, 71, 72, 73, 74, 112, 118, 119, 123, 124, 130, 145, 146, 148, 153, 173, 176, 200, 204, 208, 215, 216, 248, 259, 260, 261, 262, 263, 265, 267, 276, 279, 286, 292, 293, 294, 303, 308, 311, 322, 325, 326, 328, 337, 340, 341, 345, 361, 365, 381, 392, 393, 405, 406, 410, 413, 414, 415, 423, 434, 446, 466, 468, 469, 475, 529, 531, 538, 546, 547, 548, 550, 552, 554, 555, 556, 558, 561, 562, 564, 566, 607, 631, 655, 656, 663, 665, 668, 671, 672, 673, 689, 694, 700, 705, 710, 715, 730, 734, 739, 750, 759, 783, 790, 792, 822, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 840, 845, 847, 848, 855, 893, 894, 898, 900, 903, 906, 908, 934, 935, 975, 980, 981, 982, 983, 987, 989, 990, 994, 998, 1000, 1002, 1016, 1021, 1036, 1037], "On": [4, 12, 13, 18, 27, 68, 72, 73, 86, 87, 101, 112, 115, 117, 119, 120, 125, 128, 129, 132, 135, 144, 146, 156, 157, 170, 171, 172, 181, 188, 189, 202, 204, 230, 231, 232, 233, 235, 236, 239, 240, 241, 242, 243, 246, 248, 251, 256, 257, 258, 259, 261, 262, 263, 264, 266, 268, 273, 303, 306, 308, 310, 311, 312, 317, 318, 320, 321, 327, 337, 345, 359, 365, 377, 380, 381, 383, 391, 393, 400, 402, 404, 406, 410, 411, 413, 415, 416, 640, 653, 688, 731, 757, 863, 879, 975, 979, 982, 985, 986, 988, 992, 999, 1001, 1016, 1019], "contrari": [4, 14, 170, 222, 226, 239, 246, 264, 306, 350, 373, 406, 493, 541, 603, 812, 879, 982, 988, 992], "significantli": [4, 25, 26, 38, 79, 80, 112, 118, 123, 125, 149, 170, 171, 172, 200, 204, 208, 216, 218, 261, 284, 317, 318, 351, 352, 361, 366, 383, 406, 411, 413, 414, 419, 466, 471, 476, 477, 535, 537, 544, 555, 562, 643, 644, 649, 650, 657, 658, 659, 660, 681, 689, 838, 839, 978, 982, 983, 989, 994, 1001, 1028, 1030, 1031, 1035, 1036, 1041, 1042, 1043], "over": [4, 7, 8, 9, 17, 21, 25, 27, 28, 32, 38, 51, 56, 57, 73, 75, 96, 115, 118, 128, 144, 148, 152, 160, 164, 169, 171, 182, 194, 200, 208, 218, 229, 239, 261, 262, 264, 266, 268, 269, 270, 273, 289, 297, 300, 301, 308, 319, 320, 322, 325, 350, 351, 365, 366, 367, 374, 375, 378, 379, 380, 381, 385, 392, 393, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 418, 443, 446, 461, 469, 506, 530, 531, 533, 534, 535, 536, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 585, 586, 588, 591, 599, 629, 630, 631, 641, 642, 643, 644, 649, 650, 655, 657, 658, 659, 660, 662, 663, 664, 665, 673, 674, 675, 682, 683, 694, 713, 715, 735, 759, 784, 789, 793, 795, 798, 799, 801, 806, 807, 809, 817, 819, 820, 821, 822, 823, 825, 854, 855, 856, 857, 873, 877, 898, 906, 908, 915, 924, 954, 975, 982, 983, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1006, 1007, 1010, 1017, 1020, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1041], "compet": 4, "access": [4, 50, 79, 239, 247, 252, 350, 359, 365, 366, 379, 380, 381, 387, 391, 393, 394, 402, 406, 408, 409, 413, 414, 416, 447, 454, 461, 533, 564, 565, 566, 567, 614, 856, 857, 858, 913, 975, 982, 985, 986, 992, 993, 994, 1000, 1001, 1007, 1010, 1012, 1020, 1021, 1028, 1030, 1034, 1035, 1036, 1037, 1040, 1042, 1043, 1044], "requir": [4, 7, 14, 26, 46, 47, 49, 54, 56, 58, 59, 68, 71, 91, 100, 102, 103, 117, 118, 122, 126, 128, 132, 149, 171, 184, 189, 197, 200, 218, 221, 223, 230, 233, 236, 239, 243, 262, 270, 272, 284, 286, 306, 311, 318, 319, 350, 351, 352, 373, 376, 377, 379, 381, 383, 385, 387, 391, 393, 394, 396, 397, 402, 405, 406, 407, 408, 410, 411, 413, 414, 415, 417, 423, 434, 435, 436, 441, 443, 447, 449, 454, 459, 461, 464, 466, 479, 480, 481, 493, 505, 518, 521, 532, 538, 546, 547, 548, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 569, 576, 577, 578, 607, 608, 616, 624, 629, 630, 631, 640, 655, 656, 663, 664, 665, 668, 671, 672, 673, 674, 675, 683, 686, 688, 689, 690, 692, 696, 720, 725, 726, 738, 743, 745, 748, 759, 780, 783, 795, 798, 799, 802, 804, 809, 821, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 848, 849, 850, 855, 858, 859, 860, 862, 872, 873, 874, 878, 886, 890, 891, 893, 894, 898, 899, 900, 903, 906, 907, 908, 909, 943, 946, 952, 972, 975, 980, 981, 982, 983, 986, 987, 988, 989, 990, 992, 993, 996, 1000, 1001, 1002, 1007, 1012, 1019, 1021, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "geograph": [4, 11, 297, 374, 495], "repartit": 4, "immobil": 4, "quantit": [4, 5, 6, 13, 26, 62, 125, 135, 149, 257, 275, 376, 1017], "predictionerrordisplai": [4, 13, 76, 132, 170, 257, 321, 986, 1043], "nrow": [4, 5, 31, 33, 35, 58, 67, 74, 96, 161, 171, 200, 202, 208, 218, 221, 222, 225, 239, 263, 264, 284, 308, 310, 311, 321, 326, 344, 345, 1017], "ncol": [4, 5, 13, 31, 33, 35, 54, 58, 67, 96, 101, 107, 171, 200, 201, 202, 208, 218, 221, 222, 232, 239, 257, 263, 264, 272, 284, 287, 301, 307, 308, 310, 311, 321, 344, 345, 351], "sharex": [4, 7, 15, 35, 74, 93, 101, 133, 161, 171, 202, 263, 289, 328, 1017], "sharei": [4, 13, 35, 76, 93, 101, 107, 133, 161, 171, 200, 202, 208, 263, 272, 289, 307, 312, 344, 345, 351], "npolynomi": 4, "ntree": 4, "plot_kind": 4, "actual_vs_predict": [4, 76, 132, 170, 257, 321, 698], "residual_vs_predict": [4, 13, 76, 257, 321, 698], "axis_idx": 4, "kind": [4, 9, 12, 13, 25, 26, 76, 105, 118, 132, 144, 170, 171, 251, 255, 257, 270, 313, 318, 321, 334, 337, 350, 366, 367, 372, 374, 379, 381, 385, 391, 392, 404, 406, 409, 410, 411, 413, 414, 415, 485, 486, 500, 505, 506, 518, 521, 585, 629, 630, 698, 927, 982, 988, 993, 1002, 1031, 1040, 1042, 1043, 1044], "enumer": [4, 8, 10, 11, 12, 14, 15, 18, 20, 26, 28, 31, 32, 38, 40, 41, 42, 43, 44, 45, 46, 51, 56, 60, 61, 62, 63, 71, 80, 82, 83, 87, 97, 99, 106, 115, 118, 123, 124, 126, 127, 138, 154, 156, 161, 173, 180, 182, 191, 200, 222, 223, 226, 229, 234, 238, 239, 246, 247, 248, 249, 251, 252, 256, 263, 264, 270, 271, 289, 293, 294, 296, 303, 308, 309, 325, 326, 328, 330, 335, 337, 344, 345, 350, 356, 374, 556, 557, 561, 562, 777, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816], "pred": [4, 7, 11, 13, 33, 346, 350, 374, 645, 666, 677, 694, 699, 703, 715, 725, 726, 734, 779, 780, 783, 784, 986], "zip": [4, 5, 8, 9, 12, 13, 25, 27, 32, 33, 35, 38, 39, 41, 43, 46, 50, 56, 64, 65, 66, 76, 87, 93, 96, 97, 100, 105, 106, 107, 114, 116, 132, 133, 158, 164, 167, 170, 171, 172, 185, 191, 192, 200, 208, 209, 221, 233, 239, 247, 251, 252, 259, 263, 264, 265, 268, 270, 284, 287, 289, 292, 300, 301, 302, 308, 310, 311, 312, 329, 334, 345, 346, 356, 377, 413, 822, 996, 1021, 1024], "disp": [4, 31, 33, 114, 128, 129, 255, 264, 276, 287, 311, 317, 334, 339, 435, 628, 694, 697, 698, 847], "from_predict": [4, 13, 33, 76, 132, 170, 239, 257, 268, 270, 319, 325, 350, 386, 435, 628, 695, 715, 723, 778, 780, 783, 784, 785, 986, 1025, 1041, 1042, 1043, 1044], "y_true": [4, 13, 20, 33, 60, 76, 112, 132, 155, 200, 210, 218, 239, 249, 328, 379, 429, 435, 436, 462, 479, 480, 481, 549, 551, 553, 554, 555, 557, 559, 561, 562, 565, 567, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 694, 695, 697, 698, 699, 700, 704, 705, 706, 709, 710, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 778, 779, 780, 781, 783, 784, 785, 786, 787, 790, 792, 831, 832, 841, 849, 856, 899, 901, 904, 907, 909, 986, 1029, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1045], "y_pred": [4, 6, 7, 13, 26, 31, 33, 35, 45, 58, 63, 71, 76, 112, 125, 126, 132, 146, 170, 200, 202, 207, 210, 215, 217, 218, 229, 230, 239, 257, 259, 264, 291, 295, 303, 311, 328, 329, 361, 379, 386, 393, 413, 429, 436, 462, 479, 480, 481, 546, 549, 551, 553, 554, 555, 557, 559, 561, 562, 564, 565, 567, 608, 628, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 694, 695, 697, 698, 699, 700, 705, 709, 710, 715, 718, 719, 720, 724, 725, 726, 730, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 779, 780, 781, 783, 784, 786, 787, 792, 795, 798, 799, 809, 819, 829, 831, 832, 841, 849, 856, 858, 898, 899, 900, 901, 902, 903, 904, 907, 909, 986, 988, 1017, 1034, 1035, 1037, 1039, 1043, 1044, 1045], "scatter_kwarg": [4, 13, 76, 132, 170, 698], "set_xtick": [4, 8, 10, 17, 32, 44, 61, 65, 107, 130, 134, 171, 173, 191, 216, 234, 246, 272, 273, 282, 300, 302, 308, 309, 334], "num": [4, 12, 72, 149, 152, 157, 158, 159, 171, 172, 202, 268, 269, 320, 322, 629], "set_ytick": [4, 17, 32, 44, 61, 65, 107, 130, 164, 165, 173, 191, 216, 246, 272, 300, 302, 308, 309, 334, 352], "loc": [4, 7, 8, 9, 25, 27, 34, 41, 73, 76, 80, 81, 82, 86, 91, 98, 100, 104, 105, 106, 112, 114, 115, 116, 123, 124, 125, 126, 127, 129, 132, 134, 135, 139, 145, 152, 153, 159, 161, 170, 171, 182, 185, 190, 194, 200, 201, 202, 203, 206, 207, 210, 213, 214, 217, 218, 224, 232, 233, 234, 235, 237, 239, 248, 249, 256, 259, 260, 261, 264, 265, 268, 271, 274, 275, 287, 289, 290, 301, 307, 310, 311, 317, 320, 327, 336, 339, 341, 344, 345, 350, 356, 358, 809, 875, 887], "upper": [4, 7, 9, 25, 73, 76, 80, 81, 82, 114, 115, 116, 124, 125, 126, 127, 132, 134, 145, 156, 158, 161, 170, 194, 200, 206, 207, 210, 214, 217, 218, 233, 237, 238, 260, 261, 262, 289, 290, 301, 311, 328, 336, 339, 341, 344, 406, 412, 460, 585, 586, 588, 592, 610, 611, 612, 614, 616, 617, 619, 620, 622, 629, 630, 632, 634, 647, 651, 674, 731, 871, 872, 900, 901, 902, 922, 985, 986, 989, 996, 1000, 1001, 1002, 1036], "bbox_to_anchor": [4, 38, 161, 266, 344], "set_aspect": [4, 155, 211, 248, 346], "equal": [4, 11, 12, 27, 35, 38, 40, 54, 61, 81, 87, 112, 125, 155, 170, 201, 202, 211, 217, 240, 248, 251, 255, 259, 261, 270, 294, 308, 312, 337, 339, 346, 351, 374, 375, 379, 381, 393, 403, 404, 406, 410, 411, 413, 414, 419, 434, 437, 438, 439, 440, 442, 444, 446, 451, 456, 457, 460, 466, 471, 476, 477, 500, 509, 512, 516, 529, 530, 531, 536, 538, 540, 541, 546, 547, 548, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 585, 590, 591, 594, 596, 597, 604, 605, 622, 625, 626, 629, 630, 631, 632, 634, 638, 639, 642, 646, 655, 656, 668, 696, 700, 715, 717, 725, 764, 779, 783, 784, 790, 792, 795, 796, 798, 799, 808, 809, 813, 819, 826, 830, 831, 838, 839, 840, 841, 846, 847, 848, 849, 850, 855, 856, 861, 862, 863, 870, 873, 876, 877, 878, 879, 881, 888, 895, 898, 899, 905, 906, 907, 908, 909, 924, 935, 961, 967, 980, 982, 986, 987, 989, 990, 992, 996, 1000, 1001, 1002, 1020, 1021, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "adjust": [4, 9, 37, 39, 50, 59, 69, 79, 112, 125, 167, 204, 229, 234, 242, 262, 279, 316, 329, 345, 351, 386, 406, 407, 411, 413, 414, 521, 550, 551, 554, 556, 558, 559, 561, 655, 656, 663, 665, 671, 672, 673, 701, 702, 705, 711, 712, 751, 753, 782, 791, 833, 834, 836, 837, 868, 890, 891, 898, 899, 900, 903, 906, 908, 924, 985, 986, 990, 996, 1019, 1025, 1028, 1034, 1044], "box": [4, 10, 31, 56, 171, 172, 222, 279, 306, 310, 386, 411, 413, 509, 552, 553, 874, 886, 910, 912, 986, 987, 993, 996, 1002, 1006, 1012, 1036, 1044], "show": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 141, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 157, 158, 160, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 355, 356, 357, 358, 359, 366, 367, 379, 385, 391, 392, 396, 397, 403, 404, 408, 410, 411, 412, 413, 415, 416, 435, 499, 556, 590, 591, 628, 629, 694, 695, 697, 698, 699, 710, 801, 817, 840, 858, 910, 911, 912, 975, 978, 980, 981, 983, 985, 986, 988, 989, 990, 992, 993, 996, 1000, 1001, 1007, 1016, 1017, 1021, 1030, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1044], "seem": [4, 9, 13, 47, 56, 125, 171, 200, 225, 229, 262, 279, 301, 310, 345, 350, 351, 378, 379, 384, 410, 498, 982, 986], "regim": [4, 393, 898, 899, 985], "overal": [4, 44, 49, 112, 115, 118, 132, 157, 218, 258, 284, 311, 312, 351, 365, 378, 379, 385, 403, 404, 413, 444, 446, 461, 468, 469, 475, 546, 879, 983, 986, 1002, 1010, 1038], "closer": [4, 28, 38, 99, 101, 131, 149, 152, 171, 179, 204, 341, 352, 404, 406, 411, 446, 550, 625, 709, 840, 841, 846, 848, 849, 850, 1001, 1035], "diagon": [4, 26, 41, 83, 86, 218, 239, 248, 251, 252, 255, 337, 403, 406, 408, 416, 450, 468, 469, 475, 478, 508, 510, 524, 529, 547, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 647, 648, 651, 652, 653, 679, 680, 698, 712, 788, 793, 794, 842, 850, 978, 980, 982, 985, 986, 989, 996, 1034, 1036, 1037, 1038], "obtain": [4, 7, 9, 12, 13, 21, 28, 49, 56, 58, 59, 72, 75, 76, 101, 104, 112, 122, 125, 126, 130, 138, 149, 154, 156, 170, 171, 184, 200, 202, 204, 214, 225, 239, 246, 247, 248, 257, 261, 262, 263, 267, 270, 287, 311, 319, 335, 341, 351, 352, 359, 361, 374, 376, 381, 391, 393, 400, 404, 406, 408, 409, 411, 413, 414, 415, 416, 434, 439, 466, 493, 529, 530, 552, 553, 554, 555, 556, 557, 560, 561, 562, 590, 603, 611, 642, 656, 658, 663, 665, 669, 671, 673, 674, 684, 705, 709, 722, 735, 752, 789, 801, 817, 823, 826, 827, 830, 844, 855, 875, 887, 900, 903, 906, 907, 935, 976, 978, 980, 982, 983, 985, 986, 987, 989, 990, 992, 993, 996, 1000, 1001, 1034, 1036, 1039, 1041, 1042, 1043, 1044, 1045], "slightli": [4, 26, 65, 83, 115, 118, 122, 125, 128, 132, 149, 152, 153, 154, 172, 179, 200, 218, 224, 226, 236, 239, 269, 284, 316, 334, 352, 378, 379, 391, 404, 406, 413, 414, 416, 418, 443, 585, 586, 588, 635, 655, 798, 799, 898, 900, 903, 934, 935, 975, 982, 996, 1000, 1001, 1037, 1041, 1042, 1044], "cost": [4, 40, 99, 118, 152, 167, 176, 221, 234, 263, 270, 316, 337, 351, 352, 354, 360, 379, 385, 387, 391, 406, 413, 475, 497, 534, 535, 536, 543, 554, 555, 556, 557, 561, 562, 599, 607, 616, 624, 643, 644, 649, 650, 657, 658, 659, 660, 665, 669, 671, 673, 675, 684, 685, 689, 824, 898, 899, 900, 903, 906, 907, 908, 909, 935, 978, 982, 983, 986, 989, 999, 1000, 1001, 1008, 1023, 1034, 1037, 1038], "durat": [4, 8, 200, 218, 239, 286, 352, 366, 952, 953, 982], "regressor": [4, 76, 87, 126, 131, 132, 135, 152, 157, 165, 167, 170, 178, 180, 182, 184, 200, 203, 217, 218, 219, 236, 317, 318, 365, 379, 381, 391, 393, 404, 407, 416, 429, 433, 462, 479, 480, 481, 482, 521, 548, 549, 550, 551, 552, 553, 554, 555, 557, 559, 562, 563, 564, 565, 566, 567, 602, 603, 606, 608, 629, 630, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 666, 667, 669, 670, 675, 676, 698, 826, 827, 830, 831, 832, 841, 849, 854, 855, 856, 859, 865, 873, 878, 879, 899, 901, 904, 906, 907, 908, 909, 912, 927, 929, 975, 976, 982, 986, 987, 989, 994, 1000, 1006, 1008, 1016, 1023, 1028, 1029, 1033, 1034, 1035, 1037, 1038, 1041, 1042, 1043, 1045], "mlpregressor": [4, 171, 240, 367, 854, 855, 990, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "hidden": [4, 171, 302, 303, 379, 387, 403, 411, 854, 855, 856, 990, 991, 1006, 1028, 1039], "layer": [4, 167, 216, 240, 299, 302, 303, 304, 365, 387, 413, 511, 512, 519, 564, 824, 854, 855, 856, 859, 878, 991, 1008, 1023, 1034], "cyclic": [4, 643, 644, 649, 650, 657, 658, 659, 660, 1040], "within": [4, 21, 61, 117, 119, 120, 131, 146, 148, 149, 196, 201, 202, 212, 218, 240, 259, 260, 264, 274, 306, 307, 318, 335, 338, 341, 345, 352, 361, 365, 374, 379, 383, 388, 391, 393, 394, 403, 404, 405, 406, 407, 410, 412, 413, 417, 441, 445, 458, 460, 461, 463, 466, 471, 512, 546, 564, 565, 566, 567, 590, 591, 629, 689, 693, 696, 707, 721, 777, 793, 794, 800, 801, 813, 814, 822, 823, 838, 839, 840, 841, 846, 848, 849, 850, 857, 858, 859, 871, 879, 883, 884, 886, 887, 888, 889, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 980, 982, 983, 989, 992, 996, 999, 1001, 1002, 1007, 1010, 1012, 1016, 1019, 1021, 1030, 1031, 1035, 1036, 1041, 1042, 1044], "finer": [4, 13, 38, 286, 337, 366, 406, 410, 975, 989, 1038], "resolut": [4, 11, 18, 106, 171, 296, 297, 337, 394, 404, 1012, 1038], "taken": [4, 7, 32, 43, 54, 56, 127, 149, 157, 170, 233, 234, 249, 267, 279, 308, 374, 376, 378, 379, 383, 393, 400, 405, 406, 410, 414, 418, 437, 530, 558, 559, 580, 581, 643, 644, 647, 649, 650, 651, 655, 656, 657, 658, 659, 660, 674, 676, 678, 681, 692, 871, 872, 892, 895, 901, 902, 945, 986, 988, 996, 998, 1034, 1037, 1040, 1041], "everi": [4, 96, 164, 198, 201, 222, 235, 247, 252, 270, 319, 361, 374, 377, 379, 381, 383, 387, 393, 406, 408, 410, 411, 414, 437, 451, 505, 528, 533, 536, 542, 554, 556, 557, 558, 559, 561, 587, 588, 600, 643, 644, 646, 649, 650, 656, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 682, 683, 684, 689, 693, 750, 767, 775, 776, 808, 847, 906, 908, 910, 912, 924, 979, 981, 986, 987, 988, 996, 1002, 1010, 1016, 1028, 1032, 1034, 1037, 1041, 1045], "offer": [4, 118, 381, 387, 391, 392, 396, 410, 411, 413, 414, 975, 976, 987, 990, 1002, 1006, 1007, 1010, 1034], "view": [4, 17, 43, 47, 79, 98, 171, 197, 241, 365, 367, 379, 406, 414, 533, 642, 654, 838, 839, 913, 982, 983], "gaussian": [4, 5, 9, 28, 31, 32, 35, 45, 47, 48, 56, 58, 62, 79, 80, 81, 82, 83, 92, 97, 98, 99, 106, 113, 114, 125, 128, 162, 165, 179, 184, 190, 229, 233, 248, 249, 253, 289, 297, 310, 334, 341, 368, 371, 375, 381, 384, 393, 406, 408, 411, 412, 418, 449, 466, 467, 468, 469, 470, 471, 472, 473, 493, 501, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 527, 529, 541, 546, 547, 560, 607, 608, 610, 611, 612, 614, 615, 616, 619, 620, 622, 624, 640, 641, 669, 674, 677, 700, 720, 737, 748, 772, 793, 794, 795, 809, 833, 834, 835, 836, 837, 838, 839, 843, 874, 878, 886, 890, 891, 892, 980, 982, 983, 984, 992, 1008, 1010, 1020, 1022, 1023, 1028, 1029, 1031, 1032, 1034, 1035, 1036, 1038, 1040, 1042], "random": [4, 5, 6, 7, 11, 12, 13, 14, 21, 22, 25, 26, 27, 28, 32, 34, 35, 38, 40, 41, 45, 46, 49, 51, 53, 55, 58, 59, 61, 62, 63, 65, 66, 67, 72, 76, 79, 80, 81, 82, 83, 86, 87, 93, 97, 98, 99, 102, 103, 104, 111, 113, 115, 117, 119, 120, 121, 124, 125, 127, 128, 129, 132, 135, 136, 141, 144, 145, 148, 152, 153, 156, 158, 159, 161, 164, 165, 167, 168, 169, 174, 179, 180, 181, 182, 184, 189, 190, 194, 195, 198, 199, 200, 201, 202, 203, 206, 207, 209, 213, 214, 217, 218, 221, 222, 224, 225, 226, 228, 229, 234, 235, 236, 238, 239, 244, 246, 247, 249, 250, 251, 252, 254, 256, 258, 261, 262, 264, 266, 268, 270, 271, 272, 273, 275, 277, 282, 284, 289, 290, 291, 296, 300, 307, 309, 310, 313, 317, 318, 320, 322, 325, 326, 329, 330, 336, 337, 339, 340, 342, 343, 344, 347, 350, 351, 357, 358, 365, 366, 368, 371, 375, 382, 384, 391, 392, 393, 397, 401, 402, 404, 406, 414, 415, 431, 437, 440, 444, 446, 448, 449, 450, 451, 455, 456, 457, 459, 461, 466, 467, 468, 469, 470, 471, 472, 473, 485, 486, 487, 488, 489, 492, 493, 494, 499, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 535, 536, 537, 538, 541, 544, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 570, 579, 580, 581, 586, 604, 605, 607, 608, 624, 627, 629, 631, 636, 637, 638, 639, 640, 643, 644, 646, 647, 649, 650, 651, 655, 657, 658, 659, 660, 667, 668, 669, 673, 674, 675, 676, 686, 687, 688, 689, 690, 691, 692, 698, 701, 702, 705, 727, 739, 777, 789, 793, 794, 795, 797, 798, 799, 800, 807, 809, 810, 811, 812, 813, 814, 815, 816, 823, 824, 829, 831, 832, 833, 834, 835, 837, 838, 839, 843, 847, 854, 855, 856, 858, 861, 863, 872, 875, 879, 887, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 921, 934, 935, 957, 960, 976, 978, 981, 983, 985, 986, 990, 991, 992, 994, 996, 1001, 1002, 1006, 1007, 1008, 1012, 1016, 1017, 1019, 1020, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "constant": [4, 106, 115, 155, 159, 165, 170, 188, 201, 202, 204, 218, 231, 236, 241, 264, 296, 301, 303, 307, 309, 317, 345, 347, 361, 371, 381, 388, 393, 403, 413, 416, 429, 443, 462, 479, 480, 481, 508, 510, 531, 535, 537, 544, 546, 547, 548, 549, 551, 553, 555, 557, 559, 562, 565, 567, 587, 603, 606, 608, 610, 624, 627, 629, 630, 632, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 673, 674, 675, 676, 677, 684, 686, 690, 692, 718, 719, 720, 724, 771, 773, 781, 831, 832, 841, 849, 855, 856, 863, 874, 877, 886, 898, 899, 900, 901, 902, 903, 904, 905, 907, 909, 978, 980, 982, 983, 986, 988, 989, 996, 1000, 1002, 1023, 1031, 1036, 1038, 1040, 1041, 1042, 1044], "varianc": [4, 5, 13, 28, 45, 56, 58, 63, 74, 79, 81, 86, 87, 91, 96, 97, 98, 101, 104, 105, 107, 111, 127, 136, 159, 161, 167, 170, 178, 180, 184, 189, 200, 202, 205, 218, 219, 251, 258, 261, 264, 270, 271, 274, 293, 300, 306, 311, 351, 361, 371, 375, 388, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 418, 438, 442, 446, 460, 518, 521, 529, 530, 531, 538, 541, 546, 547, 552, 553, 555, 556, 557, 562, 600, 604, 605, 608, 622, 640, 641, 642, 649, 653, 654, 657, 659, 669, 670, 671, 672, 673, 684, 707, 724, 781, 793, 794, 836, 847, 862, 868, 874, 876, 878, 884, 886, 888, 889, 907, 909, 961, 962, 963, 967, 980, 981, 982, 984, 989, 990, 991, 998, 1000, 1001, 1002, 1003, 1008, 1017, 1019, 1020, 1023, 1028, 1036, 1038, 1039, 1040, 1041, 1042, 1043], "poisson": [4, 13, 167, 178, 219, 237, 375, 413, 461, 462, 493, 520, 549, 555, 559, 562, 645, 666, 669, 677, 703, 720, 741, 745, 746, 748, 824, 858, 859, 862, 863, 871, 872, 873, 878, 907, 909, 939, 982, 1002, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "gamma": [4, 5, 6, 7, 9, 11, 17, 32, 33, 101, 133, 141, 176, 214, 229, 234, 235, 259, 261, 263, 266, 272, 276, 318, 325, 326, 328, 330, 334, 336, 337, 340, 341, 343, 344, 347, 409, 411, 416, 449, 532, 559, 616, 617, 636, 637, 638, 640, 641, 642, 645, 677, 682, 688, 720, 743, 748, 755, 762, 771, 772, 773, 793, 806, 809, 893, 894, 895, 900, 901, 902, 903, 904, 975, 978, 981, 982, 984, 999, 1001, 1012, 1016, 1017, 1019, 1028, 1029, 1031, 1032, 1033, 1035, 1036, 1038, 1039, 1042, 1043, 1044], "achiev": [4, 12, 18, 20, 28, 32, 99, 112, 121, 123, 130, 160, 176, 200, 208, 258, 261, 268, 311, 328, 337, 340, 341, 345, 350, 361, 365, 367, 373, 374, 376, 381, 385, 391, 393, 403, 404, 406, 410, 411, 413, 414, 550, 555, 562, 637, 646, 673, 675, 704, 725, 726, 734, 736, 759, 779, 780, 783, 798, 799, 834, 878, 975, 976, 978, 982, 986, 996, 999, 1001, 1009, 1021, 1041], "gridsearchcv": [4, 55, 70, 72, 74, 75, 77, 79, 104, 118, 167, 235, 241, 251, 254, 259, 260, 261, 262, 266, 269, 272, 277, 279, 286, 288, 303, 308, 318, 322, 337, 341, 361, 366, 381, 391, 393, 397, 407, 410, 416, 499, 517, 537, 538, 572, 596, 604, 650, 700, 738, 806, 809, 858, 868, 898, 906, 954, 975, 982, 986, 990, 1000, 1001, 1006, 1007, 1016, 1017, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045], "tweedieregressor": [4, 317, 320, 645, 666, 982, 1039, 1042, 1043], "power": [4, 7, 18, 118, 123, 169, 201, 218, 252, 264, 269, 288, 306, 307, 310, 325, 334, 365, 366, 392, 404, 406, 409, 412, 413, 414, 417, 441, 479, 480, 481, 529, 532, 538, 541, 627, 677, 691, 720, 743, 745, 748, 840, 841, 848, 849, 851, 852, 873, 874, 875, 886, 887, 934, 935, 982, 983, 986, 994, 996, 1000, 1001, 1010, 1031, 1034, 1036, 1038, 1039, 1041, 1045], "param_grid": [4, 6, 72, 73, 74, 75, 118, 125, 235, 241, 251, 259, 260, 261, 265, 266, 269, 272, 279, 286, 308, 337, 393, 397, 407, 413, 738, 795, 798, 806, 807, 954, 975, 986, 1016, 1017], "total": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 356, 357, 358, 359, 360, 366, 373, 374, 376, 385, 393, 403, 406, 412, 414, 417, 429, 441, 462, 479, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 494, 497, 498, 499, 501, 502, 507, 509, 511, 512, 516, 519, 520, 533, 534, 541, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 567, 580, 581, 587, 591, 593, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 673, 674, 675, 676, 694, 701, 702, 710, 725, 726, 727, 730, 734, 735, 753, 765, 779, 780, 783, 790, 791, 792, 795, 809, 819, 820, 821, 831, 832, 833, 834, 841, 843, 849, 856, 873, 877, 899, 901, 904, 906, 907, 908, 909, 935, 975, 982, 983, 986, 987, 988, 989, 996, 1000, 1001, 1002, 1017, 1021, 1029, 1034, 1036, 1044], "script": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 366, 379, 380, 381, 382, 383, 385, 391, 393, 396, 414, 1007, 1009, 1021], "348": [4, 16, 351], "second": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 361, 365, 374, 381, 383, 385, 393, 403, 406, 410, 411, 413, 414, 416, 461, 464, 485, 487, 488, 489, 491, 493, 497, 499, 501, 507, 550, 580, 585, 586, 587, 588, 618, 621, 628, 629, 696, 709, 713, 754, 755, 759, 760, 762, 763, 770, 771, 772, 773, 774, 777, 795, 798, 799, 809, 822, 828, 829, 832, 835, 846, 848, 849, 850, 855, 856, 975, 976, 980, 981, 982, 983, 986, 987, 988, 989, 990, 993, 996, 997, 1002, 1012, 1018, 1020, 1043], "plot_cyclical_feature_engin": [4, 16], "py": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 169, 170, 171, 172, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 366, 377, 379, 380, 383, 385, 387, 393, 396, 414, 417, 437, 441, 451, 458, 495, 527, 641, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 873, 877, 930, 986, 1006, 1019, 1021, 1028, 1030, 1034, 1038, 1042], "jupyt": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 380, 381, 407, 465, 896, 1002, 1006, 1007, 1039, 1042], "ipynb": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359], "galleri": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 374, 379, 381, 393, 396, 399, 1017, 1028, 1032, 1035], "sphinx": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 355, 356, 357, 358, 359, 379, 383, 393, 396, 399, 1021, 1028, 1035], "kernelpca": [5, 407, 411, 530, 531, 538, 541, 685, 687, 689, 864, 996, 1029, 1030, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "short": [5, 91, 122, 128, 191, 259, 302, 350, 379, 387, 410, 414, 418, 982, 983, 989, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "take": [5, 8, 13, 21, 31, 47, 54, 56, 58, 67, 76, 81, 93, 96, 112, 121, 152, 154, 157, 161, 170, 176, 183, 204, 208, 209, 225, 236, 248, 249, 256, 262, 266, 270, 271, 282, 284, 287, 290, 291, 292, 294, 295, 306, 320, 328, 333, 334, 337, 347, 351, 352, 356, 365, 366, 367, 373, 374, 379, 381, 384, 385, 386, 387, 391, 393, 394, 404, 406, 407, 409, 410, 411, 413, 414, 415, 416, 418, 434, 440, 443, 444, 446, 447, 449, 454, 455, 456, 458, 460, 466, 516, 530, 535, 536, 537, 543, 544, 578, 589, 592, 593, 595, 596, 597, 607, 608, 613, 617, 618, 621, 629, 640, 646, 668, 670, 671, 672, 673, 676, 688, 689, 696, 702, 704, 706, 716, 725, 726, 734, 738, 739, 752, 767, 770, 774, 775, 776, 777, 779, 780, 783, 784, 795, 796, 800, 801, 809, 813, 822, 840, 841, 842, 844, 846, 847, 848, 849, 850, 862, 872, 893, 894, 898, 899, 900, 901, 902, 903, 904, 922, 956, 975, 978, 982, 983, 985, 986, 987, 989, 991, 992, 993, 996, 1001, 1002, 1010, 1012, 1016, 1018, 1025, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "exact": [5, 7, 83, 101, 118, 157, 204, 234, 284, 361, 365, 366, 373, 379, 381, 388, 391, 392, 393, 406, 413, 415, 431, 479, 480, 481, 485, 493, 531, 532, 538, 558, 559, 635, 639, 643, 689, 795, 809, 819, 820, 821, 900, 903, 975, 978, 982, 983, 992, 996, 1000, 1001, 1035, 1036, 1038], "usp": 5, "digit": [5, 13, 30, 36, 37, 52, 69, 73, 89, 94, 137, 142, 147, 149, 167, 191, 207, 216, 220, 225, 227, 233, 234, 259, 260, 263, 288, 293, 299, 301, 302, 304, 322, 324, 331, 372, 379, 385, 406, 412, 413, 415, 438, 442, 444, 499, 538, 541, 546, 563, 655, 685, 686, 687, 688, 689, 694, 701, 702, 710, 714, 715, 733, 789, 791, 820, 824, 840, 847, 854, 858, 859, 868, 878, 884, 891, 894, 903, 910, 911, 912, 975, 981, 983, 986, 989, 991, 999, 1012, 1016, 1019, 1020, 1023, 1032], "reproduc": [5, 12, 61, 112, 170, 176, 188, 270, 279, 303, 366, 368, 378, 379, 381, 382, 387, 391, 393, 400, 406, 410, 411, 414, 418, 437, 451, 457, 466, 471, 485, 488, 489, 492, 494, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 548, 550, 551, 552, 553, 556, 557, 558, 559, 560, 604, 605, 607, 608, 631, 636, 637, 638, 639, 643, 644, 647, 649, 650, 651, 657, 658, 659, 660, 663, 664, 665, 668, 673, 675, 676, 686, 687, 689, 690, 691, 789, 793, 794, 797, 798, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 822, 823, 824, 828, 829, 832, 843, 847, 854, 855, 856, 863, 875, 879, 887, 890, 891, 898, 899, 900, 903, 934, 935, 957, 960, 978, 1006, 1009, 1028, 1036, 1041, 1042], "sect": 5, "bak\u0131r": [5, 411, 532], "g\u00f6khan": [5, 411, 532], "h": [5, 6, 49, 59, 96, 97, 112, 113, 130, 149, 154, 170, 248, 289, 292, 300, 308, 320, 330, 333, 352, 376, 385, 404, 406, 408, 411, 412, 413, 414, 417, 441, 516, 529, 532, 535, 537, 544, 550, 564, 565, 579, 587, 604, 605, 686, 690, 701, 705, 753, 833, 837, 838, 839, 844, 854, 869, 878, 978, 980, 982, 983, 984, 986, 988, 990, 991, 1000, 1002, 1017, 1034, 1039, 1043, 1044, 1045], "jason": [5, 411, 532, 894, 1034, 1036, 1040, 1043], "weston": [5, 411, 532, 590, 591, 894], "bernhard": [5, 411, 532, 829, 864, 894, 987, 992, 1001, 1034], "sch\u00f6lkopf": [5, 411, 532, 864, 992, 996, 1001], "pre": [5, 72, 170, 189, 306, 352, 368, 377, 379, 393, 396, 408, 410, 411, 413, 414, 415, 417, 418, 440, 441, 444, 456, 530, 532, 687, 709, 759, 861, 903, 986, 991, 996, 1001, 1002, 1006, 1007, 1023, 1031, 1036, 1042], "advanc": [5, 167, 228, 230, 244, 261, 282, 367, 406, 411, 486, 498, 532, 629, 636, 779, 793, 847, 856, 859, 878, 907, 978, 986, 989, 996, 1010, 1025, 1030], "neural": [5, 6, 32, 261, 302, 368, 391, 393, 400, 410, 411, 413, 418, 530, 532, 535, 537, 544, 564, 565, 636, 642, 693, 737, 793, 847, 854, 855, 856, 864, 978, 982, 983, 984, 986, 989, 992, 996, 1000, 1002, 1006, 1008, 1010, 1017, 1022, 1023, 1028, 1040], "system": [5, 101, 184, 261, 268, 361, 365, 366, 367, 374, 376, 379, 380, 381, 382, 387, 391, 396, 406, 411, 413, 417, 441, 468, 469, 475, 532, 536, 540, 547, 636, 642, 647, 648, 651, 652, 653, 679, 680, 722, 752, 765, 793, 847, 893, 894, 954, 982, 986, 989, 998, 1006, 1007, 1010, 1021, 1028, 1036, 1037], "2004": [5, 149, 261, 279, 374, 376, 406, 408, 411, 470, 532, 604, 605, 686, 690, 702, 739, 779, 894, 980, 982, 983, 988, 1001, 1019], "449": [5, 411, 532], "456": [5, 13, 16, 411, 532], "author": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 33, 38, 40, 41, 43, 47, 48, 49, 53, 54, 55, 57, 58, 62, 66, 67, 68, 71, 72, 73, 75, 76, 83, 96, 98, 100, 101, 102, 104, 107, 110, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 179, 180, 182, 184, 185, 187, 188, 189, 191, 192, 193, 194, 200, 201, 202, 204, 205, 207, 208, 215, 216, 217, 218, 221, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 249, 260, 262, 264, 265, 267, 274, 282, 284, 286, 289, 296, 297, 300, 303, 306, 307, 309, 310, 311, 325, 326, 327, 328, 330, 345, 350, 351, 352, 373, 379, 383, 387, 391, 393, 394, 410, 448, 531, 865, 978, 1004, 1006, 1031], "fr": [5, 7, 8, 9, 10, 25, 26, 31, 38, 43, 55, 58, 76, 83, 118, 158, 179, 184, 185, 187, 191, 193, 194, 205, 222, 223, 229, 232, 239, 262, 264, 267, 274, 296, 311, 345, 350, 351, 352, 528, 534, 655, 661, 682, 683, 754, 755, 984, 986], "licenc": [5, 373], "bsd": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 110, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 262, 265, 267, 274, 282, 284, 286, 292, 293, 294, 296, 297, 300, 303, 306, 307, 308, 309, 310, 311, 325, 326, 327, 328, 330, 341, 342, 345, 346, 350, 351, 352, 385], "claus": [5, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 26, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 110, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 229, 234, 235, 237, 239, 246, 248, 262, 267, 274, 282, 284, 286, 292, 293, 294, 296, 297, 300, 306, 307, 308, 309, 310, 311, 341, 342, 345, 346, 350, 351, 352], "normal": [5, 12, 18, 20, 21, 27, 30, 36, 38, 41, 45, 47, 58, 62, 63, 67, 74, 76, 79, 80, 81, 86, 87, 97, 102, 112, 113, 115, 118, 124, 125, 128, 129, 144, 155, 158, 159, 165, 167, 169, 170, 178, 179, 180, 181, 182, 184, 190, 193, 195, 198, 202, 203, 204, 206, 214, 219, 224, 239, 246, 251, 252, 255, 258, 261, 267, 289, 290, 305, 307, 311, 314, 317, 320, 328, 337, 351, 352, 361, 368, 371, 374, 375, 376, 379, 384, 388, 392, 393, 402, 403, 404, 406, 407, 409, 412, 413, 414, 418, 437, 446, 448, 449, 450, 459, 461, 462, 472, 479, 480, 481, 486, 493, 509, 512, 516, 523, 524, 530, 533, 538, 539, 541, 545, 546, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 576, 577, 579, 585, 586, 587, 588, 608, 622, 624, 636, 647, 648, 651, 652, 653, 655, 656, 661, 662, 666, 669, 673, 677, 684, 688, 692, 694, 700, 701, 703, 715, 720, 722, 730, 732, 737, 741, 745, 746, 748, 751, 752, 753, 757, 766, 790, 791, 792, 798, 799, 824, 826, 835, 837, 843, 844, 847, 858, 859, 862, 863, 866, 868, 871, 872, 873, 874, 875, 876, 878, 883, 884, 886, 887, 888, 889, 893, 894, 906, 907, 908, 909, 934, 935, 939, 962, 963, 968, 969, 975, 978, 980, 982, 983, 984, 985, 988, 992, 997, 999, 1001, 1002, 1017, 1019, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "pixel": [5, 6, 14, 21, 33, 48, 49, 54, 96, 111, 136, 147, 167, 176, 233, 259, 302, 303, 376, 406, 411, 413, 414, 415, 490, 491, 492, 561, 582, 583, 604, 605, 631, 989, 991, 1002, 1017, 1020], "train_test_split": [5, 6, 7, 10, 13, 25, 26, 28, 32, 33, 72, 76, 87, 101, 112, 117, 119, 123, 124, 125, 126, 127, 128, 131, 145, 146, 169, 170, 172, 173, 176, 184, 195, 200, 207, 208, 215, 216, 218, 230, 239, 242, 243, 255, 258, 259, 264, 268, 270, 274, 282, 287, 292, 293, 300, 302, 303, 308, 310, 311, 313, 316, 317, 318, 329, 355, 359, 361, 384, 392, 402, 407, 410, 413, 434, 435, 555, 557, 564, 565, 694, 695, 697, 699, 795, 826, 829, 847, 855, 856, 858, 908, 909, 975, 976, 986, 988, 989, 994, 996, 1001, 1017, 1025, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1041, 1045], "data_id": [5, 122, 157, 170, 200, 218, 230, 279, 312, 373, 493], "41082": 5, "return_x_i": [5, 7, 15, 59, 71, 72, 73, 74, 96, 118, 122, 123, 135, 138, 139, 140, 145, 164, 165, 172, 173, 176, 185, 187, 188, 189, 191, 196, 197, 207, 215, 216, 230, 238, 239, 242, 243, 257, 260, 263, 268, 269, 276, 279, 282, 286, 293, 301, 302, 303, 311, 316, 318, 320, 321, 322, 328, 340, 352, 355, 372, 384, 385, 392, 400, 406, 407, 410, 413, 415, 443, 485, 486, 487, 488, 489, 491, 492, 493, 494, 497, 498, 499, 501, 502, 507, 529, 530, 531, 532, 555, 558, 559, 564, 565, 589, 592, 593, 595, 596, 597, 599, 607, 616, 617, 619, 620, 635, 636, 655, 656, 665, 670, 671, 672, 685, 686, 687, 688, 698, 784, 798, 799, 801, 826, 831, 842, 847, 850, 907, 908, 909, 976, 981, 986, 987, 988, 989, 996, 1012, 1016, 1017, 1019, 1020, 1025, 1034, 1036, 1038, 1041], "idea": [5, 54, 81, 82, 118, 149, 157, 170, 201, 221, 289, 337, 355, 365, 366, 379, 384, 385, 408, 409, 410, 411, 412, 413, 415, 604, 605, 982, 983, 986, 989, 992, 1005, 1010, 1021], "noisi": [5, 34, 50, 56, 63, 97, 112, 145, 152, 158, 184, 199, 202, 224, 232, 252, 262, 268, 270, 271, 311, 357, 358, 361, 406, 414, 416, 417, 441, 443, 447, 518, 521, 935, 981, 983, 989, 1001, 1006], "nois": [5, 10, 14, 21, 22, 28, 32, 34, 41, 45, 50, 53, 55, 56, 62, 63, 68, 76, 87, 96, 97, 99, 101, 104, 113, 115, 125, 129, 130, 151, 152, 157, 162, 167, 179, 181, 182, 184, 189, 190, 195, 198, 199, 202, 203, 204, 205, 217, 224, 226, 229, 231, 232, 235, 261, 269, 274, 275, 296, 300, 301, 308, 313, 317, 344, 357, 358, 361, 375, 381, 384, 404, 406, 411, 413, 415, 416, 417, 441, 443, 449, 508, 510, 511, 512, 513, 514, 515, 519, 521, 522, 527, 529, 531, 538, 604, 605, 608, 610, 611, 612, 613, 614, 618, 619, 621, 622, 641, 642, 646, 647, 648, 650, 651, 652, 653, 660, 661, 662, 668, 676, 689, 875, 887, 893, 979, 981, 982, 983, 986, 989, 999, 1019, 1020, 1029, 1034, 1039, 1041, 1042], "approach": [5, 8, 59, 64, 67, 100, 149, 152, 164, 170, 173, 182, 188, 200, 202, 208, 218, 221, 279, 312, 341, 350, 351, 352, 367, 378, 379, 385, 388, 393, 396, 400, 404, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 434, 440, 443, 445, 449, 459, 517, 529, 579, 586, 608, 632, 655, 656, 671, 672, 827, 843, 935, 975, 976, 982, 983, 986, 987, 989, 990, 996, 1000, 1001, 1005, 1006, 1010, 1014, 1019, 1020, 1032, 1044], "copi": [5, 12, 13, 18, 45, 63, 76, 99, 115, 149, 164, 165, 170, 171, 172, 186, 193, 206, 216, 218, 222, 284, 325, 326, 328, 330, 351, 356, 366, 376, 379, 381, 383, 384, 385, 391, 393, 431, 434, 437, 439, 440, 441, 443, 444, 446, 451, 456, 479, 480, 481, 482, 497, 499, 507, 529, 530, 531, 532, 538, 545, 550, 551, 556, 558, 559, 569, 587, 594, 604, 605, 607, 608, 625, 627, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 668, 669, 671, 676, 678, 681, 682, 683, 728, 765, 788, 795, 809, 838, 839, 853, 861, 864, 867, 868, 869, 870, 874, 875, 876, 878, 881, 883, 884, 885, 886, 887, 888, 889, 893, 894, 898, 900, 901, 902, 903, 904, 913, 916, 918, 919, 945, 957, 959, 960, 996, 1001, 1002, 1007, 1013, 1016, 1021, 1028, 1031, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "add": [5, 12, 17, 18, 21, 26, 27, 28, 33, 34, 41, 45, 55, 76, 81, 82, 87, 97, 121, 124, 145, 149, 152, 157, 158, 159, 164, 165, 182, 189, 195, 201, 203, 204, 215, 224, 229, 233, 235, 236, 268, 270, 271, 284, 296, 308, 310, 316, 318, 319, 340, 341, 344, 345, 351, 365, 377, 378, 379, 380, 381, 383, 385, 387, 393, 396, 402, 404, 410, 413, 414, 415, 512, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 599, 624, 625, 627, 629, 655, 656, 691, 694, 816, 838, 839, 895, 925, 943, 944, 954, 975, 976, 985, 992, 996, 999, 1000, 1007, 1019, 1020, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "corrupt": [5, 104, 184, 206, 217, 391, 854, 982, 994], "uncorrupt": 5, "base": [5, 12, 13, 15, 18, 21, 26, 27, 28, 35, 50, 57, 58, 59, 68, 71, 72, 76, 81, 91, 96, 97, 110, 112, 113, 118, 124, 125, 126, 130, 132, 135, 143, 146, 150, 152, 157, 158, 160, 171, 172, 173, 178, 189, 200, 201, 208, 217, 218, 219, 221, 229, 236, 237, 239, 258, 259, 264, 279, 282, 284, 297, 303, 306, 307, 309, 311, 318, 320, 330, 335, 341, 351, 355, 365, 366, 368, 373, 374, 375, 376, 377, 380, 381, 382, 387, 393, 394, 395, 404, 407, 411, 412, 414, 416, 417, 418, 434, 441, 443, 444, 445, 446, 447, 449, 453, 454, 458, 460, 461, 462, 463, 464, 484, 497, 498, 505, 506, 529, 530, 532, 533, 534, 535, 536, 538, 543, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 575, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 603, 604, 605, 607, 608, 613, 614, 615, 618, 621, 629, 630, 632, 633, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 661, 666, 668, 669, 670, 671, 672, 677, 679, 680, 682, 683, 684, 687, 689, 701, 714, 722, 731, 732, 733, 735, 737, 751, 752, 753, 781, 784, 791, 795, 797, 798, 799, 801, 802, 804, 809, 813, 814, 815, 816, 822, 824, 828, 829, 832, 840, 841, 842, 844, 846, 848, 849, 850, 855, 856, 859, 860, 863, 870, 871, 873, 877, 878, 879, 887, 890, 891, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 921, 929, 954, 975, 977, 978, 980, 981, 983, 986, 987, 988, 989, 990, 991, 992, 993, 996, 998, 999, 1000, 1001, 1002, 1005, 1006, 1007, 1010, 1016, 1021, 1023, 1024, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039], "solv": [5, 6, 67, 152, 189, 234, 261, 282, 378, 379, 380, 381, 384, 391, 406, 408, 410, 411, 416, 444, 450, 459, 475, 528, 534, 535, 536, 540, 542, 543, 544, 545, 632, 634, 643, 649, 651, 652, 661, 662, 667, 669, 671, 674, 682, 683, 684, 828, 898, 899, 902, 935, 977, 980, 982, 983, 986, 987, 1000, 1001, 1002, 1005, 1006, 1010, 1014, 1017, 1021, 1034, 1038, 1041], "x_train": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 79, 86, 87, 101, 112, 115, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 180, 184, 195, 197, 198, 201, 207, 208, 214, 215, 216, 218, 230, 238, 242, 243, 248, 250, 255, 258, 259, 264, 268, 270, 274, 282, 287, 290, 292, 293, 300, 302, 303, 308, 310, 311, 313, 316, 317, 318, 328, 329, 336, 350, 355, 359, 361, 365, 373, 381, 384, 392, 407, 410, 413, 434, 435, 506, 555, 556, 557, 564, 565, 694, 695, 697, 699, 824, 826, 829, 847, 855, 856, 858, 872, 908, 909, 976, 986, 988, 989, 990, 992, 994, 996, 1000, 1001, 1016, 1017, 1025], "x_test": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 79, 86, 87, 101, 112, 115, 117, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 157, 160, 169, 170, 171, 172, 173, 176, 180, 184, 190, 195, 197, 198, 206, 207, 208, 214, 215, 216, 218, 230, 232, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 275, 282, 287, 290, 292, 293, 300, 302, 303, 308, 310, 311, 313, 316, 317, 318, 328, 329, 336, 350, 355, 357, 358, 359, 361, 365, 373, 381, 384, 392, 407, 410, 413, 435, 467, 468, 469, 470, 471, 472, 473, 506, 555, 556, 557, 564, 565, 694, 695, 697, 699, 824, 826, 829, 847, 855, 856, 858, 872, 908, 909, 976, 986, 988, 989, 990, 992, 996, 1000, 1001, 1002, 1016, 1017, 1019, 1025, 1028], "y_train": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 86, 87, 101, 112, 115, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 158, 159, 160, 161, 169, 170, 171, 172, 173, 176, 180, 184, 195, 197, 198, 201, 207, 208, 215, 216, 230, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 282, 287, 292, 293, 300, 302, 303, 308, 311, 313, 316, 317, 318, 325, 326, 328, 329, 330, 350, 355, 359, 361, 365, 373, 381, 384, 392, 407, 410, 413, 434, 435, 555, 556, 557, 564, 565, 694, 695, 697, 699, 824, 826, 829, 847, 855, 856, 858, 908, 909, 976, 986, 988, 989, 994, 996, 1001, 1016, 1017, 1025], "y_test": [5, 6, 7, 8, 10, 13, 25, 26, 27, 28, 32, 33, 71, 72, 76, 86, 87, 101, 112, 115, 117, 119, 123, 124, 125, 126, 127, 128, 131, 140, 141, 145, 146, 160, 169, 170, 171, 172, 173, 176, 184, 195, 197, 200, 206, 207, 208, 215, 216, 218, 230, 238, 242, 243, 248, 255, 258, 259, 264, 268, 270, 274, 282, 287, 292, 293, 300, 302, 303, 308, 311, 313, 316, 317, 318, 328, 329, 350, 355, 359, 361, 373, 384, 392, 407, 410, 413, 435, 555, 556, 557, 564, 565, 694, 695, 697, 699, 824, 826, 829, 847, 855, 856, 858, 908, 909, 986, 988, 989, 996, 1001, 1016, 1017, 1025, 1028], "stratifi": [5, 101, 119, 128, 145, 172, 215, 230, 239, 243, 256, 261, 264, 270, 287, 292, 293, 316, 381, 393, 548, 556, 564, 565, 599, 656, 663, 665, 673, 795, 798, 799, 801, 809, 810, 811, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 832, 847, 855, 957, 986, 989, 1016, 1033, 1034, 1035, 1037, 1038, 1041], "train_siz": [5, 7, 10, 112, 131, 153, 176, 216, 235, 239, 263, 274, 318, 321, 345, 797, 801, 812, 815, 822, 824, 981, 1016, 1028, 1029, 1034, 1035], "1_000": [5, 35, 49, 73, 101, 152, 157, 159, 171, 233, 258, 345, 698, 817], "rng": [5, 21, 22, 32, 35, 38, 45, 51, 63, 82, 87, 96, 98, 104, 113, 125, 128, 129, 131, 152, 153, 156, 158, 159, 161, 164, 165, 169, 172, 179, 180, 181, 182, 184, 189, 194, 201, 202, 207, 214, 229, 235, 236, 238, 246, 256, 264, 267, 272, 273, 300, 310, 313, 317, 318, 320, 322, 325, 326, 330, 340, 357, 358, 361, 366, 381, 384, 397, 467, 471, 472, 473, 640, 646, 667, 669, 675, 807, 833, 834, 835, 837, 838, 839, 843, 846, 848, 849, 850, 875, 887, 890, 891, 893, 894, 895, 904, 1012], "randomst": [5, 14, 21, 22, 25, 32, 35, 38, 45, 51, 62, 63, 82, 83, 87, 96, 98, 104, 113, 124, 125, 128, 129, 131, 145, 152, 153, 156, 158, 159, 161, 164, 165, 169, 172, 179, 180, 181, 182, 184, 189, 194, 201, 202, 207, 214, 224, 229, 235, 236, 246, 249, 256, 264, 267, 268, 270, 271, 272, 273, 300, 307, 309, 310, 313, 317, 318, 320, 322, 325, 326, 330, 340, 357, 358, 381, 384, 388, 393, 397, 411, 418, 437, 440, 444, 446, 448, 449, 450, 451, 455, 456, 457, 459, 466, 467, 471, 472, 473, 485, 488, 489, 492, 494, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 580, 581, 604, 605, 607, 608, 624, 629, 631, 636, 637, 638, 639, 640, 643, 644, 646, 647, 649, 650, 651, 655, 656, 657, 658, 659, 660, 663, 664, 665, 667, 668, 669, 671, 673, 674, 675, 676, 684, 686, 687, 688, 689, 690, 691, 692, 698, 777, 789, 793, 794, 797, 798, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 822, 823, 824, 828, 829, 832, 833, 834, 835, 837, 838, 839, 843, 847, 854, 855, 856, 863, 875, 879, 887, 890, 891, 893, 894, 895, 898, 899, 900, 903, 904, 906, 907, 908, 909, 921, 934, 935, 957, 960, 996, 1012, 1023], "x_test_noisi": 5, "x_train_noisi": 5, "helper": [5, 6, 99, 218, 272, 372, 381, 382, 392, 393, 410, 465, 572, 896, 1016, 1017, 1028, 1035, 1036, 1037, 1041], "qualit": [5, 6, 54, 56, 62, 118, 125, 200, 321, 374, 406, 436, 698, 1017, 1043], "assess": [5, 13, 38, 61, 112, 123, 125, 170, 200, 218, 239, 257, 258, 260, 264, 404, 413, 698, 739, 985, 986, 992, 1007, 1043], "plot_digit": 5, "small": [5, 11, 13, 22, 28, 40, 49, 50, 54, 56, 71, 79, 83, 87, 92, 101, 113, 115, 122, 124, 125, 157, 159, 170, 171, 180, 186, 190, 191, 201, 204, 206, 215, 217, 218, 248, 261, 268, 273, 286, 297, 301, 303, 306, 308, 310, 318, 325, 330, 337, 342, 345, 350, 351, 367, 372, 374, 376, 379, 382, 388, 393, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 419, 438, 440, 442, 443, 444, 446, 455, 456, 460, 472, 493, 495, 535, 537, 544, 552, 553, 554, 558, 559, 561, 579, 586, 587, 599, 604, 605, 647, 651, 652, 653, 655, 656, 676, 679, 680, 742, 798, 799, 813, 823, 826, 855, 856, 863, 891, 900, 903, 935, 975, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 996, 998, 999, 1002, 1007, 1010, 1019, 1020, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045], "img": [5, 51, 67, 503, 583], "ravel": [5, 14, 17, 18, 20, 27, 43, 54, 55, 59, 81, 106, 113, 115, 121, 125, 130, 131, 132, 141, 152, 154, 156, 157, 158, 159, 170, 179, 190, 191, 193, 200, 213, 214, 222, 226, 229, 233, 235, 239, 243, 248, 250, 264, 268, 270, 284, 289, 290, 296, 297, 300, 301, 302, 303, 308, 309, 320, 330, 337, 342, 343, 344, 346, 347, 350, 357, 358, 462, 490, 491, 492, 628, 715, 973, 986, 1044], "imshow": [5, 6, 14, 33, 41, 47, 48, 49, 51, 52, 54, 55, 59, 83, 90, 96, 99, 107, 154, 155, 156, 160, 173, 191, 216, 222, 238, 272, 288, 303, 325, 326, 337, 343, 346, 373, 629, 694, 1017, 1018, 1042], "grei": [5, 271, 306, 345, 374], "off": [5, 12, 14, 38, 40, 41, 48, 49, 53, 54, 79, 83, 86, 96, 118, 204, 222, 234, 238, 255, 260, 262, 263, 306, 326, 330, 337, 347, 350, 374, 379, 381, 406, 408, 415, 439, 550, 551, 556, 557, 585, 588, 631, 653, 689, 712, 793, 794, 795, 798, 799, 809, 821, 939, 985, 991, 1001, 1007, 1028, 1032, 1033, 1035], "fontsiz": [5, 8, 10, 15, 35, 51, 61, 92, 99, 121, 144, 155, 156, 158, 161, 171, 180, 190, 199, 211, 222, 223, 249, 256, 265, 266, 267, 272, 273, 303, 310, 344, 912], "mse": [5, 7, 79, 80, 125, 126, 164, 165, 200, 202, 204, 206, 275, 644, 650, 746, 986, 1002, 1039, 1041], "nmse": [5, 275], "2f": [5, 8, 11, 13, 20, 32, 40, 43, 45, 47, 51, 53, 63, 65, 68, 86, 93, 99, 106, 125, 131, 132, 144, 170, 171, 176, 180, 189, 191, 196, 200, 215, 216, 217, 218, 229, 233, 239, 260, 264, 265, 267, 269, 270, 271, 292, 293, 300, 308, 311, 320, 337, 350, 351, 361, 407, 410, 413, 822], "linear": [5, 10, 13, 14, 17, 28, 30, 31, 32, 36, 38, 58, 75, 76, 87, 91, 96, 101, 105, 115, 117, 130, 132, 135, 138, 139, 141, 144, 147, 149, 156, 158, 164, 165, 168, 169, 171, 174, 176, 182, 184, 186, 188, 189, 190, 195, 197, 198, 201, 202, 204, 208, 212, 214, 216, 217, 218, 219, 220, 223, 225, 227, 232, 235, 237, 238, 241, 255, 257, 258, 259, 261, 264, 266, 267, 268, 269, 270, 271, 275, 289, 292, 293, 303, 306, 307, 308, 313, 318, 319, 332, 334, 337, 338, 339, 342, 345, 346, 348, 350, 357, 358, 366, 368, 371, 375, 376, 377, 381, 382, 384, 393, 395, 406, 409, 410, 411, 412, 413, 414, 415, 416, 418, 439, 452, 462, 464, 472, 479, 480, 481, 493, 498, 499, 509, 512, 518, 521, 529, 530, 531, 532, 533, 536, 538, 540, 541, 545, 546, 547, 551, 563, 579, 586, 590, 591, 603, 606, 611, 617, 628, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 685, 686, 687, 688, 689, 690, 698, 704, 713, 746, 749, 761, 763, 770, 781, 795, 806, 810, 821, 824, 838, 839, 843, 847, 854, 855, 856, 859, 863, 864, 865, 868, 871, 873, 875, 876, 877, 878, 887, 891, 898, 899, 900, 901, 902, 903, 904, 975, 977, 978, 979, 981, 986, 989, 990, 991, 992, 993, 994, 1000, 1001, 1006, 1008, 1010, 1012, 1015, 1016, 1021, 1022, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042], "radial": [5, 101, 152, 157, 159, 337, 341, 371, 449, 619, 688, 984, 1001, 1023], "rbf": [5, 6, 10, 11, 17, 31, 32, 101, 133, 141, 152, 153, 154, 156, 157, 158, 159, 161, 167, 214, 228, 229, 235, 244, 259, 261, 263, 266, 276, 330, 332, 334, 343, 344, 348, 371, 407, 411, 413, 449, 499, 501, 532, 538, 607, 608, 609, 610, 613, 616, 617, 618, 620, 621, 628, 636, 637, 638, 639, 640, 673, 688, 761, 770, 772, 795, 806, 809, 815, 858, 878, 893, 894, 898, 900, 901, 902, 903, 904, 975, 978, 979, 981, 983, 986, 992, 996, 999, 1012, 1017, 1023, 1034, 1039], "decomposit": [5, 6, 15, 18, 59, 71, 73, 74, 75, 87, 88, 91, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 130, 136, 221, 222, 224, 234, 237, 241, 260, 288, 293, 311, 320, 351, 367, 368, 372, 385, 388, 393, 402, 403, 404, 407, 413, 446, 448, 449, 450, 459, 479, 480, 481, 492, 546, 553, 608, 647, 648, 649, 650, 651, 652, 653, 660, 661, 662, 669, 670, 671, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 793, 794, 847, 854, 857, 860, 876, 907, 934, 935, 982, 983, 986, 1003, 1006, 1008, 1015, 1017, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "kernel_pca": [5, 101, 407], "400": [5, 27, 29, 51, 96, 127, 131, 152, 165, 171, 206, 226, 273, 301, 351, 374, 411, 492, 1021], "1e": [5, 6, 7, 10, 18, 27, 47, 96, 149, 152, 155, 157, 158, 159, 160, 161, 164, 170, 180, 193, 200, 201, 207, 214, 218, 224, 229, 235, 240, 246, 249, 252, 259, 269, 272, 302, 313, 319, 322, 329, 335, 337, 345, 350, 385, 418, 440, 444, 449, 456, 459, 468, 469, 475, 479, 480, 481, 528, 529, 530, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 556, 557, 558, 559, 589, 594, 608, 610, 611, 612, 616, 617, 619, 620, 622, 624, 635, 637, 638, 639, 641, 642, 643, 644, 645, 646, 649, 650, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 684, 686, 687, 688, 689, 690, 691, 692, 724, 737, 781, 793, 794, 809, 833, 834, 835, 836, 837, 838, 839, 847, 855, 856, 863, 893, 894, 898, 899, 900, 901, 902, 903, 904, 972, 975, 986, 990, 994, 996, 1000, 1017, 1021, 1036, 1041, 1042, 1043], "fit_inverse_transform": [5, 101, 532, 1037], "5e": [5, 96, 185, 592, 593, 595], "inde": [5, 7, 26, 35, 40, 41, 54, 56, 59, 83, 87, 101, 112, 115, 148, 149, 152, 170, 172, 179, 184, 188, 189, 200, 202, 263, 264, 268, 270, 279, 284, 306, 311, 345, 351, 361, 365, 378, 384, 392, 393, 394, 406, 408, 413, 564, 565, 982, 996, 1000, 1042], "least": [5, 13, 15, 81, 82, 85, 88, 99, 123, 126, 149, 160, 167, 178, 179, 184, 193, 200, 202, 204, 205, 208, 217, 218, 219, 233, 239, 261, 279, 282, 311, 318, 319, 337, 351, 352, 365, 372, 374, 376, 378, 379, 383, 385, 387, 391, 393, 394, 397, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 441, 445, 447, 453, 454, 455, 458, 471, 479, 480, 481, 482, 491, 513, 528, 534, 536, 538, 539, 540, 542, 543, 544, 545, 546, 554, 555, 556, 557, 559, 561, 562, 563, 590, 599, 632, 640, 643, 645, 647, 648, 649, 650, 651, 652, 653, 654, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 673, 675, 676, 677, 679, 680, 681, 682, 683, 684, 689, 694, 709, 713, 715, 781, 796, 800, 801, 807, 809, 810, 811, 813, 814, 816, 819, 822, 823, 824, 855, 856, 859, 870, 878, 903, 906, 907, 908, 909, 927, 949, 976, 979, 983, 986, 989, 998, 1000, 1001, 1002, 1007, 1008, 1010, 1019, 1023, 1028, 1030, 1031, 1034, 1035, 1039], "hope": [5, 218, 393, 405, 1037], "remov": [5, 15, 17, 18, 55, 56, 71, 76, 149, 164, 165, 170, 173, 262, 306, 313, 316, 317, 318, 350, 351, 355, 361, 371, 374, 378, 379, 380, 383, 384, 388, 393, 406, 407, 410, 413, 414, 416, 417, 434, 439, 441, 444, 446, 447, 454, 456, 475, 485, 486, 523, 524, 531, 532, 534, 536, 538, 543, 550, 551, 552, 553, 564, 565, 566, 567, 576, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 608, 627, 630, 635, 641, 642, 647, 648, 651, 652, 653, 655, 661, 662, 737, 738, 746, 747, 764, 774, 775, 776, 801, 817, 819, 820, 821, 822, 845, 857, 858, 862, 863, 871, 875, 876, 878, 887, 901, 902, 904, 913, 929, 930, 932, 976, 983, 989, 1002, 1008, 1013, 1023, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "think": [5, 38, 171, 350, 351, 379, 412, 985, 1007, 1009, 1010, 1012], "happen": [5, 117, 188, 306, 312, 351, 361, 365, 366, 377, 378, 379, 383, 384, 385, 391, 393, 394, 396, 406, 408, 410, 413, 434, 512, 569, 655, 781, 876, 878, 898, 982, 986, 987, 1001, 1007, 1021, 1036, 1040, 1041, 1043, 1044], "ridg": [5, 10, 14, 55, 76, 132, 149, 151, 162, 164, 167, 170, 171, 178, 179, 184, 200, 201, 219, 228, 238, 244, 350, 365, 368, 391, 411, 413, 416, 521, 532, 536, 540, 608, 612, 619, 622, 640, 641, 642, 644, 646, 654, 658, 670, 671, 672, 675, 684, 698, 746, 795, 801, 809, 831, 904, 986, 994, 996, 1000, 1001, 1008, 1019, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1044], "x_reconstructed_kernel_pca": [5, 101], "inverse_transform": [5, 52, 55, 101, 146, 236, 288, 351, 397, 411, 414, 442, 462, 479, 480, 481, 530, 531, 532, 535, 536, 537, 538, 540, 541, 578, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 627, 795, 798, 799, 809, 858, 862, 863, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 878, 890, 891, 996, 997, 998, 1030, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "x_reconstructed_pca": [5, 101], "lower": [5, 13, 17, 27, 32, 34, 59, 80, 87, 91, 96, 98, 104, 112, 115, 118, 121, 125, 128, 152, 154, 156, 158, 160, 171, 172, 184, 185, 186, 190, 200, 201, 202, 203, 213, 221, 225, 232, 233, 238, 248, 252, 260, 261, 263, 264, 268, 269, 271, 274, 287, 288, 290, 291, 308, 311, 320, 328, 337, 343, 350, 351, 352, 356, 374, 379, 404, 405, 406, 409, 410, 411, 412, 413, 414, 417, 441, 445, 461, 464, 495, 506, 529, 531, 538, 541, 550, 556, 557, 558, 559, 560, 585, 586, 588, 600, 608, 610, 611, 612, 614, 616, 617, 619, 620, 622, 629, 630, 632, 634, 674, 676, 709, 713, 721, 724, 730, 735, 793, 794, 844, 846, 848, 849, 850, 852, 879, 898, 899, 900, 901, 902, 905, 922, 981, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 998, 1000, 1001, 1002, 1019, 1030, 1031, 1036, 1043, 1045], "analysi": [5, 7, 9, 26, 30, 36, 37, 58, 64, 69, 91, 95, 97, 98, 100, 101, 103, 105, 108, 122, 167, 170, 189, 222, 245, 253, 258, 261, 262, 266, 285, 298, 306, 311, 345, 351, 368, 371, 374, 376, 379, 381, 394, 403, 406, 408, 413, 414, 418, 436, 444, 445, 470, 472, 473, 479, 480, 482, 499, 501, 509, 512, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 552, 553, 628, 635, 685, 687, 688, 689, 690, 707, 716, 721, 722, 752, 784, 785, 788, 789, 793, 795, 820, 824, 840, 847, 858, 859, 864, 874, 878, 886, 934, 935, 976, 982, 983, 985, 986, 996, 1005, 1006, 1008, 1010, 1013, 1022, 1023, 1028, 1029, 1030, 1032, 1037], "favor": [5, 83, 118, 246, 252, 391, 408, 413, 630, 726, 803, 805, 857, 975, 994, 1030, 1032, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045], "background": [5, 11, 48, 67, 128, 303, 308, 374, 379, 387, 406, 490, 491, 983, 991, 1000, 1038], "213": [5, 16, 296, 298], "plot_digits_denois": [5, 16], "dataset": [6, 7, 9, 10, 11, 14, 15, 17, 20, 21, 22, 27, 31, 32, 34, 35, 37, 38, 39, 42, 43, 44, 46, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 62, 64, 65, 68, 69, 72, 73, 74, 75, 76, 81, 82, 83, 87, 94, 95, 99, 100, 101, 103, 107, 108, 111, 113, 114, 115, 116, 117, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 140, 141, 142, 145, 146, 147, 148, 149, 151, 160, 162, 164, 165, 172, 173, 176, 178, 181, 183, 185, 186, 187, 188, 190, 191, 192, 193, 196, 197, 199, 203, 204, 207, 208, 212, 213, 214, 215, 216, 217, 219, 223, 225, 226, 228, 230, 233, 235, 237, 238, 242, 243, 244, 246, 248, 249, 250, 252, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 276, 284, 286, 287, 288, 292, 293, 294, 295, 297, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 332, 333, 335, 337, 338, 339, 340, 345, 346, 347, 348, 351, 352, 354, 355, 357, 358, 359, 360, 361, 366, 367, 368, 381, 382, 383, 385, 392, 393, 395, 396, 400, 402, 403, 404, 406, 407, 410, 411, 412, 413, 414, 415, 421, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 455, 456, 466, 467, 470, 471, 472, 473, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 546, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 580, 581, 585, 586, 587, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 607, 608, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 625, 628, 629, 630, 631, 632, 635, 636, 637, 640, 642, 643, 644, 646, 648, 649, 650, 652, 654, 655, 656, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 676, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 700, 701, 705, 725, 751, 753, 783, 784, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 854, 855, 856, 858, 859, 862, 863, 871, 872, 876, 878, 880, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 918, 919, 923, 924, 975, 976, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1006, 1007, 1009, 1010, 1013, 1015, 1016, 1017, 1020, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "excerpt": [6, 998, 1017], "wild": [6, 372, 490, 491, 505, 506, 1017, 1023, 1028], "aka": [6, 300, 350, 391, 414, 449, 533, 535, 537, 541, 544, 578, 579, 612, 619, 648, 649, 651, 652, 653, 655, 656, 659, 663, 664, 665, 667, 673, 674, 675, 737, 865, 869, 871, 982, 990, 1000, 1012, 1017, 1030, 1042], "lfw": [6, 374, 490, 491, 1017, 1028], "vi": [6, 8, 374, 696, 1017, 1036, 1039], "www": [6, 72, 176, 200, 216, 218, 230, 282, 302, 373, 374, 379, 387, 396, 406, 410, 439, 446, 484, 505, 506, 528, 531, 534, 538, 641, 655, 661, 668, 682, 683, 847, 854, 906, 907, 982, 999, 1017], "umass": [6, 20, 374, 1017], "edu": [6, 8, 11, 18, 47, 123, 149, 159, 176, 182, 221, 249, 260, 279, 289, 297, 310, 350, 373, 374, 376, 406, 446, 484, 497, 499, 505, 506, 507, 531, 638, 641, 646, 655, 663, 664, 673, 676, 679, 680, 833, 835, 836, 837, 847, 854, 891, 893, 906, 907, 982, 984, 1017], "funnel": [6, 490, 491, 1017], "tgz": [6, 1017], "233mb": [6, 1017], "stat": [6, 8, 10, 71, 81, 102, 149, 152, 173, 258, 261, 269, 273, 289, 318, 325, 326, 376, 388, 392, 408, 471, 589, 592, 593, 595, 596, 597, 601, 602, 603, 606, 679, 680, 799, 807, 809, 906, 907, 937, 975, 982, 996, 1017, 1035, 1037, 1041], "loguniform": [6, 152, 269, 975, 1017, 1038], "fetch_lfw_peopl": [6, 374, 1017, 1043], "confusionmatrixdisplai": [6, 33, 255, 319, 325, 350, 628, 715, 986, 1017, 1038, 1039, 1041, 1042, 1043], "classification_report": [6, 33, 71, 146, 259, 303, 325, 326, 986, 1017, 1021, 1030, 1032, 1036, 1037, 1038, 1040, 1044], "randomizedsearchcv": [6, 72, 152, 262, 269, 318, 361, 392, 397, 572, 975, 986, 1000, 1006, 1017, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1045], "standardscal": [6, 10, 32, 45, 50, 56, 59, 63, 72, 74, 87, 107, 132, 149, 170, 179, 188, 189, 191, 200, 216, 218, 230, 231, 239, 240, 241, 243, 258, 268, 287, 292, 293, 300, 308, 311, 316, 317, 319, 320, 321, 337, 340, 361, 367, 379, 381, 384, 388, 392, 407, 410, 427, 463, 464, 564, 647, 648, 651, 652, 653, 661, 662, 673, 675, 858, 859, 862, 875, 889, 898, 899, 900, 901, 903, 904, 976, 983, 990, 996, 1000, 1001, 1003, 1017, 1030, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "svc": [6, 17, 26, 28, 31, 32, 33, 71, 75, 133, 139, 141, 147, 167, 176, 234, 237, 241, 255, 259, 261, 263, 266, 267, 268, 271, 272, 276, 308, 316, 318, 328, 330, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 346, 347, 348, 350, 365, 381, 385, 393, 400, 404, 407, 410, 413, 434, 465, 512, 552, 694, 695, 697, 699, 795, 812, 825, 827, 858, 895, 896, 898, 900, 974, 975, 981, 984, 986, 987, 996, 1012, 1016, 1017, 1019, 1025, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "disk": [6, 14, 374, 377, 379, 384, 393, 400, 1017], "arrai": [6, 7, 8, 10, 11, 12, 13, 14, 17, 20, 33, 34, 35, 41, 45, 47, 49, 54, 55, 62, 63, 65, 71, 73, 82, 86, 93, 97, 98, 124, 126, 128, 131, 134, 139, 146, 149, 153, 154, 155, 160, 170, 179, 181, 184, 193, 194, 197, 200, 201, 207, 217, 222, 223, 229, 233, 236, 239, 240, 243, 246, 247, 248, 250, 251, 256, 257, 259, 261, 262, 265, 266, 270, 282, 297, 309, 316, 319, 320, 322, 326, 333, 340, 341, 350, 358, 361, 365, 366, 372, 373, 374, 379, 380, 381, 382, 384, 385, 387, 389, 391, 392, 393, 400, 403, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 427, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 510, 512, 521, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 578, 579, 580, 581, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 918, 919, 920, 923, 924, 932, 933, 934, 935, 936, 937, 939, 940, 941, 948, 949, 950, 957, 958, 959, 960, 961, 962, 963, 964, 972, 973, 976, 981, 982, 984, 986, 987, 989, 990, 992, 993, 996, 997, 998, 1000, 1001, 1002, 1005, 1010, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "lfw_peopl": [6, 374, 1017], "min_faces_per_person": [6, 374, 491, 1017], "resiz": [6, 47, 48, 240, 374, 490, 491, 1017], "n_sampl": [6, 7, 10, 15, 25, 26, 27, 28, 33, 34, 35, 38, 39, 40, 42, 43, 44, 45, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 71, 76, 79, 80, 81, 82, 83, 87, 93, 96, 97, 101, 104, 112, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 140, 141, 148, 149, 161, 164, 165, 169, 179, 181, 182, 184, 186, 188, 190, 192, 194, 195, 199, 200, 201, 203, 204, 208, 212, 215, 217, 218, 221, 222, 223, 224, 225, 226, 229, 233, 234, 236, 239, 247, 249, 250, 251, 252, 258, 259, 261, 264, 265, 268, 270, 271, 272, 273, 274, 275, 284, 294, 308, 309, 310, 313, 317, 318, 320, 322, 327, 335, 338, 339, 345, 350, 351, 361, 372, 376, 379, 381, 384, 388, 391, 392, 393, 397, 406, 408, 409, 410, 411, 413, 417, 418, 419, 421, 423, 424, 425, 428, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 498, 501, 505, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 618, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 766, 767, 768, 769, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 923, 924, 935, 937, 939, 948, 955, 957, 960, 961, 962, 963, 964, 965, 966, 967, 975, 978, 982, 986, 987, 989, 990, 996, 997, 998, 1000, 1001, 1002, 1012, 1017, 1018, 1019, 1020, 1021, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "w": [6, 12, 14, 17, 31, 35, 41, 43, 46, 49, 59, 65, 103, 106, 149, 164, 199, 204, 217, 236, 237, 246, 247, 248, 251, 252, 272, 303, 319, 320, 341, 342, 345, 352, 361, 374, 376, 385, 400, 406, 407, 411, 413, 414, 418, 423, 429, 434, 462, 466, 469, 471, 479, 480, 481, 520, 535, 537, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 585, 586, 588, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 690, 696, 721, 722, 752, 795, 809, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 840, 841, 844, 845, 848, 849, 855, 856, 891, 893, 894, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 932, 937, 982, 986, 990, 991, 996, 998, 1000, 1001, 1017, 1021, 1038, 1042, 1043, 1044, 1045], "info": [6, 43, 72, 96, 170, 171, 236, 259, 376, 378, 383, 393, 414, 942, 952, 1017], "n_featur": [6, 8, 15, 26, 27, 28, 31, 32, 33, 34, 35, 41, 53, 59, 61, 62, 79, 80, 81, 82, 83, 92, 93, 96, 104, 112, 114, 116, 118, 119, 146, 148, 149, 164, 165, 176, 179, 182, 184, 186, 194, 195, 199, 203, 204, 215, 217, 222, 229, 233, 234, 236, 246, 251, 258, 264, 268, 270, 271, 273, 274, 294, 300, 308, 316, 317, 318, 320, 322, 345, 350, 351, 352, 361, 365, 372, 373, 379, 381, 384, 391, 392, 393, 397, 406, 408, 409, 411, 413, 414, 417, 418, 419, 421, 423, 424, 425, 428, 429, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 455, 456, 457, 458, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 488, 489, 491, 498, 501, 505, 506, 509, 512, 513, 516, 518, 520, 521, 523, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 695, 697, 698, 699, 707, 721, 754, 755, 756, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 788, 789, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 935, 961, 962, 963, 964, 965, 966, 967, 978, 982, 987, 989, 990, 996, 1000, 1001, 1002, 1012, 1017, 1018, 1020, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "id": [6, 20, 218, 297, 359, 373, 374, 379, 387, 408, 410, 414, 491, 492, 493, 910, 912, 930, 1017, 1021, 1036, 1037, 1040], "person": [6, 264, 374, 378, 410, 414, 490, 491, 492, 996, 1017, 1036], "target_nam": [6, 20, 31, 53, 91, 100, 105, 169, 209, 222, 248, 255, 262, 270, 271, 287, 312, 329, 350, 356, 372, 374, 485, 486, 488, 489, 490, 491, 493, 494, 497, 499, 500, 501, 502, 507, 710, 986, 1002, 1012, 1017, 1021, 1038], "n_class": [6, 38, 92, 93, 112, 114, 119, 121, 146, 148, 215, 222, 234, 237, 248, 268, 269, 270, 293, 294, 316, 356, 359, 361, 379, 381, 393, 413, 434, 485, 486, 499, 512, 516, 520, 546, 547, 548, 550, 552, 554, 556, 558, 561, 564, 566, 590, 591, 601, 607, 631, 636, 655, 656, 663, 664, 665, 671, 672, 673, 674, 694, 704, 713, 715, 731, 734, 737, 750, 784, 790, 795, 798, 799, 809, 819, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 840, 845, 847, 848, 855, 858, 865, 866, 869, 872, 879, 882, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 908, 910, 911, 923, 924, 982, 986, 987, 990, 997, 1000, 1001, 1009, 1017, 1033, 1034, 1035, 1037, 1038, 1039, 1045], "1288": [6, 374], "1850": [6, 374], "scaler": [6, 72, 74, 167, 216, 234, 241, 243, 287, 292, 305, 311, 314, 321, 337, 340, 361, 384, 407, 410, 487, 655, 656, 669, 671, 684, 858, 867, 868, 870, 874, 875, 876, 878, 883, 884, 885, 886, 887, 888, 889, 990, 996, 1000, 1017, 1028, 1033, 1036, 1041], "unlabel": [6, 237, 318, 325, 326, 327, 329, 330, 393, 405, 406, 893, 894, 895, 985, 1012, 1015, 1017, 1019, 1040], "unsupervis": [6, 12, 38, 50, 73, 74, 87, 96, 117, 130, 229, 237, 290, 291, 336, 350, 351, 361, 368, 371, 374, 381, 392, 393, 405, 406, 409, 411, 412, 413, 414, 430, 439, 442, 529, 531, 533, 534, 536, 539, 540, 546, 560, 563, 564, 566, 567, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 625, 627, 631, 632, 635, 636, 637, 638, 639, 674, 795, 798, 799, 801, 809, 817, 822, 825, 840, 841, 844, 846, 847, 848, 849, 854, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 890, 891, 895, 902, 983, 986, 992, 999, 1008, 1012, 1013, 1015, 1017, 1023, 1028, 1031, 1041], "dimension": [6, 9, 10, 20, 32, 41, 45, 55, 56, 58, 59, 63, 70, 72, 74, 75, 77, 86, 87, 93, 96, 104, 112, 117, 130, 140, 141, 149, 152, 154, 155, 159, 167, 184, 196, 201, 217, 220, 222, 223, 225, 227, 229, 233, 234, 237, 247, 248, 285, 288, 298, 308, 334, 341, 350, 361, 365, 371, 374, 375, 376, 379, 388, 393, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 442, 444, 446, 462, 466, 470, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 494, 497, 498, 499, 501, 502, 507, 512, 516, 529, 531, 532, 535, 536, 537, 538, 541, 544, 546, 560, 563, 570, 596, 604, 628, 637, 638, 639, 649, 685, 686, 687, 688, 689, 690, 691, 693, 696, 707, 721, 793, 794, 795, 824, 838, 839, 840, 843, 846, 847, 854, 858, 859, 862, 868, 873, 878, 890, 891, 892, 898, 902, 935, 972, 977, 978, 981, 982, 987, 988, 992, 998, 999, 1000, 1001, 1002, 1008, 1010, 1012, 1013, 1015, 1017, 1018, 1020, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1040, 1043, 1044], "reduct": [6, 20, 55, 58, 70, 74, 77, 87, 96, 115, 130, 167, 220, 222, 223, 227, 233, 237, 285, 298, 320, 334, 361, 365, 371, 405, 406, 407, 409, 411, 413, 415, 465, 479, 480, 481, 482, 499, 527, 529, 531, 532, 535, 536, 537, 538, 541, 544, 546, 550, 551, 554, 555, 556, 557, 561, 562, 563, 596, 604, 655, 656, 685, 686, 687, 688, 689, 690, 777, 795, 824, 840, 847, 854, 858, 859, 868, 878, 896, 898, 906, 907, 908, 909, 978, 983, 998, 1002, 1007, 1008, 1010, 1017, 1023, 1029, 1030, 1031, 1034, 1042, 1043, 1044], "top": [6, 12, 14, 15, 17, 18, 35, 38, 40, 42, 43, 44, 45, 46, 52, 63, 65, 72, 92, 98, 110, 117, 118, 121, 132, 135, 170, 200, 202, 211, 215, 229, 239, 240, 246, 248, 249, 252, 258, 262, 270, 271, 289, 306, 308, 312, 317, 325, 326, 337, 341, 350, 361, 377, 379, 381, 385, 391, 403, 404, 406, 411, 412, 413, 484, 584, 585, 588, 596, 722, 752, 790, 910, 912, 975, 978, 982, 984, 994, 1006, 1010, 1017, 1020, 1021, 1042], "t0": [6, 8, 11, 15, 18, 40, 43, 45, 47, 49, 51, 53, 59, 63, 65, 99, 184, 186, 215, 216, 217, 223, 226, 229, 233, 235, 262, 350, 351, 352, 673, 674, 675, 1017], "svd_solver": [6, 71, 96, 104, 402, 411, 532, 538, 1017, 1034], "whiten": [6, 96, 97, 98, 288, 411, 418, 530, 531, 538, 876, 878, 1017, 1032, 1034, 1042, 1043], "done": [6, 8, 9, 11, 13, 15, 18, 20, 49, 51, 53, 54, 99, 146, 149, 157, 170, 171, 176, 179, 184, 186, 204, 217, 235, 236, 251, 259, 262, 265, 270, 284, 309, 318, 350, 351, 352, 361, 366, 373, 377, 379, 381, 383, 386, 387, 388, 391, 393, 397, 406, 408, 410, 411, 413, 438, 439, 442, 447, 449, 469, 479, 480, 481, 482, 486, 532, 558, 559, 579, 603, 625, 627, 629, 631, 640, 641, 642, 656, 737, 793, 794, 795, 809, 814, 815, 862, 876, 971, 975, 976, 979, 982, 983, 986, 988, 989, 990, 996, 999, 1000, 1001, 1002, 1007, 1012, 1016, 1017, 1019, 1021, 1028, 1030, 1035, 1038, 1040, 1044], "components_": [6, 15, 59, 87, 96, 98, 99, 102, 107, 233, 234, 303, 311, 320, 393, 407, 411, 441, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 540, 541, 636, 847, 854, 890, 891, 978, 998, 1017, 1032, 1034, 1040, 1043], "project": [6, 8, 11, 14, 18, 46, 59, 68, 91, 95, 96, 98, 100, 102, 103, 108, 114, 156, 158, 160, 161, 167, 171, 192, 197, 209, 221, 222, 223, 225, 228, 234, 237, 244, 247, 288, 293, 297, 303, 334, 342, 351, 356, 365, 368, 371, 373, 377, 378, 384, 385, 388, 393, 394, 396, 403, 409, 411, 412, 418, 437, 443, 448, 449, 459, 471, 479, 480, 481, 482, 486, 499, 501, 528, 530, 531, 532, 534, 536, 538, 539, 540, 541, 545, 546, 570, 579, 586, 638, 639, 646, 669, 671, 685, 688, 692, 693, 828, 847, 875, 890, 891, 892, 934, 935, 980, 982, 983, 984, 987, 989, 990, 992, 999, 1002, 1004, 1009, 1010, 1012, 1017, 1020, 1023, 1028, 1029, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "orthonorm": [6, 388, 934, 978, 1017], "x_train_pca": [6, 1017], "x_test_pca": [6, 101, 1017], "966": 6, "065": [6, 259, 264, 277, 385], "classifi": [6, 7, 8, 9, 24, 27, 29, 30, 31, 33, 35, 36, 57, 71, 72, 73, 74, 101, 112, 113, 114, 116, 119, 120, 121, 124, 130, 133, 134, 145, 146, 148, 167, 172, 173, 176, 178, 190, 191, 192, 198, 207, 209, 212, 215, 219, 229, 234, 236, 242, 255, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 276, 279, 281, 283, 286, 292, 293, 295, 300, 303, 308, 318, 319, 324, 325, 326, 328, 329, 331, 332, 333, 336, 338, 339, 340, 341, 346, 347, 348, 352, 374, 376, 379, 381, 384, 391, 393, 406, 407, 410, 414, 415, 416, 423, 432, 434, 435, 436, 485, 486, 493, 501, 509, 511, 512, 519, 528, 533, 534, 539, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 563, 564, 565, 566, 567, 590, 591, 599, 603, 607, 619, 626, 628, 629, 630, 646, 655, 656, 663, 665, 668, 669, 670, 671, 672, 673, 694, 695, 697, 699, 700, 704, 705, 706, 709, 710, 715, 717, 722, 723, 725, 726, 730, 731, 734, 735, 736, 737, 738, 739, 750, 752, 778, 779, 780, 783, 784, 785, 790, 792, 795, 798, 799, 801, 809, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 845, 846, 848, 849, 854, 855, 856, 858, 859, 865, 878, 879, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 927, 929, 975, 976, 978, 981, 982, 983, 986, 987, 988, 991, 994, 996, 999, 1000, 1001, 1002, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1016, 1017, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1045], "1e3": [6, 7, 10, 152, 158, 164, 235, 272, 322, 975, 1017], "1e5": [6, 157, 181, 183, 190, 272, 610, 611, 612, 616, 617, 619, 620, 622, 887, 892, 998, 1017, 1019], "clf": [6, 10, 11, 12, 17, 25, 26, 27, 28, 32, 33, 39, 49, 52, 55, 59, 64, 72, 102, 103, 116, 124, 127, 128, 133, 138, 141, 145, 146, 148, 154, 156, 173, 190, 192, 193, 197, 198, 204, 207, 209, 212, 213, 214, 216, 224, 230, 231, 234, 237, 243, 250, 258, 262, 266, 267, 269, 272, 273, 287, 290, 291, 292, 295, 300, 308, 311, 316, 317, 318, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 350, 355, 356, 359, 365, 374, 392, 393, 400, 407, 410, 413, 415, 435, 546, 547, 550, 552, 554, 556, 558, 560, 561, 564, 590, 591, 594, 629, 631, 635, 636, 637, 638, 639, 641, 642, 645, 649, 655, 656, 657, 658, 659, 663, 665, 666, 669, 670, 671, 672, 673, 674, 677, 694, 695, 697, 699, 784, 795, 798, 799, 809, 826, 827, 828, 830, 833, 834, 835, 836, 837, 844, 845, 855, 898, 900, 902, 903, 906, 910, 912, 976, 978, 982, 986, 987, 989, 990, 992, 993, 1000, 1001, 1002, 1012, 1016, 1017, 1021], "class_weight": [6, 339, 393, 405, 554, 558, 561, 655, 656, 663, 665, 671, 672, 673, 674, 898, 900, 901, 902, 903, 904, 905, 906, 908, 975, 1000, 1001, 1017, 1028, 1029, 1031, 1032, 1033, 1034, 1036, 1042, 1043], "n_iter": [6, 18, 72, 152, 208, 221, 222, 226, 262, 269, 284, 303, 339, 381, 385, 392, 418, 451, 475, 529, 530, 534, 536, 541, 542, 543, 544, 641, 642, 643, 644, 649, 650, 657, 658, 659, 660, 678, 679, 680, 681, 682, 683, 684, 689, 691, 798, 799, 807, 809, 854, 856, 934, 935, 975, 1000, 1017, 1029, 1034, 1035, 1036, 1040, 1042, 1043, 1044], "found": [6, 20, 21, 22, 107, 119, 148, 152, 156, 158, 160, 204, 237, 259, 262, 263, 264, 311, 316, 319, 321, 322, 337, 352, 365, 367, 373, 376, 378, 379, 381, 391, 393, 394, 403, 406, 409, 410, 411, 413, 414, 416, 431, 438, 441, 442, 456, 469, 554, 555, 556, 557, 561, 562, 585, 587, 607, 608, 625, 633, 644, 648, 650, 652, 658, 660, 662, 668, 669, 671, 673, 675, 684, 685, 709, 716, 795, 798, 799, 809, 835, 840, 841, 847, 869, 871, 872, 906, 907, 908, 909, 913, 970, 974, 975, 978, 982, 983, 985, 987, 988, 989, 990, 996, 1000, 1001, 1002, 1007, 1009, 1012, 1017, 1021, 1028, 1031, 1032, 1035, 1036, 1038, 1042, 1045], "grid": [6, 8, 10, 11, 21, 26, 27, 28, 43, 55, 62, 72, 73, 75, 79, 83, 121, 123, 130, 156, 167, 169, 170, 171, 189, 218, 226, 234, 235, 236, 240, 246, 251, 254, 258, 260, 262, 265, 266, 277, 282, 286, 288, 289, 297, 303, 308, 309, 311, 334, 336, 337, 343, 350, 381, 386, 391, 393, 401, 407, 410, 412, 413, 414, 445, 458, 461, 469, 495, 499, 512, 519, 628, 629, 630, 644, 647, 650, 651, 653, 656, 658, 660, 673, 710, 724, 738, 781, 784, 795, 798, 799, 806, 809, 811, 824, 825, 858, 903, 979, 981, 986, 989, 993, 1007, 1012, 1013, 1015, 1017, 1019, 1023, 1028, 1031, 1032, 1033, 1035, 1036, 1042, 1044, 1045], "search": [6, 47, 55, 72, 73, 74, 75, 125, 146, 149, 152, 167, 218, 235, 236, 251, 254, 262, 265, 266, 273, 277, 284, 286, 288, 303, 308, 321, 337, 350, 361, 368, 376, 377, 379, 381, 391, 393, 401, 406, 407, 410, 413, 414, 415, 417, 440, 445, 447, 449, 454, 455, 458, 461, 468, 469, 475, 499, 512, 519, 554, 555, 556, 557, 561, 562, 563, 576, 596, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 625, 650, 673, 685, 686, 689, 690, 710, 724, 781, 784, 795, 798, 799, 806, 807, 809, 811, 824, 825, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 858, 903, 906, 907, 908, 909, 940, 974, 979, 981, 983, 986, 989, 990, 1000, 1002, 1006, 1007, 1012, 1013, 1015, 1017, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1040, 1042, 1043, 1045], "best_estimator_": [6, 55, 74, 75, 79, 104, 235, 251, 262, 265, 288, 795, 798, 799, 809, 975, 1016, 1017, 1035], "952": [6, 8, 50], "76823": 6, "03433306456": 6, "0034189458230957995": 6, "from_estim": [6, 9, 26, 28, 31, 32, 35, 57, 114, 117, 128, 129, 133, 171, 183, 192, 209, 214, 235, 240, 242, 255, 258, 263, 264, 268, 271, 276, 287, 292, 295, 311, 316, 317, 318, 319, 321, 322, 333, 334, 335, 336, 338, 339, 341, 356, 386, 404, 630, 715, 723, 778, 780, 783, 784, 785, 981, 986, 993, 1017, 1025, 1041, 1042, 1043, 1044], "display_label": [6, 255, 694, 1017, 1040], "xticks_rot": [6, 694, 1017], "vertic": [6, 18, 61, 124, 173, 189, 233, 234, 265, 282, 306, 309, 342, 344, 393, 403, 406, 411, 512, 694, 777, 1017], "tight_layout": [6, 8, 26, 28, 32, 41, 53, 56, 66, 74, 76, 87, 96, 97, 98, 107, 112, 114, 119, 121, 126, 130, 132, 134, 154, 156, 161, 164, 169, 170, 172, 173, 179, 180, 184, 190, 198, 200, 208, 211, 215, 218, 221, 234, 239, 256, 257, 273, 282, 284, 286, 296, 307, 308, 309, 310, 311, 316, 320, 335, 351, 355, 356, 1017], "042": [6, 36, 385], "precis": [6, 13, 26, 33, 71, 76, 83, 96, 146, 158, 159, 167, 176, 230, 254, 255, 259, 277, 303, 306, 325, 326, 379, 381, 393, 403, 404, 405, 406, 408, 411, 413, 440, 466, 467, 468, 469, 470, 471, 472, 473, 475, 501, 520, 529, 531, 538, 541, 641, 642, 643, 645, 647, 648, 649, 651, 652, 653, 666, 669, 671, 677, 679, 680, 684, 696, 697, 703, 704, 705, 710, 723, 725, 726, 727, 735, 759, 778, 779, 780, 783, 784, 793, 794, 824, 827, 838, 839, 844, 859, 878, 882, 898, 903, 910, 912, 935, 980, 982, 989, 990, 1001, 1017, 1021, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "recal": [6, 26, 33, 71, 101, 146, 167, 230, 254, 259, 277, 279, 303, 325, 326, 379, 393, 406, 501, 601, 697, 703, 704, 705, 709, 710, 723, 725, 726, 727, 778, 779, 780, 783, 784, 824, 827, 859, 878, 882, 898, 982, 1002, 1017, 1021, 1031, 1032, 1035, 1037, 1038, 1040, 1041, 1042, 1044], "f1": [6, 26, 33, 71, 146, 259, 303, 325, 326, 329, 410, 710, 725, 726, 734, 779, 986, 987, 1017, 1021, 1032, 1044], "ariel": [6, 374, 1028, 1034], "sharon": [6, 374], "69": [6, 191, 311, 326, 406, 468, 469, 604, 605, 752, 986, 996, 1019], "colin": [6, 374, 1034], "powel": [6, 374], "87": [6, 8, 33, 71, 161, 239, 259, 326, 594, 664, 784, 795, 874, 886, 986, 1021], "donald": [6, 374, 406, 721, 976], "rumsfeld": [6, 374], "63": [6, 356, 376, 413, 554, 555, 562, 563, 696, 722, 795, 809, 908, 909, 986], "georg": [6, 374, 406, 1034, 1040, 1041, 1042, 1043], "bush": [6, 374], "95": [6, 8, 13, 15, 33, 45, 53, 58, 68, 92, 102, 103, 121, 125, 159, 170, 179, 200, 202, 207, 218, 248, 249, 252, 261, 262, 289, 297, 308, 312, 320, 326, 337, 361, 413, 524, 629, 630, 633, 644, 658, 744, 895, 982, 986, 987, 999, 1021, 1031], "91": [6, 33, 52, 157, 303, 325, 326, 413, 981, 1017, 1021], "146": [6, 413], "gerhard": [6, 374], "schroeder": [6, 374], "hugo": [6, 374, 1034, 1039, 1040, 1041, 1042], "chavez": [6, 374], "90": [6, 10, 13, 15, 33, 75, 106, 107, 124, 125, 126, 146, 157, 173, 180, 191, 197, 199, 202, 207, 218, 246, 270, 272, 308, 312, 322, 325, 326, 361, 365, 379, 385, 410, 560, 777, 795, 822, 827, 879, 981, 986, 1017, 1021, 1043, 1044], "toni": [6, 374, 560, 878, 992, 1041, 1042], "blair": [6, 374], "93": [6, 8, 13, 33, 149, 200, 243, 259, 326, 350, 376, 784, 795, 822, 906, 981, 986, 1017, 1021], "83": [6, 8, 31, 35, 40, 325, 376, 381, 704, 782, 981, 986, 1017, 1021, 1031], "322": [6, 25, 29, 92, 351, 468, 469], "macro": [6, 33, 71, 146, 259, 303, 316, 325, 326, 374, 410, 704, 710, 725, 726, 734, 779, 780, 783, 784, 986, 1021, 1028, 1036, 1044], "avg": [6, 33, 71, 146, 259, 303, 325, 326, 566, 701, 710, 986, 1017, 1021, 1044], "weight": [6, 13, 14, 15, 20, 25, 33, 55, 71, 107, 125, 133, 134, 145, 146, 157, 165, 167, 170, 178, 184, 189, 191, 200, 204, 205, 214, 215, 216, 218, 219, 241, 246, 259, 264, 268, 270, 287, 296, 299, 300, 303, 304, 311, 313, 316, 319, 325, 326, 332, 339, 341, 345, 348, 350, 351, 352, 359, 361, 375, 376, 388, 391, 393, 406, 408, 409, 411, 412, 415, 417, 423, 429, 434, 437, 440, 441, 443, 444, 446, 450, 456, 457, 460, 461, 462, 464, 466, 471, 479, 480, 481, 493, 512, 521, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 583, 586, 587, 588, 590, 594, 599, 600, 607, 608, 625, 629, 630, 631, 632, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 686, 690, 694, 695, 697, 699, 700, 704, 705, 706, 709, 710, 713, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 730, 731, 732, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 754, 755, 765, 778, 779, 780, 781, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 860, 863, 877, 878, 879, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 923, 924, 937, 961, 967, 976, 977, 982, 983, 985, 986, 988, 989, 990, 991, 993, 996, 999, 1000, 1001, 1002, 1007, 1012, 1019, 1021, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "85": [6, 17, 18, 33, 51, 56, 71, 99, 146, 215, 218, 272, 303, 326, 361, 413, 436, 497, 552, 553, 594, 649, 655, 741, 749, 784, 795, 822, 986, 987, 1017, 1028], "plot_galleri": [6, 96, 1017], "n_row": [6, 20, 96, 403, 421, 448, 450, 508, 510, 1017], "n_col": [6, 20, 96, 238, 421, 448, 450, 508, 510, 629, 1017], "portrait": [6, 411, 1017], "figur": [6, 7, 8, 10, 12, 14, 17, 25, 26, 27, 28, 32, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 59, 60, 62, 63, 64, 65, 66, 68, 79, 83, 86, 90, 91, 92, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 112, 113, 114, 115, 123, 124, 125, 126, 127, 130, 131, 135, 138, 139, 141, 144, 145, 148, 153, 154, 155, 156, 159, 160, 165, 170, 171, 172, 173, 179, 184, 185, 190, 193, 194, 197, 199, 201, 202, 206, 211, 215, 216, 217, 223, 224, 225, 229, 233, 234, 235, 237, 238, 240, 246, 248, 249, 252, 255, 260, 265, 266, 275, 289, 293, 294, 297, 300, 303, 306, 308, 309, 313, 316, 318, 325, 326, 327, 335, 337, 342, 356, 357, 358, 379, 406, 412, 413, 414, 416, 435, 628, 629, 694, 695, 697, 698, 699, 801, 817, 912, 975, 979, 982, 985, 986, 989, 990, 993, 1000, 1001, 1002, 1017, 1019, 1020, 1041], "subplots_adjust": [6, 7, 14, 15, 40, 43, 45, 46, 51, 52, 55, 63, 65, 81, 83, 92, 93, 98, 99, 106, 114, 115, 132, 170, 199, 200, 215, 218, 229, 237, 246, 248, 249, 252, 256, 272, 274, 289, 297, 300, 303, 308, 318, 326, 334, 337, 1017], "bottom": [6, 8, 12, 14, 15, 35, 38, 40, 43, 45, 46, 52, 54, 63, 65, 92, 93, 123, 130, 135, 200, 211, 229, 246, 248, 249, 252, 258, 261, 272, 289, 306, 326, 328, 337, 379, 404, 406, 412, 584, 910, 980, 982, 986, 1007, 1017, 1020], "left": [6, 7, 12, 14, 15, 17, 25, 34, 35, 40, 43, 45, 46, 52, 56, 63, 65, 73, 76, 82, 83, 92, 93, 98, 99, 112, 115, 117, 118, 119, 122, 125, 132, 134, 155, 161, 165, 170, 173, 185, 193, 200, 201, 202, 204, 211, 213, 214, 217, 218, 229, 233, 237, 239, 240, 246, 248, 249, 252, 257, 258, 259, 260, 262, 270, 271, 273, 287, 289, 290, 297, 300, 303, 306, 320, 322, 326, 336, 337, 341, 359, 379, 381, 383, 403, 406, 409, 410, 412, 413, 414, 416, 443, 469, 479, 480, 481, 482, 490, 495, 546, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 584, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 632, 636, 640, 648, 652, 793, 794, 795, 798, 799, 802, 809, 871, 878, 906, 907, 908, 909, 910, 922, 935, 957, 960, 975, 978, 980, 982, 984, 986, 988, 993, 998, 1000, 1002, 1016, 1017, 1019, 1020, 1035, 1037, 1042], "01": [6, 8, 10, 13, 14, 16, 17, 29, 36, 41, 45, 52, 63, 69, 77, 96, 98, 99, 115, 123, 124, 126, 129, 130, 136, 149, 157, 161, 162, 170, 171, 181, 184, 191, 207, 212, 213, 218, 219, 221, 222, 229, 233, 234, 235, 239, 240, 244, 248, 252, 253, 255, 260, 261, 262, 266, 268, 269, 270, 277, 283, 289, 298, 301, 303, 304, 306, 314, 317, 323, 339, 348, 351, 357, 358, 360, 374, 376, 384, 406, 415, 446, 468, 512, 529, 536, 540, 592, 593, 595, 639, 643, 651, 655, 675, 693, 712, 795, 809, 892, 982, 986, 990, 996, 998, 1000, 1017, 1021], "right": [6, 7, 11, 12, 14, 15, 17, 32, 35, 40, 43, 44, 45, 46, 52, 54, 61, 63, 65, 80, 81, 83, 91, 92, 93, 98, 99, 101, 104, 106, 112, 114, 115, 116, 125, 126, 127, 134, 145, 152, 155, 165, 173, 190, 201, 202, 203, 204, 206, 207, 210, 211, 229, 232, 233, 236, 246, 248, 249, 251, 252, 256, 257, 261, 264, 268, 271, 272, 274, 289, 297, 300, 303, 306, 308, 311, 322, 326, 337, 339, 341, 345, 347, 350, 356, 359, 361, 368, 379, 391, 394, 403, 406, 409, 411, 412, 413, 416, 461, 479, 480, 481, 482, 531, 538, 541, 554, 555, 556, 557, 558, 559, 561, 562, 563, 584, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 632, 673, 675, 863, 906, 907, 908, 909, 910, 922, 935, 975, 978, 980, 982, 984, 986, 988, 989, 993, 998, 1000, 1001, 1002, 1006, 1007, 1010, 1013, 1017, 1019, 1020, 1030, 1036, 1042, 1044], "99": [6, 13, 26, 33, 45, 52, 63, 96, 218, 229, 233, 239, 246, 248, 259, 262, 269, 306, 326, 366, 372, 376, 383, 410, 413, 414, 489, 644, 658, 668, 784, 845, 981, 986, 996, 1000, 1017, 1023, 1030], "hspace": [6, 14, 15, 45, 46, 63, 96, 218, 229, 246, 248, 249, 252, 289, 318, 326, 334, 1017], "grai": [6, 14, 47, 48, 51, 52, 54, 96, 99, 127, 149, 198, 200, 218, 233, 237, 238, 268, 302, 376, 411, 490, 491, 499, 518, 1017, 1020, 1039], "ytick": [6, 11, 31, 35, 41, 45, 47, 51, 52, 53, 59, 60, 63, 83, 86, 99, 123, 126, 139, 145, 154, 155, 156, 160, 183, 190, 196, 213, 229, 237, 247, 248, 249, 252, 256, 275, 288, 297, 303, 325, 337, 342, 343, 350, 1017], "portion": [6, 8, 82, 149, 270, 365, 374, 376, 379, 385, 393, 784, 819, 836, 975, 985, 989, 1017, 1021], "pred_nam": [6, 1017], "rsplit": [6, 18, 262, 1017], "true_nam": [6, 1017], "ntrue": [6, 325, 326, 1017], "prediction_titl": [6, 1017], "signif": [6, 978, 1017], "eigenface_titl": [6, 1017], "convolut": [6, 160, 1017], "network": [6, 239, 302, 365, 366, 367, 368, 373, 374, 391, 393, 394, 400, 406, 411, 413, 418, 493, 530, 532, 564, 565, 693, 737, 855, 856, 982, 984, 986, 1000, 1002, 1006, 1008, 1017, 1022, 1023, 1028, 1042], "famili": [6, 365, 367, 393, 406, 409, 411, 414, 415, 589, 592, 593, 595, 596, 597, 603, 855, 856, 874, 886, 982, 996, 1000, 1017, 1019, 1032, 1042], "outsid": [6, 9, 20, 121, 201, 202, 232, 243, 391, 414, 443, 632, 877, 992, 1017, 1036], "scope": [6, 20, 365, 367, 379, 391, 414, 1006, 1007, 1017], "scikit": [6, 8, 10, 12, 13, 17, 18, 32, 33, 51, 71, 110, 117, 118, 132, 146, 149, 161, 165, 167, 170, 173, 188, 189, 218, 228, 239, 242, 254, 258, 277, 279, 284, 289, 291, 315, 323, 341, 350, 351, 355, 356, 361, 366, 367, 368, 371, 373, 374, 375, 376, 378, 379, 382, 385, 386, 387, 388, 392, 393, 397, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 420, 421, 423, 424, 425, 428, 429, 430, 435, 440, 443, 444, 447, 454, 456, 461, 462, 464, 465, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 509, 512, 518, 521, 535, 558, 559, 561, 562, 564, 573, 578, 579, 580, 582, 583, 586, 596, 599, 608, 623, 625, 627, 629, 631, 635, 637, 643, 645, 649, 655, 666, 677, 685, 697, 698, 699, 714, 738, 744, 774, 775, 776, 784, 791, 795, 796, 797, 798, 799, 800, 801, 809, 812, 813, 814, 815, 816, 817, 820, 824, 826, 827, 840, 842, 858, 859, 861, 863, 865, 868, 870, 871, 872, 873, 877, 878, 879, 882, 895, 896, 898, 903, 906, 907, 929, 930, 952, 953, 954, 975, 976, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 996, 999, 1000, 1001, 1002, 1005, 1009, 1015, 1016, 1017, 1019, 1020, 1023, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "librari": [6, 261, 319, 321, 357, 361, 371, 373, 374, 377, 378, 379, 380, 385, 391, 392, 393, 396, 402, 655, 898, 899, 900, 901, 903, 904, 954, 982, 986, 1001, 1002, 1006, 1007, 1010, 1017, 1021, 1026, 1031, 1035, 1036, 1037, 1038, 1039, 1041], "reader": [6, 43, 319, 367, 379, 1017], "pytorch": [6, 391, 1006, 1007, 1017, 1044], "tensorflow": [6, 391, 1006, 1017], "implement": [6, 7, 13, 14, 17, 18, 47, 57, 82, 96, 118, 165, 173, 176, 184, 185, 189, 214, 218, 221, 229, 235, 236, 259, 261, 270, 279, 282, 284, 286, 289, 309, 316, 317, 318, 319, 320, 322, 350, 352, 365, 366, 367, 373, 374, 376, 377, 379, 380, 381, 384, 385, 387, 388, 393, 396, 397, 400, 402, 403, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 434, 439, 440, 441, 443, 444, 445, 446, 447, 472, 490, 493, 505, 529, 530, 531, 532, 533, 535, 538, 539, 540, 550, 551, 552, 554, 555, 558, 559, 560, 564, 569, 579, 585, 586, 588, 590, 594, 598, 607, 608, 629, 630, 637, 638, 642, 643, 650, 654, 655, 656, 660, 661, 665, 668, 669, 671, 672, 673, 674, 675, 681, 682, 683, 684, 685, 688, 689, 692, 704, 708, 717, 731, 734, 738, 774, 778, 784, 785, 793, 795, 798, 799, 801, 809, 813, 814, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 840, 841, 843, 846, 848, 849, 854, 855, 856, 858, 880, 888, 889, 895, 898, 899, 900, 901, 902, 903, 904, 934, 935, 943, 946, 951, 954, 957, 975, 976, 978, 980, 982, 983, 984, 985, 987, 988, 990, 991, 992, 996, 998, 999, 1002, 1003, 1004, 1006, 1007, 1008, 1010, 1012, 1017, 1018, 1019, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "725": [6, 16], "plot_face_recognit": [6, 16], "demonstr": [7, 13, 20, 21, 22, 26, 37, 41, 56, 62, 69, 71, 73, 112, 116, 126, 146, 160, 167, 173, 201, 236, 242, 243, 248, 252, 254, 264, 267, 270, 275, 277, 286, 289, 296, 305, 308, 310, 313, 314, 318, 324, 326, 327, 330, 331, 335, 341, 350, 351, 352, 361, 367, 374, 375, 379, 384, 391, 397, 402, 406, 410, 413, 444, 499, 509, 517, 694, 700, 710, 738, 794, 795, 863, 894, 906, 975, 976, 980, 986, 987, 988, 989, 996, 999, 1002, 1005], "diabet": [7, 126, 135, 137, 142, 149, 165, 167, 187, 188, 189, 196, 197, 257, 372, 413, 498, 649, 650, 795, 800, 819, 820, 821, 994, 1012, 1016, 1023], "regress": [7, 10, 14, 26, 28, 31, 55, 70, 72, 77, 81, 82, 85, 88, 99, 111, 115, 117, 118, 123, 131, 136, 149, 151, 162, 164, 165, 167, 169, 170, 171, 178, 182, 184, 186, 190, 194, 195, 197, 201, 203, 204, 205, 216, 219, 228, 230, 238, 239, 243, 244, 257, 274, 275, 282, 285, 298, 303, 307, 311, 318, 319, 320, 321, 332, 348, 350, 354, 360, 366, 367, 368, 371, 372, 374, 376, 379, 381, 384, 387, 388, 391, 392, 393, 401, 404, 408, 409, 410, 411, 415, 429, 434, 461, 462, 471, 481, 486, 487, 489, 493, 498, 499, 501, 502, 509, 513, 514, 515, 521, 525, 528, 532, 534, 536, 538, 539, 540, 542, 543, 545, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 562, 563, 564, 567, 568, 589, 590, 591, 592, 593, 594, 595, 596, 597, 601, 602, 603, 606, 607, 608, 611, 612, 619, 620, 622, 628, 629, 630, 631, 632, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 698, 703, 718, 719, 720, 724, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 781, 786, 787, 795, 798, 799, 801, 809, 817, 821, 822, 824, 825, 829, 831, 832, 840, 841, 846, 848, 849, 855, 856, 858, 859, 862, 863, 865, 871, 872, 873, 875, 878, 879, 882, 887, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 912, 918, 921, 923, 939, 975, 976, 978, 981, 983, 993, 994, 996, 997, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1018, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "patient": [7, 135, 149, 165, 376, 387, 410, 982, 1019], "diseas": [7, 135, 149, 165, 264, 376, 709, 986, 1019], "newsgroup": [7, 15, 20, 233, 262, 329, 351, 352, 372, 403, 414, 485, 486, 1013, 1023], "post": [7, 15, 20, 71, 167, 320, 350, 351, 352, 354, 360, 365, 374, 378, 379, 383, 384, 392, 406, 445, 485, 486, 497, 709, 824, 906, 986, 1002, 1010, 1021, 1039], "written": [7, 30, 36, 90, 167, 207, 319, 366, 376, 379, 380, 381, 385, 387, 391, 393, 405, 407, 412, 484, 499, 505, 694, 710, 824, 903, 910, 980, 982, 986, 990, 991, 1000, 1005, 1012, 1013, 1018, 1021, 1037], "about": [7, 11, 30, 45, 54, 58, 63, 71, 87, 90, 121, 146, 161, 167, 169, 170, 173, 204, 217, 229, 236, 258, 259, 261, 263, 268, 282, 289, 311, 316, 318, 319, 320, 321, 322, 326, 350, 352, 359, 361, 365, 366, 368, 372, 374, 378, 379, 383, 384, 385, 392, 393, 394, 400, 405, 410, 411, 414, 416, 435, 489, 491, 492, 493, 494, 497, 498, 499, 501, 502, 507, 512, 558, 559, 590, 591, 604, 605, 611, 630, 637, 673, 675, 739, 795, 801, 809, 817, 827, 919, 976, 982, 983, 985, 987, 989, 992, 993, 996, 997, 999, 1001, 1002, 1004, 1006, 1010, 1012, 1013, 1019, 1021, 1033, 1034, 1044], "sgdclassifi": [7, 8, 207, 208, 209, 210, 211, 212, 213, 234, 269, 329, 339, 350, 361, 365, 367, 385, 393, 404, 405, 414, 635, 637, 638, 639, 643, 655, 663, 665, 898, 903, 978, 982, 987, 1000, 1001, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044], "stochast": [7, 59, 124, 127, 167, 176, 178, 219, 223, 225, 229, 234, 292, 293, 299, 304, 319, 406, 411, 413, 459, 485, 493, 499, 500, 501, 511, 519, 533, 541, 556, 557, 568, 601, 624, 628, 636, 655, 656, 665, 669, 671, 673, 674, 675, 676, 684, 685, 686, 687, 689, 824, 847, 854, 855, 856, 859, 868, 902, 934, 935, 960, 975, 989, 990, 992, 1008, 1022, 1023, 1028, 1029, 1032, 1033, 1035, 1037, 1039], "gradient": [7, 13, 47, 67, 111, 117, 129, 132, 135, 136, 157, 158, 167, 178, 219, 229, 234, 306, 312, 393, 405, 406, 416, 449, 459, 463, 464, 485, 487, 493, 498, 500, 501, 512, 517, 550, 551, 556, 557, 558, 559, 561, 562, 568, 583, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 628, 631, 632, 636, 645, 646, 655, 656, 665, 666, 669, 671, 673, 674, 675, 677, 684, 689, 691, 692, 737, 738, 744, 746, 795, 798, 799, 800, 821, 824, 854, 855, 856, 859, 871, 872, 902, 960, 983, 986, 989, 990, 991, 992, 1006, 1008, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1041, 1043, 1045], "descent": [7, 14, 167, 178, 185, 219, 229, 234, 319, 411, 413, 468, 469, 475, 485, 493, 500, 528, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 568, 628, 636, 643, 644, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 665, 669, 671, 673, 674, 675, 678, 679, 680, 681, 684, 691, 824, 855, 856, 859, 898, 902, 960, 983, 990, 992, 1001, 1008, 1019, 1023, 1028, 1031, 1032, 1033, 1035, 1037, 1039, 1041, 1042, 1043], "nusvr": [7, 365, 904, 1001, 1030, 1036, 1038, 1039, 1040, 1042, 1043], "nu": [7, 9, 11, 161, 214, 229, 336, 365, 413, 416, 616, 674, 900, 901, 902, 992, 1000, 1001, 1039, 1043], "vector": [7, 8, 9, 10, 12, 15, 17, 20, 21, 27, 28, 31, 33, 37, 41, 49, 69, 73, 90, 96, 98, 145, 152, 160, 181, 187, 204, 205, 212, 216, 234, 235, 242, 259, 261, 262, 266, 290, 303, 306, 330, 333, 334, 337, 338, 340, 341, 342, 345, 347, 348, 351, 365, 367, 368, 374, 384, 385, 388, 391, 393, 403, 404, 406, 408, 409, 410, 411, 413, 416, 417, 418, 434, 440, 441, 442, 444, 446, 447, 448, 450, 461, 462, 464, 465, 479, 480, 481, 482, 484, 486, 494, 506, 509, 518, 521, 528, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 546, 547, 548, 549, 564, 565, 566, 567, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 614, 615, 616, 617, 619, 620, 622, 628, 635, 637, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 669, 670, 671, 672, 673, 674, 675, 683, 684, 685, 686, 688, 689, 690, 692, 696, 716, 731, 759, 764, 765, 766, 767, 769, 770, 771, 773, 774, 795, 798, 799, 809, 822, 825, 826, 827, 833, 834, 835, 836, 837, 840, 841, 842, 844, 845, 846, 848, 849, 850, 855, 856, 863, 865, 870, 878, 882, 885, 896, 898, 899, 900, 901, 902, 903, 904, 905, 918, 932, 934, 935, 949, 975, 978, 979, 980, 982, 983, 984, 986, 987, 988, 990, 991, 992, 996, 1000, 1002, 1008, 1012, 1015, 1018, 1021, 1023, 1025, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1039, 1041], "gradientboostingregressor": [7, 125, 126, 132, 135, 365, 384, 391, 551, 559, 629, 630, 982, 986, 987, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045], "forward": [7, 112, 149, 236, 318, 365, 379, 397, 415, 505, 506, 536, 540, 550, 556, 557, 582, 583, 599, 665, 682, 683, 858, 862, 982, 1007, 1040], "wise": [7, 27, 49, 160, 201, 229, 271, 306, 351, 365, 393, 404, 406, 410, 411, 415, 455, 528, 531, 534, 538, 542, 543, 546, 547, 550, 552, 553, 556, 557, 589, 592, 593, 595, 596, 597, 603, 637, 649, 697, 750, 826, 875, 888, 889, 892, 959, 961, 962, 963, 964, 967, 978, 980, 982, 986, 987, 1000, 1007, 1028, 1033, 1036, 1037, 1038], "fashion": [7, 117, 123, 208, 270, 366, 393, 403, 404, 406, 411, 413, 550, 554, 555, 556, 557, 561, 562, 563, 599, 624, 824, 847, 862, 865, 871, 882, 906, 907, 908, 909, 957, 976, 982, 986, 996, 1037], "notic": [7, 13, 26, 27, 35, 54, 58, 81, 115, 117, 118, 125, 148, 179, 184, 229, 242, 258, 259, 261, 262, 264, 270, 271, 284, 311, 341, 350, 351, 352, 361, 384, 394, 410, 493, 538, 560, 975, 985, 986, 992, 1021, 1025, 1041], "faster": [7, 20, 40, 65, 74, 96, 117, 118, 122, 125, 149, 171, 176, 186, 200, 202, 215, 216, 218, 235, 284, 286, 302, 317, 319, 320, 350, 351, 352, 365, 373, 379, 387, 388, 393, 405, 406, 411, 415, 416, 418, 440, 444, 446, 448, 449, 450, 459, 505, 528, 529, 530, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 550, 556, 557, 558, 559, 640, 643, 644, 649, 650, 655, 656, 657, 658, 659, 660, 669, 671, 681, 684, 688, 692, 722, 752, 774, 775, 776, 838, 839, 843, 855, 856, 873, 875, 877, 887, 891, 935, 975, 979, 982, 987, 989, 990, 993, 998, 1000, 1001, 1002, 1006, 1009, 1017, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "10_000": [7, 26, 76, 117, 125, 169, 176, 233, 264, 284, 556, 557, 561, 562, 875], "vari": [7, 13, 35, 45, 47, 56, 63, 76, 118, 119, 121, 148, 167, 170, 171, 189, 191, 194, 198, 226, 234, 239, 251, 257, 261, 264, 299, 304, 306, 311, 322, 324, 331, 337, 340, 361, 365, 367, 374, 393, 438, 442, 443, 497, 505, 511, 512, 519, 556, 557, 561, 562, 643, 644, 647, 648, 649, 650, 651, 652, 657, 658, 659, 660, 678, 681, 700, 759, 814, 817, 822, 824, 825, 855, 859, 863, 878, 895, 903, 906, 907, 960, 978, 981, 982, 986, 989, 990, 999, 1002, 1010, 1035, 1036, 1044], "relev": [7, 9, 20, 78, 84, 147, 149, 167, 179, 194, 261, 262, 268, 361, 365, 367, 374, 376, 378, 379, 381, 383, 384, 385, 393, 394, 397, 408, 409, 415, 416, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 535, 538, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 591, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 722, 736, 752, 796, 797, 798, 799, 802, 804, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 876, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 986, 987, 992, 1003, 1007, 1031, 1036, 1040, 1042], "next": [7, 26, 61, 81, 121, 122, 126, 135, 159, 169, 173, 193, 197, 200, 230, 238, 242, 243, 248, 256, 267, 282, 311, 312, 313, 318, 326, 350, 355, 359, 361, 368, 377, 379, 381, 383, 403, 406, 407, 410, 413, 505, 506, 607, 631, 689, 695, 697, 699, 777, 793, 794, 824, 952, 975, 979, 985, 986, 996, 1010, 1025, 1028, 1041, 1042], "ham": [7, 447, 454, 578, 696, 700, 706, 730, 737, 774, 775, 776, 792, 989], "loss": [7, 13, 25, 26, 27, 28, 118, 123, 124, 125, 126, 127, 152, 153, 167, 178, 182, 190, 193, 202, 204, 205, 207, 208, 212, 218, 219, 235, 269, 301, 302, 311, 319, 329, 334, 335, 339, 341, 345, 350, 391, 393, 404, 405, 411, 416, 461, 462, 493, 505, 506, 529, 535, 536, 537, 540, 544, 549, 550, 551, 555, 556, 557, 558, 559, 562, 640, 643, 646, 655, 656, 663, 664, 665, 666, 667, 668, 669, 673, 674, 675, 676, 700, 703, 706, 719, 730, 731, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 786, 787, 792, 795, 798, 799, 809, 820, 821, 824, 855, 856, 858, 859, 862, 863, 871, 872, 873, 878, 898, 899, 904, 905, 907, 909, 935, 939, 979, 982, 990, 994, 999, 1000, 1001, 1002, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "eustach": [7, 8, 10, 1010, 1030, 1031], "diemert": [7, 8, 10, 1010, 1030, 1031], "maria": [7, 126, 132, 149, 165, 406, 1039, 1040, 1041, 1042, 1043], "telenczuk": [7, 126, 132, 149, 165, 1037, 1040, 1041, 1043], "github": [7, 8, 12, 27, 72, 73, 117, 119, 120, 126, 128, 129, 132, 135, 146, 157, 165, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 284, 303, 312, 317, 318, 320, 321, 327, 359, 373, 377, 378, 382, 383, 384, 385, 387, 391, 393, 394, 396, 400, 402, 449, 459, 505, 533, 688, 689, 692, 989, 1005, 1006, 1009, 1010, 1021, 1033, 1038, 1045], "com": [7, 8, 11, 12, 15, 17, 21, 22, 25, 43, 49, 58, 66, 71, 72, 110, 112, 113, 114, 115, 116, 117, 123, 124, 126, 127, 131, 132, 152, 155, 157, 159, 161, 165, 180, 200, 202, 207, 217, 218, 222, 224, 226, 232, 246, 248, 249, 262, 265, 284, 306, 307, 310, 311, 350, 351, 373, 374, 377, 379, 383, 384, 385, 387, 391, 396, 402, 406, 439, 449, 459, 505, 531, 533, 538, 668, 688, 692, 702, 989, 1004, 1009, 1033, 1035, 1038, 1045], "maikia": [7, 126, 132, 165, 1036, 1037, 1039, 1040], "lemaitre58": [7, 132, 152, 157, 159, 161, 222, 306], "gmail": [7, 11, 15, 17, 25, 43, 49, 58, 66, 71, 72, 110, 112, 113, 114, 115, 116, 117, 123, 124, 126, 127, 131, 132, 152, 155, 157, 159, 161, 180, 200, 202, 217, 218, 222, 224, 232, 246, 248, 249, 262, 265, 306, 311, 350, 351], "licens": [7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 21, 22, 25, 26, 27, 28, 31, 32, 33, 38, 40, 41, 43, 46, 47, 48, 49, 52, 53, 54, 55, 58, 62, 66, 67, 68, 71, 72, 74, 75, 76, 83, 90, 91, 96, 98, 100, 101, 102, 103, 104, 107, 110, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 131, 132, 149, 152, 153, 155, 156, 157, 158, 159, 161, 165, 176, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 216, 217, 218, 222, 223, 224, 226, 229, 232, 234, 235, 237, 239, 246, 248, 262, 265, 267, 274, 282, 284, 286, 292, 293, 294, 296, 297, 300, 303, 306, 307, 308, 309, 310, 311, 325, 326, 327, 328, 330, 341, 342, 345, 346, 350, 351, 352, 373, 393, 400, 1002, 1010], "hamming_loss": [7, 700, 792, 986, 1030, 1034, 1037], "mean_squared_error": [7, 125, 126, 196, 200, 202, 204, 206, 218, 361, 413, 748, 986, 1029, 1031, 1038, 1039, 1045], "seed": [7, 11, 27, 35, 40, 41, 45, 46, 53, 55, 58, 60, 61, 65, 66, 72, 79, 80, 81, 93, 97, 102, 103, 115, 121, 141, 144, 172, 190, 195, 198, 203, 206, 209, 213, 217, 224, 247, 249, 250, 251, 252, 264, 267, 275, 289, 290, 291, 296, 342, 343, 347, 351, 361, 366, 381, 388, 391, 393, 406, 410, 411, 440, 444, 445, 447, 449, 454, 456, 457, 458, 459, 468, 469, 470, 533, 541, 550, 551, 552, 553, 556, 557, 624, 643, 644, 649, 650, 657, 658, 659, 660, 674, 686, 688, 690, 692, 793, 794, 799, 829, 832, 847, 901, 921, 934, 935, 951, 975, 976, 981, 983, 1019, 1032, 1033, 1037, 1038, 1044], "fetch_20newsgroups_vector": [7, 215, 233, 374, 1028, 1038, 1040, 1045], "spars": [7, 12, 14, 18, 40, 41, 55, 56, 58, 78, 84, 95, 108, 117, 130, 167, 178, 195, 199, 216, 219, 233, 235, 262, 284, 317, 321, 349, 352, 353, 359, 365, 371, 373, 374, 375, 379, 381, 382, 383, 384, 391, 392, 393, 406, 407, 413, 414, 416, 417, 421, 428, 435, 437, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 454, 456, 457, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 484, 485, 486, 493, 494, 500, 505, 520, 521, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 579, 582, 583, 585, 586, 587, 588, 590, 591, 600, 601, 602, 603, 604, 605, 606, 626, 627, 628, 630, 635, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 709, 710, 711, 725, 726, 727, 730, 734, 735, 736, 750, 751, 756, 757, 759, 760, 762, 763, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 783, 788, 789, 792, 795, 798, 799, 809, 816, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 867, 868, 869, 870, 871, 873, 875, 876, 877, 878, 880, 881, 882, 883, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 914, 916, 917, 918, 919, 924, 932, 935, 936, 939, 940, 941, 949, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 972, 976, 979, 982, 983, 984, 986, 987, 989, 999, 1001, 1002, 1007, 1008, 1019, 1020, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "generate_data": [7, 34], "load_diabet": [7, 126, 135, 138, 149, 165, 185, 187, 188, 189, 196, 197, 240, 257, 321, 413, 555, 559, 565, 670, 698, 819, 820, 821, 907, 909, 994, 1016, 1019, 1034, 1039, 1042], "elif": [7, 8, 17, 180, 202, 237, 248, 289, 874], "subset": [7, 20, 21, 27, 28, 33, 71, 72, 81, 82, 119, 121, 122, 138, 146, 149, 171, 173, 189, 201, 215, 216, 217, 218, 232, 234, 238, 239, 259, 262, 264, 270, 271, 273, 279, 311, 312, 318, 325, 329, 350, 351, 352, 361, 374, 379, 387, 391, 393, 403, 404, 406, 407, 410, 413, 414, 416, 423, 434, 446, 461, 463, 464, 466, 485, 486, 489, 490, 494, 505, 546, 547, 548, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 566, 599, 607, 626, 636, 637, 638, 639, 648, 652, 655, 663, 664, 665, 668, 671, 672, 673, 674, 675, 676, 694, 700, 701, 710, 713, 715, 727, 730, 751, 753, 789, 792, 797, 822, 824, 826, 827, 828, 829, 833, 834, 835, 836, 837, 840, 845, 848, 855, 864, 893, 894, 898, 900, 903, 906, 908, 914, 975, 982, 986, 987, 997, 999, 1001, 1002, 1021, 1031, 1036, 1037, 1039, 1041], "regression_data": 7, "classification_data": 7, "calcul": [7, 34, 47, 60, 81, 110, 111, 112, 116, 133, 136, 165, 167, 173, 196, 204, 205, 217, 234, 236, 260, 261, 267, 271, 275, 282, 335, 341, 342, 361, 365, 386, 393, 403, 404, 406, 410, 411, 413, 417, 435, 438, 440, 441, 442, 443, 445, 447, 448, 450, 452, 453, 468, 469, 475, 478, 533, 544, 550, 561, 566, 594, 608, 617, 629, 630, 631, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 669, 670, 671, 672, 676, 678, 681, 685, 687, 689, 691, 704, 713, 725, 726, 731, 732, 734, 740, 746, 747, 750, 760, 765, 767, 768, 769, 770, 774, 777, 779, 780, 783, 784, 785, 788, 789, 791, 802, 804, 819, 823, 836, 838, 839, 876, 877, 878, 884, 888, 898, 899, 924, 937, 978, 980, 982, 983, 984, 986, 988, 989, 990, 994, 996, 999, 1001, 1016, 1019, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "given": [7, 10, 11, 13, 28, 31, 38, 50, 59, 61, 79, 86, 97, 101, 118, 128, 130, 132, 152, 159, 170, 171, 184, 200, 201, 204, 218, 222, 229, 233, 234, 236, 238, 239, 240, 257, 261, 262, 263, 264, 270, 287, 290, 291, 292, 308, 312, 319, 350, 351, 352, 358, 365, 367, 374, 378, 379, 381, 383, 385, 387, 388, 391, 393, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 423, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 453, 455, 456, 457, 458, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 481, 484, 493, 498, 500, 502, 520, 530, 531, 533, 535, 536, 537, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 586, 587, 588, 590, 591, 598, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 628, 629, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 684, 685, 687, 688, 694, 695, 696, 697, 698, 699, 701, 702, 703, 709, 711, 714, 715, 717, 720, 722, 723, 730, 732, 733, 736, 748, 751, 752, 754, 755, 760, 770, 774, 777, 778, 780, 783, 784, 785, 790, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 807, 809, 813, 817, 819, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 884, 885, 887, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 913, 922, 923, 924, 942, 943, 944, 945, 970, 974, 975, 978, 980, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 994, 996, 999, 1000, 1001, 1002, 1010, 1012, 1016, 1017, 1019, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "round": [7, 9, 26, 86, 118, 164, 165, 207, 218, 261, 267, 308, 310, 350, 393, 447, 453, 454, 561, 562, 590, 591, 594, 624, 689, 710, 797, 807, 863, 895, 910, 912, 976, 990, 1002, 1030, 1032, 1034, 1036, 1037, 1039, 1041, 1042, 1044], "changing_param": 7, "collect": [7, 10, 12, 13, 17, 20, 26, 116, 128, 135, 149, 157, 165, 173, 188, 193, 224, 232, 264, 268, 351, 352, 365, 374, 376, 383, 396, 405, 410, 411, 413, 414, 443, 461, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 566, 567, 578, 580, 581, 585, 586, 587, 588, 629, 725, 726, 734, 779, 780, 783, 797, 801, 802, 804, 817, 944, 957, 960, 975, 981, 982, 986, 992, 997, 1007, 1010, 1016, 1021, 1030, 1040], "chang": [7, 17, 26, 27, 96, 100, 101, 115, 118, 126, 153, 164, 169, 170, 173, 201, 202, 204, 205, 240, 241, 256, 261, 268, 271, 310, 316, 317, 318, 319, 320, 321, 322, 326, 337, 341, 352, 359, 361, 365, 366, 367, 374, 381, 382, 383, 384, 387, 391, 393, 397, 406, 410, 413, 414, 416, 418, 431, 434, 437, 440, 441, 444, 446, 449, 451, 456, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 490, 491, 493, 501, 505, 506, 509, 510, 511, 519, 523, 524, 528, 530, 531, 532, 533, 534, 535, 536, 537, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 585, 586, 587, 588, 590, 591, 594, 599, 607, 608, 610, 611, 612, 614, 616, 617, 619, 620, 622, 624, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 687, 689, 697, 701, 704, 709, 713, 714, 725, 726, 732, 733, 737, 751, 752, 753, 774, 780, 781, 783, 791, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 809, 813, 814, 816, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 848, 849, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 870, 871, 877, 878, 879, 886, 887, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 916, 918, 919, 930, 935, 945, 952, 953, 954, 956, 975, 976, 977, 985, 986, 987, 989, 996, 999, 1000, 1001, 1002, 1004, 1007, 1012, 1019, 1021, 1026, 1027], "affect": [7, 26, 81, 159, 169, 170, 204, 225, 239, 240, 264, 271, 311, 322, 361, 365, 366, 367, 375, 393, 395, 404, 406, 409, 410, 412, 414, 417, 419, 441, 447, 454, 470, 472, 476, 546, 547, 566, 696, 709, 784, 795, 798, 799, 800, 809, 813, 814, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 878, 879, 889, 903, 985, 989, 1001, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "complexity_comput": [7, 10], "benchmark_influ": 7, "conf": [7, 28, 383, 404, 410, 833, 988, 1042], "prediction_tim": [7, 8], "prediction_pow": 7, "param_valu": 7, "changing_param_valu": 7, "tuned_param": 7, "postfit_hook": 7, "append": [7, 8, 9, 12, 13, 17, 18, 26, 34, 38, 41, 45, 51, 62, 72, 104, 115, 116, 118, 123, 125, 139, 165, 173, 193, 204, 205, 207, 208, 215, 218, 234, 235, 261, 264, 270, 271, 274, 300, 301, 312, 328, 337, 340, 350, 351, 352, 355, 359, 385, 393, 407, 414, 655, 656, 898, 899, 905, 925, 996, 1016], "start_tim": [7, 10, 20, 119, 120, 132, 152, 189, 222], "elapsed_tim": [7, 40, 68, 119, 120, 132, 217], "float": [7, 10, 12, 13, 17, 20, 42, 46, 47, 48, 49, 54, 61, 62, 66, 67, 68, 72, 99, 103, 141, 160, 170, 186, 190, 224, 260, 261, 265, 269, 345, 352, 365, 373, 374, 379, 388, 393, 406, 407, 414, 415, 417, 418, 419, 423, 425, 429, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 484, 489, 490, 491, 493, 495, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 519, 521, 522, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 580, 581, 585, 588, 589, 590, 591, 592, 593, 594, 595, 599, 600, 607, 608, 610, 611, 612, 613, 614, 616, 617, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 755, 762, 765, 771, 772, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 801, 809, 812, 815, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 861, 864, 865, 871, 872, 874, 876, 878, 879, 880, 881, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 916, 918, 919, 922, 932, 933, 949, 961, 967, 972, 976, 986, 987, 989, 990, 996, 1001, 1002, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "pred_scor": 7, "prediction_performance_comput": 7, "4f": [7, 8, 20, 115, 124, 126, 215, 216, 218, 311], "prediction_performance_label": 7, "dictionari": [7, 8, 37, 69, 95, 108, 129, 167, 199, 236, 351, 352, 372, 373, 374, 381, 391, 393, 406, 414, 446, 461, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 504, 507, 523, 528, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 564, 565, 566, 567, 578, 579, 581, 584, 585, 586, 629, 630, 631, 661, 682, 683, 698, 710, 795, 798, 799, 806, 807, 809, 821, 857, 862, 871, 906, 907, 908, 909, 913, 923, 943, 946, 975, 982, 986, 1001, 1012, 1021, 1022, 1023, 1028, 1036, 1039, 1040, 1041, 1042, 1043], "necessari": [7, 14, 116, 184, 200, 205, 246, 261, 262, 268, 286, 341, 357, 365, 374, 377, 378, 379, 380, 381, 382, 383, 387, 391, 406, 408, 413, 449, 459, 485, 486, 488, 489, 490, 491, 492, 494, 531, 641, 642, 643, 649, 653, 654, 657, 658, 659, 660, 661, 662, 668, 670, 672, 673, 688, 692, 791, 861, 870, 881, 885, 891, 975, 978, 982, 985, 988, 996, 1002, 1021, 1028, 1036], "defin": [7, 12, 35, 54, 56, 58, 67, 71, 72, 74, 87, 96, 101, 110, 112, 113, 132, 149, 152, 159, 160, 161, 171, 172, 173, 179, 201, 208, 217, 218, 229, 233, 236, 240, 242, 246, 251, 261, 262, 264, 268, 270, 271, 272, 273, 279, 284, 303, 306, 317, 337, 341, 345, 350, 351, 365, 375, 378, 379, 380, 381, 385, 386, 388, 391, 392, 393, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 416, 422, 427, 429, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 456, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 486, 516, 517, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 624, 625, 626, 627, 629, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 693, 694, 696, 705, 707, 713, 718, 719, 720, 721, 724, 727, 734, 737, 741, 742, 744, 746, 747, 749, 750, 753, 756, 762, 777, 781, 786, 787, 788, 789, 793, 794, 795, 798, 799, 801, 809, 817, 821, 823, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 922, 924, 927, 933, 944, 946, 970, 975, 976, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1007, 1017, 1020, 1023, 1025, 1030, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "complexity_label": [7, 10], "type": [7, 17, 54, 55, 70, 71, 77, 82, 91, 106, 121, 124, 157, 167, 169, 170, 171, 176, 184, 200, 202, 236, 243, 245, 248, 251, 253, 256, 267, 268, 270, 271, 279, 341, 350, 352, 359, 361, 366, 368, 372, 373, 374, 376, 377, 379, 380, 382, 383, 384, 385, 391, 392, 396, 400, 402, 403, 407, 414, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 493, 505, 506, 512, 564, 569, 578, 579, 582, 583, 585, 586, 588, 597, 601, 614, 624, 626, 627, 635, 653, 655, 669, 671, 676, 684, 686, 689, 690, 696, 698, 704, 711, 713, 725, 726, 734, 737, 779, 780, 783, 784, 793, 794, 795, 801, 809, 817, 822, 824, 825, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 858, 859, 860, 863, 865, 871, 872, 878, 879, 896, 900, 901, 902, 903, 904, 914, 916, 918, 919, 922, 926, 927, 949, 950, 957, 960, 973, 976, 978, 983, 985, 986, 987, 988, 989, 990, 996, 998, 1002, 1009, 1010, 1014, 1019, 1020, 1021, 1028, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "_count_nonzero_coeffici": 7, "coef_": [7, 10, 14, 55, 86, 145, 146, 149, 169, 170, 179, 182, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 199, 203, 204, 205, 209, 215, 216, 237, 243, 274, 313, 320, 335, 342, 346, 350, 361, 374, 381, 393, 409, 415, 462, 479, 480, 481, 546, 590, 591, 594, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 898, 899, 900, 901, 902, 903, 904, 970, 980, 982, 1000, 1001, 1019, 1028, 1030, 1033, 1035, 1040, 1042, 1045], "toarrai": [7, 329, 359, 407, 414, 563, 579, 585, 587, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 871, 888, 889, 957, 960, 976, 989, 996, 1045], "count_nonzero": [7, 10, 365], "configur": [7, 10, 72, 73, 171, 241, 243, 313, 350, 364, 377, 379, 381, 385, 387, 391, 393, 396, 397, 402, 405, 407, 414, 415, 430, 439, 440, 442, 444, 446, 449, 459, 461, 465, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 563, 564, 565, 566, 567, 578, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 623, 624, 625, 626, 627, 629, 632, 635, 636, 637, 638, 639, 685, 686, 687, 688, 689, 691, 692, 784, 842, 847, 850, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 896, 952, 953, 954, 983, 986, 996, 1001, 1006, 1021, 1023, 1032, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045], "penalti": [7, 10, 31, 83, 167, 178, 179, 184, 189, 193, 200, 204, 215, 216, 219, 231, 269, 300, 319, 329, 342, 350, 365, 387, 391, 405, 408, 411, 415, 468, 469, 470, 471, 472, 473, 475, 499, 528, 534, 535, 536, 537, 539, 540, 544, 545, 594, 640, 643, 644, 645, 646, 649, 650, 651, 654, 655, 656, 657, 658, 659, 665, 666, 667, 669, 673, 675, 677, 678, 684, 809, 878, 898, 899, 901, 903, 904, 905, 975, 982, 985, 990, 996, 1000, 1001, 1019, 1021, 1030, 1033, 1035, 1037, 1038, 1040, 1041, 1043, 1044], "elasticnet": [7, 10, 181, 191, 269, 274, 365, 385, 391, 411, 644, 649, 654, 655, 656, 657, 658, 659, 660, 665, 673, 675, 678, 982, 1000, 1028, 1029, 1032, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042], "001": [7, 14, 33, 45, 63, 149, 152, 170, 184, 209, 229, 239, 246, 259, 261, 263, 328, 346, 348, 351, 353, 376, 385, 410, 533, 534, 536, 543, 624, 641, 642, 643, 644, 649, 650, 657, 658, 659, 660, 663, 664, 665, 673, 674, 675, 676, 678, 681, 686, 687, 690, 691, 793, 794, 855, 856, 893, 894, 900, 901, 902, 903, 904, 975, 1012, 1021], "modified_hub": [7, 673, 1000], "fit_intercept": [7, 179, 180, 186, 205, 214, 229, 269, 313, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 898, 899, 905, 982, 1000, 1032, 1036, 1037, 1038, 1040, 1041, 1042], "tol": [7, 10, 18, 74, 96, 123, 149, 164, 180, 191, 193, 207, 208, 214, 216, 229, 240, 247, 249, 303, 319, 345, 350, 381, 385, 413, 418, 440, 444, 446, 449, 456, 459, 468, 469, 475, 479, 480, 481, 528, 529, 530, 532, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 556, 557, 558, 559, 599, 624, 635, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 669, 671, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 686, 688, 690, 692, 793, 794, 809, 847, 855, 856, 893, 894, 898, 899, 900, 901, 902, 903, 904, 972, 982, 1000, 1001, 1017, 1021, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1045], "n_iter_no_chang": [7, 118, 123, 208, 319, 350, 384, 393, 413, 556, 557, 558, 559, 663, 664, 665, 673, 674, 675, 855, 856, 1000, 1036, 1039], "l1_ratio": [7, 10, 15, 184, 185, 191, 269, 274, 365, 391, 411, 535, 537, 544, 643, 644, 649, 655, 656, 657, 658, 659, 660, 665, 673, 675, 678, 982, 1000, 1029, 1031, 1033, 1040, 1042], "non_zero": [7, 12], "coeffici": [7, 10, 39, 50, 59, 61, 79, 80, 83, 96, 99, 146, 167, 168, 169, 174, 178, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 202, 203, 215, 218, 219, 243, 302, 313, 318, 319, 320, 341, 345, 350, 351, 352, 365, 375, 379, 381, 393, 395, 405, 408, 409, 411, 415, 416, 419, 429, 449, 462, 464, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 493, 521, 523, 524, 528, 532, 534, 536, 539, 540, 545, 549, 551, 553, 555, 557, 559, 562, 565, 567, 579, 586, 590, 594, 606, 608, 611, 624, 632, 633, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 698, 700, 713, 716, 725, 730, 734, 739, 746, 749, 771, 773, 781, 782, 788, 789, 792, 810, 821, 824, 831, 832, 841, 849, 856, 859, 871, 878, 898, 899, 900, 901, 902, 903, 904, 907, 909, 977, 980, 982, 1000, 1001, 1019, 1028, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1045], "misclassif": [7, 112, 341, 792, 1000, 1001, 1002, 1029], "ratio": [7, 54, 67, 74, 105, 167, 233, 235, 249, 254, 277, 365, 379, 406, 408, 410, 413, 447, 453, 490, 491, 512, 538, 546, 547, 548, 628, 655, 707, 709, 713, 721, 726, 732, 735, 778, 779, 780, 783, 791, 821, 824, 844, 891, 980, 992, 1002, 1017, 1043, 1045], "sparsifi": [7, 184, 365, 655, 656, 663, 664, 665, 673, 674, 675, 898, 970, 1030], "05": [7, 8, 13, 15, 16, 23, 25, 27, 29, 38, 45, 53, 61, 63, 65, 66, 68, 69, 76, 84, 86, 92, 101, 115, 118, 123, 125, 130, 136, 138, 142, 145, 149, 157, 160, 161, 170, 180, 181, 199, 202, 214, 219, 225, 226, 227, 229, 239, 246, 248, 249, 252, 253, 261, 262, 270, 272, 277, 289, 292, 297, 306, 308, 316, 320, 326, 328, 331, 342, 353, 376, 415, 447, 453, 528, 589, 592, 593, 595, 610, 611, 612, 616, 617, 619, 620, 622, 629, 630, 646, 687, 691, 752, 795, 847, 898, 899, 982, 990, 996], "n_support_vector": 7, "len": [7, 8, 10, 11, 17, 18, 20, 31, 32, 33, 38, 39, 42, 44, 45, 50, 51, 52, 56, 61, 62, 63, 64, 65, 66, 71, 73, 99, 102, 106, 107, 110, 115, 118, 121, 122, 123, 140, 141, 147, 148, 152, 160, 165, 171, 173, 199, 200, 218, 224, 229, 232, 233, 234, 236, 238, 239, 246, 248, 249, 256, 259, 261, 262, 269, 270, 272, 275, 282, 284, 291, 293, 294, 300, 307, 308, 309, 312, 322, 325, 326, 329, 337, 344, 347, 350, 351, 352, 359, 391, 393, 416, 434, 442, 447, 453, 461, 504, 512, 547, 566, 567, 579, 594, 629, 630, 778, 795, 809, 820, 824, 826, 828, 829, 879, 893, 894, 1019, 1020, 1021, 1037, 1040], "support_vectors_": [7, 10, 17, 338, 341, 342, 900, 901, 902, 903, 904, 1001], "squared_error": [7, 13, 106, 125, 126, 319, 413, 555, 556, 557, 559, 562, 668, 673, 675, 690, 907, 909, 1000, 1002, 1041, 1044, 1045], "learning_r": [7, 112, 124, 125, 126, 127, 226, 284, 301, 303, 317, 319, 413, 550, 551, 556, 557, 558, 559, 665, 673, 674, 675, 689, 854, 855, 856, 983, 993, 1000, 1029, 1037, 1041], "max_depth": [7, 32, 113, 114, 117, 121, 122, 124, 125, 126, 127, 130, 131, 133, 164, 222, 258, 273, 279, 318, 319, 355, 357, 358, 359, 392, 393, 413, 550, 551, 554, 555, 556, 557, 558, 559, 561, 562, 563, 798, 799, 822, 906, 907, 908, 909, 910, 911, 912, 975, 993, 1002, 1037, 1039], "n_estim": [7, 10, 27, 32, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 125, 126, 127, 130, 131, 134, 164, 173, 222, 238, 242, 248, 258, 273, 308, 316, 318, 365, 392, 393, 413, 415, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 629, 798, 799, 975, 992, 993, 1025, 1036, 1044], "n_tree": 7, "loop": [7, 8, 115, 125, 170, 256, 266, 350, 359, 365, 379, 380, 385, 406, 410, 415, 643, 644, 649, 650, 656, 657, 658, 659, 660, 975, 999, 1000, 1016, 1031, 1032, 1035, 1040, 1041, 1044], "previous": [7, 54, 58, 72, 112, 158, 170, 259, 268, 320, 374, 387, 391, 396, 406, 411, 414, 437, 440, 451, 521, 531, 538, 646, 655, 656, 663, 664, 665, 673, 674, 675, 898, 954, 982, 996, 1006, 1025, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "subsequ": [7, 33, 59, 76, 99, 112, 146, 188, 202, 263, 266, 284, 286, 337, 361, 379, 381, 385, 393, 406, 407, 413, 416, 434, 493, 505, 550, 551, 556, 558, 559, 663, 665, 673, 798, 799, 826, 827, 830, 833, 834, 835, 836, 837, 855, 873, 877, 976, 985, 987, 1037, 1038, 1042, 1044], "relax": [7, 406, 414, 450, 999, 1035], "sgd": [7, 8, 167, 178, 207, 214, 219, 229, 269, 301, 302, 319, 350, 361, 367, 501, 509, 628, 646, 663, 664, 665, 668, 673, 674, 675, 676, 855, 856, 975, 990, 1008, 1023, 1028, 1031, 1032, 1033, 1035, 1039, 1041], "svr": [7, 10, 167, 228, 244, 316, 332, 348, 365, 553, 564, 565, 590, 591, 640, 675, 795, 801, 899, 901, 903, 979, 1019, 1028, 1030, 1032, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043], "optim": [7, 14, 28, 54, 55, 58, 61, 73, 79, 80, 96, 124, 126, 148, 149, 152, 153, 156, 157, 158, 159, 160, 184, 188, 189, 193, 208, 216, 235, 239, 259, 266, 269, 274, 279, 282, 288, 303, 306, 311, 320, 328, 339, 345, 350, 351, 352, 361, 365, 368, 373, 376, 379, 381, 382, 391, 393, 396, 401, 403, 406, 408, 410, 411, 413, 415, 416, 417, 441, 445, 446, 447, 449, 454, 458, 459, 469, 470, 476, 528, 531, 532, 534, 536, 540, 554, 555, 556, 557, 571, 607, 608, 616, 617, 632, 635, 637, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 669, 670, 671, 673, 674, 675, 677, 678, 679, 680, 681, 684, 687, 689, 691, 692, 698, 719, 726, 795, 809, 840, 841, 842, 844, 846, 847, 848, 849, 850, 855, 856, 874, 886, 890, 891, 898, 899, 900, 901, 902, 903, 904, 978, 979, 980, 981, 982, 983, 986, 987, 988, 989, 990, 991, 1000, 1001, 1002, 1006, 1010, 1016, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043, 1044], "few": [7, 15, 20, 40, 47, 53, 100, 122, 155, 158, 159, 189, 198, 200, 202, 218, 235, 236, 246, 263, 264, 268, 302, 306, 310, 316, 317, 318, 319, 320, 321, 322, 325, 345, 352, 365, 374, 375, 376, 379, 381, 392, 394, 397, 400, 403, 404, 406, 410, 411, 413, 415, 416, 434, 446, 558, 559, 585, 588, 652, 689, 692, 891, 935, 954, 982, 983, 985, 986, 989, 990, 999, 1001, 1002, 1010, 1012, 1019, 1020, 1021, 1034, 1044], "drawn": [7, 53, 81, 115, 148, 152, 161, 169, 240, 268, 288, 350, 375, 406, 412, 413, 416, 418, 466, 467, 468, 469, 470, 471, 472, 473, 512, 520, 530, 552, 553, 554, 555, 560, 561, 562, 563, 608, 624, 629, 638, 834, 890, 891, 908, 909, 982, 996, 998, 1031], "boost": [7, 13, 111, 112, 113, 117, 129, 132, 135, 136, 167, 312, 385, 393, 405, 415, 445, 463, 464, 487, 493, 498, 501, 512, 517, 550, 551, 556, 557, 558, 559, 561, 562, 629, 630, 631, 632, 737, 738, 744, 746, 795, 798, 799, 800, 821, 824, 859, 871, 872, 982, 986, 1006, 1008, 1023, 1028, 1029, 1031, 1033, 1034, 1035, 1037, 1041], "detriment": [7, 148, 366, 415, 982], "plot_influ": 7, "mse_valu": 7, "ax1": [7, 10, 58, 61, 66, 68, 74, 76, 81, 93, 122, 165, 173, 200, 230, 232, 240, 246, 264, 272, 307, 311, 312, 328, 350, 351, 1017], "add_subplot": [7, 17, 26, 28, 43, 46, 65, 68, 91, 102, 103, 171, 197, 215, 223, 225, 325, 326, 386], "line1": [7, 12, 224], "tab": [7, 9, 35, 54, 81, 112, 129, 132, 152, 157, 159, 188, 189, 317, 407, 1035], "blue": [7, 9, 13, 21, 22, 27, 35, 81, 93, 96, 112, 115, 119, 127, 129, 132, 134, 147, 157, 159, 176, 180, 188, 189, 196, 198, 224, 233, 255, 256, 261, 301, 311, 317, 327, 376, 406, 411, 1045], "set_xlabel": [7, 10, 46, 54, 61, 73, 74, 76, 91, 93, 101, 161, 164, 165, 169, 171, 172, 173, 176, 189, 195, 197, 198, 200, 202, 215, 216, 234, 261, 263, 267, 272, 273, 276, 279, 289, 306, 307, 311, 328, 351, 352, 355], "y1_label": 7, "set_ylabel": [7, 8, 10, 31, 35, 46, 54, 61, 66, 73, 74, 76, 81, 91, 93, 101, 107, 112, 119, 161, 171, 176, 189, 191, 195, 197, 198, 200, 202, 204, 215, 234, 246, 261, 263, 267, 272, 273, 282, 289, 306, 307, 311, 316, 328, 345, 351, 355, 1017], "spine": [7, 15, 35, 211, 306], "set_color": [7, 211], "get_color": 7, "yaxi": [7, 10, 46, 61, 91, 102, 103, 118, 197, 221, 223, 226, 246, 284, 289, 350], "tick_param": [7, 15, 135, 246, 261, 310, 328], "ax2": [7, 58, 61, 66, 68, 81, 93, 122, 165, 173, 200, 230, 240, 246, 264, 272, 294, 307, 311, 312, 328, 350], "frameon": [7, 206], "line2": [7, 12, 224, 346], "orang": [7, 9, 54, 81, 93, 97, 98, 104, 112, 127, 129, 159, 165, 188, 189, 210, 237, 249, 295, 317, 358, 987, 1045], "tick_right": 7, "set_label_posit": 7, "y2_label": 7, "__name__": [7, 17, 26, 62, 164, 200, 202, 236, 239, 243, 256, 263, 308, 329, 350, 351, 352, 386, 391, 871], "prediction_perform": 7, "4948": 7, "2675": 7, "057908": 7, "1847": 7, "3264": 7, "043387": 7, "997": [7, 41, 149], "3383": 7, "035758": 7, "802": [7, 149, 376], "3582": 7, "033067": 7, "0517578125e": 7, "5558": 7, "7313": 7, "000170": 7, "5289": 7, "8022": [7, 393, 470, 1037], "000252": 7, "5193": 7, "8353": 7, "000408": 7, "124": [7, 413, 1030], "5131": [7, 1033], "3279": 7, "000630": 7, "178": [7, 62, 69, 376, 385, 507, 842], "5149": 7, "0779": 7, "000862": 7, "4066": 7, "4812": 7, "000163": 7, "3551": 7, "1723": 7, "000187": 7, "3445": 7, "2171": 7, "000222": 7, "3433": 7, "0358": 7, "000255": 7, "3456": 7, "0602": 7, "000290": 7, "deduc": 7, "guarante": [7, 8, 81, 82, 170, 208, 233, 282, 284, 306, 351, 361, 367, 373, 387, 388, 406, 410, 411, 414, 443, 533, 642, 655, 656, 665, 669, 671, 673, 675, 684, 691, 812, 815, 838, 839, 876, 878, 891, 892, 905, 978, 982, 983, 985, 989, 994, 998, 1002, 1020, 1038], "aspect": [7, 59, 87, 96, 156, 171, 221, 229, 270, 293, 343, 365, 366, 367, 379, 393, 394, 406, 655, 656, 1002, 1010, 1045], "642": [7, 16, 123, 136, 204, 219], "plot_model_complexity_influ": [7, 16], "doesn": [8, 200, 236, 247, 282, 302, 337, 387, 393, 396, 397, 406, 414, 415, 419, 431, 472, 629, 630, 663, 665, 673, 713, 822, 825, 830, 840, 841, 855, 867, 868, 985, 986, 1002, 1032], "t": [8, 11, 12, 17, 18, 27, 35, 40, 41, 43, 44, 45, 53, 55, 59, 71, 73, 79, 80, 81, 83, 86, 93, 97, 98, 102, 104, 106, 107, 112, 115, 116, 123, 124, 125, 126, 127, 131, 132, 149, 153, 155, 156, 157, 160, 161, 167, 170, 171, 172, 173, 179, 181, 184, 187, 194, 197, 198, 199, 200, 201, 218, 220, 222, 223, 224, 225, 227, 236, 237, 247, 250, 252, 260, 261, 282, 284, 296, 297, 302, 316, 319, 320, 322, 325, 326, 328, 333, 334, 337, 338, 342, 350, 351, 352, 358, 359, 361, 365, 366, 373, 374, 376, 379, 381, 383, 385, 387, 391, 392, 393, 396, 397, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 419, 423, 429, 431, 434, 444, 445, 447, 453, 460, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 492, 493, 510, 511, 512, 516, 517, 522, 527, 529, 531, 538, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 587, 588, 591, 604, 605, 607, 608, 624, 625, 627, 628, 629, 630, 632, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 693, 701, 707, 713, 714, 722, 732, 733, 751, 752, 753, 763, 784, 785, 790, 791, 795, 798, 799, 809, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 844, 845, 848, 849, 854, 855, 856, 864, 867, 868, 869, 871, 872, 878, 879, 891, 893, 894, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 935, 950, 975, 978, 980, 982, 985, 986, 987, 988, 989, 990, 991, 992, 993, 996, 1000, 1001, 1002, 1009, 1012, 1019, 1020, 1021, 1022, 1023, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "memori": [8, 55, 72, 73, 100, 123, 170, 171, 286, 312, 316, 318, 320, 321, 350, 351, 352, 366, 367, 373, 379, 382, 388, 393, 407, 410, 411, 414, 417, 418, 438, 439, 440, 441, 442, 443, 444, 446, 447, 451, 454, 456, 465, 470, 476, 493, 500, 505, 530, 531, 532, 535, 552, 553, 554, 555, 560, 561, 562, 563, 578, 579, 585, 586, 588, 643, 644, 645, 649, 650, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 673, 674, 675, 676, 677, 678, 681, 774, 775, 776, 777, 795, 801, 809, 817, 819, 820, 821, 822, 825, 826, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 858, 859, 876, 878, 888, 889, 891, 896, 898, 899, 906, 907, 908, 909, 919, 971, 982, 988, 989, 996, 998, 999, 1001, 1002, 1007, 1010, 1012, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "onlin": [8, 15, 37, 69, 96, 99, 167, 178, 214, 219, 367, 374, 378, 384, 393, 406, 411, 414, 416, 439, 443, 444, 446, 492, 499, 528, 533, 534, 535, 536, 542, 543, 579, 581, 655, 663, 664, 665, 673, 675, 824, 833, 834, 835, 836, 837, 840, 841, 846, 848, 849, 867, 868, 878, 898, 899, 978, 982, 990, 992, 1005, 1008, 1010, 1019, 1023, 1028, 1032, 1033, 1035, 1043], "partial_fit": [8, 51, 96, 236, 320, 367, 381, 393, 406, 411, 439, 446, 531, 533, 534, 535, 586, 594, 655, 656, 663, 664, 665, 673, 674, 675, 826, 827, 830, 831, 833, 834, 835, 836, 837, 854, 855, 856, 867, 868, 878, 898, 982, 988, 990, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045], "fed": [8, 132, 361, 374, 414, 975, 991, 996, 1039], "batch": [8, 11, 65, 96, 100, 297, 320, 367, 388, 393, 414, 437, 439, 444, 446, 448, 450, 528, 530, 531, 533, 534, 535, 536, 537, 539, 540, 542, 543, 661, 682, 683, 800, 813, 814, 833, 834, 835, 836, 837, 855, 856, 867, 868, 878, 891, 938, 952, 990, 991, 1000, 1028, 1032, 1033, 1036, 1037, 1038, 1039, 1041, 1043, 1044], "remain": [8, 26, 28, 72, 112, 119, 124, 126, 148, 170, 200, 204, 216, 246, 259, 263, 267, 270, 403, 406, 407, 408, 410, 414, 443, 461, 464, 512, 513, 518, 525, 531, 567, 607, 608, 759, 765, 797, 798, 799, 800, 803, 805, 833, 834, 835, 837, 939, 975, 976, 978, 985, 986, 990, 996, 1002, 1007, 1030, 1036, 1042], "hashingvector": [8, 352, 367, 414, 486, 585, 587, 1029, 1035, 1036, 1037, 1038, 1041], "where": [8, 11, 12, 14, 17, 18, 20, 21, 25, 26, 27, 33, 54, 56, 58, 81, 87, 93, 96, 99, 102, 106, 107, 112, 114, 116, 118, 122, 123, 125, 129, 146, 149, 152, 158, 161, 165, 170, 179, 184, 192, 201, 204, 209, 210, 211, 213, 217, 218, 221, 223, 224, 229, 230, 233, 236, 237, 239, 241, 252, 257, 258, 261, 263, 267, 268, 270, 272, 273, 279, 282, 303, 306, 308, 309, 310, 311, 312, 313, 316, 318, 319, 326, 327, 335, 341, 345, 346, 347, 350, 355, 356, 361, 365, 366, 367, 373, 375, 376, 378, 379, 381, 383, 385, 386, 387, 391, 392, 393, 394, 396, 400, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 434, 441, 444, 445, 449, 458, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 484, 493, 528, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 579, 580, 581, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 606, 607, 608, 610, 612, 616, 619, 620, 622, 624, 625, 626, 627, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 685, 688, 689, 690, 693, 704, 709, 713, 721, 725, 726, 727, 735, 751, 759, 764, 765, 766, 769, 777, 778, 779, 780, 783, 788, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 821, 822, 823, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 837, 841, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 861, 868, 871, 873, 874, 877, 878, 884, 886, 892, 893, 894, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 926, 927, 928, 929, 935, 943, 946, 971, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1007, 1009, 1012, 1013, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "word": [8, 15, 20, 71, 152, 233, 237, 337, 351, 352, 365, 374, 375, 379, 381, 384, 393, 403, 406, 408, 409, 410, 411, 450, 508, 520, 531, 533, 538, 585, 586, 588, 693, 827, 837, 895, 980, 984, 988, 991, 996, 999, 1000, 1010, 1019, 1020, 1028, 1036], "federicov": 8, "itertool": [8, 43, 45, 63, 133, 171, 185, 247, 252, 261, 268, 270, 413], "sy": [8, 12, 17, 20, 208, 233, 284, 329, 352, 374, 391, 614], "tarfil": 8, "hashlib": 8, "sha256": [8, 1043], "parser": [8, 13, 316, 320, 493, 1043, 1044], "htmlparser": 8, "pathlib": [8, 1043, 1044], "path": [8, 17, 18, 167, 178, 185, 189, 219, 355, 373, 377, 379, 383, 387, 388, 393, 438, 442, 447, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 505, 506, 545, 554, 555, 560, 561, 562, 563, 590, 591, 594, 643, 644, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 678, 679, 680, 681, 682, 683, 685, 858, 859, 905, 906, 907, 908, 909, 940, 975, 982, 983, 992, 1007, 1028, 1029, 1032, 1034, 1035, 1037, 1038, 1040, 1041, 1043, 1044], "urllib": [8, 18], "request": [8, 18, 47, 200, 218, 236, 319, 366, 373, 377, 378, 382, 393, 394, 397, 400, 411, 414, 415, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 578, 579, 585, 587, 588, 591, 607, 608, 629, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 696, 796, 797, 802, 804, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 942, 943, 945, 986, 989, 1021, 1034, 1035, 1036, 1045], "urlretriev": 8, "rcparam": [8, 229, 234, 313], "get_data_hom": 8, "feature_extract": [8, 15, 20, 47, 48, 51, 52, 55, 67, 71, 99, 167, 262, 329, 349, 350, 351, 352, 367, 368, 374, 406, 407, 414, 461, 541, 871, 984, 1020, 1021, 1028, 1029, 1030, 1031, 1034, 1035, 1045], "passiveaggressiveclassifi": [8, 207, 365, 367, 982, 987, 1029, 1032, 1033, 1035, 1036, 1039, 1041], "perceptron": [8, 167, 207, 210, 216, 240, 299, 304, 367, 391, 414, 511, 512, 519, 663, 673, 824, 854, 855, 856, 859, 878, 984, 987, 991, 1000, 1008, 1023, 1032, 1034, 1035, 1036, 1040], "naive_bay": [8, 25, 26, 28, 32, 130, 134, 262, 263, 350, 361, 367, 368, 374, 413, 434, 566, 859, 980, 987, 988, 1021, 1029, 1030, 1032, 1033, 1034, 1035], "multinomialnb": [8, 367, 374, 414, 833, 834, 835, 836, 988, 1021, 1030, 1032, 1035, 1036, 1040, 1041, 1043], "_not_in_sphinx": [8, 10], "hack": [8, 10], "whether": [8, 10, 13, 17, 72, 110, 128, 155, 158, 160, 170, 171, 200, 204, 218, 222, 230, 236, 259, 306, 359, 361, 366, 374, 377, 378, 379, 381, 383, 384, 385, 393, 397, 406, 407, 408, 410, 411, 413, 415, 418, 437, 439, 448, 450, 451, 456, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 488, 489, 493, 494, 500, 505, 506, 511, 519, 524, 528, 529, 534, 535, 536, 537, 539, 542, 543, 545, 549, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 578, 585, 586, 587, 588, 594, 599, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 628, 629, 630, 632, 633, 634, 635, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 687, 691, 692, 694, 695, 697, 699, 701, 709, 738, 757, 763, 770, 774, 778, 785, 795, 798, 799, 800, 801, 809, 813, 814, 817, 818, 821, 822, 824, 827, 829, 832, 833, 834, 835, 837, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 855, 856, 862, 879, 885, 898, 899, 900, 901, 902, 903, 904, 910, 912, 916, 918, 919, 920, 922, 934, 935, 942, 943, 959, 970, 974, 975, 976, 981, 982, 986, 991, 992, 998, 1000, 1001, 1010, 1035, 1036, 1037, 1045], "builder": [8, 10, 345, 383], "__file__": [8, 10, 1041], "global": [8, 10, 43, 58, 96, 200, 221, 222, 243, 270, 302, 317, 361, 365, 366, 385, 391, 393, 405, 406, 416, 439, 449, 459, 465, 587, 623, 629, 685, 688, 689, 692, 704, 725, 726, 734, 779, 780, 783, 784, 813, 879, 894, 896, 954, 956, 975, 983, 986, 992, 996, 1002, 1010, 1036, 1043], "21578": [8, 1041], "uci": [8, 149, 311, 373, 376, 497, 499, 501, 507], "ml": [8, 149, 279, 373, 376, 384, 497, 499, 507, 982, 984, 1006, 1007, 1010], "uncompress": [8, 505, 506, 1021], "reuterspars": 8, "util": [8, 10, 11, 49, 56, 57, 62, 90, 110, 112, 132, 200, 202, 208, 216, 223, 232, 236, 238, 249, 267, 269, 284, 308, 316, 328, 337, 341, 350, 366, 368, 373, 374, 377, 379, 380, 381, 382, 391, 392, 393, 402, 406, 407, 410, 411, 414, 434, 440, 441, 444, 446, 450, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 578, 579, 585, 587, 588, 591, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 795, 796, 797, 802, 804, 813, 818, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 981, 984, 986, 987, 996, 997, 1006, 1010, 1013, 1023, 1028, 1029, 1031, 1032, 1034, 1035], "pars": [8, 18, 365, 373, 374, 380, 505], "sgml": [8, 365], "file": [8, 12, 16, 17, 23, 29, 33, 36, 49, 69, 77, 84, 88, 94, 108, 136, 142, 150, 162, 166, 174, 177, 219, 227, 244, 253, 277, 280, 283, 298, 304, 314, 323, 331, 348, 350, 351, 353, 360, 365, 367, 373, 374, 376, 377, 379, 383, 384, 385, 387, 391, 400, 407, 411, 484, 490, 491, 493, 500, 505, 506, 531, 576, 577, 585, 586, 588, 910, 989, 1002, 1009, 1013, 1028, 1029, 1031, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044], "yield": [8, 9, 26, 46, 56, 79, 80, 81, 82, 123, 125, 184, 195, 200, 215, 218, 266, 282, 300, 306, 334, 339, 350, 351, 361, 365, 367, 373, 384, 393, 403, 406, 408, 410, 411, 413, 414, 415, 434, 446, 465, 469, 505, 506, 534, 535, 536, 538, 543, 550, 551, 556, 557, 558, 559, 564, 565, 591, 599, 644, 648, 649, 650, 652, 658, 660, 662, 670, 672, 683, 722, 777, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 821, 822, 823, 825, 829, 832, 890, 891, 929, 936, 938, 939, 944, 978, 980, 982, 983, 986, 1001, 1002, 1016, 1033, 1034, 1036, 1039, 1041], "__init__": [8, 17, 57, 110, 160, 236, 284, 337, 379, 381, 383, 384, 385, 386, 393, 414, 420, 947, 1029, 1034, 1036, 1041, 1042, 1043, 1044], "self": [8, 17, 20, 26, 28, 57, 110, 160, 167, 236, 284, 324, 330, 331, 337, 350, 373, 379, 380, 381, 384, 385, 386, 387, 406, 414, 416, 420, 423, 429, 430, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 497, 505, 506, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 700, 793, 794, 795, 796, 797, 798, 799, 802, 804, 809, 813, 814, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 943, 944, 946, 947, 952, 960, 989, 1007, 1008, 1010, 1023, 1030, 1035, 1042], "latin": [8, 414], "_reset": 8, "handle_starttag": 8, "tag": [8, 50, 72, 229, 327, 373, 378, 382, 383, 387, 391, 393, 402, 414, 493, 826, 1007, 1009, 1033, 1037, 1038, 1039, 1042, 1043, 1044], "attr": [8, 57], "start_": 8, "handle_endtag": 8, "end_": 8, "in_titl": 8, "in_bodi": 8, "in_top": 8, "in_topic_d": 8, "bodi": [8, 71, 149, 240, 321, 376], "topic_d": 8, "fd": 8, "chunk": [8, 51, 365, 366, 406, 411, 417, 441, 446, 465, 535, 774, 777, 826, 827, 833, 834, 835, 836, 837, 896, 988, 1035, 1036, 1037, 1038, 1039], "feed": [8, 87, 201, 352, 374, 384, 391, 406, 414, 738, 871, 987], "decod": [8, 297, 374, 393, 500, 566, 585, 586, 588, 1028, 1029], "close": [8, 12, 18, 25, 26, 28, 39, 40, 47, 55, 61, 67, 79, 80, 83, 101, 115, 122, 125, 128, 132, 152, 153, 156, 157, 158, 159, 160, 170, 172, 184, 204, 206, 222, 229, 235, 239, 246, 252, 261, 262, 290, 291, 306, 316, 337, 341, 342, 351, 361, 374, 379, 381, 387, 391, 393, 394, 404, 405, 406, 409, 410, 413, 416, 447, 452, 469, 505, 506, 529, 560, 625, 640, 644, 658, 669, 671, 684, 702, 742, 793, 813, 814, 833, 834, 835, 837, 844, 919, 975, 979, 980, 982, 983, 985, 986, 987, 989, 992, 993, 996, 1001, 1006, 1010, 1019, 1031, 1035, 1036, 1037], "handle_data": 8, "start_reut": 8, "attribut": [8, 26, 33, 50, 72, 105, 110, 112, 119, 120, 123, 145, 149, 200, 208, 236, 251, 259, 260, 265, 273, 293, 297, 319, 341, 352, 359, 367, 368, 372, 373, 374, 376, 379, 382, 386, 391, 402, 403, 404, 406, 407, 408, 409, 411, 413, 414, 415, 416, 421, 422, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 504, 507, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 732, 791, 793, 794, 795, 798, 799, 801, 809, 817, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 913, 947, 970, 978, 980, 982, 987, 989, 990, 992, 996, 999, 1000, 1001, 1002, 1010, 1012, 1018, 1021, 1025, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "end_reut": 8, "sub": [8, 38, 49, 54, 56, 58, 61, 71, 106, 236, 238, 246, 318, 325, 326, 334, 337, 346, 374, 379, 381, 385, 393, 407, 413, 414, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 533, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 591, 594, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 796, 797, 802, 804, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 944, 982, 986, 1000, 1021, 1038, 1042, 1044], "start_titl": 8, "end_titl": 8, "start_bodi": 8, "end_bodi": 8, "start_top": 8, "end_top": 8, "start_d": 8, "end_d": 8, "stream_reuters_docu": 8, "data_path": 8, "iter": [8, 15, 18, 32, 47, 73, 83, 96, 99, 112, 115, 118, 121, 123, 124, 126, 127, 149, 161, 164, 167, 179, 180, 208, 215, 248, 249, 254, 256, 272, 277, 300, 302, 303, 308, 318, 326, 328, 329, 337, 379, 381, 385, 387, 388, 392, 393, 401, 406, 409, 411, 413, 415, 418, 434, 437, 438, 440, 442, 444, 445, 446, 449, 451, 456, 458, 459, 460, 468, 469, 475, 479, 480, 481, 512, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 556, 557, 558, 559, 561, 564, 565, 578, 579, 585, 586, 588, 590, 591, 599, 607, 624, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 829, 832, 847, 854, 855, 856, 857, 858, 862, 869, 871, 873, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 913, 934, 935, 941, 942, 943, 944, 952, 976, 982, 983, 985, 986, 989, 990, 991, 999, 1000, 1001, 1002, 1007, 1010, 1016, 1020, 1021, 1023, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "archiv": [8, 279, 373, 374, 376, 377, 400, 406, 439, 497, 499, 507, 754, 755, 984, 1001, 1021], "exist": [8, 9, 13, 18, 20, 54, 218, 261, 302, 306, 341, 373, 378, 381, 382, 385, 391, 393, 394, 396, 400, 406, 410, 411, 413, 414, 421, 431, 434, 440, 441, 444, 446, 448, 450, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 496, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 582, 585, 586, 587, 588, 591, 594, 600, 607, 608, 629, 630, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 695, 697, 699, 758, 761, 765, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 871, 872, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 970, 978, 983, 985, 986, 990, 992, 993, 996, 1010, 1020, 1028, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "str": [8, 10, 17, 59, 61, 105, 107, 121, 218, 239, 261, 273, 284, 294, 335, 350, 373, 374, 388, 414, 417, 418, 422, 427, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 454, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 614, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 689, 693, 694, 695, 696, 697, 699, 704, 706, 708, 710, 723, 725, 726, 728, 729, 734, 738, 767, 770, 774, 775, 776, 777, 778, 779, 780, 783, 785, 788, 789, 795, 796, 797, 798, 799, 801, 802, 804, 806, 807, 809, 813, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 917, 918, 919, 922, 925, 927, 931, 942, 943, 944, 946, 949, 970, 971, 974, 1043], "kei": [8, 10, 13, 18, 20, 43, 118, 122, 132, 164, 169, 218, 236, 239, 242, 262, 264, 265, 317, 318, 319, 320, 321, 322, 367, 372, 381, 384, 385, 386, 391, 393, 394, 396, 397, 406, 407, 410, 416, 461, 469, 558, 559, 564, 565, 566, 567, 585, 588, 591, 614, 623, 629, 630, 631, 656, 795, 798, 799, 807, 809, 821, 857, 858, 913, 923, 951, 1007, 1021, 1025, 1034, 1040, 1041, 1043, 1044], "download_url": 8, "ic": [8, 279, 318, 373, 376, 395, 497, 499, 507, 629, 630, 1023, 1040, 1041], "databas": [8, 149, 311, 365, 367, 374, 376, 406, 411, 413, 414, 417, 439, 441, 507, 552, 553, 891, 998], "reuters21578": 8, "mld": 8, "tar": [8, 383], "gz": [8, 383, 396, 505, 506], "archive_sha256": 8, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 8, "archive_filenam": 8, "mkdir": [8, 385, 387], "parent": [8, 169, 236, 379, 383, 393, 406, 439, 460, 943, 944, 1028], "exist_ok": 8, "blocknum": 8, "total_sz_mb": 8, "mb": [8, 16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 136, 142, 150, 162, 166, 174, 177, 219, 227, 233, 244, 253, 277, 280, 283, 298, 304, 314, 323, 331, 348, 350, 352, 353, 360, 374, 385, 900, 901, 902, 903, 904, 1001, 1024], "1e6": [8, 10, 193, 233, 350, 352, 365, 533, 892, 986, 998], "current_sz_mb": 8, "stdout": [8, 96, 208, 827, 847, 855, 856], "write": [8, 18, 165, 236, 350, 365, 366, 373, 377, 378, 382, 383, 384, 385, 387, 388, 391, 393, 402, 407, 411, 414, 997, 1007, 1021, 1029, 1041], "rdownload": 8, "archive_path": 8, "filenam": [8, 18, 329, 374, 385, 400, 485, 497, 500, 501, 504, 585, 586, 588, 1021, 1028, 1033, 1036, 1037], "reporthook": 8, "tamper": 8, "assert": [8, 18, 49, 97, 233, 261, 270, 366, 382, 1007], "read_byt": 8, "hexdigest": 8, "untar": 8, "open": [8, 12, 18, 223, 373, 374, 377, 378, 379, 383, 385, 391, 392, 394, 400, 407, 414, 484, 493, 505, 506, 976, 1006, 1010, 1015, 1031, 1035, 1036, 1038, 1044], "extractal": 8, "glob": 8, "sgm": 8, "rb": 8, "decode_error": [8, 414, 500, 585, 586, 588, 1030], "alternate_sign": [8, 414, 579, 586, 1035], "data_stream": 8, "binari": [8, 14, 26, 28, 116, 118, 128, 130, 146, 160, 170, 176, 191, 193, 200, 208, 222, 230, 239, 242, 258, 259, 264, 270, 276, 279, 288, 337, 341, 343, 359, 361, 373, 374, 375, 381, 383, 384, 393, 396, 400, 403, 404, 405, 406, 413, 414, 416, 434, 435, 436, 449, 484, 497, 505, 506, 517, 520, 546, 547, 550, 552, 556, 558, 563, 564, 565, 578, 585, 586, 588, 590, 591, 599, 607, 624, 625, 626, 627, 628, 629, 630, 655, 656, 663, 665, 670, 671, 672, 673, 697, 700, 704, 705, 706, 709, 710, 712, 715, 717, 723, 725, 726, 730, 731, 734, 735, 736, 737, 738, 739, 778, 779, 780, 783, 784, 785, 790, 792, 795, 796, 798, 799, 800, 801, 809, 813, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 833, 844, 854, 865, 869, 871, 879, 882, 898, 900, 903, 949, 976, 987, 988, 989, 990, 991, 993, 994, 996, 997, 998, 1000, 1001, 1002, 1009, 1012, 1025, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1042, 1043, 1045], "acq": 8, "chosen": [8, 21, 47, 74, 132, 153, 170, 171, 189, 201, 217, 237, 255, 256, 258, 264, 351, 361, 365, 391, 406, 408, 409, 413, 416, 437, 443, 446, 448, 450, 451, 457, 493, 520, 532, 554, 555, 556, 557, 558, 559, 561, 562, 644, 650, 653, 655, 656, 658, 660, 668, 673, 674, 675, 676, 677, 687, 691, 790, 793, 794, 795, 798, 799, 809, 828, 847, 898, 899, 906, 907, 908, 909, 935, 975, 978, 980, 982, 983, 985, 987, 992, 993, 1000, 1016, 1017, 1019, 1020, 1036, 1044, 1045], "evenli": [8, 40, 53, 125, 173, 204, 256, 414, 939, 1021], "care": [8, 56, 126, 279, 341, 365, 367, 383, 385, 391, 393, 394, 406, 408, 414, 434, 457, 466, 637, 655, 656, 663, 664, 665, 673, 674, 675, 692, 898, 983, 1001, 1010, 1044], "all_class": 8, "positive_class": [8, 709], "partial_fit_classifi": 8, "nb": [8, 104, 130, 361, 835, 988], "multinomi": [8, 31, 167, 178, 215, 219, 237, 256, 270, 374, 375, 379, 411, 413, 493, 509, 520, 548, 550, 556, 558, 566, 628, 655, 656, 737, 824, 832, 833, 834, 835, 836, 837, 878, 921, 986, 987, 1002, 1008, 1021, 1023, 1028, 1032, 1034, 1035, 1036, 1041, 1042], "passiv": [8, 207, 663, 664, 1008, 1023, 1029], "aggress": [8, 207, 663, 664, 798, 799, 1008, 1023, 1029], "get_minibatch": 8, "doc_it": 8, "pos_class": 8, "minibatch": [8, 45, 406, 411, 446, 531, 673, 854, 855, 856, 1006, 1028], "tupl": [8, 13, 49, 50, 56, 106, 171, 218, 372, 373, 374, 381, 393, 410, 418, 431, 448, 450, 461, 464, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 501, 502, 505, 507, 508, 509, 510, 511, 519, 530, 543, 558, 559, 564, 565, 566, 567, 579, 580, 581, 584, 585, 586, 588, 624, 629, 630, 631, 709, 716, 738, 777, 779, 793, 795, 809, 821, 838, 839, 857, 858, 868, 869, 873, 876, 884, 888, 900, 901, 902, 903, 904, 913, 919, 920, 922, 926, 927, 928, 929, 944, 953, 970, 993, 1034, 1035, 1039, 1040, 1041], "x_text": 8, "befor": [8, 12, 26, 43, 71, 73, 76, 87, 132, 145, 159, 161, 163, 166, 167, 170, 171, 173, 181, 184, 188, 189, 193, 236, 261, 268, 286, 287, 307, 310, 311, 313, 319, 340, 361, 365, 366, 374, 377, 379, 381, 382, 384, 385, 387, 388, 391, 393, 394, 395, 400, 402, 404, 406, 407, 408, 410, 411, 415, 418, 419, 440, 444, 445, 446, 456, 458, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 487, 498, 531, 534, 535, 536, 537, 538, 541, 543, 544, 558, 559, 562, 564, 566, 567, 574, 585, 586, 588, 608, 624, 625, 627, 642, 647, 648, 651, 652, 653, 661, 662, 663, 664, 665, 668, 673, 675, 684, 689, 691, 793, 794, 800, 801, 813, 814, 816, 820, 822, 824, 838, 839, 846, 847, 848, 849, 850, 853, 858, 859, 862, 865, 872, 876, 877, 878, 879, 883, 884, 886, 887, 888, 889, 895, 906, 907, 935, 970, 976, 982, 983, 986, 992, 996, 1000, 1001, 1002, 1007, 1021, 1028, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "exclud": [8, 13, 20, 169, 306, 379, 383, 393, 443, 461, 463, 725, 726, 734, 779, 780, 783, 808, 816, 873, 961, 986, 989, 1037, 1044], "invalid": [8, 200, 393, 443, 575, 668, 709, 770, 982, 986, 1034, 1036, 1038, 1039, 1041, 1042, 1044], "assign": [8, 18, 21, 35, 38, 47, 50, 58, 59, 61, 112, 117, 128, 130, 145, 154, 213, 218, 229, 234, 237, 300, 308, 313, 330, 345, 351, 374, 379, 381, 393, 403, 410, 411, 413, 414, 415, 416, 437, 438, 439, 440, 442, 443, 444, 445, 446, 449, 451, 453, 456, 457, 458, 459, 512, 533, 558, 559, 590, 591, 604, 605, 607, 655, 656, 663, 664, 665, 673, 674, 675, 701, 702, 712, 713, 714, 717, 725, 726, 727, 734, 735, 739, 751, 753, 779, 780, 782, 783, 789, 790, 791, 795, 798, 799, 801, 804, 809, 817, 819, 820, 821, 822, 825, 842, 848, 850, 851, 852, 865, 893, 894, 898, 899, 900, 901, 902, 903, 904, 980, 982, 985, 986, 987, 988, 989, 990, 991, 996, 999, 1010, 1012, 1021, 1028, 1033, 1035, 1036], "format": [8, 11, 12, 13, 20, 22, 49, 55, 59, 62, 71, 81, 96, 106, 115, 121, 124, 126, 138, 144, 145, 176, 180, 186, 191, 200, 218, 256, 266, 268, 269, 272, 275, 288, 289, 292, 293, 310, 316, 344, 355, 359, 365, 372, 378, 379, 381, 382, 387, 388, 392, 393, 407, 410, 413, 414, 430, 439, 440, 442, 444, 446, 447, 449, 456, 461, 465, 479, 480, 481, 482, 484, 486, 493, 494, 495, 505, 506, 507, 520, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 548, 554, 555, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 643, 649, 655, 656, 657, 659, 663, 664, 665, 673, 674, 675, 685, 686, 689, 694, 710, 717, 735, 736, 747, 764, 787, 788, 827, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 885, 890, 891, 896, 898, 910, 918, 919, 940, 948, 952, 957, 960, 962, 963, 964, 965, 966, 967, 976, 986, 989, 994, 996, 997, 1000, 1002, 1006, 1012, 1013, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1043, 1045], "islic": [8, 45, 63], "asarrai": [8, 18, 200, 218, 303, 327, 350, 351, 381, 393, 402, 582, 583, 722, 752, 846, 848, 849, 850, 996, 1001, 1045], "int": [8, 10, 13, 14, 17, 18, 20, 38, 45, 63, 82, 115, 124, 128, 140, 141, 153, 154, 155, 161, 165, 169, 181, 191, 193, 200, 218, 226, 229, 235, 239, 246, 256, 259, 260, 261, 284, 289, 291, 297, 313, 326, 352, 374, 379, 381, 391, 393, 404, 407, 410, 414, 417, 418, 421, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 485, 488, 489, 491, 492, 493, 494, 499, 500, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 604, 605, 607, 608, 614, 624, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 704, 706, 710, 722, 723, 725, 726, 727, 730, 734, 752, 753, 765, 770, 774, 775, 776, 777, 778, 779, 780, 783, 785, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 914, 918, 919, 921, 922, 934, 935, 937, 938, 939, 940, 951, 957, 960, 965, 966, 982, 993, 1028, 1034, 1038, 1039], "iter_minibatch": 8, "minibatch_s": [8, 367], "statist": [8, 13, 82, 112, 115, 116, 127, 138, 139, 140, 141, 144, 148, 149, 167, 169, 170, 171, 172, 184, 188, 204, 254, 258, 260, 263, 270, 277, 279, 306, 312, 318, 361, 368, 372, 374, 376, 379, 385, 393, 404, 406, 407, 408, 410, 411, 413, 415, 431, 466, 471, 490, 491, 513, 514, 515, 517, 519, 538, 543, 550, 556, 557, 559, 601, 602, 603, 606, 624, 627, 631, 632, 641, 646, 653, 687, 691, 693, 707, 713, 718, 719, 720, 727, 739, 784, 795, 811, 828, 855, 856, 874, 875, 876, 878, 883, 886, 887, 889, 903, 906, 907, 961, 975, 976, 980, 982, 983, 985, 986, 987, 988, 993, 996, 1000, 1001, 1002, 1003, 1004, 1005, 1013, 1019, 1020, 1033, 1036, 1039, 1040, 1042, 1043], "test_stat": 8, "n_test": [8, 10, 34, 115, 261, 1028, 1031], "n_test_po": 8, "hold": [8, 13, 17, 27, 28, 200, 204, 262, 359, 372, 379, 380, 381, 393, 404, 406, 410, 413, 414, 416, 500, 554, 558, 561, 586, 629, 630, 631, 732, 795, 798, 799, 809, 834, 865, 866, 871, 872, 879, 882, 906, 908, 976, 980, 986, 990, 1000, 1001, 1002, 1009, 1012, 1021, 1036, 1040], "n_test_docu": 8, "tick": [8, 44, 61, 155, 240, 272, 629, 822], "x_test_text": 8, "parsing_tim": 8, "vectorizing_tim": 8, "sum": [8, 18, 20, 27, 62, 82, 93, 99, 106, 124, 125, 145, 149, 160, 170, 181, 187, 196, 200, 204, 215, 218, 222, 224, 239, 270, 284, 291, 294, 320, 329, 341, 342, 345, 350, 351, 352, 359, 376, 385, 393, 403, 404, 405, 406, 408, 409, 411, 412, 413, 414, 416, 429, 439, 440, 444, 446, 456, 461, 462, 479, 480, 481, 512, 517, 520, 528, 531, 533, 534, 538, 541, 542, 543, 546, 547, 549, 551, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 587, 588, 608, 610, 620, 622, 632, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 673, 674, 675, 676, 678, 681, 687, 691, 693, 696, 706, 707, 716, 722, 737, 752, 754, 755, 759, 784, 826, 827, 831, 832, 841, 845, 849, 856, 857, 877, 878, 898, 899, 901, 904, 906, 907, 908, 909, 937, 961, 967, 972, 982, 986, 987, 988, 989, 1001, 1002, 1019, 1031, 1032, 1034, 1036, 1037, 1039, 1044, 1045], "cls_name": [8, 10], "string": [8, 72, 121, 160, 218, 231, 265, 319, 352, 365, 373, 374, 379, 380, 381, 385, 393, 400, 407, 410, 413, 414, 415, 417, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 486, 487, 493, 502, 524, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 614, 617, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 696, 706, 708, 716, 728, 758, 761, 767, 770, 774, 775, 776, 777, 788, 789, 793, 794, 795, 798, 799, 801, 809, 817, 821, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 916, 918, 919, 926, 927, 928, 944, 950, 954, 970, 971, 975, 976, 986, 999, 1001, 1012, 1019, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "n_train": [8, 10, 34, 115, 261, 1028, 1031], "6d": 8, "n_train_po": 8, "5d": 8, "cls_stat": 8, "accuracy_histori": 8, "runtime_histori": 8, "total_fit_tim": 8, "discard": [8, 56, 181, 264, 365, 403, 408, 415, 505, 506, 546, 594, 624, 627, 641, 871, 875, 887, 976, 982, 1036, 1040], "mini": [8, 65, 96, 320, 367, 393, 414, 437, 439, 444, 446, 448, 450, 528, 530, 533, 534, 535, 536, 537, 539, 540, 542, 543, 990, 991, 1028, 1039, 1041], "smaller": [8, 25, 41, 47, 56, 83, 112, 149, 157, 158, 161, 164, 185, 189, 191, 204, 233, 279, 290, 291, 300, 306, 337, 345, 351, 379, 403, 405, 406, 408, 410, 411, 413, 415, 436, 437, 443, 447, 451, 453, 511, 531, 532, 554, 555, 556, 557, 558, 559, 561, 562, 590, 607, 616, 630, 643, 644, 646, 647, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 669, 671, 679, 680, 689, 706, 793, 798, 799, 844, 847, 871, 872, 890, 891, 898, 906, 907, 908, 909, 935, 980, 982, 983, 985, 986, 987, 989, 990, 992, 996, 998, 1000, 1001, 1002, 1007, 1021, 1036, 1041], "bigger": [8, 41, 61, 213, 261, 303, 341, 347, 351, 364, 366, 414, 435, 436, 505, 535, 844, 1016, 1023], "overhead": [8, 284, 366, 367, 379, 385, 388, 391, 393, 413, 438, 442, 446, 531, 696, 830, 831, 833, 834, 835, 836, 837, 838, 839, 954, 988, 989, 1031, 1036, 1037, 1040], "partial": [8, 12, 51, 85, 88, 129, 167, 168, 174, 218, 228, 244, 318, 321, 376, 393, 395, 408, 409, 411, 413, 416, 461, 479, 480, 481, 482, 493, 498, 531, 533, 538, 559, 586, 629, 630, 654, 784, 824, 826, 827, 854, 855, 856, 859, 871, 872, 875, 878, 907, 983, 990, 1000, 1021, 1023, 1025, 1029, 1036, 1037, 1041], "stream": [8, 406, 411, 414, 459, 586, 867, 868, 878, 978, 1006, 1036, 1039], "minibatch_iter": 8, "total_vect_tim": 8, "x_train_text": 8, "item": [8, 9, 10, 11, 12, 13, 18, 20, 31, 44, 56, 76, 116, 118, 122, 125, 132, 170, 198, 202, 208, 222, 235, 236, 238, 248, 258, 264, 320, 326, 351, 372, 379, 380, 381, 388, 407, 461, 523, 558, 559, 585, 586, 588, 629, 807, 871, 893, 894, 913, 914, 940, 978, 999, 1007, 1012], "updat": [8, 17, 45, 63, 112, 118, 127, 234, 316, 352, 377, 378, 379, 383, 387, 393, 406, 411, 413, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 460, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 796, 797, 798, 799, 802, 804, 809, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 913, 961, 982, 989, 990, 991, 1000, 1009, 1010, 1029, 1035, 1036, 1037, 1039, 1041, 1043, 1044, 1045], "accumul": [8, 51, 119, 120, 189, 383, 385, 406, 414, 986, 1029, 1036], "acc_histori": 8, "run_histori": 8, "878": [8, 16], "962": 8, "915": 8, "61": [8, 13, 82, 171, 218, 373, 376, 385, 407, 538, 557, 710], "1583": 8, "855": 8, "1576": 8, "877": [8, 259], "62": [8, 13, 171, 176, 218, 255, 321, 326, 361, 374, 406, 490, 491, 838, 839, 1024, 1031], "1556": 8, "933": [8, 75, 410], "1549": 8, "3911": 8, "517": [8, 249, 253, 449, 459, 1019], "938": [8, 171, 196, 781, 986, 1016], "2297": 8, "936": [8, 434, 986], "2294": 8, "885": [8, 149, 376], "2284": [8, 171], "941": 8, "2281": 8, "6821": 8, "891": [8, 154, 162], "2451": 8, "2448": 8, "900": [8, 51, 75, 76], "2442": 8, "953": [8, 50], "2440": 8, "9759": 8, "1276": 8, "949": 8, "2520": 8, "2518": 8, "909": 8, "2514": 8, "958": 8, "2512": 8, "11680": 8, "1499": 8, "944": [8, 1016], "2424": 8, "956": [8, 1016], "2423": 8, "2419": 8, "950": 8, "2418": 8, "14625": 8, "1865": 8, "965": [8, 986], "2465": 8, "903": [8, 135, 136], "2464": 8, "924": 8, "2461": 8, "957": [8, 724, 986], "2460": 8, "17360": [8, 1039], "2179": 8, "2501": [8, 149, 376], "2500": [8, 986], "932": 8, "2497": 8, "2496": 8, "curv": [8, 11, 24, 29, 38, 76, 79, 115, 117, 118, 124, 167, 178, 179, 190, 200, 218, 219, 221, 223, 226, 228, 230, 239, 240, 244, 245, 253, 254, 261, 271, 277, 301, 316, 341, 357, 386, 401, 405, 410, 412, 434, 435, 436, 499, 507, 512, 518, 522, 561, 629, 642, 655, 695, 697, 699, 703, 704, 705, 706, 723, 725, 737, 738, 778, 780, 783, 784, 785, 793, 794, 801, 812, 817, 822, 824, 825, 836, 859, 878, 898, 903, 982, 983, 985, 986, 992, 1002, 1008, 1010, 1023, 1025, 1030, 1031, 1034, 1038, 1040, 1041, 1042, 1043, 1044], "evolut": [8, 10, 273, 365, 367, 543], "cours": [8, 9, 176, 365, 379, 381, 411, 414, 415, 976, 981, 982, 1010], "valid": [8, 13, 14, 27, 55, 56, 57, 72, 75, 79, 83, 104, 110, 116, 118, 121, 122, 123, 124, 125, 137, 142, 143, 147, 149, 150, 160, 167, 170, 172, 178, 184, 188, 200, 202, 208, 218, 219, 236, 238, 248, 251, 254, 258, 261, 262, 263, 265, 267, 269, 270, 275, 277, 279, 288, 303, 307, 312, 316, 318, 328, 337, 345, 355, 366, 374, 379, 382, 391, 392, 393, 397, 400, 401, 404, 406, 407, 408, 411, 412, 413, 414, 415, 422, 434, 439, 440, 442, 443, 444, 446, 447, 454, 460, 461, 465, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 490, 498, 499, 501, 512, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 569, 572, 574, 579, 580, 586, 590, 591, 594, 599, 629, 631, 635, 636, 637, 638, 639, 640, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 685, 686, 689, 696, 698, 699, 703, 710, 724, 758, 761, 770, 774, 775, 776, 781, 788, 789, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 832, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 861, 862, 864, 870, 878, 890, 891, 893, 894, 896, 898, 900, 903, 905, 906, 907, 908, 909, 918, 919, 922, 929, 941, 943, 946, 976, 985, 986, 987, 990, 994, 996, 998, 1000, 1001, 1002, 1006, 1007, 1010, 1012, 1015, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "consumpt": [8, 365, 531, 554, 555, 561, 562, 795, 809, 819, 820, 821, 906, 907, 908, 909, 952, 1012, 1028, 1030, 1034, 1036, 1037, 1042], "queue": [8, 989, 1031], "up": [8, 11, 38, 45, 47, 48, 49, 53, 56, 58, 63, 71, 81, 82, 90, 93, 110, 117, 165, 171, 179, 184, 193, 201, 216, 217, 248, 263, 266, 284, 297, 303, 307, 312, 320, 326, 334, 341, 345, 350, 352, 367, 373, 374, 379, 383, 385, 386, 387, 388, 391, 393, 394, 404, 406, 411, 413, 414, 440, 444, 445, 446, 447, 449, 453, 456, 457, 458, 505, 506, 533, 546, 547, 554, 555, 556, 557, 558, 559, 561, 562, 563, 607, 624, 629, 630, 636, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 661, 678, 679, 680, 681, 689, 702, 765, 793, 794, 797, 798, 799, 801, 822, 872, 873, 876, 888, 906, 907, 908, 909, 912, 935, 938, 939, 975, 978, 982, 983, 986, 989, 996, 1000, 1001, 1007, 1009, 1010, 1020, 1021, 1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "amount": [8, 12, 46, 54, 67, 79, 82, 96, 100, 113, 115, 158, 170, 184, 204, 218, 234, 318, 325, 328, 330, 337, 345, 352, 365, 366, 367, 391, 405, 406, 408, 411, 413, 414, 415, 440, 451, 466, 535, 536, 538, 540, 560, 593, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 662, 678, 681, 689, 798, 799, 838, 839, 844, 879, 894, 895, 908, 909, 981, 982, 985, 988, 990, 996, 998, 999, 1000, 1001, 1019, 1020, 1041, 1045], "learner": [8, 113, 123, 132, 367, 554, 555, 556, 557, 558, 559, 561, 562, 563, 579, 586, 627, 840, 841, 846, 848, 849, 988, 991, 1002, 1006, 1007, 1021, 1044], "plot_accuraci": 8, "x_legend": 8, "n_exampl": 8, "gca": [8, 45, 63, 87, 155, 205, 209, 211, 229, 242, 265, 292, 294, 307, 333, 335, 338, 339, 993, 1025], "set_ylim": [8, 10, 17, 32, 43, 61, 73, 93, 117, 129, 130, 161, 171, 180, 198, 200, 201, 234, 246, 265, 276, 282, 289, 300, 306, 308, 309, 311, 317, 328, 346], "runtim": [8, 10, 59, 112, 186, 215, 217, 234, 303, 308, 366, 381, 382, 391, 393, 405, 406, 413, 447, 560, 676, 809, 898, 899, 900, 901, 902, 903, 904, 1000, 1001, 1031, 1035, 1036, 1042, 1043, 1045], "gcf": [8, 993], "cls_runtim": 8, "bar_color": 8, "rectangl": 8, "bar": [8, 10, 15, 73, 118, 119, 122, 123, 126, 134, 145, 149, 160, 164, 171, 179, 246, 251, 260, 262, 266, 282, 311, 312, 320, 321, 351, 381, 409, 578, 629, 645, 666, 677, 986, 993, 1000, 1002, 1034, 1035, 1036, 1037], "width": [8, 10, 13, 17, 46, 54, 81, 91, 98, 99, 105, 106, 107, 115, 121, 122, 125, 134, 145, 154, 160, 183, 243, 246, 260, 287, 306, 308, 309, 312, 318, 321, 334, 376, 407, 435, 436, 449, 461, 490, 491, 503, 518, 583, 863, 911, 996, 1000, 1002, 1018, 1019, 1036], "set_xticklabel": [8, 10, 81, 107, 134, 155, 171, 173, 272, 273, 282], "ymax": [8, 10, 11, 79, 187, 189, 192, 193, 201, 209, 261, 297], "set_titl": [8, 10, 15, 26, 28, 31, 32, 33, 35, 43, 44, 46, 54, 56, 58, 61, 65, 66, 73, 76, 81, 91, 93, 101, 107, 112, 117, 119, 128, 130, 132, 133, 161, 164, 165, 169, 170, 171, 172, 173, 179, 180, 189, 191, 198, 200, 201, 202, 208, 221, 222, 225, 226, 232, 234, 235, 239, 240, 246, 255, 256, 257, 258, 261, 263, 264, 268, 272, 273, 276, 279, 282, 284, 287, 288, 289, 294, 300, 301, 306, 307, 308, 309, 310, 311, 316, 320, 325, 326, 334, 341, 345, 346, 347, 350, 355], "autolabel": [8, 123], "attach": [8, 123, 350, 431, 843, 1029, 1039], "rect": [8, 53, 123, 179], "height": [8, 15, 54, 99, 122, 149, 306, 312, 350, 412, 443, 490, 491, 503, 583], "get_height": [8, 123], "get_x": [8, 123], "get_width": [8, 123], "va": [8, 123, 272, 292, 294, 344], "setp": [8, 10, 272, 275], "rotat": [8, 41, 95, 98, 101, 108, 124, 134, 167, 173, 224, 272, 273, 282, 337, 344, 409, 411, 416, 418, 501, 529, 538, 547, 611, 694, 878, 910, 982, 1039, 1040], "read": [8, 13, 18, 96, 221, 268, 316, 317, 318, 320, 322, 365, 373, 377, 380, 381, 382, 383, 384, 386, 387, 391, 392, 393, 406, 417, 418, 419, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 458, 459, 460, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 607, 608, 610, 611, 612, 613, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 854, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 931, 975, 982, 986, 987, 1006, 1010, 1021, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041], "feat": [8, 10, 383, 414], "extr": 8, "hash": [8, 111, 136, 167, 351, 352, 365, 367, 371, 379, 382, 391, 413, 511, 541, 554, 563, 578, 579, 586, 637, 833, 951, 978, 1021, 1023, 1029, 1032, 1035], "vect": [8, 71, 262, 329, 414, 1021], "plot_out_of_core_classif": [8, 16], "illustr": [9, 24, 25, 27, 32, 34, 53, 57, 58, 71, 72, 75, 76, 79, 81, 87, 93, 98, 102, 112, 115, 120, 123, 127, 129, 131, 132, 144, 149, 151, 152, 153, 154, 157, 158, 159, 160, 162, 167, 169, 171, 172, 176, 189, 196, 197, 200, 202, 204, 208, 214, 217, 218, 221, 222, 224, 226, 229, 231, 232, 234, 235, 236, 238, 261, 268, 273, 274, 285, 298, 311, 315, 316, 318, 328, 337, 338, 342, 343, 345, 346, 351, 352, 358, 361, 365, 376, 379, 384, 387, 392, 409, 411, 413, 414, 512, 607, 608, 610, 611, 612, 616, 619, 620, 847, 975, 982, 986, 989, 992, 998, 999, 1000, 1001, 1010, 1012], "robust": [9, 62, 64, 78, 84, 125, 149, 165, 167, 170, 171, 178, 202, 204, 217, 219, 229, 239, 306, 322, 367, 376, 381, 387, 406, 413, 414, 443, 445, 466, 467, 470, 471, 472, 473, 521, 531, 556, 557, 646, 654, 667, 668, 675, 676, 746, 828, 859, 873, 875, 876, 887, 893, 933, 986, 990, 992, 996, 999, 1000, 1006, 1008, 1010, 1022, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1044], "covari": [9, 12, 30, 34, 36, 80, 84, 86, 104, 107, 128, 152, 159, 229, 245, 247, 250, 251, 252, 253, 368, 388, 393, 397, 406, 409, 411, 416, 479, 480, 481, 482, 501, 512, 516, 524, 529, 531, 538, 543, 545, 546, 547, 560, 607, 608, 610, 619, 620, 628, 641, 642, 647, 651, 653, 679, 680, 683, 686, 690, 793, 794, 795, 814, 985, 992, 996, 1008, 1022, 1023, 1028, 1030, 1031, 1032, 1033, 1035, 1037], "wine": [9, 242, 311, 312, 372, 507, 1023], "tool": [9, 11, 170, 236, 259, 264, 361, 368, 372, 373, 374, 377, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 400, 406, 407, 408, 484, 689, 698, 975, 981, 982, 986, 992, 996, 1001, 1003, 1006, 1007, 1010, 1012, 1021, 1035, 1038, 1041, 1042, 1043], "purpos": [9, 12, 17, 38, 87, 164, 214, 215, 216, 221, 223, 237, 249, 251, 257, 258, 337, 338, 345, 350, 351, 361, 374, 379, 381, 392, 393, 394, 396, 399, 403, 406, 407, 411, 413, 414, 415, 416, 543, 635, 820, 821, 858, 983, 986, 987, 989, 992, 1004, 1006, 1012, 1040, 1042], "awar": [9, 15, 146, 161, 334, 350, 377, 379, 381, 391, 394, 410, 414, 564, 565, 645, 651, 652, 653, 655, 656, 666, 677, 844, 873, 992, 996, 1002, 1025, 1028, 1029, 1042], "thing": [9, 35, 222, 256, 350, 366, 367, 374, 378, 379, 381, 391, 394, 406, 408, 414, 556, 557, 982, 996, 1010, 1034], "trivial": [9, 202, 355, 379, 406, 813, 900, 903, 983, 1007, 1028], "dimens": [9, 12, 13, 15, 38, 41, 54, 83, 86, 91, 96, 149, 154, 156, 158, 160, 171, 183, 184, 198, 223, 225, 229, 233, 234, 240, 247, 248, 288, 289, 293, 309, 341, 350, 351, 352, 374, 376, 380, 393, 405, 406, 411, 412, 416, 418, 439, 440, 442, 444, 445, 446, 449, 461, 462, 479, 480, 481, 490, 491, 512, 521, 522, 526, 527, 530, 538, 546, 579, 580, 581, 582, 584, 586, 594, 608, 616, 619, 638, 641, 656, 687, 688, 689, 691, 692, 696, 760, 819, 838, 839, 843, 857, 890, 891, 892, 900, 901, 902, 903, 904, 918, 919, 920, 949, 957, 960, 976, 978, 980, 982, 983, 984, 987, 989, 990, 992, 998, 1001, 1012, 1019, 1020, 1035, 1037, 1038, 1040], "below": [9, 13, 26, 27, 28, 33, 35, 56, 61, 71, 76, 81, 90, 91, 96, 110, 116, 119, 120, 125, 144, 169, 171, 183, 196, 197, 200, 202, 216, 217, 222, 226, 231, 236, 239, 241, 243, 256, 259, 264, 266, 267, 268, 306, 310, 316, 317, 318, 319, 320, 321, 322, 342, 350, 359, 361, 366, 372, 373, 377, 379, 381, 383, 384, 388, 393, 394, 396, 406, 408, 409, 410, 411, 413, 414, 415, 416, 443, 445, 468, 469, 475, 488, 489, 491, 492, 493, 494, 495, 497, 498, 499, 501, 502, 507, 528, 534, 539, 545, 579, 592, 593, 594, 595, 596, 597, 630, 643, 649, 655, 656, 664, 665, 670, 672, 689, 696, 702, 739, 759, 793, 794, 795, 806, 809, 827, 858, 861, 871, 872, 875, 881, 887, 975, 976, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 992, 993, 994, 996, 1000, 1001, 1002, 1003, 1006, 1014, 1021, 1024, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "main": [9, 17, 33, 63, 87, 100, 122, 167, 229, 270, 282, 315, 345, 350, 365, 366, 367, 372, 377, 379, 381, 383, 385, 387, 391, 392, 393, 395, 396, 404, 405, 406, 411, 413, 414, 416, 500, 522, 527, 546, 547, 622, 710, 828, 898, 899, 975, 983, 985, 986, 993, 998, 1007, 1009, 1018, 1021, 1028, 1031, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "empir": [9, 13, 25, 26, 37, 69, 78, 81, 83, 84, 167, 218, 267, 306, 404, 410, 413, 416, 444, 446, 457, 466, 467, 468, 471, 474, 475, 529, 531, 536, 538, 540, 546, 548, 562, 587, 600, 636, 646, 664, 668, 675, 676, 713, 718, 719, 720, 823, 833, 834, 835, 837, 856, 879, 921, 960, 978, 980, 986, 988, 990, 996, 998, 1000, 1022, 1023], "mode": [9, 10, 47, 48, 81, 200, 229, 284, 286, 303, 316, 379, 382, 387, 388, 391, 403, 409, 413, 417, 440, 441, 444, 446, 449, 456, 459, 468, 469, 475, 479, 484, 505, 506, 554, 558, 561, 589, 592, 593, 595, 596, 597, 607, 624, 641, 642, 655, 656, 663, 665, 670, 671, 672, 673, 676, 679, 680, 686, 690, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 854, 898, 900, 903, 906, 908, 924, 934, 935, 937, 989, 992, 1006, 1012, 1013, 1020, 1029, 1037, 1042, 1045], "stick": [9, 793, 985], "bias": [9, 28, 83, 99, 125, 131, 169, 170, 172, 266, 374, 395, 404, 413, 521, 546, 854, 878, 889, 981, 985, 994, 1000, 1002], "yet": [9, 58, 184, 218, 251, 262, 352, 367, 374, 378, 383, 391, 395, 396, 397, 410, 411, 413, 414, 416, 445, 449, 458, 459, 462, 469, 550, 551, 552, 553, 564, 565, 566, 567, 574, 590, 591, 599, 624, 668, 670, 672, 774, 857, 895, 970, 975, 982, 986, 992, 1000, 1007, 1037, 1045], "extent": [9, 59, 154, 155, 156, 233, 343, 346, 437, 532, 693, 793, 986], "assum": [9, 35, 56, 58, 159, 165, 169, 170, 189, 200, 218, 229, 232, 252, 261, 270, 306, 345, 352, 366, 378, 379, 381, 383, 385, 391, 392, 393, 395, 400, 403, 404, 406, 408, 410, 411, 413, 414, 416, 417, 422, 427, 434, 436, 441, 443, 447, 454, 460, 466, 467, 468, 469, 470, 471, 472, 473, 500, 505, 506, 529, 539, 545, 546, 558, 559, 564, 565, 584, 585, 586, 588, 617, 629, 640, 641, 643, 644, 649, 655, 656, 657, 658, 659, 663, 664, 665, 668, 669, 673, 674, 675, 678, 682, 684, 685, 689, 706, 722, 731, 737, 752, 760, 765, 770, 774, 777, 795, 798, 799, 809, 834, 840, 841, 844, 845, 846, 848, 849, 854, 865, 878, 946, 962, 963, 964, 976, 980, 982, 984, 985, 986, 988, 989, 991, 992, 993, 996, 1000, 1002, 1034, 1040], "parametr": [9, 25, 26, 83, 232, 288, 310, 319, 404, 407, 412, 413, 434, 548, 550, 632, 682, 693, 874, 886, 929, 930, 982, 985, 988, 989, 996, 999, 1002, 1036, 1038, 1041], "minimum": [9, 13, 56, 58, 81, 125, 126, 148, 189, 210, 233, 239, 271, 290, 291, 381, 388, 396, 399, 403, 406, 413, 414, 438, 442, 443, 447, 451, 453, 466, 467, 470, 471, 472, 473, 508, 510, 538, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 591, 624, 628, 629, 632, 634, 665, 668, 673, 675, 676, 679, 680, 689, 702, 721, 775, 776, 798, 799, 819, 834, 855, 856, 867, 868, 871, 872, 873, 877, 891, 892, 905, 906, 907, 908, 909, 915, 918, 919, 922, 938, 983, 986, 990, 992, 996, 998, 1002, 1028, 1031, 1035, 1036, 1040, 1041], "determin": [9, 11, 14, 20, 47, 56, 81, 112, 114, 118, 157, 170, 179, 180, 196, 203, 261, 306, 311, 341, 352, 359, 361, 378, 379, 381, 388, 392, 393, 403, 404, 406, 410, 411, 413, 414, 415, 416, 429, 434, 438, 439, 440, 442, 444, 446, 447, 453, 456, 457, 458, 462, 466, 467, 469, 470, 471, 472, 473, 479, 480, 481, 485, 488, 489, 492, 494, 500, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 534, 536, 539, 540, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 562, 564, 565, 567, 579, 580, 581, 585, 588, 591, 599, 604, 605, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 624, 632, 633, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 684, 686, 687, 689, 690, 691, 704, 708, 719, 725, 726, 734, 779, 780, 781, 783, 784, 789, 795, 797, 798, 799, 801, 809, 817, 818, 819, 820, 821, 822, 823, 825, 829, 831, 832, 834, 841, 843, 844, 849, 854, 855, 856, 862, 863, 871, 872, 873, 875, 879, 887, 898, 899, 901, 904, 907, 909, 912, 933, 949, 957, 960, 975, 978, 980, 985, 989, 991, 992, 996, 999, 1000, 1002, 1012, 1028, 1033, 1036, 1037, 1039, 1040, 1041], "concentr": [9, 101, 112, 130, 157, 167, 226, 245, 252, 253, 308, 327, 375, 379, 413, 440, 516, 793, 985, 992], "cluster": [9, 19, 21, 23, 25, 43, 44, 47, 49, 51, 52, 54, 55, 58, 60, 62, 63, 69, 81, 92, 103, 114, 121, 128, 173, 226, 239, 246, 247, 248, 249, 262, 290, 291, 293, 309, 317, 321, 339, 349, 350, 352, 353, 367, 368, 372, 374, 376, 379, 381, 384, 391, 393, 401, 407, 412, 414, 420, 421, 424, 485, 499, 500, 501, 508, 509, 510, 511, 512, 519, 527, 538, 541, 561, 563, 586, 587, 588, 628, 688, 689, 692, 701, 702, 707, 714, 716, 721, 727, 732, 733, 751, 753, 774, 775, 782, 788, 789, 791, 793, 794, 850, 851, 859, 863, 870, 878, 927, 929, 947, 954, 970, 976, 983, 985, 989, 992, 994, 996, 999, 1003, 1006, 1007, 1010, 1012, 1015, 1018, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "outli": [9, 81, 393, 466, 471, 982, 992], "skew": [9, 125, 203, 233, 239, 306, 322, 371, 410, 636, 637, 638, 639, 874, 886, 982, 996, 1023, 1031, 1035, 1044], "Of": [9, 26, 28, 164, 365, 381, 406, 414, 976], "screen": [9, 1041], "presenc": [9, 61, 63, 81, 82, 110, 169, 173, 184, 204, 239, 306, 377, 380, 393, 408, 411, 709, 722, 752, 765, 827, 861, 869, 871, 878, 970, 976, 982, 986, 987, 1000, 1031, 1032, 1034, 1038, 1040, 1042], "mixtur": [9, 45, 56, 58, 248, 249, 253, 368, 374, 375, 393, 406, 411, 412, 416, 620, 795, 1006, 1007, 1022, 1023, 1028, 1032, 1033, 1034, 1035], "univari": [9, 37, 69, 73, 75, 143, 144, 150, 167, 215, 332, 348, 371, 405, 406, 407, 414, 442, 501, 522, 527, 589, 592, 593, 595, 596, 597, 599, 602, 603, 604, 605, 606, 624, 625, 626, 627, 642, 795, 800, 820, 824, 858, 859, 868, 873, 877, 878, 898, 903, 982, 1001, 1003, 1008, 1020, 1023, 1028, 1034], "appli": [9, 13, 15, 20, 26, 28, 33, 41, 45, 47, 48, 56, 57, 59, 63, 72, 74, 76, 87, 91, 96, 97, 103, 105, 107, 117, 118, 125, 145, 152, 170, 172, 184, 189, 204, 205, 214, 221, 222, 223, 229, 234, 236, 261, 262, 264, 273, 282, 293, 306, 310, 311, 317, 337, 341, 352, 359, 361, 365, 371, 379, 381, 387, 391, 392, 393, 403, 404, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 418, 437, 443, 449, 459, 461, 462, 464, 466, 471, 479, 480, 481, 482, 505, 506, 513, 514, 515, 521, 528, 529, 530, 531, 532, 534, 536, 538, 539, 540, 545, 546, 547, 550, 551, 554, 555, 556, 557, 561, 562, 563, 585, 586, 587, 588, 624, 629, 630, 635, 636, 638, 639, 655, 656, 665, 673, 674, 675, 688, 696, 698, 704, 722, 752, 754, 755, 777, 784, 788, 789, 795, 809, 824, 827, 833, 834, 835, 836, 837, 847, 857, 858, 867, 874, 875, 878, 883, 884, 886, 887, 888, 889, 894, 905, 906, 907, 908, 909, 918, 924, 927, 934, 935, 958, 976, 978, 982, 983, 984, 985, 986, 988, 990, 992, 996, 1000, 1001, 1002, 1003, 1005, 1010, 1029, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1042], "ellipticenvelop": [9, 229, 467, 470, 471, 472, 473, 560, 992, 1028, 1031, 1035, 1036, 1041], "decisionboundarydisplai": [9, 31, 32, 35, 57, 114, 128, 133, 183, 192, 209, 214, 264, 287, 292, 295, 311, 333, 334, 335, 336, 338, 339, 341, 356, 1042, 1043, 1045], "oneclasssvm": [9, 11, 17, 214, 229, 319, 336, 560, 674, 844, 992, 1000, 1001, 1030, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043], "support_fract": [9, 466, 471], "contamin": [9, 81, 82, 229, 239, 290, 291, 466, 560, 844, 992, 1036, 1044], "ocsvm": [9, 214], "line": [9, 11, 13, 18, 41, 44, 61, 71, 81, 96, 101, 112, 118, 124, 151, 162, 164, 165, 167, 170, 171, 188, 189, 190, 192, 195, 196, 198, 201, 202, 203, 208, 209, 211, 212, 214, 229, 233, 234, 237, 239, 258, 265, 267, 268, 290, 294, 297, 307, 318, 336, 339, 341, 342, 346, 347, 350, 373, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 391, 411, 412, 413, 435, 484, 485, 486, 505, 506, 539, 550, 551, 552, 553, 607, 610, 611, 629, 667, 683, 697, 698, 699, 801, 817, 954, 980, 986, 990, 993, 1000, 1006, 1009, 1019, 1021, 1030, 1039, 1041, 1044, 1045], "mline": [9, 81, 214, 290, 336, 339], "load_win": [9, 242, 311, 842, 850, 1025, 1039], "red": [9, 10, 11, 27, 34, 35, 61, 81, 93, 96, 97, 98, 115, 132, 135, 161, 176, 179, 180, 190, 198, 226, 240, 256, 267, 297, 301, 307, 311, 312, 327, 337, 358, 377, 393, 406, 411, 987], "frontier": [9, 214, 290, 336, 992, 1019], "legend_lin": 9, "response_method": [9, 31, 35, 57, 114, 128, 133, 183, 192, 209, 214, 264, 287, 292, 295, 311, 333, 334, 336, 341, 356, 628, 629, 630, 695, 697, 699, 738, 986, 1045], "decision_funct": [9, 11, 17, 26, 28, 57, 114, 128, 141, 212, 213, 214, 230, 236, 239, 268, 290, 291, 300, 308, 335, 336, 337, 341, 342, 343, 347, 381, 393, 404, 413, 434, 466, 546, 547, 550, 552, 556, 558, 560, 564, 590, 591, 628, 629, 630, 655, 656, 663, 665, 671, 672, 673, 674, 695, 697, 699, 704, 717, 722, 723, 731, 735, 736, 738, 752, 778, 784, 785, 790, 795, 798, 799, 809, 819, 826, 827, 828, 829, 844, 858, 865, 895, 898, 900, 902, 903, 982, 986, 992, 993, 1000, 1001, 1019, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1045], "plot_method": [9, 35, 183, 214, 287, 292, 333, 335, 336, 338, 339, 341, 628], "contour": [9, 11, 17, 35, 47, 48, 81, 121, 141, 149, 155, 156, 158, 211, 212, 213, 214, 229, 234, 250, 290, 297, 335, 336, 338, 339, 341, 342, 343, 376, 386, 628, 629, 992, 1000], "line2d": [9, 81, 214, 290, 336, 339, 801, 817], "bbox_arg": 9, "dict": [9, 10, 11, 12, 18, 27, 40, 46, 71, 74, 75, 103, 118, 125, 127, 198, 206, 229, 238, 248, 259, 260, 262, 265, 268, 270, 284, 288, 308, 312, 320, 329, 337, 351, 352, 367, 371, 373, 381, 391, 393, 407, 410, 417, 418, 420, 424, 428, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 493, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 694, 695, 697, 698, 699, 710, 758, 761, 767, 775, 776, 793, 794, 795, 798, 799, 801, 806, 807, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 913, 923, 924, 940, 943, 946, 975, 986, 996, 1016, 1017, 1021, 1023, 1028, 1034, 1035, 1044, 1045], "boxstyl": [9, 308], "fc": [9, 289, 374], "arrow_arg": 9, "arrowstyl": 9, "xy": [9, 27, 50, 268, 297, 342, 396, 643, 644, 647, 648, 649, 650, 651, 652, 657, 658, 659, 660, 661, 678, 679, 680, 681, 683], "xycoord": [9, 27], "textcoord": [9, 176], "xytext": [9, 27, 176], "bbox": [9, 12, 35, 46, 103, 246, 247, 248, 251, 252, 308], "arrowprop": [9, 27], "ash": [9, 376, 1031, 1034], "malic_acid": 9, "abil": [9, 13, 62, 81, 125, 151, 162, 164, 167, 169, 170, 172, 200, 204, 218, 229, 350, 367, 396, 413, 414, 416, 608, 619, 622, 778, 779, 780, 783, 983, 986, 989, 992, 1002, 1007, 1028, 1030, 1035, 1037, 1041, 1042], "locat": [9, 26, 54, 55, 73, 81, 82, 194, 297, 318, 337, 372, 377, 379, 383, 384, 387, 388, 396, 406, 408, 412, 445, 457, 458, 466, 467, 468, 469, 470, 471, 472, 473, 485, 497, 498, 501, 502, 509, 512, 971, 976, 982, 987, 992, 996, 1002, 1036], "hard": [9, 200, 229, 233, 261, 263, 367, 378, 391, 393, 406, 411, 414, 531, 538, 566, 673, 900, 901, 902, 903, 904, 982, 999, 1001, 1002, 1007, 1019, 1020, 1021, 1037, 1038], "due": [9, 13, 27, 28, 54, 56, 61, 76, 112, 115, 152, 170, 171, 179, 184, 191, 198, 200, 202, 217, 218, 233, 239, 247, 269, 270, 282, 284, 311, 312, 341, 345, 350, 351, 352, 377, 379, 385, 393, 396, 404, 406, 410, 411, 413, 416, 440, 443, 444, 456, 532, 536, 540, 541, 571, 668, 795, 798, 799, 803, 805, 809, 819, 820, 823, 826, 830, 831, 863, 867, 868, 878, 976, 982, 983, 985, 986, 987, 989, 993, 1000, 1001, 1007, 1020, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "banana": [9, 986], "anywai": [9, 350, 381, 662, 682, 683], "rid": [9, 1000], "difficulti": [9, 28, 218, 306, 367, 379, 404, 855, 856, 985, 989], "bandwidth": [9, 45, 64, 235, 288, 289, 297, 391, 393, 406, 412, 445, 455, 458, 838, 839, 843, 979, 992, 1039, 1043], "compromis": [9, 171, 365, 379, 644, 676, 989, 1031], "risk": [9, 56, 200, 204, 218, 307, 345, 361, 378, 379, 393, 405, 410, 413, 564, 565, 883, 884, 886, 887, 888, 889, 982, 986, 1010, 1035], "flavanoid": [9, 376], "color_intens": 9, "351": [9, 16], "plot_outlier_detection_win": [9, 16], "goal": [10, 18, 21, 53, 58, 87, 164, 171, 176, 200, 215, 218, 238, 239, 258, 259, 350, 366, 367, 374, 381, 384, 385, 393, 394, 395, 411, 415, 539, 545, 587, 590, 735, 986, 989, 991, 992, 1000, 1001, 1002, 1004, 1010, 1012, 1015, 1019, 1021, 1036], "boxplot": [10, 81, 126, 170, 173, 316], "gc": 10, "defaultdict": [10, 13, 20, 26, 173, 264, 351, 352], "make_regress": [10, 76, 179, 181, 182, 186, 203, 204, 274, 317, 361, 375, 381, 382, 392, 551, 553, 557, 562, 632, 643, 644, 646, 648, 650, 652, 660, 661, 662, 664, 668, 676, 856, 899, 986, 987, 989], "randomforestregressor": [10, 118, 131, 132, 135, 164, 165, 318, 392, 413, 554, 555, 557, 559, 563, 565, 567, 629, 630, 908, 976, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "sgdregressor": [10, 211, 365, 367, 391, 405, 643, 646, 664, 668, 673, 676, 856, 899, 904, 982, 1000, 1030, 1032, 1034, 1035, 1036, 1039, 1041, 1042, 1043, 1044], "shuffl": [10, 13, 15, 21, 22, 25, 28, 33, 49, 61, 62, 96, 118, 119, 121, 132, 165, 184, 208, 209, 214, 229, 262, 266, 267, 274, 284, 313, 325, 326, 327, 328, 339, 350, 351, 361, 374, 388, 393, 401, 466, 471, 485, 486, 488, 489, 492, 494, 500, 508, 509, 510, 511, 512, 516, 519, 521, 528, 534, 536, 537, 543, 544, 550, 551, 552, 553, 561, 562, 564, 565, 599, 655, 656, 663, 664, 665, 669, 671, 673, 674, 675, 684, 795, 797, 798, 799, 800, 801, 809, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 828, 855, 856, 879, 898, 899, 900, 903, 934, 935, 957, 981, 982, 987, 994, 1000, 1001, 1016, 1021, 1023, 1028, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039], "atomic_benchmark_estim": 10, "verbos": [10, 43, 51, 55, 65, 71, 73, 75, 132, 187, 262, 302, 303, 306, 319, 329, 350, 377, 383, 393, 400, 437, 440, 444, 446, 449, 451, 456, 459, 461, 464, 468, 469, 475, 528, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 590, 591, 624, 629, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 687, 689, 691, 761, 774, 793, 794, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 827, 829, 832, 847, 854, 855, 856, 857, 858, 859, 860, 895, 898, 899, 900, 901, 902, 903, 904, 952, 1007, 1030, 1031, 1033, 1035, 1036, 1037, 1039, 1040, 1042, 1043], "n_instanc": [10, 630], "zero": [10, 11, 14, 28, 35, 38, 41, 42, 53, 55, 80, 82, 83, 96, 99, 101, 114, 115, 124, 126, 127, 131, 146, 149, 165, 179, 184, 186, 191, 193, 194, 199, 200, 201, 204, 205, 206, 210, 215, 218, 233, 236, 237, 239, 246, 250, 252, 258, 261, 266, 270, 271, 289, 306, 317, 318, 341, 345, 351, 352, 355, 359, 365, 366, 374, 381, 385, 393, 404, 405, 406, 408, 411, 413, 414, 415, 416, 419, 443, 449, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 484, 494, 505, 506, 520, 523, 524, 528, 529, 532, 534, 535, 536, 537, 539, 540, 544, 545, 549, 554, 555, 556, 557, 558, 559, 561, 562, 563, 578, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 608, 633, 636, 640, 641, 642, 647, 655, 656, 661, 662, 663, 664, 665, 668, 673, 674, 675, 682, 683, 700, 706, 709, 710, 712, 713, 721, 725, 726, 730, 734, 736, 742, 779, 780, 781, 783, 792, 793, 810, 811, 814, 815, 827, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 861, 868, 870, 871, 873, 874, 875, 877, 878, 884, 885, 886, 887, 891, 898, 906, 907, 908, 909, 933, 972, 976, 982, 984, 985, 988, 989, 990, 996, 997, 998, 1000, 1001, 1002, 1012, 1019, 1021, 1028, 1030, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "atomic_benchmark": 10, "percentil": [10, 13, 72, 125, 239, 243, 306, 365, 589, 592, 593, 595, 596, 597, 600, 603, 629, 630, 744, 996, 1033, 1041], "bulk_benchmark_estim": 10, "n_bulk_repeat": 10, "whole": [10, 51, 75, 123, 135, 165, 201, 258, 265, 337, 341, 355, 365, 377, 379, 391, 392, 407, 409, 413, 416, 446, 480, 535, 552, 553, 554, 555, 560, 561, 562, 563, 567, 682, 683, 795, 798, 799, 809, 822, 833, 834, 835, 836, 837, 975, 986, 996, 1021, 1036, 1038], "bulk_benchmark": 10, "benchmark_estim": 10, "repeat": [10, 34, 67, 80, 82, 124, 149, 152, 158, 159, 171, 176, 202, 256, 261, 262, 273, 279, 326, 351, 352, 381, 388, 393, 394, 403, 404, 405, 406, 411, 414, 415, 585, 590, 604, 605, 612, 624, 631, 656, 800, 810, 811, 814, 924, 976, 985, 1023, 1036, 1038], "atomic_runtim": 10, "bulk_runtim": 10, "pair": [10, 13, 38, 45, 59, 65, 101, 114, 116, 121, 125, 141, 156, 160, 180, 183, 192, 209, 212, 218, 233, 256, 261, 268, 270, 330, 333, 335, 337, 338, 339, 341, 343, 351, 356, 374, 391, 393, 403, 404, 407, 410, 414, 416, 434, 437, 438, 442, 447, 454, 460, 468, 469, 475, 490, 505, 506, 579, 589, 592, 593, 595, 596, 597, 607, 610, 611, 612, 614, 616, 617, 619, 620, 622, 624, 629, 630, 640, 689, 696, 697, 702, 703, 704, 712, 727, 736, 754, 755, 759, 762, 765, 766, 767, 768, 769, 770, 772, 774, 775, 776, 777, 778, 782, 826, 838, 839, 913, 986, 987, 988, 989, 996, 1002, 1028, 1040, 1041, 1043, 1044, 1045], "contain": [10, 13, 20, 25, 28, 34, 41, 50, 57, 59, 71, 72, 114, 116, 120, 128, 158, 170, 171, 173, 176, 191, 204, 218, 229, 236, 239, 240, 243, 251, 259, 261, 267, 270, 271, 282, 290, 291, 293, 306, 319, 326, 329, 350, 351, 372, 373, 374, 376, 379, 381, 383, 384, 385, 386, 387, 388, 392, 393, 400, 404, 405, 406, 407, 409, 410, 411, 413, 414, 415, 416, 418, 420, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 493, 497, 499, 500, 501, 505, 506, 507, 511, 512, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 685, 686, 687, 688, 689, 693, 694, 695, 697, 698, 699, 706, 709, 731, 732, 733, 764, 768, 775, 776, 784, 790, 793, 794, 795, 798, 799, 801, 809, 813, 814, 817, 821, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 917, 918, 919, 938, 939, 941, 942, 949, 953, 975, 976, 978, 984, 987, 990, 992, 996, 997, 999, 1002, 1006, 1012, 1021, 1028, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "generate_dataset": 10, "coef": [10, 55, 106, 169, 170, 179, 184, 187, 191, 192, 194, 199, 203, 204, 205, 209, 216, 243, 274, 302, 322, 346, 521, 643, 644, 646, 649, 650, 656, 657, 658, 659, 660, 666, 669, 671, 677, 678, 679, 680, 681, 682, 683, 684, 990], "random_se": [10, 93, 121], "x_scaler": 10, "y_scaler": 10, "ok": [10, 379, 992], "boxplot_runtim": 10, "pred_typ": 10, "micro": [10, 297, 329, 365, 704, 710, 725, 726, 734, 779, 780, 783, 784, 986, 1028, 1036, 1037, 1043], "bp": [10, 126, 149, 188, 189, 376, 994], "cls_info": 10, "estimator_conf": 10, "whisker": 10, "flier": 10, "marker": [10, 11, 18, 28, 31, 35, 38, 39, 43, 53, 56, 59, 60, 61, 64, 65, 86, 92, 93, 98, 102, 118, 131, 159, 160, 176, 188, 193, 195, 197, 198, 200, 202, 203, 215, 217, 222, 246, 248, 249, 256, 261, 263, 264, 265, 291, 306, 311, 327, 355, 379, 383, 414, 1036, 1038, 1039, 1044], "linestyl": [10, 11, 17, 34, 61, 74, 81, 104, 106, 112, 124, 134, 138, 141, 152, 155, 157, 159, 161, 172, 173, 185, 187, 188, 189, 200, 201, 202, 206, 210, 212, 213, 218, 237, 239, 258, 260, 264, 265, 270, 289, 297, 301, 307, 335, 338, 339, 341, 342, 343, 345, 1017], "major": [10, 15, 35, 118, 268, 306, 310, 316, 317, 318, 319, 320, 321, 322, 341, 352, 365, 374, 378, 379, 382, 385, 391, 394, 406, 410, 412, 414, 548, 566, 567, 691, 910, 912, 986, 989, 1000, 1007, 1010, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lightgrei": 10, "set_axisbelow": 10, "capit": [10, 26, 801, 817], "clf_name": [10, 350], "n_feature_influ": 10, "nber": 10, "estimator_nam": [10, 208, 381, 386, 435, 573, 695, 697, 699, 917], "percentile_perf_in_u": 10, "plot_n_features_influ": 10, "il": [10, 661, 682, 683, 982, 986], "benchmark_throughput": 10, "duration_sec": 10, "estimator_config": 10, "n_predict": 10, "plot_benchmark_throughput": 10, "cls_valu": 10, "sec": [10, 208, 223, 226, 284], "1e2": [10, 152, 159, 235, 252, 337, 742], "randomforest": [10, 121, 365, 413, 906, 907, 1033], "0001": [10, 149, 208, 259, 381, 418, 440, 444, 456, 468, 469, 475, 530, 535, 537, 544, 546, 547, 556, 557, 643, 644, 645, 646, 649, 650, 655, 656, 657, 658, 659, 660, 665, 666, 669, 671, 673, 675, 677, 684, 686, 690, 855, 856, 898, 899, 975], "250": [10, 66, 106, 108, 125, 176, 221, 341, 490, 689, 975, 998, 1035], "500": [10, 45, 51, 58, 61, 62, 64, 86, 87, 104, 106, 116, 118, 126, 148, 152, 176, 213, 214, 222, 240, 241, 246, 247, 251, 261, 264, 274, 284, 290, 296, 310, 317, 322, 343, 347, 365, 413, 466, 467, 471, 472, 473, 479, 480, 481, 608, 610, 611, 613, 618, 621, 622, 647, 648, 651, 652, 653, 677, 679, 680, 856, 975, 1001], "732": [10, 16, 202], "plot_prediction_lat": [10, 16], "conserv": [11, 393, 579, 586, 890, 891, 985, 998], "biologi": 11, "south": [11, 170, 297, 412], "american": [11, 12, 71, 82, 374, 406, 408, 412, 413, 414, 466, 471, 727, 878], "mammal": 11, "past": [11, 13, 383, 384, 387, 391, 394, 410, 411, 413, 535, 552, 553, 675, 1010, 1013, 1044], "environment": [11, 184, 218], "unsuccess": 11, "cast": [11, 54, 200, 222, 373, 393, 394, 414, 493, 641, 642, 643, 649, 653, 654, 657, 658, 659, 660, 661, 662, 670, 672, 951, 1035, 1036, 1037, 1038, 1041, 1043], "densiti": [11, 50, 56, 61, 66, 76, 102, 106, 149, 167, 186, 200, 215, 218, 225, 229, 233, 245, 252, 253, 261, 267, 279, 285, 290, 291, 298, 306, 337, 350, 376, 388, 393, 406, 413, 417, 425, 441, 443, 445, 447, 449, 461, 464, 495, 499, 533, 538, 546, 547, 793, 794, 795, 838, 839, 843, 844, 891, 980, 982, 985, 989, 991, 992, 998, 1006, 1008, 1012, 1022, 1023, 1030, 1032, 1036, 1037, 1043, 1044], "phillip": [11, 297, 495], "2006": [11, 297, 413, 416, 459, 495, 554, 555, 562, 563, 607, 608, 611, 616, 619, 646, 663, 664, 737, 784, 785, 793, 833, 891, 908, 909, 982, 986, 988, 991, 998, 999], "basemap": [11, 297], "coast": [11, 297], "nation": [11, 81, 297, 374, 845], "boundari": [11, 14, 26, 27, 28, 32, 35, 59, 61, 111, 114, 121, 130, 136, 153, 156, 167, 171, 183, 201, 229, 234, 237, 264, 292, 294, 295, 297, 300, 306, 308, 311, 324, 331, 332, 334, 335, 336, 337, 339, 346, 347, 348, 356, 375, 404, 413, 414, 416, 447, 453, 501, 533, 546, 547, 566, 585, 586, 588, 628, 731, 757, 795, 827, 840, 846, 848, 849, 850, 873, 877, 894, 895, 900, 902, 903, 906, 922, 980, 989, 992, 996, 999, 1000, 1001, 1028, 1030, 1032, 1041, 1042, 1043, 1045], "america": [11, 12, 81, 297, 845, 996], "bradypu": [11, 297, 495], "variegatu": [11, 297, 495], "brown": [11, 93, 297, 495, 625, 976, 1033, 1035, 1036, 1037, 1040], "throat": [11, 297, 495], "sloth": [11, 297, 495], "microryzomi": [11, 297, 495], "minutu": [11, 297, 495], "known": [11, 18, 26, 28, 40, 50, 58, 59, 82, 105, 106, 132, 157, 159, 165, 184, 200, 201, 218, 229, 261, 263, 270, 293, 297, 307, 319, 325, 334, 341, 351, 367, 376, 377, 379, 382, 387, 391, 393, 402, 403, 404, 406, 407, 408, 409, 410, 411, 413, 414, 416, 435, 460, 479, 481, 495, 505, 506, 541, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 585, 586, 588, 591, 606, 619, 630, 655, 656, 669, 679, 680, 691, 701, 707, 710, 715, 725, 739, 751, 753, 791, 827, 833, 834, 835, 836, 837, 840, 845, 848, 854, 882, 906, 907, 908, 909, 976, 978, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 996, 1001, 1002, 1012, 1017, 1019, 1020], "forest": [11, 28, 32, 111, 117, 121, 127, 128, 130, 132, 135, 136, 164, 167, 168, 174, 176, 229, 258, 297, 318, 350, 361, 372, 392, 393, 404, 405, 415, 460, 461, 487, 488, 492, 493, 495, 512, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 627, 631, 795, 800, 824, 831, 858, 872, 902, 906, 907, 908, 975, 976, 987, 994, 1007, 1008, 1023, 1025, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1037, 1045], "rice": [11, 297, 495, 1041], "rat": [11, 297, 495], "rodent": [11, 297, 495], "live": [11, 71, 170, 297, 379, 406, 495, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622], "peru": [11, 297, 495], "colombia": [11, 297, 495], "ecuador": [11, 297, 495], "venezuela": [11, 297, 495], "entropi": [11, 241, 273, 297, 318, 325, 326, 361, 406, 413, 418, 495, 530, 554, 561, 604, 605, 655, 714, 732, 733, 737, 791, 906, 908, 982, 983, 986, 990, 1002, 1030, 1032, 1036, 1037, 1042, 1044, 1045], "anderson": [11, 297, 495, 1034, 1040], "schapir": [11, 279, 297, 413, 495, 550, 551], "ecolog": [11, 297, 495], "190": [11, 124, 218, 270, 297, 385, 495], "231": [11, 297, 406, 417, 441, 495, 581], "259": [11, 223, 297, 413, 495, 564, 565], "________________________________________________________________________________": [11, 55, 350], "coastlin": [11, 149, 297, 376], "coverag": [11, 13, 125, 200, 218, 297, 382, 402, 495, 624, 717], "area": [11, 13, 128, 149, 200, 218, 239, 258, 261, 268, 270, 271, 337, 341, 342, 346, 376, 379, 383, 391, 406, 414, 699, 703, 704, 705, 738, 784, 785, 983, 986, 989, 1005, 1030], "roc": [11, 26, 117, 149, 167, 228, 230, 239, 240, 244, 254, 277, 386, 404, 410, 501, 507, 561, 655, 699, 703, 704, 705, 723, 738, 778, 784, 785, 814, 824, 827, 865, 903, 992, 1025, 1030, 1031, 1033, 1034, 1038, 1040, 1044], "868443": 11, "993919": 11, "elaps": [11, 48, 68, 118, 119, 120, 365, 461, 464, 566, 567, 857, 858, 859, 860], "astro": [11, 159, 221, 249], "washington": [11, 159, 221, 249, 289, 297], "fetch_species_distribut": [11, 297, 1037], "bunch": [11, 372, 373, 374, 461, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 504, 507, 564, 565, 566, 567, 629, 630, 631, 857, 858, 906, 907, 908, 909, 943, 946, 1010, 1021, 1033, 1035, 1038, 1040, 1044], "ll": [11, 56, 120, 256, 297, 379, 391, 529, 538, 978, 989, 1002, 1012], "otherwis": [11, 57, 63, 114, 161, 165, 181, 202, 208, 297, 341, 345, 361, 367, 377, 381, 383, 385, 393, 397, 406, 408, 410, 414, 416, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 450, 451, 461, 462, 464, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 493, 523, 524, 530, 531, 532, 533, 535, 537, 538, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 591, 594, 599, 607, 608, 611, 628, 629, 630, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 682, 683, 687, 689, 693, 694, 695, 697, 699, 700, 704, 706, 710, 711, 720, 722, 723, 724, 725, 726, 734, 737, 748, 750, 751, 752, 762, 770, 774, 777, 778, 779, 780, 781, 783, 784, 785, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 809, 813, 814, 817, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 855, 856, 858, 861, 862, 863, 864, 865, 869, 870, 877, 878, 879, 880, 883, 884, 885, 887, 888, 889, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 911, 913, 919, 921, 934, 935, 945, 947, 970, 972, 981, 982, 983, 986, 989, 990, 992, 993, 996, 998, 1000, 1001, 1006, 1010, 1012, 1030, 1036, 1037, 1038, 1041, 1044], "improvis": [11, 297], "mpl_toolkit": [11, 46, 68, 91, 102, 103, 171, 197, 221, 223, 297], "except": [11, 17, 45, 54, 99, 110, 118, 208, 215, 229, 236, 269, 284, 297, 301, 302, 306, 308, 321, 368, 372, 379, 381, 382, 383, 384, 391, 393, 397, 400, 403, 407, 410, 411, 413, 414, 416, 429, 457, 462, 465, 479, 480, 481, 506, 551, 553, 554, 555, 557, 559, 561, 562, 565, 567, 608, 624, 627, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 684, 708, 774, 802, 831, 832, 838, 839, 841, 844, 849, 855, 856, 862, 876, 878, 896, 899, 901, 904, 907, 909, 939, 972, 982, 986, 1001, 1012, 1020, 1021, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1045], "importerror": [11, 17, 54, 99, 284, 297, 387], "construct_grid": [11, 297], "object": [11, 14, 15, 20, 27, 45, 51, 63, 67, 71, 72, 99, 110, 132, 138, 147, 148, 157, 167, 171, 184, 196, 200, 216, 218, 228, 236, 240, 242, 243, 244, 259, 273, 297, 312, 319, 320, 322, 325, 351, 352, 361, 372, 373, 374, 379, 380, 382, 384, 385, 386, 388, 392, 393, 394, 397, 400, 406, 407, 408, 411, 414, 415, 416, 420, 422, 427, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 684, 685, 686, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 708, 715, 728, 729, 738, 754, 755, 777, 778, 785, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 918, 919, 920, 921, 922, 925, 929, 931, 941, 942, 943, 944, 945, 946, 947, 949, 951, 952, 954, 971, 972, 974, 982, 983, 984, 985, 989, 992, 993, 996, 999, 1000, 1001, 1006, 1007, 1012, 1013, 1015, 1016, 1019, 1021, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "func": [11, 76, 117, 170, 180, 218, 297, 379, 407, 462, 696, 862, 996, 1032, 1034, 1036, 1037, 1045], "xgrid": [11, 297], "ygrid": [11, 297], "correspond": [11, 13, 14, 17, 21, 27, 33, 42, 54, 66, 79, 83, 98, 112, 115, 118, 119, 121, 128, 145, 148, 149, 153, 158, 161, 170, 189, 192, 200, 201, 204, 209, 218, 230, 235, 236, 243, 251, 260, 262, 264, 265, 270, 271, 297, 311, 318, 319, 320, 351, 355, 356, 361, 366, 373, 374, 375, 378, 379, 381, 383, 386, 387, 392, 393, 394, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 421, 427, 434, 436, 438, 442, 445, 448, 450, 456, 458, 460, 461, 469, 479, 480, 481, 487, 488, 489, 490, 491, 492, 493, 531, 538, 541, 542, 543, 546, 547, 549, 552, 554, 556, 557, 558, 561, 579, 581, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 614, 627, 629, 630, 632, 640, 641, 642, 643, 644, 645, 649, 655, 656, 657, 658, 659, 665, 666, 668, 669, 670, 671, 672, 673, 675, 677, 678, 679, 680, 684, 687, 688, 689, 691, 700, 707, 710, 720, 721, 730, 734, 738, 748, 750, 770, 774, 778, 784, 785, 790, 792, 793, 794, 795, 798, 799, 801, 809, 817, 819, 827, 830, 833, 834, 835, 836, 837, 838, 839, 843, 844, 845, 847, 855, 856, 865, 868, 869, 871, 872, 875, 879, 887, 898, 899, 900, 903, 906, 907, 908, 909, 923, 929, 943, 946, 961, 975, 976, 978, 979, 980, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 996, 997, 1000, 1001, 1005, 1012, 1018, 1021, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "coordin": [11, 12, 14, 55, 101, 131, 156, 185, 221, 262, 297, 365, 411, 416, 440, 444, 445, 446, 458, 468, 469, 475, 528, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 547, 611, 643, 644, 648, 649, 650, 651, 652, 653, 655, 657, 658, 659, 660, 678, 679, 680, 681, 685, 686, 687, 690, 691, 703, 760, 765, 898, 982, 983, 1001, 1019, 1028, 1031, 1032, 1033, 1037, 1039, 1041, 1042, 1043], "corner": [11, 14, 27, 54, 169, 258, 262, 270, 271, 297, 379, 495, 910, 912, 986, 1042], "cell": [11, 12, 21, 27, 33, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 149, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 297, 303, 312, 317, 318, 320, 321, 327, 359, 376, 384, 689, 986, 987, 1034, 1042], "xmin": [11, 79, 190, 192, 209, 210, 297], "x_left_lower_corn": [11, 297, 495], "grid_siz": [11, 62, 297, 495], "xmax": [11, 79, 190, 192, 209, 210, 297], "nx": [11, 297, 495], "ymin": [11, 79, 187, 189, 192, 193, 201, 209, 261, 297], "y_left_lower_corn": [11, 297, 495], "ny": [11, 13, 260, 297, 376, 495, 976, 998], "create_species_bunch": 11, "species_nam": [11, 297], "record": [11, 97, 116, 172, 236, 312, 352, 365, 379, 406, 408, 447, 454, 495, 617, 640, 689, 767, 770, 774, 775, 776, 777, 821, 844, 1041, 1042], "join": [11, 12, 20, 56, 164, 218, 261, 308, 374, 394, 460, 1021, 1028, 1036], "ascii": [11, 297, 414, 484, 585, 586, 588], "pt": [11, 374, 415, 874, 996], "desir": [11, 25, 114, 149, 165, 200, 202, 306, 310, 372, 379, 381, 383, 387, 400, 403, 406, 409, 410, 411, 415, 500, 535, 537, 541, 544, 564, 590, 599, 600, 661, 667, 682, 683, 696, 705, 732, 838, 839, 843, 858, 863, 865, 868, 869, 871, 872, 874, 875, 879, 882, 884, 886, 887, 922, 978, 980, 983, 989, 996, 1000, 1001, 1002, 1012, 1028, 1036, 1037, 1038, 1041], "pts_": 11, "ix": [11, 270, 344], "searchsort": 11, "dd": [11, 12, 130, 297, 495], "ii": [11, 97, 171, 207, 256, 376, 414, 579, 580, 586, 635, 663, 664, 861, 870, 982, 996, 1005], "lat": [11, 297, 495, 760], "cov_": [11, 83], "plot_species_distribut": 11, "bradypus_variegatus_0": 11, "microryzomys_minutus_0": 11, "meshgrid": [11, 17, 27, 43, 59, 81, 121, 130, 153, 154, 155, 156, 158, 171, 211, 212, 213, 214, 226, 229, 250, 290, 297, 300, 308, 309, 330, 336, 337, 342, 343, 346, 347, 628], "bv_bunch": 11, "mm_bunch": 11, "background_point": 11, "c_": [11, 17, 26, 27, 28, 59, 81, 97, 102, 121, 124, 129, 130, 139, 141, 154, 198, 213, 216, 229, 290, 309, 311, 330, 337, 343, 346, 347, 406, 656, 711, 712, 715, 986, 1016, 1019, 1020], "randint": [11, 38, 82, 93, 124, 165, 172, 224, 232, 236, 238, 273, 318, 381, 384, 392, 397, 799, 816, 833, 834, 835, 837, 975, 976], "land": [11, 297, 394, 413], "water": 11, "land_refer": [11, 297], "standard": [11, 12, 13, 21, 27, 33, 35, 56, 62, 71, 72, 74, 81, 82, 87, 97, 112, 115, 117, 118, 119, 120, 121, 128, 132, 149, 152, 157, 159, 161, 170, 179, 185, 189, 198, 200, 209, 221, 222, 223, 234, 239, 251, 256, 259, 260, 261, 262, 264, 306, 311, 335, 350, 365, 366, 371, 372, 373, 375, 376, 377, 379, 381, 382, 384, 385, 388, 391, 393, 396, 400, 402, 406, 408, 409, 410, 414, 416, 443, 465, 469, 485, 493, 498, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 521, 522, 527, 529, 532, 538, 549, 587, 591, 608, 631, 641, 642, 647, 648, 651, 652, 653, 661, 662, 669, 670, 671, 672, 673, 675, 684, 686, 690, 784, 801, 816, 817, 835, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 862, 867, 868, 871, 874, 875, 876, 878, 886, 887, 888, 889, 896, 898, 899, 918, 975, 978, 982, 983, 986, 988, 989, 990, 992, 1000, 1001, 1007, 1010, 1012, 1017, 1019, 1020, 1021, 1023, 1034, 1035, 1036, 1037, 1039, 1040, 1041], "cov_train": 11, "train_cover_std": 11, "cyl": [11, 297], "llcrnrlat": [11, 297], "urcrnrlat": [11, 297], "llcrnrlon": [11, 297], "urcrnrlon": [11, 297], "drawcoastlin": [11, 297], "drawcountri": [11, 297], "9998": [11, 297], "k": [11, 12, 17, 18, 25, 27, 31, 32, 37, 38, 39, 43, 50, 54, 56, 57, 61, 64, 66, 69, 75, 76, 81, 92, 93, 96, 103, 104, 112, 114, 121, 125, 128, 130, 131, 133, 134, 138, 141, 145, 146, 149, 153, 155, 156, 160, 165, 167, 170, 171, 172, 173, 182, 183, 185, 194, 197, 204, 212, 214, 233, 235, 237, 238, 239, 246, 249, 261, 264, 265, 270, 271, 274, 284, 286, 289, 290, 291, 292, 293, 295, 296, 297, 307, 308, 309, 310, 313, 316, 320, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 349, 350, 352, 353, 359, 361, 366, 373, 374, 376, 379, 387, 388, 393, 397, 402, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 437, 440, 443, 444, 445, 446, 447, 448, 449, 450, 456, 457, 459, 466, 469, 485, 499, 501, 503, 509, 520, 528, 534, 538, 541, 542, 543, 546, 547, 550, 552, 554, 555, 556, 578, 586, 587, 588, 589, 591, 592, 593, 595, 596, 597, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 628, 636, 637, 645, 647, 648, 650, 651, 652, 653, 655, 656, 660, 661, 662, 663, 664, 666, 676, 677, 679, 680, 681, 682, 683, 685, 688, 692, 693, 701, 702, 705, 714, 722, 733, 739, 752, 754, 755, 757, 762, 765, 770, 771, 772, 773, 775, 789, 790, 791, 793, 794, 796, 800, 802, 803, 804, 807, 810, 811, 813, 814, 816, 822, 833, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 859, 863, 864, 865, 869, 870, 871, 873, 874, 878, 886, 891, 905, 913, 921, 930, 935, 960, 975, 976, 978, 979, 980, 982, 983, 984, 985, 988, 990, 991, 992, 994, 999, 1000, 1001, 1002, 1006, 1009, 1016, 1022, 1023, 1028, 1029, 1030, 1031, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043], "solid": [11, 17, 32, 34, 124, 155, 212, 213, 229, 239, 297, 308, 1010], "z": [11, 17, 59, 102, 121, 141, 154, 156, 171, 210, 212, 213, 221, 223, 229, 234, 250, 290, 297, 300, 308, 311, 330, 337, 342, 343, 347, 376, 403, 411, 413, 550, 551, 582, 636, 661, 668, 682, 683, 686, 690, 696, 720, 781, 878, 982, 983, 990, 991, 1043], "float64": [11, 14, 49, 54, 72, 124, 126, 127, 170, 171, 272, 320, 321, 366, 373, 379, 381, 393, 414, 468, 469, 475, 493, 494, 505, 506, 539, 578, 579, 586, 588, 638, 655, 670, 672, 696, 734, 863, 871, 872, 900, 901, 903, 904, 907, 909, 916, 918, 957, 960, 962, 963, 964, 1001, 1012, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045], "idx": [11, 17, 20, 46, 56, 106, 114, 118, 121, 133, 161, 171, 173, 184, 192, 199, 200, 209, 222, 356, 407, 410], "9999": [11, 218, 297, 328, 495, 624, 1036], "coverages_land": 11, "contourf": [11, 17, 121, 214, 234, 290, 297, 300, 308, 309, 330, 336, 342, 347, 628, 629], "pts_train": 11, "pts_test": 11, "auc": [11, 26, 149, 200, 218, 239, 258, 261, 265, 268, 270, 271, 404, 699, 705, 784, 986, 1033, 1036, 1040], "pred_background": 11, "pred_test": 11, "cov_test": 11, "r_": [11, 102, 106, 213, 214, 247, 268, 290, 291, 336, 342, 347, 406, 704, 986, 1002], "fpr": [11, 230, 239, 258, 270, 271, 386, 589, 593, 695, 699, 703, 723, 785, 986, 1025, 1028, 1044], "tpr": [11, 230, 239, 258, 270, 271, 386, 699, 703, 785, 986, 1025, 1028, 1044], "threshold": [11, 26, 43, 66, 99, 106, 149, 167, 171, 173, 195, 230, 232, 258, 259, 260, 268, 282, 322, 324, 331, 356, 359, 393, 406, 411, 413, 415, 438, 439, 442, 443, 466, 497, 505, 506, 528, 534, 539, 545, 546, 547, 560, 585, 588, 590, 594, 599, 600, 641, 664, 668, 673, 675, 689, 695, 697, 699, 700, 703, 704, 717, 722, 723, 735, 736, 752, 778, 784, 785, 790, 793, 794, 814, 833, 844, 845, 861, 863, 865, 881, 893, 894, 895, 903, 910, 912, 960, 982, 986, 989, 990, 992, 996, 999, 1001, 1002, 1007, 1028, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045], "roc_curv": [11, 230, 258, 270, 699, 703, 723, 778, 784, 986, 1028, 1029, 1030, 1033, 1034, 1036, 1041, 1044], "roc_auc": [11, 149, 261, 265, 270, 271, 386, 631, 699, 986, 1025], "ntime": [11, 272], "249": [11, 16], "plot_species_distribution_model": [11, 16, 495], "emploi": [12, 152, 235, 408, 414, 447, 475, 579, 586, 994, 1010, 1020, 1034], "techniqu": [12, 19, 71, 73, 98, 107, 113, 123, 140, 148, 149, 165, 167, 169, 208, 223, 225, 266, 279, 288, 319, 326, 341, 355, 367, 376, 391, 393, 404, 405, 406, 410, 411, 412, 413, 414, 415, 444, 445, 446, 447, 531, 551, 674, 686, 690, 691, 722, 752, 978, 982, 983, 985, 986, 989, 992, 994, 998, 1000, 1002, 1007, 1010, 1015, 1020, 1021, 1041], "histor": [12, 200, 1007], "quot": [12, 15, 71, 262, 350, 351, 366, 373, 374, 377, 383, 402, 405, 485, 486, 493, 986, 998, 1001, 1021, 1043], "quantiti": [12, 122, 261, 268, 318, 365, 393, 406, 413, 718, 719, 720, 781, 854, 975, 977, 980, 982, 1033], "daili": [12, 1010], "price": [12, 76, 122, 132, 239, 312, 976, 982, 1010, 1017], "link": [12, 18, 112, 170, 171, 179, 200, 204, 218, 246, 264, 294, 355, 366, 377, 378, 379, 380, 381, 383, 387, 393, 404, 406, 408, 411, 416, 558, 559, 607, 645, 666, 677, 685, 702, 917, 919, 982, 989, 1002, 1003, 1006, 1009, 1015, 1019, 1021, 1026, 1028, 1031, 1032, 1035, 1036, 1039, 1045], "fluctuat": [12, 61, 200, 268, 1036], "normalesup": [12, 33, 47, 67, 234], "2003": [12, 403, 406, 411, 414, 448, 449, 459, 510, 512, 686, 690, 833, 835, 982, 983, 988, 998, 1036], "2008": [12, 408, 410, 411, 475, 531, 560, 587, 642, 661, 682, 683, 689, 713, 722, 752, 828, 833, 837, 854, 980, 983, 984, 986, 987, 988, 991, 992, 1001], "calm": 12, "ago": [12, 1007], "tech": [12, 376, 836], "firm": [12, 406], "crash": [12, 379, 465, 888, 889, 896, 996, 1032, 1036, 1044, 1045], "nasdaq": 12, "alphavantag": 12, "symbol_dict": 12, "tot": 12, "xom": 12, "exxon": 12, "cvx": 12, "chevron": 12, "cop": 12, "conocophillip": 12, "vlo": 12, "valero": 12, "energi": [12, 387, 854, 991, 1019], "msft": 12, "ibm": [12, 20, 329, 352, 374], "twx": 12, "warner": [12, 1043, 1044], "cmcsa": 12, "comcast": 12, "cvc": 12, "cablevis": 12, "yhoo": 12, "yahoo": 12, "dell": 12, "hpq": 12, "hp": [12, 1021], "amzn": 12, "amazon": 12, "tm": [12, 989], "toyota": 12, "caj": 12, "canon": [12, 393, 404, 413, 479, 480, 482, 764, 1007, 1008, 1023], "sne": [12, 167, 220, 221, 222, 223, 225, 227, 511, 522, 689, 1022, 1023], "soni": [12, 1038, 1040], "ford": 12, "hmc": 12, "honda": 12, "nav": 12, "navistar": 12, "noc": 12, "northrop": 12, "grumman": 12, "ba": [12, 855, 856, 990], "boe": 12, "ko": [12, 27, 153], "coca": 12, "cola": 12, "mmm": 12, "3m": 12, "mcd": [12, 81, 82, 408, 466, 471], "mcdonald": 12, "pep": [12, 387, 1028], "pepsi": 12, "kellogg": 12, "un": [12, 379, 404, 414, 418, 530, 586, 791, 861, 870, 881, 885, 1037], "unilev": 12, "mar": [12, 1004], "marriott": 12, "pg": [12, 385, 646, 982, 1033], "procter": 12, "gambl": 12, "colgat": [12, 18], "palmol": 12, "ge": [12, 977, 988, 1040], "electr": [12, 376, 406], "wfc": 12, "fargo": 12, "jpm": 12, "jpmorgan": [12, 1010], "chase": [12, 1028], "aig": 12, "axp": 12, "bac": 12, "bank": [12, 20, 1010], "goldman": 12, "sach": 12, "aapl": 12, "appl": [12, 365, 377, 391, 987], "sap": 12, "csco": 12, "cisco": 12, "txn": 12, "texa": [12, 71], "instrument": [12, 71, 97, 169], "xrx": 12, "xerox": 12, "wmt": 12, "wal": 12, "mart": [12, 1038], "hd": 12, "depot": 12, "gsk": 12, "glaxosmithklin": 12, "pfe": 12, "pfizer": 12, "sny": 12, "sanofi": 12, "aventi": 12, "nv": 12, "novarti": 12, "kmb": 12, "kimberli": 12, "clark": 12, "ryder": 12, "gd": [12, 135], "dynam": [12, 13, 171, 552, 553, 554, 555, 560, 561, 562, 563, 576, 577, 673, 674, 675, 1002, 1010, 1034, 1040, 1045], "rtn": 12, "raytheon": 12, "cat": [12, 72, 171, 172, 239, 319, 320, 321, 322, 374, 414, 579, 709, 715, 750, 779, 879, 986, 996, 1037, 1038, 1040], "caterpillar": 12, "dupont": 12, "nemour": 12, "symbol": [12, 352, 366, 381, 385, 408, 414, 496, 579, 585, 586, 588, 910, 912, 1006], "fetch": [12, 18, 132, 170, 218, 372, 373, 374, 379, 383, 384, 387, 405, 411, 493, 552, 553, 554, 555, 560, 561, 562, 563, 585, 586, 588, 1036, 1044], "histori": [12, 368, 543, 556, 557, 1004, 1028], "stderr": [12, 827], "url": [12, 18, 149, 373, 376, 381, 383], "githubusercont": 12, "master": [12, 17, 284, 321, 379, 383, 1010, 1033], "financi": [12, 406, 413, 982], "csv": [12, 373, 376, 384, 1009, 1036, 1041], "read_csv": [12, 384, 493, 1043], "close_pric": 12, "vstack": [12, 27, 58, 66, 155, 156, 182, 246, 250, 284, 297, 342, 628, 987, 1036], "q": [12, 72, 86, 125, 200, 319, 403, 406, 411, 934, 982, 1001], "open_pric": 12, "carri": [12, 32, 112, 165, 261, 264, 269, 301, 308, 352, 394, 400, 414, 554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909, 1010, 1020], "invers": [12, 55, 78, 84, 112, 167, 251, 270, 276, 287, 337, 351, 352, 371, 393, 405, 407, 409, 410, 411, 414, 418, 442, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 524, 530, 531, 532, 536, 538, 540, 554, 558, 561, 586, 587, 588, 625, 641, 642, 655, 656, 663, 665, 671, 672, 673, 674, 675, 677, 720, 739, 748, 793, 794, 840, 841, 848, 849, 855, 856, 858, 862, 865, 871, 872, 874, 890, 891, 898, 899, 900, 903, 904, 906, 908, 924, 980, 982, 986, 989, 990, 996, 1000, 1001, 1019, 1021, 1022, 1023, 1028, 1031, 1036, 1039, 1040, 1042], "correl": [12, 28, 83, 86, 87, 107, 129, 145, 148, 157, 167, 168, 169, 171, 172, 174, 184, 189, 195, 218, 261, 282, 312, 317, 318, 372, 375, 376, 384, 393, 395, 403, 408, 410, 415, 447, 454, 479, 480, 482, 490, 491, 497, 521, 561, 603, 606, 624, 631, 632, 633, 679, 680, 739, 753, 774, 775, 776, 824, 838, 839, 875, 876, 878, 887, 977, 982, 987, 993, 996, 1000, 1002, 1007, 1008, 1023, 1028, 1029, 1030, 1041, 1042], "condition": [12, 28, 200, 404, 408, 754, 980], "connect": [12, 40, 45, 48, 52, 55, 63, 67, 68, 377, 379, 388, 393, 408, 438, 442, 449, 459, 460, 582, 583, 692, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 984, 989, 991, 999, 1032, 1041], "edge_model": 12, "graphicallassocv": [12, 83, 397, 408, 468, 470, 471, 472, 473, 475, 1036, 1040, 1042, 1044], "rather": [12, 54, 83, 112, 115, 164, 170, 200, 201, 214, 239, 310, 311, 350, 351, 361, 366, 375, 379, 381, 384, 385, 387, 391, 392, 393, 394, 406, 410, 411, 413, 414, 416, 445, 458, 460, 562, 578, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 626, 643, 644, 649, 650, 657, 658, 659, 660, 777, 809, 829, 831, 832, 861, 898, 899, 910, 935, 980, 982, 983, 986, 988, 989, 993, 1007, 1016, 1019, 1028, 1029, 1030, 1031, 1035, 1036, 1037, 1038, 1043, 1044], "former": [12, 352, 413, 414, 562, 797, 804, 813, 988, 1028, 1034, 1037], "recoveri": [12, 83, 184, 199, 408, 415], "03162278": 12, "05994843": 12, "11364637": 12, "21544347": 12, "40842387": 12, "77426368": 12, "46779927": 12, "7825594": 12, "27499706": 12, "rerun": [12, 27, 43, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359, 387], "trust": [12, 27, 72, 73, 82, 112, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 173, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359, 383, 394, 400, 404, 1016, 1042], "unabl": [12, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 157, 169, 170, 171, 172, 181, 184, 200, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359, 367, 878, 996, 1037], "render": [12, 27, 54, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 195, 204, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359, 379, 381, 383, 384, 385, 393, 548, 586, 628, 697, 699, 875, 887, 910, 912, 985, 1002, 1041, 1045], "nbviewer": [12, 27, 72, 73, 117, 119, 120, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359], "nbsp": [12, 13, 27, 72, 73, 117, 119, 120, 125, 128, 129, 132, 135, 146, 157, 170, 171, 172, 181, 189, 230, 231, 232, 236, 240, 241, 242, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 321, 327, 359], "graphicallassocvifittedgraphicallassocv": 12, "group": [12, 38, 41, 56, 59, 61, 134, 171, 173, 200, 222, 236, 252, 256, 312, 327, 351, 359, 374, 384, 393, 394, 397, 406, 412, 413, 414, 431, 443, 492, 585, 586, 588, 591, 715, 784, 795, 796, 797, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 825, 871, 872, 908, 909, 982, 983, 985, 986, 987, 996, 1002, 1003, 1004, 1006, 1012, 1015, 1016, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1044, 1045], "amongst": [12, 1002], "indic": [12, 20, 21, 26, 27, 28, 49, 60, 61, 67, 76, 87, 91, 96, 112, 117, 157, 160, 165, 169, 171, 197, 223, 233, 236, 255, 263, 264, 267, 268, 284, 297, 325, 326, 329, 350, 351, 352, 359, 366, 374, 379, 380, 381, 383, 387, 388, 391, 393, 402, 403, 404, 406, 408, 410, 411, 413, 414, 417, 421, 434, 437, 441, 447, 448, 449, 450, 452, 453, 454, 457, 461, 464, 469, 484, 505, 506, 508, 509, 510, 520, 529, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 578, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 617, 624, 625, 626, 627, 629, 630, 636, 644, 647, 648, 650, 651, 652, 658, 660, 662, 670, 672, 679, 680, 687, 689, 691, 693, 700, 704, 709, 710, 715, 716, 717, 721, 724, 725, 726, 727, 730, 734, 735, 736, 737, 750, 767, 774, 775, 776, 777, 779, 780, 781, 783, 784, 788, 789, 790, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 829, 831, 832, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 862, 865, 869, 871, 879, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 914, 918, 919, 924, 939, 949, 950, 976, 981, 982, 983, 986, 987, 988, 989, 990, 993, 994, 996, 997, 1000, 1001, 1007, 1012, 1016, 1019, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1036, 1038, 1039, 1041, 1043, 1044, 1045], "reflect": [12, 41, 47, 48, 81, 93, 97, 122, 171, 172, 200, 218, 270, 288, 351, 375, 378, 383, 393, 395, 403, 447, 453, 983, 986, 992, 994, 1020, 1029, 1037], "properti": [12, 26, 159, 160, 202, 217, 247, 286, 311, 359, 365, 368, 372, 379, 381, 396, 403, 404, 406, 408, 411, 413, 415, 416, 421, 439, 442, 448, 449, 450, 461, 462, 539, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 587, 588, 590, 591, 594, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 629, 643, 649, 652, 657, 659, 671, 672, 696, 701, 702, 705, 795, 798, 799, 809, 826, 827, 857, 858, 871, 872, 873, 879, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 978, 981, 982, 983, 986, 987, 989, 992, 996, 999, 1001, 1002, 1003, 1007, 1012, 1033, 1037, 1038, 1041, 1042, 1045], "impact": [12, 13, 26, 37, 38, 69, 76, 112, 145, 167, 169, 170, 171, 202, 204, 218, 239, 255, 279, 287, 311, 321, 345, 351, 361, 365, 366, 372, 391, 394, 404, 406, 411, 444, 446, 533, 537, 544, 587, 663, 664, 665, 669, 671, 673, 674, 675, 689, 790, 795, 798, 799, 809, 821, 838, 839, 840, 875, 887, 898, 899, 921, 935, 957, 960, 975, 985, 993, 1001, 1035, 1038, 1041], "affinity_propag": [12, 45], "covariance_": [12, 35, 81, 83, 466, 467, 468, 469, 470, 471, 472, 473, 546, 547, 980, 1035], "n_label": [12, 93, 237, 393, 484, 520, 710, 717, 722, 735, 736, 750, 752, 788, 789, 815, 986, 1034, 1036], "lai": [12, 311, 341, 992], "canva": [12, 17], "manifold": [12, 40, 53, 68, 224, 225, 226, 227, 284, 316, 320, 321, 327, 368, 372, 393, 406, 411, 413, 499, 522, 527, 541, 546, 563, 847, 859, 868, 891, 921, 989, 1022, 1023, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1045], "dens": [12, 56, 167, 178, 219, 320, 321, 329, 365, 388, 393, 406, 411, 413, 415, 440, 443, 444, 446, 461, 464, 493, 520, 521, 524, 531, 532, 541, 563, 582, 583, 604, 605, 626, 649, 654, 655, 656, 663, 664, 665, 669, 670, 673, 674, 675, 684, 685, 686, 689, 690, 756, 757, 763, 775, 788, 855, 856, 863, 870, 871, 873, 875, 876, 877, 878, 887, 888, 889, 890, 891, 898, 899, 900, 901, 903, 904, 936, 957, 960, 976, 979, 982, 983, 986, 987, 989, 992, 996, 998, 999, 1000, 1001, 1002, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045], "eigen_solv": [12, 45, 47, 67, 221, 222, 411, 449, 459, 532, 685, 686, 688, 690, 692, 983, 1029, 1038, 1041, 1042, 1043], "arpack": [12, 20, 45, 47, 67, 71, 222, 411, 448, 449, 450, 459, 532, 538, 541, 685, 686, 688, 690, 692, 983, 1034, 1035, 1040, 1044, 1045], "don": [12, 55, 71, 123, 170, 222, 236, 237, 261, 284, 328, 334, 338, 350, 351, 365, 373, 379, 381, 383, 385, 387, 391, 392, 397, 407, 414, 643, 649, 826, 906, 907, 908, 909, 950, 975, 982, 985, 987, 990, 992, 1000, 1009, 1021, 1032, 1037, 1044, 1045], "control": [12, 17, 35, 62, 100, 101, 118, 138, 157, 159, 184, 201, 204, 208, 232, 233, 262, 264, 279, 286, 303, 317, 319, 341, 355, 357, 358, 365, 366, 372, 375, 379, 381, 384, 387, 391, 393, 396, 400, 405, 406, 409, 410, 411, 412, 415, 416, 431, 437, 446, 451, 468, 469, 475, 528, 533, 534, 535, 536, 537, 540, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 590, 591, 593, 611, 616, 622, 624, 629, 631, 636, 638, 639, 643, 644, 646, 647, 648, 649, 651, 652, 653, 669, 671, 673, 674, 679, 680, 684, 689, 698, 706, 793, 794, 795, 797, 798, 799, 800, 801, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 824, 825, 828, 829, 832, 855, 856, 877, 879, 890, 891, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 912, 952, 954, 973, 975, 982, 983, 985, 986, 987, 989, 992, 993, 996, 998, 1000, 1001, 1002, 1006, 1007, 1008, 1019, 1023, 1028, 1030, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "neighbor": [12, 32, 40, 45, 48, 61, 130, 133, 140, 164, 165, 222, 223, 225, 229, 238, 239, 288, 289, 290, 291, 293, 294, 295, 297, 298, 318, 320, 321, 350, 368, 371, 376, 388, 393, 396, 406, 412, 413, 414, 417, 420, 430, 438, 441, 442, 445, 447, 449, 454, 455, 458, 460, 493, 499, 501, 560, 567, 599, 604, 605, 624, 625, 628, 685, 686, 687, 688, 689, 690, 693, 777, 795, 824, 858, 859, 878, 894, 902, 960, 987, 992, 1007, 1008, 1015, 1020, 1022, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035], "node": [12, 42, 122, 126, 184, 316, 322, 355, 359, 387, 388, 406, 408, 411, 413, 438, 439, 442, 460, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 647, 651, 653, 679, 680, 689, 838, 839, 906, 907, 908, 909, 910, 912, 940, 954, 989, 991, 992, 993, 1002, 1031, 1032, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043], "plane": [12, 149, 212, 234, 290, 339, 341, 342, 347, 376, 449, 459, 980, 982, 1001, 1019], "node_position_model": 12, "locallylinearembed": [12, 221, 222, 223, 320, 685, 687, 689, 983, 989, 1033, 1034, 1042, 1043, 1044], "n_neighbor": [12, 45, 63, 68, 133, 164, 221, 222, 223, 225, 229, 239, 284, 286, 287, 290, 291, 292, 293, 296, 311, 316, 318, 350, 413, 449, 599, 604, 605, 625, 685, 686, 688, 690, 693, 840, 841, 842, 844, 846, 847, 851, 893, 894, 976, 983, 989, 992, 999, 1035, 1042, 1044, 1045], "output": [12, 15, 17, 26, 28, 38, 54, 60, 99, 111, 112, 115, 121, 132, 136, 140, 141, 152, 160, 164, 165, 167, 170, 196, 228, 236, 243, 244, 249, 255, 259, 261, 264, 268, 270, 271, 279, 284, 307, 310, 312, 313, 316, 319, 320, 322, 351, 352, 354, 359, 360, 372, 373, 374, 376, 379, 381, 385, 387, 391, 392, 393, 404, 405, 406, 407, 409, 410, 413, 414, 415, 416, 422, 427, 430, 434, 438, 439, 440, 442, 443, 444, 446, 447, 449, 456, 457, 459, 460, 461, 462, 463, 464, 465, 479, 480, 481, 482, 485, 488, 489, 490, 491, 492, 493, 494, 500, 502, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 624, 625, 626, 627, 628, 629, 630, 632, 635, 636, 637, 638, 639, 643, 644, 647, 649, 650, 651, 654, 655, 657, 658, 659, 660, 663, 664, 665, 668, 670, 671, 673, 675, 676, 678, 679, 680, 681, 685, 686, 687, 689, 691, 693, 696, 697, 710, 711, 718, 719, 720, 722, 724, 731, 741, 742, 744, 746, 747, 748, 749, 750, 752, 757, 763, 768, 781, 784, 786, 787, 793, 794, 797, 798, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 841, 842, 843, 847, 848, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 886, 887, 890, 891, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 919, 921, 924, 935, 936, 942, 943, 945, 953, 973, 975, 976, 978, 980, 982, 983, 986, 987, 988, 989, 990, 993, 996, 1001, 1008, 1012, 1013, 1015, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "edg": [12, 27, 47, 67, 99, 122, 224, 268, 387, 393, 403, 406, 408, 450, 558, 559, 582, 583, 585, 586, 588, 793, 835, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 863, 911, 996, 999, 1010, 1034, 1036, 1039, 1042], "displai": [12, 13, 26, 28, 35, 38, 47, 49, 61, 72, 82, 83, 86, 87, 90, 96, 118, 123, 128, 129, 132, 167, 170, 171, 185, 187, 218, 228, 229, 239, 244, 250, 258, 262, 263, 268, 270, 275, 294, 312, 317, 318, 336, 356, 365, 379, 381, 382, 386, 388, 396, 405, 407, 411, 414, 415, 435, 461, 464, 465, 493, 538, 561, 627, 628, 629, 655, 684, 694, 695, 697, 698, 699, 710, 715, 778, 785, 795, 801, 809, 817, 824, 858, 859, 871, 873, 878, 896, 903, 910, 911, 912, 926, 952, 973, 986, 990, 1006, 1023, 1037, 1039, 1040, 1042, 1043], "strength": [12, 132, 159, 200, 204, 262, 316, 365, 409, 413, 443, 564, 565, 640, 645, 646, 649, 655, 656, 666, 669, 670, 671, 672, 673, 675, 677, 684, 779, 855, 856, 898, 899, 903, 904, 975, 982, 989, 992, 1000, 1001], "plan": [12, 373, 377, 379, 380, 394, 996, 1031], "fair": [12, 413, 687, 691, 827, 987, 1010], "crucial": [12, 169, 204, 256, 365, 378, 379, 394, 406, 416, 1001], "challeng": [12, 132, 152, 171, 179, 218, 229, 367, 374, 375, 406, 408, 459, 469, 986, 992, 1010, 1012], "overlap": [12, 13, 38, 56, 91, 126, 148, 224, 248, 351, 377, 403, 406, 410, 413, 414, 584, 788, 789, 796, 800, 802, 803, 804, 805, 813, 983, 996, 1034], "heurist": [12, 15, 124, 239, 350, 366, 406, 415, 446, 449, 458, 459, 505, 506, 534, 536, 543, 673, 674, 675, 688, 692, 798, 799, 900, 901, 902, 903, 904, 923, 983, 984, 989, 1000, 1002, 1010, 1019, 1028, 1029, 1033, 1037, 1040, 1041], "direct": [12, 86, 87, 96, 98, 102, 105, 149, 206, 246, 252, 258, 293, 303, 311, 337, 342, 377, 379, 380, 383, 387, 394, 396, 406, 409, 411, 414, 415, 449, 459, 468, 469, 475, 531, 538, 546, 585, 586, 588, 599, 638, 685, 847, 980, 981, 982, 987, 989, 991, 1007, 1020, 1028, 1031], "nearest": [12, 14, 32, 33, 40, 41, 51, 52, 55, 59, 62, 83, 90, 96, 99, 156, 165, 191, 212, 216, 238, 288, 290, 293, 294, 298, 303, 337, 342, 343, 347, 368, 371, 376, 388, 393, 406, 412, 413, 417, 420, 430, 441, 443, 445, 447, 449, 454, 458, 459, 493, 499, 501, 604, 605, 624, 625, 627, 628, 632, 685, 686, 688, 689, 693, 788, 789, 795, 824, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 858, 859, 863, 878, 960, 983, 992, 1001, 1007, 1008, 1015, 1023, 1028, 1030, 1031, 1032, 1033, 1035, 1037, 1038, 1040], "along": [12, 14, 57, 60, 67, 87, 119, 125, 187, 200, 234, 236, 265, 316, 351, 352, 361, 379, 383, 385, 387, 388, 393, 396, 397, 400, 403, 411, 413, 414, 415, 418, 530, 547, 584, 608, 609, 627, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 673, 675, 678, 679, 680, 681, 682, 683, 775, 776, 788, 795, 809, 867, 868, 871, 872, 875, 876, 877, 878, 883, 884, 885, 887, 888, 889, 914, 937, 961, 967, 975, 982, 989, 996, 999, 1010, 1028, 1033, 1034, 1036, 1040, 1041], "linecollect": [12, 224, 232, 629], "facecolor": [12, 17, 27, 35, 46, 61, 96, 103, 114, 141, 160, 221, 237, 261, 291, 308, 335, 338, 341, 342, 344], "partial_correl": 12, "precision_": [12, 83, 466, 467, 468, 469, 470, 471, 472, 473], "sqrt": [12, 81, 82, 83, 99, 102, 106, 116, 138, 173, 179, 181, 224, 226, 241, 246, 247, 248, 251, 252, 261, 342, 345, 406, 413, 414, 416, 460, 466, 467, 468, 469, 470, 471, 472, 473, 535, 537, 544, 554, 555, 556, 557, 561, 562, 616, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 696, 727, 759, 760, 765, 878, 891, 906, 907, 908, 909, 978, 982, 983, 986, 988, 998, 1042], "diag": [12, 83, 160, 248, 251, 411, 416, 529, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 793, 794, 982, 1043], "newaxi": [12, 14, 20, 25, 43, 83, 106, 113, 153, 181, 190, 196, 201, 202, 203, 205, 206, 217, 232, 234, 275, 289, 296, 357, 358, 403, 533, 982], "ab": [12, 18, 41, 76, 100, 107, 114, 122, 132, 145, 149, 173, 187, 191, 211, 213, 216, 218, 224, 261, 306, 335, 347, 406, 535, 537, 544, 624, 742, 838, 839, 873, 986], "triu": 12, "nipy_spectr": [12, 40, 47, 48, 52, 53, 61, 62, 103], "start_idx": [12, 224], "end_idx": [12, 224], "sequenc": [12, 112, 121, 188, 224, 381, 393, 407, 410, 411, 413, 414, 500, 509, 558, 559, 566, 567, 578, 579, 585, 586, 588, 643, 795, 798, 806, 824, 858, 882, 938, 939, 949, 957, 960, 1006, 1028, 1031, 1033, 1034], "line0": [12, 224], "linen": [12, 224], "x0": [12, 192, 209, 224, 306, 334, 393, 427, 461, 564, 565, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 861, 862, 863, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "y0": [12, 224], "x1": [12, 17, 86, 92, 114, 124, 155, 212, 224, 306, 334, 381, 393, 427, 461, 506, 564, 565, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 696, 861, 862, 863, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 1020], "y1": [12, 92, 114, 224, 506, 713, 987, 988], "xm": [12, 224], "ym": [12, 224], "segment": [12, 37, 48, 69, 167, 224, 232, 374, 387, 406, 414, 449, 459, 505, 506, 688, 854, 986, 1006, 1010, 1036, 1038, 1040], "lc": [12, 224, 232], "zorder": [12, 59, 98, 129, 141, 153, 161, 190, 198, 222, 224, 232, 235, 246, 317, 342], "hot_r": [12, 306], "norm": [12, 14, 15, 18, 31, 35, 41, 55, 99, 102, 155, 158, 179, 184, 186, 191, 224, 246, 247, 248, 250, 252, 258, 262, 289, 306, 337, 351, 385, 388, 393, 406, 414, 415, 439, 440, 444, 456, 457, 461, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 486, 528, 531, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 586, 587, 588, 594, 640, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 669, 671, 673, 675, 678, 681, 682, 683, 687, 689, 690, 691, 766, 835, 870, 885, 898, 900, 903, 968, 969, 979, 982, 984, 986, 996, 1000, 1031, 1033, 1035, 1039], "set_arrai": [12, 224, 232], "set_linewidth": [12, 224, 232], "add_collect": [12, 224, 232], "index": [12, 13, 15, 18, 38, 39, 40, 41, 42, 50, 51, 59, 72, 73, 112, 117, 119, 123, 146, 149, 157, 164, 169, 170, 171, 172, 173, 200, 204, 218, 240, 243, 247, 248, 252, 256, 259, 260, 261, 262, 264, 272, 273, 284, 306, 311, 312, 313, 320, 325, 326, 351, 352, 374, 376, 377, 379, 381, 383, 388, 391, 393, 403, 407, 410, 411, 413, 414, 421, 440, 444, 445, 446, 447, 448, 450, 451, 454, 456, 457, 461, 464, 500, 506, 554, 555, 556, 557, 561, 562, 563, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 614, 629, 630, 637, 694, 701, 702, 709, 713, 715, 727, 734, 753, 775, 776, 782, 784, 790, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 824, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 871, 906, 907, 908, 909, 939, 957, 960, 965, 966, 986, 988, 989, 990, 1000, 1002, 1006, 1019, 1021, 1028, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "dx": [12, 14, 523, 696], "dy": [12, 696], "this_dx": 12, "argmin": [12, 124, 260, 381, 408, 528, 534, 542, 543, 682, 775, 776, 1002], "this_di": 12, "horizontalalign": [12, 27, 32, 41, 45, 46, 63, 103, 229, 246, 300, 308], "verticalalign": [12, 27, 40, 41], "edgecolor": [12, 17, 25, 31, 32, 35, 43, 46, 57, 61, 68, 92, 93, 103, 114, 121, 128, 130, 131, 133, 134, 141, 144, 153, 154, 156, 160, 171, 183, 192, 202, 209, 212, 213, 214, 233, 234, 235, 237, 239, 246, 249, 261, 264, 275, 287, 290, 291, 292, 295, 300, 308, 309, 311, 330, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 347, 356, 357, 358, 628], "xlim": [12, 27, 45, 59, 63, 74, 79, 80, 81, 98, 114, 115, 116, 131, 138, 153, 154, 170, 179, 190, 192, 199, 206, 209, 214, 229, 237, 247, 252, 256, 270, 275, 290, 291, 336, 341, 342, 346, 358], "ptp": 12, "ylim": [12, 25, 27, 34, 38, 45, 59, 63, 79, 80, 81, 98, 114, 115, 122, 123, 125, 131, 134, 139, 153, 154, 170, 187, 189, 190, 192, 193, 194, 206, 209, 210, 214, 229, 237, 247, 252, 256, 260, 264, 270, 274, 275, 290, 291, 336, 341, 342, 346, 350, 358], "03": [12, 53, 68, 69, 81, 96, 136, 149, 150, 157, 162, 170, 181, 218, 227, 233, 244, 246, 252, 262, 298, 314, 326, 351, 376, 414, 744, 795, 982, 986], "676": [12, 16, 666], "plot_stock_market": [12, 16], "explor": [13, 38, 115, 116, 173, 225, 226, 239, 262, 263, 269, 270, 279, 313, 318, 337, 351, 361, 373, 376, 378, 385, 400, 406, 413, 469, 795, 798, 806, 879, 975, 982, 983, 985, 991, 993, 994, 996, 1010, 1015, 1021, 1034], "demo": [13, 19, 23, 37, 69, 128, 167, 173, 184, 206, 251, 262, 270, 311, 350, 351, 381, 403, 406, 414, 437, 438, 441, 443, 444, 445, 447, 448, 450, 452, 455, 499, 508, 509, 510, 538, 701, 702, 714, 716, 733, 789, 791, 859, 878, 879], "period": [13, 152, 157, 161, 383, 393, 394, 404, 416, 612, 816, 877, 1036, 1041, 1043], "summari": [13, 149, 320, 359, 361, 376, 391, 689, 710, 911, 984, 987, 1006, 1021], "style": [13, 25, 27, 82, 125, 189, 208, 218, 265, 379, 386, 406, 414, 440, 444, 456, 697, 801, 817, 918, 919, 1028, 1031, 1042], "background_gradi": 13, "set_table_attribut": 13, "inlin": [13, 211, 379, 380, 1002], "set_capt": 13, "set_table_styl": 13, "selector": [13, 72, 145, 146, 239, 345, 387, 414, 415, 463, 578, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 1030, 1038, 1040, 1044], "caption": [13, 71], "prop": [13, 74, 82, 206, 248, 290, 336, 359, 943, 946, 1017], "font": [13, 125, 189, 214, 234, 910, 912], "16px": 13, "000000": [13, 45, 170, 189, 218, 261, 310, 733], "502561": 13, "537775": 13, "546752": 13, "003683": 13, "376474": 13, "788755": 13, "627229": 13, "736540": 13, "189": [13, 200, 385, 895, 999], "463088": 13, "500008": 13, "438776": 13, "914405": 13, "005771": 13, "894801": 13, "592511": 13, "192930": 13, "196795": 13, "181": [13, 192, 219, 279, 303, 385], "387599": 13, "820000": 13, "940000": [13, 301], "665000": 13, "480000": 13, "001500": 13, "500000": [13, 301], "240000": 13, "630000": 13, "998000": 13, "060000": 13, "780000": 13, "997900": 13, "281": [13, 185, 219], "41": [13, 73, 77, 149, 200, 239, 359, 374, 376, 466, 489, 618, 621, 632, 655, 661, 682, 683, 696, 777, 833, 988, 992], "996900": 13, "sequenti": [13, 121, 143, 150, 167, 194, 262, 318, 377, 411, 413, 414, 497, 498, 531, 590, 594, 599, 600, 602, 603, 643, 644, 649, 650, 655, 657, 658, 659, 660, 670, 784, 858, 859, 878, 976, 994, 1000, 1006, 1008, 1023, 1028, 1037, 1040], "lagged_df": 13, "shift": [13, 37, 45, 69, 167, 179, 224, 251, 289, 303, 306, 341, 408, 412, 437, 445, 455, 458, 466, 509, 512, 686, 690, 844, 867, 996, 1022, 1023, 1028, 1032, 1036], "renam": [13, 251, 262, 379, 383, 406, 438, 442, 443, 444, 456, 468, 469, 475, 524, 533, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 871, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "lagged_count_1h": 13, "lagged_count_2h": 13, "lagged_count_3h": 13, "lagged_count_1d": 13, "lagged_count_1d_1h": 13, "lagged_count_7d": 13, "lagged_count_7d_1h": 13, "roll": [13, 68, 167, 220, 227, 382, 406, 527, 689, 690, 929, 1010, 1038, 1043, 1045], "lagged_mean_24h": 13, "lagged_max_24h": 13, "lagged_min_24h": 13, "lagged_mean_7d": 13, "lagged_max_7d": 13, "lagged_min_7d": 13, "tail": [13, 125, 165, 170, 200, 202, 261, 306, 518, 521, 982], "17369": 13, "247": [13, 878], "203": [13, 54], "224": [13, 15, 54, 86, 130, 358, 360, 406, 721], "157": [13, 149, 385], "160": [13, 237, 975, 1019], "169": [13, 59, 91, 94, 303], "135": [13, 149, 321, 376], "67": [13, 67, 170, 218, 376, 513, 514, 515, 624, 664, 710, 809, 976, 986, 1000, 1024, 1028], "732143": 13, "271": [13, 286, 298], "17370": 13, "315": [13, 134, 136, 284, 376], "138": [13, 385, 413, 986], "97": [13, 33, 106, 149, 173, 237, 252, 326, 337, 376, 385, 392, 410, 655, 981, 987, 996, 1028], "125000": 13, "785714": 13, "17371": 13, "214": [13, 15, 153, 581], "133": [13, 14, 57], "386905": 13, "17372": 13, "164": [13, 197, 219, 413], "123": [13, 116, 134, 186, 219, 351, 361, 413, 513, 514, 515, 552, 553, 831, 987, 994], "107": [13, 321, 406, 893, 987, 1030], "875000": 13, "464286": 13, "17373": 13, "109": [13, 25, 54, 193, 219, 987, 1030], "583333": 13, "244048": 13, "119": [13, 51, 69, 171, 980, 1031], "102": [13, 385, 1019, 1030], "458333": 13, "815476": 13, "110": [13, 77, 91, 179, 197, 207, 232, 312, 434, 980, 981], "166667": 13, "73": [13, 93, 114, 265, 326, 392, 795, 809, 844, 907, 996, 1017, 1024, 1028, 1030], "369048": 13, "791667": 13, "112": [13, 55, 149, 374, 376, 1030], "666667": 13, "190476": 13, "113": [13, 250, 253, 279, 385, 1031], "708333": 13, "422619": 13, "watch": [13, 366], "undefin": [13, 264, 393, 709, 725, 734, 737, 779, 986, 1036, 1040, 1044], "own": [13, 35, 118, 218, 236, 251, 284, 286, 327, 351, 366, 373, 382, 383, 384, 387, 388, 396, 405, 406, 418, 422, 437, 451, 530, 554, 561, 643, 793, 794, 840, 841, 842, 844, 846, 848, 849, 850, 872, 906, 908, 924, 929, 954, 982, 988, 989, 992, 996, 1001, 1006, 1010, 1020, 1021, 1035, 1036, 1038, 1045], "unknown": [13, 17, 57, 170, 236, 261, 325, 327, 367, 374, 393, 400, 403, 414, 865, 871, 872, 949, 985, 996, 1012, 1032, 1036, 1040, 1041], "nan": [13, 76, 122, 164, 165, 170, 218, 239, 241, 243, 256, 264, 312, 316, 321, 322, 365, 371, 381, 388, 393, 413, 443, 465, 493, 552, 553, 554, 558, 559, 561, 590, 591, 594, 600, 603, 606, 624, 625, 626, 627, 632, 709, 710, 711, 718, 719, 720, 724, 725, 726, 765, 774, 779, 780, 781, 783, 795, 798, 799, 801, 809, 817, 820, 821, 822, 825, 867, 868, 872, 874, 875, 878, 879, 883, 886, 887, 889, 916, 917, 918, 919, 961, 975, 986, 996, 1002, 1023, 1031, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "separ": [13, 14, 25, 26, 31, 32, 41, 56, 61, 63, 67, 74, 81, 95, 96, 101, 108, 112, 114, 117, 120, 130, 149, 165, 167, 171, 172, 176, 178, 201, 219, 222, 237, 248, 261, 264, 270, 271, 306, 308, 311, 318, 328, 332, 337, 341, 342, 348, 350, 361, 365, 375, 376, 381, 384, 387, 391, 393, 404, 406, 407, 408, 411, 413, 414, 416, 461, 509, 516, 530, 535, 537, 538, 544, 546, 578, 585, 586, 588, 607, 628, 635, 643, 644, 670, 673, 674, 687, 691, 721, 728, 741, 742, 744, 749, 788, 814, 830, 831, 857, 858, 900, 902, 903, 908, 909, 975, 976, 978, 980, 982, 983, 985, 992, 993, 996, 1000, 1001, 1017, 1019, 1020, 1028, 1031, 1033, 1034, 1038, 1040, 1041, 1044, 1045], "dropna": [13, 157], "17210": [13, 1039], "randomli": [13, 38, 49, 51, 62, 72, 89, 94, 115, 128, 164, 167, 171, 217, 233, 237, 251, 256, 267, 279, 282, 325, 361, 366, 388, 391, 392, 406, 410, 413, 416, 446, 455, 509, 512, 516, 520, 528, 534, 542, 543, 548, 556, 557, 558, 559, 560, 561, 562, 607, 608, 668, 676, 687, 691, 713, 793, 794, 854, 892, 906, 907, 908, 909, 985, 987, 989, 992, 994, 998, 1002, 1019, 1021, 1039, 1043, 1045], "percentag": [13, 55, 105, 122, 191, 218, 256, 264, 267, 410, 415, 531, 538, 541, 546, 590, 591, 645, 666, 677, 700, 730, 742, 813, 814, 815, 828, 910, 912, 987, 1002, 1030, 1034, 1040, 1041], "mape": [13, 742, 986], "aim": [13, 21, 82, 165, 204, 292, 327, 341, 367, 374, 377, 379, 393, 400, 406, 408, 414, 445, 982, 986, 989, 996, 1001, 1006, 1012, 1020, 1042], "futur": [13, 157, 201, 242, 319, 322, 377, 379, 381, 383, 391, 393, 394, 400, 410, 414, 493, 531, 632, 956, 986, 987, 1001, 1002, 1010, 1025, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "ulterior": 13, "independ": [13, 26, 28, 38, 47, 97, 98, 100, 117, 121, 159, 171, 238, 239, 261, 264, 266, 270, 282, 306, 313, 316, 351, 361, 365, 366, 375, 381, 383, 392, 393, 396, 403, 404, 405, 406, 407, 408, 409, 410, 414, 418, 446, 461, 485, 500, 512, 513, 514, 515, 517, 529, 530, 532, 534, 536, 537, 543, 544, 548, 549, 601, 604, 605, 622, 637, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 669, 670, 671, 672, 701, 702, 714, 732, 733, 751, 753, 791, 797, 823, 827, 829, 831, 832, 870, 874, 875, 876, 878, 882, 883, 884, 885, 887, 888, 889, 892, 900, 901, 902, 903, 904, 929, 975, 978, 980, 982, 983, 986, 987, 988, 991, 993, 996, 1001, 1002, 1022, 1023, 1028, 1029, 1034, 1036, 1038, 1043], "ident": [13, 20, 65, 124, 195, 200, 218, 229, 233, 330, 350, 374, 381, 393, 403, 406, 407, 408, 410, 416, 419, 435, 436, 449, 461, 462, 470, 472, 473, 476, 477, 478, 485, 500, 548, 556, 557, 561, 562, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 640, 676, 677, 696, 701, 702, 732, 781, 791, 797, 800, 810, 811, 812, 814, 815, 840, 841, 847, 855, 856, 862, 863, 875, 887, 906, 907, 979, 980, 983, 986, 989, 990, 1001, 1032, 1036, 1037, 1038, 1042], "tempor": [13, 184, 1006, 1007], "mean_absolute_percentage_error": [13, 122, 986, 1040, 1042], "3889873516666431": 13, "account": [13, 14, 56, 98, 105, 112, 157, 164, 170, 218, 236, 261, 287, 293, 345, 347, 351, 365, 375, 379, 393, 394, 400, 406, 409, 410, 411, 413, 414, 460, 558, 559, 564, 565, 624, 625, 627, 629, 630, 646, 670, 676, 701, 704, 724, 725, 726, 734, 739, 752, 779, 780, 783, 784, 796, 800, 813, 872, 978, 980, 984, 986, 987, 988, 989, 996, 1000, 1002, 1033, 1035, 1036, 1037, 1040, 1041, 1043, 1045], "cheat": [13, 337, 990, 1000, 1030], "fast": [13, 63, 176, 184, 189, 215, 216, 234, 235, 307, 352, 365, 374, 379, 388, 406, 408, 410, 411, 413, 414, 418, 443, 444, 466, 471, 505, 529, 530, 532, 535, 537, 541, 544, 561, 562, 563, 585, 586, 588, 629, 630, 637, 655, 656, 669, 671, 684, 696, 795, 809, 819, 820, 830, 831, 838, 839, 843, 854, 935, 978, 982, 985, 988, 989, 991, 992, 1002, 1006, 1010, 1021, 1028, 1029, 1034, 1035, 1038, 1039], "common": [13, 15, 18, 20, 99, 146, 149, 167, 168, 174, 256, 268, 279, 318, 341, 350, 352, 359, 365, 368, 373, 379, 381, 387, 389, 391, 392, 395, 397, 403, 404, 405, 406, 407, 410, 412, 415, 416, 462, 464, 493, 587, 629, 650, 669, 670, 698, 742, 749, 765, 796, 797, 800, 810, 812, 813, 814, 815, 816, 821, 824, 859, 861, 869, 870, 871, 876, 878, 883, 884, 886, 887, 888, 889, 937, 975, 976, 982, 989, 992, 996, 1001, 1002, 1006, 1007, 1010, 1012, 1023, 1028, 1036, 1038, 1039, 1043], "laptop": [13, 387, 465, 896, 1042, 1043, 1044], "3000": [13, 65, 224, 890, 891], "train_idx": [13, 170, 393], "test_idx": [13, 393], "44300751539296973": 13, "optimist": [13, 189, 266, 350, 361, 704, 982, 986], "cross": [13, 14, 35, 55, 59, 72, 75, 79, 83, 88, 104, 118, 121, 122, 124, 125, 137, 142, 143, 147, 149, 150, 170, 171, 178, 184, 188, 200, 202, 218, 219, 248, 249, 251, 254, 258, 261, 262, 263, 265, 267, 270, 275, 277, 279, 288, 303, 305, 307, 312, 314, 316, 318, 328, 337, 345, 368, 374, 379, 381, 388, 391, 392, 393, 397, 400, 401, 404, 407, 408, 411, 413, 414, 415, 416, 434, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 490, 498, 499, 501, 512, 538, 564, 565, 572, 590, 591, 594, 599, 603, 606, 639, 640, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 669, 670, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 698, 699, 703, 710, 724, 737, 781, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 829, 832, 858, 859, 863, 878, 879, 896, 898, 900, 903, 941, 985, 986, 989, 990, 994, 996, 1001, 1002, 1006, 1007, 1008, 1010, 1012, 1015, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045], "cross_val_scor": [13, 104, 139, 164, 165, 167, 254, 257, 266, 275, 277, 322, 340, 361, 379, 381, 391, 397, 410, 413, 517, 572, 700, 738, 795, 819, 821, 906, 907, 975, 986, 1016, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1040, 1041, 1044, 1045], "cv_mape_scor": 13, "neg_mean_absolute_percentage_error": [13, 122, 986, 994], "44300752": 13, "27772182": 13, "3697178": 13, "real": [13, 16, 32, 35, 56, 58, 71, 75, 79, 81, 112, 155, 170, 204, 225, 239, 255, 267, 275, 288, 307, 308, 341, 352, 365, 368, 372, 373, 376, 383, 385, 388, 391, 392, 393, 403, 404, 406, 408, 410, 411, 413, 414, 466, 486, 487, 490, 491, 492, 493, 494, 497, 498, 501, 507, 548, 549, 550, 552, 553, 554, 555, 556, 557, 561, 562, 589, 591, 592, 593, 594, 595, 596, 597, 628, 696, 701, 720, 724, 748, 751, 753, 781, 791, 823, 855, 856, 900, 901, 902, 903, 904, 907, 909, 976, 977, 978, 983, 986, 988, 990, 991, 992, 1002, 1005, 1023, 1028, 1041], "life": [13, 255, 387, 983], "advis": [13, 201, 236, 361, 377, 379, 406, 414, 434, 643, 649, 651, 657, 659, 669, 684, 954, 978, 982, 988, 990, 1001, 1042], "deviat": [13, 21, 35, 62, 81, 115, 118, 119, 120, 121, 149, 152, 157, 159, 161, 170, 179, 206, 239, 258, 259, 260, 261, 262, 264, 290, 291, 306, 311, 371, 375, 376, 384, 388, 393, 410, 413, 416, 447, 469, 498, 508, 509, 510, 511, 513, 514, 515, 519, 521, 522, 527, 549, 591, 608, 631, 641, 642, 668, 720, 748, 801, 817, 844, 867, 868, 878, 887, 888, 889, 982, 986, 992, 996, 1019, 1034, 1035, 1036, 1039, 1040, 1041], "363": 13, "make_scor": [13, 125, 265, 397, 410, 795, 820, 821, 986, 1037, 1045], "mean_absolute_error": [13, 200, 202, 218, 986, 1029, 1031], "mean_pinball_loss": [13, 125, 319, 982, 986, 1041], "root_mean_squared_error": [13, 746, 986, 1045], "consolidate_scor": 13, "1f": [13, 21, 51, 54, 99, 180, 200, 233, 246, 248, 268, 316, 351, 352], "pinball_loss_05": 13, "pinball_loss_50": 13, "pinball_loss_95": 13, "loss_funct": 13, "absolute_error": [13, 413, 555, 557, 559, 562, 668, 907, 909, 1041], "loss_func": 13, "n_job": [13, 55, 73, 74, 118, 119, 120, 125, 126, 132, 139, 148, 149, 164, 170, 171, 172, 173, 222, 224, 241, 260, 262, 263, 265, 276, 279, 284, 316, 317, 318, 321, 345, 366, 379, 393, 413, 417, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 528, 532, 533, 534, 536, 539, 540, 542, 543, 545, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 591, 599, 607, 629, 631, 636, 644, 648, 650, 652, 654, 655, 656, 658, 660, 662, 663, 665, 673, 676, 685, 686, 687, 688, 689, 690, 691, 770, 774, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 857, 860, 893, 894, 952, 954, 975, 986, 987, 989, 1016, 1017, 1021, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043], "fit_tim": [13, 59, 122, 189, 208, 263, 410, 821, 822], "startswith": [13, 71, 222, 297], "test_": [13, 132, 410], "x_i": [13, 81, 116, 144, 170, 201, 319, 345, 406, 411, 412, 413, 416, 611, 612, 616, 619, 620, 622, 833, 834, 837, 977, 978, 982, 988, 989, 990, 996, 1000, 1001, 1002], "fulli": [13, 45, 56, 119, 125, 365, 373, 374, 393, 406, 412, 413, 415, 440, 444, 554, 555, 561, 562, 906, 907, 908, 909, 910, 912, 975, 976, 982, 991, 999, 1006, 1041, 1042], "anticip": 13, "call": [13, 14, 18, 47, 49, 51, 55, 72, 93, 110, 117, 124, 146, 152, 156, 158, 160, 169, 171, 188, 200, 201, 204, 218, 236, 240, 242, 243, 261, 262, 270, 275, 276, 279, 284, 286, 311, 313, 318, 319, 350, 351, 352, 359, 365, 366, 367, 374, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 396, 397, 404, 406, 407, 408, 409, 410, 411, 413, 414, 416, 418, 429, 437, 440, 443, 444, 446, 447, 448, 449, 450, 451, 454, 457, 459, 461, 462, 465, 466, 471, 479, 480, 481, 485, 488, 489, 492, 494, 500, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 574, 579, 580, 582, 583, 585, 586, 588, 594, 599, 604, 605, 607, 608, 611, 614, 617, 624, 625, 626, 627, 628, 629, 631, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 701, 728, 738, 751, 767, 770, 774, 775, 776, 777, 789, 793, 794, 795, 797, 798, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 843, 844, 847, 849, 854, 855, 856, 857, 858, 861, 862, 863, 865, 867, 868, 870, 875, 878, 879, 882, 887, 888, 889, 890, 891, 895, 898, 899, 900, 901, 903, 904, 907, 909, 925, 929, 934, 935, 943, 944, 946, 952, 953, 954, 957, 960, 970, 975, 976, 978, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 994, 996, 998, 999, 1001, 1002, 1006, 1010, 1012, 1016, 1019, 1020, 1021, 1023, 1025, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "aleator": 13, "descript": [13, 149, 170, 312, 372, 373, 378, 379, 383, 384, 387, 393, 406, 414, 449, 459, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 504, 507, 541, 627, 673, 758, 761, 774, 986, 1000, 1001, 1007, 1009, 1021, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "quantile_list": 13, "styled_df_copi": 13, "extract_numer": 13, "mean_valu": 13, "std_valu": 13, "convert": [13, 18, 35, 47, 49, 67, 72, 99, 157, 173, 200, 221, 239, 242, 247, 248, 251, 252, 297, 365, 373, 374, 388, 391, 393, 400, 414, 437, 440, 441, 444, 446, 447, 448, 449, 456, 461, 462, 493, 531, 538, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 569, 578, 579, 585, 586, 587, 588, 590, 591, 603, 624, 625, 626, 627, 643, 649, 655, 656, 657, 659, 663, 664, 665, 667, 671, 673, 674, 675, 689, 774, 853, 862, 863, 865, 869, 871, 872, 873, 875, 898, 906, 907, 908, 909, 916, 918, 919, 941, 971, 972, 975, 982, 983, 984, 986, 996, 997, 1001, 1002, 1021, 1028, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1043, 1044, 1045], "cols_to_convert": 13, "col": [13, 20, 26, 28, 39, 43, 50, 56, 60, 64, 65, 71, 118, 133, 221, 239, 346, 508, 510], "min_valu": [13, 624, 1039, 1040], "mask": [13, 14, 43, 67, 120, 200, 208, 239, 259, 260, 329, 388, 393, 407, 413, 466, 471, 558, 559, 578, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 626, 627, 629, 630, 646, 668, 795, 798, 799, 809, 958, 976, 993, 1028, 1031, 1033, 1034, 1036, 1038], "bold": [13, 61, 125, 189, 195, 379], "07": [13, 16, 86, 99, 106, 136, 170, 196, 218, 219, 244, 253, 270, 277, 304, 311, 353, 361, 374, 406, 558, 559, 689, 986, 1000], "17": [13, 20, 40, 53, 75, 81, 153, 162, 170, 199, 225, 227, 233, 264, 279, 280, 300, 310, 351, 374, 377, 384, 396, 398, 399, 406, 410, 441, 458, 484, 494, 497, 520, 528, 533, 537, 544, 546, 547, 552, 556, 557, 566, 567, 594, 625, 646, 654, 655, 656, 663, 666, 669, 671, 684, 689, 725, 726, 736, 757, 762, 780, 783, 785, 813, 836, 847, 862, 867, 868, 876, 878, 884, 900, 903, 906, 907, 908, 909, 975, 976, 987, 989, 996, 1004, 1024, 1026, 1028, 1029, 1030, 1031, 1034, 1037, 1042], "06": [13, 16, 23, 36, 161, 170, 191, 199, 200, 219, 239, 261, 262, 277, 303, 308, 331, 344, 385, 479, 480, 481, 641, 642, 686, 690, 793, 794, 795, 809, 907, 982, 996, 998], "55": [13, 170, 176, 195, 200, 218, 223, 326, 384, 406, 410, 488, 594, 795, 801, 809, 822, 986, 1028], "00": [13, 16, 23, 29, 33, 36, 69, 77, 81, 84, 88, 94, 99, 108, 136, 142, 150, 157, 162, 166, 170, 171, 174, 177, 191, 218, 219, 227, 233, 244, 253, 259, 262, 277, 280, 283, 298, 303, 304, 314, 323, 325, 326, 331, 348, 351, 353, 360, 373, 376, 385, 406, 413, 414, 710, 712, 784, 795, 809, 822, 907, 982, 986, 996, 998, 1000, 1020], "145": [13, 406], "92": [13, 33, 51, 99, 146, 176, 259, 303, 325, 326, 337, 374, 376, 535, 537, 544, 559, 594, 795, 809, 981, 1021], "86": [13, 33, 71, 146, 191, 308, 325, 326, 784, 906, 986, 1017], "58": [13, 67, 80, 376, 408, 419, 472, 760, 996, 1017], "wherea": [13, 35, 49, 54, 68, 81, 128, 214, 239, 262, 263, 264, 270, 287, 311, 341, 345, 346, 367, 394, 410, 413, 441, 562, 655, 656, 797, 813, 826, 978, 985, 987, 989, 996, 1002, 1041], "That": [13, 96, 112, 149, 189, 229, 261, 265, 351, 352, 366, 373, 387, 393, 410, 415, 416, 440, 443, 444, 554, 561, 590, 813, 906, 907, 975, 983, 984, 986, 992, 1002, 1037, 1038], "pinbal": [13, 125, 319, 559, 667, 719, 744, 982, 1041, 1042], "5th": [13, 125, 160, 406], "95th": [13, 125, 744], "gbrt_mean_poisson": 13, "mean_predict": [13, 159], "gbrt_median": 13, "median_predict": 13, "gbrt_percentile_5": 13, "percentile_5_predict": 13, "gbrt_percentile_95": 13, "percentile_95_predict": 13, "fill_between": [13, 125, 138, 152, 157, 159, 161, 179, 180, 218, 261, 263, 264, 265, 271, 801, 817], "interv": [13, 28, 111, 136, 159, 167, 184, 200, 201, 202, 218, 261, 374, 393, 404, 410, 413, 416, 435, 436, 513, 514, 515, 554, 555, 557, 559, 561, 562, 632, 633, 635, 674, 738, 744, 746, 799, 816, 824, 861, 863, 877, 900, 901, 902, 922, 978, 982, 986, 996, 1002, 1035, 1039], "At": [13, 76, 112, 205, 273, 279, 282, 325, 328, 365, 366, 383, 394, 397, 402, 409, 413, 434, 437, 462, 585, 586, 588, 599, 826, 828, 865, 950, 975, 982, 985, 987, 991, 1000, 1010], "night": 13, "band": [13, 264, 308, 996], "narrow": [13, 115, 125, 306, 308, 384, 838, 839], "certain": [13, 56, 170, 205, 217, 236, 261, 284, 310, 341, 361, 374, 375, 377, 383, 393, 395, 406, 411, 415, 635, 646, 650, 655, 660, 681, 858, 863, 898, 975, 978, 982, 983, 986, 987, 990, 996, 1001, 1006, 1012, 1016, 1033, 1037, 1040, 1043], "And": [13, 167, 220, 227, 236, 261, 350, 387, 400, 406, 410, 414, 527, 585, 586, 588, 689, 690, 982, 986, 1004, 1035], "correct": [13, 27, 28, 58, 82, 112, 160, 170, 184, 189, 200, 218, 246, 255, 261, 268, 270, 279, 282, 337, 339, 350, 361, 376, 379, 381, 383, 394, 404, 405, 406, 410, 411, 413, 414, 447, 453, 466, 471, 485, 498, 500, 632, 664, 673, 675, 700, 701, 705, 709, 710, 715, 718, 719, 720, 724, 725, 726, 730, 734, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 779, 780, 781, 783, 786, 787, 790, 792, 826, 827, 828, 835, 843, 869, 971, 982, 986, 987, 1001, 1012, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "wider": [13, 202, 414, 911, 982], "probabl": [13, 24, 28, 29, 30, 35, 36, 56, 76, 93, 111, 133, 136, 144, 151, 152, 153, 154, 162, 167, 170, 221, 225, 230, 233, 261, 264, 267, 268, 271, 306, 310, 316, 318, 328, 330, 365, 368, 374, 375, 381, 385, 391, 393, 406, 410, 411, 414, 415, 416, 432, 433, 434, 435, 436, 443, 444, 446, 501, 509, 512, 520, 524, 546, 547, 548, 550, 552, 554, 556, 558, 561, 564, 566, 567, 590, 591, 607, 610, 611, 619, 624, 628, 629, 630, 655, 656, 668, 673, 689, 695, 697, 699, 700, 703, 704, 706, 709, 713, 717, 722, 723, 725, 735, 736, 737, 738, 752, 778, 780, 783, 784, 785, 790, 793, 794, 795, 798, 799, 809, 823, 824, 827, 829, 830, 833, 834, 835, 836, 837, 840, 843, 848, 854, 855, 879, 891, 892, 893, 894, 895, 898, 900, 903, 906, 908, 980, 981, 982, 983, 984, 985, 986, 988, 989, 990, 991, 992, 993, 996, 998, 999, 1000, 1002, 1007, 1008, 1009, 1021, 1023, 1028, 1030, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1042], "visibl": [13, 170, 171, 202, 347, 373, 379, 406, 854, 991, 1033, 1043], "lie": [13, 61, 86, 148, 170, 234, 306, 327, 335, 337, 411, 413, 603, 846, 848, 849, 850, 898, 899, 980, 983, 986, 996, 1001], "span": [13, 56, 79, 125, 234, 258, 374, 406, 414, 546, 633, 795, 798, 986, 1020], "underestim": [13, 125, 171, 200, 218, 261, 379], "calibr": [13, 29, 31, 218, 368, 393, 397, 509, 512, 561, 566, 655, 673, 706, 725, 737, 780, 783, 784, 824, 836, 895, 898, 975, 982, 986, 999, 1001, 1008, 1023, 1025, 1032, 1034], "confid": [13, 25, 26, 27, 28, 157, 159, 247, 261, 264, 328, 394, 404, 416, 633, 655, 656, 663, 665, 668, 671, 672, 673, 695, 699, 704, 717, 722, 723, 735, 736, 752, 785, 826, 865, 898, 900, 903, 982, 985, 986, 987, 992, 999, 1000, 1001, 1010, 1021, 1038], "produc": [13, 14, 26, 27, 45, 58, 71, 99, 125, 126, 127, 128, 184, 267, 303, 328, 361, 374, 375, 379, 381, 384, 393, 394, 406, 407, 410, 411, 413, 437, 440, 443, 449, 516, 533, 556, 560, 578, 585, 590, 591, 629, 630, 797, 798, 799, 807, 812, 815, 819, 863, 873, 900, 903, 977, 978, 982, 984, 985, 986, 989, 992, 993, 997, 999, 1000, 1001, 1012, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "overli": [13, 26, 27, 189, 266, 361, 411, 986], "mapi": 13, "recent": [13, 202, 236, 368, 377, 380, 384, 387, 393, 406, 465, 535, 562, 1000, 1010, 1031, 1040], "conform": [13, 578, 625, 826, 827, 986, 1006, 1007, 1035, 1041], "epistem": 13, "sktime": [13, 1006], "extend": [13, 56, 57, 68, 110, 201, 250, 268, 337, 376, 377, 391, 393, 404, 405, 406, 411, 413, 628, 717, 827, 830, 831, 863, 865, 882, 898, 899, 913, 978, 986, 987, 1001, 1007, 1008, 1023, 1033, 1034, 1035, 1036, 1038, 1043], "recurs": [13, 128, 143, 150, 167, 355, 381, 405, 406, 410, 437, 438, 439, 442, 460, 499, 512, 560, 590, 591, 594, 599, 629, 630, 655, 814, 903, 986, 989, 992, 993, 1002, 1008, 1020, 1023, 1028, 1038, 1039], "enabl": [13, 31, 51, 73, 123, 171, 208, 223, 236, 308, 317, 319, 320, 322, 346, 377, 379, 384, 387, 391, 393, 396, 397, 402, 405, 406, 407, 411, 413, 414, 446, 461, 465, 531, 532, 538, 556, 557, 558, 559, 560, 576, 577, 587, 588, 599, 607, 793, 794, 795, 798, 819, 820, 821, 858, 859, 871, 872, 895, 896, 898, 899, 900, 901, 902, 903, 904, 913, 946, 953, 976, 978, 983, 985, 986, 989, 996, 997, 1000, 1001, 1007, 1010, 1028, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "plot_time_series_lagged_featur": [13, 16], "parallel": [14, 111, 116, 118, 121, 136, 167, 171, 202, 262, 317, 318, 320, 342, 359, 364, 371, 379, 380, 382, 383, 391, 393, 407, 415, 417, 418, 434, 441, 443, 445, 446, 447, 449, 454, 455, 458, 461, 464, 469, 492, 528, 530, 531, 532, 534, 536, 538, 539, 540, 542, 543, 545, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 586, 591, 599, 607, 629, 631, 636, 655, 685, 686, 687, 688, 689, 690, 691, 770, 774, 777, 795, 798, 799, 801, 806, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 857, 860, 893, 894, 954, 956, 1007, 1016, 1021, 1023, 1028, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1043, 1044], "acquir": [14, 120, 263, 1040], "angl": [14, 35, 99, 149, 246, 247, 248, 251, 252, 376, 411, 528, 534, 536, 539, 540, 542, 543, 545, 647, 648, 649, 650, 651, 652, 653, 660, 661, 662, 675, 679, 680, 681, 682, 683, 689, 983, 984, 1008, 1023, 1028], "Such": [14, 128, 152, 157, 169, 179, 184, 189, 201, 264, 350, 393, 394, 410, 411, 413, 552, 553, 653, 976, 986, 989, 996, 1002, 1019, 1038, 1043, 1045], "ct": [14, 160, 243, 407, 461, 463, 464], "cellular": 14, "materi": [14, 394, 578, 888, 889, 1005], "haar": 14, "wavelet": [14, 106, 411], "sparsiti": [14, 83, 167, 178, 184, 193, 215, 216, 219, 235, 351, 365, 393, 408, 411, 413, 415, 498, 499, 524, 528, 534, 535, 536, 537, 540, 542, 543, 544, 643, 649, 654, 655, 673, 675, 718, 719, 720, 867, 873, 878, 883, 979, 982, 989, 996, 1015, 1020, 1030], "oper": [14, 20, 149, 160, 167, 235, 254, 258, 268, 277, 352, 365, 366, 376, 377, 379, 382, 385, 391, 393, 394, 396, 400, 402, 410, 411, 413, 414, 415, 419, 445, 458, 465, 472, 479, 480, 481, 482, 501, 530, 531, 538, 548, 549, 563, 569, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 613, 618, 621, 627, 632, 640, 655, 686, 690, 699, 703, 704, 705, 723, 770, 777, 778, 784, 785, 814, 824, 827, 838, 839, 861, 865, 870, 881, 882, 896, 903, 906, 937, 954, 959, 982, 989, 996, 1001, 1006, 1010, 1019, 1032, 1034, 1035, 1036, 1038, 1039, 1044], "fidel": 14, "penal": [14, 31, 83, 132, 184, 189, 193, 200, 204, 216, 218, 311, 345, 406, 408, 411, 415, 466, 467, 468, 469, 470, 471, 472, 473, 475, 644, 649, 650, 658, 660, 673, 702, 712, 730, 782, 791, 871, 898, 899, 905, 982, 986, 988, 990, 1000, 1001, 1019], "algorithm": [14, 18, 19, 23, 30, 32, 37, 38, 43, 44, 46, 47, 57, 58, 62, 63, 67, 69, 80, 86, 96, 98, 112, 113, 114, 118, 121, 167, 176, 187, 189, 203, 216, 223, 225, 228, 232, 239, 244, 247, 248, 249, 252, 258, 261, 270, 284, 290, 291, 293, 297, 306, 308, 311, 316, 317, 318, 321, 336, 350, 351, 361, 365, 367, 372, 373, 374, 375, 376, 379, 380, 381, 382, 387, 388, 392, 393, 395, 402, 403, 405, 406, 408, 409, 410, 411, 413, 414, 416, 417, 418, 419, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 466, 471, 472, 475, 479, 480, 481, 485, 500, 508, 509, 510, 511, 512, 519, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 541, 542, 543, 544, 545, 550, 551, 552, 553, 556, 557, 560, 588, 600, 601, 607, 608, 632, 634, 636, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 701, 702, 705, 714, 716, 731, 733, 739, 770, 774, 775, 789, 791, 793, 794, 826, 835, 836, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 854, 859, 863, 865, 878, 882, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 918, 934, 935, 937, 951, 961, 976, 978, 981, 983, 984, 985, 986, 988, 991, 992, 996, 999, 1000, 1001, 1005, 1006, 1007, 1008, 1010, 1012, 1015, 1016, 1018, 1020, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "computation": [14, 79, 96, 118, 124, 132, 152, 284, 341, 350, 364, 380, 405, 406, 407, 410, 411, 413, 416, 535, 629, 630, 668, 759, 795, 797, 798, 799, 809, 821, 982, 983, 985, 993, 994, 998, 1020, 1023, 1032], "comparison": [14, 20, 24, 29, 30, 36, 37, 43, 49, 69, 80, 95, 97, 98, 108, 112, 118, 125, 130, 135, 143, 150, 151, 162, 167, 172, 182, 184, 186, 188, 191, 198, 204, 215, 220, 223, 227, 228, 232, 244, 248, 254, 256, 258, 277, 282, 300, 308, 310, 311, 316, 318, 330, 334, 349, 351, 353, 361, 374, 376, 393, 404, 408, 409, 411, 415, 416, 434, 435, 440, 443, 444, 446, 485, 501, 509, 511, 512, 519, 522, 538, 546, 547, 550, 561, 562, 578, 579, 585, 586, 587, 588, 603, 605, 607, 608, 612, 619, 622, 628, 636, 640, 655, 669, 685, 686, 687, 688, 689, 701, 734, 739, 775, 784, 795, 796, 797, 798, 800, 801, 809, 811, 812, 813, 814, 815, 816, 824, 833, 836, 840, 855, 859, 871, 872, 876, 878, 879, 883, 884, 885, 886, 887, 888, 889, 898, 900, 901, 903, 904, 906, 975, 980, 983, 986, 988, 989, 992, 1001, 1025], "l2": [14, 31, 41, 83, 86, 167, 178, 184, 185, 191, 200, 211, 215, 216, 218, 219, 262, 284, 306, 329, 350, 351, 381, 388, 391, 406, 408, 411, 414, 438, 442, 447, 454, 521, 535, 537, 544, 555, 558, 559, 562, 586, 587, 588, 640, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 669, 673, 675, 677, 678, 683, 684, 685, 731, 746, 757, 758, 774, 775, 776, 809, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 855, 856, 870, 878, 885, 898, 899, 903, 904, 905, 907, 909, 969, 975, 979, 982, 984, 989, 990, 996, 1000, 1002, 1019, 1021, 1030, 1032, 1033, 1035, 1037], "circular": 14, "central": [14, 202, 406, 992, 1006], "emmanuel": [14, 67, 1028, 1035, 1036, 1037], "gouillart": [14, 67, 1028], "nsup": 14, "ndimag": [14, 47, 48, 55, 303, 1020], "_weight": [14, 218], "orig": [14, 291], "floor_x": 14, "floor": 14, "astyp": [14, 38, 42, 45, 46, 54, 61, 63, 67, 82, 103, 122, 124, 141, 169, 190, 191, 218, 224, 235, 239, 272, 284, 313, 414, 976, 982, 1035], "hstack": [14, 34, 43, 134, 145, 226, 238, 256, 340, 410, 857], "_generate_center_coordin": 14, "l_x": 14, "mgrid": [14, 141], "build_projection_oper": 14, "n_dir": 14, "endpoint": [14, 307, 340, 632], "data_ind": 14, "camera_ind": 14, "data_unravel_indic": 14, "xrot": 14, "ind": [14, 43, 124, 134, 351, 838, 839], "logical_and": [14, 125], "proj_oper": 14, "coo_matrix": [14, 186, 449, 582, 583, 957, 960], "generate_synthetic_data": 14, "n_pt": 14, "ogrid": 14, "mask_out": 14, "rand": [14, 25, 38, 39, 40, 41, 45, 50, 59, 63, 104, 115, 129, 131, 144, 179, 184, 223, 224, 229, 235, 236, 275, 296, 317, 318, 329, 330, 344, 351, 357, 358, 388, 397, 541, 701, 702, 712, 753, 777, 782, 890, 891, 893, 894, 895, 998, 1012, 1028, 1039, 1040], "gaussian_filt": [14, 47, 48, 55, 1020], "sigma": [14, 47, 48, 55, 81, 104, 125, 259, 261, 403, 408, 411, 413, 611, 646, 980, 982, 984, 988, 991, 1020], "logical_xor": [14, 156, 343], "binary_eros": 14, "128": [14, 15, 155, 162, 200, 365, 533], "proj": [14, 646], "randn": [14, 34, 35, 40, 55, 66, 67, 81, 82, 99, 104, 128, 144, 152, 156, 169, 172, 189, 194, 195, 199, 213, 214, 217, 247, 250, 251, 256, 268, 270, 271, 275, 290, 291, 313, 317, 318, 336, 342, 343, 347, 381, 384, 640, 667, 669, 675, 816, 901, 904], "rgr_ridg": 14, "rec_l2": 14, "lassocv": [14, 132, 138, 170, 184, 189, 397, 413, 415, 648, 649, 651, 652, 653, 660, 681, 982, 1016, 1028, 1031, 1035, 1038, 1039, 1041, 1042, 1045], "rgr_lasso": 14, "rec_l1": 14, "interpol": [14, 33, 41, 51, 52, 55, 59, 83, 90, 96, 99, 156, 159, 167, 178, 191, 216, 219, 232, 238, 270, 288, 296, 303, 326, 337, 343, 416, 632, 642, 650, 660, 669, 681, 697, 704, 841, 849, 859, 873, 877, 977, 982, 986, 996, 1035, 1040], "wspace": [14, 15, 40, 45, 46, 63, 81, 96, 114, 200, 218, 229, 246, 248, 249, 252, 289, 297, 326, 334], "378": [14, 16, 170, 351, 413, 1021, 1028], "plot_tomography_l1_reconstruct": [14, 16], "nmf": [15, 73, 385, 405, 414, 532, 535, 541, 544, 1022, 1023, 1028, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "latentdirichletalloc": [15, 367, 384, 411, 1006, 1033, 1035, 1042, 1043], "corpu": [15, 351, 352, 374, 411, 585, 586, 587, 588, 1021, 1029], "frobeniu": [15, 99, 440, 444, 456, 466, 467, 468, 469, 470, 471, 472, 473, 528, 534, 535, 537, 542, 543, 544, 982, 1035], "kullback": [15, 221, 411, 535, 537, 544, 689, 983, 1035], "leibler": [15, 221, 411, 535, 537, 544, 689, 983, 1035], "diverg": [15, 124, 221, 226, 289, 535, 537, 544, 689, 854, 983, 985, 986, 991, 993, 1035, 1036, 1041], "probabilist": [15, 28, 31, 83, 95, 108, 151, 152, 155, 159, 162, 167, 350, 393, 404, 412, 413, 434, 470, 473, 529, 531, 532, 538, 556, 585, 586, 607, 619, 640, 642, 673, 700, 737, 795, 820, 865, 900, 901, 903, 904, 979, 980, 982, 985, 986, 991, 996, 1001, 1002, 1006, 1010, 1028, 1031, 1035], "semant": [15, 350, 351, 393, 541, 1021, 1022, 1023, 1030], "runnabl": [15, 383, 384], "coupl": [15, 53, 54, 56, 222, 373, 374, 403, 404, 406, 415, 586, 904, 975, 1001], "ten": [15, 20, 112, 118, 149, 222, 252, 374, 376, 413, 517, 903, 1037], "polynomi": [15, 164, 167, 175, 177, 178, 200, 206, 219, 241, 261, 275, 318, 319, 334, 344, 371, 375, 449, 488, 617, 636, 637, 638, 640, 669, 761, 770, 771, 824, 859, 868, 870, 873, 877, 898, 900, 901, 902, 903, 904, 981, 1001, 1008, 1023, 1040, 1041], "lda": [15, 34, 95, 108, 167, 293, 361, 376, 402, 501, 533, 538, 546, 547, 847, 1006, 1008, 1022, 1023, 1033], "proport": [15, 27, 41, 148, 186, 200, 207, 213, 229, 239, 264, 287, 291, 294, 345, 347, 365, 374, 404, 406, 408, 410, 411, 413, 414, 435, 436, 443, 466, 471, 512, 546, 547, 552, 554, 556, 557, 558, 559, 560, 561, 580, 581, 585, 588, 624, 629, 655, 656, 663, 664, 665, 671, 672, 673, 675, 693, 698, 709, 796, 797, 798, 799, 812, 815, 824, 844, 855, 856, 872, 898, 899, 900, 903, 904, 906, 908, 910, 912, 924, 975, 985, 986, 989, 992, 1000, 1001, 1002, 1033, 1045], "070": 15, "tf": [15, 20, 233, 350, 351, 352, 374, 411, 518, 541, 585, 586, 587, 588, 837, 845, 870, 975, 984, 988, 996, 1006, 1021], "idf": [15, 20, 233, 350, 351, 352, 374, 411, 518, 541, 585, 586, 587, 588, 837, 845, 870, 975, 984, 988, 996, 1021, 1028], "232": [15, 986], "2000": [15, 27, 41, 51, 76, 97, 104, 123, 176, 249, 252, 261, 279, 300, 320, 351, 374, 376, 406, 407, 413, 418, 449, 459, 530, 531, 556, 686, 688, 690, 739, 784, 793, 844, 874, 886, 983, 986, 992, 998, 1012, 1020], "069": [15, 259, 342, 348], "202": 15, "minibatchnmf": [15, 367, 411, 1042, 1044, 1045], "batch_siz": [15, 20, 43, 65, 96, 99, 100, 351, 411, 446, 531, 533, 534, 535, 536, 543, 854, 855, 856, 938, 939, 952, 1029, 1036, 1039, 1041, 1042], "080": [15, 229, 244], "898": 15, "ensta": [15, 18, 38, 49, 62, 200, 218, 222, 262, 264, 350, 351, 352], "chyi": [15, 1031, 1032, 1033, 1034, 1035], "kwei": [15, 1031, 1032, 1033, 1034, 1035], "yau": [15, 1031, 1032, 1033, 1034, 1035], "chyikwei": 15, "fetch_20newsgroup": [15, 20, 71, 262, 329, 350, 351, 352, 374, 486, 1021, 1033, 1038], "countvector": [15, 329, 352, 374, 384, 407, 411, 414, 486, 533, 579, 586, 587, 588, 1021, 1028, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041], "tfidfvector": [15, 20, 71, 262, 350, 374, 411, 414, 486, 585, 586, 587, 1021, 1028, 1030, 1036, 1037, 1038, 1041, 1042], "n_top_word": 15, "init": [15, 43, 46, 59, 60, 62, 65, 171, 180, 221, 222, 224, 225, 226, 247, 249, 284, 351, 382, 387, 406, 411, 413, 440, 444, 446, 448, 450, 456, 457, 535, 537, 544, 545, 556, 557, 629, 630, 687, 689, 691, 847, 983, 1028, 1037, 1040, 1042, 1043, 1044], "nndsvda": [15, 411, 535, 537, 544, 1037, 1040], "plot_top_word": 15, "feature_nam": [15, 20, 91, 107, 119, 126, 129, 149, 170, 172, 209, 240, 287, 306, 316, 317, 318, 334, 350, 356, 372, 374, 384, 407, 487, 488, 489, 493, 497, 498, 499, 501, 502, 507, 579, 628, 629, 630, 879, 910, 911, 912, 994, 1002, 1044], "flatten": [15, 33, 224, 234, 259, 310, 334, 346, 385, 499, 566, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 847], "topic_idx": 15, "top_features_ind": 15, "argsort": [15, 18, 20, 21, 22, 124, 126, 172, 173, 200, 218, 316, 325, 326, 350, 351, 374, 994], "top_featur": 15, "barh": [15, 126, 164, 165, 169, 170, 172, 173, 243, 313, 350, 351, 352], "fontdict": [15, 40], "labels": [15, 310], "set_vis": [15, 35, 288, 294, 306], "filter": [15, 47, 48, 206, 218, 259, 261, 286, 350, 374, 381, 385, 388, 405, 406, 414, 445, 485, 486, 500, 585, 588, 592, 593, 594, 595, 770, 833, 927, 951, 988, 989, 1018, 1021, 1038], "useless": [15, 121, 264, 385, 415, 512, 525, 655, 709, 982, 996, 1037], "strip": [15, 218, 351, 365, 373, 374, 493], "header": [15, 71, 262, 350, 351, 374, 377, 414, 485, 486, 795, 798, 799, 809], "footer": [15, 71, 262, 350, 351, 374, 485, 486], "repli": [15, 350, 378, 379, 382], "english": [15, 20, 71, 350, 351, 352, 384, 414, 585, 586, 588, 1006, 1007, 1021, 1041], "occur": [15, 71, 200, 204, 218, 345, 361, 379, 381, 387, 394, 403, 406, 408, 410, 414, 441, 505, 506, 569, 578, 585, 587, 588, 624, 668, 794, 795, 798, 799, 801, 809, 817, 820, 821, 822, 825, 868, 923, 986, 988, 996, 1021, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "data_sampl": 15, "tfidf_vector": 15, "max_df": [15, 262, 329, 350, 351, 585, 588, 1039], "min_df": [15, 20, 71, 262, 329, 350, 351, 414, 585, 588, 1028, 1030, 1039], "max_featur": [15, 32, 116, 127, 238, 258, 273, 318, 413, 415, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 585, 588, 594, 906, 907, 908, 909, 975, 982, 1028, 1030, 1031, 1035, 1036, 1039, 1042, 1045], "stop_word": [15, 20, 350, 351, 414, 585, 586, 588], "tfidf": [15, 71, 329, 414, 588, 1021], "tf_vector": 15, "beta_loss": [15, 535, 537, 544, 1035], "alpha_w": [15, 411, 535, 537, 544, 1041], "00005": 15, "alpha_h": [15, 411, 535, 537, 544, 1041], "tfidf_feature_nam": 15, "get_feature_names_out": [15, 20, 170, 172, 319, 350, 351, 352, 374, 381, 393, 407, 414, 422, 427, 430, 439, 440, 442, 444, 446, 461, 464, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 563, 564, 565, 566, 567, 578, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 685, 686, 689, 842, 847, 850, 854, 857, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 996, 1041, 1042, 1043, 1044], "solver": [15, 31, 34, 35, 47, 67, 167, 178, 189, 191, 192, 193, 200, 202, 215, 216, 218, 219, 300, 301, 302, 303, 313, 350, 385, 391, 393, 396, 402, 406, 418, 449, 459, 468, 469, 475, 499, 530, 532, 537, 538, 541, 544, 546, 643, 644, 645, 649, 650, 655, 656, 657, 658, 659, 660, 663, 665, 666, 667, 669, 671, 673, 677, 678, 681, 684, 685, 686, 688, 690, 692, 784, 809, 824, 829, 832, 855, 856, 900, 901, 902, 903, 904, 980, 983, 986, 990, 1000, 1001, 1006, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "mu": [15, 81, 82, 261, 411, 419, 470, 472, 473, 476, 477, 478, 537, 544, 980, 982, 1035, 1038], "mbnmf": 15, "learning_method": [15, 384, 533], "learning_offset": [15, 533], "tf_feature_nam": 15, "234": [15, 16, 54, 833, 837, 855, 856, 988], "plot_topics_extraction_with_nmf_lda": [15, 16], "882": [16, 261], "execut": [16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 136, 142, 150, 162, 164, 166, 174, 177, 184, 189, 219, 227, 235, 244, 253, 266, 277, 280, 283, 298, 304, 314, 323, 331, 348, 353, 360, 366, 379, 385, 400, 402, 406, 411, 417, 440, 458, 795, 801, 809, 817, 819, 820, 821, 822, 825, 843, 952, 953, 996, 999, 1013, 1021, 1030, 1033, 1036], "auto_examples_appl": 16, "09": [16, 98, 99, 106, 170, 233, 237, 274, 277, 303, 406, 731, 836, 986, 996, 1000], "04": [16, 31, 41, 43, 53, 55, 69, 86, 98, 106, 136, 142, 149, 157, 162, 166, 170, 174, 181, 199, 218, 237, 246, 252, 261, 262, 274, 277, 297, 298, 323, 344, 348, 376, 413, 415, 468, 469, 784, 795, 809, 982, 986, 990, 1000], "svm_gui": [16, 17, 1019], "wikipedia_principal_eigenvector": [16, 18], "graphic": [17, 20, 82, 171, 329, 350, 351, 352, 374, 385, 405, 406, 408, 411, 788, 789, 793, 828, 910, 986, 987, 993, 1006, 1021], "frontend": [17, 385], "mainli": [17, 28, 54, 112, 115, 152, 270, 279, 365, 381, 404, 608, 988, 993], "intend": [17, 58, 59, 100, 201, 341, 350, 379, 380, 381, 386, 391, 410, 465, 579, 670, 696, 867, 868, 878, 896, 981, 982, 986, 990, 997], "didact": [17, 379, 1007], "region": [17, 26, 37, 48, 50, 54, 57, 67, 69, 133, 159, 167, 170, 200, 218, 229, 233, 234, 252, 309, 337, 345, 376, 386, 393, 406, 413, 416, 445, 447, 453, 459, 584, 983, 986, 989, 992, 996, 1000, 1002, 1020], "induc": [17, 27, 57, 170, 184, 191, 193, 198, 201, 215, 235, 239, 345, 352, 403, 405, 411, 413, 443, 446, 536, 540, 550, 554, 555, 556, 557, 561, 562, 563, 640, 722, 752, 871, 906, 907, 908, 909, 979, 986, 1000, 1019], "mous": [17, 373], "button": [17, 379, 387, 1019], "prettenho": 17, "tkagg": 17, "backend": [17, 366, 393, 465, 896, 952, 954, 956, 986, 1031, 1036, 1037, 1038, 1039], "backend_tkagg": 17, "figurecanvastkagg": 17, "navigationtoolbar2tk": 17, "navigationtoolbar2tkagg": 17, "deprec": [17, 319, 368, 382, 383, 388, 393, 397, 434, 438, 442, 443, 444, 446, 447, 454, 456, 475, 523, 524, 533, 534, 535, 536, 537, 543, 550, 551, 552, 553, 566, 567, 576, 577, 579, 624, 630, 635, 641, 642, 647, 648, 651, 652, 653, 655, 661, 662, 737, 738, 746, 747, 752, 764, 774, 775, 776, 798, 799, 801, 819, 820, 821, 833, 834, 835, 837, 845, 857, 871, 900, 901, 902, 903, 904, 914, 929, 930, 932, 975, 976, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "tkinter": 17, "tk": 17, "contourset": 17, "dump_svmlight_fil": [17, 1028, 1029, 1033, 1043], "y_min": [17, 32, 59, 114, 121, 130, 141, 154, 234, 300, 308, 330, 341, 342, 632, 634], "y_max": [17, 32, 59, 114, 121, 130, 141, 154, 218, 234, 300, 308, 330, 341, 342, 632, 634], "x_min": [17, 32, 53, 59, 114, 121, 125, 130, 141, 154, 189, 234, 300, 308, 330, 341, 342], "x_max": [17, 32, 53, 59, 114, 121, 130, 141, 154, 234, 300, 308, 330, 341, 342], "notifi": [17, 569, 570, 571, 1009, 1026, 1038], "regist": [17, 184, 350, 385, 954, 956], "surfac": [17, 111, 136, 167, 192, 209, 333, 334, 354, 360, 413, 501, 550, 554, 561, 628, 760, 906, 912, 980, 985, 1000, 1001, 1002], "surface_typ": 17, "add_observ": 17, "set_surfac": 17, "intvar": 17, "coef0": [17, 176, 341, 344, 449, 532, 636, 637, 640, 771, 773, 900, 901, 902, 903, 904, 984, 1001], "kernel_map": 17, "hasattr": [17, 45, 57, 63, 83, 110, 121, 218, 233, 300, 308, 350, 393, 947, 1038], "x2": [17, 86, 92, 114, 124, 155, 212, 381, 407, 585, 626, 696, 1020], "decision_surfac": 17, "delta": [17, 409, 449], "clear_data": 17, "add_exampl": 17, "example_ad": 17, "refit": [17, 119, 138, 167, 254, 260, 262, 265, 277, 393, 410, 416, 499, 564, 624, 656, 662, 710, 795, 798, 799, 809, 824, 903, 975, 982, 986, 1035, 1036, 1037], "docstr": [17, 379, 381, 385, 393, 445, 458, 469, 696, 698, 925, 975, 986, 989, 990, 1000, 1028, 1035, 1036, 1041, 1042], "set_xlim": [17, 32, 43, 61, 76, 81, 93, 117, 130, 165, 171, 198, 200, 205, 234, 246, 265, 267, 279, 289, 300, 306, 308, 309, 310, 311, 317, 346], "attributeerror": [17, 407, 556, 574, 947, 1020, 1037, 1038, 1040, 1044, 1045], "get_tk_widget": 17, "pack": [17, 388, 1036], "fill": [17, 35, 121, 138, 172, 256, 289, 356, 393, 407, 411, 512, 524, 535, 537, 544, 584, 627, 910, 912, 976, 989, 1002], "_tkcanva": 17, "mpl_connect": 17, "button_press_ev": 17, "onclick": 17, "toolbar": 17, "controllbar": 17, "c_label": 17, "plot_kernel": 17, "exp": [17, 47, 55, 67, 102, 106, 115, 125, 153, 184, 210, 289, 294, 297, 317, 318, 322, 341, 404, 406, 407, 412, 418, 449, 462, 518, 530, 533, 612, 613, 619, 638, 755, 762, 772, 855, 856, 874, 980, 982, 984, 988, 989, 990, 999, 1000, 1001, 1019], "xdata": 17, "ydata": 17, "update_exampl": 17, "scalex": 17, "scalei": 17, "examples_load": 17, "remove_surfac": 17, "plot_support_vector": 17, "plot_decision_surfac": 17, "old": [17, 218, 379, 383, 385, 406, 465, 533, 643, 649, 896, 983, 1007, 1009, 1028, 1033, 1034, 1036, 1041, 1042, 1043], "isinst": [17, 35, 121, 218, 393], "lineset": 17, "support_vector": [17, 335], "circl": [17, 35, 61, 101, 130, 131, 141, 226, 237, 291, 294, 301, 306, 308, 327, 341, 358, 375, 383, 387, 406, 449, 459, 511, 519, 760, 1001], "dash": [17, 34, 81, 112, 124, 134, 152, 155, 157, 170, 187, 192, 195, 201, 202, 209, 212, 213, 239, 261, 271, 339, 343, 1000], "bone": [17, 213, 347], "rais": [17, 110, 201, 236, 237, 264, 310, 319, 379, 381, 383, 384, 385, 388, 391, 393, 397, 400, 407, 410, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 506, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 573, 574, 578, 579, 585, 586, 587, 588, 590, 591, 599, 600, 607, 608, 614, 624, 626, 629, 632, 633, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 693, 695, 699, 706, 708, 709, 710, 711, 723, 725, 726, 734, 752, 774, 778, 779, 780, 783, 784, 785, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 809, 813, 817, 820, 821, 822, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 847, 848, 849, 853, 855, 856, 857, 858, 861, 862, 863, 864, 865, 870, 871, 872, 876, 877, 878, 885, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 913, 916, 918, 919, 921, 922, 939, 943, 947, 970, 971, 972, 973, 986, 996, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "valueerror": [17, 236, 237, 381, 385, 397, 465, 574, 600, 614, 632, 668, 711, 830, 848, 857, 863, 877, 917, 921, 922, 971, 972, 973, 996, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045], "fm": 17, "kernel_group": 17, "radiobutton": 17, "command": [17, 233, 365, 366, 377, 379, 383, 385, 387, 396, 414, 505, 1006, 1021, 1030], "anchor": [17, 272], "valbox": 17, "stringvar": 17, "textvari": 17, "cmap_group": 17, "hyperplan": [17, 167, 178, 192, 209, 219, 237, 264, 332, 334, 337, 341, 342, 348, 509, 628, 655, 656, 663, 665, 671, 672, 673, 674, 898, 900, 902, 903, 1000, 1001], "train_button": 17, "get_pars": 17, "optpars": 17, "optionpars": 17, "op": [17, 383, 655, 656, 663, 664, 665, 673, 674, 675, 855, 856, 898, 996], "add_opt": 17, "action": [17, 319, 350, 378, 382, 383, 396, 996, 1038], "store": [17, 33, 54, 55, 71, 73, 82, 91, 146, 160, 176, 186, 189, 204, 222, 230, 240, 251, 266, 270, 325, 352, 359, 365, 373, 374, 379, 381, 386, 387, 388, 391, 393, 407, 409, 411, 413, 414, 416, 417, 435, 437, 441, 443, 447, 454, 466, 467, 470, 471, 472, 473, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 505, 531, 532, 538, 546, 547, 552, 553, 554, 555, 560, 561, 562, 563, 566, 567, 586, 607, 608, 624, 628, 629, 632, 635, 646, 647, 651, 657, 658, 659, 660, 663, 664, 670, 672, 673, 674, 675, 685, 686, 687, 689, 694, 695, 697, 698, 699, 777, 793, 794, 795, 801, 809, 817, 838, 839, 840, 841, 842, 844, 846, 847, 848, 849, 850, 853, 869, 876, 878, 879, 893, 894, 895, 918, 919, 943, 944, 957, 960, 976, 978, 982, 989, 998, 1001, 1002, 1006, 1012, 1021, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "dest": [17, 321], "dump": [17, 18, 400, 484, 838, 839], "argv": [17, 233], "opt": [17, 377, 381], "arg": [17, 236, 301, 380, 393, 411, 413, 420, 568, 569, 570, 571, 572, 573, 574, 575, 614, 696, 862, 982, 988, 989], "parse_arg": 17, "wm_titl": 17, "mainloop": 17, "__main__": [17, 329, 391], "classic": [18, 195, 225, 246, 252, 376, 383, 408, 410, 411, 440, 444, 446, 456, 489, 497, 501, 507, 629, 630, 908, 909, 980, 982, 985, 988, 996, 1006, 1015, 1028, 1029, 1033, 1042], "graph": [18, 26, 40, 45, 47, 67, 68, 160, 221, 258, 284, 286, 328, 365, 379, 382, 393, 403, 408, 417, 438, 441, 442, 449, 450, 454, 459, 460, 468, 469, 475, 508, 582, 583, 685, 688, 689, 692, 778, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 853, 894, 983, 986, 989, 991, 999, 1002, 1006, 1010, 1017, 1020, 1028, 1035, 1036, 1038, 1041, 1043], "vertex": [18, 27, 406, 450, 1041], "en": [18, 25, 387, 528, 534, 592, 633, 661, 665, 668, 682, 683, 692, 702, 840, 841, 846, 847, 848, 849, 876, 892, 906, 907, 982, 986, 1001, 1002], "wiki": [18, 25, 385, 387, 592, 633, 665, 668, 692, 702, 840, 841, 846, 847, 848, 849, 876, 892, 906, 907, 982, 1002], "eigenvector_centr": 18, "webpag": [18, 176, 379], "pagerank": 18, "insid": [18, 20, 27, 171, 202, 236, 261, 327, 337, 367, 373, 374, 381, 385, 397, 406, 414, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 586, 587, 588, 591, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 796, 797, 802, 804, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 943, 946, 954, 993, 1010], "accord": [18, 25, 27, 38, 50, 79, 118, 124, 149, 153, 183, 200, 218, 233, 316, 341, 351, 361, 379, 381, 391, 392, 393, 394, 403, 406, 408, 410, 411, 413, 414, 416, 434, 447, 449, 453, 457, 459, 462, 466, 501, 513, 514, 515, 522, 527, 529, 532, 533, 535, 537, 547, 550, 551, 558, 559, 560, 563, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 638, 639, 641, 642, 646, 655, 656, 667, 677, 688, 692, 731, 775, 776, 795, 796, 797, 798, 799, 802, 803, 804, 809, 819, 833, 834, 835, 836, 837, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 861, 868, 876, 888, 890, 891, 898, 899, 900, 901, 903, 904, 980, 982, 986, 988, 989, 996, 999, 1000, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "tradit": [18, 56, 200, 215, 351, 367, 404, 413, 414, 629, 691, 982, 985, 996, 1006, 1010], "power_iter": 18, "martinsson": [18, 532, 538, 935], "dbpedia": 18, "content": [18, 311, 350, 352, 374, 379, 383, 385, 400, 405, 414, 483, 500, 505, 506, 585, 586, 588, 668, 912, 995, 1010, 1021, 1029, 1038], "bz2": [18, 505, 506], "bz2file": 18, "pprint": [18, 125, 236, 262, 374, 930], "urlopen": 18, "randomized_svd": [18, 388, 448, 450, 529, 538, 541, 543, 1028, 1029, 1034, 1041, 1042, 1043], "redirects_url": 18, "redirects_en": 18, "nt": 18, "redirects_filenam": 18, "page_links_url": 18, "page_links_en": 18, "page_links_filenam": 18, "resourc": [18, 43, 125, 164, 200, 302, 318, 364, 368, 382, 392, 413, 798, 799, 987, 1004, 1007, 1010, 1013, 1023, 1036, 1041, 1042], "wait": [18, 379, 383, 393, 663, 664, 665, 673, 675, 1040], "wb": 18, "index_map": 18, "setdefault": [18, 913], "dbpedia_resource_prefix_len": 18, "shortname_slic": 18, "short_nam": 18, "nt_uri": 18, "uri": 18, "prefix": [18, 71, 262, 286, 316, 379, 383, 385, 387, 416, 422, 439, 440, 442, 444, 446, 461, 464, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 636, 637, 638, 639, 685, 686, 689, 801, 822, 842, 847, 850, 854, 858, 864, 890, 891, 1034, 1035, 1041, 1043], "get_redirect": 18, "transit": [18, 345, 383, 1039], "malform": [18, 1032], "1000000": [18, 533], "08d": 18, "isoformat": 18, "closur": 18, "transitive_target": 18, "seen": [18, 26, 41, 56, 67, 83, 99, 106, 119, 125, 170, 171, 196, 225, 232, 236, 301, 306, 337, 350, 374, 381, 383, 392, 393, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 422, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 518, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 620, 624, 625, 626, 627, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 961, 967, 975, 981, 989, 990, 996, 1002, 1010, 1016, 1017, 1019, 1020, 1040, 1041, 1042, 1043, 1044, 1045], "break": [18, 40, 47, 71, 82, 167, 189, 206, 236, 248, 279, 319, 326, 332, 348, 350, 352, 379, 381, 383, 385, 392, 406, 466, 509, 636, 770, 774, 777, 793, 871, 878, 883, 900, 903, 982, 985, 994, 996, 1001, 1007, 1028, 1029, 1035, 1036, 1038, 1040, 1044], "get_adjacency_matrix": 18, "resolv": [18, 378, 379, 383, 387, 394, 414, 443, 449, 459, 688, 692, 935, 976, 986, 1035, 1037, 1038, 1041], "lil_matrix": 18, "float32": [18, 124, 224, 303, 321, 366, 374, 379, 381, 402, 554, 555, 556, 557, 560, 561, 562, 563, 590, 591, 637, 638, 655, 696, 759, 863, 906, 907, 908, 909, 916, 962, 963, 964, 1002, 1012, 1021, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "del": [18, 385, 1040, 1041], "csr": [18, 352, 365, 373, 374, 388, 391, 393, 414, 417, 440, 443, 444, 446, 447, 456, 494, 505, 520, 524, 550, 551, 554, 555, 561, 562, 563, 627, 655, 689, 711, 764, 788, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 853, 861, 865, 867, 869, 870, 871, 873, 876, 877, 878, 881, 882, 883, 885, 888, 891, 906, 907, 908, 909, 914, 918, 919, 941, 949, 961, 962, 963, 964, 965, 966, 967, 989, 996, 1000, 1028, 1029, 1034, 1036, 1037, 1043, 1044, 1045], "tocsr": 18, "convers": [18, 125, 191, 350, 361, 367, 373, 379, 381, 387, 391, 400, 414, 569, 853, 862, 870, 918, 919, 972, 983, 1007, 1010, 1036, 1037, 1038, 1041, 1044], "5m": 18, "ram": [18, 54, 367, 413, 890, 891, 988, 1001, 1021, 1034, 1040, 1043, 1044], "5000000": 18, "strongest": [18, 193], "highest": [18, 20, 27, 83, 145, 149, 204, 259, 261, 272, 318, 350, 379, 391, 404, 406, 410, 413, 415, 434, 552, 554, 561, 589, 592, 593, 595, 596, 597, 600, 601, 603, 632, 634, 722, 752, 790, 793, 795, 798, 799, 809, 895, 906, 937, 975, 982, 986, 987, 990, 1000, 1002, 1040], "centrality_scor": 18, "networkx": [18, 388], "copyright": [18, 83], "aric": 18, "hagberg": 18, "lanl": 18, "gov": [18, 376], "dan": [18, 1028, 1032, 1033, 1034, 1036, 1037], "schult": 18, "dschult": 18, "pieter": [18, 1034, 1035, 1042], "swart": 18, "incoming_count": 18, "nonzero": [18, 20, 106, 199, 233, 265, 352, 403, 417, 441, 520, 521, 528, 534, 539, 545, 585, 588, 682, 683, 696, 840, 841, 844, 846, 848, 849, 982, 986], "indptr": [18, 284, 359, 1036, 1044], "dangl": 18, "isclos": 18, "guess": [18, 112, 121, 410, 413, 414, 475, 529, 535, 537, 538, 544, 986, 1000], "prev_scor": 18, "dot": [18, 33, 34, 45, 50, 55, 58, 63, 79, 80, 81, 83, 86, 87, 97, 98, 99, 104, 106, 112, 115, 152, 153, 159, 160, 170, 181, 184, 192, 194, 195, 207, 234, 247, 248, 250, 251, 265, 333, 335, 341, 365, 381, 385, 388, 393, 403, 411, 414, 530, 535, 537, 544, 587, 588, 611, 643, 644, 647, 649, 650, 651, 654, 657, 658, 659, 660, 678, 681, 684, 757, 759, 870, 910, 936, 984, 988, 996, 1000, 1001, 1020, 1037], "converg": [18, 58, 62, 79, 80, 123, 125, 152, 158, 161, 193, 202, 208, 216, 247, 249, 301, 302, 306, 311, 326, 367, 388, 393, 403, 406, 411, 414, 416, 418, 437, 440, 443, 444, 445, 446, 449, 451, 456, 457, 458, 459, 468, 469, 475, 479, 480, 481, 530, 532, 533, 534, 535, 536, 543, 550, 568, 607, 641, 642, 643, 644, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 665, 669, 671, 673, 675, 679, 680, 684, 685, 687, 688, 691, 692, 793, 794, 847, 855, 856, 893, 894, 900, 976, 981, 982, 983, 985, 990, 1000, 1028, 1031, 1032, 1033, 1035, 1036, 1039, 1041, 1042, 1043, 1044, 1045], "l_inf": 18, "scores_max": 18, "err": [18, 86, 100, 112], "6f": [18, 100, 266, 733, 791], "concern": [19, 37, 78, 85, 89, 95, 109, 111, 143, 151, 163, 167, 175, 178, 220, 245, 251, 278, 281, 285, 299, 305, 324, 332, 349, 354, 365, 381, 405, 983, 998], "spectral": [19, 23, 37, 45, 47, 50, 56, 69, 167, 222, 223, 379, 414, 446, 448, 449, 450, 459, 466, 467, 468, 469, 470, 471, 472, 473, 485, 508, 510, 588, 685, 686, 687, 688, 689, 692, 716, 791, 989, 999, 1022, 1023, 1028, 1029], "twenti": [20, 233, 376, 403, 406, 1021], "comp": [20, 86, 87, 99, 107, 303, 329, 350, 351, 352, 374, 1021], "window": [20, 329, 374, 379, 381, 382, 414, 1006, 1028, 1031, 1035, 1039, 1041, 1042], "misc": [20, 54, 99, 262, 329, 350, 351, 352, 374, 1020], "categori": [20, 45, 63, 71, 72, 122, 132, 170, 171, 200, 208, 215, 239, 262, 301, 302, 308, 312, 313, 318, 321, 329, 350, 351, 352, 373, 374, 388, 405, 406, 407, 413, 414, 416, 485, 493, 494, 500, 558, 559, 645, 655, 656, 666, 677, 739, 754, 755, 834, 871, 872, 879, 976, 982, 983, 984, 988, 994, 1012, 1021, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "noth": [20, 71, 350, 351, 384, 539, 711, 861, 870, 919, 996], "frequenc": [20, 28, 152, 171, 184, 194, 200, 233, 317, 318, 350, 351, 352, 374, 391, 404, 410, 411, 413, 414, 415, 548, 554, 556, 557, 558, 561, 585, 586, 587, 588, 601, 655, 656, 661, 663, 665, 671, 672, 673, 682, 683, 827, 862, 871, 872, 898, 900, 903, 906, 908, 924, 982, 983, 988, 996, 1000, 1002, 1030, 1032, 1033, 1039], "dhillon": [20, 403, 448, 450, 508], "cut": [20, 44, 47, 66, 67, 223, 383, 391, 403, 406, 443, 449, 450, 459, 585, 588, 688, 692, 996], "minibatchkmean": [20, 37, 45, 51, 62, 69, 167, 351, 367, 406, 411, 437, 439, 444, 509, 775, 1029, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "coclust": [20, 403, 448, 510], "4415": 20, "3015": 20, "talk": [20, 71, 262, 350, 351, 352, 368, 374, 393, 400, 1010, 1013, 1021], "polit": [20, 350, 374, 378, 982, 987], "mideast": [20, 374], "cosmo": 20, "angmar": 20, "alfalfa": 20, "alphalpha": 20, "prolin": [20, 311, 376], "benson": 20, "1948": 20, "4325": 20, "gun": [20, 374], "sci": [20, 71, 350, 351, 352, 374, 391, 686, 690, 869, 983, 996, 1021], "med": [20, 71, 270, 374, 996, 1021], "geb": 20, "gordon": [20, 249, 1034, 1038, 1040, 1042], "clinton": 20, "pitt": 20, "cdt": 20, "surrend": 20, "veal": 20, "1259": 20, "3534": 20, "soc": [20, 374, 1021], "religion": [20, 262, 350, 351, 352, 374, 987, 1021], "alt": [20, 262, 329, 350, 351, 352, 374, 387, 1021], "atheism": [20, 262, 329, 350, 351, 352, 374, 1021], "god": [20, 350, 351, 1021], "jesu": [20, 350, 351], "kent": 20, "belief": [20, 261, 854, 991], "christ": 20, "faith": [20, 158, 342], "moral": [20, 72, 350, 655, 1036, 1040, 1041], "775": 20, "1623": 20, "pc": [20, 329, 352, 374], "hardwar": [20, 329, 352, 365, 366, 374, 377, 396, 402, 1006, 1042, 1043], "scsi": 20, "nada": 20, "vga": 20, "esdi": 20, "isa": 20, "kth": [20, 816], "s3": [20, 97, 149, 188, 189, 376, 1020], "vlb": 20, "bmug": 20, "2180": 20, "2802": 20, "mac": [20, 312, 329, 374, 379, 705, 986], "electron": [20, 149, 374, 376, 535, 537, 544, 624], "voltag": 20, "ship": [20, 132, 165, 356, 366, 377, 396, 414, 982, 1028, 1037], "circuit": [20, 983], "mpce": 20, "kolstad": 20, "spectralcoclust": [20, 22, 403, 448, 1030, 1035, 1039], "v_measure_scor": [20, 38, 39, 50, 59, 322, 351, 406, 714, 732, 733, 753, 986, 1037], "number_norm": 20, "token": [20, 352, 365, 374, 383, 414, 533, 585, 586, 587, 588, 1028, 1036, 1040], "placehold": [20, 383, 624, 625, 626, 627, 810, 811, 814, 815, 976], "begin": [20, 110, 149, 152, 256, 263, 282, 319, 350, 361, 379, 384, 385, 393, 403, 406, 413, 550, 551, 556, 558, 559, 663, 664, 673, 674, 675, 975, 978, 982, 986, 996, 998, 1000, 1036, 1042, 1043], "By": [20, 46, 96, 128, 129, 179, 204, 236, 270, 279, 306, 316, 322, 341, 350, 366, 379, 381, 385, 386, 393, 397, 406, 407, 409, 410, 411, 412, 413, 415, 435, 438, 442, 443, 447, 461, 464, 465, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 521, 523, 546, 547, 554, 555, 556, 557, 561, 562, 582, 583, 585, 586, 588, 603, 606, 629, 630, 668, 670, 672, 674, 687, 689, 691, 694, 696, 697, 699, 700, 715, 725, 726, 730, 734, 779, 780, 783, 790, 792, 798, 799, 844, 858, 859, 871, 872, 874, 876, 886, 888, 896, 901, 902, 906, 907, 908, 909, 918, 919, 954, 975, 976, 978, 982, 986, 993, 996, 998, 1002, 1012, 1016, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1042, 1045], "isdigit": [20, 414], "numbernormalizingvector": 20, "build_token": [20, 414, 585, 586, 588], "super": [20, 26, 28, 381, 414, 1036], "forsal": [20, 352, 374], "rec": [20, 352, 374, 638], "auto": [20, 26, 28, 34, 45, 46, 49, 58, 59, 61, 93, 96, 145, 146, 149, 156, 176, 183, 221, 222, 223, 224, 226, 234, 241, 258, 260, 268, 284, 287, 292, 308, 316, 317, 318, 319, 320, 321, 333, 334, 335, 340, 343, 344, 352, 373, 374, 381, 413, 415, 416, 417, 438, 441, 442, 443, 444, 446, 447, 449, 454, 456, 459, 493, 505, 506, 532, 535, 537, 538, 541, 544, 546, 554, 555, 558, 559, 560, 561, 562, 564, 565, 590, 591, 594, 599, 604, 605, 626, 628, 629, 630, 632, 636, 643, 644, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 669, 670, 671, 677, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 697, 699, 731, 737, 798, 799, 826, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 855, 856, 871, 872, 879, 890, 891, 895, 898, 899, 900, 901, 902, 903, 904, 908, 909, 934, 935, 952, 955, 977, 980, 982, 983, 986, 987, 989, 996, 1001, 1006, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "motorcycl": [20, 374], "sport": [20, 374], "basebal": [20, 374], "hockei": [20, 374], "crypt": [20, 374], "n_cluster": [20, 21, 22, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 67, 68, 96, 320, 351, 379, 393, 406, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 459, 460, 508, 510, 1020, 1028, 1032, 1034, 1036, 1037, 1039, 1042], "svd_method": [20, 448, 450, 529, 1031], "kmean": [20, 37, 44, 46, 47, 49, 51, 54, 58, 59, 62, 69, 167, 249, 252, 309, 320, 351, 388, 406, 437, 440, 445, 446, 449, 459, 509, 788, 789, 793, 794, 863, 989, 996, 1007, 1020, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "20000": [20, 98], "n_init": [20, 43, 44, 45, 46, 49, 51, 58, 59, 61, 62, 65, 96, 221, 222, 223, 224, 317, 320, 351, 406, 440, 444, 446, 448, 449, 450, 456, 459, 687, 691, 793, 794, 1020, 1028, 1036, 1042, 1043, 1044], "y_coclust": 20, "row_labels_": [20, 21, 22, 403, 448, 450], "y_kmean": 20, "fit_predict": [20, 57, 58, 61, 229, 236, 239, 291, 381, 393, 406, 424, 428, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 466, 560, 674, 793, 794, 844, 850, 858, 902, 992, 1033, 1036, 1037, 1041, 1043, 1045], "document_nam": 20, "bicluster_ncut": 20, "get_indic": [20, 421, 448, 450], "float_info": 20, "row_compl": 20, "logical_not": [20, 65, 106, 203], "rows_": [20, 403, 421, 448, 450], "col_compl": 20, "columns_": [20, 403, 421, 448, 450], "most_common": 20, "counter": [20, 112, 268, 406, 673, 674, 675, 1041], "itemgett": 20, "revers": [20, 76, 149, 205, 261, 531, 538, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 785, 858, 986, 1028, 1029, 1038, 1040, 1044], "best_idx": [20, 260], "get_shap": [20, 421, 448, 450], "cluster_doc": 20, "cluster_word": 20, "cat_str": 20, "0f": [20, 59], "out_of_cluster_doc": 20, "word_col": 20, "word_scor": 20, "important_word": 20, "729": [20, 23], "plot_bicluster_newsgroup": [20, 23], "checkerboard": [21, 403, 448, 450, 508, 510], "simultan": [21, 56, 97, 265, 269, 322, 345, 358, 371, 403, 406, 975, 986, 987, 1002, 1010, 1035], "identifi": [21, 91, 98, 105, 125, 126, 169, 170, 200, 203, 204, 249, 251, 259, 264, 270, 293, 313, 318, 341, 350, 351, 373, 374, 378, 379, 383, 384, 393, 406, 407, 410, 413, 414, 443, 447, 454, 484, 493, 505, 506, 552, 553, 554, 555, 560, 561, 562, 563, 603, 640, 646, 696, 709, 770, 823, 844, 863, 893, 894, 975, 982, 986, 992, 999, 1010, 1019, 1035, 1037, 1042, 1043], "particularli": [21, 32, 71, 72, 75, 106, 130, 201, 231, 261, 308, 317, 347, 361, 365, 379, 388, 393, 406, 407, 409, 412, 414, 493, 801, 817, 835, 935, 954, 982, 983, 986, 988, 1007, 1010, 1020, 1028, 1033, 1035, 1036, 1042], "suit": [21, 96, 130, 170, 200, 201, 229, 251, 319, 320, 322, 350, 366, 379, 381, 384, 385, 387, 391, 396, 409, 411, 413, 447, 449, 500, 674, 835, 879, 929, 975, 978, 983, 986, 988, 989, 1000, 1006, 1007, 1010, 1014, 1035, 1042], "arrang": [21, 282, 629, 829, 830, 831, 832, 986], "genom": [21, 510], "rearrang": [21, 22, 403], "kemaleren": [21, 22], "make_checkerboard": [21, 508, 1030], "uniform": [21, 32, 38, 54, 124, 125, 128, 145, 153, 158, 161, 179, 180, 214, 226, 229, 232, 269, 287, 290, 291, 296, 300, 307, 309, 310, 313, 320, 322, 336, 381, 384, 406, 435, 436, 548, 566, 567, 607, 608, 625, 636, 646, 647, 651, 665, 673, 674, 675, 696, 718, 719, 724, 741, 742, 744, 746, 747, 749, 781, 786, 787, 799, 807, 809, 833, 834, 837, 840, 841, 848, 849, 863, 875, 877, 887, 923, 937, 975, 976, 985, 986, 989, 1034, 1036, 1038, 1042, 1044], "matshow": [21, 22, 67, 120, 147, 302, 499], "afterward": [21, 383, 532, 538, 822], "row_idx_shuffl": 21, "permut": [21, 22, 38, 82, 120, 126, 141, 167, 168, 174, 216, 254, 277, 313, 395, 401, 406, 413, 461, 493, 497, 501, 556, 557, 561, 562, 624, 627, 631, 676, 701, 702, 714, 732, 733, 751, 753, 791, 812, 814, 823, 824, 858, 872, 903, 906, 907, 935, 957, 960, 986, 1000, 1016, 1019, 1023, 1028, 1034, 1041, 1043], "col_idx_shuffl": 21, "redefin": [21, 125, 170], "lost": [21, 58, 83, 374, 380, 391, 983, 986], "ground": [21, 33, 41, 46, 50, 58, 59, 62, 79, 83, 87, 99, 128, 160, 184, 194, 200, 201, 239, 252, 264, 351, 393, 405, 406, 700, 701, 702, 705, 709, 710, 711, 712, 714, 715, 718, 719, 720, 724, 725, 726, 730, 732, 733, 734, 735, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 779, 780, 781, 782, 783, 786, 787, 791, 792, 986, 999, 1012, 1020, 1036], "truth": [21, 33, 41, 46, 50, 58, 59, 62, 79, 83, 87, 99, 104, 128, 160, 184, 194, 200, 201, 239, 252, 264, 351, 393, 405, 406, 700, 701, 702, 705, 709, 710, 711, 712, 714, 715, 718, 719, 720, 722, 724, 725, 726, 730, 732, 733, 734, 735, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 779, 780, 781, 782, 783, 786, 787, 791, 792, 986, 1012, 1020, 1036, 1042], "consensus_scor": [21, 22, 403, 1030], "biclusters_": [21, 22, 421, 448, 450], "consensu": [21, 22, 38, 378, 379, 394, 403, 406, 646, 668, 675, 676, 716, 986], "perfect": [21, 27, 38, 71, 82, 99, 101, 196, 200, 350, 351, 379, 383, 406, 410, 550, 551, 687, 691, 701, 702, 705, 714, 722, 724, 727, 733, 739, 752, 753, 781, 782, 791, 982, 986, 989, 1001, 1010, 1019, 1042], "ascend": [21, 72, 172, 312, 413, 447, 453, 624, 632, 910, 911, 912, 1000, 1038, 1044], "column_labels_": [21, 22, 403, 448, 450], "reorder": [21, 46, 103, 393, 694, 715, 1007, 1036], "reordered_row": 21, "reordered_data": 21, "step": [21, 27, 34, 43, 55, 56, 59, 68, 71, 72, 73, 74, 75, 82, 87, 99, 104, 112, 117, 121, 122, 132, 146, 147, 148, 154, 157, 170, 172, 200, 208, 218, 230, 231, 234, 240, 243, 252, 259, 262, 268, 270, 284, 286, 287, 292, 300, 303, 308, 311, 312, 317, 320, 330, 333, 337, 351, 352, 355, 361, 365, 368, 374, 377, 378, 379, 381, 383, 384, 387, 391, 393, 403, 404, 406, 408, 409, 411, 413, 414, 415, 439, 444, 446, 533, 534, 535, 536, 543, 560, 585, 586, 588, 590, 591, 594, 603, 624, 641, 645, 663, 664, 666, 673, 675, 676, 677, 691, 697, 793, 794, 795, 798, 799, 809, 829, 830, 831, 832, 854, 855, 856, 858, 859, 861, 898, 899, 900, 901, 903, 904, 934, 935, 957, 961, 976, 982, 985, 990, 991, 996, 1000, 1002, 1003, 1006, 1009, 1017, 1021, 1028, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1044], "outer": [21, 101, 266, 327, 448, 511, 637, 647, 648, 651, 978, 1029], "product": [21, 72, 96, 133, 152, 157, 171, 341, 361, 365, 381, 382, 385, 388, 400, 403, 411, 413, 448, 535, 537, 544, 579, 586, 587, 588, 610, 611, 630, 637, 661, 662, 682, 683, 757, 759, 771, 773, 870, 873, 890, 891, 936, 975, 978, 982, 984, 996, 998, 1000, 1001, 1006, 1010, 1036], "shade": [21, 54, 183, 287, 292, 333, 411], "474": [21, 23], "plot_spectral_biclust": [21, 23], "biclust": [22, 23, 368, 414, 421, 446, 448, 450, 485, 508, 510, 588, 716, 791, 986, 1022, 1023, 1030, 1034], "make_biclust": [22, 510, 1030], "implant": 22, "row_idx": [22, 200], "col_idx": 22, "fit_data": 22, "317": [22, 23, 76, 77, 157], "plot_spectral_coclust": [22, 23], "519": [23, 47, 69, 343, 348], "auto_examples_biclust": 23, "being": [25, 28, 35, 46, 53, 56, 83, 87, 91, 101, 112, 116, 129, 152, 157, 170, 172, 176, 194, 236, 239, 255, 261, 303, 310, 311, 337, 341, 350, 352, 377, 378, 379, 381, 383, 384, 391, 393, 394, 400, 406, 408, 410, 413, 414, 415, 416, 417, 419, 438, 439, 441, 442, 447, 453, 466, 472, 490, 520, 566, 637, 646, 653, 669, 671, 684, 687, 691, 709, 715, 725, 730, 732, 779, 785, 793, 838, 839, 844, 846, 848, 849, 850, 873, 891, 936, 975, 976, 982, 985, 986, 989, 992, 993, 994, 996, 998, 1000, 1001, 1002, 1028, 1029, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045], "postprocess": [25, 404, 532, 538], "brier": [25, 26, 404, 706], "brier_scor": 25, "sigmoid": [25, 26, 27, 28, 371, 413, 434, 449, 532, 558, 617, 636, 640, 761, 770, 773, 855, 856, 900, 901, 902, 903, 904, 991, 1001, 1023, 1041, 1045], "isoton": [25, 26, 167, 228, 244, 368, 434, 654, 921, 1008, 1023, 1029, 1030, 1031, 1032, 1034, 1041, 1044], "belong": [25, 28, 31, 56, 61, 239, 261, 316, 322, 327, 373, 374, 403, 404, 406, 407, 409, 410, 413, 421, 437, 440, 444, 445, 446, 448, 450, 520, 709, 727, 802, 808, 819, 845, 865, 879, 942, 943, 982, 985, 986, 988, 989, 990, 992, 1001, 1006, 1012, 1019], "mblondel": [25, 49, 191, 222, 262, 350, 373, 505], "telecom": [25, 26, 43, 229, 1010], "balaz": [25, 1032], "kegl": [25, 1032], "jhm": [25, 26, 27, 28, 152, 153, 155, 156, 157, 158, 159, 161, 235], "informatik": [25, 26, 27, 28, 152, 153, 155, 156, 157, 158, 159, 161, 235, 986], "uni": [25, 26, 27, 28, 75, 116, 152, 153, 155, 156, 157, 158, 159, 161, 191, 234, 235, 327, 345], "bremen": [25, 26, 27, 28, 152, 153, 155, 156, 157, 158, 159, 161, 235], "make_blob": [25, 27, 34, 39, 43, 44, 45, 50, 56, 57, 58, 60, 61, 63, 64, 65, 92, 192, 212, 229, 249, 309, 317, 320, 335, 338, 339, 346, 375, 381, 382, 413, 512, 1036, 1039, 1042], "50000": 25, "n_bin": [25, 26, 28, 54, 200, 218, 307, 309, 313, 435, 436, 863, 996], "calibration_curv": [25, 404, 434, 435, 1037, 1042], "blob": [25, 34, 35, 43, 45, 58, 63, 65, 92, 406, 445, 509, 1033], "sample_weight": [25, 181, 200, 213, 218, 236, 317, 322, 347, 379, 393, 397, 406, 413, 417, 423, 429, 434, 440, 441, 444, 446, 456, 457, 462, 466, 479, 480, 481, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 607, 608, 629, 630, 631, 632, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 694, 695, 697, 699, 700, 704, 705, 706, 709, 710, 713, 715, 717, 718, 719, 720, 722, 723, 724, 725, 726, 730, 731, 734, 735, 736, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 778, 779, 780, 781, 783, 784, 785, 786, 787, 790, 792, 795, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 863, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 946, 974, 986, 1000, 1001, 1002, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044], "sw_train": [25, 317], "sw_test": [25, 317], "calibratedclassifiercv": [25, 26, 27, 361, 393, 397, 404, 673, 975, 1001, 1007, 1032, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "brier_score_loss": [25, 26, 404, 986, 1036, 1037, 1038], "gaussiannb": [25, 26, 28, 32, 134, 263, 361, 404, 413, 434, 566, 833, 834, 835, 837, 859, 980, 987, 988, 1032, 1033, 1034, 1036, 1041, 1044], "With": [25, 35, 45, 68, 76, 91, 101, 123, 145, 167, 171, 200, 202, 228, 230, 235, 237, 243, 244, 261, 288, 365, 368, 374, 379, 381, 393, 406, 407, 410, 413, 415, 434, 436, 498, 579, 629, 630, 655, 764, 856, 859, 861, 872, 878, 879, 905, 907, 979, 982, 983, 986, 987, 989, 990, 993, 1000, 1002, 1012, 1013, 1020, 1025, 1031, 1035, 1036, 1038, 1040, 1042], "itself": [25, 50, 56, 112, 125, 128, 171, 184, 198, 236, 242, 270, 284, 313, 337, 351, 365, 367, 378, 379, 381, 383, 393, 397, 405, 406, 417, 437, 438, 441, 442, 443, 466, 467, 468, 469, 470, 471, 472, 473, 524, 528, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 548, 563, 566, 580, 589, 592, 593, 595, 596, 597, 599, 600, 636, 637, 638, 639, 640, 642, 652, 686, 688, 788, 789, 833, 834, 835, 836, 837, 838, 839, 843, 851, 852, 863, 864, 865, 893, 894, 943, 978, 982, 983, 985, 989, 990, 994, 1006, 1032, 1043], "prob_pos_clf": 25, "predict_proba": [25, 26, 27, 28, 31, 35, 130, 134, 149, 153, 154, 155, 156, 236, 270, 282, 300, 308, 311, 316, 318, 350, 381, 386, 393, 404, 405, 413, 434, 435, 546, 547, 548, 550, 552, 554, 556, 558, 561, 564, 566, 590, 591, 607, 616, 617, 619, 620, 628, 629, 630, 655, 656, 673, 695, 697, 699, 737, 738, 784, 793, 794, 795, 798, 799, 809, 819, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 840, 848, 855, 858, 865, 893, 894, 895, 900, 903, 906, 908, 982, 986, 988, 990, 993, 999, 1000, 1001, 1002, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "clf_isoton": 25, "prob_pos_isoton": 25, "clf_sigmoid": 25, "prob_pos_sigmoid": 25, "clf_score": 25, "No": [25, 114, 127, 184, 192, 206, 208, 209, 236, 326, 342, 345, 356, 376, 387, 391, 396, 406, 471, 556, 557, 587, 588, 632, 642, 661, 673, 675, 682, 683, 793, 982], "clf_isotonic_scor": 25, "clf_sigmoid_scor": 25, "084": [25, 26, 29], "y_uniqu": 25, "rainbow": [25, 223], "this_i": [25, 206], "this_x": [25, 198, 206, 1019], "this_sw": 25, "lexsort": 25, "linewidth": [25, 34, 35, 38, 41, 59, 74, 79, 87, 93, 113, 125, 129, 152, 156, 160, 189, 190, 194, 195, 196, 198, 201, 203, 206, 214, 217, 229, 237, 239, 270, 274, 290, 294, 307, 317, 335, 336, 338, 343, 357, 1017], "51": [25, 157, 218, 279, 284, 406, 407, 777, 982, 1024], "uncalibr": [25, 26, 27, 434], "gnb": [25, 26, 28, 134, 413, 566, 988], "plot_calibr": [25, 29], "reliabl": [26, 28, 404, 410, 435, 436, 643, 1002, 1010], "diagram": [26, 28, 72, 241, 317, 381, 404, 406, 435, 436, 465, 896, 996, 1039, 1040, 1045], "redund": [26, 28, 107, 148, 247, 252, 361, 375, 378, 379, 384, 393, 404, 512, 631, 1007, 1021, 1040], "uninform": [26, 28, 313, 375, 384, 414, 975, 982, 1036], "rest": [26, 31, 122, 126, 167, 178, 184, 215, 219, 236, 239, 249, 279, 316, 329, 334, 385, 393, 405, 416, 509, 607, 628, 641, 655, 656, 673, 750, 784, 826, 827, 828, 847, 898, 900, 903, 982, 986, 987, 990, 993, 1001, 1010, 1032, 1033, 1042, 1043, 1044], "make_classif": [26, 28, 32, 92, 116, 117, 119, 123, 146, 148, 258, 264, 272, 273, 294, 300, 308, 316, 318, 322, 345, 361, 375, 382, 402, 434, 435, 509, 550, 552, 554, 561, 663, 694, 695, 697, 699, 817, 822, 828, 855, 858, 898, 975, 986, 987, 996, 1001, 1034, 1035, 1036, 1038], "100_000": [26, 28, 170], "n_inform": [26, 28, 32, 92, 116, 119, 146, 148, 179, 184, 203, 204, 258, 264, 274, 294, 300, 308, 316, 345, 381, 384, 512, 521, 550, 551, 552, 553, 561, 562, 662, 828, 987, 1036], "n_redund": [26, 28, 32, 92, 119, 146, 148, 258, 264, 294, 300, 308, 384, 434, 512, 550, 552, 561, 828], "logisticregress": [26, 28, 31, 72, 74, 117, 134, 140, 148, 149, 183, 190, 191, 192, 193, 207, 215, 216, 230, 231, 241, 243, 264, 270, 303, 308, 316, 317, 318, 319, 320, 322, 350, 365, 379, 381, 385, 387, 392, 397, 404, 407, 413, 415, 435, 564, 566, 594, 628, 631, 640, 649, 656, 669, 670, 671, 672, 673, 684, 697, 784, 809, 817, 829, 830, 832, 883, 884, 886, 887, 888, 889, 905, 930, 982, 986, 987, 996, 1000, 1001, 1017, 1019, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "baselin": [26, 112, 122, 125, 135, 149, 173, 179, 218, 271, 282, 318, 351, 376, 406, 415, 548, 549, 631, 986, 989, 1021, 1044], "regular": [26, 37, 69, 72, 74, 80, 101, 111, 136, 159, 164, 167, 178, 179, 180, 184, 185, 187, 188, 189, 191, 200, 214, 218, 219, 235, 247, 255, 262, 265, 274, 289, 290, 299, 302, 303, 304, 311, 312, 332, 334, 336, 337, 338, 341, 348, 350, 352, 355, 365, 379, 391, 392, 404, 406, 408, 409, 411, 412, 413, 416, 434, 440, 444, 468, 469, 473, 475, 476, 477, 478, 501, 509, 511, 512, 517, 519, 521, 525, 535, 536, 537, 540, 544, 545, 547, 556, 558, 559, 585, 586, 588, 635, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 686, 690, 731, 737, 746, 793, 794, 812, 824, 825, 855, 856, 859, 878, 898, 899, 900, 901, 903, 904, 905, 975, 976, 978, 979, 980, 983, 985, 991, 992, 996, 999, 1000, 1001, 1008, 1010, 1016, 1017, 1019, 1023, 1028, 1029, 1030, 1032, 1033, 1037, 1038, 1040, 1041], "logist": [26, 28, 31, 70, 72, 77, 117, 140, 167, 178, 219, 230, 243, 282, 303, 311, 320, 350, 393, 394, 404, 407, 413, 415, 416, 434, 486, 493, 499, 501, 509, 538, 556, 558, 568, 607, 628, 643, 654, 655, 656, 663, 665, 673, 737, 795, 809, 824, 854, 855, 856, 858, 878, 905, 921, 923, 986, 990, 991, 1000, 1001, 1008, 1010, 1017, 1023, 1032, 1035, 1036, 1038, 1039], "guid": [26, 56, 70, 96, 118, 161, 167, 170, 171, 188, 221, 268, 290, 291, 294, 312, 316, 317, 318, 319, 320, 321, 322, 368, 377, 378, 379, 384, 385, 386, 392, 393, 394, 397, 405, 407, 413, 417, 418, 419, 420, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 912, 931, 986, 987, 1014, 1021, 1028, 1029, 1030, 1031, 1033, 1035, 1037, 1038, 1045], "gridspec": [26, 28, 66, 246, 386], "calibrationdisplai": [26, 28, 404, 1041, 1042], "lr": [26, 28, 117, 134, 135, 203, 215, 231, 232, 257, 264, 392, 397, 413, 565, 566, 567, 709], "gnb_isoton": 26, "gnb_sigmoid": 26, "clf_list": [26, 28], "get_cmap": [26, 28, 342], "dark2": [26, 28, 222], "ax_calibration_curv": [26, 28], "calibration_displai": [26, 28], "histogram": [26, 28, 54, 111, 136, 167, 200, 233, 267, 289, 306, 318, 404, 487, 556, 557, 558, 559, 561, 562, 639, 754, 755, 795, 800, 978, 984, 996, 1022, 1023, 1040, 1043], "grid_posit": [26, 28], "y_prob": [26, 28, 155, 435, 436, 706, 829, 855, 986, 1042], "poorli": [26, 63, 79, 87, 115, 127, 225, 366, 406, 413, 525, 627, 982, 983, 1034], "violat": [26, 337, 387, 391, 393, 632, 922, 993, 1000, 1002], "typic": [26, 28, 100, 110, 176, 184, 200, 204, 218, 235, 263, 264, 268, 270, 271, 290, 291, 318, 337, 351, 365, 372, 373, 374, 377, 381, 382, 383, 388, 392, 393, 404, 405, 406, 407, 410, 411, 413, 414, 416, 440, 444, 446, 493, 548, 550, 552, 553, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 626, 635, 637, 640, 651, 652, 653, 668, 679, 680, 709, 865, 872, 876, 879, 934, 935, 943, 946, 971, 975, 979, 982, 983, 985, 986, 987, 988, 992, 994, 1010, 1021, 1037, 1041, 1044], "transpos": [26, 261, 418, 523, 535, 537, 544, 657, 658, 659, 660, 784, 935, 972, 978, 986, 998, 1020, 1028, 1042], "nearli": [26, 264, 374, 393, 405, 760, 986, 989, 998, 1021], "albeit": 26, "strongli": [26, 28, 83, 87, 99, 122, 126, 170, 182, 215, 236, 267, 350, 379, 395, 396, 404, 413, 655, 732, 791, 982, 983, 1023, 1037, 1044], "plenti": 26, "greater": [26, 93, 112, 114, 170, 217, 234, 239, 249, 267, 282, 290, 291, 355, 365, 375, 384, 393, 404, 406, 409, 413, 438, 442, 446, 449, 460, 469, 533, 538, 554, 555, 556, 557, 558, 559, 561, 562, 563, 590, 591, 594, 607, 608, 625, 637, 639, 642, 661, 663, 664, 668, 673, 674, 675, 689, 706, 709, 717, 731, 732, 735, 738, 784, 791, 793, 794, 828, 840, 841, 848, 849, 855, 856, 861, 876, 888, 892, 895, 898, 899, 906, 907, 908, 909, 935, 975, 981, 982, 983, 986, 987, 992, 996, 1001, 1002, 1031, 1036, 1039, 1041, 1042, 1043], "exploit": [26, 282, 987, 1007, 1031], "f1_score": [26, 268, 329, 374, 734, 986, 1028, 1030, 1031, 1032, 1033, 1037, 1038, 1044], "log_loss": [26, 27, 124, 127, 153, 311, 329, 350, 393, 404, 413, 554, 556, 558, 561, 643, 655, 673, 906, 908, 975, 982, 986, 1000, 1002, 1030, 1032, 1034, 1042, 1043, 1044, 1045], "precision_scor": [26, 268, 705, 783, 986, 1028, 1030, 1031, 1032, 1033, 1038, 1044], "recall_scor": [26, 268, 410, 705, 780, 986, 1028, 1030, 1031, 1032, 1033, 1038, 1044], "roc_auc_scor": [26, 149, 261, 270, 316, 699, 703, 704, 705, 785, 986, 1030, 1031, 1036, 1038, 1042, 1043], "score_nam": [26, 38, 235, 263, 276, 322, 351, 801, 817], "score_df": 26, "set_index": [26, 112, 125, 157, 189, 218, 261, 312, 351], "decim": [26, 158, 468, 469, 911, 1035, 1036], "098932": 26, "323200": 26, "937443": 26, "871965": 26, "851348": 26, "861533": 26, "117608": 26, "782755": 26, "940374": 26, "857400": 26, "875941": 26, "866571": 26, "098332": 26, "370738": 26, "938613": 26, "883065": 26, "836224": 26, "859007": 26, "108880": 26, "368896": 26, "940201": 26, "861106": 26, "871277": 26, "866161": 26, "refin": [26, 83, 469, 706, 986, 1021], "alter": [26, 165, 381, 393, 725, 726, 734, 779, 780, 783, 1033, 1037, 1040], "uncertainti": [26, 152, 159, 179, 263, 404, 406, 564, 565, 640, 858, 976, 998], "linearsvc": [26, 28, 71, 73, 145, 146, 167, 176, 234, 258, 260, 268, 308, 316, 332, 334, 345, 348, 350, 365, 381, 385, 404, 414, 415, 434, 509, 564, 574, 628, 636, 640, 649, 669, 670, 671, 672, 673, 684, 731, 738, 821, 826, 899, 900, 903, 905, 982, 986, 987, 1001, 1028, 1029, 1030, 1034, 1036, 1039, 1044], "naivelycalibratedlinearsvc": [26, 28], "df_min_": [26, 28], "df_max_": [26, 28], "calibrated_df": [26, 28], "proba_pos_class": [26, 28], "clip": [26, 28, 218, 232, 306, 337, 632, 673, 737, 868, 996, 1032, 1039, 1040], "proba_neg_class": [26, 28], "proba": [26, 28, 134, 434, 906, 908], "dual": [26, 28, 71, 73, 145, 146, 176, 234, 258, 260, 268, 308, 316, 334, 335, 345, 350, 414, 415, 468, 469, 475, 564, 565, 608, 636, 643, 644, 649, 650, 655, 656, 657, 658, 659, 660, 678, 681, 731, 826, 838, 839, 898, 899, 900, 903, 986, 987, 1001, 1030, 1039, 1042, 1044], "svc_isoton": 26, "svc_sigmoid": 26, "opposit": [26, 28, 54, 68, 101, 170, 171, 189, 268, 393, 404, 408, 410, 415, 440, 444, 446, 466, 535, 537, 544, 560, 709, 726, 844, 902, 1028], "behavior": [26, 28, 38, 40, 53, 164, 167, 170, 171, 200, 218, 236, 252, 254, 264, 277, 302, 303, 306, 308, 313, 337, 361, 366, 373, 376, 379, 381, 383, 387, 388, 393, 404, 406, 410, 414, 533, 548, 563, 663, 664, 665, 673, 674, 675, 696, 698, 725, 726, 779, 780, 783, 796, 797, 800, 812, 813, 814, 815, 816, 835, 871, 898, 899, 975, 982, 987, 992, 996, 1001, 1010, 1012, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "hing": [26, 207, 210, 212, 269, 334, 335, 339, 341, 393, 663, 673, 731, 898, 905, 982, 1000, 1001, 1021], "focus": [26, 79, 189, 279, 374, 391, 983, 996, 1006], "far": [26, 61, 83, 122, 153, 159, 170, 200, 218, 337, 341, 350, 352, 379, 388, 416, 717, 878, 961, 991, 992, 1001, 1010, 1019], "awai": [26, 27, 28, 61, 79, 121, 152, 153, 157, 203, 341, 342, 374, 404, 416, 625, 840, 841, 848, 849, 985, 986, 1001, 1019], "shown": [26, 49, 58, 90, 110, 114, 118, 125, 161, 169, 171, 184, 190, 198, 218, 226, 229, 234, 239, 248, 261, 264, 267, 270, 279, 289, 301, 302, 306, 307, 308, 325, 345, 350, 351, 379, 384, 394, 404, 406, 407, 410, 411, 412, 414, 416, 435, 457, 629, 695, 697, 698, 699, 710, 795, 809, 910, 912, 981, 982, 983, 986, 989, 994, 996, 1000, 1001, 1002, 1021, 1032, 1037, 1038, 1039, 1042], "varieti": [26, 164, 248, 312, 337, 387, 391, 405, 406, 408, 414, 640, 989, 1002, 1006, 1010, 1030, 1043, 1044], "niculescu": [26, 28, 404, 434, 436], "mizil": [26, 28, 404, 434, 436], "caruana": [26, 28, 404, 434, 436], "144943": 26, "465660": 26, "937597": 26, "872186": 26, "851792": 26, "861868": 26, "099820": 26, "376999": 26, "936480": 26, "853174": 26, "877981": 26, "865400": 26, "098758": 26, "321301": 26, "937532": 26, "873724": 26, "848743": 26, "861053": 26, "deal": [26, 58, 72, 164, 170, 184, 225, 279, 341, 352, 379, 384, 407, 414, 415, 416, 471, 493, 700, 705, 759, 783, 864, 935, 982, 1010, 1018, 1031, 1043, 1044], "situat": [26, 45, 58, 73, 169, 170, 206, 229, 264, 379, 387, 408, 410, 411, 413, 465, 525, 531, 579, 871, 874, 886, 896, 980, 982, 988, 989, 999, 1002, 1036], "supervis": [26, 28, 38, 50, 55, 59, 87, 105, 117, 140, 141, 222, 237, 248, 261, 293, 318, 328, 331, 351, 365, 368, 374, 381, 392, 393, 404, 406, 409, 410, 411, 413, 414, 416, 434, 436, 461, 485, 500, 501, 550, 585, 587, 590, 591, 631, 673, 725, 796, 797, 800, 802, 803, 804, 805, 810, 811, 812, 813, 814, 815, 818, 819, 820, 821, 823, 824, 847, 857, 858, 862, 872, 879, 893, 894, 895, 903, 980, 983, 986, 988, 989, 992, 996, 997, 1001, 1002, 1003, 1006, 1007, 1009, 1012, 1013, 1015, 1021, 1023, 1028, 1034, 1040], "icml": [26, 28, 404, 406, 414, 434, 436, 833, 835, 854, 986, 988, 1000, 1005], "2005": [26, 28, 82, 376, 404, 434, 436, 847, 982, 989, 999], "plot_calibration_curv": [26, 29], "simplex": [27, 667, 793, 873], "arrow": [27, 1042], "green": [27, 82, 93, 115, 129, 134, 152, 176, 226, 301, 307, 311, 317, 393, 987, 1036, 1037, 1039, 1040], "600": [27, 51, 131, 132, 374, 677], "x_train_valid": 27, "y_train_valid": 27, "cluster_std": [27, 39, 45, 50, 56, 57, 58, 60, 61, 63, 64, 65, 212, 229, 249, 309, 339, 509], "x_valid": 27, "y_valid": 27, "randomforestclassifi": [27, 28, 32, 57, 116, 117, 118, 119, 120, 121, 134, 172, 173, 241, 242, 258, 273, 316, 318, 350, 361, 392, 393, 404, 413, 415, 554, 555, 556, 558, 563, 564, 566, 798, 799, 828, 908, 975, 976, 987, 1010, 1025, 1032, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045], "concaten": [27, 35, 40, 51, 62, 70, 77, 82, 114, 128, 160, 167, 179, 182, 214, 222, 229, 246, 250, 251, 257, 268, 270, 271, 289, 303, 310, 313, 326, 336, 350, 407, 461, 464, 501, 506, 528, 534, 538, 539, 596, 777, 795, 857, 858, 860, 863, 871, 903, 987, 1016, 1029], "randomforestclassifierifittedrandomforestclassifi": [27, 119, 120], "cal_clf": 27, "prefit": [27, 393, 404, 415, 434, 564, 565, 594, 1007, 1040, 1041, 1042], "x27": [27, 72, 73, 117, 132, 135, 146, 170, 171, 172, 230, 231, 240, 241, 243, 251, 259, 261, 262, 268, 273, 303, 312, 317, 318, 320, 327], "calibratedclassifiercvifittedcalibratedclassifiercv": 27, "randomforestclassifierrandomforestclassifi": [27, 172, 241, 273], "clf_prob": 27, "cal_clf_prob": 27, "head_width": 27, "ro": 27, "bo": [27, 1040], "unit": [27, 71, 81, 170, 176, 200, 218, 289, 302, 306, 351, 374, 379, 380, 381, 385, 387, 388, 411, 414, 418, 461, 486, 487, 516, 521, 529, 530, 531, 538, 539, 586, 587, 588, 604, 605, 608, 655, 656, 673, 682, 696, 766, 845, 854, 855, 856, 862, 868, 870, 874, 876, 878, 884, 885, 886, 888, 889, 898, 899, 982, 984, 985, 986, 991, 996, 1002, 1006, 1019, 1032, 1036, 1042, 1043], "mid": [27, 337, 986, 988], "frac": [27, 81, 82, 112, 261, 268, 270, 319, 403, 404, 406, 408, 411, 412, 413, 414, 416, 429, 460, 462, 479, 480, 481, 551, 553, 555, 557, 559, 562, 565, 567, 608, 612, 616, 619, 620, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 666, 667, 669, 670, 675, 676, 677, 693, 751, 765, 831, 832, 841, 849, 856, 899, 901, 904, 907, 909, 978, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 993, 994, 996, 998, 1000, 1001, 1002, 1019], "shrink": [27, 83, 96, 126, 171, 184, 195, 198, 204, 221, 250, 306, 345, 411, 556, 557, 673, 675, 845, 855, 856, 900, 901, 902, 903, 904, 989, 1001, 1019], "perfectli": [27, 38, 264, 275, 341, 395, 406, 413, 435, 564, 603, 701, 702, 712, 714, 732, 733, 753, 782, 791, 871, 981, 983, 986, 1001, 1041, 1042], "incur": [27, 616, 898, 1001, 1036], "decreas": [27, 40, 47, 56, 59, 67, 76, 129, 148, 149, 160, 170, 171, 173, 208, 232, 233, 263, 268, 274, 300, 308, 311, 316, 355, 365, 367, 379, 404, 406, 413, 438, 442, 460, 518, 531, 532, 538, 554, 555, 556, 557, 558, 559, 561, 562, 563, 599, 632, 633, 634, 673, 674, 675, 703, 709, 723, 778, 785, 855, 856, 906, 907, 908, 909, 975, 977, 978, 982, 983, 986, 989, 990, 993, 994, 1000, 1001, 1010, 1019, 1030, 1035, 1038, 1041], "cal_scor": 27, "327": [27, 726, 1019], "549": 27, "p1d": 27, "p0": 27, "p1": [27, 134], "p2": [27, 134, 218], "calibrated_classifi": 27, "calibrated_classifiers_": [27, 404, 434], "this_p": 27, "sure": [27, 57, 193, 206, 236, 237, 361, 365, 366, 373, 377, 378, 379, 380, 381, 383, 384, 387, 391, 404, 407, 414, 490, 520, 646, 918, 919, 929, 972, 976, 983, 1000, 1006, 1007, 1035, 1036, 1038, 1043], "renorm": 27, "multiclass": [27, 31, 118, 178, 219, 237, 239, 254, 268, 271, 277, 280, 282, 334, 346, 368, 374, 375, 381, 382, 384, 393, 397, 406, 413, 434, 449, 459, 486, 493, 501, 554, 556, 558, 561, 564, 565, 568, 591, 599, 607, 628, 629, 630, 655, 656, 663, 665, 670, 671, 672, 673, 699, 703, 705, 725, 726, 730, 731, 734, 739, 750, 779, 780, 783, 784, 785, 790, 795, 796, 798, 799, 800, 801, 809, 811, 813, 817, 818, 819, 820, 821, 822, 823, 824, 825, 865, 879, 898, 900, 903, 906, 908, 980, 982, 996, 997, 1001, 1002, 1008, 1009, 1021, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1043, 1044, 1045], "argmax": [27, 104, 260, 274, 381, 413, 566, 826, 906, 1001, 1041], "plot_calibration_multiclass": [27, 29], "gave": [28, 404, 795, 798, 799, 809, 865], "four": [28, 145, 160, 176, 182, 201, 248, 249, 326, 334, 375, 379, 393, 554, 561, 716, 906, 908, 924, 982, 984, 985, 986, 996, 1005], "naiv": [28, 32, 130, 261, 263, 282, 350, 352, 368, 374, 404, 413, 414, 434, 541, 833, 834, 835, 836, 837, 980, 981, 989, 1008, 1023, 1028, 1029, 1030, 1031, 1036, 1038, 1041, 1043], "bay": [28, 32, 115, 130, 152, 189, 251, 263, 350, 368, 374, 404, 411, 413, 414, 533, 546, 547, 653, 833, 834, 835, 836, 837, 879, 980, 981, 982, 996, 1008, 1021, 1023, 1028, 1029, 1030, 1031, 1036, 1038, 1041, 1043], "train_sampl": [28, 215, 216], "against": [28, 38, 87, 106, 115, 126, 144, 176, 191, 192, 209, 217, 236, 270, 312, 316, 337, 374, 379, 394, 404, 406, 410, 414, 435, 506, 539, 545, 548, 673, 675, 751, 753, 784, 797, 802, 804, 823, 827, 952, 978, 982, 986, 987, 989, 1001, 1005, 1012], "rfc": [28, 242, 316, 1025], "contrast": [28, 105, 171, 202, 235, 261, 263, 293, 311, 351, 393, 404, 406, 409, 413, 416, 446, 449, 459, 616, 640, 809, 854, 976, 979, 981, 982, 986, 989, 991, 994, 996, 999, 1000, 1002, 1038], "push": [28, 379, 383, 404, 1009], "equat": [28, 345, 379, 406, 411, 413, 554, 555, 556, 557, 561, 562, 563, 587, 624, 655, 656, 679, 680, 684, 759, 878, 906, 907, 908, 909, 976, 983, 986, 991, 1036], "twice": [28, 273, 350, 352, 381, 416, 616, 726, 728, 937, 1037, 1045], "approx": [28, 96, 234, 411, 413, 414, 986, 993, 1000], "rare": [28, 171, 312, 361, 383, 391, 393, 395, 404, 406, 410, 586, 645, 655, 656, 666, 677, 898, 923, 954, 982, 996, 1010, 1035, 1036, 1037, 1041, 1043], "explan": [28, 87, 236, 365, 378, 379, 404, 414, 975, 985, 987, 1002, 1010, 1031], "bag": [28, 71, 111, 116, 118, 127, 136, 167, 172, 279, 351, 352, 375, 404, 405, 513, 514, 515, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 737, 800, 824, 907, 984, 987, 1008, 1023, 1028, 1030, 1031, 1032, 1033, 1034, 1041, 1042, 1044], "underli": [28, 57, 81, 131, 149, 173, 201, 203, 204, 236, 266, 288, 289, 341, 358, 366, 379, 391, 393, 395, 397, 402, 404, 406, 408, 410, 411, 412, 413, 415, 416, 434, 448, 449, 450, 459, 461, 462, 468, 469, 475, 521, 561, 562, 564, 565, 566, 567, 590, 591, 594, 599, 655, 656, 662, 665, 677, 688, 692, 795, 798, 799, 809, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 841, 843, 898, 906, 907, 908, 909, 951, 982, 983, 987, 992, 999, 1001, 1030, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1044, 1045], "restrict": [28, 67, 68, 164, 167, 217, 299, 304, 381, 385, 391, 404, 406, 413, 414, 462, 490, 499, 529, 578, 607, 650, 651, 652, 653, 655, 679, 680, 710, 778, 784, 785, 824, 846, 848, 849, 850, 852, 854, 855, 856, 858, 884, 986, 1002, 1022, 1023, 1028, 1030, 1038, 1040], "move": [28, 121, 262, 303, 337, 378, 379, 383, 385, 404, 406, 546, 547, 568, 569, 570, 572, 574, 575, 953, 1020, 1028, 1029, 1033, 1036, 1038, 1041, 1042], "characterist": [28, 45, 63, 149, 157, 167, 229, 254, 258, 277, 306, 361, 374, 376, 384, 404, 410, 413, 416, 500, 501, 620, 635, 655, 699, 703, 705, 723, 778, 784, 785, 814, 824, 827, 865, 903, 982], "difficult": [28, 56, 112, 170, 208, 239, 379, 387, 404, 411, 413, 550, 551, 556, 558, 559, 981, 983, 985, 989, 991, 993, 1002, 1010, 1028, 1042], "bayesian": [28, 55, 167, 178, 184, 188, 219, 245, 247, 251, 252, 253, 411, 434, 521, 525, 529, 608, 641, 642, 653, 654, 793, 794, 859, 861, 873, 878, 975, 1006, 1008, 1022, 1023, 1034, 1041], "domingo": [28, 784, 986], "pazzani": 28, "proc": [28, 80, 404, 414, 447, 686, 690, 833, 975, 983, 988, 992], "13th": 28, "intl": [28, 410], "1996": [28, 406, 413, 417, 441, 513, 514, 515, 552, 553, 996], "zadrozni": [28, 404, 434, 673], "bianca": 28, "charl": [28, 760, 1028, 1031, 1034, 1038, 1040, 1043], "elkan": [28, 317, 404, 434, 440, 444, 456, 673, 1034, 1038, 1039, 1041, 1042], "vol": [28, 160, 184, 267, 376, 406, 471, 556, 557, 625, 632, 642, 661, 682, 683, 793, 823, 835, 976, 988, 989], "2001": [28, 157, 172, 260, 403, 406, 413, 434, 448, 449, 450, 459, 508, 556, 557, 561, 562, 625, 631, 636, 642, 688, 693, 731, 784, 879, 891, 923, 976, 978, 982, 986, 992, 994, 996, 998, 1001], "212": [28, 29, 124, 149, 266, 328, 376, 466, 497, 992, 1019], "plot_compare_calibr": [28, 29], "019": [29, 149, 351, 376, 385, 468], "auto_examples_calibr": 29, "discrimin": [30, 36, 105, 144, 146, 149, 167, 176, 215, 222, 237, 293, 368, 376, 404, 413, 472, 509, 546, 547, 563, 628, 779, 847, 975, 983, 986, 989, 1000, 1002, 1008, 1019, 1023, 1031], "ellipsoid": [30, 36, 167, 245, 246, 253, 546, 547, 628, 793, 794, 980, 985], "ledoit": [30, 36, 78, 79, 83, 84, 167, 470, 472, 476, 477, 509, 546, 980], "wolf": [30, 36, 78, 79, 83, 84, 167, 470, 472, 476, 477, 509, 546, 980, 1035], "oa": [30, 36, 78, 84, 167, 408, 466, 467, 470, 471, 473, 474, 509, 546, 795, 980], "hand": [30, 36, 87, 90, 98, 101, 118, 125, 144, 157, 167, 170, 171, 193, 204, 207, 225, 232, 233, 235, 236, 239, 258, 263, 270, 337, 365, 373, 374, 376, 379, 381, 385, 387, 392, 400, 411, 412, 413, 415, 499, 640, 694, 710, 784, 824, 879, 903, 975, 979, 982, 986, 988, 990, 994, 999, 1001, 1010, 1012, 1015, 1018, 1019], "built": [31, 87, 110, 112, 113, 121, 123, 172, 208, 264, 279, 297, 316, 356, 359, 365, 377, 379, 380, 381, 383, 385, 387, 388, 391, 392, 393, 396, 400, 405, 406, 407, 410, 413, 415, 442, 500, 550, 551, 552, 553, 556, 557, 558, 559, 585, 586, 590, 594, 636, 637, 638, 639, 640, 643, 644, 649, 655, 657, 658, 659, 660, 669, 670, 671, 672, 678, 798, 799, 806, 829, 832, 838, 839, 908, 909, 970, 982, 986, 987, 999, 1000, 1002, 1006, 1010, 1021, 1028, 1031, 1032, 1034, 1040], "troubl": [31, 414], "ovr": [31, 192, 215, 279, 282, 316, 346, 655, 656, 784, 827, 898, 900, 903, 982, 986, 987, 1001, 1028, 1033, 1034, 1036, 1037, 1038, 1042, 1043], "gpc": [31, 151, 162, 167, 501, 607, 608, 610, 611, 616, 617, 619, 620, 700, 737, 1008, 1023, 1038], "gaussian_process": [31, 32, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 368, 393, 416, 640, 987, 1031, 1034, 1035], "gaussianprocessclassifi": [31, 32, 153, 154, 155, 156, 160, 393, 416, 608, 616, 617, 619, 620, 987, 1034, 1036, 1038, 1042], "accuracy_scor": [31, 112, 153, 265, 311, 328, 350, 361, 392, 397, 402, 554, 561, 705, 725, 726, 730, 734, 779, 780, 783, 790, 792, 975, 986, 1029, 1030, 1031, 1040, 1045], "iri": [31, 42, 46, 75, 89, 94, 95, 100, 107, 108, 111, 123, 133, 136, 141, 145, 151, 162, 167, 178, 183, 193, 219, 243, 248, 255, 266, 267, 270, 271, 287, 295, 301, 318, 324, 331, 332, 333, 337, 340, 348, 354, 359, 360, 372, 373, 392, 406, 407, 410, 411, 413, 493, 501, 538, 546, 550, 554, 561, 607, 619, 628, 673, 795, 809, 893, 894, 895, 898, 903, 906, 910, 911, 912, 975, 976, 980, 985, 986, 989, 993, 996, 999, 1000, 1001, 1002, 1012, 1019, 1020, 1023, 1041], "load_iri": [31, 42, 46, 75, 91, 100, 103, 105, 107, 121, 123, 133, 141, 145, 154, 183, 193, 209, 243, 248, 255, 266, 267, 268, 270, 271, 287, 292, 295, 301, 316, 318, 321, 330, 333, 334, 337, 340, 356, 359, 392, 400, 406, 407, 410, 413, 415, 558, 564, 599, 607, 616, 617, 619, 620, 628, 655, 656, 784, 795, 798, 799, 801, 809, 826, 847, 893, 894, 895, 906, 908, 910, 911, 912, 976, 981, 986, 987, 988, 989, 993, 996, 1002, 1012, 1018, 1019, 1020, 1034, 1036, 1039], "saga": [31, 191, 215, 216, 655, 656, 669, 671, 684, 809, 982, 1035, 1037], "multi_class": [31, 192, 215, 270, 316, 566, 607, 655, 656, 784, 832, 898, 982, 987, 1001, 1028, 1032, 1036, 1041, 1043], "n_classifi": [31, 566, 567], "classifier_idx": 31, "class_of_interest": [31, 270, 628, 1045], "vmin": [31, 41, 83, 96, 99, 107, 155, 158, 179, 184, 191, 216, 234, 250, 256, 302, 337], "vmax": [31, 52, 83, 96, 99, 107, 155, 158, 179, 184, 191, 216, 234, 250, 256, 302, 337], "mask_y_pr": 31, "scalarmapp": 31, "viridi": [31, 39, 284, 694], "cax": [31, 155, 272], "orient": [31, 96, 170, 221, 306, 393, 910, 983], "horizont": [31, 96, 221, 234, 306, 309, 384, 393, 461, 512, 694, 698], "314": [31, 36], "plot_classification_prob": [31, 36], "salt": [32, 234, 308, 1042], "convei": [32, 226, 308, 1019], "linearli": [32, 101, 114, 149, 170, 179, 214, 222, 229, 270, 271, 308, 311, 341, 350, 365, 376, 391, 411, 413, 512, 639, 704, 867, 868, 986, 989, 992, 1001, 1019, 1035, 1044], "semi": [32, 237, 308, 318, 331, 368, 374, 393, 485, 501, 532, 585, 587, 673, 725, 824, 858, 862, 893, 894, 895, 903, 984, 989, 992, 1008, 1023, 1028, 1040, 1043], "transpar": [32, 308, 971, 1010], "ga\u00ebl": [32, 46, 52, 74, 90, 91, 103, 183, 197, 198, 308, 341, 342, 394, 1010], "modifi": [32, 46, 52, 74, 76, 90, 91, 183, 184, 197, 198, 210, 221, 222, 223, 236, 239, 248, 322, 342, 347, 377, 379, 381, 383, 393, 406, 413, 416, 440, 444, 451, 456, 465, 479, 480, 481, 482, 492, 507, 578, 607, 608, 610, 616, 673, 675, 686, 690, 725, 726, 764, 779, 780, 783, 916, 982, 999, 1000, 1007, 1018, 1022, 1023, 1028, 1030, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043], "listedcolormap": [32, 35, 121, 292, 295, 300, 308], "make_circl": [32, 45, 63, 101, 130, 226, 300, 301, 308, 327, 375, 1029, 1036, 1039], "make_moon": [32, 45, 63, 229, 261, 300, 301, 308, 375, 975, 1035, 1039], "discriminant_analysi": [32, 34, 35, 105, 222, 293, 361, 368, 402, 533, 847, 980, 987, 1028, 1031, 1032, 1033, 1034, 1035], "quadraticdiscriminantanalysi": [32, 35, 546, 980, 987, 989, 1028, 1033, 1035, 1043], "adaboostclassifi": [32, 114, 121, 397, 413, 551, 556, 558, 1030, 1031, 1034, 1035, 1037, 1038, 1041, 1043, 1044, 1045], "kneighborsclassifi": [32, 133, 140, 286, 287, 292, 293, 311, 318, 320, 350, 413, 599, 841, 845, 846, 847, 848, 849, 987, 989, 1019, 1028, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "neural_network": [32, 167, 171, 240, 299, 300, 301, 302, 303, 367, 368, 391, 987, 990, 1030, 1045], "mlpclassifi": [32, 167, 299, 300, 302, 304, 367, 499, 501, 511, 519, 568, 854, 856, 868, 987, 990, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "decisiontreeclassifi": [32, 112, 114, 121, 133, 265, 279, 322, 355, 356, 359, 393, 413, 550, 552, 554, 556, 558, 561, 628, 801, 822, 907, 908, 910, 911, 912, 976, 987, 1002, 1029, 1030, 1032, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "net": [32, 167, 178, 184, 191, 211, 219, 274, 385, 405, 410, 468, 469, 475, 498, 521, 554, 555, 556, 557, 561, 562, 563, 643, 644, 649, 654, 655, 656, 657, 658, 659, 660, 665, 673, 675, 678, 681, 854, 906, 907, 908, 909, 975, 986, 991, 1000, 1008, 1010, 1023, 1028, 1033, 1037, 1038, 1040], "adaboost": [32, 111, 121, 136, 167, 516, 548, 550, 551, 556, 628, 700, 824, 906, 907, 1008, 1023, 1030], "qda": [32, 376, 546, 547, 1008, 1023, 1033], "025": [32, 202, 239, 258, 687, 691], "samm": [32, 112, 114, 121, 413, 550, 1044, 1045], "n_clusters_per_class": [32, 92, 116, 146, 148, 258, 294, 300, 308, 384, 512], "linearly_separ": [32, 300], "ds_cnt": [32, 308, 309], "rdbu": [32, 35, 96, 216, 300, 337, 342], "cm_bright": [32, 300, 308], "ff0000": [32, 292, 300], "0000ff": [32, 292, 300], "ep": [32, 45, 47, 50, 56, 66, 183, 185, 224, 233, 391, 406, 417, 441, 447, 452, 468, 469, 475, 628, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 678, 679, 680, 681, 687, 691, 711, 737, 850, 890, 891, 892, 998, 1043, 1044], "lstrip": [32, 45, 63, 229, 300, 308], "032": [32, 36], "plot_classifier_comparison": [32, 36, 308], "8x8": [33, 90, 191, 233, 293, 303, 376, 499, 1018], "grayscal": 33, "imread": 33, "load_digit": [33, 52, 53, 59, 73, 74, 90, 139, 140, 147, 191, 207, 222, 233, 234, 259, 260, 263, 269, 276, 286, 288, 293, 301, 303, 322, 325, 326, 385, 407, 442, 443, 529, 530, 531, 532, 596, 597, 635, 636, 665, 685, 686, 687, 688, 1012, 1016, 1017, 1018, 1019, 1020, 1034, 1039], "set_axis_off": 33, "gray_r": [33, 90, 99, 155, 222, 303, 325, 326, 1018], "entir": [33, 164, 200, 208, 303, 306, 317, 341, 359, 361, 373, 380, 381, 393, 400, 406, 410, 412, 414, 469, 489, 531, 585, 586, 587, 588, 644, 648, 650, 652, 655, 656, 658, 660, 662, 663, 665, 673, 679, 680, 730, 792, 826, 827, 830, 855, 857, 858, 871, 883, 884, 886, 887, 888, 889, 975, 976, 986, 996, 1000, 1002, 1019, 1037, 1038], "98": [33, 43, 45, 55, 63, 65, 83, 99, 149, 229, 259, 300, 308, 326, 376, 383, 410, 413, 656, 833, 981, 988, 1016, 1021], "899": [33, 57, 69, 259], "confus": [33, 167, 230, 254, 270, 277, 325, 326, 350, 393, 465, 501, 628, 649, 694, 710, 712, 715, 725, 726, 734, 750, 780, 783, 824, 896, 903, 1021, 1028, 1029, 1033, 1037, 1038, 1040, 1041, 1042, 1043], "figure_": [33, 171, 240, 316, 318, 386, 435, 628, 629, 694, 695, 697, 698, 699, 801, 817], "confusion_matrix": [33, 230, 255, 325, 326, 694, 710, 750, 821, 986, 1021, 1029, 1034, 1035, 1038, 1039, 1041, 1045], "gt": [33, 72, 73, 117, 132, 170, 251, 259, 273, 377, 379, 383], "rebuilt": [33, 838, 839], "402": [33, 36, 265], "plot_digits_classif": [33, 36], "oracl": [34, 200, 218, 419, 466, 467, 470, 471, 472, 473, 980, 1028], "shrinkag": [34, 78, 80, 83, 84, 104, 127, 167, 295, 419, 466, 467, 470, 471, 472, 473, 474, 476, 477, 478, 536, 540, 546, 558, 559, 795, 982, 996, 1008, 1023, 1028, 1032, 1033, 1035], "lineardiscriminantanalysi": [34, 35, 105, 222, 293, 361, 402, 533, 547, 847, 980, 987, 989, 1028, 1031, 1032, 1033, 1034, 1035, 1037, 1040, 1042, 1043, 1044], "200": [34, 35, 45, 51, 55, 61, 76, 99, 114, 123, 125, 131, 156, 186, 195, 201, 204, 205, 206, 212, 217, 222, 241, 246, 262, 268, 270, 271, 306, 309, 327, 336, 337, 358, 361, 374, 381, 391, 411, 413, 418, 437, 451, 465, 468, 469, 530, 531, 532, 535, 536, 537, 540, 544, 581, 646, 648, 668, 676, 689, 809, 855, 856, 896, 900, 901, 902, 903, 904, 1001], "n_averag": 34, "n_features_max": 34, "ish": 34, "acc_clf1": 34, "acc_clf2": 34, "acc_clf3": 34, "n_features_rang": 34, "score_clf1": 34, "score_clf2": 34, "score_clf3": 34, "clf1": [34, 133, 134, 413, 566], "lsqr": [34, 313, 546, 669, 671, 684, 980, 1029, 1035, 1042], "clf2": [34, 133, 134, 381, 400, 413, 566], "store_precis": [34, 80, 466, 467, 470, 471, 472, 473], "assume_cent": [34, 80, 408, 419, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477], "clf3": [34, 133, 134, 381, 413, 566], "covariance_estim": [34, 546, 980, 1040], "features_samples_ratio": 34, "gold": [34, 194, 201, 203, 206, 210, 214, 217, 247, 252, 268, 290, 336, 385], "navi": [34, 71, 80, 100, 105, 106, 131, 179, 203, 211, 224, 247, 248, 249, 252, 268, 270, 289, 296, 327, 358], "902": [34, 36], "plot_lda": [34, 36], "doubl": [35, 118, 273, 379, 393, 411, 535, 537, 544, 838, 839, 849, 970, 976, 1001, 1002, 1028, 1038, 1039], "dispers": [35, 406, 707, 721, 982], "cov_class_1": 35, "cov_class_2": 35, "matric": [35, 40, 41, 81, 83, 96, 205, 247, 248, 250, 251, 252, 284, 297, 317, 329, 350, 351, 371, 373, 381, 382, 391, 392, 393, 406, 407, 408, 409, 411, 414, 415, 421, 447, 448, 450, 461, 470, 479, 480, 481, 531, 532, 535, 537, 538, 541, 544, 546, 547, 552, 553, 560, 563, 578, 579, 586, 640, 655, 661, 669, 671, 684, 750, 756, 764, 770, 774, 775, 776, 777, 788, 793, 794, 824, 842, 845, 850, 861, 865, 867, 870, 873, 875, 876, 878, 881, 883, 885, 887, 888, 889, 890, 891, 900, 901, 903, 904, 914, 935, 941, 950, 957, 959, 960, 976, 978, 980, 983, 984, 985, 987, 989, 990, 998, 1000, 1001, 1006, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "make_data": [35, 62], "share": [35, 86, 130, 170, 251, 350, 359, 361, 365, 366, 381, 387, 406, 411, 414, 546, 665, 701, 705, 793, 794, 798, 799, 980, 993, 1028, 1030, 1036, 1038, 1040, 1043], "spheric": [35, 58, 86, 128, 223, 248, 250, 251, 297, 375, 760, 793, 794, 982, 985, 989, 1006], "isotrop": [35, 56, 58, 62, 101, 154, 156, 221, 223, 406, 408, 416, 509, 516, 529, 612, 616, 617, 619, 620], "third": [35, 121, 126, 144, 149, 160, 218, 229, 252, 279, 289, 308, 322, 366, 374, 378, 391, 394, 414, 531, 585, 586, 587, 588, 797, 798, 799, 804, 840, 841, 842, 844, 846, 876, 888, 954, 975, 997, 1004, 1028, 1039, 1044, 1045], "x_isotropic_covari": 35, "y_isotropic_covari": 35, "x_shared_covari": 35, "y_shared_covari": 35, "x_different_covari": 35, "y_different_covari": 35, "piec": [35, 48, 201, 366, 985], "misclassifi": [35, 112, 255, 341, 350, 1001], "mark": [35, 59, 93, 144, 165, 265, 272, 371, 379, 381, 383, 387, 388, 393, 406, 532, 604, 605, 608, 629, 655, 851, 852, 893, 894, 911, 925, 930, 935, 982, 1010, 1023, 1028, 1029, 1034, 1036, 1037, 1044], "star": [35, 93, 135, 379], "ellips": [35, 229, 246, 247, 248, 251, 252, 992], "mpl": [35, 246, 247, 248, 252, 306], "plot_ellips": [35, 246], "cov": [35, 83, 87, 114, 251, 379, 393, 396, 399, 409, 419, 466, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 516, 529, 531, 538, 545], "linalg": [35, 55, 79, 80, 83, 102, 104, 106, 186, 246, 247, 248, 251, 252, 379, 385, 411, 448, 449, 450, 459, 529, 532, 538, 541, 654, 669, 671, 684, 688, 692, 933], "eigh": [35, 246, 247, 248, 251, 252, 411, 418, 530, 532, 1043], "arctan": [35, 247, 252, 375, 515], "180": [35, 246, 247, 248, 251, 252, 293, 297, 351, 385, 499], "ell": [35, 246, 247, 248, 252, 403], "patch": [35, 51, 239, 246, 247, 248, 251, 252, 256, 374, 383, 391, 411, 413, 552, 553, 580, 581, 584, 1028, 1036], "set_clip_box": [35, 246, 247, 248, 251, 252], "set_alpha": [35, 246, 247, 248, 251, 252], "add_artist": [35, 222, 246, 247, 248, 251, 252], "plot_result": [35, 122, 246, 247, 252], "pcolormesh": [35, 130, 141, 183, 287, 292, 333, 337, 341, 628], "x_right": 35, "y_right": 35, "x_wrong": 35, "y_wrong": 35, "means_": [35, 246, 247, 248, 249, 251, 252, 546, 547, 793, 794], "yellow": [35, 93, 337, 987], "set_box_aspect": 35, "svd": [35, 102, 104, 130, 222, 351, 388, 402, 409, 418, 448, 450, 479, 480, 482, 529, 530, 531, 532, 536, 537, 538, 541, 543, 546, 547, 661, 669, 670, 671, 682, 683, 684, 857, 935, 980, 1021, 1030, 1034, 1035, 1041, 1043], "store_covari": [35, 546, 547, 1033, 1035], "ax_row": 35, "align": [35, 126, 165, 221, 246, 272, 352, 393, 686, 690, 978, 989, 1000, 1022, 1023, 1044, 1045], "perpendicular": [35, 342], "bisector": 35, "singl": [35, 40, 49, 53, 54, 56, 59, 62, 63, 73, 111, 112, 113, 121, 122, 123, 131, 136, 149, 152, 158, 164, 167, 171, 173, 176, 184, 200, 202, 204, 240, 242, 251, 257, 270, 279, 302, 320, 322, 337, 350, 351, 352, 356, 358, 361, 365, 366, 373, 374, 379, 384, 386, 387, 388, 391, 392, 393, 404, 405, 407, 409, 410, 411, 413, 414, 415, 431, 434, 437, 438, 442, 443, 444, 446, 451, 461, 463, 464, 490, 491, 493, 503, 506, 531, 550, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 579, 589, 596, 597, 599, 603, 624, 629, 631, 640, 663, 664, 670, 673, 674, 675, 687, 689, 691, 707, 718, 719, 720, 721, 732, 733, 734, 737, 770, 781, 793, 794, 795, 798, 799, 809, 816, 820, 821, 823, 824, 827, 835, 838, 839, 843, 855, 856, 857, 867, 868, 871, 872, 873, 878, 879, 893, 894, 906, 907, 908, 909, 914, 944, 950, 954, 973, 975, 981, 982, 983, 986, 987, 989, 991, 993, 994, 996, 1000, 1001, 1002, 1006, 1010, 1012, 1019, 1021, 1028, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "392": [35, 36, 169, 174, 351], "plot_lda_qda": [35, 36], "auto_examples_classif": 36, "modul": [37, 38, 50, 54, 78, 85, 89, 95, 96, 111, 143, 151, 161, 163, 167, 168, 175, 178, 215, 220, 221, 245, 254, 278, 279, 281, 285, 299, 301, 302, 305, 324, 332, 349, 354, 357, 373, 374, 377, 378, 379, 380, 381, 383, 384, 385, 387, 388, 391, 393, 395, 396, 400, 404, 405, 406, 409, 413, 414, 415, 417, 441, 500, 532, 576, 577, 656, 927, 975, 980, 982, 984, 986, 987, 990, 992, 993, 996, 998, 1000, 1002, 1003, 1010, 1015, 1016, 1021, 1029, 1030, 1031, 1033, 1034, 1038, 1040, 1042], "handwritten": [37, 69, 167, 220, 225, 227, 233, 259, 302, 303, 325, 326, 372, 406, 413, 444, 499, 538, 541, 546, 563, 685, 686, 687, 688, 689, 701, 702, 714, 733, 789, 791, 847, 859, 868, 878, 891, 983, 989, 1012, 1023], "hierarch": [37, 41, 55, 69, 167, 173, 320, 393, 414, 438, 440, 442, 443, 501, 509, 511, 519, 527, 544, 727, 851, 878, 1003, 1007, 1022, 1023, 1028, 1031, 1032, 1044], "coin": [37, 69, 167, 406, 414, 438, 459, 998, 1020], "chanc": [37, 50, 69, 112, 167, 173, 200, 208, 215, 218, 261, 267, 270, 271, 312, 345, 351, 361, 378, 406, 410, 697, 699, 701, 702, 705, 713, 751, 753, 782, 791, 823, 986, 994, 1002, 1044], "agglom": [37, 45, 48, 69, 167, 406, 438, 442, 499, 688, 774, 851, 1031], "bisect": [37, 69, 167, 440, 444, 509, 1042], "quantiz": [37, 69, 167, 373, 374, 406, 440, 444, 446, 503, 775, 863, 960, 996], "birch": [37, 45, 69, 167, 320, 367, 393, 443, 446, 509, 1022, 1023, 1032, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "toi": [37, 50, 54, 58, 69, 87, 100, 115, 128, 133, 134, 167, 182, 190, 204, 214, 228, 244, 246, 301, 334, 344, 372, 385, 391, 413, 414, 437, 438, 439, 441, 443, 445, 446, 447, 449, 455, 466, 509, 511, 519, 560, 636, 674, 722, 752, 794, 844, 851, 859, 878, 902, 983, 985, 986, 992, 996, 1023], "linkag": [37, 40, 41, 42, 45, 48, 53, 56, 57, 68, 69, 167, 173, 437, 438, 442, 443, 460, 509, 511, 519, 878, 1006, 1020, 1031, 1036, 1039], "dbscan": [37, 45, 56, 66, 69, 167, 322, 391, 393, 443, 447, 449, 452, 509, 701, 702, 714, 733, 789, 791, 850, 878, 989, 1022, 1023, 1028, 1030, 1032, 1033, 1035, 1036, 1037, 1044], "hdbscan": [37, 45, 69, 167, 441, 509, 878, 976, 1006, 1022, 1023, 1044, 1045], "optic": [37, 45, 69, 167, 320, 372, 417, 441, 443, 452, 453, 454, 499, 1022, 1023, 1037, 1041, 1042, 1043, 1044, 1045], "affin": [37, 45, 69, 167, 306, 371, 381, 393, 405, 411, 437, 438, 442, 449, 451, 459, 509, 532, 688, 692, 701, 702, 714, 733, 789, 791, 894, 980, 983, 986, 1022, 1023, 1028, 1029, 1032, 1038, 1039, 1041, 1043], "propag": [37, 69, 167, 324, 331, 374, 405, 437, 451, 499, 509, 511, 694, 701, 702, 710, 711, 714, 715, 733, 789, 791, 858, 872, 893, 894, 895, 952, 953, 990, 1008, 1022, 1023, 1028, 1040, 1043], "agglomer": [37, 69, 167, 371, 406, 414, 442, 499, 597, 603, 642, 795, 800, 858, 1023], "unstructur": [37, 69, 167, 302, 406, 438, 442, 460, 500, 527, 851, 998, 1010, 1032], "dendrogram": [37, 69, 167, 173, 406, 438, 442, 501, 1040], "pictur": [37, 69, 167, 233, 252, 374, 394, 406, 411, 414, 459, 490, 491, 518, 1007], "greek": [37, 69, 167, 406, 459], "silhouett": [37, 39, 50, 58, 59, 69, 167, 351, 379, 444, 509, 788, 789, 1028, 1032], "embed": [37, 45, 47, 69, 117, 152, 167, 220, 223, 225, 227, 228, 244, 284, 293, 385, 393, 405, 406, 438, 449, 459, 486, 499, 541, 546, 563, 579, 636, 685, 686, 687, 688, 689, 690, 691, 692, 693, 847, 859, 868, 890, 891, 892, 978, 989, 992, 998, 1003, 1006, 1022, 1023, 1028, 1029, 1039, 1040, 1042], "uniformli": [38, 118, 125, 144, 229, 246, 316, 381, 513, 514, 515, 548, 639, 799, 807, 809, 877, 975, 976, 986, 989, 996, 1032, 1037], "divid": [38, 44, 49, 92, 96, 146, 157, 200, 239, 246, 351, 361, 375, 376, 403, 406, 410, 411, 466, 467, 468, 469, 470, 471, 472, 473, 509, 516, 531, 538, 647, 648, 651, 652, 653, 661, 662, 673, 674, 675, 716, 722, 730, 734, 752, 790, 792, 855, 856, 900, 903, 935, 938, 939, 975, 983, 985, 986, 989, 996, 1000, 1021, 1028, 1035, 1036, 1039], "quiroz": [38, 58, 118, 179, 184, 239, 262, 264, 311, 350, 351, 352], "fundament": [38, 50, 82, 351, 377, 392, 409, 493, 535, 537, 544, 705, 982, 986], "homogen": [38, 39, 40, 45, 47, 50, 56, 59, 351, 374, 391, 393, 408, 413, 416, 443, 611, 701, 714, 727, 732, 733, 753, 791, 983, 984, 986, 1037], "frequent": [38, 112, 165, 264, 270, 271, 351, 368, 376, 379, 414, 548, 587, 627, 848, 871, 872, 875, 887, 976, 978, 986, 1000, 1004, 1007], "ari": [38, 59, 351, 406, 702, 1033, 1039], "mutual": [38, 39, 50, 56, 59, 143, 150, 167, 393, 413, 415, 443, 589, 592, 593, 596, 597, 603, 604, 605, 606, 701, 702, 712, 751, 753, 782, 791, 975, 982, 986, 987, 1028, 1034, 1044], "mi": [38, 144, 406, 604, 605, 701, 751, 753, 976, 986, 1000], "theoret": [38, 58, 152, 405, 406, 413, 550, 551, 636, 701, 722, 752, 898, 975, 982, 983, 985, 986, 988, 998, 1000, 1001, 1009, 1010], "nmi": [38, 406, 714, 732, 733, 753], "ami": [38, 50, 59, 406, 701], "score_func": [38, 72, 73, 589, 592, 593, 595, 596, 597, 738, 1028, 1030], "rand_scor": [38, 406, 712, 986, 1040], "adjusted_rand_scor": [38, 39, 50, 59, 351, 406, 701, 712, 753, 782, 986, 1041], "mutual_info_scor": [38, 406, 701, 986, 1036, 1039, 1040], "normalized_mutual_info_scor": [38, 406, 732, 751, 791, 986, 1036, 1042], "adjusted_mutual_info_scor": [38, 39, 50, 59, 406, 702, 712, 751, 753, 782, 986, 1028, 1036, 1040, 1044], "random_label": 38, "labels_a": 38, "labels_b": 38, "fixed_classes_uniform_labelings_scor": 38, "n_clusters_rang": 38, "n_run": [38, 62, 176, 351], "seaborn": [38, 113, 169, 170, 179, 184, 251, 261, 379, 396, 399, 1006], "sn": [38, 113, 169, 170, 179, 184, 251, 261], "color_palett": [38, 113, 251], "colorblind": [38, 113], "vx": 38, "errorbar": [38, 62, 80, 82, 148, 158, 159, 286, 328, 340, 801, 817], "satur": [38, 170, 306], "uniform_labelings_scor": 38, "nwith": [38, 58, 62, 148, 351], "constantli": [38, 200, 1010], "unbound": [38, 985, 1042], "cardin": [38, 119, 120, 126, 172, 173, 312, 313, 322, 406, 413, 460, 550, 551, 554, 555, 556, 557, 561, 562, 563, 676, 871, 872, 879, 906, 907, 908, 909, 986, 987, 994, 996, 1042, 1043], "why": [38, 53, 96, 112, 118, 170, 172, 176, 189, 258, 261, 279, 350, 351, 379, 387, 393, 406, 408, 411, 417, 441, 444, 448, 986, 988, 1001, 1016, 1019, 1031], "chart": [38, 266, 987, 1014, 1031], "henc": [38, 61, 73, 170, 204, 233, 270, 337, 350, 351, 365, 374, 381, 383, 385, 393, 396, 406, 410, 413, 414, 484, 505, 536, 538, 539, 540, 560, 587, 640, 643, 649, 657, 659, 669, 684, 701, 702, 706, 712, 727, 753, 782, 791, 814, 815, 833, 834, 835, 836, 837, 873, 943, 983, 985, 986, 987, 992, 993, 996, 1007, 1035, 1036, 1039, 1040, 1042], "safe": [38, 170, 189, 236, 351, 379, 381, 406, 407, 431, 505, 506, 585, 588, 594, 770, 774, 892, 952, 958, 989, 1034, 1035, 1036, 1041, 1042], "stabil": [38, 116, 170, 222, 266, 306, 345, 351, 393, 403, 443, 647, 651, 667, 836, 855, 856, 874, 886, 934, 976, 982, 985, 996, 1007, 1012, 1028, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "mislead": [38, 119, 120, 126, 170, 380, 395, 413, 550, 551, 554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909, 1023, 1041], "meaning": [38, 173, 226, 293, 352, 403, 410, 414, 415, 545, 725, 726, 734, 779, 780, 783, 847, 990, 1000, 1001, 1028, 1044], "925": [38, 69, 986, 1016], "plot_adjusted_for_chance_measur": [38, 69], "brendan": [39, 437, 451, 1044], "frei": [39, 437, 451, 1038], "delbert": [39, 437, 451], "dueck": [39, 437, 451], "messag": [39, 45, 63, 71, 96, 236, 350, 351, 374, 377, 378, 379, 383, 384, 387, 388, 406, 437, 451, 465, 536, 540, 545, 571, 624, 709, 795, 798, 799, 801, 809, 817, 822, 825, 827, 847, 855, 856, 896, 917, 918, 919, 922, 925, 949, 970, 986, 996, 1028, 1032, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "feb": [39, 437, 451], "affinitypropag": [39, 45, 320, 406, 1028, 1031, 1032, 1036, 1039, 1041, 1042, 1043, 1044], "labels_tru": [39, 50, 56, 65, 406, 701, 702, 711, 712, 714, 727, 732, 733, 751, 753, 782, 791], "af": 39, "prefer": [39, 45, 56, 252, 270, 306, 361, 365, 366, 367, 377, 379, 380, 381, 393, 406, 410, 411, 413, 414, 437, 451, 468, 469, 475, 484, 505, 506, 624, 629, 630, 651, 655, 656, 698, 722, 724, 738, 753, 754, 847, 873, 898, 899, 940, 952, 975, 978, 980, 982, 986, 991, 1001, 1002, 1006, 1019, 1029, 1035, 1037, 1041, 1042, 1045], "cluster_centers_indic": [39, 451], "cluster_centers_indices_": [39, 437], "labels_": [39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 56, 59, 62, 63, 64, 66, 68, 320, 322, 351, 379, 393, 406, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 452, 1020, 1033], "n_clusters_": [39, 50, 56, 64, 438, 442], "homogeneity_scor": [39, 50, 59, 351, 406, 714, 732, 791, 986], "completeness_scor": [39, 50, 59, 317, 351, 406, 732, 733, 791, 986], "silhouette_scor": [39, 50, 59, 61, 351, 379, 406, 1028, 1032, 1034, 1036, 1038, 1042], "sqeuclidean": [39, 447, 454, 774, 775, 776], "872": [39, 994], "912": [39, 150], "871": [39, 81, 82, 408, 471], "753": [39, 350], "cycler": 39, "class_memb": 39, "cluster_cent": [39, 62, 64, 65, 458], "285": [39, 69, 218, 219, 243, 326, 720], "plot_affinity_propag": [39, 69, 437, 451], "impos": [40, 58, 129, 194, 204, 312, 391, 406, 411, 413, 414, 524, 654, 982], "simpli": [40, 87, 130, 152, 160, 225, 237, 239, 270, 297, 318, 319, 365, 374, 379, 381, 384, 391, 393, 408, 409, 410, 411, 413, 414, 482, 692, 758, 761, 865, 937, 978, 986, 987, 988, 989, 1000, 1013, 1021, 1035, 1036, 1037], "There": [40, 47, 118, 152, 218, 225, 236, 252, 256, 258, 261, 282, 350, 372, 374, 376, 379, 380, 381, 384, 391, 393, 394, 396, 403, 405, 406, 411, 413, 414, 415, 443, 449, 459, 531, 550, 551, 556, 557, 585, 586, 588, 603, 642, 976, 982, 983, 984, 985, 986, 989, 993, 996, 1000, 1001, 1002, 1005, 1009, 1020, 1028, 1036], "unstabl": [40, 67, 170, 406, 408, 409, 686, 690, 934, 935, 1002, 1032, 1033, 1035, 1040, 1042, 1044], "quickli": [40, 240, 301, 316, 376, 379, 380, 410, 413, 689, 982, 989, 990, 1010, 1021, 1039], "fight": [40, 204, 1010], "percol": 40, "distanc": [40, 41, 56, 58, 61, 62, 66, 68, 78, 82, 84, 101, 149, 164, 167, 173, 186, 201, 221, 223, 226, 233, 239, 284, 286, 287, 292, 294, 296, 297, 306, 311, 316, 320, 321, 341, 350, 351, 365, 376, 388, 391, 393, 403, 406, 408, 411, 412, 416, 417, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 452, 453, 454, 455, 456, 458, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 535, 537, 544, 604, 605, 612, 616, 617, 619, 620, 625, 655, 656, 663, 665, 671, 672, 673, 674, 675, 685, 686, 687, 689, 690, 691, 692, 693, 696, 700, 721, 730, 754, 756, 758, 759, 760, 761, 764, 765, 766, 767, 768, 769, 774, 775, 776, 777, 788, 789, 792, 827, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 877, 892, 896, 898, 900, 902, 903, 904, 906, 907, 908, 909, 976, 980, 983, 984, 986, 992, 996, 998, 1000, 1001, 1007, 1019, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "merg": [40, 42, 47, 52, 319, 377, 379, 382, 387, 391, 394, 406, 437, 438, 439, 442, 443, 460, 815, 1020, 1028, 1035], "exagger": [40, 170, 689, 983], "behaviour": [40, 101, 201, 202, 218, 339, 379, 393, 406, 413, 556, 557, 561, 562, 599, 738, 796, 797, 800, 812, 813, 814, 815, 816, 896, 906, 907, 959, 975, 976, 986, 996, 1036, 1039, 1040, 1043, 1044], "shortest": [40, 384, 388, 685, 940, 983, 1041], "mechan": [40, 236, 346, 350, 366, 379, 381, 406, 414, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 600, 607, 608, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 984, 1002, 1010], "resembl": [40, 204], "brittl": [40, 406], "pronounc": [40, 41, 53, 157], "kneighbors_graph": [40, 45, 63, 68, 284, 393, 406, 438, 442, 840, 841, 842, 844, 846, 848, 849, 850, 852, 989, 1028, 1032, 1037], "geometri": [40, 406, 983, 989], "instabl": [40, 170, 294, 416, 449, 532, 536, 540, 692, 1035, 1038, 1041], "agglomerativeclust": [40, 41, 42, 45, 48, 53, 57, 63, 68, 393, 406, 437, 439, 442, 1020, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1043], "1500": [40, 51, 58, 63, 68, 93, 221, 225, 246], "knn_graph": 40, "include_self": [40, 45, 68, 851, 852, 1032], "709": [40, 69, 262], "plot_agglomerative_clust": [40, 69], "waveform": 41, "euclidean": [41, 58, 59, 186, 233, 239, 284, 287, 292, 316, 321, 341, 351, 403, 405, 406, 411, 412, 413, 414, 416, 437, 438, 441, 442, 443, 447, 449, 454, 457, 460, 528, 534, 586, 612, 616, 619, 620, 673, 675, 687, 689, 692, 693, 696, 758, 759, 765, 766, 767, 768, 774, 775, 776, 777, 788, 789, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 892, 976, 980, 984, 987, 989, 998, 1007, 1032, 1035, 1036, 1037, 1038, 1044, 1045], "cityblock": [41, 45, 406, 447, 454, 758, 774, 775, 776, 989], "invari": [41, 376, 393, 406, 416, 611, 686, 743, 813, 814, 982, 983, 986, 1001, 1007, 1036, 1039, 1040, 1041], "ie": [41, 67, 97, 437, 701, 764, 982, 996], "inter": [41, 119, 361, 413, 713, 941], "character": [41, 218, 355, 406, 410, 983], "ill": [41, 83, 205, 303, 468, 469, 475, 647, 648, 651, 652, 653, 679, 680, 982, 985, 1020, 1038], "recov": [41, 66, 83, 97, 98, 104, 122, 152, 169, 184, 199, 200, 204, 221, 352, 408, 412, 415, 418, 457, 530, 556, 982, 983, 985, 1007, 1020, 1034], "put": [41, 59, 141, 152, 154, 234, 241, 246, 300, 308, 320, 330, 342, 347, 367, 381, 383, 384, 387, 416, 440, 444, 456, 512, 611, 644, 658, 793, 875, 879, 887, 900, 901, 902, 903, 904, 925, 976, 983, 985, 986, 987, 993, 996, 1009, 1013, 1015, 1021, 1040], "cc": [41, 377], "patheffect": 41, "pairwise_dist": [41, 393, 406, 417, 438, 441, 442, 443, 447, 454, 685, 693, 758, 767, 775, 776, 788, 789, 842, 844, 846, 850, 984, 1028, 1032, 1034, 1036, 1037, 1039, 1040, 1045], "sqr": 41, "sign": [41, 80, 87, 97, 100, 114, 184, 251, 300, 345, 379, 406, 411, 414, 541, 579, 586, 603, 632, 633, 655, 656, 663, 665, 671, 672, 673, 674, 731, 738, 898, 902, 933, 935, 951, 982, 986, 991, 996, 1000, 1001, 1020, 1028, 1032, 1037, 1041, 1043], "phi": [41, 411, 739, 864, 978, 986, 996, 1001], "phase_nois": 41, "amplitude_nois": 41, "additional_nois": 41, "f7bd01": 41, "377eb8": [41, 45, 63, 64, 229], "f781bf": [41, 45, 63, 64], "set_label": [41, 155, 233], "tight": [41, 106, 114, 121, 141, 145, 185, 187, 192, 193, 194, 205, 209, 212, 217, 223, 226, 250, 284, 290, 291, 295, 296, 333, 337, 340, 342, 356, 579, 689, 1040], "avg_dist": [41, 777], "set_path_effect": 41, "withstrok": 41, "foreground": [41, 67], "cividi": 41, "45": [41, 65, 74, 86, 145, 157, 172, 189, 200, 218, 268, 272, 273, 326, 337, 410, 413, 414, 561, 562, 624, 631, 784, 793, 902, 976, 986, 994, 1005, 1017, 1024, 1028, 1031], "interclass": 41, "plot_agglomerative_clustering_metr": [41, 69], "hierarchi": [42, 173, 379, 447, 453, 460, 991, 1020], "plot_dendrogram": 42, "kwarg": [42, 99, 236, 381, 386, 420, 424, 428, 435, 439, 445, 447, 461, 466, 532, 535, 537, 560, 614, 628, 643, 644, 649, 650, 657, 658, 659, 660, 674, 678, 681, 695, 696, 697, 699, 738, 838, 839, 857, 858, 862, 902, 913, 932, 946, 1035, 1039, 1041, 1045], "children_": [42, 438, 442, 460], "current_count": 42, "child_idx": 42, "leaf": [42, 117, 128, 130, 355, 359, 406, 413, 417, 438, 439, 440, 441, 442, 443, 447, 454, 460, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 906, 907, 908, 909, 910, 911, 989, 1002, 1031, 1033, 1035, 1039, 1042], "linkage_matrix": 42, "column_stack": [42, 300, 308], "distances_": [42, 438, 442, 1040], "distance_threshold": [42, 438, 442, 1037, 1040], "truncate_mod": 42, "parenthesi": [42, 379], "094": [42, 69, 241, 244, 469], "plot_agglomerative_dendrogram": [42, 69], "scalabl": [43, 45, 63, 167, 175, 177, 254, 277, 321, 351, 379, 406, 413, 414, 445, 488, 499, 586, 637, 801, 812, 822, 824, 836, 859, 868, 870, 898, 900, 903, 904, 978, 981, 983, 986, 999, 1001, 1010, 1028, 1031, 1032, 1038, 1039, 1042, 1043], "hundr": [43, 124, 222, 310, 374, 410, 413, 558, 559, 983, 1039], "thousand": [43, 118, 233, 235, 310, 351, 374, 406, 413, 855, 856, 903, 983, 1021, 1037, 1039], "million": [43, 57, 157, 176, 414, 689, 983, 1001, 1010, 1042, 1043], "chose": [43, 170, 1016], "usag": [43, 54, 72, 75, 86, 100, 110, 123, 146, 170, 171, 230, 234, 236, 255, 293, 295, 302, 333, 352, 365, 374, 378, 379, 381, 382, 386, 387, 389, 393, 394, 396, 405, 406, 410, 411, 416, 417, 441, 443, 447, 461, 486, 509, 512, 516, 520, 558, 559, 588, 606, 637, 645, 655, 656, 657, 663, 664, 665, 666, 673, 674, 675, 676, 677, 687, 774, 777, 788, 789, 857, 898, 906, 907, 908, 909, 935, 975, 976, 978, 985, 986, 987, 989, 1001, 1008, 1012, 1016, 1023, 1029, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "enjoi": 43, "edit": [43, 376, 378, 379, 382, 383, 387, 391, 396, 527, 531, 828, 980, 982, 987, 993, 1021], "158": [43, 295, 298, 413, 666], "manojkumarsivaraj334": 43, "joblib": [43, 55, 73, 118, 284, 317, 374, 377, 379, 382, 388, 391, 393, 396, 399, 400, 405, 407, 417, 434, 438, 441, 442, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 505, 528, 532, 533, 534, 536, 539, 540, 542, 543, 545, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 591, 599, 607, 629, 631, 636, 644, 648, 650, 652, 654, 655, 656, 658, 660, 662, 663, 665, 673, 676, 685, 686, 687, 688, 689, 690, 691, 770, 774, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 840, 841, 844, 846, 848, 849, 851, 852, 857, 858, 859, 860, 893, 894, 952, 953, 954, 956, 971, 986, 1007, 1028, 1029, 1031, 1033, 1035, 1036, 1037, 1039, 1040, 1043, 1045], "cpu_count": [43, 118, 284, 954], "xx": [43, 59, 81, 121, 125, 130, 141, 154, 155, 156, 171, 187, 207, 210, 211, 212, 213, 214, 226, 229, 237, 250, 290, 300, 308, 309, 330, 336, 337, 342, 343, 346, 347, 383], "yy": [43, 59, 81, 121, 130, 141, 154, 156, 171, 207, 211, 212, 213, 214, 226, 229, 237, 290, 300, 308, 309, 330, 336, 337, 342, 343, 346, 347], "n_center": [43, 509], "25000": 43, "colors_": 43, "cname": 43, "birch_model": 43, "final_step": 43, "centroid": [43, 46, 58, 59, 167, 285, 298, 309, 320, 351, 375, 406, 439, 440, 443, 444, 445, 446, 449, 456, 457, 459, 501, 546, 628, 845, 1008, 1023, 1028, 1032, 1035, 1040, 1044], "subcluster_centers_": [43, 439], "this_centroid": 43, "set_autoscaley_on": 43, "mbk": [43, 65], "256": [43, 49, 54, 124, 198, 219, 312, 366, 374, 406, 413, 446, 465, 534, 543, 560, 854, 886, 896, 1021, 1042], "max_no_improv": [43, 62, 65, 446, 534, 535, 536, 543, 1042, 1043], "t_mini_batch": [43, 65], "mbk_means_labels_uniqu": 43, "cluster_centers_": [43, 44, 49, 51, 59, 61, 62, 64, 65, 96, 320, 351, 437, 440, 444, 445, 446, 1020], "364": [43, 69, 468, 469, 1029], "plot_birch_vs_minibatchkmean": [43, 69], "cloud": [44, 86, 95, 102, 108, 167, 387, 411, 530, 538, 689, 986, 1005, 1006, 1020], "bisectingkmean": [44, 406, 1042, 1043, 1044], "__doc__": [44, 76, 157, 249, 393], "n_clusters_list": 44, "clustering_algorithm": [44, 45, 63], "variant": [44, 96, 163, 166, 167, 261, 319, 320, 351, 352, 385, 406, 409, 411, 414, 416, 446, 457, 487, 490, 491, 509, 512, 540, 556, 557, 562, 612, 616, 619, 620, 624, 627, 635, 636, 638, 642, 669, 701, 796, 800, 802, 803, 804, 813, 820, 841, 859, 895, 976, 982, 983, 984, 985, 986, 988, 989, 1000, 1007, 1021, 1028, 1036], "algorithm_nam": 44, "algo": [44, 106], "hide": [44, 379, 387, 833, 834, 835, 836, 837, 1031, 1036, 1044], "flat": [44, 96, 102, 171, 221, 222, 223, 259, 406, 414, 437, 443, 445, 458, 506, 993, 1020, 1028, 1029, 1044], "label_out": 44, "959": [44, 69, 874, 886], "plot_bisect_kmean": [44, 69], "null": [45, 72, 170, 171, 172, 261, 267, 406, 410, 645, 666, 677, 701, 727, 753, 791, 823, 982, 983, 986, 1001, 1038], "mismatch": [45, 985, 1037], "warn": [45, 63, 73, 200, 215, 236, 264, 284, 301, 302, 310, 365, 368, 379, 382, 383, 384, 393, 400, 407, 414, 444, 446, 456, 493, 535, 537, 544, 547, 550, 551, 554, 555, 556, 557, 558, 559, 561, 562, 563, 568, 569, 570, 571, 572, 573, 575, 599, 633, 667, 687, 690, 691, 709, 710, 725, 726, 734, 779, 780, 783, 833, 834, 835, 837, 848, 862, 863, 898, 899, 901, 902, 903, 904, 906, 907, 908, 909, 918, 919, 925, 935, 943, 952, 956, 972, 973, 975, 986, 996, 1019, 1028, 1030, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "noisy_circl": [45, 63], "noisy_moon": [45, 63], "no_structur": [45, 63], "anisotropicli": [45, 63], "170": [45, 58, 59, 63, 385], "x_aniso": [45, 58, 63], "aniso": [45, 63], "plot_num": [45, 63, 229], "default_bas": [45, 63], "quantil": [45, 54, 64, 92, 112, 114, 167, 178, 219, 306, 309, 310, 391, 413, 435, 436, 455, 516, 549, 557, 559, 654, 667, 719, 741, 744, 746, 821, 863, 875, 876, 877, 887, 888, 986, 996, 1008, 1023, 1028, 1032, 1035, 1037, 1041, 1042, 1044], "damp": [45, 406, 437, 451], "min_sampl": [45, 50, 66, 391, 393, 406, 417, 441, 443, 447, 453, 454, 668, 982, 1037, 1041], "xi": [45, 66, 376, 406, 409, 414, 447, 453, 506, 1000, 1039], "min_cluster_s": [45, 66, 322, 406, 443, 447, 453, 1037], "allow_single_clust": [45, 443], "hdbscan_min_cluster_s": 45, "hdbscan_min_sampl": 45, "220": [45, 1028], "i_dataset": [45, 63, 229], "algo_param": [45, 63], "param": [45, 56, 62, 63, 72, 124, 126, 127, 221, 235, 236, 259, 261, 269, 273, 288, 301, 379, 381, 393, 397, 413, 416, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 807, 809, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 942, 943, 975, 1034, 1038, 1039, 1041, 1042, 1045], "easier": [45, 63, 67, 83, 122, 179, 185, 231, 239, 258, 259, 306, 337, 350, 361, 374, 379, 381, 384, 387, 391, 396, 408, 410, 465, 512, 896, 929, 981, 986, 993, 1002, 1007, 1010, 1021, 1037, 1042], "estimate_bandwidth": [45, 64, 406, 445, 458], "symmetr": [45, 125, 173, 202, 393, 404, 406, 449, 459, 460, 471, 516, 524, 526, 687, 691, 692, 701, 702, 712, 713, 714, 720, 724, 732, 733, 751, 753, 759, 781, 791, 793, 794, 972, 975, 982, 986, 989, 1044], "meanshift": [45, 320, 406, 437, 1031, 1032, 1033, 1036, 1038, 1039, 1042, 1043, 1044], "bin_seed": [45, 64, 445, 458, 1039], "two_mean": 45, "spectralclust": [45, 320, 406, 437, 989, 1028, 1029, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "nearest_neighbor": [45, 449, 688], "average_linkag": 45, "gmm": [45, 167, 245, 247, 250, 251, 252, 253, 501, 509, 794, 814, 985, 1028, 1029, 1032, 1033, 1034], "gaussianmixtur": [45, 58, 247, 248, 249, 250, 251, 252, 412, 793, 985, 1034, 1036, 1037, 1041, 1042, 1044], "covariance_typ": [45, 247, 248, 250, 251, 252, 793, 794, 1044], "nkmean": 45, "npropag": 45, "ncluster": 45, "nmixtur": 45, "catch": [45, 63, 302, 387, 388], "catch_warn": [45, 63, 236, 301, 302], "filterwarn": [45, 63, 215, 301, 302, 379, 996], "userwarn": [45, 63, 114, 161, 192, 209, 342, 356, 384, 709, 996, 1034, 1036, 1041], "t1": [45, 47, 63, 215, 223, 226, 229], "ff7f00": [45, 63, 229], "4daf4a": [45, 63], "a65628": [45, 63], "984ea3": [45, 63], "999999": [45, 63], "e41a1c": [45, 63], "dede00": [45, 63, 64], "transax": [45, 63, 225, 229, 248, 292, 308], "479": [45, 69, 161], "plot_cluster_comparison": [45, 69], "bad": [46, 61, 62, 153, 170, 350, 361, 379, 406, 416, 689, 742, 975, 982, 983, 988, 994, 1020, 1028], "eight": [46, 1021], "deliv": [46, 365, 1010], "though": [46, 56, 118, 149, 176, 179, 239, 267, 289, 308, 310, 351, 352, 361, 365, 373, 376, 379, 381, 392, 393, 406, 411, 412, 413, 414, 415, 696, 802, 804, 898, 975, 976, 978, 983, 986, 989, 996, 1000, 1021, 1036], "3d": [46, 49, 68, 91, 102, 103, 197, 221, 223, 225, 359, 414, 503, 583, 949, 1035, 1036, 1038], "mplot3d": [46, 68, 91, 102, 103, 171, 197, 221, 223], "noqa": [46, 68, 91, 102, 103, 125, 149, 164, 165, 171, 197, 221, 223, 272, 273, 318, 350, 383, 576, 577, 624, 798, 799, 975, 1037], "f401": [46, 68, 91, 102, 103, 171, 197, 221, 223], "k_means_iris_8": 46, "k_means_iris_3": 46, "k_means_iris_bad_init": 46, "est": [46, 132, 170, 236, 238, 308, 318, 361, 400, 413, 559, 731, 863, 975, 986, 996, 1000, 1039, 1040], "elev": [46, 68, 91, 102, 103, 171, 197, 221, 225], "azim": [46, 68, 91, 102, 103, 171, 197, 221, 225], "134": [46, 54, 96, 103, 108, 124, 261, 1031], "xaxi": [46, 91, 102, 103, 118, 197, 221, 223, 226, 284, 289, 350], "set_ticklabel": [46, 91, 102, 103, 197, 350], "zaxi": [46, 91, 102, 103, 197, 221], "petal": [46, 91, 105, 107, 121, 243, 318, 321, 376, 407, 911, 1002, 1018, 1019], "sepal": [46, 91, 105, 107, 121, 154, 183, 243, 287, 318, 321, 334, 376, 996, 1018, 1019], "length": [46, 71, 90, 91, 93, 105, 107, 121, 149, 152, 153, 154, 157, 158, 160, 176, 183, 236, 237, 240, 243, 287, 318, 321, 334, 352, 372, 376, 379, 387, 388, 393, 407, 411, 413, 414, 416, 442, 487, 505, 506, 509, 512, 520, 548, 560, 578, 579, 586, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 629, 643, 644, 647, 648, 649, 650, 651, 653, 654, 657, 658, 659, 660, 678, 681, 777, 795, 798, 799, 809, 824, 826, 829, 830, 832, 840, 841, 842, 844, 846, 885, 911, 918, 920, 924, 940, 941, 957, 960, 985, 992, 996, 1012, 1018, 1019, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1044], "set_zlabel": [46, 91, 197], "setosa": [46, 91, 103, 105, 270, 271, 376, 501, 1012, 1019], "versicolour": [46, 91, 103, 105, 376, 1019], "virginica": [46, 91, 103, 105, 270, 271, 376, 501, 986, 1019], "text3d": [46, 103], "277": [46, 69, 994, 1030], "plot_cluster_iri": [46, 69], "voxel": [47, 67, 582], "multipl": [47, 70, 77, 93, 106, 112, 118, 120, 121, 167, 170, 194, 234, 261, 273, 279, 282, 286, 316, 322, 365, 366, 367, 373, 375, 376, 379, 381, 382, 383, 384, 391, 393, 405, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 441, 457, 461, 463, 464, 466, 471, 485, 488, 489, 492, 493, 494, 500, 501, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 548, 550, 551, 552, 553, 556, 557, 558, 559, 560, 578, 596, 604, 605, 607, 608, 624, 629, 631, 636, 637, 638, 639, 643, 644, 647, 649, 650, 651, 654, 657, 658, 659, 660, 663, 664, 665, 668, 670, 673, 675, 676, 686, 687, 689, 690, 691, 718, 719, 724, 741, 742, 744, 746, 747, 749, 781, 784, 786, 787, 789, 793, 794, 795, 797, 798, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 820, 821, 822, 824, 828, 829, 830, 831, 832, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 860, 863, 875, 879, 887, 890, 891, 898, 899, 900, 903, 914, 929, 934, 935, 957, 960, 978, 981, 982, 983, 987, 988, 989, 993, 994, 999, 1000, 1002, 1006, 1007, 1012, 1021, 1028, 1029, 1031, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1044], "partli": [47, 765], "procedur": [47, 57, 118, 125, 149, 180, 188, 251, 263, 309, 313, 337, 350, 361, 379, 381, 391, 392, 393, 394, 404, 405, 408, 410, 411, 413, 415, 528, 534, 535, 537, 542, 543, 544, 550, 551, 552, 553, 556, 557, 590, 592, 599, 606, 641, 669, 671, 684, 724, 781, 855, 856, 875, 887, 957, 975, 982, 988, 994, 996, 999, 1000, 1001, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "solut": [47, 179, 184, 189, 191, 205, 214, 229, 235, 319, 337, 377, 381, 393, 403, 406, 408, 410, 411, 414, 415, 446, 448, 450, 528, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 607, 643, 645, 647, 649, 651, 652, 653, 655, 657, 659, 661, 662, 663, 664, 665, 666, 669, 671, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 793, 794, 809, 847, 855, 856, 979, 980, 982, 983, 985, 990, 992, 1000, 1001, 1005, 1010, 1016, 1019, 1021, 1028, 1031, 1041, 1042, 1043], "closest": [47, 65, 204, 381, 406, 437, 439, 440, 444, 445, 446, 456, 650, 775, 776, 828, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 977, 980, 987, 989, 1019], "partit": [47, 67, 71, 128, 130, 261, 302, 393, 403, 404, 406, 410, 413, 446, 448, 450, 459, 508, 554, 555, 556, 557, 560, 561, 562, 701, 702, 712, 782, 846, 906, 907, 908, 909, 985, 989, 992, 996, 1002, 1021], "cluster_qr": [47, 406, 449, 459, 1042], "qr": [47, 202, 402, 531, 538, 541, 934, 935, 983, 1034, 1045], "pivot": [47, 272, 273], "cheung": [47, 1029], "andrew": [47, 406, 459, 688, 692, 714, 733, 791, 873, 990, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "knyazev": [47, 406, 449, 459, 692, 1038, 1041, 1042], "ucdenv": 47, "skimag": [47, 48, 373, 1020], "spectral_clust": [47, 67, 1036, 1038, 1040, 1041, 1042, 1043, 1045], "orig_coin": [47, 48], "speed": [47, 48, 58, 71, 99, 110, 118, 165, 171, 186, 189, 193, 284, 318, 326, 350, 352, 367, 368, 379, 382, 388, 391, 393, 402, 404, 406, 411, 413, 414, 417, 440, 441, 444, 445, 446, 447, 449, 454, 456, 457, 458, 459, 528, 529, 607, 624, 629, 630, 631, 636, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 661, 678, 681, 689, 793, 794, 801, 822, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 873, 935, 975, 978, 983, 985, 987, 1000, 1010, 1020, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "down": [47, 48, 82, 112, 215, 216, 223, 233, 234, 236, 264, 279, 303, 306, 341, 361, 373, 382, 387, 408, 411, 440, 447, 453, 587, 590, 591, 636, 646, 770, 774, 777, 867, 868, 873, 876, 877, 888, 900, 903, 910, 982, 1012, 1020, 1036], "alias": [47, 48, 236, 377, 379, 382, 397, 444, 456, 594, 1028, 1032, 1042], "smoothened_coin": [47, 48], "rescaled_coin": [47, 48, 1020], "anti_alias": [47, 48, 1020], "img_to_graph": [47, 67, 414, 1031, 1041], "exponenti": [47, 76, 152, 157, 289, 294, 412, 413, 416, 446, 533, 551, 556, 611, 616, 619, 636, 640, 754, 755, 838, 839, 843, 855, 856, 873, 978, 982, 986, 1001, 1019, 1035, 1041], "beta": [47, 86, 169, 204, 385, 404, 406, 409, 533, 535, 537, 544, 641, 725, 726, 732, 738, 779, 791, 793, 986, 1019, 1030, 1033, 1035, 1037, 1038], "voronoi": [47, 67, 406], "n_region": 47, "extra": [47, 121, 238, 284, 352, 377, 378, 380, 383, 393, 413, 414, 435, 440, 444, 456, 461, 529, 554, 555, 563, 587, 588, 697, 698, 699, 819, 842, 908, 909, 925, 985, 986, 989, 1028, 1031, 1033, 1034, 1036, 1041, 1043], "benetif": 47, "n_regions_plu": 47, "lobpcg": [47, 449, 459, 685, 688, 692, 1038, 1041, 1042, 1043], "amg": [47, 67, 406, 449, 459, 688, 692, 1038, 1042, 1043], "pyamg": [47, 396, 399, 406, 449, 459, 688, 692], "toler": [47, 74, 164, 191, 193, 216, 217, 341, 352, 374, 381, 388, 406, 418, 440, 444, 449, 456, 459, 468, 469, 475, 479, 480, 481, 528, 529, 530, 532, 533, 537, 538, 539, 540, 541, 542, 544, 545, 556, 557, 558, 559, 624, 643, 644, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 673, 675, 676, 678, 679, 680, 681, 685, 686, 687, 688, 690, 691, 692, 838, 839, 843, 847, 855, 856, 893, 894, 898, 899, 900, 901, 902, 903, 904, 972, 982, 986, 1000, 1001, 1017, 1040, 1041, 1042, 1043], "eigen_tol": [47, 449, 459, 688, 692, 1029, 1042, 1043], "todo": [47, 233, 383, 387, 393, 406, 1045], "21243": 47, "assign_label": [47, 406, 449, 459], "individu": [47, 61, 81, 111, 115, 132, 136, 144, 161, 167, 168, 173, 174, 200, 218, 230, 239, 264, 266, 282, 316, 341, 345, 366, 380, 383, 386, 388, 393, 395, 403, 407, 410, 413, 414, 434, 449, 459, 461, 493, 498, 500, 506, 552, 553, 556, 557, 559, 560, 562, 564, 565, 566, 567, 600, 606, 607, 629, 630, 640, 642, 654, 655, 656, 665, 668, 669, 670, 671, 672, 673, 674, 675, 684, 709, 716, 724, 730, 746, 747, 781, 786, 787, 795, 809, 826, 830, 831, 833, 834, 835, 836, 837, 856, 859, 867, 868, 870, 871, 872, 875, 877, 878, 883, 884, 885, 898, 899, 986, 987, 996, 1001, 1016, 1021, 1023, 1029, 1032, 1034, 1040, 1042, 1044], "comment": [47, 350, 377, 378, 379, 380, 382, 383, 387, 484, 576, 986], "paus": 47, "21194": [47, 1041], "plot_coin_segment": [47, 69], "spatial": [48, 50, 56, 173, 184, 217, 302, 374, 393, 406, 417, 441, 443, 447, 449, 454, 676, 689, 756, 759, 774, 775, 776, 777, 788, 789, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 982, 989, 996, 1030, 1034, 1041, 1044], "constrain": [48, 96, 122, 129, 171, 191, 300, 317, 335, 337, 372, 393, 405, 406, 411, 413, 506, 558, 559, 632, 655, 656, 687, 691, 823, 982, 985, 1032], "grid_to_graph": [48, 52, 55, 406, 414, 1020, 1041], "st": [48, 68, 261, 321, 1031, 1034, 1036], "4697": 48, "306": [48, 69, 624], "plot_coin_ward_segment": [48, 69], "vq": [49, 59], "palac": 49, "china": [49, 406, 503, 504, 581], "615": 49, "literatur": [49, 157, 261, 279, 351, 376, 379, 385, 387, 391, 392, 406, 409, 411, 413, 440, 444, 446, 498, 533, 535, 537, 544, 552, 553, 585, 588, 705, 793, 975, 978, 982, 986, 1038], "codebook": [49, 279, 563, 828], "palett": [49, 170, 261], "byte": [49, 54, 414, 484, 500, 505, 506, 579, 585, 586, 588, 951, 1019, 1021, 1028, 1035, 1036, 1043], "rgb": [49, 374, 414, 490, 491, 580, 581, 584], "gif": 49, "pick": [49, 56, 61, 173, 237, 269, 320, 325, 374, 379, 383, 406, 413, 440, 457, 520, 670, 908, 909, 975, 982, 983, 985, 1000, 1039], "017": [49, 385, 468, 469], "037": [49, 200, 219, 706], "073": [49, 187, 219, 259, 468, 469], "robertlayton": 49, "load_sample_imag": [49, 580, 581, 1037], "pairwise_distances_argmin": [49, 65, 320, 776, 1036, 1042, 1043, 1044], "n_color": 49, "photo": 49, "jpg": [49, 503, 581], "255": [49, 99, 284, 302, 312, 319, 374, 490, 491, 558, 559], "original_shap": 49, "image_arrai": 49, "image_array_sampl": 49, "codebook_random": 49, "labels_random": 49, "recreate_imag": 49, "recreat": [49, 240], "book": [49, 71, 440, 444, 446, 828, 833, 837, 982, 983, 984, 987, 1004, 1040], "alongsid": [49, 379, 385, 393, 396, 415, 819, 820, 821, 986, 993, 1006, 1007], "489": [49, 69], "plot_color_quant": [49, 69], "750": [50, 56, 120, 261], "math": [50, 71, 149, 239, 261, 262, 376, 396, 760], "db": [50, 56, 406], "n_noise_": 50, "come": [50, 68, 71, 81, 87, 101, 102, 149, 152, 234, 316, 350, 351, 365, 367, 372, 376, 379, 380, 383, 387, 391, 393, 396, 406, 410, 413, 414, 436, 447, 453, 469, 547, 702, 791, 816, 900, 903, 975, 976, 980, 983, 985, 989, 992, 1001, 1012, 1028, 1039, 1042, 1044], "handi": [50, 72, 351, 352, 380, 1044], "883": 50, "917": 50, "916": [50, 153, 162, 164, 166, 330, 331], "626": [50, 186], "unique_label": [50, 56, 351, 381, 388], "core_samples_mask": 50, "zeros_lik": [50, 202, 270], "bool": [50, 67, 82, 165, 218, 359, 379, 418, 419, 420, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 516, 519, 520, 521, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 695, 697, 699, 700, 704, 705, 706, 708, 709, 710, 711, 722, 723, 724, 725, 726, 727, 734, 737, 738, 746, 747, 750, 752, 757, 759, 763, 764, 765, 770, 774, 778, 779, 780, 781, 783, 785, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 809, 813, 814, 817, 818, 821, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 917, 918, 919, 929, 935, 936, 948, 951, 957, 959, 967, 972, 973, 974, 976, 1037, 1040, 1041], "core_sample_indices_": [50, 441], "class_member_mask": 50, "markerfacecolor": [50, 56, 62, 64, 65], "markeredgecolor": [50, 56, 62, 64, 65], "markers": [50, 56, 59, 62, 64, 65, 125, 155, 159, 232, 320], "153": [50, 69, 294, 298, 660], "plot_dbscan": [50, 69, 417, 441], "constitut": [51, 393, 410, 413, 447, 453, 585, 586, 588, 990], "standpoint": 51, "proce": [51, 146, 181, 377, 383, 409, 410, 413, 437, 982], "reassign": [51, 379, 444, 446, 1029, 1033], "success": [51, 167, 254, 268, 277, 361, 401, 406, 410, 411, 413, 512, 561, 576, 795, 798, 799, 816, 903, 989, 1010, 1016, 1020, 1023, 1040], "becom": [51, 56, 58, 73, 81, 202, 204, 236, 239, 263, 284, 307, 311, 337, 341, 350, 361, 373, 379, 381, 383, 387, 393, 394, 406, 408, 413, 414, 416, 437, 447, 451, 452, 454, 550, 578, 585, 586, 588, 616, 624, 655, 656, 673, 675, 872, 898, 899, 905, 981, 982, 983, 985, 989, 996, 1001, 1019, 1021, 1029, 1036, 1037, 1040, 1041, 1042, 1043, 1045], "fetch_olivetti_fac": [51, 96, 120, 238, 374, 1036, 1037, 1038], "extract_patches_2d": [51, 99, 414, 1036], "patch_siz": [51, 99, 414, 580, 581], "buffer": [51, 1041], "max_patch": [51, 414, 580, 581, 1036], "4i": 51, "dt": [51, 99, 133, 413, 414, 1002], "2400": 51, "700": [51, 318], "800": [51, 123, 319, 374, 581, 689], "1100": 51, "1200": [51, 124, 306, 413], "1300": 51, "1400": [51, 471], "1600": 51, "1700": 51, "1800": 51, "1900": 51, "2100": [51, 319], "2200": [51, 374, 490], "2300": [51, 189], "ntrain": 51, "plot_dict_face_patch": [51, 69], "agglo": [52, 442, 1020], "featureagglomer": [52, 55, 437, 438, 1003, 1020, 1031, 1037, 1038, 1041, 1042, 1044], "x_reduc": [52, 91, 130, 442, 1020], "x_restor": 52, "images_restor": 52, "127": [52, 69, 124, 1028], "plot_digits_agglomer": [52, 69], "rich": [53, 387, 391, 406, 436, 1010, 1039, 1042], "richer": [53, 106, 406], "uneven": [53, 256, 406, 410], "patholog": [53, 985, 1034], "clean": [53, 72, 199, 361, 371, 377, 412, 992, 996, 1038], "fring": [53, 406], "sensibl": [53, 164, 279, 351, 381, 982, 996], "resampl": [53, 125, 157, 170, 218, 288, 388, 391, 393, 552, 553, 960, 1007, 1037, 1041], "plot_clust": 53, "x_red": 53, "spectralembed": [53, 221, 222, 223, 685, 686, 687, 689, 983, 1029, 1034, 1038, 1042, 1043, 1045], "428": [53, 69], "plot_digits_linkag": [53, 69], "raccoon": [54, 99, 411], "addition": [54, 73, 114, 170, 200, 218, 236, 317, 319, 351, 379, 391, 404, 414, 607, 608, 643, 649, 668, 875, 975, 976, 986, 994, 1006, 1034, 1045], "adapt": [54, 56, 112, 124, 125, 155, 246, 247, 308, 341, 366, 377, 378, 379, 388, 406, 413, 416, 512, 513, 514, 515, 673, 674, 675, 855, 856, 982, 988, 990, 996, 1000, 1006, 1007, 1036, 1037, 1044, 1045], "pooch": [54, 379, 396, 399], "instal": [54, 243, 284, 316, 317, 318, 319, 320, 321, 322, 365, 366, 368, 379, 380, 382, 383, 385, 387, 391, 392, 399, 402, 406, 414, 449, 459, 493, 688, 692, 1002, 1004, 1021, 1035, 1036, 1037, 1041, 1042], "raccoon_fac": [54, 99], "nbyte": [54, 233], "768": 54, "1024": [54, 106, 446, 465, 535, 896, 1041], "uint8": [54, 99, 373, 494, 503, 504, 1040], "786432": 54, "unsign": [54, 100, 374, 579, 951], "786": [54, 72], "kilobyt": 54, "behind": [54, 81, 112, 279, 381, 383, 387, 405, 408, 413, 985, 989, 998, 1044], "simplest": [54, 410, 983, 986, 1019, 1020], "know": [54, 67, 122, 146, 149, 152, 161, 170, 218, 236, 237, 261, 279, 282, 320, 325, 345, 351, 365, 379, 391, 397, 400, 406, 409, 410, 411, 414, 497, 501, 507, 643, 649, 655, 656, 722, 752, 795, 809, 883, 884, 886, 887, 888, 889, 906, 907, 908, 909, 975, 985, 986, 987, 989, 998, 1034, 1035, 1038, 1040], "certainli": [54, 71, 351], "subsampl": [54, 106, 124, 127, 171, 200, 217, 218, 257, 309, 313, 318, 455, 556, 557, 558, 559, 560, 629, 676, 698, 798, 799, 824, 863, 875, 887, 914, 924, 978, 982, 1007, 1009, 1028, 1038, 1042, 1044], "200_000": [54, 309, 863, 1044], "compressed_raccoon_uniform": 54, "spot": [54, 231, 406], "leav": [54, 112, 117, 126, 171, 173, 218, 268, 311, 359, 361, 365, 376, 378, 384, 393, 406, 413, 438, 439, 442, 443, 460, 500, 554, 555, 556, 557, 558, 559, 561, 562, 563, 670, 672, 797, 802, 803, 804, 805, 813, 814, 838, 839, 887, 906, 907, 908, 909, 975, 983, 989, 993, 1002, 1016, 1019, 1028, 1035, 1037, 1039, 1040, 1044], "bin_edg": 54, "bin_edges_": [54, 307, 863], "bin_cent": [54, 200], "625": [54, 200, 705], "875": [54, 153, 666], "375": [54, 322, 323, 446, 746, 986], "140": [54, 251, 253, 413, 507, 513, 514, 515, 552, 553, 987], "171": [54, 149, 227, 376, 385, 784, 986], "axvlin": [54, 61, 74, 83, 104, 124, 134, 170, 172, 173, 189, 267, 345, 1017], "get_ybound": 54, "state": [54, 58, 71, 73, 81, 202, 233, 241, 247, 267, 318, 361, 366, 367, 379, 381, 385, 387, 391, 393, 394, 405, 414, 419, 437, 440, 444, 446, 451, 456, 472, 541, 586, 676, 798, 799, 807, 809, 811, 838, 839, 845, 893, 894, 921, 975, 976, 982, 988, 991, 998, 1006, 1007, 1010, 1030, 1032, 1034, 1036, 1038, 1041, 1044], "compressed_raccoon_kmean": 54, "90885631": 54, "34346583": 54, "64447187": 54, "28225276": 54, "70763101": 54, "159": [54, 374, 1028], "78681467": 54, "185": [54, 149, 161, 376, 385, 855, 856], "17226834": 54, "02069427": 54, "save": [54, 71, 73, 239, 303, 378, 379, 383, 385, 386, 387, 393, 400, 410, 418, 465, 531, 532, 624, 838, 839, 896, 982, 986, 996, 1002, 1010, 1021, 1028, 1031, 1035, 1038], "verifi": [54, 61, 110, 170, 200, 379, 384, 402, 970, 989], "6291456": 54, "surpris": [54, 171, 982, 1006, 1030], "x8": 54, "ndarrai": [54, 59, 91, 200, 243, 259, 260, 261, 379, 380, 381, 385, 386, 402, 414, 417, 418, 421, 422, 424, 427, 428, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 487, 488, 489, 490, 491, 492, 494, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 695, 697, 698, 699, 712, 715, 718, 719, 720, 723, 724, 734, 741, 742, 744, 746, 747, 749, 750, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 785, 786, 787, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 916, 917, 918, 923, 924, 934, 935, 936, 937, 941, 948, 950, 951, 958, 959, 961, 962, 963, 964, 967, 972, 973, 986, 1001, 1007, 1031, 1035, 1038, 1039, 1042, 1043, 1044, 1045], "practic": [54, 72, 81, 87, 99, 118, 122, 152, 169, 170, 176, 184, 202, 229, 235, 262, 269, 290, 291, 318, 337, 341, 366, 368, 379, 381, 382, 385, 387, 392, 393, 406, 408, 410, 411, 412, 413, 414, 416, 444, 449, 459, 518, 521, 586, 629, 630, 667, 793, 837, 891, 898, 975, 976, 980, 982, 985, 986, 987, 988, 989, 992, 993, 996, 1006, 1007, 1008, 1010, 1012, 1021, 1022, 1023, 1030, 1034, 1036, 1038, 1040], "gain": [54, 223, 268, 284, 286, 326, 350, 351, 359, 378, 385, 387, 391, 413, 529, 554, 558, 559, 561, 722, 752, 793, 794, 827, 906, 908, 987, 991, 999, 1002, 1031, 1035, 1038], "029": [54, 69, 226, 227, 233, 994], "plot_face_compress": [54, 69], "anova": [55, 143, 150, 167, 332, 348, 407, 501, 512, 589, 592, 593, 595, 596, 597, 601, 602, 603, 606, 710, 820, 824, 858, 859, 878, 898, 903, 1001], "bayesianridg": [55, 164, 179, 180, 184, 318, 624, 641, 982, 1035, 1036, 1037, 1038, 1041, 1042, 1044], "shutil": [55, 73, 407], "tempfil": [55, 286, 316, 407, 989], "feature_select": [55, 72, 73, 75, 143, 144, 145, 146, 147, 148, 149, 167, 243, 318, 320, 340, 361, 368, 393, 397, 407, 415, 578, 975, 1028, 1029, 1031, 1032, 1033, 1034, 1035], "kfold": [55, 118, 124, 138, 256, 266, 361, 410, 434, 469, 564, 565, 591, 599, 644, 648, 650, 652, 658, 660, 662, 670, 795, 798, 799, 801, 803, 805, 809, 814, 816, 817, 818, 819, 820, 821, 822, 823, 825, 829, 832, 879, 1016, 1029, 1030, 1031, 1033, 1034, 1036, 1038], "roi_siz": 55, "snr": 55, "noise_coef": 55, "gridsearch": [55, 79, 272, 1006], "cachedir": [55, 73, 388, 407], "mkdtemp": [55, 407], "mem": [55, 385, 505], "n_x": [55, 582], "n_y": [55, 582, 988, 996], "parcel": [55, 68, 406], "ward__n_clust": 55, "coef_agglomeration_": 55, "_agglom": 55, "ward_tre": [55, 438, 442, 1028, 1032], "451933": 55, "675318": 55, "275706": 55, "085711": 55, "1600x1600": 55, "7840": 55, "element": [55, 96, 115, 116, 127, 231, 255, 260, 268, 270, 317, 351, 355, 359, 368, 376, 378, 379, 381, 388, 394, 403, 405, 406, 410, 411, 413, 414, 417, 441, 443, 449, 461, 484, 505, 509, 511, 517, 519, 523, 524, 528, 534, 535, 537, 547, 554, 555, 556, 557, 561, 562, 563, 564, 565, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 614, 629, 655, 656, 663, 664, 665, 673, 674, 675, 704, 714, 723, 730, 732, 742, 759, 765, 774, 778, 784, 785, 828, 838, 839, 840, 841, 842, 844, 846, 848, 849, 853, 855, 856, 861, 877, 878, 881, 885, 898, 903, 906, 907, 908, 909, 937, 938, 939, 957, 959, 960, 980, 982, 986, 987, 990, 993, 996, 997, 998, 1002, 1010, 1012, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1044], "return_dist": [55, 460, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 989, 1032], "________________________________________________________ward_tre": 55, "0min": 55, "905206": 55, "161245": 55, "849835": 55, "091621": 55, "f_regress": [55, 144, 415, 589, 592, 593, 595, 596, 597, 601, 602, 606, 1031, 1035, 1042, 1045], "cach": [55, 167, 262, 284, 285, 298, 365, 366, 374, 393, 438, 442, 447, 465, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 499, 505, 795, 840, 842, 858, 859, 896, 900, 901, 902, 903, 904, 971, 989, 1001, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044], "selectpercentil": [55, 72, 243, 340, 415, 589, 592, 593, 595, 596, 600, 603, 1029, 1034, 1044], "anova__percentil": [55, 340], "coef_selection_": 55, "_univariate_select": 55, "267703": 55, "026711": 55, "_____________________________________________________f_regress": 55, "447268": 55, "638768": 55, "rdbu_r": [55, 83, 107, 337], "temporari": [55, 71, 73, 365, 465, 684, 777, 896, 989, 1031, 1032, 1035, 1041, 1042], "worri": [55, 983, 1013], "rmtree": [55, 73, 407], "ignore_error": 55, "458": [55, 69], "plot_feature_agglomeration_vs_univariate_select": [55, 69], "perspect": [56, 61, 200, 365, 374, 391, 394, 527, 640, 898, 979], "conveni": [56, 204, 239, 371, 387, 391, 407, 410, 414, 416, 421, 440, 444, 446, 448, 450, 461, 486, 608, 673, 675, 696, 724, 781, 857, 858, 960, 976, 978, 982, 983, 993, 1010, 1021, 1028], "ground_truth": [56, 291], "proba_map": 56, "class_index": 56, "ci": [56, 366, 382, 383, 387, 988, 1034, 1036], "preambl": 56, "parameters_str": 56, "greatest": [56, 396, 406, 865, 1036], "remark": [56, 87, 149, 367, 379, 996], "unlik": [56, 57, 118, 170, 171, 221, 223, 251, 306, 335, 379, 381, 385, 391, 393, 397, 408, 410, 411, 414, 443, 447, 532, 647, 648, 651, 652, 653, 679, 680, 781, 816, 838, 839, 878, 889, 901, 982, 985, 986, 993, 1001, 1028, 1034], "bi": [56, 414], "worth": [56, 121, 171, 200, 379, 387, 1010], "rememb": [56, 381, 384, 396, 414, 989, 993, 1002], "hardli": [56, 604, 605], "proper": [56, 189, 218, 367, 385, 404, 413, 446, 538, 550, 673, 935, 961, 981, 982, 983, 986, 1001, 1028, 1038, 1039, 1040, 1041, 1042, 1043], "must": [56, 170, 171, 173, 181, 184, 217, 218, 229, 240, 256, 290, 307, 312, 350, 361, 374, 378, 379, 380, 381, 383, 385, 387, 393, 394, 397, 402, 404, 406, 407, 410, 411, 413, 414, 415, 416, 417, 427, 435, 438, 441, 442, 443, 444, 446, 447, 448, 452, 454, 456, 458, 459, 461, 463, 464, 466, 471, 484, 505, 506, 509, 520, 528, 534, 535, 536, 537, 538, 540, 541, 544, 550, 551, 556, 557, 558, 559, 564, 565, 578, 579, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 607, 608, 614, 617, 624, 625, 626, 627, 629, 630, 635, 639, 640, 645, 646, 649, 655, 656, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 682, 683, 684, 685, 686, 689, 690, 691, 692, 693, 696, 700, 703, 706, 731, 742, 760, 767, 770, 774, 777, 784, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 802, 804, 805, 807, 809, 810, 811, 813, 814, 816, 819, 822, 824, 825, 833, 834, 835, 836, 837, 840, 841, 842, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 858, 861, 862, 863, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 882, 898, 899, 900, 901, 902, 903, 904, 905, 911, 954, 961, 970, 972, 975, 976, 982, 983, 984, 986, 989, 990, 992, 993, 1000, 1001, 1002, 1012, 1021, 1028, 1031, 1035, 1039, 1041, 1042], "maintain": [56, 205, 218, 221, 236, 261, 366, 368, 378, 382, 385, 386, 387, 391, 393, 396, 406, 413, 437, 439, 867, 868, 874, 875, 878, 883, 886, 887, 889, 982, 983, 996, 1006, 1007, 1012, 1023, 1043], "mitig": [56, 172, 313, 366, 367, 983, 1002, 1019, 1020, 1040], "great": [56, 169, 170, 198, 361, 379, 391, 411, 760, 1007, 1010, 1028, 1035], "appropri": [56, 58, 104, 157, 170, 204, 236, 270, 355, 361, 377, 379, 381, 387, 393, 405, 406, 410, 412, 413, 417, 441, 447, 454, 486, 487, 488, 493, 497, 498, 499, 501, 502, 507, 574, 579, 588, 589, 592, 593, 595, 596, 597, 669, 671, 684, 706, 840, 841, 842, 844, 846, 848, 849, 850, 970, 982, 985, 986, 996, 1032, 1035, 1041, 1044], "immedi": [56, 379, 391, 795, 809, 819, 820, 1036], "hdb": [56, 443], "probabilities_": [56, 443], "capabl": [56, 57, 87, 157, 204, 225, 381, 393, 396, 987, 990, 1001, 1002, 1010, 1028, 1037, 1045], "constraint": [56, 58, 68, 96, 111, 136, 167, 195, 204, 239, 256, 301, 302, 303, 317, 379, 391, 411, 414, 484, 505, 506, 554, 555, 558, 559, 561, 562, 629, 632, 813, 814, 906, 907, 908, 909, 975, 977, 982, 983, 1000, 1032, 1035, 1036, 1039, 1041, 1043, 1045], "reachabl": [56, 66, 443, 447, 452, 453, 454, 844, 940], "fragment": [56, 99], "sparser": [56, 179, 191, 411, 468, 475, 536, 540, 982, 989, 1000], "Not": [56, 138, 171, 365, 391, 406, 424, 425, 428, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 466, 467, 468, 469, 470, 471, 472, 473, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 560, 563, 566, 567, 578, 579, 580, 585, 586, 588, 624, 625, 626, 627, 674, 685, 686, 687, 688, 690, 764, 790, 793, 794, 795, 798, 799, 809, 835, 838, 839, 842, 843, 844, 846, 850, 862, 870, 873, 874, 876, 879, 890, 891, 902, 986, 992, 1006, 1037], "mention": [56, 87, 112, 218, 317, 361, 365, 379, 383, 384, 391, 393, 406, 693, 890, 891, 975, 980, 982, 1007, 1010, 1021, 1035, 1036, 1037], "until": [56, 123, 149, 208, 273, 318, 320, 384, 393, 394, 403, 406, 410, 415, 505, 506, 554, 555, 556, 557, 561, 562, 563, 590, 643, 644, 649, 650, 655, 656, 657, 658, 659, 660, 663, 664, 665, 668, 673, 674, 675, 691, 793, 794, 798, 799, 855, 856, 895, 898, 906, 907, 908, 909, 961, 975, 982, 983, 991, 999, 1002, 1021, 1031, 1035, 1036, 1042], "tradeoff": [56, 115, 167, 234, 254, 268, 269, 277, 350, 365, 379, 387, 412, 512, 561, 695, 699, 723, 785, 824, 859, 878, 898, 983, 1019, 1037, 1040], "comfort": [56, 413], "epsilon": [56, 66, 182, 224, 235, 322, 344, 411, 443, 452, 640, 646, 664, 673, 675, 742, 855, 856, 899, 901, 904, 979, 982, 986, 990, 1000, 1001, 1019, 1028], "incap": 56, "suffici": [56, 123, 132, 208, 275, 337, 365, 393, 406, 415, 529, 543, 654, 679, 680, 814, 815, 987, 989, 1007, 1037, 1043, 1044], "intervent": 56, "inaccess": 56, "ultim": [56, 225, 380], "world": [56, 71, 75, 170, 204, 225, 239, 350, 365, 368, 372, 376, 406, 411, 414, 976, 986, 988, 1005, 1007, 1010, 1015, 1023, 1028], "whose": [56, 80, 81, 82, 149, 157, 200, 335, 374, 387, 388, 393, 404, 406, 408, 413, 415, 416, 419, 434, 435, 436, 445, 458, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 512, 531, 535, 537, 538, 541, 544, 546, 569, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 637, 668, 692, 715, 795, 802, 809, 823, 844, 863, 890, 891, 934, 965, 966, 980, 987, 991, 992, 993, 1001, 1031, 1036, 1037, 1039, 1042], "respect": [56, 68, 91, 101, 112, 116, 118, 121, 129, 160, 176, 179, 184, 189, 202, 214, 217, 221, 223, 230, 233, 235, 239, 251, 270, 290, 291, 303, 311, 320, 334, 341, 365, 366, 374, 375, 379, 404, 406, 409, 411, 413, 414, 416, 443, 461, 464, 467, 468, 469, 470, 471, 472, 473, 531, 537, 538, 544, 550, 558, 559, 594, 607, 608, 609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 633, 640, 668, 687, 691, 709, 724, 778, 781, 793, 794, 834, 844, 855, 856, 910, 912, 975, 979, 980, 982, 983, 986, 989, 990, 991, 992, 996, 1001, 1006, 1010, 1031, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "neighborhood": [56, 83, 167, 221, 285, 287, 298, 376, 393, 406, 411, 417, 441, 443, 447, 454, 499, 501, 512, 538, 546, 625, 628, 693, 824, 840, 841, 844, 846, 847, 848, 849, 850, 852, 858, 859, 878, 983, 992, 1008, 1023, 1037], "recomput": [56, 57, 240, 242, 286, 316, 466, 471, 982, 998, 1033, 1044], "cut_dist": [56, 443], "346": [56, 69, 413, 498, 552, 553], "plot_hdbscan": [56, 69], "intract": [57, 411, 983, 991], "inferenti": 57, "meta": [57, 71, 111, 135, 136, 167, 200, 236, 270, 278, 280, 282, 322, 361, 373, 377, 381, 383, 391, 393, 397, 402, 404, 415, 416, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 493, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 572, 578, 579, 585, 587, 588, 591, 594, 600, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 795, 796, 797, 802, 804, 811, 813, 821, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 946, 975, 987, 1007, 1008, 1023, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1042, 1043, 1045], "chirag": 57, "nagpal": 57, "christo": [57, 1037, 1038, 1040, 1042], "arida": [57, 1037, 1038, 1040, 1042], "baseestim": [57, 110, 236, 284, 379, 392, 393, 416, 430, 629, 630, 927, 1028, 1035, 1038, 1040, 1042, 1043], "clone": [57, 125, 160, 171, 236, 303, 361, 377, 379, 382, 383, 385, 387, 393, 404, 407, 416, 434, 462, 566, 567, 594, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 801, 817, 822, 825, 829, 832, 858, 859, 895, 1007, 1028, 1034, 1036, 1040, 1044, 1045], "metaestim": [57, 381, 393, 405, 895, 1032, 1041, 1042], "available_if": [57, 393, 1041, 1042], "check_is_fit": [57, 110, 236, 382, 388, 393, 1038, 1041, 1042], "5000": [57, 186, 215, 216, 218, 318, 879], "_classifier_ha": 57, "deleg": [57, 385, 431, 911, 1032, 1034, 1040], "unfit": [57, 407, 431, 461, 566, 567, 599, 608, 1036, 1038, 1045], "classifier_": [57, 236], "inductivecluster": 57, "clusterer_": 57, "plot_scatt": 57, "cluster_label": [57, 61], "x_new": [57, 407, 411, 415, 430, 439, 440, 442, 444, 446, 528, 529, 530, 531, 532, 533, 534, 536, 538, 539, 540, 541, 546, 564, 566, 567, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 625, 627, 632, 635, 636, 637, 638, 639, 685, 686, 687, 688, 689, 847, 854, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 890, 891, 998, 1012], "y_new": 57, "declar": [57, 222, 236, 361, 379, 380, 381, 385, 393, 440, 443, 444, 456, 468, 469, 475, 687, 691, 1035, 1039], "membership": [57, 394, 403, 405, 406, 508, 509, 510, 511, 512, 516, 519, 1001], "inductive_learn": 57, "probable_clust": 57, "plot_inductive_clust": [57, 69], "meant": [58, 149, 239, 374, 381, 388, 471, 490, 674, 844, 952, 953, 976, 990, 992, 996, 1029], "unintuit": 58, "possibli": [58, 87, 149, 200, 215, 341, 351, 376, 378, 387, 400, 406, 413, 414, 448, 450, 586, 833, 834, 835, 836, 837, 903, 904, 906, 907, 908, 909, 975, 978, 983, 989, 996, 1043], "undesir": [58, 153, 416], "phil": [58, 1033, 1044], "roth": [58, 1033, 1036, 1043], "mr": [58, 321, 1029, 1032, 1042], "anisotrop": [58, 154, 416, 614, 616, 619], "ellipt": [58, 982], "60834549": 58, "63667341": 58, "40887718": 58, "85253229": 58, "x_vari": 58, "y_vari": 58, "unequ": [58, 1036], "x_filter": 58, "unevenli": [58, 200, 256], "y_filter": 58, "set_i": 58, "scenario": [58, 71, 152, 176, 204, 264, 361, 386, 396, 410, 413, 534, 540, 542, 543, 980, 986, 996, 1038], "criteria": [58, 118, 167, 178, 189, 208, 219, 251, 261, 387, 406, 415, 463, 479, 480, 481, 498, 554, 555, 556, 557, 561, 562, 643, 649, 653, 655, 656, 668, 689, 859, 878, 898, 899, 906, 907, 908, 909, 976, 985, 990, 1000, 1020, 1031, 1036, 1039], "knowledg": [58, 120, 170, 217, 239, 261, 368, 374, 379, 382, 385, 392, 393, 406, 410, 413, 417, 441, 508, 552, 553, 560, 717, 732, 736, 779, 827, 986, 987, 998, 1021], "consequ": [58, 104, 218, 261, 262, 306, 334, 361, 411, 413, 558, 559, 563, 652, 653, 976, 982, 986, 1002, 1037, 1039, 1044], "likelihood": [58, 78, 80, 81, 82, 84, 104, 152, 153, 154, 156, 157, 158, 159, 161, 167, 188, 218, 250, 254, 261, 267, 277, 303, 306, 381, 393, 404, 408, 411, 413, 416, 434, 466, 467, 468, 469, 470, 471, 472, 473, 474, 512, 529, 533, 538, 546, 547, 548, 607, 608, 628, 642, 655, 709, 737, 793, 794, 795, 821, 824, 843, 854, 874, 886, 900, 901, 903, 904, 982, 985, 988, 996, 1001, 1031, 1032, 1037, 1043], "inertia": [58, 59, 62, 351, 406, 440, 444, 446, 449, 456, 457, 459, 460, 1039], "common_param": [58, 125, 171, 235, 263, 264, 341], "unexpect": [58, 236, 361, 379, 384, 387, 400, 532, 693, 986, 1001, 1030, 1036, 1037, 1040, 1042, 1044], "suffic": [58, 59, 381, 1021], "propos": [58, 79, 80, 284, 374, 379, 381, 391, 393, 406, 408, 413, 418, 419, 447, 472, 532, 604, 605, 673, 674, 675, 855, 856, 982, 985, 989, 1000, 1004, 1035], "inflat": [58, 169, 170, 172, 406, 410, 986, 996], "allevi": [58, 179, 184, 406, 988], "fastest": [58, 259, 352, 444, 667, 669, 671, 684, 934, 935, 985], "restart": [58, 382, 387, 444, 528, 534, 535, 540, 542, 543, 607, 608, 983, 1041], "022": [58, 69, 351, 994], "plot_kmeans_assumpt": [58, 69], "judg": [59, 206, 406, 1016], "definit": [59, 82, 188, 200, 268, 284, 351, 379, 380, 381, 393, 395, 406, 408, 409, 411, 524, 526, 532, 608, 625, 689, 705, 715, 724, 754, 793, 794, 975, 978, 980, 982, 984, 986, 989, 1000, 1005, 1023, 1032, 1036, 1043], "shorthand": [59, 393, 407, 464, 558, 559, 859, 860, 1031], "homo": 59, "compl": 59, "mea": 59, "context": [59, 239, 243, 284, 365, 366, 373, 378, 380, 392, 393, 406, 407, 412, 413, 414, 416, 417, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 465, 469, 528, 532, 533, 534, 536, 539, 540, 541, 542, 543, 545, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 591, 599, 607, 623, 624, 627, 629, 631, 636, 644, 648, 650, 652, 654, 655, 656, 658, 660, 662, 663, 665, 673, 676, 685, 686, 687, 688, 689, 690, 691, 770, 774, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 840, 841, 844, 846, 848, 849, 851, 852, 857, 860, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 954, 976, 982, 986, 992, 996, 1000, 1007, 1010, 1019, 1028, 1035, 1036, 1041, 1044], "n_digit": 59, "1797": [59, 90, 259, 303, 325, 376, 442, 499, 529, 530, 531, 532, 596, 597, 685, 686, 687, 688, 989, 1018], "bench_k_mean": 59, "tabl": [59, 218, 261, 379, 380, 383, 388, 406, 414, 579, 655, 677, 795, 809, 835, 951, 982, 986, 987, 992, 1006, 1029], "inertia_": [59, 62, 65, 440, 444, 446, 1039], "clustering_metr": 59, "sample_s": [59, 234, 351, 789], "formatter_result": 59, "determinist": [59, 125, 366, 375, 381, 393, 406, 440, 444, 446, 448, 449, 450, 455, 456, 459, 548, 556, 557, 561, 562, 580, 581, 688, 692, 806, 807, 854, 906, 907, 978, 982, 1029, 1032, 1034, 1036, 1037, 1040, 1043, 1044], "ttime": 59, "tinertia": 59, "thomo": 59, "tcompl": 59, "tv": 59, "tari": 59, "tami": 59, "tsilhouett": 59, "__________________________________________________________________________________": 59, "034": [59, 196, 219, 468], "69545": 59, "598": [59, 104, 153, 538], "645": 59, "621": [59, 765], "469": 59, "617": [59, 216, 219, 264, 406, 765], "152": [59, 385], "040": 59, "69735": 59, "681": [59, 88, 385], "723": [59, 235], "701": 59, "574": [59, 531, 538], "698": 59, "012": [59, 146, 150, 173, 176], "72686": 59, "636": [59, 184, 351, 385], "658": [59, 87], "647": 59, "521": 59, "643": [59, 259, 309, 314], "reduced_data": 59, "mesh": [59, 121, 130, 154, 234, 292, 300, 308, 330, 333], "white": [59, 61, 96, 157, 170, 214, 221, 290, 303, 308, 330, 336, 411, 414, 622, 1002, 1028, 1031, 1034, 1038, 1042], "699": [59, 69], "plot_kmeans_digit": [59, 69], "kmeans_plusplu": [60, 406, 1040, 1045], "4000": [60, 127, 249], "centers_init": 60, "4eacc5": [60, 65], "ff9c34": [60, 65], "4e9a06": [60, 65], "cluster_data": 60, "059": [60, 69], "plot_kmeans_plusplu": [60, 69], "wrong": [61, 200, 290, 350, 361, 376, 379, 381, 414, 501, 722, 752, 789, 986, 992, 1001, 1031, 1033, 1035, 1036, 1037, 1038, 1041], "wide": [61, 62, 91, 115, 233, 307, 391, 406, 411, 414, 975, 982, 1006, 1010, 1021, 1028, 1030, 1044], "ambival": 61, "thick": [61, 294, 989], "ow": 61, "7049787496083262": 61, "5882004012129721": 61, "6505186632729437": 61, "561464362648773": 61, "4857596147013469": 61, "silhouette_sampl": [61, 789, 1032, 1034, 1036, 1044], "distinct": [61, 261, 327, 350, 352, 374, 381, 384, 393, 394, 410, 413, 414, 586, 796, 805, 813, 872, 873, 893, 894, 975, 982, 989, 992, 1021, 1036], "center_box": [61, 509], "range_n_clust": 61, "set_size_inch": [61, 138, 240], "insert": [61, 170, 200, 391, 406, 484, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 913], "blank": [61, 384, 976, 1002], "demarc": 61, "silhouette_avg": 61, "sample_silhouette_valu": 61, "y_lower": [61, 125], "aggreg": [61, 116, 218, 264, 270, 320, 322, 406, 413, 415, 531, 552, 553, 591, 718, 719, 724, 741, 742, 744, 746, 747, 749, 781, 786, 787, 987, 989, 996, 1044], "ith_cluster_silhouette_valu": 61, "size_cluster_i": 61, "y_upper": [61, 125], "fill_betweenx": 61, "2nd": [61, 91, 160, 311, 406, 417, 441, 527, 996, 1043], "lw": [61, 79, 80, 82, 100, 105, 106, 194, 201, 203, 206, 210, 217, 224, 249, 256, 271, 289, 306, 327, 344], "fontweight": [61, 195], "024": [61, 69], "plot_kmeans_silhouette_analysi": [61, 69], "reach": [62, 118, 149, 200, 202, 216, 218, 263, 320, 337, 359, 384, 394, 396, 406, 411, 415, 447, 454, 505, 506, 590, 591, 624, 641, 642, 643, 644, 649, 650, 651, 652, 653, 657, 658, 659, 660, 663, 664, 665, 673, 674, 675, 676, 678, 679, 680, 681, 725, 726, 779, 793, 794, 855, 856, 895, 975, 986, 990, 1000, 1002, 1010, 1039, 1043, 1044, 1045], "optimum": [62, 158, 170, 176, 274, 411, 469, 982, 985], "stuck": [62, 689, 983], "check_random_st": [62, 216, 223, 232, 238, 381, 388, 393], "trade": [62, 79, 118, 172, 204, 260, 262, 263, 337, 350, 405, 406, 408, 550, 551, 556, 557, 631, 653, 689, 795, 798, 799, 809, 821, 983, 990, 998, 1000, 1001, 1007], "n_init_rang": 62, "n_samples_per_cent": 62, "n_clusters_tru": 62, "init_s": [62, 351, 446], "factori": [62, 261, 414, 956, 986], "empti": [62, 71, 106, 212, 328, 365, 374, 381, 383, 406, 418, 480, 530, 558, 559, 628, 806, 863, 903, 905, 913, 918, 919, 925, 945, 946, 976, 1001, 1019, 1030, 1032, 1036, 1037, 1039, 1040, 1042, 1043, 1044], "run_id": 62, "km": [62, 320, 351], "fmt": [62, 211], "my_memb": [62, 64, 65], "plot_kmeans_stability_low_dim_dens": [62, 69], "globular": [63, 406], "cleanli": [63, 1028], "678": [63, 69], "plot_linkage_comparison": [63, 69], "dorin": [64, 445], "comaniciu": [64, 406, 445], "meer": [64, 406, 445], "ieee": [64, 80, 82, 376, 406, 408, 415, 419, 445, 472, 531, 560, 661, 682, 683, 721, 765, 982, 986, 992], "transact": [64, 376, 406, 408, 417, 419, 441, 445, 472, 531, 535, 537, 544, 560, 641, 661, 682, 683, 721, 722, 752, 765, 982, 986], "intellig": [64, 149, 350, 376, 406, 413, 445, 552, 553, 635, 693, 721, 828, 855, 856, 987, 998, 1007, 1010], "2002": [64, 404, 406, 413, 434, 445, 590, 591, 722, 752, 845, 893, 978, 986], "603": [64, 142, 445], "619": [64, 238, 244, 351, 445], "labels_uniqu": 64, "391": [64, 69, 99, 108, 693], "plot_mean_shift": [64, 69, 458], "k_mean": [65, 388, 393, 1020, 1036, 1044], "t_batch": 65, "pairwis": [65, 169, 170, 233, 270, 316, 320, 321, 350, 365, 371, 381, 393, 406, 411, 416, 443, 455, 458, 459, 465, 484, 505, 506, 532, 558, 559, 617, 635, 636, 637, 638, 639, 640, 685, 687, 689, 691, 693, 696, 774, 777, 784, 788, 789, 826, 842, 846, 850, 864, 896, 978, 986, 989, 998, 1001, 1023, 1028, 1029, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1043, 1044, 1045], "k_means_cluster_cent": 65, "mbk_means_cluster_cent": 65, "k_means_label": 65, "mbk_means_label": 65, "ninertia": 65, "bbbbbb": 65, "161": [65, 69, 255, 277], "plot_mini_batch_kmean": [65, 69], "shane": [66, 1037, 1040, 1043], "grigsbi": 66, "refug": 66, "rocktalu": 66, "cluster_optics_dbscan": [66, 406], "n_points_per_clust": 66, "c1": [66, 122, 160, 232, 312], "c2": [66, 122, 160, 232, 312], "c3": [66, 122, 312], "c4": [66, 312, 1008, 1023], "c5": [66, 1008, 1023], "c6": 66, "clust": [66, 447, 454], "labels_050": 66, "reachability_": [66, 406, 447, 452, 453, 454], "core_dist": [66, 452], "core_distances_": [66, 447, 452, 454], "ordering_": [66, 406, 447, 452, 453, 454], "labels_200": 66, "ax3": [66, 328], "ax4": 66, "klass": 66, "xk": [66, 547], "rk": 66, "full_lik": 66, "noptic": 66, "ndbscan": 66, "429": [66, 69, 279], "plot_opt": [66, 69], "tri": [67, 105, 221, 293, 341, 366, 381, 384, 391, 394, 404, 446, 448, 450, 628, 629, 630, 667, 689, 695, 697, 699, 809, 954, 991, 1009, 1012, 1030, 1036, 1040], "intens": [67, 99, 284, 376, 380, 411, 440, 444, 456, 604, 605, 629, 630, 797, 975, 993, 1010, 1036], "weakli": 67, "outlin": [67, 121, 379, 381, 393, 394, 395, 406, 975, 1023], "center1": 67, "center2": 67, "center3": 67, "center4": 67, "radius1": 67, "radius2": 67, "radius3": 67, "radius4": 67, "circle1": 67, "circle2": 67, "circle3": 67, "circle4": 67, "label_im": 67, "cleaner": 67, "464": [67, 69, 149, 184, 219], "plot_segmentation_toi": [67, 69], "swiss": [68, 167, 220, 227, 406, 527, 689, 690, 1042], "sole": [68, 391, 406], "oppos": [68, 236, 383, 402, 406, 894, 989, 1001, 1012, 1028], "make_swiss_rol": [68, 225, 1042], "thinner": 68, "fig1": 68, "set_posit": [68, 102, 103, 211, 306], "jet": 68, "fig2": 68, "121": [68, 114, 165, 234, 666, 996], "330": [68, 69, 326], "plot_ward_structured_vs_unstructur": [68, 69], "404": [69, 218], "auto_examples_clust": 69, "chain": [70, 77, 112, 167, 281, 283, 284, 287, 361, 368, 371, 391, 393, 405, 416, 493, 499, 538, 608, 624, 655, 734, 795, 824, 827, 829, 830, 831, 832, 858, 859, 878, 975, 976, 987, 991, 1003, 1006, 1010, 1021, 1023], "raster": 71, "serv": [71, 100, 112, 158, 264, 341, 407, 543, 548, 635, 978, 1042], "matt": [71, 1031, 1032, 1033, 1038, 1039, 1043, 1044], "terri": [71, 1032], "dictvector": [71, 167, 349, 351, 353, 374, 414, 485, 579, 585, 586, 587, 588, 871, 1028, 1029, 1032, 1038, 1040, 1041, 1044], "compris": [71, 125, 259, 350, 351, 352, 374, 391, 411, 413, 512, 802, 983], "subject": [71, 129, 252, 264, 350, 374, 379, 381, 383, 391, 393, 394, 404, 405, 408, 410, 411, 492, 655, 656, 682, 861, 956, 977, 982, 1001, 1005, 1021, 1037, 1038, 1041, 1043, 1045], "mccall": 71, "mksol": 71, "dseg": 71, "ti": [71, 200, 248, 251, 259, 346, 365, 404, 406, 596, 597, 632, 717, 722, 752, 793, 794, 900, 903, 906, 985, 986, 1001, 1029, 1031, 1032, 1036, 1038, 1042, 1043, 1044], "fred": [71, 1028, 1041], "575": [71, 200, 351], "3539": 71, "1993apr6": 71, "131900": 71, "8407": 71, "perhap": [71, 121, 376, 378, 387, 393, 412, 1007], "militari": 71, "slug": 71, "school": [71, 376, 406, 784, 986], "physic": [71, 118, 366, 502, 951, 982, 1044], "teacher": 71, "ex": [71, 377, 380, 396, 1032, 1033], "fighter": 71, "jock": 71, "wasn": [71, 236, 1037], "poundal": 71, "flink": 71, "funni": 71, "propon": 71, "si": 71, "insist": 71, "safeti": [71, 391, 407, 952, 1007, 1038], "ball": [71, 289, 297, 406, 412, 445, 689, 838, 839, 843, 846, 848, 849, 850, 1028, 1030, 1033, 1039], "mari": [71, 1036, 1037, 1038, 1039, 1042], "shafer": 71, "nasa": [71, 350, 351, 376], "am": [71, 76, 81, 132, 171, 350, 384, 408, 471, 490, 1035], "dryden": 71, "stateless": [71, 351, 367, 381, 393, 414, 579, 580, 586, 635, 861, 862, 870, 996, 1044], "subject_body_extractor": 71, "subject_body_transform": 71, "sentenc": [71, 350, 352, 374, 394, 414], "text_stat": 71, "num_sent": 71, "text_stats_transform": 71, "subjectbodyextractor": 71, "subjectbodi": 71, "union": [71, 170, 407, 734, 750, 857, 1035], "body_bow": 71, "pull": [71, 319, 366, 377, 382, 393, 394, 1038], "body_stat": 71, "transformer_weight": [71, 461, 464, 857, 1033, 1040], "396": [71, 149, 376, 1021], "394": [71, 161], "481": [71, 77, 161], "plot_column_transform": [71, 77], "imput": [72, 132, 166, 172, 231, 241, 243, 317, 320, 368, 371, 383, 392, 393, 397, 407, 413, 487, 498, 562, 577, 636, 642, 669, 820, 841, 859, 917, 919, 1006, 1007, 1023, 1030, 1031, 1045], "miss": [72, 132, 149, 166, 172, 231, 241, 261, 284, 317, 321, 361, 365, 368, 371, 374, 376, 378, 379, 381, 383, 384, 393, 402, 405, 406, 407, 408, 443, 469, 487, 493, 495, 498, 554, 555, 558, 559, 561, 562, 563, 624, 625, 626, 627, 636, 642, 669, 687, 691, 723, 765, 820, 841, 859, 867, 868, 872, 874, 875, 878, 879, 883, 886, 887, 889, 906, 907, 908, 909, 982, 983, 986, 1006, 1007, 1008, 1010, 1023, 1030, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "chi": [72, 81, 112, 310, 371, 415, 516, 589, 592, 593, 595, 596, 597, 601, 602, 603, 606, 635, 636, 637, 638, 639, 754, 755, 1023, 1028, 1033, 1034], "dispatch": [72, 368, 402, 465, 795, 809, 819, 820, 821, 896, 952, 953, 1016, 1023, 1043], "processor": [72, 132, 170, 368, 417, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 528, 532, 533, 534, 536, 539, 540, 542, 543, 545, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 591, 599, 607, 629, 631, 636, 644, 648, 650, 652, 654, 655, 656, 658, 660, 662, 663, 665, 673, 676, 685, 686, 687, 688, 689, 690, 691, 770, 774, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 840, 841, 844, 846, 848, 849, 851, 852, 857, 860, 893, 894], "pedro": [72, 1029, 1031, 1032, 1036], "chi2": [72, 414, 415, 449, 578, 589, 592, 593, 595, 596, 597, 602, 603, 606, 617, 635, 636, 637, 638, 639, 640, 755, 761, 770, 1028, 1035, 1042], "simpleimput": [72, 132, 164, 165, 172, 231, 241, 243, 317, 320, 361, 393, 624, 625, 626, 976, 996, 1036, 1037, 1039, 1040, 1042, 1043, 1044, 1045], "40945": 72, "titan": [72, 172, 243, 316, 320, 321], "surviv": [72, 172, 975, 1006], "ag": [72, 149, 170, 172, 188, 189, 200, 218, 240, 241, 243, 306, 319, 320, 321, 374, 376, 1010, 1012, 1019], "fare": [72, 172, 243, 320, 321, 1032, 1033], "embark": [72, 172, 243, 316, 320, 321], "sex": [72, 149, 170, 172, 188, 189, 243, 321, 376, 994, 1019], "femal": [72, 170, 321, 384, 871, 872, 996], "male": [72, 170, 321, 384, 871, 872, 996], "pclass": [72, 172, 243, 316, 320, 321], "numeric_featur": [72, 320], "numeric_transform": [72, 320], "categorical_transform": 72, "preprocessor": [72, 132, 170, 200, 231, 239, 241, 312, 317, 319, 320, 321, 407, 414, 585, 586, 588, 1006, 1021, 1028, 1031, 1036, 1038], "798": [72, 413], "lt": [72, 73, 117, 132, 170, 251, 259, 273, 377, 379], "0x7fa048fe6550": 72, "pipelineifittedpipelin": [72, 117, 146, 170, 172, 230, 240, 243, 268, 320], "columntransformercolumntransform": [72, 132, 170, 172, 231, 241, 312, 317, 320], "simpleimputersimpleimput": [72, 132, 172, 231, 241, 317, 320], "standardscalerstandardscal": [72, 132, 170, 230, 231, 240, 241, 243, 268, 317, 320], "onehotencoderonehotencod": [72, 117, 132, 170, 171, 231, 241, 317, 320], "selectpercentileselectpercentil": [72, 243], "logisticregressionlogisticregress": [72, 117, 230, 231, 241, 243, 317, 320], "make_column_selector": [72, 122, 132, 239, 407, 461, 464, 1038], "subset_featur": 72, "Then": [72, 113, 117, 120, 132, 135, 146, 170, 176, 184, 188, 200, 204, 225, 230, 236, 242, 263, 264, 279, 350, 373, 383, 385, 387, 396, 403, 404, 406, 409, 411, 414, 415, 567, 590, 716, 752, 795, 809, 898, 899, 976, 985, 986, 992, 1001, 1021, 1037], "1047": 72, "1118": 72, "684": [72, 81], "1045": 72, "841": 72, "1046": [72, 251], "kb": [72, 170, 171], "numerical_transform": 72, "yourself": [72, 378, 379, 380, 384, 387, 990], "dtype_exclud": [72, 463], "dtype_includ": [72, 122, 132, 239, 407, 463], "_column_transform": [72, 132], "0x7fa0298ec3d0": 72, "0x7fa0298ecb80": 72, "exactli": [72, 112, 169, 179, 184, 193, 200, 204, 252, 269, 307, 345, 350, 379, 381, 403, 406, 410, 411, 414, 419, 443, 450, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 512, 523, 587, 588, 612, 673, 675, 700, 702, 759, 796, 813, 819, 978, 982, 983, 984, 986, 987, 1002, 1020, 1021, 1028, 1034, 1035, 1041], "hyperparamet": [72, 152, 153, 159, 160, 164, 167, 171, 179, 184, 189, 214, 218, 229, 239, 254, 259, 264, 266, 277, 286, 303, 350, 381, 393, 406, 410, 411, 413, 416, 499, 532, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 640, 650, 656, 662, 670, 673, 724, 781, 795, 809, 975, 980, 981, 982, 985, 986, 988, 990, 992, 1000, 1007, 1021, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1044], "cartesian": [72, 403, 630, 989, 1043], "preprocessor__num__imputer__strategi": 72, "preprocessor__cat__selector__percentil": 72, "classifier__c": 72, "search_cv": 72, "param_distribut": [72, 152, 262, 269, 273, 318, 392, 799, 807, 809, 1044], "randomizedsearchcvinot": 72, "fittedrandomizedsearchcv": 72, "pipelinepipelin": [72, 73, 241], "trigger": [72, 73, 383, 407, 855, 856, 858, 859, 918, 919, 935, 982, 1021, 1036, 1042, 1043], "best_params_": [72, 74, 125, 152, 235, 251, 259, 265, 318, 337, 392, 795, 798, 799, 809, 975, 1017, 1021], "best_score_": [72, 74, 235, 262, 265, 266, 337, 670, 672, 795, 798, 799, 809, 1016, 1017, 1021, 1039], "cv_results_": [72, 73, 74, 83, 118, 138, 148, 251, 259, 260, 261, 262, 265, 269, 272, 273, 286, 337, 469, 591, 795, 798, 799, 809, 1021, 1034, 1038, 1040, 1041], "sort_valu": [72, 172, 173, 243, 251, 261, 272, 312, 313], "mean_test_scor": [72, 73, 74, 83, 118, 138, 148, 251, 260, 261, 262, 269, 272, 273, 286, 337, 469, 591, 795, 809, 975, 1034, 1041], "std_test_scor": [72, 74, 118, 138, 148, 260, 261, 262, 269, 286, 469, 591, 795, 809, 1034, 1041], "param_preprocessor__num__imputer__strategi": 72, "param_preprocessor__cat__selector__percentil": 72, "param_classifier__c": 72, "786015": 72, "031020": 72, "785063": 72, "030498": 72, "783149": 72, "030462": 72, "plot_column_transformer_mixed_typ": [72, 77], "instanti": [73, 155, 319, 382, 397, 413, 447, 564, 565, 599, 627, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 925, 992, 1018, 1028, 1036, 1040, 1044], "argument": [73, 201, 230, 233, 236, 366, 373, 374, 379, 380, 382, 384, 385, 387, 388, 391, 393, 406, 407, 410, 411, 413, 415, 417, 418, 420, 424, 428, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 454, 456, 458, 460, 465, 466, 490, 493, 500, 505, 530, 532, 533, 535, 537, 548, 556, 557, 560, 564, 565, 566, 567, 574, 578, 579, 585, 586, 588, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 628, 636, 640, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 663, 665, 673, 674, 678, 681, 685, 689, 693, 695, 696, 697, 698, 699, 711, 716, 731, 738, 759, 775, 776, 801, 817, 819, 820, 821, 826, 827, 830, 840, 841, 842, 844, 846, 847, 848, 849, 850, 851, 852, 855, 858, 862, 896, 902, 912, 916, 925, 930, 932, 953, 954, 956, 970, 975, 978, 982, 983, 984, 986, 989, 993, 994, 1001, 1002, 1012, 1016, 1028, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045], "memoiz": [73, 374, 393], "costli": [73, 79, 119, 164, 262, 346, 366, 380, 385, 406, 440, 624, 803, 805, 890, 891, 935, 986, 989, 998, 1007], "mcgibbon": [73, 1030, 1031, 1034], "selectkbest": [73, 75, 145, 146, 320, 361, 379, 397, 407, 415, 578, 589, 592, 593, 595, 597, 603, 975, 1029, 1034, 1044], "mutual_info_classif": [73, 415, 589, 592, 593, 596, 597, 1034, 1040, 1043], "pipe": [73, 74, 122, 241, 260, 312, 318, 319, 392, 397, 407, 414, 587, 858, 883, 884, 886, 887, 888, 889, 975, 996, 1017], "reduce_dim": [73, 241, 260, 407], "popul": [73, 79, 81, 170, 200, 239, 264, 306, 374, 388, 393, 408, 437, 709, 715, 840, 841, 842, 844, 846, 848, 849, 850, 986, 992, 996, 1002], "n_features_opt": 73, "c_option": 73, "iterated_pow": [73, 529, 532, 538, 1034], "reduce_dim__n_compon": [73, 260, 407], "classify__c": 73, "reduce_dim__k": 73, "reducer_label": 73, "kbest": [73, 589], "0x7fa04915c9d0": 73, "gridsearchcvifittedgridsearchcv": [73, 251, 259, 261], "minmaxscalerminmaxscal": 73, "passthroughpassthrough": [73, 170, 171, 312], "linearsvclinearsvc": [73, 146, 268], "mean_scor": [73, 270, 273, 351, 1041], "alphabet": [73, 393, 737], "eas": [73, 173, 251, 311, 379, 382, 385, 982, 1000, 1006, 1007, 1010, 1039, 1040, 1042], "sometim": [73, 132, 169, 261, 302, 351, 361, 366, 367, 379, 381, 383, 385, 392, 393, 406, 408, 411, 413, 414, 446, 531, 532, 535, 537, 538, 863, 864, 865, 913, 981, 982, 983, 986, 991, 996, 997, 1001, 1012, 1020, 1025, 1029, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1044], "worthwhil": [73, 393], "slower": [73, 99, 118, 122, 164, 235, 270, 352, 413, 414, 415, 443, 448, 450, 535, 537, 544, 552, 553, 554, 555, 560, 561, 562, 563, 585, 586, 588, 628, 629, 630, 640, 656, 669, 671, 684, 689, 701, 826, 830, 831, 979, 983, 984, 985, 987, 989, 1002, 1021, 1032, 1039], "constructor": [73, 232, 366, 381, 393, 405, 407, 414, 461, 464, 546, 547, 552, 564, 565, 566, 567, 578, 579, 585, 586, 594, 665, 673, 674, 840, 841, 842, 844, 845, 846, 848, 849, 850, 857, 858, 859, 860, 954, 975, 987, 996, 1001, 1007, 1012, 1028, 1029, 1031, 1032, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043], "folder": [73, 374, 377, 379, 383, 387, 396, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 989, 1021], "cached_pip": [73, 407], "delet": [73, 326, 328, 383, 384, 466, 471, 483], "exit": [73, 284, 383, 387, 465], "benefici": [73, 75, 79, 96, 130, 306, 307, 377, 983], "plot_compare_reduct": [73, 77], "874": [74, 784, 785, 986], "logistic__c": [74, 1017], "54434690031882": 74, "pca__n_compon": [74, 1017], "truncat": [74, 130, 222, 388, 531, 532, 536, 537, 538, 541, 673, 675, 722, 752, 793, 847, 911, 935, 975, 985, 986, 1000, 1017, 1021, 1022, 1023, 1034, 1036], "x_digit": [74, 140, 301, 407, 1016, 1017, 1019], "y_digit": [74, 140, 301, 407, 1016, 1017, 1019], "__": [74, 262, 393, 407, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 1017, 1036, 1037], "spectrum": [74, 521, 541, 692, 935, 1010, 1017, 1036], "ax0": [74, 76, 200, 232, 351, 1017], "n_components_": [74, 104, 393, 438, 442, 531, 535, 536, 537, 538, 539, 540, 890, 891, 1017, 1037, 1039], "explained_variance_ratio_": [74, 105, 351, 411, 531, 538, 541, 546, 1017, 1031, 1034], "named_step": [74, 87, 407, 590, 591, 594, 858, 859, 898, 899, 982, 1017, 1035, 1037], "components_col": 74, "param_pca__n_compon": 74, "best_clf": 74, "nlargest": 74, "yerr": [74, 80, 82, 119, 122, 148, 286, 312, 328], "val": [74, 212, 261, 937], "537": [74, 77, 348], "plot_digits_pip": [74, 77], "candid": [75, 251, 259, 262, 269, 318, 367, 379, 383, 406, 413, 445, 447, 795, 798, 799, 807, 809, 982, 989, 1002, 1034], "features__pca__n_compon": 75, "features__univ_select__k": 75, "svm__c": 75, "867": 75, "967": [75, 986, 990], "transformer_list": [75, 407, 857, 860, 976, 1039, 1040], "univ_select": 75, "amuel": [75, 116, 191, 234, 327, 345], "ai": [75, 116, 191, 234, 327, 345, 410], "bonn": [75, 116, 191, 234, 327, 345], "mayb": [75, 302, 393, 414, 1001, 1007], "combined_featur": 75, "x_featur": [75, 637, 638, 639, 978], "grid_search": [75, 118, 241, 251, 259, 269, 407, 954, 1030, 1031, 1032, 1033, 1034, 1035], "377": [75, 77], "plot_feature_union": [75, 77], "overview": [76, 167, 278, 280, 380, 382, 392, 393, 493, 730, 739, 795, 811, 821, 826, 827, 828, 906, 988, 1000, 1022, 1023], "transformedtargetregressor": [76, 170, 200, 391, 397, 407, 590, 591, 594, 1036, 1038, 1041], "hous": [76, 132, 164, 165, 306, 318, 372, 487, 1023], "translat": [76, 381, 416, 524, 611, 867, 868, 884, 983, 986, 1004, 1010], "lowest": [76, 87, 171, 184, 251, 373, 406, 410, 632, 634, 798, 799, 802, 905, 906, 983, 986, 1002, 1043], "logarithm": [76, 132, 170, 204, 233, 262, 337, 393, 415, 457, 587, 655, 656, 673, 701, 722, 737, 747, 751, 752, 753, 787, 801, 838, 839, 933, 1002, 1016, 1035], "log1p": [76, 232, 862, 986, 996], "expm1": 76, "y_tran": 76, "meda": [76, 170, 986], "median_absolute_error": [76, 170, 986, 1032, 1038, 1040], "r2_score": [76, 169, 184, 195, 196, 413, 429, 462, 479, 480, 481, 551, 553, 555, 557, 559, 562, 565, 567, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 720, 724, 831, 832, 841, 849, 856, 899, 901, 904, 907, 909, 975, 986, 1029, 1031, 1037, 1041, 1042], "compute_scor": [76, 104, 179, 180, 641, 642, 1037], "r2": [76, 113, 118, 132, 169, 171, 195, 235, 381, 407, 413, 551, 567, 670, 821, 856, 986, 994, 1037], "ridge_cv": 76, "y_pred_ridg": 76, "ridge_cv_with_trans_target": 76, "inverse_func": [76, 170, 407, 462, 862, 996, 1036], "y_pred_ridge_with_trans_target": 76, "sell": 76, "quantile_transform": [76, 875, 886, 996, 1035, 1036, 1037], "house_pric": [76, 132], "select_dtyp": [76, 122, 321, 463], "inf": [76, 155, 294, 388, 406, 416, 443, 447, 454, 458, 468, 469, 475, 550, 551, 556, 557, 590, 591, 594, 603, 604, 605, 616, 624, 632, 634, 645, 646, 647, 649, 666, 668, 669, 673, 677, 684, 724, 726, 742, 774, 781, 785, 854, 863, 870, 916, 918, 919, 933, 986, 996, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044], "lotfrontag": 76, "garageyrblt": 76, "masvnrarea": [76, 132], "to_fram": 76, "n_quantil": [76, 171, 310, 875, 887, 1037], "output_distribut": [76, 306, 310, 407, 874, 875, 886, 887, 996], "squeez": [76, 158, 159, 239, 284, 306, 1020], "quantiletransform": [76, 171, 310, 407, 462, 874, 887, 976, 996, 1035, 1036, 1037, 1038, 1039, 1044], "weaker": [76, 558, 559], "residu": [76, 196, 202, 257, 429, 462, 479, 480, 481, 549, 551, 553, 555, 557, 559, 562, 565, 567, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 668, 669, 670, 671, 675, 676, 682, 683, 698, 740, 781, 831, 832, 841, 849, 856, 899, 901, 904, 907, 909, 982, 986, 1019, 1040, 1041, 1043], "smile": [76, 374, 1042], "plot_transformed_target": [76, 77], "auto_examples_compos": 77, "mahalanobi": [78, 84, 167, 406, 408, 447, 454, 466, 467, 468, 469, 470, 471, 472, 473, 696, 774, 775, 776, 845, 980, 992, 1036, 1039, 1040], "ledoitwolf": [78, 80, 84, 104, 167, 408, 466, 467, 471, 472, 473, 474, 795, 1032], "empiricalcovari": [79, 81, 82, 408, 466, 470, 471, 472, 473, 992], "unbias": [79, 404, 408, 411, 434, 547, 653, 669, 671, 684, 982, 1016], "shrunk": [79, 104, 306, 313, 322, 419, 470, 472, 473, 476, 477, 478, 546, 879, 980, 1000, 1022, 1023], "base_x_train": 79, "base_x_test": 79, "coloring_matrix": [79, 80], "shrunkcovari": [79, 104, 408, 466, 467, 470, 471, 472], "empirical_covari": [79, 408, 1044], "log_likelihood": [79, 607, 608, 793, 794], "negative_loglik": 79, "real_cov": [79, 80, 467, 470, 471, 472, 473], "emp_cov": [79, 81, 83, 475, 478], "loglik_r": 79, "inv": [79, 83, 301], "formula": [79, 80, 403, 406, 408, 419, 470, 472, 513, 514, 515, 587, 640, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 661, 673, 675, 701, 725, 751, 760, 975, 980, 982, 986, 991, 992, 996, 1000, 1033, 1035, 1037], "asymptot": [79, 80, 189, 365, 408, 471, 533, 726, 982, 985, 1038], "criterion": [79, 80, 173, 188, 208, 251, 273, 317, 381, 388, 393, 406, 411, 438, 442, 446, 449, 456, 459, 529, 534, 536, 543, 550, 551, 554, 555, 556, 557, 561, 562, 563, 603, 624, 641, 642, 645, 653, 663, 664, 665, 666, 668, 669, 671, 673, 674, 675, 677, 688, 692, 707, 794, 895, 900, 901, 902, 903, 904, 906, 907, 908, 909, 982, 985, 986, 994, 999, 1002, 1008, 1020, 1023, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1045], "chen": [79, 80, 408, 413, 419, 472, 722, 752, 978, 986, 1031, 1034, 1035, 1036, 1038, 1041, 1042, 1043, 1044], "Its": [79, 259, 263, 375, 381, 393, 411, 416, 535, 981, 982, 991, 994, 1000, 1006, 1010, 1031, 1045], "tuned_paramet": [79, 138, 259], "loglik_lw": 79, "loglik_oa": 79, "unseen": [79, 123, 146, 189, 204, 208, 274, 290, 341, 367, 371, 381, 392, 393, 406, 410, 844, 875, 887, 977, 986, 992, 994, 996, 1002, 1012, 1031, 1036, 1040], "loglog": [79, 233], "lik_max": 79, "amax": [79, 123], "lik_min": 79, "amin": 79, "vline": [79, 98, 187, 188, 189, 201, 261, 274, 307], "shrinkage_": [79, 80, 470, 472], "magenta": [79, 127], "purpl": [79, 93, 225], "cyan": [79, 115, 170, 295], "realli": [79, 172, 189, 383, 384, 385, 986, 992, 1010, 1042], "interestingli": [79, 149, 996], "outperform": [79, 87, 132, 279, 311, 391, 410, 413, 449, 459, 988, 996], "388": [79, 84], "plot_covariance_estim": [79, 84], "inspir": [80, 129, 171, 218, 379, 391, 413, 558, 559, 923, 976, 1006, 1037], "mmse": [80, 408, 419, 472], "tran": 80, "octob": [80, 374, 1028, 1035, 1041, 1042, 1044], "choleski": [80, 200, 218, 388, 468, 469, 475, 524, 608, 645, 647, 648, 651, 652, 653, 655, 656, 666, 669, 671, 677, 679, 680, 684, 793, 794, 982, 1031, 1035, 1037, 1040, 1043, 1044], "toeplitz": 80, "simul": [80, 98, 170, 194, 237, 261, 1010], "n_samples_rang": [80, 233], "lw_mse": 80, "oa_ms": 80, "lw_shrinkag": 80, "oa_shrinkag": 80, "error_norm": [80, 82, 466, 467, 468, 469, 470, 471, 472, 473], "darkorang": [80, 100, 105, 106, 201, 211, 224, 247, 248, 249, 252, 268, 270, 289, 295, 296, 327, 357], "165": [80, 84, 987], "plot_lw_vs_oa": [80, 84], "d_": [81, 406, 411, 645, 666, 677, 774, 983, 988], "mle": [81, 104, 538, 1036, 1039], "resist": [81, 82, 379], "erron": [81, 82, 411, 982, 1029, 1036, 1040], "breakdown": [81, 82, 217, 676, 982], "n_": [81, 82, 173, 261, 319, 406, 411, 413, 643, 649, 682, 693, 978, 982, 986, 988, 989, 993, 996, 998, 1001, 1002], "smallest": [81, 82, 200, 284, 355, 374, 406, 408, 415, 524, 538, 627, 651, 652, 653, 679, 680, 687, 691, 692, 795, 798, 799, 809, 814, 868, 1002, 1041], "pure": [81, 82, 87, 184, 200, 393, 406, 470, 476, 493, 554, 555, 556, 557, 561, 562, 563, 702, 712, 782, 791, 906, 907, 908, 909, 996], "rousseuw": [81, 82], "rousseeuw": [81, 82, 406, 408, 466, 471, 788, 789, 992], "ass": [81, 82, 408, 471], "1984": [81, 82, 408, 471, 906, 907, 1002], "wilson": [81, 376, 1028, 1031], "hilferti": 81, "1931": 81, "proceed": [81, 149, 374, 376, 406, 417, 436, 441, 508, 693, 705, 722, 752, 845, 895, 986, 998, 999, 1000], "academi": [81, 845], "688": 81, "n_outlier": [81, 82, 128, 203, 229, 291], "gen_cov": 81, "ey": [81, 82, 248, 252, 337, 374, 531, 538, 547], "outliers_cov": 81, "mincovdet": [81, 82, 408, 466, 467, 470, 472, 473, 992, 1028, 1035], "robust_cov": 81, "nmcd": 81, "nmle": 81, "26253567e": 81, "06695631e": 81, "22747343e": 81, "23773583": 81, "24640578": 81, "51963999": 81, "inlier": [81, 128, 203, 229, 239, 306, 393, 408, 428, 466, 560, 668, 674, 844, 875, 887, 901, 902, 904, 982, 992, 1035, 1036, 1041], "inlier_plot": 81, "outlier_plot": 81, "get_xlim": [81, 195, 205, 306], "zz": 81, "mahal_emp_cov": 81, "emp_cov_contour": 81, "pubu_r": 81, "mahal_robust_cov": 81, "robust_contour": 81, "ylorbr_r": 81, "dist": [81, 222, 233, 383, 466, 467, 468, 469, 470, 471, 472, 473, 696, 759, 765, 838, 839], "borderaxespad": 81, "cubic": [81, 416], "suggest": [81, 99, 115, 119, 170, 173, 261, 337, 365, 378, 379, 386, 393, 410, 411, 413, 466, 471, 562, 642, 823, 980, 982, 983, 991, 1001, 1021, 1032, 1039, 1042, 1045], "emp_mah": 81, "markeredgewidth": [81, 265], "rm": [81, 155, 383, 387, 408], "mahal": 81, "robust_mah": 81, "location_": [81, 82, 466, 467, 468, 469, 470, 471, 472, 473], "254": [81, 84], "plot_mahalanobis_dist": [81, 84], "compens": [82, 169, 171, 176, 200, 218, 262, 408, 411], "soon": [82, 393, 1019], "5n_": 82, "johanna": 82, "hardin": 82, "rock": 82, "decemb": [82, 157, 374, 661, 682, 683, 1028, 1036, 1038, 1040, 1043], "928": [82, 119, 136, 434], "946": [82, 329, 331], "zoubir": 82, "koivunen": 82, "chakhchoukh": 82, "muma": 82, "signal": [82, 96, 97, 98, 106, 125, 152, 157, 158, 167, 178, 199, 201, 219, 252, 319, 405, 406, 408, 414, 415, 416, 419, 472, 500, 518, 523, 528, 531, 534, 538, 622, 641, 642, 643, 644, 649, 650, 660, 661, 669, 681, 682, 683, 781, 816, 824, 872, 982, 986, 1003, 1010, 1015, 1022, 1023], "tutori": [82, 138, 139, 140, 141, 189, 202, 218, 261, 368, 379, 380, 385, 387, 392, 400, 406, 449, 459, 688, 1001, 1019, 1031], "treatment": [82, 169, 373, 411, 466, 471], "concept": [82, 118, 123, 236, 270, 368, 379, 391, 405, 406, 412, 414, 978, 986, 989, 1002, 1010], "magazin": [82, 415], "29": [82, 93, 153, 157, 191, 200, 204, 217, 321, 326, 376, 377, 396, 398, 399, 413, 556, 557, 687, 691, 777, 793, 850, 982, 983, 1000], "font_manag": [82, 290, 336], "range_n_outli": 82, "err_loc_mcd": 82, "err_cov_mcd": 82, "err_loc_emp_ful": 82, "err_cov_emp_ful": 82, "err_loc_emp_pur": 82, "err_cov_emp_pur": 82, "outliers_index": 82, "outliers_offset": 82, "inliers_mask": 82, "pure_x": 82, "pure_loc": 82, "pure_emp_cov": 82, "font_prop": 82, "fontproperti": [82, 290, 336], "hat": [82, 106, 257, 261, 289, 319, 377, 404, 408, 412, 413, 977, 982, 983, 986, 988, 990], "_2": [82, 157, 341, 411, 414, 528, 534, 542, 543, 643, 649, 982, 990, 1000, 1001], "x_size": 82, "513": [82, 84, 847, 989], "plot_robust_vs_empirical_covari": [82, 84], "graphicallasso": [83, 408, 466, 467, 469, 470, 471, 472, 473, 475, 1036, 1044], "largest": [83, 98, 118, 149, 202, 376, 406, 408, 411, 440, 524, 538, 554, 555, 556, 557, 561, 562, 585, 706, 793, 794, 814, 836, 868, 906, 907, 908, 909, 935, 983, 986, 996, 1001, 1002], "invert": [83, 101, 146, 222, 351, 352, 391, 408, 414, 627, 686, 690, 996, 1037], "fairli": [83, 124, 223, 276, 301, 387, 406, 556, 557, 696, 987, 1019], "tweak": [83, 236, 410, 952, 985, 1021, 1039], "readabl": [83, 262, 319, 384, 385, 387, 400, 531, 1037, 1040, 1041, 1042, 1043], "make_sparse_spd_matrix": [83, 526, 1045], "prng": 83, "prec": [83, 230, 524, 986], "smallest_coef": [83, 524], "largest_coef": [83, 524], "multivariate_norm": [83, 87, 246, 466, 467, 468, 469, 470, 471, 472, 473], "ledoit_wolf": [83, 408, 1041], "prec_": 83, "lw_cov_": 83, "lw_prec_": 83, "this_cov": 83, "this_prec": 83, "ma": [83, 312, 337, 982, 1034, 1039], "masked_equ": 83, "set_facecolor": [83, 246], "set_axis_bgcolor": 83, "463": [83, 84, 218, 279], "plot_sparse_cov": [83, 84], "783": [84, 239, 244], "auto_examples_covari": 84, "cross_decomposit": [85, 86, 87, 167, 237, 368, 1032, 1033, 1035, 1036, 1037], "plscanon": [86, 479, 481, 482, 1008, 1023, 1032, 1036, 1038, 1040, 1042], "plsregress": [86, 87, 1008, 1023, 1035, 1038, 1040, 1042, 1044], "appar": [86, 988, 1010], "scatterplot": [86, 179, 261], "maxim": [86, 87, 91, 96, 107, 125, 179, 251, 252, 262, 266, 270, 271, 294, 311, 318, 337, 341, 355, 359, 376, 393, 403, 406, 409, 411, 415, 416, 546, 591, 607, 608, 641, 642, 645, 666, 676, 677, 717, 795, 798, 799, 809, 867, 873, 883, 980, 982, 985, 986, 989, 991, 1001, 1016, 1019, 1031, 1033, 1038, 1041, 1043], "weak": [86, 123, 126, 204, 218, 267, 410, 554, 555, 556, 561, 562, 563, 627, 989, 1010, 1044], "var": [86, 87, 102, 115, 149, 180, 261, 376, 380, 415, 638, 642, 900, 901, 902, 903, 904, 986, 1036], "corr": [86, 173, 261], "corrcoef": [86, 107], "plsca": [86, 480], "x_train_r": 86, "y_train_r": 86, "x_test_r": 86, "y_test_r": 86, "221": [86, 130, 166, 1031], "222": [86, 130, 307, 314, 1001], "223": [86, 130, 149, 376], "yj": [86, 310], "noiz": 86, "xb": [86, 877], "11693539": 86, "19803308": 86, "12190903": 86, "77322639": 86, "77777215": 86, "04995982": 86, "34990341": 86, "37257991": 86, "27597342": 86, "95433992": 86, "9403917": 86, "02818216": 86, "06880943": 86, "08604995": 86, "05216586": 86, "72295655": 86, "70432034": 86, "79769376": 86, "exce": [86, 282, 317, 416, 439, 512, 599, 646, 655, 1037, 1040, 1042], "194": [86, 88, 303], "plot_compare_cross_decomposit": [86, 88], "pcr": [87, 409], "pl": [87, 204, 376, 409, 479, 480, 481, 482, 1033], "greedili": [87, 149, 406, 410, 415, 457], "despit": [87, 198, 200, 218, 235, 293, 393, 397, 408, 624, 625, 627, 982, 989, 1010, 1036, 1037], "suffer": [87, 120, 172, 284, 306, 351, 365, 406, 413, 541, 759, 981, 982, 986, 989, 1020, 1037], "dive": [87, 379, 385], "explained_variance_": [87, 531, 538, 541, 1020, 1035], "onto": [87, 222, 223, 234, 306, 391, 411, 414, 418, 443, 445, 458, 530, 536, 540, 624, 625, 627, 685, 980, 984, 989], "recommend": [87, 120, 164, 217, 230, 236, 257, 270, 310, 318, 341, 365, 366, 368, 373, 377, 379, 381, 385, 387, 391, 396, 409, 410, 411, 413, 415, 435, 444, 446, 448, 457, 493, 505, 532, 535, 541, 546, 558, 559, 566, 579, 580, 586, 603, 608, 628, 629, 635, 667, 673, 689, 694, 695, 697, 699, 801, 807, 809, 817, 854, 861, 863, 870, 877, 878, 883, 884, 886, 887, 888, 889, 891, 900, 903, 935, 954, 975, 983, 986, 988, 990, 993, 996, 998, 1000, 1001, 1002, 1005, 1010, 1023, 1030, 1031, 1037, 1038, 1039, 1040, 1042, 1044], "linearregress": [87, 135, 169, 179, 190, 195, 196, 197, 198, 203, 206, 217, 232, 236, 238, 257, 275, 307, 361, 379, 391, 392, 407, 413, 462, 567, 629, 632, 643, 646, 649, 651, 668, 669, 684, 982, 986, 996, 1019, 1032, 1033, 1037, 1040, 1041, 1042, 1044], "retriev": [87, 170, 204, 268, 351, 359, 383, 393, 411, 414, 415, 465, 493, 587, 590, 591, 623, 650, 660, 681, 696, 722, 726, 728, 729, 752, 777, 833, 837, 870, 896, 982, 984, 986, 988, 1006, 1007, 1020, 1033, 1038, 1040, 1042, 1045], "026": 87, "predit": 87, "pca_2": 87, "673": [87, 303, 304, 385], "486": [87, 88, 202, 273, 277], "plot_pcr_vs_pl": [87, 88], "auto_examples_cross_decomposit": 88, "multilabel": [89, 94, 167, 228, 244, 268, 281, 283, 374, 381, 382, 393, 401, 479, 484, 493, 494, 505, 506, 512, 520, 538, 554, 561, 564, 655, 671, 672, 700, 704, 710, 722, 725, 726, 730, 731, 734, 735, 750, 752, 779, 780, 783, 784, 790, 792, 824, 827, 829, 831, 855, 862, 865, 869, 871, 882, 903, 906, 908, 924, 948, 949, 950, 997, 1008, 1009, 1021, 1023, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "050": [90, 94, 352, 353, 994], "plot_digits_last_imag": [90, 94], "iris": [91, 267, 268, 1018], "150x4": 91, "legend_el": [91, 128, 213, 264, 287, 341], "flower": [91, 105, 270, 503, 504, 986, 1006], "versicolor": [91, 270, 271, 501], "differenti": [91, 268, 413, 416, 556, 557, 616, 619], "unus": [91, 102, 103, 171, 197, 221, 223, 460, 576, 759, 767, 975, 983, 1028, 1036, 1038, 1039, 1041, 1043], "3rd": [91, 160, 833, 876, 988, 996], "eigenvalu": [91, 251, 403, 406, 408, 449, 459, 466, 467, 468, 469, 470, 471, 472, 473, 532, 538, 546, 670, 685, 686, 688, 690, 692, 864, 978, 983, 996, 1030, 1034, 1037, 1038, 1039, 1040], "plot_iris_dataset": [91, 94], "easi": [92, 171, 208, 218, 249, 259, 261, 337, 350, 361, 374, 385, 387, 391, 392, 406, 413, 497, 501, 507, 865, 975, 981, 985, 993, 996, 1006, 1007, 1010, 1021, 1038, 1043, 1044], "make_gaussian_quantil": [92, 112, 114, 375, 467, 471, 472, 473, 517], "321": 92, "323": [92, 233], "y2": [92, 114, 713, 987], "324": [92, 374], "multi": [92, 111, 136, 167, 178, 216, 219, 220, 223, 227, 228, 229, 237, 240, 244, 254, 258, 270, 277, 282, 299, 304, 316, 321, 350, 354, 359, 360, 366, 374, 376, 381, 382, 388, 393, 396, 406, 413, 414, 416, 423, 434, 449, 459, 466, 471, 492, 493, 501, 502, 507, 511, 512, 516, 517, 519, 538, 546, 547, 548, 550, 552, 554, 555, 556, 558, 561, 562, 564, 566, 607, 628, 630, 640, 643, 644, 649, 650, 654, 655, 657, 658, 659, 660, 663, 665, 669, 670, 671, 672, 673, 678, 681, 687, 700, 710, 717, 730, 736, 738, 779, 795, 809, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 845, 846, 848, 854, 855, 856, 859, 865, 878, 882, 893, 894, 898, 900, 903, 906, 907, 908, 910, 911, 912, 918, 921, 924, 975, 987, 989, 993, 996, 1000, 1006, 1007, 1008, 1012, 1018, 1022, 1023, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1044, 1045], "325": [92, 323], "326": 92, "273": [92, 94], "plot_random_dataset": [92, 94], "make_multilabel_classif": [93, 237, 375, 512, 533, 784, 829, 830, 986, 1030, 1031, 1033, 1039], "degener": [93, 247, 418, 437, 451, 530, 717, 982, 986, 1037, 1041, 1042], "vocabulari": [93, 215, 350, 351, 391, 414, 585, 586, 587, 588, 988, 1012, 1021, 1028, 1030, 1033, 1036, 1039, 1041], "w0": 93, "w1": [93, 413, 654], "38": [93, 171, 191, 199, 204, 255, 270, 289, 322, 359, 413, 629, 726, 879, 986, 996, 1028, 1029, 1030], "54": [93, 149, 176, 184, 200, 203, 239, 374, 376, 406, 488, 1029, 1030], "make_ml_clf": 93, "ff3333": 93, "0198e1": 93, "bf5fff": 93, "fcd116": 93, "ff7216": 93, "4dbd33": 93, "87421f": 93, "plot_2d": [93, 221], "p_c": [93, 520], "p_w_c": [93, 520], "allow_unlabel": [93, 237, 520], "return_distribut": [93, 520], "sep": [93, 270], "p_w": 93, "116": [93, 94, 235, 1028], "plot_random_multilabel_dataset": [93, 94], "607": 94, "auto_examples_dataset": 94, "blind": [95, 108, 167, 350, 411, 530, 538], "fastica": [95, 108, 167, 411, 529, 532, 538, 1020, 1028, 1030, 1036, 1042, 1043], "increment": [95, 108, 167, 264, 383, 385, 439, 444, 460, 501, 530, 531, 532, 533, 536, 538, 541, 599, 643, 655, 663, 801, 822, 830, 831, 833, 834, 835, 836, 837, 867, 868, 878, 898, 899, 961, 982, 988, 1031, 1032], "fa": [95, 107, 108, 167, 385, 411, 470, 473, 529, 538, 795, 820], "precomput": [95, 108, 167, 178, 219, 224, 284, 286, 381, 388, 391, 393, 406, 414, 417, 429, 437, 438, 441, 442, 443, 447, 449, 454, 462, 468, 479, 480, 481, 521, 528, 532, 534, 537, 539, 545, 551, 553, 555, 557, 559, 562, 565, 567, 607, 608, 617, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 678, 679, 681, 682, 685, 687, 688, 689, 693, 770, 774, 777, 788, 789, 831, 832, 840, 841, 842, 844, 845, 846, 848, 849, 850, 856, 899, 900, 901, 902, 903, 904, 907, 909, 962, 963, 964, 978, 984, 989, 1001, 1007, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044], "olivetti": [96, 120, 372, 411, 492, 1023, 1028, 1036], "chapter": [96, 361, 381, 406, 411, 413, 416, 527, 529, 531, 611, 616, 619, 640, 976, 979, 982, 1001, 1002], "decompos": [96, 100, 115, 308, 405, 531, 535, 706, 819, 935, 981, 982, 986, 1003, 1022, 1023], "basicconfig": 96, "asctim": 96, "levelnam": 96, "faces_cent": 96, "image_shap": [96, 238], "constrained_layout": [96, 171, 221, 312, 313, 321], "set_constrained_layout_pad": 96, "w_pad": [96, 121, 356], "h_pad": [96, 121, 356], "set_edgecolor": 96, "vec": [96, 414, 535, 537, 544], "im": [96, 107, 272, 288, 1009], "pad": [96, 121, 164, 171, 221, 239, 350, 356, 414, 585, 586, 588], "initialis": [96, 535, 537, 544, 1028, 1036, 1037], "mathbb": [96, 115, 155, 409, 986, 993, 1001], "4096": [96, 374, 411, 492], "human": [96, 171, 350, 400, 406, 411, 855, 856, 986, 993, 1037], "friendli": [96, 366, 379, 387, 411, 891, 998, 999, 1006, 1007], "visualis": [96, 99, 107, 237, 541, 796, 797, 800, 812, 813, 814, 815, 816, 989, 1007], "64x64": [96, 374, 411], "singular": [96, 388, 403, 406, 409, 448, 450, 479, 480, 481, 482, 518, 521, 531, 535, 537, 538, 541, 544, 546, 547, 654, 669, 670, 671, 684, 935, 982, 983, 985, 1022, 1023, 1034, 1035], "scalar": [96, 319, 385, 393, 407, 416, 418, 461, 464, 521, 530, 612, 613, 614, 619, 620, 624, 625, 734, 738, 914, 922, 978, 990, 992, 996, 1000, 1006, 1038, 1039, 1042, 1044], "noise_variance_": [96, 188, 529, 531, 538, 653, 1035, 1042], "pixelwis": 96, "pca_estim": 96, "nmf_estim": 96, "multivari": [96, 170, 371, 408, 411, 414, 470, 513, 514, 515, 624, 625, 626, 627, 646, 668, 675, 676, 833, 834, 835, 836, 837, 980, 982, 985, 988, 1006, 1012, 1020, 1023], "subcompon": [96, 411], "ica_estim": 96, "15e": 96, "sparsepca": [96, 528, 530, 531, 532, 534, 536, 537, 538, 539, 542, 543, 1028, 1035, 1036, 1038, 1039, 1041, 1042, 1043], "batch_pca_estim": 96, "minibatchdictionarylearn": [96, 99, 367, 411, 528, 535, 539, 542, 543, 1029, 1031, 1038, 1039, 1041, 1042, 1043, 1044], "batch_dict_estim": 96, "enhanc": [96, 204, 378, 379, 383, 391, 393, 406, 986, 1004, 1026, 1027, 1028, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "consum": [96, 361, 373, 381, 393, 397, 406, 410, 413, 446, 798, 799, 858, 859, 942, 943, 982, 1010, 1033, 1045], "kmeans_estim": 96, "factoranalysi": [96, 104, 107, 411, 541, 1029, 1031, 1040, 1042], "heteroscedast": [96, 104, 125, 202, 411, 874, 886], "fa_estim": 96, "wrap": [96, 117, 125, 284, 373, 381, 393, 430, 505, 582, 583, 654, 673, 824, 882, 976, 986, 989, 1001, 1006, 1028, 1033, 1036, 1038, 1039, 1041, 1043], "colormap": [96, 114, 160, 192, 209, 337, 342, 356, 694, 1041], "uv": [96, 411], "x_1": [96, 144, 155, 197, 201, 409, 411, 413, 416, 610, 622, 654, 871, 898, 899, 982, 988, 990, 996, 1000], "x_n": [96, 411, 898, 899, 988, 990, 1000], "dict_pos_dict_estim": 96, "positive_dict": [96, 528, 534, 542, 543], "dict_pos_code_estim": 96, "fit_algorithm": [96, 528, 534, 1043, 1044], "cd": [96, 149, 376, 377, 379, 383, 385, 411, 468, 469, 475, 528, 534, 536, 537, 540, 542, 543, 544, 982, 1021, 1033, 1043], "positive_cod": [96, 528, 534, 539, 542, 543], "dict_pos_estim": 96, "plot_faces_decomposit": [96, 108], "imagin": [97, 152, 236, 341, 410, 411, 414, 982], "plai": [97, 126, 154, 183, 209, 255, 295, 333, 334, 365, 391, 1021], "microphon": 97, "s1": [97, 149, 160, 188, 189, 376, 1020], "sinusoid": [97, 113, 125, 184, 235, 979, 1020], "s2": [97, 149, 160, 188, 189, 376, 547, 1020], "sawtooth": [97, 1020], "saw": [97, 201, 204, 1020], "tooth": [97, 1020], "s_": [97, 265, 983, 994, 996, 1020], "a_": [97, 403, 406, 535, 537, 544, 982, 1020], "mixing_": [97, 98, 530, 1020], "prove": [97, 1010], "revert": [97, 627, 629, 630, 1035, 1040], "unmix": [97, 418, 530], "allclos": [97, 129, 998, 1020], "mean_": [97, 265, 529, 530, 531, 536, 538, 540, 878, 996, 1020, 1036], "orthogon": [97, 98, 99, 167, 178, 219, 405, 411, 523, 528, 534, 536, 539, 540, 545, 661, 662, 682, 683, 998, 1008, 1023, 1028], "steelblu": [97, 98, 134], "sig": 97, "333": [97, 108, 269, 277, 840], "plot_ica_blind_source_separ": [97, 108], "ica": [98, 405, 418, 1002, 1022, 1023], "geometr": [98, 406, 685, 701, 727, 753, 983, 1036], "standard_t": 98, "s_pca_": 98, "s_ica_": 98, "plot_sampl": [98, 252], "axis_list": 98, "x_axi": [98, 208, 265], "y_axi": [98, 208], "quiver": 98, "hline": 98, "set_zord": 98, "350": [98, 108, 130, 136, 170], "plot_ica_vs_pca": [98, 108], "firstli": [99, 365, 391, 654, 1021], "undistort": 99, "noiseless": [99, 984], "pursuit": [99, 167, 178, 219, 411, 471, 523, 528, 534, 539, 545, 661, 662, 682, 683, 1008, 1023, 1028], "omp": [99, 106, 199, 411, 528, 534, 539, 545, 661, 662, 682, 683, 1008, 1023, 1028, 1036], "promin": [99, 393], "reminisc": 99, "downsampl": 99, "075": [99, 351], "show_with_diff": 99, "puor": 99, "22692": 99, "dico": 99, "n_steps_": [99, 446, 534, 535, 1041], "reconstruct_from_patches_2d": [99, 414, 580], "intercept": [99, 192, 209, 217, 346, 393, 479, 480, 481, 546, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 684, 873, 877, 880, 898, 899, 905, 982, 984, 986, 991, 1000, 1001, 1031, 1033, 1037, 1038], "transform_algorithm": [99, 106, 528, 534, 539, 1044], "n1": 99, "atom": [99, 106, 411, 528, 534, 536, 539, 540, 542, 543, 650, 660, 681, 982, 1028, 1041], "transform_n_nonzero_coef": [99, 106, 528, 534, 539], "n2": 99, "n4": 99, "transform_alpha": [99, 106, 528, 534, 539, 1041], "set_param": [99, 107, 116, 122, 125, 171, 172, 180, 188, 189, 193, 204, 208, 234, 239, 274, 287, 316, 340, 351, 382, 393, 406, 407, 413, 416, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 976, 992, 1012, 1019, 1028, 1034, 1035, 1036, 1041, 1042], "plot_image_denois": [99, 108], "ipca": [100, 530, 531], "flip": [100, 579, 738, 935, 988, 1032, 1041], "incrementalpca": [100, 367, 411, 530, 532, 536, 538, 541, 1032, 1035, 1036, 1038, 1039, 1042], "x_ipca": 100, "x_pca": 100, "turquois": [100, 105, 106, 127, 206, 217, 224, 248, 249, 268], "x_transform": [100, 130, 236, 482, 528, 529, 530, 531, 532, 534, 536, 540, 563, 635, 636, 685, 686, 687, 688], "nmean": 100, "shadow": [100, 105, 106, 224, 327, 344, 352, 414], "scatterpoint": [100, 105, 224, 248, 327], "216": [100, 108, 999], "plot_incremental_pca": [100, 108], "nest": [101, 112, 167, 189, 236, 254, 277, 366, 385, 393, 396, 406, 410, 416, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 453, 459, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 501, 516, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 800, 809, 820, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 986, 989, 1028, 1029, 1032, 1034, 1035, 1036, 1042], "train_ax": 101, "test_ax": 101, "straight": [101, 190, 196, 198, 258, 341, 365], "inner": [101, 125, 262, 266, 282, 327, 365, 414, 440, 511, 543, 579, 586, 645, 666, 677, 771, 773, 978, 986, 996, 1001, 1029, 1032, 1042], "x_test_kernel_pca": 101, "orig_data_ax": 101, "pca_proj_ax": 101, "kernel_pca_proj_ax": 101, "unfold": [101, 382, 983], "untangl": 101, "mind": [101, 169, 170, 171, 218, 310, 311, 350, 351, 361, 379, 400, 408, 410, 413, 643, 644, 701, 982, 1001, 1006, 1012, 1019], "investig": [101, 107, 112, 165, 345, 379, 982], "pca_back_proj_ax": 101, "kernel_pca_back_proj_ax": 101, "reli": [101, 118, 122, 149, 173, 188, 189, 279, 284, 317, 321, 350, 365, 366, 381, 384, 387, 388, 391, 393, 402, 403, 406, 411, 413, 414, 546, 582, 583, 590, 594, 604, 605, 822, 825, 863, 952, 975, 978, 980, 982, 986, 989, 996, 1001, 1010, 1036, 1037, 1038, 1042, 1044, 1045], "analyt": [101, 411, 416, 529, 617, 705, 976, 980, 986, 1005, 1010], "kernelridg": [101, 152, 235, 669, 979, 1032], "kernal": 101, "relianc": [101, 204], "522": [101, 108, 899], "plot_kernel_pca": [101, 108], "aid": [102, 258, 406, 788, 789, 983, 1010, 1028, 1040], "kevin": [102, 640, 1030, 1032, 1034, 1035, 1038, 1039, 1040, 1042, 1043], "hugh": [102, 873, 1030, 1041], "pdf": [102, 149, 261, 289, 306, 376, 379, 406, 415, 439, 446, 528, 531, 534, 538, 638, 641, 646, 655, 661, 663, 664, 668, 673, 676, 679, 680, 682, 683, 689, 835, 836, 847, 854, 891, 893, 982, 999, 1002, 1009, 1024, 1028], "30000": [102, 374], "pdf_z": 102, "plot_fig": [102, 197], "fig_num": [102, 197], "pca_scor": [102, 104], "vt": [102, 547], "full_matric": 102, "x_pca_axi": 102, "y_pca_axi": 102, "z_pca_axi": 102, "x_pca_plan": 102, "y_pca_plan": 102, "z_pca_plan": 102, "plot_surfac": [102, 171, 197], "151": [102, 108, 242, 244, 321, 327, 331, 385, 413, 998], "plot_pca_3d": [102, 108], "cla": 103, "077": [103, 108, 284], "plot_pca_iri": [103, 108], "homoscedast": [104, 232, 310, 986, 1036], "succe": [104, 184], "subspac": [104, 409, 413, 449, 512, 552, 553, 688, 692, 935, 980, 989, 992, 998, 1010, 1020], "overestim": [104, 361, 410], "circumst": [104, 218, 989, 1006], "nip": [104, 376, 512, 538, 563, 638, 986], "604": [104, 263, 277, 538], "minka": [104, 538, 982], "deni": [104, 1030, 1031, 1035, 1036, 1037, 1043, 1044], "engemann": [104, 1030, 1031, 1035], "x_homo": 104, "x_hetero": 104, "fa_scor": 104, "shrunk_cov_scor": 104, "lw_score": 104, "n_components_pca": 104, "n_components_fa": 104, "n_components_pca_ml": 104, "axhlin": [104, 138, 190, 260, 264], "violet": [104, 1044], "930": [104, 108, 1016], "plot_pca_vs_fa_model_select": [104, 108], "92461872": 105, "05306648": 105, "x_r": [105, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600], "x_r2": 105, "183": [105, 108, 247, 248, 253, 326, 385, 987, 1028], "plot_pca_vs_lda": [105, 108], "ricker": 106, "sparsecod": [106, 411, 528, 534, 537, 545, 1035, 1036, 1038, 1040, 1042], "mexican": 106, "piecewis": [106, 319, 403, 977, 982, 996, 1002], "matter": [106, 252, 341, 361, 406, 407, 413, 564, 665, 673, 675, 982, 1032], "motiv": [106, 379, 381, 393, 978, 986, 996, 1010, 1041], "heavier": [106, 408, 982], "ricker_funct": 106, "ricker_matrix": 106, "d_fix": 106, "d_multi": 106, "first_quart": 106, "transform_n_nozero_coef": 106, "lasso_lar": [106, 528, 534, 539, 545, 1038], "n_nonzero": 106, "coder": [106, 539, 713], "flatnonzero": [106, 188, 260, 269, 270, 777], "soft": [106, 133, 134, 379, 393, 566, 567, 894, 902, 1000, 1010, 1033], "debias": 106, "lstsq": [106, 379, 654, 667], "rcond": 106, "plot_sparse_cod": [106, 108], "uncov": [107, 692], "inher": [107, 195, 361, 406, 411, 976, 978, 980, 981, 983, 987], "varimax": [107, 411, 529, 1040], "jona": [107, 1040], "sassenhagen": [107, 1040], "set_yticklabel": [107, 155, 164, 165, 173, 272, 352], "n_comp": [107, 176], "unrot": 107, "52106591": 107, "37741762": 107, "26934744": 107, "92329566": 107, "5804131": 107, "02449161": 107, "56485654": 107, "06694199": 107, "88096009": 107, "4472869": 107, "41691605": 107, "55390036": 107, "99918858": 107, "01915283": 107, "96228895": 107, "05840206": 107, "98633022": 107, "05752333": 107, "16052385": 107, "67443065": 107, "90809432": 107, "41726413": 107, "85857475": 107, "43847489": 107, "385": [107, 108], "plot_varimax_fa": [107, 108], "922": [108, 304, 1016], "auto_examples_decomposit": 108, "custom": [109, 167, 240, 254, 262, 277, 286, 291, 316, 332, 337, 348, 350, 352, 371, 374, 377, 381, 386, 387, 388, 391, 392, 393, 405, 406, 407, 410, 416, 465, 486, 490, 491, 499, 501, 535, 537, 544, 546, 554, 555, 561, 562, 568, 570, 599, 628, 687, 696, 710, 795, 824, 862, 896, 903, 970, 975, 980, 986, 989, 1006, 1007, 1010, 1021, 1023, 1028, 1032, 1033, 1035, 1036, 1038, 1039, 1040, 1043, 1044, 1045], "__sklearn_is_fitted__": [109, 167, 381, 420, 423, 970, 1041, 1042], "convent": [110, 261, 368, 379, 381, 382, 383, 385, 393, 424, 425, 428, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 466, 467, 468, 469, 470, 471, 472, 473, 505, 506, 528, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 544, 560, 563, 566, 567, 578, 579, 580, 585, 586, 588, 624, 625, 626, 627, 674, 685, 686, 687, 688, 715, 793, 794, 826, 827, 842, 844, 846, 850, 862, 870, 873, 874, 876, 879, 890, 891, 902, 929, 930, 986, 1013, 1028, 1035, 1036, 1039, 1041, 1042, 1044, 1045], "subclass": [110, 381, 416, 571, 952, 1033, 1036, 1041], "showcas": [110, 381], "statu": [110, 161, 373, 383, 396, 493, 838, 839], "_is_fit": 110, "snippet": [110, 361, 379, 384, 387, 391, 402, 413, 414, 415, 976, 996, 1009, 1041], "customestim": 110, "classifiermixin": [110, 236, 379, 381, 393, 410, 1039], "kushan": 110, "kushansharma1": 110, "classes_": [110, 192, 209, 230, 236, 270, 325, 326, 379, 381, 393, 434, 435, 546, 547, 548, 550, 552, 554, 556, 558, 561, 564, 566, 590, 591, 607, 628, 655, 656, 663, 665, 671, 672, 673, 694, 697, 699, 784, 795, 798, 799, 809, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 840, 845, 848, 855, 858, 865, 866, 869, 879, 893, 894, 895, 898, 900, 903, 906, 908, 911, 986, 997, 1000, 1029, 1032, 1033, 1035, 1038, 1040], "track": [110, 116, 124, 326, 379, 382, 383, 402, 531, 987, 1006, 1007, 1035, 1038], "notfittederror": [110, 393, 847, 970, 1032, 1034, 1037, 1038, 1044], "logic": [110, 366, 380, 381, 386, 402, 413, 1002, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "boolean": [110, 359, 374, 379, 381, 388, 407, 413, 414, 415, 461, 558, 559, 578, 579, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 626, 629, 630, 633, 646, 668, 696, 827, 833, 854, 861, 881, 914, 970, 976, 982, 988, 993, 996, 1002, 1028, 1031, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043], "sklearn_is_fit": 110, "predictor": [111, 136, 167, 200, 218, 381, 392, 393, 407, 409, 410, 413, 416, 463, 464, 479, 480, 481, 493, 513, 514, 515, 552, 553, 559, 562, 565, 599, 607, 627, 629, 630, 645, 650, 654, 666, 670, 677, 698, 819, 821, 830, 831, 858, 859, 871, 872, 878, 960, 982, 987, 1029, 1035, 1038], "stack": [111, 136, 167, 289, 359, 378, 387, 391, 393, 405, 412, 461, 463, 464, 493, 512, 559, 562, 564, 565, 609, 624, 625, 627, 650, 670, 698, 819, 821, 859, 863, 871, 872, 878, 960, 976, 1006, 1007, 1008, 1009, 1023, 1028, 1031, 1035, 1036, 1037, 1038, 1039], "isolationforest": [111, 136, 167, 229, 239, 628, 824, 902, 992, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1044], "oob": [111, 124, 136, 167, 413, 512, 561, 1007, 1030, 1041], "votingclassifi": [111, 136, 167, 397, 501, 561, 567, 628, 655, 836, 840, 903, 906, 975, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042], "vote": [111, 118, 133, 134, 136, 167, 282, 341, 393, 394, 405, 498, 552, 553, 554, 557, 561, 562, 566, 567, 654, 826, 840, 841, 846, 848, 987, 989, 1008, 1019, 1023, 1028, 1031, 1033, 1038], "versu": [111, 132, 136, 167, 170, 178, 209, 215, 219, 235, 249, 254, 277, 292, 324, 331, 406, 410, 413, 416, 501, 531, 553, 607, 628, 636, 655, 656, 663, 665, 671, 672, 673, 674, 779, 795, 800, 820, 830, 859, 894, 895, 902, 903, 907, 975, 982, 986, 987, 992, 999, 1000, 1001, 1019, 1036], "experi": [112, 155, 159, 169, 170, 171, 172, 176, 202, 279, 311, 345, 351, 352, 366, 373, 379, 382, 405, 410, 512, 724, 781, 982, 987, 998, 1004, 1005, 1006, 1010, 1019, 1021], "depict": [112, 263, 413, 985], "zhu": [112, 413, 516, 550, 655, 893], "principl": [112, 159, 289, 352, 379, 391, 393, 394, 410, 413, 935, 975, 985, 989, 1000, 1035], "repeatedli": [112, 320, 361, 393, 406, 413, 416, 505, 543, 663, 664, 673, 674, 675, 777, 976, 990, 1016], "zou": [112, 188, 413, 516, 550, 653, 982, 1000], "rosset": [112, 413, 516, 550], "hasti": [112, 115, 116, 123, 127, 149, 188, 260, 376, 410, 413, 516, 517, 550, 556, 557, 625, 653, 718, 719, 720, 828, 845, 891, 906, 907, 976, 980, 982, 987, 993, 998, 1000, 1002], "2009": [112, 115, 116, 127, 184, 406, 410, 411, 413, 414, 516, 517, 525, 528, 534, 535, 537, 538, 541, 544, 550, 556, 557, 632, 668, 676, 693, 829, 906, 907, 934, 935, 982, 986, 987, 993, 1002], "349": [112, 385, 550], "360": [112, 308, 314, 550], "sphere": [112, 167, 220, 221, 227, 351, 412, 516, 586, 685, 686, 687, 688, 689, 760, 921, 980, 984, 989], "roughli": [112, 125, 189, 252, 271, 284, 311, 365, 393, 411, 414, 516, 983, 1028], "2_000": 112, "percent": [112, 489, 597, 999], "base_estim": [112, 318, 381, 404, 434, 550, 551, 552, 553, 829, 832, 895, 975, 982, 1039, 1041, 1042, 1043, 1044], "predecessor": [112, 447, 453, 454], "mistak": [112, 146, 326, 361, 406, 410, 731, 869, 883, 884, 886, 887, 888, 889, 982, 987], "incorrect": [112, 169, 268, 328, 361, 379, 406, 604, 605, 629, 630, 730, 1028, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "consecut": [112, 201, 404, 410, 414, 440, 444, 446, 447, 449, 453, 456, 459, 534, 535, 536, 543, 599, 642, 663, 664, 665, 673, 674, 675, 793, 794, 800, 833, 834, 835, 836, 837, 855, 856, 975, 996, 1021, 1036], "weak_learn": 112, "max_leaf_nod": [112, 118, 127, 200, 319, 359, 413, 554, 555, 556, 557, 558, 559, 561, 562, 563, 906, 907, 908, 909, 1031, 1037, 1039], "adaboost_clf": 112, "misclassification_error": 112, "dummyclassifi": [112, 264, 549, 986, 1029, 1031, 1032, 1033, 1035, 1036, 1037, 1038], "preval": [112, 316, 393, 697, 709, 986], "dummi": [112, 113, 200, 218, 236, 264, 368, 381, 384, 401, 871, 880, 996, 1002, 1023, 1029, 1031, 1032, 1033, 1035], "dummy_clf": [112, 548], "weak_learners_misclassification_error": 112, "dummy_classifiers_misclassification_error": 112, "475": 112, "692": 112, "surpass": [112, 341, 855, 856], "staged_predict": [112, 126, 413, 550, 551, 556, 557, 558, 559, 1028, 1040], "conclud": [112, 170, 180, 218, 261, 352, 361, 394, 858], "boosting_error": 112, "missclassif": 112, "jitter": [112, 647, 651, 1039], "stagewis": 112, "estimator_errors_": [112, 550, 551], "estimator_weights_": [112, 550, 551], "weak_learners_info": 112, "layout": [112, 306, 391, 898, 899, 900, 903, 919, 1001, 1031, 1033, 1045], "get_figur": 112, "reweight": [112, 351, 393, 408, 413, 587, 588, 645, 666, 677], "formul": [112, 152, 161, 204, 270, 379, 408, 411, 414, 416, 419, 472, 546, 547, 554, 561, 647, 648, 651, 652, 653, 655, 656, 662, 667, 759, 765, 794, 900, 903, 906, 908, 982, 986, 987, 996, 1008, 1023], "mathemat": [112, 170, 188, 217, 264, 371, 376, 379, 393, 395, 408, 411, 412, 416, 546, 547, 554, 561, 632, 643, 653, 788, 789, 794, 856, 900, 903, 906, 908, 982, 986, 996, 998, 1008, 1010, 1019, 1023, 1042], "th": [112, 239, 319, 359, 392, 406, 410, 413, 421, 438, 442, 448, 450, 456, 460, 469, 554, 555, 556, 557, 558, 559, 561, 562, 563, 590, 591, 629, 645, 646, 666, 668, 677, 693, 715, 776, 816, 879, 923, 976, 982, 986, 990, 993, 1000, 1001, 1043], "boil": [112, 382, 408], "forc": [112, 152, 185, 204, 284, 310, 350, 373, 377, 383, 401, 410, 413, 447, 454, 493, 603, 606, 643, 644, 649, 650, 654, 657, 658, 659, 660, 669, 670, 671, 678, 681, 684, 750, 774, 777, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 900, 901, 902, 903, 904, 916, 918, 919, 996, 1023, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1044], "007": [112, 136, 149, 246, 269, 284, 351], "plot_adaboost_multiclass": [112, 136], "1d": [113, 115, 167, 171, 201, 233, 285, 298, 344, 357, 379, 386, 388, 392, 393, 407, 412, 461, 464, 614, 630, 650, 654, 657, 660, 681, 700, 709, 710, 716, 725, 726, 730, 734, 738, 779, 780, 783, 792, 840, 841, 842, 843, 844, 846, 848, 849, 850, 863, 914, 918, 919, 949, 973, 987, 1012, 1019, 1028, 1033, 1034, 1035, 1037, 1041, 1042], "299": [113, 677], "drucker": [113, 413, 551], "1997": [113, 374, 411, 413, 532, 551, 687, 691, 982, 983, 986], "decisiontreeregressor": [113, 115, 240, 307, 316, 322, 357, 358, 384, 551, 553, 555, 556, 557, 559, 561, 562, 629, 630, 906, 909, 911, 930, 976, 1002, 1029, 1030, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "adaboostregressor": [113, 397, 413, 550, 559, 1030, 1031, 1034, 1037, 1038, 1041, 1043, 1044], "regr_1": [113, 357, 358], "regr_2": [113, 357, 358], "y_1": [113, 357, 358, 409, 986, 990, 1000], "y_2": [113, 357, 358, 990], "431": [113, 136, 156, 162, 376], "plot_adaboost_regress": [113, 136], "stump": [114, 413, 556, 1039], "puriti": [114, 910, 912], "circleci": [114, 156, 158, 160, 161, 192, 209, 247, 303, 342, 356, 379], "plot_adaboost_twoclass": [114, 136], "bdt": 114, "plot_color": [114, 356], "br": 114, "plot_step": [114, 121, 356], "class_nam": [114, 255, 879, 910, 911, 912, 1002, 1044], "xx0": [114, 628], "xx1": [114, 628], "twoclass_output": 114, "plot_rang": 114, "613": [114, 136], "irreduc": [115, 986], "dark": [115, 170, 337, 374, 1045], "light": [115, 374], "beam": [115, 1028], "pointwis": [115, 159, 417, 441], "offset": [115, 176, 391, 408, 411, 466, 505, 506, 560, 629, 630, 638, 639, 641, 642, 674, 724, 771, 773, 844, 902, 986, 1000, 1019, 1036], "bootstrap": [115, 116, 124, 164, 264, 273, 318, 410, 413, 551, 552, 553, 554, 555, 560, 561, 562, 924, 957, 982, 1028, 1029, 1031, 1033, 1036, 1038, 1041], "stem": [115, 172, 199, 252, 410, 414, 978, 988], "tibshirani": [115, 116, 127, 149, 188, 260, 376, 410, 413, 517, 556, 557, 625, 653, 718, 719, 720, 828, 845, 906, 907, 976, 980, 982, 987, 993, 1002], "friedman": [115, 116, 127, 260, 408, 410, 413, 475, 513, 514, 515, 517, 555, 556, 557, 562, 590, 591, 828, 906, 907, 909, 980, 982, 987, 993, 1002], "springer": [115, 116, 127, 260, 404, 406, 410, 411, 413, 517, 532, 556, 557, 687, 691, 693, 702, 717, 722, 736, 737, 752, 793, 906, 907, 983, 986, 987, 993, 1002], "0255": 115, "0003": 115, "0152": 115, "0098": 115, "0196": 115, "0004": [115, 311], "0092": 115, "baggingregressor": [115, 397, 413, 552, 909, 976, 1031, 1034, 1036, 1039, 1043, 1044], "n_repeat": [115, 119, 126, 148, 170, 172, 173, 261, 279, 316, 410, 512, 631, 810, 811, 994], "knn": [115, 133, 140, 164, 287, 292, 293, 296, 311, 318, 327, 350, 413, 599, 847, 893, 894, 989, 999, 1019, 1034], "y_predict": [115, 381, 1028], "y_error": [115, 206], "y_nois": 115, "y_bia": 115, "y_var": 115, "085": [115, 136], "plot_bias_vari": [115, 136], "z_i": [116, 990], "y_i": [116, 319, 345, 404, 413, 977, 978, 982, 986, 990, 1000, 1001, 1002], "whilst": [116, 223], "practition": [116, 204], "suitabl": [116, 125, 184, 186, 204, 301, 352, 373, 374, 385, 388, 406, 411, 414, 449, 459, 465, 484, 502, 505, 624, 632, 833, 834, 837, 872, 873, 896, 951, 980, 982, 985, 996, 998, 1000, 1006, 1009, 1021, 1042, 1043], "ed": [116, 127, 406, 413, 517, 556, 557, 998, 1028, 1035], "p592": 116, "593": [116, 149], "kian": [116, 1033, 1043, 1044], "ho": [116, 413, 552, 553, 986, 1033, 1036, 1037, 1042], "hui": [116, 188, 535, 537, 544, 653, 982], "ordereddict": 116, "warm_start": [116, 156, 193, 319, 381, 385, 393, 413, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 607, 643, 645, 646, 649, 655, 657, 659, 663, 664, 665, 666, 673, 674, 675, 677, 793, 794, 847, 855, 856, 992, 1008, 1023, 1028, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1042, 1044], "disabl": [116, 313, 350, 377, 379, 397, 414, 446, 457, 465, 534, 535, 536, 543, 556, 557, 558, 559, 857, 896, 918, 919, 996, 1034, 1037, 1041, 1043], "trajectori": 116, "ensemble_clf": 116, "oob_scor": [116, 413, 552, 553, 554, 555, 561, 562, 1033, 1035], "log2": [116, 210, 241, 554, 555, 556, 557, 561, 562, 906, 907, 908, 909, 987], "error_r": 116, "min_estim": 116, "max_estim": 116, "oob_error": 116, "oob_score_": [116, 552, 553, 554, 555, 556, 557, 561, 562, 1030, 1044], "clf_err": 116, "573": [116, 136, 352, 414], "plot_ensemble_oob": [116, 136], "betatim": [117, 131, 1043], "leak": [117, 266, 350, 361, 407, 410, 858, 883, 884, 886, 887, 888, 889, 996, 1028, 1035, 1038, 1044, 1045], "80_000": 117, "x_full_train": 117, "y_full_train": 117, "x_train_ensembl": 117, "x_train_linear": 117, "y_train_ensembl": 117, "y_train_linear": 117, "gradientboostingclassifi": [117, 123, 124, 127, 308, 361, 391, 550, 558, 629, 630, 987, 993, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "random_forest": 117, "gradient_boost": [117, 1030, 1031, 1037], "histgradientboostingclassifi": [117, 118, 316, 317, 318, 319, 321, 366, 556, 561, 629, 630, 976, 1006, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "randomtreesembed": [117, 130, 222, 413, 908, 1029, 1036, 1037, 1041, 1042, 1043], "random_tree_embed": 117, "rt_model": 117, "randomtreesembeddingrandomtreesembed": 117, "rf_appli": 117, "rf_leaves_yield": 117, "kw_arg": [117, 862, 996, 1034], "rf_model": 117, "0x7fa02a7341f0": 117, "functiontransformerfunctiontransform": 117, "gbdt_appli": 117, "gbdt_leaves_yield": 117, "gbdt_model": 117, "0x7fa0296310d0": 117, "roccurvedisplai": [117, 239, 242, 258, 270, 271, 316, 386, 784, 785, 992, 1025, 1038, 1044, 1045], "rt": 117, "rf": [117, 118, 131, 134, 135, 172, 316, 361, 413, 564, 566, 567], "gbdt": [117, 171, 316, 317, 322, 384, 413], "model_displai": 117, "536": [117, 136, 157, 284, 352], "plot_feature_transform": [117, 136], "hgbt": [118, 413], "fetch_california_h": [118, 164, 165, 306, 318, 374, 392, 407, 1037, 1039], "20640": [118, 165, 374, 487], "n_core": 118, "only_physical_cor": 118, "unnecessari": [118, 246, 384, 440, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 702, 989, 996, 1007, 1010, 1031, 1033, 1038, 1039, 1041, 1044], "min_samples_leaf": [118, 124, 125, 172, 316, 319, 355, 413, 554, 555, 556, 557, 558, 559, 561, 562, 563, 906, 907, 908, 909, 1002, 1034], "early_stop": [118, 171, 208, 300, 319, 350, 393, 413, 558, 559, 663, 664, 665, 673, 674, 675, 855, 856, 1000, 1036, 1039, 1042, 1043], "return_train_scor": [118, 265, 312, 410, 795, 798, 799, 809, 821, 1034, 1035, 1037], "wast": [118, 385, 410, 411, 975], "plotli": [118, 262, 379, 396, 399], "cursor": [118, 262], "px": [118, 262], "make_subplot": 118, "shared_yax": 118, "subplot_titl": 118, "model_nam": [118, 239, 282], "colors_list": 118, "param_nam": [118, 262, 276, 322, 345, 397, 817, 825, 981, 1021], "param_": 118, "scatter_fig": 118, "mean_fit_tim": [118, 286, 795, 809], "error_x": [118, 262], "std_fit_tim": [118, 286, 795, 809], "error_i": [118, 262], "hover_data": [118, 262], "line_fig": 118, "scatter_trac": 118, "line_trac": 118, "add_trac": 118, "mean_score_tim": [118, 259, 262, 795, 809], "std_score_tim": [118, 262, 795, 809], "update_layout": [118, 262], "xaxis2": 118, "traceord": 118, "borderwidth": 118, "plateau": [118, 148, 259, 263], "earlier": [118, 171, 204, 373, 379, 409, 829, 832, 996, 1004, 1026, 1029, 1041, 1043], "never": [118, 237, 361, 379, 388, 391, 400, 406, 407, 409, 410, 447, 454, 520, 543, 552, 553, 554, 561, 858, 859, 978, 996, 1038, 1041], "hgbdt": 118, "domin": [118, 165, 173, 200, 205, 239, 270, 311, 374, 385, 404, 878, 988, 996, 1002, 1044], "ever": [118, 131, 388, 413, 1010], "disput": 118, "alwai": [118, 122, 125, 179, 200, 218, 226, 233, 264, 267, 271, 313, 334, 341, 345, 351, 361, 365, 366, 373, 377, 379, 380, 381, 385, 392, 393, 396, 404, 406, 407, 410, 413, 414, 415, 416, 429, 440, 446, 461, 462, 464, 466, 479, 480, 481, 485, 493, 505, 506, 541, 546, 548, 549, 551, 553, 555, 556, 557, 558, 559, 561, 562, 565, 567, 578, 585, 586, 588, 591, 608, 624, 625, 627, 629, 630, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 668, 669, 670, 673, 675, 676, 692, 702, 706, 712, 718, 719, 720, 728, 730, 731, 735, 778, 781, 782, 793, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 831, 832, 841, 842, 849, 850, 856, 863, 871, 876, 878, 891, 899, 900, 901, 903, 904, 906, 907, 909, 936, 945, 946, 975, 976, 978, 980, 982, 985, 986, 989, 992, 994, 998, 999, 1001, 1002, 1010, 1012, 1019, 1028, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043], "thumb": [118, 176, 365, 379, 380, 391, 406, 655, 656, 663, 664, 665, 673, 674, 675, 898, 986], "761": [118, 136], "plot_forest_hist_grad_boosting_comparison": [118, 136], "artifici": [119, 122, 129, 149, 165, 204, 221, 235, 303, 350, 374, 375, 376, 384, 403, 405, 406, 410, 411, 532, 693, 828, 855, 856, 979, 983, 985, 987, 993, 998, 1002, 1007, 1010, 1028], "feature_importances_": [119, 120, 126, 149, 172, 173, 393, 413, 415, 550, 551, 554, 555, 556, 557, 561, 562, 563, 590, 591, 594, 906, 907, 908, 909, 1030, 1033, 1037], "estimators_": [119, 121, 237, 316, 393, 550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 826, 827, 828, 829, 830, 831, 832, 1029, 1035, 1042], "forest_import": 119, "mdi": [119, 126, 167, 168, 173, 174, 413, 461, 493, 561, 627, 631, 824, 858, 872, 994], "overcom": [119, 204, 365, 414], "permutation_import": [119, 120, 126, 172, 173, 316, 413, 550, 551, 554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909, 994, 1038, 1040, 1041], "importances_mean": [119, 126, 172, 173, 316, 631, 994], "459": [119, 406, 439], "importances_std": [119, 631, 994], "omit": [119, 169, 170, 330, 384, 419, 472, 531, 663, 665, 673, 802, 804, 826, 827, 830, 833, 834, 835, 836, 837, 855, 984, 991], "plot_forest_import": [119, 136], "hotter": 120, "job": [120, 249, 379, 383, 387, 413, 417, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 465, 469, 528, 532, 533, 534, 536, 539, 540, 542, 543, 545, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 599, 607, 631, 636, 654, 685, 686, 687, 688, 689, 690, 691, 770, 774, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 857, 860, 893, 894, 896, 952, 1010, 1014], "five": [120, 247, 326, 329, 374, 528, 536, 542, 983, 989, 1001, 1010, 1028], "drawback": [120, 217, 978, 981], "img_shap": 120, "imp_reshap": 120, "092": [120, 132, 136, 188, 210, 219, 223, 235, 351], "met": [120, 236, 381, 415, 531, 538, 624, 668, 982, 986, 1036], "106": [120, 136, 149, 243, 376, 874, 980, 1029], "plot_forest_importances_fac": [120, 136], "fourth": [121, 1012], "descend": [121, 624, 1038], "extratreesclassifi": [121, 130, 413, 415, 555, 561, 563, 908, 909, 987, 1031, 1032, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045], "decisiontre": [121, 1033], "consol": [121, 377, 1013], "extratre": [121, 130, 365, 1031], "9266666666666666": 121, "9933333333333333": 121, "9866666666666667": 121, "rdylbu": [121, 356], "plot_step_coars": 121, "plot_idx": 121, "model_titl": 121, "model_detail": 121, "blend": [121, 132, 312, 393, 410, 1006], "estimator_alpha": 121, "coarser": [121, 125], "regularli": [121, 279, 391, 988], "xx_coarser": 121, "yy_coars": 121, "z_points_coars": 121, "cs_point": 121, "868": [121, 125, 136, 145], "plot_forest_iri": [121, 136], "ordinalencod": [122, 132, 171, 172, 200, 239, 312, 321, 373, 393, 413, 578, 834, 866, 871, 879, 976, 988, 996, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045], "equidist": [122, 689], "lowa": 122, "sale": [122, 239, 261, 986, 1010], "42165": 122, "categorical_columns_subset": 122, "bldgtype": 122, "garagefinish": 122, "lotconfig": 122, "masvnrtyp": [122, 132], "housestyl": [122, 132], "fireplacequ": 122, "extercond": 122, "exterqu": [122, 132], "poolqc": 122, "numerical_columns_subset": 122, "3ssnporch": 122, "fireplac": 122, "bsmthalfbath": 122, "halfbath": 122, "garagecar": [122, 132], "totrmsabvgrd": 122, "bsmtfinsf1": [122, 132], "bsmtfinsf2": 122, "grlivarea": 122, "screenporch": 122, "n_categorical_featur": [122, 558, 559, 629, 630], "n_numerical_featur": 122, "1460": [122, 132], "make_column_transform": [122, 132, 170, 231, 317, 407, 461, 463, 1036], "dropper": 122, "hist_drop": 122, "hist_one_hot": 122, "etc": [122, 200, 218, 256, 265, 266, 361, 365, 367, 379, 381, 383, 384, 391, 392, 393, 397, 403, 407, 410, 414, 486, 500, 524, 554, 555, 561, 562, 665, 673, 689, 715, 767, 795, 809, 829, 832, 862, 873, 906, 907, 908, 909, 910, 912, 918, 919, 929, 944, 975, 976, 980, 986, 989, 1006, 1007, 1010, 1028, 1035, 1037, 1038], "ordinal_encod": [122, 239], "use_encoded_valu": [122, 132, 172, 239, 312, 872, 996, 1040], "unknown_valu": [122, 132, 172, 239, 312, 872, 996, 1040, 1042, 1043], "verbose_feature_names_out": [122, 170, 171, 172, 243, 312, 319, 320, 321, 407, 461, 464, 1041], "hist_ordin": 122, "hist_n": 122, "n_cv_fold": [122, 312, 801, 817, 822, 825], "dropped_result": 122, "one_hot_result": 122, "ordinal_result": 122, "native_result": 122, "figure_titl": 122, "plot_info": 122, "test_scor": [122, 124, 126, 208, 260, 263, 279, 312, 345, 355, 392, 410, 801, 817, 821, 822, 825], "y_limit": 122, "mape_cv_mean": 122, "mape_cv_std": 122, "c0": [122, 232, 312], "slowest": [122, 934, 935], "theori": [122, 235, 251, 345, 376, 405, 406, 410, 413, 687, 691, 722, 752, 890, 891, 935, 975, 982, 983, 985, 986, 987, 1001, 1002], "poorer": [122, 361, 411], "slight": [122, 205, 318, 413, 446, 1038], "acf": 122, "bde": 122, "isol": [122, 128, 229, 239, 351, 377, 379, 385, 396, 560, 844, 902, 1037, 1038], "bcde": 122, "histgradientboostingregressor__max_depth": 122, "histgradientboostingregressor__max_it": 122, "altogeth": [122, 385, 1036], "599": [122, 136, 677], "plot_gradient_boosting_categor": [122, 136], "validation_fract": [123, 208, 319, 413, 556, 557, 558, 559, 663, 664, 665, 673, 675, 855, 856, 1000, 1036, 1042], "denot": [123, 388, 393, 396, 404, 406, 410, 413, 585, 586, 588, 795, 801, 809, 817, 871, 872, 971, 975, 978, 982, 984, 986, 987, 996, 999, 1012, 1045], "kept": [123, 251, 284, 345, 373, 383, 400, 416, 493, 532, 535, 537, 538, 543, 544, 594, 607, 608, 616, 617, 641, 692, 793, 794, 919, 996, 1036, 1037], "asid": [123, 208, 400, 556, 557, 558, 559, 663, 664, 665, 673, 675, 855, 856], "n_estimators_": [123, 556, 557], "vighnesh": [123, 1033, 1034, 1036], "birodkar": [123, 1033, 1034, 1036], "vighneshbirodkar": 123, "rvraghav93": [123, 265, 306], "data_list": 123, "make_hastie_10_2": [123, 127, 265, 375, 413, 556, 993], "n_gb": 123, "score_gb": 123, "time_gb": 123, "n_gbe": 123, "gbe": 123, "gb": [123, 135, 413, 550, 630], "bar_width": 123, "bar1": 123, "crimson": 123, "bar2": 123, "coral": 123, "n_est": 123, "max_i": [123, 237, 988], "plot_gradient_boosting_early_stop": [123, 136], "fly": [124, 384, 387, 505, 506, 579, 1028, 1030, 1037], "pessimist": [124, 413], "cumul": [124, 200, 218, 406, 722, 731, 752, 875, 887, 996, 1000, 1035, 1037, 1038], "demand": [124, 414, 795, 809, 819, 820], "6860": 124, "special": [124, 170, 190, 218, 279, 294, 312, 337, 373, 375, 381, 385, 391, 393, 406, 409, 411, 461, 464, 550, 552, 556, 819, 910, 975, 980, 982, 984, 985, 986, 987, 989, 1002, 1035, 1038, 1040, 1042], "expit": [124, 190, 413, 558, 982, 1035], "ridgewai": [124, 413], "gbm": [124, 413, 1031], "x3": [124, 407, 1020], "binomi": [124, 127, 413, 550, 556, 558, 982, 1042], "acc": 124, "heldout_scor": 124, "devianc": [124, 127, 200, 218, 322, 413, 550, 555, 556, 558, 559, 562, 645, 666, 677, 718, 719, 720, 743, 745, 748, 907, 909, 982, 1002, 1029, 1038, 1039, 1041, 1042, 1044], "y_proba": [124, 127, 311, 393, 858], "staged_predict_proba": [124, 127, 550, 556, 558, 1028], "cv_estim": 124, "cv_clf": 124, "val_scor": 124, "cv_score": 124, "cumsum": [124, 200, 218, 1035], "oob_improvement_": [124, 413, 556, 557, 1030], "oob_best_it": 124, "test_best_it": 124, "cv_best_it": 124, "brew": [124, 377, 396], "oob_color": 124, "174": [124, 174, 303, 385, 581], "test_color": 124, "201": [124, 149, 376, 581], "cv_color": 124, "253": [124, 531], "192": [124, 233, 385, 1028], "oob_lin": 124, "test_lin": 124, "cv_line": 124, "dashdot": [124, 152, 155, 239], "xticks_po": 124, "xticks_label": 124, "690": [124, 136, 202, 265, 277], "plot_gradient_boosting_oob": [124, 136], "atleast_2d": [125, 381], "expected_i": 125, "amplitud": [125, 157, 159, 194, 982], "lognorm": [125, 158, 181, 250, 310, 996], "imposs": [125, 352, 1007], "all_model": 125, "min_samples_split": [125, 126, 127, 265, 273, 307, 318, 413, 554, 555, 556, 557, 561, 562, 563, 798, 799, 906, 907, 908, 909, 975, 1002, 1034], "gbr": 125, "gbr_l": 125, "y_med": 125, "unfortun": [125, 169, 170, 218, 387, 391, 413, 505, 506], "sinoisoid": 125, "highlight_min": [125, 189], "pbl": 125, "715413": 125, "750348": 125, "127128": 125, "253445": 125, "379763": 125, "933253": 125, "305438": 125, "622811": 125, "940184": 125, "827917": 125, "909909": 125, "145957": 125, "382005": 125, "667219": 125, "asymmetr": [125, 202, 393, 1033], "nor": [125, 264, 350, 361, 365, 384, 391, 414, 434, 443, 591, 922, 990, 1002, 1039], "917281": 125, "767498": 125, "617715": 125, "692901": 125, "144204": 125, "245961": 125, "347717": 125, "648026": 125, "412021": 125, "607752": 125, "803483": 125, "874771": 125, "354394": 125, "355445": 125, "356497": 125, "852774": 125, "extrem": [125, 200, 202, 238, 239, 306, 313, 328, 351, 379, 382, 406, 411, 554, 555, 561, 562, 563, 629, 630, 676, 720, 748, 908, 909, 910, 912, 986, 988], "coverage_fract": 125, "y_low": 125, "y_high": 125, "hypothesi": [125, 261, 267, 410, 687, 691, 823, 983], "experiment": [125, 164, 165, 200, 272, 273, 318, 319, 368, 379, 381, 382, 389, 391, 393, 397, 410, 493, 546, 624, 693, 798, 799, 956, 975, 976, 982, 985, 986, 1006, 1007, 1015, 1023, 1036, 1037, 1040, 1041, 1042, 1043, 1045], "enable_halving_search_cv": [125, 272, 273, 318, 383, 798, 799, 975], "halvingrandomsearchcv": [125, 273, 318, 397, 576, 798, 975, 1040, 1042, 1043, 1044, 1045], "neg_mean_pinball_loss_05p_scor": 125, "greater_is_bett": [125, 738, 986], "search_05p": 125, "max_resourc": [125, 798, 799, 975], "min_resourc": [125, 798, 799], "neg_mean_pinball_loss_95p_scor": 125, "search_95p": 125, "estimator__alpha": 125, "did": [125, 152, 170, 173, 200, 208, 218, 247, 313, 374, 624, 709, 814, 900, 1020, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043], "untun": 125, "joint": [125, 167, 171, 178, 219, 221, 407, 608, 649, 659, 689, 833, 834, 835, 836, 837, 898, 982, 983, 987, 991, 993, 997, 1028], "9026666666666666": 125, "796": [125, 311, 314], "sadli": 125, "752": [125, 136, 181, 219, 350], "plot_gradient_boosting_quantil": [125, 136], "tackl": [126, 261, 366, 379, 406, 835, 988, 1010, 1015], "katrina": [126, 1039], "ni": [126, 1034, 1039], "nilichen": 126, "reg": [126, 170, 180, 236, 307, 317, 342, 413, 555, 557, 565, 647, 648, 650, 651, 652, 653, 654, 660, 661, 662, 667, 668, 675, 676, 686, 690, 909, 982, 1033], "3025": 126, "3785": 126, "train_score_": [126, 413, 556, 557, 558, 559], "impur": [126, 173, 359, 395, 413, 415, 550, 551, 554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909, 910, 912, 1002, 1023, 1033, 1034, 1035, 1036], "feature_import": 126, "sorted_idx": [126, 316], "po": [126, 224, 414], "vert": [126, 172, 173, 316, 1000], "260": [126, 136, 260, 1041], "plot_gradient_boosting_regress": [126, 136], "consider": [127, 153, 156, 239, 256, 262, 268, 379, 416, 616, 795, 809, 975, 982, 988, 992, 1000, 1010, 1045], "return_invers": [127, 381], "original_param": 127, "test_devi": 127, "439": [127, 136], "plot_gradient_boosting_regular": [127, 136], "anomali": [128, 167, 228, 239, 244, 290, 291, 374, 405, 466, 509, 519, 560, 636, 674, 844, 859, 902, 992, 1006, 1034, 1035], "deform": [128, 251, 347], "notat": [128, 393, 407, 411, 414, 587, 709, 982, 986, 1012, 1037, 1044], "120": [128, 222, 415, 587, 1028], "cluster_1": 128, "cluster_2": 128, "nuniformli": 128, "max_sampl": [128, 164, 413, 552, 553, 554, 555, 560, 561, 562, 631, 1038, 1041, 1044], "isolationforestifittedisolationforest": 128, "ax_": [128, 255, 264, 268, 270, 276, 287, 311, 316, 386, 435, 628, 694, 695, 697, 698, 699, 801, 817], "nof": 128, "407": [128, 136, 148, 149, 150, 376], "plot_isolation_forest": [128, 136], "trend": [129, 157, 171, 232, 301, 1010, 1035], "xgboost": [129, 413, 1006], "partialdependencedisplai": [129, 171, 240, 317, 318, 319, 321, 386, 630, 993, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "f_0": 129, "f_1": [129, 268, 986], "gbdt_no_cst": [129, 317], "histgradientboostingregressorifittedhistgradientboostingregressor": [129, 321], "gbdt_with_monotonic_cst": 129, "monotonic_cst": [129, 317, 319, 413, 554, 555, 558, 559, 561, 562, 906, 907, 908, 909, 1043], "line_kw": [129, 240, 263, 317, 629, 801, 817], "unconstrain": [129, 171, 317, 374, 1000], "axes_": [129, 240, 317, 386, 629], "f_idx": 129, "oscil": [129, 171, 205, 406, 437], "x_df": 129, "gbdt_with_monotonic_cst_df": 129, "559": [129, 136, 613], "plot_monotonic_constraint": [129, 136], "excel": [130, 373, 379, 413, 687, 691, 982, 1010], "bernoullinb": [130, 367, 834, 835, 836, 837, 987, 988, 1029, 1030, 1032, 1035, 1040, 1041, 1043], "truncatedsvd": [130, 222, 351, 411, 531, 532, 536, 537, 538, 689, 857, 860, 1030, 1035, 1039, 1040, 1042], "hasher": [130, 352, 414], "transformed_grid": 130, "y_grid_pr": 130, "plot_random_forest_embed": [130, 136], "multioutput": [131, 270, 282, 368, 381, 393, 397, 429, 462, 479, 480, 481, 548, 551, 553, 554, 555, 557, 559, 561, 562, 565, 567, 608, 629, 630, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 718, 719, 724, 741, 742, 744, 746, 747, 749, 781, 784, 786, 787, 819, 827, 841, 849, 856, 865, 899, 901, 904, 906, 907, 908, 909, 924, 949, 950, 986, 1008, 1023, 1028, 1029, 1030, 1034, 1035, 1041, 1042], "multioutputregressor": [131, 397, 429, 462, 479, 480, 481, 551, 553, 555, 557, 559, 562, 565, 567, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 830, 832, 841, 849, 856, 899, 901, 904, 907, 909, 1034, 1035, 1037, 1039, 1040, 1044], "centr": 131, "regr_multirf": 131, "regr_rf": 131, "y_multirf": 131, "y_rf": 131, "cornflowerblu": [131, 194, 203, 210, 247, 249, 252, 268, 270, 289, 295, 357, 358], "492": [131, 136, 640, 979, 1019], "plot_random_forest_regression_multioutput": [131, 136], "compil": [132, 284, 352, 365, 366, 379, 380, 381, 382, 387, 388, 391, 1006, 1028], "dean": [132, 1036, 1042, 1044], "cock": [132, 1037], "becam": [132, 394, 1036], "kaggl": [132, 392], "residenti": 132, "iowa": [132, 239], "won": [132, 302, 351, 383, 406, 465, 493, 624, 625, 627, 684, 701, 714, 732, 733, 751, 753, 791, 985, 996, 1033, 1034, 1039], "load_ames_h": 132, "yrsold": 132, "heatingqc": 132, "street": [132, 149, 376], "yearremodadd": 132, "heat": [132, 337, 406, 449, 459, 692], "bsmtunfsf": 132, "mssubclass": 132, "condition2": 132, "garagetyp": 132, "overallqu": 132, "totalbsmtsf": 132, "miscfeatur": 132, "mosold": 132, "cat_selector": 132, "num_selector": 132, "besid": [132, 232, 379, 384, 586, 975, 1036], "cat_tree_processor": 132, "encoded_missing_valu": [132, 172, 872, 996, 1042, 1043], "num_tree_processor": 132, "add_ind": [132, 165, 624, 625, 627, 976, 1037, 1040, 1044], "tree_preprocessor": [132, 200], "0x7fa0178febe0": 132, "0x7fa0178fe940": 132, "columntransformerinot": [132, 171], "fittedcolumntransform": [132, 171], "ordinalencoderordinalencod": [132, 171, 172, 312], "cat_linear_processor": 132, "num_linear_processor": 132, "linear_preprocessor": 132, "tediou": 132, "wrote": [132, 374], "lasso_pipelin": 132, "pipelineinot": [132, 231, 241, 262, 312, 317], "fittedpipelin": [132, 231, 241, 262, 312, 317], "lassocvlassocv": 132, "rf_pipelin": 132, "randomforestregressorrandomforestregressor": [132, 135], "gbdt_pipelin": 132, "histgradientboostingregressorhistgradientboostingregressor": [132, 312], "stackingregressor": [132, 316, 393, 397, 413, 564, 1038, 1039, 1040, 1041, 1042], "stacking_regressor": 132, "final_estim": [132, 316, 413, 564, 565], "unknown_v": 132, "stackingregressorinot": 132, "fittedstackingregressor": 132, "ridgecvridgecv": [132, 170], "cross_val_predict": [132, 257, 316, 397, 404, 410, 413, 434, 564, 565, 820, 821, 1032, 1033, 1034, 1035, 1037, 1039, 1041, 1045], "scorer": [132, 218, 265, 381, 393, 397, 410, 413, 415, 558, 559, 591, 599, 631, 656, 670, 672, 708, 728, 729, 738, 795, 798, 799, 801, 809, 817, 820, 821, 822, 825, 944, 975, 982, 986, 994, 1007, 1032, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "line_kwarg": [132, 698], "nevalu": 132, "plot_stack_predictor": [132, 136], "exemplari": [133, 134], "eclf": [133, 134, 413], "axarr": [133, 306], "tt": [133, 256, 462], "623": [133, 136, 835, 988], "plot_voting_decision_region": [133, 136], "class1_1": 134, "class2_1": 134, "lightgreen": [134, 206, 217], "p3": 134, "p4": 134, "nweight": 134, "plot_voting_proba": [134, 136], "votingregressor": [135, 397, 413, 566, 1037, 1038, 1039, 1042], "cohort": 135, "reg1": [135, 413], "reg2": [135, 413], "reg3": [135, 413], "ereg": [135, 413], "votingregressorifittedvotingregressor": 135, "gradientboostingregressorgradientboostingregressor": 135, "linearregressionlinearregress": 135, "xt": [135, 284, 393, 442, 535, 537, 624, 626, 795, 798, 799, 809, 842, 850, 858, 863, 868, 875, 887, 916, 1044], "pred1": 135, "pred2": 135, "pred3": 135, "pred4": 135, "labelbottom": [135, 261], "plot_voting_regressor": [135, 136], "031": [136, 149, 376], "auto_examples_ensembl": 136, "n_fold": [138, 644, 648, 650, 652, 656, 658, 660, 1029, 1030, 1034], "scores_std": [138, 139], "semilogx": [138, 139, 189, 274], "std_error": 138, "transluc": 138, "999999999999999e": 138, "31622776601683794": 138, "answer": [138, 169, 261, 379, 391, 722, 752, 986, 1010], "extern": [138, 152, 367, 368, 372, 376, 379, 381, 384, 391, 393, 403, 406, 414, 415, 416, 590, 607, 608, 714, 733, 791, 982, 985, 986, 989, 1002, 1007, 1013, 1019, 1023, 1036, 1040], "lasso_cv": 138, "k_fold": [138, 1016], "maximis": [138, 247, 292, 980, 989], "5f": [138, 320], "moreov": [138, 158, 308, 320, 361, 383, 406, 410, 416, 891, 956, 986, 1010, 1036, 1042, 1043], "substanti": [138, 286, 290, 291, 307, 379, 844, 992, 1032, 1035], "05968": 138, "54209": 138, "04520": 138, "15521": 138, "07880": 138, "45192": 138, "530": [138, 142], "plot_cv_diabet": [138, 142], "this_scor": [139, 340], "862": [139, 142], "plot_cv_digit": [139, 142], "961111": 140, "933333": [140, 847], "072": [140, 142, 359, 360, 434, 645], "plot_digits_classification_exercis": [140, 142], "200j": 141, "139": [141, 142, 218, 284, 336, 348, 385, 413, 449, 459, 688, 692, 987], "plot_iris_exercis": [141, 142], "auto_examples_exercis": 142, "exercis": [142, 367, 368, 376, 379, 498, 499, 501, 502, 649, 650, 655, 795, 800, 820, 840, 903, 1013, 1031], "elimin": [143, 150, 167, 405, 406, 410, 445, 499, 512, 590, 591, 594, 599, 655, 798, 799, 814, 903, 972, 986, 1008, 1010, 1023, 1028], "x_2": [144, 155, 197, 411, 413, 414, 416, 610, 622, 982, 990, 996], "x_3": [144, 996], "irrelev": [144, 184, 361, 385, 408, 413, 415, 601, 736, 986], "agre": [144, 387, 394, 405, 406, 782, 1012], "percept": [144, 171, 993], "correctli": [144, 148, 200, 218, 236, 268, 270, 275, 294, 313, 327, 337, 379, 388, 411, 413, 423, 434, 466, 490, 546, 547, 548, 550, 552, 554, 556, 558, 561, 564, 566, 607, 655, 663, 665, 671, 672, 673, 700, 790, 792, 826, 827, 828, 829, 833, 834, 835, 836, 837, 840, 845, 848, 855, 878, 893, 894, 898, 900, 901, 902, 903, 904, 906, 908, 936, 983, 986, 989, 990, 996, 1001, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "mutual_info_regress": [144, 320, 415, 589, 592, 593, 596, 597, 606, 1034, 1035, 1040, 1042, 1043, 1044], "f_test": 144, "x_": [144, 153, 252, 261, 316, 381, 406, 409, 411, 624, 632, 760, 893, 894, 982, 988, 993, 1034], "209": [144, 150, 737, 874], "plot_f_test_vs_mi": [144, 150], "examin": [145, 385, 387, 406, 847], "f_classif": [145, 146, 340, 415, 589, 592, 593, 595, 596, 597, 601, 603, 606], "log10": [145, 158, 170, 185, 193, 262, 337], "pvalues_": [145, 589, 592, 593, 595, 596, 597, 1028], "x_indic": 145, "p_": [145, 986, 989, 1002], "svm_weight": 145, "789": [145, 413], "clf_select": 145, "svm_weights_select": 145, "get_support": [145, 149, 318, 578, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 1030], "176": [145, 150, 186, 385, 831, 987, 994], "plot_feature_select": [145, 150], "anova_filt": 146, "anova_svm": 146, "selectkbestselectkbest": [146, 320], "Be": [146, 161, 350, 379, 408, 564, 565, 645, 651, 652, 653, 655, 656, 666, 677, 701, 813, 814, 873, 996, 1025, 1029], "75788833": 146, "27161955": 146, "26113448": 146, "plot_feature_selection_pipelin": [146, 150], "rfe": [147, 148, 397, 415, 591, 594, 599, 1028, 1032, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "n_features_to_select": [147, 149, 318, 415, 590, 599, 1040, 1042], "ranking_": [147, 590, 591], "347": [147, 150], "plot_rfe_digit": [147, 150], "introduct": [148, 218, 259, 368, 379, 410, 411, 414, 587, 784, 785, 833, 837, 982, 984, 986, 988, 1005, 1013, 1019, 1022, 1023], "class_sep": [148, 294, 512], "rfecv": [148, 397, 415, 590, 594, 599, 1032, 1034, 1036, 1038, 1039, 1040, 1041, 1044, 1045], "stratifiedkfold": [148, 248, 256, 267, 271, 328, 410, 434, 564, 565, 591, 599, 656, 670, 795, 796, 798, 799, 800, 801, 803, 805, 809, 813, 815, 817, 818, 819, 820, 821, 822, 823, 825, 879, 1016, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1038, 1041], "min_features_to_select": [148, 591, 1036], "n_features_": [148, 538, 590, 591, 1041, 1043], "n_score": 148, "plot_rfe_with_cross_valid": [148, 150], "selectfrommodel": [149, 393, 397, 590, 599, 600, 1008, 1023, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1045], "sequentialfeatureselector": [149, 397, 415, 590, 594, 600, 1040, 1041, 1042, 1043, 1044], "greedi": [149, 413, 415, 444, 446, 457, 556, 557, 599, 982, 1002], "442": [149, 165, 376, 498, 1019], "descr": [149, 372, 373, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 501, 502, 504, 507, 1018, 1036], "_diabetes_dataset": 149, "mass": [149, 240, 376, 443, 793, 982, 993], "blood": [149, 230, 376, 1019], "pressur": [149, 376, 1019], "six": [149, 201, 222, 310, 376, 1037], "serum": [149, 376], "bmi": [149, 188, 189, 240, 376, 994], "tc": [149, 376, 394], "cholesterol": [149, 376], "ldl": [149, 376], "lipoprotein": [149, 376], "hdl": [149, 376], "s4": [149, 188, 189, 376], "tch": [149, 376], "s5": [149, 188, 189, 376, 994], "ltg": [149, 376, 498], "triglycerid": [149, 376], "s6": [149, 188, 189, 376], "glu": [149, 376], "sugar": [149, 376], "www4": [149, 376], "ncsu": [149, 376], "boo": [149, 376], "bradlei": [149, 376, 982], "efron": [149, 376, 679, 680, 982], "trevor": [149, 188, 321, 376, 625, 653, 718, 719, 720, 976, 982, 998, 1032, 1033, 1036, 1037, 1038, 1040], "iain": [149, 376, 982], "johnston": [149, 376, 982, 1037], "annal": [149, 184, 188, 376, 413, 471, 513, 514, 515, 556, 557, 653, 982], "499": [149, 376, 385], "web": [149, 373, 374, 376, 379, 382, 387, 406, 414, 518, 891, 986, 996, 1024, 1028], "stanford": [149, 376, 646, 679, 680, 833, 836, 837, 891, 984], "leastangle_2002": [149, 376], "pitfal": [149, 167, 168, 172, 174, 318, 368, 392, 393, 395, 410, 462, 464, 493, 650, 669, 670, 698, 749, 810, 821, 824, 859, 871, 878, 982, 1023], "e501": [149, 350], "accept": [149, 152, 236, 258, 316, 337, 350, 352, 361, 365, 366, 373, 379, 381, 388, 391, 392, 393, 394, 397, 400, 402, 406, 414, 434, 438, 441, 442, 445, 458, 461, 464, 505, 506, 552, 553, 558, 559, 566, 567, 578, 579, 590, 591, 594, 625, 632, 636, 640, 676, 723, 738, 774, 793, 794, 798, 799, 840, 841, 848, 849, 858, 862, 916, 918, 919, 922, 982, 984, 986, 989, 994, 996, 1001, 1006, 1007, 1016, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "tic": [149, 171, 239, 272, 988], "sfm": 149, "toc": [149, 239], "sf": [149, 261, 318, 374, 415, 489, 599], "backward": [149, 236, 318, 382, 393, 415, 493, 574, 599, 611, 612, 615, 616, 617, 619, 620, 911, 914, 986, 990, 1007, 1028, 1031, 1036, 1037, 1038, 1040, 1042, 1044], "tic_fwd": 149, "sfs_forward": 149, "toc_fwd": 149, "tic_bwd": 149, "sfs_backward": 149, "toc_bwd": 149, "450": 149, "isn": [149, 316, 350, 352, 361, 366, 379, 387, 512, 558, 559, 591, 790, 798, 799, 871, 989, 1001, 1038], "sound": [149, 361], "finish": [149, 249, 983], "expos": [149, 236, 279, 319, 321, 366, 372, 376, 393, 397, 404, 407, 413, 415, 416, 434, 461, 550, 551, 564, 565, 566, 567, 590, 591, 599, 608, 795, 798, 799, 809, 827, 828, 829, 830, 831, 832, 913, 954, 982, 986, 988, 1016, 1018, 1020, 1025, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "breast": [149, 372, 497, 1023, 1033], "cancer": [149, 372, 497, 590, 591, 845, 1023, 1033], "569": [149, 328, 376, 497, 589, 592, 593, 595], "load_breast_canc": [149, 173, 328, 355, 384, 589, 592, 593, 595, 671, 672, 784, 986, 1033, 1034, 1039], "breast_cancer_data": 149, "_breast_cancer_dataset": 149, "wisconsin": [149, 173, 372, 497, 1023, 1033], "diagnost": [149, 173, 264, 372, 393, 497, 709, 820, 821, 986, 1006, 1007, 1023], "radiu": [149, 276, 291, 337, 376, 406, 439, 447, 685, 760, 777, 838, 839, 840, 841, 842, 846, 848, 849, 850, 852, 989, 1030, 1032, 1042, 1045], "perimet": [149, 376], "textur": [149, 376, 754, 755, 984], "compact": [149, 176, 306, 365, 376, 838, 839, 1002, 1030], "concav": [149, 376], "symmetri": [149, 376, 696, 871, 874, 886, 984], "fractal": [149, 376], "worst": [149, 200, 312, 376, 406, 441, 444, 705, 725, 726, 779, 780, 783, 788, 789, 823, 986, 1010, 1028, 1041], "field": [149, 218, 376, 403, 406, 407, 414, 495, 498, 614, 982, 984, 993, 1001, 1006, 1009, 1021, 1029], "se": [149, 223, 376, 396], "wdbc": [149, 376], "malign": [149, 376, 497], "benign": [149, 376, 497], "981": [149, 376, 986], "43": [149, 159, 197, 233, 261, 284, 376, 384, 795, 809, 879], "188": [149, 157, 237, 244, 257, 277, 376, 385, 581], "143": [149, 232, 244, 376, 468, 469, 998, 1028, 1029], "163": [149, 279, 376, 994], "345": [149, 376], "427": [149, 297, 298, 376, 503, 504, 580, 581], "304": [149, 215, 310, 376], "873": [149, 376], "757": [149, 259, 284, 376], "542": [149, 184, 376], "008": [149, 351, 376, 385], "079": [149, 376], "251": [149, 223, 376], "4254": [149, 376], "071": [149, 213, 219, 376, 434], "027": [149, 152, 231, 244, 351, 376], "058": [149, 259, 376], "252": [149, 223, 376, 531, 874, 886], "291": [149, 374, 376], "156": [149, 170, 376], "664": [149, 376], "055": [149, 376, 986], "208": [149, 284, 376], "357": [149, 351, 376, 497, 899], "creator": [149, 373, 376], "william": [149, 374, 376, 416, 607, 608, 611, 616, 619, 636, 978, 986, 990, 1035, 1036, 1037, 1038, 1043, 1044], "wolberg": [149, 376], "nick": [149, 376, 1028, 1034, 1035, 1036, 1037], "olvi": [149, 376], "mangasarian": [149, 376], "donor": [149, 376], "novemb": [149, 200, 218, 376, 1033, 1034, 1036], "1995": [149, 261, 376, 404, 413, 550, 551, 828, 895, 987], "goo": [149, 376], "gl": [149, 376], "u2uwz2": [149, 376], "needl": [149, 376], "aspir": [149, 376, 379], "fna": [149, 376], "nuclei": [149, 376], "multisurfac": [149, 376], "msm": [149, 376], "bennett": [149, 376, 986], "4th": [149, 160, 376], "midwest": [149, 376], "cognit": [149, 376], "societi": [149, 376, 406, 408, 466, 471, 538, 624, 874, 886, 982, 1000], "101": [149, 186, 279, 376, 844, 1029], "1992": [149, 374, 376, 410, 413, 564, 565, 642, 982], "exhaust": [149, 262, 316, 317, 318, 319, 320, 321, 322, 365, 376, 384, 392, 401, 406, 413, 795, 798, 799, 809, 888, 889, 891, 982, 1021, 1023], "insepar": [149, 376], "uw": [149, 376, 1040], "ftp": [149, 376, 679, 680], "wisc": [149, 376, 893], "prog": [149, 376], "cpo": [149, 376], "nuclear": [149, 376], "tumor": [149, 376], "diagnosi": [149, 264, 376, 845], "spie": [149, 376], "1993": [149, 376, 471, 661, 682, 683, 1002], "symposium": [149, 376, 406, 457], "technologi": [149, 376, 406, 1006, 1010], "1905": [149, 376], "861": [149, 189, 219, 376, 784, 785, 986], "870": [149, 376], "san": [149, 376, 414, 998], "jose": [149, 376, 655, 986, 1036, 1038], "ca": [149, 376, 406, 439, 906, 907, 998, 1002], "prognosi": [149, 376], "570": [149, 376, 1019], "577": [149, 352, 376], "juli": [149, 376, 415, 730, 879, 996, 1031, 1035, 1036, 1037], "august": [149, 376, 406, 508, 531, 1001, 1028, 1030, 1031, 1035, 1042], "diagnos": [149, 264, 376, 387, 395, 407], "letter": [149, 160, 374, 376, 383, 414, 784, 785, 801, 817, 986], "1994": [149, 374, 376, 641], "feature_selector": 149, "ntol": 149, "975": [149, 169, 1001], "998": [149, 208, 219, 990], "plot_select_from_model_diabet": [149, 150], "auto_examples_feature_select": 150, "gpr": [151, 161, 162, 167, 493, 607, 608, 610, 611, 612, 613, 618, 619, 620, 621, 622, 1008, 1023, 1038], "co2": [151, 162, 167, 416, 493, 608, 612, 619, 620, 622, 1035], "mona": [151, 162, 167, 416, 493, 608, 612, 619, 620, 622], "loa": [151, 162, 167, 416, 493, 608, 612, 619, 620, 622], "basic": [151, 162, 165, 167, 198, 313, 342, 365, 367, 368, 379, 381, 383, 391, 393, 406, 410, 411, 413, 608, 619, 894, 906, 907, 908, 909, 975, 976, 989, 1000, 1005, 1006, 1007, 1010, 1019], "introductori": [151, 162, 167, 228, 416, 608, 619, 1010], "xor": [151, 162, 167, 343, 607, 611, 619, 982, 1002, 1035], "posterior": [151, 152, 153, 162, 167, 179, 261, 411, 416, 546, 547, 549, 607, 608, 610, 611, 612, 616, 619, 620, 624, 641, 642, 705, 793, 980, 1006, 1034, 1037], "iso": [151, 162, 167, 223, 607, 610, 611], "trick": [152, 235, 294, 341, 352, 364, 367, 368, 382, 391, 407, 579, 586, 640, 669, 978, 979, 990, 1000, 1001, 1019, 1020, 1023, 1029, 1037], "drastic": [152, 233, 269, 406, 410, 989, 999], "theorem": [152, 345, 405, 988], "reus": [152, 193, 262, 316, 352, 381, 393, 406, 407, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 631, 643, 645, 646, 649, 655, 657, 659, 663, 664, 665, 666, 673, 674, 675, 677, 855, 856, 994, 998, 1010, 1035], "training_sample_indic": 152, "training_data": 152, "training_noisy_target": 152, "newer": [152, 378, 396, 411], "expsinesquar": [152, 157, 161, 416], "emb": [152, 222, 233, 293, 372, 373, 459, 692, 983], "kernel_ridg": [152, 235, 368, 1032], "length_scal": [152, 153, 156, 157, 158, 159, 161, 416, 609, 612, 616, 618, 619, 620, 621], "tell": [152, 170, 171, 236, 261, 337, 342, 366, 374, 406, 414, 560, 576, 975, 980, 993, 1021], "1e0": [152, 235, 252, 269, 975], "kernel__length_scal": 152, "kernel__period": 152, "1e1": [152, 158, 200, 235, 337], "kernel_ridge_tun": 152, "411": [152, 170, 344, 348, 408, 418, 470, 530], "9915849773450223": 152, "7986499491396727": 152, "607275806426107": 152, "predictions_kr": 152, "gaussianprocessregressor": [152, 157, 158, 159, 160, 161, 416, 607, 610, 611, 612, 613, 614, 618, 621, 622, 640, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "whitekernel": [152, 157, 158, 416, 608, 609, 611, 1039], "periodicity_bound": [152, 157, 161, 612], "kernel_": [152, 153, 154, 155, 156, 157, 158, 159, 161, 607, 608], "675": 152, "57": [152, 170, 216, 270, 303, 376, 377, 396, 398, 399, 407, 702, 777, 831, 986, 996, 1028], "noise_level": [152, 157, 158, 609, 622], "182": [152, 303, 385, 413], "mean_predictions_gpr": 152, "std_predictions_gpr": 152, "return_std": [152, 157, 158, 159, 161, 179, 180, 393, 549, 564, 565, 608, 610, 611, 612, 613, 622, 624, 641, 642, 858, 1035, 1036, 1040], "capac": [152, 172], "length_scale_bound": [152, 158, 159, 161, 416, 608, 612, 616, 619, 620], "attenu": 152, "plot_compare_gpr_krr": [152, 162], "arbitrarili": [153, 247, 252, 350, 393, 416, 429, 462, 479, 480, 481, 549, 551, 553, 555, 557, 559, 562, 565, 567, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 666, 667, 669, 670, 675, 676, 677, 718, 719, 720, 742, 781, 785, 831, 832, 841, 849, 856, 879, 899, 901, 904, 907, 909, 986, 989, 996, 1002], "lml": [153, 154, 158, 416], "exhibit": [153, 205, 341, 350, 395, 410, 411, 413, 416, 994], "steep": [153, 171, 270, 271, 406, 410, 416, 447, 453], "laplac": [153, 416, 607, 608, 833, 834, 835, 837, 988], "319": [153, 340, 348, 1021], "gp_fix": 153, "gp_opt": 153, "log_marginal_likelihood": [153, 154, 156, 158, 161, 416, 607, 608, 1038], "theta": [153, 154, 156, 158, 160, 161, 237, 411, 416, 520, 533, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 689, 988, 1002], "landscap": 153, "theta0": 153, "theta1": 153, "pcolor": 153, "xscale": [153, 158, 235, 801], "yscale": [153, 158, 200, 235, 350, 801], "plot_gpc": [153, 162], "gpc_rbf_isotrop": 154, "gpc_rbf_anisotrop": 154, "m_max": 154, "plot_gpc_iri": [154, 162], "0256": 155, "dotproduct": [155, 156, 161, 416, 608, 622], "sigma_0": [155, 156, 161, 416, 611], "constantkernel": [155, 161, 416, 608, 614, 618, 621], "lim": [155, 531], "61611719": 155, "00099547": 155, "10469096": 155, "32782448": 155, "00000000": 155, "50000000": 155, "17289014": 155, "6984743": 155, "3109306": 155, "93271427": 155, "03823144": 155, "10584743": 155, "87600388": 155, "74310541": 155, "21301203": 155, "26386883": 155, "gp": [155, 160, 416, 607, 608, 619, 1034], "cb": [155, 233, 250], "widehat": 155, "mathbf": [155, 341, 411, 982, 986, 990, 991, 1000], "leq": [155, 411, 413, 982, 986, 989, 1000, 1001, 1002], "clim": 155, "666": [155, 329, 840, 976], "clabel": [155, 211], "334": 155, "plot_gpc_isoprob": [155, 162], "stationari": [156, 416, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622], "coincid": [156, 202, 416], "434": [156, 158, 191, 219], "convergencewarn": [156, 158, 160, 161, 208, 215, 247, 301, 302, 308, 388, 393, 793, 794, 1036, 1037, 1040], "k1__constant_valu": 156, "bound": [156, 158, 160, 167, 202, 218, 228, 244, 260, 377, 386, 406, 411, 414, 416, 417, 441, 486, 499, 509, 520, 533, 592, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 629, 632, 634, 647, 651, 655, 674, 702, 731, 793, 794, 838, 839, 875, 887, 890, 891, 892, 900, 901, 902, 905, 922, 954, 982, 985, 986, 989, 998, 1000, 1001, 1003, 1036, 1039, 1040, 1042], "100000": [156, 235, 246, 379, 610, 611, 612, 616, 617, 619, 620, 622, 887, 979, 1019, 1021], "puor_r": [156, 343], "plot_gpc_xor": [156, 162], "rw2006": [157, 416, 607, 608], "ascent": [157, 416], "monthli": [157, 394, 986], "atmospher": 157, "ppm": 157, "mauna": 157, "observatori": 157, "hawaii": 157, "1958": [157, 411, 413, 529], "air": [157, 760], "41187": 157, "flag": [157, 239, 377, 379, 380, 382, 397, 402, 461, 607, 608, 624, 670, 672, 724, 781, 1001, 1034, 1038, 1039, 1041, 1042, 1043, 1044], "station": 157, "mlo": 157, "316": [157, 161, 608, 611, 622, 874], "co2_data": 157, "to_datetim": 157, "timestamp": 157, "march": [157, 722, 752, 986, 1028, 1032, 1036, 1038, 1043], "nfrom": 157, "upcom": [157, 377], "to_numpi": 157, "rise": 157, "irregular": [157, 341, 406, 989], "long_term_trend_kernel": 157, "decai": [157, 541, 855, 856, 935, 986, 1000, 1032], "seasonal_kernel": 157, "ration": [157, 620, 984], "diffus": 157, "accommod": [157, 1036], "rationalquadrat": [157, 161, 416, 613], "irregularities_kernel": 157, "shall": 157, "phenomena": 157, "noise_kernel": 157, "noise_level_bound": [157, 158, 622], "co2_kernel": 157, "subtract": [157, 170, 239, 409, 411, 440, 444, 456, 531, 641, 642, 647, 648, 651, 652, 653, 661, 662, 1035], "normalize_i": [157, 416, 608, 1042], "y_mean": [157, 158, 161, 608, 641, 642], "gaussianprocessregressorifittedgaussianprocessregressor": 157, "todai": [157, 391, 1021], "current_month": 157, "mean_y_pr": 157, "std_y_pr": 157, "968": [157, 169, 259], "0367": 157, "6ppm": 157, "990": [157, 162, 666, 986], "plot_gpr_co2": [157, 162], "target_gener": 158, "add_nois": 158, "minima": [158, 188, 411, 444, 689, 983, 1020, 1036], "y_std": [158, 161, 549, 608, 641, 642, 1041], "k1__k2__length_scal": [158, 416], "noptimum": 158, "nlog": 158, "length_scale_grid": 158, "noise_level_grid": 158, "newshap": 158, "372": [158, 162], "plot_gpr_noisi": [158, 162], "tikhonov": [159, 416, 669], "training_indic": 159, "n_restarts_optim": [159, 416, 607, 608], "std_predict": 159, "whenev": [159, 169, 361, 373, 387, 393, 396, 404, 479, 480, 481, 493, 625, 627, 977, 985, 1007, 1038], "noise_std": 159, "y_train_noisi": 159, "443": [159, 162], "plot_gpr_noisy_target": [159, 162], "gene": [160, 373, 403, 448, 510, 590, 591, 845, 878], "among": [160, 171, 173, 176, 200, 251, 282, 359, 367, 374, 381, 393, 394, 404, 405, 409, 444, 446, 509, 516, 790, 823, 841, 846, 848, 900, 903, 906, 907, 908, 909, 975, 978, 986, 987, 993, 996, 1001, 1028, 1034, 1035, 1038], "brighter": 160, "6th": 160, "haussler": 160, "1999": [160, 374, 404, 406, 408, 411, 413, 434, 447, 454, 466, 471, 531, 538, 552, 553, 556, 557, 719, 892, 900, 901, 903, 904, 992, 998], "646": 160, "technic": [160, 201, 222, 320, 374, 376, 379, 393, 413, 649, 661, 682, 683, 893, 982, 983, 989], "depart": [160, 406], "california": [160, 164, 165, 306, 312, 318, 372, 376, 487, 1023], "santa": [160, 1043], "cruz": 160, "generickernelmixin": [160, 1038], "sequencekernel": 160, "baseline_similar": 160, "baseline_similarity_bound": 160, "hyperparameter_baseline_similar": 160, "_f": [160, 982], "_g": 160, "__call__": [160, 337, 393, 414, 416, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 1035], "eval_gradi": [160, 416, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622], "is_stationari": [160, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622], "clone_with_theta": [160, 416, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622], "agct": 160, "agc": 160, "aact": 160, "taa": 160, "aaa": 160, "gaaca": 160, "training_idx": 160, "cga": 160, "taac": 160, "tcg": 160, "cttt": 160, "tgct": 160, "atag": 160, "ctc": 160, "424": [160, 218], "204": [160, 162, 994, 999], "plot_gpr_on_structured_data": [160, 162], "plot_gpr_sampl": 161, "gpr_model": 161, "y_sampl": [161, 608], "sample_i": [161, 416, 608, 1042], "single_prior": 161, "pm": [161, 171, 271, 413, 986], "dev": [161, 170, 218, 266, 271, 377, 379, 383, 385, 387, 986, 1010, 1024, 1035, 1040, 1043, 1044], "594": [161, 171, 200], "279": [161, 982], "067": 161, "alpha_bound": [161, 620], "1e15": 161, "05e": 161, "799": [161, 351], "791": 161, "sigma_0_bound": [161, 611], "_gpr": 161, "663": [161, 892, 994, 998], "lbfg": [161, 300, 381, 645, 646, 655, 656, 666, 669, 671, 677, 684, 829, 832, 855, 856, 982, 990, 1032, 1033, 1035, 1036, 1041, 1042, 1043, 1045], "abnormal_termination_in_lnsrch": 161, "7337046907": 161, "matern": [161, 416, 1039, 1043], "609": [161, 351, 385], "484": 161, "480": [161, 162, 184], "plot_gpr_prior_posterior": [161, 162], "858": 162, "auto_examples_gaussian_process": 162, "iterativeimput": [163, 165, 166, 167, 397, 487, 562, 577, 625, 626, 627, 636, 642, 669, 820, 841, 859, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045], "robin": [164, 165, 624, 976, 1034, 1037, 1042, 1043], "kneighborsregressor": [164, 238, 296, 320, 413, 567, 840, 846, 848, 849, 989, 1028, 1030, 1032, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "mimic": [164, 200, 350, 813], "missforest": [164, 976], "popular": [164, 225, 374, 377, 384, 387, 391, 393, 405, 412, 413, 414, 416, 449, 459, 976, 978, 982, 984, 991, 1000, 1007, 1016, 1021], "enable_iterative_imput": [164, 165, 383, 624, 976, 1037], "x_full": [164, 165, 306], "y_full": [164, 165, 306], "2k": 164, "br_estim": 164, "score_full_data": 164, "neg_mean_squared_error": [164, 165, 202, 235, 275, 821, 986, 994, 1034], "x_miss": [164, 165], "y_miss": [164, 165], "missing_sampl": [164, 165], "missing_featur": [164, 165], "score_simple_imput": 164, "missing_valu": [164, 165, 241, 393, 624, 625, 626, 627, 765, 976, 1036, 1037], "score_iterative_imput": 164, "stricter": 164, "impute_estim": 164, "__class__": [164, 200, 202, 236, 239, 263, 308, 350, 351, 352, 386], "xerr": [164, 165, 351], "plot_iterative_imputer_variants_comparison": [164, 166], "ness": [165, 218], "auxiliari": [165, 377, 405, 1010, 1043], "district": [165, 374], "neither": [165, 170, 316, 350, 361, 391, 434, 591, 625, 922, 989, 1002], "feel": [165, 306, 378, 379, 387, 406, 443, 1002], "x_diabet": [165, 1016], "y_diabet": [165, 1016], "x_california": 165, "y_california": 165, "add_missing_valu": 165, "missing_r": 165, "n_missing_sampl": 165, "x_miss_california": 165, "y_miss_california": 165, "x_miss_diabet": 165, "y_miss_diabet": 165, "knnimput": [165, 316, 624, 627, 976, 1038, 1039, 1042, 1043, 1044, 1045], "get_scores_for_imput": 165, "impute_scor": 165, "x_label": 165, "mses_california": 165, "stds_california": 165, "mses_diabet": 165, "stds_diabet": 165, "get_full_scor": 165, "full_scor": 165, "get_impute_zero_scor": 165, "fill_valu": [165, 231, 241, 317, 624, 627, 996, 1036, 1044], "zero_impute_scor": 165, "unweight": [165, 213, 460, 644, 650, 675, 704, 710, 725, 726, 734, 779, 780, 783, 784, 833, 834, 835, 836, 837, 976], "get_impute_knn_scor": 165, "knn_impute_scor": 165, "get_impute_mean": 165, "mean_impute_scor": 165, "obvious": [165, 365, 1021], "get_impute_it": 165, "n_nearest_featur": [165, 624], "sample_posterior": [165, 624, 976], "iterative_impute_scor": 165, "n_bar": 165, "xval": 165, "invert_yaxi": [165, 352], "305": [165, 166, 385], "plot_missing_valu": [165, 166], "auto_examples_imput": 166, "prune": [167, 354, 360, 415, 497, 554, 555, 556, 557, 561, 562, 590, 641, 824, 906, 907, 908, 909, 989, 1008, 1023, 1028, 1031, 1038, 1039], "elast": [167, 178, 184, 191, 211, 219, 274, 405, 468, 469, 475, 498, 521, 643, 644, 649, 654, 655, 656, 657, 658, 659, 660, 665, 673, 675, 678, 681, 975, 986, 1000, 1008, 1023, 1028, 1033, 1037, 1038], "gram": [167, 178, 219, 381, 411, 414, 486, 521, 545, 585, 586, 587, 588, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 661, 662, 678, 679, 680, 681, 682, 683, 763, 771, 773, 975, 996, 1001, 1021, 1028, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1041, 1042], "huberregressor": [167, 178, 204, 206, 219, 521, 667, 668, 669, 675, 676, 982, 1034, 1035, 1036, 1037], "aic": [167, 178, 188, 219, 251, 498, 648, 650, 651, 652, 653, 794, 859, 878, 975, 1028, 1035, 1041, 1042], "bic": [167, 178, 188, 219, 415, 498, 648, 650, 651, 652, 653, 794, 859, 878, 975, 985, 1028, 1035, 1041, 1042], "mnist": [167, 178, 208, 219, 284, 299, 304, 493, 568, 655, 824, 855, 878, 921, 982, 990], "20newgroup": [167, 178, 219, 486, 568, 655, 824, 982], "ordinari": [167, 178, 179, 184, 202, 203, 205, 217, 219, 319, 632, 643, 649, 651, 652, 653, 654, 669, 675, 679, 680, 684, 1000, 1008, 1023], "spline": [167, 178, 219, 513, 514, 515, 669, 859, 873, 877, 1006, 1041], "ransac": [167, 178, 206, 217, 219, 521, 646, 654, 668, 675, 676], "convex": [167, 178, 219, 221, 346, 351, 406, 408, 411, 419, 443, 449, 459, 470, 472, 473, 476, 477, 478, 655, 673, 689, 982, 983, 989, 990, 1000, 1041], "theil": [167, 178, 206, 219, 646, 654, 668, 675, 676], "sen": [167, 178, 206, 219, 646, 654, 668, 675, 676], "tweedi": [167, 178, 219, 461, 493, 549, 645, 666, 677, 703, 720, 741, 743, 745, 746, 748, 824, 859, 862, 863, 871, 878, 982, 1038, 1039, 1041], "insur": [167, 178, 200, 219, 461, 493, 549, 645, 666, 677, 703, 741, 746, 748, 824, 859, 862, 863, 871, 878, 982], "claim": [167, 178, 219, 379, 461, 493, 549, 645, 666, 677, 703, 741, 746, 748, 824, 859, 862, 863, 871, 878, 982], "failur": [167, 168, 170, 174, 379, 387, 654, 781, 824, 918, 919, 1009, 1010, 1041, 1042], "infer": [167, 168, 170, 174, 247, 251, 252, 261, 356, 373, 381, 391, 405, 410, 411, 493, 505, 506, 512, 531, 533, 535, 537, 544, 546, 547, 550, 556, 557, 629, 632, 654, 706, 719, 737, 781, 793, 794, 801, 817, 824, 834, 872, 879, 893, 894, 906, 907, 908, 909, 949, 976, 982, 985, 986, 991, 996, 999, 1002, 1006, 1007, 1015, 1029, 1033, 1034, 1039, 1042, 1045], "causal": [167, 168, 174, 654, 781, 824], "multicollinear": [167, 168, 174, 409, 497, 561, 631, 652, 824, 982, 994], "isomap": [167, 220, 223, 227, 316, 320, 413, 499, 541, 546, 563, 686, 687, 688, 689, 847, 859, 868, 891, 989, 1022, 1023, 1036, 1038, 1041, 1042, 1043, 1044, 1045], "hole": [167, 220, 227, 527, 689, 690, 1042], "perplex": [167, 220, 221, 225, 227, 284, 511, 522, 533, 689, 983, 1033, 1035, 1042], "set_output": [167, 171, 228, 244, 311, 312, 382, 430, 439, 440, 442, 444, 446, 461, 465, 479, 480, 481, 482, 493, 501, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 563, 564, 565, 566, 567, 578, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 655, 685, 686, 689, 824, 842, 847, 850, 854, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 896, 1043, 1044, 1045], "metadata": [167, 228, 244, 351, 368, 373, 374, 400, 420, 423, 426, 429, 430, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 485, 486, 493, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 942, 943, 944, 945, 946, 970, 986, 1006, 1007, 1012, 1023, 1044], "rout": [167, 228, 244, 368, 420, 423, 426, 429, 430, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 943, 944, 945, 946, 970, 1023, 1042, 1044], "johnson": [167, 228, 244, 306, 310, 371, 405, 486, 499, 874, 886, 890, 891, 892, 996, 1003, 1023, 1036, 1042, 1044], "lindenstrauss": [167, 228, 244, 371, 405, 486, 499, 890, 891, 892, 1003, 1023], "halv": [167, 254, 277, 401, 512, 561, 576, 795, 798, 799, 903, 1023, 1040], "det": [167, 254, 277, 379, 408, 512, 561, 695, 699, 723, 785, 824, 859, 878, 898, 933, 1040], "tsne": [167, 221, 222, 223, 225, 226, 285, 298, 320, 393, 420, 430, 493, 685, 686, 687, 842, 846, 859, 960, 983, 989, 1031, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "novelti": [167, 229, 285, 291, 298, 336, 844, 1008, 1022, 1023, 1028, 1036], "lof": [167, 229, 239, 285, 298, 560, 844, 902, 992], "boltzmann": [167, 299, 304, 499, 655, 710, 824, 854, 855, 856, 858, 884, 1022, 1023, 1030], "mlp": [167, 171, 240, 299, 301, 304, 493, 568, 824, 855, 856, 990], "semi_supervis": [167, 318, 320, 324, 325, 326, 327, 328, 329, 330, 368, 397, 987, 999, 1029, 1034, 1035, 1042, 1043], "tie": [167, 332, 348, 391, 413, 509, 826, 903, 987, 1001, 1002, 1029, 1044], "unbalanc": [167, 264, 332, 348, 410, 509, 628, 903, 923, 924, 975, 1000], "featurehash": [167, 349, 351, 353, 367, 374, 414, 461, 485, 578, 585, 586, 587, 588, 871, 1029, 1034, 1035, 1036, 1042, 1043], "auto_examples_python": 167, "auto_examples_jupyt": 167, "unless": [169, 236, 247, 252, 379, 381, 382, 391, 393, 404, 406, 409, 417, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 486, 493, 505, 506, 528, 532, 533, 534, 536, 539, 540, 542, 543, 544, 545, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 591, 599, 607, 608, 629, 631, 636, 643, 644, 648, 649, 650, 652, 654, 655, 656, 658, 660, 662, 663, 665, 673, 676, 685, 686, 687, 688, 689, 690, 691, 706, 711, 770, 774, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 840, 841, 844, 846, 848, 849, 851, 852, 855, 856, 857, 860, 879, 883, 884, 886, 887, 888, 889, 893, 894, 906, 907, 908, 909, 914, 918, 919, 935, 954, 982, 985, 987, 1028, 1030, 1034, 1036, 1039, 1040], "willing": [169, 258], "econom": [169, 170, 261], "educ": [169, 170, 379, 713, 987], "earn": [169, 170, 394], "polici": [169, 170, 200, 218, 393, 532, 538, 982, 1043, 1045], "maker": [169, 170], "ovb": [169, 170], "parent_hourly_wag": 169, "college_degre": 169, "true_coef": [169, 184, 195], "hourly_wag": 169, "stori": [169, 261, 279, 374, 985], "pairplot": [169, 170], "diag_kind": [169, 170], "kde": [169, 170, 279, 288, 289, 297, 412, 843], "features_nam": [169, 1035], "regressor_with_": 169, "y_pred_with_": 169, "r2_with_abl": 169, "model_coef": 169, "intellectu": 169, "proxi": [169, 170, 411, 854, 1016, 1033], "inadvert": [169, 393], "iq": 169, "regressor_without_": 169, "y_pred_without_": 169, "r2_without_": 169, "brought": [169, 550, 551, 554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909], "unobserv": [169, 170, 411], "confound": [169, 170], "conduct": [169, 261, 416, 1042], "prohibit": [169, 410, 413, 624, 991, 999, 1035], "uneth": 169, "iv": [169, 986], "plot_causal_interpret": [169, 174], "hint": [170, 365, 380, 384, 400, 445, 986, 1019], "aris": [170, 264, 345, 366, 384, 406, 712, 982, 983, 1040], "survei": [170, 409], "1985": [170, 406, 702, 712, 782], "534": [170, 287, 298], "race": [170, 374, 1031], "occup": [170, 306], "sector": 170, "marr": 170, "not_memb": 170, "marri": 170, "freq": [170, 184, 352], "289": 170, "438": [170, 994], "440": 170, "018727": 170, "822097": 170, "833333": 170, "615373": 170, "379710": 170, "726573": 170, "thereaft": [170, 179], "hispan": 170, "manufactur": 170, "unmarri": 170, "dollar": [170, 374], "exploratori": [170, 1010], "emul": [170, 387], "train_dataset": [170, 373], "rangeindex": 170, "533": [170, 326, 331], "normalis": [170, 608, 1021], "numerical_column": [170, 172, 464], "if_binari": [170, 243, 871, 996, 1039], "prepend": [170, 1028], "exp10": 170, "ufunc": 170, "transformedtargetregressortransformedtargetregressor": 170, "ridgeridg": 170, "mae_train": 170, "mae_test": 170, "learnt": [170, 313, 361, 393, 410, 879, 975, 996], "obviou": [170, 341, 361, 365, 403, 411], "regressor_": [170, 462, 590, 591, 594], "race_hispan": 170, "013519": 170, "race_oth": 170, "009075": 170, "race_whit": 170, "022594": 170, "occupation_cler": 170, "000045": 170, "occupation_manag": 170, "090528": 170, "occupation_oth": 170, "025102": 170, "occupation_profession": 170, "071964": 170, "occupation_sal": 170, "046636": 170, "occupation_servic": 170, "091053": 170, "sector_construct": 170, "000198": 170, "sector_manufactur": 170, "031255": 170, "sector_oth": 170, "031025": 170, "marr_unmarri": 170, "032405": 170, "union_not_memb": 170, "117154": 170, "sex_mal": 170, "090808": 170, "south_y": 170, "033823": 170, "054699": 170, "035005": 170, "030867": 170, "adimension": 170, "Their": [170, 374, 376, 394, 406, 641, 1028], "gaug": 170, "decad": [170, 1007], "x_train_preprocess": 170, "multipli": [170, 204, 218, 261, 365, 388, 393, 411, 413, 414, 419, 461, 472, 512, 535, 537, 538, 544, 554, 558, 561, 643, 645, 649, 651, 655, 656, 657, 659, 665, 666, 667, 669, 673, 674, 675, 677, 683, 684, 686, 690, 760, 900, 901, 902, 903, 904, 906, 908, 924, 962, 963, 964, 975, 978, 982, 986, 1000, 1039], "coef_i": 170, "std_i": 170, "emphas": [170, 347, 385, 411, 986], "perturb": [170, 217, 303, 411, 413, 985], "caution": [170, 383, 437, 451, 1036], "repeatedkfold": [170, 410, 800, 811, 1035], "cv_model": 170, "stripplot": 170, "whi": [170, 172], "collinear": [170, 173, 205, 218, 413, 564, 645, 666, 677, 871, 982, 1028], "teas": 170, "apart": [170, 319, 337, 391, 393, 407, 409, 415, 721, 1001, 1010, 1036], "vice": [170, 258, 350, 406, 416, 439, 604, 605, 827, 1032], "versa": [170, 258, 350, 406, 416, 439, 604, 605, 827, 1032], "column_to_drop": 170, "said": [170, 229, 262, 374, 379, 788, 984, 992, 1012, 1019], "unchang": [170, 218, 268, 413, 430, 434, 439, 440, 441, 442, 443, 444, 446, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 689, 759, 796, 797, 802, 804, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 845, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 887, 890, 891, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 989, 1012, 1036, 1042, 1044], "neglig": [170, 989, 1031, 1045], "littl": [170, 171, 172, 173, 229, 374, 414, 459, 641, 795, 809, 935, 976, 983, 985, 1001, 1002, 1019, 1029, 1040, 1045], "alon": [170, 204, 267, 337, 393, 400, 404, 645, 666, 677, 738, 1035, 1037], "suppress": [170, 365, 387, 689, 989, 1035], "themselv": [170, 306, 375, 381, 387, 393, 397, 403, 406, 413, 414, 416, 443, 612, 788, 1002, 1021, 1038], "bring": [170, 306, 411, 673, 675, 983, 1006, 1010], "entic": 170, "pursu": 170, "tempt": 170, "deflat": [170, 409, 418, 530], "presum": [170, 282, 406, 414, 833], "respond": [170, 379, 406], "991": [170, 174, 269, 986], "plot_linear_model_coefficient_interpret": [170, 174], "complement": [171, 271, 350, 629, 630, 797, 812, 815, 824, 833, 834, 835, 836, 837, 993, 1008, 1023, 1036], "molnar": [171, 993], "christoph": [171, 411, 416, 529, 607, 608, 611, 616, 619, 793, 982, 987, 1029, 1033, 1036, 1039, 1040, 1041, 1042, 1043], "goldstein": [171, 993], "kapeln": [171, 993], "bleich": [171, 993], "pitkin": [171, 993], "peek": [171, 379, 993], "settingwithcopywarn": 171, "904": [171, 259, 329, 337, 348, 407], "287": [171, 998], "1747": 171, "1729": 171, "mask_train": [171, 218], "accordingli": [171, 239, 341, 379, 383, 384, 1035, 1036, 1043], "8640": 171, "115": [171, 994], "nomin": [171, 373, 393, 394, 413, 414, 578, 579, 713, 996, 1007], "numerical_featur": [171, 312], "xtick_start": 171, "xtick_period": 171, "average_bike_rent": 171, "numeric_onli": 171, "decor": [171, 316, 379, 380, 381, 388, 801, 817, 925, 929, 930, 947, 953, 1038, 1041, 1044], "strike": [171, 204], "mlp_preprocessor": 171, "quantiletransformerquantiletransform": 171, "catindex": 171, "hgbdt_preprocessor": 171, "sparse_threshold": [171, 461, 464, 1036], "mlp_model": 171, "hidden_layer_s": [171, 240, 300, 302, 855, 856, 990], "learning_rate_init": [171, 301, 302, 855, 856], "forget": [171, 361, 366, 373, 383, 391, 411, 983, 1009], "poor": [171, 176, 267, 276, 328, 404, 410, 411, 687, 691, 734, 835, 838, 839, 980, 981, 983, 988, 1007, 1012, 1035, 1036, 1037, 1039, 1041], "grid_resolut": [171, 318, 335, 628, 629, 630], "features_info": 171, "776": 171, "hgbdt_model": 171, "cheaper": [171, 406, 416, 670, 978, 982], "temperatur": [171, 414, 993], "wind": [171, 987], "meaningless": [171, 414, 900, 903, 1031], "celsiu": [171, 993], "interaction_cst": [171, 321, 413, 558, 559, 1043], "hgbdt_model_without_interact": 171, "histgradientboostingregressor__interaction_cst": 171, "heatmap": [171, 173, 179, 184, 272, 321, 337, 629, 993], "553": 171, "slope": [171, 198, 202, 217, 406, 719, 744, 984, 986], "dry": 171, "wetter": 171, "896": [171, 645], "spike": 171, "degrad": [171, 229, 306, 345, 351, 412], "somehow": 171, "forbidden": [171, 413], "noisili": 171, "547": 171, "partial_depend": [171, 629, 993, 1029, 1037, 1038, 1039, 1040, 1043, 1044], "grid_valu": [171, 630, 1044], "add_ax": [171, 225, 272], "surf": 171, "rstride": 171, "cstride": 171, "bupu": 171, "nthe": [171, 259, 359], "pretti": [171, 225, 259, 350, 365, 379, 391, 855, 856, 990, 1037], "view_init": [171, 221, 223, 225], "clb": 171, "ndepend": 171, "265": [171, 174, 180, 219, 731, 833, 837, 988], "plot_partial_depend": [171, 174, 316, 317, 318, 1033, 1037, 1038, 1039, 1040, 1041, 1042], "breiman": [172, 410, 413, 513, 514, 515, 552, 553, 561, 562, 631, 906, 907, 994, 1002], "random_num": 172, "random_cat": 172, "sibsp": [172, 321], "parch": [172, 321], "categorical_encod": 172, "numerical_pip": 172, "memor": 172, "814": [172, 1019], "mdi_import": [172, 173], "sorted_importances_idx": 172, "retri": [172, 493, 1036, 1042], "classifier__min_samples_leaf": 172, "anymor": [172, 200, 263, 316, 317, 337, 361, 383, 407, 667, 1034, 1037, 1040, 1041, 1042, 1044], "810": 172, "832": [172, 413, 552, 553], "train_result": 172, "test_result": 172, "train_import": 172, "test_import": 172, "680": [172, 174], "plot_permutation_import": [172, 173, 174], "contradict": [173, 1007], "spearman": [173, 632, 633, 977], "perm_sorted_idx": 173, "tree_importance_sorted_idx": 173, "tree_indic": 173, "gini": [173, 200, 218, 241, 273, 318, 550, 551, 554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909, 975, 994, 1002, 1036, 1037, 1044, 1045], "dilut": [173, 376], "squareform": 173, "spearmanr": 173, "fill_diagon": [173, 224], "distance_matrix": 173, "dist_linkag": 173, "dendro": 173, "to_list": 173, "leaf_rot": 173, "dendro_idx": 173, "ivl": 173, "cluster_id": [173, 351], "fcluster": 173, "cluster_id_to_feature_id": 173, "selected_featur": 173, "selected_features_nam": 173, "x_train_sel": 173, "x_test_sel": 173, "clf_sel": 173, "845": [173, 174], "plot_permutation_importance_multicollinear": [173, 174], "auto_examples_inspect": 174, "polynomialcountsketch": [176, 636, 638, 978, 1040, 1042, 1045], "covtyp": 176, "tensor": [176, 371, 402, 411, 535, 537, 544, 636, 637, 638, 1023, 1040], "sketch": [176, 367, 371, 388, 405, 636, 637, 638, 951, 1023, 1040], "daniel": [176, 321, 365, 879, 996, 1010, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1038, 1040, 1042], "lopez": 176, "sanchez": [176, 1036, 1037], "lope": 176, "usal": 176, "581": 176, "cartograph": 176, "remot": [176, 326, 379, 382], "fetch_covtyp": [176, 239, 318, 374, 1037, 1040, 1042], "5_000": 176, "mm": 176, "lsvm": 176, "lsvm_time": 176, "lsvm_score": 176, "condens": [176, 443], "ps_lsvm_time": 176, "ps_lsvm_score": 176, "ksvm": 176, "ksvm_time": 176, "ksvm_score": 176, "pham": [176, 978, 1035], "ninh": 176, "rasmu": [176, 1035], "pagh": [176, 978], "kdd": [176, 374, 404, 434, 998], "doi": [176, 200, 218, 379, 406, 673], "1145": [176, 406, 673], "2487575": 176, "2487591": 176, "csie": [176, 373, 484, 505, 506, 655], "ntu": [176, 373, 484, 505, 506, 655], "tw": [176, 373, 484, 505, 506, 655, 1001], "cjlin": [176, 373, 484, 505, 506, 655, 1031], "libsvmtool": [176, 373, 484, 505, 506], "238": [176, 177], "plot_scalable_poly_kernel": [176, 177], "auto_examples_kernel_approxim": 177, "ard": [179, 641, 642], "ol": [179, 190, 195, 197, 198, 206, 217, 319, 653, 982], "true_weight": 179, "ardregress": [179, 184, 642, 982, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044], "olr": 179, "brr": 179, "symlognorm": [179, 184], "linthresh": [179, 184], "10e": [179, 184], "cbar_kw": [179, 184], "seismic_r": [179, 184], "stabilis": 179, "retain": [179, 393, 406, 409, 410, 414, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 491, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 692, 693, 796, 797, 802, 804, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 871, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 999, 1028], "ard_scor": 179, "scores_": [179, 180, 589, 592, 593, 595, 596, 597, 641, 642, 656, 1028, 1038], "brr_score": 179, "cutoff": [179, 940, 996, 1037], "full_data": 179, "input_featur": [179, 381, 393, 422, 427, 439, 440, 442, 444, 446, 461, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 563, 564, 565, 566, 567, 578, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 685, 686, 689, 842, 847, 850, 854, 857, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 1044], "x_plot": [179, 201, 206, 235, 264, 289, 311], "y_plot": [179, 201, 206, 264], "ard_poli": 179, "brr_poli": 179, "y_ard": 179, "y_ard_std": 179, "y_brr": 179, "y_brr_std": 179, "queri": [179, 287, 297, 365, 383, 412, 417, 441, 443, 447, 454, 549, 607, 608, 625, 641, 642, 722, 752, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 986, 989, 1002, 1006, 1030, 1032, 1033, 1036], "lambda_init": [179, 180, 642, 982, 1038], "intrins": [179, 393, 411, 413, 989, 994, 1000, 1040], "589": [179, 219], "plot_ard": [179, 219, 641], "alpha_init": [180, 642, 982, 1038], "yoshihiro": [180, 1038], "uchida": [180, 1038], "nimbus1after2a1sun7show": 180, "1234": [180, 249, 264, 379], "n_order": 180, "vander": 180, "ymean": 180, "ystd": 180, "pink": 180, "_init": 180, "lambda_": [180, 641, 642, 874, 982, 1035], "plot_bayesian_ridge_curvefit": [180, 219], "normalized_weight": 181, "x_offset": 181, "x_center": 181, "x_scale": [181, 868, 884, 996], "uncent": 181, "incorrectli": [181, 413, 414, 550, 556, 558, 730, 736, 986, 1029, 1034, 1036, 1037, 1039, 1044], "lm": 181, "98809919e": 181, "48938813e": 181, "03237920e": 181, "25349312e": 181, "53959628e": 181, "67451144e": 181, "00768662e": 181, "19112072e": 181, "07963978e": 181, "47987268e": 181, "76195467e": 181, "00393284e": 181, "07582983e": 181, "66670169e": 181, "65799352e": 181, "99891212e": 181, "58195950e": 181, "58667835e": 181, "98350372e": 181, "60836363e": 181, "00911944e": 181, "elasticnetifittedelasticnet": 181, "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [181, 219], "huber": [182, 210, 405, 413, 557, 646, 673, 675, 1000, 1028, 1030, 1031, 1040], "mks542": 182, "x_outlier": [182, 214, 290, 291, 336], "y_outlier": 182, "epsilon_valu": 182, "intercept_": [182, 190, 192, 209, 237, 335, 342, 346, 381, 393, 479, 480, 481, 546, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 898, 899, 900, 901, 902, 903, 904, 980, 982, 1000, 1001, 1028, 1035, 1040, 1042, 1045], "coef_ridg": 182, "096": [182, 219], "plot_huber_vs_ridg": [182, 219], "logreg": [183, 832], "plot_iris_logist": [183, 219], "underdetermin": 184, "time_step": [184, 856], "anti": [184, 361, 603, 833, 988], "9502547": 184, "8059798": 184, "63394388": 184, "70359377": 184, "62241605": 184, "84077985": 184, "30506066": 184, "63327171": 184, "74495357": 184, "02456369": 184, "random_sampl": [184, 838, 839, 843], "sensor": 184, "monitor": [184, 208, 382, 393, 550, 551, 556, 557, 558, 559, 990, 1031, 1036, 1038, 1040], "superposit": 184, "y_pred_lasso": 184, "r2_score_lasso": 184, "y_pred_ard": 184, "r2_score_ard": 184, "086": 184, "elasticnetcv": [184, 393, 397, 643, 649, 657, 658, 659, 660, 678, 982, 1028, 1031, 1039, 1041, 1042, 1045], "enet": [184, 274], "y_pred_enet": 184, "r2_score_enet": 184, "nlasso": 184, "meinshausen": 184, "yu": [184, 406, 449, 459, 655, 982, 990, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "246": [184, 994, 1028], "270": [184, 326], "plot_lasso_and_elasticnet": [184, 219], "penalis": [185, 198, 215, 693], "enet_path": [185, 393, 644, 1030, 1032, 1041], "lasso_path": [185, 648, 649, 650, 651, 652, 653, 660, 679, 680, 982, 1028, 1030, 1032, 1041], "alphas_lasso": 185, "coefs_lasso": 185, "alphas_positive_lasso": 185, "coefs_positive_lasso": 185, "alphas_enet": 185, "coefs_enet": 185, "alphas_positive_enet": 185, "coefs_positive_enet": 185, "neg_log_alphas_lasso": 185, "neg_log_alphas_enet": 185, "coef_l": 185, "neg_log_alphas_positive_lasso": 185, "coef_pl": 185, "neg_log_alphas_positive_enet": 185, "coef_p": 185, "plot_lasso_coordinate_descent_path": [185, 219, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681], "sai": [186, 229, 345, 350, 351, 379, 404, 406, 407, 411, 413, 414, 443, 444, 497, 501, 507, 674, 975, 992, 999, 1010, 1018, 1019, 1021], "x_sp": 186, "sparse_lasso": 186, "dense_lasso": 186, "coeff_diff": 186, "2e": [186, 275], "033": [186, 994], "01e": 186, "xs_sp": 186, "tocsc": 186, "nnz": [186, 351, 374, 696], "751": 186, "65e": 186, "plot_lasso_dense_vs_sparse_data": [186, 219], "lars_path": [187, 388, 528, 534, 536, 539, 540, 542, 543, 545, 647, 648, 649, 650, 651, 652, 653, 660, 661, 662, 680, 681, 682, 683, 982, 1028, 1030, 1033, 1037, 1039], "plot_lasso_lar": [187, 219], "zht2007": 188, "lassolars": [188, 189, 415, 648, 651, 652, 982, 1028, 1035, 1037, 1041, 1042], "2173": [188, 653, 982], "2192": [188, 653, 982], "038076": [188, 189], "050680": [188, 189], "061696": [188, 189], "021872": [188, 189], "044223": [188, 189], "034821": [188, 189], "043401": [188, 189], "002592": [188, 189], "019907": [188, 189], "017646": [188, 189], "001882": [188, 189], "044642": [188, 189], "051474": [188, 189], "026328": [188, 189], "008449": [188, 189], "019163": [188, 189], "074412": [188, 189], "039493": [188, 189], "068332": [188, 189], "092204": [188, 189], "085299": [188, 189], "044451": [188, 189], "005670": [188, 189], "045599": [188, 189], "034194": [188, 189], "032356": [188, 189], "002861": [188, 189], "025930": [188, 189], "089063": [188, 189], "011595": [188, 189], "036656": [188, 189], "012191": [188, 189], "024991": [188, 189], "036038": [188, 189], "034309": [188, 189], "022688": [188, 189], "009362": [188, 189], "005383": [188, 189], "036385": [188, 189], "003935": [188, 189], "015596": [188, 189], "008142": [188, 189], "031988": [188, 189], "046641": [188, 189], "akaik": [188, 189, 251, 653, 794, 975, 982], "lasso_lars_": [188, 189], "zou_et_al_criterion_resc": 188, "noise_vari": [188, 529, 653, 982, 1042], "aic_criterion": 188, "criterion_": [188, 189, 653], "index_alpha_path_a": 188, "alphas_": [188, 189, 644, 647, 648, 650, 651, 652, 653, 658, 660, 679, 680, 1028, 1031, 1041], "lassolarsic__criterion": [188, 189], "bic_criterion": 188, "index_alpha_path_b": 188, "plot_lasso_lars_": [188, 219], "n_random_featur": 189, "x_random": 189, "random_": 189, "02d": 189, "random_02": 189, "random_05": 189, "random_08": 189, "random_11": 189, "647689": 189, "234137": 189, "469474": 189, "465730": 189, "012831": 189, "412304": 189, "067528": 189, "110923": 189, "601707": 189, "057711": 189, "208864": 189, "196861": 189, "478522": 189, "057122": 189, "324084": 189, "611676": 189, "331263": 189, "185659": 189, "812526": 189, "003533": 189, "alpha_a": 189, "alpha_b": 189, "160030": 189, "5244": 189, "764779": 189, "300343": 189, "5208": 189, "250639": 189, "5212": 189, "341949": 189, "542052": 189, "4928": 189, "018900": 189, "4936": 189, "201520": 189, "034077": 189, "4869": 189, "678359": 189, "4881": [189, 1033], "952289": 189, "189631": 189, "4815": 189, "437362": 189, "4831": [189, 652], "802601": 189, "329616": 189, "4810": 189, "423641": 189, "4830": 189, "880191": 189, "306012": 189, "4803": 189, "573491": 189, "4828": 189, "121351": 189, "124225": 189, "4804": 189, "126502": 189, "4832": 189, "765671": 189, "820705": 189, "621645": 189, "4836": 189, "352124": 189, "750389": 189, "4805": 189, "012521": 189, "4841": 189, "834310": 189, "570655": 189, "290075": 189, "4846": 189, "203174": 189, "550213": 189, "4807": 189, "075887": 189, "4852": 189, "080295": 189, "358295": 189, "4806": 189, "878051": 189, "4855": 189, "973770": 189, "259297": 189, "706026": 189, "4860": 189, "893055": 189, "237703": 189, "4809": [189, 264], "440409": 189, "4866": 189, "718747": 189, "850031": 189, "989341": 189, "4867": 189, "358990": 189, "384338": 189, "4801": 189, "702266": 189, "163224": 189, "296575": 189, "4802": 189, "594754": 189, "4872": 189, "147022": 189, "031555": 189, "236720": 189, "4874": 189, "880298": 189, "618263": 189, "4798": 189, "484109": 189, "4876": 189, "218997": 189, "526599": 189, "4799": 189, "543841": 189, "370039": 189, "586798": 189, "4794": 189, "238744": 189, "4880": 189, "156252": 189, "445978": 189, "4795": 189, "589715": 189, "4885": 189, "598533": 189, "259031": 189, "4796": 189, "966981": 189, "4891": 189, "067109": 189, "032179": 189, "662409": 189, "4894": 189, "853846": 189, "019069": 189, "652739": 189, "4888": 189, "752867": 189, "626286": 189, "817724": 189, "set_xscal": [189, 205, 801], "badli": [189, 200, 350, 367, 878, 982, 996], "lassolarscv": [189, 397, 415, 649, 650, 651, 653, 660, 662, 679, 680, 681, 982, 1028, 1035, 1041, 1045], "3800": 189, "mse_path_": [189, 644, 648, 650, 652, 658, 660], "cv_alphas_": [189, 648, 652, 1040], "kink": 189, "heavili": [189, 365, 366, 379, 387, 646, 652, 1003], "efficaci": 189, "plot_lasso_model_select": [189, 219, 644, 650], "plot_logist": [190, 219], "axes_row": 191, "clf_l1_lr": 191, "clf_l2_lr": 191, "clf_en_lr": 191, "coef_l1_lr": 191, "coef_l2_lr": 191, "coef_en_lr": 191, "sparsity_l1_lr": 191, "sparsity_l2_lr": 191, "sparsity_en_lr": 191, "nl1_ratio": 191, "plot_logistic_l1_l2_spars": [191, 219], "995": 192, "plot_logistic_multinomi": [192, 219], "976": [192, 269], "dupr": [192, 208, 284, 286, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "m4x": [192, 216], "sag": [192, 207, 655, 656, 669, 671, 684, 982, 1000, 1006, 1033, 1034, 1035, 1037, 1038], "bry": [192, 209], "plot_hyperplan": [192, 209, 237], "looser": 193, "liblinear": [193, 335, 385, 655, 656, 784, 898, 899, 900, 903, 904, 982, 986, 1001, 1028, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1044], "l1_min_c": [193, 982, 1001, 1028], "intercept_sc": [193, 655, 656, 898, 899, 905, 982, 1001], "coefs_": [193, 302, 855, 856, 990, 1033], "plot_logistic_path": [193, 219], "jointli": [194, 268, 405, 406, 411, 982], "instant": 194, "wave": [194, 379, 985], "n_task": [194, 982], "n_relevant_featur": 194, "multitasklasso": [194, 649, 657, 660, 982, 1028, 1036, 1039, 1041], "coef_lasso_": 194, "coef_multi_task_lasso_": 194, "spy": 194, "feature_to_plot": 194, "seagreen": 194, "227": [194, 219, 261, 350, 406, 721], "plot_multi_task_lasso_support": [194, 219], "reg_nnl": 195, "y_pred_nnl": 195, "r2_score_nnl": 195, "nnl": [195, 654], "8225220806196526": 195, "reg_ol": 195, "y_pred_ol": 195, "r2_score_ol": 195, "7436926291700353": 195, "low_x": 195, "high_x": 195, "low_i": 195, "high_i": 195, "get_ylim": [195, 306, 307], "847222222222214": 195, "plot_nnl": [195, 219], "23786125": 196, "2548": 196, "diabetes_x": [196, 1019], "diabetes_i": [196, 1019], "diabetes_x_train": [196, 1019], "diabetes_x_test": [196, 1019], "diabetes_y_train": [196, 1019], "diabetes_y_test": [196, 1019], "regr": [196, 407, 551, 553, 562, 643, 644, 664, 831, 856, 899, 901, 904, 1001, 1019], "diabetes_y_pr": 196, "plot_ol": [196, 219], "plot_ols_3d": [197, 219], "greatli": [198, 234, 321, 379, 387, 449, 989, 1002, 1034, 1042], "plot_ols_ridge_vari": [198, 219], "make_sparse_coded_sign": [199, 528, 534, 1042, 1044], "orthogonalmatchingpursuit": [199, 662, 682, 683, 982, 1028, 1030, 1033, 1036, 1041], "orthogonalmatchingpursuitcv": [199, 397, 661, 1030, 1041, 1045], "512": 199, "n_nonzero_coef": [199, 523, 528, 534, 539, 545, 647, 661, 682, 683], "xw": [199, 319, 643, 644, 646, 649, 650, 651, 652, 653, 657, 658, 659, 660, 669, 678, 679, 680, 681, 982], "_0": [199, 682, 982, 986, 1001], "distort": [199, 233, 376, 404, 405, 875, 887, 892, 983, 996, 998], "y_noisi": 199, "idx_r": 199, "omp_cv": 199, "187": [199, 219, 261, 385, 581, 987, 1019, 1030], "plot_omp": [199, 219], "contract": [200, 218, 341, 366, 393, 1007], "compani": [200, 218, 406, 1010], "policyhold": [200, 218, 982], "vehicl": [200, 218], "driver": [200, 218, 1043], "exposur": [200, 218, 982], "car": 200, "accid": [200, 218], "noll": [200, 218], "salzmann": [200, 218], "wuthrich": [200, 218], "2139": [200, 218], "ssrn": [200, 218], "3164764": [200, 218], "ch": [200, 202, 218, 328, 330], "rth": [200, 218], "41214": [200, 218], "idpol": [200, 218], "claimnb": [200, 218], "vehpow": [200, 218], "vehag": [200, 218], "drivag": [200, 218], "bonusmalu": [200, 218], "vehbrand": [200, 218], "vehga": [200, 218], "b12": [200, 218], "1217": 200, "r82": 200, "77000": 200, "75000": 200, "diesel": [200, 218], "r22": 200, "09000": 200, "r72": 200, "84000": 200, "678008": 200, "6114326": 200, "00274": 200, "3317": 200, "r93": 200, "678009": 200, "6114327": 200, "9850": 200, "r11": [200, 218], "678010": 200, "6114328": 200, "1323": 200, "678011": 200, "6114329": 200, "r26": 200, "678012": 200, "6114330": 200, "678013": [200, 218], "10070308464041304": 200, "log_scale_transform": [200, 218], "linear_model_preprocessor": 200, "passthrough_numer": [200, 218], "binned_numer": [200, 218], "2e5": [200, 218], "log_scaled_numer": [200, 218], "onehot_categor": [200, 218], "imbalanc": [200, 264, 268, 270, 351, 391, 404, 410, 700, 705, 783, 796, 800, 835, 986, 988, 994, 1006], "simplist": [200, 414], "pertin": 200, "dummyregressor": [200, 218, 548, 986, 1029, 1031, 1032, 1035, 1036, 1038, 1041, 1042], "df_train": [200, 218], "df_test": [200, 218], "regressor__sample_weight": 200, "mean_poisson_devi": [200, 986, 1038], "score_estim": [200, 218], "n_mask": 200, "564": 200, "commonli": [200, 258, 341, 372, 393, 406, 407, 416, 611, 754, 755, 793, 827, 870, 983, 984, 986, 987, 989, 1044], "ridge_glm": 200, "strictli": [200, 218, 236, 306, 322, 351, 384, 393, 404, 409, 411, 414, 505, 506, 532, 538, 541, 558, 559, 585, 588, 639, 667, 668, 692, 697, 735, 762, 795, 798, 799, 805, 809, 821, 847, 874, 886, 890, 891, 893, 894, 898, 899, 903, 904, 933, 975, 977, 982, 986, 996, 1000, 1029, 1039, 1044], "domain": [200, 312, 393, 395, 410, 632, 718, 719, 720, 796, 797, 802, 803, 804, 982, 1007], "560": [200, 302, 304, 514, 515], "186": [200, 303, 329, 385, 784, 986], "595": 200, "223745": 200, "597": [200, 277], "glm": [200, 218, 317, 645, 666, 677, 982, 1028, 1039], "vanilla": [200, 402, 406, 444, 446, 457, 626], "poissonregressor": [200, 218, 317, 320, 645, 677, 982, 1039, 1042, 1043], "poisson_glm": 200, "newton": [200, 218, 303, 607, 645, 655, 656, 666, 677, 855, 856, 982, 1032, 1033, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "deep": [200, 381, 393, 413, 420, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 765, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 990, 991, 1006, 1007, 1010, 1033, 1039, 1040, 1042], "implicit": [200, 393, 413, 414, 569, 679, 680, 980, 985, 1006, 1037], "concis": [200, 379, 384, 1039, 1041], "poisson_gbrt": 200, "566": 200, "prone": [200, 248, 310, 391, 404], "set_yscal": [200, 801], "5e5": 200, "realiz": [200, 1010], "priori": [200, 217, 270, 282, 306, 393, 406, 413, 585, 591, 985, 1044], "wrongli": [200, 337], "gen_even_slic": [200, 388, 938], "_mean_frequency_by_risk_group": 200, "y_true_bin": 200, "y_pred_bin": 200, "idx_sort": 200, "sl": 200, "y_true_seg": 200, "y_pred_seg": 200, "11935": 200, "11933": 200, "11932": 200, "12196": 200, "11931": 200, "portfolio": [200, 218, 980], "riskiest": [200, 218], "safest": [200, 218, 361, 373], "irrespect": [200, 233, 270, 284, 603], "lorenz": [200, 218, 1033], "summar": [200, 252, 268, 270, 352, 379, 381, 395, 413, 518, 655, 691, 703, 704, 982, 983, 986, 992], "lorenz_curv": [200, 218], "ranked_frequ": 200, "ranked_exposur": [200, 218], "cumulated_claim": 200, "cumulated_exposur": 200, "cum_exposur": 200, "cum_claim": [200, 218], "0x7fa029d08100": 200, "occurr": [200, 312, 351, 352, 374, 379, 406, 414, 566, 567, 578, 586, 587, 614, 624, 625, 626, 627, 779, 833, 861, 988, 1029, 1034], "circumstanti": 200, "extractor": [200, 303, 367, 374, 393, 414, 500, 578, 579, 585, 586, 588, 975, 1028], "discrim": 200, "profil": [200, 365, 379, 382, 518, 521, 982, 1010], "ideal": [200, 202, 218, 258, 261, 268, 270, 271, 361, 378, 379, 383, 384, 387, 391, 393, 404, 722, 752, 975, 985, 1000, 1001, 1007], "meaningfulli": [200, 986], "plot_poisson_regression_non_normal_loss": [200, 219], "monomi": 201, "vandermond": [201, 996], "x_0": [201, 654], "pseudo": [201, 303, 381, 410, 418, 437, 449, 451, 459, 466, 467, 468, 470, 471, 472, 473, 530, 558, 559, 560, 624, 631, 636, 638, 639, 643, 644, 649, 650, 657, 658, 659, 660, 674, 688, 692, 798, 799, 807, 809, 847, 854, 890, 891, 895, 898, 899, 900, 903, 934, 935, 982, 998, 1033, 1042], "basis_1": 201, "basis_2": 201, "infinit": [201, 246, 264, 341, 365, 416, 443, 619, 620, 774, 793, 916, 918, 919, 978, 985, 996, 1001, 1036, 1038, 1041, 1042, 1043], "malt": [201, 1041, 1042, 1043], "londschien": [201, 1041], "prepar": [201, 236, 350, 365, 381, 382, 385, 387, 1002, 1010, 1036, 1044], "set_prop_cycl": 201, "teal": [201, 210, 268], "yellowgreen": [201, 203, 210, 357], "tomato": 201, "unwant": [201, 350], "oscillatori": [201, 996], "danger": [201, 410], "pft": 201, "splt": 201, "bsplines_": [201, 877], "refrain": [201, 379], "dec": [201, 279, 674, 877, 902, 1001], "31st": [201, 877], "x_plot_ext": 201, "y_plot_ext": 201, "426": [201, 219], "plot_polynomial_interpol": [201, 219, 873, 877], "pareto": 202, "dale": [202, 1041], "mail": [202, 311, 374, 379, 383, 387, 391, 394, 1004, 1036, 1037], "ru": 202, "glemaitre58": 202, "y_true_mean": 202, "y_normal": 202, "y_pareto": 202, "huge": [202, 205, 365, 385, 624, 1031], "heavi": [202, 403, 1007], "parse_vers": [202, 667], "sp_version": [202, 667], "incompat": [202, 383, 493, 976, 1036, 1037], "older": [202, 236, 378, 383, 1031, 1038, 1040], "interior": [202, 667, 982, 1043], "out_bounds_predict": 202, "bool_": 202, "logical_or": [202, 208, 270, 385], "hit": [202, 385], "asymmetri": [202, 350], "linger": 202, "linear_regress": [202, 275], "quantile_regress": 202, "y_pred_lr": 202, "y_pred_qr": 202, "805": 202, "670": 202, "cv_results_lr": 202, "cv_results_qr": 202, "test_neg_mean_squared_error": [202, 821], "679": [202, 898], "129": [202, 1017, 1028], "552": [202, 219, 259, 277], "plot_quantile_regress": [202, 219], "robustli": [203, 405], "faulti": [203, 1028], "1903908407869": 203, "17236387": 203, "08533159": 203, "ransacregressor": [203, 206, 217, 397, 646, 675, 676, 982, 1031, 1033, 1034, 1035, 1036, 1039, 1041, 1042], "inlier_mask": 203, "inlier_mask_": [203, 668], "outlier_mask": 203, "line_x": [203, 217], "line_i": 203, "line_y_ransac": 203, "estimator_": [203, 236, 550, 551, 552, 553, 554, 555, 560, 561, 562, 563, 590, 591, 594, 668, 970, 1043], "090": [203, 219, 262, 277], "plot_ransac": [203, 219], "mathcal": [204, 345, 411, 413, 624, 693, 978, 980, 982, 986, 1000, 1041], "discourag": [204, 391, 396, 686], "beta_": [204, 411], "excess": [204, 443, 996, 1035], "encourag": [204, 300, 337, 378, 379, 391, 1001, 1006], "kornel": [204, 1034], "kielczewski": [204, 1034], "plusnet": 204, "32634568": 204, "49665188": 204, "75747153": 204, "08699432": 204, "44381023": 204, "69892343": 204, "28808734": 204, "75949622": 204, "errors_coef": 204, "regularis": [204, 419, 470, 472], "logx": [204, 345], "gradual": [204, 855, 856, 1000], "formerli": [204, 1029, 1032, 1034, 1035], "intric": [204, 509], "rapidli": [204, 263, 1001, 1010, 1015], "influenti": [204, 351, 1010], "pose": [204, 269, 982, 1020], "lose": [204, 217, 352, 374, 393, 409, 414, 416, 543, 934, 935, 976, 982, 1021], "concret": [204, 380, 394, 415, 665, 671, 672, 673, 674, 890, 891, 982, 1000, 1006], "plot_ridge_coeff": [204, 219], "practis": 205, "10x10": 205, "hilbert": [205, 864, 978, 996], "n_alpha": [205, 469, 643, 644, 647, 648, 649, 650, 651, 652, 653, 657, 658, 659, 660, 670, 672, 678, 679, 680, 681, 1031], "318": [205, 219, 447], "plot_ridge_path": [205, 219], "theilsen": 206, "lessen": [206, 655, 656], "theilsenregressor": [206, 217, 646, 668, 675, 982, 1032, 1040, 1042], "x_error": 206, "y_errors_larg": 206, "x_errors_larg": 206, "deviant": [206, 992], "legend_titl": 206, "nabsolut": 206, "nto": [206, 270], "734": [206, 219], "plot_robust_fit": [206, 219], "asgd": [207, 1000], "rob": [207, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1040, 1043], "zinkov": [207, 1028, 1029, 1030, 1032, 1033], "heldout": 207, "squared_hing": [207, 345, 663, 673, 898, 905, 982, 1001], "0e4": 207, "yy_": 207, "770": [207, 219], "plot_sgd_comparison": [207, 219], "_test": [208, 308, 381, 1041], "ignore_warn": [208, 308, 1034], "load_mnist": [208, 284], "class_0": [208, 376, 507], "class_1": [208, 376, 507], "554": [208, 216, 302], "mnist_784": [208, 216, 284, 302], "fit_and_scor": 208, "train_scor": [208, 312, 345, 355, 801, 817, 821, 822, 825, 981], "estimator_dict": 208, "flush": 208, "results_df": [208, 261, 312], "group_df": 208, "plot_sgd_early_stop": [208, 219], "ova": [209, 663, 665, 673, 1000], "plot_sgd_iri": [209, 219], "ugli": [209, 292, 295, 333], "dim": [209, 233, 292, 293, 295, 333, 334, 524, 696, 1045], "117": [209, 219, 1029], "modified_huber_loss": 210, "darkorchid": 210, "plot_sgd_loss_funct": [210, 219], "l1_color": 211, "l2_color": 211, "elastic_net_color": 211, "1001": [211, 243], "rho": [211, 411, 674, 982, 1000, 1029], "elastic_net": 211, "dpi": [211, 912, 1041], "elastic_net_contour": 211, "l2_contour": 211, "l1_contour": 211, "257": [211, 219, 223, 259], "plot_sgd_penalti": [211, 219], "ndenumer": 212, "066": [212, 219, 259, 645], "plot_sgd_separating_hyperplan": [212, 219], "no_weight": 213, "samples_weight": 213, "no_weights_handl": 213, "weights_handl": 213, "plot_sgd_weighted_sampl": [213, 219], "sgdoneclasssvm": [214, 229, 319, 902, 992, 1000, 1041, 1043, 1044], "rc": [214, 383], "novel": [214, 290, 336, 361, 404, 975], "abnorm": [214, 229, 290, 336, 374, 489, 560, 844, 992, 1036], "y_pred_train": [214, 336], "y_pred_test": [214, 290, 336], "y_pred_outli": [214, 290, 336], "n_error_train": [214, 336], "n_error_test": [214, 290, 336], "n_error_outli": [214, 290, 336], "clf_sgd": 214, "pipe_sgd": 214, "y_pred_train_sgd": 214, "y_pred_test_sgd": 214, "y_pred_outliers_sgd": 214, "n_error_train_sgd": 214, "n_error_test_sgd": 214, "n_error_outliers_sgd": 214, "pubu": [214, 233, 290, 336], "darkr": [214, 290, 336], "palevioletr": [214, 290, 336], "b1": [214, 290, 336], "b2": [214, 290, 336], "blueviolet": [214, 290, 336], "plot_sgdocsvm_vs_ocsvm": [214, 219], "newgroups20": 215, "trim": [215, 406, 838, 839], "20newsgroup": [215, 372, 1028], "4500": 215, "130107": [215, 233, 486], "epoch": [215, 393, 533, 663, 664, 665, 673, 674, 675, 855, 856, 1000, 1035, 1036, 1041], "5960": 215, "26593496": 215, "43348936": 215, "26362917": 215, "31973683": 215, "37815029": 215, "2928359": 215, "27054655": 215, "62717609": 215, "19522393": 215, "30897646": 215, "34586917": 215, "28207552": 215, "34125758": 215, "29898468": 215, "34279478": 215, "59489497": 215, "38353048": 215, "35278655": 215, "19829832": 215, "14603365": 215, "6440": 215, "36047253": 215, "1268187": 215, "10606655": 215, "17985197": 215, "5395559": 215, "07993421": 215, "06686804": 215, "21443888": 215, "11528972": 215, "2075215": 215, "10914094": 215, "11144673": 215, "13988486": 215, "09684337": 215, "26286057": 215, "11682692": 215, "55800226": 215, "17370318": 215, "11452112": 215, "arthur": [215, 216, 406, 444, 457, 1033, 1034, 1035, 1036, 1037, 1040, 1042], "mensch": [215, 216, 1033, 1034, 1035, 1036], "timeit": [215, 249, 385], "default_tim": [215, 249], "model_param": 215, "this_max_it": 215, "train_tim": [215, 235, 350, 351], "ndataset": [215, 308], "run_tim": [215, 216], "370": [215, 219], "plot_sparse_logistic_regression_20newsgroup": [215, 219], "8253": 216, "556": 216, "l1_plot": 216, "plot_sparse_logistic_regression_mnist": [216, 219], "subpopul": [217, 676, 982], "residual_threshold": [217, 668, 982, 1041], "remedi": 217, "max_subpopul": [217, 676, 1042], "florian": [217, 1010, 1028, 1032, 1034, 1038], "wilhelm": [217, 1032, 1034, 1038], "indigo": 217, "plot_theilsen": [217, 219], "motor": 218, "parti": [218, 279, 322, 366, 378, 391, 797, 804, 954, 1004, 1028, 1039, 1044, 1045], "liabil": 218, "functool": 218, "mean_tweedie_devi": [218, 986, 1038], "load_mtpl2": 218, "fremtpl2freq": 218, "df_freq": 218, "fremtpl2sev": 218, "41215": 218, "df_sev": 218, "claimamount": 218, "fillna": [218, 239], "unquot": 218, "column_nam": 218, "plot_obs_pr": 218, "y_label": 218, "fill_legend": 218, "df_": 218, "tweedie_pow": 218, "d\u00b2": 218, "subset_label": 218, "score_label": [218, 267], "est_freq": 218, "est_sev": 218, "unstack": [218, 264], "fremtpl2": 218, "unreason": [218, 410], "exception": 218, "200000": 218, "column_tran": [218, 407], "purepremium": 218, "indirectli": [218, 341], "avgclaimamount": 218, "fmax": 218, "option_context": 218, "max_column": 218, "414": [218, 407, 722, 752, 874, 886, 986], "27000": 218, "303": [218, 632], "333333": 218, "r25": 218, "1981": [218, 982], "14156": 218, "142857": 218, "4792": 218, "1456": 218, "10403": 218, "928571": 218, "10834": 218, "17474": 218, "193548": 218, "225806": 218, "r73": 218, "3986": 218, "12860": [218, 1037], "5417": 218, "seemingli": [218, 361, 391], "169504": 218, "6237": 218, "upon": [218, 226, 297, 374, 379, 391, 393, 400, 558, 559, 624, 627, 668, 785, 793, 794, 838, 839, 975, 982, 1002, 1012, 1021, 1042], "glm_freq": 218, "0448": 218, "0427": [218, 466, 471], "1379": 218, "1378": 218, "2441": 218, "2246": 218, "surprisingli": [218, 374, 414], "bonu": [218, 379, 1016, 1021], "malu": 218, "younger": 218, "infti": [218, 416, 616, 982, 996, 1035], "gammaregressor": [218, 317, 320, 677, 982, 1039, 1042, 1043], "mask_test": 218, "glm_sev": 218, "900000e": 218, "400000e": 218, "756746e": 218, "744042e": 218, "801770e": 218, "030677e": 218, "dummy_sev": 218, "000000e": 218, "756687e": 218, "744497e": 218, "803882e": 218, "033764e": 218, "avgclaim": 218, "nbclaim": 218, "1951": 218, "1940": 218, "1978": [218, 982], "apriori": 218, "regardless": [218, 262, 263, 264, 366, 379, 406, 532, 629, 630, 655, 701, 712, 986, 998, 1036, 1043, 1044], "glm_pure_premium": 218, "999": [218, 261, 383, 413, 714, 855, 856], "scores_product_model": 218, "scores_glm_pure_premium": 218, "expand_frame_repr": 218, "640000e": 218, "370000e": 218, "669930e": 218, "617050e": 218, "640770e": 218, "640880e": 218, "7000": 218, "695740e": 218, "683980e": 218, "682880e": 218, "692270e": 218, "8000": [218, 264, 265], "046010e": 218, "040530e": 218, "037600e": 218, "045390e": 218, "9000": 218, "387580e": 218, "385000e": 218, "382120e": 218, "387830e": 218, "9900": 218, "015716e": 218, "015414e": 218, "015347e": 218, "015587e": 218, "9990": 218, "914573e": 218, "914370e": 218, "914538e": 218, "914387e": 218, "904751e": 218, "904556e": 218, "904747e": 218, "904558e": 218, "730119e": 218, "722128e": 218, "739865e": 218, "731249e": 218, "295040e": 218, "212197e": 218, "295505e": 218, "213056e": 218, "917618e": 218, "299546e": 218, "916555e": 218, "313276e": 218, "951751e": 218, "325198e": 218, "riski": 218, "operation": [218, 1010], "simpler": [218, 337, 365, 378, 406, 411, 982, 987, 1019, 1033], "develop": [218, 259, 261, 279, 316, 322, 350, 365, 368, 374, 378, 379, 385, 391, 393, 394, 395, 397, 400, 403, 405, 408, 409, 413, 414, 420, 423, 430, 490, 795, 970, 982, 986, 989, 1002, 1004, 1006, 1007, 1009, 1010, 1019, 1028, 1036, 1037, 1038, 1041, 1043, 1045], "ranked_pure_premium": 218, "cumulated_claim_amount": 218, "cumulated_sampl": 218, "y_pred_product": 218, "y_pred_tot": 218, "ordered_sampl": 218, "plot_tweedie_regression_insurance_claim": [218, 219], "749": 219, "auto_examples_linear_model": 219, "md": [221, 222, 223, 224, 383, 685, 689, 691, 1022, 1023, 1028, 1040, 1043], "seek": [221, 223, 225, 378, 379, 391, 394, 505, 506, 983, 1013, 1015], "ticker": [221, 223, 226, 284], "s_point": 221, "s_color": 221, "make_s_curv": [221, 226], "plot_3d": 221, "points_color": 221, "subplot_kw": [221, 288], "set_major_loc": [221, 289], "multipleloc": [221, 289], "add_2d_scatt": 221, "set_major_formatt": [221, 223, 226, 284, 289], "nullformatt": [221, 223, 226, 284], "lle": [221, 222, 223, 225, 527, 686, 690, 983, 1040], "thought": [221, 289, 393, 406, 443, 983, 987], "analys": [221, 359, 411, 798, 799, 983, 1006, 1010], "lle_standard": 221, "s_standard": 221, "lle_ltsa": 221, "ltsa": [221, 222, 223, 686, 690, 983], "s_ltsa": 221, "lle_hessian": 221, "hessian": [221, 222, 223, 413, 645, 655, 656, 666, 677, 686, 690, 982, 990, 1022, 1023, 1043], "s_hessian": 221, "lle_mod": 221, "s_mod": 221, "lle_method": 221, "tangent": [221, 341, 686, 690, 984, 1022, 1023], "eigenmap": [221, 686, 688, 690, 692, 1022, 1023, 1029], "isometr": [221, 685, 687, 688, 689, 983], "geodes": [221, 685, 983], "s_isomap": 221, "md_scale": 221, "normalized_stress": [221, 222, 223, 224, 687, 691, 983, 1043], "s_scale": 221, "laplacian": [221, 371, 403, 437, 449, 459, 617, 636, 640, 688, 692, 761, 762, 770, 894, 982, 983, 999, 1023, 1029, 1034], "s_spectral": 221, "t_sne": [221, 1036], "s_t_sne": 221, "719": [221, 227], "plot_compare_method": [221, 227], "offsetbox": 222, "plot_embed": 222, "425": [222, 612], "shown_imag": 222, "someth": [222, 236, 279, 350, 379, 381, 382, 383, 387, 414, 986, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "4e": 222, "imagebox": 222, "annotationbbox": 222, "offsetimag": 222, "neighborhoodcomponentsanalysi": [222, 292, 293, 294, 989, 1037, 1042], "random_project": [222, 233, 368, 998, 1003, 1029, 1034, 1044, 1045], "sparserandomproject": [222, 233, 890, 998, 1029, 1034, 1042, 1044, 1045], "n_iter_without_progress": [222, 689, 1033, 1034], "nca": [222, 292, 293, 294, 847, 989], "843": [222, 227], "plot_lle_digit": [222, 227], "pole": 223, "thin": [223, 617], "earth": [223, 351, 760, 1006], "056": [223, 994], "048": [223, 994], "sphere_data": 223, "trans_data": 223, "2g": [223, 226, 694, 1039], "258": 223, "343": [223, 227], "plot_manifold_spher": [223, 227], "euclidean_dist": [224, 233, 381, 447, 454, 685, 758, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 1028, 1033, 1036, 1037, 1045], "finfo": [224, 468, 469, 475, 603, 647, 648, 651, 652, 653, 679, 680, 737, 1043], "x_true": 224, "dissimilar": [224, 341, 393, 403, 449, 687, 691, 983, 1034, 1044], "embedding_": [224, 393, 685, 686, 687, 688, 689], "nmd": 224, "npo": 224, "177": [224, 227, 385], "plot_md": [224, 227], "sr_point": 225, "sr_color": 225, "ambient": 225, "text2d": 225, "unrol": 225, "unnecessarili": [225, 1035, 1038], "clump": 225, "sr_lle": 225, "sr_err": 225, "locally_linear_embed": [225, 983], "sr_tsne": 225, "stretch": [225, 250], "byproduct": 225, "sh_point": 225, "sh_color": 225, "topologi": [225, 226], "sh_lle": 225, "sh_err": 225, "sh_tsne": 225, "061": [225, 227, 259], "plot_swissrol": [225, 227], "tendenc": [226, 982, 983, 985, 988, 991], "clearer": [226, 1001], "distil": 226, "pub": [226, 836, 893], "misread": 226, "narin": [226, 1035, 1036], "kokhlikyan": [226, 1035, 1036], "plot_t_sne_perplex": [226, 227], "auto_examples_manifold": 227, "cope": [229, 367, 374, 982], "multimod": 229, "inli": [229, 982, 992], "unimod": [229, 471], "localoutlierfactor": [229, 239, 290, 291, 320, 393, 560, 902, 992, 1035, 1036, 1038, 1042, 1043, 1044, 1045], "modal": [229, 471, 937], "hypercub": [229, 512], "decent": [229, 260, 374, 988], "handpick": 229, "absenc": [229, 264, 393, 709, 861, 985, 986], "negative_linestyl": 229, "outliers_fract": 229, "n_inlier": 229, "anomaly_algorithm": 229, "blobs_param": 229, "plot_anomaly_comparison": [229, 244], "transfus": 230, "1464": 230, "donat": 230, "cm_displai": 230, "y_score": [230, 268, 270, 393, 479, 480, 481, 704, 717, 722, 723, 735, 736, 752, 778, 784, 785, 790, 795, 798, 799, 809, 858, 986, 1034, 1042, 1044], "pos_label": [230, 239, 393, 435, 436, 695, 697, 699, 703, 704, 706, 723, 725, 726, 734, 778, 779, 780, 783, 785, 865, 882, 986, 1036, 1040, 1042], "roc_displai": 230, "previs": 230, "precision_recall_curv": [230, 268, 697, 703, 704, 723, 986, 1029, 1030, 1034, 1041, 1042, 1044], "pr_displai": 230, "easlii": 230, "313": [230, 244, 1019], "plot_display_object_visu": [230, 244], "summaris": [231, 317], "composit": [231, 317, 368, 371, 410, 655, 784, 976, 982, 995, 1023, 1029], "num_proc": [231, 317], "cat_proc": [231, 317], "feat1": [231, 317, 414], "feat3": [231, 317, 414], "feat0": [231, 317], "feat2": [231, 317, 414], "plot_estimator_represent": [231, 244], "isotonicregress": [232, 977, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1040, 1042, 1043, 1044], "ir": [232, 411, 587, 722, 752, 833, 837, 984, 986], "out_of_bound": [232, 632], "y_": [232, 247, 251, 252, 296, 381, 409, 411, 634, 645, 666, 677, 725, 726, 734, 760, 779, 780, 783, 982, 986, 1034], "linearregressionifittedlinearregress": 232, "x_thresholds_": [232, 632, 1040], "y_thresholds_": [232, 632, 1040], "plot_isotonic_regress": [232, 244], "lemma": [233, 371, 405, 531, 538, 546, 890, 891, 892, 980, 1023, 1031], "johnson_lindenstrauss_min_dim": [233, 998, 1029], "achliopta": [233, 891, 892, 998], "_compon": [233, 533], "geq": [233, 404, 411, 413, 982, 986, 996, 1000, 1001], "_sampl": [233, 411, 535, 537, 544], "admiss": [233, 366], "eps_rang": 233, "min_n_compon": 233, "nn_sampl": [233, 273], "semilogi": 233, "nn_compon": [233, 234], "100k": 233, "n_components_rang": 233, "rp": 233, "projected_data": 233, "n_byte": 233, "projected_dist": 233, "min_dist": 233, "max_dist": 233, "hexbin": 233, "gridsiz": 233, "311": [233, 351], "293": 233, "268": [233, 247], "jl": [233, 891], "436": 233, "937": [233, 244], "plot_johnson_lindenstrauss_bound": [233, 244], "rbfsampler": [234, 636, 637, 639, 978, 1012, 1032, 1042, 1043], "mont": [234, 416, 608, 638, 639, 978, 991], "fourier": [234, 405, 635, 636, 637, 638, 639, 754, 755, 978], "acceler": [234, 321, 365, 391, 402, 406, 465, 689, 896, 983, 1006, 1010, 1037, 1041, 1043, 1045], "data_train": [234, 262, 350], "targets_train": 234, "data_test": [234, 262, 350], "targets_test": 234, "kernel_svm": 234, "linear_svm": 234, "feature_map_fouri": 234, "feature_map_nystroem": [234, 636], "fourier_approx_svm": 234, "feature_map": [234, 306], "nystroem_approx_svm": 234, "kernel_svm_tim": 234, "kernel_svm_scor": 234, "linear_svm_tim": 234, "linear_svm_scor": 234, "fourier_scor": 234, "nystroem_scor": 234, "fourier_tim": 234, "nystroem_tim": 234, "feature_map__n_compon": 234, "timescal": 234, "ly": [234, 846, 848, 849, 850, 1032], "flat_grid": 234, "lv_ep": 234, "tab10": [234, 251], "plot_kernel_approxim": [234, 244], "krr": [235, 640, 979], "insensit": [235, 640, 673, 675, 784, 899, 979, 1000, 1001, 1028], "fifth": [235, 979, 1012], "kr": [235, 261, 1042], "svr_fit": 235, "kr_fit": 235, "sv_ratio": 235, "support_": [235, 344, 466, 471, 590, 591, 599, 900, 901, 902, 903, 904, 1001], "y_svr": 235, "svr_predict": 235, "y_kr": 235, "kr_predict": 235, "09999999999999999": [235, 269, 337], "737": [235, 521], "488": 235, "340": [235, 325], "sv_ind": 235, "arithmet": [235, 385, 387, 406, 548, 645, 666, 677, 701, 714, 732, 733, 753, 791, 986, 1036], "test_tim": [235, 350], "train_test_s": 235, "learningcurvedisplai": [235, 263, 321, 981, 1043, 1044], "negate_scor": [235, 801, 817], "score_typ": [235, 263, 276, 322, 801, 817, 1044], "std_display_styl": [235, 263, 801, 817], "get_legend_handles_label": [235, 263, 268], "987": [235, 244, 269, 351], "plot_kernel_ridge_regress": [235, 244], "set_config": [236, 241, 243, 313, 317, 365, 366, 397, 407, 434, 440, 441, 444, 446, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 591, 594, 607, 608, 623, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 796, 797, 802, 804, 813, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 1037, 1039, 1042, 1044], "metaestimatormixin": 236, "regressormixin": [236, 381, 393, 462, 1039], "transformermixin": [236, 284, 381, 393, 462, 1036, 1043, 1044, 1045], "metadata_rout": [236, 405, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 591, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 796, 797, 802, 804, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909], "metadatarout": [236, 434, 461, 594, 644, 648, 650, 652, 656, 658, 660, 662, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 858, 945, 1045], "methodmap": [236, 943], "get_routing_for_object": [236, 943], "process_rout": [236, 1045], "my_group": [236, 397], "my_weight": [236, 397], "my_other_weight": [236, 397], "enable_metadata_rout": [236, 397, 434, 440, 441, 444, 446, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 591, 594, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 795, 796, 797, 798, 799, 802, 804, 809, 813, 819, 820, 821, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 1044], "check_metadata": 236, "obj": [236, 400, 564, 565, 943, 944, 945, 946, 947, 952], "print_rout": 236, "get_metadata_rout": [236, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 942, 943, 944, 945, 946, 986, 1045], "_serial": 236, "exampleclassifi": 236, "smart": [236, 440, 456, 457, 587], "accomplish": [236, 381, 404, 543, 983, 987, 989, 1010, 1045], "magic": [236, 380, 385, 416, 613, 618, 621], "set_fit_request": [236, 397, 434, 440, 441, 444, 446, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 585, 588, 591, 632, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 687, 830, 831, 833, 834, 835, 836, 837, 843, 863, 864, 877, 878, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909], "set_predict_request": [236, 440, 444, 446, 479, 480, 481, 549, 608, 632, 641, 642, 906, 907, 908, 909], "set_score_request": [236, 397, 434, 440, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 607, 608, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 840, 841, 845, 848, 849, 855, 856, 858, 893, 894, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 986], "inherit": [236, 379, 381, 392, 393, 574, 673, 927, 929, 982, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1043, 1044, 1045], "metaclassifi": [236, 237], "owner": [236, 374, 376, 942, 943], "method_map": [236, 943], "fit_param": [236, 393, 430, 434, 439, 442, 462, 529, 531, 533, 534, 536, 539, 540, 546, 564, 566, 567, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 625, 627, 632, 635, 636, 637, 638, 639, 662, 801, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 842, 847, 850, 854, 857, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 890, 891, 946, 1035, 1038, 1039, 1040, 1042, 1044, 1045], "metadatarequest": [236, 420, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 466, 467, 468, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 589, 592, 593, 595, 596, 597, 600, 607, 608, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 651, 653, 654, 655, 657, 659, 661, 663, 664, 665, 666, 667, 669, 671, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 943, 945, 1045], "request_rout": 236, "validate_metadata": [236, 943], "routed_param": [236, 946], "route_param": [236, 943], "caller": [236, 407, 643, 644, 649, 657, 658, 659, 678, 888, 889, 943, 944, 954, 962, 963, 964, 1037], "predict_param": [236, 462, 564, 565, 1041], "object_nam": [236, 943, 946], "method_nam": [236, 943, 946], "silent": [236, 414, 578, 854, 996, 1033, 1034, 1036, 1037, 1041, 1042], "bug": [236, 316, 317, 318, 319, 320, 321, 322, 368, 377, 381, 382, 384, 387, 391, 393, 1004, 1007, 1028, 1029, 1030, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "notabl": [236, 306, 373, 393, 493, 724, 871, 983, 985, 989, 1032, 1035, 1042], "metaclassifierifittedmetaclassifi": 236, "exampleclassifierexampleclassifi": 236, "typeerror": [236, 319, 384, 708, 922, 943, 970, 1035, 1036, 1039, 1041, 1045], "got": [236, 268, 361, 384, 548, 646, 662, 1041, 1043, 1045], "sample_weight1": 236, "sample_weight2": 236, "aliased_sample_weight": 236, "alia": [236, 380, 383, 387, 393, 434, 440, 441, 444, 446, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 530, 531, 535, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 585, 587, 588, 591, 607, 608, 614, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 687, 796, 797, 802, 804, 813, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 843, 845, 848, 849, 855, 856, 858, 861, 863, 864, 865, 870, 877, 878, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 960, 992, 1007, 1028, 1042], "calle": [236, 944], "predict_log_proba": [236, 381, 393, 546, 547, 548, 550, 552, 554, 556, 561, 590, 591, 655, 656, 673, 795, 798, 799, 809, 819, 833, 834, 835, 836, 837, 855, 858, 895, 900, 903, 906, 908, 1001, 1028, 1041], "meta_est": 236, "routerconsumerclassifi": 236, "add_self_request": [236, 943], "self_request": 236, "clf_sample_weight": 236, "meta_clf_sample_weight": 236, "routerconsumerclassifierifittedrouterconsumerclassifi": 236, "complic": [236, 300, 385, 416, 691, 989], "simplepipelin": 236, "_required_paramet": [236, 381], "transformer_": [236, 462], "child": [236, 350, 359, 366, 391, 393, 397, 406, 413, 439, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 906, 907, 908, 909, 943, 944, 946, 954, 1002, 1035], "boilerpl": [236, 381, 1010, 1021], "exampletransform": 236, "set_transform_request": [236, 479, 480, 481, 530, 579, 585, 587, 588, 632, 861, 864, 870, 878], "metaregressor": 236, "weightedmetaregressor": 236, "__metadata_request__fit": 236, "compat": [236, 264, 284, 317, 373, 382, 388, 389, 391, 393, 396, 397, 414, 460, 466, 505, 563, 574, 582, 583, 586, 600, 611, 612, 615, 616, 617, 619, 620, 629, 630, 631, 655, 656, 670, 672, 770, 774, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816, 842, 843, 858, 863, 871, 872, 910, 911, 914, 949, 983, 986, 989, 991, 1006, 1007, 1010, 1023, 1028, 1031, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "silenc": 236, "exampleregressor": 236, "commun": [236, 372, 378, 382, 384, 387, 393, 406, 413, 535, 537, 544, 689, 707, 870, 976, 983, 989, 996, 1000, 1004, 1006, 1010, 1036, 1037], "vendor": [236, 1033, 1036, 1037], "NOT": [236, 290, 376, 382, 805, 838, 839], "signatur": [236, 350, 351, 374, 485, 486, 554, 555, 561, 562, 591, 607, 608, 656, 670, 672, 708, 738, 801, 817, 820, 822, 825, 871, 946, 975, 1035, 1041, 1045], "045": [236, 244, 719], "plot_metadata_rout": [236, 244], "theta_c": [237, 520], "reject": [237, 393, 394, 520, 668, 723, 918, 919, 982, 986, 1036], "likewis": [237, 406, 520], "surround": [237, 379, 844, 992], "cca": [237, 409, 480, 482, 1032, 1036, 1037, 1038, 1040, 1042], "onevsrestclassifi": [237, 268, 270, 279, 397, 404, 826, 828, 898, 1012, 1029, 1030, 1032, 1034, 1035, 1041, 1042, 1045], "min_x": 237, "max_x": 237, "plot_subfigur": 237, "min_i": 237, "zero_class": 237, "one_class": 237, "nfor": 237, "plot_multilabel": [237, 244], "extratreesregressor": [238, 413, 554, 562, 563, 908, 909, 1031, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045], "n_face": 238, "face_id": 238, "n_pixel": [238, 259], "nn": [238, 414, 692, 1019], "y_test_predict": 238, "true_fac": 238, "completed_fac": 238, "plot_multioutput_face_complet": [238, 244], "iforest": 239, "pharuj": 239, "rajborirug": 239, "ra": 239, "kmitl": 239, "ac": [239, 527, 661, 682, 683, 982, 999, 1021], "robustscal": [239, 875, 888, 976, 996, 1033, 1034, 1036, 1038, 1039, 1040, 1044], "make_estim": 239, "iforest_kw": 239, "lof_kw": 239, "outlier_detector": 239, "perf_count": 239, "negative_outlier_factor_": [239, 291, 844, 992], "expected_n_anomali": 239, "expected_anomaly_fract": 239, "kddcup": [239, 372, 489, 1023], "inject": [239, 374, 413], "attack": [239, 374], "fetch_kddcup99": [239, 374, 1035, 1036, 1037, 1040, 1041], "percent10": [239, 489], "int32": [239, 284, 313, 379, 393, 440, 444, 446, 448, 450, 900, 901, 902, 903, 904, 951, 1001, 1037, 1043, 1044, 1045], "anomaly_frac": 239, "10065": 239, "338": 239, "protocol_typ": 239, "cat_column": 239, "wilderness_area": 239, "soil_typ": 239, "x_forestcov": 239, "14302": 239, "137": [239, 385, 1029], "forestcov": 239, "usd": 239, "sqft": 239, "ames_h": 239, "div": 239, "lot_area": 239, "misc_featur": 239, "add_categori": 239, "noinfo": 239, "mas_vnr_typ": 239, "2714": 239, "categorical_columns_selector": 239, "fetal": 239, "cardiotocogram": 239, "heart": 239, "fhr": 239, "minor": [239, 264, 268, 374, 382, 394, 493, 986, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "x_cardiotocographi": 239, "2126": 239, "datasets_nam": 239, "ceil": [239, 554, 555, 556, 557, 560, 561, 562, 563, 591, 668, 798, 799, 906, 907, 908, 909, 1000], "dataset_nam": [239, 284], "model_idx": 239, "plot_chance_level": [239, 268, 270, 271, 697, 699, 1044], "chance_level_kw": [239, 697, 699, 1044], "privileg": [239, 387], "n_neighbors_list": [239, 286], "localoutlierfactor__n_neighbor": 239, "preprocessor_list": 239, "interquartil": [239, 876, 888], "iqr": [239, 876, 888], "75th": [239, 876], "squash": [239, 383, 416, 528, 534, 539, 545], "plot_outlier_detection_bench": [239, 244], "recalcul": [240, 242, 406, 1025, 1028], "mlpregressormlpregressor": 240, "tree_disp": 240, "mlp_disp": 240, "0x7fa013320c40": 240, "382": [240, 244], "plot_partial_dependence_visualization_api": [240, 244], "deactiv": [241, 373, 380, 385, 396, 407, 798, 799, 1042], "standard_scal": 241, "polynomialfeaturespolynomialfeatur": 241, "pcapca": 241, "svcsvc": [241, 259, 261, 318], "numeric_preprocessor": 241, "imputation_mean": 241, "categorical_preprocessor": [241, 312], "imputation_const": 241, "onehot": [241, 307, 308, 407, 863, 996], "gender": [241, 871, 996], "classifier__n_estim": 241, "classifier__max_featur": 241, "classifier__max_depth": 241, "classifier__criterion": 241, "gridsearchcvinot": 241, "fittedgridsearchcv": 241, "plot_pipeline_displai": [241, 244], "svcifittedsvc": 242, "svc_disp": [242, 316, 1025], "rfc_disp": [242, 316, 1025], "plot_roc_curve_visualization_api": [242, 244], "transform_output": [243, 313, 465, 896, 1043, 1044], "slep018": [243, 381, 1043], "x_test_scal": 243, "894264": 243, "798301": 243, "271411": 243, "327605": 243, "244466": 243, "086944": 243, "327407": 243, "459074": 243, "660797": 243, "462234": 243, "576989": 243, "159419": 243, "933197": 243, "427329": 243, "414810": 243, "039497": 243, "275851": 243, "scaler2": 243, "x_test_np": 243, "x_test_df": 243, "feature_names_in_": [243, 313, 319, 393, 427, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 624, 625, 626, 627, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 1041, 1042, 1043, 1044], "num_pip": 243, "num_col": 243, "7621951219512195": 243, "log_reg": [243, 320], "config_context": [243, 365, 366, 402, 623, 896, 1035, 1041, 1044], "reset": [243, 361, 387, 531, 673, 674, 675, 838, 839, 867, 868, 878, 1030], "standardscalerifittedstandardscal": 243, "1088": 243, "151101": 243, "479229": 243, "188153": 243, "660": 243, "393297": 243, "263234": 243, "657": [243, 261, 352], "975455": 243, "532843": 243, "546068": 243, "1511007": 243, "47922861": 243, "18815268": 243, "39329747": 243, "26323428": 243, "97545464": 243, "53284267": 243, "54606834": 243, "plot_set_output": [243, 244], "539": 244, "auto_examples_miscellan": 244, "bayesiangaussianmixtur": [246, 247, 252, 794, 985, 1034, 1036, 1037, 1041, 1042], "weight_concentration_prior_typ": [246, 252, 793, 985, 1034], "dirichlet_distribut": [246, 793, 985, 1034], "dirichlet_process": [246, 252, 793, 985, 1034], "weight_concentration_prior": [246, 252, 793, 985], "finit": [246, 252, 365, 374, 393, 465, 535, 548, 579, 603, 606, 607, 608, 655, 724, 774, 781, 793, 819, 896, 916, 918, 919, 982, 985, 986, 1010, 1012, 1019, 1035, 1036, 1040, 1042, 1043], "covar": [246, 247, 252], "eig_val": 246, "eig_vec": 246, "unit_eig_vec": 246, "arctan2": [246, 248, 251], "56b4e9": 246, "plot_titl": 246, "weights_": [246, 793, 794, 1042], "covariances_": [246, 247, 248, 251, 252, 793, 794, 1035], "get_xaxi": [246, 294, 306], "set_tick_param": 246, "labelleft": 246, "0072b2": 246, "f0e442": 246, "d55e00": 246, "mean_precision_prior": [246, 252, 793], "nprior": 246, "gamma_0": [246, 252], "reg_covar": [246, 793, 794], "init_param": [246, 249, 252, 793, 794], "concentrations_prior": 246, "175": [246, 253, 385, 996], "plot_concentration_prior": [246, 253], "_base": [247, 381], "color_it": [247, 251, 252], "splot": [247, 252], "dp": [247, 252], "shouldn": [247, 252, 379], "em": [247, 248, 252, 440, 444, 456, 533, 793, 794, 985, 1042], "dpgmm": [247, 252, 1028, 1032, 1034], "plot_gmm": [247, 253], "ronweiss": 248, "make_ellips": 248, "datalim": 248, "skf": [248, 410, 814], "train_index": [248, 328, 410, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816], "test_index": [248, 328, 410, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816], "cov_typ": 248, "means_init": [248, 249, 794], "y_train_pr": 248, "train_accuraci": 248, "y_test_pr": 248, "test_accuraci": [248, 262], "plot_gmm_covari": [248, 253], "random_from_data": [249, 793, 794, 985], "diamond": 249, "colour": [249, 376, 414, 584, 987], "eventu": [249, 405, 406, 415, 590, 1010], "walsh": [249, 1040, 1042], "timer": [249, 385], "_samples_gener": 249, "extmath": [249, 350, 388, 405, 450, 1028, 1029, 1034, 1035, 1038, 1042, 1043, 1045], "row_norm": 249, "x_squared_norm": [249, 457], "get_initial_mean": 249, "times_init": 249, "relative_tim": 249, "ini": 249, "init_tim": 249, "2fx": 249, "plot_gmm_init": [249, 253], "shifted_gaussian": 250, "stretched_gaussian": 250, "score_sampl": [250, 289, 290, 291, 297, 393, 412, 466, 529, 538, 560, 674, 793, 794, 795, 798, 799, 809, 843, 844, 854, 858, 902, 992, 1031, 1036, 1038, 1040], "plot_gmm_pdf": [250, 253], "component_1": 251, "component_2": 251, "best_parameters_": 251, "gmm_bic_scor": 251, "callabl": [251, 265, 393, 410, 414, 415, 417, 418, 438, 440, 441, 442, 443, 444, 446, 447, 449, 454, 456, 457, 461, 462, 463, 464, 528, 530, 532, 534, 536, 542, 543, 554, 555, 556, 557, 558, 559, 561, 562, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 607, 608, 617, 625, 631, 636, 640, 656, 663, 668, 670, 672, 685, 688, 689, 693, 708, 716, 728, 738, 767, 770, 774, 775, 776, 777, 788, 789, 795, 798, 799, 801, 809, 817, 820, 821, 822, 823, 825, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 862, 871, 893, 894, 900, 901, 902, 903, 904, 947, 953, 956, 970, 975, 986, 996, 1028, 1032, 1035, 1036, 1037, 1038, 1040, 1042, 1044], "0x7fa013220550": 251, "gaussianmixturegaussianmixtur": 251, "param_n_compon": 251, "param_covariance_typ": 251, "829429": 251, "1084": 251, "038689": 251, "1114": 251, "517272": 251, "1148": 251, "512281": 251, "1179": 251, "977890": 251, "catplot": 251, "hue": [251, 261, 311, 376], "plot_gmm_select": [251, 253], "loos": [252, 258, 1001, 1036], "liberti": 252, "judgment": [252, 986], "panel": [252, 289, 306, 412, 1006], "primarili": [252, 266, 379, 393, 402, 406, 944, 1010, 1037, 1038], "covariance_prior": [252, 793], "397": [252, 253, 374], "plot_gmm_sin": [252, 253], "708": [253, 535, 537, 544, 746], "auto_examples_mixtur": 253, "mislabel": [255, 413, 988], "imbal": [255, 264, 410, 704, 725, 726, 734, 779, 780, 783, 784, 986], "set_printopt": 255, "titles_opt": 255, "plot_confusion_matrix": [255, 277, 316, 1038, 1039, 1040, 1041], "groupkfold": [256, 266, 397, 410, 591, 800, 801, 802, 803, 804, 813, 817, 819, 820, 821, 822, 825, 1016, 1034, 1041], "groupshufflesplit": [256, 410, 1016, 1034], "shufflesplit": [256, 263, 345, 410, 797, 803, 805, 815, 824, 1016, 1028, 1029, 1031, 1033, 1034], "stratifiedgroupkfold": [256, 1041], "stratifiedshufflesplit": [256, 337, 410, 1016, 1028, 1029, 1034, 1035, 1041], "1338": 256, "cmap_data": 256, "cmap_cv": 256, "coolwarm": [256, 334], "n_point": [256, 838, 839], "percentiles_class": 256, "perc": 256, "group_prior": 256, "visualize_group": 256, "yticklabel": [256, 350], "ngroup": 256, "nclass": 256, "plot_cv_indic": [256, 277], "tr": [256, 376, 383, 406, 408, 466, 467, 468, 469, 470, 471, 472, 473, 836], "this_cv": 256, "206": [256, 277], "plot_cv_predict": [257, 277], "fnr": [258, 695, 723], "det_curv": [258, 695, 778, 785, 986, 1040, 1041], "detcurvedisplai": [258, 319, 723, 1040, 1041], "ax_roc": 258, "ax_det": 258, "feedback": [258, 378, 379, 380, 394, 1006, 1036], "173": [258, 277, 385, 581], "plot_det": [258, 277], "n_imag": 259, "print_datafram": 259, "filtered_cv_result": 259, "mean_precis": 259, "std_precis": 259, "mean_recal": 259, "std_recal": 259, "mean_test_precis": [259, 265], "std_test_precis": 259, "mean_test_recal": 259, "std_test_recal": 259, "03f": 259, "refit_strategi": 259, "best_index": [259, 265], "precision_threshold": 259, "high_precision_cv_result": 259, "rank_test_recal": 259, "rank_test_precis": [259, 265], "best_recall_std": 259, "best_recal": 259, "best_recall_threshold": 259, "high_recall_cv_result": 259, "fastest_top_recall_high_precision_index": 259, "idxmin": 259, "854": [259, 301, 304], "063": [259, 261, 434], "039": [259, 747, 777, 986], "780": 259, "083": 259, "905": 259, "889": [259, 434], "074": 259, "890": 259, "695": [259, 312, 314], "743": [259, 1019], "611": [259, 261, 538], "028": [259, 351], "744": [259, 284], "618": [259, 290, 298], "004904": 259, "877206": 259, "069196": 259, "0x7fa02810fa60": 259, "807": [259, 261], "plot_grid_search_digit": [259, 277], "minimis": [260, 406, 410, 655, 656, 1002], "219": 260, "york": [260, 784, 793, 976, 986, 998], "usa": [260, 374, 895, 976, 983, 998, 999], "best_index_": [260, 265, 795, 798, 799, 809], "wenhao": [260, 1036, 1037], "zhang": [260, 406, 439, 661, 676, 682, 683, 686, 690, 754, 755, 982, 983, 984, 988, 1000, 1032, 1033, 1035, 1036, 1037, 1038, 1040, 1044], "wenhaoz": 260, "ucla": [260, 982], "lower_bound": 260, "best_score_idx": 260, "best_low_complex": 260, "fewest": [260, 624], "candidate_idx": 260, "param_reduce_dim__n_compon": 260, "241": [260, 277, 413, 564, 565], "plot_grid_search_refit_cal": [260, 277], "moon": [261, 301, 308, 350, 351, 519], "moder": [261, 379, 416, 451, 992], "352": [261, 385], "repeatedstratifiedkfold": [261, 279, 410, 810, 814, 1035], "repetit": [261, 279, 384, 410, 810, 811, 994, 1042], "rank_test_scor": [261, 269, 795, 809, 1034], "rename_axi": 261, "9400": 261, "079297": 261, "9300": 261, "077846": 261, "3_poli": 261, "9044": [261, 1035], "098776": 261, "2_poli": 261, "6852": 261, "169106": 261, "certainti": [261, 381, 738, 986], "repreat": 261, "model_scor": [261, 282], "regex": [261, 352, 461, 463], "_test_scor": [261, 469, 591, 1041], "lineplot": 261, "set1": [261, 293, 294], "labelpad": 261, "882561": 261, "783392": 261, "351390": 261, "746492": 261, "298688": 261, "355440": 261, "nadeau": [261, 1036], "bengio": [261, 855, 856, 975, 999], "framework": [261, 365, 381, 391, 393, 400, 406, 634, 685, 793, 982, 983, 990, 1004, 1007, 1010, 1028, 1034], "diebold": 261, "mariano": 261, "proven": [261, 980, 984, 1010], "replic": [261, 378, 381], "cdot": [261, 341, 403, 406, 411, 412, 416, 611, 612, 616, 619, 620, 864, 978, 980, 986, 990, 996], "sum_": [261, 270, 345, 403, 404, 406, 411, 412, 413, 535, 537, 544, 693, 751, 980, 982, 983, 986, 988, 990, 991, 993, 994, 996, 1000, 1001, 1002], "ij": [261, 294, 403, 406, 411, 535, 537, 544, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 982, 983, 986, 988, 991, 996, 1001], "corrected_std": 261, "crossvalid": [261, 275], "corrected_var": 261, "ddof": [261, 878, 889], "compute_corrected_ttest": 261, "t_stat": 261, "p_val": 261, "model_1_scor": 261, "model_2_scor": 261, "ncorrect": 261, "uncorrect": [261, 592, 595], "t_stat_uncorrect": 261, "p_val_uncorrect": 261, "benavoli": 261, "colleagu": 261, "conjug": [261, 449, 459, 669, 671, 684, 692, 982], "overlin": [261, 403], "t_post": 261, "ppf": 261, "infin": [261, 345, 538, 679, 680, 709, 819, 905, 917, 989], "minu": [261, 756, 986], "better_prob": 261, "cdf": 261, "773": [261, 645, 836], "essenti": [261, 321, 377, 381, 406, 410, 411, 506, 986, 989, 1007, 1010, 1036], "rope": 261, "rope_interv": 261, "rope_prob": 261, "432": [261, 408], "x_rope": 261, "uncertain": [261, 326, 378], "credibl": 261, "cred_interv": 261, "cred_int_df": 261, "000977": 261, "019023": 261, "005422": 261, "025422": 261, "016445": 261, "036445": 261, "bonferroni": 261, "n_comparison": 261, "pairwise_t_test": 261, "model_i": 261, "model_k": 261, "model_i_scor": 261, "model_k_scor": 261, "pairwise_comp_df": 261, "model_1": 261, "model_2": 261, "302": [261, 624], "565": 261, "276": 261, "851": 261, "pairwise_bayesian": 261, "worse_prob": 261, "pairwise_bayesian_df": 261, "018": [261, 306, 314, 469], "dietterich": [261, 828, 987], "1998": [261, 374, 376, 411, 413, 552, 553, 828, 833, 864, 987, 988, 990, 996, 1000], "bouckaert": 261, "frank": [261, 829, 987, 1033, 1037, 1038], "pacif": 261, "asia": [261, 996], "confer": [261, 374, 406, 411, 417, 436, 441, 447, 508, 532, 560, 693, 705, 722, 752, 854, 855, 856, 986, 992, 998, 1002], "discoveri": [261, 374, 385, 388, 406, 413, 415, 417, 441, 508, 552, 553, 560, 589, 592, 593, 595, 596, 597, 603, 717, 736, 779, 986, 998, 1010, 1042, 1043], "corani": 261, "dem\u0161ar": 261, "zaffalon": 261, "accompani": [261, 1036], "144": [261, 385, 1028], "460": [261, 277], "plot_grid_search_stat": [261, 277], "loader": [262, 329, 350, 372, 373, 374, 495, 496, 505, 1007, 1021, 1028, 1033, 1035, 1036, 1039], "857": [262, 351], "complementnb": [262, 350, 833, 834, 836, 837, 988, 1036, 1040, 1041, 1043], "tfidfvectorizertfidfvector": 262, "complementnbcomplementnb": 262, "vect__": 262, "clf__": 262, "parameter_grid": 262, "vect__max_df": 262, "vect__min_df": 262, "vect__ngram_rang": [262, 1021], "unigram": [262, 374, 414, 585, 586, 588, 1035], "bigram": [262, 414, 585, 586, 588, 1021], "vect__norm": 262, "clf__alpha": [262, 1021], "parallelis": [262, 465, 896, 1035], "random_search": [262, 269], "best_paramet": 262, "get_param": [262, 382, 393, 416, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 975, 1038, 1039, 1040, 1042, 1043], "816": [262, 468, 469], "ambigu": [262, 384, 414, 569, 709, 935, 989, 1037, 1039, 1041], "shorten_param": 262, "xanchor": 262, "yanchor": 262, "autom": [262, 383, 396, 689, 975, 982, 983, 986, 1006, 1010], "parallel_coordin": 262, "understood": [262, 379, 406, 943, 1018], "column_result": 262, "transform_func": 262, "fromkei": [262, 913], "ngram_rang": [262, 329, 414, 585, 586, 588], "color_continuous_scal": 262, "viridis_r": 262, "slide": [262, 641, 982, 1005, 1006], "intersect": [262, 334, 403, 406, 734], "undo": [262, 868, 1032], "stronger": [262, 640, 649, 655, 656, 669, 670, 671, 672, 673, 675, 684], "plot_grid_search_text_feature_extract": [262, 277], "ax_idx": 263, "resort": [263, 374, 552, 1038], "learning_curv": [263, 321, 397, 801, 981, 1031, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1045], "return_tim": [263, 822, 1038], "test_scores_nb": 263, "fit_times_nb": 263, "score_times_nb": 263, "test_scores_svm": 263, "fit_times_svm": 263, "score_times_svm": 263, "score_tim": [263, 410, 821, 822], "inflect": 263, "plot_learning_curv": [263, 277], "class_likelihood_ratio": [264, 986, 1043], "medicin": [264, 709, 986], "medic": [264, 410, 709, 982, 1010], "truli": [264, 268, 367, 709, 986], "odd": [264, 413, 511, 709, 986, 1035, 1036], "suppos": [264, 325, 365, 366, 381, 385, 408, 413, 414, 415, 554, 558, 561, 655, 656, 663, 665, 671, 672, 673, 738, 844, 898, 900, 903, 906, 908, 924, 990, 1037, 1039, 1045], "physiolog": [264, 376, 1019], "hopefulli": [264, 387, 1028], "indirect": [264, 380, 393], "bio": 264, "pos_lr": 264, "neg_lr": 264, "raise_warn": [264, 709, 972], "positive_likelihood_ratio": [264, 709], "negative_likelihood_ratio": [264, 709], "extract_scor": 264, "test_positive_likelihood_ratio": 264, "test_negative_likelihood_ratio": 264, "661086": 264, "724702": 264, "383973": 264, "054045": 264, "108843": 264, "986989": 264, "268147": 264, "034278": 264, "most_frequ": [264, 548, 624, 627, 848, 976, 986, 1036, 1038, 1040], "373333": 264, "5557": 264, "235430": 264, "stand": [264, 352, 383, 391, 411, 528, 534, 542, 543, 593, 606, 675, 702, 714, 732, 733, 753, 782, 784, 791, 985, 986, 992], "lr_base": 264, "pos_lr_bas": 264, "pos_lr_base_std": 264, "neg_lr_bas": 264, "neg_lr_base_std": 264, "plot_indic": 264, "scoring_on_bootstrap": 264, "n_bootstrap": [264, 1029], "results_for_preval": 264, "bootstrap_indic": 264, "default_rng": 264, "2039": 264, "507943": 264, "113516": 264, "207667": 264, "009778": 264, "3419": 264, "443238": 264, "125140": 264, "198766": 264, "008915": 264, "421087": 264, "123828": 264, "192913": 264, "006360": 264, "6196": [264, 1033], "409717": 264, "164009": 264, "193949": 264, "005861": 264, "7578": [264, 1035], "334795": 264, "175298": 264, "189267": 264, "005840": 264, "8963": 264, "197666": 264, "238955": 264, "185654": 264, "005027": 264, "plot_likelihood_ratio": [264, 277], "scorer_nam": [265, 795, 809], "predefin": [265, 808, 975, 989, 1016, 1043], "403": 265, "maskedarrai": [265, 1034], "param_min_samples_split": 265, "sample_score_mean": 265, "sample_score_std": 265, "std_": [265, 1033], "rank_test_": 265, "best_scor": 265, "mean_test_": 265, "plot_multi_metric_evalu": [265, 277], "cawlei": [266, 986], "talbot": 266, "mach": [266, 404, 410, 590, 591], "2079": 266, "2107": 266, "007581": 266, "007833": 266, "num_trial": 266, "x_iri": [266, 1020], "y_iri": [266, 1020], "p_grid": 266, "non_nested_scor": 266, "nested_scor": 266, "leaveoneout": [266, 410, 1016], "leaveonegroupout": [266, 410, 796, 803, 804, 1016, 1034], "inner_cv": 266, "outer_cv": 266, "non_nest": 266, "score_differ": 266, "211": [266, 321, 328, 874, 886], "non_nested_scores_lin": 266, "nested_lin": 266, "difference_plot": 266, "853": [266, 277], "plot_nested_cross_validation_iri": [266, 277], "permutation_test_scor": [267, 397, 410, 1028, 1035, 1040], "plant": [267, 270, 271, 372, 986, 1023], "uncorrel": [267, 375, 525, 531, 538, 986, 1019], "n_uncorrelated_featur": 267, "x_rand": 267, "undergo": 267, "score_iri": 267, "perm_scores_iri": 267, "pvalue_iri": 267, "n_permut": [267, 410, 823], "score_rand": 267, "perm_scores_rand": 267, "pvalue_rand": 267, "evid": [267, 350, 387, 406, 410, 411, 413, 641, 793, 985], "ndata": 267, "destroi": [267, 414, 791, 867, 996], "ojala": [267, 410, 823], "garriga": [267, 410, 823], "341": [267, 277], "plot_permutation_tests_for_classif": [267, 277], "t_p": 268, "plu": [268, 376, 384, 676, 829, 832, 987, 1000], "f_p": 268, "f_n": 268, "denomin": [268, 414, 419, 472, 587, 701, 753, 980], "stairstep": 268, "ap": [268, 704, 705, 986], "sum_n": [268, 704, 986], "r_n": [268, 704, 986], "p_n": [268, 704, 986], "nth": [268, 704, 986], "r_k": 268, "p_k": [268, 986], "trapezoid": [268, 703, 704, 986], "binar": [268, 270, 271, 371, 373, 405, 750, 833, 862, 863, 865, 869, 871, 879, 882, 986, 988, 1012, 1023, 1042, 1044], "average_precision_scor": [268, 697, 703, 705, 778, 784, 986, 1028, 1031, 1035, 1036, 1042, 1044], "mt19937": [268, 273, 1039], "0x7fa02967e140": 268, "precisionrecalldisplai": [268, 319, 778, 780, 783, 986, 1038, 1041, 1044, 1045], "label_binar": [268, 270, 865, 1032], "average_precis": [268, 697, 704, 738, 986], "prevalence_pos_label": [268, 697], "setup": [268, 270, 365, 377, 381, 385, 387, 989, 1013], "f_score": 268, "extens": [268, 270, 289, 365, 366, 373, 374, 377, 380, 382, 383, 387, 388, 391, 400, 406, 411, 493, 500, 531, 737, 929, 937, 983, 985, 986, 1005, 1006, 1010, 1028, 1034, 1041, 1042, 1044], "361": [268, 277, 374, 413, 552, 553], "plot_precision_recal": [268, 277], "deem": [269, 270, 531, 994, 1041], "05063247886572012": 269, "13822072286080167": 269, "010877306503748912": 269, "9226260871125187": 269, "023": [269, 899, 994], "7271482064048191": 269, "25183501383331797": 269, "993": 269, "1111111111111111": 269, "5555555555555556": 269, "n_top": 269, "param_dist": [269, 273, 318], "n_iter_search": 269, "plot_randomized_search": [269, 277], "unambigu": [270, 987, 1034], "notion": [270, 341, 351, 367, 391, 406, 411, 413, 982, 986], "scheme": [270, 289, 312, 313, 374, 393, 406, 410, 412, 414, 563, 587, 655, 656, 702, 808, 865, 866, 869, 871, 875, 879, 882, 887, 898, 903, 975, 982, 996, 1000, 1028, 1036, 1039, 1040, 1045], "harder": [270, 271, 310, 374, 378, 381, 387, 406, 512, 558, 559, 1009], "bulk": [270, 417, 441], "scrutin": 270, "labelbinar": [270, 393, 737, 827, 862, 871, 879, 882, 987, 1012, 1031, 1032, 1033, 1037, 1042], "y_onehot_test": 270, "class_id": [270, 271], "nvirginica": 270, "tp_c": 270, "fn_c": 270, "fp_c": 270, "tn_c": 270, "briefli": [270, 378, 392, 413, 975, 1038], "nreceiv": 270, "micro_roc_auc_ovr": 270, "mcclish": [270, 784], "deci": 270, "1989": [270, 632, 784, 855, 856, 982, 989], "jul": 270, "fpr_grid": 270, "mean_tpr": [270, 271], "interp": [270, 271, 337], "macro_roc_auc_ovr": 270, "deeppink": 270, "aqua": 270, "role": [270, 365, 378, 391, 411, 1004], "pair_list": 270, "pair_scor": 270, "label_a": 270, "label_b": 270, "a_mask": 270, "b_mask": 270, "ab_mask": 270, "a_tru": 270, "b_true": 270, "idx_a": 270, "idx_b": 270, "fpr_a": 270, "tpr_a": 270, "fpr_b": 270, "tpr_b": 270, "macro_roc_auc_ovo": 270, "ovo_tpr": 270, "pool": [270, 391, 442, 632, 1007, 1039], "612": [270, 277, 786], "plot_roc": [270, 277], "mean_fpr": 271, "viz": [271, 386], "interp_tpr": 271, "mean_auc": 271, "std_auc": 271, "std_tpr": 271, "tprs_upper": 271, "tprs_lower": 271, "plot_roc_crossv": [271, 277], "halvinggridsearchcv": [272, 273, 318, 397, 576, 799, 975, 1040, 1042, 1043, 1045], "1e4": [272, 656, 676, 892, 998], "gsh": 272, "gsh_time": 272, "gs_time": 272, "make_heatmap": 272, "is_sh": 272, "make_cbar": 272, "param_c": [272, 795], "param_gamma": [272, 795, 809], "sh": [272, 383, 387, 975], "scores_matrix": 272, "pivot_t": 272, "aggfunc": 272, "0e": [272, 546, 547], "get_xticklabel": 272, "rotation_mod": 272, "cbar_ax": 272, "plot_successive_halving_heatmap": [272, 277], "rsh": [273, 318], "0x7fa029151840": 273, "_distn_infrastructur": 273, "rv_discrete_frozen": 273, "0x7fa014d700d0": 273, "0x7fa05819e2e0": 273, "halvingrandomsearchcvifittedhalvingrandomsearchcv": 273, "params_str": 273, "drop_dupl": 273, "n_resources_": [273, 798, 799, 975], "nn_candid": 273, "n_candidates_": [273, 798, 799, 975], "n_iterations_": [273, 798, 799], "multialign": 273, "plot_successive_halving_iter": [273, 277], "n_samples_train": [274, 900, 901, 902, 903, 904], "n_samples_test": [274, 900, 901, 902, 903, 904, 989, 996], "train_error": 274, "test_error": 274, "i_alpha_optim": 274, "alpha_optim": 274, "00020991037201085544": 274, "plot_train_error_vs_test_error": [274, 277], "nonlinear": [275, 319, 641, 685, 686, 690, 693, 864, 982, 983, 991, 996], "true_fun": 275, "polynomial_featur": 275, "195": [275, 277, 490, 491], "plot_underfitting_overfit": [275, 277], "validationcurvedisplai": [276, 981, 1044], "subset_mask": 276, "isin": [276, 326], "param_rang": [276, 322, 345, 817, 825, 981, 1044], "468": [276, 277], "plot_validation_curv": [276, 277], "auto_examples_model_select": 277, "ovo": [279, 316, 784, 826, 900, 903, 986, 987, 1001], "onevsoneclassifi": [279, 397, 827, 828, 1029, 1031, 1032, 1034, 1035, 1037, 1040, 1042, 1045], "review": [279, 312, 365, 374, 381, 382, 383, 384, 385, 391, 394, 410, 411, 532, 538, 986, 996, 1013], "sort_index": 279, "class_protein_loc": 279, "cyt": 279, "erl": 279, "exc": 279, "me1": 279, "me2": 279, "me3": 279, "mit": [279, 374, 385, 406, 416, 607, 608, 611, 616, 619, 640, 663, 664, 673, 835, 979], "244": [279, 581], "nuc": 279, "pox": 279, "vac": 279, "outputcodeclassifi": [279, 397, 826, 827, 1035, 1040, 1044, 1045], "code_s": [279, 828, 987], "ovo_tre": 279, "ovr_tre": 279, "ecoc": 279, "cv_results_tre": 279, "cv_results_ovo": 279, "cv_results_ovr": 279, "cv_results_ecoc": 279, "glanc": [279, 378], "tree_optim": 279, "unifi": [279, 380, 388, 391, 392, 413, 634, 1006, 1028], "allwein": 279, "erin": [279, 1040], "yoram": [279, 731], "singer": [279, 663, 664, 731, 982, 986, 1000, 1001], "141": [279, 531, 898, 987], "defens": 279, "793": [279, 280], "plot_multiclass_overview": [279, 280], "auto_examples_multiclass": 280, "classifierchain": [282, 393, 397, 830, 832, 1035, 1040, 1043], "assembl": [282, 313, 352, 858], "multitask": [282, 414, 987], "jaccard": [282, 403, 447, 454, 696, 700, 716, 725, 730, 734, 774, 775, 776, 792, 989, 1036, 1037], "adam": [282, 301, 855, 856, 990, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "kleczewski": [282, 1035, 1036], "yeast": [282, 829], "417": 282, "103": [282, 284, 374, 413, 494, 552, 553, 1028], "40597": 282, "jaccard_scor": [282, 700, 725, 730, 792, 986, 1037, 1040], "base_lr": [282, 829], "y_pred_ovr": 282, "ovr_jaccard_scor": 282, "y_pred_chain": 282, "chain_jaccard_scor": 282, "y_pred_ensembl": 282, "ensemble_jaccard_scor": 282, "x_po": 282, "takeawai": 282, "588": [282, 283], "plot_classifier_chain_yeast": [282, 283], "auto_examples_multioutput": 283, "kneighborstransform": [284, 286, 316, 850, 989, 1038, 1042, 1043], "nmslib": 284, "pynndesc": 284, "pip": [284, 316, 317, 318, 319, 320, 321, 322, 366, 377, 379, 383, 385, 396, 402, 1002], "wrapper": [284, 385, 388, 410, 416, 541, 617, 665, 668, 738, 898, 982, 1002, 1006, 1032, 1040], "pynndescenttransform": 284, "csr_matrix": [284, 317, 437, 441, 449, 493, 531, 541, 554, 555, 556, 557, 560, 561, 562, 563, 585, 590, 591, 711, 824, 871, 873, 900, 901, 903, 904, 906, 907, 908, 909, 987, 996, 1000, 1001, 1002, 1043], "nmslibtransform": 284, "sw": 284, "n_samples_fit_": [284, 840, 841, 842, 844, 846, 848, 849, 850], "cosinesimil": 284, "nmslib_": 284, "adddatapointbatch": 284, "createindex": 284, "n_samples_transform": [284, 842, 850], "thread": [284, 317, 320, 377, 391, 393, 406, 413, 830, 831, 952, 953, 954, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045], "num_thread": 284, "knnquerybatch": 284, "benchmark": [284, 318, 351, 352, 365, 372, 374, 379, 391, 396, 399, 404, 465, 512, 896], "mnist_10000": 284, "mnist_20000": 284, "20_000": 284, "tsne_param": 284, "barnes_hut": [284, 689, 1035, 1036], "parallel_batch_queri": 284, "msg": [284, 970], "transformer_nam": 284, "longest": 284, "fit_dur": 284, "transform_dur": 284, "823": 284, "884": 284, "769": 284, "733": 284, "448": 284, "759": 284, "numba": [284, 1007], "cold": 284, "nearestneighbor": [284, 320, 396, 406, 417, 441, 443, 445, 458, 685, 686, 690, 840, 841, 842, 844, 848, 849, 850, 989, 1028, 1032, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "i_ax": 284, "828": 284, "955": [284, 410, 651], "994": 284, "brute": [284, 391, 401, 410, 417, 441, 443, 447, 454, 629, 630, 685, 686, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 993, 1023, 1032, 1036, 1040, 1043, 1044, 1045], "spent": [284, 312, 380, 385, 822, 1043], "approximate_nearest_neighbor": [284, 298], "slow": [286, 306, 350, 365, 373, 377, 379, 411, 414, 444, 696, 872, 873, 877, 900, 903, 935, 983, 989, 1007, 1020, 1035], "temporarydirectori": [286, 316], "graph_model": 286, "classifier_model": 286, "sklearn_graph_cache_": 286, "tmpdir": [286, 316], "full_model": 286, "classifier__n_neighbor": 286, "grid_model": 286, "plot_caching_nearest_neighbor": [286, 298], "beforehand": [287, 1002], "entitl": [287, 444, 608, 840, 978], "knn__weight": 287, "unifom": 287, "plot_classif": [287, 298], "79269019073225": 288, "kerneldens": [288, 289, 297, 412, 1030, 1036, 1037, 1041, 1042, 1043], "new_data": [288, 381], "4x11": 288, "real_data": 288, "set_clim": 288, "167": [288, 298, 385, 1028], "plot_digits_kde_sampl": [288, 298], "block": [289, 306, 320, 374, 376, 379, 384, 387, 393, 403, 406, 409, 412, 449, 450, 459, 470, 476, 477, 485, 486, 508, 510, 692, 954, 989, 991], "wildli": [289, 985], "kd": [289, 406, 412, 989, 1036, 1037, 1038], "jakevdp": [289, 297], "aaaaff": [289, 292], "tophat": [289, 412, 838, 839, 843], "log_den": 289, "x_src": 289, "format_func": 289, "ih": 289, "epanechnikov": [289, 412, 838, 839, 843], "funcformatt": 289, "nullloc": 289, "true_den": 289, "586": [289, 298], "plot_kde_1d": [289, 298], "plot_lof_novelty_detect": [290, 298], "x_inlier": 291, "n_error": 291, "x_score": [291, 479, 480, 481, 482], "legend_handl": 291, "handlerpathcollect": 291, "update_legend_marker_s": 291, "update_from": 291, "set_siz": 291, "handler_map": 291, "update_func": 291, "081": [291, 298, 321, 323, 357, 360, 994], "plot_lof_outlier_detect": [291, 298], "cmap_light": [292, 295], "ffaaaa": 292, "aaffaa": 292, "cmap_bold": [292, 295], "00ff00": 292, "763": [292, 298], "plot_nca_classif": [292, 298], "neighborhoodcomponentanalysi": 293, "dim_reduction_method": 293, "acc_knn": 293, "x_embed": [293, 294, 689, 693, 847, 989], "ntest": 293, "801": [293, 298], "plot_nca_dim_reduct": [293, 298], "logsumexp": [294, 1035], "get_yaxi": [294, 306], "link_thickness_i": 294, "diff_embed": 294, "dist_embed": 294, "einsum": 294, "exp_dist_embed": 294, "relate_point": 294, "pt_i": 294, "pt_j": 294, "plot_nca_illustr": [294, 298], "8133333333333334": 295, "nearestcentroid": [295, 350, 987, 989, 1028, 1032, 1035, 1040, 1043], "darkblu": 295, "shrink_threshold": [295, 845, 989, 1028, 1040], "plot_nearest_centroid": [295, 298], "barycent": [296, 1028], "plot_regress": [296, 298], "geospati": [297, 412], "haversin": [297, 412, 696, 758, 760, 989, 1037, 1040], "latitud": [297, 306, 374, 495, 696, 760], "longitud": [297, 306, 374, 495, 696, 760], "xtrain": 297, "ytrain": 297, "radian": [297, 696, 760], "land_mask": 297, "ball_tre": [297, 417, 441, 443, 447, 454, 685, 686, 840, 841, 842, 843, 844, 846, 848, 849, 850, 989, 1028, 1045], "ocean": 297, "plot_species_kd": [297, 298], "771": 298, "auto_examples_neighbor": 298, "combat": [300, 411], "lesser": [300, 393, 439, 538, 982], "curvatur": 300, "835": [300, 304], "plot_mlp_alpha": [300, 304], "bfg": [301, 607, 608, 645, 646, 655, 666, 669, 671, 677, 684, 989, 990, 1043], "980000": 301, "096950": 301, "momentum": [301, 855, 856, 990], "049530": 301, "nesterov": [301, 855, 856, 990, 1044], "049540": 301, "360000": 301, "978444": 301, "860000": 301, "503452": 301, "504185": 301, "045311": 301, "956038": 301, "243802": 301, "992766": 301, "041297": 301, "993879": 301, "042898": 301, "638843": 301, "855465": 301, "912632": 301, "290584": 301, "909293": 301, "318387": 301, "991653": 301, "045934": 301, "840000": 301, "601052": 301, "157334": 301, "154453": 301, "692470": 301, "689143": 301, "689751": 301, "150527": 301, "850000": 301, "341523": 301, "336188": 301, "335919": 301, "689015": 301, "830000": 301, "512595": 301, "513034": 301, "930000": 301, "170087": 301, "schedul": [301, 366, 673, 674, 675, 855, 856, 1000, 1010, 1035], "nesterovs_momentum": [301, 855, 856], "invscal": [301, 673, 674, 675, 855, 856, 1000], "plot_arg": 301, "plot_on_dataset": 301, "nlearn": 301, "loss_": [301, 855, 856, 990, 1042], "loss_curve_": [301, 855, 856], "data_set": 301, "get_lin": 301, "plot_mlp_training_curv": [301, 304], "28x28": 302, "784": 302, "throw": [302, 388, 917, 1032, 1035, 1036, 1037, 1038, 1042], "infrastructur": [302, 322, 1004, 1006, 1007], "44139186": 302, "19174891": 302, "13983521": 302, "11378556": 302, "09443967": 302, "07846529": 302, "06506307": 302, "05534985": 302, "986429": 302, "953061": 302, "plot_mnist_filt": [302, 304], "greyscal": 303, "bernoulli": [303, 414, 415, 833, 834, 835, 836, 837, 854, 855, 856, 861, 982, 996, 1008, 1023, 1028], "bernoullirbm": [303, 855, 856, 991, 996, 1030, 1031, 1040, 1042, 1045], "yann": [303, 1028, 1030], "dauphin": [303, 1030], "gabriel": [303, 1036, 1037, 1038, 1041, 1042], "synnaev": 303, "convolv": 303, "minmax_scal": [303, 306, 868, 1033, 1036], "nudge_dataset": 303, "1px": 303, "direction_vector": 303, "apply_along_axi": 303, "feature_rang": [303, 868, 884, 996, 1030, 1040], "cg": [303, 655, 656, 669, 671, 684, 982, 1032, 1033, 1035, 1039, 1041, 1042, 1045], "rbm": [303, 854, 855, 856, 991], "rbm_features_classifi": 303, "6000": [303, 624], "raw_pixel_classifi": 303, "logisticregressionifittedlogisticregress": 303, "_classif": 303, "1498": 303, "undefinedmetricwarn": [303, 725, 726, 779, 780, 783, 1037], "zero_divis": [303, 710, 725, 726, 734, 779, 780, 783, 1038, 1040, 1044], "207": [303, 1028], "154": [303, 648, 987], "plot_rbm_logistic_classif": [303, 304], "auto_examples_neural_network": 304, "incom": [306, 374, 437], "unscal": [306, 311, 982, 986, 1036, 1042], "unterthin": [306, 1031, 1032, 1033], "medinc": [306, 318, 374], "houseag": [306, 318, 374], "averoom": [306, 318, 374], "room": [306, 374, 384, 406, 1009], "avebedrm": [306, 374], "bedroom": [306, 374], "aveoccup": [306, 318, 374], "features_idx": 306, "quantile_rang": [306, 876, 888, 1034], "yeo": [306, 310, 874, 886, 996, 1036, 1042, 1044], "cox": [306, 310, 874, 886, 996, 1036, 1044], "plasma": 306, "plasma_r": 306, "create_ax": 306, "bottom_h": 306, "left_h": 306, "rect_scatt": 306, "rect_histx": 306, "rect_histi": 306, "ax_scatt": 306, "ax_histx": 306, "ax_histi": 306, "ax_scatter_zoom": 306, "ax_histx_zoom": 306, "ax_histy_zoom": 306, "rect_colorbar": 306, "ax_colorbar": 306, "plot_distribut": 306, "hist_nbin": 306, "x0_label": 306, "x1_label": 306, "hist_x1": 306, "hist_x0": 306, "aesthet": [306, 1002, 1033], "tick_bottom": 306, "tick_left": 306, "outward": 306, "ec": [306, 527], "make_plot": 306, "item_idx": 306, "ax_zoom_out": 306, "ax_zoom_in": 306, "zoom_in_percentile_rang": 306, "cutoffs_x0": 306, "cutoffs_x1": 306, "non_outliers_mask": 306, "colorbarbas": 306, "OR": [306, 406, 417, 441, 1039], "indistinguish": 306, "quadrant": 306, "plot_all_sc": [306, 314], "straightforward": [307, 378, 411, 1010], "anywher": 307, "qinhanmin2005": 307, "sina": [307, 1041], "rnd": 307, "enc": [307, 309, 320, 322, 871, 872, 996], "x_bin": 307, "line_bin": 307, "plot_discret": [307, 314], "get_nam": 308, "broader": [308, 982], "logisticregression__c": 308, "linearsvc__c": 308, "kbinsdiscretizer__n_bin": 308, "gradientboostingclassifier__learning_r": 308, "svc__c": [308, 858], "cm_piyg": 308, "piyg": 308, "b30065": 308, "178000": 308, "est_idx": 308, "plot_discretization_classif": [308, 314], "centers_0": 309, "centers_1": 309, "x_list": 309, "grid_encod": 309, "stripe": 309, "plot_discretization_strategi": [309, 314], "powertransform": [310, 875, 886, 976, 996, 1036, 1039, 1042, 1044], "johnwon": 310, "weibul": 310, "bimod": [310, 412], "ineffect": [310, 996, 1036, 1037], "eric": [310, 1031, 1032, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "ericchang2017": 310, "northwestern": [310, 655], "contact": [310, 391, 1006], "font_siz": 310, "bc": 310, "qt": [310, 875], "x_lognorm": [310, 996], "x_chisq": 310, "chisquar": 310, "x_weibul": 310, "x_gaussian": 310, "x_uniform": 310, "loc_a": 310, "loc_b": 310, "105": 310, "x_a": 310, "x_b": 310, "x_bimod": 310, "d81b60": 310, "0188ff": 310, "ffc107": 310, "b7a2ff": 310, "2ec5ac": 310, "figaspect": 310, "axes_idx": 310, "axes_list": 310, "x_trans_bc": 310, "lmbda_bc": 310, "lambdas_": [310, 874, 1041, 1044], "x_trans_yj": 310, "lmbda_yj": 310, "x_trans_qt": 310, "ax_origin": 310, "ax_bc": 310, "ax_yj": 310, "ax_qt": 310, "x_tran": [310, 322, 381, 402, 439, 461, 874, 879, 886, 996], "meth_nam": 310, "lmbda": 310, "961": [310, 314, 855], "plot_map_data_to_norm": [310, 314], "involv": [311, 313, 316, 337, 341, 365, 367, 374, 379, 383, 393, 394, 409, 416, 696, 826, 827, 983, 987, 989, 993, 1001, 1006, 1010, 1019, 1036], "kneighbor": [311, 320, 840, 841, 842, 844, 846, 989, 1032, 1037, 1041, 1042, 1043, 1044], "obatin": 311, "tyler": [311, 1035, 1041, 1042, 1043], "lanigan": [311, 1035], "tylerlanigan": 311, "sebastian": [311, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "raschka": [311, 1033, 1034, 1035, 1036, 1037, 1040], "sebastianraschka": 311, "alcohol": [311, 376], "malic": [311, 376], "acid": [311, 376], "scaled_x_train": 311, "x_plot_scal": 311, "fit_and_plot_model": 311, "scaled_pca": 311, "x_train_transform": [311, 361, 410], "x_train_std_transform": 311, "first_pca_compon": 311, "target_class": 311, "repercuss": 311, "logisticregressioncv": [311, 393, 397, 655, 982, 987, 1032, 1033, 1034, 1036, 1037, 1038, 1042, 1043, 1045], "unscaled_clf": 311, "scaled_clf": 311, "y_pred_scal": 311, "y_proba_sc": 311, "0825": 311, "vastli": 311, "plot_scaling_import": [311, 314], "targetencod": [312, 313, 393, 871, 872, 976, 996, 1006, 1044, 1045], "wine_review": 312, "42074": 312, "countri": [312, 983], "provinc": 312, "region_1": 312, "region_2": 312, "wineri": 312, "tremend": [312, 413], "variet": 312, "hail": 312, "martha": 312, "vineyard": 312, "235": 312, "napa": 312, "vallei": 312, "cabernet": 312, "sauvignon": 312, "heitz": 312, "spain": 312, "ripe": 312, "aroma": 312, "blackberri": 312, "cassi": 312, "carodorum": 312, "selecci\u00f3n": 312, "reserva": 312, "northern": 312, "toro": 312, "tinta": 312, "bodega": 312, "carmen": 312, "rodr\u00edguez": 312, "watson": [312, 407], "honor": 312, "late": [312, 367], "harvest": 312, "knight": 312, "sonoma": 312, "blanc": 312, "macaulei": 312, "oak": 312, "reserv": [312, 558, 559, 1010, 1012], "oregon": 312, "willamett": 312, "pinot": 312, "noir": 312, "ponzi": 312, "franc": [312, 760], "b\u00e9gude": 312, "aft": [312, 1031], "br\u00fblade": 312, "provenc": 312, "bandol": 312, "one_hot": 312, "max_categori": [312, 320, 322, 871, 872, 996, 1042, 1044], "target_typ": [312, 879, 922, 949, 1045], "evaluate_model_and_stor": 312, "rmse_test_scor": 312, "rmse_train_scor": 312, "rmse_test_mean": 312, "rmse_test_std": 312, "rmse_train_mean": 312, "rmse_train_std": 312, "n_unique_categori": 312, "nuniqu": 312, "14810": 312, "1236": 312, "632": 312, "455": 312, "workaround": [312, 379, 795, 809], "high_cardinality_featur": 312, "low_cardinality_featur": 312, "mixed_encoded_preprocessor": 312, "high_cardin": 312, "low_cardin": 312, "mixed_pip": 312, "high_cardinalityindex": 312, "targetencodertargetencod": 312, "low_cardinalityindex": 312, "mixed_target": 312, "name_to_color": 312, "rmse_": 312, "_mean": 312, "_std": 312, "explod": 312, "unrel": [312, 366, 384, 387, 414, 512], "plot_target_encod": [312, 314], "near_uniqu": 313, "50_000": [313, 351], "n_categori": [313, 834, 872, 996], "kbin": [313, 321], "x_inform": 313, "permuted_categori": 313, "x_shuffl": 313, "catastroph": [313, 759, 1007], "x_near_unique_categori": 313, "raw_model": 313, "0049896314219657345": 313, "00457762158159003": 313, "model_with_cf": 313, "cf": [313, 406, 409, 439, 697, 982, 996, 1007], "8000184677460285": 313, "7927845601690948": 313, "coefs_cf": 313, "target_encod": 313, "x_train_no_cf_encod": 313, "x_test_no_cf_encod": 313, "model_no_cf": 313, "858486250088675": 313, "6338211367110066": 313, "coefs_no_cf": 313, "290": [313, 314, 326, 685, 686, 690, 983], "plot_target_encoder_cross_v": [313, 314], "985": 314, "auto_examples_preprocess": 314, "announc": [316, 317, 318, 319, 320, 321, 322, 383], "latest": [316, 317, 318, 319, 320, 321, 322, 377, 379, 383, 385, 387, 1002, 1004, 1042], "upgrad": [316, 317, 318, 319, 320, 321, 322, 396, 1007, 1028, 1033, 1036], "conda": [316, 317, 318, 319, 320, 321, 322, 366, 379, 380, 382, 383, 385, 387, 396, 399, 1002], "forg": [316, 317, 318, 319, 320, 321, 322, 366, 380, 382, 383, 387, 396], "plot_roc_curv": [316, 1038, 1040], "plot_precision_recall_curv": [316, 1038, 1040, 1041], "stackingclassifi": [316, 361, 393, 397, 413, 565, 1038, 1039, 1040, 1041, 1042, 1043], "9473684210526315": 316, "radiusneighborstransform": [316, 842, 989, 1038, 1040, 1042, 1043], "sklearn_cache_": 316, "isomap__n_neighbor": 316, "nan_euclidean_dist": [316, 758, 976, 1038], "ccp_alpha": [316, 355, 554, 555, 556, 557, 561, 562, 906, 907, 908, 909, 1002, 1038], "tree_": [316, 355, 359, 843, 906, 907, 908, 909], "node_count": [316, 355, 359, 906, 907, 908, 909], "check_estim": [316, 381, 393, 930, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043], "pytest": [316, 366, 377, 379, 381, 382, 396, 399, 402, 929, 930, 1038, 1041], "estimator_check": [316, 381, 393, 405, 1035, 1036, 1038, 1039, 1042, 1043, 1044], "parametrize_with_check": [316, 381, 929, 1038, 1039], "test_sklearn_compatible_estim": [316, 930], "decision_function_shap": [316, 346, 900, 903, 1001, 1033, 1034, 1037, 1038], "9930104700854702": 316, "plot_release_highlights_0_22_0": [316, 323], "await": 317, "lam": [317, 318, 1039], "35776189065725783": 317, "42425183539869404": 317, "openmp": [317, 377, 382, 391, 393, 406, 413, 954, 1039, 1041, 1044], "694193618729172": 317, "10k": [317, 444], "monotoinc": 317, "gbdt_cst": 317, "999791942438998": 317, "584": [317, 323], "plot_release_highlights_0_23_0": [317, 323], "art": [318, 385, 646, 689, 1006, 1010], "footprint": [318, 321, 365, 367, 406, 411, 552, 553, 554, 555, 560, 561, 562, 563, 1030, 1033, 1034, 1039, 1040, 1043], "yarowski": [318, 895, 999], "selftrainingclassifi": [318, 328, 329, 330, 397, 999, 1040], "random_unlabeled_point": [318, 893, 894, 895], "self_training_model": [318, 895], "selftrainingclassifierifittedselftrainingclassifi": 318, "7363": 318, "linear_baselin": 318, "714": 318, "decisiontreeregressorifitteddecisiontreeregressor": 318, "effort": [318, 379, 385, 1006, 1010, 1039, 1041], "262": [318, 323, 1028], "plot_release_highlights_0_24_0": [318, 323], "l2_regular": [319, 413, 558, 559], "max_bin": [319, 320, 413, 558, 559], "quantileregressor": [319, 982, 986, 1041, 1042, 1043], "min_": [319, 406, 413, 868, 982, 996, 1000, 1001, 1002], "sum_i": [319, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 977, 978, 982, 984, 986, 991], "pb_q": [319, 982], "_1": [319, 341, 408, 411, 414, 528, 534, 535, 537, 542, 543, 544, 643, 644, 649, 650, 651, 652, 653, 657, 658, 659, 660, 678, 679, 680, 681, 762, 982, 984, 986, 1001], "get_feature_nam": [319, 1036, 1037, 1039, 1040, 1041], "pet": [319, 784, 986], "dog": [319, 320, 322, 579, 779, 879, 996], "fish": 319, "pet_cat": 319, "pet_dog": 319, "pet_fish": 319, "plot_": [319, 396], "plot_release_highlights_1_0_0": [319, 323], "x_1d": 320, "hist_quantil": 320, "log_reg_input_featur": 320, "gather": [320, 322, 387, 394, 405, 406, 996, 1010], "min_frequ": [320, 322, 871, 872, 996, 1042, 1044], "rabbit": [320, 322, 996], "snake": [320, 322, 579, 879, 996], "infrequent_categories_": [320, 322, 871, 872, 879, 996], "x0_cat": [320, 996], "x0_rabbit": [320, 996], "x0_infrequent_sklearn": [320, 996], "refactor": [320, 1028, 1030, 1031, 1032, 1038, 1041, 1042, 1043], "radius_neighbor": [320, 846, 848, 849, 850, 1032, 1037, 1038, 1040, 1041, 1042, 1043], "pairwise_distances_argmin_min": [320, 775, 1031, 1036, 1042, 1043, 1044], "radiusneighborsclassifi": [320, 840, 841, 846, 849, 987, 989, 1028, 1030, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "radiusneighborsregressor": [320, 840, 841, 846, 848, 989, 1028, 1030, 1036, 1038, 1040, 1041, 1042, 1043, 1044], "trustworthi": [320, 1036, 1037, 1042, 1043, 1044, 1045], "labelpropag": [320, 327, 894, 895, 987, 999, 1029, 1034, 1035, 1038, 1039, 1040, 1042, 1043, 1044], "labelspread": [320, 325, 326, 327, 329, 330, 893, 895, 987, 999, 1029, 1034, 1035, 1038, 1039, 1042, 1043, 1044], "blog": [320, 365, 379, 385, 387, 394, 1039], "cython": [320, 365, 366, 368, 377, 379, 382, 388, 391, 396, 399, 402, 405, 406, 413, 505, 996, 997, 1000, 1001, 1006, 1007, 1028, 1031, 1032, 1034, 1040, 1043, 1044, 1045], "readili": [320, 411, 1002, 1010], "true_w": 320, "true_h": 320, "x_reconstruct": [320, 479, 480, 481, 580], "00364": 320, "divis": [320, 406, 414, 587, 588, 591, 709, 710, 725, 726, 734, 742, 779, 780, 783, 986, 1020, 1032, 1036, 1037, 1040, 1044], "bisect_km": 320, "901": [320, 323], "plot_release_highlights_1_1_0": [320, 323], "video": [321, 368, 373, 382, 500, 987, 1010, 1013], "sepal_col": 321, "petal_col": 321, "x_out": [321, 862, 871, 872], "114": [321, 1028], "052506": 321, "592373": 321, "189830": 321, "973554": 321, "416010": 321, "630382": 321, "765012": 321, "362176": 321, "021849": 321, "788808": 321, "hist_no_interact": 321, "v1": [321, 373, 396, 558, 559, 752, 793, 794, 833, 834, 835, 837, 1040, 1043, 1044, 1045], "liac": [321, 373, 379, 493, 1043, 1044], "arff": [321, 379, 493, 1040, 1043, 1044], "ticket": [321, 379], "cabin": 321, "boat": 321, "allen": [321, 1031, 1033, 1035, 1038], "elisabeth": 321, "walton": 321, "24160": 321, "3375": 321, "b5": 321, "loui": [321, 1033, 1034, 1038, 1040, 1042, 1044], "mo": [321, 1039], "allison": 321, "hudson": 321, "9167": 321, "113781": 321, "5500": [321, 685, 983], "c22": 321, "c26": 321, "montreal": 321, "pq": 321, "chestervil": 321, "ON": 321, "helen": 321, "lorain": 321, "joshua": [321, 374, 1030, 1031, 1033, 1034, 1040, 1043, 1044], "creighton": 321, "bessi": 321, "waldo": 321, "compliant": [321, 379], "cupi": [321, 402], "gpu": [321, 402, 990, 1007, 1021], "changelog": [321, 383, 393], "plot_release_highlights_1_2_0": [321, 323], "throughout": [322, 361, 393, 624, 796, 855, 856, 1012, 1031, 1036], "codebas": [322, 361, 379, 380, 381, 414, 1028, 1034], "ongo": [322, 380, 394], "incorpor": [322, 379, 407, 413, 985, 1006, 1010], "contrib": [322, 379, 381, 387, 391, 393, 406, 1006, 1007, 1044], "adpot": 322, "true_label": [322, 325, 326], "non_noisy_label": 322, "9694149248180188": 322, "encodings_": [322, 879, 996], "validation_curv": [322, 345, 397, 817, 981, 1035, 1036, 1037, 1040, 1044], "geomspac": 322, "make_low_rank_matrix": [322, 521], "46858513287221654": 322, "plot_release_highlights_1_3_0": [322, 323], "auto_examples_release_highlight": 323, "semisupervis": [325, 393], "clai": [325, 326, 327, 330, 1028], "woolam": [325, 326, 327, 330, 1028], "n_total_sampl": [325, 326], "n_labeled_point": [325, 326], "unlabeled_set": 325, "everyth": [325, 361, 383, 385, 391, 461, 941, 1006, 1007, 1028], "lp_model": [325, 326], "predicted_label": [325, 326], "transduction_": [325, 326, 327, 893, 894, 895], "_plot": 325, "0x7fa0293672b0": 325, "pred_entropi": [325, 326], "label_distributions_": [325, 326, 893, 894, 1039], "uncertainty_index": [325, 326], "image_index": [325, 326], "320": [325, 331, 351, 374, 975, 1000, 1028], "plot_label_propagation_digit": [325, 331], "max_iter": 326, "______________________________________________________________________": 326, "280": 326, "unlabeled_indic": 326, "transduc": 326, "delete_indic": 326, "nfit": 326, "delete_index": 326, "plot_label_propagation_digits_active_learn": [326, 331], "label_spread": 327, "labelspreadingifittedlabelspread": 327, "output_label": 327, "output_label_arrai": 327, "outer_numb": 327, "inner_numb": 327, "plot_label_propagation_structur": [327, 331], "breast_canc": 328, "augment": [328, 627, 880, 1010], "oliv": [328, 330, 1036, 1037, 1039, 1040, 1041], "rausch": [328, 330, 1036, 1037, 1040], "rauscho": [328, 330], "ethz": [328, 330], "total_sampl": [328, 533], "base_classifi": [328, 330, 999], "x_valu": 328, "99999": 328, "amount_label": 328, "amount_iter": 328, "self_training_clf": 328, "skfold": 328, "y_test_tru": 328, "labeled_iter_": [328, 895], "return_count": [328, 351, 850], "capsiz": 328, "twinx": 328, "717": [328, 331], "plot_self_training_varying_threshold": [328, 331], "2823": 329, "2117": 329, "441": 329, "758": 329, "1676": 329, "1108": 329, "847": 329, "tfidftransform": [329, 351, 352, 414, 486, 588, 1021, 1035, 1036, 1042, 1044, 1045], "sdg_param": 329, "vectorizer_param": 329, "selftrain": 329, "st_pipelin": 329, "ls_pipelin": 329, "eval_and_print_metr": 329, "y_mask": 329, "x_20": 329, "y_20": 329, "plot_semi_supervised_newsgroup": [329, 331], "y_rand": 330, "y_30": 330, "y_50": 330, "ls30": 330, "ls50": 330, "ls100": 330, "st30": 330, "st50": 330, "rbf_svc": [330, 1001], "color_map": 330, "plot_semi_supervised_versus_svm_iri": [330, 331], "582": [331, 899], "auto_examples_semi_supervis": 331, "my_kernel": [333, 1001], "091": [333, 348], "plot_custom_kernel": [333, 348], "2x2": [334, 406, 750], "198": [334, 348, 1028], "plot_iris_svc": [334, 348], "convention": [335, 393, 894], "support_vector_indic": 335, "179": [335, 348, 376, 385, 413, 1028], "plot_linearsvc_support_vector": [335, 348], "plot_oneclass": [336, 348], "midpoint": 337, "blink": 337, "act": [337, 350, 379, 392, 412, 413, 710, 725, 726, 734, 779, 780, 783, 873, 877, 983, 986, 989, 1001, 1036], "spuriou": [337, 387, 996, 1041, 1042, 1043], "c_rang": 337, "gamma_rang": 337, "midpointnorm": 337, "masked_arrai": [337, 795, 809], "x_2d": 337, "y_2d": 337, "c_2d_rang": 337, "gamma_2d_rang": 337, "bright": 337, "brutal": 337, "plot_rbf_paramet": [337, 348], "plot_separating_hyperplan": [338, 348], "plain": [339, 416, 654, 1000], "n_samples_1": [339, 1001], "n_samples_2": [339, 1001], "clusters_std": 339, "wclf": 339, "wdisp": 339, "172": [339, 348, 385, 490, 491, 646, 982], "plot_separating_hyperplane_unbalanc": [339, 348], "blown": 340, "score_mean": 340, "score_std": 340, "plot_svm_anova": [340, 348], "outermost": 341, "hinge_loss": [341, 986, 1032, 1040, 1041], "enrich": 341, "plot_training_data_with_decision_boundari": 341, "cosine_similar": [341, 756, 761, 984, 1033], "untransform": [341, 461, 464, 997], "bend": 341, "tanh": [341, 773, 855, 856, 984, 1001], "hyperbol": [341, 639, 855, 856, 984, 990], "generaliz": [341, 413], "comprehens": [341, 414, 754, 755, 984, 1010, 1036], "412": [341, 348, 493, 982], "plot_svm_kernel": [341, 348], "plot_svm_margin": [342, 348], "fignum": 342, "unreg": 342, "yy_down": 342, "yy_up": 342, "nusvc": [343, 365, 434, 901, 987, 1001, 1028, 1029, 1030, 1033, 1036, 1038, 1039, 1040, 1042], "plot_svm_nonlinear": [343, 348], "svr_rbf": 344, "svr_lin": 344, "svr_poli": 344, "kernel_label": 344, "model_color": 344, "setdiff1d": 344, "fancybox": 344, "plot_svm_regress": [344, 348], "omega": [345, 409, 980], "dependen": 345, "reparametr": 345, "model_l1": 345, "shuffle_param": 345, "best_c": 345, "idxmax": 345, "train_size_idx": 345, "results_sc": 345, "c_scale": 345, "best_c_scal": 345, "somewhat": [345, 361, 367, 379, 381, 411, 413, 900, 903, 982, 1001, 1002], "dantzig": 345, "model_l2": 345, "551": [345, 348], "plot_svm_scale_c": [345, 348], "break_ti": [346, 900, 903, 1001, 1038], "accent": [346, 585, 586, 588, 1038], "plot_svm_tie_break": [346, 348], "emphasi": [347, 409, 900, 901, 902, 903, 904, 993, 1006], "subtl": [347, 361, 985, 1007], "plot_decision_funct": 347, "sample_weight_last_ten": 347, "sample_weight_const": 347, "clf_no_weight": 347, "clf_weight": 347, "504": [347, 348, 352], "plot_weighted_sampl": [347, 348], "auto_examples_svm": 348, "size_mb": 350, "utf": [350, 352, 414, 484, 500, 579, 585, 586, 588], "load_dataset": 350, "sublinear_tf": [350, 411, 414, 587, 588], "duration_train": 350, "duration_test": 350, "data_train_size_mb": 350, "data_test_size_mb": 350, "2034": [350, 374], "98mb": 350, "1353": 350, "87mb": 350, "356": [350, 994], "194mb": 350, "7831": 350, "660mb": 350, "ridgeclassifi": [350, 365, 669, 670, 672, 982, 987, 1033, 1037, 1041, 1042, 1043], "sparse_cg": [350, 669, 671, 684, 982, 1029, 1035, 1037, 1038, 1042, 1044], "rarer": [350, 352, 414], "deeper": [350, 1002], "plot_feature_effect": 350, "average_feature_effect": 350, "top5": 350, "top_indic": 350, "predictive_word": 350, "bar_siz": 350, "y_loc": 350, "keyword": [350, 373, 379, 381, 384, 386, 393, 406, 417, 420, 435, 441, 442, 447, 449, 454, 461, 464, 493, 500, 532, 535, 537, 556, 557, 564, 565, 566, 567, 617, 625, 628, 629, 636, 640, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 685, 689, 694, 695, 696, 697, 698, 699, 770, 774, 775, 776, 777, 788, 789, 801, 817, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 858, 862, 930, 932, 953, 975, 983, 986, 989, 999, 1028, 1032, 1034, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1045], "keith": [350, 1028, 1033], "atheist": 350, "orbit": [350, 351], "caltech": 350, "expectedli": 350, "pollut": [350, 724, 781, 986, 992], "sender": [350, 374], "livesei": 350, "solntz": 350, "wpd": 350, "sgi": 350, "jon": [350, 1035, 1038, 1039, 1041, 1042], "nntp": [350, 374, 1021], "1qlettinn8oi": 350, "cco": 350, "allan": [350, 404, 1040], "schneider": [350, 1041], "me": 350, "instinct": 350, "happi": [350, 391, 394, 813, 814], "listen": 350, "murder": 350, "voluntari": 350, "disregard": [350, 393, 414, 429, 462, 479, 480, 481, 549, 551, 553, 555, 557, 559, 562, 565, 567, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 718, 719, 720, 781, 831, 832, 841, 849, 856, 867, 868, 874, 875, 878, 883, 886, 887, 889, 899, 901, 904, 907, 909, 986, 1036], "beings": 350, "bahavior": 350, "theirs": 350, "mimicri": 350, "imit": 350, "parrot": 350, "polli": 350, "pulchritud": 350, "anim": [350, 414], "kill": 350, "Or": [350, 359, 410, 411, 871, 986, 992, 1000], "sigh": 350, "wonder": 350, "bahaviour": 350, "believ": [350, 351, 387, 391, 1010], "primat": 350, "arbitarili": 350, "poster": [350, 378, 379, 1020], "weren": [350, 872, 1037], "slai": 350, "mate": 350, "ritual": 350, "whatnot": 350, "aren": [350, 374, 383, 396, 405, 722, 752, 991, 1038, 1040], "ye": [350, 387, 393, 865, 882, 982], "gorilla": 350, "dolphin": 350, "platypu": 350, "writer": 350, "launch": [350, 351, 396, 1010], "custom_nam": 350, "clf_descr": 350, "rocchio": [350, 845], "000592": 350, "772": [350, 356, 360, 719], "5316": 350, "0364": 350, "00055": 350, "000699": 350, "0585": 350, "704": 350, "0296": 350, "000621": 350, "0271": 350, "000648": 350, "762": 350, "00278": 350, "00132": 350, "748": [350, 385], "00175": 350, "000494": 350, "779": 350, "training_tim": 350, "txt": [350, 373, 490, 500], "curs": [350, 351, 406, 412, 988, 989, 1015, 1020], "harm": [350, 381, 414, 791], "634": [350, 353], "plot_document_classification_20newsgroup": [350, 353], "discov": [351, 405, 406, 411, 414, 417, 441, 445, 1012, 1043], "category_s": 351, "true_k": 351, "3387": 351, "evaluations_std": 351, "fit_and_evalu": 351, "evaluation_std": 351, "score_valu": 351, "std_score": [351, 1041], "collis": [351, 352, 414, 579, 586], "x_tfidf": 351, "379": 351, "7929": [351, 1035], "prod": [351, 618], "phenomenon": [351, 996], "cluster_s": 351, "2050": 351, "711": 351, "446": [351, 722, 752, 986], "485": [351, 693], "1708": 351, "3384": 351, "1887": 351, "332": [351, 886], "1688": 351, "454": 351, "973": [351, 410], "628": 351, "358": 351, "405": 351, "380": [351, 1021], "217": [351, 532, 538], "redo": 351, "x_lsa": 351, "explained_vari": [351, 986], "331": 351, "398": [351, 644, 1021], "010": [351, 385, 994], "435": 351, "015": [351, 355, 994], "416": [351, 735, 986], "030": 351, "minibatch_kmean": 351, "376": [351, 994], "047": [351, 385], "292": [351, 396, 413, 731], "original_space_centroid": 351, "order_centroid": 351, "ve": [351, 379, 414, 1009, 1010, 1021, 1035], "shuttl": 351, "bibl": 351, "sparciti": 351, "lsa_vector": 351, "x_hashed_lsa": 351, "555": [351, 713], "437": 351, "413": [351, 355, 360], "328": [351, 726], "043": [351, 385], "046": [351, 352], "367": [351, 413, 1028], "df_std": 351, "speak": [351, 365, 379, 1000], "safer": [351, 361, 377, 406, 410, 1028], "plot_document_clust": [351, 353], "18000": [352, 374], "raw_data": 352, "data_size_mb": 352, "3803": 352, "245mb": 352, "anyth": [352, 383, 385, 393, 397, 407, 410, 946, 950, 1042], "unicod": [352, 414, 484, 500, 579, 585, 586, 588, 951, 1028, 1036, 1040], "charact": [352, 379, 384, 393, 414, 500, 505, 506, 585, 586, 588, 910, 991, 1021, 1028, 1041, 1043], "underscor": [352, 381, 393, 970, 1018, 1028, 1038, 1041], "tok": [352, 414], "findal": 352, "token_freq": 352, "dict_count_vector": 352, "47928": 352, "vocabulary_": [352, 414, 578, 585, 588, 1021, 1028], "19145": 352, "n_nonzero_column": 352, "43873": 352, "inact": [352, 373, 379], "47668": 352, "input_typ": [352, 414, 461, 579], "y_po": 352, "downsid": 352, "featureheash": 352, "implicitli": [352, 388, 413, 594, 629, 630, 877, 976, 978, 993, 996, 1001], "token_pattern": [352, 414, 585, 586, 588], "47885": 352, "685": [352, 353, 717, 736, 986], "plot_hashing_vs_dict_vector": [352, 353], "auto_examples_text": 353, "parameter": [355, 416, 611, 612, 619, 620, 793, 794, 982, 983, 991, 996, 1002], "weakest": [355, 1002], "cost_complexity_pruning_path": [355, 906, 907, 908, 909], "drawstyl": [355, 697], "3272984419327777": 355, "plot_cost_complexity_prun": [355, 360], "ryb": 356, "pairidx": 356, "borderpad": 356, "handletextpad": 356, "plot_iris_dtc": [356, 360], "plot_tre": [356, 359, 1002, 1037, 1039, 1040, 1041, 1043, 1044], "plot_tree_regress": [357, 360], "regr_3": 358, "y_3": 358, "plot_tree_regression_multioutput": [358, 360], "decision_path": [359, 554, 555, 561, 562, 563, 906, 907, 908, 909, 1034, 1039], "decisiontreeclassifierifitteddecisiontreeclassifi": 359, "compute_node_depth": 359, "children_left": 359, "children_right": 359, "n_node_sampl": 359, "weighted_n_node_sampl": 359, "travers": [359, 989, 993], "n_node": [359, 438, 442, 460, 554, 555, 561, 562, 563, 906, 907, 908, 909, 940], "node_depth": 359, "is_leav": 359, "pop": [359, 391, 913, 1016, 1036], "visit": [359, 379, 993], "node_id": [359, 910, 912], "is_split_nod": 359, "children": [359, 406, 413, 438, 442, 460, 563, 1032], "800000011920929": 359, "950000047683716": 359, "n_output": [359, 393, 413, 423, 429, 430, 434, 439, 442, 462, 466, 479, 480, 481, 529, 531, 533, 534, 536, 539, 540, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 625, 627, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 675, 676, 718, 719, 724, 741, 742, 744, 746, 747, 749, 750, 781, 784, 786, 787, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 845, 847, 848, 849, 854, 855, 856, 857, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 890, 891, 893, 894, 898, 899, 900, 901, 903, 904, 906, 907, 908, 909, 924, 957, 986, 987, 1002, 1035, 1038], "node_index": 359, "node_ind": 359, "leaf_id": 359, "sample_id": [359, 374, 494], "threshold_sign": 359, "inequ": [359, 393, 406, 440, 444, 456, 696, 983, 984, 989], "common_nod": 359, "common_node_id": 359, "plot_unveil_tree_structur": [359, 360], "562": 360, "auto_examples_tre": 360, "x_test_transform": [361, 410], "standard_norm": 361, "unfair": 361, "x_select": 361, "gbc": 361, "x_train_select": 361, "x_test_select": 361, "tip": [361, 364, 368, 379, 382, 385, 401, 414, 531, 538, 642, 689, 982, 1008, 1022, 1023, 1026, 1031], "glossari": [361, 368, 379, 381, 385, 405, 417, 418, 434, 437, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 461, 464, 466, 469, 471, 485, 488, 489, 492, 494, 500, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 580, 581, 591, 599, 604, 605, 607, 608, 624, 629, 631, 636, 637, 638, 639, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 674, 675, 676, 684, 685, 686, 687, 688, 689, 690, 691, 692, 698, 770, 774, 777, 789, 793, 794, 795, 797, 798, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 840, 841, 843, 844, 846, 847, 848, 849, 851, 852, 854, 855, 856, 857, 860, 863, 875, 879, 887, 890, 891, 893, 894, 898, 899, 900, 903, 906, 907, 908, 909, 934, 935, 957, 960, 975, 976, 982, 1012, 1036], "mtrand": 361, "_rand": 361, "85418642": 361, "79084103": 361, "13077794": 361, "11915045": 361, "56479934": 361, "70814003": 361, "25291366": 361, "55212743": 361, "18197458": 361, "37845099": 361, "mutat": [361, 1036], "debug": [361, 366, 380, 382, 385, 393, 395, 624, 897, 952, 1006, 1021, 1036, 1040], "govern": [361, 365, 368, 379, 393, 1004, 1010], "implic": [361, 379], "rf_123": 361, "rf_inst": 361, "didn": [361, 393, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "strict": [361, 377, 393, 411, 500, 532, 585, 586, 588, 982, 1028, 1037, 1040], "pervas": [361, 379], "unlucki": 361, "lucki": 361, "fairer": 361, "temptat": [361, 379], "throughput": [364, 1006, 1023, 1031], "switch": [364, 675, 701, 714, 733, 751, 753, 791, 838, 839, 934, 935, 986, 989, 1023, 1028], "offlin": [365, 379], "bottleneck": [365, 385, 413, 445, 855, 856], "hurt": [365, 531, 1036], "toolkit": [365, 1006, 1010], "branch": [365, 377, 379, 382, 383, 406, 413, 439, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 906, 907, 908, 909, 911, 989, 993, 1002], "sklearn_assume_finit": 365, "assume_finit": [365, 366, 465, 896], "assert_all_finit": [365, 388, 465], "nm": 365, "csc": [365, 391, 393, 414, 524, 548, 550, 551, 667, 689, 865, 867, 873, 878, 881, 883, 889, 914, 918, 919, 949, 961, 962, 964, 965, 966, 967, 989, 996, 1036, 1037, 1039, 1042], "32bit": [365, 951], "speedup": [365, 411, 413, 647, 651, 654, 1028, 1029, 1030, 1031, 1043], "multithread": [365, 406, 898, 899, 900, 901, 902, 903, 904], "bla": [365, 366, 377, 380, 385, 1028, 1036, 1037, 1039, 1040], "sparsity_ratio": 365, "gbt": 365, "speedi": 365, "packet": 365, "reuter": [365, 374], "carefulli": [365, 411, 1001], "spawn": [365, 391, 795, 809, 819, 820, 821, 1039], "gil": [365, 366, 380, 954, 1031, 1036, 1037, 1040, 1041, 1045], "ought": 365, "lapack": [365, 366, 377, 529, 532, 538, 685, 1043], "dgemm": 365, "show_vers": [365, 377, 379, 387, 396, 1036], "atla": [365, 377], "rebuild": [365, 400, 414, 439], "openbla": [365, 366, 377, 391, 954, 1041, 1045], "mkl": [365, 366, 377, 391, 954, 1028], "veclib": [365, 391], "osx": 365, "nouri": [365, 1029, 1031], "instruct": [365, 379, 380, 381, 382, 383, 384, 387, 391, 392, 500, 585, 586, 588, 1012, 1021, 1028], "ubuntu": [365, 377, 385, 387], "1gb": 365, "mib": [365, 465, 896], "working_memori": [365, 366, 465, 777, 896, 1036], "adher": [365, 381, 393, 929, 930, 1028, 1029], "pairwise_distances_chunk": [365, 774, 1036, 1039, 1045], "facilit": [365, 393, 400, 1006, 1007, 1034, 1037], "moment": [365, 411, 416, 437, 612, 620, 855, 856, 950, 990, 991], "000024": 365, "027400": 365, "mileag": 365, "deploi": [365, 395, 400, 1007, 1010], "upstream": [365, 379, 383, 387, 391, 996, 1037], "lighter": [365, 697, 699, 778, 785, 1044], "threadpoolctl": [366, 377, 396, 399], "subsect": [366, 379, 405], "worker": [366, 393, 414, 952, 953, 954, 1043], "14228": 366, "loki": [366, 954, 986, 1036, 1039], "duplic": [366, 378, 379, 393, 406, 417, 441, 445, 446, 512, 632, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 822, 869, 972, 989, 1028, 1031, 1040, 1042, 1044, 1045], "memmap": [366, 374, 393, 411, 505, 531, 1036], "1mb": [366, 1033], "parallel_backend": [366, 417, 434, 441, 443, 445, 447, 449, 454, 455, 458, 461, 464, 469, 528, 532, 533, 534, 536, 539, 540, 542, 543, 545, 552, 553, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 591, 599, 607, 629, 631, 636, 644, 648, 650, 652, 654, 655, 656, 658, 660, 662, 663, 665, 673, 676, 685, 686, 687, 688, 689, 690, 691, 770, 774, 777, 795, 798, 799, 801, 809, 817, 819, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 840, 841, 844, 846, 848, 849, 851, 852, 857, 860, 893, 894, 1036], "exclus": [366, 391, 393, 411, 413, 624, 625, 627, 975, 982, 986, 987, 1010, 1035, 1039], "omp_num_thread": 366, "my_script": 366, "algebra": [366, 377, 382, 391, 411, 414, 459, 864, 996], "bli": [366, 377, 391], "mkl_num_thread": 366, "openblas_num_thread": 366, "blis_num_thread": 366, "bash": [366, 387], "zsh": 366, "termin": [366, 384, 385, 387, 396, 406, 445, 458, 550, 551, 555, 556, 557, 560, 562, 663, 664, 665, 673, 675, 855, 856, 907, 909, 992, 1002], "prompt": [366, 377, 379, 396, 399, 414, 1012], "pypi": [366, 377, 379, 381, 383, 385, 396, 1002, 1036, 1040, 1042, 1043, 1045], "channel": [366, 374, 377, 391, 396, 414, 490, 491, 580, 581, 583, 584], "subscript": [366, 1041], "max_thread": [366, 380], "n_cpu": [366, 393], "preced": [366, 379, 484, 986, 1028], "lib": [366, 377, 396, 1006], "_num_thread": 366, "singleton": [366, 803, 921, 1041, 1044], "aforement": [366, 987], "global_random_se": 366, "fixtur": [366, 379], "build_numb": 366, "disrupt": 366, "config": [366, 379, 380, 387, 623, 1036], "contributor": [366, 382, 383, 384, 387, 391, 393, 986, 1004, 1007, 1029, 1030, 1031], "encount": [366, 377, 400, 406, 413, 414, 493, 558, 559, 578, 833, 834, 835, 837, 871, 961, 996, 1000, 1006, 1009, 1010, 1021, 1036, 1039], "annoi": 366, "test_your_test_nam": 366, "skip": [366, 379, 381, 388, 402, 414, 465, 565, 643, 644, 649, 657, 658, 659, 668, 678, 896, 1021, 1032, 1035, 1038, 1040, 1042, 1044], "global_dtyp": 366, "boundscheck": [366, 380], "segfault": [366, 380, 1028, 1036, 1041], "posix": [366, 391], "pairwisedistancesreduct": 366, "adequ": [366, 385, 564, 1012, 1041], "drive": [367, 411, 412, 546, 1000, 1010, 1021], "passiveaggressiveregressor": [367, 982, 1029, 1032, 1035, 1036, 1039, 1041], "maxabsscal": [367, 402, 862, 883, 976, 996, 1033, 1036, 1037, 1038, 1039, 1044, 1045], "routin": [367, 373, 376, 379, 380, 381, 382, 387, 391, 393, 415, 669, 671, 684, 841, 900, 901, 902, 903, 904, 983, 989, 996, 997, 1000, 1006, 1010, 1028, 1042, 1043, 1044], "passiveaggress": [367, 414], "fledg": [367, 414], "naivebay": 367, "dramat": 367, "welcom": [368, 378, 379, 387, 394, 1007, 1009], "roadmap": [368, 1004], "persist": [368, 387, 391, 411, 443, 607, 608, 854, 991, 1006, 1023, 1034, 1037], "miscellan": [368, 372, 373, 1034, 1035, 1042, 1043, 1045], "craft": [368, 382], "curat": [368, 379, 382, 383], "fetcher": [372, 1033, 1035, 1044], "linnerrud": [372, 1023], "covertyp": [372, 488, 1023], "rcv1": [372, 494, 1023, 1033], "svmlight": [372, 484, 505, 506, 1023, 1028, 1029, 1035, 1037], "jpeg": [373, 374, 490, 491], "publish": [373, 374, 381, 383, 387, 393, 998, 1007, 1040], "creativ": 373, "spare": [373, 671, 672], "pyplpt": 373, "load_svmlight_fil": [373, 1028, 1029, 1034, 1035, 1036, 1043], "test_dataset": 373, "everybodi": [373, 379], "upload": [373, 377, 383, 391, 668], "mice": [373, 624, 976], "brain": 373, "miceprotein": 373, "1080": [373, 406], "sc": [373, 406], "clara": [373, 1040], "higuera": 373, "katheleen": 373, "gardin": 373, "krzysztof": 373, "cio": 373, "protein": 373, "cite": [373, 406, 1004], "kj": [373, 988], "critic": [373, 379, 392, 400, 413, 689, 983, 986, 994, 1001, 1010, 1039], "syndrom": 373, "plo": [373, 604, 605], "ONE": [373, 604, 605], "e0129126": 373, "40966": 373, "upload_d": 373, "08t16": 373, "17928620": 373, "file_id": 373, "default_target_attribut": 373, "row_id_attribut": 373, "mouseid": 373, "ignore_attribut": 373, "genotyp": 373, "cc18": 373, "study_135": 373, "study_98": 373, "study_99": 373, "md5_checksum": 373, "3c479a6885bfa0438971388283a1ce32": 373, "websit": [373, 374, 376, 379, 394, 990, 1000, 1010, 1021, 1029, 1030, 1031], "4550": 373, "17t14": 373, "1804243": 373, "pone": 373, "0129126": 373, "openml100": 373, "study_14": 373, "study_34": 373, "earliest": [373, 983], "iris_61": 373, "iris_969": 373, "969": 373, "iris_version_3": 373, "vanschoren": [373, 1040], "rijn": [373, 1036], "bischl": 373, "torgo": 373, "acm": [373, 374, 406, 417, 441, 447, 454, 457, 508, 560, 673, 722, 752, 844, 986, 989, 992, 998], "sigkdd": [373, 374, 508, 673, 879, 996, 998], "newslett": 373, "legaci": [373, 383, 393, 954, 1028, 1035, 1040], "my": [373, 379, 384, 387, 493], "columnar": [373, 461, 1006], "usabl": [373, 379, 381, 393, 400, 414, 795, 954, 1028, 1035, 1042, 1043], "io": [373, 376, 377, 379, 383, 385, 387, 393, 400, 689, 1006, 1026], "json": [373, 379, 396], "sql": 373, "smoothli": 373, "manipul": [373, 402, 504, 954, 1006, 1034], "mat": [373, 414], "load_fil": [373, 374, 1021, 1030, 1042], "audio": [373, 500], "wish": [373, 379, 386, 388, 396, 406, 647, 648, 651, 652, 653, 661, 662, 935, 1013, 1021, 1035], "imageio": 373, "wavfil": 373, "wav": 373, "hdf5": 373, "h5py": 373, "pytabl": 373, "april": [374, 661, 682, 683, 1032, 1040], "AT": [374, 492], "laboratori": [374, 1006], "cambridg": [374, 411, 587, 833, 837, 982, 984, 988], "facial": 374, "glass": 374, "upright": 374, "frontal": 374, "movement": 374, "credit": [374, 387, 413, 982, 1010], "18846": [374, 485, 486], "scikit_learn_data": [374, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496], "20news_hom": 374, "newsgroups_train": 374, "11314": 374, "1073": 374, "20new": [374, 1021], "34118": 374, "01327": 374, "newsgroups_test": 374, "vectors_test": 374, "class_prior": [374, 833, 834, 835, 837, 1029, 1032], "fit_prior": [374, 833, 834, 835, 837], "88213": 374, "suspici": 374, "show_top10": 374, "top10": 374, "affili": 374, "abund": 374, "clue": [374, 387, 983], "bare": [374, 983, 1021], "quotat": 374, "77310": 374, "76995": 374, "cleveland": 374, "indian": 374, "leagu": 374, "team": [374, 382, 391, 393, 1004, 1006, 1010, 1028], "ohio": 374, "spark": [374, 1007], "death": 374, "floyd": [374, 685, 983], "reckon": 374, "coloni": 374, "paul": [374, 1031, 1034, 1035, 1036, 1037, 1041, 1042], "dolan": 374, "nicknam": 374, "tribe": 374, "theme": [374, 1028], "mlb": [374, 869], "inappropri": [374, 410, 416, 706, 816], "nlp": [374, 411, 414, 833, 837, 984, 1010], "cultur": 374, "inflammatori": 374, "famou": [374, 376, 413, 1001], "internet": [374, 384, 996, 1019], "offici": [374, 381, 393, 396, 490, 494, 1006, 1021, 1036, 1037, 1040], "verif": [374, 986, 1010], "identif": [374, 379, 406, 494, 975, 1013], "viola": [374, 1036], "opencv": 374, "detector": [374, 393, 844], "5749": [374, 490, 491], "13233": [374, 490, 491], "5828": [374, 490, 491], "200m": 374, "lfw_home": 374, "rectangular": [374, 393, 935, 1007], "1140": 374, "fetch_lfw_pair": [374, 1033, 1043], "lfw_pairs_train": 374, "subdivid": [374, 416], "10_fold": [374, 490], "gari": [374, 1035], "huang": [374, 655, 1034, 1039], "manu": 374, "ramesh": [374, 1010, 1031, 1034, 1038], "tamara": 374, "berg": [374, 1029, 1030, 1040], "erik": [374, 1010, 1031], "miller": [374, 1036, 1037, 1041], "massachusett": 374, "amherst": 374, "30m": 374, "seven": [374, 979], "homepag": [374, 527, 1002], "581012": [374, 488], "newswir": 374, "ltd": [374, 1010], "804414": [374, 494], "47236": [374, 494], "fetch_rcv1": [374, 1033, 1037], "v2": [374, 494, 661, 682, 683, 982], "chronolog": [374, 494], "23149": [374, 494, 1042], "781265": [374, 494], "lyrl2004": [374, 494], "2286": 374, "810596": 374, "2287": 374, "2288": 374, "uint32": [374, 494], "gmil": 374, "381327": 374, "ccat": 374, "e11": 374, "ecat": 374, "m11": 374, "656": 374, "lewi": [374, 1035, 1039], "yang": [374, 406, 411, 531, 636, 1034, 1035, 1038, 1040, 1041, 1042, 1044], "rose": 374, "cup": [374, 986], "tcpdump": 374, "darpa": 374, "intrus": 374, "lincoln": 374, "unrealist": 374, "sa": [374, 489], "logged_in": 374, "smtp": [374, 489], "resp": [374, 413, 594, 793, 794, 1000, 1036], "4898431": [374, 489], "976158": 374, "699691": 374, "619052": 374, "95373": 374, "kddcup99": [374, 489], "richard": [374, 415, 655, 1029, 1038, 1040, 1042, 1043], "lippmann": 374, "hain": 374, "jonathan": [374, 1032, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1044], "korba": 374, "da": [374, 1043, 1044], "yamanishi": 374, "takeuchi": 374, "miln": 374, "discount": [374, 406, 722, 752, 1035, 1038], "sixth": 374, "press": [374, 406, 411, 416, 417, 441, 587, 607, 608, 611, 616, 619, 640, 833, 837, 979, 982, 984, 988], "household": 374, "statlib": 374, "dcc": 374, "ltorgo": 374, "cal_hous": 374, "1990": 374, "censu": 374, "bureau": 374, "resid": 374, "vacat": 374, "pace": 374, "kellei": [374, 1030, 1031], "ronald": [374, 990, 1031, 1041], "barri": [374, 1036], "autoregress": 374, "297": 374, "hyperspher": [375, 1006], "interleav": [375, 519], "simplif": [375, 378, 384, 1028, 1034], "realiti": 375, "make_sparse_uncorrel": 375, "make_friedman1": [375, 413, 536, 540, 590, 591, 629], "make_friedman2": [375, 608, 610, 611, 612, 613, 614, 618, 621, 622], "reciproc": [375, 986], "make_friedman3": 375, "7826": 376, "4194": 376, "9490": 376, "9565": 376, "fisher": [376, 413, 501, 633, 1006], "michael": [376, 404, 406, 447, 625, 634, 688, 793, 976, 982, 1010, 1021, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1039, 1040, 1042, 1043], "marshal": 376, "arc": [376, 413], "1988": 376, "sir": 376, "referenc": [376, 379, 381, 387, 393, 890, 891, 989, 1035, 1041], "duda": [376, 980], "hart": [376, 980, 1036], "taxonom": 376, "annual": [376, 406, 722, 752, 895, 986, 999], "eugen": [376, 1029, 1034], "1936": 376, "john": [376, 414, 533, 705, 731, 765, 873, 900, 901, 903, 904, 976, 982, 986, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1041, 1043, 1044], "wilei": [376, 976], "1950": [376, 986], "1973": [376, 404], "scene": [376, 989, 991, 1041], "q327": 376, "d83": 376, "son": [376, 976], "isbn": [376, 406, 982], "471": 376, "22361": 376, "218": [376, 468, 712, 782], "dasarathi": 376, "1980": 376, "nose": [376, 1031, 1035], "pami": [376, 406, 721], "gate": [376, 1041], "1972": 376, "433": 376, "mlc": 376, "cheeseman": 376, "autoclass": 376, "conceptu": [376, 413, 984], "alpaydin": 376, "boun": 376, "nist": [376, 986], "bitmap": 376, "preprint": 376, "32x32": 376, "nonoverlap": 376, "4x4": [376, 411, 414], "garri": 376, "candela": 376, "dimmick": 376, "geist": 376, "grother": 376, "janet": 376, "handprint": 376, "nistir": 376, "5469": 376, "kaynak": 376, "msc": 376, "graduat": 376, "bogazici": 376, "cascad": 376, "kybernetika": 376, "ken": [376, 1021, 1030, 1037], "tang": [376, 1038, 1039, 1040], "ponnuthurai": 376, "suganthan": 376, "yao": [376, 1034, 1035, 1036, 1037, 1044, 1045], "kai": [376, 560, 992, 1035], "dimensionalityreduct": 376, "nanyang": 376, "technolog": 376, "claudio": [376, 1042, 1043], "gentil": [376, 1040], "linnerud": [376, 502], "men": 376, "club": 376, "waist": 376, "puls": 376, "chin": [376, 1032], "situp": 376, "tenenhau": 376, "pratiqu": 376, "alcalin": 376, "magnesium": 376, "phenol": 376, "nonflavanoid": 376, "proanthocyanin": 376, "od280": 376, "od315": 376, "class_2": [376, 507], "162": 376, "278": [376, 838, 839], "1680": 376, "746": 376, "chemic": 376, "grown": [376, 413, 550, 551, 552, 553, 554, 555, 561, 562, 906, 907, 908, 909, 1002], "itali": 376, "cultiv": 376, "thirteen": 376, "constitu": 376, "forina": 376, "parvu": 376, "pharmaceut": 376, "food": 376, "brigata": 376, "salerno": 376, "16147": 376, "genoa": 376, "lichman": 376, "irvin": 376, "aeberhard": 376, "cooman": 376, "vel": 376, "rep": 376, "dept": 376, "cook": [376, 1028, 1034], "north": [376, 406], "queensland": 376, "submit": [376, 377, 378, 381, 382, 383, 384, 387, 393, 394], "technometr": [376, 408, 466, 471, 992], "rda": 376, "1nn": 376, "THE": 376, "OF": 376, "chemometr": 376, "272": [377, 396, 398, 399], "wheel": [377, 379, 383, 396, 1038, 1040, 1042], "quickest": 377, "registri": [377, 396, 1006], "uninstal": 377, "git": [377, 381, 383, 385, 387, 1009, 1024, 1028, 1044], "fork": [377, 379, 383, 387, 391], "miniforge3": [377, 387], "miniforg": [377, 387, 396], "env": [377, 387, 396], "newli": [377, 392, 413, 460, 993, 1034, 1035, 1043], "virtualenv": [377, 379, 396], "python3": [377, 396], "venv": [377, 396], "pep517": [377, 379], "dev0": [377, 383, 1009, 1024], "pyx": [377, 379, 380, 385, 387], "pxd": [377, 379], "sklearn_fail_no_openmp": 377, "checkout": [377, 379, 383, 387], "cumbersom": 377, "reinstal": [377, 396], "setuptool": 377, "unix": [377, 414], "makefil": 377, "studio": [377, 1010], "vs_buildtool": 377, "desktop": 377, "screenshot": 377, "secondli": [377, 391, 406, 413, 654, 982, 1021], "architectur": [377, 381, 387, 391, 396, 400, 465, 896, 990, 1004, 1010, 1028, 1045], "cmd": 377, "powershel": 377, "struct": [377, 393, 1031], "calcsiz": 377, "distutils_use_sdk": 377, "x86": 377, "buildtool": 377, "vc": 377, "vcvarsal": 377, "bat": 377, "x64": 377, "clang": [377, 380], "confusingli": 377, "usr": 377, "gcc": [377, 380, 385, 391], "libomp": [377, 1040], "silicon": 377, "m1": [377, 402], "januari": [377, 379, 1028, 1029, 1038, 1040, 1043], "arm64": [377, 382], "llvm": 377, "toolchain": 377, "xcode": 377, "conflict": [377, 379, 383, 387, 396, 1035, 1036], "condarc": 377, "channel_prior": 377, "echo": [377, 383], "cxx": 377, "cflag": 377, "cxxflag": 377, "ldflag": 377, "subfold": [377, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 500, 1041], "fopenmp": [377, 380], "export": [377, 380, 381, 396, 400, 910, 911, 1002, 1006, 1009, 1037], "cppflag": 377, "xpreprocessor": 377, "wl": 377, "rpath": 377, "lomp": 377, "sudo": [377, 396], "apt": [377, 387, 396], "pip3": [377, 396], "pythonx": 377, "site": [377, 379, 382, 387, 396, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 1010, 1036], "precompil": 377, "arm": [377, 379, 387, 975], "cython3": 377, "cento": 377, "yum": 377, "devel": 377, "gnu": 377, "port": [377, 396, 1038], "pkg": 377, "build_ext": [377, 385], "build_clib": 377, "linker": [377, 380], "sysconfig": 377, "counterpart": [377, 975, 983, 1001, 1016], "get_config_var": 377, "sklearn_build_parallel": 377, "tracker": [378, 382, 387, 391, 394, 396, 400, 1004, 1007], "prioriti": [378, 629, 826, 827, 1007, 1031], "guidelin": [378, 382, 384, 385, 387, 405, 406, 413], "reformul": 378, "xyz": 378, "someestim": 378, "relabel": [378, 813, 814, 895], "stall": [378, 382], "sprint": [378, 379, 1004, 1028], "unfinish": [378, 379], "supersed": [378, 1033], "overflow": [378, 387, 391, 1031, 1035, 1036, 1037, 1038, 1039, 1041], "submitt": 378, "strive": [378, 394, 1010], "expertis": [378, 379, 391], "unclear": [378, 379, 498], "pleasant": [378, 1010], "chime": 378, "permiss": [378, 383, 394, 396, 1010, 1043], "matthew": [378, 384, 533, 739, 1028, 1031, 1035, 1037, 1041, 1042], "rocklin": [378, 384], "acknowledg": [378, 606], "struggl": [378, 394, 406], "everyon": [379, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "underrepres": 379, "merit": [379, 383, 394], "teach": 379, "priceless": 379, "abid": 379, "codeofconduct": 379, "hesit": 379, "typo": [379, 394, 397, 1028], "send": [379, 406, 418, 530], "valuabl": [379, 976, 1010], "burden": [379, 870, 1007], "slep": [379, 393, 1004], "templat": [379, 383, 384, 393, 394, 554, 555, 560, 561, 562, 563, 1006], "ecosystem": [379, 976, 1005, 1010], "numpydoc": [379, 393, 396, 399], "compli": [379, 393, 929, 1007], "fulfil": [379, 406, 413, 795, 798, 799, 809, 858, 862, 982], "anyon": [379, 394, 1010], "gist": [379, 387, 1009], "repo": [379, 383, 1007], "feasibl": [379, 867, 868, 878], "traceback": [379, 384, 387, 391, 465, 1009], "doubt": [379, 380, 383, 982, 992, 1006], "companion": [379, 996], "transcript": 379, "inclus": [379, 381, 387, 447, 453, 750, 782, 986, 987, 1028, 1042], "yourlogin": 379, "ruff": [379, 396, 399], "mypi": [379, 383, 396, 399, 1039], "synchron": [379, 414], "my_featur": 379, "commit": [379, 383, 387, 1009, 1028, 1029, 1030, 1031], "modified_fil": 379, "committ": [379, 1028], "modif": [379, 409, 413, 414, 443, 999], "approv": [379, 394, 413], "mrg": [379, 387], "incomplet": [379, 396, 402, 406, 702, 791, 976, 983, 1021, 1032, 1034], "wip": [379, 387, 396], "matur": [379, 1006, 1007], "broad": [379, 393, 1006], "collabor": 379, "_logist": 379, "doctest": [379, 393, 1013, 1028], "test_logist": [379, 387], "rst": [379, 383, 387, 1021, 1028, 1033], "test_common": [379, 387], "caught": [379, 387, 400], "submodul": [379, 383, 385, 405, 978, 984, 1028], "intricaci": 379, "narr": [379, 393, 655, 898, 903, 1028, 1029], "unittest": 379, "tests_for_packag": 379, "static": [379, 381, 385, 387, 643, 644, 649, 650, 657, 658, 659, 660], "astropi": 379, "linux": [379, 381, 382, 387, 1006, 1028], "gh": 379, "lint": [379, 387], "nogil": [379, 380], "cpython": [379, 380, 385, 1043], "pyodid": [379, 954], "sklearn_run_float32_test": 379, "lengthi": [379, 391], "etiquett": 379, "she": [379, 888, 889, 1038], "he": [379, 722, 752, 855, 856, 888, 889, 986, 1021, 1035, 1042, 1043], "shorten": [379, 1001, 1041], "leader": [379, 1010], "grab": 379, "familiar": [379, 412, 1036], "acquaint": 379, "experienc": 379, "abandon": 379, "someon": [379, 383, 393, 1028], "glad": 379, "restructuredtext": 379, "some_param": 379, "hello": [379, 387, 947], "goodby": 379, "liter": [379, 383, 1010], "array_paramet": 379, "list_param": 379, "typed_ndarrai": 379, "multioutput_arrai": 379, "bracket": [379, 982], "delimit": [379, 992, 1043], "colon": 379, "selectfpr": [379, 415, 589, 592, 595, 596, 597, 603, 1044], "defer": 379, "backtick": [379, 384], "nowadai": 379, "dropdown": 379, "syntax": [379, 384, 387, 407, 465, 857, 858, 896, 975, 1012, 1039, 1041], "pragmat": 379, "bibliograph": 379, "arxiv": [379, 459], "_my": 379, "ref": [379, 387, 976, 1034], "currentmodul": 379, "succeed": 379, "editor": [379, 387, 391], "_build": 379, "viewabl": 379, "pillow": [379, 396, 399], "sphinxext": [379, 396, 399], "opengraph": [379, 396, 399], "copybutton": [379, 396, 399], "vast": 379, "examples_pattern": 379, "your_regex_goes_her": 379, "no_mathjax": 379, "latexpdf": 379, "stone": [379, 906, 907, 1002], "subdirectori": 379, "subpackag": [379, 383, 1004, 1032, 1037], "cleanup": [379, 1028], "charg": 379, "test_requiring_mpl_fixtur": 379, "hang": [379, 1009, 1038, 1039], "fruit": [379, 987], "asv": 379, "asv_benchmark": 379, "airspe": 379, "veloc": 379, "publicli": [379, 1038], "zero_on": [379, 1029], "zero_one_loss": [379, 402, 700, 730, 986, 1029, 1030, 1031, 1045], "futurewarn": [379, 387, 1035, 1036, 1037, 1039, 1041, 1044], "example_funct": 379, "exampleestim": 379, "_n_cluster": 379, "versionchang": 379, "meet": [379, 391, 394, 415, 569, 600, 855, 856, 895, 986, 999, 1010, 1036, 1037, 1038], "nit": 379, "retract": 379, "grammar": 379, "disambigu": [379, 826, 895, 999, 1043], "Will": [379, 494, 531, 624, 641, 642, 643, 649, 653, 654, 657, 658, 659, 660, 661, 662, 670, 672, 704, 711, 784, 863, 867, 871, 877, 878, 1031, 1032, 1034, 1036], "clariti": [379, 387], "unhelp": 379, "extran": 379, "rewritten": [379, 646, 1030, 1032], "generos": 379, "reward": 379, "heard": 379, "enemi": 379, "courtesi": 379, "justifi": [379, 385, 404, 562], "occas": 379, "deserv": [379, 385], "digest": [379, 1043], "overwhelm": 379, "sheer": [379, 1010], "myself": 379, "trickiest": 379, "buri": 379, "mixin": [379, 393, 421, 422, 423, 424, 425, 427, 428, 429, 430, 598, 929, 1030, 1039, 1043], "grep": 379, "delai": [379, 493, 795, 809, 819, 820, 954, 1042, 1043], "some_funct": [379, 925], "some_iter": 379, "flavor": [379, 989], "pointer": [379, 387, 439, 1037], "mandatori": [379, 414, 628], "favorit": [379, 391, 1010], "Being": [379, 393, 394, 400, 982, 989], "killer": [379, 1010], "blame": 379, "migrat": [379, 1028], "ignorerevsfil": 379, "rev": [379, 604, 605], "ruin": 379, "maco": [380, 382, 396, 402, 1036, 1040, 1042], "sklearn_enable_debug_cython_direct": 380, "scratch": [380, 439, 986, 1030], "gdb": [380, 382, 1009], "entrypoint_to_bug_reproduc": 380, "cdef": 380, "state_to_print": 380, "test_val": 380, "fuse": [380, 1034, 1044], "shell": [380, 387, 391, 1012, 1021], "cythonx": 380, "language_level": 380, "wraparound": 380, "initializedcheck": 380, "nonecheck": 380, "cdivis": 380, "recompil": [380, 385, 396], "pep073": 380, "pathwai": 380, "memoryview": 380, "cnp": 380, "lightweight": [380, 795, 809, 819, 820, 1006], "virtual": [380, 396, 410, 1010], "enter": [380, 383, 406, 439, 993], "prang": 380, "void": 380, "my_func": [380, 385], "st\u00e9fan": 380, "benhel": 380, "_cython_bla": 380, "protect": [380, 383, 952], "_openmp_help": 380, "cimport": [380, 388, 1036], "omp_get_max_thread": 380, "prolifer": 381, "adopt": [381, 393, 894, 986, 1000, 1036, 1043, 1045], "predomin": [381, 1029], "overrid": [381, 414, 443, 447, 454, 539, 545, 585, 586, 588, 590, 591, 594, 653, 661, 682, 683, 801, 817, 840, 841, 842, 844, 846, 848, 849, 850, 1028, 1036, 1038, 1042, 1044], "creation": [381, 508, 509, 510, 512, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 653, 838, 839, 1010, 1035, 1036, 1037, 1041], "optimis": [381, 406, 989, 1031, 1041, 1043], "param1": [381, 1018], "param2": [381, 1018], "param3": 381, "postpon": [381, 383], "requisit": 381, "liner": [381, 824], "ipython": [381, 384, 385, 387, 1013, 1021], "session": [381, 385, 391, 396, 1005, 1010, 1021], "trainabl": 381, "trail": [381, 970], "overridden": [381, 393, 416, 539, 545, 613, 618, 621, 691, 1036, 1037, 1044], "n_features_in_": [381, 393, 427, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 607, 608, 624, 625, 626, 627, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 1039, 1041, 1043], "slep010": [381, 1039], "duck": [381, 393, 1038], "check_x_i": [381, 388, 1032, 1036, 1037, 1042], "check_arrai": [381, 388, 465, 531, 896, 1032, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "templateclassifi": 381, "demo_param": 381, "myestim": 381, "subestim": 381, "my_extra_param": 381, "my_estim": [381, 407], "subestimator__c": 381, "subestimator__class_weight": 381, "subestimator__du": 381, "subestimator__fit_intercept": 381, "subestimator__intercept_sc": 381, "subestimator__l1_ratio": 381, "subestimator__max_it": 381, "subestimator__multi_class": 381, "subestimator__n_job": 381, "subestimator__penalti": 381, "subestimator__random_st": 381, "subestimator__solv": 381, "subestimator__tol": 381, "subestimator__verbos": 381, "subestimator__warm_start": 381, "__c": 381, "__class_weight": 381, "unpack": 381, "easiest": [381, 387, 407, 983], "__repr__": [381, 1007, 1037], "setattr": 381, "deepcopi": 381, "__sklearn_clone__": [381, 431, 1044], "frozen": 381, "frozentransform": 381, "fitted_transform": [381, 461], "__getattr__": 381, "_estimator_typ": [381, 393, 1033], "clustermixin": [381, 1045], "is_classifi": [381, 393], "programmat": [381, 496, 1037], "_get_tag": [381, 1039], "allow_nan": [381, 917, 919, 1044], "array_api_support": [381, 402], "binary_onli": [381, 1038, 1039], "multioutput_onli": 381, "no_valid": 381, "non_determinist": [381, 1042], "primari": [381, 393, 411, 512, 993, 1010], "_safe_split": 381, "preserves_dtyp": 381, "poor_scor": 381, "requires_fit": 381, "requires_positive_x": [381, 1038, 1043], "requires_i": [381, 1039], "requires_positive_i": 381, "_skip_test": 381, "_xfail_check": 381, "check_nam": 381, "xfail": [381, 387], "skiptestwarn": 381, "x_type": 381, "2darrai": 381, "signifi": [381, 406, 578, 806, 991], "1dlabel": 381, "2dlabel": 381, "_more_tag": 381, "mymultioutputestim": 381, "ridgeregress": 381, "idiosyncrat": 381, "onetoonefeaturemixin": [381, 430], "classnameprefixfeaturesoutmixin": [381, 430, 1043], "auto_wrap_output_kei": 381, "mytransform": 381, "__init_subclass__": 381, "invok": [381, 528, 534, 536, 542, 543, 564, 566, 567, 819, 895, 1040, 1045], "estimator_html_repr": [381, 407, 1039, 1040, 1041, 1042, 1045], "icon": 381, "_doc_link_modul": 381, "_doc_link_templ": 381, "_doc_link_url_param_gener": 381, "estimator_modul": 381, "ownership": 381, "pep8": [381, 383, 387], "indent": [381, 952], "nsampl": [381, 793, 794], "statement": [381, 384, 387, 391, 393, 411, 1004, 1021], "flow": 381, "client": [381, 954], "corollari": 381, "foo": [381, 578, 990], "baz": [381, 578], "pyflak": 381, "asanyarrai": 381, "hadamard": 381, "choose_random_sampl": 381, "freestand": 381, "unmodifi": [381, 393], "random_state_": [381, 533, 624, 847, 1042], "gaussiannois": 381, "quasi": [381, 855, 856, 982], "assert_allclos": 381, "rtol": [381, 838, 839, 843], "atol": [381, 669, 671, 838, 839, 843], "checklist": 382, "unclaim": 382, "workflow": [382, 383, 392, 410], "markdown": 382, "saniti": [382, 862, 986, 1028, 1029], "outdat": 382, "diff": [382, 986], "valgrind": 382, "platform": [382, 391, 393, 394, 400, 1006, 1010, 1033, 1036, 1037, 1039, 1041, 1042], "x86_64": [382, 396], "yep": 382, "gperftool": 382, "debugg": [382, 387], "gprof": 382, "callgrind": 382, "kcachegrind": 382, "warm": [382, 393, 528, 534, 540, 542, 543, 607, 650, 656, 663, 664, 665, 673, 674, 675, 982, 1007, 1038, 1040, 1042], "homebrew": [382, 396], "freebsd": 382, "rrrcn": 383, "pep101": 383, "build_tool": 383, "blocker": 383, "mileston": 383, "maint_tool": 383, "sort_whats_new": 383, "whats_miss": 383, "fixm": [383, 393], "feedstock": 383, "recip": [383, 983, 1010], "yaml": 383, "whats_new": [383, 387], "v0": [383, 468, 469, 475, 509, 585, 586, 588, 795, 809, 857, 860, 1029, 1036, 1037, 1038], "freez": [383, 396, 400, 1007, 1010, 1036], "0rc1": 383, "__version__": 383, "draft": [383, 394], "rebas": 383, "bugfix": [383, 1028, 1042], "backport": [383, 388, 1035], "maint": 383, "enh": 383, "blindli": 383, "invit": 383, "cherri": 383, "shortlog": 383, "f2": [383, 987], "sed": [383, 1028], "front": [383, 1035], "rc1": 383, "suffix": [383, 396, 821, 986, 1038], "brows": 383, "3a": 383, "22wheel": 383, "pyproject": 383, "toml": 383, "oldest": [383, 493], "abi": 383, "acronym": 383, "deliveri": 383, "whl": 383, "22publish": 383, "went": [383, 986], "bot": [383, 991, 1042], "sync": 383, "testpypi": 383, "tarbal": [383, 1043], "wheelhouse_upload": 383, "twine": 383, "rrr": 383, "symlink": 383, "latestst": 383, "tmp": 383, "ln": [383, 982, 990, 996], "versionwarn": 383, "secur": [383, 393, 1006, 1007, 1010, 1023], "twitter": 383, "linkedin": 383, "authorship": 383, "permalink": 383, "_hist_gradient_boost": 383, "_iter": 383, "pickl": [383, 393, 400, 414, 585, 586, 588, 838, 839, 1006, 1007, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1042, 1043, 1044], "checker": [383, 818], "type_check": 383, "test_enable_hist_gradient_boost": 383, "enable_hist_gradient_boost": [383, 1037], "enable_my_experimental_featur": 383, "indefinit": 383, "incentiv": 383, "workabl": 384, "stackoverflow": [384, 387, 391, 1009], "blogpost": 384, "mcve": [384, 391], "my_data": 384, "with_mean": [384, 878, 889, 996, 1036, 1041], "default_scor": 384, "other_scor": 384, "scrollbar": 384, "tripl": 384, "fenc": 384, "qualifi": 384, "a674e682c281": 384, "lda_featur": 384, "lda_model": 384, "n_topic": [384, 533, 1035], "minimalist": [384, 414, 1009], "continuous_featur": 384, "positive_featur": 384, "invest": [385, 1010], "idiom": 385, "crunch": 385, "performancetip": 385, "reimplement": [385, 393, 1034, 1038], "spottabl": 385, "amen": [385, 416, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 975], "cpp": 385, "engag": [385, 394], "tent": 385, "somewher": [385, 986, 1021], "prun": 385, "14496": [385, 1037], "682": 385, "ncall": 385, "tottim": 385, "percal": 385, "cumtim": 385, "lineno": 385, "_nls_subproblem": 385, "1263": 385, "_po": 385, "057": 385, "_initialize_nmf": 385, "_spars": 385, "_neg": 385, "337": 385, "461": 385, "hotspot": 385, "16159": [385, 1039], "840": 385, "2833": 385, "653": [385, 608, 611, 622], "_dotbla": 385, "651": 385, "036": [385, 469], "1397": 385, "2780": 385, "064": [385, 994], "1542": 385, "2734": 385, "fromnumer": 385, "1185": 385, "lapack_lit": 385, "dgesdd": 385, "rewrit": [385, 1002, 1020, 1028], "shallow": [385, 413, 558, 559, 913], "4x": [385, 1043], "line_profil": 385, "wire": [385, 531, 538], "profile_default": 385, "ipython_config": 385, "terminalipythonapp": 385, "interactiveshellapp": 385, "lprun": 385, "qtconsol": 385, "_nmf": 385, "73153": 385, "h_init": 385, "5863": 385, "nl": 385, "112141": 385, "2336": 385, "wtv": 385, "16144": 385, "336": [385, 996], "wtw": 385, "638": 385, "1880": 385, "195133": 385, "grad": [385, 1010], "495761": 385, "777": 385, "proj_gradi": 385, "2449": 385, "130": 385, "1474": 385, "4474": 385, "inner_it": 385, "83833": 385, "hn": 385, "194239": 385, "191": [385, 987], "48858": 385, "150407": 385, "gradd": 385, "193": [385, 413, 712, 782, 999], "515390": 385, "dqd": 385, "pin": 385, "memory_profil": [385, 396, 399], "memit": 385, "mprun": 385, "1e7": 385, "402344": 385, "standalon": [385, 655, 898, 1009], "bianp": 385, "reactiv": 385, "conda_prefix": 385, "pydebug": 385, "extra_cflag": 385, "dpy_debug": 385, "num_cor": 385, "dbg": 385, "fortun": [385, 413, 1021, 1041, 1042], "my_fil": 385, "callgrin": 385, "prof": 385, "encapsul": [386, 407, 420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 466, 467, 468, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 600, 607, 608, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909], "artist": [386, 435, 629, 695, 697, 698, 699, 801, 817, 912], "classmethod": [386, 435, 628, 629, 694, 695, 696, 697, 698, 699, 801, 817, 944], "line_": [386, 435, 695, 697, 698, 699, 801, 817], "gridspecfromsubplotspec": 386, "subplot_spec": 386, "get_subplotspec": 386, "ax_top_left": 386, "ax_top_right": 386, "ax_bottom": 386, "bounding_ax_": [386, 629], "lines_": [386, 629, 801, 817], "contours_": [386, 629], "advic": [387, 416, 619, 620], "forth": 387, "userscript": 387, "tampermonkei": 387, "greasemonkei": 387, "shortcut": [387, 416], "pr_number": 387, "navig": [387, 1030], "overlai": [387, 629], "codecov": 387, "test_sparsifi": 387, "pdb": 387, "ipdb": [387, 1021], "pdbcl": 387, "terminalpdb": 387, "lf": 387, "ff": 387, "tb": [387, 568, 569, 570, 571, 572, 573, 574, 575], "runxfail": 387, "werror": 387, "mailman": 387, "listinfo": 387, "crowd": [387, 394, 983, 1007, 1009], "imped": 387, "attent": [387, 604, 605, 1000], "minimal_reproduc": 387, "pytb": 387, "stdin": [387, 1021], "perman": 387, "25163598": 387, "issuenumb": 387, "1506": 387, "volunt": 387, "establish": [387, 391, 394, 976], "clarifi": [387, 394, 789], "regression_test": 387, "0008": 387, "patienc": [387, 393], "crop": [387, 1043], "manifest": [387, 983, 989], "fault": [387, 1036, 1038, 1040], "glibc": 387, "uniniti": 387, "trace": [387, 406, 419, 470, 472, 473, 476, 477, 478, 686, 690, 983, 1039], "supp": 387, "readm": [387, 414, 490], "my_test_script": 387, "mobil": 387, "deploy": [387, 1006, 1007, 1010], "scalewai": 387, "aw": 387, "graviton": 387, "workstat": 387, "qemu": 387, "docker": [387, 400, 1041, 1042], "multiarch": 387, "ppc64le": 387, "filesystem": [387, 396, 1041], "pushd": 387, "wget": 387, "aarch64": 387, "arm64v8": 387, "mount": 387, "pwd": 387, "reinit": 387, "bashrc": 387, "ephemer": 387, "evolv": [388, 1043, 1045], "as_float_arrai": 388, "column_or_1d": [388, 1039, 1043], "multitarget": 388, "multi_output": [388, 918], "safe_index": [388, 1038], "check_memori": [388, 393, 1035], "5488135": 388, "71518937": 388, "60276338": 388, "54488318": 388, "has_fit_paramet": 388, "randomized_range_find": [388, 1029, 1034], "arrayfunc": [388, 405], "cholesky_delet": 388, "min_po": 388, "least_angl": 388, "fast_logdet": 388, "safe_sparse_dot": [388, 1038], "weighted_mod": 388, "sample_without_replac": [388, 1034], "n_popul": [388, 955], "sparsefunc": [388, 405, 1041], "mean_variance_axi": [388, 1034, 1041], "sparsefuncs_fast": [388, 405], "inplace_csr_row_normalize_l1": 388, "inplace_csr_row_normalize_l2": 388, "inplace_csr_column_scal": 388, "sort_graph_by_row_valu": [388, 1043], "single_source_shortest_path_length": 388, "dijkstra": [388, 685, 983], "graph_shortest_path": [388, 1041], "all_estim": [388, 1038, 1039, 1043], "all_displai": [388, 1043], "all_funct": [388, 1043], "is_multilabel": [388, 1045], "dict_learn": [388, 528, 534, 543, 1029, 1036, 1038, 1041, 1042, 1044], "gen_batch": [388, 939], "safe_mask": 388, "safe_sqr": 388, "murmurhash3_32": 388, "murmurhash3_x86_32": [388, 951], "cryptograph": 388, "lookup": [388, 951, 1037], "bloom": [388, 951], "384616559": 388, "3910350737": 388, "murmurhash": 388, "graphical_lasso": [388, 468, 469, 1036, 1044], "kit": 391, "toolbox": [391, 1006, 1010], "multilay": [391, 984], "kera": [391, 1006], "forese": 391, "redesign": [391, 1028], "pystruct": [391, 1006], "ssvm": 391, "seqlearn": 391, "4143": 391, "meanwhil": [391, 1001], "pipegraph": 391, "squared_loss": [391, 1041], "undertak": 391, "slowli": [391, 393, 541, 935], "ordinarili": [391, 393], "corrobor": 391, "proof": [391, 413, 892, 998], "road": 391, "bridg": [391, 983, 1006], "reproduct": [391, 982, 1009], "guidanc": [391, 416], "gitter": [391, 1004, 1035, 1036], "value_kei": [391, 913], "levenshtein": 391, "dna": [391, 625, 976], "rna": 391, "pain": 391, "suppli": [391, 406, 643, 918, 919, 989, 1010, 1032, 1034, 1036, 1041], "leven": 391, "acctcctagaag": 391, "acctactagaagtt": 391, "gaatattaggccga": 391, "lev_metr": 391, "multiprocess": [391, 393, 952, 954, 989, 1028, 1036, 1042], "exec": 391, "cuda": [391, 402], "reiniti": 391, "culprit": 391, "refus": [391, 888, 889], "forkserv": 391, "joblib_start_method": 391, "set_start_method": 391, "dozen": [392, 416], "leakag": [392, 393, 407, 1023], "disclos": 392, "entail": [392, 876, 878, 1000], "r_squar": 392, "searchcv": [392, 1043], "tacit": 393, "inconsist": [393, 400, 414, 505, 506, 573, 900, 903, 922, 992, 1001, 1023, 1028, 1033, 1034, 1035, 1036, 1038, 1041, 1043, 1044], "elsewher": [393, 459, 460, 468, 469, 475], "formal": [393, 394, 406, 413, 838, 839, 983, 986, 987, 990], "thereof": 393, "transduct": [393, 406, 893, 894, 1007], "position": 393, "serial": [393, 942, 1006, 1007, 1023, 1028, 1036, 1040, 1045], "unpickl": [393, 400, 573, 838, 839, 1034, 1040, 1044], "pep257": 393, "nuanc": 393, "flaw": [393, 413], "terminologi": [393, 1036], "est1": [393, 629], "est2": [393, 629], "exemplifi": 393, "_score": [393, 795, 809, 821, 986, 1028, 1041], "_loss": [393, 986], "divers": [393, 413], "abstract": [393, 411, 416, 615, 765, 1006, 1028], "descriptor": [393, 505, 506], "hoc": 393, "spectral_embed": [393, 983, 1029, 1032, 1034, 1036, 1038, 1041, 1042, 1043, 1045], "maxabs_scal": [393, 867, 1036], "astrai": 393, "readthedoc": 393, "entireti": 393, "shield": 393, "n_target": [393, 409, 479, 480, 481, 482, 521, 553, 608, 640, 643, 644, 647, 648, 649, 650, 651, 653, 654, 657, 658, 659, 660, 661, 662, 668, 669, 670, 671, 672, 678, 679, 680, 681, 682, 683, 684, 987, 1040, 1042, 1044], "synonym": [393, 840, 841, 842, 848, 849, 850], "themat": 393, "alphanumer": [393, 585, 586, 588], "statistician": [393, 878], "prescrib": 393, "baggingclassifi": [393, 397, 413, 553, 908, 976, 1031, 1034, 1035, 1036, 1039, 1043, 1044], "estimator__max_depth": [393, 975], "improp": [393, 1035], "pairwise_kernel": [393, 416, 449, 640, 761, 864, 984, 1028, 1035, 1045], "redundantli": 393, "distancemetr": [393, 412, 841, 989, 1036, 1040, 1041, 1042, 1045], "di": [393, 406, 411, 528, 534, 661, 682, 683, 891, 1032, 1041], "vectori": [393, 1038], "noun": 393, "venu": [393, 1009], "broadli": [393, 406], "consolid": [393, 394, 1028], "coo": [393, 550, 551, 689, 865, 914, 918, 919, 989, 1029, 1045], "lil": [393, 550, 551, 865, 914, 940, 989], "csgraph": [393, 1041], "absent": [393, 414, 750, 819], "densifi": [393, 655, 656, 663, 664, 665, 673, 674, 675, 898, 976, 1030], "lossili": 393, "unnorm": [393, 533, 983, 1034, 1035], "encompass": [393, 447, 453, 552, 553, 983], "is_regressor": 393, "get_n_split": [393, 796, 797, 800, 802, 803, 804, 805, 808, 810, 811, 812, 813, 814, 815, 816], "estimatorcv": [393, 1007], "loo": [393, 803, 1039], "router": [393, 397, 943, 944, 945, 946], "metadta": 393, "lexicograph": [393, 564, 784, 790, 840, 848], "type_of_target": [393, 865, 879, 987, 1042, 1043, 1045], "hashabl": [393, 866, 869, 997], "labelencod": [393, 566, 872, 997, 1028, 1036, 1043, 1044], "canonic": 393, "xxx": 393, "everywher": 393, "multilabelbinar": [393, 827, 862, 871, 987, 1012, 1031, 1033, 1034, 1036, 1037], "nonetheless": [393, 986], "wherein": 393, "amber": 393, "return_cov": [393, 564, 565, 608, 858], "_idx": 393, "label1": 393, "label2": 393, "class_label": [393, 554, 558, 561, 655, 656, 663, 665, 671, 672, 673, 906, 908, 924, 1001], "bincount": [393, 410, 554, 558, 561, 655, 656, 663, 665, 671, 672, 673, 898, 900, 903, 906, 908, 923, 924, 1035], "rebalanc": 393, "compute_class_weight": [393, 1031, 1042], "check_cv": [393, 1033], "obei": [393, 984], "triangl": [393, 411, 440, 444, 456, 696, 984, 989], "concurr": [393, 414, 952, 1040, 1042], "unset": [393, 1036], "get_scor": [393, 729, 1035, 1044], "check_scor": 393, "uppercas": [393, 1041], "unavail": [393, 655, 656, 947, 1035, 1041], "deadlock": 394, "meritocrat": 394, "somebodi": 394, "unanim": 394, "emeritu": [394, 1004], "recant": 394, "outreach": 394, "brand": [394, 396], "social": [394, 406, 1010], "authorit": 394, "strateg": 394, "entiti": [394, 722, 752], "duti": 394, "resign": 394, "occasion": [394, 723, 1037], "escal": 394, "fallback": [394, 396, 826, 827, 986], "hereaft": 394, "lazi": [394, 414, 1000, 1032], "opinion": 394, "slep020": 394, "veto": 394, "appeal": 394, "revis": [394, 667], "slep000": 394, "insuffici": [395, 985, 1020], "afraid": 396, "64bit": [396, 1028], "miniconda": 396, "administr": 396, "dnf": 396, "pacman": 396, "raspberri": 396, "polar": [396, 399, 430, 439, 440, 442, 444, 446, 461, 465, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 563, 564, 565, 566, 567, 578, 579, 580, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 685, 686, 689, 842, 847, 850, 854, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 896, 1021, 1045], "pyarrow": [396, 399], "lock": [396, 399, 952, 954], "py3": 396, "apk": 396, "bind": [396, 1006, 1028, 1035, 1036], "pkgsrc": 396, "py39": 396, "intelex": [396, 1006], "oned": 396, "sklearnex": 396, "plugin": 396, "appdata": 396, "usernam": 396, "windowsapp": 396, "oserror": [396, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495], "errno": 396, "pythonsoftwarefound": 396, "7_qbz5n2kfra8p0": 396, "localcach": 396, "python37": 396, "data_nam": 396, "australian": 396, "data_vers": 396, "lift": 396, "regedit": 396, "menu": 396, "hkey_local_machin": 396, "currentcontrolset": 396, "longpathsen": 396, "broken": [396, 410, 596, 597, 632, 717, 914, 986, 1002, 1031, 1035, 1036, 1037, 1039, 1042], "unsupport": [397, 400, 490, 1036, 1041], "set_": 397, "_request": 397, "weighted_acc": 397, "sample_weigh": 397, "sel": [397, 415], "scoring_weight": 397, "fitting_weight": 397, "hasn": 397, "larscv": [397, 647, 662, 679, 680, 1035, 1041, 1045], "multitaskelasticnetcv": [397, 643, 644, 649, 657, 659, 660, 678, 982, 1031, 1038, 1039, 1041, 1045], "multitasklassocv": [397, 658, 659, 1031, 1038, 1039, 1041, 1045], "multioutputclassifi": [397, 784, 827, 829, 831, 986, 1035, 1037, 1038, 1039, 1040, 1044], "regressorchain": [397, 829, 831, 1036, 1039, 1043], "ridgeclassifiercv": [397, 670, 671, 784, 986, 987, 1036, 1038, 1039, 1041, 1042], "retrain": [400, 1007, 1044], "inconsistentversionwarn": [400, 1044], "simplefilt": 400, "model_from_prevision_vers": 400, "original_sklearn_vers": [400, 573], "untrust": 400, "malici": 400, "inadvis": 400, "immut": 400, "snapshot": [400, 556, 557, 1007], "portabl": [400, 1006], "alex": [400, 414, 1001, 1028, 1031, 1036, 1038, 1039, 1040, 1042, 1043, 1044], "gaynor": 400, "sio": 400, "get_untrusted_typ": 400, "unknown_typ": 400, "exchang": [400, 1009], "markup": 400, "pmml": [400, 1006], "onnx": [400, 1006, 1007], "xml": 400, "sklearn2pmml": [400, 1006], "affero": 400, "gplv3": 400, "datastructur": [402, 1036, 1040], "namespac": 402, "array_api": 402, "x_np": 402, "y_np": 402, "x_cu": 402, "y_cu": 402, "array_api_dispatch": [402, 465, 896], "_estimator_with_converted_arrai": 402, "transfer": [402, 982, 1007], "_array_api": 402, "cupy_to_ndarrai": 402, "lda_np": 402, "torch": 402, "x_torch": 402, "y_torch": 402, "power_iteration_norm": [402, 538, 541, 934, 935, 1042], "kernelcenter": [402, 996, 1038, 1042, 1044, 1045], "array_api_compat": 402, "metal": 402, "shader": 402, "m2": 402, "chip": [402, 1010], "77764": 402, "pytorch_enable_mps_fallback": 402, "submatrix": [403, 421, 448, 450], "unusu": [403, 992, 996, 1036], "submatric": 403, "bipartit": [403, 450, 508, 991], "subgraph": 403, "a_n": 403, "lceil": [403, 992], "log_2": [403, 560, 992], "rceil": [403, 992], "bmatrix": [403, 978], "u_2": [403, 978], "u_": [403, 479, 480, 481], "n_column": [403, 448, 450], "inderjit": [403, 450], "spectralbiclust": [403, 450, 1030, 1034, 1035, 1039], "blockwis": [403, 982], "bistochast": [403, 448], "l_": [403, 608, 649, 737, 986], "k_": [403, 416, 613, 616, 618, 621, 770, 978, 996], "u_1": [403, 978], "v_1": 403, "v_2": 403, "v_": [403, 414], "kluger": [403, 448, 510], "yuval": [403, 448], "microarrai": [403, 448, 510, 625, 976], "cap": [403, 406, 751, 986, 1037], "hochreit": [403, 716], "hungarian": [403, 716], "bodenhof": [403, 716], "fabia": [403, 716], "acquisit": [403, 716], "murphi": [404, 640, 979], "discriminatori": 404, "wilk": 404, "tricki": [404, 983], "logit": [404, 416, 655, 656, 982], "f_i": 404, "train_set": 404, "test_set": 404, "disjoint": [404, 406, 407, 434, 701, 727, 751, 753, 983], "platt": [404, 434, 900, 901, 903, 904, 1001], "_i": [404, 413, 977, 982, 986, 990, 1001], "_j": [404, 977], "f_j": [404, 994], "meteorologi": 404, "climatologi": 404, "precipit": 404, "wea": 404, "640": [404, 487, 503, 504, 580, 581, 975], "650": 404, "1990a": 404, "menon": 404, "ak": [404, 1042, 1043], "jiang": [404, 1032, 1039], "xj": 404, "vembu": 404, "ohno": 404, "machado": [404, 719], "703": [404, 510], "710": 404, "kull": [404, 986], "silva": [404, 685, 983, 1039, 1041], "filho": 404, "flach": [404, 986], "mario": [404, 1032, 1034, 1042, 1043, 1044], "w\u00fcthrich": 404, "merz": 404, "actuari": 404, "refurbish": 405, "rough": [405, 992, 1014], "uniti": 405, "lipschitz": [405, 998], "mod": 405, "usecas": 406, "mu_j": 406, "coher": 406, "elong": 406, "lloyd": [406, 440, 444, 446, 456, 1042, 1043], "distant": [406, 689, 706, 989], "sergei": [406, 1030, 1034, 1035, 1036, 1037, 1038], "vassilvitskii": [406, 444, 457], "eighteenth": 406, "siam": [406, 410, 449, 457, 459, 532, 538], "industri": [406, 1006], "predetermin": [406, 983], "scullei": 406, "19th": 406, "exemplar": [406, 437, 451, 1020], "sent": [406, 827], "leftarrow": [406, 990, 1000], "foral": [406, 416, 610], "neq": [406, 986, 988, 996], "notin": 406, "hill": [406, 445, 458, 1038], "climb": [406, 445, 458], "maxima": 406, "x_j": [406, 416, 611, 612, 616, 619, 620, 622, 977, 978, 982, 989, 1001, 1002], "dictat": 406, "solvabl": 406, "stella": [406, 449, 459], "jianbo": [406, 449, 459, 688], "shi": [406, 449, 459, 688], "anil": [406, 449, 459], "daml": [406, 449, 459], "victor": [406, 449, 459, 1035, 1038], "minden": [406, 449, 459], "lex": [406, 449, 459], "ying": [406, 449, 459, 1042], "adjac": [406, 411, 449, 459, 582, 583, 632, 688, 692, 940, 983, 989, 1020], "adjacency_matrix": 406, "ulrik": [406, 449, 459, 688], "von": [406, 449, 459, 688, 1006, 1035, 1036], "luxburg": [406, 449, 459, 688], "jitendra": [406, 449, 459, 688], "malik": [406, 449, 459, 688], "walk": [406, 412, 1031], "marina": 406, "meila": 406, "ng": [406, 411, 688, 844, 990, 992, 1039], "jordan": [406, 411, 688, 793, 1038, 1039, 1042, 1043], "yair": [406, 688], "precondit": [406, 449, 459, 692, 1002, 1044], "zhuzhunashvili": [406, 459], "forbid": [406, 413], "macroscop": 406, "occupi": [406, 986], "manhattan": [406, 438, 442, 447, 454, 696, 758, 767, 774, 775, 776, 845, 984, 989, 1032, 1037, 1044], "bisecting_strategi": [406, 440], "largest_clust": [406, 440], "biggest_inertia": [406, 440], "biggest": [406, 409, 411, 440], "steinbach": [406, 1043], "karypi": 406, "vipin": 406, "egin": 406, "minnesota": 406, "june": [406, 983, 1034, 1044], "weblog": 406, "abirami": 406, "mayilvahanan": 406, "emerg": [406, 1010], "ijet": 406, "jian": 406, "xinyu": 406, "gou": 406, "baod": 406, "hebei": 406, "knee": 406, "triangular": [406, 460, 608, 983], "whichev": [406, 413, 443, 541, 558, 559, 630, 647, 651, 653, 661, 679, 680, 694], "conjunct": [406, 591, 801, 817, 819, 820, 821, 822, 825, 953, 976, 982, 1043], "extract_dbscan": 406, "radius_neighbors_graph": [406, 417, 441, 840, 841, 842, 844, 846, 848, 849, 850, 851, 989, 1032, 1037, 1040], "ester": [406, 417, 441], "kriegel": [406, 417, 441, 447, 454, 844, 992], "sander": [406, 417, 441, 443, 447, 454, 844, 992, 1037, 1038], "xu": [406, 409, 417, 441, 1000, 1041, 1042, 1045], "portland": [406, 417, 441], "aaai": [406, 417, 441, 833, 988], "226": [406, 417, 441], "revisit": [406, 417, 441], "schubert": [406, 417, 441, 447, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1042], "tod": [406, 417, 441], "lj2017": 406, "d_c": 406, "x_p": [406, 982], "d_m": 406, "x_q": 406, "g_": 406, "varepsilon": [406, 1000, 1001], "cm2013": 406, "mst": 406, "minimum_cluster_s": 406, "campello": [406, 443], "moulavi": [406, 443], "pei": [406, 1035], "tseng": 406, "cao": 406, "motoda": 406, "pakdd": 406, "lectur": [406, 641, 978, 1005], "7819": [406, 1035], "berlin": [406, 411, 532, 693, 722, 752, 986], "heidelberg": [406, 411, 532, 693, 722, 752, 986], "mcinn": [406, 1034, 1035, 1036, 1038, 1039, 1044], "heali": 406, "icdmw": 406, "max_ep": [406, 447, 452, 454], "nearbi": [406, 989], "cluster_hierarchy_": [406, 447], "planar": 406, "peripheri": 406, "wall": 406, "ankerst": [406, 447, 454], "mihael": [406, 447, 454], "marku": [406, 447, 454, 1036, 1038, 1039, 1040], "breunig": [406, 447, 454, 844, 992], "han": [406, 439, 447, 454, 1028, 1036, 1037, 1041], "j\u00f6rg": [406, 447, 454, 1036], "sigmod": [406, 447, 454, 844, 992], "cft": 406, "lossi": 406, "subclust": [406, 439], "till": [406, 439, 784, 986], "temporarili": [406, 1033], "farthest": 406, "brc": [406, 439], "tian": [406, 439, 1033, 1034, 1035], "raghu": [406, 439], "ramakrishnan": [406, 439], "maron": [406, 439], "livni": [406, 439], "sfu": [406, 439], "coursecentr": [406, 439], "zhang96": [406, 439], "roberto": [406, 439], "perdisci": [406, 439], "jbirch": [406, 439], "java": [406, 439, 1006], "satisfi": [406, 647, 651, 696, 714, 732, 733, 838, 839], "labels_pr": [406, 701, 702, 711, 712, 714, 727, 732, 733, 751, 753, 782, 791], "unadjust": [406, 986, 1040], "swap": [406, 411, 713, 732, 965, 966, 1028], "ri": [406, 702, 782], "c_2": [406, 983], "unord": [406, 413, 996], "esp": [406, 1028], "hubert": [406, 702, 712, 782], "arabi": [406, 702, 712, 782], "steinlei": [406, 702], "psycholog": [406, 702, 713], "agreement": [406, 701, 713, 751, 753, 791, 986], "22504": 406, "10526": 406, "u_i": [406, 479, 480, 481, 751], "v_j": [406, 751, 991], "veb2009": 406, "a_i": 406, "b_j": 406, "yat2016": 406, "average_method": [406, 701, 753, 1036], "vinh": [406, 701], "veb2010": 406, "strehl": 406, "joydeep": 406, "583": [406, 1019], "1162": 406, "153244303321897735": 406, "epp": [406, 701], "bailei": [406, 701], "26th": [406, 722, 752, 986], "1553374": 406, "1553511": 406, "9781605585161": 406, "csail": [406, 663, 664, 673, 835], "volume11": 406, "vinh10a": 406, "algesheim": 406, "tesson": 406, "30750": 406, "1038": 406, "srep30750": 406, "rosenberg": [406, 714, 733, 791], "hirschberg": [406, 714, 733, 791], "b2011": 406, "homogeneity_completeness_v_measur": [406, 1037], "n_k": [406, 547], "n_c": [406, 656], "julia": [406, 714, 733, 791], "media": [406, 1010], "hila": 406, "becker": [406, 1010, 1031, 1040], "fowlkes_mallows_scor": [406, 986, 1034, 1036], "fmi": [406, 727], "tp": [406, 709, 715, 727, 778, 779, 780, 783, 910, 986], "fp": [406, 709, 715, 727, 778, 779, 780, 783, 986], "fn": [406, 709, 715, 727, 778, 779, 780, 783, 986, 987], "47140": 406, "fowkl": [406, 727], "1983": [406, 727, 878], "tandfonlin": 406, "01621459": 406, "10478008": 406, "kmeans_model": 406, "1987": [406, 604, 605, 788, 789], "calinski_harabasz_scor": [406, 1036], "561": 406, "n_e": 406, "mathrm": [406, 408, 411, 415, 982, 1002], "b_k": 406, "w_k": [406, 982], "c_q": 406, "n_q": 406, "c_e": 406, "cali\u0144ski": 406, "1974": [406, 414, 707], "dendrit": [406, 707], "davies_bouldin_scor": [406, 1036], "6619": 406, "bould": 406, "c_i": [406, 989], "c_j": [406, 991], "s_i": [406, 982, 996], "diamet": 406, "nonneg": [406, 411, 450, 535, 537, 544, 875], "s_j": 406, "max_": [406, 986], "1979": [406, 721, 765], "halkidi": 406, "batistaki": 406, "yanni": 406, "vazirgianni": 406, "michali": 406, "contingency_matrix": [406, 751, 1036], "pair_confusion_matrix": [406, 1040], "permit": [407, 464, 585, 586, 588, 795, 798, 799, 809, 820, 859, 860, 986, 987, 988, 1034], "clf__c": 407, "pca1": [407, 422], "svm1": 407, "77484909e": 407, "07058917e": 407, "pca2": [407, 422], "svm2": 407, "raw_target_regr": 407, "bypass": [407, 596, 643, 649, 906, 907, 908, 909, 1044], "check_invers": [407, 462, 862, 996, 1036, 1042, 1043], "linear_pca": 407, "make_union": [407, 857, 1031, 1035], "unreli": 407, "citi": [407, 414, 463, 1021], "london": [407, 414, 463], "sallisaw": [407, 463], "bow": 407, "moveabl": 407, "feast": 407, "grape": 407, "wrath": 407, "expert_r": 407, "user_r": 407, "city_categori": 407, "title_bow": 407, "city_london": 407, "city_pari": 407, "city_sallisaw": 407, "507": 407, "301": [407, 1000], "ignored_new_col": 407, "shrunk_covari": 408, "sigma_": [408, 641, 642, 1041], "365": [408, 470], "wiesel": [408, 419, 472], "eldar": [408, 419, 472], "hero": [408, 419, 472], "5016": [408, 419, 472], "5029": [408, 419, 472], "_k": [408, 980, 982], "glasso": [408, 475], "biostatist": [408, 475], "uncommon": [408, 655, 898, 1001], "downweight": [408, 533], "driessen": [408, 466, 471, 992], "fastmcd": [408, 466, 471], "raw_location_": [408, 466, 471], "raw_covariance_": [408, 466, 471], "multidimension": [409, 685, 687, 689, 691, 983, 989], "plsw2a": 409, "u_k": [409, 411], "v_k": [409, 411, 528, 534, 542, 543], "x_k": [409, 411, 980, 989], "y_k": [409, 996], "xi_k": 409, "omega_k": [409, 980], "gamma_k": 409, "delta_k": 409, "nipal": [409, 480, 481], "xp": [409, 873], "x_rotations_": [409, 479, 480, 481], "y_rotations_": [409, 479, 480, 481], "ty": 409, "x_weights_": [409, 479, 480, 481, 482], "y_weights_": [409, 479, 480, 481, 482], "yv": 409, "tx": 409, "pls1": [409, 481], "pls2": [409, 481], "tx_k": [409, 980], "ty_k": 409, "ja": [409, 1035], "wegelin": 409, "methodolog": [410, 1009], "academ": [410, 1010], "commerci": [410, 1010], "flowchart": [410, 1014], "f1_macro": [410, 986, 1032], "custom_cv_2fold": 410, "custom_cv": 410, "9333": 410, "scorer1_nam": 410, "scorer2_nam": 410, "return_indic": [410, 821, 1044], "precision_macro": [410, 1016], "recall_macro": [410, 986], "test_precision_macro": 410, "test_recall_macro": 410, "prec_macro": 410, "rec_macro": 410, "test_prec_macro": 410, "test_rec_macro": 410, "train_prec_macro": 410, "train_rec_macro": 410, "undistinguish": 410, "devic": [410, 579, 1006], "kf": [410, 800], "12883823": 410, "rkf": [410, 810], "weigh": [410, 1035], "caveat": [410, 416], "part3": 410, "spector": 410, "submodel": 410, "kohavi": 410, "jnt": 410, "bharat": [410, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "rao": [410, 1040, 1043], "fung": 410, "rosal": 410, "witten": 410, "leavepout": [410, 803, 1016], "ss": 410, "gkf": 410, "sgkf": [410, 813], "suboptim": [410, 697, 699, 778, 785, 989, 1036, 1044], "leavepgroupsout": [410, 797, 1016, 1034], "n_group": [410, 804, 1016, 1034], "lpgo": [410, 804], "gss": [410, 797], "withheld": 410, "predefinedsplit": [410, 1016, 1032], "test_fold": [410, 808], "train_indx": 410, "test_indx": 410, "autocorrel": 410, "superset": [410, 816, 986], "surplu": 410, "tscv": [410, 816], "inbuilt": 410, "some_integ": 410, "n_cv": [410, 434], "isotropi": 411, "alik": [411, 984], "halko": [411, 532, 538, 541, 934, 935], "szlam": [411, 934, 935], "disadvantag": [411, 416, 982, 983, 990, 1000, 1001, 1002], "parsimoni": [411, 996], "jen09": 411, "mrl09": 411, "ell_1": [411, 982], "underset": [411, 982, 989, 1002], "operatornam": [411, 737, 982, 986, 1002], "fro": [411, 535, 537, 544, 690, 982], "gentli": 411, "spirit": 411, "mairal": [411, 528, 534], "bach": [411, 528, 533, 534, 535, 655, 982], "ponc": [411, 528, 534], "sapiro": [411, 528, 534], "jenatton": 411, "obozinski": 411, "scholkopf1997": 411, "bakir2003": 411, "smola": [411, 414, 532, 864, 996, 1001], "klau": [411, 532, 864], "eigendecompos": 411, "eigensolv": [411, 449, 459, 532, 541, 692, 983], "eigsh": [411, 532, 1034, 1035], "lehoucq": 411, "sorensen": 411, "lsa": [411, 541, 1030], "synonymi": 411, "polysemi": 411, "lsi": 411, "sigma_k": [411, 980], "columnwis": 411, "sublinear": [411, 587, 588], "use_idf": [411, 414, 587, 588, 1021], "textual": [411, 1002, 1037], "man": [411, 587, 765, 833, 837, 984, 986, 988], "prabhakar": 411, "raghavan": [411, 587, 833, 837, 984, 986, 988], "hinrich": 411, "sch\u00fctze": [411, 587, 984, 986, 988], "transform_method": 411, "split_cod": 411, "dictionarylearn": [411, 534, 536, 537, 539, 540, 541, 542, 543, 1029, 1033, 1035, 1038, 1041, 1042, 1043, 1044], "overcomplet": 411, "mammalian": 411, "cortex": 411, "inpaint": 411, "h_i": [411, 991], "psi": 411, "sim": [411, 1019], "wh_i": 411, "ww": 411, "superflu": 411, "psi_1": 411, "psi_2": 411, "psi_n": 411, "superimpos": 411, "plug": [411, 982, 1010, 1021], "wh": [411, 535, 537, 544], "hoyer": [411, 1031], "nndsvd": [411, 535, 537, 544, 1037, 1040], "nndsvdar": [411, 535, 537, 544, 1037], "elementwis": [411, 535, 537, 544], "_featur": [411, 535, 537, 544], "kl": [411, 983, 1036], "itakura": [411, 535, 537, 544, 1035], "saito": [411, 535, 537, 544, 1035], "w_new": 411, "forget_factor": [411, 535], "lee": [411, 1028, 1029, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1043], "seung": 411, "boutsidi": 411, "gallopoulo": 411, "cichocki": [411, 535, 537, 544], "phan": 411, "fevott": [411, 535, 537, 544], "idier": [411, 535, 537, 544], "lefevr": [411, 535], "corpora": 411, "hoffman": [411, 533, 1033, 1040], "unshad": 411, "beta_k": 411, "eta": [411, 533, 673, 674, 675, 990, 1000, 1033], "topic_word_prior": [411, 533], "theta_d": 411, "doc_topic_prior": [411, 533], "z_": 411, "w_": [411, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 982, 986, 988, 991], "elbo": 411, "overset": [411, 993], "e_": 411, "blei": [411, 533, 793], "wang": [411, 533, 676, 686, 690, 722, 752, 982, 983, 986, 1031, 1033, 1034, 1035, 1036, 1040, 1043, 1044], "paislei": [411, 533], "kaiser": [411, 529], "talli": 412, "disproportion": 412, "41075698": 412, "41076071": 412, "rho_k": 412, "unsmooth": 412, "scott": [412, 843, 1028, 1029, 1034, 1036, 1037, 1038, 1043, 1044], "silvermann": 412, "propto": [412, 988], "2h": 412, "angular": [412, 689, 760], "contin": [412, 711, 996], "semin": 413, "friedman2001": 413, "lightgbm": [413, 558, 559, 1006, 1037, 1044], "8965": 413, "grower": [413, 558, 559], "missing": [413, 624, 625, 627, 1037], "fisher1958": 413, "loan": [413, 531, 982, 1010], "mayer2022": 413, "mayer": [413, 1040, 1042], "bourassa": 413, "hoesli": 413, "scognamiglio": 413, "valuat": 413, "tianqi": 413, "guestrin": 413, "ke": [413, 1039, 1040], "boostingdecis": 413, "913": [413, 556], "nr": 413, "f_m": 413, "h_m": 413, "f_": [413, 632, 986], "l_m": 413, "taylor": [413, 1036, 1038, 1039, 1042], "g_i": [413, 646], "sum_m": 413, "softmax": [413, 558, 655, 656, 982, 989, 990], "superior": 413, "ineffici": [413, 440, 571, 826, 827, 989, 991], "htf": 413, "r2007": 413, "friedman2002": 413, "1189": 413, "1232": 413, "b1998": 413, "decoupl": [413, 988], "cancel": [413, 414, 759], "b2001": 413, "bear": [413, 1006], "geurt": [413, 552, 553, 554, 555, 562, 563, 908, 909], "ernst": [413, 554, 555, 562, 563, 908, 909], "wehenkel": [413, 554, 555, 562, 563, 908, 909], "l2014": 413, "lieg": 413, "flavour": 413, "b1999": 413, "b1996": 413, "h1998": 413, "lg2012": 413, "bootstrap_featur": [413, 552, 553], "844": [413, 552, 553], "w2": 413, "w3": 413, "lr__c": 413, "rf__n_estim": 413, "w1992": 413, "knr": 413, "stack_method": [413, 564], "286": 413, "225": 413, "126": 413, "stack_method_": [413, 564, 565], "final_layer_rfr": 413, "final_layer_gbr": 413, "final_lay": 413, "multi_layer_regressor": 413, "wolpert": [413, 564, 565], "freund": [413, 550, 551], "fs1995": 413, "w_1": [413, 982, 990], "w_2": [413, 982, 990], "w_n": 413, "w_i": [413, 977, 986], "reappli": 413, "zzrh2009": 413, "d1997": 413, "dubai": 414, "francisco": [414, 998], "movi": [414, 1013], "movie_entri": 414, "thriller": [414, 869], "drama": 414, "000e": 414, "003e": 414, "011e": 414, "974e": 414, "unseen_featur": [414, 578], "speech": [414, 986], "chunker": 414, "pos_window": 414, "pos_vector": 414, "1x6": 414, "part_of_speech": 414, "token_featur": 414, "isupp": 414, "uppercase_initi": 414, "all_uppercas": 414, "raw_x": [414, 579], "pos_tagg": 414, "murmurhash3": [414, 579, 586, 951], "weinberg": 414, "modulo": [414, 1039], "kilian": [414, 1043, 1044], "anirban": 414, "dasgupta": [414, 443, 892, 998], "langford": [414, 685, 983], "josh": [414, 1035], "attenberg": 414, "punctuat": [414, 585, 586, 588], "diminish": 414, "4x9": 414, "build_analyz": [414, 585, 586, 588, 1038], "interrog": 414, "bigram_vector": 414, "cool": [414, 1028], "feature_index": 414, "him": 414, "constru": 414, "nqy18": 414, "smooth_idf": [414, 587, 588], "_n": [414, 986], "textbook": [414, 587], "6x3": 414, "81940995": 414, "57320793": 414, "47330339": 414, "88089948": 414, "58149261": 414, "81355169": 414, "term1": 414, "term2": 414, "term3": 414, "0986": [414, 862], "819": 414, "8473": 414, "8515": [414, 1035], "5243": 414, "85151335": 414, "52433293": 414, "55422893": 414, "83236428": 414, "63035731": 414, "77630514": 414, "idf_": [414, 587, 588, 1036], "western": 414, "europ": [414, 996], "koi8": 414, "russian": 414, "unicodedecodeerror": [414, 585, 586, 588], "told": 414, "troubleshoot": [414, 1004], "chardet": 414, "chardetect": 414, "damag": 414, "sloppili": 414, "ftfy": 414, "mish": 414, "mash": 414, "text1": 414, "sei": 414, "mir": 414, "gegr": 414, "xc3": 414, "xbc": 414, "x9ft": 414, "mein": 414, "sauerkraut": 414, "text2": 414, "holdselig": 414, "sind": 414, "dein": 414, "ger": 414, "xfcche": 414, "text3": 414, "xff": 414, "xfea": 414, "x00u": 414, "x00f": 414, "x00": 414, "x00l": 414, "xfc": 414, "x00g": 414, "x00e": 414, "x00n": 414, "x00d": 414, "x00a": 414, "x00h": 414, "x00r": 414, "x00z": 414, "x00i": 414, "x00b": 414, "x00c": 414, "x00t": 414, "x00o": 414, "spolski": 414, "nnmf": [414, 1022, 1023, 1028], "phrase": 414, "misspel": 414, "rescu": 414, "resili": 414, "wprd": 414, "ngram_vector": 414, "char_wb": [414, 585, 586, 588], "rd": 414, "wo": 414, "wp": [414, 654, 668], "char": [414, 585, 586, 588, 1028], "jumpi": 414, "fox": [414, 1044], "1x4": 414, "umpi": 414, "1x5": 414, "mpy": 414, "fo": 414, "paragraph": [414, 500, 1021], "barrier": 414, "hv": 414, "4x10": 414, "discrep": [414, 1021, 1032], "4x1048576": 414, "collid": 414, "ingest": 414, "spend": 414, "my_token": 414, "lowercas": [414, 422, 439, 440, 442, 444, 446, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 585, 586, 588, 636, 637, 638, 639, 685, 686, 689, 842, 847, 850, 854, 859, 864, 890, 891, 1041], "lucen": 414, "build_preprocessor": [414, 585, 586, 588, 1038], "whitespac": 414, "fanci": 414, "lemmat": 414, "nltk": [414, 1005, 1006], "word_token": 414, "wordnetlemmat": 414, "lemmatoken": 414, "wnl": 414, "british": 414, "spell": 414, "to_british": 414, "1or": 414, "bt": 414, "1er": 414, "ing": 414, "ation": 414, "1z": 414, "ogu": 414, "og": 414, "customvector": 414, "asian": 414, "one_imag": [414, 581], "fake": 414, "assert_array_equ": 414, "patchextractor": [414, 1044], "five_imag": 414, "variancethreshold": [415, 863, 976, 1031, 1038, 1041, 1044], "selectfdr": [415, 589, 593, 595, 596, 597, 603, 1032, 1034, 1035, 1044], "selectfw": [415, 589, 592, 593, 596, 597, 603, 1044], "genericunivariateselect": [415, 592, 593, 595, 596, 597, 599, 1042, 1044], "r_regress": [415, 603, 1041, 1042, 1045], "nonparametr": [415, 416, 604, 605], "bewar": 415, "importance_gett": [415, 590, 591, 594, 1040], "unimport": 415, "lsvc": 415, "baraniuk": 415, "isr": 415, "ist": 415, "utl": 415, "aguiar": 415, "cs_note": 415, "ferri": [415, 986], "versatil": [416, 1001, 1010], "optima": 416, "markov": [416, 608, 991, 1006, 1028], "nuisanc": 416, "one_vs_on": [416, 607, 987], "ingredi": 416, "duv2014": 416, "theta_l": 416, "x_bound": [416, 614], "operand": 416, "k1__": 416, "k2__": 416, "constant_valu": [416, 610, 614], "constant_value_bound": [416, 608, 610, 614], "k1__k1__constant_valu": 416, "value_typ": [416, 614], "n_element": [416, 614], "k2__length_scal": 416, "k1": [416, 618, 621], "k1__k1": 416, "k1__k1__constant_value_bound": 416, "k1__k2": 416, "k1__k2__length_scale_bound": 416, "k2": [416, 618, 621], "k2__length_scale_bound": 416, "69314718": [416, 609, 996], "30258509": 416, "interoper": [416, 1004, 1007, 1023], "pairwisekernel": 416, "_valu": [416, 610], "_level": [416, 622], "k_1": [416, 618, 621], "k_2": [416, 618, 621], "__add__": [416, 621], "__mul___": 416, "__pow__": [416, 613], "2l": [416, 619], "bigg": [416, 616], "bessel": [416, 616], "rightarrow": [416, 616, 990], "quad": [416, 989, 1000], "tfrac": 416, "3l": 416, "pp84": 416, "x_d": [416, 611], "inhomogen": [416, 611], "expon": [416, 613, 673, 674, 675, 807, 855, 856, 873, 975], "carl": [416, 607, 608, 611, 616, 619], "rasmussen": [416, 607, 608, 611, 616, 619], "duvenaud": [416, 619, 620], "cookbook": [416, 619, 620], "minkowski": [417, 441, 447, 454, 685, 696, 774, 775, 776, 838, 839, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 989, 1028, 1031, 1042, 1043, 1044], "metric_param": [417, 441, 443, 447, 454, 685, 689, 840, 841, 842, 843, 844, 846, 848, 849, 850, 851, 852, 1032, 1035, 1042], "leaf_siz": [417, 441, 443, 447, 454, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850], "kd_tree": [417, 441, 443, 447, 454, 685, 686, 840, 841, 842, 843, 844, 846, 848, 849, 850, 989, 1041, 1045], "balltre": [417, 441, 443, 447, 454, 685, 686, 696, 840, 841, 842, 843, 844, 846, 848, 849, 850, 983, 1028, 1030, 1032, 1036, 1041, 1044, 1045], "ckdtree": [417, 441, 1030], "inhibit": [417, 441], "core_sampl": 417, "n_core_sampl": [417, 441], "attract": [417, 441, 980, 989, 1006], "fun": [418, 530, 1010], "logcosh": [418, 530], "fun_arg": [418, 530], "w_init": [418, 530], "whiten_solv": [418, 530, 1043], "return_x_mean": 418, "compute_sourc": 418, "return_n_it": [418, 451, 456, 475, 542, 543, 643, 644, 649, 650, 657, 658, 659, 660, 678, 679, 680, 681, 682, 683, 684, 691, 1042], "cube": [418, 530], "my_g": [418, 530], "x_mean": 418, "AS": 418, "fortran": [418, 538, 643, 644, 649, 650, 657, 658, 659, 660, 662, 678, 681, 682, 683, 918, 919, 1028, 1031, 1032, 1036], "hyvarinen": [418, 530], "oja": [418, 530], "430": [418, 530], "shrunk_cov": [419, 476, 478], "eq": [419, 472, 718, 719, 720], "subobject": [420, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 578, 579, 580, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 685, 686, 687, 688, 689, 793, 794, 795, 798, 799, 809, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909], "row_ind": [421, 448, 450], "intp": [421, 448, 450], "col_ind": [421, 448, 450], "get_submatrix": [421, 448, 450], "pca0": 422, "_n_features_out": 422, "class_name0": [422, 439, 440, 442, 444, 446, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 636, 637, 638, 639, 685, 686, 689, 842, 847, 850, 854, 864, 890, 891], "class_name1": [422, 439, 440, 442, 444, 446, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 636, 637, 638, 639, 685, 686, 689, 842, 847, 850, 854, 864, 890, 891], "class_name2": [422, 439, 440, 442, 444, 446, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 636, 637, 638, 639, 685, 686, 689, 842, 847, 850, 854, 864, 890, 891], "feature_names_out": [422, 427, 439, 440, 442, 444, 446, 461, 479, 480, 481, 482, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 563, 564, 565, 566, 567, 578, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 624, 625, 626, 627, 632, 635, 636, 637, 638, 639, 685, 686, 689, 842, 847, 850, 854, 857, 858, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 890, 891, 1042], "harsh": [423, 434, 466, 546, 547, 548, 550, 552, 554, 556, 558, 561, 564, 566, 607, 655, 663, 665, 671, 672, 673, 826, 827, 828, 829, 833, 834, 835, 836, 837, 840, 845, 848, 855, 893, 894, 898, 900, 903, 906, 908, 1038, 1040, 1043], "n_samples_fit": [429, 462, 479, 480, 481, 551, 553, 555, 557, 559, 562, 565, 567, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 685, 831, 832, 840, 841, 842, 844, 846, 848, 849, 850, 856, 899, 901, 904, 907, 909], "uniform_averag": [429, 462, 479, 480, 481, 551, 553, 555, 557, 559, 562, 565, 567, 608, 632, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 664, 667, 669, 670, 675, 676, 718, 719, 724, 741, 742, 744, 746, 747, 749, 781, 786, 787, 831, 832, 841, 849, 856, 899, 901, 904, 907, 909, 986, 1037], "n_features_new": [430, 439, 442, 529, 531, 533, 534, 536, 539, 540, 546, 564, 566, 567, 579, 580, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 625, 627, 632, 635, 636, 637, 638, 639, 847, 854, 861, 862, 863, 864, 867, 868, 870, 871, 872, 873, 875, 876, 877, 878, 890, 891], "base_clf": 434, "calibrated_clf": 434, "927": 434, "x_calib": 434, "y_calib": 434, "prob_tru": [435, 436], "prob_pr": [435, 436], "ref_lin": 435, "alexandru": 436, "22nd": 436, "525": [436, 625, 976], "convergence_it": [437, 451], "hardcod": [437, 451, 1036], "affinity_matrix_": [437, 449, 688], "cluster_center_indic": [437, 451], "compute_full_tre": [438, 442, 1032], "compute_dist": [438, 442, 1040], "inferior": [438, 442, 1039], "n_leaves_": [438, 442], "n_connected_components_": [438, 442, 1037], "branching_factor": 439, "compute_label": [439, 446], "promot": [439, 705, 1006, 1039, 1041], "redistribut": 439, "overwritten": [439, 529, 530, 531, 533, 538, 545, 604, 605, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 669, 671, 676, 678, 679, 680, 681, 683, 954, 956, 1041], "root_": 439, "_cfnode": 439, "cftree": 439, "dummy_leaf_": 439, "subcluster_labels_": 439, "centroids_": [439, 443, 845], "copy_x": [440, 444, 456, 532, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 657, 658, 659, 660, 669, 671, 676, 678, 679, 680, 681, 682, 1030, 1036, 1037], "k_init": [440, 456], "sse": 440, "bisect_mean": 440, "denser": 441, "pooling_func": [442, 1036], "xred": [442, 1044], "cluster_selection_epsilon": 443, "max_cluster_s": 443, "cluster_selection_method": 443, "eom": 443, "store_cent": 443, "kdtree": [443, 447, 454, 685, 686, 838, 840, 841, 842, 843, 844, 846, 848, 849, 850, 1030, 1032, 1036, 1040, 1041, 1044, 1045], "neighbour": [443, 459, 689, 991], "medoid": 443, "overwrit": [443, 493, 628, 1012, 1028, 1039, 1044], "medoids_": 443, "zimek": 443, "chaudhuri": 443, "jaskowiak": 443, "malzer": 443, "baum": 443, "hybrid": [443, 646, 1006], "dbscan_clust": 443, "border": [443, 1038], "unclust": 443, "socg2006": 444, "min_bin_freq": [445, 458], "cluster_al": [445, 458], "get_bin_se": 445, "orphan": [445, 458, 1028], "reassignment_ratio": 446, "eec": [446, 638], "tuft": 446, "dscullei": 446, "fastkmean": 446, "55102041": 446, "48979592": 446, "06896552": 446, "set_partial_fit_request": [446, 531, 535, 663, 664, 665, 673, 674, 675, 826, 827, 830, 831, 833, 834, 835, 836, 837, 855, 878], "cluster_method": 447, "predecessor_correct": [447, 453], "unprocess": [447, 585, 586, 588], "heap": 447, "braycurti": [447, 454, 696, 774, 775, 776, 989], "canberra": [447, 454, 696, 774, 775, 776, 989], "chebyshev": [447, 454, 696, 774, 775, 776, 989], "dice": [447, 454, 696, 774, 775, 776, 989], "kulsinski": [447, 454, 696, 774, 775, 776], "rogerstanimoto": [447, 454, 696, 774, 775, 776, 989], "russellrao": [447, 454, 696, 774, 775, 776, 989], "seuclidean": [447, 454, 696, 774, 775, 776, 845, 989, 1036, 1039, 1040], "sokalmichen": [447, 454, 696, 774, 775, 776, 989], "sokalsneath": [447, 454, 696, 774, 775, 776, 989], "yule": [447, 454, 774, 775, 776], "manhattan_dist": [447, 454, 685, 758, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852, 1028, 1038, 1043, 1044], "minkowski_dist": [447, 454, 685, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852], "l_p": [447, 454, 685, 840, 841, 842, 844, 846, 848, 849, 850, 851, 852], "upward": [447, 453], "successor": [447, 453, 1002, 1006], "predecessor_": [447, 454], "erich": [447, 1032, 1033, 1036, 1037, 1039, 1040, 1041, 1042], "gertz": 447, "lernen": 447, "wissen": 447, "daten": [447, 1036, 1037], "analysen": 447, "lwda": 447, "329": 447, "n_best": 448, "n_svd_vec": [448, 450], "mini_batch": [448, 450], "n_row_clust": [448, 450, 510], "n_column_clust": [448, 450, 510], "ncv": [448, 450], "n_oversampl": [448, 450, 538, 541, 935, 1042], "kernel_param": [449, 532, 636, 640], "precomputed_nearest_neighbor": [449, 688], "eigen": [449, 546, 670, 688, 692, 980, 1034, 1037], "dist_matrix": 449, "541": [449, 459], "csc_matrix": [449, 554, 555, 560, 561, 562, 563, 875, 906, 907, 908, 909, 976, 996, 1002, 1033], "best_n_it": 456, "n_local_tri": 457, "n_seed": 458, "multigrid": 459, "eigendecomposit": [459, 670, 688, 692, 864, 978], "multiscal": 459, "preliminari": 459, "heapq": 460, "topolog": [460, 1006], "n_connected_compon": 460, "n_leav": [460, 906, 907, 908, 909], "transformers_": [461, 1045], "remaining_column": 461, "named_transformers_": 461, "sparse_output_": [461, 548], "output_indices_": [461, 1041], "datatyp": [461, 463, 1035, 1038], "norm1": 461, "norm2": 461, "text_preprocess": 461, "num_preprocess": 461, "x_t": [461, 624, 857], "sum_n_compon": [461, 857], "notimplementederror": [462, 469, 550, 551, 552, 553, 564, 565, 566, 567, 590, 591, 599, 624, 668, 670, 672, 857, 885, 895, 1035, 1045], "y_hat": 462, "90453403": 463, "50755672": 463, "30151134": 463, "print_changed_onli": [465, 896, 1037, 1039, 1040], "pairwise_dist_chunk_s": [465, 896], "enable_cython_pairwise_dist": [465, 896], "skip_parameter_valid": [465, 896, 1044], "cache_s": [465, 896, 900, 901, 902, 903, 904, 1001], "get_config": [465, 777, 896, 953, 1043], "offset_": [466, 560, 674, 844, 902, 1036], "raw_support_": [466, 471], "dist_": [466, 471], "true_cov": [466, 468, 469], "7411": [466, 471, 1034], "2535": [466, 471], "3053": [466, 471], "0813": [466, 471], "correct_covari": [466, 471], "rvd": [466, 471], "covariance_correct": [466, 471], "comp_cov": [466, 467, 468, 469, 470, 471, 472, 473], "get_precis": [466, 467, 468, 469, 470, 471, 472, 473, 529, 531, 538], "getter": [466, 467, 468, 469, 470, 471, 472, 473, 590, 591, 594], "is_inli": [466, 560, 844], "reweight_covari": [466, 471], "rvdriessen": [466, 471], "location_reweight": [466, 471], "covariance_reweight": [466, 471], "support_reweight": [466, 471], "negative_mahal_dist": 466, "7569": 467, "2818": 467, "3928": 467, "0622": [467, 473], "0193": [467, 473], "enet_tol": [468, 469, 475, 1033], "220446049250313e": [468, 469, 475, 647, 648, 651, 652, 653, 679, 680], "graphlasso": [468, 1033, 1036], "costs_": [468, 469, 1044], "dual_gap": [468, 469, 475, 643, 644, 649, 650, 657, 658, 659, 660, 678, 681], "return_cost": [468, 469, 475], "049": 468, "093": [468, 1033], "038": [468, 469, 855], "n_refin": 469, "graphlassocv": [469, 1030, 1036], "dualiti": [469, 982], "051": 469, "block_siz": [470, 476, 477, 1032], "4406": 470, "1616": 470, "0595": 470, "0075": [470, 538], "rouseeuw1984": 471, "butlerdavi": 471, "butler": [471, 1031, 1039, 1040], "davi": [471, 721, 986, 1032], "jhun": 471, "1385": 471, "7533": [472, 1035], "2763": 472, "3964": 472, "7833": 472, "2431": 472, "3889": 472, "0195": 472, "7387": 473, "2536": 473, "4110": 473, "cov_init": [475, 1044], "graph_lasso": [475, 1036], "x_loadings_": [479, 480, 481], "y_loadings_": [479, 480, 481], "plssvd": [479, 480, 1008, 1023, 1040, 1042], "x_c": [479, 480, 482, 993], "y_c": [479, 480, 482], "y_reconstruct": [479, 480, 481], "x_scores_": [481, 1040], "y_scores_": [481, 1040], "y_transform": 482, "data_hom": [483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 1035, 1044], "zero_bas": [484, 505, 506], "query_id": [484, 505, 506], "grok": 484, "qid": [484, 505, 506, 1029, 1034], "download_if_miss": [485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 1035], "stopword": [486, 1021], "target_column": [486, 487, 493], "494021": 489, "slice_": [490, 491, 1043], "unrestrict": 490, "2914": 491, "5748": 491, "pathlik": [493, 1044], "n_retri": [493, 1042], "read_csv_kwarg": [493, 1044], "timeout": [493, 952, 1042], "ith": [493, 770, 774, 834, 855, 856, 871, 872], "1592": 495, "1212": 495, "1624": 495, "620": 495, "data_filenam": [498, 502], "target_filenam": [498, 502], "container_path": 500, "load_cont": 500, "allowed_extens": 500, "container_fold": 500, "category_1_fold": 500, "file_1": 500, "file_2": 500, "file_42": 500, "category_2_fold": 500, "file_43": 500, "file_44": 500, "image_nam": 503, "first_img_data": 504, "backup": [505, 1028], "instantan": 505, "mycach": 505, "get_data": 505, "mysvmlightfil": 505, "xn": 506, "yn": [506, 987, 988], "q1": 506, "qn": 506, "yi": [506, 988, 1032, 1036, 1037, 1040], "qi": [506, 1040], "triplet": 506, "minval": [508, 510], "maxval": [508, 510], "seventh": [508, 998], "269": 508, "274": 508, "return_cent": [509, 1039], "basri": 510, "gerstein": 510, "716": 510, "flip_i": 512, "interdepend": 512, "polytop": 512, "guyon": [512, 590, 591, 986], "madelon": 512, "1991": [513, 514, 515], "12000": 517, "effective_rank": [518, 521], "tail_strength": [518, 521], "bell": [518, 1036, 1038, 1040, 1041], "fat": [518, 521], "crawl": [518, 927], "return_ind": 520, "4967": 521, "1382": 521, "6476": 521, "523": 521, "2341": 521, "4694": 521, "5425": 521, "579": 521, "7674": [521, 1035], "4017": 521, "data_transpos": [523, 1042, 1044], "n_dim": [524, 526, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 1045], "norm_diag": 524, "sparse_format": [524, 1045], "make_spd_matrix": 524, "celeux": 525, "el": [525, 1041, 1043, 1044], "anbari": 525, "marin": 525, "frequentist": 525, "marsland": 527, "vuw": 527, "nz": 527, "marslast": 527, "ch6": 527, "code_init": [528, 542], "dict_init": [528, 534, 542, 543], "callback": [528, 534, 536, 542, 543, 847, 952, 1007, 1044], "split_sign": [528, 534, 539], "transform_max_it": [528, 534, 535, 539, 1038], "_fro": [528, 534, 542, 543, 643, 644, 649, 657, 658, 659, 678], "lasso_cd": [528, 534, 539, 545], "error_": [528, 540], "minibatchsparsepca": [528, 530, 534, 537, 539, 540, 542, 543, 1028, 1029, 1039, 1041, 1042, 1043, 1044], "sierra": [528, 534], "icml09": [528, 534], "x_hat": [528, 534], "noise_variance_init": 529, "quartimax": [529, 1040], "loglike_": 529, "barber": 529, "bishop": [529, 531, 538, 737, 793, 982, 987, 1001], "get_covari": [529, 531, 538], "unmixing_matrix": 530, "whitening_": 530, "kpca": [530, 531, 532, 1022, 1023, 1028], "set_inverse_transform_request": [530, 578, 865, 878], "unsaf": 531, "singular_values_": [531, 538, 541, 1035], "var_": [531, 836, 878, 1041], "miketip": [531, 538], "mppca": [531, 538], "n_samples_seen_": [531, 867, 868, 878, 1036], "batch_size_": 531, "ross": [531, 604, 605, 1002, 1042, 1043], "vision": [531, 754, 755, 978, 982, 984, 1002, 1006, 1010, 1029], "toronto": [531, 641, 854], "dross": 531, "ivt": 531, "rosslimlinyang_ijcv": 531, "karhunen": 531, "loev": 531, "levi": [531, 1035], "lindenbaum": 531, "1371": 531, "1374": 531, "abstain": 531, "holub": 531, "opportun": [531, 1000], "golub": [531, 836, 878], "x_spars": [531, 957, 960], "sigma2": [531, 538], "x_origin": [531, 536, 538, 540, 541, 627, 890, 891], "check_input": [531, 545, 643, 644, 649, 657, 658, 659, 678, 684, 906, 907, 908, 909, 1036], "remove_zero_eig": [532, 1030, 1037], "x_fit_": [532, 640], "eigenvalues_": [532, 1041], "eigenvectors_": [532, 1041], "dual_coef_": [532, 640, 900, 901, 902, 903, 904, 1001, 1032], "x_transformed_fit_": 532, "gamma_": [532, 1044], "nathan": [532, 1036, 1040, 1043], "gunnar": [532, 935], "tropp": [532, 538], "288": [532, 538], "vladimir": [532, 935, 982, 1038, 1042], "rokhlin": [532, 538, 935], "tygert": [532, 538, 935], "learning_decai": 533, "evaluate_everi": 533, "perp_tol": 533, "mean_change_tol": 533, "max_doc_update_it": 533, "kappa": [533, 713], "tau_0": 533, "pseudocount": [533, 1036], "exp_dirichlet_component_": 533, "n_batch_iter_": 533, "bound_": 533, "doc_topic_prior_": 533, "topic_word_prior_": 533, "franci": [533, 655, 982, 1034], "onlineldavb": 533, "chong": 533, "00360392": 533, "25499205": 533, "0036211": 533, "64236448": 533, "09541846": 533, "15297572": 533, "00362644": 533, "44412786": 533, "39568399": 533, "003586": 533, "vb": 533, "sub_sampl": 533, "doc_topic_distr": [533, 1035], "052": 534, "fresh_restart": 535, "fresh_restarts_max_it": 535, "_w": [535, 537, 544], "_ratio": [535, 537, 544], "_h": [535, 537, 544], "fresh": [535, 1007, 1038], "reconstruction_err_": [535, 537], "andrzej": [535, 537, 544], "anh": [535, 537, 544], "ieic": [535, 537, 544], "721": [535, 537, 544], "waspa": 535, "ridge_alpha": [536, 540, 1035], "500x500": 538, "lu": [538, 541, 934, 935, 1034, 1035, 1036, 1037, 1044], "n_samples_": 538, "royal": [538, 624, 874, 886, 1000], "methodologi": [538, 871, 976, 986, 1010], "622": 538, "9924": 538, "30061": 538, "54980": 538, "00755": 538, "99244": 538, "ascontiguousarrai": 538, "sparse_encod": [539, 647, 648, 649, 650, 651, 652, 653, 660, 661, 662, 679, 680, 681, 682, 683, 1028, 1035, 1036, 1038, 1042], "u_init": 540, "v_init": 540, "9666": 540, "oversampl": [541, 1028], "indeterminaci": 541, "x_dens": 541, "0157": 541, "0512": 541, "0499": 541, "0479": 541, "0453": 541, "2102": 541, "2410": 541, "5981": 541, "5420": 541, "4486": 541, "3288": 541, "method_max_it": [542, 543, 1038], "dict_learning_onlin": [542, 1029, 1038, 1041, 1042], "return_cod": 543, "iter_offset": [543, 1042], "return_inner_stat": [543, 1042], "inner_stat": [543, 1042], "update_h": 544, "_n_compon": 544, "hal": [544, 655, 754, 755, 984], "copy_cov": 545, "orthogonal_mp": [545, 661, 662, 683, 982], "sum_k": [546, 1002], "prior_k": 546, "c_k": 546, "priors_": [546, 547], "scalings_": [546, 547], "xbar_": 546, "reg_param": 547, "scaling_": 547, "colinear": 547, "rotations_": 547, "n_classes_": [548, 550, 552, 554, 556, 561, 607, 826, 827, 906, 908, 1029, 1038, 1040], "class_prior_": [548, 836], "n_outputs_": [548, 549, 554, 555, 561, 562, 563, 855, 856, 906, 907, 908, 909], "constant_": 549, "dummy_regr": 549, "base_estimator_": [550, 551, 552, 553, 554, 555, 556, 557, 560, 561, 562, 563, 607, 895, 1043], "dok": [550, 551, 865, 1041], "staged_decision_funct": [550, 556, 558], "staged_scor": [550, 551], "7972": 551, "9771": 551, "estimators_samples_": [552, 553, 554, 555, 560, 561, 562, 563, 1034, 1036, 1039, 1045], "estimators_features_": [552, 553, 560], "oob_decision_function_": [552, 554, 561], "oob_prediction_": [553, 555, 562], "8720": [553, 1036], "min_weight_fraction_leaf": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909, 1002, 1031, 1034, 1035], "min_impurity_decreas": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909, 1002, 1035], "shannon": [554, 561, 906, 908, 983, 1002], "unlimit": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909], "n_t": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909], "n_t_r": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909], "right_impur": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909], "n_t_l": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909], "left_impur": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909], "balanced_subsampl": [554, 561, 1036], "subtre": [554, 555, 556, 557, 561, 562, 906, 907, 908, 909, 1002], "extratreeclassifi": [554, 563, 909, 987, 1032, 1037, 1038, 1039, 1041, 1042, 1043, 1045], "unprun": [554, 555, 561, 562, 906, 907, 908, 909], "x_leav": [554, 555, 556, 557, 561, 562, 563, 906, 907, 908, 909], "n_nodes_ptr": [554, 555, 561, 562, 563], "friedman_ms": [555, 556, 557, 562, 907, 909, 1002, 1044, 1045], "extratreeregressor": [555, 560, 563, 908, 992, 1037, 1038, 1039, 1041, 1042, 1043, 1045], "2727": 555, "dummyestim": [556, 557], "eras": [556, 557, 643, 649, 655, 657, 659, 663, 664, 665, 673, 674, 675, 855, 856], "n_trees_per_iteration_": [556, 557, 558, 559], "oob_scores_": [556, 557, 1044], "init_": [556, 557], "max_features_": [556, 557, 594, 906, 907, 908, 909, 1042], "_fit_stag": [556, 557], "crossentropi": 558, "deepest": [558, 559, 1039], "no_interact": [558, 559, 1043], "do_early_stopping_": [558, 559], "validation_score_": [558, 559], "is_categorical_": [558, 559], "n_trees_per_iter": 558, "max_samples_": 560, "fei": [560, 992], "ting": [560, 992, 1036, 1037], "ming": [560, 992, 1032, 1036, 1037, 1038, 1042], "zhou": [560, 636, 894, 992, 1036, 1044], "zhi": [560, 992], "hua": [560, 992], "icdm": [560, 992], "eighth": [560, 992], "tkdd": 560, "n_left": 560, "32987858": 562, "n_out": 563, "one_hot_encoder_": 563, "moosmann": 563, "trigg": 563, "juri": 563, "random_tre": 563, "x_sparse_embed": 563, "randomtreesembedding_": 563, "final_estimator_": [564, 565], "named_estimators_": [564, 565, 566, 567, 1036, 1038], "named_estim": [564, 565, 566, 567], "parameter_nam": [564, 565, 566, 567], "new_valu": [564, 565, 566, 567], "linearsvr": [565, 904, 1001, 1032, 1034, 1039, 1044], "flatten_transform": [566, 1035], "le_": 566, "eclf1": 566, "array_equ": [566, 1035], "eclf2": 566, "eclf3": 566, "maj": 566, "probabilities_or_label": 566, "n_regressor": 567, "r1": 567, "r3": 567, "er": 567, "with_traceback": [568, 569, 570, 571, 572, 573, 574, 575], "__traceback__": [568, 569, 570, 571, 572, 573, 574, 575], "current_sklearn_vers": 573, "repr": [574, 1039, 1040, 1042], "linter": 576, "flake8": 576, "spam": [578, 706, 737, 833, 986, 988, 1010], "feature_names_": 578, "xa": 578, "dict_typ": 578, "1048576": [579, 586], "non_neg": [579, 1035], "eleph": 579, "bird": [579, 715, 750, 986], "patch_height": [580, 581, 584], "patch_width": [580, 581, 584], "img_height": 580, "img_width": 580, "pe": 580, "pe_tran": 580, "263758": 580, "image_height": [580, 581, 584], "image_width": [580, 581, 584], "n_channel": [580, 581, 584], "n_patch": [580, 581, 584], "272214": 581, "230": 581, "243": 581, "215": 581, "n_z": 582, "return_a": [582, 583, 952, 1031], "_coo": [582, 583], "image_s": 584, "strip_acc": [585, 586, 588], "nfkd": [585, 586, 588, 1038], "unicodedata": [585, 586, 588], "regexp": [585, 586, 588], "min_n": [585, 586, 588, 1028], "max_n": [585, 586, 588, 1028], "fixed_vocabulary_": [585, 588], "stop_words_": [585, 588], "delattr": [585, 588, 1040], "vectorizer2": 585, "raw_docu": [585, 588], "get_stop_word": [585, 586, 588], "x_inv": [585, 588], "con": 586, "yates2011": 587, "baeza": [587, 726, 1031], "yate": [587, 726], "ribeiro": [587, 726, 1041], "neto": [587, 726], "addison": [587, 726], "weslei": [587, 726], "mrs2008": 587, "118": 587, "tfid": 587, "22314355": 587, "51082562": 587, "91629073": 587, "_check_stop_list": 588, "pvalu": [589, 592, 593, 595, 596, 597, 823], "k_best": [589, 895, 999], "fdr": 589, "fwe": 589, "iff": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 869], "retent": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600], "n_selected_featur": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600], "n_original_featur": [589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600], "attrgett": [590, 594], "barnhil": [590, 591], "vapnik": [590, 591], "389": [590, 591, 1021], "422": [590, 591, 722, 752, 986], "n_subsets_of_featur": 591, "narrai": 591, "benjamini": [592, 1034, 1035], "hochberg": [592, 1034, 1035], "false_discovery_r": 592, "norm_ord": [594, 1035], "threshold_": [594, 1035], "3252": 594, "8345": 594, "4976": 594, "55249": 594, "half_cal": 594, "half_selector": 594, "partial_fit_param": [594, 826, 827, 830, 831], "unspecifi": [596, 597, 797, 983], "_get_support_mask": 598, "n_features_to_select_": 599, "variances_": 600, "weed": 601, "p_valu": [601, 602, 603], "f_statist": [602, 603], "force_finit": [603, 606, 724, 781, 986, 1042], "pearson": [603, 606, 1041], "discrete_featur": [604, 605], "nat": [604, 605, 701, 751, 753, 1042], "essenc": [604, 605, 739, 983, 986], "kraskov": [604, 605], "stogbauer": [604, 605], "grassberg": [604, 605], "phy": [604, 605], "kozachenko": [604, 605], "leonenko": [604, 605], "probl": [604, 605], "peredachi": [604, 605], "correlation_coeffici": 606, "fmin_l_bfgs_b": [607, 608], "max_iter_predict": 607, "copy_x_train": [607, 608], "one_vs_rest": [607, 987], "compoundkernel": [607, 1042], "obj_func": [607, 608], "initial_theta": [607, 608], "theta_opt": [607, 608], "func_min": [607, 608], "_posterior_mod": 607, "log_marginal_likelihood_value_": [607, 608], "9866": [607, 616, 619], "83548752": 607, "03228706": 607, "13222543": 607, "79064206": 607, "06525643": 607, "14410151": 607, "clone_kernel": [607, 608, 1038], "n_kernel_param": [607, 608], "log_likelihood_gradi": [607, 608], "x_train_": 608, "y_train_": 608, "3680": [608, 611, 622], "592": [608, 611, 622, 993], "y_cov": 608, "n_samples_x": [608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 770, 771, 772, 773, 774, 775, 776, 777], "requires_vector_input": [609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622], "51292546": 609, "09861229": [609, 996], "n_samples_i": [609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622, 754, 755, 756, 757, 759, 760, 762, 763, 764, 765, 770, 771, 772, 773, 774, 775, 776, 777], "n_kernel": 609, "k_gradient": [609, 610, 611, 612, 613, 616, 617, 618, 619, 620, 621, 622], "k_diag": [609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622], "hyperparameter_constant_valu": 610, "3696": 610, "606": [610, 828, 987], "hyperparameter_sigma_0": 611, "edward": [611, 616, 619, 1031, 1036, 1037, 1038, 1039, 1043], "hyperparameter_length_scal": [612, 616, 619, 620], "hyperparameter_period": 612, "0144": 612, "457": 612, "3894": 612, "3467": 612, "419": 613, "namedtupl": [614, 944, 1044], "maxsiz": 614, "mat\u00e9rn": 616, "appr": 616, "8513": 616, "0368": 616, "1117": 616, "8086": [616, 1035], "0693": 616, "1220": 616, "gamma_bound": 617, "pairwise_kernels_kwarg": 617, "additive_chi2": [617, 635, 761, 770], "pairwise_kernel_funct": [617, 640, 770], "hyperparameter_gamma": 617, "9733": [617, 620], "8880": 617, "05663": 617, "05532": 617, "8676": [617, 1035], "07073": 617, "06165": 617, "__mul__": 618, "8354": [619, 1035], "03228": 619, "1322": 619, "7906": [619, 646], "0652": 619, "1441": 619, "hyperparameter_alpha": 620, "8881": 620, "0566": 620, "05518": 620, "8678": 620, "0707": 620, "0614": 620, "hyperparameter_noise_level": 622, "initial_strategi": 624, "imputation_ord": [624, 1038], "skip_complet": 624, "max_valu": [624, 1039, 1040], "keep_empty_featur": [624, 625, 627, 976, 1043], "nullabl": [624, 625, 626, 627, 1039, 1043], "na": [624, 625, 626, 627, 765, 774, 916, 918, 919, 1038, 1039, 1042, 1043, 1044], "known_val": 624, "Nearness": 624, "arab": 624, "broadcast": 624, "missingind": [624, 625, 627, 976, 1036, 1037, 1038, 1042, 1044], "initial_imputer_": 624, "imputation_sequence_": 624, "feat_idx": 624, "neighbor_feat_idx": 624, "n_features_with_missing_": 624, "indicator_": [624, 625, 627], "knp": 624, "stef": [624, 976], "buuren": [624, 976], "karin": [624, 976], "groothui": [624, 976], "oudshoorn": [624, 976], "buck": 624, "1960": [624, 713], "imp_mean": [624, 627], "9584": [624, 1035], "nan_euclidean": [625, 758, 774], "_pairwise_cal": 625, "kwd": [625, 767, 770, 774, 777, 788, 789], "olga": [625, 976], "troyanskaya": [625, 976], "cantor": [625, 976], "gavin": [625, 976], "sherlock": [625, 976], "pat": [625, 976], "botstein": [625, 976], "russ": [625, 976], "altman": [625, 976], "bioinformat": [625, 976], "520": [625, 847, 976, 989], "n_output_featur": 625, "error_on_new": 626, "features_": [626, 976], "n_missing_featur": 626, "x2_tr": 626, "n_features_with_miss": 626, "statistics_": 627, "n_features_missing_ind": 627, "x_imput": 627, "n_features_out": 627, "surface_": 628, "quadcontourset": 628, "quadmesh": 628, "feature_1": [628, 911], "feature_2": 628, "nicer": 628, "pd_result": 629, "target_idx": 629, "decil": [629, 1039], "is_categor": 629, "pdp": [629, 993, 1042], "nonexist": 629, "deciles_vlines_": 629, "vlines_": 629, "deciles_hlines_": 629, "bars_": 629, "heatmaps_": 629, "pdp_lim": 629, "ice_lines_kw": 629, "pd_line_kw": 629, "contour_kw": 629, "disp1": 629, "disp2": 629, "pdp_line_kw": 629, "bar_kw": 629, "heatmap_kw": 629, "seq": 630, "n_values_feature_j": 630, "bre": [631, 1002], "4666": 631, "2211": 631, "x_min_": 632, "x_max_": 632, "n_threshold": [632, 723, 778, 785], "stepwis": [632, 651, 652, 653, 679, 680, 982], "increasing_": 632, "isotonic_regress": [632, 1041], "secondari": [632, 1032], "leeuw": 632, "1977": 632, "nilotp": [632, 634], "chakravarti": [632, 634], "308": 632, "pava": 632, "hornik": 632, "mair": 632, "kruskal": [632, 687, 691, 983], "psychometrica": 632, "iso_reg": 632, "8628": 632, "7256": 632, "isotonicregression0": 632, "increasing_bool": 633, "fisher_transform": 633, "sample_step": 635, "sample_interv": 635, "sample_interval_": [635, 1044], "skewedchi2sampl": [635, 636, 637, 638, 978, 1035, 1042, 1043], "chi2_kernel": [635, 639, 754, 761, 984, 1029], "additive_chi2_kernel": [635, 755, 761, 978], "vedaldi": [635, 978], "zisserman": [635, 978, 986], "chi2sampl": 635, "9499": 635, "component_indices_": [636, 1041], "normalization_": [636, 978], "additivechi2sampl": [636, 637, 638, 639, 754, 755, 978, 1042, 1044], "kernel_metr": [636, 637, 638, 639], "seeger": [636, 978], "mahdavi": 636, "jin": [636, 1039, 1040], "data_transform": 636, "9987": 636, "fft": 637, "indexhash": 637, "bithash": 637, "indexhash_": 637, "bithash_": 637, "kitchen": [638, 978], "sink": [638, 978], "random_offset_": [638, 639], "random_weights_": [638, 639], "rahimi": [638, 978], "benjamin": [638, 1030, 1031, 1039, 1040, 1041, 1042, 1043, 1044], "recht": [638, 978], "berkelei": [638, 906, 907], "brecht": 638, "rah": 638, "rbf_featur": [638, 978], "skewed": [639, 1035], "secant": 639, "fuxin": 639, "catalin": 639, "ionescu": [639, 978, 1038], "cristian": 639, "sminchisescu": [639, 978], "chi2_featur": 639, "2c": [640, 649, 669, 670, 671, 672, 684, 978], "493": [640, 898, 979], "alpha_1": [641, 642, 982], "alpha_2": [641, 642, 982], "lambda_1": [641, 642, 982], "lambda_2": [641, 642, 982], "threshold_lambda": 641, "x_offset_": [641, 642, 1040], "x_scale_": [641, 642, 1040], "mackai": [641, 642, 982], "ashra": 641, "salakhutdinov": [641, 847, 989], "utstat": 641, "rsalakhu": 641, "sta4273": 641, "lecture2": 641, "computed_scor": 642, "appendix": [642, 673, 982, 996], "wipf": [642, 982], "nagarajan": [642, 982], "2_2": [643, 644, 649, 650, 651, 652, 653, 657, 658, 659, 660, 669, 678, 679, 680, 681], "glmnet": [643, 644, 1028], "sparse_coef_": [643, 649, 657, 659, 1028], "dual_gap_": [643, 644, 649, 650, 657, 658, 659, 660, 1041], "max_j": [643, 649], "w_j": [643, 649, 986, 1000], "ext": 643, "83816048": 643, "55968825": 643, "451": 643, "coef_init": [643, 644, 649, 650, 657, 658, 659, 660, 663, 664, 665, 673, 674, 675, 678, 681], "mono": [643, 644, 649, 650, 657, 658, 659, 660, 678, 681], "_21": [643, 644, 649, 650, 657, 658, 659, 660, 678, 681], "sum_j": [643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 982, 986, 991], "alpha_min": [643, 644, 647, 649, 650, 651, 653, 657, 658, 659, 660, 678, 679, 680, 681], "alpha_max": [643, 644, 649, 650, 657, 658, 659, 660, 678, 681], "ndim": [643, 644, 649, 650, 657, 658, 659, 660, 678, 681, 918, 919], "multitaskelasticnet": [643, 644, 649, 658, 659, 660, 678, 982, 1028, 1035, 1036, 1039, 1041], "l1_ratio_": [644, 656, 658], "n_l1_ratio": [644, 656, 658, 1031], "199": [644, 787, 1001], "unpen": [645, 666, 677, 982], "raphson": [645, 666, 677], "g_j": [645, 666, 677], "483": 645, "795": 645, "pg_i": 646, "scale_": [646, 867, 868, 876, 878, 888, 996, 1033], "outliers_": 646, "elvezio": [646, 982], "ronchetti": [646, 982], "concomit": [646, 982], "owen": [646, 1037, 1038], "statweb": [646, 679, 680], "hhu": [646, 1037], "284": 646, "806": 646, "7200": 646, "4923": 646, "1698": 646, "0106": 646, "9221": 646, "0226": 646, "fit_path": [647, 651, 652, 653, 679, 680], "coef_path_": [647, 648, 651, 652, 982], "active_": [647, 648, 651, 652], "1111": [647, 653], "max_n_alpha": [648, 652], "n_cv_alpha": [648, 652], "cv_alpha": [648, 652], "lassolar": [648, 649, 650, 652, 653, 660, 661, 662, 679, 680, 681, 982, 1019, 1028, 1029, 1031, 1035, 1038, 1039, 1041], "9996": 648, "2961": 648, "3996": 648, "2_f": 649, "_11": 649, "4951": 650, "2_fro": [650, 659, 660, 681], "coef_path": [650, 660, 681], "46874778": [650, 660, 681], "2159048": [650, 660, 681], "4425765": [650, 660, 681], "23689075": [650, 660, 681], "coef_path_lar": [650, 660, 681], "coef_path_continu": [650, 660, 681], "interp1d": [650, 660, 681], "46915237": [650, 660, 681], "23668876": [650, 660, 681], "congruenc": [651, 652, 653, 679, 680], "fragil": 652, "3972": 652, "2222": 653, "rank_": 654, "singular_": 654, "maxent": [655, 656, 982], "primal": [655, 656, 674, 898, 899, 1000, 1001], "synthetic_feature_weight": [655, 656], "ciyou": 655, "byrd": 655, "jorg": [655, 1031, 1040, 1042], "noced": 655, "lui": [655, 1029, 1031, 1032, 1036], "iem": 655, "lbfgsb": 655, "schmidt": [655, 982, 1031], "le": [655, 866, 977, 982, 989, 997, 999, 1036, 1040, 1041], "roux": [655, 982, 999], "00860051": 655, "defazio": [655, 982], "lacost": [655, 982], "hsiang": [655, 1032], "fu": [655, 1032], "fang": [655, 1035, 1036], "lan": [655, 1043, 1044], "chih": [655, 1033], "jen": [655, 1036], "maxent_du": 655, "cs_": 656, "l1_ratios_": 656, "coefs_paths_": [656, 1038], "coefs_path": 656, "n_l1_ratios_": 656, "score_param": [656, 1045], "w_ij": 657, "eps_": [657, 659], "45663524": 657, "45612256": 657, "0872422": 657, "fro_2": [658, 660], "52875032": 658, "46958558": 658, "00166409": 658, "60809415": 659, "94592424": 659, "41888636": 659, "87382323": 659, "9994": 660, "5713": 660, "7971": 660, "9015": [660, 1036], "n_nonzero_coefs_": [661, 662], "orthogonal_mp_gram": [661, 662, 682, 1042], "mallat": [661, 682, 683, 982], "3397": [661, 682, 683], "3415": [661, 682, 683], "papier": [661, 682, 683], "mallatpursuit93": [661, 682, 683], "rubinstein": [661, 682, 683], "zibulevski": [661, 682, 683], "elad": [661, 682, 683], "technion": [661, 682, 683, 982], "ronrubin": [661, 682, 683, 982], "ksvd": [661, 682, 683, 982], "9991": [661, 662, 1036], "3854": [661, 662], "previous_loss": [663, 664, 665, 674], "pa": [663, 664, 895, 982, 986, 999], "preset": [663, 665, 673, 990], "t_": [663, 664, 665, 673, 674, 675, 855, 856, 1000], "loss_function_": [663, 665, 673, 674], "volume7": [663, 664], "crammer06a": [663, 664], "crammer": [663, 664, 731, 982, 986, 1001], "dekel": [663, 664, 982], "keshat": [663, 664, 982], "shalev": [663, 664, 982, 1000], "shwartz": [663, 664, 982, 1000], "26642044": 663, "45070924": 663, "67251877": 663, "64185414": 663, "84127814": 663, "intercept_init": [663, 664, 665, 673, 675], "y_all": [663, 665, 673, 826, 827, 855], "epsilon_insensit": [664, 673, 675, 899, 982, 1000], "squared_epsilon_insensit": [664, 673, 675, 899, 982, 1034], "48736655": 664, "18818427": 664, "59122734": 664, "94731329": 664, "02306214": 664, "eta0": [665, 673, 674, 675, 1000], "lossfunct": [665, 673, 674, 1037], "therein": 665, "939": [665, 1016], "088": [666, 994], "solver_opt": 667, "ipm": 667, "linprog": [667, 982], "is_data_valid": [668, 982], "is_model_valid": [668, 982], "max_trial": [668, 982], "max_skip": 668, "stop_n_inli": [668, 982], "stop_scor": [668, 982], "stop_prob": 668, "mad": [668, 1034], "costlier": 668, "n_trials_": 668, "n_skips_no_inliers_": 668, "n_skips_invalid_data_": 668, "n_skips_invalid_model_": 668, "sri": [668, 982, 1035, 1036], "bmva": 668, "bmvc": [668, 982], "paper355": 668, "9885": 668, "9417": 668, "15000": [669, 684, 855, 856], "btol": [669, 671], "gcv_mode": [670, 1030], "store_cv_valu": [670, 672, 1036, 1039], "alpha_per_target": [670, 1040], "cv_values_": [670, 672], "5166": 670, "gcv": [670, 672], "9595": 671, "9630": 672, "power_t": [673, 674, 675, 855, 856, 1000], "best_loss": [673, 675], "leon": [673, 674, 675, 1028], "bottou": [673, 674, 675, 990, 1000], "pow": [673, 674, 675, 855, 856], "dl": 673, "775047": 673, "775151": 673, "justif": 673, "volume2": 673, "zhang02c": 673, "offset_init": 674, "unshifft": 674, "n_subsampl": [676, 924], "breakdown_": 676, "n_subpopulation_": 676, "xin": [676, 982, 1036], "dang": [676, 982], "hanxiang": [676, 982], "peng": [676, 982, 1034, 1035, 1036, 1038, 1040], "xueqin": [676, 982], "hepe": [676, 982], "olemiss": 676, "xdang": 676, "mtse": 676, "9884": 676, "5871": 676, "coeff": 677, "839": 677, "copy_gram": [679, 680, 683], "return_path": [679, 680, 682, 683], "lars_path_gram": [679, 982, 1037], "tib": [679, 680], "xgamma": 682, "norms_squar": 683, "copy_xi": 683, "return_intercept": [684, 1037], "linearoper": 684, "_preprocess_data": 684, "path_method": [685, 983], "neighbors_algorithm": [685, 686], "arnoldi": [685, 686, 690], "fw": 685, "warshal": [685, 983], "kernel_pca_": 685, "nbrs_": [685, 686], "dist_matrix_": 685, "tenenbaum": [685, 983], "reconstruction_error": 685, "frobenius_norm": 685, "d_fit": 685, "x_fit": 685, "n_queri": [685, 840, 841, 842, 844, 846, 848, 849, 850], "hessian_tol": [686, 690], "modified_tol": [686, 690], "reconstruction_error_": 686, "rowei": [686, 690, 847, 983, 989], "saul": [686, 690, 983, 1035, 1036, 1038], "2323": [686, 690, 983], "donoho": [686, 690, 983], "grime": [686, 690, 983], "natl": [686, 690, 983], "acad": [686, 690, 983], "5591": [686, 690, 983], "mlle": [686, 690, 983], "zha": [686, 690, 983], "shanghai": [686, 690, 983], "univ": [686, 690, 983], "406": [686, 690, 983], "immers": [687, 691], "nonmetr": [687, 691, 983], "smacof": [687, 1043], "stress": [687, 691, 983, 1043], "stress_": 687, "dispar": [687, 691, 983], "dissimilarity_matrix_": 687, "psychometrika": [687, 691, 983], "1964": [687, 691, 874, 886, 983], "borg": [687, 691, 983], "groenen": [687, 691, 983], "affinity_matrix": 688, "n_neighbors_": [688, 844], "early_exagger": 689, "min_grad_norm": [689, 1034], "der": [689, 693, 983, 1031, 1032, 1036], "maaten": [689, 693, 983], "bhtsne": [689, 1035], "opentsn": 689, "abort": 689, "pdist": [689, 774, 777], "pairwise_distance_funct": [689, 693, 774, 777, 989], "barn": [689, 983, 1033, 1035, 1038], "hut": [689, 983, 1033, 1035, 1038], "nlogn": 689, "kl_divergence_": [689, 1035], "learning_rate_": [689, 856], "hinton": [689, 847, 854, 855, 856, 983, 989, 990, 991], "2579": 689, "2605": 689, "lvdmaaten": [689, 1035], "oct": [689, 765, 983, 989], "3221": [689, 983], "3245": [689, 983], "jmlr_2014": 689, "belkina": [689, 983], "ciccolella": [689, 983], "anno": [689, 983], "halpert": [689, 983], "spidlen": [689, 983], "snyder": [689, 983], "cappion": [689, 983], "kobak": [689, 1041], "beren": 689, "transcriptom": 689, "guttman": 691, "norm_laplacian": 692, "drop_first": 692, "nk": 693, "2n": [693, 978, 990], "3k": 693, "cosine_dist": [693, 758, 989, 1034], "jarkko": 693, "venna": 693, "samuel": [693, 1010, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045], "kaski": 693, "icann": 693, "verlag": 693, "491": 693, "twelfth": 693, "pmlr": 693, "384": [693, 899], "im_": 694, "axesimag": 694, "text_": 694, "include_valu": 694, "values_format": [694, 1038], "im_kw": [694, 1042], "text_kw": [694, 1043], "get_metr": 696, "euclideandist": 696, "manhattandist": 696, "chebyshevdist": 696, "minkowskidist": [696, 1041], "seuclideandist": 696, "mahalanobisdist": 696, "haversinedist": 696, "arcsin": [696, 760], "hammingdist": 696, "n_unequ": 696, "n_tot": 696, "canberradist": 696, "braycurtisdist": 696, "abbrevi": 696, "ntt": 696, "ntf": 696, "nft": 696, "nff": 696, "nneq": 696, "jaccarddist": 696, "matchingdist": 696, "dicedist": 696, "kulsinskidist": [696, 1044], "rogerstanimotodist": 696, "russellraodist": 696, "sokalmichenerdist": 696, "sokalsneathdist": 696, "pyfunc": [696, 989], "pyfuncdist": 696, "metric_obj": 696, "chance_level_": [697, 699, 1044], "drop_intermedi": [697, 699, 778, 785, 1044], "errors_lines_": 698, "with_error": 698, "scatter_": 698, "balanced_accuracy_scor": [700, 783, 986, 1036], "imperfectli": [700, 730, 986], "label_tru": [701, 714, 733, 751, 753, 791], "upperlimit": 701, "expected_ri": 702, "discord": 702, "hubert1985": 702, "1007": 702, "2fbf01908075": 702, "steinley2004": 702, "wk": 702, "rand_index": 702, "adjusted_rand_index": 702, "chacon": 702, "chac\u00f3n": 702, "rastrojo": 702, "balanced_accuraci": [705, 986, 1036], "brodersen": 705, "ong": 705, "stephan": [705, 1031, 1037, 1038, 1040], "buhmann": 705, "20th": 705, "3121": 705, "kelleh": [705, 986], "aoif": [705, 986], "arci": [705, 986], "y_true_categor": [706, 986], "calinski": [707, 1034], "harabasz": 707, "allow_non": 708, "thrown": [708, 1037, 1038], "tn": [709, 715, 986], "negative_class": 709, "zebra": 709, "output_dict": [710, 1036, 1040], "precision_recall_fscore_support": [710, 725, 726, 780, 783, 986, 1032, 1036, 1038, 1044], "multilabel_confusion_matrix": [710, 725, 726, 734, 780, 783, 986, 1037], "conting": [711, 712, 727, 751, 1034], "n_classes_tru": [711, 751], "n_classes_pr": [711, 751], "cohen": [713, 1036], "p_o": 713, "p_e": 713, "artstein": 713, "poesio": 713, "linguist": [713, 895, 999], "596": 713, "label_pr": [714, 732, 733, 751, 753, 791], "ant": [715, 750, 986], "a_row": 716, "a_column": 716, "b_row": 716, "b_column": 716, "tsoumaka": [717, 730, 736, 986], "kataki": [717, 730, 736, 986], "vlahava": [717, 736, 986], "handbook": [717, 736, 986], "667": [717, 736, 986], "raw_valu": [718, 719, 724, 741, 742, 744, 746, 747, 749, 781, 786, 787, 986, 1036, 1039], "wainwright": [718, 719, 720], "su": [718, 719, 720], "statlearnspars": [718, 719, 720], "764": [718, 986], "691": 718, "8125": 718, "57142857": 718, "d2": 719, "d2_absolute_error_scor": [719, 986, 1042], "koenker": [719, 982], "roger": [719, 1035, 1036, 1040], "jos\u00e9": [719, 1031, 1041], "487": 720, "630": 720, "bouldin": 721, "farther": 721, "log_bas": 722, "ignore_ti": [722, 752], "ndcg": [722, 752, 986, 1035], "ndcg_score": [722, 986, 1035, 1038, 1043, 1044], "sharper": 722, "discounted_cumulative_gain": 722, "dcg": [722, 752, 986, 1035], "jarvelin": [722, 752, 986], "kekalainen": [722, 752, 986], "colt": [722, 752, 986], "mcsherri": [722, 752, 986], "najork": [722, 752, 986], "european": [722, 752, 986], "421": [722, 752, 986], "groud": [722, 752], "true_relev": [722, 752], "imperfect": [724, 781, 986, 1030], "variance_weight": [724, 781, 986], "983": 724, "n_unique_label": [725, 726, 734, 779, 780, 783, 950], "fbeta_scor": [725, 738, 779, 986, 1030, 1031, 1032, 1033, 1038, 1044], "y_true_empti": 725, "y_pred_empti": [725, 726], "66666667": [725, 778, 848, 996], "fowlk": [727, 1034], "mallow": [727, 1034], "get_scorer_nam": [728, 986, 1042], "forgiv": 730, "upperbound": 730, "grigorio": 730, "ioanni": 730, "wareh": 730, "septemb": [730, 986, 1028, 1031, 1034, 1036, 1041, 1044], "pred_decis": [731, 986, 1041], "disagre": [731, 993], "kobi": 731, "AND": 731, "denero": 731, "gluster": 732, "v_measur": [732, 791], "6666": [734, 986, 1034], "5833": [734, 986], "lrap": [735, 986], "21616": 737, "needs_proba": [738, 1037, 1045], "needs_threshold": [738, 1045], "ftwo_scor": [738, 986], "mcc": [739, 986, 1042], "baldi": 739, "brunak": 739, "chauvin": 739, "andersen": [739, 1042], "nielsen": [739, 1036], "gorodkin": 739, "jurman": 739, "riccadonna": 739, "furlanello": 739, "cen": 739, "3273": 742, "5515": 742, "6198": 742, "112589990684262": 742, "0568": 743, "4260": [745, 748], "41666667": 746, "825": 746, "msle": [747, 986], "rmsle": [747, 986], "root_mean_squared_log_error": [747, 986, 1045], "00462428": 747, "08377444": 747, "samplewis": [750, 986], "mcm": [750, 986], "mcm_": 750, "multi_confus": 750, "normalized_discounted_cumulative_gain": 752, "dcg_score": [752, 986, 1035, 1038], "kernel_matrix": [754, 755, 762, 772], "marszalek": [754, 755, 984], "lazebnik": [754, 755, 984], "schmid": [754, 755, 984], "ouvert": [754, 755, 984], "00171412": [754, 755, 984], "dense_output": [757, 763, 891, 936, 1036], "linear_kernel": [757, 761, 984, 1036], "haversine_dist": [758, 1037], "y_norm_squar": 759, "x_norm_squar": [759, 1033, 1045], "paired_dist": [759, 765, 774, 1032], "41421356": [759, 765, 989], "lon": 760, "ezeiza": 760, "airport": 760, "bueno": 760, "argentina": 760, "gaull": 760, "bsa": 760, "83333": 760, "5166646": 760, "0083899664": 760, "53844117956": 760, "bsas_in_radian": 760, "paris_in_radian": 760, "6371000": 760, "kilomet": 760, "11099": 760, "54035582": 760, "polynomial_kernel": [761, 984], "rbf_kernel": [761, 984, 1032], "laplacian_kernel": [761, 984, 1033], "sigmoid_kernel": [761, 984], "sum_over_featur": [764, 1028, 1043], "componentwis": 764, "sq": 765, "dixon": [765, 1038, 1039], "cybernet": 765, "ieeexplor": 765, "4310090": 765, "filter_param": 770, "jth": [770, 774], "force_all_finit": [774, 916, 918, 919, 1039, 1042], "distance_metr": [774, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852], "metric_kwarg": [775, 776], "reduce_func": [777, 1039], "d_chunk": 777, "sought": 777, "neigh": [777, 840, 841, 842, 844, 846, 848, 849, 850], "gen": 777, "probas_pr": 778, "warn_for": 779, "shantanu": 779, "godbol": 779, "sunita": 779, "sarawagi": 779, "pig": 779, "948": [781, 986], "max_fpr": [784, 986, 1036], "provost": [784, 986], "ceder": [784, 986], "stern": [784, 986], "fawcett": [784, 785, 986], "generalis": [784, 986, 1007], "822": 786, "n_samples_a": [788, 789], "favour": [788, 983, 985, 1037], "mean_prior": 793, "degrees_of_freedom_prior": 793, "verbose_interv": [793, 794], "wishart": 793, "emipr": 793, "precisions_": [793, 794], "precisions_cholesky_": [793, 794, 1042], "converged_": [793, 794], "lower_bound_": [793, 794, 1036], "weight_concentration_prior_": 793, "weight_concentration_": 793, "mean_precision_prior_": 793, "mean_precision_": 793, "mean_prior_": 793, "degrees_of_freedom_prior_": 793, "degrees_of_freedom_": 793, "covariance_prior_": 793, "hagai": 793, "attia": 793, "bgm": 793, "n_dimens": [793, 794], "log_prob": [793, 794], "weights_init": 794, "precisions_init": [794, 1042, 1044], "gm": 794, "pre_dispatch": [795, 801, 809, 817, 819, 820, 821, 822, 825, 952, 1031], "error_scor": [795, 798, 799, 801, 809, 817, 820, 821, 822, 825, 975, 1032, 1036, 1040, 1043], "explos": [795, 809, 819, 820, 821], "fitfailedwarn": [795, 798, 799, 801, 809, 817, 820, 821, 822, 825], "param_kernel": [795, 809], "param_degre": 795, "split0_test_scor": [795, 809, 1034], "rank_t": 795, "split1_test_scor": [795, 809], "split0_train_scor": [795, 809, 1034], "split1_train_scor": [795, 809], "mean_train_scor": [795, 809, 1034], "std_train_scor": [795, 809, 1034], "split0_test_precis": [795, 809], "mean_train_precis": [795, 809], "best_estim": [795, 798, 799, 809], "scorer_": [795, 798, 799, 809], "n_splits_": [795, 798, 799, 809], "refit_time_": [795, 798, 799, 809, 1036], "multimetric_": [795, 798, 799, 809], "parametergrid": [795, 1030, 1036], "split2_test_scor": 795, "num_sampl": [795, 809, 1043], "versionad": [795, 798, 799, 809], "stratif": [796, 797, 803, 804, 813, 814, 815, 957, 1037], "group_kfold": 796, "set_split_request": [796, 797, 802, 804, 813], "aggressive_elimin": [798, 799, 975], "r0": [798, 799], "replai": [798, 799], "n_remaining_candidates_": [798, 799], "n_candid": [798, 799, 975], "max_resources_": [798, 799], "min_resources_": [798, 799], "n_required_iterations_": [798, 799], "n_possible_iterations_": [798, 799], "exceed": [798, 799, 1034], "n_unique_tick": [801, 822], "n_tick": [801, 817, 822, 825], "neg_": [801, 817, 1034], "errorbar_": [801, 817], "errorbarcontain": [801, 817], "fill_between_": [801, 817], "polycollect": [801, 817], "exploit_incremental_learn": [801, 822], "log_scal": [801, 1044], "fill_between_kw": [801, 817], "errorbar_kw": [801, 817], "predispatch": [801, 817, 822, 825], "negat": [801, 817, 986], "combinator": 805, "lpo": 805, "param_list": 807, "rounded_list": 807, "89856": 807, "923223": 807, "878964": 807, "038159": 807, "parametersampl": [809, 1030, 1036, 1040], "2652124": 810, "rskf": 811, "36851234": 811, "sizeabl": [812, 815], "sad": [813, 814], "sss": 815, "logistic_regress": 817, "n_valu": [817, 825, 1036], "checked_cv": 818, "3315057": [820, 821], "08022103": [820, 821], "03531816": [820, 821], "test_r2": 821, "test_auc": 821, "train_r2": 821, "train_auc": 821, "3635": 821, "3573": 821, "6114": 821, "28009951": 821, "3908844": 821, "22784907": 821, "train_sizes_ab": 822, "train_size_ab": 822, "cv_train_scor": 822, "cv_test_scor": 822, "permutation_scor": 823, "pairwise_indices_": 826, "label_binarizer_": 827, "multilabel_": [827, 1033], "code_book_": 828, "bakiri": [828, 987], "pict": [828, 987], "order_": [829, 832], "jess": [829, 987, 1041], "pfahring": [829, 987], "geoff": [829, 987], "holm": [829, 987], "eib": [829, 987], "8387": 829, "9431": 829, "4576": 829, "8878": 829, "3684": 829, "2640": 829, "0321": 829, "9935": 829, "0626": 829, "y_decis": 829, "load_linnerud": [831, 1034, 1039], "force_alpha": [833, 834, 835, 837, 1043], "lidston": [833, 834, 835, 837, 988], "class_count_": [833, 834, 835, 836, 837], "class_log_prior_": [833, 834, 835, 837], "feature_count_": [833, 835, 837], "feature_log_prob_": [833, 834, 835, 837], "categoricalnb": [833, 835, 836, 837, 988, 1038, 1039, 1040, 1041, 1043], "renni": [833, 835, 988, 1036], "schuetz": [833, 837], "htmledit": [833, 837, 984], "mccallum": [833, 988], "nigam": [833, 988], "metsi": [833, 988], "androutsopoulo": [833, 988], "palioura": [833, 988], "cea": [833, 988], "predict_joint_log_proba": [833, 834, 835, 836, 837, 1043], "min_categori": [834, 1040], "category_count_": 834, "n_categories_": 834, "mirror": [835, 975], "mahout": 835, "weka": 835, "feature_all_": 835, "shih": [835, 988], "teevan": [835, 988], "karger": [835, 988], "616": [835, 988, 996], "jrenni": 835, "icml03": 835, "var_smooth": [836, 1036], "stan": 836, "levequ": [836, 878], "cstr": 836, "epsilon_": 836, "theta_": [836, 988], "clf_pf": 836, "distancemetric64": [838, 839], "valid_metr": [838, 839, 989, 1044], "19662693": [838, 839], "29473397": [838, 839], "tree_copi": [838, 839], "query_radiu": [838, 839], "count_onli": [838, 839], "kernel_dens": [838, 839], "94114649": [838, 839], "83281226": [838, 839], "2071716": [838, 839], "two_point_correl": [838, 839], "580": [838, 839], "get_arrai": [838, 839], "get_n_cal": [838, 839], "n_call": [838, 839], "get_tree_stat": [838, 839], "tree_stat": [838, 839], "breadth_first": [838, 839, 843], "return_log": [838, 839], "k_true": [838, 839], "k_ret": [838, 839], "breadth": [838, 839, 843, 1010, 1030], "dualtre": [838, 839], "sort_result": [838, 839, 846, 848, 849, 850, 1040], "radii": [838, 839], "reset_n_cal": [838, 839], "effective_metric_": [840, 841, 842, 844, 846, 848, 849, 850, 989], "callbl": 840, "effective_metric_params_": [840, 841, 842, 844, 846, 848, 849, 850], "outputs_2d_": [840, 848, 1038], "nearest_neighbor_algorithm": [840, 848, 849], "n_index": [840, 841, 842, 844, 846, 848, 849], "neigh_dist": [840, 841, 842, 844, 846, 848, 849, 850], "neigh_ind": [840, 841, 842, 844, 846, 848, 849, 850], "nearest_neighbors_algorithm": [841, 846], "nearer": [842, 850, 989], "x_dist_graph": 842, "silverman": [843, 1043], "binarytre": [843, 1032, 1036, 1040], "bandwidth_": 843, "log_dens": 843, "52955942": 843, "51462041": 843, "60244657": 843, "logprob": 843, "negative_outlier_factor": 844, "9821": 844, "0370": 844, "3697": 844, "shifted_opposite_lof_scor": 844, "opposite_lof_scor": 844, "wminkowski": [845, 1040, 1042], "narasimhan": 845, "chu": [845, 1044], "shrunken": [845, 1028], "6567": 845, "6572": 845, "nbr": [846, 989], "neighborsclassifi": [846, 848, 849, 850, 1028], "n_features_a": 847, "n_features_b": 847, "goldberg": [847, 989], "neighbourhood": [847, 989], "ncanip": 847, "neighbourhood_components_analysi": 847, "961904": 847, "outlier_label": [848, 1038], "outlier_label_": 848, "33333333": [848, 996], "x_cluster": 850, "warn_when_not_sort": 853, "efficiencywarn": [853, 1043], "sml": [854, 991], "pcd": [854, 991], "sweep": 854, "gibb": [854, 991, 1006], "intercept_hidden_": 854, "intercept_visible_": 854, "h_samples_": 854, "osindero": [854, 991], "teh": [854, 991], "1527": 854, "1554": 854, "absp": 854, "fastnc": 854, "tieleman": [854, 991], "v_new": 854, "pseudo_likelihood": 854, "relu": [855, 856], "beta_1": [855, 856], "beta_2": [855, 856], "max_fun": [855, 856, 1038], "n_layer": [855, 856], "neuron": [855, 856, 984, 990], "tan": [855, 856, 990, 1035], "rectifi": [855, 856], "kingma": [855, 856, 990], "diederik": [855, 856, 990, 1043], "jimmi": [855, 856, 990, 1034, 1036], "effective_learning_r": [855, 856], "best_loss_": [855, 856, 1043], "best_validation_score_": [855, 856, 1043], "validation_scores_": [855, 856, 1043], "intercepts_": [855, 856, 990], "n_layers_": [855, 856], "out_activation_": [855, 856], "geoffrei": [855, 856, 990, 1039, 1040, 1041, 1042, 1044], "connectionist": [855, 856], "glorot": [855, 856], "xavier": [855, 856, 1036, 1037, 1038, 1040, 1041], "yoshua": [855, 856, 999], "feedforward": [855, 856], "kaim": [855, 856], "delv": [855, 856], "imagenet": [855, 856], "log_y_prob": 855, "named_transform": [857, 1043], "svd__n_compon": 857, "transform_list": 857, "s__p": 858, "n_transformed_featur": 858, "y_log_proba": 858, "analyst": 861, "x_tr": [861, 867, 870, 871, 872, 876, 878, 881, 883, 884, 888, 889], "accept_spars": [862, 918, 919, 1035, 1045], "inv_kw_arg": 862, "pickleabl": [862, 1034], "6931": 862, "3862": 862, "n_bins_": 863, "regener": 863, "xinv": 863, "tild": [864, 994, 996], "k_fit_rows_": 864, "k_fit_all_": 864, "1299": [864, 996], "1319": [864, 996], "n_samples1": 864, "n_samples2": 864, "k_new": 864, "neg_label": [865, 882], "y_type_": 865, "sparse_input_": 865, "lb": [865, 997], "tokyo": [866, 997], "amsterdam": [866, 997], "max_abs_": 867, "x_std": [868, 884, 996], "data_min_": [868, 1033], "data_max_": [868, 1033], "data_range_": [868, 1033], "unwieldi": 869, "fi": 869, "comedi": 869, "y_indic": 869, "yt": 869, "ands": 869, "feature_name_combin": [871, 1044], "categories_": [871, 872, 879, 996, 1036, 1043], "unregular": [871, 894, 1019, 1037], "intact": [871, 1021], "infrequ": [871, 872, 879, 986, 1028, 1042, 1043, 1044], "infrequent_if_exist": [871, 996], "x_6": 871, "x_7": 871, "drop_idx_": [871, 1039, 1043], "drop_idx": 871, "gender_femal": 871, "gender_mal": 871, "group_1": 871, "group_2": 871, "group_3": 871, "drop_enc": [871, 996], "drop_binary_enc": 871, "custom_combin": 871, "custom_fnames_enc": 871, "x0_str_femal": 871, "x0_str_male": 871, "x1_int_1": 871, "x1_int_2": 871, "x1_int_3": 871, "oh": [871, 1038], "infrequent_sklearn": [871, 996], "n_encoded_featur": [871, 872], "_csr": 871, "onward": [872, 1032], "bpo": 872, "43475": 872, "lenient": [872, 1007], "min_degre": [873, 1041], "max_degre": [873, 1041], "powers_": 873, "n_output_features_": 873, "nystrom": [873, 1037, 1038], "featurewis": 874, "power_transform": [874, 887, 1036], "biometrika": [874, 886], "954": [874, 886], "386": 874, "707": [874, 886], "ignore_implicit_zero": [875, 887], "landmark": [875, 887, 996], "n_quantiles_": 875, "quantiles_": [875, 996, 1038], "references_": 875, "with_cent": [876, 888], "with_scal": [876, 888], "unit_vari": [876, 888, 1040], "quartil": 876, "q_min": [876, 888], "q_max": [876, 888], "center_": 876, "robust_scal": [876, 887, 1036], "interquartile_rang": 876, "bspline": 877, "n_features_out_": 877, "with_std": [878, 889, 996, 1036], "n_samples_seen": 878, "5a": 878, "randal": [878, 1032, 1042], "242": [878, 1028], "mic": [879, 996], "target_mean_": [879, 996], "target_type_": 879, "f0_c0": 879, "f0_c1": 879, "f0_c2": 879, "f1_c0": 879, "f1_c1": 879, "f1_c2": 879, "micci": [879, 996], "barreca": [879, 996], "newsl": [879, 996], "enc_auto": 879, "enc_high_smooth": 879, "enc_low_smooth": 879, "type_of_target_": 879, "ahead": 882, "return_norm": [885, 1035], "compute_inverse_compon": [890, 891, 998], "inverse_components_": [890, 891, 998, 1042], "2759": [890, 891], "afor": [890, 891], "baserandomproject": [890, 891], "ping": [891, 998, 1034, 1035], "density_": 891, "gaussianrandomproject": [891, 998, 1029, 1042, 1044, 1045], "church": [891, 998], "kdd06_rp": 891, "cgi": 891, "uoa": 891, "gr": 891, "opta": 891, "0182": 891, "e2": [892, 982], "93lindenstrauss_lemma": 892, "sanjoi": [892, 998], "anupam": [892, 998, 1043], "gupta": [892, 998, 1035, 1036, 1039, 1040, 1041, 1042, 1044], "elementari": [892, 998], "11841": [892, 998], "1112658": [892, 998], "7894": [892, 998], "9868": [892, 998], "steadi": [893, 894], "xiaojin": 893, "zoubin": 893, "ghahramani": 893, "cmu": 893, "cald": 893, "carnegi": 893, "mellon": 893, "jerryzhu": 893, "label_prop_model": [893, 894], "clamp": [894, 999], "dengyong": 894, "bousquet": 894, "navin": 894, "lal": 894, "schoelkopf": 894, "termination_condition_": 895, "no_chang": 895, "all_label": 895, "33rd": [895, 999], "acl": [895, 999, 1000], "stroudsburg": [895, 999], "196": [895, 999], "crammer_sing": [898, 987, 1001, 1028], "seldom": 898, "w_x_1": [898, 899], "w_x_n": [898, 899], "w_intercept": [898, 899], "readonli": [898, 899, 1041, 1043, 1044], "raw_coef_": [898, 899], "smo": [898, 899], "526": 898, "1693": 898, "unsur": 899, "class_weight_": [900, 901, 902, 903, 904, 1043], "n_sv": [900, 901, 902, 903, 904, 1001, 1038], "fit_status_": [900, 901, 902, 903, 904], "n_support_": [900, 901, 902, 903, 904, 1001, 1038], "proba_": [900, 903, 1039], "probb_": [900, 903, 1039], "shape_fit_": [900, 901, 902, 903, 904], "n_dimensions_of_x": [900, 901, 902, 903, 904], "7798": 902, "0547": 902, "0556": 902, "0561": 902, "7332": 902, "unshift": 902, "impract": 903, "tube": [904, 1001], "_tree": [906, 907, 908, 909, 1029, 1031], "decision_tree_learn": [906, 907, 1002], "olshen": [906, 907, 1002], "wadsworth": [906, 907, 1002], "belmont": [906, 907, 1002], "cutler": [906, 907], "cc_home": [906, 907], "htm": [906, 907], "ccp_path": [906, 907, 908, 909], "get_depth": [906, 907, 908, 909, 1037], "get_n_leav": [906, 907, 908, 909, 1037], "set_predict_proba_request": [906, 908], "extra_tre": [908, 909], "8947": 908, "decision_tre": [910, 911, 912, 1002], "out_fil": [910, 1002], "leaves_parallel": 910, "special_charact": [910, 1002], "fontnam": [910, 1041], "helvetica": [910, 912], "graphviz": [910, 1002], "postscript": 910, "tpng": 910, "paint": [910, 912], "dot_data": [910, 1002], "digraph": 910, "show_weight": 911, "feature_0": 911, "unrepresent": 913, "keyerror": [913, 1038], "popitem": 913, "lifo": 913, "input_nam": [917, 919, 949, 1042], "accept_large_spars": [918, 919, 1036], "ensure_2d": [918, 919], "allow_nd": [918, 919], "ensure_min_sampl": [918, 919], "ensure_min_featur": [918, 919], "y_numer": 918, "bsr": [918, 919, 1041], "x_convert": 918, "y_convert": 918, "array_convert": 919, "min_val": 922, "max_val": 922, "include_boundari": [922, 1042], "y_org": 923, "class_weight_vect": 923, "king": 923, "zen": 923, "sample_weight_vect": 924, "parenthes": 925, "type_filt": 927, "generate_onli": [929, 1038], "checks_gener": 929, "test_check_estim": 930, "check_estimators_fit_returns_self": 930, "array_lik": 933, "logdet": 933, "slogdet": 933, "6375861597263857": 933, "flip_sign": 935, "svd_lapack_driv": 935, "gesdd": 935, "p5": 935, "transposit": 935, "gesvd": 935, "conquer": 935, "unitari": 935, "vh": 935, "dot_product": 936, "deweight": 937, "min_batch_s": 938, "n_pack": [938, 939], "path_length": 940, "sliceabl": 941, "methodmetadatarequest": 942, "routemappingpair": 943, "routing_info": 943, "from_str": [943, 944], "methodpair": 944, "_obj": 946, "_method": 946, "any_method": 946, "truthi": 947, "helloifeven": 947, "_x_is_even": 947, "say_hello": 947, "temp_fold": 952, "max_nbyt": 952, "1m": 952, "mmap_mod": 952, "dispatch_next": 952, "dispatch_one_batch": 952, "unprotect": 952, "prefetch": 952, "print_progress": 952, "inner_max_num_thread": 954, "backend_param": 954, "parallel_config": 954, "register_parallel_backend": [954, 1036], "dask": [954, 1007, 1036], "localclust": 954, "workload": [954, 1006], "register_rai": 954, "backend_nam": 954, "oversubscript": [954, 1042], "threadpool": 954, "effective_n_job": 954, "make_default": 956, "parallelbackendbas": 956, "resampled_arrai": 957, "3x2": [957, 960], "shuffled_arrai": 960, "last_mean": 961, "last_var": 961, "last_n": 961, "return_sum_weight": 967, "sum_weight": 967, "all_or_ani": [970, 1038], "is_fit": 970, "eg": 970, "substitut": [970, 1007, 1034], "raise_except": 972, "array_sym": 972, "is_paramet": 974, "enclos": 975, "set_stat": 975, "bergstra": [975, 1028, 1029], "tournament": 975, "dispos": [975, 1021], "n_resources_i": 975, "n_resources_0": 975, "n_candidates_i": 975, "n_candidates_0": 975, "r_0": 975, "n_resourc": 975, "983667": 975, "951958": 975, "947958": 975, "961009": 975, "955989": 975, "jamieson": 975, "talwalkar": 975, "desalvo": 975, "rostamizadeh": 975, "hyperband": 975, "bandit": 975, "multimetr": [975, 1038, 1043], "calibrated_forest": 975, "select__k": 975, "model__estimator__max_depth": 975, "imp": 976, "sophist": [976, 988], "14338": 976, "13286": 976, "15611": 976, "amelia": 976, "scientist": [976, 1010], "roderick": 976, "rubin": 976, "1986": [976, 1002], "ol2001": 976, "mask_missing_values_onli": 976, "mask_al": 976, "3_": 978, "2_": 978, "ws2001": 978, "unsampl": 978, "equiv": [978, 1001], "\u028c": 978, "elucid": 978, "frac12": 978, "rr2007": 978, "2x_iy_i": 978, "vz2010": 978, "vvz2010": 978, "prod_i": 978, "ls2010": 978, "c_0": [978, 984], "tensorsketch": 978, "pp2013": 978, "wikic": 978, "ccf2002": 978, "mercer": 978, "langl": [978, 986, 1000, 1001], "rangl": [978, 986, 1000, 1001], "y_j": [978, 986, 988, 996, 1001], "obviat": 978, "dagm": 978, "vempati": 978, "jawahar": 978, "charikar": 978, "farach": 978, "colton": 978, "m2012": 979, "mu_k": 980, "cst": 980, "omega_": 980, "k0": 980, "h_l": 980, "extrema": 980, "honei": 980, "stork": 980, "dilemma": 981, "valid_scor": 981, "w_0": 982, "w_p": 982, "34545455": 982, "13636": [982, 1037], "rifkin": 982, "lippert": 982, "2n_": 982, "softw": 982, "kim": [982, 1036, 1037, 1038, 1042], "koh": [982, 1010], "lustig": 982, "boyd": 982, "gorinevski": 982, "c_p": 982, "cherkasski": 982, "yunqian": 982, "1691": 982, "1714": 982, "ell_2": 982, "equiangular": 982, "weisberg": 982, "ell_0": [982, 986], "_coef": 982, "mp": 982, "ell_": 982, "posteriori": [982, 988], "radford": 982, "neal": [982, 1041], "50000013": 982, "49999993": 982, "lambda_i": [982, 996], "srikantan": 982, "tristan": 982, "fletcher": [982, 1028, 1032], "nomenclatur": [982, 1034], "deliber": 982, "overparameter": 982, "ldot": [982, 986, 988, 990, 1000], "w_l": 982, "min_w": 982, "iverson": 982, "hood": [982, 1001], "broyden": 982, "goldfarb": 982, "shanno": 982, "shortcom": 982, "aaron": [982, 1031, 1032, 1033, 1038], "simon": [982, 1010, 1031, 1032, 1041, 1042, 1043, 1044], "93fletcher": 982, "93goldfarb": 982, "93shanno_algorithm": 982, "noah": 982, "multirespons": 982, "statsmodel": [982, 1006], "edm": 982, "agricultur": 982, "rainfal": 982, "paid": 982, "fraud": [982, 1010], "cash": 982, "fraudul": [982, 1010], "interrupt": 982, "drug": 982, "cure": 982, "entertain": 982, "mccullagh": 982, "nelder": 982, "boca": 982, "raton": 982, "chapman": 982, "hall": [982, 1035, 1039], "crc": 982, "31760": 982, "j\u00f8rgensen": 982, "monografia": 982, "matem\u00e1tica": 982, "2463": 982, "4337": 982, "7638": 982, "disappear": [982, 1028], "photogrammetr": 982, "hypothes": 982, "paradigm": 982, "cartographi": 982, "fischler": 982, "boll": 982, "sunglok": 982, "choi": 982, "taemin": 982, "wonpil": 982, "binom": 982, "infeas": [982, 989, 991], "k\u00e4rkk\u00e4inen": 982, "\u00e4yr\u00e4m\u00f6": 982, "h_": 982, "oarc": 982, "dae": 982, "bassett": 982, "jr": 982, "econometrica": 982, "econometr": 982, "portnoi": [982, 1045], "hare": 982, "tortois": 982, "paraboloid": 982, "w_3": 982, "w_4": 982, "w_5": 982, "z_1": 982, "z_2": 982, "z_3": 982, "z_4": 982, "z_5": 982, "streamlin": 982, "gotten": [982, 996], "necess": [983, 989], "strife": 983, "mother": 983, "baloo": 983, "song": 983, "jungl": 983, "rubric": 983, "defici": [983, 1000], "hlle": 983, "revolv": 983, "belkin": 983, "niyogi": 983, "1373": 983, "1396": 983, "molecul": 983, "jk": 983, "delta_": 983, "c_1": 983, "disentangl": 983, "legitim": 983, "die": 983, "noisier": 983, "5415": 983, "brief": 984, "num_featur": [984, 1043], "quantum": 984, "nutshel": 984, "36787944": 984, "89483932": 984, "58364548": 984, "51341712": 984, "83822343": 984, "7768366": 984, "facil": 985, "equi": 985, "agnost": [985, 994], "cue": 985, "came": 985, "quicker": 985, "unpract": 985, "analogi": [985, 986], "top_k_accuraci": 986, "top_k_accuracy_scor": [986, 1040, 1042], "neg_brier_scor": [986, 1038], "f1_micro": [986, 1032], "f1_weight": [986, 1032], "f1_sampl": 986, "neg_log_loss": 986, "roc_auc_ovr": [986, 1038], "roc_auc_ovo": [986, 1038], "roc_auc_ovr_weight": [986, 1038], "roc_auc_ovo_weight": [986, 1038], "explained_variance_scor": [986, 1031, 1035, 1042], "max_error": [986, 1037], "neg_mean_squared_log_error": 986, "mean_squared_log_error": [986, 1035, 1041, 1045], "neg_root_mean_squared_log_error": 986, "neg_median_absolute_error": 986, "neg_mean_poisson_devi": 986, "neg_mean_gamma_devi": 986, "mean_gamma_devi": [986, 1038], "d2_pinball_scor": [986, 1042], "d2_tweedie_scor": [986, 1041], "invalidparametererror": 986, "_error": 986, "my_custom_loss_func": 986, "693": 986, "protocol": [986, 1031, 1044, 1045], "custom_scoring_funct": 986, "custom_scorer_modul": 986, "confusion_matrix_scor": 986, "test_tp": 986, "test_fn": 986, "untru": 986, "dividend": 986, "divisor": 986, "quotient": 986, "texttt": 986, "_class": 986, "youden": 986, "informed": 986, "mosley2013": 986, "kelleher2015": 986, "guyon2015": 986, "urbanowicz2015": 986, "escalant": 986, "escalera": 986, "maci\u00e0": [986, 1041, 1043], "saeed": 986, "statnikov": 986, "viega": 986, "chalearn": 986, "automl": [986, 1006], "ijcnn": 986, "moslei": 986, "ijcv": 986, "urbanowicz": 986, "exstrac": 986, "evol": 986, "intel": [986, 1006], "cohen_kappa_scor": [986, 1033, 1035], "4285714285714286": 986, "manning2008": 986, "everingham2010": 986, "davis2006": 986, "flach2015": 986, "everingham": 986, "gool": 986, "winn": 986, "pascal": 986, "voc": 986, "goadrich": 986, "y_l": 986, "_l": 986, "emptyset": 986, "f_beta": 986, "ne": [986, 989], "1738": 986, "matthews_corrcoef": [986, 1028, 1034, 1035, 1042], "t_k": [986, 1002], "ik": 986, "ki": 986, "kk": 986, "auroc": 986, "ht2001": 986, "fc2009": 986, "pd2000": 986, "f2006": 986, "f2001": 986, "inner_clf": 986, "c\u00e8sar": 986, "hernandez": 986, "orallo": 986, "modroiu": 986, "wikipediadet2017": 986, "martin1997": 986, "navratil2007": 986, "consult": 986, "encyclopedia": 986, "utc": 986, "php": [986, 1006], "detection_error_tradeoff": 986, "oldid": 986, "798982054": 986, "doddington": 986, "kamm": 986, "ordowski": 986, "przybocki": 986, "navractil": 986, "klusacek": 986, "acoust": 986, "icassp": 986, "honolulu": 986, "229": 986, "brier1950": 986, "p_i": [986, 989], "bella2012": 986, "flach2008": 986, "bella": 986, "hern\u00e1ndez": 986, "ram\u00edrez": 986, "quintana": 986, "khosrow": 986, "pour": 986, "hershei": 986, "edson": [986, 1033], "matsubara": 986, "dagstuhl": 986, "seminar": 986, "schloss": 986, "leibniz": 986, "zentrum": 986, "lr_": 986, "brenner": 986, "gefel": 986, "coverage_error": [986, 1032, 1042], "label_ranking_average_precision_scor": [986, 1032, 1036, 1037, 1043], "label_ranking_loss": [986, 1033], "grade": 986, "unalt": 986, "epsilon_i": 986, "908": 986, "7083": 986, "rsme": 986, "log_": 986, "growth": [986, 1033, 1034], "commod": 986, "mapd": 986, "2e6": 986, "2666": 986, "y_n": [986, 990, 1000], "elicit": 986, "mean_pinball_loss_95p": 986, "skill": 986, "mcfadden": 986, "d2_tweedie_score_15": 986, "d2_pinball_score_08": 986, "heteroschedast": 986, "homoschedast": 986, "pear": 987, "y_dens": 987, "y_spars": 987, "advoc": 987, "elabor": 987, "financ": 987, "f3": 987, "y3": 987, "multi_target_forest": 987, "75474165": 987, "147": 987, "03498585": 987, "03812219": 987, "12165031": 987, "12914884": 987, "46081961": 987, "8948621": 987, "44373091": 987, "88978285": 987, "62745778": 987, "02891072": 987, "48204257": 987, "03260883": 987, "34867495": 987, "52003279": 987, "92529176": 987, "25719016": 987, "84253": 987, "25193977": 987, "16443186": 987, "12274212": 987, "170388": 987, "80956739": 987, "16979946": 987, "72667194": 987, "50941682": 987, "50447799": 987, "149": [987, 1028], "37967282": 987, "15699552": 987, "72850319": 987, "prod_": 988, "downarrow": 988, "spite": 988, "famous": 988, "serious": 988, "flair": 988, "2_y": 988, "mu_i": 988, "sigma_i": [988, 996], "theta_i": 988, "cnb": 988, "mnb": 988, "inventor": 988, "alpha_i": [988, 1001], "cj": [988, 1031, 1032, 1033, 1034, 1035], "summat": [988, 990], "min_c": 988, "t_i": 988, "poorest": 988, "n_i": [988, 996], "satellit": 989, "kdt": 989, "farawai": 989, "invent": 989, "orthotrop": 989, "bentlei": 989, "1975": 989, "omohundro": 989, "characteris": 989, "unaffect": 989, "amort": 989, "cache_path": 989, "gettempdir": 989, "unsort": [989, 1029, 1032, 1036], "5807": 989, "nca_pip": 989, "96190476": 989, "limits_": 989, "lx": 989, "x_m": 990, "leftmost": 990, "w_1x_1": 990, "w_2x_2": 990, "w_mx_m": 990, "backpropag": 990, "b_1": 990, "b_2": 990, "z_l": 990, "dfrac": [990, 996], "nabla": 990, "deduct": 990, "rumelhart": 990, "jiquan": 990, "ngiam": 990, "chuan": 990, "yifan": 990, "carolin": 990, "suen": 990, "backprop": [990, 1000], "lecun": [990, 1000], "orr": [990, 1000], "strai": 991, "v_ih_j": 991, "b_iv_i": 991, "c_jh_j": 991, "h_j": 991, "v_i": 991, "b_i": 991, "sum_h": 991, "fantasi": 991, "particl": 991, "thoroughli": 991, "hereund": 992, "1443": 992, "1471": 992, "outlying": 992, "h2009": 993, "g2015": 993, "absurd": 993, "m2019": 993, "bike": 993, "mc_clf": 993, "466": 993, "624": 993, "overlaid": 993, "obscur": [993, 1044], "cice": [993, 1042], "pd_": 993, "dx_c": 993, "footnot": [993, 1006], "opaqu": 994, "x_val": 994, "y_val": 994, "probe": 994, "r_multi": 994, "1013": 994, "866": 994, "445": 994, "726": 994, "298": 994, "i_j": 994, "min_max_scal": 996, "x_train_minmax": 996, "x_test_minmax": 996, "max_abs_scal": 996, "x_train_maxab": 996, "x_test_maxab": 996, "unintention": 996, "semidefinit": [996, 1001], "scholkopf1998": 996, "1_": 996, "x_train_tran": 996, "x_test_tran": 996, "8pt": 996, "x_normal": 996, "firefox": 996, "chrome": 996, "safari": 996, "africa": 996, "dragon": 996, "lexicon": 996, "par": 996, "tau": 996, "iy_j": 996, "l_i": 996, "pargent": 996, "pfister": 996, "2671": 996, "2692": 996, "infant": 996, "kid": 996, "teen": 996, "adult": 996, "senior": [996, 1010], "citizen": 996, "retbin": 996, "x_1x_2": 996, "x_1x_3": 996, "x_2x_3": 996, "x_1x_2x_3": 996, "rung": 996, "eiler": 996, "marx": 996, "perperogl": 996, "sauerbrei": 996, "abrahamowicz": 996, "bmc": 996, "methodol": 996, "38629436": 996, "sixteenth": 998, "uai": 998, "craig": [998, 1031, 1036], "boutili": 998, "mois\u00e9": 998, "goldszmidt": 998, "morgan": [998, 1002, 1004], "kaufmann": [998, 1002, 1040], "ella": 998, "bingham": 998, "heikki": 998, "mannila": 998, "245": [998, 1030], "explic": 998, "3947": 998, "671": 998, "687": 998, "kenneth": [998, 1028, 1029, 1034, 1035, 1042, 1043], "12th": 998, "296": 998, "x_new_invers": 998, "x_new_again": 998, "delalleau": 999, "aistat": 999, "gatsbi": 999, "ucl": 999, "uk": [999, 1021], "fullpap": 999, "xi_i": 1000, "slack": 1000, "t_0": 1000, "l\u00e9on": [1000, 1042, 1043, 1044], "_init_t": 1000, "basesgd": 1000, "eta_0": 1000, "_t": 1000, "svmsgd": 1000, "pegaso": 1000, "srebro": 1000, "tsuruoka": 1000, "tsujii": 1000, "ananiad": 1000, "afnlp": 1000, "lin_clf": 1001, "grasp": [1001, 1007], "sv": 1001, "builtin": 1001, "qp": 1001, "linear_svc": 1001, "gram_train": 1001, "gram_test": 1001, "zeta": 1001, "zeta_i": 1001, "textrm": [1001, 1019], "q_": 1001, "reparameter": 1001, "wu": [1001, 1032, 1040], "weng": 1001, "1005": 1001, "rong": 1001, "aug": 1001, "1871": 1001, "1874": 1001, "ofmulticlass": 1001, "fitter": 1002, "pariti": 1002, "multiplex": 1002, "export_graphviz": [1002, 1033, 1035, 1041, 1043, 1044], "export_text": [1002, 1037, 1044], "dumont": 1002, "subwindow": 1002, "dichotomis": 1002, "quinlan": 1002, "multiwai": 1002, "proprietari": 1002, "ruleset": 1002, "q_m": 1002, "n_m": 1002, "t_m": 1002, "setminu": 1002, "mk": 1002, "_m": 1002, "ge0": 1002, "widetild": 1002, "tradition": 1002, "t_t": 1002, "eff": 1002, "predictive_analyt": 1002, "artwork": 1004, "fund": 1004, "spotifi": 1004, "betawork": 1004, "evernot": 1004, "aweb": 1004, "yhat": 1004, "rangespan": 1004, "birchbox": 1004, "bestofmedia": 1004, "phimeca": 1004, "howaboutw": 1004, "peerindex": 1004, "datarobot": 1004, "okcupid": 1004, "love": [1004, 1021], "publica": 1004, "machinali": 1004, "solido": 1004, "infonea": 1004, "dataiku": 1004, "otto": 1004, "zopa": 1004, "bnp": 1004, "pariba": 1004, "cardif": 1004, "post1": [1004, 1026], "foot": 1005, "gear": 1005, "neuroimag": [1005, 1010], "astronom": 1005, "pycon": 1005, "thirti": 1005, "nyc": [1005, 1010], "sister": 1006, "sklearn_panda": 1006, "sklearn_xarrai": 1006, "xarrai": 1006, "autoviml": 1006, "tpot": 1006, "featuretool": 1006, "neuraxl": 1006, "neat": [1006, 1028], "checkpoint": 1006, "funki": 1006, "saver": 1006, "evalml": 1006, "mlflow": 1006, "lifecycl": [1006, 1007], "neptun": 1006, "mlop": 1006, "sacr": 1006, "dtreeviz": 1006, "eli5": 1006, "yellowbrick": 1006, "deap": 1006, "evolutionari": 1006, "interchang": [1006, 1045], "skop": [1006, 1023], "jpmml": 1006, "porter": 1006, "transpil": 1006, "javascript": 1006, "m2cgen": 1006, "dart": 1006, "haskel": 1006, "rust": 1006, "treelit": 1006, "micromlgen": 1006, "microml": 1006, "microcontrol": 1006, "emlearn": 1006, "c99": 1006, "arima": 1006, "skforecast": 1006, "tslearn": 1006, "hmmlearn": 1006, "pomegran": 1006, "crfsuit": 1006, "skorch": 1006, "scikera": 1006, "scikit_learn": 1006, "feder": 1006, "privaci": 1006, "homomorph": 1006, "encrypt": 1006, "mlxtend": 1006, "lego": 1006, "subsembl": 1006, "lightn": 1006, "sdca": 1006, "adagrad": 1006, "svrg": 1006, "gplearn": 1006, "genet": 1006, "multilearn": 1006, "seglearn": 1006, "fastfm": 1006, "kmode": 1006, "sphereclust": 1006, "mise": 1006, "giotto": 1006, "tda": 1006, "pymc": 1006, "censor": 1006, "lightfm": 1006, "openrec": 1006, "gensim": 1006, "nilearn": 1006, "neuro": 1006, "astroml": 1006, "astronomi": 1006, "dissemin": 1006, "chines": 1006, "persian": 1006, "spanish": 1006, "korean": 1006, "disclaim": 1006, "promis": 1007, "eleven": 1007, "incept": 1007, "scala": 1007, "reinforc": 1007, "era": 1007, "7242": 1007, "12147": 1007, "5523": 1007, "10733": 1007, "13902": [1007, 1038], "12800": 1007, "12866": 1007, "15550": 1007, "5853": 1007, "11805": 1007, "15319": 1007, "11977": 1007, "12852": [1007, 1038], "13911": [1007, 1038], "amput": 1007, "6284": 1007, "beginn": 1007, "priorit": [1007, 1035], "4497": 1007, "7646": 1007, "6425": 1007, "6424": 1007, "8480": 1007, "6231": 1007, "8100": 1007, "6599": 1007, "6715": 1007, "14582": 1007, "3855": 1007, "13227": 1007, "6323": 1007, "14180": [1007, 1039], "9173": 1007, "13146": [1007, 1038], "8614": 1007, "7608": 1007, "5082": 1007, "8243": 1007, "searchgrid": 1007, "6929": 1007, "__array_function__": [1007, 1038], "etl": [1007, 1010], "8370": 1007, "6451": 1007, "8157": 1007, "7382": 1007, "drift": 1007, "11047": [1007, 1038], "9326": 1007, "slep011": 1007, "1626": 1007, "10463": 1007, "id3": [1008, 1023], "cart": [1008, 1023], "touch": 1009, "savetxt": 1009, "cloneabl": 1009, "datafil": 1009, "printabl": 1009, "indispens": 1010, "stephen": [1010, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1041], "simmon": 1010, "vp": 1010, "athena": 1010, "music": 1010, "bernhardsson": 1010, "pariet": [1010, 1028], "lear": 1010, "visag": 1010, "fantast": 1010, "startup": 1010, "bitli": 1010, "chartbeat": 1010, "digg": [1010, 1035], "poncho": 1010, "gilad": 1010, "lotan": 1010, "chief": 1010, "chat": 1010, "bread": 1010, "butter": 1010, "chaumond": [1010, 1036], "offic": 1010, "ayzenshtat": [1010, 1036], "undergrad": 1010, "professor": 1010, "hotel": 1010, "destin": 1010, "agent": 1010, "melani": [1010, 1035, 1036], "awesom": 1010, "stuff": 1010, "randomizedpca": [1010, 1028, 1030, 1031, 1033, 1034, 1035], "boston": 1010, "mdbecker": 1010, "pydata_2013": 1010, "ninja": 1010, "thorough": 1010, "notch": 1010, "production": 1010, "greg": [1010, 1034, 1035, 1037, 1038], "lamp": 1010, "founder": 1010, "prototyp": 1010, "jurgen": 1010, "director": 1010, "commerc": 1010, "inventori": 1010, "bertin": 1010, "mahieux": 1010, "invalu": 1010, "vijai": [1010, 1031], "surrog": 1010, "traine": 1010, "impress": 1010, "traffic": 1010, "tenur": 1010, "matchmak": 1010, "weitzenfeld": 1010, "tweet": 1010, "ferenc": 1010, "huszar": 1010, "shop": 1010, "ourselv": 1010, "jeremi": [1010, 1033, 1034, 1035, 1036, 1039, 1040], "achin": 1010, "ceo": 1010, "marketplac": 1010, "frid": [1010, 1031], "radar": 1010, "partnership": 1010, "lebourgeoi": 1010, "charron": [1010, 1031, 1032, 1039, 1040, 1041], "cornerston": 1010, "sheep": 1010, "featureforg": 1010, "rafael": [1010, 1029, 1030, 1032, 1035], "carrascosa": [1010, 1032], "law": 1010, "semiconductor": 1010, "fab": [1010, 1038, 1039], "bleed": 1010, "smartphon": 1010, "automobil": 1010, "trent": [1010, 1034], "mcconaghi": 1010, "rapid": 1010, "immens": 1010, "thorsten": 1010, "kranz": 1010, "coma": 1010, "dss": 1010, "douetteau": 1010, "b2c": 1010, "retail": 1010, "palladium": 1010, "rammig": [1010, 1034], "peer": 1010, "lend": 1010, "billion": 1010, "gbp": 1010, "grate": 1010, "vlasio": [1010, 1035], "vasilei": [1010, 1035], "petfood": 1010, "cocoa": 1010, "worldwid": 1010, "toolset": 1010, "equip": 1010, "fitzk": 1010, "sr": 1010, "fondat": 1010, "s\u00e9bastien": [1010, 1034, 1036], "conort": 1010, "salmon": 1012, "nine": 1012, "sentiment": 1013, "cli": 1013, "doctest_mod": 1013, "hardest": 1014, "tightli": 1015, "knit": 1015, "x_fold": 1016, "array_split": 1016, "y_fold": 1016, "934": 1016, "train_indic": 1016, "test_indic": 1016, "963": 1016, "96388889": 1016, "92222222": 1016, "9637883": 1016, "93036212": 1016, "96578289": 1016, "92708922": 1016, "96681476": 1016, "96362897": 1016, "93192644": 1016, "0077": 1016, "943": 1016, "00375": 1016, "lfw_": 1017, "_lfw": 1017, "gerhard_schroed": 1017, "donald_rumsfeld": 1017, "tony_blair": 1017, "colin_powel": 1017, "george_w_bush": 1017, "282": [1017, 1028], "estimated_param_": 1018, "iris_x": 1019, "iris_i": 1019, "iris_x_train": 1019, "iris_y_train": 1019, "iris_x_test": 1019, "iris_y_test": 1019, "pave": 1019, "paltri": 1019, "exabyt": 1019, "30349955": 1019, "237": 1019, "63931533": 1019, "510": 1019, "53060544": 1019, "73698041": 1019, "13170937": 1019, "81458798": 1019, "84845219": 1019, "60648906": 1019, "51961675": 1019, "09517222": 1019, "585": 1019, "5854": 1019, "5855": 1019, "occam": 1019, "razor": 1019, "best_alpha": [1019, 1028], "025118864315095794": 1019, "508": 1019, "knew": 1020, "taxonomist": 1020, "face_compress": 1020, "x_approx": 1020, "images_approx": 1020, "18565811e": 1020, "19346747e": 1020, "43026679e": 1020, "text_analyt": 1021, "skeleton": [1021, 1031], "sklearn_tut_workspac": 1021, "cp": 1021, "work_directori": 1021, "tutorial_hom": 1021, "fetch_data": 1021, "lang": 1021, "newsweed": 1021, "netnew": 1021, "bydat": 1021, "twenty_train": 1021, "holder": 1021, "2257": 1021, "sd345": 1021, "collier": 1021, "laserjet": 1021, "iii": [1021, 1042], "hampton": 1021, "4gb": 1021, "count_vect": 1021, "x_train_count": 1021, "35788": 1021, "4690": 1021, "downscal": 1021, "tf_transform": 1021, "x_train_tf": 1021, "tfidf_transform": 1021, "x_train_tfidf": 1021, "na\u00efv": 1021, "docs_new": 1021, "opengl": 1021, "x_new_count": 1021, "x_new_tfidf": 1021, "text_clf": 1021, "twenty_test": 1021, "docs_test": 1021, "8348": 1021, "9101": [1021, 1036], "1502": 1021, "353": 1021, "tfidf__use_idf": 1021, "searcher": 1021, "gs_clf": 1021, "workspac": 1021, "fear": 1021, "fire": 1021, "exercise_xx_script": 1021, "arg1": 1021, "arg2": 1021, "arg3": 1021, "mortem": 1021, "exercise_01_language_train_model": 1021, "exercise_02_senti": 1021, "movie_review": 1021, "txt_sentoken": 1021, "cpickl": 1021, "subtleti": 1023, "subscrib": 1026, "gzip": 1028, "bzip2": 1028, "decompress": 1028, "auc_scor": [1028, 1030], "kernc": [1028, 1042, 1043], "led": 1028, "probabilisticpca": [1028, 1031], "hmm": [1028, 1029, 1030, 1031, 1033], "gaussianhmm": 1028, "multinomialhmm": 1028, "n_gram_rang": 1028, "267": 1028, "alexi": [1028, 1031, 1032, 1035], "mignon": [1028, 1031, 1032, 1035], "subhodeep": [1028, 1029, 1030], "moitra": [1028, 1029, 1030], "yannick": [1028, 1030], "schwartz": [1028, 1030, 1042], "duckworth": 1028, "benediktsson": [1028, 1029, 1030], "marko": [1028, 1037, 1038, 1044], "burjek": 1028, "pinto": 1028, "abraham": [1028, 1029, 1034, 1038], "hoenig": 1028, "flyingimmidev": 1028, "francoi": [1028, 1041], "savard": 1028, "hann": 1028, "schulz": 1028, "welind": 1028, "companioni": 1028, "brandyn": 1028, "bussonni": [1028, 1040], "matthia": [1028, 1030, 1031, 1034, 1035, 1036, 1040, 1043], "pierr": [1028, 1036, 1037, 1039, 1041, 1043], "astolfi": 1028, "huiginn": 1028, "goodman": [1028, 1033], "ludwig": 1028, "schwardt": 1028, "hervieu": 1028, "sergio": [1028, 1030, 1031, 1040, 1043], "medina": [1028, 1030], "sheerman": 1028, "buguen": 1028, "seq_dataset": [1028, 1038], "weight_vector": [1028, 1038], "reuben": 1028, "costin": 1028, "_basehmm": 1028, "neighborsregressor": 1028, "gone": [1028, 1029], "vbgmm": [1028, 1032, 1034], "_pvalu": 1028, "charset": [1028, 1030], "test_fract": 1028, "train_fract": 1028, "239": 1028, "marek": 1028, "fcostin": 1028, "adrien": 1028, "gaidon": 1028, "joona": 1028, "sillanp\u00e4\u00e4": 1028, "mccarthi": [1028, 1036], "roi": [1028, 1042], "hyunjin": 1028, "ibay": 1028, "scheidegg": 1028, "clair": 1028, "revillet": 1028, "conrad": [1028, 1029, 1043], "meng": [1028, 1029, 1032, 1034, 1035], "xinfan": [1028, 1029, 1032], "udi": 1028, "weinsberg": 1028, "janso": 1028, "palafox": 1028, "overwrite_": 1028, "copy_": 1028, "buffer_mb": 1028, "sparse_encode_parallel": 1028, "accident": [1028, 1032, 1037], "basedictionarylearn": 1028, "sparsecodingmixin": 1028, "fast_svd": 1028, "arnold": [1028, 1029], "bala": [1028, 1031], "subrahmanyam": [1028, 1031], "varanasi": [1028, 1031], "draxu": 1028, "eickenberg": [1028, 1030, 1031, 1032, 1033], "bogdan": 1028, "trach": 1028, "f\u00e9lix": [1028, 1030, 1031, 1032, 1036], "antoin": [1028, 1030, 1031, 1032, 1035], "fortin": [1028, 1030, 1031, 1032], "manuel": [1028, 1032, 1036, 1037, 1040, 1041], "caicedo": 1028, "carvaj": 1028, "tiziano": 1028, "zito": [1028, 1041], "jean": [1028, 1031, 1032, 1033, 1034, 1035, 1041], "kossaifi": [1028, 1032, 1033], "thumbnail": 1028, "mldata": [1028, 1036], "pietro": [1028, 1031], "berk": 1028, "macosx": 1028, "xarg": 1028, "bscikit": 1028, "cross_val": 1028, "bcross_val": 1028, "lurk": 1028, "l1_distanc": 1028, "387": 1028, "168": 1028, "andi": [1028, 1035], "amit": [1028, 1042, 1043], "salvator": [1028, 1042, 1043], "masecchia": 1028, "schut": 1028, "metaireau": [1028, 1031], "bryan": [1028, 1031, 1037, 1038, 1041], "silverthorn": 1028, "minwoo": 1028, "luca": [1028, 1038, 1039, 1040, 1041], "wiman": 1028, "schl\u00fcter": [1028, 1036], "malet": 1028, "miott": [1028, 1031], "feth": 1028, "arezki": 1028, "yamin": 1028, "notes_neighbor": 1028, "netbsd": 1028, "kamel": 1028, "ibn": 1028, "hassen": 1028, "derouich": 1028, "virgilefritsch": 1028, "example_gaussian_process_plot_gp_regress": 1028, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1028, "tast": 1028, "2x": 1028, "10x": 1028, "200x": 1028, "ann": [1028, 1040, 1042], "laur": 1028, "fouqu": 1028, "ronan": [1028, 1031, 1036], "amicel": [1028, 1031], "osendorf": [1028, 1029], "gmmhmm": [1028, 1029], "latex": 1028, "mlcomp": 1028, "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1028, "pybrain": 1028, "rokem": [1028, 1034], "100x": [1028, 1031, 1045], "obsolet": [1028, 1044], "attrselect": 1028, "unmaintain": 1028, "lite": 1028, "filo": [1028, 1031], "mailhot": 1028, "huard": 1028, "dave": [1028, 1035, 1036, 1042, 1044], "morril": 1028, "schofield": 1028, "travi": [1028, 1036], "oliph": 1028, "pearu": 1028, "peterson": [1028, 1030], "0d": 1029, "marchman": [1029, 1030], "hrishikesh": [1029, 1030], "huilgolkar": [1029, 1030], "bastiaan": [1029, 1030], "diego": [1029, 1030], "molla": [1029, 1030], "cunha": [1029, 1030], "almeida": [1029, 1030, 1041], "rolando": [1029, 1030], "espinoza": [1029, 1030], "fuent": [1029, 1030], "beauchamp": [1029, 1032], "longstand": [1029, 1035], "shaun": 1029, "jackman": 1029, "winterman": 1029, "seberg": 1029, "n_atom": 1029, "label_propag": 1029, "learn_rat": 1029, "basegradientboost": 1029, "mean_square_error": 1029, "gmm_": 1029, "eig_tol": 1029, "chunk_siz": 1029, "zero_one_scor": 1029, "aymer": 1029, "masurel": 1029, "syhw": [1029, 1030], "corei": [1029, 1036, 1037], "lynch": [1029, 1035], "shu": [1029, 1032, 1036], "tadej": [1029, 1030], "jane\u017e": [1029, 1030], "caje": 1029, "tiago": [1029, 1033], "nune": 1029, "cow": 1029, "anz": 1029, "jauvin": 1029, "jacqu": [1029, 1031], "kvam": [1029, 1031], "doug": [1029, 1030, 1040], "coleman": [1029, 1030], "dickerson": 1029, "approximateident": 1029, "veronda": 1029, "matti": [1029, 1032, 1033], "lyra": [1029, 1032, 1033], "mikhail": [1029, 1030, 1031, 1034, 1035, 1043, 1044], "korobov": [1029, 1030, 1031, 1034, 1035], "alejandro": [1029, 1034, 1045], "weinstein": 1029, "deil": [1029, 1039, 1040], "nizhibitski": 1029, "coelho": [1029, 1031, 1032, 1036], "miroslav": [1029, 1030, 1033], "batchkarov": [1029, 1033], "pavel": [1029, 1037], "bob": [1029, 1035], "dengemann": 1029, "emanuel": 1029, "x006": 1029, "justin": [1030, 1036, 1040], "stochastic_gradi": [1030, 1031, 1037], "crombach": 1030, "sheet": 1030, "jaccard_similarity_scor": [1030, 1032, 1037], "jochen": 1030, "wersd\u00f6rfer": 1030, "sinayev": 1030, "unpleas": 1030, "novic": 1030, "tini": [1030, 1043], "hyperlink": 1030, "luessi": 1030, "philipp": [1030, 1031, 1034, 1043], "gervai": [1030, 1031], "cleverless": 1030, "nosetest": 1030, "compute_import": 1030, "return_model": [1030, 1032], "itergrid": 1030, "tacitli": 1030, "charset_error": 1030, "precompute_gram": 1030, "2224": 1030, "jim": 1030, "holmstr\u00f6m": 1030, "steven": [1030, 1031, 1033, 1035, 1036, 1041, 1043, 1044], "gryze": [1030, 1033], "sergeyf": 1030, "ben": [1030, 1031, 1032, 1035, 1036, 1037, 1040], "speer": 1030, "federico": [1030, 1031, 1036, 1037, 1042], "vaggi": [1030, 1031], "raul": [1030, 1031], "garreta": [1030, 1031], "gei": 1030, "flaxman": [1030, 1032], "denton": 1030, "cockburn": 1030, "dougal": [1030, 1032, 1033, 1035, 1036, 1037, 1038], "sutherland": [1030, 1032, 1033, 1035, 1036, 1037, 1038], "ian": [1030, 1032, 1037, 1038, 1040, 1043, 1044], "ozsvald": 1030, "johann": [1030, 1031, 1036, 1038, 1039, 1042], "sch\u00f6nberger": [1030, 1031], "szabo": [1030, 1031], "roland": [1030, 1031], "imran": [1030, 1031, 1032], "haqu": [1030, 1031, 1032], "karayev": 1030, "jamestwebb": [1030, 1031], "abhijeet": 1030, "kolh": 1030, "velkov": 1030, "fazlul": 1030, "shahriar": 1030, "felix": [1030, 1035, 1036, 1038, 1040, 1041, 1042], "brockherd": 1030, "harikrishnan": 1030, "jack": [1030, 1033, 1041, 1042, 1043, 1044], "hale": [1030, 1042], "jakemick": 1030, "mcdermott": 1030, "zwinck": 1030, "vredevoogd": [1030, 1031], "pati": 1030, "ekman": [1030, 1034], "shubernetskii": 1030, "naoki": [1030, 1040], "orii": 1030, "seamu": 1030, "absher": 1030, "feldman": [1030, 1035, 1036, 1037, 1038], "stefano": 1030, "lattarini": 1030, "steve": [1030, 1032, 1036, 1041, 1043], "koch": [1030, 1036, 1037, 1039, 1040], "sturla": 1030, "molden": 1030, "jarosch": 1030, "nikolai": [1031, 1032, 1033, 1034, 1036, 1037, 1042, 1044], "mayorov": [1031, 1032, 1033, 1034], "msvc": 1031, "mingw": 1031, "resourcewarn": 1031, "calvin": [1031, 1032], "gile": [1031, 1032], "billing": [1031, 1032, 1033], "safe_realloc": 1031, "bradshaw": [1031, 1032, 1035], "pico": [1031, 1032], "restor": [1031, 1036, 1037, 1038, 1039, 1043], "raff": 1031, "__array__": [1031, 1038], "jeffrei": [1031, 1034], "blackburn": [1031, 1034], "danni": [1031, 1032, 1033], "sullivan": [1031, 1032, 1033], "wignal": [1031, 1032, 1038, 1039], "grid_tograph": 1031, "gracefulli": [1031, 1032], "novak": 1031, "tulloch": [1031, 1032], "wardagglomer": 1031, "wardclust": 1031, "mean_l1_ratio": 1031, "phlypo": 1031, "312": 1031, "148": 1031, "bommarito": [1031, 1032], "brook": [1031, 1032, 1040], "osborn": [1031, 1032], "eltermann": 1031, "bwignal": 1031, "ankit": [1031, 1038, 1040, 1042], "agraw": [1031, 1036, 1042, 1043], "carei": [1031, 1032, 1033, 1034, 1035], "ugurthemast": [1031, 1032], "schumach": [1031, 1032, 1033], "baptist": [1031, 1039], "lagard": 1031, "rajat": [1031, 1038], "khanduja": 1031, "pascual": 1031, "ignacio": 1031, "rossi": 1031, "s\u00e4ger": [1031, 1034], "ilambharathi": [1031, 1032], "kanniah": [1031, 1032], "sdenton4": 1031, "alyssa": [1031, 1035], "amo": 1031, "waterland": 1031, "murad": 1031, "maud": 1031, "karol": 1031, "pysniak": 1031, "cgohlk": [1031, 1032], "jacobsen": 1031, "collin": 1031, "kaushik94": 1031, "erwin": 1031, "marsi": 1031, "csytraci": 1031, "lk": 1031, "laurent": [1031, 1032, 1035, 1036, 1043, 1044], "direr": [1031, 1032, 1035, 1036], "shilt": 1031, "yoshiki": [1031, 1034], "v\u00e1zquez": 1031, "yung": [1031, 1034], "siang": 1031, "liau": 1031, "abhishek": [1031, 1032, 1038, 1042, 1044], "thakur": [1031, 1032], "rohit": [1031, 1032, 1036, 1037], "sivaprasad": [1031, 1032], "amormachin": 1031, "oscar": [1031, 1035], "carlsson": 1031, "nanta": 1031, "nardelli": 1031, "jess010": 1031, "kowalski87": 1031, "clegg": 1031, "ralf": [1031, 1034, 1035, 1043, 1044], "gommer": [1031, 1034, 1035, 1043, 1044], "rupesh": 1031, "srivastava": [1031, 1043], "ryan": [1031, 1034, 1036, 1037], "skipper": [1031, 1033, 1034], "seabold": [1031, 1033, 1034], "stefan": [1031, 1032, 1036, 1038], "walt": [1031, 1032, 1036], "riddel": [1031, 1033, 1035], "valentin": [1031, 1033, 1043, 1044], "haenel": 1031, "myer": [1031, 1035], "yoni": 1031, "meshulam": 1031, "yuri": [1031, 1033], "zaytsev": 1031, "adrinjalali": [1031, 1040], "ai8rahim": 1031, "alemagnani": 1031, "chalmerlow": 1031, "dziki": 1031, "dro\u017cd\u017c": 1031, "matrixorz": 1031, "popo": 1031, "samuela": 1031, "boulogn": 1031, "ethan": [1031, 1034], "guilherm": 1031, "trein": 1031, "heuer": 1031, "ivicajov": 1031, "rouli": 1031, "eduardo": [1031, 1033, 1041, 1042], "ari\u00f1o": 1031, "rubia": 1031, "jell": 1031, "zijlstra": 1031, "eddi": 1031, "jansson": [1031, 1043], "ca\u00f1ardo": 1031, "alastuei": 1031, "joseph": [1031, 1032, 1033, 1034, 1040, 1042, 1043], "perla": 1031, "ricardo": [1031, 1041, 1042], "kenta": 1031, "sato": 1031, "medri": 1031, "luce": 1031, "pierron": 1031, "danielweitzenfeld": 1031, "thompson": [1031, 1043, 1044], "brett": [1031, 1033, 1034, 1035, 1036, 1043], "feurer": [1031, 1036], "earl": 1031, "hank": 1031, "orr\u00f9": 1031, "lunt": 1031, "kearn": 1031, "pawe\u0142": [1031, 1035, 1040, 1041], "mandera": 1031, "zambelli": 1031, "staubda": 1031, "dedupl": 1032, "heilman": [1032, 1033], "precompute_dist": [1032, 1039], "lshforest": [1032, 1035], "qiang": 1032, "luo": 1032, "clemen": 1032, "brunner": 1032, "matteo": [1032, 1034, 1042], "visconti": 1032, "oleggio": 1032, "castello": 1032, "linkage_tre": 1032, "jatin": [1032, 1034], "shah": [1032, 1033, 1034, 1040], "saurabh": [1032, 1033, 1034, 1035, 1036, 1040], "jha": [1032, 1038, 1042], "blanchard": [1032, 1033], "michal": [1032, 1035, 1041, 1042], "romaniuk": 1032, "gilmor": 1032, "stapl": 1032, "hedyati": 1032, "antoni": [1032, 1034, 1040, 1043], "parel": 1032, "herv\u00e9": 1032, "bredin": 1032, "hasil": 1032, "sharma": [1032, 1034, 1036, 1037, 1039, 1040, 1042], "ducktyp": 1032, "download_20newsgroup": 1032, "friend": 1032, "cathi": [1032, 1038], "deng": [1032, 1033, 1034], "dawson": 1032, "garret": 1032, "hanna": [1032, 1033, 1039], "wallach": [1032, 1033], "yan": [1032, 1040], "artem": [1032, 1035], "sobolev": 1032, "fit_ovr": 1032, "predict_ovr": 1032, "predict_proba_ovr": 1032, "fit_ovo": 1032, "predict_ovo": 1032, "fit_ecoc": 1032, "predict_ecoc": 1032, "lamond": 1032, "outweigh": 1032, "thresh": 1032, "akshai": [1032, 1035, 1040], "akshayah3": 1032, "aldrian": 1032, "obaja": 1032, "ander": [1032, 1038], "aagaard": 1032, "cranenburgh": 1032, "walker": 1032, "banilo": [1032, 1033], "barmalei": [1032, 1033], "benedikt": 1032, "koehler": 1032, "bhsu": 1032, "bori": [1032, 1040, 1044], "feld": [1032, 1044], "borja": 1032, "ayerdi": 1032, "boyuan": [1032, 1033, 1034], "brent": [1032, 1036, 1037], "pedersen": [1032, 1044], "celeo": 1032, "chebee7i": 1032, "stade": 1032, "schuldt": 1032, "christof": [1032, 1033], "angermuel": [1032, 1033], "daiki": 1032, "aminaka": 1032, "danfrankj": 1032, "dmitrij": 1032, "milajev": 1032, "floydsoft": 1032, "garrett": 1032, "gpassino": 1032, "gwulf": [1032, 1033], "hampu": 1032, "bengtsson": 1032, "harri": [1032, 1034, 1040, 1041], "mavroforaki": [1032, 1034], "helder": [1032, 1041, 1042], "herv": 1032, "hugu": 1032, "salamin": 1032, "ism": 1032, "dlabal": 1032, "javier": 1032, "l\u00f3pez": [1032, 1036, 1037, 1040], "pe\u00f1a": 1032, "jdcaballero": 1032, "jeff": [1032, 1034, 1041, 1042], "hammerbach": 1032, "helmu": 1032, "kaicheng": 1032, "markham": [1032, 1039, 1040], "lagacheri": 1032, "leepei": 1032, "loic": [1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "estev": [1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044], "luka": [1032, 1039], "michelbach": 1032, "krell": [1032, 1034], "ku": [1032, 1033], "mateusz": [1032, 1039, 1040, 1045], "susik": 1032, "mehdi": [1032, 1041], "cherti": 1032, "mlg": 1032, "montecchio": 1032, "okal": 1032, "billi": 1032, "\u00f3scar": [1032, 1033, 1034, 1035], "n\u00e1jera": [1032, 1033, 1034, 1035], "puggioni": 1032, "pratap": [1032, 1035, 1042], "vardhan": 1032, "pvnguyen": 1032, "queqichao": 1032, "rahiel": 1032, "kasim": 1032, "mason": 1032, "saket": [1032, 1033, 1040], "choudhari": [1032, 1033, 1042, 1044], "sam": [1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043], "nichol": 1032, "sethdandridg": 1032, "sinhrk": [1032, 1033], "snuderl": 1032, "ott": 1032, "tjoa": 1032, "swu": 1032, "zimmer": [1032, 1042], "tejesh95": 1032, "terrycojon": 1032, "delteil": 1032, "toma": 1032, "kazmar": 1032, "trevorstephen": [1032, 1034], "tttthomasssss": 1032, "tzu": 1032, "kuo": 1032, "ugurcaliskan": 1032, "vinayak": [1032, 1033, 1034, 1036, 1037, 1043, 1044], "mehta": [1032, 1033, 1034, 1036, 1037, 1038, 1039, 1043, 1044], "vjacheslav": 1032, "murashkin": 1032, "wadawson": 1032, "x0l": 1032, "6147": 1033, "presort": [1033, 1038], "5857": 1033, "mcculloh": [1033, 1034], "6258": 1033, "giorgio": [1033, 1034, 1035], "patrini": [1033, 1034, 1035], "joe": 1033, "jevnik": 1033, "labelkfold": [1033, 1034], "labelshufflesplit": [1033, 1034], "mcfee": [1033, 1034], "3659": 1033, "4738": 1033, "projectedgradientnmf": 1033, "nls_max_it": 1033, "erick": 1033, "moodi": 1033, "4025": 1033, "mean_shift": [1033, 1036], "martino": 1033, "sorbaro": 1033, "cori": 1033, "konstantin": [1033, 1034, 1035], "shmelkov": 1033, "backlink": 1033, "jaidev": 1033, "deshpand": [1033, 1034], "dictlearn": 1033, "kashif": 1033, "rasul": [1033, 1035, 1036], "galvez": 1033, "sonni": 1033, "hu": [1033, 1036, 1038], "santi": [1033, 1035, 1036], "villalba": [1033, 1036, 1040], "5186": 1033, "stolbunov": 1033, "booster": 1033, "graham": [1033, 1034], "clenaghan": [1033, 1034], "clyde": 1033, "subproblem": 1033, "forestclassifi": 1033, "ankur": [1033, 1044], "ankan": 1033, "henri": [1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1043], "5431": 1033, "buddha": 1033, "prakash": [1033, 1035, 1041], "5182": 1033, "lamb": [1033, 1041], "5282": 1033, "5355": 1033, "5360": 1033, "4478": 1033, "5337": 1033, "4362": 1033, "5495": 1033, "elvi": [1033, 1034, 1035], "dohmatob": [1033, 1034, 1035], "data_min": 1033, "data_max": 1033, "data_rang": 1033, "_learntselectormixin": 1033, "gradientboost": 1033, "metatransfom": 1033, "load_lfw_pair": 1033, "wardagglom": 1033, "residues_": 1033, "indicator_matrix_": 1033, "adithya": 1033, "ganesh": 1033, "akitti": 1033, "alexei": 1033, "grigorev": 1033, "ali": [1033, 1036, 1037, 1040, 1041, 1043, 1044], "baharev": 1033, "ando": 1033, "saaba": 1033, "anish": [1033, 1034], "anthoni": [1033, 1035, 1036], "erling": 1033, "rouvinen": 1033, "rachez": [1033, 1034], "benjaminirv": 1033, "naul": [1033, 1034], "gohlk": 1033, "bourguignat": 1033, "cindi": [1033, 1041], "sridharan": 1033, "kronovet": 1033, "data1010": 1033, "dotson": 1033, "djipei": [1033, 1034], "dmitri": [1033, 1035, 1036, 1037, 1041, 1044], "spikhalskii": 1033, "donn": 1033, "duart": [1033, 1041, 1043], "caro": 1033, "larson": [1033, 1037, 1038, 1040, 1042], "fernando": [1033, 1040], "carrillo": 1033, "eckert": 1033, "zalkow": 1033, "ganiev": [1033, 1034, 1035], "ibraim": [1033, 1034, 1035], "giorgiop": 1033, "gryllo": [1033, 1036], "prokopi": [1033, 1036], "hsuan": 1033, "tien": 1033, "ishank": [1033, 1034, 1035], "gulati": [1033, 1034, 1035], "jeffrey04": [1033, 1034], "jfraj": 1033, "jiali": 1033, "mei": [1033, 1038], "kirkham": [1033, 1034, 1036], "wittenau": 1033, "loyal": 1033, "jungkook": 1033, "park": [1033, 1038, 1040, 1043, 1044], "kamalakerdadi": [1033, 1034], "kyler": 1033, "lilian": [1033, 1034, 1045], "besson": [1033, 1034], "tiao": [1033, 1034], "marktab": 1033, "spacek": 1033, "martinbpr": [1033, 1034], "martinosorb": 1033, "maryanmorel": [1033, 1034], "masafumi": 1033, "oyamada": 1033, "krump": 1033, "kolganov": 1033, "mbilling": 1033, "mhg": 1033, "patterson": 1033, "omer": 1033, "katz": [1033, 1040, 1041], "pauli": 1033, "virtanen": 1033, "fischer": [1033, 1034], "pianomania": 1033, "preston": [1033, 1034, 1035], "parri": [1033, 1034, 1035], "rohan": [1033, 1034, 1036, 1037, 1041], "ramanath": 1033, "bansod": [1033, 1034, 1035], "scls19fr": 1033, "saeger": [1033, 1034, 1035], "shivan": 1033, "sornarajah": 1033, "simonpl": 1033, "sseg": 1033, "hoover": [1033, 1034, 1035, 1037], "seguin": 1033, "theodor": 1033, "vasiloudi": 1033, "freita": [1033, 1035, 1036], "pereira": [1033, 1036, 1037], "timothi": [1033, 1041], "hopper": 1033, "tokoroten": 1033, "vstolbunov": 1033, "wangz10": 1033, "yucheng": 1033, "zhauniarovich": 1033, "zac": 1033, "stewart": [1033, 1038, 1041, 1043], "zhai_pro": 1033, "zichen": 1033, "7946": 1034, "8355": 1034, "9010": 1034, "8040": 1034, "9149": 1034, "aman": [1034, 1035, 1036, 1042, 1043], "dalmia": [1034, 1035, 1036], "nate": [1034, 1035, 1041], "guerin": [1034, 1035], "lebedev": [1034, 1035], "utilis": 1034, "6497": 1034, "7724": 1034, "bing": [1034, 1035], "explained_variance_ratio": 1034, "7632": 1034, "jpfrancoia": [1034, 1035], "7676": 1034, "moham": [1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "affan": 1034, "7756": 1034, "7786": 1034, "srivatsan": [1034, 1035, 1038], "7799": 1034, "7490": [1034, 1035], "6282": 1034, "7301": 1034, "6178": 1034, "7680": 1034, "n_iters_": 1034, "7553": 1034, "ekaterina": [1034, 1035, 1036, 1037, 1039, 1044], "krivich": [1034, 1035, 1037], "5874": 1034, "7593": 1034, "7594": 1034, "7660": 1034, "7750": 1034, "7732": 1034, "artsion": 1034, "lieu": [1034, 1035], "grid_scores_": [1034, 1040, 1041], "leaveonelabelout": 1034, "leaveplabelout": 1034, "plural": 1034, "mean_tim": 1034, "std_time": 1034, "3204": 1034, "5291": 1034, "sounder": 1034, "7295": 1034, "5299": 1034, "bravi": 1034, "fouchet": 1034, "calinski_harabaz_scor": [1034, 1036], "harabaz": 1034, "6586": 1034, "4294": 1034, "6667": 1034, "6954": 1034, "unveil": 1034, "yelit": 1034, "basebag": [1034, 1036], "staub": 1034, "5805": 1034, "5251": 1034, "imacul": 1034, "1000x": 1034, "arfa": 1034, "6691": 1034, "6913": 1034, "5762": 1034, "utkarsh": [1034, 1035, 1036, 1037], "upadhyai": [1034, 1035, 1036, 1037], "6846": 1034, "5929": 1034, "podshumok": [1034, 1035], "6173": 1034, "ryad": 1034, "zenin": 1034, "devashish": 1034, "asish": [1034, 1035], "dowl": 1034, "6697": 1034, "ori": 1034, "ziv": 1034, "sear": 1034, "merritt": 1034, "7325": 1034, "7239": 1034, "hong": [1034, 1036, 1040, 1041, 1042, 1044], "guangguo": 1034, "jensen": [1034, 1040], "7419": 1034, "gregori": [1034, 1038, 1039, 1040, 1041], "stupp": [1034, 1035], "bernardo": 1034, "stein": 1034, "sparse_func": [1034, 1040], "incr_mean_variance_axi": [1034, 1040], "7049": 1034, "7152": 1034, "load_boston": [1034, 1036, 1041], "7154": 1034, "manvendra": [1034, 1035], "singh": [1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "5540": 1034, "7248": 1034, "6764": 1034, "wenhua": 1034, "6817": 1034, "6902": 1034, "leonieborn": 1034, "5141": 1034, "4995": 1034, "5012": 1034, "_transform_select": 1034, "7194": 1034, "caio": [1034, 1036, 1038], "oliveira": [1034, 1036, 1038, 1042], "6182": 1034, "6121": 1034, "6472": 1034, "7350": 1034, "russel": [1034, 1035], "smith": [1034, 1035, 1036, 1037, 1038, 1040], "7159": 1034, "yichuan": [1034, 1035], "5460": 1034, "document_clust": 1034, "7353": 1034, "_search": 1034, "_check_param_grid": 1034, "xrang": 1034, "7323": 1034, "viacheslav": 1034, "kovalevskyi": 1034, "7101": 1034, "residual_metr": 1034, "6651": 1034, "reorgan": 1034, "7187": 1034, "7260": 1034, "sebasti\u00e1n": 1034, "vanrel": 1034, "leaveplabelsout": 1034, "6660": 1034, "unprefix": 1034, "7261": 1034, "aditya": [1034, 1036, 1037, 1038, 1042, 1043], "joshi": [1034, 1036, 1042, 1045], "loginov": 1034, "minyushkin": 1034, "rudi": 1034, "abadi": [1034, 1035], "saint": 1034, "alexfield": 1034, "alvaro": [1034, 1036], "ulloa": 1034, "alyssaq": 1034, "amlan": 1034, "kar": 1034, "giessel": 1034, "jackson": [1034, 1035, 1037], "murrai": [1034, 1035], "arafat": 1034, "archit": 1034, "asnt": 1034, "b0noi": 1034, "behzad": 1034, "tabibian": 1034, "kratzwald": 1034, "bhargav": 1034, "mangipudi": 1034, "blakeflei": 1034, "brandon": [1034, 1035, 1042, 1043], "carter": [1034, 1035, 1043], "camilo": 1034, "lamu": 1034, "carol": [1034, 1035], "Willing": [1034, 1035], "cass": 1034, "ceshin": 1034, "truong": 1034, "codevig": 1034, "shiebler": 1034, "hnyk": [1034, 1035], "elli": [1034, 1037], "nicholson": [1034, 1035, 1036], "thaler": 1034, "warshaw": 1034, "lasagna": 1034, "deborah": [1034, 1035], "definitelyuncertain": 1034, "didi": [1034, 1035, 1036, 1037], "zev": [1034, 1035, 1036, 1037], "dsquareindia": 1034, "edwinensa": 1034, "elia": 1034, "kuth": 1034, "fabio": 1034, "ticconi": 1034, "fisach": 1034, "donovan": 1034, "ghg": 1034, "giovanni": [1034, 1036], "cherubin": 1034, "lanzani": 1034, "glenn": 1034, "qian": [1034, 1039], "mohr": 1034, "govin": 1034, "vatsan": 1034, "reda": 1034, "gustav": 1034, "m\u00f6rtberg": 1034, "halwai": 1034, "harizo": [1034, 1035], "rajaona": [1034, 1035], "hashcode55": 1034, "hdmetor": 1034, "hobson": 1034, "lane": 1034, "bown": 1034, "igor": [1034, 1035, 1041], "andriushchenko": [1034, 1035], "inki": 1034, "hwang": 1034, "isaac": [1034, 1035, 1037, 1038, 1045], "sijaranamu": 1034, "iver": 1034, "jordal": 1034, "jackmartin": 1034, "fiedler": 1034, "routlei": 1034, "zike": 1034, "janna": 1034, "brettingen": 1034, "jarfa": 1034, "laska": 1034, "jblackburn": 1034, "levesqu": 1034, "hintz": 1034, "jeremynixon": 1034, "jeroen": 1034, "jessica": 1034, "jill": 1034, "j\u00eann": 1034, "vie": 1034, "jia": 1034, "jiyuan": 1034, "johannah": 1034, "boersma": 1034, "moeller": 1034, "striebel": [1034, 1035], "joncral": 1034, "jordi": 1034, "munoz": [1034, 1040], "jrfiedler": 1034, "juliankahnert": 1034, "juliathebrav": 1034, "kaichogami": 1034, "lyon": [1034, 1035], "kingjr": 1034, "kjell": 1034, "krishna": [1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043], "kalyan": 1034, "krishnakalyan3": 1034, "kvle": 1034, "putnam": 1034, "ldavid": 1034, "leig": 1034, "leightonzhang": 1034, "leland": [1034, 1035, 1036, 1038, 1039, 1044], "liang": [1034, 1039, 1040], "hsieh": 1034, "lizsz": 1034, "l\u00e9oni": 1034, "born": 1034, "maniteja": [1034, 1035, 1036], "nandana": [1034, 1035, 1036], "marco": [1034, 1036, 1037, 1041, 1042, 1043], "bao": [1034, 1042], "szepieniec": 1034, "madsen": [1034, 1036], "massil": 1034, "matheu": 1034, "duboi": [1034, 1036], "moroz": 1034, "scherer": 1034, "michiaki": 1034, "ariga": 1034, "moussa": 1034, "taifi": 1034, "mrandrewandrad": 1034, "mridul": 1034, "seth": 1034, "nadya": 1034, "naoya": [1034, 1035, 1036, 1037], "kanai": [1034, 1035, 1036], "nickledav": 1034, "nico": [1034, 1041], "ningchi": 1034, "nlathia": 1034, "okbalefthand": 1034, "okhlopkov": [1034, 1035], "pano": 1034, "lourida": 1034, "strickland": 1034, "perrin": 1034, "letelli": 1034, "pestrickland": 1034, "practicalswift": 1034, "qimu": 1034, "zheng": [1034, 1035, 1040], "rachit": [1034, 1040, 1043], "kansal": 1034, "ramana": [1034, 1035], "randi": 1034, "olson": 1034, "lutz": [1034, 1038, 1041], "schucker": 1034, "jain": [1034, 1035, 1036, 1040, 1042, 1043], "ruifeng": [1034, 1035, 1040], "r\u00e9my": 1034, "l\u00e9one": 1034, "saihttam": 1034, "saiw": 1034, "yeung": 1034, "shleifer": [1034, 1035], "sartaj": 1034, "sasank": 1034, "chilamkurthi": 1034, "seal": 1034, "shagun": 1034, "sodhani": 1034, "shanmuga": 1034, "shashank": [1034, 1040], "shekhar": 1034, "shawpan": 1034, "shengxiduan": 1034, "shota": 1034, "shuckle16": 1034, "smedbergm": 1034, "srvanrel": 1034, "leriqu": [1034, 1036], "taranjeet": 1034, "themrmax": [1034, 1035], "hallock": 1034, "moreau": [1034, 1035, 1036, 1037, 1038], "tkammi": 1034, "toastedcornflak": [1034, 1035], "tomdlt": 1034, "toshihiro": [1034, 1035, 1041], "kamishima": [1034, 1035], "tracer0tong": 1034, "hauck": 1034, "vo": [1034, 1042], "varun": [1034, 1035, 1036, 1042, 1043], "jewalikar": 1034, "vikram": [1034, 1043, 1044], "villu": 1034, "ruusmann": 1034, "walter": 1034, "waterponei": [1034, 1035], "wenjian": 1034, "welch": 1034, "wyseguy7": 1034, "xyguo": [1034, 1036], "yanlend": 1034, "yen": [1034, 1035], "yenchenlin": 1034, "yoav": 1034, "zivori": 1034, "10723": [1035, 1036], "9623": 1035, "undocu": 1035, "deleteri": 1035, "9677": 1035, "ashutosh": [1035, 1036, 1038, 1040], "correlation_model": 1035, "regression_model": 1035, "belatedli": 1035, "9717": 1035, "9693": 1035, "steingold": [1035, 1036], "9711": 1035, "goncalo": [1035, 1036], "rodrigu": [1035, 1036, 1041], "9641": 1035, "bourbeau": [1035, 1036, 1037], "9865": 1035, "sachin": [1035, 1036, 1042], "kelkar": [1035, 1036, 1038], "9922": 1035, "charli": [1035, 1036, 1044], "brummitt": [1035, 1036], "9945": 1035, "9830": 1035, "9600": 1035, "kerimov": [1035, 1036], "9593": 1035, "reiichiro": [1035, 1036], "nakano": [1035, 1036], "9604": 1035, "interim": 1035, "9558": 1035, "9847": 1035, "joan": [1035, 1036, 1037, 1038], "massich": [1035, 1036, 1037, 1038], "oli": 1035, "blum": 1035, "9697": 1035, "9750": 1035, "9788": 1035, "9815": 1035, "9802": 1035, "vrishank": [1035, 1036], "bhardwaj": [1035, 1036], "nagarjuna": [1035, 1036], "nathaniel": [1035, 1036, 1038], "diegodlh": [1035, 1036], "jkleint": [1035, 1036], "oliblum90": [1035, 1036], "pasbi": [1035, 1036], "lawson": [1035, 1036, 1037], "nielsenmarkus11": [1035, 1036], "excit": 1035, "cautiou": 1035, "min_impurity_split": 1035, "7823": [1035, 1036], "8446": 1035, "5279": 1035, "8363": 1035, "5295": 1035, "7388": 1035, "userguid": 1035, "7655": 1035, "karan": [1035, 1036, 1037], "desai": [1035, 1037, 1040, 1041, 1043, 1044], "7739": 1035, "gasquez": 1035, "8120": 1035, "neeraj": 1035, "gangwar": 1035, "7548": 1035, "9206": 1035, "7441": 1035, "6101": 1035, "8698": 1035, "7794": 1035, "herilalaina": [1035, 1036, 1038], "rakotoarison": [1035, 1036, 1038], "5036": 1035, "4939": 1035, "esuli": [1035, 1040], "n_skips_": 1035, "7914": 1035, "horrel": 1035, "8591": 1035, "hadrien": [1035, 1038], "7838": 1035, "8835": 1035, "8061": 1035, "cordier": 1035, "6288": 1035, "9145": 1035, "reddi": [1035, 1036, 1037, 1042], "chinthala": 1035, "7721": 1035, "crall": [1035, 1041], "7685": 1035, "tommi": [1035, 1036, 1037], "l\u00f6fstedt": 1035, "9277": 1035, "hongkahjun": 1035, "7089": 1035, "randomized_svd_low_rank": 1035, "9067": 1035, "6181": 1035, "wendling": 1035, "8065": 1035, "lejeun": 1035, "7567": 1035, "jay": 1035, "doepk": 1035, "7573": 1035, "romain": [1035, 1040], "brault": 1035, "5229": 1035, "7990": 1035, "8586": 1035, "7723": 1035, "8028": 1035, "booth": 1035, "8005": 1035, "7863": 1035, "7506": 1035, "5991": 1035, "8845": 1035, "8053": 1035, "8282": 1035, "8117": 1035, "9259": 1035, "8094": 1035, "8335": 1035, "poughon": 1035, "7880": 1035, "karnofski": 1035, "935": 1035, "8931": 1035, "attractador": [1035, 1036], "8002": 1035, "8549": 1035, "zerodivisionerror": [1035, 1038, 1044], "7501": 1035, "dominik": [1035, 1044], "krzeminski": 1035, "7970": 1035, "8006": 1035, "p\u00f6lsterl": [1035, 1038, 1041], "8936": 1035, "8672": 1035, "mike": 1035, "benfield": 1035, "broke": 1035, "8068": 1035, "5732": 1035, "ytrue": 1035, "ypred": 1035, "8087": 1035, "7983": 1035, "8512": 1035, "8251": 1035, "aivision2020": 1035, "5814": 1035, "7849": 1035, "jair": 1035, "montoya": 1035, "martinez": 1035, "randomizedlasso": 1035, "5359": 1035, "9302": 1035, "8160": 1035, "8224": 1035, "gedeck": 1035, "vathsala": [1035, 1036, 1037, 1038], "achar": [1035, 1036, 1037, 1038], "9022": 1035, "mehmet": [1035, 1041], "basbug": 1035, "9024": 1035, "8973": 1035, "paulo": [1035, 1041, 1043], "haddad": 1035, "unmeaning": 1035, "6573": 1035, "quazi": [1035, 1036], "marufur": 1035, "rahman": [1035, 1036, 1040], "baselabelpropag": 1035, "9239": 1035, "andr": [1035, 1042], "ambrosio": 1035, "boechat": 1035, "early_exager": 1035, "assertionerror": 1035, "8992": 1035, "7954": 1035, "foreman": 1035, "9105": 1035, "9108": 1035, "8306": 1035, "7872": 1035, "_c_step": 1035, "3367": 1035, "steward": 1035, "8768": 1035, "detomaso": 1035, "6507": 1035, "jayzed82": 1035, "6126": 1035, "7814": 1035, "7702": 1035, "9219": 1035, "7771": 1035, "ang": 1035, "randomizedlogisticregress": 1035, "8259": 1035, "mandatorili": 1035, "7565": 1035, "8181": 1035, "basesearchcv": [1035, 1036], "8344": 1035, "eriksson": 1035, "7661": 1035, "8295": 1035, "batula": 1035, "dylan": [1035, 1038], "werner": [1035, 1040], "meier": 1035, "7365": 1035, "aleksandr": 1035, "sandrovskii": 1035, "5697": 1035, "stijn": 1035, "tonk": 1035, "6250": 1035, "8093": 1035, "bull": 1035, "9507": 1035, "7356": 1035, "dingwal": 1035, "_check_target": 1035, "8377": 1035, "5211": 1035, "rhinehart": 1035, "8159": 1035, "8198": 1035, "fetch_": 1035, "7944": 1035, "7825": 1035, "kathleen": 1035, "7376": 1035, "7331": 1035, "yangarbit": 1035, "__getstate__": [1035, 1043], "obstruct": 1035, "8316": 1035, "holger": 1035, "8010": 1035, "7986": 1035, "najera": 1035, "9289": 1035, "makedir": 1035, "9284": 1035, "sebastin": [1035, 1036], "alert": 1035, "lgtm": 1035, "9278": 1035, "heli": 1035, "8449": 1035, "9078": 1035, "purport": 1035, "sergul": [1035, 1036, 1039], "aydor": [1035, 1036, 1039], "8922": 1035, "8137": 1035, "8139": 1035, "8995": 1035, "2879": 1035, "7459": 1035, "7812": 1035, "9100": 1035, "8481": 1035, "8174": 1035, "tahar": 1035, "zanouda": 1035, "8854": 1035, "8874": 1035, "7998": 1035, "jiacheng": 1035, "argpartit": 1035, "frombuffer_empti": 1035, "in1d": 1035, "rankdata": 1035, "safe_copi": 1035, "eig": 1035, "fast_dot": 1035, "pinvh": [1035, 1037], "graph_laplacian": 1035, "sparsetool": 1035, "connected_compon": 1035, "check_decision_proba_consist": 1035, "shubham": [1035, 1038], "9019": 1035, "baseensembl": [1035, 1038], "7464": 1035, "rishikesh": 1035, "taehoon": [1035, 1036], "aashil": 1035, "balakumaran": [1035, 1036], "manoharan": [1035, 1036], "petrov": [1035, 1036, 1044], "minghui": [1035, 1036], "jc": [1035, 1036], "alexandercbooth": 1035, "chkoar": 1035, "aarshai": [1035, 1036], "gilliam": 1035, "subramanyam": 1035, "clement": [1035, 1036, 1040], "joudet": [1035, 1036], "robl": 1035, "kati": 1035, "luangkot": 1035, "lacchia": 1035, "akshay0724": 1035, "omtcyfz": 1035, "rickiepark": 1035, "jbdelafoss": 1035, "vivek": [1035, 1036, 1037], "elliott": 1035, "ldirer": 1035, "sid": 1035, "kapur": 1035, "midina": 1035, "mikebenfield": 1035, "sourav": [1035, 1038], "aseem": 1035, "bansal": 1035, "aishwaryark": 1035, "howel": 1035, "dokato": 1035, "kathi": [1035, 1038], "ferria": 1035, "nikita": [1035, 1036, 1038, 1041, 1042, 1043], "basil": 1035, "beirouti": 1035, "possa": 1035, "bednar": 1035, "janin": 1035, "harper": 1035, "artsiom": 1035, "ligo": 1035, "rahn": [1035, 1038], "seanpwilliam": 1035, "julian": [1035, 1036], "kuhlmann": [1035, 1036], "aubert": 1035, "j\u00f6rn": 1035, "hee": [1035, 1038], "shivamgargsya": [1035, 1039, 1041], "kat": 1035, "hempstalk": 1035, "kaushik": [1035, 1042, 1043, 1044], "lakshmikanth": 1035, "kennedi": [1035, 1038], "yap": 1035, "kiril": [1035, 1036, 1038, 1040], "bobyrev": 1035, "imbert": [1035, 1037, 1040, 1042], "lera": 1035, "douillard": 1035, "mainak": 1035, "tobychees": [1035, 1036], "manraj": 1035, "marc": [1035, 1037, 1038, 1044], "meketon": 1035, "marcofalk": 1035, "gilch": 1035, "mehul": 1035, "ahuja": [1035, 1042, 1043], "goetz": [1035, 1036], "dezub": 1035, "baumgartn": 1035, "vibrantabhi19": 1035, "golubin": 1035, "milen": 1035, "paskov": 1035, "antonin": 1035, "carett": 1035, "morikko": 1035, "mrmjauh": 1035, "nalepa": 1035, "namiya": 1035, "narinek": [1035, 1036], "angu": [1035, 1036, 1042], "nicol": 1035, "vavrova": 1035, "nitish": 1035, "pandei": [1035, 1040], "daniil": 1035, "olegovich": 1035, "craze": 1035, "om": 1035, "parmind": 1035, "patrick": [1035, 1036, 1041, 1042, 1045], "carlson": 1035, "ganssl": 1035, "lorek": 1035, "pete": [1035, 1039, 1040], "bachant": 1035, "csizsek": 1035, "jong": 1035, "puneet": 1035, "mathur": [1035, 1037, 1038, 1043, 1044], "quentin": [1035, 1036, 1037, 1044], "hibon": 1035, "1kastner": 1035, "rameshwar": [1035, 1036], "bhaskaran": [1035, 1036], "rebecca": 1035, "bilbro": 1035, "remi": 1035, "rampin": 1035, "pratik": 1035, "agarw": [1035, 1036, 1038], "sailesh": [1035, 1036], "choyal": [1035, 1036], "samson": 1035, "samu\u00ebl": 1035, "weber": 1035, "sarah": [1035, 1037, 1040], "abhyudai": 1035, "sharan": [1035, 1036], "yalburgi": [1035, 1036], "willduan": 1035, "siddharth": [1035, 1039], "almer": 1035, "theofilo": 1035, "papapanagiot": 1035, "alison": 1035, "boucher": 1035, "folkman": 1035, "jung": [1035, 1039, 1043], "shenoi": 1035, "vilhelm": [1035, 1036], "ehrenheim": [1035, 1036], "alan": [1035, 1036, 1039, 1041, 1042], "yee": [1035, 1036], "warut": [1035, 1036], "vijitbenjaronk": [1035, 1036], "yuichi": 1035, "fujikawa": 1035, "affanv14": 1035, "andreh7": 1035, "bradi": 1035, "salz": 1035, "campustrampu": 1035, "agamemnon": [1035, 1036, 1037, 1038, 1040, 1041], "krasouli": [1035, 1036, 1037, 1038, 1040, 1041], "ditenberg": 1035, "elena": 1035, "sharova": 1035, "filipj8": [1035, 1036], "fukatani": 1035, "guiniol": 1035, "guoci": 1035, "hakaa1": [1035, 1036], "xhy": 1035, "jakirkham": [1035, 1036, 1037, 1043, 1044], "jaroslaw": 1035, "jeroko": 1035, "jmontoyam": 1035, "josephsalmon": [1035, 1036, 1037], "jschendel": [1035, 1036], "leereev": 1035, "hahn": [1035, 1036], "mathurinm": [1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044], "mehak": 1035, "sachdeva": 1035, "mlewis1729": 1035, "mlliou112": 1035, "mthorrel": [1035, 1038], "ndingwal": 1035, "nuff": 1035, "plagre": 1035, "pldtc325": 1035, "breno": [1035, 1036], "olsen": 1035, "alfano": 1035, "burn": [1035, 1036], "polmauri": 1035, "charlton": 1035, "austin": 1035, "chayant": 1035, "t15h": 1035, "chinmaya": 1035, "pancholi": 1035, "danielsen": 1035, "chung": [1035, 1036], "pravarmahajan": [1035, 1036], "dariu": [1035, 1036], "morawiec": [1035, 1036], "haberth\u00fcr": 1035, "heryanto": 1035, "kirkbi": [1035, 1036], "rashchedrin": 1035, "gertrud": 1035, "devansh": [1035, 1036], "dickson": 1035, "baxlei": 1035, "don86": 1035, "klarup": 1035, "elizabeth": [1035, 1037, 1040], "ferriss": 1035, "ellen": 1035, "egli": 1035, "chieh": [1035, 1036], "chou": [1035, 1036], "grzegorz": [1035, 1038], "szpak": [1035, 1038], "zxcvbniu": 1035, "icyblad": 1035, "ilya": 1035, "laughlin": 1035, "iv\u00e1n": [1035, 1041], "vall\u00e9": 1035, "aur\u00e9lien": [1035, 1036, 1037, 1041, 1042], "bellet": [1035, 1036, 1037], "mahapatra": 1035, "bundl": [1036, 1037], "indexerror": [1036, 1037], "11756": [1036, 1037], "14237": [1036, 1037], "schuder": [1036, 1037, 1038], "13903": [1036, 1037], "13124": [1036, 1037], "13772": [1036, 1037], "vya": [1036, 1037, 1038], "12949": 1036, "prabakaran": [1036, 1037, 1040, 1042, 1043], "kumaresshan": [1036, 1037, 1040], "12946": 1036, "tallott": 1036, "13276": 1036, "13005": 1036, "13312": 1036, "11295": 1036, "vacaliuc": [1036, 1037], "13046": 1036, "12360": 1036, "aakanksha": 1036, "13134": 1036, "sandro": [1036, 1043], "casagrand": [1036, 1037], "12881": 1036, "13165": 1036, "13221": 1036, "bertrandhaut": [1036, 1037], "raghunathan": [1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045], "dowon": [1036, 1037], "aria": [1036, 1037, 1043], "fibins": [1036, 1037], "finn": [1036, 1037], "shea": [1036, 1037], "joaak": [1036, 1037], "m\u00e9hault": [1036, 1037], "kms15": [1036, 1037], "kossori": [1036, 1037], "aruku": [1036, 1037], "lakshya": [1036, 1037, 1038], "ib\u00e1\u00f1ez": [1036, 1037, 1040], "gorelli": [1036, 1037, 1041, 1043], "marcogorelli": [1036, 1037], "mferrari3": [1036, 1037], "micka\u00ebl": [1036, 1037], "schoentgen": [1036, 1037], "pavlo": [1036, 1037], "kalli": [1036, 1037], "glaser": [1036, 1037], "pierretallott": [1036, 1037, 1038], "kapoor": [1036, 1037], "sandrocasagrand": [1036, 1037], "tashai": [1036, 1037], "vishaal": [1036, 1037], "zhuyi": [1036, 1037], "ziji": [1036, 1037], "zj": [1036, 1037], "poh": [1036, 1037], "12704": 1036, "12701": 1036, "12685": 1036, "12699": 1036, "adanhawth": [1036, 1037], "stine": [1036, 1037], "feda": [1036, 1037], "curic": [1036, 1037], "jeremiedbb": [1036, 1037, 1038], "katrin": [1036, 1037], "leinweb": [1036, 1037], "muhammad": [1036, 1037, 1041], "hassaan": [1036, 1037], "rafiqu": [1036, 1037], "paczuski": [1036, 1037], "waterburi": [1036, 1037], "shivam": [1036, 1037, 1038], "kotwalia": [1036, 1037], "12159": 1036, "12105": 1036, "11912": 1036, "12304": 1036, "12339": 1036, "12246": 1036, "10811": 1036, "feldbauer": [1036, 1037, 1038, 1039, 1042], "12441": 1036, "12517": 1036, "12234": 1036, "12165": 1036, "12388": 1036, "connor": [1036, 1041], "tann": [1036, 1041], "12393": 1036, "12122": 1036, "sharedmem": 1036, "12518": 1036, "12481": 1036, "12612": 1036, "12211": 1036, "lisa": [1036, 1037, 1039, 1040, 1042, 1043], "hannel": [1036, 1037], "melissa": 1036, "ferrari": 1036, "12451": 1036, "12171": 1036, "12365": 1036, "_encod": 1036, "12514": 1036, "12522": 1036, "12471": 1036, "marzinotto": [1036, 1037], "12317": 1036, "12338": 1036, "bauk": [1036, 1037], "12625": 1036, "sklearn_site_joblib": 1036, "12350": 1036, "12467": 1036, "unvendor": 1036, "12345": 1036, "navarret": [1036, 1037, 1038], "benjastudio": [1036, 1037], "cheuk": [1036, 1037], "connossor": [1036, 1037], "levinson": [1036, 1037], "kieker": [1036, 1037], "kataev": [1036, 1037], "dillon": [1036, 1037, 1038], "gardner": [1036, 1037], "vukolov": [1036, 1037], "caselli": [1036, 1037], "gauravahlawat": [1036, 1037], "gustavo": [1036, 1037, 1042], "haroldfox": [1036, 1037], "jacklangerman": [1036, 1037], "jacopo": [1036, 1037], "notarstefano": [1036, 1037], "janvanrijn": [1036, 1037], "jdethuren": [1036, 1037], "koen": [1036, 1037], "kushal": [1036, 1037], "chauhan": [1036, 1037, 1043, 1044], "jie": [1036, 1037, 1040], "lili": [1036, 1037], "xiong": [1036, 1037, 1042], "liam": [1036, 1037], "melsyt": [1036, 1037], "nichola": [1036, 1037, 1039], "shebanov": [1036, 1037], "oleksandr": [1036, 1037, 1038, 1039, 1042], "pavlyk": [1036, 1037, 1038, 1039], "hausamann": [1036, 1037], "pulkit": [1036, 1037, 1039], "maloo": [1036, 1037], "batista": [1036, 1037, 1041], "radostin": [1036, 1037], "stoyanov": [1036, 1037], "ramil": [1036, 1037], "nugmanov": [1036, 1037], "rebekah": [1036, 1037, 1038], "roopam": [1036, 1037], "tiernei": [1036, 1037, 1038], "sylvainlan": [1036, 1037, 1038, 1039, 1040], "takingitcasu": [1036, 1037], "tulio": [1036, 1037], "xing": [1036, 1037], "zach": [1036, 1037, 1042], "mountain": 1036, "sorri": 1036, "basemultilayerperceptron": [1036, 1038], "11924": 1036, "macbook": 1036, "9354": 1036, "9372": 1036, "astel": 1036, "10933": 1036, "hansen": 1036, "10471": 1036, "gaurav": [1036, 1037, 1038, 1039, 1040, 1042], "dhingra": [1036, 1037, 1040], "8003": 1036, "jo\u00ebl": 1036, "billaud": 1036, "10059": 1036, "braun": 1036, "9612": 1036, "jonatan": 1036, "samoocha": 1036, "8129": 1036, "margeta": 1036, "k_means_elkan": 1036, "11353": 1036, "11901": 1036, "9875": 1036, "9012": 1036, "11315": 1036, "9041": 1036, "9858": 1036, "artiem": 1036, "krinitsyn": 1036, "9908": 1036, "8617": 1036, "maskani": [1036, 1038, 1039, 1040], "filali": 1036, "konstantino": 1036, "katriopla": 1036, "10774": 1036, "catalfo": 1036, "10795": 1036, "takeshi": [1036, 1041, 1042, 1043], "yoshizawa": 1036, "11082": 1036, "sadhana": 1036, "srinivasan": [1036, 1039], "9731": 1036, "10045": 1036, "fetch_mldata": 1036, "11466": 1036, "6374": 1036, "normalize_compon": [1036, 1038], "11585": 1036, "ivan": [1036, 1037, 1040, 1043], "panico": [1036, 1040], "11420": 1036, "6452": 1036, "walli": 1036, "gauz": 1036, "9492": 1036, "8484": 1036, "9886": 1036, "underflow": [1036, 1041], "10142": 1036, "5956": 1036, "_class_mean": 1036, "_class_cov": 1036, "10898": 1036, "nanxin": 1036, "9832": 1036, "11951": 1036, "r\u00fcdiger": [1036, 1037, 1039], "busch": [1036, 1037, 1039], "9707": 1036, "wan": 1036, "7071": 1036, "9157": 1036, "11176": 1036, "forsyth": 1036, "11542": 1036, "anna": 1036, "9524": 1036, "9723": 1036, "10908": 1036, "10899": 1036, "melderi": 1036, "10101": 1036, "10\u2079": 1036, "9147": 1036, "clae": 1036, "fredrik": 1036, "mannbi": 1036, "10441": 1036, "mayur": 1036, "kulkarni": 1036, "6689": 1036, "nihar": 1036, "sheth": 1036, "11293": 1036, "9656": 1036, "greenhal": 1036, "n_features_to_comput": 1036, "9222": 1036, "hoh": 1036, "9234": 1036, "andrewww": 1036, "8075": 1036, "11211": 1036, "9484": 1036, "dalla": 1036, "card": 1036, "9043": 1036, "10112": 1036, "logistic_regression_path": [1036, 1037], "11724": 1036, "9939": 1036, "westov": 1036, "10998": 1036, "vazelh": [1036, 1037, 1038], "10071": 1036, "10153": 1036, "d\u00f6pfert": 1036, "10095": 1036, "cv_valu": 1036, "10297": 1036, "mabel": [1036, 1040], "10581": 1036, "yacin": 1036, "mazari": 1036, "10687": 1036, "10836": 1036, "aishwarya": 1036, "10397": 1036, "10992": 1036, "11327": 1036, "11905": 1036, "9837": 1036, "10593": 1036, "10610": 1036, "8554": 1036, "9775": 1036, "10827": 1036, "osa": 1036, "8066": 1036, "10587": 1036, "3840": 1036, "niederb\u00fchl": 1036, "9521": 1036, "11124": 1036, "arya": 1036, "11160": 1036, "barkhorn": 1036, "11679": 1036, "pacha": 1036, "10845": 1036, "perez": [1036, 1043], "parra": 1036, "toledano": 1036, "10999": 1036, "memoryerror": [1036, 1040], "11135": 1036, "10377": 1036, "9786": 1036, "10093": 1036, "alexryndin": 1036, "9772": 1036, "9515": 1036, "liddel": 1036, "manh": 1036, "dao": 1036, "9851": 1036, "10280": 1036, "10336": 1036, "haoran": 1036, "basemixtur": [1036, 1037], "10740": 1036, "10869": 1036, "g\u00e9ron": 1036, "9686": 1036, "11310": 1036, "_fit_and_scor": 1036, "11576": 1036, "ronsin": [1036, 1037, 1045], "_run_search": 1036, "9599": 1036, "11006": 1036, "11557": 1036, "boucaud": 1036, "iid": 1036, "9085": 1036, "10677": 1036, "zhdanovich": 1036, "10982": 1036, "juliet": 1036, "lawton": 1036, "10928": 1036, "solutu": 1036, "immensu": 1036, "9257": 1036, "8190": 1036, "alcorn": 1036, "9681": 1036, "mottl": [1036, 1037], "10005": 1036, "10346": 1036, "tobia": [1036, 1041, 1043], "10887": 1036, "11136": 1036, "4394": 1036, "9579": 1036, "kober": 1036, "9655": 1036, "bjerr": 1036, "11556": 1036, "11774": 1036, "9456": 1036, "unexpectedli": 1036, "9304": 1036, "11144": [1036, 1037], "9151": 1036, "10521": 1036, "7668": 1036, "9647": 1036, "10195": 1036, "10192": 1036, "11272": 1036, "11467": 1036, "11505": 1036, "giusepp": [1036, 1037], "costa": [1036, 1041], "10210": 1036, "11520": 1036, "11011": 1036, "11005": 1036, "11308": 1036, "11206": 1036, "11306": 1036, "10437": 1036, "lucija": 1036, "gregov": 1036, "10452": 1036, "10181": 1036, "nirvan": [1036, 1040], "anjirbag": 1036, "9399": 1036, "10913": 1036, "rodrigo": 1036, "agundez": 1036, "10458": 1036, "9816": 1036, "newei": 1036, "11042": 1036, "11235": 1036, "active_features_": 1036, "feature_indices_": 1036, "n_values_": 1036, "9726": 1036, "10829": 1036, "gilberto": 1036, "olimpio": 1036, "10655": 1036, "python2": 1036, "10412": 1036, "jiongyan": 1036, "9497": 1036, "8361": 1036, "neo": 1036, "_criterion": 1036, "classificationcriterion": 1036, "regressioncriterion": 1036, "10325": 1036, "camil": [1036, 1044], "stap": 1036, "basedecisiontre": [1036, 1037, 1040], "10536": 1036, "ohayon": [1036, 1037, 1044], "11464": 1036, "stott": 1036, "10663": 1036, "10229": 1036, "11553": 1036, "10881": 1036, "sevin": 1036, "ridge_regress": [1036, 1037, 1043], "10306": 1036, "siebert": 1036, "11741": 1036, "11166": 1036, "pypy3": 1036, "v5": 1036, "11010": 1036, "lami": 1036, "11596": 1036, "marcu": 1036, "voss": 1036, "9569": 1036, "12462": 1036, "zachariah": 1036, "10474": 1036, "10500": 1036, "9701": 1036, "9378": 1036, "check_set_param": 1036, "7738": 1036, "alvin": 1036, "chiang": 1036, "8102": 1036, "ankita": 1036, "sinha": 1036, "check_methods_subset_invari": [1036, 1042], "10428": 1036, "check_sample_weights_pandas_seri": 1036, "11558": 1036, "211217613": 1036, "absolutelynowarranti": 1036, "richi": 1036, "halford": [1036, 1043, 1044], "adelr": 1036, "adityadaflapurkar": 1036, "aidan": 1036, "fitzgerald": 1036, "aishgrt1": 1036, "akash": 1036, "shivram": 1036, "lenail": [1036, 1040], "egg": 1036, "diaz": 1036, "amanda": [1036, 1039, 1040, 1041, 1042], "aniruddha": 1036, "annaayzenshtat": 1036, "antonio": [1036, 1038], "quinonez": 1036, "anubhav": 1036, "marwaha": 1036, "arik": 1036, "pamnani": 1036, "ozga": 1036, "arunava": 1036, "geron": [1036, 1041, 1042], "ayush": [1036, 1041], "bangda": 1036, "bastian": 1036, "venthur": 1036, "benn": 1036, "koonc": 1036, "cclauss": 1036, "chadi": 1036, "kamar": 1036, "holdgraf": 1036, "hirsch": 1036, "hogan": 1036, "cnx": 1036, "cwitt": 1036, "ferreira": [1036, 1041, 1042], "gomez": [1036, 1043], "klevebr": 1036, "shwed": 1036, "mohn": [1036, 1040], "danil": 1036, "baibak": [1036, 1037], "beach": 1036, "pickup": 1036, "derek": 1036, "niederhut": [1036, 1038], "dilutedsauc": 1036, "dlovel": 1036, "dor": 1036, "dougla": 1036, "duhaim": 1036, "tuzova": 1036, "eunji": 1036, "farahsae": 1036, "raimundo": 1036, "fenx": 1036, "frankhui": 1036, "franz": 1036, "wompner": 1036, "freija": 1036, "descamp": 1036, "frsi": 1036, "calvo": [1036, 1037], "georgi": [1036, 1039], "peev": [1036, 1039], "gkevinyen5418": 1036, "vermeil": 1036, "hongh": 1036, "hossein": [1036, 1037, 1038], "pourbozorg": [1036, 1037, 1038], "hristo": [1036, 1043], "hunan": 1036, "rostomyan": 1036, "iampat": 1036, "jaewon": 1036, "malcolm": 1036, "jami": 1036, "wolosonovich": 1036, "jeb": 1036, "bearer": 1036, "jinkun": 1036, "jjabl": 1036, "johnstott": 1036, "jotasi": 1036, "julietcl": 1036, "shenk": 1036, "karl": 1036, "kasper": 1036, "primdal": 1036, "lauritzen": 1036, "ksemb": 1036, "kuai": [1036, 1037], "kyeongpil": 1036, "kang": [1036, 1038], "kye": 1036, "kyledrogo": 1036, "l\u00e9o": 1036, "liutong": 1036, "lizao": 1036, "lkjcalc": 1036, "louib": [1036, 1037], "luciano": [1036, 1043], "luke": 1036, "persola": 1036, "markiwanchyshyn": 1036, "marsgui": 1036, "gubri": [1036, 1037], "koko": [1036, 1042, 1043], "copeland": [1036, 1037], "meghann": [1036, 1038], "minh": 1036, "jamaoui": [1036, 1037, 1040], "mohammad": [1036, 1037], "shahebaz": 1036, "muayyad": 1036, "alsadi": 1036, "nabarun": 1036, "pal": [1036, 1042], "narendran": 1036, "santhanam": 1036, "suh": 1036, "eng": 1036, "av": 1036, "nicolau": 1036, "werneck": 1036, "titov": [1036, 1038, 1041, 1042], "nilesh": 1036, "kevlani": 1036, "notmatthancock": [1036, 1038], "nzw": 1036, "oren": 1036, "milman": 1036, "osaid": 1036, "rehman": 1036, "nasir": 1036, "fernand": [1036, 1042, 1043], "olden": 1036, "pierreablin": 1036, "pietruh": 1036, "pinaki": 1036, "nath": 1036, "chowdhuri": [1036, 1042], "piotr": [1036, 1037], "szyma\u0144ski": [1036, 1037], "pradeep": [1036, 1037], "raamana": [1036, 1037], "pravar": 1036, "mahajan": [1036, 1038], "qingi": 1036, "rajendra": 1036, "arora": [1036, 1043], "rankylau": 1036, "kosobrodov": 1036, "rragundez": 1036, "sagnik": 1036, "bhattacharya": 1036, "radhakrishnan": 1036, "saqib": 1036, "nizam": 1036, "shamsi": 1036, "satish": 1036, "gigant": [1036, 1038, 1043, 1044], "flennerhag": 1036, "sebastien": 1036, "shalil": 1036, "awalei": 1036, "shangwu": [1036, 1037], "sharad": 1036, "vijalapuram": 1036, "shenhanc78": 1036, "rastogi": 1036, "siftikha": 1036, "sinclert": 1036, "p\u00e9rez": 1036, "solutusimmensu": 1036, "somya": 1036, "anand": [1036, 1040], "srajan": 1036, "paliw": 1036, "sriharsha": [1036, 1037], "hatwar": [1036, 1037], "mcdowel": 1036, "syonekura": 1036, "takanori": 1036, "hayashi": 1036, "tarcusx": 1036, "theriley106": 1036, "heavei": 1036, "augspurg": [1036, 1038], "trishnendu": 1036, "ghorai": 1036, "twosigmajab": 1036, "umar": [1036, 1037], "farouk": [1036, 1037], "urvang": [1036, 1038], "patel": [1036, 1038, 1039, 1040, 1042], "vadim": [1036, 1040, 1041], "markovtsev": 1036, "vinit": 1036, "vinod": 1036, "viraj": 1036, "mavani": 1036, "navkal": 1036, "vqean3": [1036, 1037], "vufg": 1036, "wallygauz": 1036, "wdevazelh": 1036, "barnett": 1036, "rosenfeld": 1036, "yime": 1036, "ymazari": 1036, "yufeng": 1036, "griffith": [1036, 1037], "z\u00e9": 1036, "vin\u00edciu": 1036, "zhenq": 1036, "zhiqe": 1036, "xiao": [1036, 1038, 1041, 1042, 1043, 1044, 1045], "couldn": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "12955": 1037, "klopfer": 1037, "14197": 1037, "14024": 1037, "nicolashug": 1037, "13974": 1037, "hoang": [1037, 1038], "fhoang7": 1037, "14393": 1037, "guillem": [1037, 1038, 1043], "subi": [1037, 1038, 1043], "14087": 1037, "14067": 1037, "stalei": [1037, 1038], "14092": 1037, "14053": 1037, "13947": 1037, "instanci": 1037, "13910": 1037, "13894": 1037, "myatt": [1037, 1038], "min_max_axi": 1037, "13741": 1037, "roddi": [1037, 1038], "macsween": [1037, 1038], "14309": 1037, "13864": 1037, "paresh": [1037, 1038], "13877": 1037, "_sag": 1037, "sag_solv": 1037, "3591": 1037, "13317": 1037, "13157": 1037, "13086": 1037, "cole": 1037, "13485": 1037, "assia": 1037, "benbihi": 1037, "13651": 1037, "reloc": 1037, "13486": 1037, "13427": 1037, "couvreur": [1037, 1038], "9069": 1037, "13835": 1037, "10727": 1037, "wood": 1037, "13250": 1037, "13241": 1037, "12143": 1037, "11650": 1037, "non_negative_factor": [1037, 1039, 1040, 1041, 1045], "12988": 1037, "8769": 1037, "11000": 1037, "thibault": 1037, "sejourn": 1037, "changedbehaviourwarn": 1037, "11526": 1037, "6848": 1037, "glemaitr": [1037, 1038, 1040], "11727": 1037, "13266": 1037, "13545": 1037, "sorro": 1037, "12807": 1037, "12513": 1037, "12543": 1037, "storch": 1037, "13260": 1037, "13283": 1037, "13524": 1037, "13174": 1037, "13496": 1037, "13620": 1037, "12436": 1037, "12983": 1037, "13251": 1037, "joshuakennethjon": 1037, "12715": 1037, "13164": 1037, "12834": 1037, "leastsquareserror": 1037, "update_terminal_region": 1037, "6463": 1037, "movelikeriv": 1037, "13193": 1037, "12599": 1037, "13779": 1037, "13780": 1037, "12916": 1037, "13641": 1037, "8478": 1037, "12177": 1037, "12583": 1037, "13601": 1037, "danylo": 1037, "densif": 1037, "13240": 1037, "bartosz": 1037, "13562": 1037, "11646": 1037, "11699": 1037, "make_dataset": 1037, "13336": 1037, "toleranbc": 1037, "11754": 1037, "13397": 1037, "fagan": 1037, "12174": 1037, "12972": 1037, "lucio": 1037, "fernandez": 1037, "arjona": 1037, "coeffeci": 1037, "13279": 1037, "13328": 1037, "13389": 1037, "basesgdclassifi": 1037, "13422": 1037, "cl\u00e9ment": [1037, 1041, 1043], "doumouro": 1037, "unhandl": 1037, "13363": 1037, "12821": 1037, "13350": 1037, "j\u00e9r\u00f4me": [1037, 1038, 1039, 1045], "dock\u00e8": [1037, 1038, 1039, 1045], "9907": 1037, "12232": 1037, "sangeeth": 1037, "11179": 1037, "13151": 1037, "12568": 1037, "8216": 1037, "romuald": 1037, "menuet": 1037, "12732": 1037, "12334": 1037, "13607": 1037, "12855": 1037, "pawel": 1037, "sendyk": 1037, "13628": 1037, "13447": 1037, "10580": 1037, "sandra": [1037, 1043], "mitrov": 1037, "13554": 1037, "celelibi": 1037, "13142": 1037, "11354": 1037, "12613": 1037, "12669": 1037, "torrella": [1037, 1038, 1044], "12861": 1037, "8773": 1037, "13366": 1037, "fournier": 1037, "10440": 1037, "12222": 1037, "10058": 1037, "chiotelli": 1037, "12279": 1037, "12582": 1037, "my_pipelin": 1037, "2568": 1037, "make_": 1037, "11364": 1037, "baze": 1037, "petrushev": 1037, "__len__": 1037, "13439": 1037, "12908": 1037, "drew": 1037, "13253": 1037, "12116": 1037, "12197": 1037, "12251": 1037, "float16": 1037, "13007": 1037, "raffaello": 1037, "baluyot": 1037, "13333": 1037, "13459": 1037, "hunter": 1037, "mcgushion": 1037, "8508": 1037, "6261": 1037, "vettigli": 1037, "justglow": 1037, "12300": 1037, "11458": 1037, "mitar": 1037, "milutinov": 1037, "12344": 1037, "13549": 1037, "warn_on_dtyp": 1037, "check_pairwise_arrai": 1037, "13382": 1037, "prathmesh": 1037, "saval": 1037, "11705": 1037, "11973": 1037, "our_rand_r": 1037, "madhura": [1037, 1039, 1040, 1043, 1044], "parikh": [1037, 1042, 1043, 1044, 1045], "13531": 1037, "check_fit_idempot": 1037, "alberto": [1037, 1041, 1042], "torr": 1037, "amourav": 1037, "assiaben": 1037, "micha\u0142owski": 1037, "brentfagan": 1037, "chenal": [1037, 1038, 1040], "choe": 1037, "drewmjohnston": 1037, "dror": 1037, "atariah": 1037, "esvhd": 1037, "falak": 1037, "gandenberg": 1037, "luqi": 1037, "jf": 1037, "kulbear": 1037, "leandro": [1037, 1041], "hermida": [1037, 1041], "luk": 1037, "manimaran": [1037, 1039, 1040, 1041, 1042], "gaido": 1037, "marinelm": 1037, "masstran": 1037, "roeschk": 1037, "aftab": 1037, "abdela": 1037, "ibraheem": 1037, "mwestt": 1037, "iijima": 1037, "oresti": 1037, "osman": [1037, 1043], "flanagan": [1037, 1038], "soriano": 1037, "peai": 1037, "pim": 1037, "haan": 1037, "raf": 1037, "rajdeep": 1037, "dua": 1037, "ra\u00fal": 1037, "garc\u00eda": [1037, 1038, 1043], "lekhwani": 1037, "varma": 1037, "shiyu": 1037, "duan": [1037, 1039], "smari": [1037, 1038, 1039], "st\u00e9phane": [1037, 1038, 1042, 1043], "surgan12": 1037, "thibsej": 1037, "xhan": 1037, "xinyuliu12": 1037, "zayd": 1037, "hammoudeh": 1037, "16397": [1038, 1039], "16500": 1038, "16505": 1038, "16076": 1038, "shack": [1038, 1039, 1040], "15930": 1038, "inder128": 1038, "15810": 1038, "15898": 1038, "gargsya": 1038, "15933": 1038, "15760": 1038, "15888": 1038, "15936": 1038, "dizietasahi": 1038, "15879": 1038, "bibhash": [1038, 1039], "chandra": [1038, 1039, 1042], "mitra": [1038, 1039, 1043], "15937": 1038, "blyston": [1038, 1039], "15863": 1038, "abstractmethod": 1038, "_check_x": 1038, "basenb": 1038, "15996": 1038, "brigitta": [1038, 1039, 1040, 1044], "sip\u0151cz": [1038, 1039, 1040, 1044], "15751": 1038, "tirth": [1038, 1039], "15868": 1038, "nikla": [1038, 1039], "smedemark": 1038, "marguli": 1038, "15797": 1038, "15947": 1038, "revamp": 1038, "14849": 1038, "_name_estim": 1038, "_gb": 1038, "facto": 1038, "_birch": 1038, "9250": 1038, "12927": 1038, "deprecationwarn": 1038, "interfer": 1038, "hinder": 1038, "15080": 1038, "14464": 1038, "13575": 1038, "10482": 1038, "13726": 1038, "shuzh": 1038, "9288": 1038, "15057": 1038, "korolev": 1038, "15120": 1038, "7943": 1038, "12303": 1038, "14510": 1038, "14890": 1038, "miguel": 1038, "cabrera": 1038, "14544": 1038, "15304": 1038, "jaim": 1038, "ferrando": 1038, "huerta": 1038, "12068": 1038, "12145": 1038, "13609": 1038, "camila": 1038, "williamson": 1038, "15661": 1038, "15160": 1038, "14259": 1038, "14764": 1038, "14740": 1038, "st\u00e9phan": 1038, "tulken": 1038, "14623": 1038, "sarra": 1038, "habchi": 1038, "15257": 1038, "willocx": 1038, "12650": 1038, "13960": 1038, "multiouput": 1038, "14908": 1038, "martina": [1038, 1040], "vila": [1038, 1040], "15382": 1038, "14933": 1038, "15138": 1038, "cusick": 1038, "14406": 1038, "14012": 1038, "faouzi": [1038, 1039], "13769": 1038, "14194": 1038, "least_absolute_devi": [1038, 1040, 1041], "13896": 1038, "13933": 1038, "14710": 1038, "categorical_crossentropi": [1038, 1042], "14869": 1038, "14682": 1038, "hancock": 1038, "5963": 1038, "pablo": [1038, 1041, 1042], "dubou": 1038, "14287": 1038, "15375": 1038, "14305": 1038, "14114": 1038, "15084": 1038, "14294": 1038, "14907": 1038, "14602": 1038, "chawla": 1038, "vectorizermixin": 1038, "14430": 1038, "strip_accents_unicod": 1038, "15100": 1038, "gradi": 1038, "overflowerror": 1038, "15463": 1038, "norvan": 1038, "sahin": 1038, "14520": 1038, "11635": 1038, "alec": 1038, "13704": 1038, "15557": 1038, "14378": 1038, "masashi": [1038, 1040], "shibata": 1038, "ashim": 1038, "bhattarai": 1038, "15010": 1038, "skip_comput": 1038, "13773": 1038, "14356": 1038, "15393": 1038, "venkatachalam": [1038, 1039, 1040, 1041, 1042], "14646": 1038, "14028": 1038, "15429": 1038, "14706": 1038, "14108": 1038, "14170": 1038, "14296": 1038, "13618": 1038, "13995": 1038, "14458": 1038, "14591": 1038, "14864": 1038, "15044": 1038, "15086": 1038, "15038": 1038, "15082": 1038, "13213": 1038, "14647": 1038, "linalgerror": 1038, "13393": 1038, "13707": 1038, "training_data_": 1038, "14357": 1038, "14900": 1038, "socastro": [1038, 1044], "9951": 1038, "14936": 1038, "15083": 1038, "12789": 1038, "15274": 1038, "13938": 1038, "15049": 1038, "toccac": 1038, "ptocca": 1038, "13231": 1038, "dong": 1038, "13467": 1038, "14595": 1038, "14865": 1038, "l\u00e9onard": [1038, 1043], "binet": [1038, 1043], "14732": 1038, "14417": 1038, "15625": 1038, "12258": 1038, "14898": 1038, "matcovici": 1038, "14593": 1038, "reboul": 1038, "14549": 1038, "14704": 1038, "15096": 1038, "14629": 1038, "15488": 1038, "15490": 1038, "12569": 1038, "bicker": 1038, "9597": 1038, "wenbo": [1038, 1040], "zhao": [1038, 1040, 1041, 1042, 1043], "14336": 1038, "dexter": 1038, "9274": 1038, "perri": 1038, "13806": 1038, "ana\u00ebl": 1038, "beaugnon": 1038, "15119": 1038, "15053": 1038, "13290": 1038, "13987": 1038, "_pairwis": [1038, 1040], "13925": 1038, "robson": 1038, "15524": 1038, "xun": [1038, 1040], "12557": 1038, "14286": 1038, "15099": 1038, "baselibsvm": 1038, "_sparse_fit": 1038, "14894": 1038, "danna": 1038, "naser": 1038, "12887": 1038, "15028": 1038, "guan": 1038, "14381": 1038, "11232": 1038, "sievert": 1038, "10815": 1038, "14035": 1038, "14475": 1038, "14538": 1038, "14872": 1038, "upcast": [1038, 1042], "15094": 1038, "choose_check_classifiers_label": 1038, "enforce_estimator_tags_i": 1038, "mock": 1038, "mockdatafram": 1038, "checkingclassifi": 1038, "newton_cg": 1038, "random_choice_csc": 1038, "fast_dict": 1038, "parallel_help": 1038, "14902": 1038, "14971": 1038, "nep": 1038, "14702": 1038, "13013": 1038, "13875": 1038, "14680": 1038, "check_classifier_multioutput": 1038, "check_regressor_multioutput": 1038, "13392": 1038, "rok": 1038, "mihevc": 1038, "check_transformer_data_not_an_arrai": 1038, "mro": [1038, 1039], "14884": 1038, "alphonsu": 1038, "abbi": [1038, 1039], "popa": [1038, 1039], "abdur": 1038, "rahmaan": 1038, "janhang": 1038, "abenbihi": 1038, "abhinav": [1038, 1041], "sagar": 1038, "jana": 1038, "lagat": 1038, "alessandro": [1038, 1040, 1043], "surac": 1038, "siqueira": 1038, "alexgoryainov": 1038, "itk": [1038, 1039, 1040], "alexshack": [1038, 1039, 1040], "akinkunl": 1038, "kaseorg": 1038, "maldonado": [1038, 1041], "angela": [1038, 1039, 1043], "ambroz": [1038, 1039], "anisha": 1038, "keshavan": 1038, "gutierrez": 1038, "anuja": 1038, "archana": [1038, 1040], "alva": 1038, "arnaudstiegl": 1038, "arpanchowdhri": 1038, "ashimb9": 1038, "ayomid": 1038, "bamidel": 1038, "baran": 1038, "buluttekin": 1038, "barrycg": 1038, "bill": [1038, 1039], "mill": 1038, "biswadip": 1038, "mandal": 1038, "blackd0t": 1038, "barklei": 1038, "c56poni": 1038, "camilaagw": 1038, "cartman_nabana": 1038, "catajara": 1038, "cgsavard": [1038, 1039], "vesteghem": 1038, "dakota": 1038, "grusak": 1038, "datenbergwerk": 1038, "dormagen": 1038, "deeplook": 1038, "drgfreeman": 1038, "cashman": 1038, "edvardlindelof": 1038, "ndirangu": [1038, 1042], "eunseop": 1038, "jeong": 1038, "fanni": 1038, "federicopisanu": 1038, "divo": 1038, "flaviomorelli": 1038, "francidona": 1038, "franco": 1038, "luqu": 1038, "freder": 1038, "haas": 1038, "g0g0gadget": 1038, "altai": 1038, "vale": 1038, "rio": [1038, 1040, 1041, 1042], "ganevgv": 1038, "gdex1": 1038, "getgaurav2": 1038, "gideon": 1038, "sonoiya": 1038, "gpapadok": [1038, 1042], "mogavero": 1038, "h4dr1en": 1038, "hadshirt": 1038, "hailei": [1038, 1039], "nguyen": [1038, 1039, 1042, 1043], "hannah": [1038, 1040, 1042], "bruce": [1038, 1039], "macdonald": [1038, 1039], "honglu": 1038, "ingrid": 1038, "spielman": 1038, "a16": [1038, 1039], "jaehong": 1038, "jai": [1038, 1042], "jeromedock": 1038, "jesper": 1038, "dramsch": 1038, "joanna": 1038, "ortiz": [1038, 1044], "kanika": 1038, "sabharw": 1038, "katarina": [1038, 1040], "slama": [1038, 1040], "kellycarmodi": 1038, "eth": 1038, "kensuk": 1038, "arai": 1038, "kesshi": [1038, 1039], "kevad": 1038, "lofti": [1038, 1039], "winata": [1038, 1040], "sheng": 1038, "dolmatov": 1038, "kirthi": 1038, "shankar": 1038, "sivamani": 1038, "katyal": 1038, "lakshmi": 1038, "krishnan": 1038, "lalliacqua": [1038, 1041], "lbfin": 1038, "loopym": 1038, "lostcoast": 1038, "huynh": [1038, 1040], "lrjball": [1038, 1039], "roeder": 1038, "maggiecheg": [1038, 1042], "maithreyi": 1038, "venkatesh": 1038, "maltimor": 1038, "maocx": 1038, "douriez": [1038, 1039], "oywa": 1038, "aladago": 1038, "mbillingr": 1038, "clare": 1038, "micah": 1038, "miguelbarao": 1038, "mina": [1038, 1039], "naghshhnejad": [1038, 1039], "motmoti": 1038, "mschaffenroth": 1038, "natasha": 1038, "nezar": 1038, "nidhin": 1038, "pattaniyil": 1038, "nishan": 1038, "mann": 1038, "nitya": 1038, "mandyam": 1038, "novaya": [1038, 1041], "nxorabl": 1038, "oleg": 1038, "stikhin": 1038, "saleem": 1038, "panpiort8": [1038, 1040], "paula": [1038, 1039], "poorna": [1038, 1040], "pspachtholz": [1038, 1039, 1040], "qdeffens": [1038, 1041], "garg": [1038, 1039], "rapha\u00ebl": 1038, "bournhonesqu": 1038, "reza": 1038, "gharibi": 1038, "payn": 1038, "rlm": 1038, "juergen": [1038, 1043], "sanjabi": 1038, "ruchitagard": 1038, "ruth": 1038, "waithera": 1038, "sackei": 1038, "samesh": [1038, 1039], "lakhotia": [1038, 1039], "sewook": 1038, "dare": 1038, "shreya": 1038, "simoncw": 1038, "smujjiga": 1038, "s\u00f6nke": 1038, "behrend": 1038, "soumirai": 1038, "steinfurt": [1038, 1040], "cowlei": 1038, "th0rwa": [1038, 1039], "theoptip": [1038, 1039], "theotheo": 1038, "thierno": 1038, "ibrahima": 1038, "diop": 1038, "schmitt": [1038, 1039], "tilen": 1038, "kusterl": 1038, "timsaur": 1038, "tola": 1038, "topisan": 1038, "ttang131": 1038, "veerlosar": 1038, "luzgin": 1038, "jeanselm": 1038, "lostanlen": 1038, "vnherdeiro": 1038, "wendi": 1038, "willdarnel": 1038, "wolframalpha": 1038, "xcjason": 1038, "martian": 1038, "xsat": 1038, "yinglr": 1038, "yokasr": 1038, "maxin": [1038, 1039], "yulia": 1038, "zamrii": 1038, "feng": [1038, 1040, 1041, 1042], "17959": 1039, "17848": 1039, "17742": 1039, "17995": 1039, "thomaz": 1039, "santana": [1039, 1042], "dsouza": [1039, 1040, 1041, 1042], "17433": 1039, "17985": 1039, "multinomialdevi": 1039, "logloss": 1039, "17694": 1039, "rempfler": 1039, "tsutomu": 1039, "kusanagi": [1039, 1041], "17357": 1039, "18016": 1039, "x_copi": 1039, "17914": 1039, "15730": 1039, "forrest": [1039, 1040], "17309": 1039, "swier": [1039, 1040], "heer": 1039, "17812": 1039, "bruno": [1039, 1040, 1041], "idl": 1039, "17235": 1039, "17204": 1039, "changed_onli": 1039, "17205": 1039, "15005": [1039, 1041], "slep009": [1039, 1041, 1042], "estimator_samples_": 1039, "16149": 1039, "11950": 1039, "11514": 1039, "16075": 1039, "16484": 1039, "16257": 1039, "simona": [1039, 1040, 1041], "maggio": [1039, 1040, 1041], "16801": 1039, "rcwoolston": 1039, "16431": 1039, "14048": 1039, "15963": 1039, "16084": 1039, "15950": 1039, "stephani": 1039, "15980": 1039, "wconnel": 1039, "15709": 1039, "15707": 1039, "maciej": 1039, "mikulski": 1039, "16006": 1039, "rushabh": 1039, "vasani": 1039, "streamhandl": 1039, "logger": 1039, "handler": 1039, "16451": 1039, "16280": 1039, "16837": 1039, "wornbb": 1039, "15669": 1039, "chaitanya": 1039, "16224": 1039, "schwetlick": [1039, 1040], "gelavizh": 1039, "ahmadi": 1039, "marija": [1039, 1040], "vlajic": [1039, 1040], "wheeler": [1039, 1040], "16841": 1039, "16655": 1039, "16718": 1039, "miotto": 1039, "16981": 1039, "g\u00f3rski": [1039, 1040], "14696": 1039, "14516": 1039, "15582": 1039, "16069": 1039, "bail": 1039, "16183": 1039, "16182": 1039, "santhosh": 1039, "16437": 1039, "hwan": 1039, "cho": 1039, "16539": 1039, "deros": 1039, "16692": 1039, "16663": 1039, "15834": 1039, "santiago": 1039, "mola": 1039, "16103": 1039, "divyaprabha": 1039, "selectormixin": 1039, "16132": 1039, "trimeta": 1039, "15503": 1039, "15782": 1039, "plgreenliru": 1039, "16403": 1039, "narendra": 1039, "mukherje": 1039, "16508": 1039, "15864": 1039, "14300": 1039, "15436": 1039, "15652": 1039, "15179": 1039, "angelaambroz": 1039, "15773": 1039, "15655": 1039, "14848": 1039, "absgrad": 1039, "_newton_cg": 1039, "16266": 1039, "standard_coef_": 1039, "standard_intercept_": 1039, "average_coef_": 1039, "average_intercept_": 1039, "16261": 1039, "brandt": 1039, "16849": 1039, "14264": 1039, "17021": 1039, "16323": 1039, "16362": 1039, "16442": 1039, "parson": [1039, 1041], "rick": 1039, "mackenbach": 1039, "16993": 1039, "emit": 1039, "15622": 1039, "mors": 1039, "15918": 1039, "kubin": 1039, "fit_grid_point": 1039, "16401": 1039, "pratama": 1039, "sutiono": 1039, "15953": 1039, "15959": 1039, "16111": 1039, "16090": 1039, "jayaratn": [1039, 1040, 1043, 1044], "14075": 1039, "meyer89": 1039, "16117": 1039, "15785": 1039, "16245": 1039, "16585": 1039, "15762": 1039, "16466": 1039, "16632": 1039, "maura": 1039, "pintor": 1039, "battista": 1039, "biggio": 1039, "15946": 1039, "ngshya": 1039, "32767": 1039, "mersenn": 1039, "twister": 1039, "31bit": 1039, "63bit": 1039, "crude": 1039, "postprocessor": 1039, "lemir": 1039, "13511": 1039, "kennel": 1039, "11296": 1039, "15558": 1039, "15806": 1039, "16331": 1039, "batiss": 1039, "15926": 1039, "16021": 1039, "sparsearrai": 1039, "16728": 1039, "uint": 1039, "17032": 1039, "_safe_tag": 1039, "16950": 1039, "15380": 1039, "16726": 1039, "16112": 1039, "16622": 1039, "17061": 1039, "aleksandra": 1039, "kocot": 1039, "alonso": [1039, 1041], "allend": [1039, 1041], "ana": [1039, 1041], "casado": 1039, "ankit810": 1039, "arunav": 1039, "konwar": 1039, "maingret": 1039, "beier": 1039, "berni": 1039, "bharathi": 1039, "brigi": [1039, 1040], "castachick": 1039, "castor": 1039, "corri": 1039, "bartelheim": 1039, "dani\u00ebl": 1039, "gelder": 1039, "daphn": 1039, "breuer": 1039, "cort": [1039, 1040, 1043, 1044], "dbauer9": 1039, "borovikova": 1039, "eln": 1039, "emili": [1039, 1040], "leung": 1039, "evgeni": 1039, "chasnovski": 1039, "fabiana": 1039, "facundo": [1039, 1042], "ferr\u00edn": 1039, "franziska": 1039, "boenisch": 1039, "bolmier": [1039, 1040, 1044], "gholdman1": 1039, "gonthier": 1039, "hao": [1039, 1040, 1042, 1043], "chun": [1039, 1040, 1042, 1043, 1044], "haoyin": [1039, 1041, 1042], "h\u00e9lion": 1039, "bourboux": 1039, "himanshu": [1039, 1042], "hirofumi": [1039, 1040], "suzuki": [1039, 1040], "huangk10": 1039, "kemenad": 1039, "hye": 1039, "sung": 1039, "indecisiveus": [1039, 1040], "inderjeet": 1039, "jjmistri": 1039, "haitz": [1039, 1041, 1042], "legarreta": [1039, 1041, 1042], "gorro\u00f1o": [1039, 1041, 1042], "judithabk6": 1039, "jumon": 1039, "kathryn": 1039, "krishnachaitanya9": 1039, "gia": 1039, "thuan": 1039, "lkubin": 1039, "lopusz": 1039, "lucgiffon": 1039, "lucyleeow": 1039, "kemk": 1039, "magda": 1039, "zielinska": 1039, "mandi": [1039, 1042], "gu": [1039, 1040, 1042], "manish": 1039, "aradwad": 1039, "mariana": 1039, "meirel": 1039, "mariel": 1039, "mc4229": 1039, "shoemak": 1039, "micha\u0142": 1039, "s\u0142apek": 1039, "mojca": 1039, "bertoncelj": 1039, "narendramukherje": 1039, "nicolasservel": 1039, "nkish": 1039, "noa": 1039, "tamir": [1039, 1042], "olicairn": 1039, "ur": 1039, "lenz": [1039, 1043], "delanou": 1039, "qizhi": 1039, "quang": 1039, "rachelcjordan": 1039, "raduspaimoc": 1039, "riccardo": [1039, 1045], "folloni": 1039, "ritchi": 1039, "rori": 1039, "hartong": 1039, "redden": 1039, "sambhav": 1039, "kothari": 1039, "santhoshbala18": 1039, "sarat": 1039, "addep": 1039, "scibol": 1039, "kie\u00dfl": 1039, "sergiodsr": 1039, "shiki": 1039, "shubh": 1039, "chatterje": 1039, "simonamaggio": [1039, 1040, 1041], "snowhit": 1039, "stareh": 1039, "marsh": 1039, "sunmi": 1039, "yoon": 1039, "talgatomarov": 1039, "tamirlan1": 1039, "nonner": 1039, "vink": [1039, 1041], "tiphain": 1039, "viard": 1039, "titu": 1039, "vachan": 1039, "vandana": 1039, "iyer": 1039, "waelbenamara": 1039, "wderos": 1039, "wenliwyan": 1039, "windber": 1039, "19579": 1040, "19646": 1040, "stopiter": 1040, "19922": 1040, "19732": 1040, "ishikawa": [1040, 1041], "19407": 1040, "ushtanit": [1040, 1041], "19982": 1040, "19939": 1040, "halvic": 1040, "19703": 1040, "sobkevich": 1040, "villaz\u00f3n": 1040, "terraza": 1040, "fonari": [1040, 1041], "19182": 1040, "yosuk": [1040, 1041], "kobayashi": [1040, 1041], "19721": 1040, "19659": 1040, "19211": 1040, "19847": 1040, "xiaoyu": 1040, "chai": [1040, 1043, 1044], "19308": 1040, "19234": 1040, "19727": 1040, "delong": [1040, 1041], "19888": 1040, "19924": 1040, "19271": 1040, "zhaowei": 1040, "19580": 1040, "brice": [1040, 1041], "adamson": 1040, "wil": 1040, "yegelwel": 1040, "css": 1040, "19417": 1040, "19179": 1040, "19126": 1040, "17448": 1040, "17107": 1040, "17546": 1040, "17856": 1040, "17984": 1040, "riedmann": 1040, "francesco": [1040, 1043], "casalegno": 1040, "18052": 1040, "sean": [1040, 1041, 1043], "stallei": 1040, "17937": 1040, "counts_": 1040, "init_size_": 1040, "17864": 1040, "17616": 1040, "18167": 1040, "18256": 1040, "jayratn": 1040, "16392": 1040, "17095": 1040, "18746": 1040, "norm_y_weight": 1040, "x_mean_": 1040, "y_mean_": 1040, "x_std_": 1040, "y_std_": 1040, "18768": 1040, "18302": 1040, "md5": 1040, "checksum": 1040, "14800": 1040, "17396": 1040, "jiaxiang": 1040, "17491": 1040, "18280": 1040, "17499": 1040, "17610": 1040, "18525": 1040, "11064": 1040, "17414": 1040, "18149": 1040, "17679": 1040, "18528": 1040, "villanova": [1040, 1041], "14446": 1040, "18394": 1040, "16985": 1040, "garbag": 1040, "18334": 1040, "multicor": [1040, 1041], "18341": 1040, "egor": 1040, "smirnov": 1040, "18410": 1040, "17702": 1040, "18326": 1040, "changedbehaviorwarn": 1040, "nonblasdotwarn": 1040, "17804": 1040, "17367": 1040, "15427": 1040, "gangesh": 1040, "gudmalwar": 1040, "6545": 1040, "17159": 1040, "15361": 1040, "17878": 1040, "17090": 1040, "_check_bounds_param": 1040, "12638": 1040, "lannuzel": 1040, "17526": 1040, "ayako": 1040, "yagi": 1040, "17612": 1040, "srimukh": 1040, "sripada": 1040, "16493": 1040, "darshan": 1040, "15636": 1040, "18987": 1040, "16619": 1040, "16906": 1040, "roei": 1040, "kahni": 1040, "18293": 1040, "16289": 1040, "kishimoto": 1040, "18639": 1040, "13003": 1040, "s\u00e1nchez": 1040, "18545": 1040, "laurenz": 1040, "reitsam": 1040, "17578": 1040, "knox": 1040, "6624": 1040, "marijn": 1040, "vliet": 1040, "18121": 1040, "18607": 1040, "fhaselbeck": 1040, "18622": 1040, "haesun": [1040, 1043, 1044], "10493": 1040, "17997": 1040, "maisonneuv": 1040, "square_dist": 1040, "17662": 1040, "18278": 1040, "17412": 1040, "16625": 1040, "10591": 1040, "karnowski": 1040, "plot_det_curv": [1040, 1041], "18176": 1040, "10708": 1040, "15007": 1040, "hathidara": 1040, "10711": 1040, "17192": 1040, "avi": [1040, 1041], "17225": 1040, "17569": 1040, "17651": 1040, "mato": 1040, "17777": 1040, "shubhanshu": 1040, "mishra": [1040, 1041], "17826": 1040, "decal": 1040, "willard": 1040, "17935": 1040, "cari": 1040, "goltermann": 1040, "18114": 1040, "18405": 1040, "yakov": 1040, "pchelintsev": 1040, "13900": 1040, "17478": 1040, "teon": 1040, "13204": 1040, "kosic": 1040, "18527": 1040, "18343": 1040, "devi": 1040, "sandeep": 1040, "18595": 1040, "18222": 1040, "18266": 1040, "subrat": 1040, "sahu": 1040, "15126": 1040, "17987": 1040, "17233": 1040, "zolisa": 1040, "bleki": 1040, "histgradientboost": 1040, "18124": 1040, "brocchini": 1040, "armstrong": 1040, "17427": 1040, "17038": 1040, "neighborsbas": [1040, 1043], "17148": 1040, "18691": 1040, "18370": 1040, "18612": 1040, "17603": 1040, "17604": 1040, "17606": 1040, "17608": 1040, "17609": 1040, "17633": 1040, "17661": 1040, "17932": 1040, "16352": 1040, "17759": 1040, "18269": 1040, "17876": 1040, "18429": 1040, "biernat": 1040, "17317": 1040, "17406": 1040, "wick": 1040, "18406": 1040, "17833": 1040, "yashika": 1040, "18510": 1040, "18447": 1040, "16066": 1040, "18682": 1040, "16935": 1040, "17193": 1040, "16335": 1040, "14982": 1040, "11682": 1040, "patric": [1040, 1041], "15763": 1040, "16530": 1040, "shuhua": 1040, "17386": 1040, "17187": 1040, "x_idx_sort": 1040, "17614": 1040, "check_methods_sample_order_invari": [1040, 1042], "17598": 1040, "ngo": 1040, "17992": 1040, "endian": 1040, "17644": 1040, "18508": 1040, "abo7atm": 1040, "spannbauer": 1040, "deodhar": 1040, "alexandracraciun": 1040, "amy12xx": 1040, "tiwari": 1040, "choraria": 1040, "subramaniyan": 1040, "kushwaha": 1040, "atsushi": [1040, 1041], "nukariya": [1040, 1041], "aura": 1040, "autoviz": 1040, "auto_viml": 1040, "avinash": 1040, "anak": 1040, "barankaraku": 1040, "barberogaston": 1040, "beatrizsmg": 1040, "mainy": 1040, "bossan": [1040, 1042, 1043, 1044], "pedigo": [1040, 1041], "bhavika": 1040, "devnani": 1040, "biprateep": 1040, "dei": 1040, "bmaisonn": 1040, "byron": 1040, "ceethinwa": [1040, 1041], "chaitanyamog": 1040, "clmbst": 1040, "coelhudo": 1040, "crispinlogan": [1040, 1043, 1044], "cristina": 1040, "mula": 1040, "darioka": [1040, 1042, 1043], "declan": 1040, "neill": 1040, "deeksha": 1040, "madan": 1040, "fiegel": [1040, 1041, 1043], "khoo": 1040, "eschibli": 1040, "fran": [1040, 1041, 1042], "larsson": [1040, 1041, 1042], "sheni": 1040, "genvalen": [1040, 1041, 1042, 1043, 1044], "kiragu": 1040, "gesa": 1040, "stupperich": 1040, "ghislain": 1040, "vaillant": 1040, "gim": 1040, "seng": 1040, "chevali": 1040, "bohl": [1040, 1042], "schole": 1040, "hitesh": 1040, "somani": 1040, "hoda1394": 1040, "moin": 1040, "hugorichard": 1040, "isuru": 1040, "wiryadi": 1040, "j0rd1smit": 1040, "jaehyun": 1040, "ahn": 1040, "tae": 1040, "hoctor": 1040, "vese": 1040, "jeevan": 1040, "jeroenpeterbo": 1040, "jhay": 1040, "jigna": 1040, "panchal": 1040, "jim0421": 1040, "joaquin": 1040, "gorb": 1040, "moya": 1040, "kartik": 1040, "chugh": 1040, "kaylani2": 1040, "kendrick": 1040, "cetina": 1040, "kenni": 1040, "isakov": 1040, "koki": 1040, "nishihara": 1040, "krum": [1040, 1042], "arnaudov": [1040, 1042], "oldja": 1040, "guitton": 1040, "mariam": 1040, "l\u00f6ning": 1040, "scheubrein": 1040, "megasari": 1040, "mathschi": 1040, "giudic": 1040, "milan": 1040, "straka": 1040, "muoki": 1040, "caleb": 1040, "haiat": 1040, "nadia": 1040, "tahiri": 1040, "ph": 1040, "hamada": 1040, "neil": 1040, "botelho": 1040, "nil": 1040, "noelano": 1040, "oj_lappi": 1040, "oleh": [1040, 1042], "kozynet": [1040, 1042], "pankaj": 1040, "jindal": 1040, "pardeep": 1040, "parthiv": 1040, "chigurupati": 1040, "pgithub": 1040, "probinette4": 1040, "pwalchessen": 1040, "rachel": [1040, 1043], "fischoff": 1040, "toshniw": 1040, "rafei": 1040, "iqbal": 1040, "rahul": 1040, "jakhar": 1040, "rachum": 1040, "ramyanp": [1040, 1041], "rauwuckl": 1040, "ravi": [1040, 1043], "kiran": 1040, "boggavarapu": 1040, "rishi": 1040, "advani": 1040, "rithvik": 1040, "romijnd": 1040, "tavenard": 1040, "rubi": 1040, "werman": 1040, "ryotaro": 1040, "tsukada": 1040, "sadak": 1040, "khandelw": 1040, "ezebunandu": 1040, "kimbinyi": 1040, "shail": 1040, "keller": 1040, "shao": [1040, 1041, 1042], "shooter23": [1040, 1041], "soledad": 1040, "galli": 1040, "subrat93": 1040, "sunitha": 1040, "selvan": 1040, "kusanagi2": 1040, "terenc": [1040, 1041], "honl": [1040, 1041], "thij": [1040, 1043, 1044], "thomas9292": 1040, "thorben": 1040, "tijanajovanov": 1040, "timo": 1040, "tnwei": 1040, "ufmay": 1040, "umberto": 1040, "lupo": 1040, "vika": [1040, 1042], "viniciu": [1040, 1041], "fuck": [1040, 1041], "violeta": 1040, "watchtheblur": 1040, "willpeppo": 1040, "xethan": 1040, "qianm": 1040, "yue": 1040, "yutaro": 1040, "ikeda": 1040, "zacchari": 1040, "ramzi": 1040, "zoj613": 1040, "21271": 1041, "21833": 1041, "siavash": 1041, "rezazadeh": 1041, "19210": 1041, "21295": 1041, "22050": 1041, "21991": 1041, "19869": 1041, "21481": [1041, 1042], "andr\u00e9": [1041, 1042, 1044], "babino": [1041, 1042], "disconnect": 1041, "21915": 1041, "21694": 1041, "minknowski": 1041, "cdist": 1041, "21741": 1041, "21871": 1041, "21845": 1041, "21517": 1041, "21917": 1041, "21552": 1041, "escap": [1041, 1043], "21493": 1041, "21199": 1041, "20638": 1041, "bohn\u00e9": 1041, "21179": 1041, "21195": 1041, "21130": 1041, "20761": 1041, "21251": 1041, "min_idf": 1041, "max_idf": 1041, "20752": 1041, "alek": [1041, 1042], "lefebvr": [1041, 1042], "21340": 1041, "21093": 1041, "21351": 1041, "cve": 1041, "28975": 1041, "21336": 1041, "_check_sample_weight": 1041, "only_non_neg": 1041, "20880": 1041, "andr\u00e1": [1041, 1042, 1043, 1044], "if_delegate_has_method": [1041, 1042], "21145": 1041, "zahlii": 1041, "21389": 1041, "20002": 1041, "19310": 1041, "least_squar": 1041, "19733": 1041, "lad": 1041, "absolute_loss": 1041, "20165": 1041, "18444": 1041, "18010": 1041, "threadsaf": 1041, "18736": 1041, "17443": 1041, "19641": 1041, "20087": 1041, "fauchereau": 1041, "19002": 1041, "19052": 1041, "yusuk": 1041, "nagasaka": 1041, "17622": 1041, "19024": 1041, "franki": 1041, "robertson": 1041, "20117": 1041, "natchiappan": [1041, 1042], "19883": 1041, "20597": 1041, "20899": 1041, "20200": 1041, "fit_": 1041, "partial_fit_": 1041, "19297": 1041, "20560": 1041, "18393": 1041, "bittarello": 1041, "19263": 1041, "19244": 1041, "18459": 1041, "nd": 1041, "18898": 1041, "ora": 1041, "phongpanagnam": 1041, "21080": 1041, "ledoit_wolf_shrinkag": 1041, "20416": 1041, "defoi": 1041, "20583": 1041, "19365": 1041, "ateif": 1041, "sara": 1041, "19669": 1041, "importlib": 1041, "pyoxid": 1041, "20297": 1041, "20209": 1041, "19011": 1041, "20729": 1041, "12069": 1041, "19046": 1041, "surya": [1041, 1042], "18433": 1041, "19198": 1041, "19159": 1041, "beno\u00eet": 1041, "mal\u00e9zieux": 1041, "19908": 1041, "20512": 1041, "20960": 1041, "cgroup": [1041, 1042], "quota": [1041, 1042], "20477": 1041, "19799": 1041, "19564": 1041, "19836": 1041, "19162": 1041, "10096": 1041, "fenil": 1041, "suchak": 1041, "20159": 1041, "murata": [1041, 1042], "20534": 1041, "19296": 1041, "19035": 1041, "19520": 1041, "18964": 1041, "19401": 1041, "relova": 1041, "17169": 1041, "dmytro": 1041, "lituiev": 1041, "20380": 1041, "pulido": 1041, "felip": [1041, 1042, 1043, 1044], "bidu": [1041, 1042], "rutter": 1041, "20515": 1041, "carsten": 1041, "allefeld": 1041, "19568": 1041, "shyam": 1041, "20207": 1041, "tomohiro": 1041, "endo": 1041, "20161": 1041, "shuhei": 1041, "kayawari": 1041, "arka204": [1041, 1043], "20431": 1041, "pfaffel": 1041, "19428": 1041, "hamoumi": 1041, "19411": 1041, "20959": 1041, "20554": 1041, "xiangyin": 1041, "kong": 1041, "9978": 1041, "10027": 1041, "16449": 1041, "20231": 1041, "naka": 1041, "19571": 1041, "20155": 1041, "oura": [1041, 1042, 1043], "19004": 1041, "midvidi": 1041, "19055": 1041, "19172": 1041, "19426": 1041, "19499": 1041, "strubel": 1041, "19616": 1041, "19391": 1041, "19390": 1041, "linearmodel": 1041, "17743": 1041, "17772": 1041, "17746": 1041, "17785": 1041, "17750": 1041, "17769": 1041, "20683": 1041, "19491": 1041, "19472": 1041, "shortest_path": 1041, "20531": 1041, "19415": 1041, "17036": 1041, "20326": 1041, "uttam": 1041, "9843": 1041, "19643": 1041, "attard": 1041, "19784": 1041, "18328": 1041, "20312": 1041, "divyanshu": 1041, "deoli": 1041, "18543": 1041, "20552": 1041, "19278": 1041, "20030": 1041, "tingshan": 1041, "18649": 1041, "rodion": 1041, "martynov": 1041, "20619": 1041, "baseshufflesplit": 1041, "20056": 1041, "pabloduque0": 1041, "prematur": 1041, "20904": 1041, "tomasz": 1041, "jakubek": [1041, 1042], "18925": 1041, "poznik": [1041, 1042, 1043], "18842": 1041, "19473": 1041, "jiefangxuanyan": 1041, "20072": 1041, "20842": 1041, "mart\u00edn": [1041, 1042], "19631": 1041, "19790": 1041, "flynn": [1041, 1043], "18368": 1041, "19483": 1041, "20526": 1041, "19069": 1041, "19041": 1041, "20250": 1041, "20652": 1041, "19934": 1041, "gleb": [1041, 1043, 1044], "levitskii": 1041, "19734": 1041, "robinson": 1041, "19752": 1041, "zhehao": [1041, 1042, 1043, 1044], "19527": 1041, "19788": 1041, "19356": 1041, "makoeppel": 1041, "19879": 1041, "19906": 1041, "20727": 1041, "20961": 1041, "n_input_features_": 1041, "20240": 1041, "20843": 1041, "18959": 1041, "wstate": 1041, "20023": 1041, "19336": 1041, "20272": 1041, "19459": 1041, "bezuidenhout": 1041, "clifford": 1041, "akai": 1041, "nettei": 1041, "19948": 1041, "20657": 1041, "19766": 1041, "20385": 1041, "_weighted_percentil": 1041, "huberlossfunct": 1041, "20528": 1041, "_safe_index": 1041, "20673": 1041, "is_scalar_nan": 1041, "assert_warn": 1041, "assert_warns_messag": 1041, "20521": 1041, "abdulelah": 1041, "mesfer": 1041, "adrian": [1041, 1042, 1043], "garcia": 1041, "badaracco": 1041, "sad\u0142ocha": 1041, "rubial": 1041, "alessia": 1041, "marcolini": 1041, "alihan": 1041, "zihna": 1041, "alin": 1041, "amol": 1041, "deshmukh": 1041, "pessoa": 1041, "anavelyz": 1041, "ashish": [1041, 1044], "ashvith": 1041, "shetti": 1041, "baam": [1041, 1042], "baptbillard": 1041, "bmalezieux": 1041, "bumblebe": 1041, "caherrera": 1041, "meli": [1041, 1042, 1043], "chrissobel": 1041, "yeh": 1041, "chuliang": 1041, "cliffordemmanuel": 1041, "conner": 1041, "shen": 1041, "dimitri": [1041, 1042, 1043, 1044], "papadopoulo": [1041, 1042, 1043, 1044], "orfano": [1041, 1042, 1043, 1044], "dmallia17": 1041, "ds_ana": 1041, "jardim": 1041, "edwinwenink": 1041, "eleni": 1041, "markou": 1041, "ericellwang": [1041, 1042], "ezri": 1041, "mudd": 1041, "fato": 1041, "morina": 1041, "hafner": 1041, "flyingdutchman23": 1041, "uwha": [1041, 1042], "bereng": 1041, "frederick": 1041, "frellwan": 1041, "vicent": [1041, 1042, 1043], "geroldcsend": 1041, "glen": 1041, "gl\u00f2ria": [1041, 1043], "mu\u00f1oz": [1041, 1043], "gregorystrubel": 1041, "groceryheist": 1041, "guiweb": 1041, "haidar": [1041, 1042], "almubarak": [1041, 1042], "moritz": [1041, 1043], "g\u00fcnther": 1041, "mirza": 1041, "harutaka": 1041, "kawamura": 1041, "hassan": 1041, "alsawadi": 1041, "geovan": [1041, 1042], "gome": [1041, 1042], "lima": [1041, 1042], "ilic": 1041, "ikko": 1041, "ashimin": 1041, "isaack": 1041, "mungui": 1041, "ishaan": 1041, "bhat": [1041, 1043, 1044, 1045], "ishan": [1041, 1042], "iwhalv": 1041, "preiss": 1041, "budarz": 1041, "jannik": 1041, "jennif": 1041, "jianzhu": 1041, "guo": 1041, "jnboehm": 1041, "johanwork": 1041, "paton": 1041, "n\u00e1pole": 1041, "julio": 1041, "julyrashchenko": 1041, "jvm": 1041, "kadatatlu": 1041, "kishor": 1041, "karen": 1041, "palacio": 1041, "kmatt10": 1041, "kobaski": 1041, "kot271828": 1041, "kunj": 1041, "kurumeyuta": 1041, "kxytim": 1041, "lacrosse91": 1041, "laveen": 1041, "bagai": 1041, "leonardo": 1041, "rocco": [1041, 1042, 1043], "uieda": 1041, "leopoldo": 1041, "corona": 1041, "lsturtew": 1041, "lucca": 1041, "quadro": 1041, "ly648499246": 1041, "mabu": 1041, "manaileng": 1041, "mariangela": 1041, "marielaraj": 1041, "hirzel": 1041, "mateo": 1041, "nore\u00f1a": 1041, "mathi": 1041, "batoul": 1041, "calcot": 1041, "prieur": 1041, "\u00f6zer": 1041, "miao": 1041, "cai": 1041, "karbownik": 1041, "michalkrawczyk": [1041, 1042], "mitzi": [1041, 1042], "mlondschien": 1041, "haseeb": [1041, 1042], "khoual": 1041, "jarir": 1041, "kanji": 1041, "nadim": 1041, "kawwa": 1041, "nanshan": 1041, "naozin555": 1041, "fultz": 1041, "nic": 1041, "annau": 1041, "stefani": [1041, 1043, 1044, 1045], "nigel": 1041, "bosch": 1041, "nodar": 1041, "okroshiashvili": 1041, "ogbonna": 1041, "chibuik": 1041, "ogordon100": 1041, "phongpanangam": 1041, "duqu": 1041, "ibieta": 1041, "jimenez": [1041, 1042], "lacouth": 1041, "olszewski": 1041, "dye": 1041, "pierreattard": [1041, 1042], "yve": 1041, "borgn": 1041, "pranayanchuri": 1041, "princ": 1041, "canuma": 1041, "putschblo": 1041, "ranjanikrishnan": 1041, "rene": 1041, "corneil": 1041, "ricardojnf": 1041, "richardscottoz": 1041, "sandi": 1041, "khosasi": 1041, "benhur": 1041, "flore": 1041, "shinehid": 1041, "shinnar": 1041, "tootoonian": 1041, "solosil": 1041, "kolawol": 1041, "stagg": 1041, "swpeas": 1041, "tfifi": 1041, "caswel": [1041, 1044], "timotheemathieu": 1041, "wolodzko": 1041, "tliu68": 1041, "uhmann": 1041, "tom1092": 1041, "tom\u00e1": [1041, 1042], "moreyra": 1041, "tommaso": 1041, "noto": 1041, "tsuga": 1041, "vang": 1041, "gkiasta": 1041, "vil\u00e9m": 1041, "zouhar": 1041, "vlasovet": 1041, "waijean": 1041, "whidou": 1041, "xiaoyuchai": 1041, "yasmeen": 1041, "alsaedi": 1041, "yoch": 1041, "yusukenagasaka": 1041, "yzhenman": 1041, "zeyusun": 1041, "zhaoweiwang": 1041, "msvcp140": 1042, "dll": 1042, "24631": 1042, "24446": 1042, "10805": 1042, "mathia": 1042, "23471": 1042, "24015": 1042, "23990": 1042, "23833": 1042, "24017": 1042, "sorski": [1042, 1043], "23395": 1042, "23636": 1042, "22063": 1042, "22059": 1042, "kurz": [1042, 1043], "23608": 1042, "23548": 1042, "24087": 1042, "23273": 1042, "23194": 1042, "23198": 1042, "lise": 1042, "kleiber": 1042, "23358": 1042, "23264": 1042, "feature_names_in": 1042, "23299": 1042, "23214": 1042, "collot": [1042, 1043], "baak": 1042, "23370": 1042, "23410": 1042, "compute_sample_weight": 1042, "23115": 1042, "22868": 1042, "multiindex": 1042, "22410": 1042, "23271": 1042, "21987": 1042, "22064": 1042, "22065": 1042, "22288": 1042, "22320": 1042, "21219": 1042, "21542": 1042, "23098": 1042, "22318": 1042, "23036": 1042, "binary_crossentropi": 1042, "23040": 1042, "23046": 1042, "22856": 1042, "21032": 1042, "18170": 1042, "21038": 1042, "14975": 1042, "22526": 1042, "23095": 1042, "silk": 1042, "20031": 1042, "krawczyk": 1042, "21148": 1042, "22255": 1042, "21881": 1042, "vassard": 1042, "22217": 1042, "21735": 1042, "22154": 1042, "22537": 1042, "iofal": 1042, "arisa": [1042, 1043], "22775": 1042, "22913": 1042, "randomgeek78": 1042, "22493": 1042, "19680": 1042, "thibaut": 1042, "22119": 1042, "22016": 1042, "22015": 1042, "19747": 1042, "attalla": 1042, "22498": 1042, "21482": 1042, "pujalt": 1042, "22412": 1042, "16605": 1042, "21901": 1042, "rileran": 1042, "23113": 1042, "ilion": 1042, "beyst": 1042, "21425": 1042, "stefanini": 1042, "16948": 1042, "patricio": 1042, "cerda": 1042, "22002": 1042, "21109": 1042, "inner_stats_": 1042, "iter_offset_": 1042, "18975": 1042, "22111": 1042, "22181": 1042, "21334": 1042, "21705": 1042, "stanlei": [1042, 1043, 1044], "21432": 1042, "22806": 1042, "jihan": 1042, "benni": 1042, "21713": 1042, "haya": 1042, "21567": 1042, "maggi": 1042, "chege": 1042, "22300": 1042, "15948": 1042, "sysuresh": 1042, "22553": 1042, "19490": 1042, "ferrin": 1042, "22120": 1042, "15984": 1042, "okon": 1042, "22696": 1042, "22486": 1042, "21800": 1042, "20567": 1042, "22159": 1042, "20811": 1042, "21814": 1042, "16748": 1042, "siqi": 1042, "22215": 1042, "23047": 1042, "22695": 1042, "22697": 1042, "21762": 1042, "22106": 1042, "gijsber": 1042, "21632": 1042, "genesi": [1042, 1044], "valencia": [1042, 1044], "22566": 1042, "22908": 1042, "23097": 1042, "23079": 1042, "20803": 1042, "23023": 1042, "21573": 1042, "21832": 1042, "20145": 1042, "22356": 1042, "18482": 1042, "gameiro": 1042, "kharsa": 1042, "22370": 1042, "17819": 1042, "22235": 1042, "21837": 1042, "wagner": 1042, "22199": 1042, "aidar": 1042, "shakerimoff": 1042, "tenavi": 1042, "nakamura": 1042, "22223": 1042, "marcom": 1042, "21617": 1042, "ritter": [1042, 1043], "21114": 1042, "21078": 1042, "21448": 1042, "16061": 1042, "19438": 1042, "18310": 1042, "elfner": 1042, "22249": 1042, "22137": 1042, "22694": 1042, "22808": 1042, "22950": 1042, "21086": 1042, "22206": 1042, "21808": 1042, "22548": 1042, "22062": 1042, "trujillo": [1042, 1043], "22148": 1042, "22240": 1042, "9087": 1042, "22525": 1042, "19689": 1042, "21606": 1042, "21341": 1042, "preservs": 1042, "21767": 1042, "21724": 1042, "yar": 1042, "khine": 1042, "phyo": 1042, "21998": 1042, "22891": 1042, "22899": 1042, "23256": 1042, "19794": 1042, "21534": 1042, "22254": 1042, "21805": 1042, "jeann": 1042, "dionisi": 1042, "22685": 1042, "n_neighbour": 1042, "18832": 1042, "23033": 1042, "21565": 1042, "17266": 1042, "22118": 1042, "ohad": 1042, "22284": 1042, "19158": 1042, "nicki": 1042, "skaft": 1042, "20753": 1042, "22108": 1042, "22635": 1042, "19085": 1042, "22866": 1042, "21576": 1042, "emil": 1042, "dugnat": 1042, "21873": 1042, "21177": 1042, "20408": 1042, "ceballo": 1042, "22058": 1042, "23034": 1042, "22203": 1042, "21026": 1042, "21880": 1042, "mrinal": 1042, "tyagi": 1042, "22982": 1042, "22508": 1042, "comb": 1042, "22604": 1042, "22212": 1042, "21430": 1042, "desislava": 1042, "vasileva": 1042, "22687": 1042, "22150": 1042, "22248": 1042, "20860": 1042, "shubhraneel": 1042, "21888": 1042, "21954": 1042, "22953": 1042, "16018": 1042, "21445": 1042, "21988": 1042, "get_output_feature_nam": 1042, "21569": 1042, "21079": 1042, "20653": 1042, "21434": 1042, "19916": 1042, "22735": 1042, "compute_inverse_transform": 1042, "21701": 1042, "22114": 1042, "21330": 1042, "21408": 1042, "22149": 1042, "21436": 1042, "22191": 1042, "22476": 1042, "21278": 1042, "21316": 1042, "clickabl": 1042, "21298": 1042, "22237": 1042, "check_scalar": 1042, "22218": 1042, "validationerror": 1042, "check_requires_y_non": 1042, "22578": 1042, "arcidiacono": [1042, 1043], "22595": 1042, "21310": 1042, "22027": 1042, "lanterni": 1042, "23077": 1042, "22188": 1042, "22830": 1042, "2357juan": [1042, 1043, 1044], "adamgonzo": 1042, "adijohar": 1042, "kumawat": 1042, "raghuwanshi": 1042, "duron": 1042, "ahmadjubair33": 1042, "aj": 1042, "druck": 1042, "peixinho": 1042, "arroyo": 1042, "alexanmv": 1042, "almeidayoel": 1042, "amar": [1042, 1043, 1044], "amrcod": 1042, "griva": [1042, 1043], "andrii": 1042, "herrou": 1042, "ducout": 1042, "arth": 1042, "arthurmello": 1042, "arturoamor": 1042, "atharva": 1042, "patil": 1042, "aufarkari": 1042, "avm19": [1042, 1043], "ayan": 1042, "bardiya": [1042, 1043], "behrouz": 1042, "ben3940": 1042, "bijil": 1042, "subhash": 1042, "bmreinig": 1042, "brenden": 1042, "kadota": 1042, "cdrig": 1042, "chalmer": 1042, "chitteti": 1042, "srinath": [1042, 1043], "chloe": 1042, "agath": 1042, "azencott": 1042, "christopherlim98": 1042, "weidemann": 1042, "combsccod": 1042, "daniela": [1042, 1043], "darren": [1042, 1043], "eargl": 1042, "gilbertson": [1042, 1043], "dea": [1042, 1043, 1044], "mar\u00eda": [1042, 1043, 1044], "denni": 1042, "osei": 1042, "dessyvv": 1042, "dev514": 1042, "diwakar": 1042, "ries": 1042, "drskd": 1042, "emiko": 1042, "sano": 1042, "emmanouil": 1042, "gionanidi": 1042, "ermolaevpa": [1042, 1043], "estefania": 1042, "barreto": 1042, "ojeda": 1042, "eyast": 1042, "fatima": 1042, "gasmi": 1042, "luna": 1042, "glushchenkov": 1042, "fkaren27": 1042, "fpgawesom": 1042, "ftorres16": [1042, 1043], "gabor": 1042, "berei": 1042, "kertesz": 1042, "gauthier": 1042, "giancarlo": 1042, "glennfrutiz": 1042, "guillermo": 1042, "fern\u00e1ndez": 1042, "hansin": [1042, 1043], "henrymooresc": [1042, 1043], "hideaki": 1042, "imamura": 1042, "hind": 1042, "hmasdev": 1042, "hvassard": 1042, "aki": [1042, 1043, 1044], "iasoon": 1042, "ingela": 1042, "cowton": 1042, "jalexand3r": 1042, "jauhar": 1042, "jaya": 1042, "kommireddi": 1042, "je": 1042, "jelfner": 1042, "jenni": 1042, "jirka": 1042, "borovec": 1042, "cipri\u00e1n": 1042, "loayza": 1042, "chazalon": 1042, "mess": 1042, "jovan": [1042, 1043], "stojanov": [1042, 1043], "jschuerz": 1042, "katotten": 1042, "ken4git": 1042, "doucet": 1042, "kimayoung": 1042, "koushik": 1042, "kranthi": 1042, "sedamaki": 1042, "krumetoft": 1042, "lesne": 1042, "casino": [1042, 1043], "logan": [1042, 1043, 1044], "lucieclair": 1042, "luiz": 1042, "magali": 1042, "mandjev": 1042, "wurp": [1042, 1043], "boerner": 1042, "wimld": 1042, "martel": 1042, "corentin": 1042, "mat\u00eda": 1042, "matjansen": 1042, "francia": 1042, "megabyt": 1042, "mehrdad": 1042, "moradizadeh": 1042, "melemo2": 1042, "micky774": [1042, 1043], "milana2": 1042, "millawel": 1042, "miwojc": 1042, "mizuki": 1042, "mlant": 1042, "mohit": [1042, 1045], "moonkyung94": 1042, "mpoemsl": 1042, "mrinaltyagi": 1042, "leu": 1042, "msabati": 1042, "nadirhan": 1042, "\u015fahin": 1042, "naipawat": [1042, 1043], "poolsawat": [1042, 1043], "nartayxd": 1042, "nastegiano": 1042, "nathansquan": 1042, "detlefsen": 1042, "niket": 1042, "nikhil": 1042, "suresh": 1042, "kondratyev": 1042, "husak": 1042, "partev": [1042, 1043, 1044], "pelennor": 1042, "piet": [1042, 1043], "br\u00f6mmel": [1042, 1043], "pinki": 1042, "poloso": 1042, "pramod": 1042, "anantharam": 1042, "puhuk": [1042, 1043], "purna": 1042, "mansingh": 1042, "quadv": 1042, "rahil": [1042, 1043, 1044, 1045], "boy": 1042, "raz": 1042, "hoshia": 1042, "rishabh": 1042, "barnowski": [1042, 1043], "rsnegrin": 1042, "yadav": 1042, "sakinaouisrani": 1042, "sanjai": 1042, "marreddi": 1042, "seel": 1042, "sele": [1042, 1043], "seyedsaman": 1042, "emami": 1042, "shandeng123": 1042, "sharmadharmp": 1042, "shaymernaturalint": 1042, "shuangchi": [1042, 1043], "siavrez": 1042, "slishak": 1042, "spikebh": 1042, "sply88": 1042, "kailasa": [1042, 1043], "sultan": 1042, "orazbayev": 1042, "sumit": 1042, "saha": 1042, "sven": [1042, 1043], "eschlbeck": 1042, "stehl": [1042, 1043], "swapnil": 1042, "teunp": 1042, "ferr\u00e9": 1042, "hjortkj\u00e6r": 1042, "thiruvenkadam": 1042, "toastedyeast": [1042, 1043], "mctiernan": [1042, 1043], "udit": 1042, "ugo": 1042, "marchand": 1042, "vera": [1042, 1043], "komey": [1042, 1043], "victoireloui": 1042, "vishwakarma": 1042, "vikrant": 1042, "khedkar": 1042, "chernyi": 1042, "weijiadu": 1042, "yuan": [1042, 1043, 1044], "yiyangq": 1042, "yosshi999": 1042, "yuki": 1042, "koyama": 1042, "zeel": 1042, "zempleni": 1042, "zhenfish": 1042, "\u8d75\u4e30": 1042, "25747": 1043, "base_estimator__": 1043, "25477": 1043, "25563": 1043, "25570": 1043, "25664": 1043, "25774": 1043, "25500": 1043, "25589": 1043, "25704": 1043, "min_sample_split": 1043, "25744": 1043, "25619": 1043, "25638": 1043, "25354": 1043, "25174": 1043, "25089": 1043, "25129": 1043, "25363": 1043, "25188": 1043, "25295": 1043, "spec": [1043, 1044], "25312": 1043, "backslash": 1043, "25511": 1043, "25172": 1043, "25341": 1043, "25094": 1043, "25250": 1043, "25370": 1043, "23101": 1043, "24873": 1043, "25694": 1043, "25274": 1043, "25296": 1043, "25147": 1043, "23619": 1043, "24354": 1043, "safiuddin": 1043, "khaja": 1043, "gsiisg": 1043, "23935": 1043, "22527": 1043, "_sgd_fast": 1043, "_plain_sgd": 1043, "oversc": 1043, "23798": 1043, "24543": 1043, "24465": 1043, "23734": 1043, "24699": 1043, "23865": 1043, "simd": 1043, "primit": 1043, "23446": 1043, "23197": 1043, "23604": 1043, "23585": 1043, "24556": 1043, "maladi\u00e8r": [1043, 1044], "24617": 1043, "sim4n6": 1043, "24688": 1043, "22054": 1043, "roic": 1043, "24264": 1043, "maladier": 1043, "14736": 1043, "hunt": 1043, "zhan": 1043, "20802": 1043, "pokorni": 1043, "22965": 1043, "22968": 1043, "23038": 1043, "23210": 1043, "24258": 1043, "23470": 1043, "21938": 1043, "23127": 1043, "19075": 1043, "ramo": 1043, "carre\u00f1o": 1043, "24951": 1043, "22268": 1043, "mohamedbsh": 1043, "23905": 1043, "11860": 1043, "ablin": 1043, "24528": 1043, "23726": 1043, "24421": 1043, "kshitij": [1043, 1044], "22554": 1043, "24218": 1043, "molin": 1043, "21020": 1043, "24856": 1043, "22014": 1043, "23252": 1043, "24538": 1043, "24889": 1043, "24146": 1043, "peretti": 1043, "nestor": 1043, "navarro": 1043, "nati": 1043, "tomatti": 1043, "24855": 1043, "24849": 1043, "20415": 1043, "24283": 1043, "24894": 1043, "23819": [1043, 1044], "edoardo": [1043, 1045], "abati": [1043, 1045], "24747": 1043, "24245": 1043, "24405": 1043, "16695": 1043, "vitor": 1043, "rosa": 1043, "18298": 1043, "25077": 1043, "24317": 1043, "24350": 1043, "24755": 1043, "levitski": [1043, 1044], "24637": 1043, "24767": 1043, "23275": 1043, "maxwelllzh": 1043, "24433": 1043, "yogendrasingh": 1043, "23637": 1043, "23877": 1043, "10168": 1043, "\u0142ukasz": 1043, "borchmann": 1043, "12285": 1043, "miltenberg": 1043, "13042": 1043, "parizi": 1043, "18094": 1043, "22562": 1043, "24714": 1043, "23834": 1043, "24051": 1043, "22518": 1043, "18020": 1043, "24338": 1043, "23442": 1043, "atukorala": 1043, "22710": 1043, "conroi": 1043, "trinh": 1043, "23461": 1043, "24365": 1043, "24630": 1043, "rushil": [1043, 1044], "24084": 1043, "iinfo": 1043, "24141": 1043, "24539": 1043, "23977": 1043, "23683": 1043, "andrei": [1043, 1045], "melnik": 1043, "16747": 1043, "18805": 1043, "hongshaoyang": 1043, "22269": 1043, "23139": 1043, "24645": 1043, "10468": 1043, "ruben": 1043, "22993": 1043, "24750": 1043, "rudresh": 1043, "veerkhar": 1043, "23874": 1043, "24075": 1043, "22665": 1043, "24683": 1043, "24058": 1043, "perdok": 1043, "20331": 1043, "23993": 1043, "22629": 1043, "24412": 1043, "22898": 1043, "23480": 1043, "21469": 1043, "lapack_svd_driv": 1043, "20617": 1043, "25067": 1043, "14862": 1043, "24512": 1043, "24667": 1043, "25080": 1043, "24523": 1043, "mia": 1043, "bajic": 1043, "3llobo": 1043, "kania": [1043, 1044], "anulekh": 1043, "admir": [1043, 1044], "demiraj": [1043, 1044], "adoublet": [1043, 1044], "ahmedbgh": [1043, 1044], "aiko": 1043, "akshita": 1043, "prasanth": 1043, "ala": [1043, 1044], "miola": 1043, "lebel": 1043, "buzenet": [1043, 1044], "kassa": [1043, 1044], "bera": 1043, "maennel": 1043, "aniket": 1043, "shirsat": 1043, "anthony22": [1043, 1044], "apostolo": 1043, "tsetogl": 1043, "aravindh": 1043, "artur": [1043, 1044], "hermano": [1043, 1044], "ashah002": [1043, 1044], "ashwin": [1043, 1044], "azaria": [1043, 1044], "gebremichael": [1043, 1044], "b0rxington": 1043, "badr": 1043, "moufad": 1043, "bart\u0142omiej": 1043, "go\u0144da": 1043, "bdegraaff": 1043, "berkecanrizai": 1043, "bernd": 1043, "fritzk": 1043, "bhoomika": 1043, "biswaroop": 1043, "cannon": 1043, "bsh": 1043, "ceh": 1043, "chalulu": 1043, "changyao": [1043, 1044], "zablit": 1043, "veenhui": [1043, 1044], "christianwaldmann": 1043, "christin": [1043, 1044], "verrier": 1043, "dangonite57": [1043, 1044], "danielgaerb": 1043, "davidblnc": [1043, 1044], "dayn": [1043, 1044], "khant": 1043, "dhanshre": 1043, "diadochokinet": 1043, "diederikwp": 1043, "litsidi": [1043, 1044], "drewhogg": 1043, "oc": 1043, "dwight": 1043, "lindquist": 1043, "eden": 1043, "brekk": 1043, "edern": [1043, 1044], "eleanor": 1043, "eliaschiavon": 1043, "emir": [1043, 1044], "fabrizio": 1043, "damicelli": 1043, "fcharra": 1043, "siola": [1043, 1044], "tuveri": 1043, "franck": 1043, "charra": 1043, "geevarghes": 1043, "georgiamaydai": 1043, "gianr": 1043, "lazz": 1043, "guitar": 1043, "gunesbayir": [1043, 1044], "harshit5674": 1043, "hasan": 1043, "yaman": 1043, "vrigazov": 1043, "htsedebenham": 1043, "humahn": 1043, "ido": [1043, 1044], "iglesi": 1043, "iliya": 1043, "zhechev": 1043, "iren": [1043, 1044], "ivanllt": 1043, "sedykh": 1043, "mcivor": [1043, 1044], "janfidor": [1043, 1044], "jiten": 1043, "sidhpura": 1043, "jkarolczak": 1043, "jo\u00e3o": 1043, "johnathanpi": [1043, 1044], "koumenti": 1043, "panga": [1043, 1044], "johnthagen": 1043, "fleme": 1043, "choo": [1043, 1044], "yun": [1043, 1044], "keat": [1043, 1044], "juanfe88": 1043, "juliaschoepp": [1043, 1044], "jygerardi": [1043, 1044], "ka00ri": [1043, 1044], "kanishk": 1043, "sachdev": 1043, "kanissh": 1043, "kendal": 1043, "kento": [1043, 1044], "nozawa": [1043, 1044], "eliasi": [1043, 1044], "kluge": [1043, 1044], "lieret": 1043, "kirandevraj": 1043, "kraig": 1043, "vamsi": 1043, "kapadni": 1043, "lingyi1110": 1043, "mantovani": 1043, "maascha": 1043, "madinak": 1043, "maksym": 1043, "mansi": 1043, "kostelac": [1043, 1044], "marvin": [1043, 1044], "krawutschk": [1043, 1044], "masanori": [1043, 1044], "kanazu": [1043, 1044], "haberland": [1043, 1044], "mauroantonioserrano": 1043, "maxi": 1043, "marufo": 1043, "maximesaur": [1043, 1044], "smolskii": 1043, "bou": [1043, 1044], "mehgarg": 1043, "mehmetcanakbai": 1043, "baji\u0107": 1043, "flak": 1043, "hornstein": 1043, "ruiter": 1043, "paradi": 1043, "iljin": [1043, 1044], "misa": 1043, "ogura": 1043, "wilksch": 1043, "mrastgoo": 1043, "naois": [1043, 1045], "holohan": [1043, 1045], "nass": 1043, "jacobi": 1043, "nawazish": [1043, 1044], "alam": [1043, 1044], "nguy\u1ec5n": 1043, "v\u0103n": 1043, "di\u1ec5n": 1043, "fanelli": [1043, 1044], "nihal": 1043, "thukarama": 1043, "jare": 1043, "nima10khodaveisi": 1043, "nima": 1043, "sarajpoor": 1043, "nitinramvelraj": 1043, "nnlnr": [1043, 1044], "npach": [1043, 1044], "nwanna": 1043, "nymark": 1043, "kho": 1043, "holman": 1043, "oll": 1043, "lukowski": 1043, "hassoun": 1043, "tamer": 1043, "ouss1508": [1043, 1044], "oyindamola": 1043, "olatunji": 1043, "pab": [1043, 1044], "pandata": [1043, 1044], "soar": 1043, "petar": 1043, "mlinari\u0107": 1043, "pooja": [1043, 1044], "subramaniam": [1043, 1044], "priyam": 1043, "kakati": 1043, "freeland": 1043, "keerti": 1043, "rafal": [1043, 1044], "wojdyla": [1043, 1044], "raghuv": [1043, 1044], "makhija": 1043, "rehan": 1043, "guha": 1043, "klima": 1043, "crockett": 1043, "homm": 1043, "roman4oo": 1043, "rowan": 1043, "mankoo": 1043, "sabri": 1043, "monaf": 1043, "safikh": 1043, "salahuddin": 1043, "yojana": 1043, "menes": 1043, "ephrem": 1043, "sangam": 1043, "sangamswadik": 1043, "sanjai_3": [1043, 1044], "sarahremu": 1043, "sashka": [1043, 1044], "savkomax": 1043, "gustafson": [1043, 1044], "sec65": 1043, "seljak": 1043, "shadi": [1043, 1044], "gewili": [1043, 1044], "shellyfung": 1043, "shinsuk": 1043, "mori": 1043, "shiva": [1043, 1044], "shoaib": 1043, "khan": [1043, 1044], "shogo": [1043, 1044], "hida": [1043, 1044], "shrankhla": 1043, "sonniv": [1043, 1044], "sortofamudkip": [1043, 1044], "stanislav": [1043, 1044], "modrak": [1043, 1044], "stellalin7": 1043, "vaerenbergh": [1043, 1044], "schmerler": 1043, "tabea": [1043, 1044], "kossen": [1043, 1044], "thedevpanda": 1043, "syd": 1043, "sre": 1043, "weezel": [1043, 1044], "bonald": 1043, "germer": [1043, 1044], "ion": 1043, "timofei": 1043, "kornev": 1043, "pitter": 1043, "tomiock": [1043, 1044], "mathew": 1043, "tspeng": [1043, 1044], "egashira": 1043, "rey": 1043, "puerta": 1043, "vishal": 1043, "vyom": [1043, 1044], "pathak": [1043, 1044], "wattai": 1043, "wchathura": 1043, "wen": 1043, "x110": 1043, "xuniu": 1043, "yanhong": 1043, "ef": 1043, "yusuf": [1043, 1044], "raji": [1043, 1044], "adil": 1043, "khwaja": 1043, "zeeshan": [1043, 1044], "lone": [1043, 1044], "27468": 1044, "27583": 1044, "paralel": 1044, "27573": 1044, "27580": 1044, "18488": 1044, "26814": 1044, "27044": 1044, "26913": 1044, "27167": 1044, "27243": 1044, "26602": 1044, "26521": 1044, "26748": 1044, "26600": 1044, "shreesha": [1044, 1045], "27002": 1044, "26416": 1044, "tao": 1044, "26772": 1044, "reintroduc": 1044, "26754": 1044, "26893": 1044, "senger": [1044, 1045], "26760": 1044, "26940": 1044, "26931": 1044, "26903": 1044, "roehr": 1044, "27292": 1044, "25196": 1044, "24871": 1044, "25752": 1044, "25438": 1044, "yotam": 1044, "avidar": 1044, "constantini": 1044, "26337": 1044, "25120": 1044, "27311": 1044, "25294": 1044, "25308": 1044, "25291": 1044, "25367": 1044, "25402": 1044, "25044": 1044, "smt": 1044, "26082": 1044, "24027": 1044, "25815": 1044, "24568": 1044, "26121": 1044, "25805": 1044, "26385": 1044, "26657": 1044, "binesh": 1044, "bannerje": 1044, "25251": 1044, "26503": 1044, "26286": 1044, "26323": 1044, "26033": 1044, "26108": 1044, "barth\u00e9lemi": 1044, "26433": 1044, "26386": 1044, "26551": 1044, "26579": 1044, "25784": 1044, "25490": 1044, "25956": 1044, "22409": 1044, "25177": 1044, "24882": 1044, "25186": 1044, "breve": 1044, "26318": 1044, "25506": 1044, "25601": 1044, "fidor": 1044, "25931": 1044, "25629": 1044, "26242": 1044, "toplak": 1044, "sckit": 1044, "25297": 1044, "24230": 1044, "25102": 1044, "25973": 1044, "25232": 1044, "26454": 1044, "25209": 1044, "26644": 1044, "lemo": 1044, "21809": 1044, "25732": 1044, "25190": 1044, "26207": 1044, "25587": 1044, "25697": 1044, "25214": 1044, "26653": 1044, "25531": 1044, "17388": 1044, "24769": 1044, "25713": 1044, "18723": 1044, "sahil": 1044, "24677": 1044, "24668": 1044, "dberenbaum": 1044, "25987": 1044, "26019": 1044, "25432": 1044, "25672": 1044, "lene": 1044, "preuss": 1044, "25299": 1044, "omarmanzoor": 1044, "26194": 1044, "26264": 1044, "barata": 1044, "onggo": 1044, "23099": 1044, "26021": 1044, "jiawei": 1044, "25659": 1044, "26333": 1044, "24140": 1044, "24076": 1044, "25417": 1044, "24083": 1044, "25443": 1044, "feature_union": 1044, "25093": 1044, "25220": 1044, "26325": 1044, "25334": 1044, "25677": 1044, "20524": 1044, "niuk": 1044, "23731": 1044, "24145": 1044, "22506": 1044, "24935": 1044, "seladu": 1044, "25257": 1044, "26424": 1044, "26400": 1044, "26566": 1044, "26093": 1044, "23595": 1044, "26376": 1044, "25387": 1044, "26289": 1044, "25813": 1044, "26106": 1044, "25814": 1044, "check_transformers_unfitted_stateless": 1044, "25733": 1044, "19664": 1044, "environmenterror": 1044, "ioerror": 1044, "windowserror": 1044, "26466": 1044, "kushwah": 1044, "handk": 1044, "adien": 1044, "mansouri": 1044, "alexl": 1044, "amai": 1044, "annegnx": 1044, "ansam": 1044, "zedan": 1044, "dutt": 1044, "aymericbasset": 1044, "tripramudya": 1044, "benedek": 1044, "harsanyi": 1044, "brevin": 1044, "kund": 1044, "troillard": 1044, "carla": 1044, "berenbaum": 1044, "proding": 1044, "butyugina": 1044, "elabonga": 1044, "atuo": 1044, "farhan": 1044, "hujiahong726": 1044, "ili": 1044, "jb": 1044, "mountford": 1044, "jessicakk0711": 1044, "joei": 1044, "hedlund": 1044, "linu": 1044, "fouquet": 1044, "harfouch": 1044, "mdarii": 1044, "murezzda": 1044, "nightwalkx": 1044, "nishu": 1044, "piontek": 1044, "pnucci": 1044, "sadra": 1044, "barikbin": 1044, "searchforpass": 1044, "seoeun": 1044, "th\u00e9ophil": 1044, "barang": 1044, "veghit": 1044, "vignesh": 1044, "vijeth": 1044, "moudgalya": 1044, "windiana42": 1044, "yuchen": 1044, "sooner": 1045, "26721": 1045, "27670": 1045, "27315": 1045, "26464": 1045, "26616": 1045, "cappuzzo": 1045, "Ines": 1045, "ibnukhsein": 1045, "boulard": 1045, "26648": 1045, "27538": 1045, "27308": 1045, "26789": 1045, "26896": 1045, "27058": 1045, "27005": 1045, "26525": 1045, "27490": 1045, "27500": 1045, "27389": 1045, "27478": 1045, "compute_optics_graph": 1045, "27104": 1045, "27250": 1045, "27179": 1045, "nurseit": 1045, "kamchyev": 1045, "27100": 1045, "virshup": 1045, "27239": 1045, "korobko": 1045, "27240": 1045, "27274": 1045, "27219": 1045, "27277": 1045, "27301": 1045, "lohit": 1045, "sundaramahalingam": 1045, "27252": 1045, "27166": 1045, "27314": 1045, "outliermixin": 1045, "26506": 1045, "correspondingli": 1045, "26831": 1045, "26786": 1045, "26909": 1045, "27185": 1045, "26744": 1045, "27204": 1045, "27438": 1045, "27718": 1045, "26634": 1045, "landeau": 1045, "vigni": 1045, "26315": 1045, "27098": 1045, "27431": 1045, "sok\u00f3\u0142": 1045, "sparrai": 1045, "spmatrix": 1045, "70x": 1045, "tarashanski": 1045, "scanpi": 1045, "scvers": 1045, "18689": 1045, "26391": 1045, "26411": 1045, "13649": 1045, "reilli": 1045, "27139": 1045, "26278": 1045, "26957": 1045, "26830": 1045, "26736": 1045, "21807": 1045, "27291": 1045, "27417": 1045, "27624": 1045, "5x": 1045, "26765": 1045, "27006": 1045, "26366": 1045, "mojdeh": 1045, "rastgoo": 1045, "neg_root_mean_squared_log_error_scor": 1045, "26734": 1045, "27137": 1045, "26840": 1045, "27650": 1045, "26855": 1045, "26299": 1045, "27018": 1045, "26267": 1045, "26828": 1045, "23317": 1045, "26243": 1045, "27110": 1045, "27556": 1045, "27558": 1045, "27017": 1045, "xuefeng": 1045, "26944": 1045, "26674": 1045, "27309": 1045, "27328": 1045, "26862": 1045, "goh": 1045, "yisheng": 1045, "dia": 1045, "datastuctur": 1045, "27372": 1045, "27601": 1045, "may_share_memori": 1045, "27336": 1045, "log_logist": 1045, "logaddexp": 1045, "27544": 1045, "check_estimators_pickl": 1045, "readonly_memmap": 1045, "misdetect": 1045, "27614": 1045, "27757": 1045}, "objects": {"": [[405, 0, 0, "-", "sklearn"]], "sklearn": [[405, 0, 0, "-", "base"], [405, 0, 0, "-", "calibration"], [405, 0, 0, "-", "cluster"], [405, 0, 0, "-", "compose"], [465, 4, 1, "", "config_context"], [405, 0, 0, "-", "covariance"], [405, 0, 0, "-", "cross_decomposition"], [405, 0, 0, "-", "datasets"], [405, 0, 0, "-", "decomposition"], [405, 0, 0, "-", "discriminant_analysis"], [405, 0, 0, "-", "dummy"], [405, 0, 0, "-", "ensemble"], [405, 0, 0, "-", "exceptions"], [405, 0, 0, "-", "experimental"], [405, 0, 0, "-", "feature_extraction"], [405, 0, 0, "-", "feature_selection"], [405, 0, 0, "-", "gaussian_process"], [623, 4, 1, "", "get_config"], [405, 0, 0, "-", "impute"], [405, 0, 0, "-", "inspection"], [405, 0, 0, "-", "isotonic"], [405, 0, 0, "-", "kernel_approximation"], [405, 0, 0, "-", "kernel_ridge"], [405, 0, 0, "-", "linear_model"], [405, 0, 0, "-", "manifold"], [405, 0, 0, "-", "metrics"], [405, 0, 0, "-", "mixture"], [405, 0, 0, "-", "model_selection"], [405, 0, 0, "-", "multiclass"], [405, 0, 0, "-", "multioutput"], [405, 0, 0, "-", "naive_bayes"], [405, 0, 0, "-", "neighbors"], [405, 0, 0, "-", "neural_network"], [405, 0, 0, "-", "pipeline"], [405, 0, 0, "-", "preprocessing"], [405, 0, 0, "-", "random_projection"], [405, 0, 0, "-", "semi_supervised"], [896, 4, 1, "", "set_config"], [897, 4, 1, "", "show_versions"], [405, 0, 0, "-", "svm"], [405, 0, 0, "-", "tree"], [405, 0, 0, "-", "utils"]], "sklearn.base": [[420, 1, 1, "", "BaseEstimator"], [421, 1, 1, "", "BiclusterMixin"], [422, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [423, 1, 1, "", "ClassifierMixin"], [424, 1, 1, "", "ClusterMixin"], [425, 1, 1, "", "DensityMixin"], [426, 1, 1, "", "MetaEstimatorMixin"], [427, 1, 1, "", "OneToOneFeatureMixin"], [428, 1, 1, "", "OutlierMixin"], [429, 1, 1, "", "RegressorMixin"], [430, 1, 1, "", "TransformerMixin"], [431, 4, 1, "", "clone"], [432, 4, 1, "", "is_classifier"], [433, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[420, 2, 1, "", "get_metadata_routing"], [420, 2, 1, "", "get_params"], [420, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[421, 3, 1, "", "biclusters_"], [421, 2, 1, "", "get_indices"], [421, 2, 1, "", "get_shape"], [421, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[422, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[423, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[424, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[425, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[427, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[428, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[429, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[430, 2, 1, "", "fit_transform"], [430, 2, 1, "", "set_output"]], "sklearn.calibration": [[434, 1, 1, "", "CalibratedClassifierCV"], [435, 1, 1, "", "CalibrationDisplay"], [436, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[434, 2, 1, "", "fit"], [434, 2, 1, "", "get_metadata_routing"], [434, 2, 1, "", "get_params"], [434, 2, 1, "", "predict"], [434, 2, 1, "", "predict_proba"], [434, 2, 1, "", "score"], [434, 2, 1, "", "set_fit_request"], [434, 2, 1, "", "set_params"], [434, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[435, 2, 1, "", "from_estimator"], [435, 2, 1, "", "from_predictions"], [435, 2, 1, "", "plot"]], "sklearn.cluster": [[437, 1, 1, "", "AffinityPropagation"], [438, 1, 1, "", "AgglomerativeClustering"], [439, 1, 1, "", "Birch"], [440, 1, 1, "", "BisectingKMeans"], [441, 1, 1, "", "DBSCAN"], [442, 1, 1, "", "FeatureAgglomeration"], [443, 1, 1, "", "HDBSCAN"], [444, 1, 1, "", "KMeans"], [445, 1, 1, "", "MeanShift"], [446, 1, 1, "", "MiniBatchKMeans"], [447, 1, 1, "", "OPTICS"], [448, 1, 1, "", "SpectralBiclustering"], [449, 1, 1, "", "SpectralClustering"], [450, 1, 1, "", "SpectralCoclustering"], [451, 4, 1, "", "affinity_propagation"], [452, 4, 1, "", "cluster_optics_dbscan"], [453, 4, 1, "", "cluster_optics_xi"], [454, 4, 1, "", "compute_optics_graph"], [417, 4, 1, "", "dbscan"], [455, 4, 1, "", "estimate_bandwidth"], [456, 4, 1, "", "k_means"], [457, 4, 1, "", "kmeans_plusplus"], [458, 4, 1, "", "mean_shift"], [459, 4, 1, "", "spectral_clustering"], [460, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "fit_predict"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "predict"], [437, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[438, 2, 1, "", "fit"], [438, 2, 1, "", "fit_predict"], [438, 2, 1, "", "get_metadata_routing"], [438, 2, 1, "", "get_params"], [438, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[439, 2, 1, "", "fit"], [439, 2, 1, "", "fit_predict"], [439, 2, 1, "", "fit_transform"], [439, 2, 1, "", "get_feature_names_out"], [439, 2, 1, "", "get_metadata_routing"], [439, 2, 1, "", "get_params"], [439, 2, 1, "", "partial_fit"], [439, 2, 1, "", "predict"], [439, 2, 1, "", "set_output"], [439, 2, 1, "", "set_params"], [439, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "fit_transform"], [440, 2, 1, "", "get_feature_names_out"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "score"], [440, 2, 1, "", "set_fit_request"], [440, 2, 1, "", "set_output"], [440, 2, 1, "", "set_params"], [440, 2, 1, "", "set_predict_request"], [440, 2, 1, "", "set_score_request"], [440, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "set_fit_request"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[442, 2, 1, "", "fit"], [442, 3, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "inverse_transform"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[443, 2, 1, "", "dbscan_clustering"], [443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "fit_transform"], [444, 2, 1, "", "get_feature_names_out"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "predict"], [444, 2, 1, "", "score"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_output"], [444, 2, 1, "", "set_params"], [444, 2, 1, "", "set_predict_request"], [444, 2, 1, "", "set_score_request"], [444, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[445, 2, 1, "", "fit"], [445, 2, 1, "", "fit_predict"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "predict"], [445, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "fit_transform"], [446, 2, 1, "", "get_feature_names_out"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "partial_fit"], [446, 2, 1, "", "predict"], [446, 2, 1, "", "score"], [446, 2, 1, "", "set_fit_request"], [446, 2, 1, "", "set_output"], [446, 2, 1, "", "set_params"], [446, 2, 1, "", "set_partial_fit_request"], [446, 2, 1, "", "set_predict_request"], [446, 2, 1, "", "set_score_request"], [446, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[448, 3, 1, "", "biclusters_"], [448, 2, 1, "", "fit"], [448, 2, 1, "", "get_indices"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "get_shape"], [448, 2, 1, "", "get_submatrix"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[450, 3, 1, "", "biclusters_"], [450, 2, 1, "", "fit"], [450, 2, 1, "", "get_indices"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "get_shape"], [450, 2, 1, "", "get_submatrix"], [450, 2, 1, "", "set_params"]], "sklearn.compose": [[461, 1, 1, "", "ColumnTransformer"], [462, 1, 1, "", "TransformedTargetRegressor"], [463, 4, 1, "", "make_column_selector"], [464, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[461, 2, 1, "", "fit"], [461, 2, 1, "", "fit_transform"], [461, 2, 1, "", "get_feature_names_out"], [461, 2, 1, "", "get_metadata_routing"], [461, 2, 1, "", "get_params"], [461, 3, 1, "", "named_transformers_"], [461, 2, 1, "", "set_output"], [461, 2, 1, "", "set_params"], [461, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[462, 2, 1, "", "fit"], [462, 2, 1, "", "get_metadata_routing"], [462, 2, 1, "", "get_params"], [462, 3, 1, "", "n_features_in_"], [462, 2, 1, "", "predict"], [462, 2, 1, "", "score"], [462, 2, 1, "", "set_params"], [462, 2, 1, "", "set_score_request"]], "sklearn.covariance": [[466, 1, 1, "", "EllipticEnvelope"], [467, 1, 1, "", "EmpiricalCovariance"], [468, 1, 1, "", "GraphicalLasso"], [469, 1, 1, "", "GraphicalLassoCV"], [470, 1, 1, "", "LedoitWolf"], [471, 1, 1, "", "MinCovDet"], [472, 1, 1, "", "OAS"], [473, 1, 1, "", "ShrunkCovariance"], [474, 4, 1, "", "empirical_covariance"], [475, 4, 1, "", "graphical_lasso"], [476, 4, 1, "", "ledoit_wolf"], [477, 4, 1, "", "ledoit_wolf_shrinkage"], [419, 4, 1, "", "oas"], [478, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[466, 2, 1, "", "correct_covariance"], [466, 2, 1, "", "decision_function"], [466, 2, 1, "", "error_norm"], [466, 2, 1, "", "fit"], [466, 2, 1, "", "fit_predict"], [466, 2, 1, "", "get_metadata_routing"], [466, 2, 1, "", "get_params"], [466, 2, 1, "", "get_precision"], [466, 2, 1, "", "mahalanobis"], [466, 2, 1, "", "predict"], [466, 2, 1, "", "reweight_covariance"], [466, 2, 1, "", "score"], [466, 2, 1, "", "score_samples"], [466, 2, 1, "", "set_params"], [466, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[467, 2, 1, "", "error_norm"], [467, 2, 1, "", "fit"], [467, 2, 1, "", "get_metadata_routing"], [467, 2, 1, "", "get_params"], [467, 2, 1, "", "get_precision"], [467, 2, 1, "", "mahalanobis"], [467, 2, 1, "", "score"], [467, 2, 1, "", "set_params"], [467, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[468, 2, 1, "", "error_norm"], [468, 2, 1, "", "fit"], [468, 2, 1, "", "get_metadata_routing"], [468, 2, 1, "", "get_params"], [468, 2, 1, "", "get_precision"], [468, 2, 1, "", "mahalanobis"], [468, 2, 1, "", "score"], [468, 2, 1, "", "set_params"], [468, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "score"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[471, 2, 1, "", "correct_covariance"], [471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "reweight_covariance"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[479, 1, 1, "", "CCA"], [480, 1, 1, "", "PLSCanonical"], [481, 1, 1, "", "PLSRegression"], [482, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[479, 2, 1, "", "fit"], [479, 2, 1, "", "fit_transform"], [479, 2, 1, "", "get_feature_names_out"], [479, 2, 1, "", "get_metadata_routing"], [479, 2, 1, "", "get_params"], [479, 2, 1, "", "inverse_transform"], [479, 2, 1, "", "predict"], [479, 2, 1, "", "score"], [479, 2, 1, "", "set_output"], [479, 2, 1, "", "set_params"], [479, 2, 1, "", "set_predict_request"], [479, 2, 1, "", "set_score_request"], [479, 2, 1, "", "set_transform_request"], [479, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[480, 2, 1, "", "fit"], [480, 2, 1, "", "fit_transform"], [480, 2, 1, "", "get_feature_names_out"], [480, 2, 1, "", "get_metadata_routing"], [480, 2, 1, "", "get_params"], [480, 2, 1, "", "inverse_transform"], [480, 2, 1, "", "predict"], [480, 2, 1, "", "score"], [480, 2, 1, "", "set_output"], [480, 2, 1, "", "set_params"], [480, 2, 1, "", "set_predict_request"], [480, 2, 1, "", "set_score_request"], [480, 2, 1, "", "set_transform_request"], [480, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[481, 2, 1, "", "fit"], [481, 2, 1, "", "fit_transform"], [481, 2, 1, "", "get_feature_names_out"], [481, 2, 1, "", "get_metadata_routing"], [481, 2, 1, "", "get_params"], [481, 2, 1, "", "inverse_transform"], [481, 2, 1, "", "predict"], [481, 2, 1, "", "score"], [481, 2, 1, "", "set_output"], [481, 2, 1, "", "set_params"], [481, 2, 1, "", "set_predict_request"], [481, 2, 1, "", "set_score_request"], [481, 2, 1, "", "set_transform_request"], [481, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "transform"]], "sklearn.datasets": [[483, 4, 1, "", "clear_data_home"], [484, 4, 1, "", "dump_svmlight_file"], [485, 4, 1, "", "fetch_20newsgroups"], [486, 4, 1, "", "fetch_20newsgroups_vectorized"], [487, 4, 1, "", "fetch_california_housing"], [488, 4, 1, "", "fetch_covtype"], [489, 4, 1, "", "fetch_kddcup99"], [490, 4, 1, "", "fetch_lfw_pairs"], [491, 4, 1, "", "fetch_lfw_people"], [492, 4, 1, "", "fetch_olivetti_faces"], [493, 4, 1, "", "fetch_openml"], [494, 4, 1, "", "fetch_rcv1"], [495, 4, 1, "", "fetch_species_distributions"], [496, 4, 1, "", "get_data_home"], [497, 4, 1, "", "load_breast_cancer"], [498, 4, 1, "", "load_diabetes"], [499, 4, 1, "", "load_digits"], [500, 4, 1, "", "load_files"], [501, 4, 1, "", "load_iris"], [502, 4, 1, "", "load_linnerud"], [503, 4, 1, "", "load_sample_image"], [504, 4, 1, "", "load_sample_images"], [505, 4, 1, "", "load_svmlight_file"], [506, 4, 1, "", "load_svmlight_files"], [507, 4, 1, "", "load_wine"], [508, 4, 1, "", "make_biclusters"], [509, 4, 1, "", "make_blobs"], [510, 4, 1, "", "make_checkerboard"], [511, 4, 1, "", "make_circles"], [512, 4, 1, "", "make_classification"], [513, 4, 1, "", "make_friedman1"], [514, 4, 1, "", "make_friedman2"], [515, 4, 1, "", "make_friedman3"], [516, 4, 1, "", "make_gaussian_quantiles"], [517, 4, 1, "", "make_hastie_10_2"], [518, 4, 1, "", "make_low_rank_matrix"], [519, 4, 1, "", "make_moons"], [520, 4, 1, "", "make_multilabel_classification"], [521, 4, 1, "", "make_regression"], [522, 4, 1, "", "make_s_curve"], [523, 4, 1, "", "make_sparse_coded_signal"], [524, 4, 1, "", "make_sparse_spd_matrix"], [525, 4, 1, "", "make_sparse_uncorrelated"], [526, 4, 1, "", "make_spd_matrix"], [527, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[528, 1, 1, "", "DictionaryLearning"], [529, 1, 1, "", "FactorAnalysis"], [530, 1, 1, "", "FastICA"], [531, 1, 1, "", "IncrementalPCA"], [532, 1, 1, "", "KernelPCA"], [533, 1, 1, "", "LatentDirichletAllocation"], [534, 1, 1, "", "MiniBatchDictionaryLearning"], [535, 1, 1, "", "MiniBatchNMF"], [536, 1, 1, "", "MiniBatchSparsePCA"], [537, 1, 1, "", "NMF"], [538, 1, 1, "", "PCA"], [539, 1, 1, "", "SparseCoder"], [540, 1, 1, "", "SparsePCA"], [541, 1, 1, "", "TruncatedSVD"], [542, 4, 1, "", "dict_learning"], [543, 4, 1, "", "dict_learning_online"], [418, 4, 1, "", "fastica"], [544, 4, 1, "", "non_negative_factorization"], [545, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[528, 2, 1, "", "fit"], [528, 2, 1, "", "fit_transform"], [528, 2, 1, "", "get_feature_names_out"], [528, 2, 1, "", "get_metadata_routing"], [528, 2, 1, "", "get_params"], [528, 2, 1, "", "set_output"], [528, 2, 1, "", "set_params"], [528, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[529, 2, 1, "", "fit"], [529, 2, 1, "", "fit_transform"], [529, 2, 1, "", "get_covariance"], [529, 2, 1, "", "get_feature_names_out"], [529, 2, 1, "", "get_metadata_routing"], [529, 2, 1, "", "get_params"], [529, 2, 1, "", "get_precision"], [529, 2, 1, "", "score"], [529, 2, 1, "", "score_samples"], [529, 2, 1, "", "set_output"], [529, 2, 1, "", "set_params"], [529, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[530, 2, 1, "", "fit"], [530, 2, 1, "", "fit_transform"], [530, 2, 1, "", "get_feature_names_out"], [530, 2, 1, "", "get_metadata_routing"], [530, 2, 1, "", "get_params"], [530, 2, 1, "", "inverse_transform"], [530, 2, 1, "", "set_inverse_transform_request"], [530, 2, 1, "", "set_output"], [530, 2, 1, "", "set_params"], [530, 2, 1, "", "set_transform_request"], [530, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[531, 2, 1, "", "fit"], [531, 2, 1, "", "fit_transform"], [531, 2, 1, "", "get_covariance"], [531, 2, 1, "", "get_feature_names_out"], [531, 2, 1, "", "get_metadata_routing"], [531, 2, 1, "", "get_params"], [531, 2, 1, "", "get_precision"], [531, 2, 1, "", "inverse_transform"], [531, 2, 1, "", "partial_fit"], [531, 2, 1, "", "set_output"], [531, 2, 1, "", "set_params"], [531, 2, 1, "", "set_partial_fit_request"], [531, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "inverse_transform"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "partial_fit"], [533, 2, 1, "", "perplexity"], [533, 2, 1, "", "score"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "partial_fit"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "partial_fit"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "set_partial_fit_request"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "inverse_transform"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_covariance"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "get_precision"], [538, 2, 1, "", "inverse_transform"], [538, 2, 1, "", "score"], [538, 2, 1, "", "score_samples"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 3, 1, "", "n_components_"], [539, 3, 1, "", "n_features_in_"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[546, 1, 1, "", "LinearDiscriminantAnalysis"], [547, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[546, 2, 1, "", "decision_function"], [546, 2, 1, "", "fit"], [546, 2, 1, "", "fit_transform"], [546, 2, 1, "", "get_feature_names_out"], [546, 2, 1, "", "get_metadata_routing"], [546, 2, 1, "", "get_params"], [546, 2, 1, "", "predict"], [546, 2, 1, "", "predict_log_proba"], [546, 2, 1, "", "predict_proba"], [546, 2, 1, "", "score"], [546, 2, 1, "", "set_output"], [546, 2, 1, "", "set_params"], [546, 2, 1, "", "set_score_request"], [546, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[547, 2, 1, "", "decision_function"], [547, 2, 1, "", "fit"], [547, 2, 1, "", "get_metadata_routing"], [547, 2, 1, "", "get_params"], [547, 2, 1, "", "predict"], [547, 2, 1, "", "predict_log_proba"], [547, 2, 1, "", "predict_proba"], [547, 2, 1, "", "score"], [547, 2, 1, "", "set_params"], [547, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[548, 1, 1, "", "DummyClassifier"], [549, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[548, 2, 1, "", "fit"], [548, 2, 1, "", "get_metadata_routing"], [548, 2, 1, "", "get_params"], [548, 2, 1, "", "predict"], [548, 2, 1, "", "predict_log_proba"], [548, 2, 1, "", "predict_proba"], [548, 2, 1, "", "score"], [548, 2, 1, "", "set_fit_request"], [548, 2, 1, "", "set_params"], [548, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[549, 2, 1, "", "fit"], [549, 2, 1, "", "get_metadata_routing"], [549, 2, 1, "", "get_params"], [549, 2, 1, "", "predict"], [549, 2, 1, "", "score"], [549, 2, 1, "", "set_fit_request"], [549, 2, 1, "", "set_params"], [549, 2, 1, "", "set_predict_request"], [549, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[550, 1, 1, "", "AdaBoostClassifier"], [551, 1, 1, "", "AdaBoostRegressor"], [552, 1, 1, "", "BaggingClassifier"], [553, 1, 1, "", "BaggingRegressor"], [554, 1, 1, "", "ExtraTreesClassifier"], [555, 1, 1, "", "ExtraTreesRegressor"], [556, 1, 1, "", "GradientBoostingClassifier"], [557, 1, 1, "", "GradientBoostingRegressor"], [558, 1, 1, "", "HistGradientBoostingClassifier"], [559, 1, 1, "", "HistGradientBoostingRegressor"], [560, 1, 1, "", "IsolationForest"], [561, 1, 1, "", "RandomForestClassifier"], [562, 1, 1, "", "RandomForestRegressor"], [563, 1, 1, "", "RandomTreesEmbedding"], [564, 1, 1, "", "StackingClassifier"], [565, 1, 1, "", "StackingRegressor"], [566, 1, 1, "", "VotingClassifier"], [567, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[550, 3, 1, "", "base_estimator_"], [550, 2, 1, "", "decision_function"], [550, 3, 1, "", "feature_importances_"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_fit_request"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"], [550, 2, 1, "", "staged_decision_function"], [550, 2, 1, "", "staged_predict"], [550, 2, 1, "", "staged_predict_proba"], [550, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[551, 3, 1, "", "base_estimator_"], [551, 3, 1, "", "feature_importances_"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_fit_request"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"], [551, 2, 1, "", "staged_predict"], [551, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[552, 3, 1, "", "base_estimator_"], [552, 2, 1, "", "decision_function"], [552, 3, 1, "", "estimators_samples_"], [552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_log_proba"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[553, 3, 1, "", "base_estimator_"], [553, 3, 1, "", "estimators_samples_"], [553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[554, 2, 1, "", "apply"], [554, 3, 1, "", "base_estimator_"], [554, 2, 1, "", "decision_path"], [554, 3, 1, "", "estimators_samples_"], [554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[555, 2, 1, "", "apply"], [555, 3, 1, "", "base_estimator_"], [555, 2, 1, "", "decision_path"], [555, 3, 1, "", "estimators_samples_"], [555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[556, 2, 1, "", "apply"], [556, 3, 1, "", "base_estimator_"], [556, 2, 1, "", "decision_function"], [556, 3, 1, "", "feature_importances_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"], [556, 2, 1, "", "staged_decision_function"], [556, 2, 1, "", "staged_predict"], [556, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[557, 2, 1, "", "apply"], [557, 3, 1, "", "base_estimator_"], [557, 3, 1, "", "feature_importances_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"], [557, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[558, 2, 1, "", "decision_function"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 3, 1, "", "n_iter_"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"], [558, 2, 1, "", "staged_decision_function"], [558, 2, 1, "", "staged_predict"], [558, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 3, 1, "", "n_iter_"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"], [559, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[560, 3, 1, "", "base_estimator_"], [560, 2, 1, "", "decision_function"], [560, 3, 1, "", "estimators_samples_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "fit_predict"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "score_samples"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[561, 2, 1, "", "apply"], [561, 3, 1, "", "base_estimator_"], [561, 2, 1, "", "decision_path"], [561, 3, 1, "", "estimators_samples_"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "predict_log_proba"], [561, 2, 1, "", "predict_proba"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[562, 2, 1, "", "apply"], [562, 3, 1, "", "base_estimator_"], [562, 2, 1, "", "decision_path"], [562, 3, 1, "", "estimators_samples_"], [562, 3, 1, "", "feature_importances_"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[563, 2, 1, "", "apply"], [563, 3, 1, "", "base_estimator_"], [563, 2, 1, "", "decision_path"], [563, 3, 1, "", "estimators_samples_"], [563, 3, 1, "", "feature_importances_"], [563, 2, 1, "", "fit"], [563, 2, 1, "", "fit_transform"], [563, 2, 1, "", "get_feature_names_out"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_output"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[564, 2, 1, "", "decision_function"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_transform"], [564, 2, 1, "", "get_feature_names_out"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 3, 1, "", "n_features_in_"], [564, 3, 1, "", "named_estimators"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "predict_proba"], [564, 2, 1, "", "score"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_output"], [564, 2, 1, "", "set_params"], [564, 2, 1, "", "set_score_request"], [564, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[565, 2, 1, "", "fit"], [565, 2, 1, "", "fit_transform"], [565, 2, 1, "", "get_feature_names_out"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 3, 1, "", "n_features_in_"], [565, 3, 1, "", "named_estimators"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_output"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"], [565, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[566, 2, 1, "", "fit"], [566, 2, 1, "", "fit_transform"], [566, 2, 1, "", "get_feature_names_out"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 3, 1, "", "n_features_in_"], [566, 3, 1, "", "named_estimators"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "predict_proba"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_output"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"], [566, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 3, 1, "", "n_features_in_"], [567, 3, 1, "", "named_estimators"], [567, 2, 1, "", "predict"], [567, 2, 1, "", "score"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "set_score_request"], [567, 2, 1, "", "transform"]], "sklearn.exceptions": [[568, 1, 1, "", "ConvergenceWarning"], [569, 1, 1, "", "DataConversionWarning"], [570, 1, 1, "", "DataDimensionalityWarning"], [571, 1, 1, "", "EfficiencyWarning"], [572, 1, 1, "", "FitFailedWarning"], [573, 1, 1, "", "InconsistentVersionWarning"], [574, 1, 1, "", "NotFittedError"], [575, 1, 1, "", "UndefinedMetricWarning"]], "sklearn.exceptions.ConvergenceWarning": [[568, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataConversionWarning": [[569, 2, 1, "", "with_traceback"]], "sklearn.exceptions.DataDimensionalityWarning": [[570, 2, 1, "", "with_traceback"]], "sklearn.exceptions.EfficiencyWarning": [[571, 2, 1, "", "with_traceback"]], "sklearn.exceptions.FitFailedWarning": [[572, 2, 1, "", "with_traceback"]], "sklearn.exceptions.InconsistentVersionWarning": [[573, 2, 1, "", "with_traceback"]], "sklearn.exceptions.NotFittedError": [[574, 2, 1, "", "with_traceback"]], "sklearn.exceptions.UndefinedMetricWarning": [[575, 2, 1, "", "with_traceback"]], "sklearn.experimental": [[576, 0, 0, "-", "enable_halving_search_cv"], [577, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[578, 1, 1, "", "DictVectorizer"], [579, 1, 1, "", "FeatureHasher"], [405, 0, 0, "-", "image"], [405, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[578, 2, 1, "", "fit"], [578, 2, 1, "", "fit_transform"], [578, 2, 1, "", "get_feature_names_out"], [578, 2, 1, "", "get_metadata_routing"], [578, 2, 1, "", "get_params"], [578, 2, 1, "", "inverse_transform"], [578, 2, 1, "", "restrict"], [578, 2, 1, "", "set_inverse_transform_request"], [578, 2, 1, "", "set_output"], [578, 2, 1, "", "set_params"], [578, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[579, 2, 1, "", "fit"], [579, 2, 1, "", "fit_transform"], [579, 2, 1, "", "get_metadata_routing"], [579, 2, 1, "", "get_params"], [579, 2, 1, "", "set_output"], [579, 2, 1, "", "set_params"], [579, 2, 1, "", "set_transform_request"], [579, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[580, 1, 1, "", "PatchExtractor"], [581, 4, 1, "", "extract_patches_2d"], [582, 4, 1, "", "grid_to_graph"], [583, 4, 1, "", "img_to_graph"], [584, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[580, 2, 1, "", "fit"], [580, 2, 1, "", "fit_transform"], [580, 2, 1, "", "get_metadata_routing"], [580, 2, 1, "", "get_params"], [580, 2, 1, "", "set_output"], [580, 2, 1, "", "set_params"], [580, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[585, 1, 1, "", "CountVectorizer"], [586, 1, 1, "", "HashingVectorizer"], [587, 1, 1, "", "TfidfTransformer"], [588, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[585, 2, 1, "", "build_analyzer"], [585, 2, 1, "", "build_preprocessor"], [585, 2, 1, "", "build_tokenizer"], [585, 2, 1, "", "decode"], [585, 2, 1, "", "fit"], [585, 2, 1, "", "fit_transform"], [585, 2, 1, "", "get_feature_names_out"], [585, 2, 1, "", "get_metadata_routing"], [585, 2, 1, "", "get_params"], [585, 2, 1, "", "get_stop_words"], [585, 2, 1, "", "inverse_transform"], [585, 2, 1, "", "set_fit_request"], [585, 2, 1, "", "set_params"], [585, 2, 1, "", "set_transform_request"], [585, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[586, 2, 1, "", "build_analyzer"], [586, 2, 1, "", "build_preprocessor"], [586, 2, 1, "", "build_tokenizer"], [586, 2, 1, "", "decode"], [586, 2, 1, "", "fit"], [586, 2, 1, "", "fit_transform"], [586, 2, 1, "", "get_metadata_routing"], [586, 2, 1, "", "get_params"], [586, 2, 1, "", "get_stop_words"], [586, 2, 1, "", "partial_fit"], [586, 2, 1, "", "set_output"], [586, 2, 1, "", "set_params"], [586, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[587, 2, 1, "", "fit"], [587, 2, 1, "", "fit_transform"], [587, 2, 1, "", "get_feature_names_out"], [587, 2, 1, "", "get_metadata_routing"], [587, 2, 1, "", "get_params"], [587, 3, 1, "", "idf_"], [587, 2, 1, "", "set_output"], [587, 2, 1, "", "set_params"], [587, 2, 1, "", "set_transform_request"], [587, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[588, 2, 1, "", "build_analyzer"], [588, 2, 1, "", "build_preprocessor"], [588, 2, 1, "", "build_tokenizer"], [588, 2, 1, "", "decode"], [588, 2, 1, "", "fit"], [588, 2, 1, "", "fit_transform"], [588, 2, 1, "", "get_feature_names_out"], [588, 2, 1, "", "get_metadata_routing"], [588, 2, 1, "", "get_params"], [588, 2, 1, "", "get_stop_words"], [588, 3, 1, "", "idf_"], [588, 2, 1, "", "inverse_transform"], [588, 2, 1, "", "set_fit_request"], [588, 2, 1, "", "set_params"], [588, 2, 1, "", "set_transform_request"], [588, 2, 1, "", "transform"]], "sklearn.feature_selection": [[589, 1, 1, "", "GenericUnivariateSelect"], [590, 1, 1, "", "RFE"], [591, 1, 1, "", "RFECV"], [592, 1, 1, "", "SelectFdr"], [593, 1, 1, "", "SelectFpr"], [594, 1, 1, "", "SelectFromModel"], [595, 1, 1, "", "SelectFwe"], [596, 1, 1, "", "SelectKBest"], [597, 1, 1, "", "SelectPercentile"], [598, 1, 1, "", "SelectorMixin"], [599, 1, 1, "", "SequentialFeatureSelector"], [600, 1, 1, "", "VarianceThreshold"], [601, 4, 1, "", "chi2"], [602, 4, 1, "", "f_classif"], [603, 4, 1, "", "f_regression"], [604, 4, 1, "", "mutual_info_classif"], [605, 4, 1, "", "mutual_info_regression"], [606, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_support"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_output"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[590, 3, 1, "", "classes_"], [590, 2, 1, "", "decision_function"], [590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_feature_names_out"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_support"], [590, 2, 1, "", "inverse_transform"], [590, 2, 1, "", "predict"], [590, 2, 1, "", "predict_log_proba"], [590, 2, 1, "", "predict_proba"], [590, 2, 1, "", "score"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[591, 3, 1, "", "classes_"], [591, 2, 1, "", "decision_function"], [591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "get_support"], [591, 2, 1, "", "inverse_transform"], [591, 2, 1, "", "predict"], [591, 2, 1, "", "predict_log_proba"], [591, 2, 1, "", "predict_proba"], [591, 2, 1, "", "score"], [591, 2, 1, "", "set_fit_request"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_support"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_output"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 3, 1, "", "n_features_in_"], [594, 2, 1, "", "partial_fit"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 3, 1, "", "threshold_"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[607, 1, 1, "", "GaussianProcessClassifier"], [608, 1, 1, "", "GaussianProcessRegressor"], [405, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[607, 2, 1, "", "fit"], [607, 2, 1, "", "get_metadata_routing"], [607, 2, 1, "", "get_params"], [607, 3, 1, "", "kernel_"], [607, 2, 1, "", "log_marginal_likelihood"], [607, 2, 1, "", "predict"], [607, 2, 1, "", "predict_proba"], [607, 2, 1, "", "score"], [607, 2, 1, "", "set_params"], [607, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[608, 2, 1, "", "fit"], [608, 2, 1, "", "get_metadata_routing"], [608, 2, 1, "", "get_params"], [608, 2, 1, "", "log_marginal_likelihood"], [608, 2, 1, "", "predict"], [608, 2, 1, "", "sample_y"], [608, 2, 1, "", "score"], [608, 2, 1, "", "set_params"], [608, 2, 1, "", "set_predict_request"], [608, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[609, 1, 1, "", "CompoundKernel"], [610, 1, 1, "", "ConstantKernel"], [611, 1, 1, "", "DotProduct"], [612, 1, 1, "", "ExpSineSquared"], [613, 1, 1, "", "Exponentiation"], [614, 1, 1, "", "Hyperparameter"], [615, 1, 1, "", "Kernel"], [616, 1, 1, "", "Matern"], [617, 1, 1, "", "PairwiseKernel"], [618, 1, 1, "", "Product"], [619, 1, 1, "", "RBF"], [620, 1, 1, "", "RationalQuadratic"], [621, 1, 1, "", "Sum"], [622, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[609, 2, 1, "", "__call__"], [609, 3, 1, "", "bounds"], [609, 2, 1, "", "clone_with_theta"], [609, 2, 1, "", "diag"], [609, 2, 1, "", "get_params"], [609, 3, 1, "", "hyperparameters"], [609, 2, 1, "", "is_stationary"], [609, 3, 1, "", "n_dims"], [609, 3, 1, "", "requires_vector_input"], [609, 2, 1, "", "set_params"], [609, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[610, 2, 1, "", "__call__"], [610, 3, 1, "", "bounds"], [610, 2, 1, "", "clone_with_theta"], [610, 2, 1, "", "diag"], [610, 2, 1, "", "get_params"], [610, 3, 1, "", "hyperparameters"], [610, 2, 1, "", "is_stationary"], [610, 3, 1, "", "n_dims"], [610, 3, 1, "", "requires_vector_input"], [610, 2, 1, "", "set_params"], [610, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[611, 2, 1, "", "__call__"], [611, 3, 1, "", "bounds"], [611, 2, 1, "", "clone_with_theta"], [611, 2, 1, "", "diag"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "hyperparameters"], [611, 2, 1, "", "is_stationary"], [611, 3, 1, "", "n_dims"], [611, 3, 1, "", "requires_vector_input"], [611, 2, 1, "", "set_params"], [611, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[612, 2, 1, "", "__call__"], [612, 3, 1, "", "bounds"], [612, 2, 1, "", "clone_with_theta"], [612, 2, 1, "", "diag"], [612, 2, 1, "", "get_params"], [612, 3, 1, "", "hyperparameter_length_scale"], [612, 3, 1, "", "hyperparameters"], [612, 2, 1, "", "is_stationary"], [612, 3, 1, "", "n_dims"], [612, 3, 1, "", "requires_vector_input"], [612, 2, 1, "", "set_params"], [612, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[614, 2, 1, "", "__call__"], [614, 5, 1, "", "bounds"], [614, 2, 1, "", "count"], [614, 5, 1, "", "fixed"], [614, 2, 1, "", "index"], [614, 5, 1, "", "n_elements"], [614, 5, 1, "", "name"], [614, 5, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[618, 2, 1, "", "__call__"], [618, 3, 1, "", "bounds"], [618, 2, 1, "", "clone_with_theta"], [618, 2, 1, "", "diag"], [618, 2, 1, "", "get_params"], [618, 3, 1, "", "hyperparameters"], [618, 2, 1, "", "is_stationary"], [618, 3, 1, "", "n_dims"], [618, 3, 1, "", "requires_vector_input"], [618, 2, 1, "", "set_params"], [618, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.impute": [[624, 1, 1, "", "IterativeImputer"], [625, 1, 1, "", "KNNImputer"], [626, 1, 1, "", "MissingIndicator"], [627, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[624, 2, 1, "", "fit"], [624, 2, 1, "", "fit_transform"], [624, 2, 1, "", "get_feature_names_out"], [624, 2, 1, "", "get_metadata_routing"], [624, 2, 1, "", "get_params"], [624, 2, 1, "", "set_output"], [624, 2, 1, "", "set_params"], [624, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[625, 2, 1, "", "fit"], [625, 2, 1, "", "fit_transform"], [625, 2, 1, "", "get_feature_names_out"], [625, 2, 1, "", "get_metadata_routing"], [625, 2, 1, "", "get_params"], [625, 2, 1, "", "set_output"], [625, 2, 1, "", "set_params"], [625, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[626, 2, 1, "", "fit"], [626, 2, 1, "", "fit_transform"], [626, 2, 1, "", "get_feature_names_out"], [626, 2, 1, "", "get_metadata_routing"], [626, 2, 1, "", "get_params"], [626, 2, 1, "", "set_output"], [626, 2, 1, "", "set_params"], [626, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[627, 2, 1, "", "fit"], [627, 2, 1, "", "fit_transform"], [627, 2, 1, "", "get_feature_names_out"], [627, 2, 1, "", "get_metadata_routing"], [627, 2, 1, "", "get_params"], [627, 2, 1, "", "inverse_transform"], [627, 2, 1, "", "set_output"], [627, 2, 1, "", "set_params"], [627, 2, 1, "", "transform"]], "sklearn.inspection": [[628, 1, 1, "", "DecisionBoundaryDisplay"], [629, 1, 1, "", "PartialDependenceDisplay"], [630, 4, 1, "", "partial_dependence"], [631, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[628, 2, 1, "", "from_estimator"], [628, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[629, 2, 1, "", "from_estimator"], [629, 2, 1, "", "plot"]], "sklearn.isotonic": [[632, 1, 1, "", "IsotonicRegression"], [633, 4, 1, "", "check_increasing"], [634, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[632, 2, 1, "", "fit"], [632, 2, 1, "", "fit_transform"], [632, 2, 1, "", "get_feature_names_out"], [632, 2, 1, "", "get_metadata_routing"], [632, 2, 1, "", "get_params"], [632, 2, 1, "", "predict"], [632, 2, 1, "", "score"], [632, 2, 1, "", "set_fit_request"], [632, 2, 1, "", "set_output"], [632, 2, 1, "", "set_params"], [632, 2, 1, "", "set_predict_request"], [632, 2, 1, "", "set_score_request"], [632, 2, 1, "", "set_transform_request"], [632, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[635, 1, 1, "", "AdditiveChi2Sampler"], [636, 1, 1, "", "Nystroem"], [637, 1, 1, "", "PolynomialCountSketch"], [638, 1, 1, "", "RBFSampler"], [639, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[635, 2, 1, "", "fit"], [635, 2, 1, "", "fit_transform"], [635, 2, 1, "", "get_feature_names_out"], [635, 2, 1, "", "get_metadata_routing"], [635, 2, 1, "", "get_params"], [635, 2, 1, "", "set_output"], [635, 2, 1, "", "set_params"], [635, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[637, 2, 1, "", "fit"], [637, 2, 1, "", "fit_transform"], [637, 2, 1, "", "get_feature_names_out"], [637, 2, 1, "", "get_metadata_routing"], [637, 2, 1, "", "get_params"], [637, 2, 1, "", "set_output"], [637, 2, 1, "", "set_params"], [637, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[638, 2, 1, "", "fit"], [638, 2, 1, "", "fit_transform"], [638, 2, 1, "", "get_feature_names_out"], [638, 2, 1, "", "get_metadata_routing"], [638, 2, 1, "", "get_params"], [638, 2, 1, "", "set_output"], [638, 2, 1, "", "set_params"], [638, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[640, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "predict"], [640, 2, 1, "", "score"], [640, 2, 1, "", "set_fit_request"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[641, 1, 1, "", "ARDRegression"], [642, 1, 1, "", "BayesianRidge"], [643, 1, 1, "", "ElasticNet"], [644, 1, 1, "", "ElasticNetCV"], [645, 1, 1, "", "GammaRegressor"], [646, 1, 1, "", "HuberRegressor"], [647, 1, 1, "", "Lars"], [648, 1, 1, "", "LarsCV"], [649, 1, 1, "", "Lasso"], [650, 1, 1, "", "LassoCV"], [651, 1, 1, "", "LassoLars"], [652, 1, 1, "", "LassoLarsCV"], [653, 1, 1, "", "LassoLarsIC"], [654, 1, 1, "", "LinearRegression"], [655, 1, 1, "", "LogisticRegression"], [656, 1, 1, "", "LogisticRegressionCV"], [657, 1, 1, "", "MultiTaskElasticNet"], [658, 1, 1, "", "MultiTaskElasticNetCV"], [659, 1, 1, "", "MultiTaskLasso"], [660, 1, 1, "", "MultiTaskLassoCV"], [661, 1, 1, "", "OrthogonalMatchingPursuit"], [662, 1, 1, "", "OrthogonalMatchingPursuitCV"], [663, 1, 1, "", "PassiveAggressiveClassifier"], [664, 1, 1, "", "PassiveAggressiveRegressor"], [665, 1, 1, "", "Perceptron"], [666, 1, 1, "", "PoissonRegressor"], [667, 1, 1, "", "QuantileRegressor"], [668, 1, 1, "", "RANSACRegressor"], [669, 1, 1, "", "Ridge"], [670, 1, 1, "", "RidgeCV"], [671, 1, 1, "", "RidgeClassifier"], [672, 1, 1, "", "RidgeClassifierCV"], [673, 1, 1, "", "SGDClassifier"], [674, 1, 1, "", "SGDOneClassSVM"], [675, 1, 1, "", "SGDRegressor"], [676, 1, 1, "", "TheilSenRegressor"], [677, 1, 1, "", "TweedieRegressor"], [678, 4, 1, "", "enet_path"], [679, 4, 1, "", "lars_path"], [680, 4, 1, "", "lars_path_gram"], [681, 4, 1, "", "lasso_path"], [682, 4, 1, "", "orthogonal_mp"], [683, 4, 1, "", "orthogonal_mp_gram"], [684, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "predict"], [641, 2, 1, "", "score"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "set_predict_request"], [641, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "predict"], [642, 2, 1, "", "score"], [642, 2, 1, "", "set_fit_request"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "set_predict_request"], [642, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "path"], [643, 2, 1, "", "predict"], [643, 2, 1, "", "score"], [643, 2, 1, "", "set_fit_request"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "set_score_request"], [643, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "path"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_fit_request"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "path"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"], [649, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "path"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[655, 2, 1, "", "decision_function"], [655, 2, 1, "", "densify"], [655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "predict_log_proba"], [655, 2, 1, "", "predict_proba"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"], [655, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[656, 2, 1, "", "decision_function"], [656, 2, 1, "", "densify"], [656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "predict_log_proba"], [656, 2, 1, "", "predict_proba"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"], [656, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "path"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"], [657, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "path"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "path"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "path"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[663, 2, 1, "", "decision_function"], [663, 2, 1, "", "densify"], [663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "partial_fit"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_partial_fit_request"], [663, 2, 1, "", "set_score_request"], [663, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[664, 2, 1, "", "densify"], [664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "partial_fit"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_partial_fit_request"], [664, 2, 1, "", "set_score_request"], [664, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[665, 2, 1, "", "decision_function"], [665, 2, 1, "", "densify"], [665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "partial_fit"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_fit_request"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_partial_fit_request"], [665, 2, 1, "", "set_score_request"], [665, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_fit_request"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[671, 3, 1, "", "classes_"], [671, 2, 1, "", "decision_function"], [671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[672, 3, 1, "", "classes_"], [672, 2, 1, "", "decision_function"], [672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"], [672, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[673, 2, 1, "", "decision_function"], [673, 2, 1, "", "densify"], [673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "partial_fit"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "predict_log_proba"], [673, 2, 1, "", "predict_proba"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_partial_fit_request"], [673, 2, 1, "", "set_score_request"], [673, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[674, 2, 1, "", "decision_function"], [674, 2, 1, "", "densify"], [674, 2, 1, "", "fit"], [674, 2, 1, "", "fit_predict"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "partial_fit"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score_samples"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_partial_fit_request"], [674, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[675, 2, 1, "", "densify"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "partial_fit"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_partial_fit_request"], [675, 2, 1, "", "set_score_request"], [675, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[685, 1, 1, "", "Isomap"], [686, 1, 1, "", "LocallyLinearEmbedding"], [687, 1, 1, "", "MDS"], [688, 1, 1, "", "SpectralEmbedding"], [689, 1, 1, "", "TSNE"], [690, 4, 1, "", "locally_linear_embedding"], [691, 4, 1, "", "smacof"], [692, 4, 1, "", "spectral_embedding"], [693, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[685, 2, 1, "", "fit"], [685, 2, 1, "", "fit_transform"], [685, 2, 1, "", "get_feature_names_out"], [685, 2, 1, "", "get_metadata_routing"], [685, 2, 1, "", "get_params"], [685, 2, 1, "", "reconstruction_error"], [685, 2, 1, "", "set_output"], [685, 2, 1, "", "set_params"], [685, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[686, 2, 1, "", "fit"], [686, 2, 1, "", "fit_transform"], [686, 2, 1, "", "get_feature_names_out"], [686, 2, 1, "", "get_metadata_routing"], [686, 2, 1, "", "get_params"], [686, 2, 1, "", "set_output"], [686, 2, 1, "", "set_params"], [686, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[687, 2, 1, "", "fit"], [687, 2, 1, "", "fit_transform"], [687, 2, 1, "", "get_metadata_routing"], [687, 2, 1, "", "get_params"], [687, 2, 1, "", "set_fit_request"], [687, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[688, 2, 1, "", "fit"], [688, 2, 1, "", "fit_transform"], [688, 2, 1, "", "get_metadata_routing"], [688, 2, 1, "", "get_params"], [688, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_feature_names_out"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "set_output"], [689, 2, 1, "", "set_params"]], "sklearn.metrics": [[694, 1, 1, "", "ConfusionMatrixDisplay"], [695, 1, 1, "", "DetCurveDisplay"], [696, 1, 1, "", "DistanceMetric"], [697, 1, 1, "", "PrecisionRecallDisplay"], [698, 1, 1, "", "PredictionErrorDisplay"], [699, 1, 1, "", "RocCurveDisplay"], [700, 4, 1, "", "accuracy_score"], [701, 4, 1, "", "adjusted_mutual_info_score"], [702, 4, 1, "", "adjusted_rand_score"], [703, 4, 1, "", "auc"], [704, 4, 1, "", "average_precision_score"], [705, 4, 1, "", "balanced_accuracy_score"], [706, 4, 1, "", "brier_score_loss"], [707, 4, 1, "", "calinski_harabasz_score"], [708, 4, 1, "", "check_scoring"], [709, 4, 1, "", "class_likelihood_ratios"], [710, 4, 1, "", "classification_report"], [405, 0, 0, "-", "cluster"], [713, 4, 1, "", "cohen_kappa_score"], [714, 4, 1, "", "completeness_score"], [715, 4, 1, "", "confusion_matrix"], [716, 4, 1, "", "consensus_score"], [717, 4, 1, "", "coverage_error"], [718, 4, 1, "", "d2_absolute_error_score"], [719, 4, 1, "", "d2_pinball_score"], [720, 4, 1, "", "d2_tweedie_score"], [721, 4, 1, "", "davies_bouldin_score"], [722, 4, 1, "", "dcg_score"], [723, 4, 1, "", "det_curve"], [724, 4, 1, "", "explained_variance_score"], [725, 4, 1, "", "f1_score"], [726, 4, 1, "", "fbeta_score"], [727, 4, 1, "", "fowlkes_mallows_score"], [728, 4, 1, "", "get_scorer"], [729, 4, 1, "", "get_scorer_names"], [730, 4, 1, "", "hamming_loss"], [731, 4, 1, "", "hinge_loss"], [732, 4, 1, "", "homogeneity_completeness_v_measure"], [733, 4, 1, "", "homogeneity_score"], [734, 4, 1, "", "jaccard_score"], [735, 4, 1, "", "label_ranking_average_precision_score"], [736, 4, 1, "", "label_ranking_loss"], [737, 4, 1, "", "log_loss"], [738, 4, 1, "", "make_scorer"], [739, 4, 1, "", "matthews_corrcoef"], [740, 4, 1, "", "max_error"], [741, 4, 1, "", "mean_absolute_error"], [742, 4, 1, "", "mean_absolute_percentage_error"], [743, 4, 1, "", "mean_gamma_deviance"], [744, 4, 1, "", "mean_pinball_loss"], [745, 4, 1, "", "mean_poisson_deviance"], [746, 4, 1, "", "mean_squared_error"], [747, 4, 1, "", "mean_squared_log_error"], [748, 4, 1, "", "mean_tweedie_deviance"], [749, 4, 1, "", "median_absolute_error"], [750, 4, 1, "", "multilabel_confusion_matrix"], [751, 4, 1, "", "mutual_info_score"], [752, 4, 1, "", "ndcg_score"], [753, 4, 1, "", "normalized_mutual_info_score"], [405, 0, 0, "-", "pairwise"], [774, 4, 1, "", "pairwise_distances"], [775, 4, 1, "", "pairwise_distances_argmin"], [776, 4, 1, "", "pairwise_distances_argmin_min"], [777, 4, 1, "", "pairwise_distances_chunked"], [778, 4, 1, "", "precision_recall_curve"], [779, 4, 1, "", "precision_recall_fscore_support"], [780, 4, 1, "", "precision_score"], [781, 4, 1, "", "r2_score"], [782, 4, 1, "", "rand_score"], [783, 4, 1, "", "recall_score"], [784, 4, 1, "", "roc_auc_score"], [785, 4, 1, "", "roc_curve"], [786, 4, 1, "", "root_mean_squared_error"], [787, 4, 1, "", "root_mean_squared_log_error"], [788, 4, 1, "", "silhouette_samples"], [789, 4, 1, "", "silhouette_score"], [790, 4, 1, "", "top_k_accuracy_score"], [791, 4, 1, "", "v_measure_score"], [792, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[694, 2, 1, "", "from_estimator"], [694, 2, 1, "", "from_predictions"], [694, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[695, 2, 1, "", "from_estimator"], [695, 2, 1, "", "from_predictions"], [695, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[696, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[697, 2, 1, "", "from_estimator"], [697, 2, 1, "", "from_predictions"], [697, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[699, 2, 1, "", "from_estimator"], [699, 2, 1, "", "from_predictions"], [699, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[711, 4, 1, "", "contingency_matrix"], [712, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[754, 4, 1, "", "additive_chi2_kernel"], [755, 4, 1, "", "chi2_kernel"], [756, 4, 1, "", "cosine_distances"], [757, 4, 1, "", "cosine_similarity"], [758, 4, 1, "", "distance_metrics"], [759, 4, 1, "", "euclidean_distances"], [760, 4, 1, "", "haversine_distances"], [761, 4, 1, "", "kernel_metrics"], [762, 4, 1, "", "laplacian_kernel"], [763, 4, 1, "", "linear_kernel"], [764, 4, 1, "", "manhattan_distances"], [765, 4, 1, "", "nan_euclidean_distances"], [766, 4, 1, "", "paired_cosine_distances"], [767, 4, 1, "", "paired_distances"], [768, 4, 1, "", "paired_euclidean_distances"], [769, 4, 1, "", "paired_manhattan_distances"], [770, 4, 1, "", "pairwise_kernels"], [771, 4, 1, "", "polynomial_kernel"], [772, 4, 1, "", "rbf_kernel"], [773, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[793, 1, 1, "", "BayesianGaussianMixture"], [794, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[793, 2, 1, "", "fit"], [793, 2, 1, "", "fit_predict"], [793, 2, 1, "", "get_metadata_routing"], [793, 2, 1, "", "get_params"], [793, 2, 1, "", "predict"], [793, 2, 1, "", "predict_proba"], [793, 2, 1, "", "sample"], [793, 2, 1, "", "score"], [793, 2, 1, "", "score_samples"], [793, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[794, 2, 1, "", "aic"], [794, 2, 1, "", "bic"], [794, 2, 1, "", "fit"], [794, 2, 1, "", "fit_predict"], [794, 2, 1, "", "get_metadata_routing"], [794, 2, 1, "", "get_params"], [794, 2, 1, "", "predict"], [794, 2, 1, "", "predict_proba"], [794, 2, 1, "", "sample"], [794, 2, 1, "", "score"], [794, 2, 1, "", "score_samples"], [794, 2, 1, "", "set_params"]], "sklearn.model_selection": [[795, 1, 1, "", "GridSearchCV"], [796, 1, 1, "", "GroupKFold"], [797, 1, 1, "", "GroupShuffleSplit"], [798, 1, 1, "", "HalvingGridSearchCV"], [799, 1, 1, "", "HalvingRandomSearchCV"], [800, 1, 1, "", "KFold"], [801, 1, 1, "", "LearningCurveDisplay"], [802, 1, 1, "", "LeaveOneGroupOut"], [803, 1, 1, "", "LeaveOneOut"], [804, 1, 1, "", "LeavePGroupsOut"], [805, 1, 1, "", "LeavePOut"], [806, 1, 1, "", "ParameterGrid"], [807, 1, 1, "", "ParameterSampler"], [808, 1, 1, "", "PredefinedSplit"], [809, 1, 1, "", "RandomizedSearchCV"], [810, 1, 1, "", "RepeatedKFold"], [811, 1, 1, "", "RepeatedStratifiedKFold"], [812, 1, 1, "", "ShuffleSplit"], [813, 1, 1, "", "StratifiedGroupKFold"], [814, 1, 1, "", "StratifiedKFold"], [815, 1, 1, "", "StratifiedShuffleSplit"], [816, 1, 1, "", "TimeSeriesSplit"], [817, 1, 1, "", "ValidationCurveDisplay"], [818, 4, 1, "", "check_cv"], [819, 4, 1, "", "cross_val_predict"], [820, 4, 1, "", "cross_val_score"], [821, 4, 1, "", "cross_validate"], [822, 4, 1, "", "learning_curve"], [823, 4, 1, "", "permutation_test_score"], [824, 4, 1, "", "train_test_split"], [825, 4, 1, "", "validation_curve"]], "sklearn.model_selection.GridSearchCV": [[795, 3, 1, "", "classes_"], [795, 2, 1, "", "decision_function"], [795, 2, 1, "", "fit"], [795, 2, 1, "", "get_metadata_routing"], [795, 2, 1, "", "get_params"], [795, 2, 1, "", "inverse_transform"], [795, 3, 1, "", "n_features_in_"], [795, 2, 1, "", "predict"], [795, 2, 1, "", "predict_log_proba"], [795, 2, 1, "", "predict_proba"], [795, 2, 1, "", "score"], [795, 2, 1, "", "score_samples"], [795, 2, 1, "", "set_params"], [795, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[796, 2, 1, "", "get_metadata_routing"], [796, 2, 1, "", "get_n_splits"], [796, 2, 1, "", "set_split_request"], [796, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[797, 2, 1, "", "get_metadata_routing"], [797, 2, 1, "", "get_n_splits"], [797, 2, 1, "", "set_split_request"], [797, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[798, 3, 1, "", "classes_"], [798, 2, 1, "", "decision_function"], [798, 2, 1, "", "fit"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "inverse_transform"], [798, 3, 1, "", "n_features_in_"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_log_proba"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "score"], [798, 2, 1, "", "score_samples"], [798, 2, 1, "", "set_params"], [798, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[799, 3, 1, "", "classes_"], [799, 2, 1, "", "decision_function"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "inverse_transform"], [799, 3, 1, "", "n_features_in_"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_log_proba"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "score"], [799, 2, 1, "", "score_samples"], [799, 2, 1, "", "set_params"], [799, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_n_splits"], [800, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[801, 2, 1, "", "from_estimator"], [801, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "set_split_request"], [802, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_n_splits"], [804, 2, 1, "", "set_split_request"], [804, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_n_splits"], [805, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[809, 3, 1, "", "classes_"], [809, 2, 1, "", "decision_function"], [809, 2, 1, "", "fit"], [809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_params"], [809, 2, 1, "", "inverse_transform"], [809, 3, 1, "", "n_features_in_"], [809, 2, 1, "", "predict"], [809, 2, 1, "", "predict_log_proba"], [809, 2, 1, "", "predict_proba"], [809, 2, 1, "", "score"], [809, 2, 1, "", "score_samples"], [809, 2, 1, "", "set_params"], [809, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[812, 2, 1, "", "get_metadata_routing"], [812, 2, 1, "", "get_n_splits"], [812, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[813, 2, 1, "", "get_metadata_routing"], [813, 2, 1, "", "get_n_splits"], [813, 2, 1, "", "set_split_request"], [813, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_n_splits"], [815, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.ValidationCurveDisplay": [[817, 2, 1, "", "from_estimator"], [817, 2, 1, "", "plot"]], "sklearn.multiclass": [[826, 1, 1, "", "OneVsOneClassifier"], [827, 1, 1, "", "OneVsRestClassifier"], [828, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[826, 2, 1, "", "decision_function"], [826, 2, 1, "", "fit"], [826, 2, 1, "", "get_metadata_routing"], [826, 2, 1, "", "get_params"], [826, 3, 1, "", "n_classes_"], [826, 2, 1, "", "partial_fit"], [826, 2, 1, "", "predict"], [826, 2, 1, "", "score"], [826, 2, 1, "", "set_params"], [826, 2, 1, "", "set_partial_fit_request"], [826, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[827, 2, 1, "", "decision_function"], [827, 2, 1, "", "fit"], [827, 2, 1, "", "get_metadata_routing"], [827, 2, 1, "", "get_params"], [827, 3, 1, "", "multilabel_"], [827, 3, 1, "", "n_classes_"], [827, 2, 1, "", "partial_fit"], [827, 2, 1, "", "predict"], [827, 2, 1, "", "predict_proba"], [827, 2, 1, "", "score"], [827, 2, 1, "", "set_params"], [827, 2, 1, "", "set_partial_fit_request"], [827, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[828, 2, 1, "", "fit"], [828, 2, 1, "", "get_metadata_routing"], [828, 2, 1, "", "get_params"], [828, 2, 1, "", "predict"], [828, 2, 1, "", "score"], [828, 2, 1, "", "set_params"], [828, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[829, 1, 1, "", "ClassifierChain"], [830, 1, 1, "", "MultiOutputClassifier"], [831, 1, 1, "", "MultiOutputRegressor"], [832, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[829, 2, 1, "", "decision_function"], [829, 2, 1, "", "fit"], [829, 2, 1, "", "get_metadata_routing"], [829, 2, 1, "", "get_params"], [829, 2, 1, "", "predict"], [829, 2, 1, "", "predict_proba"], [829, 2, 1, "", "score"], [829, 2, 1, "", "set_params"], [829, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[830, 2, 1, "", "fit"], [830, 2, 1, "", "get_metadata_routing"], [830, 2, 1, "", "get_params"], [830, 2, 1, "", "partial_fit"], [830, 2, 1, "", "predict"], [830, 2, 1, "", "predict_proba"], [830, 2, 1, "", "score"], [830, 2, 1, "", "set_fit_request"], [830, 2, 1, "", "set_params"], [830, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[831, 2, 1, "", "fit"], [831, 2, 1, "", "get_metadata_routing"], [831, 2, 1, "", "get_params"], [831, 2, 1, "", "partial_fit"], [831, 2, 1, "", "predict"], [831, 2, 1, "", "score"], [831, 2, 1, "", "set_fit_request"], [831, 2, 1, "", "set_params"], [831, 2, 1, "", "set_partial_fit_request"], [831, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[832, 2, 1, "", "fit"], [832, 2, 1, "", "get_metadata_routing"], [832, 2, 1, "", "get_params"], [832, 2, 1, "", "predict"], [832, 2, 1, "", "score"], [832, 2, 1, "", "set_params"], [832, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[833, 1, 1, "", "BernoulliNB"], [834, 1, 1, "", "CategoricalNB"], [835, 1, 1, "", "ComplementNB"], [836, 1, 1, "", "GaussianNB"], [837, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "predict_joint_log_proba"], [833, 2, 1, "", "predict_log_proba"], [833, 2, 1, "", "predict_proba"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_fit_request"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"], [833, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "predict_joint_log_proba"], [834, 2, 1, "", "predict_log_proba"], [834, 2, 1, "", "predict_proba"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_fit_request"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_partial_fit_request"], [834, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "partial_fit"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "predict_joint_log_proba"], [835, 2, 1, "", "predict_log_proba"], [835, 2, 1, "", "predict_proba"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_fit_request"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_partial_fit_request"], [835, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "partial_fit"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_joint_log_proba"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_fit_request"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_partial_fit_request"], [836, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_joint_log_proba"], [837, 2, 1, "", "predict_log_proba"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"], [837, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[838, 1, 1, "", "BallTree"], [839, 1, 1, "", "KDTree"], [840, 1, 1, "", "KNeighborsClassifier"], [841, 1, 1, "", "KNeighborsRegressor"], [842, 1, 1, "", "KNeighborsTransformer"], [843, 1, 1, "", "KernelDensity"], [844, 1, 1, "", "LocalOutlierFactor"], [845, 1, 1, "", "NearestCentroid"], [846, 1, 1, "", "NearestNeighbors"], [847, 1, 1, "", "NeighborhoodComponentsAnalysis"], [848, 1, 1, "", "RadiusNeighborsClassifier"], [849, 1, 1, "", "RadiusNeighborsRegressor"], [850, 1, 1, "", "RadiusNeighborsTransformer"], [851, 4, 1, "", "kneighbors_graph"], [852, 4, 1, "", "radius_neighbors_graph"], [853, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[838, 2, 1, "", "get_arrays"], [838, 2, 1, "", "get_n_calls"], [838, 2, 1, "", "get_tree_stats"], [838, 2, 1, "", "kernel_density"], [838, 2, 1, "", "query"], [838, 2, 1, "", "query_radius"], [838, 2, 1, "", "reset_n_calls"], [838, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[839, 2, 1, "", "get_arrays"], [839, 2, 1, "", "get_n_calls"], [839, 2, 1, "", "get_tree_stats"], [839, 2, 1, "", "kernel_density"], [839, 2, 1, "", "query"], [839, 2, 1, "", "query_radius"], [839, 2, 1, "", "reset_n_calls"], [839, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "kneighbors"], [840, 2, 1, "", "kneighbors_graph"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "kneighbors"], [841, 2, 1, "", "kneighbors_graph"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "fit_transform"], [842, 2, 1, "", "get_feature_names_out"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "kneighbors"], [842, 2, 1, "", "kneighbors_graph"], [842, 2, 1, "", "set_output"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "sample"], [843, 2, 1, "", "score"], [843, 2, 1, "", "score_samples"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[844, 2, 1, "", "decision_function"], [844, 2, 1, "", "fit"], [844, 2, 1, "", "fit_predict"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "kneighbors"], [844, 2, 1, "", "kneighbors_graph"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "score_samples"], [844, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[845, 2, 1, "", "fit"], [845, 2, 1, "", "get_metadata_routing"], [845, 2, 1, "", "get_params"], [845, 2, 1, "", "predict"], [845, 2, 1, "", "score"], [845, 2, 1, "", "set_params"], [845, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[846, 2, 1, "", "fit"], [846, 2, 1, "", "get_metadata_routing"], [846, 2, 1, "", "get_params"], [846, 2, 1, "", "kneighbors"], [846, 2, 1, "", "kneighbors_graph"], [846, 2, 1, "", "radius_neighbors"], [846, 2, 1, "", "radius_neighbors_graph"], [846, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "fit_transform"], [847, 2, 1, "", "get_feature_names_out"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "set_output"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "predict_proba"], [848, 2, 1, "", "radius_neighbors"], [848, 2, 1, "", "radius_neighbors_graph"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "predict"], [849, 2, 1, "", "radius_neighbors"], [849, 2, 1, "", "radius_neighbors_graph"], [849, 2, 1, "", "score"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "fit_transform"], [850, 2, 1, "", "get_feature_names_out"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "radius_neighbors"], [850, 2, 1, "", "radius_neighbors_graph"], [850, 2, 1, "", "set_output"], [850, 2, 1, "", "set_params"], [850, 2, 1, "", "transform"]], "sklearn.neural_network": [[854, 1, 1, "", "BernoulliRBM"], [855, 1, 1, "", "MLPClassifier"], [856, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "gibbs"], [854, 2, 1, "", "partial_fit"], [854, 2, 1, "", "score_samples"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "partial_fit"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "predict_log_proba"], [855, 2, 1, "", "predict_proba"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_partial_fit_request"], [855, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "partial_fit"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[857, 1, 1, "", "FeatureUnion"], [858, 1, 1, "", "Pipeline"], [859, 4, 1, "", "make_pipeline"], [860, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[857, 3, 1, "", "feature_names_in_"], [857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 3, 1, "", "n_features_in_"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[858, 3, 1, "", "classes_"], [858, 2, 1, "", "decision_function"], [858, 3, 1, "", "feature_names_in_"], [858, 2, 1, "", "fit"], [858, 2, 1, "", "fit_predict"], [858, 2, 1, "", "fit_transform"], [858, 2, 1, "", "get_feature_names_out"], [858, 2, 1, "", "get_metadata_routing"], [858, 2, 1, "", "get_params"], [858, 2, 1, "", "inverse_transform"], [858, 3, 1, "", "n_features_in_"], [858, 3, 1, "", "named_steps"], [858, 2, 1, "", "predict"], [858, 2, 1, "", "predict_log_proba"], [858, 2, 1, "", "predict_proba"], [858, 2, 1, "", "score"], [858, 2, 1, "", "score_samples"], [858, 2, 1, "", "set_output"], [858, 2, 1, "", "set_params"], [858, 2, 1, "", "set_score_request"], [858, 2, 1, "", "transform"]], "sklearn.preprocessing": [[861, 1, 1, "", "Binarizer"], [862, 1, 1, "", "FunctionTransformer"], [863, 1, 1, "", "KBinsDiscretizer"], [864, 1, 1, "", "KernelCenterer"], [865, 1, 1, "", "LabelBinarizer"], [866, 1, 1, "", "LabelEncoder"], [867, 1, 1, "", "MaxAbsScaler"], [868, 1, 1, "", "MinMaxScaler"], [869, 1, 1, "", "MultiLabelBinarizer"], [870, 1, 1, "", "Normalizer"], [871, 1, 1, "", "OneHotEncoder"], [872, 1, 1, "", "OrdinalEncoder"], [873, 1, 1, "", "PolynomialFeatures"], [874, 1, 1, "", "PowerTransformer"], [875, 1, 1, "", "QuantileTransformer"], [876, 1, 1, "", "RobustScaler"], [877, 1, 1, "", "SplineTransformer"], [878, 1, 1, "", "StandardScaler"], [879, 1, 1, "", "TargetEncoder"], [880, 4, 1, "", "add_dummy_feature"], [881, 4, 1, "", "binarize"], [882, 4, 1, "", "label_binarize"], [883, 4, 1, "", "maxabs_scale"], [884, 4, 1, "", "minmax_scale"], [885, 4, 1, "", "normalize"], [886, 4, 1, "", "power_transform"], [887, 4, 1, "", "quantile_transform"], [888, 4, 1, "", "robust_scale"], [889, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "set_transform_request"], [861, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "fit_transform"], [862, 2, 1, "", "get_feature_names_out"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "inverse_transform"], [862, 2, 1, "", "set_output"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "fit_transform"], [863, 2, 1, "", "get_feature_names_out"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "inverse_transform"], [863, 2, 1, "", "set_fit_request"], [863, 2, 1, "", "set_output"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 2, 1, "", "set_fit_request"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "set_transform_request"], [864, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "inverse_transform"], [865, 2, 1, "", "set_inverse_transform_request"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[866, 2, 1, "", "fit"], [866, 2, 1, "", "fit_transform"], [866, 2, 1, "", "get_metadata_routing"], [866, 2, 1, "", "get_params"], [866, 2, 1, "", "inverse_transform"], [866, 2, 1, "", "set_output"], [866, 2, 1, "", "set_params"], [866, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[867, 2, 1, "", "fit"], [867, 2, 1, "", "fit_transform"], [867, 2, 1, "", "get_feature_names_out"], [867, 2, 1, "", "get_metadata_routing"], [867, 2, 1, "", "get_params"], [867, 2, 1, "", "inverse_transform"], [867, 2, 1, "", "partial_fit"], [867, 2, 1, "", "set_output"], [867, 2, 1, "", "set_params"], [867, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "inverse_transform"], [868, 2, 1, "", "partial_fit"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "set_transform_request"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 3, 1, "", "infrequent_categories_"], [871, 2, 1, "", "inverse_transform"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_feature_names_out"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 3, 1, "", "infrequent_categories_"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_feature_names_out"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 3, 1, "", "powers_"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_feature_names_out"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "set_fit_request"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "partial_fit"], [878, 2, 1, "", "set_fit_request"], [878, 2, 1, "", "set_inverse_transform_request"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "set_partial_fit_request"], [878, 2, 1, "", "set_transform_request"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 3, 1, "", "infrequent_categories_"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.random_projection": [[890, 1, 1, "", "GaussianRandomProjection"], [891, 1, 1, "", "SparseRandomProjection"], [892, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[890, 2, 1, "", "fit"], [890, 2, 1, "", "fit_transform"], [890, 2, 1, "", "get_feature_names_out"], [890, 2, 1, "", "get_metadata_routing"], [890, 2, 1, "", "get_params"], [890, 2, 1, "", "inverse_transform"], [890, 2, 1, "", "set_output"], [890, 2, 1, "", "set_params"], [890, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[891, 2, 1, "", "fit"], [891, 2, 1, "", "fit_transform"], [891, 2, 1, "", "get_feature_names_out"], [891, 2, 1, "", "get_metadata_routing"], [891, 2, 1, "", "get_params"], [891, 2, 1, "", "inverse_transform"], [891, 2, 1, "", "set_output"], [891, 2, 1, "", "set_params"], [891, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[893, 1, 1, "", "LabelPropagation"], [894, 1, 1, "", "LabelSpreading"], [895, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[893, 2, 1, "", "fit"], [893, 2, 1, "", "get_metadata_routing"], [893, 2, 1, "", "get_params"], [893, 2, 1, "", "predict"], [893, 2, 1, "", "predict_proba"], [893, 2, 1, "", "score"], [893, 2, 1, "", "set_params"], [893, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[894, 2, 1, "", "fit"], [894, 2, 1, "", "get_metadata_routing"], [894, 2, 1, "", "get_params"], [894, 2, 1, "", "predict"], [894, 2, 1, "", "predict_proba"], [894, 2, 1, "", "score"], [894, 2, 1, "", "set_params"], [894, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[895, 2, 1, "", "decision_function"], [895, 2, 1, "", "fit"], [895, 2, 1, "", "get_metadata_routing"], [895, 2, 1, "", "get_params"], [895, 2, 1, "", "predict"], [895, 2, 1, "", "predict_log_proba"], [895, 2, 1, "", "predict_proba"], [895, 2, 1, "", "score"], [895, 2, 1, "", "set_params"]], "sklearn.svm": [[898, 1, 1, "", "LinearSVC"], [899, 1, 1, "", "LinearSVR"], [900, 1, 1, "", "NuSVC"], [901, 1, 1, "", "NuSVR"], [902, 1, 1, "", "OneClassSVM"], [903, 1, 1, "", "SVC"], [904, 1, 1, "", "SVR"], [905, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[898, 2, 1, "", "decision_function"], [898, 2, 1, "", "densify"], [898, 2, 1, "", "fit"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_params"], [898, 2, 1, "", "predict"], [898, 2, 1, "", "score"], [898, 2, 1, "", "set_fit_request"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "set_score_request"], [898, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[899, 2, 1, "", "fit"], [899, 2, 1, "", "get_metadata_routing"], [899, 2, 1, "", "get_params"], [899, 2, 1, "", "predict"], [899, 2, 1, "", "score"], [899, 2, 1, "", "set_fit_request"], [899, 2, 1, "", "set_params"], [899, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[900, 3, 1, "", "coef_"], [900, 2, 1, "", "decision_function"], [900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 3, 1, "", "n_support_"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "predict_log_proba"], [900, 2, 1, "", "predict_proba"], [900, 3, 1, "", "probA_"], [900, 3, 1, "", "probB_"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_fit_request"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[901, 3, 1, "", "coef_"], [901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 3, 1, "", "n_support_"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_fit_request"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[902, 3, 1, "", "coef_"], [902, 2, 1, "", "decision_function"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "fit_predict"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 3, 1, "", "n_support_"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "score_samples"], [902, 2, 1, "", "set_fit_request"], [902, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[903, 3, 1, "", "coef_"], [903, 2, 1, "", "decision_function"], [903, 2, 1, "", "fit"], [903, 2, 1, "", "get_metadata_routing"], [903, 2, 1, "", "get_params"], [903, 3, 1, "", "n_support_"], [903, 2, 1, "", "predict"], [903, 2, 1, "", "predict_log_proba"], [903, 2, 1, "", "predict_proba"], [903, 3, 1, "", "probA_"], [903, 3, 1, "", "probB_"], [903, 2, 1, "", "score"], [903, 2, 1, "", "set_fit_request"], [903, 2, 1, "", "set_params"], [903, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[904, 3, 1, "", "coef_"], [904, 2, 1, "", "fit"], [904, 2, 1, "", "get_metadata_routing"], [904, 2, 1, "", "get_params"], [904, 3, 1, "", "n_support_"], [904, 2, 1, "", "predict"], [904, 2, 1, "", "score"], [904, 2, 1, "", "set_fit_request"], [904, 2, 1, "", "set_params"], [904, 2, 1, "", "set_score_request"]], "sklearn.tree": [[906, 1, 1, "", "DecisionTreeClassifier"], [907, 1, 1, "", "DecisionTreeRegressor"], [908, 1, 1, "", "ExtraTreeClassifier"], [909, 1, 1, "", "ExtraTreeRegressor"], [910, 4, 1, "", "export_graphviz"], [911, 4, 1, "", "export_text"], [912, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[906, 2, 1, "", "apply"], [906, 2, 1, "", "cost_complexity_pruning_path"], [906, 2, 1, "", "decision_path"], [906, 3, 1, "", "feature_importances_"], [906, 2, 1, "", "fit"], [906, 2, 1, "", "get_depth"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_n_leaves"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "predict_log_proba"], [906, 2, 1, "", "predict_proba"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_predict_proba_request"], [906, 2, 1, "", "set_predict_request"], [906, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[907, 2, 1, "", "apply"], [907, 2, 1, "", "cost_complexity_pruning_path"], [907, 2, 1, "", "decision_path"], [907, 3, 1, "", "feature_importances_"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_depth"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_n_leaves"], [907, 2, 1, "", "get_params"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_predict_request"], [907, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[908, 2, 1, "", "apply"], [908, 2, 1, "", "cost_complexity_pruning_path"], [908, 2, 1, "", "decision_path"], [908, 3, 1, "", "feature_importances_"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_depth"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_n_leaves"], [908, 2, 1, "", "get_params"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "predict_log_proba"], [908, 2, 1, "", "predict_proba"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_predict_proba_request"], [908, 2, 1, "", "set_predict_request"], [908, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[909, 2, 1, "", "apply"], [909, 2, 1, "", "cost_complexity_pruning_path"], [909, 2, 1, "", "decision_path"], [909, 3, 1, "", "feature_importances_"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "get_depth"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_n_leaves"], [909, 2, 1, "", "get_params"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "score"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"], [909, 2, 1, "", "set_predict_request"], [909, 2, 1, "", "set_score_request"]], "sklearn.utils": [[913, 1, 1, "", "Bunch"], [914, 4, 1, "", "_safe_indexing"], [405, 0, 0, "-", "arrayfuncs"], [916, 4, 1, "", "as_float_array"], [917, 4, 1, "", "assert_all_finite"], [918, 4, 1, "", "check_X_y"], [919, 4, 1, "", "check_array"], [920, 4, 1, "", "check_consistent_length"], [921, 4, 1, "", "check_random_state"], [922, 4, 1, "", "check_scalar"], [405, 0, 0, "-", "class_weight"], [925, 4, 1, "", "deprecated"], [405, 0, 0, "-", "discovery"], [405, 0, 0, "-", "estimator_checks"], [931, 4, 1, "", "estimator_html_repr"], [405, 0, 0, "-", "extmath"], [938, 4, 1, "", "gen_batches"], [939, 4, 1, "", "gen_even_slices"], [405, 0, 0, "-", "graph"], [941, 4, 1, "", "indexable"], [405, 0, 0, "-", "metadata_routing"], [405, 0, 0, "-", "metaestimators"], [405, 0, 0, "-", "multiclass"], [951, 4, 1, "", "murmurhash3_32"], [405, 0, 0, "-", "parallel"], [954, 4, 1, "", "parallel_backend"], [405, 0, 0, "-", "random"], [956, 4, 1, "", "register_parallel_backend"], [957, 4, 1, "", "resample"], [958, 4, 1, "", "safe_mask"], [959, 4, 1, "", "safe_sqr"], [960, 4, 1, "", "shuffle"], [405, 0, 0, "-", "sparsefuncs"], [405, 0, 0, "-", "sparsefuncs_fast"], [405, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[913, 2, 1, "", "clear"], [913, 2, 1, "", "copy"], [913, 2, 1, "", "fromkeys"], [913, 2, 1, "", "get"], [913, 2, 1, "", "items"], [913, 2, 1, "", "keys"], [913, 2, 1, "", "pop"], [913, 2, 1, "", "popitem"], [913, 2, 1, "", "setdefault"], [913, 2, 1, "", "update"], [913, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[915, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[923, 4, 1, "", "compute_class_weight"], [924, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.discovery": [[926, 4, 1, "", "all_displays"], [927, 4, 1, "", "all_estimators"], [928, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[929, 4, 1, "", "check_estimator"], [930, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[932, 4, 1, "", "density"], [933, 4, 1, "", "fast_logdet"], [934, 4, 1, "", "randomized_range_finder"], [935, 4, 1, "", "randomized_svd"], [936, 4, 1, "", "safe_sparse_dot"], [937, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[940, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[942, 1, 1, "", "MetadataRequest"], [943, 1, 1, "", "MetadataRouter"], [944, 1, 1, "", "MethodMapping"], [945, 4, 1, "", "get_routing_for_object"], [946, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[942, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[943, 2, 1, "", "add"], [943, 2, 1, "", "add_self_request"], [943, 2, 1, "", "consumes"], [943, 2, 1, "", "route_params"], [943, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[944, 2, 1, "", "add"], [944, 2, 1, "", "from_str"]], "sklearn.utils.metaestimators": [[947, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[948, 4, 1, "", "is_multilabel"], [949, 4, 1, "", "type_of_target"], [950, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[952, 1, 1, "", "Parallel"], [953, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[952, 2, 1, "", "dispatch_next"], [952, 2, 1, "", "dispatch_one_batch"], [952, 2, 1, "", "format"], [952, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[955, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[961, 4, 1, "", "incr_mean_variance_axis"], [962, 4, 1, "", "inplace_column_scale"], [963, 4, 1, "", "inplace_csr_column_scale"], [964, 4, 1, "", "inplace_row_scale"], [965, 4, 1, "", "inplace_swap_column"], [966, 4, 1, "", "inplace_swap_row"], [967, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[968, 4, 1, "", "inplace_csr_row_normalize_l1"], [969, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[970, 4, 1, "", "check_is_fitted"], [971, 4, 1, "", "check_memory"], [972, 4, 1, "", "check_symmetric"], [973, 4, 1, "", "column_or_1d"], [974, 4, 1, "", "has_fit_parameter"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"about": [0, 391], "u": 0, "histori": [0, 1026], "govern": [0, 394], "author": [0, 1028], "document": [0, 8, 20, 167, 318, 319, 349, 350, 351, 379, 394, 1006, 1007, 1009, 1024, 1028, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "team": [0, 378, 394], "contributor": [0, 378, 379, 394, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "experi": [0, 38, 378, 394], "commun": [0, 379, 394], "emeritu": 0, "core": [0, 8, 367, 378, 383, 385, 391, 394, 988], "develop": [0, 109, 110, 167, 236, 377, 380, 381, 382, 383, 386, 387, 388, 975, 1023, 1044], "cite": 0, "scikit": [0, 236, 256, 316, 317, 318, 319, 320, 321, 322, 364, 365, 377, 380, 381, 383, 384, 391, 394, 396, 405, 1004, 1006, 1007, 1010, 1012, 1013, 1018, 1021, 1024], "learn": [0, 5, 12, 51, 96, 99, 151, 167, 169, 170, 171, 176, 220, 221, 222, 223, 235, 236, 256, 263, 294, 301, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 364, 365, 367, 375, 377, 379, 380, 381, 383, 384, 391, 394, 396, 405, 411, 413, 981, 983, 991, 999, 1004, 1006, 1007, 1008, 1010, 1012, 1013, 1015, 1018, 1019, 1020, 1021, 1022, 1024], "artwork": 0, "fund": 0, "past": 0, "sponsor": 0, "sprint": 0, "donat": 0, "project": [0, 87, 101, 105, 233, 379, 381, 391, 405, 998, 1003, 1006], "infrastructur": 0, "support": [0, 26, 122, 167, 194, 312, 316, 317, 318, 319, 321, 322, 332, 335, 344, 391, 396, 397, 402, 404, 405, 413, 1001, 1002, 1009, 1019, 1034, 1045], "exampl": [3, 6, 9, 54, 60, 76, 89, 103, 110, 128, 159, 167, 196, 197, 204, 342, 346, 367, 373, 374, 384, 391, 395, 397, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 420, 423, 426, 429, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 479, 480, 481, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 497, 498, 499, 501, 503, 507, 508, 509, 510, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 579, 581, 584, 585, 586, 587, 588, 590, 591, 594, 596, 597, 599, 601, 602, 603, 604, 605, 607, 608, 610, 611, 612, 614, 615, 616, 619, 620, 622, 624, 625, 627, 628, 629, 630, 631, 632, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 649, 650, 652, 653, 654, 655, 656, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 685, 686, 687, 688, 689, 690, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 706, 709, 710, 714, 715, 716, 723, 725, 730, 731, 733, 734, 737, 738, 741, 742, 744, 745, 746, 748, 749, 751, 753, 757, 774, 775, 778, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 851, 854, 855, 856, 857, 858, 859, 862, 863, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 884, 887, 891, 892, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 921, 930, 932, 939, 943, 944, 945, 946, 947, 960, 970, 975, 978, 980, 981, 982, 983, 985, 986, 987, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1012, 1018, 1019, 1020, 1025, 1028], "base": [3, 4, 86, 119, 120, 149, 167, 184, 235, 316, 317, 319, 321, 322, 379, 405, 406, 410, 413, 415, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 982, 994, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "real": [3, 9, 76, 167, 374], "world": [3, 76, 167, 374], "dataset": [3, 4, 5, 8, 13, 25, 26, 28, 33, 45, 59, 63, 71, 86, 89, 90, 91, 92, 93, 96, 105, 112, 118, 121, 122, 132, 138, 139, 152, 154, 156, 157, 159, 161, 167, 169, 170, 171, 179, 182, 184, 189, 200, 202, 209, 218, 221, 222, 229, 234, 239, 240, 259, 267, 268, 279, 282, 313, 329, 330, 334, 341, 350, 356, 371, 372, 373, 374, 375, 376, 384, 391, 405, 416, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 1012, 1018, 1019, 1021, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "time": [4, 13, 16, 23, 29, 36, 69, 77, 84, 88, 94, 108, 118, 123, 136, 142, 150, 162, 166, 174, 177, 194, 219, 227, 234, 235, 244, 253, 277, 280, 283, 298, 304, 314, 323, 331, 348, 350, 353, 360, 410], "relat": [4, 8, 373, 379, 994, 1006, 1035], "featur": [4, 13, 52, 55, 75, 101, 117, 119, 120, 122, 126, 129, 130, 143, 145, 147, 148, 149, 167, 172, 173, 176, 179, 194, 197, 218, 234, 240, 262, 303, 307, 308, 311, 312, 316, 318, 319, 340, 350, 351, 365, 367, 379, 383, 397, 405, 407, 413, 414, 415, 976, 994, 996, 1003, 1020, 1021, 1031, 1032, 1033, 1034, 1035], "engin": [4, 13, 172, 1006, 1010], "data": [4, 7, 9, 12, 18, 21, 25, 27, 35, 39, 48, 50, 51, 56, 58, 59, 64, 65, 67, 68, 71, 76, 79, 81, 83, 86, 87, 97, 98, 101, 102, 103, 104, 113, 119, 120, 126, 128, 132, 145, 148, 149, 158, 160, 165, 169, 172, 173, 176, 180, 186, 193, 194, 204, 230, 235, 242, 251, 256, 258, 262, 267, 268, 270, 271, 274, 287, 291, 296, 303, 306, 310, 311, 312, 325, 337, 340, 344, 345, 351, 352, 361, 365, 367, 374, 384, 391, 393, 406, 407, 409, 410, 415, 996, 1000, 1010, 1012, 1015, 1018, 1020, 1021], "explor": 4, "bike": [4, 13, 171], "share": [4, 13, 171], "demand": [4, 13], "cross": [4, 85, 86, 138, 139, 148, 167, 189, 256, 257, 259, 260, 264, 266, 271, 313, 340, 361, 405, 409, 410, 975, 982, 1016], "valid": [4, 138, 139, 148, 189, 233, 256, 257, 259, 260, 264, 266, 271, 276, 340, 361, 365, 381, 388, 405, 410, 970, 971, 972, 973, 974, 975, 981, 982, 989, 1016], "gradient": [4, 118, 122, 123, 124, 125, 126, 127, 171, 200, 208, 214, 316, 317, 319, 321, 322, 413, 982, 1000], "boost": [4, 118, 122, 123, 124, 125, 126, 127, 171, 200, 316, 317, 319, 321, 322, 413], "naiv": [4, 13, 25, 26, 405, 988], "linear": [4, 26, 34, 35, 125, 152, 167, 170, 178, 179, 196, 200, 203, 206, 221, 222, 234, 317, 336, 341, 343, 344, 365, 388, 391, 405, 980, 982, 983, 984, 996, 1019], "regress": [4, 13, 74, 76, 86, 87, 113, 125, 126, 135, 152, 157, 158, 159, 160, 179, 180, 183, 189, 191, 192, 193, 196, 198, 200, 202, 215, 217, 218, 232, 235, 296, 344, 357, 358, 375, 405, 407, 413, 416, 977, 979, 982, 986, 987, 989, 990, 1000, 1001, 1002, 1019], "step": [4, 241, 392, 407], "categori": [4, 320, 322, 996], "trigonometr": 4, "period": [4, 201], "spline": [4, 201, 319, 996], "qualit": [4, 13], "analysi": [4, 34, 35, 61, 96, 102, 104, 107, 112, 125, 171, 184, 246, 263, 264, 271, 292, 293, 294, 350, 405, 409, 411, 980, 989, 1003, 1020, 1021], "impact": [4, 62, 1043, 1044, 1045], "model": [4, 7, 11, 13, 58, 76, 86, 97, 104, 118, 119, 120, 122, 126, 128, 148, 149, 152, 157, 167, 170, 171, 172, 176, 178, 179, 184, 188, 189, 194, 200, 203, 218, 230, 235, 239, 240, 245, 247, 251, 252, 254, 260, 261, 263, 268, 282, 291, 296, 303, 311, 317, 319, 341, 344, 350, 365, 381, 391, 392, 394, 400, 401, 405, 410, 975, 981, 982, 985, 986, 988, 990, 991, 1012, 1016, 1019, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "predict": [4, 10, 13, 25, 87, 113, 125, 135, 153, 169, 180, 200, 235, 257, 268, 325, 365, 391, 392, 409, 410, 416, 986, 997, 1012, 1019], "pairwis": [4, 261, 405, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 984], "interact": [4, 171, 321, 413, 1019], "polynomi": [4, 176, 179, 180, 201, 341, 978, 982, 984, 996, 1019], "non": [4, 15, 96, 125, 195, 200, 204, 221, 266, 336, 343, 344, 411, 982, 996], "kernel": [4, 5, 101, 152, 157, 158, 160, 161, 167, 175, 176, 234, 235, 288, 289, 297, 318, 333, 336, 341, 344, 405, 411, 412, 416, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 978, 979, 984, 996, 1001, 1019], "conclud": [4, 225], "remark": [4, 58, 225, 233], "imag": [5, 48, 51, 54, 67, 99, 373, 405, 414, 580, 581, 582, 583, 584], "denois": [5, 99], "us": [5, 6, 12, 18, 49, 96, 97, 99, 129, 130, 132, 149, 157, 187, 203, 214, 216, 261, 265, 270, 282, 307, 344, 350, 351, 359, 361, 367, 380, 384, 385, 387, 391, 405, 410, 411, 413, 414, 415, 420, 423, 426, 429, 430, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 479, 480, 481, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 497, 498, 499, 501, 503, 507, 508, 509, 510, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 578, 579, 581, 584, 585, 586, 587, 588, 590, 591, 594, 596, 597, 599, 601, 602, 603, 604, 605, 607, 608, 610, 611, 612, 614, 615, 616, 619, 620, 622, 624, 625, 627, 628, 629, 630, 631, 632, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 649, 650, 652, 653, 654, 655, 656, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 685, 686, 687, 688, 689, 690, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 706, 709, 710, 714, 715, 716, 723, 725, 730, 731, 733, 734, 737, 738, 741, 742, 744, 745, 746, 748, 749, 751, 753, 757, 774, 775, 778, 780, 781, 782, 783, 784, 785, 786, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 800, 801, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 851, 854, 855, 856, 857, 858, 859, 862, 863, 865, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 882, 884, 887, 891, 892, 894, 895, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 921, 930, 932, 939, 943, 944, 945, 946, 947, 960, 970, 980, 982, 983, 986, 990, 1000, 1001, 1002, 1010, 1019, 1021, 1038], "pca": [5, 59, 74, 91, 96, 97, 100, 101, 102, 103, 104, 105, 311, 411, 538, 1003, 1020], "refer": [5, 11, 26, 28, 81, 82, 99, 112, 115, 172, 176, 184, 188, 261, 266, 267, 279, 297, 373, 374, 403, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 975, 976, 978, 979, 980, 982, 983, 984, 986, 987, 989, 990, 991, 992, 993, 994, 996, 998, 999, 1000, 1001], "load": [5, 7, 18, 51, 59, 91, 118, 120, 122, 126, 138, 149, 172, 193, 218, 222, 230, 234, 242, 262, 270, 271, 282, 287, 311, 312, 337, 340, 350, 351, 352, 372, 373, 384, 391, 414, 1012, 1020, 1021], "via": [5, 13, 54, 188, 189, 218, 413, 978], "openml": [5, 312, 316, 373], "basi": [5, 161, 416, 978, 982, 1019], "reconstruct": [5, 14, 99], "test": [5, 79, 144, 264, 267, 274, 350, 355, 377, 379, 381, 387, 388, 410, 1012, 1019, 1021], "face": [6, 51, 96, 238, 374, 1010, 1017], "recognit": [6, 374, 376, 1017], "eigenfac": [6, 96, 1017], "svm": [6, 141, 145, 146, 176, 214, 234, 319, 330, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 347, 405, 898, 899, 900, 901, 902, 903, 904, 905, 982, 992, 1000, 1019, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "complex": [7, 231, 241, 260, 263, 327, 355, 365, 406, 982, 989, 990, 1000, 1001, 1002], "influenc": [7, 10, 365], "benchmark": [7, 10, 59, 350], "choos": [7, 975, 1012, 1014, 1016], "paramet": [7, 79, 125, 259, 318, 337, 345, 379, 381, 392, 393, 405, 407, 413, 975, 982, 986, 1001, 1012, 1016, 1021], "run": [7, 59, 265], "code": [7, 96, 106, 379, 381, 384, 385, 387, 411, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "plot": [7, 8, 10, 21, 25, 31, 35, 39, 42, 48, 50, 51, 58, 64, 65, 67, 68, 79, 83, 86, 91, 92, 93, 97, 98, 102, 113, 118, 121, 126, 128, 132, 133, 134, 135, 138, 148, 165, 171, 179, 180, 184, 192, 193, 194, 204, 205, 209, 222, 230, 234, 239, 240, 242, 251, 257, 258, 263, 265, 268, 270, 274, 276, 282, 291, 303, 312, 316, 318, 319, 325, 334, 335, 340, 341, 350, 356, 386, 405, 981, 993, 1025], "result": [7, 8, 21, 39, 48, 50, 51, 58, 59, 64, 65, 68, 79, 81, 83, 97, 98, 113, 118, 132, 135, 165, 176, 184, 205, 235, 239, 265, 274, 282, 291, 312, 344, 351, 361, 975], "conclus": [7, 13, 152, 184, 189, 279, 287, 313, 341], "out": [8, 124, 367, 387, 410, 975, 982, 988], "classif": [8, 27, 30, 31, 33, 34, 71, 92, 140, 153, 154, 155, 156, 160, 167, 216, 237, 264, 267, 268, 271, 282, 287, 295, 303, 316, 324, 329, 341, 350, 375, 405, 413, 416, 982, 986, 987, 989, 990, 1000, 1001, 1002, 1019, 1021], "text": [8, 167, 231, 262, 329, 349, 350, 351, 352, 374, 405, 414, 585, 586, 587, 588, 1021], "reuter": 8, "routin": [8, 366, 388], "main": [8, 200], "outlier": [9, 182, 217, 229, 239, 290, 291, 306, 405, 982, 992, 996], "detect": [9, 229, 239, 258, 290, 291, 986, 992, 1001], "set": [9, 76, 79, 103, 132, 165, 204, 268, 337, 355, 391, 405, 410, 982, 1012, 1018, 1019, 1021], "first": [9, 38, 379], "second": [9, 38], "latenc": [10, 365], "helper": [10, 161, 222, 388], "function": [10, 35, 161, 190, 204, 205, 210, 222, 256, 274, 318, 340, 352, 388, 405, 410, 413, 416, 978, 982, 986, 1001, 1019], "bulk": [10, 365], "atom": [10, 365], "speed": [10, 385], "variou": [10, 53, 207, 226], "regressor": [10, 113, 125, 179, 204, 313, 316, 319, 405, 413], "n_featur": 10, "throughput": [10, 365], "speci": [11, 297], "distribut": [11, 218, 221, 297, 310, 396, 983, 996], "visual": [12, 59, 107, 230, 235, 242, 256, 302, 317, 337, 405, 406, 407, 986, 1025], "stock": [12, 1017], "market": [12, 1017], "structur": [12, 40, 48, 68, 160, 327, 359, 1017], "retriev": [12, 316], "from": [12, 99, 149, 172, 312, 316, 366, 373, 377, 391, 405, 414, 986, 1012, 1019, 1020, 1021, 1038], "internet": 12, "graph": [12, 316, 388, 391, 405, 406, 414, 940], "cluster": [12, 20, 22, 37, 38, 39, 40, 41, 42, 45, 46, 48, 50, 53, 56, 57, 59, 61, 64, 65, 66, 67, 68, 96, 167, 320, 322, 351, 375, 403, 405, 406, 411, 417, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 711, 712, 986, 1020, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "affin": [12, 39, 406, 984], "propag": [12, 39, 325, 326, 327, 406, 999], "embed": [12, 53, 221, 222, 233, 294, 413, 983], "2d": [12, 53, 98, 105, 171], "space": [12, 101, 407, 975, 983], "lag": 13, "seri": [13, 194, 410], "forecast": [13, 157], "analyz": [13, 975], "gener": [13, 21, 25, 35, 39, 48, 50, 56, 58, 64, 65, 67, 68, 79, 81, 83, 92, 93, 97, 98, 99, 119, 128, 145, 148, 152, 158, 159, 161, 167, 178, 179, 180, 184, 194, 200, 202, 235, 251, 258, 274, 291, 296, 303, 317, 325, 344, 345, 361, 375, 379, 393, 405, 411, 413, 982, 996, 1007, 1016], "panda": [13, 321, 384, 391], "evalu": [13, 38, 59, 62, 82, 200, 239, 262, 265, 303, 312, 351, 392, 401, 403, 406, 410, 413, 975, 981, 986, 1021], "next": [13, 392], "hour": 13, "proper": [13, 157], "uncertainti": 13, "quantil": [13, 125, 202, 319, 320, 982], "A": [13, 21, 22, 48, 59, 64, 200, 319, 378, 385, 400, 410, 1015, 1018], "look": [13, 235, 344], "compress": [14, 54, 365], "sens": 14, "tomographi": 14, "l1": [14, 184, 191, 193, 216, 345, 415], "prior": [14, 161, 246], "lasso": [14, 184, 185, 186, 187, 188, 189, 194, 317, 649, 982], "topic": 15, "extract": [15, 75, 99, 218, 262, 351, 365, 367, 405, 414, 1021], "neg": [15, 96, 149, 195, 411, 982], "matrix": [15, 18, 160, 181, 255, 405, 406, 411, 986], "factor": [15, 96, 104, 107, 290, 291, 411, 992], "latent": [15, 86, 411], "dirichlet": [15, 411, 985], "alloc": [15, 411], "comput": [16, 18, 23, 29, 36, 39, 48, 50, 64, 65, 68, 69, 77, 79, 84, 88, 94, 108, 118, 136, 142, 150, 162, 166, 174, 177, 193, 205, 219, 227, 244, 253, 274, 277, 280, 283, 298, 304, 314, 323, 331, 348, 353, 360, 364, 365, 405, 406, 407, 410, 993], "libsvm": [17, 373], "gui": 17, "wikipedia": 18, "princip": [18, 87, 102, 411, 1003, 1020], "eigenvector": 18, "download": [18, 132, 165, 373], "alreadi": 18, "disk": 18, "redirect": 18, "file": [18, 396, 414, 1021], "adjac": 18, "singular": [18, 411], "vector": [18, 26, 54, 167, 332, 335, 344, 350, 352, 405, 414, 1001, 1019, 1020], "random": [18, 96, 116, 118, 130, 131, 172, 173, 233, 242, 267, 269, 361, 381, 388, 405, 410, 411, 413, 955, 975, 982, 998, 1003], "svd": [18, 96, 411], "central": 18, "score": [18, 86, 118, 123, 138, 148, 165, 179, 251, 260, 267, 268, 340, 397, 406, 410, 981, 986, 1001, 1016], "biclust": [19, 20, 21, 167, 375, 403, 405], "spectral": [20, 21, 22, 67, 221, 403, 406, 983], "co": [20, 22, 403], "algorithm": [20, 21, 22, 39, 45, 50, 56, 64, 65, 66, 221, 229, 385, 391, 980, 982, 987, 989, 990, 994, 1002, 1019], "demo": [21, 22, 39, 48, 50, 56, 59, 64, 66], "sampl": [21, 39, 56, 64, 79, 97, 98, 145, 181, 213, 235, 262, 274, 296, 317, 344, 347, 373, 388, 393, 405, 406, 413, 982], "fit": [21, 27, 58, 97, 104, 119, 120, 123, 125, 126, 157, 179, 180, 181, 194, 197, 202, 206, 268, 282, 291, 296, 313, 344, 361, 381, 392, 397, 413, 988, 992, 1012], "spectralbiclust": [21, 448], "calibr": [24, 25, 26, 27, 28, 125, 167, 200, 404, 405, 434, 435, 436, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "probabl": [25, 26, 27, 31, 134, 155, 404, 405, 413, 1001], "classifi": [25, 26, 28, 32, 110, 135, 183, 241, 258, 282, 287, 316, 330, 334, 337, 350, 359, 404, 405, 413, 980, 989, 1019, 1021], "synthet": [25, 76, 179, 184, 258, 313, 384], "gaussian": [25, 26, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 245, 246, 247, 250, 251, 252, 306, 405, 416, 985, 988, 996, 998], "bay": [25, 26, 405, 988], "curv": [26, 28, 180, 235, 242, 252, 258, 263, 268, 270, 276, 404, 981], "summari": [26, 189, 351, 352, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035], "3": [27, 183, 322, 1021, 1036, 1037, 1042, 1044], "class": [27, 38, 112, 114, 134, 183, 209, 214, 264, 268, 270, 319, 336, 339, 393, 405, 410, 413, 414, 986, 989, 992, 1000, 1001, 1028, 1029], "compar": [27, 43, 45, 63, 79, 86, 118, 123, 131, 145, 176, 179, 186, 202, 207, 229, 235, 261, 269, 292, 301, 306, 312, 391], "comparison": [28, 32, 35, 44, 65, 81, 105, 122, 144, 152, 221, 222, 235, 261, 272, 279, 352, 406, 982], "recogn": 33, "hand": 33, "written": 33, "digit": [33, 53, 59, 90, 139, 140, 222, 303, 325, 326, 376, 1018], "normal": [34, 176, 200, 306, 310, 405, 870, 885, 986, 996], "ledoit": [34, 80, 408], "wolf": [34, 80, 408], "oa": [34, 79, 80, 419, 472], "discrimin": [34, 35, 405, 980], "quadrat": [35, 416, 980], "covari": [35, 78, 79, 81, 82, 83, 167, 248, 405, 408, 419, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 980, 1036, 1040, 1041, 1042, 1044], "ellipsoid": [35, 247], "lda": [35, 105, 411, 980], "qda": [35, 980], "adjust": 38, "chanc": 38, "perform": [38, 44, 264, 311, 318, 320, 325, 351, 365, 379, 380, 406, 410, 1021], "defin": [38, 48, 59, 68, 221, 256, 258, 259, 352, 986], "list": [38, 1009], "metric": [38, 41, 125, 265, 402, 405, 406, 410, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 975, 984, 986, 989, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "fix": [38, 383, 1028, 1031, 1032, 1033, 1034, 1035, 1041], "ground": [38, 179], "truth": [38, 179], "label": [38, 268, 325, 326, 327, 374, 375, 405, 406, 410, 413, 986, 997, 999], "grow": 38, "number": [38, 61, 122, 148, 273, 365, 381, 975, 976], "vari": [38, 300, 328, 406], "agglom": [40, 41, 53, 1020], "without": [40, 123, 292, 350], "differ": [41, 45, 63, 79, 161, 171, 306, 309, 312, 334, 341, 381, 391, 397, 406, 982, 1019], "hierarch": [42, 48, 63, 68, 322, 406, 1020], "dendrogram": 42, "birch": [43, 406, 439], "minibatchkmean": [43, 65, 96, 446], "bisect": [44, 406], "k": [44, 46, 49, 58, 59, 60, 62, 65, 68, 86, 287, 311, 351, 406, 410, 986, 989, 996, 1019, 1020], "mean": [44, 46, 49, 58, 59, 60, 62, 64, 65, 119, 120, 165, 172, 204, 351, 406, 986, 996, 1020], "regular": [44, 79, 127, 170, 193, 204, 205, 300, 345, 982, 990], "toi": [45, 63, 229, 376], "segment": [47, 67], "pictur": 47, "greek": 47, "coin": [47, 48], "region": [47, 261], "ward": [48, 68, 406, 1020], "an": [48, 60, 110, 165, 181, 189, 294, 316, 320, 391, 414, 975, 992, 1012, 1018, 1019], "color": 49, "quantiz": [49, 54, 1020], "dbscan": [50, 406, 417, 441], "onlin": [51, 207, 319, 320, 1000], "dictionari": [51, 96, 99, 106, 411], "part": [51, 415], "agglomer": [52, 55, 1003, 1020], "origin": [54, 101, 267, 294, 306], "encod": [54, 122, 312, 313, 322, 996, 997], "strategi": [54, 259, 279, 301, 309, 322, 367, 405, 406, 986], "memori": [54, 365, 385, 387, 406], "footprint": 54, "v": [55, 68, 79, 80, 82, 87, 101, 148, 171, 172, 182, 192, 218, 264, 270, 274, 275, 355, 406, 413, 976, 996, 1012], "univari": [55, 86, 145, 340, 415, 976], "select": [55, 61, 73, 104, 138, 143, 145, 148, 149, 167, 188, 189, 194, 251, 254, 340, 391, 397, 401, 405, 410, 415, 975, 982, 1016, 1034], "hdbscan": [56, 322, 406, 443], "scale": [56, 170, 221, 224, 311, 345, 367, 889, 983, 992, 996, 1003], "invari": [56, 264], "multi": [56, 112, 131, 171, 194, 209, 224, 238, 265, 268, 300, 358, 385, 405, 982, 983, 986, 990, 1001, 1002], "hyperparamet": [56, 157, 158, 262, 269, 279, 614], "robust": [56, 81, 82, 179, 203, 206, 361, 405, 408, 975, 982], "min_cluster_s": 56, "min_sampl": 56, "dbscan_clust": 56, "induct": 57, "demonstr": [58, 265, 309, 325], "assumpt": 58, "possibl": [58, 384], "solut": 58, "final": [58, 152], "handwritten": [59, 222, 376], "our": [59, 256, 259, 379], "reduc": [59, 365], "initi": [60, 62, 249], "silhouett": [61, 406], "kmean": [61, 65, 317, 444], "empir": [62, 82, 233, 408], "linkag": [63, 406], "method": [63, 75, 86, 111, 152, 167, 221, 223, 249, 278, 281, 393, 405, 406, 978, 992, 993, 1020], "shift": [64, 406], "meanshift": [64, 445], "establish": [65, 176], "pariti": 65, "between": [65, 272, 982], "optic": [66, 376, 406, 447], "four": 67, "circl": 67, "two": [67, 114, 186, 240, 261], "unstructur": 68, "we": 68, "ar": [68, 319, 391], "nearest": [68, 167, 284, 285, 286, 287, 292, 295, 296, 316, 405, 976, 989, 1019], "neighbor": [68, 167, 221, 284, 285, 286, 287, 292, 296, 311, 316, 405, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 976, 983, 989, 1019, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045], "10": [68, 1028], "pipelin": [70, 71, 73, 74, 132, 146, 167, 170, 231, 236, 241, 262, 312, 340, 381, 391, 392, 405, 407, 415, 857, 858, 859, 860, 1003, 1017, 1021, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "composit": [70, 167, 405, 407, 975], "estim": [70, 78, 79, 80, 81, 82, 83, 109, 110, 115, 122, 124, 131, 158, 165, 167, 179, 203, 206, 231, 236, 238, 239, 250, 269, 279, 288, 289, 297, 316, 317, 318, 321, 361, 381, 391, 392, 393, 402, 405, 407, 408, 410, 412, 413, 975, 976, 980, 982, 986, 1001, 1006, 1014, 1016, 1018, 1029, 1036, 1037, 1038], "column": [71, 72, 241], "transform": [71, 72, 73, 76, 86, 117, 130, 241, 318, 319, 320, 371, 391, 392, 407, 409, 410, 989, 996, 997, 998, 1020], "heterogen": [71, 407], "sourc": [71, 97, 377], "20": [71, 350, 374, 1021, 1036], "newsgroup": [71, 350, 374, 1021], "creat": [71, 102, 104, 112, 204, 230, 268, 313, 340, 341, 391], "mix": 72, "type": [72, 246, 381, 393, 406, 1012], "dimension": [73, 221, 224, 241, 293, 311, 351, 980, 983, 989, 1003, 1019], "reduct": [73, 221, 225, 241, 293, 311, 351, 980, 989, 1003], "gridsearchcv": [73, 138, 265, 413, 795], "illustr": [73, 156, 161, 294, 416], "cach": [73, 286, 407], "within": 73, "chain": [74, 241, 282, 392, 407], "logist": [74, 183, 190, 191, 192, 193, 215, 216, 982, 1019], "concaten": 75, "multipl": [75, 241, 265, 361, 386, 410, 975, 976, 986, 1036, 1037], "effect": [76, 169, 226, 306, 311, 328, 355, 989], "target": [76, 159, 218, 312, 313, 391, 393, 405, 407, 409, 987, 996, 997], "shrinkag": [79, 408, 413, 980, 1019], "ledoitwolf": [79, 470], "max": [79, 986], "likelihood": [79, 179, 180, 264, 986, 991], "approach": [79, 189, 261], "mahalanobi": [81, 989], "distanc": [81, 405, 989], "relev": [81, 184, 982], "minimum": [82, 408], "determin": [82, 184, 408, 982, 986], "spars": [83, 96, 106, 170, 184, 186, 215, 316, 350, 351, 388, 405, 408, 411, 415, 996, 998, 1000, 1045], "invers": [83, 408, 998], "decomposit": [85, 86, 95, 96, 115, 167, 375, 405, 409, 411, 418, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 1020, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "variabl": [86, 169, 170, 366, 391, 405, 1019], "canon": [86, 409], "symmetr": 86, "pl": 86, "scatter": [86, 91], "multivari": [86, 976], "respons": [86, 394], "pls2": 86, "pls1": 86, "cca": [86, 479], "mode": [86, 365, 377], "b": 86, "deflat": 86, "compon": [87, 96, 102, 292, 293, 294, 411, 989, 1003, 1020], "partial": [87, 169, 171, 240, 993], "least": [87, 125, 189, 195, 198, 982], "squar": [87, 125, 161, 195, 198, 204, 416, 978, 982, 984, 986], "The": [87, 90, 91, 169, 170, 200, 226, 233, 259, 268, 279, 374, 383, 410, 414, 985, 986, 998, 1019, 1020], "one": [87, 122, 240, 982, 986], "power": [87, 200], "iri": [91, 103, 105, 121, 154, 209, 330, 334, 356, 376, 416, 1018], "represent": [91, 171, 231, 317, 365, 381, 414, 1020], "randomli": [92, 93], "multilabel": [93, 237, 282, 375, 388, 405, 986, 987, 1012], "prepar": [96, 113, 176, 221, 270, 271, 311, 337, 383], "nmf": [96, 320, 411, 537], "independ": [96, 411, 1020], "fastica": [96, 97, 98, 418, 530], "minibatchsparsepca": [96, 411, 536], "center": [96, 996], "fa": [96, 104], "posit": [96, 319], "blind": 97, "separ": [97, 212, 338, 339], "ica": [97, 411, 1020], "point": [98, 294], "cloud": 98, "distort": 99, "displai": [99, 205, 230, 231, 241, 321, 322, 387, 1025, 1044], "patch": [99, 414], "noisi": [99, 159, 204], "them": [99, 378], "increment": [100, 367, 411], "kernelpca": [101, 532], "figur": 102, "probabilist": [104, 153, 411, 416], "precomput": [106, 181, 316, 411], "rotat": 107, "pattern": 107, "__sklearn_is_fitted__": 110, "api": [110, 242, 243, 316, 319, 321, 366, 381, 386, 393, 397, 402, 405, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038], "custom": [110, 259, 333, 414, 996, 1001], "implement": [110, 186, 391, 406, 986, 989, 1000, 1001], "simpl": [110, 152, 236, 289, 385, 1018], "ensembl": [111, 117, 121, 167, 320, 405, 413, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "adaboost": [112, 113, 114, 413], "decis": [112, 113, 121, 128, 133, 167, 234, 287, 322, 330, 341, 354, 355, 356, 357, 358, 359, 391, 394, 405, 1002], "tree": [112, 113, 117, 119, 120, 121, 130, 167, 172, 200, 316, 321, 322, 354, 355, 356, 357, 358, 359, 391, 405, 413, 415, 906, 907, 908, 909, 910, 911, 912, 989, 994, 1002, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "train": [112, 113, 126, 128, 135, 148, 204, 230, 235, 239, 240, 242, 251, 274, 279, 303, 312, 313, 318, 328, 337, 341, 350, 355, 356, 359, 410, 989, 999, 1012, 1019, 1021], "adaboostclassifi": [112, 550], "converg": 112, "error": [112, 116, 125, 138, 179, 204, 258, 274, 387, 396, 982, 986], "weight": [112, 179, 181, 213, 302, 317, 347, 397, 405, 413, 414], "weak": [112, 413], "learner": [112, 413], "decisiontre": 113, "singl": [115, 132, 218, 230, 375, 406, 976], "versu": [115, 214, 266, 330, 365], "bag": [115, 124, 350, 413, 414, 975, 1021], "bia": 115, "varianc": [115, 198, 415, 986, 996], "oob": 116, "forest": [116, 118, 119, 120, 131, 172, 173, 239, 242, 374, 413, 992], "histogram": [118, 317, 319, 321, 412, 413], "import": [119, 120, 126, 149, 172, 173, 234, 279, 311, 316, 413, 994], "decreas": [119, 120, 172], "impur": [119, 120, 172, 355, 994], "permut": [119, 172, 173, 267, 316, 410, 994], "pixel": 120, "parallel": [120, 366, 377, 385, 405, 406, 413, 952, 953, 975], "mdi": [120, 172], "surfac": [121, 234, 356], "categor": [122, 312, 318, 391, 413, 988, 996], "am": [122, 239], "hous": [122, 239, 374], "drop": 122, "hot": 122, "ordin": 122, "nativ": [122, 312, 316, 318], "limit": [122, 152, 365, 396, 400, 414], "split": [122, 318, 361, 410], "earli": [123, 208], "stop": [123, 208, 414, 1000], "interv": 125, "confid": 125, "tune": [125, 259, 262, 318, 975, 1021], "hyper": [125, 259, 318, 405, 975], "preprocess": [126, 132, 167, 170, 171, 239, 241, 305, 322, 352, 361, 391, 405, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 996, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "devianc": [126, 986], "isolationforest": [128, 560], "discret": [128, 160, 307, 308, 996], "boundari": [128, 133, 287, 330, 341], "path": [128, 187, 193, 205, 359, 396], "length": [128, 396], "monoton": [129, 413], "constraint": [129, 321, 406, 413], "name": [129, 319, 391, 407], "specifi": [129, 391, 975], "hash": [130, 388, 414], "total": [130, 355, 413], "output": [131, 238, 306, 321, 358, 1002, 1019], "meta": [131, 279, 318, 405, 413], "combin": [132, 230], "predictor": 132, "stack": [132, 316, 413], "make": [132, 135, 165, 379, 383, 394], "measur": [132, 264, 406, 986], "votingclassifi": [133, 134, 413, 566], "calcul": 134, "individu": [135, 171, 318, 993], "vote": [135, 413], "tutori": [137, 167, 1005, 1013, 1015, 1021], "exercis": [137, 138, 139, 140, 141, 167, 1016, 1019, 1021], "diabet": [138, 240, 376, 1019], "appli": 138, "line": [138, 155], "show": [138, 270], "std": [138, 179], "bonu": 138, "how": [138, 361, 379, 385, 391], "much": 138, "can": [138, 391], "you": [138, 391], "trust": 138, "alpha": [138, 355], "f": [144, 986], "mutual": [144, 406], "inform": [144, 165, 188, 189, 383, 405, 406, 975, 982], "anova": [146, 340], "recurs": [147, 148, 415], "elimin": [147, 148, 415, 975], "sequenti": [149, 415], "coeffici": [149, 170, 179, 204, 205, 406, 986], "toler": 149, "valu": [149, 163, 164, 165, 167, 226, 236, 316, 322, 359, 379, 411, 413, 976, 986, 994, 996, 1002], "process": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 170, 361, 394, 405, 416, 985, 1015], "machin": [151, 167, 169, 170, 171, 303, 332, 387, 405, 991, 1001, 1012, 1019], "ridg": [152, 180, 182, 198, 204, 205, 235, 313, 405, 669, 979, 982], "gpc": [153, 154, 155, 156, 416], "iso": [155, 268], "xor": [156, 416], "co2": 157, "level": [157, 158, 366, 406, 413], "mona": 157, "loa": 157, "gpr": [157, 158, 416], "build": [157, 165, 377, 379, 387, 407, 1021], "design": 157, "extrapol": 157, "interpret": [157, 170, 204, 239, 282, 411, 413], "abil": 158, "nois": [158, 159, 180], "optimis": 158, "basic": [159, 218, 392, 408, 416], "introductori": 159, "free": 159, "sequenc": [160, 391], "similar": [160, 984, 986], "under": [160, 391, 1023, 1044], "posterior": 161, "cookbook": 161, "radial": [161, 416, 978, 1019], "ration": [161, 416], "quadradt": 161, "exp": [161, 416], "sine": [161, 252, 416], "dot": [161, 416], "product": [161, 218, 387, 391, 416, 618], "mat\u00e9rn": [161, 416], "miss": [163, 164, 165, 167, 316, 322, 413, 976, 996, 1002], "imput": [163, 164, 165, 167, 316, 405, 624, 625, 626, 627, 976, 996, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "variant": 164, "iterativeimput": [164, 624, 976], "befor": [165, 383], "replac": 165, "0": [165, 316, 317, 318, 319, 1002, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "knn": [165, 316], "iter": [165, 273, 410, 975], "releas": [167, 315, 316, 317, 318, 319, 320, 321, 322, 383, 396, 1026, 1034], "highlight": [167, 315, 316, 317, 318, 319, 320, 321, 322, 1028, 1031, 1032, 1035, 1036], "mixtur": [167, 245, 246, 247, 250, 251, 252, 405, 793, 794, 985, 1036, 1037, 1041, 1042, 1044], "inspect": [167, 168, 395, 405, 628, 629, 630, 631, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "approxim": [167, 175, 176, 234, 284, 318, 405, 408, 978], "manifold": [167, 220, 221, 222, 223, 375, 405, 685, 686, 687, 688, 689, 690, 691, 692, 693, 983, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "miscellan": [167, 228, 405, 1036, 1037, 1038, 1039, 1040, 1041, 1044], "multiclass": [167, 215, 270, 278, 279, 316, 388, 404, 405, 826, 827, 828, 948, 949, 950, 986, 987, 1012, 1019, 1037, 1040, 1041, 1042], "multioutput": [167, 281, 405, 829, 830, 831, 832, 987, 1036, 1037, 1038, 1039, 1040, 1043, 1044], "neural": [167, 171, 299, 405, 990, 991], "network": [167, 171, 299, 405, 990, 991], "semi": [167, 324, 325, 329, 330, 405, 999], "supervis": [167, 324, 325, 329, 330, 405, 990, 999, 1008, 1019], "work": [167, 349, 365, 378, 391, 405, 1021], "failur": [169, 975], "infer": 169, "causal": [169, 170], "simul": 169, "hourli": 169, "wage": [169, 170], "descript": 169, "incom": 169, "fulli": 169, "observ": [169, 1019, 1020], "lesson": [169, 170], "common": [170, 361, 393, 402, 414, 986], "pitfal": [170, 361], "matter": 170, "check": [170, 263, 316, 387, 402, 1036, 1037, 1038], "problem": [170, 411, 1001, 1002, 1012, 1017, 1019, 1020], "correl": [170, 173, 409, 986, 994], "numer": [170, 366, 381], "wrong": [170, 391], "depend": [171, 236, 240, 377, 993, 1028, 1041, 1042], "condit": [171, 318, 993], "expect": [171, 318, 993], "preprocessor": 171, "1": [171, 197, 319, 320, 321, 322, 391, 1021, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "wai": [171, 379, 391], "layer": [171, 300, 990], "perceptron": [171, 300, 665, 982, 990], "ic": [171, 993], "pdp": 171, "3d": 171, "accuraci": [172, 234, 350, 355, 986], "": [172, 311, 313, 382, 391, 413, 986], "multicollinear": 173, "breast": [173, 376], "cancer": [173, 376], "handl": [173, 405, 976], "scalabl": [176, 263, 317], "partit": 176, "baselin": [176, 200], "bayesian": [179, 180, 246, 261, 405, 982, 985], "recov": 179, "true": [179, 180], "margin": [179, 180, 212, 338, 342], "log": [179, 180, 986], "expans": 179, "sinusoid": 180, "cubic": 180, "l": 180, "elast": [181, 185, 982], "net": [181, 185, 982], "gram": 181, "huberregressor": [182, 646], "strong": 182, "signal": [184, 411, 1020], "automat": [184, 392, 982], "ard": [184, 982], "elasticnet": [184, 317, 643], "dens": 186, "lar": [187, 647, 982], "criteria": [188, 391, 982, 1002], "aic": [189, 982], "bic": [189, 251, 982], "criterion": [189, 318, 975, 1000], "coordin": 189, "descent": [189, 208, 214, 982, 1000], "angl": [189, 982], "penalti": [191, 211, 345], "sparsiti": [191, 197, 414, 1019], "multinomi": [192, 216, 982, 988], "One": [192, 214, 270, 319, 336, 410, 992, 1000], "rest": [192, 270], "joint": 194, "task": [194, 405, 982, 1006], "onli": [197, 217, 1039, 1041], "2": [197, 321, 1021, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "ordinari": [198, 982], "orthogon": [199, 982], "match": [199, 982], "pursuit": [199, 982], "poisson": [200, 218, 317, 318, 986], "loss": [200, 210, 317, 320, 322, 413, 986], "french": 200, "motor": 200, "third": [200, 236, 396], "parti": [200, 236, 396], "liabil": 200, "claim": [200, 218], "constant": [200, 976], "rank": [200, 405, 986], "takeawai": 200, "interpol": 201, "quantileregressor": [202, 667], "linearregress": [202, 654], "ransac": [203, 982], "l2": [204, 345], "purpos": [204, 352, 1007], "thi": [204, 1007], "solver": [207, 411, 982], "stochast": [208, 214, 221, 301, 982, 983, 991, 1000], "sgd": [209, 210, 211, 212, 213, 982, 1000], "convex": 210, "maximum": [212, 338, 991], "hyperplan": [212, 338, 339], "20newgroup": 215, "mnist": [216, 302], "theil": [217, 982], "sen": [217, 982], "y": [217, 391, 409, 997, 999], "direct": 217, "x": 217, "tweedi": [218, 986], "insur": 218, "definit": [218, 303, 993, 1038], "frequenc": [218, 1021], "sever": [218, 223], "gamma": [218, 322, 986], "pure": 218, "premium": 218, "tweedieregressor": [218, 677], "local": [221, 222, 290, 291, 983, 992], "isomap": [221, 222, 685, 983], "multidimension": 221, "t": [221, 226, 983], "techniqu": 222, "sphere": 223, "swiss": 225, "roll": [225, 381], "And": [225, 394], "hole": 225, "sne": [226, 983], "perplex": 226, "shape": [226, 1012], "anomali": 229, "object": [230, 256, 381, 391, 405, 975, 986, 1018, 1025], "confusionmatrixdisplai": [230, 694], "roccurvedisplai": [230, 699], "precisionrecalldisplai": [230, 697], "compact": 231, "rich": [231, 317], "html": [231, 381], "isoton": [232, 404, 405, 632, 633, 634, 977, 1036, 1037, 1038, 1040, 1042, 1043], "johnson": [233, 998], "lindenstrauss": [233, 998], "bound": 233, "theoret": 233, "explicit": 234, "map": [234, 310, 996], "rbf": [234, 336, 337, 341, 416, 619, 984, 1001, 1019], "python": [234, 366, 385, 400, 1005, 1006, 1034], "packag": [234, 1006, 1040], "svr": [235, 344, 904, 1001], "construct": 235, "metadata": [236, 322, 350, 393, 397, 405, 1045], "rout": [236, 322, 393, 397, 405, 1045], "router": 236, "consum": 236, "deprec": [236, 379, 405, 925, 1038], "default": [236, 291, 379], "chang": [236, 379, 394, 1010, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "complet": [238, 406], "kddcup99": 239, "sa": 239, "covertyp": [239, 374], "cardiotocographi": 239, "ablat": 239, "studi": 239, "advanc": [240, 397], "With": [240, 1021], "togeth": [240, 270, 1017, 1020], "grid": [241, 259, 261, 269, 272, 975, 1016, 1021], "search": [241, 259, 261, 269, 272, 279, 392, 975, 1016, 1021], "over": 241, "roc": [242, 258, 270, 271, 316, 986], "svc": [242, 341, 345, 903, 1001], "introduc": 243, "set_output": [243, 321, 381], "concentr": 246, "variat": [246, 985], "gmm": [248, 249], "densiti": [250, 288, 289, 297, 322, 412, 932, 1001], "best": [251, 380, 391], "confus": [255, 406, 986], "behavior": 256, "indic": 256, "mani": [256, 321, 366, 391], "cv": [256, 361], "tradeoff": [258, 986], "det": [258, 986], "refit": [259, 1012], "balanc": [260, 986], "statist": [261, 1006, 1015, 1018], "frequentist": 261, "practic": [261, 361, 380, 384, 983, 990, 1000, 1001, 1002], "equival": 261, "all": [261, 270, 320, 396, 1017, 1043, 1044, 1045], "take": 261, "home": 261, "messag": 261, "ratio": [264, 986], "pre": [264, 361, 392], "post": [264, 355], "respect": 264, "preval": 264, "cross_val_scor": [265, 820], "nest": [266, 407, 1016], "see": [266, 407], "also": [266, 383, 407], "signific": 267, "precis": [268, 986], "recal": [268, 986], "In": 268, "binari": [268, 282, 982, 986], "averag": [268, 270, 406, 413, 986], "micro": [268, 270], "each": [268, 273, 350, 975], "f1": 268, "receiv": [270, 271, 986], "oper": [270, 271, 378, 388, 405, 416, 986], "characterist": [270, 271, 986], "specif": [270, 377, 381, 400, 975, 1006, 1007], "ovr": 270, "macro": 270, "ovo": 270, "success": [272, 273, 318, 975], "halv": [272, 273, 318, 975], "candid": [273, 975], "amount": [273, 975], "resourc": [273, 366, 379, 975, 1005, 1009], "underfit": 275, "overfit": 275, "overview": [279, 386, 406, 992], "yeast": 279, "uci": 279, "logisticregress": [282, 655], "wrap": 282, "onevsrestclassifi": [282, 827, 987], "tsne": [284, 689], "1d": 289, "novelti": [290, 992, 1001], "lof": [290, 291], "neighborhood": [292, 293, 294, 989], "centroid": [295, 989], "mlpclassifi": [301, 855], "mlp": 302, "restrict": [303, 991], "boltzmann": [303, 991], "scaler": 306, "standardscal": [306, 878], "minmaxscal": [306, 868], "maxabsscal": [306, 867], "robustscal": [306, 876], "powertransform": [306, 874], "quantiletransform": [306, 875], "uniform": [306, 996], "kbinsdiscret": [307, 309, 863], "continu": [307, 379], "rescal": 311, "other": [312, 373, 391, 413, 1006, 1028], "intern": 313, "22": [316, 1038], "new": [316, 318, 319, 321, 322, 379, 391, 1005, 1028, 1029, 1031, 1032, 1033, 1034, 1035], "prune": [316, 355, 1002], "datafram": [316, 391], "compat": [316, 379, 381, 402, 405], "auc": [316, 703], "now": [316, 319, 1038], "23": [317, 1039], "stabil": 317, "improv": [317, 318, 319, 320, 321, 378, 379, 1031, 1032], "24": [318, 1040], "histgradientboost": 318, "self": [318, 328, 999], "sequentialfeatureselector": [318, 599], "polynomialcountsketch": [318, 637], "decisiontreeregressor": [318, 907], "keyword": [319, 1039, 1041], "argument": [319, 381, 1039, 1041], "more": [319, 391, 400, 990], "flexibl": [319, 976], "stabl": 319, "histgradientboostingregressor": [320, 559], "get_feature_names_out": 320, "avail": [320, 975, 1024, 1025], "group": [320, 322, 410, 1010, 1020], "infrequ": [320, 322, 996], "onehotencod": [320, 871], "minibatchnmf": [320, 535], "version": [320, 373, 377, 383, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "bisectingkmean": [320, 440], "divid": 320, "enhanc": [321, 394, 1006, 1031, 1032, 1033, 1034, 1035], "faster": [321, 413], "parser": [321, 373], "fetch_openml": [321, 493], "experiment": [321, 383, 402, 405, 576, 577, 1044], "arrai": [321, 359, 388, 402, 405, 1012, 1045], "lineardiscriminantanalysi": [321, 546], "effici": [321, 388], "targetencod": [322, 879], "model_select": [322, 405, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "validationcurvedisplai": [322, 817], "ordinalencod": [322, 872], "most": 325, "uncertain": 325, "activ": 326, "threshold": 328, "linearsvc": [335, 898], "unbalanc": [339, 1001], "some": 340, "plai": 340, "percentil": 340, "sigmoid": [341, 404, 984, 1019], "case": [345, 982, 986], "tie": 346, "break": 346, "word": [350, 414, 1021], "strip": 350, "quantifi": [351, 986], "qualiti": [351, 986], "tfidfvector": [351, 352, 588], "lsa": 351, "top": [351, 986], "term": [351, 393, 414], "per": 351, "hashingvector": [351, 586], "featurehash": [352, 579], "dictvector": [352, 578], "special": 352, "cost": [355, 1002], "leav": [355, 410, 982], "understand": 359, "what": [359, 391], "i": [359, 384, 391, 410, 1010], "here": [359, 1021], "recommend": [361, 374, 1006], "inconsist": 361, "leakag": 361, "dure": 361, "avoid": [361, 407], "control": [361, 413, 990], "none": 361, "randomst": 361, "instanc": [361, 367], "repeat": [361, 407, 410], "call": [361, 378], "splitter": [361, 405], "subtleti": 361, "get": [361, 391, 392], "reproduc": [361, 384], "across": 361, "execut": [361, 391], "configur": [365, 366], "overhead": 365, "input": [365, 381, 402, 405, 406, 996], "tip": [365, 380, 387, 975, 983, 990, 1000, 1001, 1002], "trick": [365, 385, 387, 414], "algebra": [365, 388], "librari": [365, 366], "reshap": [365, 1018], "link": [365, 373, 986], "manag": [366, 396], "higher": 366, "joblib": [366, 385], "lower": 366, "openmp": [366, 380], "numpi": [366, 384], "scipi": [366, 1045], "oversubscript": 366, "spawn": 366, "too": 366, "thread": 366, "switch": 366, "environ": 366, "sklearn_assume_finit": 366, "sklearn_working_memori": 366, "sklearn_se": 366, "sklearn_tests_global_random_se": 366, "sklearn_skip_network_test": 366, "sklearn_run_float32_test": 366, "sklearn_enable_debug_cython_direct": 366, "sklearn_build_enable_debug_symbol": 366, "sklearn_pairwise_dist_chunk_s": 366, "computation": 367, "bigger": 367, "stream": 367, "note": [367, 402, 410], "tabl": [368, 391], "Of": 368, "content": [368, 391, 1012], "util": [372, 384, 388, 405, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1021, 1025, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "svmlight": 373, "format": [373, 384, 391, 400, 987], "org": [373, 383, 1010], "repositori": 373, "arff": 373, "extern": [373, 1005, 1012, 1028, 1037], "olivetti": 374, "consider": 374, "wild": 374, "rcv1": 374, "kddcup": 374, "99": 374, "california": 374, "plant": 376, "linnerrud": 376, "wine": 376, "wisconsin": 376, "diagnost": 376, "instal": [377, 396], "nightli": 377, "runtim": 377, "tag": [377, 379, 381], "edit": 377, "platform": [377, 387, 396], "instruct": 377, "window": [377, 396], "maco": 377, "compil": [377, 385], "conda": 377, "forg": 377, "homebrew": 377, "linux": [377, 391, 396], "system": 377, "freebsd": 377, "altern": [377, 975], "bug": [378, 379, 383, 1009, 1031, 1032, 1033, 1034, 1035, 1036, 1037], "triag": 378, "issu": [378, 379], "curat": 378, "fruit": 378, "discuss": 378, "pr": [378, 383], "help": [378, 379, 391], "review": [378, 379, 387, 1021], "member": 378, "close": 378, "tough": 378, "typic": 378, "workflow": [378, 379], "contribut": [379, 391], "submit": 379, "report": [379, 384, 986], "request": [379, 383, 387, 391], "good": [379, 384], "video": [379, 1005], "git": 379, "pull": [379, 383, 387, 391], "checklist": [379, 383], "integr": 379, "ci": 379, "stall": 379, "unclaim": 379, "easi": 379, "want": 379, "github": 379, "action": 379, "coverag": [379, 387, 986], "write": 379, "matplotlib": 379, "monitor": 379, "tracker": [379, 1009], "maintain": [379, 383, 394, 400], "backward": 379, "guidelin": [379, 381], "read": 379, "exist": 379, "cython": [380, 385, 387], "convent": [380, 1012], "knowledg": 380, "eas": 380, "instanti": 381, "attribut": [381, 393, 975], "option": 381, "univers": 381, "your": [381, 384, 986], "own": [381, 391, 986], "templat": 381, "baseestim": [381, 420], "mixin": 381, "get_param": 381, "set_param": 381, "init": 381, "clone": [381, 431], "check_is_fit": [381, 970], "assert": 381, "guid": [382, 1023], "major": [383, 413, 1036, 1037], "minor": 383, "known": [383, 1036, 1037], "merg": 383, "web": 383, "site": 383, "craft": 384, "minim": [384, 1002, 1041, 1042], "provid": 384, "fail": 384, "comment": 384, "boil": 384, "down": 384, "script": 384, "someth": 384, "small": 384, "do": [384, 391], "NOT": 384, "unless": 384, "extrem": [384, 413], "necessari": 384, "markdown": 384, "make_regress": [384, 521], "make_classif": [384, 512], "make_blob": [384, 509], "optim": [385, 405, 975], "c": 385, "profil": 385, "usag": [385, 391, 397, 402, 404, 407, 413, 414, 982], "extens": [385, 396], "yep": 385, "gperftool": 385, "debugg": 385, "gdb": 385, "gprof": 385, "valgrind": [385, 387], "callgrind": 385, "kcachegrind": 385, "warm": 385, "restart": 385, "ax": 386, "saniti": 387, "preserv": 387, "fold": [387, 410], "unfold": 387, "outdat": 387, "diff": 387, "remot": 387, "track": [387, 407], "branch": 387, "pytest": 387, "alias": 387, "flag": 387, "standard": [387, 996], "repli": 387, "debug": 387, "arm64": 387, "x86_64": 387, "tool": [388, 391, 402, 405], "matric": [388, 405, 996], "warn": [388, 405], "except": [388, 405, 568, 569, 570, 571, 572, 573, 574, 575, 1040, 1044], "dispatch": 389, "frequent": 391, "ask": 391, "question": [391, 1009], "lot": 391, "peopl": [391, 1028, 1029, 1030, 1031], "pronounc": 391, "why": [391, 413], "pypi": 391, "deep": 391, "reinforc": 391, "Will": 391, "add": 391, "graphic": [391, 991], "did": 391, "remov": [391, 415, 996, 1028], "hmm": 391, "gpu": 391, "need": 391, "doe": 391, "directli": 391, "plan": 391, "so": 391, "my": 391, "ani": 391, "attent": 391, "inclus": 391, "includ": 391, "should": 391, "save": 391, "export": 391, "deploi": 391, "bunch": [391, 913], "usabl": 391, "deal": [391, 405], "string": 391, "sometim": 391, "crash": 391, "freez": 391, "n_job": 391, "osx": [391, 396], "job": 391, "than": 391, "random_st": 391, "entir": 391, "start": 392, "processor": 392, "glossari": 393, "element": 393, "concept": [393, 982], "properti": 393, "role": 394, "technic": 394, "committe": 394, "propos": 394, "slep": 394, "latest": 396, "alpin": 396, "arch": 396, "debian": 396, "ubuntu": 396, "fedora": 396, "netbsd": 396, "macport": 396, "mac": 396, "anaconda": 396, "enthought": 396, "deploy": 396, "intel": 396, "winpython": 396, "troubleshoot": 396, "caus": 396, "unweight": 397, "interfac": [397, 405], "statu": 397, "persist": 400, "serial": 400, "secur": 400, "skop": 400, "interoper": [400, 1006], "pytorch": 402, "mp": 402, "devic": 402, "mathemat": [403, 405, 406, 413, 978, 980, 989, 990, 993, 1000, 1001, 1002], "formul": [403, 406, 413, 980, 989, 990, 1000, 1001, 1002], "sklearn": [405, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "compos": [405, 461, 462, 463, 464, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "cross_decomposit": [405, 479, 480, 481, 482, 1038, 1040, 1042, 1044], "loader": 405, "discriminant_analysi": [405, 546, 547, 1036, 1037, 1040, 1042, 1043, 1044], "dummi": [405, 548, 549, 986, 1036, 1037, 1038, 1041, 1042], "feature_extract": [405, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "feature_select": [405, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "gaussian_process": [405, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "kernel_approxim": [405, 635, 636, 637, 638, 639, 1038, 1040, 1041, 1042, 1043, 1044], "kernel_ridg": [405, 640], "linear_model": [405, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "classic": 405, "glm": 405, "naive_bay": [405, 833, 834, 835, 836, 837, 1036, 1038, 1039, 1040, 1041, 1043, 1044], "neural_network": [405, 854, 855, 856, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044], "random_project": [405, 890, 891, 892, 1042], "semi_supervis": [405, 893, 894, 895, 1038, 1039, 1040, 1044], "discoveri": [405, 926, 927, 928], "checker": 405, "recent": 405, "low": [406, 413, 415], "mini": [406, 411], "batch": [406, 411], "assign": 406, "featureagglomer": [406, 442], "hierarchi": 406, "ad": 406, "connect": [406, 414, 1020], "consumpt": 406, "larg": [406, 414], "size": [406, 413], "reachabl": 406, "rand": 406, "index": [406, 941], "advantag": 406, "drawback": 406, "homogen": 406, "fowlk": 406, "mallow": 406, "calinski": 406, "harabasz": 406, "davi": 406, "bouldin": 406, "conting": 406, "pair": 406, "access": 407, "featureunion": [407, 857], "columntransform": [407, 461], "shrunk": 408, "oracl": 408, "plscanon": [409, 480], "plssvd": [409, 482], "plsregress": [409, 481], "held": 410, "cross_valid": [410, 821], "obtain": 410, "d": [410, 989], "loo": 410, "p": [410, 1010], "lpo": 410, "shuffl": [410, 960], "stratif": 410, "stratifi": 410, "stratifiedgroupkfold": [410, 813], "predefin": [410, 986], "decompos": 411, "exact": 411, "sparsepca": [411, 540], "kpca": 411, "choic": [411, 989], "truncat": 411, "semant": 411, "nnmf": 411, "frobeniu": 411, "norm": 411, "beta": 411, "diverg": 411, "gradientboostingclassifi": [413, 556], "histgradientboostingclassifi": [413, 558], "gradientboostingregressor": [413, 557], "addit": [413, 978], "rate": 413, "subsampl": 413, "hard": 413, "soft": 413, "dict": 414, "tf": 414, "idf": 414, "decod": 414, "applic": [414, 1020], "corpu": 414, "selectfrommodel": [415, 594], "biclustermixin": 421, "classnameprefixfeaturesoutmixin": 422, "classifiermixin": 423, "clustermixin": 424, "densitymixin": 425, "metaestimatormixin": 426, "onetoonefeaturemixin": 427, "outliermixin": 428, "regressormixin": 429, "transformermixin": 430, "is_classifi": 432, "is_regressor": 433, "calibratedclassifiercv": 434, "calibrationdisplai": 435, "from_estim": [435, 628, 629, 694, 695, 697, 698, 699, 801, 817], "calibration_curv": 436, "affinitypropag": 437, "agglomerativeclust": 438, "spectralclust": 449, "spectralcoclust": 450, "affinity_propag": 451, "cluster_optics_dbscan": 452, "cluster_optics_xi": 453, "compute_optics_graph": 454, "estimate_bandwidth": 455, "k_mean": 456, "kmeans_plusplu": 457, "mean_shift": 458, "spectral_clust": 459, "ward_tre": 460, "transformedtargetregressor": 462, "make_column_selector": 463, "make_column_transform": 464, "config_context": 465, "ellipticenvelop": 466, "empiricalcovari": 467, "graphicallasso": 468, "graphicallassocv": 469, "mincovdet": 471, "shrunkcovari": 473, "empirical_covari": 474, "graphical_lasso": 475, "ledoit_wolf": 476, "ledoit_wolf_shrinkag": 477, "shrunk_covari": 478, "clear_data_hom": 483, "dump_svmlight_fil": 484, "fetch_20newsgroup": 485, "fetch_20newsgroups_vector": 486, "fetch_california_h": 487, "fetch_covtyp": 488, "fetch_kddcup99": 489, "fetch_lfw_pair": 490, "fetch_lfw_peopl": 491, "fetch_olivetti_fac": 492, "fetch_rcv1": 494, "fetch_species_distribut": 495, "get_data_hom": 496, "load_breast_canc": 497, "load_diabet": 498, "load_digit": 499, "load_fil": 500, "load_iri": 501, "load_linnerud": 502, "load_sample_imag": [503, 504], "load_svmlight_fil": [505, 506], "load_win": 507, "make_biclust": 508, "make_checkerboard": 510, "make_circl": 511, "make_friedman1": 513, "make_friedman2": 514, "make_friedman3": 515, "make_gaussian_quantil": 516, "make_hastie_10_2": 517, "make_low_rank_matrix": 518, "make_moon": 519, "make_multilabel_classif": 520, "make_s_curv": 522, "make_sparse_coded_sign": 523, "make_sparse_spd_matrix": 524, "make_sparse_uncorrel": 525, "make_spd_matrix": 526, "make_swiss_rol": 527, "dictionarylearn": 528, "factoranalysi": 529, "incrementalpca": 531, "latentdirichletalloc": 533, "minibatchdictionarylearn": 534, "sparsecod": 539, "truncatedsvd": 541, "dict_learn": 542, "dict_learning_onlin": 543, "non_negative_factor": 544, "sparse_encod": 545, "quadraticdiscriminantanalysi": 547, "dummyclassifi": 548, "dummyregressor": 549, "adaboostregressor": 551, "baggingclassifi": 552, "baggingregressor": 553, "extratreesclassifi": 554, "extratreesregressor": 555, "randomforestclassifi": 561, "randomforestregressor": 562, "randomtreesembed": 563, "stackingclassifi": 564, "stackingregressor": 565, "votingregressor": 567, "convergencewarn": 568, "dataconversionwarn": 569, "datadimensionalitywarn": 570, "efficiencywarn": 571, "fitfailedwarn": 572, "inconsistentversionwarn": 573, "notfittederror": 574, "undefinedmetricwarn": 575, "enable_halving_search_cv": 576, "enable_iterative_imput": 577, "patchextractor": 580, "extract_patches_2d": 581, "grid_to_graph": 582, "img_to_graph": 583, "reconstruct_from_patches_2d": 584, "countvector": 585, "tfidftransform": 587, "genericunivariateselect": 589, "rfe": 590, "rfecv": 591, "selectfdr": 592, "selectfpr": 593, "selectfw": 595, "selectkbest": 596, "selectpercentil": 597, "selectormixin": 598, "variancethreshold": 600, "chi2": 601, "f_classif": 602, "f_regress": 603, "mutual_info_classif": 604, "mutual_info_regress": 605, "r_regress": 606, "gaussianprocessclassifi": 607, "gaussianprocessregressor": 608, "compoundkernel": 609, "constantkernel": 610, "dotproduct": 611, "expsinesquar": 612, "exponenti": 613, "matern": 616, "pairwisekernel": 617, "rationalquadrat": 620, "sum": 621, "whitekernel": 622, "get_config": 623, "knnimput": 625, "missingind": 626, "simpleimput": 627, "decisionboundarydisplai": 628, "partialdependencedisplai": 629, "partial_depend": 630, "permutation_import": 631, "isotonicregress": 632, "check_increas": 633, "isotonic_regress": 634, "additivechi2sampl": 635, "nystroem": [636, 978], "rbfsampler": 638, "skewedchi2sampl": 639, "kernelridg": 640, "ardregress": 641, "bayesianridg": 642, "elasticnetcv": 644, "gammaregressor": 645, "larscv": 648, "lassocv": 650, "lassolar": 651, "lassolarscv": 652, "lassolars": 653, "logisticregressioncv": 656, "multitaskelasticnet": 657, "multitaskelasticnetcv": 658, "multitasklasso": 659, "multitasklassocv": 660, "orthogonalmatchingpursuit": 661, "orthogonalmatchingpursuitcv": 662, "passiveaggressiveclassifi": 663, "passiveaggressiveregressor": 664, "poissonregressor": 666, "ransacregressor": 668, "ridgecv": 670, "ridgeclassifi": 671, "ridgeclassifiercv": 672, "sgdclassifi": 673, "sgdoneclasssvm": 674, "sgdregressor": 675, "theilsenregressor": 676, "enet_path": 678, "lars_path": 679, "lars_path_gram": 680, "lasso_path": 681, "orthogonal_mp": 682, "orthogonal_mp_gram": 683, "ridge_regress": 684, "locallylinearembed": 686, "md": [687, 983], "spectralembed": 688, "locally_linear_embed": 690, "smacof": 691, "spectral_embed": 692, "trustworthi": 693, "from_predict": [694, 697, 698, 699], "detcurvedisplai": 695, "distancemetr": 696, "predictionerrordisplai": 698, "accuracy_scor": 700, "adjusted_mutual_info_scor": 701, "adjusted_rand_scor": 702, "average_precision_scor": 704, "balanced_accuracy_scor": 705, "brier_score_loss": 706, "calinski_harabasz_scor": 707, "check_scor": 708, "class_likelihood_ratio": 709, "classification_report": 710, "contingency_matrix": 711, "pair_confusion_matrix": 712, "cohen_kappa_scor": 713, "completeness_scor": 714, "confusion_matrix": 715, "consensus_scor": 716, "coverage_error": 717, "d2_absolute_error_scor": 718, "d2_pinball_scor": 719, "d2_tweedie_scor": 720, "davies_bouldin_scor": 721, "dcg_score": 722, "det_curv": 723, "explained_variance_scor": 724, "f1_score": 725, "fbeta_scor": 726, "fowlkes_mallows_scor": 727, "get_scor": 728, "get_scorer_nam": 729, "hamming_loss": 730, "hinge_loss": 731, "homogeneity_completeness_v_measur": 732, "homogeneity_scor": 733, "jaccard_scor": 734, "label_ranking_average_precision_scor": 735, "label_ranking_loss": 736, "log_loss": 737, "make_scor": 738, "matthews_corrcoef": 739, "max_error": 740, "mean_absolute_error": 741, "mean_absolute_percentage_error": 742, "mean_gamma_devi": 743, "mean_pinball_loss": 744, "mean_poisson_devi": 745, "mean_squared_error": 746, "mean_squared_log_error": 747, "mean_tweedie_devi": 748, "median_absolute_error": 749, "multilabel_confusion_matrix": 750, "mutual_info_scor": 751, "ndcg_score": 752, "normalized_mutual_info_scor": 753, "additive_chi2_kernel": 754, "chi2_kernel": 755, "cosine_dist": 756, "cosine_similar": 757, "distance_metr": 758, "euclidean_dist": 759, "haversine_dist": 760, "kernel_metr": 761, "laplacian_kernel": 762, "linear_kernel": 763, "manhattan_dist": 764, "nan_euclidean_dist": 765, "paired_cosine_dist": 766, "paired_dist": 767, "paired_euclidean_dist": 768, "paired_manhattan_dist": 769, "pairwise_kernel": 770, "polynomial_kernel": 771, "rbf_kernel": 772, "sigmoid_kernel": 773, "pairwise_dist": 774, "pairwise_distances_argmin": 775, "pairwise_distances_argmin_min": 776, "pairwise_distances_chunk": 777, "precision_recall_curv": 778, "precision_recall_fscore_support": 779, "precision_scor": 780, "r2_score": 781, "rand_scor": 782, "recall_scor": 783, "roc_auc_scor": 784, "roc_curv": 785, "root_mean_squared_error": 786, "root_mean_squared_log_error": 787, "silhouette_sampl": 788, "silhouette_scor": 789, "top_k_accuracy_scor": 790, "v_measure_scor": 791, "zero_one_loss": 792, "bayesiangaussianmixtur": 793, "gaussianmixtur": 794, "groupkfold": 796, "groupshufflesplit": 797, "halvinggridsearchcv": 798, "halvingrandomsearchcv": 799, "kfold": 800, "learningcurvedisplai": 801, "leaveonegroupout": 802, "leaveoneout": 803, "leavepgroupsout": 804, "leavepout": 805, "parametergrid": 806, "parametersampl": 807, "predefinedsplit": 808, "randomizedsearchcv": 809, "repeatedkfold": 810, "repeatedstratifiedkfold": 811, "shufflesplit": 812, "stratifiedkfold": 814, "stratifiedshufflesplit": 815, "timeseriessplit": 816, "check_cv": 818, "cross_val_predict": 819, "learning_curv": 822, "permutation_test_scor": 823, "train_test_split": 824, "validation_curv": 825, "onevsoneclassifi": [826, 987], "outputcodeclassifi": [828, 987], "classifierchain": [829, 987], "multioutputclassifi": [830, 987], "multioutputregressor": [831, 987], "regressorchain": [832, 987], "bernoullinb": 833, "categoricalnb": 834, "complementnb": 835, "gaussiannb": 836, "multinomialnb": 837, "balltre": [838, 989], "kdtree": [839, 989], "kneighborsclassifi": 840, "kneighborsregressor": 841, "kneighborstransform": 842, "kerneldens": 843, "localoutlierfactor": 844, "nearestcentroid": 845, "nearestneighbor": 846, "neighborhoodcomponentsanalysi": 847, "radiusneighborsclassifi": 848, "radiusneighborsregressor": 849, "radiusneighborstransform": 850, "kneighbors_graph": 851, "radius_neighbors_graph": 852, "sort_graph_by_row_valu": 853, "bernoullirbm": 854, "mlpregressor": 856, "make_pipelin": 859, "make_union": 860, "binar": [861, 881, 996, 997], "functiontransform": 862, "kernelcenter": 864, "labelbinar": [865, 997], "labelencod": 866, "multilabelbinar": [869, 997], "polynomialfeatur": 873, "splinetransform": 877, "add_dummy_featur": 880, "label_binar": 882, "maxabs_scal": 883, "minmax_scal": 884, "power_transform": 886, "quantile_transform": 887, "robust_scal": 888, "gaussianrandomproject": 890, "sparserandomproject": 891, "johnson_lindenstrauss_min_dim": 892, "labelpropag": 893, "labelspread": 894, "selftrainingclassifi": 895, "set_config": 896, "show_vers": 897, "linearsvr": 899, "nusvc": 900, "nusvr": 901, "oneclasssvm": 902, "l1_min_c": 905, "decisiontreeclassifi": 906, "extratreeclassifi": 908, "extratreeregressor": 909, "export_graphviz": 910, "export_text": 911, "plot_tre": 912, "_safe_index": 914, "arrayfunc": 915, "min_po": 915, "as_float_arrai": 916, "assert_all_finit": 917, "check_x_i": 918, "check_arrai": 919, "check_consistent_length": 920, "check_random_st": 921, "check_scalar": 922, "class_weight": [923, 924], "compute_class_weight": 923, "compute_sample_weight": 924, "all_displai": 926, "all_estim": 927, "all_funct": 928, "estimator_check": [929, 930], "check_estim": 929, "parametrize_with_check": 930, "estimator_html_repr": 931, "extmath": [932, 933, 934, 935, 936, 937], "fast_logdet": 933, "randomized_range_find": 934, "randomized_svd": 935, "safe_sparse_dot": 936, "weighted_mod": 937, "gen_batch": 938, "gen_even_slic": 939, "single_source_shortest_path_length": 940, "metadata_rout": [942, 943, 944, 945, 946], "metadatarequest": 942, "metadatarout": 943, "methodmap": 944, "get_routing_for_object": 945, "process_rout": 946, "metaestim": 947, "available_if": 947, "is_multilabel": 948, "type_of_target": 949, "unique_label": 950, "murmurhash3_32": 951, "delai": 953, "parallel_backend": 954, "sample_without_replac": 955, "register_parallel_backend": 956, "resampl": 957, "safe_mask": 958, "safe_sqr": 959, "sparsefunc": [961, 962, 963, 964, 965, 966, 967, 1037], "incr_mean_variance_axi": 961, "inplace_column_scal": 962, "inplace_csr_column_scal": 963, "inplace_row_scal": 964, "inplace_swap_column": 965, "inplace_swap_row": 966, "mean_variance_axi": 967, "sparsefuncs_fast": [968, 969], "inplace_csr_row_normalize_l1": 968, "inplace_csr_row_normalize_l2": 969, "check_memori": 971, "check_symmetr": 972, "column_or_1d": 973, "has_fit_paramet": 974, "exhaust": 975, "min_resourc": 975, "aggress": [975, 982], "cv_results_": 975, "brute": [975, 989], "forc": [975, 989], "keep": 976, "mark": 976, "nan": 976, "chi": [978, 984], "skew": 978, "tensor": 978, "sketch": 978, "detail": [978, 1000, 1001], "omp": 982, "passiv": 982, "scenario": 982, "trade": 982, "off": 982, "which": 982, "consensu": 982, "median": [982, 986], "huber": 982, "extend": 982, "introduct": [983, 1012], "modifi": 983, "hessian": 983, "eigenmap": 983, "tangent": 983, "align": 983, "cosin": 984, "laplacian": 984, "pro": 985, "con": 985, "rule": 986, "cohen": 986, "kappa": 986, "ham": 986, "jaccard": 986, "hing": 986, "matthew": 986, "zero": 986, "brier": 986, "discount": 986, "cumul": 986, "gain": 986, "r\u00b2": 986, "absolut": 986, "logarithm": 986, "percentag": 986, "explain": 986, "pinbal": 986, "d\u00b2": 986, "complement": 988, "bernoulli": [988, 991], "unsupervis": [989, 991, 1003, 1020, 1022], "find": 989, "ball": 989, "leaf_siz": 989, "shrunken": 989, "warm_start": 990, "parametr": 991, "up": 992, "ellipt": 992, "envelop": 992, "isol": 992, "outlin": 994, "mislead": 994, "strongli": 994, "rang": 996, "whiten": 996, "bin": 996, "lemma": 998, "unlabel": 999, "entri": 999, "id3": 1002, "c4": 1002, "5": [1002, 1028], "c5": 1002, "cart": 1002, "welcom": 1004, "talk": 1005, "scientif": [1005, 1015], "framework": 1006, "domain": 1006, "translat": 1006, "roadmap": 1007, "statement": 1007, "2018": 1007, "architectur": 1007, "goal": 1007, "subpackag": 1007, "mail": 1009, "user": [1009, 1023], "gitter": 1009, "who": 1010, "j": 1010, "morgan": 1010, "spotifi": 1010, "inria": 1010, "betawork": 1010, "hug": 1010, "evernot": 1010, "t\u00e9l\u00e9com": 1010, "paristech": 1010, "book": 1010, "com": 1010, "aweb": 1010, "yhat": 1010, "rangespan": 1010, "birchbox": 1010, "bestofmedia": 1010, "phimeca": 1010, "howaboutw": 1010, "peerindex": 1010, "datarobot": 1010, "okcupid": 1010, "love": 1010, "publica": 1010, "machinali": 1010, "solido": 1010, "infonea": 1010, "dataiku": 1010, "otto": 1010, "zopa": 1010, "mar": 1010, "bnp": 1010, "pariba": 1010, "cardif": 1010, "section": 1012, "cast": 1012, "updat": [1012, 1038], "right": 1014, "put": 1017, "open": 1017, "ship": 1018, "would": 1018, "high": 1019, "solv": [1019, 1020], "vocabulari": 1019, "curs": 1019, "iris": 1019, "same": 1019, "seek": 1020, "constrain": 1020, "inverse_transform": 1020, "setup": 1021, "token": 1021, "occurr": 1021, "languag": 1021, "identif": 1021, "sentiment": 1021, "movi": 1021, "cli": 1021, "where": 1021, "12": 1028, "changelog": [1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "11": 1028, "9": 1028, "8": 1028, "7": 1028, "6": [1028, 1034], "modul": [1028, 1036, 1037, 1043, 1044, 1045], "misc": 1028, "4": [1028, 1036, 1045], "earlier": 1028, "13": 1029, "14": 1030, "15": 1031, "16": 1032, "17": 1033, "18": 1034, "last": 1034, "19": 1035, "21": 1037, "legend": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045], "post1": 1038, "websit": 1038, "clear": 1038, "public": 1038, "futurewarn": 1038, "enforc": [1039, 1041]}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"About us": [[0, "about-us"]], "History": [[0, "history"]], "Governance": [[0, "governance"]], "Authors": [[0, "authors"], [1028, "authors"], [1028, "id20"]], "Documentation Team": [[0, "documentation-team"]], "Contributor Experience Team": [[0, "contributor-experience-team"], [394, "contributor-experience-team"]], "Communication Team": [[0, "communication-team"]], "Emeritus Core Developers": [[0, "emeritus-core-developers"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Artwork": [[0, "artwork"]], "Funding": [[0, "funding"]], "Past Sponsors": [[0, "past-sponsors"]], "Sprints": [[0, "sprints"]], "Donating to the project": [[0, "donating-to-the-project"]], "Infrastructure support": [[0, "infrastructure-support"]], "Examples based on real world datasets": [[3, "examples-based-on-real-world-datasets"], [167, "examples-based-on-real-world-datasets"]], "Time-related feature engineering": [[4, "time-related-feature-engineering"]], "Data exploration on the Bike Sharing Demand dataset": [[4, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Time-based cross-validation": [[4, "time-based-cross-validation"]], "Gradient Boosting": [[4, "gradient-boosting"]], "Naive linear regression": [[4, "naive-linear-regression"]], "Time-steps as categories": [[4, "time-steps-as-categories"]], "Trigonometric features": [[4, "trigonometric-features"]], "Periodic spline features": [[4, "periodic-spline-features"]], "Qualitative analysis of the impact of features on linear model predictions": [[4, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Modeling pairwise interactions with splines and polynomial features": [[4, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling non-linear feature interactions with kernels": [[4, "modeling-non-linear-feature-interactions-with-kernels"]], "Concluding remarks": [[4, "concluding-remarks"], [225, "concluding-remarks"]], "Image denoising using kernel PCA": [[5, "image-denoising-using-kernel-pca"]], "References": [[5, null], [11, "references"], [26, "references"], [28, "references"], [82, "references"], [115, "references"], [176, "references"], [184, "references"], [188, null], [261, null], [279, "references"], [297, "references"], [374, null], [374, null], [374, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [414, null], [416, "references"], [976, "references"], [976, null], [993, null], [996, null], [996, null], [999, null], [999, null]], "Load the dataset via OpenML": [[5, "load-the-dataset-via-openml"]], "Learn the PCA basis": [[5, "learn-the-pca-basis"]], "Reconstruct and denoise test images": [[5, "reconstruct-and-denoise-test-images"]], "Faces recognition example using eigenfaces and SVMs": [[6, "faces-recognition-example-using-eigenfaces-and-svms"]], "Model Complexity Influence": [[7, "model-complexity-influence"]], "Load the data": [[7, "load-the-data"], [51, "load-the-data"], [126, "load-the-data"], [287, "load-the-data"]], "Benchmark influence": [[7, "benchmark-influence"]], "Choose parameters": [[7, "choose-parameters"]], "Run the code and plot the results": [[7, "run-the-code-and-plot-the-results"]], "Conclusion": [[7, "conclusion"], [13, "conclusion"], [189, "conclusion"], [279, "conclusion"], [287, "conclusion"], [313, "conclusion"], [341, "conclusion"]], "Out-of-core classification of text documents": [[8, "out-of-core-classification-of-text-documents"]], "Reuters Dataset related routines": [[8, "reuters-dataset-related-routines"]], "Main": [[8, "main"]], "Plot results": [[8, "plot-results"], [50, "plot-results"], [79, "plot-results"], [97, "plot-results"], [98, "plot-results"], [118, "plot-results"], [282, "plot-results"], [291, "plot-results"]], "Outlier detection on a real data set": [[9, "outlier-detection-on-a-real-data-set"]], "First example": [[9, "first-example"]], "Second example": [[9, "second-example"]], "Prediction Latency": [[10, "prediction-latency"], [365, "prediction-latency"]], "Benchmark and plot helper functions": [[10, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[10, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark n_features influence on prediction speed": [[10, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[10, "benchmark-throughput"]], "Species distribution modeling": [[11, "species-distribution-modeling"]], "Visualizing the stock market structure": [[12, "visualizing-the-stock-market-structure"]], "Retrieve the data from Internet": [[12, "retrieve-the-data-from-internet"]], "Learning a graph structure": [[12, "learning-a-graph-structure"]], "Clustering using affinity propagation": [[12, "clustering-using-affinity-propagation"]], "Embedding in 2D space": [[12, "embedding-in-2d-space"]], "Visualization": [[12, "visualization"], [337, "visualization"], [405, "visualization"]], "Lagged features for time series forecasting": [[13, "lagged-features-for-time-series-forecasting"]], "Analyzing the Bike Sharing Demand dataset": [[13, "analyzing-the-bike-sharing-demand-dataset"]], "Generating pandas-engineered lagged features": [[13, "generating-pandas-engineered-lagged-features"]], "Naive evaluation of the next hour bike demand regression": [[13, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Proper next hour forecasting evaluation": [[13, "proper-next-hour-forecasting-evaluation"]], "Modeling predictive uncertainty via quantile regression": [[13, "modeling-predictive-uncertainty-via-quantile-regression"]], "A qualitative look at the predictions": [[13, "a-qualitative-look-at-the-predictions"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[14, "compressive-sensing-tomography-reconstruction-with-l1-prior-lasso"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[15, "topic-extraction-with-non-negative-matrix-factorization-and-latent-dirichlet-allocation"]], "Computation times": [[16, "computation-times"], [23, "computation-times"], [29, "computation-times"], [36, "computation-times"], [69, "computation-times"], [77, "computation-times"], [84, "computation-times"], [88, "computation-times"], [94, "computation-times"], [108, "computation-times"], [136, "computation-times"], [142, "computation-times"], [150, "computation-times"], [162, "computation-times"], [166, "computation-times"], [174, "computation-times"], [177, "computation-times"], [219, "computation-times"], [227, "computation-times"], [244, "computation-times"], [253, "computation-times"], [277, "computation-times"], [280, "computation-times"], [283, "computation-times"], [298, "computation-times"], [304, "computation-times"], [314, "computation-times"], [323, "computation-times"], [331, "computation-times"], [348, "computation-times"], [353, "computation-times"], [360, "computation-times"]], "Libsvm GUI": [[17, "libsvm-gui"]], "Wikipedia principal eigenvector": [[18, "wikipedia-principal-eigenvector"]], "Download data, if not already on disk": [[18, "download-data-if-not-already-on-disk"]], "Loading the redirect files": [[18, "loading-the-redirect-files"]], "Computing the Adjacency matrix": [[18, "computing-the-adjacency-matrix"]], "Computing Principal Singular Vector using Randomized SVD": [[18, "computing-principal-singular-vector-using-randomized-svd"]], "Computing Centrality scores": [[18, "computing-centrality-scores"]], "Biclustering": [[19, "biclustering"], [167, "biclustering"], [375, "biclustering"], [403, "biclustering"]], "Biclustering documents with the Spectral Co-clustering algorithm": [[20, "biclustering-documents-with-the-spectral-co-clustering-algorithm"]], "A demo of the Spectral Biclustering algorithm": [[21, "a-demo-of-the-spectral-biclustering-algorithm"]], "Generate sample data": [[21, "generate-sample-data"], [39, "generate-sample-data"], [56, "generate-sample-data"], [64, "generate-sample-data"], [79, "generate-sample-data"], [97, "generate-sample-data"], [98, "generate-sample-data"], [145, "generate-sample-data"], [235, "generate-sample-data"], [274, "generate-sample-data"], [296, "generate-sample-data"], [344, "generate-sample-data"]], "Fitting SpectralBiclustering": [[21, "fitting-spectralbiclustering"]], "Plotting results": [[21, "plotting-results"]], "A demo of the Spectral Co-Clustering algorithm": [[22, "a-demo-of-the-spectral-co-clustering-algorithm"]], "Calibration": [[24, "calibration"], [167, "calibration"]], "Probability calibration of classifiers": [[25, "probability-calibration-of-classifiers"]], "Generate synthetic dataset": [[25, "generate-synthetic-dataset"], [179, "generate-synthetic-dataset"], [179, "id1"], [184, "generate-synthetic-dataset"]], "Gaussian Naive-Bayes": [[25, "gaussian-naive-bayes"]], "Plot data and the predicted probabilities": [[25, "plot-data-and-the-predicted-probabilities"]], "Probability Calibration curves": [[26, "probability-calibration-curves"]], "Dataset": [[26, "dataset"], [28, "dataset"], [189, "dataset"], [267, "dataset"]], "Calibration curves": [[26, "calibration-curves"], [28, "calibration-curves"], [404, "calibration-curves"]], "Gaussian Naive Bayes": [[26, "gaussian-naive-bayes"], [988, "gaussian-naive-bayes"]], "Linear support vector classifier": [[26, "linear-support-vector-classifier"]], "Summary": [[26, "summary"], [352, "summary"]], "Probability Calibration for 3-class classification": [[27, "probability-calibration-for-3-class-classification"]], "Data": [[27, "data"]], "Fitting and calibration": [[27, "fitting-and-calibration"]], "Compare probabilities": [[27, "compare-probabilities"]], "Comparison of Calibration of Classifiers": [[28, "comparison-of-calibration-of-classifiers"]], "Classification": [[30, "classification"], [33, "classification"], [160, "classification"], [167, "classification"], [413, "classification"], [413, "id10"], [982, "classification"], [989, "id4"], [990, "classification"], [1000, "classification"], [1001, "classification"], [1002, "classification"], [1019, "classification"]], "Plot classification probability": [[31, "plot-classification-probability"]], "Classifier comparison": [[32, "classifier-comparison"]], "Recognizing hand-written digits": [[33, "recognizing-hand-written-digits"]], "Digits dataset": [[33, "digits-dataset"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[34, "normal-ledoit-wolf-and-oas-linear-discriminant-analysis-for-classification"]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[35, "linear-and-quadratic-discriminant-analysis-with-covariance-ellipsoid"]], "Data generation": [[35, "data-generation"], [50, "data-generation"], [58, "data-generation"], [128, "data-generation"], [148, "data-generation"], [158, "data-generation"], [251, "data-generation"], [325, "data-generation"], [345, "data-generation"]], "Plotting Functions": [[35, "plotting-functions"]], "Comparison of LDA and QDA": [[35, "comparison-of-lda-and-qda"]], "Clustering": [[37, "clustering"], [167, "clustering"], [406, "clustering"]], "Adjustment for chance in clustering performance evaluation": [[38, "adjustment-for-chance-in-clustering-performance-evaluation"]], "Defining the list of metrics to evaluate": [[38, "defining-the-list-of-metrics-to-evaluate"]], "First experiment: fixed ground truth labels and growing number of clusters": [[38, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Second experiment: varying number of classes and clusters": [[38, "second-experiment-varying-number-of-classes-and-clusters"]], "Demo of affinity propagation clustering algorithm": [[39, "demo-of-affinity-propagation-clustering-algorithm"]], "Compute Affinity Propagation": [[39, "compute-affinity-propagation"]], "Plot result": [[39, "plot-result"], [64, "plot-result"], [68, "plot-result"], [68, "id2"]], "Agglomerative clustering with and without structure": [[40, "agglomerative-clustering-with-and-without-structure"]], "Agglomerative clustering with different metrics": [[41, "agglomerative-clustering-with-different-metrics"]], "Plot Hierarchical Clustering Dendrogram": [[42, "plot-hierarchical-clustering-dendrogram"]], "Compare BIRCH and MiniBatchKMeans": [[43, "compare-birch-and-minibatchkmeans"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[44, "bisecting-k-means-and-regular-k-means-performance-comparison"]], "Comparing different clustering algorithms on toy datasets": [[45, "comparing-different-clustering-algorithms-on-toy-datasets"]], "K-means Clustering": [[46, "k-means-clustering"]], "Segmenting the picture of greek coins in regions": [[47, "segmenting-the-picture-of-greek-coins-in-regions"]], "A demo of structured Ward hierarchical clustering on an image of coins": [[48, "a-demo-of-structured-ward-hierarchical-clustering-on-an-image-of-coins"]], "Generate data": [[48, "generate-data"], [68, "generate-data"], [81, "generate-data"], [194, "generate-data"], [303, "generate-data"]], "Define structure of the data": [[48, "define-structure-of-the-data"]], "Compute clustering": [[48, "compute-clustering"], [68, "compute-clustering"], [68, "id1"]], "Plot the results on an image": [[48, "plot-the-results-on-an-image"]], "Color Quantization using K-Means": [[49, "color-quantization-using-k-means"]], "Demo of DBSCAN clustering algorithm": [[50, "demo-of-dbscan-clustering-algorithm"]], "Compute DBSCAN": [[50, "compute-dbscan"]], "Online learning of a dictionary of parts of faces": [[51, "online-learning-of-a-dictionary-of-parts-of-faces"]], "Learn the dictionary of images": [[51, "learn-the-dictionary-of-images"]], "Plot the results": [[51, "plot-the-results"], [83, "plot-the-results"], [135, "plot-the-results"], [165, "plot-the-results"]], "Feature agglomeration": [[52, "feature-agglomeration"], [1003, "feature-agglomeration"], [1020, "feature-agglomeration"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[53, "various-agglomerative-clustering-on-a-2d-embedding-of-digits"]], "Vector Quantization Example": [[54, "vector-quantization-example"]], "Original image": [[54, "original-image"]], "Compression via vector quantization": [[54, "compression-via-vector-quantization"]], "Encoding strategy": [[54, "encoding-strategy"]], "Memory footprint": [[54, "memory-footprint"]], "Feature agglomeration vs. univariate selection": [[55, "feature-agglomeration-vs-univariate-selection"]], "Demo of HDBSCAN clustering algorithm": [[56, "demo-of-hdbscan-clustering-algorithm"]], "Scale Invariance": [[56, "scale-invariance"]], "Multi-Scale Clustering": [[56, "multi-scale-clustering"]], "Hyperparameter Robustness": [[56, "hyperparameter-robustness"]], "min_cluster_size": [[56, "min-cluster-size"]], "min_samples": [[56, "min-samples"]], "dbscan_clustering": [[56, "dbscan-clustering"]], "Inductive Clustering": [[57, "inductive-clustering"]], "Demonstration of k-means assumptions": [[58, "demonstration-of-k-means-assumptions"]], "Fit models and plot results": [[58, "fit-models-and-plot-results"]], "Possible solutions": [[58, "possible-solutions"]], "Final remarks": [[58, "final-remarks"]], "A demo of K-Means clustering on the handwritten digits data": [[59, "a-demo-of-k-means-clustering-on-the-handwritten-digits-data"]], "Load the dataset": [[59, "load-the-dataset"]], "Define our evaluation benchmark": [[59, "define-our-evaluation-benchmark"]], "Run the benchmark": [[59, "run-the-benchmark"]], "Visualize the results on PCA-reduced data": [[59, "visualize-the-results-on-pca-reduced-data"]], "An example of K-Means++ initialization": [[60, "an-example-of-k-means-initialization"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[61, "selecting-the-number-of-clusters-with-silhouette-analysis-on-kmeans-clustering"]], "Empirical evaluation of the impact of k-means initialization": [[62, "empirical-evaluation-of-the-impact-of-k-means-initialization"]], "Comparing different hierarchical linkage methods on toy datasets": [[63, "comparing-different-hierarchical-linkage-methods-on-toy-datasets"]], "A demo of the mean-shift clustering algorithm": [[64, "a-demo-of-the-mean-shift-clustering-algorithm"]], "Compute clustering with MeanShift": [[64, "compute-clustering-with-meanshift"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[65, "comparison-of-the-k-means-and-minibatchkmeans-clustering-algorithms"]], "Generate the data": [[65, "generate-the-data"], [67, "generate-the-data"], [83, "generate-the-data"]], "Compute clustering with KMeans": [[65, "compute-clustering-with-kmeans"]], "Compute clustering with MiniBatchKMeans": [[65, "compute-clustering-with-minibatchkmeans"]], "Establishing parity between clusters": [[65, "establishing-parity-between-clusters"]], "Plotting the results": [[65, "plotting-the-results"], [113, "plotting-the-results"]], "Demo of OPTICS clustering algorithm": [[66, "demo-of-optics-clustering-algorithm"]], "Spectral clustering for image segmentation": [[67, "spectral-clustering-for-image-segmentation"]], "Plotting four circles": [[67, "plotting-four-circles"]], "Plotting two circles": [[67, "plotting-two-circles"]], "Hierarchical clustering: structured vs unstructured ward": [[68, "hierarchical-clustering-structured-vs-unstructured-ward"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[68, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Pipelines and composite estimators": [[70, "pipelines-and-composite-estimators"], [167, "pipelines-and-composite-estimators"], [407, "pipelines-and-composite-estimators"]], "Column Transformer with Heterogeneous Data Sources": [[71, "column-transformer-with-heterogeneous-data-sources"]], "20 newsgroups dataset": [[71, "newsgroups-dataset"]], "Creating transformers": [[71, "creating-transformers"]], "Classification pipeline": [[71, "classification-pipeline"]], "Column Transformer with Mixed Types": [[72, "column-transformer-with-mixed-types"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[73, "selecting-dimensionality-reduction-with-pipeline-and-gridsearchcv"]], "Illustration of Pipeline and GridSearchCV": [[73, "illustration-of-pipeline-and-gridsearchcv"]], "Caching transformers within a Pipeline": [[73, "caching-transformers-within-a-pipeline"]], "Pipelining: chaining a PCA and a logistic regression": [[74, "pipelining-chaining-a-pca-and-a-logistic-regression"]], "Concatenating multiple feature extraction methods": [[75, "concatenating-multiple-feature-extraction-methods"]], "Effect of transforming the targets in regression model": [[76, "effect-of-transforming-the-targets-in-regression-model"]], "Synthetic example": [[76, "synthetic-example"]], "Real-world data set": [[76, "real-world-data-set"]], "Covariance estimation": [[78, "covariance-estimation"], [167, "covariance-estimation"], [408, "covariance-estimation"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[79, "shrinkage-covariance-estimation-ledoitwolf-vs-oas-and-max-likelihood"]], "Compute the likelihood on test data": [[79, "compute-the-likelihood-on-test-data"]], "Compare different approaches to setting the regularization parameter": [[79, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Ledoit-Wolf vs OAS estimation": [[80, "ledoit-wolf-vs-oas-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[81, "robust-covariance-estimation-and-mahalanobis-distances-relevance"]], "References:": [[81, null], [112, null], [172, null], [266, null], [267, null], [373, null], [374, null], [403, null], [403, null], [403, null], [404, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [408, null], [408, null], [408, null], [408, null], [410, null], [410, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [414, null], [414, null], [975, null], [975, null], [978, null], [979, null], [980, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [983, null], [984, null], [984, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [987, null], [987, null], [987, null], [989, null], [989, null], [989, null], [990, null], [991, null], [992, null], [992, null], [992, null], [992, null], [994, null], [996, null], [996, null], [998, null], [998, null], [998, null], [1000, null], [1000, null], [1001, null]], "Comparison of results": [[81, "comparison-of-results"]], "Robust vs Empirical covariance estimate": [[82, "robust-vs-empirical-covariance-estimate"]], "Minimum Covariance Determinant Estimator": [[82, "minimum-covariance-determinant-estimator"]], "Evaluation": [[82, "evaluation"], [303, "evaluation"]], "Sparse inverse covariance estimation": [[83, "sparse-inverse-covariance-estimation"]], "Estimate the covariance": [[83, "estimate-the-covariance"]], "Cross decomposition": [[85, "cross-decomposition"], [167, "cross-decomposition"], [409, "cross-decomposition"]], "Compare cross decomposition methods": [[86, "compare-cross-decomposition-methods"]], "Dataset based latent variables model": [[86, "dataset-based-latent-variables-model"]], "Canonical (symmetric) PLS": [[86, "canonical-symmetric-pls"]], "Transform data": [[86, "transform-data"]], "Scatter plot of scores": [[86, "scatter-plot-of-scores"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[86, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[86, "pls-regression-with-univariate-response-a-k-a-pls1"]], "CCA (PLS mode B with symmetric deflation)": [[86, "cca-pls-mode-b-with-symmetric-deflation"]], "Principal Component Regression vs Partial Least Squares Regression": [[87, "principal-component-regression-vs-partial-least-squares-regression"]], "The data": [[87, "the-data"]], "Projection on one component and predictive power": [[87, "projection-on-one-component-and-predictive-power"]], "Dataset examples": [[89, "dataset-examples"], [167, "dataset-examples"]], "The Digit Dataset": [[90, "the-digit-dataset"]], "The Iris Dataset": [[91, "the-iris-dataset"]], "Loading the iris dataset": [[91, "loading-the-iris-dataset"]], "Scatter Plot of the Iris dataset": [[91, "scatter-plot-of-the-iris-dataset"]], "Plot a PCA representation": [[91, "plot-a-pca-representation"]], "Plot randomly generated classification dataset": [[92, "plot-randomly-generated-classification-dataset"]], "Plot randomly generated multilabel dataset": [[93, "plot-randomly-generated-multilabel-dataset"]], "Decomposition": [[95, "decomposition"], [96, "decomposition"], [167, "decomposition"]], "Faces dataset decompositions": [[96, "faces-dataset-decompositions"]], "Dataset preparation": [[96, "dataset-preparation"], [221, "dataset-preparation"]], "Eigenfaces - PCA using randomized SVD": [[96, "eigenfaces-pca-using-randomized-svd"]], "Non-negative components - NMF": [[96, "non-negative-components-nmf"]], "Independent components - FastICA": [[96, "independent-components-fastica"]], "Sparse components - MiniBatchSparsePCA": [[96, "sparse-components-minibatchsparsepca"]], "Dictionary learning": [[96, "dictionary-learning"]], "Cluster centers - MiniBatchKMeans": [[96, "cluster-centers-minibatchkmeans"]], "Factor Analysis components - FA": [[96, "factor-analysis-components-fa"]], "Decomposition: Dictionary learning": [[96, "decomposition-dictionary-learning"]], "Dictionary learning - positive dictionary": [[96, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive code": [[96, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary & code": [[96, "dictionary-learning-positive-dictionary-code"]], "Blind source separation using FastICA": [[97, "blind-source-separation-using-fastica"]], "Fit ICA and PCA models": [[97, "fit-ica-and-pca-models"]], "FastICA on 2D point clouds": [[98, "fastica-on-2d-point-clouds"]], "Image denoising using dictionary learning": [[99, "image-denoising-using-dictionary-learning"]], "Generate distorted image": [[99, "generate-distorted-image"]], "Display the distorted image": [[99, "display-the-distorted-image"]], "Extract reference patches": [[99, "extract-reference-patches"]], "Learn the dictionary from reference patches": [[99, "learn-the-dictionary-from-reference-patches"]], "Extract noisy patches and reconstruct them using the dictionary": [[99, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Incremental PCA": [[100, "incremental-pca"], [411, "incremental-pca"]], "Kernel PCA": [[101, "kernel-pca"]], "Projecting data: PCA vs. KernelPCA": [[101, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[101, "projecting-into-the-original-feature-space"]], "Principal components analysis (PCA)": [[102, "principal-components-analysis-pca"]], "Create the data": [[102, "create-the-data"], [104, "create-the-data"]], "Plot the figures": [[102, "plot-the-figures"]], "PCA example with Iris Data-set": [[103, "pca-example-with-iris-data-set"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[104, "model-selection-with-probabilistic-pca-and-factor-analysis-fa"]], "Fit the models": [[104, "fit-the-models"]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[105, "comparison-of-lda-and-pca-2d-projection-of-iris-dataset"]], "Sparse coding with a precomputed dictionary": [[106, "sparse-coding-with-a-precomputed-dictionary"], [411, "sparse-coding-with-a-precomputed-dictionary"]], "Factor Analysis (with rotation) to visualize patterns": [[107, "factor-analysis-with-rotation-to-visualize-patterns"]], "Developing Estimators": [[109, "developing-estimators"], [167, "developing-estimators"]], "__sklearn_is_fitted__ as Developer API": [[110, "sklearn-is-fitted-as-developer-api"]], "An example custom estimator implementing a simple classifier": [[110, "an-example-custom-estimator-implementing-a-simple-classifier"]], "Ensemble methods": [[111, "ensemble-methods"], [167, "ensemble-methods"]], "Multi-class AdaBoosted Decision Trees": [[112, "multi-class-adaboosted-decision-trees"]], "Creating the dataset": [[112, "creating-the-dataset"]], "Training the AdaBoostClassifier": [[112, "training-the-adaboostclassifier"]], "Analysis": [[112, "analysis"]], "Convergence of the AdaBoostClassifier": [[112, "convergence-of-the-adaboostclassifier"]], "Errors and weights of the Weak Learners": [[112, "errors-and-weights-of-the-weak-learners"]], "Decision Tree Regression with AdaBoost": [[113, "decision-tree-regression-with-adaboost"]], "Preparing the data": [[113, "preparing-the-data"], [176, "preparing-the-data"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[113, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Two-class AdaBoost": [[114, "two-class-adaboost"]], "Single estimator versus bagging: bias-variance decomposition": [[115, "single-estimator-versus-bagging-bias-variance-decomposition"]], "OOB Errors for Random Forests": [[116, "oob-errors-for-random-forests"]], "Feature transformations with ensembles of trees": [[117, "feature-transformations-with-ensembles-of-trees"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[118, "comparing-random-forests-and-histogram-gradient-boosting-models"]], "Load dataset": [[118, "load-dataset"]], "Compute score and computation times": [[118, "compute-score-and-computation-times"]], "Feature importances with a forest of trees": [[119, "feature-importances-with-a-forest-of-trees"]], "Data generation and model fitting": [[119, "data-generation-and-model-fitting"]], "Feature importance based on mean decrease in impurity": [[119, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance based on feature permutation": [[119, "feature-importance-based-on-feature-permutation"]], "Pixel importances with a parallel forest of trees": [[120, "pixel-importances-with-a-parallel-forest-of-trees"]], "Loading the data and model fitting": [[120, "loading-the-data-and-model-fitting"]], "Feature importance based on mean decrease in impurity (MDI)": [[120, "feature-importance-based-on-mean-decrease-in-impurity-mdi"]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[121, "plot-the-decision-surfaces-of-ensembles-of-trees-on-the-iris-dataset"]], "Categorical Feature Support in Gradient Boosting": [[122, "categorical-feature-support-in-gradient-boosting"]], "Load Ames Housing dataset": [[122, "load-ames-housing-dataset"]], "Gradient boosting estimator with dropped categorical features": [[122, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with one-hot encoding": [[122, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[122, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient boosting estimator with native categorical support": [[122, "gradient-boosting-estimator-with-native-categorical-support"]], "Model comparison": [[122, "model-comparison"]], "Limiting the number of splits": [[122, "limiting-the-number-of-splits"]], "Early stopping in Gradient Boosting": [[123, "early-stopping-in-gradient-boosting"]], "Compare scores with and without early stopping": [[123, "compare-scores-with-and-without-early-stopping"]], "Compare fit times with and without early stopping": [[123, "compare-fit-times-with-and-without-early-stopping"]], "Gradient Boosting Out-of-Bag estimates": [[124, "gradient-boosting-out-of-bag-estimates"]], "Prediction Intervals for Gradient Boosting Regression": [[125, "prediction-intervals-for-gradient-boosting-regression"]], "Fitting non-linear quantile and least squares regressors": [[125, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Analysis of the error metrics": [[125, "analysis-of-the-error-metrics"]], "Calibration of the confidence interval": [[125, "calibration-of-the-confidence-interval"]], "Tuning the hyper-parameters of the quantile regressors": [[125, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Gradient Boosting regression": [[126, "gradient-boosting-regression"]], "Data preprocessing": [[126, "data-preprocessing"]], "Fit regression model": [[126, "fit-regression-model"], [296, "fit-regression-model"], [344, "fit-regression-model"]], "Plot training deviance": [[126, "plot-training-deviance"]], "Plot feature importance": [[126, "plot-feature-importance"]], "Gradient Boosting regularization": [[127, "gradient-boosting-regularization"]], "IsolationForest example": [[128, "isolationforest-example"]], "Training of the model": [[128, "training-of-the-model"]], "Plot discrete decision boundary": [[128, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[128, "plot-path-length-decision-boundary"]], "Monotonic Constraints": [[129, "monotonic-constraints"], [413, "monotonic-constraints"]], "Using feature names to specify monotonic constraints": [[129, "using-feature-names-to-specify-monotonic-constraints"]], "Hashing feature transformation using Totally Random Trees": [[130, "hashing-feature-transformation-using-totally-random-trees"]], "Comparing random forests and the multi-output meta estimator": [[131, "comparing-random-forests-and-the-multi-output-meta-estimator"]], "Combine predictors using stacking": [[132, "combine-predictors-using-stacking"]], "Download the dataset": [[132, "download-the-dataset"]], "Make pipeline to preprocess the data": [[132, "make-pipeline-to-preprocess-the-data"]], "Stack of predictors on a single data set": [[132, "stack-of-predictors-on-a-single-data-set"]], "Measure and plot the results": [[132, "measure-and-plot-the-results"]], "Plot the decision boundaries of a VotingClassifier": [[133, "plot-the-decision-boundaries-of-a-votingclassifier"]], "Plot class probabilities calculated by the VotingClassifier": [[134, "plot-class-probabilities-calculated-by-the-votingclassifier"]], "Plot individual and voting regression predictions": [[135, "plot-individual-and-voting-regression-predictions"]], "Training classifiers": [[135, "training-classifiers"]], "Making predictions": [[135, "making-predictions"]], "Tutorial exercises": [[137, "tutorial-exercises"], [167, "tutorial-exercises"]], "Cross-validation on diabetes Dataset Exercise": [[138, "cross-validation-on-diabetes-dataset-exercise"]], "Load dataset and apply GridSearchCV": [[138, "load-dataset-and-apply-gridsearchcv"]], "Plot error lines showing +/- std. errors of the scores": [[138, "plot-error-lines-showing-std-errors-of-the-scores"]], "Bonus: how much can you trust the selection of alpha?": [[138, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Cross-validation on Digits Dataset Exercise": [[139, "cross-validation-on-digits-dataset-exercise"]], "Digits Classification Exercise": [[140, "digits-classification-exercise"]], "SVM Exercise": [[141, "svm-exercise"]], "Feature Selection": [[143, "feature-selection"], [167, "feature-selection"]], "Comparison of F-test and mutual information": [[144, "comparison-of-f-test-and-mutual-information"]], "Univariate Feature Selection": [[145, "univariate-feature-selection"]], "Univariate feature selection": [[145, "id1"], [415, "univariate-feature-selection"]], "Compare with SVMs": [[145, "compare-with-svms"]], "Pipeline ANOVA SVM": [[146, "pipeline-anova-svm"]], "Recursive feature elimination": [[147, "recursive-feature-elimination"], [415, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[148, "recursive-feature-elimination-with-cross-validation"]], "Model training and selection": [[148, "model-training-and-selection"], [251, "model-training-and-selection"]], "Plot number of features VS. cross-validation scores": [[148, "plot-number-of-features-vs-cross-validation-scores"]], "Model-based and sequential feature selection": [[149, "model-based-and-sequential-feature-selection"]], "Loading the data": [[149, "loading-the-data"]], "Feature importance from coefficients": [[149, "feature-importance-from-coefficients"]], "Selecting features based on importance": [[149, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[149, "selecting-features-with-sequential-feature-selection"]], "Using negative tolerance values": [[149, "using-negative-tolerance-values"]], "Gaussian Process for Machine Learning": [[151, "gaussian-process-for-machine-learning"], [167, "gaussian-process-for-machine-learning"]], "Comparison of kernel ridge and Gaussian process regression": [[152, "comparison-of-kernel-ridge-and-gaussian-process-regression"]], "Generating a dataset": [[152, "generating-a-dataset"]], "Limitations of a simple linear model": [[152, "limitations-of-a-simple-linear-model"]], "Kernel methods: kernel ridge and Gaussian process": [[152, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel ridge": [[152, "kernel-ridge"]], "Gaussian process regression": [[152, "gaussian-process-regression"]], "Final conclusion": [[152, "final-conclusion"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[153, "probabilistic-predictions-with-gaussian-process-classification-gpc"]], "Gaussian process classification (GPC) on iris dataset": [[154, "gaussian-process-classification-gpc-on-iris-dataset"], [416, "gaussian-process-classification-gpc-on-iris-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[155, "iso-probability-lines-for-gaussian-processes-classification-gpc"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[156, "illustration-of-gaussian-process-classification-gpc-on-the-xor-dataset"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[157, "forecasting-of-co2-level-on-mona-loa-dataset-using-gaussian-process-regression-gpr"]], "Build the dataset": [[157, "build-the-dataset"]], "Design the proper kernel": [[157, "design-the-proper-kernel"]], "Model fitting and extrapolation": [[157, "model-fitting-and-extrapolation"]], "Interpretation of kernel hyperparameters": [[157, "interpretation-of-kernel-hyperparameters"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[158, "ability-of-gaussian-process-regression-gpr-to-estimate-data-noise-level"]], "Optimisation of kernel hyperparameters in GPR": [[158, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Gaussian Processes regression: basic introductory example": [[159, "gaussian-processes-regression-basic-introductory-example"]], "Dataset generation": [[159, "dataset-generation"], [202, "dataset-generation"]], "Example with noise-free target": [[159, "example-with-noise-free-target"]], "Example with noisy targets": [[159, "example-with-noisy-targets"]], "Gaussian processes on discrete data structures": [[160, "gaussian-processes-on-discrete-data-structures"]], "Sequence similarity matrix under the kernel": [[160, "sequence-similarity-matrix-under-the-kernel"]], "Regression": [[160, "regression"], [413, "regression"], [413, "id9"], [982, "regression"], [990, "regression"], [1000, "regression"], [1001, "regression"], [1002, "regression"]], "Illustration of prior and posterior Gaussian process for different kernels": [[161, "illustration-of-prior-and-posterior-gaussian-process-for-different-kernels"]], "Helper function": [[161, "helper-function"]], "Dataset and Gaussian process generation": [[161, "dataset-and-gaussian-process-generation"]], "Kernel cookbook": [[161, "kernel-cookbook"]], "Radial Basis Function kernel": [[161, "radial-basis-function-kernel"]], "Rational Quadradtic kernel": [[161, "rational-quadradtic-kernel"]], "Exp-Sine-Squared kernel": [[161, "exp-sine-squared-kernel"], [416, "exp-sine-squared-kernel"]], "Dot-product kernel": [[161, "dot-product-kernel"]], "Mat\u00e9rn kernel": [[161, "matern-kernel"], [416, "matern-kernel"]], "Missing Value Imputation": [[163, "missing-value-imputation"], [167, "missing-value-imputation"]], "Imputing missing values with variants of IterativeImputer": [[164, "imputing-missing-values-with-variants-of-iterativeimputer"]], "Imputing missing values before building an estimator": [[165, "imputing-missing-values-before-building-an-estimator"]], "Download the data and make missing values sets": [[165, "download-the-data-and-make-missing-values-sets"]], "Impute the missing data and score": [[165, "impute-the-missing-data-and-score"]], "Missing information": [[165, "missing-information"]], "Estimate the score": [[165, "estimate-the-score"]], "Replace missing values by 0": [[165, "replace-missing-values-by-0"]], "kNN-imputation of the missing values": [[165, "knn-imputation-of-the-missing-values"]], "Impute missing values with mean": [[165, "impute-missing-values-with-mean"]], "Iterative imputation of the missing values": [[165, "iterative-imputation-of-the-missing-values"]], "Examples": [[167, "examples"], [367, "examples"], [374, null], [410, null], [410, null], [415, null], [415, null], [416, null], [982, null], [982, null], [982, null], [999, null], [999, null], [1003, null], [1003, null], [1003, null], [1028, "examples"]], "Release Highlights": [[167, "release-highlights"], [315, "release-highlights"]], "Decision Trees": [[167, "decision-trees"], [354, "decision-trees"], [1002, "decision-trees"]], "Gaussian Mixture Models": [[167, "gaussian-mixture-models"], [245, "gaussian-mixture-models"]], "Generalized Linear Models": [[167, "generalized-linear-models"], [178, "generalized-linear-models"], [982, "generalized-linear-models"]], "Inspection": [[167, "inspection"], [168, "inspection"], [395, "inspection"]], "Kernel Approximation": [[167, "kernel-approximation"], [175, "kernel-approximation"], [978, "kernel-approximation"]], "Manifold learning": [[167, "manifold-learning"], [220, "manifold-learning"], [983, "manifold-learning"]], "Miscellaneous": [[167, "miscellaneous"], [228, "miscellaneous"], [405, "miscellaneous"], [1036, "miscellaneous"], [1036, "id40"], [1037, "miscellaneous"], [1038, "miscellaneous"], [1039, "miscellaneous"], [1039, "id13"], [1040, "miscellaneous"], [1041, "miscellaneous"], [1044, "miscellaneous"]], "Model Selection": [[167, "model-selection"], [254, "model-selection"]], "Multiclass methods": [[167, "multiclass-methods"], [278, "multiclass-methods"]], "Multioutput methods": [[167, "multioutput-methods"], [281, "multioutput-methods"]], "Nearest Neighbors": [[167, "nearest-neighbors"], [285, "nearest-neighbors"], [989, "nearest-neighbors"]], "Neural Networks": [[167, "neural-networks"], [299, "neural-networks"]], "Preprocessing": [[167, "preprocessing"], [305, "preprocessing"]], "Semi Supervised Classification": [[167, "semi-supervised-classification"], [324, "semi-supervised-classification"]], "Support Vector Machines": [[167, "support-vector-machines"], [332, "support-vector-machines"], [1001, "support-vector-machines"]], "Working with text documents": [[167, "working-with-text-documents"], [349, "working-with-text-documents"]], "Failure of Machine Learning to infer causal effects": [[169, "failure-of-machine-learning-to-infer-causal-effects"]], "The dataset: simulated hourly wages": [[169, "the-dataset-simulated-hourly-wages"]], "Description of the simulated data": [[169, "description-of-the-simulated-data"]], "Income prediction with fully observed variables": [[169, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[169, "income-prediction-with-partial-observations"]], "Lessons learned": [[169, "lessons-learned"], [170, "lessons-learned"]], "Common pitfalls in the interpretation of coefficients of linear models": [[170, "common-pitfalls-in-the-interpretation-of-coefficients-of-linear-models"]], "The dataset: wages": [[170, "the-dataset-wages"]], "The machine-learning pipeline": [[170, "the-machine-learning-pipeline"]], "Processing the dataset": [[170, "processing-the-dataset"]], "Interpreting coefficients: scale matters": [[170, "interpreting-coefficients-scale-matters"]], "Checking the variability of the coefficients": [[170, "checking-the-variability-of-the-coefficients"]], "The problem of correlated variables": [[170, "the-problem-of-correlated-variables"]], "Preprocessing numerical variables": [[170, "preprocessing-numerical-variables"]], "Linear models with regularization": [[170, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[170, "linear-models-with-sparse-coefficients"]], "Wrong causal interpretation": [[170, "wrong-causal-interpretation"]], "Partial Dependence and Individual Conditional Expectation Plots": [[171, "partial-dependence-and-individual-conditional-expectation-plots"]], "Bike sharing dataset preprocessing": [[171, "bike-sharing-dataset-preprocessing"]], "Preprocessor for machine-learning models": [[171, "preprocessor-for-machine-learning-models"]], "Preprocessor for the neural network model": [[171, "preprocessor-for-the-neural-network-model"]], "Preprocessor for the gradient boosting model": [[171, "preprocessor-for-the-gradient-boosting-model"]], "1-way partial dependence with different models": [[171, "way-partial-dependence-with-different-models"]], "Multi-layer perceptron": [[171, "multi-layer-perceptron"]], "Gradient boosting": [[171, "gradient-boosting"]], "Analysis of the plots": [[171, "analysis-of-the-plots"]], "ICE vs. PDP": [[171, "ice-vs-pdp"]], "2D interaction plots": [[171, "d-interaction-plots"]], "3D representation": [[171, "d-representation"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[172, "permutation-importance-vs-random-forest-feature-importance-mdi"]], "Data Loading and Feature Engineering": [[172, "data-loading-and-feature-engineering"]], "Accuracy of the Model": [[172, "accuracy-of-the-model"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[172, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Permutation Importance with Multicollinear or Correlated Features": [[173, "permutation-importance-with-multicollinear-or-correlated-features"]], "Random Forest Feature Importance on Breast Cancer Data": [[173, "random-forest-feature-importance-on-breast-cancer-data"]], "Handling Multicollinear Features": [[173, "handling-multicollinear-features"]], "Scalable learning with polynomial kernel approximation": [[176, "scalable-learning-with-polynomial-kernel-approximation"]], "Partitioning the data": [[176, "partitioning-the-data"]], "Feature normalization": [[176, "feature-normalization"]], "Establishing a baseline model": [[176, "establishing-a-baseline-model"]], "Establishing the kernel approximation model": [[176, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[176, "establishing-the-kernelized-svm-model"]], "Comparing the results": [[176, "comparing-the-results"]], "Comparing Linear Bayesian Regressors": [[179, "comparing-linear-bayesian-regressors"]], "Models robustness to recover the ground truth weights": [[179, "models-robustness-to-recover-the-ground-truth-weights"]], "Fit the regressors": [[179, "fit-the-regressors"], [179, "id2"]], "Plot the true and estimated coefficients": [[179, "plot-the-true-and-estimated-coefficients"]], "Plot the marginal log-likelihood": [[179, "plot-the-marginal-log-likelihood"]], "Bayesian regressions with polynomial feature expansion": [[179, "bayesian-regressions-with-polynomial-feature-expansion"]], "Plotting polynomial regressions with std errors of the scores": [[179, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Curve Fitting with Bayesian Ridge Regression": [[180, "curve-fitting-with-bayesian-ridge-regression"]], "Generate sinusoidal data with noise": [[180, "generate-sinusoidal-data-with-noise"]], "Fit by cubic polynomial": [[180, "fit-by-cubic-polynomial"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[180, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[181, "fitting-an-elastic-net-with-a-precomputed-gram-matrix-and-weighted-samples"]], "HuberRegressor vs Ridge on dataset with strong outliers": [[182, "huberregressor-vs-ridge-on-dataset-with-strong-outliers"]], "Logistic Regression 3-class Classifier": [[183, "logistic-regression-3-class-classifier"]], "L1-based models for Sparse Signals": [[184, "l1-based-models-for-sparse-signals"]], "Lasso": [[184, "lasso"], [982, "lasso"]], "Automatic Relevance Determination (ARD)": [[184, "automatic-relevance-determination-ard"]], "ElasticNet": [[184, "elasticnet"]], "Plot and analysis of the results": [[184, "plot-and-analysis-of-the-results"]], "Conclusions": [[184, "conclusions"]], "Lasso and Elastic Net": [[185, "lasso-and-elastic-net"]], "Lasso on dense and sparse data": [[186, "lasso-on-dense-and-sparse-data"]], "Comparing the two Lasso implementations on Dense data": [[186, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[186, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Lasso path using LARS": [[187, "lasso-path-using-lars"]], "Lasso model selection via information criteria": [[188, "lasso-model-selection-via-information-criteria"]], "Lasso model selection: AIC-BIC / cross-validation": [[189, "lasso-model-selection-aic-bic-cross-validation"]], "Selecting Lasso via an information criterion": [[189, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[189, "selecting-lasso-via-cross-validation"]], "Lasso via coordinate descent": [[189, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[189, "lasso-via-least-angle-regression"]], "Summary of cross-validation approach": [[189, "summary-of-cross-validation-approach"]], "Logistic function": [[190, "logistic-function"]], "L1 Penalty and Sparsity in Logistic Regression": [[191, "l1-penalty-and-sparsity-in-logistic-regression"]], "Plot multinomial and One-vs-Rest Logistic Regression": [[192, "plot-multinomial-and-one-vs-rest-logistic-regression"]], "Regularization path of L1- Logistic Regression": [[193, "regularization-path-of-l1-logistic-regression"]], "Load data": [[193, "load-data"]], "Compute regularization path": [[193, "compute-regularization-path"]], "Plot regularization path": [[193, "plot-regularization-path"]], "Joint feature selection with multi-task Lasso": [[194, "joint-feature-selection-with-multi-task-lasso"]], "Fit models": [[194, "fit-models"], [282, "fit-models"]], "Plot support and time series": [[194, "plot-support-and-time-series"]], "Non-negative least squares": [[195, "non-negative-least-squares"]], "Linear Regression Example": [[196, "linear-regression-example"]], "Sparsity Example: Fitting only features 1  and 2": [[197, "sparsity-example-fitting-only-features-1-and-2"]], "Ordinary Least Squares and Ridge Regression Variance": [[198, "ordinary-least-squares-and-ridge-regression-variance"]], "Orthogonal Matching Pursuit": [[199, "orthogonal-matching-pursuit"]], "Poisson regression and non-normal loss": [[200, "poisson-regression-and-non-normal-loss"]], "The French Motor Third-Party Liability Claims dataset": [[200, "the-french-motor-third-party-liability-claims-dataset"]], "A constant prediction baseline": [[200, "a-constant-prediction-baseline"]], "(Generalized) linear models": [[200, "generalized-linear-models"]], "Gradient Boosting Regression Trees for Poisson regression": [[200, "gradient-boosting-regression-trees-for-poisson-regression"]], "Evaluation of the calibration of predictions": [[200, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[200, "evaluation-of-the-ranking-power"]], "Main takeaways": [[200, "main-takeaways"]], "Polynomial and Spline interpolation": [[201, "polynomial-and-spline-interpolation"]], "Periodic Splines": [[201, "periodic-splines"]], "Quantile regression": [[202, "quantile-regression"]], "Fitting a QuantileRegressor": [[202, "fitting-a-quantileregressor"]], "Comparing QuantileRegressor and LinearRegression": [[202, "comparing-quantileregressor-and-linearregression"]], "Robust linear model estimation using RANSAC": [[203, "robust-linear-model-estimation-using-ransac"]], "Ridge coefficients as a function of the L2 Regularization": [[204, "ridge-coefficients-as-a-function-of-the-l2-regularization"]], "Purpose of this example": [[204, "purpose-of-this-example"]], "Creating a non-noisy data set": [[204, "creating-a-non-noisy-data-set"]], "Training the Ridge Regressor": [[204, "training-the-ridge-regressor"]], "Plotting trained Coefficients and Mean Squared Errors": [[204, "plotting-trained-coefficients-and-mean-squared-errors"]], "Interpreting the plots": [[204, "interpreting-the-plots"]], "Plot Ridge coefficients as a function of the regularization": [[205, "plot-ridge-coefficients-as-a-function-of-the-regularization"]], "Compute paths": [[205, "compute-paths"]], "Display results": [[205, "display-results"]], "Robust linear estimator fitting": [[206, "robust-linear-estimator-fitting"]], "Comparing various online solvers": [[207, "comparing-various-online-solvers"]], "Early stopping of Stochastic Gradient Descent": [[208, "early-stopping-of-stochastic-gradient-descent"]], "Plot multi-class SGD on the iris dataset": [[209, "plot-multi-class-sgd-on-the-iris-dataset"]], "SGD: convex loss functions": [[210, "sgd-convex-loss-functions"]], "SGD: Penalties": [[211, "sgd-penalties"]], "SGD: Maximum margin separating hyperplane": [[212, "sgd-maximum-margin-separating-hyperplane"]], "SGD: Weighted samples": [[213, "sgd-weighted-samples"]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[214, "one-class-svm-versus-one-class-svm-using-stochastic-gradient-descent"]], "Multiclass sparse logistic regression on 20newgroups": [[215, "multiclass-sparse-logistic-regression-on-20newgroups"]], "MNIST classification using multinomial logistic + L1": [[216, "mnist-classification-using-multinomial-logistic-l1"]], "Theil-Sen Regression": [[217, "theil-sen-regression"]], "Outliers only in the y direction": [[217, "outliers-only-in-the-y-direction"]], "Outliers in the X direction": [[217, "outliers-in-the-x-direction"]], "Tweedie regression on insurance claims": [[218, "tweedie-regression-on-insurance-claims"]], "Loading datasets, basic feature extraction and target definitions": [[218, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Frequency model \u2013 Poisson distribution": [[218, "frequency-model-poisson-distribution"]], "Severity Model -  Gamma distribution": [[218, "severity-model-gamma-distribution"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[218, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Comparison of Manifold Learning methods": [[221, "comparison-of-manifold-learning-methods"]], "Define algorithms for the manifold learning": [[221, "define-algorithms-for-the-manifold-learning"]], "Locally Linear Embeddings": [[221, "locally-linear-embeddings"]], "Isomap Embedding": [[221, "isomap-embedding"]], "Multidimensional scaling": [[221, "multidimensional-scaling"]], "Spectral embedding for non-linear dimensionality reduction": [[221, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "T-distributed Stochastic Neighbor Embedding": [[221, "t-distributed-stochastic-neighbor-embedding"]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[222, "manifold-learning-on-handwritten-digits-locally-linear-embedding-isomap"]], "Load digits dataset": [[222, "load-digits-dataset"]], "Helper function to plot embedding": [[222, "helper-function-to-plot-embedding"]], "Embedding techniques comparison": [[222, "embedding-techniques-comparison"]], "Manifold Learning methods on a severed sphere": [[223, "manifold-learning-methods-on-a-severed-sphere"]], "Multi-dimensional scaling": [[224, "multi-dimensional-scaling"]], "Swiss Roll And Swiss-Hole Reduction": [[225, "swiss-roll-and-swiss-hole-reduction"]], "Swiss Roll": [[225, "swiss-roll"]], "Swiss-Hole": [[225, "swiss-hole"]], "t-SNE: The effect of various perplexity values on the shape": [[226, "t-sne-the-effect-of-various-perplexity-values-on-the-shape"]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[229, "comparing-anomaly-detection-algorithms-for-outlier-detection-on-toy-datasets"]], "Visualizations with Display Objects": [[230, "visualizations-with-display-objects"]], "Load Data and train model": [[230, "load-data-and-train-model"]], "Create ConfusionMatrixDisplay": [[230, "create-confusionmatrixdisplay"]], "Create RocCurveDisplay": [[230, "create-roccurvedisplay"]], "Create PrecisionRecallDisplay": [[230, "create-precisionrecalldisplay"]], "Combining the display objects into a single plot": [[230, "combining-the-display-objects-into-a-single-plot"]], "Displaying estimators and complex pipelines": [[231, "displaying-estimators-and-complex-pipelines"]], "Compact text representation": [[231, "compact-text-representation"]], "Rich HTML representation": [[231, "rich-html-representation"]], "Isotonic Regression": [[232, "isotonic-regression"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[233, "the-johnson-lindenstrauss-bound-for-embedding-with-random-projections"]], "Theoretical bounds": [[233, "theoretical-bounds"]], "Empirical validation": [[233, "empirical-validation"]], "Remarks": [[233, "remarks"]], "Explicit feature map approximation for RBF kernels": [[234, "explicit-feature-map-approximation-for-rbf-kernels"]], "Python package and dataset imports, load dataset": [[234, "python-package-and-dataset-imports-load-dataset"]], "Timing and accuracy plots": [[234, "timing-and-accuracy-plots"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[234, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Comparison of kernel ridge regression and SVR": [[235, "comparison-of-kernel-ridge-regression-and-svr"]], "Construct the kernel-based regression models": [[235, "construct-the-kernel-based-regression-models"]], "Compare times of SVR and Kernel Ridge Regression": [[235, "compare-times-of-svr-and-kernel-ridge-regression"]], "Look at the results": [[235, "look-at-the-results"], [344, "look-at-the-results"]], "Visualize training and prediction times": [[235, "visualize-training-and-prediction-times"]], "Visualize the learning curves": [[235, "visualize-the-learning-curves"]], "Metadata Routing": [[236, "metadata-routing"], [322, "metadata-routing"], [393, "metadata-routing"], [397, "id1"], [1045, "metadata-routing"]], "Estimators": [[236, "estimators"], [361, "estimators"], [361, "id2"], [381, "estimators"], [402, "estimators"], [405, "estimators"]], "Router and Consumer": [[236, "router-and-consumer"]], "Simple Pipeline": [[236, "simple-pipeline"]], "Deprecation / Default Value Change": [[236, "deprecation-default-value-change"]], "Third Party Development and scikit-learn Dependency": [[236, "third-party-development-and-scikit-learn-dependency"]], "Multilabel classification": [[237, "multilabel-classification"], [987, "multilabel-classification"]], "Face completion with a multi-output estimators": [[238, "face-completion-with-a-multi-output-estimators"]], "Evaluation of outlier detection estimators": [[239, "evaluation-of-outlier-detection-estimators"]], "Dataset preprocessing and model training": [[239, "dataset-preprocessing-and-model-training"]], "KDDCup99 - SA dataset": [[239, "kddcup99-sa-dataset"]], "Forest covertypes dataset": [[239, "forest-covertypes-dataset"]], "Ames Housing dataset": [[239, "ames-housing-dataset"]], "Cardiotocography dataset": [[239, "cardiotocography-dataset"]], "Plot and interpret results": [[239, "plot-and-interpret-results"]], "Ablation study": [[239, "ablation-study"]], "Advanced Plotting With Partial Dependence": [[240, "advanced-plotting-with-partial-dependence"]], "Train models on the diabetes dataset": [[240, "train-models-on-the-diabetes-dataset"]], "Plotting partial dependence for two features": [[240, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[240, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting partial dependence for one feature": [[240, "plotting-partial-dependence-for-one-feature"]], "Displaying Pipelines": [[241, "displaying-pipelines"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[241, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[241, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[241, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[241, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[241, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "ROC Curve with Visualization API": [[242, "roc-curve-with-visualization-api"]], "Load Data and Train a SVC": [[242, "load-data-and-train-a-svc"]], "Plotting the ROC Curve": [[242, "plotting-the-roc-curve"]], "Training a Random Forest and Plotting the ROC Curve": [[242, "training-a-random-forest-and-plotting-the-roc-curve"]], "Introducing the set_output API": [[243, "introducing-the-set-output-api"]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[246, "concentration-prior-type-analysis-of-variation-bayesian-gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[247, "gaussian-mixture-model-ellipsoids"]], "GMM covariances": [[248, "gmm-covariances"]], "GMM Initialization Methods": [[249, "gmm-initialization-methods"]], "Density Estimation for a Gaussian mixture": [[250, "density-estimation-for-a-gaussian-mixture"]], "Gaussian Mixture Model Selection": [[251, "gaussian-mixture-model-selection"]], "Plot the BIC scores": [[251, "plot-the-bic-scores"]], "Plot the best model": [[251, "plot-the-best-model"]], "Gaussian Mixture Model Sine Curve": [[252, "gaussian-mixture-model-sine-curve"]], "Confusion matrix": [[255, "confusion-matrix"], [986, "confusion-matrix"]], "Visualizing cross-validation behavior in scikit-learn": [[256, "visualizing-cross-validation-behavior-in-scikit-learn"]], "Visualize our data": [[256, "visualize-our-data"]], "Define a function to visualize cross-validation behavior": [[256, "define-a-function-to-visualize-cross-validation-behavior"]], "Visualize cross-validation indices for many CV objects": [[256, "visualize-cross-validation-indices-for-many-cv-objects"]], "Plotting Cross-Validated Predictions": [[257, "plotting-cross-validated-predictions"]], "Detection error tradeoff (DET) curve": [[258, "detection-error-tradeoff-det-curve"]], "Generate synthetic data": [[258, "generate-synthetic-data"]], "Define the classifiers": [[258, "define-the-classifiers"]], "Plot ROC and DET curves": [[258, "plot-roc-and-det-curves"]], "Custom refit strategy of a grid search with cross-validation": [[259, "custom-refit-strategy-of-a-grid-search-with-cross-validation"]], "The dataset": [[259, "the-dataset"]], "Define our grid-search strategy": [[259, "define-our-grid-search-strategy"]], "Tuning hyper-parameters": [[259, "tuning-hyper-parameters"]], "Balance model complexity and cross-validated score": [[260, "balance-model-complexity-and-cross-validated-score"]], "Statistical comparison of models using grid search": [[261, "statistical-comparison-of-models-using-grid-search"]], "Comparing two models: frequentist approach": [[261, "comparing-two-models-frequentist-approach"]], "Comparing two models: Bayesian approach": [[261, "comparing-two-models-bayesian-approach"]], "Region of Practical Equivalence": [[261, "region-of-practical-equivalence"]], "Pairwise comparison of all models: frequentist approach": [[261, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise comparison of all models: Bayesian approach": [[261, "pairwise-comparison-of-all-models-bayesian-approach"]], "Take-home messages": [[261, "take-home-messages"]], "Sample pipeline for text feature extraction and evaluation": [[262, "sample-pipeline-for-text-feature-extraction-and-evaluation"]], "Data loading": [[262, "data-loading"]], "Pipeline with hyperparameter tuning": [[262, "pipeline-with-hyperparameter-tuning"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[263, "plotting-learning-curves-and-checking-models-scalability"]], "Learning Curve": [[263, "learning-curve"]], "Complexity analysis": [[263, "complexity-analysis"]], "Class Likelihood Ratios to measure classification performance": [[264, "class-likelihood-ratios-to-measure-classification-performance"]], "Pre-test vs. post-test analysis": [[264, "pre-test-vs-post-test-analysis"]], "Cross-validation of likelihood ratios": [[264, "cross-validation-of-likelihood-ratios"]], "Invariance with respect to prevalence": [[264, "invariance-with-respect-to-prevalence"]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[265, "demonstration-of-multi-metric-evaluation-on-cross-val-score-and-gridsearchcv"]], "Running GridSearchCV using multiple evaluation metrics": [[265, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Plotting the result": [[265, "plotting-the-result"]], "Nested versus non-nested cross-validation": [[266, "nested-versus-non-nested-cross-validation"]], "See Also:": [[266, null], [407, null]], "Test with permutations the significance of a classification score": [[267, "test-with-permutations-the-significance-of-a-classification-score"]], "Permutation test score": [[267, "permutation-test-score"], [410, "permutation-test-score"]], "Original data": [[267, "original-data"], [306, "original-data"]], "Random data": [[267, "random-data"]], "Precision-Recall": [[268, "precision-recall"]], "In binary classification settings": [[268, "in-binary-classification-settings"]], "Dataset and model": [[268, "dataset-and-model"]], "Plot the Precision-Recall curve": [[268, "plot-the-precision-recall-curve"]], "In multi-label settings": [[268, "in-multi-label-settings"]], "Create multi-label data, fit, and predict": [[268, "create-multi-label-data-fit-and-predict"]], "The average precision score in multi-label settings": [[268, "the-average-precision-score-in-multi-label-settings"]], "Plot the micro-averaged Precision-Recall curve": [[268, "plot-the-micro-averaged-precision-recall-curve"]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[268, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Comparing randomized search and grid search for hyperparameter estimation": [[269, "comparing-randomized-search-and-grid-search-for-hyperparameter-estimation"]], "Multiclass Receiver Operating Characteristic (ROC)": [[270, "multiclass-receiver-operating-characteristic-roc"]], "Load and prepare data": [[270, "load-and-prepare-data"], [271, "load-and-prepare-data"], [311, "load-and-prepare-data"]], "One-vs-Rest multiclass ROC": [[270, "one-vs-rest-multiclass-roc"]], "ROC curve showing a specific class": [[270, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[270, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvR macro-average": [[270, "roc-curve-using-the-ovr-macro-average"]], "Plot all OvR ROC curves together": [[270, "plot-all-ovr-roc-curves-together"]], "One-vs-One multiclass ROC": [[270, "one-vs-one-multiclass-roc"]], "ROC curve using the OvO macro-average": [[270, "roc-curve-using-the-ovo-macro-average"]], "Plot all OvO ROC curves together": [[270, "plot-all-ovo-roc-curves-together"]], "Receiver Operating Characteristic (ROC) with cross validation": [[271, "receiver-operating-characteristic-roc-with-cross-validation"]], "Classification and ROC analysis": [[271, "classification-and-roc-analysis"]], "Comparison between grid search and successive halving": [[272, "comparison-between-grid-search-and-successive-halving"]], "Successive Halving Iterations": [[273, "successive-halving-iterations"]], "Number of candidates and amount of resource at each iteration": [[273, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Train error vs Test error": [[274, "train-error-vs-test-error"]], "Compute train and test errors": [[274, "compute-train-and-test-errors"]], "Plot results functions": [[274, "plot-results-functions"]], "Underfitting vs. Overfitting": [[275, "underfitting-vs-overfitting"]], "Plotting Validation Curves": [[276, "plotting-validation-curves"]], "Overview of multiclass training meta-estimators": [[279, "overview-of-multiclass-training-meta-estimators"]], "The Yeast UCI dataset": [[279, "the-yeast-uci-dataset"]], "Strategies comparison": [[279, "strategies-comparison"]], "The importance of hyperparameters search": [[279, "the-importance-of-hyperparameters-search"]], "Multilabel classification using a classifier chain": [[282, "multilabel-classification-using-a-classifier-chain"]], "Loading a dataset": [[282, "loading-a-dataset"]], "LogisticRegression wrapped by OneVsRestClassifier": [[282, "logisticregression-wrapped-by-onevsrestclassifier"]], "Chain of binary classifiers": [[282, "chain-of-binary-classifiers"]], "Results interpretation": [[282, "results-interpretation"]], "Approximate nearest neighbors in TSNE": [[284, "approximate-nearest-neighbors-in-tsne"]], "Caching nearest neighbors": [[286, "caching-nearest-neighbors"]], "Nearest Neighbors Classification": [[287, "nearest-neighbors-classification"], [989, "nearest-neighbors-classification"]], "K-nearest neighbors classifier": [[287, "k-nearest-neighbors-classifier"]], "Decision boundary": [[287, "decision-boundary"]], "Kernel Density Estimation": [[288, "kernel-density-estimation"], [412, "kernel-density-estimation"]], "Simple 1D Kernel Density Estimation": [[289, "simple-1d-kernel-density-estimation"]], "Novelty detection with Local Outlier Factor (LOF)": [[290, "novelty-detection-with-local-outlier-factor-lof"]], "Outlier detection with Local Outlier Factor (LOF)": [[291, "outlier-detection-with-local-outlier-factor-lof"]], "Generate data with outliers": [[291, "generate-data-with-outliers"]], "Fit the model for outlier detection (default)": [[291, "fit-the-model-for-outlier-detection-default"]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[292, "comparing-nearest-neighbors-with-and-without-neighborhood-components-analysis"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[293, "dimensionality-reduction-with-neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[294, "neighborhood-components-analysis-illustration"]], "Original points": [[294, "original-points"]], "Learning an embedding": [[294, "learning-an-embedding"]], "Nearest Centroid Classification": [[295, "nearest-centroid-classification"]], "Nearest Neighbors regression": [[296, "nearest-neighbors-regression"]], "Kernel Density Estimate of Species Distributions": [[297, "kernel-density-estimate-of-species-distributions"]], "Varying regularization in Multi-layer Perceptron": [[300, "varying-regularization-in-multi-layer-perceptron"]], "Compare Stochastic learning strategies for MLPClassifier": [[301, "compare-stochastic-learning-strategies-for-mlpclassifier"]], "Visualization of MLP weights on MNIST": [[302, "visualization-of-mlp-weights-on-mnist"]], "Restricted Boltzmann Machine features for digit classification": [[303, "restricted-boltzmann-machine-features-for-digit-classification"]], "Models definition": [[303, "models-definition"]], "Training": [[303, "training"], [989, "training"]], "Plotting": [[303, "plotting"], [405, "plotting"], [405, "id7"], [405, "id9"]], "Compare the effect of different scalers on data with outliers": [[306, "compare-the-effect-of-different-scalers-on-data-with-outliers"]], "StandardScaler": [[306, "standardscaler"]], "MinMaxScaler": [[306, "minmaxscaler"]], "MaxAbsScaler": [[306, "maxabsscaler"]], "RobustScaler": [[306, "robustscaler"]], "PowerTransformer": [[306, "powertransformer"]], "QuantileTransformer (uniform output)": [[306, "quantiletransformer-uniform-output"]], "QuantileTransformer (Gaussian output)": [[306, "quantiletransformer-gaussian-output"]], "Normalizer": [[306, "normalizer"]], "Using KBinsDiscretizer to discretize continuous features": [[307, "using-kbinsdiscretizer-to-discretize-continuous-features"]], "Feature discretization": [[308, "feature-discretization"]], "Demonstrating the different strategies of KBinsDiscretizer": [[309, "demonstrating-the-different-strategies-of-kbinsdiscretizer"]], "Map data to a normal distribution": [[310, "map-data-to-a-normal-distribution"]], "Importance of Feature Scaling": [[311, "importance-of-feature-scaling"]], "Effect of rescaling on a k-neighbors models": [[311, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on a PCA dimensional reduction": [[311, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on model\u2019s performance": [[311, "effect-of-rescaling-on-model-s-performance"]], "Comparing Target Encoder with Other Encoders": [[312, "comparing-target-encoder-with-other-encoders"]], "Loading Data from OpenML": [[312, "loading-data-from-openml"]], "Training and Evaluating Pipelines with Different Encoders": [[312, "training-and-evaluating-pipelines-with-different-encoders"]], "Native Categorical Feature Support": [[312, "native-categorical-feature-support"]], "Plotting the Results": [[312, "plotting-the-results"]], "Target Encoder\u2019s Internal Cross fitting": [[313, "target-encoder-s-internal-cross-fitting"]], "Create Synthetic Dataset": [[313, "create-synthetic-dataset"]], "Training a Ridge Regressor": [[313, "training-a-ridge-regressor"]], "Release Highlights for scikit-learn 0.22": [[316, "release-highlights-for-scikit-learn-0-22"]], "New plotting API": [[316, "new-plotting-api"]], "Stacking Classifier and Regressor": [[316, "stacking-classifier-and-regressor"]], "Permutation-based feature importance": [[316, "permutation-based-feature-importance"]], "Native support for missing values for gradient boosting": [[316, "native-support-for-missing-values-for-gradient-boosting"]], "Precomputed sparse nearest neighbors graph": [[316, "precomputed-sparse-nearest-neighbors-graph"]], "KNN Based Imputation": [[316, "knn-based-imputation"]], "Tree pruning": [[316, "tree-pruning"]], "Retrieve dataframes from OpenML": [[316, "retrieve-dataframes-from-openml"]], "Checking scikit-learn compatibility of an estimator": [[316, "checking-scikit-learn-compatibility-of-an-estimator"]], "ROC AUC now supports multiclass classification": [[316, "roc-auc-now-supports-multiclass-classification"]], "Release Highlights for scikit-learn 0.23": [[317, "release-highlights-for-scikit-learn-0-23"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[317, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Rich visual representation of estimators": [[317, "rich-visual-representation-of-estimators"]], "Scalability and stability improvements to KMeans": [[317, "scalability-and-stability-improvements-to-kmeans"]], "Improvements to the histogram-based Gradient Boosting estimators": [[317, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Sample-weight support for Lasso and ElasticNet": [[317, "sample-weight-support-for-lasso-and-elasticnet"]], "Release Highlights for scikit-learn 0.24": [[318, "release-highlights-for-scikit-learn-0-24"]], "Successive Halving estimators for tuning hyper-parameters": [[318, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Native support for categorical features in HistGradientBoosting estimators": [[318, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Improved performances of HistGradientBoosting estimators": [[318, "improved-performances-of-histgradientboosting-estimators"]], "New self-training meta-estimator": [[318, "new-self-training-meta-estimator"]], "New SequentialFeatureSelector transformer": [[318, "new-sequentialfeatureselector-transformer"]], "New PolynomialCountSketch kernel approximation function": [[318, "new-polynomialcountsketch-kernel-approximation-function"]], "Individual Conditional Expectation plots": [[318, "individual-conditional-expectation-plots"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[318, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New documentation improvements": [[318, "new-documentation-improvements"], [319, "new-documentation-improvements"]], "Release Highlights for scikit-learn 1.0": [[319, "release-highlights-for-scikit-learn-1-0"]], "Keyword and positional arguments": [[319, "keyword-and-positional-arguments"]], "Spline Transformers": [[319, "spline-transformers"]], "Quantile Regressor": [[319, "quantile-regressor"]], "Feature Names Support": [[319, "feature-names-support"]], "A more flexible plotting API": [[319, "a-more-flexible-plotting-api"]], "Online One-Class SVM": [[319, "online-one-class-svm"], [1000, "online-one-class-svm"]], "Histogram-based Gradient Boosting Models are now stable": [[319, "histogram-based-gradient-boosting-models-are-now-stable"]], "Release Highlights for scikit-learn 1.1": [[320, "release-highlights-for-scikit-learn-1-1"]], "Quantile loss in ensemble.HistGradientBoostingRegressor": [[320, "quantile-loss-in-ensemble-histgradientboostingregressor"]], "get_feature_names_out Available in all Transformers": [[320, "get-feature-names-out-available-in-all-transformers"]], "Grouping infrequent categories in OneHotEncoder": [[320, "grouping-infrequent-categories-in-onehotencoder"]], "Performance improvements": [[320, "performance-improvements"]], "MiniBatchNMF: an online version of NMF": [[320, "minibatchnmf-an-online-version-of-nmf"]], "BisectingKMeans: divide and cluster": [[320, "bisectingkmeans-divide-and-cluster"]], "Release Highlights for scikit-learn 1.2": [[321, "release-highlights-for-scikit-learn-1-2"]], "Pandas output with set_output API": [[321, "pandas-output-with-set-output-api"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[321, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "New and enhanced displays": [[321, "new-and-enhanced-displays"]], "Faster parser in fetch_openml": [[321, "faster-parser-in-fetch-openml"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[321, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Improved efficiency of many estimators": [[321, "improved-efficiency-of-many-estimators"]], "Release Highlights for scikit-learn 1.3": [[322, "release-highlights-for-scikit-learn-1-3"]], "HDBSCAN: hierarchical density-based clustering": [[322, "hdbscan-hierarchical-density-based-clustering"]], "TargetEncoder: a new category encoding strategy": [[322, "targetencoder-a-new-category-encoding-strategy"]], "Missing values support in decision trees": [[322, "missing-values-support-in-decision-trees"]], "New display model_selection.ValidationCurveDisplay": [[322, "new-display-model-selection-validationcurvedisplay"]], "Gamma loss for gradient boosting": [[322, "gamma-loss-for-gradient-boosting"]], "Grouping infrequent categories in preprocessing.OrdinalEncoder": [[322, "grouping-infrequent-categories-in-preprocessing-ordinalencoder"]], "Label Propagation digits: Demonstrating performance": [[325, "label-propagation-digits-demonstrating-performance"]], "Semi-supervised learning": [[325, "semi-supervised-learning"], [999, "semi-supervised-learning"]], "Plot the most uncertain predictions": [[325, "plot-the-most-uncertain-predictions"]], "Label Propagation digits active learning": [[326, "label-propagation-digits-active-learning"]], "Label Propagation learning a complex structure": [[327, "label-propagation-learning-a-complex-structure"]], "Effect of varying threshold for self-training": [[328, "effect-of-varying-threshold-for-self-training"]], "Semi-supervised Classification on a Text Dataset": [[329, "semi-supervised-classification-on-a-text-dataset"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[330, "decision-boundary-of-semi-supervised-classifiers-versus-svm-on-the-iris-dataset"]], "SVM with custom kernel": [[333, "svm-with-custom-kernel"]], "Plot different SVM classifiers in the iris dataset": [[334, "plot-different-svm-classifiers-in-the-iris-dataset"]], "Plot the support vectors in LinearSVC": [[335, "plot-the-support-vectors-in-linearsvc"]], "One-class SVM with non-linear kernel (RBF)": [[336, "one-class-svm-with-non-linear-kernel-rbf"]], "RBF SVM parameters": [[337, "rbf-svm-parameters"]], "Load and prepare data set": [[337, "load-and-prepare-data-set"]], "Train classifiers": [[337, "train-classifiers"]], "SVM: Maximum margin separating hyperplane": [[338, "svm-maximum-margin-separating-hyperplane"]], "SVM: Separating hyperplane for unbalanced classes": [[339, "svm-separating-hyperplane-for-unbalanced-classes"]], "SVM-Anova: SVM with univariate feature selection": [[340, "svm-anova-svm-with-univariate-feature-selection"]], "Load some data to play with": [[340, "load-some-data-to-play-with"]], "Create the pipeline": [[340, "create-the-pipeline"]], "Plot the cross-validation score as a function of percentile of features": [[340, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot classification boundaries with different SVM Kernels": [[341, "plot-classification-boundaries-with-different-svm-kernels"]], "Creating a dataset": [[341, "creating-a-dataset"]], "Training SVC model and plotting decision boundaries": [[341, "training-svc-model-and-plotting-decision-boundaries"]], "Linear kernel": [[341, "linear-kernel"], [984, "linear-kernel"], [1019, "linear-kernel"]], "Polynomial kernel": [[341, "polynomial-kernel"], [984, "polynomial-kernel"], [1019, "polynomial-kernel"]], "RBF kernel": [[341, "rbf-kernel"], [984, "rbf-kernel"]], "Sigmoid kernel": [[341, "sigmoid-kernel"], [984, "sigmoid-kernel"], [1019, "sigmoid-kernel"]], "SVM Margins Example": [[342, "svm-margins-example"]], "Non-linear SVM": [[343, "non-linear-svm"]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[344, "support-vector-regression-svr-using-linear-and-non-linear-kernels"]], "Scaling the regularization parameter for SVCs": [[345, "scaling-the-regularization-parameter-for-svcs"]], "L1-penalty case": [[345, "l1-penalty-case"]], "L2-penalty case": [[345, "l2-penalty-case"]], "SVM Tie Breaking Example": [[346, "svm-tie-breaking-example"]], "SVM: Weighted samples": [[347, "svm-weighted-samples"]], "Classification of text documents using sparse features": [[350, "classification-of-text-documents-using-sparse-features"]], "Loading and vectorizing the 20 newsgroups text dataset": [[350, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Analysis of a bag-of-words document classifier": [[350, "analysis-of-a-bag-of-words-document-classifier"]], "Model without metadata stripping": [[350, "model-without-metadata-stripping"]], "Model with metadata stripping": [[350, "model-with-metadata-stripping"]], "Benchmarking classifiers": [[350, "benchmarking-classifiers"]], "Plot accuracy, training and test time of each classifier": [[350, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Clustering text documents using k-means": [[351, "clustering-text-documents-using-k-means"]], "Loading text data": [[351, "loading-text-data"]], "Quantifying the quality of clustering results": [[351, "quantifying-the-quality-of-clustering-results"]], "K-means clustering on text features": [[351, "k-means-clustering-on-text-features"]], "Feature Extraction using TfidfVectorizer": [[351, "feature-extraction-using-tfidfvectorizer"]], "Clustering sparse data with k-means": [[351, "clustering-sparse-data-with-k-means"]], "Performing dimensionality reduction using LSA": [[351, "performing-dimensionality-reduction-using-lsa"]], "Top terms per cluster": [[351, "top-terms-per-cluster"]], "HashingVectorizer": [[351, "hashingvectorizer"]], "Clustering evaluation summary": [[351, "clustering-evaluation-summary"]], "FeatureHasher and DictVectorizer Comparison": [[352, "featurehasher-and-dictvectorizer-comparison"]], "Load Data": [[352, "load-data"]], "Define preprocessing functions": [[352, "define-preprocessing-functions"]], "DictVectorizer": [[352, "dictvectorizer"]], "FeatureHasher": [[352, "featurehasher"]], "Comparison with special purpose text vectorizers": [[352, "comparison-with-special-purpose-text-vectorizers"]], "TfidfVectorizer": [[352, "tfidfvectorizer"]], "Post pruning decision trees with cost complexity pruning": [[355, "post-pruning-decision-trees-with-cost-complexity-pruning"]], "Total impurity of leaves vs effective alphas of pruned tree": [[355, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Accuracy vs alpha for training and testing sets": [[355, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Plot the decision surface of decision trees trained on the iris dataset": [[356, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Decision Tree Regression": [[357, "decision-tree-regression"]], "Multi-output Decision Tree Regression": [[358, "multi-output-decision-tree-regression"]], "Understanding the decision tree structure": [[359, "understanding-the-decision-tree-structure"]], "Train tree classifier": [[359, "train-tree-classifier"]], "Tree structure": [[359, "tree-structure"]], "What is the values array used here?": [[359, "what-is-the-values-array-used-here"]], "Decision path": [[359, "decision-path"]], "Common pitfalls and recommended practices": [[361, "common-pitfalls-and-recommended-practices"]], "Inconsistent preprocessing": [[361, "inconsistent-preprocessing"]], "Data leakage": [[361, "data-leakage"]], "Data leakage during pre-processing": [[361, "data-leakage-during-pre-processing"]], "How to avoid data leakage": [[361, "how-to-avoid-data-leakage"]], "Controlling randomness": [[361, "controlling-randomness"]], "Using None or RandomState instances, and repeated calls to fit and split": [[361, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "CV splitters": [[361, "cv-splitters"], [361, "id3"]], "Common pitfalls and subtleties": [[361, "common-pitfalls-and-subtleties"]], "General recommendations": [[361, "general-recommendations"]], "Getting reproducible results across multiple executions": [[361, "getting-reproducible-results-across-multiple-executions"]], "Robustness of cross-validation results": [[361, "robustness-of-cross-validation-results"]], "Computing with scikit-learn": [[364, "computing-with-scikit-learn"]], "Computational Performance": [[365, "computational-performance"]], "Bulk versus Atomic mode": [[365, "bulk-versus-atomic-mode"]], "Configuring Scikit-learn for reduced validation overhead": [[365, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Influence of the Number of Features": [[365, "influence-of-the-number-of-features"]], "Influence of the Input Data Representation": [[365, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[365, "influence-of-the-model-complexity"]], "Feature Extraction Latency": [[365, "feature-extraction-latency"]], "Prediction Throughput": [[365, "prediction-throughput"]], "Tips and Tricks": [[365, "tips-and-tricks"]], "Linear algebra libraries": [[365, "linear-algebra-libraries"]], "Limiting Working Memory": [[365, "limiting-working-memory"]], "Model Compression": [[365, "model-compression"]], "Model Reshaping": [[365, "model-reshaping"]], "Links": [[365, "links"]], "Parallelism, resource management, and configuration": [[366, "parallelism-resource-management-and-configuration"]], "Parallelism": [[366, "parallelism"], [975, "parallelism"]], "Higher-level parallelism with joblib": [[366, "higher-level-parallelism-with-joblib"]], "Lower-level parallelism with OpenMP": [[366, "lower-level-parallelism-with-openmp"]], "Parallel NumPy and SciPy routines from numerical libraries": [[366, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Oversubscription: spawning too many threads": [[366, "oversubscription-spawning-too-many-threads"]], "Configuration switches": [[366, "configuration-switches"]], "Python API": [[366, "python-api"]], "Environment variables": [[366, "environment-variables"]], "SKLEARN_ASSUME_FINITE": [[366, "sklearn-assume-finite"]], "SKLEARN_WORKING_MEMORY": [[366, "sklearn-working-memory"]], "SKLEARN_SEED": [[366, "sklearn-seed"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[366, "sklearn-tests-global-random-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[366, "sklearn-skip-network-tests"]], "SKLEARN_RUN_FLOAT32_TESTS": [[366, "sklearn-run-float32-tests"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[366, "sklearn-enable-debug-cython-directives"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[366, "sklearn-build-enable-debug-symbols"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[366, "sklearn-pairwise-dist-chunk-size"]], "Strategies to scale computationally: bigger data": [[367, "strategies-to-scale-computationally-bigger-data"]], "Scaling with instances using out-of-core learning": [[367, "scaling-with-instances-using-out-of-core-learning"]], "Streaming instances": [[367, "streaming-instances"]], "Extracting features": [[367, "extracting-features"]], "Incremental learning": [[367, "incremental-learning"]], "Notes": [[367, "notes"]], "Table Of Contents": [[368, "table-of-contents"]], "Dataset transformations": [[371, "dataset-transformations"]], "Dataset loading utilities": [[372, "dataset-loading-utilities"], [384, "dataset-loading-utilities"]], "Loading other datasets": [[373, "loading-other-datasets"]], "Sample images": [[373, "sample-images"]], "Examples:": [[373, null], [374, null], [395, null], [403, null], [403, null], [404, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [406, null], [407, null], [407, null], [407, null], [407, null], [407, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [409, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [411, null], [412, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [413, null], [415, null], [415, null], [415, null], [415, null], [975, null], [975, null], [975, null], [978, null], [978, null], [978, null], [980, null], [980, null], [980, null], [981, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [982, null], [983, null], [985, null], [985, null], [985, null], [985, null], [986, null], [986, null], [986, null], [986, null], [986, null], [987, null], [989, null], [989, null], [989, null], [989, null], [989, null], [990, null], [990, null], [991, null], [992, null], [992, null], [992, null], [992, null], [992, null], [992, null], [993, null], [994, null], [996, null], [996, null], [996, null], [1000, null], [1000, null], [1001, null], [1001, null], [1001, null], [1001, null], [1001, null], [1001, null], [1002, null], [1002, null], [1002, null], [1002, null], [1025, null]], "Datasets in svmlight / libsvm format": [[373, "datasets-in-svmlight-libsvm-format"]], "Related links:": [[373, null]], "Downloading datasets from the openml.org repository": [[373, "downloading-datasets-from-the-openml-org-repository"]], "Dataset Versions": [[373, "dataset-versions"]], "ARFF parser": [[373, "arff-parser"]], "Loading from external datasets": [[373, "loading-from-external-datasets"], [1012, null]], "Real world datasets": [[374, "real-world-datasets"]], "The Olivetti faces dataset": [[374, "the-olivetti-faces-dataset"]], "The 20 newsgroups text dataset": [[374, "the-20-newsgroups-text-dataset"]], "Data Considerations": [[374, null]], "Recommendation": [[374, null]], "The Labeled Faces in the Wild face recognition dataset": [[374, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "Forest covertypes": [[374, "forest-covertypes"]], "RCV1 dataset": [[374, "rcv1-dataset"]], "Kddcup 99 dataset": [[374, "kddcup-99-dataset"]], "California Housing dataset": [[374, "california-housing-dataset"]], "Generated datasets": [[375, "generated-datasets"]], "Generators for classification and clustering": [[375, "generators-for-classification-and-clustering"]], "Single label": [[375, "single-label"]], "Multilabel": [[375, "multilabel"]], "Generators for regression": [[375, "generators-for-regression"]], "Generators for manifold learning": [[375, "generators-for-manifold-learning"]], "Generators for decomposition": [[375, "generators-for-decomposition"]], "Toy datasets": [[376, "toy-datasets"]], "Iris plants dataset": [[376, "iris-plants-dataset"]], "Diabetes dataset": [[376, "diabetes-dataset"], [1019, null]], "Optical recognition of handwritten digits dataset": [[376, "optical-recognition-of-handwritten-digits-dataset"]], "Linnerrud dataset": [[376, "linnerrud-dataset"]], "Wine recognition dataset": [[376, "wine-recognition-dataset"]], "Breast cancer wisconsin (diagnostic) dataset": [[376, "breast-cancer-wisconsin-diagnostic-dataset"]], "Installing the development version of scikit-learn": [[377, "installing-the-development-version-of-scikit-learn"]], "Installing nightly builds": [[377, "installing-nightly-builds"]], "Building from source": [[377, "building-from-source"]], "Dependencies": [[377, "dependencies"]], "Runtime dependencies": [[377, "runtime-dependencies"]], "Build dependencies": [[377, "build-dependencies"]], "Test dependencies": [[377, "test-dependencies"]], "Building a specific version from a tag": [[377, "building-a-specific-version-from-a-tag"]], "Editable mode": [[377, "editable-mode"]], "Platform-specific instructions": [[377, "platform-specific-instructions"]], "Windows": [[377, "windows"]], "macOS": [[377, "macos"]], "macOS compilers from conda-forge": [[377, "macos-compilers-from-conda-forge"]], "macOS compilers from Homebrew": [[377, "macos-compilers-from-homebrew"]], "Linux": [[377, "linux"]], "Linux compilers from the system": [[377, "linux-compilers-from-the-system"]], "Linux compilers from conda-forge": [[377, "linux-compilers-from-conda-forge"]], "FreeBSD": [[377, "freebsd"]], "Alternative compilers": [[377, "alternative-compilers"]], "Parallel builds": [[377, "parallel-builds"]], "Bug triaging and issue curation": [[378, "bug-triaging-and-issue-curation"]], "Working on issues to improve them": [[378, "working-on-issues-to-improve-them"]], "Fruitful discussions": [[378, null]], "Working on PRs to help review": [[378, "working-on-prs-to-help-review"]], "Triaging operations for members of the core and contributor experience teams": [[378, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Closing issues: a tough call": [[378, null]], "A typical workflow for triaging issues": [[378, "a-typical-workflow-for-triaging-issues"]], "Contributing": [[379, "contributing"], [391, "contributing"]], "Our community, our values": [[379, null]], "Ways to contribute": [[379, "ways-to-contribute"]], "Contributing to related projects": [[379, null]], "Submitting a bug report or a feature request": [[379, "submitting-a-bug-report-or-a-feature-request"]], "How to make a good bug report": [[379, "how-to-make-a-good-bug-report"]], "Contributing code": [[379, "contributing-code"]], "Video resources": [[379, "video-resources"]], "How to contribute": [[379, "how-to-contribute"]], "Learning git:": [[379, null]], "Pull request checklist": [[379, "pull-request-checklist"]], "Continuous Integration (CI)": [[379, "continuous-integration-ci"]], "Stalled pull requests": [[379, "stalled-pull-requests"]], "Stalled and Unclaimed Issues": [[379, "stalled-and-unclaimed-issues"]], "Issues for New Contributors": [[379, "issues-for-new-contributors"]], "good first issue tag": [[379, null]], "Easy tag": [[379, null]], "help wanted tag": [[379, null]], "Documentation": [[379, "documentation"], [1028, "documentation"]], "Building the documentation": [[379, "building-the-documentation"]], "Generated documentation on GitHub Actions": [[379, "generated-documentation-on-github-actions"]], "Testing and improving test coverage": [[379, "testing-and-improving-test-coverage"]], "Writing matplotlib related tests": [[379, "writing-matplotlib-related-tests"]], "Workflow to improve test coverage": [[379, "workflow-to-improve-test-coverage"]], "Monitoring performance": [[379, "monitoring-performance"]], "Issue Tracker Tags": [[379, "issue-tracker-tags"]], "Maintaining backwards compatibility": [[379, "maintaining-backwards-compatibility"]], "Deprecation": [[379, "deprecation"]], "Change the default value of a parameter": [[379, "change-the-default-value-of-a-parameter"]], "Code Review Guidelines": [[379, "code-review-guidelines"]], "Communication Guidelines": [[379, "communication-guidelines"]], "Reading the existing code base": [[379, "reading-the-existing-code-base"]], "Cython Best Practices, Conventions and Knowledge": [[380, "cython-best-practices-conventions-and-knowledge"]], "Tips for developing with Cython in scikit-learn": [[380, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips to ease development": [[380, "tips-to-ease-development"]], "Tips for performance": [[380, "tips-for-performance"]], "Using OpenMP": [[380, "using-openmp"]], "Developing scikit-learn estimators": [[381, "developing-scikit-learn-estimators"]], "APIs of scikit-learn objects": [[381, "apis-of-scikit-learn-objects"]], "Different objects": [[381, "different-objects"]], "Instantiation": [[381, "instantiation"]], "Fitting": [[381, "fitting"]], "Estimated Attributes": [[381, "estimated-attributes"]], "Optional Arguments": [[381, "optional-arguments"]], "Universal attributes": [[381, "universal-attributes"]], "Rolling your own estimator": [[381, "rolling-your-own-estimator"]], "Project template:": [[381, null]], "BaseEstimator and mixins:": [[381, null]], "get_params and set_params": [[381, "get-params-and-set-params"]], "Parameters and init": [[381, "parameters-and-init"]], "Cloning": [[381, "cloning"]], "Pipeline compatibility": [[381, "pipeline-compatibility"]], "Estimator types": [[381, "estimator-types"]], "Specific models": [[381, "specific-models"]], "Estimator Tags": [[381, "estimator-tags"]], "Developer API for set_output": [[381, "developer-api-for-set-output"]], "Developer API for check_is_fitted": [[381, "developer-api-for-check-is-fitted"]], "Developer API for HTML representation": [[381, "developer-api-for-html-representation"]], "Coding guidelines": [[381, "coding-guidelines"]], "Input validation": [[381, "input-validation"]], "Random Numbers": [[381, "random-numbers"]], "Numerical assertions in tests": [[381, "numerical-assertions-in-tests"]], "Developer\u2019s Guide": [[382, "developer-s-guide"]], "Maintainer / core-developer information": [[383, "maintainer-core-developer-information"]], "Releasing": [[383, "releasing"]], "Before a release": [[383, "before-a-release"]], "Preparing a release PR": [[383, "preparing-a-release-pr"]], "Major version release": [[383, "major-version-release"]], "Minor version release (also known as bug-fix release)": [[383, "minor-version-release-also-known-as-bug-fix-release"]], "Making a release": [[383, "making-a-release"]], "Release checklist": [[383, "release-checklist"]], "Merging Pull Requests": [[383, "merging-pull-requests"]], "The scikit-learn.org web site": [[383, "the-scikit-learn-org-web-site"]], "Experimental features": [[383, "experimental-features"]], "Crafting a minimal reproducer for scikit-learn": [[384, "crafting-a-minimal-reproducer-for-scikit-learn"]], "Good practices": [[384, "good-practices"]], "Provide a failing code example with minimal comments": [[384, "provide-a-failing-code-example-with-minimal-comments"]], "Boil down your script to something as small as possible": [[384, "boil-down-your-script-to-something-as-small-as-possible"]], "DO NOT report your data unless it is extremely necessary": [[384, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Use markdown formatting": [[384, "use-markdown-formatting"]], "Synthetic dataset": [[384, "synthetic-dataset"]], "NumPy": [[384, "numpy"]], "Pandas": [[384, "pandas"]], "make_regression": [[384, "make-regression"]], "make_classification": [[384, "make-classification"]], "make_blobs": [[384, "make-blobs"]], "How to optimize for speed": [[385, "how-to-optimize-for-speed"]], "Python, Cython or C/C++?": [[385, "python-cython-or-c-c"]], "Profiling Python code": [[385, "profiling-python-code"]], "Memory usage profiling": [[385, "memory-usage-profiling"]], "Using Cython": [[385, "using-cython"]], "Profiling compiled extensions": [[385, "profiling-compiled-extensions"]], "Using yep and gperftools": [[385, "using-yep-and-gperftools"]], "Using a debugger, gdb": [[385, "using-a-debugger-gdb"]], "Using gprof": [[385, "using-gprof"]], "Using valgrind / callgrind / kcachegrind": [[385, "using-valgrind-callgrind-kcachegrind"]], "kcachegrind": [[385, "kcachegrind"]], "Multi-core parallelism using joblib.Parallel": [[385, "multi-core-parallelism-using-joblib-parallel"]], "A simple algorithmic trick: warm restarts": [[385, "a-simple-algorithmic-trick-warm-restarts"]], "Developing with the Plotting API": [[386, "developing-with-the-plotting-api"]], "Plotting API Overview": [[386, "plotting-api-overview"]], "Plotting with Multiple Axes": [[386, "plotting-with-multiple-axes"]], "Developers\u2019 Tips and Tricks": [[387, "developers-tips-and-tricks"]], "Productivity and sanity-preserving tips": [[387, "productivity-and-sanity-preserving-tips"]], "Folding and unfolding outdated diffs on pull requests": [[387, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Checking out pull requests as remote-tracking branches": [[387, "checking-out-pull-requests-as-remote-tracking-branches"]], "Display code coverage in pull requests": [[387, "display-code-coverage-in-pull-requests"]], "Useful pytest aliases and flags": [[387, "useful-pytest-aliases-and-flags"]], "Standard replies for reviewing": [[387, "standard-replies-for-reviewing"]], "Debugging memory errors in Cython with valgrind": [[387, "debugging-memory-errors-in-cython-with-valgrind"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[387, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Utilities for Developers": [[388, "utilities-for-developers"]], "Validation Tools": [[388, "validation-tools"]], "Efficient Linear Algebra & Array Operations": [[388, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[388, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[388, "efficient-routines-for-sparse-matrices"]], "Graph Routines": [[388, "graph-routines"]], "Testing Functions": [[388, "testing-functions"]], "Multiclass and multilabel utility function": [[388, "multiclass-and-multilabel-utility-function"]], "Helper Functions": [[388, "helper-functions"]], "Hash Functions": [[388, "hash-functions"]], "Warnings and Exceptions": [[388, "warnings-and-exceptions"]], "Dispatching": [[389, "dispatching"]], "Frequently Asked Questions": [[391, "frequently-asked-questions"]], "Table of Contents": [[391, "table-of-contents"]], "About the project": [[391, "about-the-project"]], "What is the project name (a lot of people get it wrong)?": [[391, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "How do you pronounce the project name?": [[391, "how-do-you-pronounce-the-project-name"]], "Why scikit?": [[391, "why-scikit"]], "Do you support PyPy?": [[391, "do-you-support-pypy"]], "Implementation decisions": [[391, "implementation-decisions"]], "Why is there no support for deep or reinforcement learning / Will there be support for deep or reinforcement learning in scikit-learn?": [[391, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-support-for-deep-or-reinforcement-learning-in-scikit-learn"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[391, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[391, "why-did-you-remove-hmms-from-scikit-learn"]], "Will you add GPU support?": [[391, "will-you-add-gpu-support"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[391, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does Scikit-learn not directly work with, for example, pandas.DataFrame?": [[391, "why-does-scikit-learn-not-directly-work-with-for-example-pandas-dataframe"]], "Do you plan to implement transform for target y in a pipeline?": [[391, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Why are there so many different estimators for linear models?": [[391, "why-are-there-so-many-different-estimators-for-linear-models"]], "How can I contribute to scikit-learn?": [[391, "how-can-i-contribute-to-scikit-learn"]], "Why is my pull request not getting any attention?": [[391, "why-is-my-pull-request-not-getting-any-attention"]], "What are the inclusion criteria for new algorithms ?": [[391, "what-are-the-inclusion-criteria-for-new-algorithms"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[391, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Using scikit-learn": [[391, "using-scikit-learn"]], "What\u2019s the best way to get help on scikit-learn usage?": [[391, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "How should I save, export or deploy estimators for production?": [[391, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How can I create a bunch object?": [[391, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[391, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How do I deal with string data (or trees, graphs\u2026)?": [[391, "how-do-i-deal-with-string-data-or-trees-graphs"]], "Why do I sometime get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[391, "why-do-i-sometime-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why does my job use more cores than specified with n_jobs?": [[391, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "How do I set a random_state for an entire execution?": [[391, "how-do-i-set-a-random-state-for-an-entire-execution"]], "Getting Started": [[392, "getting-started"]], "Fitting and predicting: estimator basics": [[392, "fitting-and-predicting-estimator-basics"]], "Transformers and pre-processors": [[392, "transformers-and-pre-processors"]], "Pipelines: chaining pre-processors and estimators": [[392, "pipelines-chaining-pre-processors-and-estimators"]], "Model evaluation": [[392, "model-evaluation"]], "Automatic parameter searches": [[392, "automatic-parameter-searches"]], "Next steps": [[392, "next-steps"]], "Glossary of Common Terms and API Elements": [[393, "glossary-of-common-terms-and-api-elements"]], "General Concepts": [[393, "general-concepts"]], "Class APIs and Estimator Types": [[393, "class-apis-and-estimator-types"]], "Target Types": [[393, "target-types"]], "Methods": [[393, "methods"]], "Parameters": [[393, "parameters"], [413, "parameters"]], "Attributes": [[393, "attributes"]], "Data and sample properties": [[393, "data-and-sample-properties"]], "Scikit-learn governance and decision-making": [[394, "scikit-learn-governance-and-decision-making"]], "Roles And Responsibilities": [[394, "roles-and-responsibilities"]], "Contributors": [[394, "contributors"]], "Core Contributors": [[394, "core-contributors"]], "Communication team": [[394, "communication-team"]], "Documentation team": [[394, "documentation-team"]], "Maintainers": [[394, "maintainers"]], "Technical Committee": [[394, "technical-committee"]], "Decision Making Process": [[394, "decision-making-process"]], "Governance Model Changes": [[394, "governance-model-changes"]], "Enhancement proposals (SLEPs)": [[394, "enhancement-proposals-sleps"]], "Installing scikit-learn": [[396, "installing-scikit-learn"]], "Installing the latest release": [[396, "installing-the-latest-release"]], "Third party distributions of scikit-learn": [[396, "third-party-distributions-of-scikit-learn"]], "Alpine Linux": [[396, "alpine-linux"]], "Arch Linux": [[396, "arch-linux"]], "Debian/Ubuntu": [[396, "debian-ubuntu"]], "Fedora": [[396, "fedora"]], "NetBSD": [[396, "netbsd"]], "MacPorts for Mac OSX": [[396, "macports-for-mac-osx"]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[396, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Intel Extension for Scikit-learn": [[396, "intel-extension-for-scikit-learn"]], "WinPython for Windows": [[396, "winpython-for-windows"]], "Troubleshooting": [[396, "troubleshooting"]], "Error caused by file path length limit on Windows": [[396, "error-caused-by-file-path-length-limit-on-windows"]], "Usage Examples": [[397, "usage-examples"]], "Weighted scoring and fitting": [[397, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[397, "weighted-scoring-and-unweighted-fitting"]], "Unweighted feature selection": [[397, "unweighted-feature-selection"]], "Advanced: Different scoring and fitting weights": [[397, "advanced-different-scoring-and-fitting-weights"]], "API Interface": [[397, "api-interface"]], "Metadata Routing Support Status": [[397, "metadata-routing-support-status"]], "Model persistence": [[400, "model-persistence"]], "Python specific serialization": [[400, "python-specific-serialization"]], "Security & maintainability limitations": [[400, "security-maintainability-limitations"]], "A more secure format: skops": [[400, "a-more-secure-format-skops"]], "Interoperable formats": [[400, "interoperable-formats"]], "Model selection and evaluation": [[401, "model-selection-and-evaluation"]], "Array API support (experimental)": [[402, "array-api-support-experimental"]], "Example usage": [[402, "example-usage"]], "PyTorch Support": [[402, "pytorch-support"]], "Support for Array API-compatible inputs": [[402, "support-for-array-api-compatible-inputs"]], "Metrics": [[402, "metrics"]], "Tools": [[402, "tools"]], "Common estimator checks": [[402, "common-estimator-checks"]], "Note on MPS device support": [[402, "note-on-mps-device-support"]], "Spectral Co-Clustering": [[403, "spectral-co-clustering"]], "Mathematical formulation": [[403, "mathematical-formulation"], [403, "id3"], [406, "mathematical-formulation"], [406, "id16"], [406, "id23"], [406, "id33"], [406, "id37"], [413, "mathematical-formulation"], [989, "mathematical-formulation"], [990, "mathematical-formulation"], [1000, "mathematical-formulation"], [1001, "mathematical-formulation"], [1002, "mathematical-formulation"]], "Spectral Biclustering": [[403, "spectral-biclustering"]], "Biclustering evaluation": [[403, "biclustering-evaluation"]], "Probability calibration": [[404, "probability-calibration"]], "Calibrating a classifier": [[404, "calibrating-a-classifier"]], "Usage": [[404, "usage"], [407, "usage"], [407, "id1"], [413, "usage"], [413, "id24"], [413, "id25"], [413, "id27"], [413, "id35"], [982, "usage"]], "Sigmoid": [[404, "sigmoid"]], "Isotonic": [[404, "isotonic"]], "Multiclass support": [[404, "multiclass-support"]], "API Reference": [[405, "api-reference"]], "sklearn: Settings and information tools": [[405, "module-sklearn"]], "sklearn.base: Base classes and utility functions": [[405, "module-sklearn.base"]], "Base classes": [[405, "base-classes"]], "Functions": [[405, "functions"], [405, "id1"]], "sklearn.calibration: Probability Calibration": [[405, "module-sklearn.calibration"]], "sklearn.cluster: Clustering": [[405, "module-sklearn.cluster"]], "Classes": [[405, "classes"]], "sklearn.compose: Composite Estimators": [[405, "module-sklearn.compose"]], "sklearn.covariance: Covariance Estimators": [[405, "module-sklearn.covariance"]], "sklearn.cross_decomposition: Cross decomposition": [[405, "module-sklearn.cross_decomposition"]], "sklearn.datasets: Datasets": [[405, "module-sklearn.datasets"]], "Loaders": [[405, "loaders"]], "Samples generator": [[405, "samples-generator"]], "sklearn.decomposition: Matrix Decomposition": [[405, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis: Discriminant Analysis": [[405, "module-sklearn.discriminant_analysis"]], "sklearn.dummy: Dummy estimators": [[405, "module-sklearn.dummy"]], "sklearn.ensemble: Ensemble Methods": [[405, "module-sklearn.ensemble"]], "sklearn.exceptions: Exceptions and warnings": [[405, "module-sklearn.exceptions"]], "sklearn.experimental: Experimental": [[405, "module-sklearn.experimental"]], "sklearn.feature_extraction: Feature Extraction": [[405, "module-sklearn.feature_extraction"]], "From images": [[405, "module-sklearn.feature_extraction.image"]], "From text": [[405, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection: Feature Selection": [[405, "module-sklearn.feature_selection"]], "sklearn.gaussian_process: Gaussian Processes": [[405, "module-sklearn.gaussian_process"]], "Kernels": [[405, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute: Impute": [[405, "module-sklearn.impute"]], "sklearn.inspection: Inspection": [[405, "module-sklearn.inspection"]], "sklearn.isotonic: Isotonic regression": [[405, "module-sklearn.isotonic"]], "sklearn.kernel_approximation: Kernel Approximation": [[405, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge: Kernel Ridge Regression": [[405, "module-sklearn.kernel_ridge"]], "sklearn.linear_model: Linear Models": [[405, "module-sklearn.linear_model"]], "Linear classifiers": [[405, "linear-classifiers"]], "Classical linear regressors": [[405, "classical-linear-regressors"]], "Regressors with variable selection": [[405, "regressors-with-variable-selection"]], "Bayesian regressors": [[405, "bayesian-regressors"]], "Multi-task linear regressors with variable selection": [[405, "multi-task-linear-regressors-with-variable-selection"]], "Outlier-robust regressors": [[405, "outlier-robust-regressors"]], "Generalized linear models (GLM) for regression": [[405, "generalized-linear-models-glm-for-regression"]], "sklearn.manifold: Manifold Learning": [[405, "module-sklearn.manifold"]], "sklearn.metrics: Metrics": [[405, "sklearn-metrics-metrics"]], "Model Selection Interface": [[405, "model-selection-interface"]], "Classification metrics": [[405, "classification-metrics"], [986, "classification-metrics"]], "Regression metrics": [[405, "regression-metrics"], [986, "regression-metrics"]], "Multilabel ranking metrics": [[405, "multilabel-ranking-metrics"], [986, "multilabel-ranking-metrics"]], "Clustering metrics": [[405, "clustering-metrics"], [986, "clustering-metrics"]], "Biclustering metrics": [[405, "biclustering-metrics"]], "Distance metrics": [[405, "distance-metrics"]], "Pairwise metrics": [[405, "pairwise-metrics"]], "sklearn.mixture: Gaussian Mixture Models": [[405, "module-sklearn.mixture"]], "sklearn.model_selection: Model Selection": [[405, "module-sklearn.model_selection"]], "Splitter Classes": [[405, "splitter-classes"]], "Splitter Functions": [[405, "splitter-functions"]], "Hyper-parameter optimizers": [[405, "hyper-parameter-optimizers"]], "Model validation": [[405, "model-validation"]], "sklearn.multiclass: Multiclass classification": [[405, "module-sklearn.multiclass"]], "Multiclass classification strategies": [[405, "multiclass-classification-strategies"]], "sklearn.multioutput: Multioutput regression and classification": [[405, "module-sklearn.multioutput"]], "sklearn.naive_bayes: Naive Bayes": [[405, "module-sklearn.naive_bayes"]], "sklearn.neighbors: Nearest Neighbors": [[405, "module-sklearn.neighbors"]], "sklearn.neural_network: Neural network models": [[405, "module-sklearn.neural_network"]], "sklearn.pipeline: Pipeline": [[405, "module-sklearn.pipeline"]], "sklearn.preprocessing: Preprocessing and Normalization": [[405, "module-sklearn.preprocessing"]], "sklearn.random_projection: Random projection": [[405, "module-sklearn.random_projection"]], "sklearn.semi_supervised: Semi-Supervised Learning": [[405, "module-sklearn.semi_supervised"]], "sklearn.svm: Support Vector Machines": [[405, "module-sklearn.svm"]], "sklearn.tree: Decision Trees": [[405, "module-sklearn.tree"]], "sklearn.utils: Utilities": [[405, "module-sklearn.utils"]], "Input and parameter validation": [[405, "module-sklearn.utils.validation"]], "Utilities used in meta-estimators": [[405, "module-sklearn.utils.metaestimators"]], "Utilities to handle weights based on class labels": [[405, "module-sklearn.utils.class_weight"]], "Utilities to deal with multiclass target in classifiers": [[405, "module-sklearn.utils.multiclass"]], "Utilities for optimal mathematical operations": [[405, "module-sklearn.utils.extmath"]], "Utilities to work with sparse matrices and arrays": [[405, "module-sklearn.utils.sparsefuncs"]], "Utilities to work with graphs": [[405, "module-sklearn.utils.graph"]], "Utilities for random sampling": [[405, "module-sklearn.utils.random"]], "Utilities to operate on arrays": [[405, "module-sklearn.utils.arrayfuncs"]], "Metadata routing": [[405, "module-sklearn.utils.metadata_routing"]], "Scikit-learn object discovery": [[405, "module-sklearn.utils.discovery"]], "Scikit-learn compatibility checker": [[405, "module-sklearn.utils.estimator_checks"]], "Utilities for parallel computing": [[405, "module-sklearn.utils.parallel"]], "Recently deprecated": [[405, "recently-deprecated"]], "Input data": [[406, null]], "Overview of clustering methods": [[406, "overview-of-clustering-methods"]], "K-means": [[406, "k-means"]], "Low-level parallelism": [[406, "low-level-parallelism"], [413, "low-level-parallelism"]], "Mini Batch K-Means": [[406, "mini-batch-k-means"]], "Affinity Propagation": [[406, "affinity-propagation"]], "Mean Shift": [[406, "mean-shift"]], "Spectral clustering": [[406, "spectral-clustering"]], "Different label assignment strategies": [[406, "different-label-assignment-strategies"]], "Spectral Clustering Graphs": [[406, "spectral-clustering-graphs"]], "Hierarchical clustering": [[406, "hierarchical-clustering"]], "FeatureAgglomeration": [[406, null]], "Different linkage type: Ward, complete, average, and single linkage": [[406, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Visualization of cluster hierarchy": [[406, "visualization-of-cluster-hierarchy"]], "Adding connectivity constraints": [[406, "adding-connectivity-constraints"]], "Varying the metric": [[406, "varying-the-metric"]], "Bisecting K-Means": [[406, "bisecting-k-means"]], "DBSCAN": [[406, "dbscan"]], "Implementation": [[406, null], [989, "implementation"]], "Memory consumption for large sample sizes": [[406, null]], "HDBSCAN": [[406, "hdbscan"]], "Mutual Reachability Graph": [[406, "mutual-reachability-graph"]], "Hierarchical Clustering": [[406, "id11"]], "OPTICS": [[406, "optics"]], "Comparison with DBSCAN": [[406, null]], "Computational Complexity": [[406, null]], "BIRCH": [[406, "birch"]], "Clustering performance evaluation": [[406, "clustering-performance-evaluation"]], "Rand index": [[406, "rand-index"]], "Advantages": [[406, "advantages"], [406, "id14"], [406, "id21"], [406, "id25"], [406, "id28"], [406, "id31"], [406, "id35"], [406, "id39"]], "Drawbacks": [[406, "drawbacks"], [406, "id15"], [406, "id22"], [406, "id26"], [406, "id29"], [406, "id32"], [406, "id36"], [406, "id40"]], "Mutual Information based scores": [[406, "mutual-information-based-scores"]], "Homogeneity, completeness and V-measure": [[406, "homogeneity-completeness-and-v-measure"]], "Fowlkes-Mallows scores": [[406, "fowlkes-mallows-scores"]], "Silhouette Coefficient": [[406, "silhouette-coefficient"]], "Calinski-Harabasz Index": [[406, "calinski-harabasz-index"]], "Davies-Bouldin Index": [[406, "davies-bouldin-index"]], "Contingency Matrix": [[406, "contingency-matrix"]], "Pair Confusion Matrix": [[406, "pair-confusion-matrix"]], "Pipeline: chaining estimators": [[407, "pipeline-chaining-estimators"]], "Build a pipeline": [[407, "build-a-pipeline"]], "Access pipeline steps": [[407, "access-pipeline-steps"]], "Tracking feature names in a pipeline": [[407, "tracking-feature-names-in-a-pipeline"]], "Access to nested parameters": [[407, "access-to-nested-parameters"]], "Caching transformers: avoid repeated computation": [[407, "caching-transformers-avoid-repeated-computation"]], "Transforming target in regression": [[407, "transforming-target-in-regression"]], "FeatureUnion: composite feature spaces": [[407, "featureunion-composite-feature-spaces"]], "ColumnTransformer for heterogeneous data": [[407, "columntransformer-for-heterogeneous-data"]], "Visualizing Composite Estimators": [[407, "visualizing-composite-estimators"]], "Empirical covariance": [[408, "empirical-covariance"]], "Shrunk Covariance": [[408, "shrunk-covariance"]], "Basic shrinkage": [[408, "basic-shrinkage"]], "Ledoit-Wolf shrinkage": [[408, "ledoit-wolf-shrinkage"]], "Oracle Approximating Shrinkage": [[408, "oracle-approximating-shrinkage"]], "Sparse inverse covariance": [[408, "sparse-inverse-covariance"]], "Robust Covariance Estimation": [[408, "robust-covariance-estimation"]], "Minimum Covariance Determinant": [[408, "minimum-covariance-determinant"]], "PLSCanonical": [[409, "plscanonical"]], "Transforming data": [[409, "transforming-data"]], "Predicting the targets Y": [[409, "predicting-the-targets-y"]], "PLSSVD": [[409, "plssvd"]], "PLSRegression": [[409, "plsregression"]], "Canonical Correlation Analysis": [[409, "canonical-correlation-analysis"]], "Reference:": [[409, null]], "Cross-validation: evaluating estimator performance": [[410, "cross-validation-evaluating-estimator-performance"]], "Computing cross-validated metrics": [[410, "computing-cross-validated-metrics"]], "Data transformation with held out data": [[410, null]], "The cross_validate function and multiple metric evaluation": [[410, "the-cross-validate-function-and-multiple-metric-evaluation"]], "Obtaining predictions by cross-validation": [[410, "obtaining-predictions-by-cross-validation"]], "Cross validation iterators": [[410, "cross-validation-iterators"]], "Cross-validation iterators for i.i.d. data": [[410, "cross-validation-iterators-for-i-i-d-data"]], "K-fold": [[410, "k-fold"]], "Repeated K-Fold": [[410, "repeated-k-fold"]], "Leave One Out (LOO)": [[410, "leave-one-out-loo"]], "Leave P Out (LPO)": [[410, "leave-p-out-lpo"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[410, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Cross-validation iterators with stratification based on class labels": [[410, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Stratified k-fold": [[410, "stratified-k-fold"]], "Stratified Shuffle Split": [[410, "stratified-shuffle-split"]], "Cross-validation iterators for grouped data": [[410, "cross-validation-iterators-for-grouped-data"]], "Group k-fold": [[410, "group-k-fold"]], "StratifiedGroupKFold": [[410, "stratifiedgroupkfold"]], "Leave One Group Out": [[410, "leave-one-group-out"]], "Leave P Groups Out": [[410, "leave-p-groups-out"]], "Group Shuffle Split": [[410, "group-shuffle-split"]], "Predefined fold-splits / Validation-sets": [[410, "predefined-fold-splits-validation-sets"]], "Using cross-validation iterators to split train and test": [[410, "using-cross-validation-iterators-to-split-train-and-test"]], "Cross validation of time series data": [[410, "cross-validation-of-time-series-data"]], "Time Series Split": [[410, "time-series-split"]], "A note on shuffling": [[410, "a-note-on-shuffling"]], "Cross validation and model selection": [[410, "cross-validation-and-model-selection"]], "Decomposing signals in components (matrix factorization problems)": [[411, "decomposing-signals-in-components-matrix-factorization-problems"]], "Principal component analysis (PCA)": [[411, "principal-component-analysis-pca"]], "Exact PCA and probabilistic interpretation": [[411, "exact-pca-and-probabilistic-interpretation"]], "PCA using randomized SVD": [[411, "pca-using-randomized-svd"]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[411, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Kernel Principal Component Analysis (kPCA)": [[411, "kernel-principal-component-analysis-kpca"]], "Exact Kernel PCA": [[411, "exact-kernel-pca"]], "Choice of solver for Kernel PCA": [[411, "choice-of-solver-for-kernel-pca"]], "Truncated singular value decomposition and latent semantic analysis": [[411, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "Dictionary Learning": [[411, "dictionary-learning"]], "Generic dictionary learning": [[411, "generic-dictionary-learning"]], "Mini-batch dictionary learning": [[411, "mini-batch-dictionary-learning"]], "Clustering for dictionary learning": [[411, null]], "Factor Analysis": [[411, "factor-analysis"]], "Independent component analysis (ICA)": [[411, "independent-component-analysis-ica"]], "Non-negative matrix factorization (NMF or NNMF)": [[411, "non-negative-matrix-factorization-nmf-or-nnmf"]], "NMF with the Frobenius norm": [[411, "nmf-with-the-frobenius-norm"]], "NMF with a beta-divergence": [[411, "nmf-with-a-beta-divergence"]], "Mini-batch Non Negative Matrix Factorization": [[411, "mini-batch-non-negative-matrix-factorization"]], "Latent Dirichlet Allocation (LDA)": [[411, "latent-dirichlet-allocation-lda"]], "Density Estimation": [[412, "density-estimation"]], "Density Estimation: Histograms": [[412, "density-estimation-histograms"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[413, "ensembles-gradient-boosting-random-forests-bagging-voting-stacking"]], "Gradient-boosted trees": [[413, "gradient-boosted-trees"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[413, null]], "Histogram-Based Gradient Boosting": [[413, "histogram-based-gradient-boosting"]], "Missing values support": [[413, "missing-values-support"]], "Sample weight support": [[413, "sample-weight-support"]], "Categorical Features Support": [[413, "categorical-features-support"]], "Interaction constraints": [[413, "interaction-constraints"]], "Why it\u2019s faster": [[413, "why-it-s-faster"]], "GradientBoostingClassifier and GradientBoostingRegressor": [[413, "gradientboostingclassifier-and-gradientboostingregressor"]], "Fitting additional weak-learners": [[413, "fitting-additional-weak-learners"]], "Controlling the tree size": [[413, "controlling-the-tree-size"]], "Loss Functions": [[413, "loss-functions"]], "Shrinkage via learning rate": [[413, "shrinkage-via-learning-rate"]], "Subsampling": [[413, "subsampling"]], "Interpretation with feature importance": [[413, "interpretation-with-feature-importance"]], "Random forests and other randomized tree ensembles": [[413, "random-forests-and-other-randomized-tree-ensembles"]], "Random Forests": [[413, "random-forests"]], "Extremely Randomized Trees": [[413, "extremely-randomized-trees"]], "Parallelization": [[413, "parallelization"]], "Feature importance evaluation": [[413, "feature-importance-evaluation"]], "Totally Random Trees Embedding": [[413, "totally-random-trees-embedding"]], "Bagging meta-estimator": [[413, "bagging-meta-estimator"]], "Voting Classifier": [[413, "voting-classifier"]], "Majority Class Labels (Majority/Hard Voting)": [[413, "majority-class-labels-majority-hard-voting"]], "Weighted Average Probabilities (Soft Voting)": [[413, "weighted-average-probabilities-soft-voting"]], "Using the VotingClassifier with GridSearchCV": [[413, "using-the-votingclassifier-with-gridsearchcv"]], "Voting Regressor": [[413, "voting-regressor"]], "Stacked generalization": [[413, "stacked-generalization"]], "AdaBoost": [[413, "adaboost"]], "Feature extraction": [[414, "feature-extraction"]], "Loading features from dicts": [[414, "loading-features-from-dicts"]], "Feature hashing": [[414, "feature-hashing"]], "Text feature extraction": [[414, "text-feature-extraction"]], "The Bag of Words representation": [[414, "the-bag-of-words-representation"]], "Sparsity": [[414, "sparsity"], [1019, "sparsity"]], "Common Vectorizer usage": [[414, "common-vectorizer-usage"]], "Using stop words": [[414, "using-stop-words"]], "Tf\u2013idf term weighting": [[414, "tfidf-term-weighting"]], "Decoding text files": [[414, "decoding-text-files"]], "Applications and examples": [[414, "applications-and-examples"]], "Limitations of the Bag of Words representation": [[414, "limitations-of-the-bag-of-words-representation"]], "Vectorizing a large text corpus with the hashing trick": [[414, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Customizing the vectorizer classes": [[414, "customizing-the-vectorizer-classes"]], "Image feature extraction": [[414, "image-feature-extraction"]], "Patch extraction": [[414, "patch-extraction"]], "Connectivity graph of an image": [[414, "connectivity-graph-of-an-image"]], "Feature selection": [[415, "feature-selection"]], "Removing features with low variance": [[415, "removing-features-with-low-variance"]], "Feature selection with sparse data": [[415, null]], "Feature selection using SelectFromModel": [[415, "feature-selection-using-selectfrommodel"]], "L1-based feature selection": [[415, "l1-based-feature-selection"]], "Reference": [[415, null], [415, null]], "Tree-based feature selection": [[415, "tree-based-feature-selection"]], "Sequential Feature Selection": [[415, "sequential-feature-selection"]], "Feature selection as part of a pipeline": [[415, "feature-selection-as-part-of-a-pipeline"]], "Gaussian Processes": [[416, "gaussian-processes"]], "Gaussian Process Regression (GPR)": [[416, "gaussian-process-regression-gpr"]], "Gaussian Process Classification (GPC)": [[416, "gaussian-process-classification-gpc"]], "GPC examples": [[416, "gpc-examples"]], "Probabilistic predictions with GPC": [[416, "probabilistic-predictions-with-gpc"]], "Illustration of GPC on the XOR dataset": [[416, "illustration-of-gpc-on-the-xor-dataset"]], "Kernels for Gaussian Processes": [[416, "kernels-for-gaussian-processes"]], "Basic kernels": [[416, "basic-kernels"]], "Kernel operators": [[416, "kernel-operators"]], "Radial basis function (RBF) kernel": [[416, "radial-basis-function-rbf-kernel"]], "Rational quadratic kernel": [[416, "rational-quadratic-kernel"]], "Dot-Product kernel": [[416, "dot-product-kernel"]], "sklearn.cluster.dbscan": [[417, "sklearn-cluster-dbscan"]], "sklearn.decomposition.fastica": [[418, "sklearn-decomposition-fastica"]], "sklearn.covariance.oas": [[419, "sklearn-covariance-oas"]], "sklearn.base.BaseEstimator": [[420, "sklearn-base-baseestimator"]], "Examples using sklearn.base.BaseEstimator": [[420, "examples-using-sklearn-base-baseestimator"]], "sklearn.base.BiclusterMixin": [[421, "sklearn-base-biclustermixin"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[422, "sklearn-base-classnameprefixfeaturesoutmixin"]], "sklearn.base.ClassifierMixin": [[423, "sklearn-base-classifiermixin"]], "Examples using sklearn.base.ClassifierMixin": [[423, "examples-using-sklearn-base-classifiermixin"]], "sklearn.base.ClusterMixin": [[424, "sklearn-base-clustermixin"]], "sklearn.base.DensityMixin": [[425, "sklearn-base-densitymixin"]], "sklearn.base.MetaEstimatorMixin": [[426, "sklearn-base-metaestimatormixin"]], "Examples using sklearn.base.MetaEstimatorMixin": [[426, "examples-using-sklearn-base-metaestimatormixin"]], "sklearn.base.OneToOneFeatureMixin": [[427, "sklearn-base-onetoonefeaturemixin"]], "sklearn.base.OutlierMixin": [[428, "sklearn-base-outliermixin"]], "sklearn.base.RegressorMixin": [[429, "sklearn-base-regressormixin"]], "Examples using sklearn.base.RegressorMixin": [[429, "examples-using-sklearn-base-regressormixin"]], "sklearn.base.TransformerMixin": [[430, "sklearn-base-transformermixin"]], "Examples using sklearn.base.TransformerMixin": [[430, "examples-using-sklearn-base-transformermixin"]], "sklearn.base.clone": [[431, "sklearn-base-clone"]], "sklearn.base.is_classifier": [[432, "sklearn-base-is-classifier"]], "sklearn.base.is_regressor": [[433, "sklearn-base-is-regressor"]], "sklearn.calibration.CalibratedClassifierCV": [[434, "sklearn-calibration-calibratedclassifiercv"]], "Examples using sklearn.calibration.CalibratedClassifierCV": [[434, "examples-using-sklearn-calibration-calibratedclassifiercv"]], "sklearn.calibration.CalibrationDisplay": [[435, "sklearn-calibration-calibrationdisplay"]], "Examples using sklearn.calibration.CalibrationDisplay.from_estimator": [[435, "examples-using-sklearn-calibration-calibrationdisplay-from-estimator"]], "sklearn.calibration.calibration_curve": [[436, "sklearn-calibration-calibration-curve"]], "sklearn.cluster.AffinityPropagation": [[437, "sklearn-cluster-affinitypropagation"]], "Examples using sklearn.cluster.AffinityPropagation": [[437, "examples-using-sklearn-cluster-affinitypropagation"]], "sklearn.cluster.AgglomerativeClustering": [[438, "sklearn-cluster-agglomerativeclustering"]], "Examples using sklearn.cluster.AgglomerativeClustering": [[438, "examples-using-sklearn-cluster-agglomerativeclustering"]], "sklearn.cluster.Birch": [[439, "sklearn-cluster-birch"]], "Examples using sklearn.cluster.Birch": [[439, "examples-using-sklearn-cluster-birch"]], "sklearn.cluster.BisectingKMeans": [[440, "sklearn-cluster-bisectingkmeans"]], "Examples using sklearn.cluster.BisectingKMeans": [[440, "examples-using-sklearn-cluster-bisectingkmeans"]], "sklearn.cluster.DBSCAN": [[441, "sklearn-cluster-dbscan"]], "Examples using sklearn.cluster.DBSCAN": [[441, "examples-using-sklearn-cluster-dbscan"]], "sklearn.cluster.FeatureAgglomeration": [[442, "sklearn-cluster-featureagglomeration"]], "Examples using sklearn.cluster.FeatureAgglomeration": [[442, "examples-using-sklearn-cluster-featureagglomeration"]], "sklearn.cluster.HDBSCAN": [[443, "sklearn-cluster-hdbscan"]], "Examples using sklearn.cluster.HDBSCAN": [[443, "examples-using-sklearn-cluster-hdbscan"]], "sklearn.cluster.KMeans": [[444, "sklearn-cluster-kmeans"]], "Examples using sklearn.cluster.KMeans": [[444, "examples-using-sklearn-cluster-kmeans"]], "sklearn.cluster.MeanShift": [[445, "sklearn-cluster-meanshift"]], "Examples using sklearn.cluster.MeanShift": [[445, "examples-using-sklearn-cluster-meanshift"]], "sklearn.cluster.MiniBatchKMeans": [[446, "sklearn-cluster-minibatchkmeans"]], "Examples using sklearn.cluster.MiniBatchKMeans": [[446, "examples-using-sklearn-cluster-minibatchkmeans"]], "sklearn.cluster.OPTICS": [[447, "sklearn-cluster-optics"]], "Examples using sklearn.cluster.OPTICS": [[447, "examples-using-sklearn-cluster-optics"]], "sklearn.cluster.SpectralBiclustering": [[448, "sklearn-cluster-spectralbiclustering"]], "Examples using sklearn.cluster.SpectralBiclustering": [[448, "examples-using-sklearn-cluster-spectralbiclustering"]], "sklearn.cluster.SpectralClustering": [[449, "sklearn-cluster-spectralclustering"]], "Examples using sklearn.cluster.SpectralClustering": [[449, "examples-using-sklearn-cluster-spectralclustering"]], "sklearn.cluster.SpectralCoclustering": [[450, "sklearn-cluster-spectralcoclustering"]], "Examples using sklearn.cluster.SpectralCoclustering": [[450, "examples-using-sklearn-cluster-spectralcoclustering"]], "sklearn.cluster.affinity_propagation": [[451, "sklearn-cluster-affinity-propagation"]], "Examples using sklearn.cluster.affinity_propagation": [[451, "examples-using-sklearn-cluster-affinity-propagation"]], "sklearn.cluster.cluster_optics_dbscan": [[452, "sklearn-cluster-cluster-optics-dbscan"]], "Examples using sklearn.cluster.cluster_optics_dbscan": [[452, "examples-using-sklearn-cluster-cluster-optics-dbscan"]], "sklearn.cluster.cluster_optics_xi": [[453, "sklearn-cluster-cluster-optics-xi"]], "sklearn.cluster.compute_optics_graph": [[454, "sklearn-cluster-compute-optics-graph"]], "sklearn.cluster.estimate_bandwidth": [[455, "sklearn-cluster-estimate-bandwidth"]], "Examples using sklearn.cluster.estimate_bandwidth": [[455, "examples-using-sklearn-cluster-estimate-bandwidth"]], "sklearn.cluster.k_means": [[456, "sklearn-cluster-k-means"]], "sklearn.cluster.kmeans_plusplus": [[457, "sklearn-cluster-kmeans-plusplus"]], "Examples using sklearn.cluster.kmeans_plusplus": [[457, "examples-using-sklearn-cluster-kmeans-plusplus"]], "sklearn.cluster.mean_shift": [[458, "sklearn-cluster-mean-shift"]], "sklearn.cluster.spectral_clustering": [[459, "sklearn-cluster-spectral-clustering"]], "Examples using sklearn.cluster.spectral_clustering": [[459, "examples-using-sklearn-cluster-spectral-clustering"]], "sklearn.cluster.ward_tree": [[460, "sklearn-cluster-ward-tree"]], "sklearn.compose.ColumnTransformer": [[461, "sklearn-compose-columntransformer"]], "Examples using sklearn.compose.ColumnTransformer": [[461, "examples-using-sklearn-compose-columntransformer"]], "sklearn.compose.TransformedTargetRegressor": [[462, "sklearn-compose-transformedtargetregressor"]], "Examples using sklearn.compose.TransformedTargetRegressor": [[462, "examples-using-sklearn-compose-transformedtargetregressor"]], "sklearn.compose.make_column_selector": [[463, "sklearn-compose-make-column-selector"]], "Examples using sklearn.compose.make_column_selector": [[463, "examples-using-sklearn-compose-make-column-selector"]], "sklearn.compose.make_column_transformer": [[464, "sklearn-compose-make-column-transformer"]], "Examples using sklearn.compose.make_column_transformer": [[464, "examples-using-sklearn-compose-make-column-transformer"]], "sklearn.config_context": [[465, "sklearn-config-context"]], "Examples using sklearn.config_context": [[465, "examples-using-sklearn-config-context"]], "sklearn.covariance.EllipticEnvelope": [[466, "sklearn-covariance-ellipticenvelope"]], "Examples using sklearn.covariance.EllipticEnvelope": [[466, "examples-using-sklearn-covariance-ellipticenvelope"]], "sklearn.covariance.EmpiricalCovariance": [[467, "sklearn-covariance-empiricalcovariance"]], "Examples using sklearn.covariance.EmpiricalCovariance": [[467, "examples-using-sklearn-covariance-empiricalcovariance"]], "sklearn.covariance.GraphicalLasso": [[468, "sklearn-covariance-graphicallasso"]], "sklearn.covariance.GraphicalLassoCV": [[469, "sklearn-covariance-graphicallassocv"]], "Examples using sklearn.covariance.GraphicalLassoCV": [[469, "examples-using-sklearn-covariance-graphicallassocv"]], "sklearn.covariance.LedoitWolf": [[470, "sklearn-covariance-ledoitwolf"]], "Examples using sklearn.covariance.LedoitWolf": [[470, "examples-using-sklearn-covariance-ledoitwolf"]], "sklearn.covariance.MinCovDet": [[471, "sklearn-covariance-mincovdet"]], "Examples using sklearn.covariance.MinCovDet": [[471, "examples-using-sklearn-covariance-mincovdet"]], "sklearn.covariance.OAS": [[472, "sklearn-covariance-oas"]], "Examples using sklearn.covariance.OAS": [[472, "examples-using-sklearn-covariance-oas"]], "sklearn.covariance.ShrunkCovariance": [[473, "sklearn-covariance-shrunkcovariance"]], "Examples using sklearn.covariance.ShrunkCovariance": [[473, "examples-using-sklearn-covariance-shrunkcovariance"]], "sklearn.covariance.empirical_covariance": [[474, "sklearn-covariance-empirical-covariance"]], "Examples using sklearn.covariance.empirical_covariance": [[474, "examples-using-sklearn-covariance-empirical-covariance"]], "sklearn.covariance.graphical_lasso": [[475, "sklearn-covariance-graphical-lasso"]], "sklearn.covariance.ledoit_wolf": [[476, "sklearn-covariance-ledoit-wolf"]], "Examples using sklearn.covariance.ledoit_wolf": [[476, "examples-using-sklearn-covariance-ledoit-wolf"]], "sklearn.covariance.ledoit_wolf_shrinkage": [[477, "sklearn-covariance-ledoit-wolf-shrinkage"]], "sklearn.covariance.shrunk_covariance": [[478, "sklearn-covariance-shrunk-covariance"]], "sklearn.cross_decomposition.CCA": [[479, "sklearn-cross-decomposition-cca"]], "Examples using sklearn.cross_decomposition.CCA": [[479, "examples-using-sklearn-cross-decomposition-cca"]], "sklearn.cross_decomposition.PLSCanonical": [[480, "sklearn-cross-decomposition-plscanonical"]], "Examples using sklearn.cross_decomposition.PLSCanonical": [[480, "examples-using-sklearn-cross-decomposition-plscanonical"]], "sklearn.cross_decomposition.PLSRegression": [[481, "sklearn-cross-decomposition-plsregression"]], "Examples using sklearn.cross_decomposition.PLSRegression": [[481, "examples-using-sklearn-cross-decomposition-plsregression"]], "sklearn.cross_decomposition.PLSSVD": [[482, "sklearn-cross-decomposition-plssvd"]], "sklearn.datasets.clear_data_home": [[483, "sklearn-datasets-clear-data-home"]], "sklearn.datasets.dump_svmlight_file": [[484, "sklearn-datasets-dump-svmlight-file"]], "Examples using sklearn.datasets.dump_svmlight_file": [[484, "examples-using-sklearn-datasets-dump-svmlight-file"]], "sklearn.datasets.fetch_20newsgroups": [[485, "sklearn-datasets-fetch-20newsgroups"]], "Examples using sklearn.datasets.fetch_20newsgroups": [[485, "examples-using-sklearn-datasets-fetch-20newsgroups"]], "sklearn.datasets.fetch_20newsgroups_vectorized": [[486, "sklearn-datasets-fetch-20newsgroups-vectorized"]], "Examples using sklearn.datasets.fetch_20newsgroups_vectorized": [[486, "examples-using-sklearn-datasets-fetch-20newsgroups-vectorized"]], "sklearn.datasets.fetch_california_housing": [[487, "sklearn-datasets-fetch-california-housing"]], "Examples using sklearn.datasets.fetch_california_housing": [[487, "examples-using-sklearn-datasets-fetch-california-housing"]], "sklearn.datasets.fetch_covtype": [[488, "sklearn-datasets-fetch-covtype"]], "Examples using sklearn.datasets.fetch_covtype": [[488, "examples-using-sklearn-datasets-fetch-covtype"]], "sklearn.datasets.fetch_kddcup99": [[489, "sklearn-datasets-fetch-kddcup99"]], "Examples using sklearn.datasets.fetch_kddcup99": [[489, "examples-using-sklearn-datasets-fetch-kddcup99"]], "sklearn.datasets.fetch_lfw_pairs": [[490, "sklearn-datasets-fetch-lfw-pairs"]], "sklearn.datasets.fetch_lfw_people": [[491, "sklearn-datasets-fetch-lfw-people"]], "Examples using sklearn.datasets.fetch_lfw_people": [[491, "examples-using-sklearn-datasets-fetch-lfw-people"]], "sklearn.datasets.fetch_olivetti_faces": [[492, "sklearn-datasets-fetch-olivetti-faces"]], "Examples using sklearn.datasets.fetch_olivetti_faces": [[492, "examples-using-sklearn-datasets-fetch-olivetti-faces"]], "sklearn.datasets.fetch_openml": [[493, "sklearn-datasets-fetch-openml"]], "Examples using sklearn.datasets.fetch_openml": [[493, "examples-using-sklearn-datasets-fetch-openml"]], "sklearn.datasets.fetch_rcv1": [[494, "sklearn-datasets-fetch-rcv1"]], "sklearn.datasets.fetch_species_distributions": [[495, "sklearn-datasets-fetch-species-distributions"]], "Examples using sklearn.datasets.fetch_species_distributions": [[495, "examples-using-sklearn-datasets-fetch-species-distributions"]], "sklearn.datasets.get_data_home": [[496, "sklearn-datasets-get-data-home"]], "Examples using sklearn.datasets.get_data_home": [[496, "examples-using-sklearn-datasets-get-data-home"]], "sklearn.datasets.load_breast_cancer": [[497, "sklearn-datasets-load-breast-cancer"]], "Examples using sklearn.datasets.load_breast_cancer": [[497, "examples-using-sklearn-datasets-load-breast-cancer"]], "sklearn.datasets.load_diabetes": [[498, "sklearn-datasets-load-diabetes"]], "Examples using sklearn.datasets.load_diabetes": [[498, "examples-using-sklearn-datasets-load-diabetes"]], "sklearn.datasets.load_digits": [[499, "sklearn-datasets-load-digits"]], "Examples using sklearn.datasets.load_digits": [[499, "examples-using-sklearn-datasets-load-digits"]], "sklearn.datasets.load_files": [[500, "sklearn-datasets-load-files"]], "sklearn.datasets.load_iris": [[501, "sklearn-datasets-load-iris"]], "Examples using sklearn.datasets.load_iris": [[501, "examples-using-sklearn-datasets-load-iris"]], "sklearn.datasets.load_linnerud": [[502, "sklearn-datasets-load-linnerud"]], "sklearn.datasets.load_sample_image": [[503, "sklearn-datasets-load-sample-image"]], "Examples using sklearn.datasets.load_sample_image": [[503, "examples-using-sklearn-datasets-load-sample-image"]], "sklearn.datasets.load_sample_images": [[504, "sklearn-datasets-load-sample-images"]], "sklearn.datasets.load_svmlight_file": [[505, "sklearn-datasets-load-svmlight-file"]], "sklearn.datasets.load_svmlight_files": [[506, "sklearn-datasets-load-svmlight-files"]], "sklearn.datasets.load_wine": [[507, "sklearn-datasets-load-wine"]], "Examples using sklearn.datasets.load_wine": [[507, "examples-using-sklearn-datasets-load-wine"]], "sklearn.datasets.make_biclusters": [[508, "sklearn-datasets-make-biclusters"]], "Examples using sklearn.datasets.make_biclusters": [[508, "examples-using-sklearn-datasets-make-biclusters"]], "sklearn.datasets.make_blobs": [[509, "sklearn-datasets-make-blobs"]], "Examples using sklearn.datasets.make_blobs": [[509, "examples-using-sklearn-datasets-make-blobs"]], "sklearn.datasets.make_checkerboard": [[510, "sklearn-datasets-make-checkerboard"]], "Examples using sklearn.datasets.make_checkerboard": [[510, "examples-using-sklearn-datasets-make-checkerboard"]], "sklearn.datasets.make_circles": [[511, "sklearn-datasets-make-circles"]], "Examples using sklearn.datasets.make_circles": [[511, "examples-using-sklearn-datasets-make-circles"]], "sklearn.datasets.make_classification": [[512, "sklearn-datasets-make-classification"]], "Examples using sklearn.datasets.make_classification": [[512, "examples-using-sklearn-datasets-make-classification"]], "sklearn.datasets.make_friedman1": [[513, "sklearn-datasets-make-friedman1"]], "sklearn.datasets.make_friedman2": [[514, "sklearn-datasets-make-friedman2"]], "sklearn.datasets.make_friedman3": [[515, "sklearn-datasets-make-friedman3"]], "sklearn.datasets.make_gaussian_quantiles": [[516, "sklearn-datasets-make-gaussian-quantiles"]], "Examples using sklearn.datasets.make_gaussian_quantiles": [[516, "examples-using-sklearn-datasets-make-gaussian-quantiles"]], "sklearn.datasets.make_hastie_10_2": [[517, "sklearn-datasets-make-hastie-10-2"]], "Examples using sklearn.datasets.make_hastie_10_2": [[517, "examples-using-sklearn-datasets-make-hastie-10-2"]], "sklearn.datasets.make_low_rank_matrix": [[518, "sklearn-datasets-make-low-rank-matrix"]], "Examples using sklearn.datasets.make_low_rank_matrix": [[518, "examples-using-sklearn-datasets-make-low-rank-matrix"]], "sklearn.datasets.make_moons": [[519, "sklearn-datasets-make-moons"]], "Examples using sklearn.datasets.make_moons": [[519, "examples-using-sklearn-datasets-make-moons"]], "sklearn.datasets.make_multilabel_classification": [[520, "sklearn-datasets-make-multilabel-classification"]], "Examples using sklearn.datasets.make_multilabel_classification": [[520, "examples-using-sklearn-datasets-make-multilabel-classification"]], "sklearn.datasets.make_regression": [[521, "sklearn-datasets-make-regression"]], "Examples using sklearn.datasets.make_regression": [[521, "examples-using-sklearn-datasets-make-regression"]], "sklearn.datasets.make_s_curve": [[522, "sklearn-datasets-make-s-curve"]], "Examples using sklearn.datasets.make_s_curve": [[522, "examples-using-sklearn-datasets-make-s-curve"]], "sklearn.datasets.make_sparse_coded_signal": [[523, "sklearn-datasets-make-sparse-coded-signal"]], "Examples using sklearn.datasets.make_sparse_coded_signal": [[523, "examples-using-sklearn-datasets-make-sparse-coded-signal"]], "sklearn.datasets.make_sparse_spd_matrix": [[524, "sklearn-datasets-make-sparse-spd-matrix"]], "Examples using sklearn.datasets.make_sparse_spd_matrix": [[524, "examples-using-sklearn-datasets-make-sparse-spd-matrix"]], "sklearn.datasets.make_sparse_uncorrelated": [[525, "sklearn-datasets-make-sparse-uncorrelated"]], "sklearn.datasets.make_spd_matrix": [[526, "sklearn-datasets-make-spd-matrix"]], "sklearn.datasets.make_swiss_roll": [[527, "sklearn-datasets-make-swiss-roll"]], "Examples using sklearn.datasets.make_swiss_roll": [[527, "examples-using-sklearn-datasets-make-swiss-roll"]], "sklearn.decomposition.DictionaryLearning": [[528, "sklearn-decomposition-dictionarylearning"]], "sklearn.decomposition.FactorAnalysis": [[529, "sklearn-decomposition-factoranalysis"]], "Examples using sklearn.decomposition.FactorAnalysis": [[529, "examples-using-sklearn-decomposition-factoranalysis"]], "sklearn.decomposition.FastICA": [[530, "sklearn-decomposition-fastica"]], "Examples using sklearn.decomposition.FastICA": [[530, "examples-using-sklearn-decomposition-fastica"]], "sklearn.decomposition.IncrementalPCA": [[531, "sklearn-decomposition-incrementalpca"]], "Examples using sklearn.decomposition.IncrementalPCA": [[531, "examples-using-sklearn-decomposition-incrementalpca"]], "sklearn.decomposition.KernelPCA": [[532, "sklearn-decomposition-kernelpca"]], "Examples using sklearn.decomposition.KernelPCA": [[532, "examples-using-sklearn-decomposition-kernelpca"]], "sklearn.decomposition.LatentDirichletAllocation": [[533, "sklearn-decomposition-latentdirichletallocation"]], "Examples using sklearn.decomposition.LatentDirichletAllocation": [[533, "examples-using-sklearn-decomposition-latentdirichletallocation"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[534, "sklearn-decomposition-minibatchdictionarylearning"]], "Examples using sklearn.decomposition.MiniBatchDictionaryLearning": [[534, "examples-using-sklearn-decomposition-minibatchdictionarylearning"]], "sklearn.decomposition.MiniBatchNMF": [[535, "sklearn-decomposition-minibatchnmf"]], "Examples using sklearn.decomposition.MiniBatchNMF": [[535, "examples-using-sklearn-decomposition-minibatchnmf"]], "sklearn.decomposition.MiniBatchSparsePCA": [[536, "sklearn-decomposition-minibatchsparsepca"]], "Examples using sklearn.decomposition.MiniBatchSparsePCA": [[536, "examples-using-sklearn-decomposition-minibatchsparsepca"]], "sklearn.decomposition.NMF": [[537, "sklearn-decomposition-nmf"]], "Examples using sklearn.decomposition.NMF": [[537, "examples-using-sklearn-decomposition-nmf"]], "sklearn.decomposition.PCA": [[538, "sklearn-decomposition-pca"]], "Examples using sklearn.decomposition.PCA": [[538, "examples-using-sklearn-decomposition-pca"]], "sklearn.decomposition.SparseCoder": [[539, "sklearn-decomposition-sparsecoder"]], "Examples using sklearn.decomposition.SparseCoder": [[539, "examples-using-sklearn-decomposition-sparsecoder"]], "sklearn.decomposition.SparsePCA": [[540, "sklearn-decomposition-sparsepca"]], "Examples using sklearn.decomposition.SparsePCA": [[540, "examples-using-sklearn-decomposition-sparsepca"]], "sklearn.decomposition.TruncatedSVD": [[541, "sklearn-decomposition-truncatedsvd"]], "Examples using sklearn.decomposition.TruncatedSVD": [[541, "examples-using-sklearn-decomposition-truncatedsvd"]], "sklearn.decomposition.dict_learning": [[542, "sklearn-decomposition-dict-learning"]], "sklearn.decomposition.dict_learning_online": [[543, "sklearn-decomposition-dict-learning-online"]], "sklearn.decomposition.non_negative_factorization": [[544, "sklearn-decomposition-non-negative-factorization"]], "sklearn.decomposition.sparse_encode": [[545, "sklearn-decomposition-sparse-encode"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[546, "sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[546, "examples-using-sklearn-discriminant-analysis-lineardiscriminantanalysis"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[547, "sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "Examples using sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[547, "examples-using-sklearn-discriminant-analysis-quadraticdiscriminantanalysis"]], "sklearn.dummy.DummyClassifier": [[548, "sklearn-dummy-dummyclassifier"]], "Examples using sklearn.dummy.DummyClassifier": [[548, "examples-using-sklearn-dummy-dummyclassifier"]], "sklearn.dummy.DummyRegressor": [[549, "sklearn-dummy-dummyregressor"]], "Examples using sklearn.dummy.DummyRegressor": [[549, "examples-using-sklearn-dummy-dummyregressor"]], "sklearn.ensemble.AdaBoostClassifier": [[550, "sklearn-ensemble-adaboostclassifier"]], "Examples using sklearn.ensemble.AdaBoostClassifier": [[550, "examples-using-sklearn-ensemble-adaboostclassifier"]], "sklearn.ensemble.AdaBoostRegressor": [[551, "sklearn-ensemble-adaboostregressor"]], "Examples using sklearn.ensemble.AdaBoostRegressor": [[551, "examples-using-sklearn-ensemble-adaboostregressor"]], "sklearn.ensemble.BaggingClassifier": [[552, "sklearn-ensemble-baggingclassifier"]], "sklearn.ensemble.BaggingRegressor": [[553, "sklearn-ensemble-baggingregressor"]], "Examples using sklearn.ensemble.BaggingRegressor": [[553, "examples-using-sklearn-ensemble-baggingregressor"]], "sklearn.ensemble.ExtraTreesClassifier": [[554, "sklearn-ensemble-extratreesclassifier"]], "Examples using sklearn.ensemble.ExtraTreesClassifier": [[554, "examples-using-sklearn-ensemble-extratreesclassifier"]], "sklearn.ensemble.ExtraTreesRegressor": [[555, "sklearn-ensemble-extratreesregressor"]], "Examples using sklearn.ensemble.ExtraTreesRegressor": [[555, "examples-using-sklearn-ensemble-extratreesregressor"]], "sklearn.ensemble.GradientBoostingClassifier": [[556, "sklearn-ensemble-gradientboostingclassifier"]], "Examples using sklearn.ensemble.GradientBoostingClassifier": [[556, "examples-using-sklearn-ensemble-gradientboostingclassifier"]], "sklearn.ensemble.GradientBoostingRegressor": [[557, "sklearn-ensemble-gradientboostingregressor"]], "Examples using sklearn.ensemble.GradientBoostingRegressor": [[557, "examples-using-sklearn-ensemble-gradientboostingregressor"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[558, "sklearn-ensemble-histgradientboostingclassifier"]], "Examples using sklearn.ensemble.HistGradientBoostingClassifier": [[558, "examples-using-sklearn-ensemble-histgradientboostingclassifier"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[559, "sklearn-ensemble-histgradientboostingregressor"]], "Examples using sklearn.ensemble.HistGradientBoostingRegressor": [[559, "examples-using-sklearn-ensemble-histgradientboostingregressor"]], "sklearn.ensemble.IsolationForest": [[560, "sklearn-ensemble-isolationforest"]], "Examples using sklearn.ensemble.IsolationForest": [[560, "examples-using-sklearn-ensemble-isolationforest"]], "sklearn.ensemble.RandomForestClassifier": [[561, "sklearn-ensemble-randomforestclassifier"]], "Examples using sklearn.ensemble.RandomForestClassifier": [[561, "examples-using-sklearn-ensemble-randomforestclassifier"]], "sklearn.ensemble.RandomForestRegressor": [[562, "sklearn-ensemble-randomforestregressor"]], "Examples using sklearn.ensemble.RandomForestRegressor": [[562, "examples-using-sklearn-ensemble-randomforestregressor"]], "sklearn.ensemble.RandomTreesEmbedding": [[563, "sklearn-ensemble-randomtreesembedding"]], "Examples using sklearn.ensemble.RandomTreesEmbedding": [[563, "examples-using-sklearn-ensemble-randomtreesembedding"]], "sklearn.ensemble.StackingClassifier": [[564, "sklearn-ensemble-stackingclassifier"]], "Examples using sklearn.ensemble.StackingClassifier": [[564, "examples-using-sklearn-ensemble-stackingclassifier"]], "sklearn.ensemble.StackingRegressor": [[565, "sklearn-ensemble-stackingregressor"]], "Examples using sklearn.ensemble.StackingRegressor": [[565, "examples-using-sklearn-ensemble-stackingregressor"]], "sklearn.ensemble.VotingClassifier": [[566, "sklearn-ensemble-votingclassifier"]], "Examples using sklearn.ensemble.VotingClassifier": [[566, "examples-using-sklearn-ensemble-votingclassifier"]], "sklearn.ensemble.VotingRegressor": [[567, "sklearn-ensemble-votingregressor"]], "Examples using sklearn.ensemble.VotingRegressor": [[567, "examples-using-sklearn-ensemble-votingregressor"]], "sklearn.exceptions.ConvergenceWarning": [[568, "sklearn-exceptions-convergencewarning"]], "Examples using sklearn.exceptions.ConvergenceWarning": [[568, "examples-using-sklearn-exceptions-convergencewarning"]], "sklearn.exceptions.DataConversionWarning": [[569, "sklearn-exceptions-dataconversionwarning"]], "sklearn.exceptions.DataDimensionalityWarning": [[570, "sklearn-exceptions-datadimensionalitywarning"]], "sklearn.exceptions.EfficiencyWarning": [[571, "sklearn-exceptions-efficiencywarning"]], "sklearn.exceptions.FitFailedWarning": [[572, "sklearn-exceptions-fitfailedwarning"]], "sklearn.exceptions.InconsistentVersionWarning": [[573, "sklearn-exceptions-inconsistentversionwarning"]], "sklearn.exceptions.NotFittedError": [[574, "sklearn-exceptions-notfittederror"]], "sklearn.exceptions.UndefinedMetricWarning": [[575, "sklearn-exceptions-undefinedmetricwarning"]], "sklearn.experimental.enable_halving_search_cv": [[576, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[577, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn.feature_extraction.DictVectorizer": [[578, "sklearn-feature-extraction-dictvectorizer"]], "Examples using sklearn.feature_extraction.DictVectorizer": [[578, "examples-using-sklearn-feature-extraction-dictvectorizer"]], "sklearn.feature_extraction.FeatureHasher": [[579, "sklearn-feature-extraction-featurehasher"]], "Examples using sklearn.feature_extraction.FeatureHasher": [[579, "examples-using-sklearn-feature-extraction-featurehasher"]], "sklearn.feature_extraction.image.PatchExtractor": [[580, "sklearn-feature-extraction-image-patchextractor"]], "sklearn.feature_extraction.image.extract_patches_2d": [[581, "sklearn-feature-extraction-image-extract-patches-2d"]], "Examples using sklearn.feature_extraction.image.extract_patches_2d": [[581, "examples-using-sklearn-feature-extraction-image-extract-patches-2d"]], "sklearn.feature_extraction.image.grid_to_graph": [[582, "sklearn-feature-extraction-image-grid-to-graph"]], "sklearn.feature_extraction.image.img_to_graph": [[583, "sklearn-feature-extraction-image-img-to-graph"]], "sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[584, "sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "Examples using sklearn.feature_extraction.image.reconstruct_from_patches_2d": [[584, "examples-using-sklearn-feature-extraction-image-reconstruct-from-patches-2d"]], "sklearn.feature_extraction.text.CountVectorizer": [[585, "sklearn-feature-extraction-text-countvectorizer"]], "Examples using sklearn.feature_extraction.text.CountVectorizer": [[585, "examples-using-sklearn-feature-extraction-text-countvectorizer"]], "sklearn.feature_extraction.text.HashingVectorizer": [[586, "sklearn-feature-extraction-text-hashingvectorizer"]], "Examples using sklearn.feature_extraction.text.HashingVectorizer": [[586, "examples-using-sklearn-feature-extraction-text-hashingvectorizer"]], "sklearn.feature_extraction.text.TfidfTransformer": [[587, "sklearn-feature-extraction-text-tfidftransformer"]], "Examples using sklearn.feature_extraction.text.TfidfTransformer": [[587, "examples-using-sklearn-feature-extraction-text-tfidftransformer"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[588, "sklearn-feature-extraction-text-tfidfvectorizer"]], "Examples using sklearn.feature_extraction.text.TfidfVectorizer": [[588, "examples-using-sklearn-feature-extraction-text-tfidfvectorizer"]], "sklearn.feature_selection.GenericUnivariateSelect": [[589, "sklearn-feature-selection-genericunivariateselect"]], "sklearn.feature_selection.RFE": [[590, "sklearn-feature-selection-rfe"]], "Examples using sklearn.feature_selection.RFE": [[590, "examples-using-sklearn-feature-selection-rfe"]], "sklearn.feature_selection.RFECV": [[591, "sklearn-feature-selection-rfecv"]], "Examples using sklearn.feature_selection.RFECV": [[591, "examples-using-sklearn-feature-selection-rfecv"]], "sklearn.feature_selection.SelectFdr": [[592, "sklearn-feature-selection-selectfdr"]], "sklearn.feature_selection.SelectFpr": [[593, "sklearn-feature-selection-selectfpr"]], "sklearn.feature_selection.SelectFromModel": [[594, "sklearn-feature-selection-selectfrommodel"]], "Examples using sklearn.feature_selection.SelectFromModel": [[594, "examples-using-sklearn-feature-selection-selectfrommodel"]], "sklearn.feature_selection.SelectFwe": [[595, "sklearn-feature-selection-selectfwe"]], "sklearn.feature_selection.SelectKBest": [[596, "sklearn-feature-selection-selectkbest"]], "Examples using sklearn.feature_selection.SelectKBest": [[596, "examples-using-sklearn-feature-selection-selectkbest"]], "sklearn.feature_selection.SelectPercentile": [[597, "sklearn-feature-selection-selectpercentile"]], "Examples using sklearn.feature_selection.SelectPercentile": [[597, "examples-using-sklearn-feature-selection-selectpercentile"]], "sklearn.feature_selection.SelectorMixin": [[598, "sklearn-feature-selection-selectormixin"]], "sklearn.feature_selection.SequentialFeatureSelector": [[599, "sklearn-feature-selection-sequentialfeatureselector"]], "Examples using sklearn.feature_selection.SequentialFeatureSelector": [[599, "examples-using-sklearn-feature-selection-sequentialfeatureselector"]], "sklearn.feature_selection.VarianceThreshold": [[600, "sklearn-feature-selection-variancethreshold"]], "sklearn.feature_selection.chi2": [[601, "sklearn-feature-selection-chi2"]], "Examples using sklearn.feature_selection.chi2": [[601, "examples-using-sklearn-feature-selection-chi2"]], "sklearn.feature_selection.f_classif": [[602, "sklearn-feature-selection-f-classif"]], "Examples using sklearn.feature_selection.f_classif": [[602, "examples-using-sklearn-feature-selection-f-classif"]], "sklearn.feature_selection.f_regression": [[603, "sklearn-feature-selection-f-regression"]], "Examples using sklearn.feature_selection.f_regression": [[603, "examples-using-sklearn-feature-selection-f-regression"]], "sklearn.feature_selection.mutual_info_classif": [[604, "sklearn-feature-selection-mutual-info-classif"]], "Examples using sklearn.feature_selection.mutual_info_classif": [[604, "examples-using-sklearn-feature-selection-mutual-info-classif"]], "sklearn.feature_selection.mutual_info_regression": [[605, "sklearn-feature-selection-mutual-info-regression"]], "Examples using sklearn.feature_selection.mutual_info_regression": [[605, "examples-using-sklearn-feature-selection-mutual-info-regression"]], "sklearn.feature_selection.r_regression": [[606, "sklearn-feature-selection-r-regression"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[607, "sklearn-gaussian-process-gaussianprocessclassifier"]], "Examples using sklearn.gaussian_process.GaussianProcessClassifier": [[607, "examples-using-sklearn-gaussian-process-gaussianprocessclassifier"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[608, "sklearn-gaussian-process-gaussianprocessregressor"]], "Examples using sklearn.gaussian_process.GaussianProcessRegressor": [[608, "examples-using-sklearn-gaussian-process-gaussianprocessregressor"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[609, "sklearn-gaussian-process-kernels-compoundkernel"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[610, "sklearn-gaussian-process-kernels-constantkernel"]], "Examples using sklearn.gaussian_process.kernels.ConstantKernel": [[610, "examples-using-sklearn-gaussian-process-kernels-constantkernel"]], "sklearn.gaussian_process.kernels.DotProduct": [[611, "sklearn-gaussian-process-kernels-dotproduct"]], "Examples using sklearn.gaussian_process.kernels.DotProduct": [[611, "examples-using-sklearn-gaussian-process-kernels-dotproduct"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[612, "sklearn-gaussian-process-kernels-expsinesquared"]], "Examples using sklearn.gaussian_process.kernels.ExpSineSquared": [[612, "examples-using-sklearn-gaussian-process-kernels-expsinesquared"]], "sklearn.gaussian_process.kernels.Exponentiation": [[613, "sklearn-gaussian-process-kernels-exponentiation"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[614, "sklearn-gaussian-process-kernels-hyperparameter"]], "Examples using sklearn.gaussian_process.kernels.Hyperparameter": [[614, "examples-using-sklearn-gaussian-process-kernels-hyperparameter"]], "sklearn.gaussian_process.kernels.Kernel": [[615, "sklearn-gaussian-process-kernels-kernel"]], "Examples using sklearn.gaussian_process.kernels.Kernel": [[615, "examples-using-sklearn-gaussian-process-kernels-kernel"]], "sklearn.gaussian_process.kernels.Matern": [[616, "sklearn-gaussian-process-kernels-matern"]], "Examples using sklearn.gaussian_process.kernels.Matern": [[616, "examples-using-sklearn-gaussian-process-kernels-matern"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[617, "sklearn-gaussian-process-kernels-pairwisekernel"]], "sklearn.gaussian_process.kernels.Product": [[618, "sklearn-gaussian-process-kernels-product"]], "sklearn.gaussian_process.kernels.RBF": [[619, "sklearn-gaussian-process-kernels-rbf"]], "Examples using sklearn.gaussian_process.kernels.RBF": [[619, "examples-using-sklearn-gaussian-process-kernels-rbf"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[620, "sklearn-gaussian-process-kernels-rationalquadratic"]], "Examples using sklearn.gaussian_process.kernels.RationalQuadratic": [[620, "examples-using-sklearn-gaussian-process-kernels-rationalquadratic"]], "sklearn.gaussian_process.kernels.Sum": [[621, "sklearn-gaussian-process-kernels-sum"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[622, "sklearn-gaussian-process-kernels-whitekernel"]], "Examples using sklearn.gaussian_process.kernels.WhiteKernel": [[622, "examples-using-sklearn-gaussian-process-kernels-whitekernel"]], "sklearn.get_config": [[623, "sklearn-get-config"]], "sklearn.impute.IterativeImputer": [[624, "sklearn-impute-iterativeimputer"]], "Examples using sklearn.impute.IterativeImputer": [[624, "examples-using-sklearn-impute-iterativeimputer"]], "sklearn.impute.KNNImputer": [[625, "sklearn-impute-knnimputer"]], "Examples using sklearn.impute.KNNImputer": [[625, "examples-using-sklearn-impute-knnimputer"]], "sklearn.impute.MissingIndicator": [[626, "sklearn-impute-missingindicator"]], "sklearn.impute.SimpleImputer": [[627, "sklearn-impute-simpleimputer"]], "Examples using sklearn.impute.SimpleImputer": [[627, "examples-using-sklearn-impute-simpleimputer"]], "sklearn.inspection.DecisionBoundaryDisplay": [[628, "sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay": [[628, "examples-using-sklearn-inspection-decisionboundarydisplay"]], "Examples using sklearn.inspection.DecisionBoundaryDisplay.from_estimator": [[628, "examples-using-sklearn-inspection-decisionboundarydisplay-from-estimator"]], "sklearn.inspection.PartialDependenceDisplay": [[629, "sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay": [[629, "examples-using-sklearn-inspection-partialdependencedisplay"]], "Examples using sklearn.inspection.PartialDependenceDisplay.from_estimator": [[629, "examples-using-sklearn-inspection-partialdependencedisplay-from-estimator"]], "sklearn.inspection.partial_dependence": [[630, "sklearn-inspection-partial-dependence"]], "Examples using sklearn.inspection.partial_dependence": [[630, "examples-using-sklearn-inspection-partial-dependence"]], "sklearn.inspection.permutation_importance": [[631, "sklearn-inspection-permutation-importance"]], "Examples using sklearn.inspection.permutation_importance": [[631, "examples-using-sklearn-inspection-permutation-importance"]], "sklearn.isotonic.IsotonicRegression": [[632, "sklearn-isotonic-isotonicregression"]], "Examples using sklearn.isotonic.IsotonicRegression": [[632, "examples-using-sklearn-isotonic-isotonicregression"]], "sklearn.isotonic.check_increasing": [[633, "sklearn-isotonic-check-increasing"]], "sklearn.isotonic.isotonic_regression": [[634, "sklearn-isotonic-isotonic-regression"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[635, "sklearn-kernel-approximation-additivechi2sampler"]], "sklearn.kernel_approximation.Nystroem": [[636, "sklearn-kernel-approximation-nystroem"]], "Examples using sklearn.kernel_approximation.Nystroem": [[636, "examples-using-sklearn-kernel-approximation-nystroem"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[637, "sklearn-kernel-approximation-polynomialcountsketch"]], "Examples using sklearn.kernel_approximation.PolynomialCountSketch": [[637, "examples-using-sklearn-kernel-approximation-polynomialcountsketch"]], "sklearn.kernel_approximation.RBFSampler": [[638, "sklearn-kernel-approximation-rbfsampler"]], "Examples using sklearn.kernel_approximation.RBFSampler": [[638, "examples-using-sklearn-kernel-approximation-rbfsampler"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[639, "sklearn-kernel-approximation-skewedchi2sampler"]], "sklearn.kernel_ridge.KernelRidge": [[640, "sklearn-kernel-ridge-kernelridge"]], "Examples using sklearn.kernel_ridge.KernelRidge": [[640, "examples-using-sklearn-kernel-ridge-kernelridge"]], "sklearn.linear_model.ARDRegression": [[641, "sklearn-linear-model-ardregression"]], "Examples using sklearn.linear_model.ARDRegression": [[641, "examples-using-sklearn-linear-model-ardregression"]], "sklearn.linear_model.BayesianRidge": [[642, "sklearn-linear-model-bayesianridge"]], "Examples using sklearn.linear_model.BayesianRidge": [[642, "examples-using-sklearn-linear-model-bayesianridge"]], "sklearn.linear_model.ElasticNet": [[643, "sklearn-linear-model-elasticnet"]], "Examples using sklearn.linear_model.ElasticNet": [[643, "examples-using-sklearn-linear-model-elasticnet"]], "sklearn.linear_model.ElasticNetCV": [[644, "sklearn-linear-model-elasticnetcv"]], "Examples using sklearn.linear_model.ElasticNetCV": [[644, "examples-using-sklearn-linear-model-elasticnetcv"]], "sklearn.linear_model.GammaRegressor": [[645, "sklearn-linear-model-gammaregressor"]], "Examples using sklearn.linear_model.GammaRegressor": [[645, "examples-using-sklearn-linear-model-gammaregressor"]], "sklearn.linear_model.HuberRegressor": [[646, "sklearn-linear-model-huberregressor"]], "Examples using sklearn.linear_model.HuberRegressor": [[646, "examples-using-sklearn-linear-model-huberregressor"]], "sklearn.linear_model.Lars": [[647, "sklearn-linear-model-lars"]], "sklearn.linear_model.LarsCV": [[648, "sklearn-linear-model-larscv"]], "sklearn.linear_model.Lasso": [[649, "sklearn-linear-model-lasso"]], "Examples using sklearn.linear_model.Lasso": [[649, "examples-using-sklearn-linear-model-lasso"]], "sklearn.linear_model.LassoCV": [[650, "sklearn-linear-model-lassocv"]], "Examples using sklearn.linear_model.LassoCV": [[650, "examples-using-sklearn-linear-model-lassocv"]], "sklearn.linear_model.LassoLars": [[651, "sklearn-linear-model-lassolars"]], "sklearn.linear_model.LassoLarsCV": [[652, "sklearn-linear-model-lassolarscv"]], "Examples using sklearn.linear_model.LassoLarsCV": [[652, "examples-using-sklearn-linear-model-lassolarscv"]], "sklearn.linear_model.LassoLarsIC": [[653, "sklearn-linear-model-lassolarsic"]], "Examples using sklearn.linear_model.LassoLarsIC": [[653, "examples-using-sklearn-linear-model-lassolarsic"]], "sklearn.linear_model.LinearRegression": [[654, "sklearn-linear-model-linearregression"]], "Examples using sklearn.linear_model.LinearRegression": [[654, "examples-using-sklearn-linear-model-linearregression"]], "sklearn.linear_model.LogisticRegression": [[655, "sklearn-linear-model-logisticregression"]], "Examples using sklearn.linear_model.LogisticRegression": [[655, "examples-using-sklearn-linear-model-logisticregression"]], "sklearn.linear_model.LogisticRegressionCV": [[656, "sklearn-linear-model-logisticregressioncv"]], "Examples using sklearn.linear_model.LogisticRegressionCV": [[656, "examples-using-sklearn-linear-model-logisticregressioncv"]], "sklearn.linear_model.MultiTaskElasticNet": [[657, "sklearn-linear-model-multitaskelasticnet"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[658, "sklearn-linear-model-multitaskelasticnetcv"]], "sklearn.linear_model.MultiTaskLasso": [[659, "sklearn-linear-model-multitasklasso"]], "Examples using sklearn.linear_model.MultiTaskLasso": [[659, "examples-using-sklearn-linear-model-multitasklasso"]], "sklearn.linear_model.MultiTaskLassoCV": [[660, "sklearn-linear-model-multitasklassocv"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[661, "sklearn-linear-model-orthogonalmatchingpursuit"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuit": [[661, "examples-using-sklearn-linear-model-orthogonalmatchingpursuit"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[662, "sklearn-linear-model-orthogonalmatchingpursuitcv"]], "Examples using sklearn.linear_model.OrthogonalMatchingPursuitCV": [[662, "examples-using-sklearn-linear-model-orthogonalmatchingpursuitcv"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[663, "sklearn-linear-model-passiveaggressiveclassifier"]], "Examples using sklearn.linear_model.PassiveAggressiveClassifier": [[663, "examples-using-sklearn-linear-model-passiveaggressiveclassifier"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[664, "sklearn-linear-model-passiveaggressiveregressor"]], "sklearn.linear_model.Perceptron": [[665, "sklearn-linear-model-perceptron"]], "Examples using sklearn.linear_model.Perceptron": [[665, "examples-using-sklearn-linear-model-perceptron"]], "sklearn.linear_model.PoissonRegressor": [[666, "sklearn-linear-model-poissonregressor"]], "Examples using sklearn.linear_model.PoissonRegressor": [[666, "examples-using-sklearn-linear-model-poissonregressor"]], "sklearn.linear_model.QuantileRegressor": [[667, "sklearn-linear-model-quantileregressor"]], "Examples using sklearn.linear_model.QuantileRegressor": [[667, "examples-using-sklearn-linear-model-quantileregressor"]], "sklearn.linear_model.RANSACRegressor": [[668, "sklearn-linear-model-ransacregressor"]], "Examples using sklearn.linear_model.RANSACRegressor": [[668, "examples-using-sklearn-linear-model-ransacregressor"]], "sklearn.linear_model.Ridge": [[669, "sklearn-linear-model-ridge"]], "Examples using sklearn.linear_model.Ridge": [[669, "examples-using-sklearn-linear-model-ridge"]], "sklearn.linear_model.RidgeCV": [[670, "sklearn-linear-model-ridgecv"]], "Examples using sklearn.linear_model.RidgeCV": [[670, "examples-using-sklearn-linear-model-ridgecv"]], "sklearn.linear_model.RidgeClassifier": [[671, "sklearn-linear-model-ridgeclassifier"]], "Examples using sklearn.linear_model.RidgeClassifier": [[671, "examples-using-sklearn-linear-model-ridgeclassifier"]], "sklearn.linear_model.RidgeClassifierCV": [[672, "sklearn-linear-model-ridgeclassifiercv"]], "sklearn.linear_model.SGDClassifier": [[673, "sklearn-linear-model-sgdclassifier"]], "Examples using sklearn.linear_model.SGDClassifier": [[673, "examples-using-sklearn-linear-model-sgdclassifier"]], "sklearn.linear_model.SGDOneClassSVM": [[674, "sklearn-linear-model-sgdoneclasssvm"]], "Examples using sklearn.linear_model.SGDOneClassSVM": [[674, "examples-using-sklearn-linear-model-sgdoneclasssvm"]], "sklearn.linear_model.SGDRegressor": [[675, "sklearn-linear-model-sgdregressor"]], "Examples using sklearn.linear_model.SGDRegressor": [[675, "examples-using-sklearn-linear-model-sgdregressor"]], "sklearn.linear_model.TheilSenRegressor": [[676, "sklearn-linear-model-theilsenregressor"]], "Examples using sklearn.linear_model.TheilSenRegressor": [[676, "examples-using-sklearn-linear-model-theilsenregressor"]], "sklearn.linear_model.TweedieRegressor": [[677, "sklearn-linear-model-tweedieregressor"]], "Examples using sklearn.linear_model.TweedieRegressor": [[677, "examples-using-sklearn-linear-model-tweedieregressor"]], "sklearn.linear_model.enet_path": [[678, "sklearn-linear-model-enet-path"]], "Examples using sklearn.linear_model.enet_path": [[678, "examples-using-sklearn-linear-model-enet-path"]], "sklearn.linear_model.lars_path": [[679, "sklearn-linear-model-lars-path"]], "Examples using sklearn.linear_model.lars_path": [[679, "examples-using-sklearn-linear-model-lars-path"]], "sklearn.linear_model.lars_path_gram": [[680, "sklearn-linear-model-lars-path-gram"]], "sklearn.linear_model.lasso_path": [[681, "sklearn-linear-model-lasso-path"]], "Examples using sklearn.linear_model.lasso_path": [[681, "examples-using-sklearn-linear-model-lasso-path"]], "sklearn.linear_model.orthogonal_mp": [[682, "sklearn-linear-model-orthogonal-mp"]], "sklearn.linear_model.orthogonal_mp_gram": [[683, "sklearn-linear-model-orthogonal-mp-gram"]], "sklearn.linear_model.ridge_regression": [[684, "sklearn-linear-model-ridge-regression"]], "sklearn.manifold.Isomap": [[685, "sklearn-manifold-isomap"]], "Examples using sklearn.manifold.Isomap": [[685, "examples-using-sklearn-manifold-isomap"]], "sklearn.manifold.LocallyLinearEmbedding": [[686, "sklearn-manifold-locallylinearembedding"]], "Examples using sklearn.manifold.LocallyLinearEmbedding": [[686, "examples-using-sklearn-manifold-locallylinearembedding"]], "sklearn.manifold.MDS": [[687, "sklearn-manifold-mds"]], "Examples using sklearn.manifold.MDS": [[687, "examples-using-sklearn-manifold-mds"]], "sklearn.manifold.SpectralEmbedding": [[688, "sklearn-manifold-spectralembedding"]], "Examples using sklearn.manifold.SpectralEmbedding": [[688, "examples-using-sklearn-manifold-spectralembedding"]], "sklearn.manifold.TSNE": [[689, "sklearn-manifold-tsne"]], "Examples using sklearn.manifold.TSNE": [[689, "examples-using-sklearn-manifold-tsne"]], "sklearn.manifold.locally_linear_embedding": [[690, "sklearn-manifold-locally-linear-embedding"]], "Examples using sklearn.manifold.locally_linear_embedding": [[690, "examples-using-sklearn-manifold-locally-linear-embedding"]], "sklearn.manifold.smacof": [[691, "sklearn-manifold-smacof"]], "sklearn.manifold.spectral_embedding": [[692, "sklearn-manifold-spectral-embedding"]], "sklearn.manifold.trustworthiness": [[693, "sklearn-manifold-trustworthiness"]], "sklearn.metrics.ConfusionMatrixDisplay": [[694, "sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay": [[694, "examples-using-sklearn-metrics-confusionmatrixdisplay"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_estimator": [[694, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-estimator"]], "Examples using sklearn.metrics.ConfusionMatrixDisplay.from_predictions": [[694, "examples-using-sklearn-metrics-confusionmatrixdisplay-from-predictions"]], "sklearn.metrics.DetCurveDisplay": [[695, "sklearn-metrics-detcurvedisplay"]], "Examples using sklearn.metrics.DetCurveDisplay.from_estimator": [[695, "examples-using-sklearn-metrics-detcurvedisplay-from-estimator"]], "sklearn.metrics.DistanceMetric": [[696, "sklearn-metrics-distancemetric"]], "sklearn.metrics.PrecisionRecallDisplay": [[697, "sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay": [[697, "examples-using-sklearn-metrics-precisionrecalldisplay"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_estimator": [[697, "examples-using-sklearn-metrics-precisionrecalldisplay-from-estimator"]], "Examples using sklearn.metrics.PrecisionRecallDisplay.from_predictions": [[697, "examples-using-sklearn-metrics-precisionrecalldisplay-from-predictions"]], "sklearn.metrics.PredictionErrorDisplay": [[698, "sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay": [[698, "examples-using-sklearn-metrics-predictionerrordisplay"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_estimator": [[698, "examples-using-sklearn-metrics-predictionerrordisplay-from-estimator"]], "Examples using sklearn.metrics.PredictionErrorDisplay.from_predictions": [[698, "examples-using-sklearn-metrics-predictionerrordisplay-from-predictions"]], "sklearn.metrics.RocCurveDisplay": [[699, "sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay": [[699, "examples-using-sklearn-metrics-roccurvedisplay"]], "Examples using sklearn.metrics.RocCurveDisplay.from_estimator": [[699, "examples-using-sklearn-metrics-roccurvedisplay-from-estimator"]], "Examples using sklearn.metrics.RocCurveDisplay.from_predictions": [[699, "examples-using-sklearn-metrics-roccurvedisplay-from-predictions"]], "sklearn.metrics.accuracy_score": [[700, "sklearn-metrics-accuracy-score"]], "Examples using sklearn.metrics.accuracy_score": [[700, "examples-using-sklearn-metrics-accuracy-score"]], "sklearn.metrics.adjusted_mutual_info_score": [[701, "sklearn-metrics-adjusted-mutual-info-score"]], "Examples using sklearn.metrics.adjusted_mutual_info_score": [[701, "examples-using-sklearn-metrics-adjusted-mutual-info-score"]], "sklearn.metrics.adjusted_rand_score": [[702, "sklearn-metrics-adjusted-rand-score"]], "Examples using sklearn.metrics.adjusted_rand_score": [[702, "examples-using-sklearn-metrics-adjusted-rand-score"]], "sklearn.metrics.auc": [[703, "sklearn-metrics-auc"]], "Examples using sklearn.metrics.auc": [[703, "examples-using-sklearn-metrics-auc"]], "sklearn.metrics.average_precision_score": [[704, "sklearn-metrics-average-precision-score"]], "Examples using sklearn.metrics.average_precision_score": [[704, "examples-using-sklearn-metrics-average-precision-score"]], "sklearn.metrics.balanced_accuracy_score": [[705, "sklearn-metrics-balanced-accuracy-score"]], "sklearn.metrics.brier_score_loss": [[706, "sklearn-metrics-brier-score-loss"]], "Examples using sklearn.metrics.brier_score_loss": [[706, "examples-using-sklearn-metrics-brier-score-loss"]], "sklearn.metrics.calinski_harabasz_score": [[707, "sklearn-metrics-calinski-harabasz-score"]], "sklearn.metrics.check_scoring": [[708, "sklearn-metrics-check-scoring"]], "sklearn.metrics.class_likelihood_ratios": [[709, "sklearn-metrics-class-likelihood-ratios"]], "Examples using sklearn.metrics.class_likelihood_ratios": [[709, "examples-using-sklearn-metrics-class-likelihood-ratios"]], "sklearn.metrics.classification_report": [[710, "sklearn-metrics-classification-report"]], "Examples using sklearn.metrics.classification_report": [[710, "examples-using-sklearn-metrics-classification-report"]], "sklearn.metrics.cluster.contingency_matrix": [[711, "sklearn-metrics-cluster-contingency-matrix"]], "sklearn.metrics.cluster.pair_confusion_matrix": [[712, "sklearn-metrics-cluster-pair-confusion-matrix"]], "sklearn.metrics.cohen_kappa_score": [[713, "sklearn-metrics-cohen-kappa-score"]], "sklearn.metrics.completeness_score": [[714, "sklearn-metrics-completeness-score"]], "Examples using sklearn.metrics.completeness_score": [[714, "examples-using-sklearn-metrics-completeness-score"]], "sklearn.metrics.confusion_matrix": [[715, "sklearn-metrics-confusion-matrix"]], "Examples using sklearn.metrics.confusion_matrix": [[715, "examples-using-sklearn-metrics-confusion-matrix"]], "sklearn.metrics.consensus_score": [[716, "sklearn-metrics-consensus-score"]], "Examples using sklearn.metrics.consensus_score": [[716, "examples-using-sklearn-metrics-consensus-score"]], "sklearn.metrics.coverage_error": [[717, "sklearn-metrics-coverage-error"]], "sklearn.metrics.d2_absolute_error_score": [[718, "sklearn-metrics-d2-absolute-error-score"]], "sklearn.metrics.d2_pinball_score": [[719, "sklearn-metrics-d2-pinball-score"]], "sklearn.metrics.d2_tweedie_score": [[720, "sklearn-metrics-d2-tweedie-score"]], "sklearn.metrics.davies_bouldin_score": [[721, "sklearn-metrics-davies-bouldin-score"]], "sklearn.metrics.dcg_score": [[722, "sklearn-metrics-dcg-score"]], "sklearn.metrics.det_curve": [[723, "sklearn-metrics-det-curve"]], "Examples using sklearn.metrics.det_curve": [[723, "examples-using-sklearn-metrics-det-curve"]], "sklearn.metrics.explained_variance_score": [[724, "sklearn-metrics-explained-variance-score"]], "sklearn.metrics.f1_score": [[725, "sklearn-metrics-f1-score"]], "Examples using sklearn.metrics.f1_score": [[725, "examples-using-sklearn-metrics-f1-score"]], "sklearn.metrics.fbeta_score": [[726, "sklearn-metrics-fbeta-score"]], "sklearn.metrics.fowlkes_mallows_score": [[727, "sklearn-metrics-fowlkes-mallows-score"]], "sklearn.metrics.get_scorer": [[728, "sklearn-metrics-get-scorer"]], "sklearn.metrics.get_scorer_names": [[729, "sklearn-metrics-get-scorer-names"]], "sklearn.metrics.hamming_loss": [[730, "sklearn-metrics-hamming-loss"]], "Examples using sklearn.metrics.hamming_loss": [[730, "examples-using-sklearn-metrics-hamming-loss"]], "sklearn.metrics.hinge_loss": [[731, "sklearn-metrics-hinge-loss"]], "Examples using sklearn.metrics.hinge_loss": [[731, "examples-using-sklearn-metrics-hinge-loss"]], "sklearn.metrics.homogeneity_completeness_v_measure": [[732, "sklearn-metrics-homogeneity-completeness-v-measure"]], "sklearn.metrics.homogeneity_score": [[733, "sklearn-metrics-homogeneity-score"]], "Examples using sklearn.metrics.homogeneity_score": [[733, "examples-using-sklearn-metrics-homogeneity-score"]], "sklearn.metrics.jaccard_score": [[734, "sklearn-metrics-jaccard-score"]], "Examples using sklearn.metrics.jaccard_score": [[734, "examples-using-sklearn-metrics-jaccard-score"]], "sklearn.metrics.label_ranking_average_precision_score": [[735, "sklearn-metrics-label-ranking-average-precision-score"]], "sklearn.metrics.label_ranking_loss": [[736, "sklearn-metrics-label-ranking-loss"]], "sklearn.metrics.log_loss": [[737, "sklearn-metrics-log-loss"]], "Examples using sklearn.metrics.log_loss": [[737, "examples-using-sklearn-metrics-log-loss"]], "sklearn.metrics.make_scorer": [[738, "sklearn-metrics-make-scorer"]], "Examples using sklearn.metrics.make_scorer": [[738, "examples-using-sklearn-metrics-make-scorer"]], "sklearn.metrics.matthews_corrcoef": [[739, "sklearn-metrics-matthews-corrcoef"]], "sklearn.metrics.max_error": [[740, "sklearn-metrics-max-error"]], "sklearn.metrics.mean_absolute_error": [[741, "sklearn-metrics-mean-absolute-error"]], "Examples using sklearn.metrics.mean_absolute_error": [[741, "examples-using-sklearn-metrics-mean-absolute-error"]], "sklearn.metrics.mean_absolute_percentage_error": [[742, "sklearn-metrics-mean-absolute-percentage-error"]], "Examples using sklearn.metrics.mean_absolute_percentage_error": [[742, "examples-using-sklearn-metrics-mean-absolute-percentage-error"]], "sklearn.metrics.mean_gamma_deviance": [[743, "sklearn-metrics-mean-gamma-deviance"]], "sklearn.metrics.mean_pinball_loss": [[744, "sklearn-metrics-mean-pinball-loss"]], "Examples using sklearn.metrics.mean_pinball_loss": [[744, "examples-using-sklearn-metrics-mean-pinball-loss"]], "sklearn.metrics.mean_poisson_deviance": [[745, "sklearn-metrics-mean-poisson-deviance"]], "Examples using sklearn.metrics.mean_poisson_deviance": [[745, "examples-using-sklearn-metrics-mean-poisson-deviance"]], "sklearn.metrics.mean_squared_error": [[746, "sklearn-metrics-mean-squared-error"]], "Examples using sklearn.metrics.mean_squared_error": [[746, "examples-using-sklearn-metrics-mean-squared-error"]], "sklearn.metrics.mean_squared_log_error": [[747, "sklearn-metrics-mean-squared-log-error"]], "sklearn.metrics.mean_tweedie_deviance": [[748, "sklearn-metrics-mean-tweedie-deviance"]], "Examples using sklearn.metrics.mean_tweedie_deviance": [[748, "examples-using-sklearn-metrics-mean-tweedie-deviance"]], "sklearn.metrics.median_absolute_error": [[749, "sklearn-metrics-median-absolute-error"]], "Examples using sklearn.metrics.median_absolute_error": [[749, "examples-using-sklearn-metrics-median-absolute-error"]], "sklearn.metrics.multilabel_confusion_matrix": [[750, "sklearn-metrics-multilabel-confusion-matrix"]], "sklearn.metrics.mutual_info_score": [[751, "sklearn-metrics-mutual-info-score"]], "Examples using sklearn.metrics.mutual_info_score": [[751, "examples-using-sklearn-metrics-mutual-info-score"]], "sklearn.metrics.ndcg_score": [[752, "sklearn-metrics-ndcg-score"]], "sklearn.metrics.normalized_mutual_info_score": [[753, "sklearn-metrics-normalized-mutual-info-score"]], "Examples using sklearn.metrics.normalized_mutual_info_score": [[753, "examples-using-sklearn-metrics-normalized-mutual-info-score"]], "sklearn.metrics.pairwise.additive_chi2_kernel": [[754, "sklearn-metrics-pairwise-additive-chi2-kernel"]], "sklearn.metrics.pairwise.chi2_kernel": [[755, "sklearn-metrics-pairwise-chi2-kernel"]], "sklearn.metrics.pairwise.cosine_distances": [[756, "sklearn-metrics-pairwise-cosine-distances"]], "sklearn.metrics.pairwise.cosine_similarity": [[757, "sklearn-metrics-pairwise-cosine-similarity"]], "Examples using sklearn.metrics.pairwise.cosine_similarity": [[757, "examples-using-sklearn-metrics-pairwise-cosine-similarity"]], "sklearn.metrics.pairwise.distance_metrics": [[758, "sklearn-metrics-pairwise-distance-metrics"]], "sklearn.metrics.pairwise.euclidean_distances": [[759, "sklearn-metrics-pairwise-euclidean-distances"]], "sklearn.metrics.pairwise.haversine_distances": [[760, "sklearn-metrics-pairwise-haversine-distances"]], "sklearn.metrics.pairwise.kernel_metrics": [[761, "sklearn-metrics-pairwise-kernel-metrics"]], "sklearn.metrics.pairwise.laplacian_kernel": [[762, "sklearn-metrics-pairwise-laplacian-kernel"]], "sklearn.metrics.pairwise.linear_kernel": [[763, "sklearn-metrics-pairwise-linear-kernel"]], "sklearn.metrics.pairwise.manhattan_distances": [[764, "sklearn-metrics-pairwise-manhattan-distances"]], "sklearn.metrics.pairwise.nan_euclidean_distances": [[765, "sklearn-metrics-pairwise-nan-euclidean-distances"]], "sklearn.metrics.pairwise.paired_cosine_distances": [[766, "sklearn-metrics-pairwise-paired-cosine-distances"]], "sklearn.metrics.pairwise.paired_distances": [[767, "sklearn-metrics-pairwise-paired-distances"]], "sklearn.metrics.pairwise.paired_euclidean_distances": [[768, "sklearn-metrics-pairwise-paired-euclidean-distances"]], "sklearn.metrics.pairwise.paired_manhattan_distances": [[769, "sklearn-metrics-pairwise-paired-manhattan-distances"]], "sklearn.metrics.pairwise.pairwise_kernels": [[770, "sklearn-metrics-pairwise-pairwise-kernels"]], "sklearn.metrics.pairwise.polynomial_kernel": [[771, "sklearn-metrics-pairwise-polynomial-kernel"]], "sklearn.metrics.pairwise.rbf_kernel": [[772, "sklearn-metrics-pairwise-rbf-kernel"]], "sklearn.metrics.pairwise.sigmoid_kernel": [[773, "sklearn-metrics-pairwise-sigmoid-kernel"]], "sklearn.metrics.pairwise_distances": [[774, "sklearn-metrics-pairwise-distances"]], "Examples using sklearn.metrics.pairwise_distances": [[774, "examples-using-sklearn-metrics-pairwise-distances"]], "sklearn.metrics.pairwise_distances_argmin": [[775, "sklearn-metrics-pairwise-distances-argmin"]], "Examples using sklearn.metrics.pairwise_distances_argmin": [[775, "examples-using-sklearn-metrics-pairwise-distances-argmin"]], "sklearn.metrics.pairwise_distances_argmin_min": [[776, "sklearn-metrics-pairwise-distances-argmin-min"]], "sklearn.metrics.pairwise_distances_chunked": [[777, "sklearn-metrics-pairwise-distances-chunked"]], "sklearn.metrics.precision_recall_curve": [[778, "sklearn-metrics-precision-recall-curve"]], "Examples using sklearn.metrics.precision_recall_curve": [[778, "examples-using-sklearn-metrics-precision-recall-curve"]], "sklearn.metrics.precision_recall_fscore_support": [[779, "sklearn-metrics-precision-recall-fscore-support"]], "sklearn.metrics.precision_score": [[780, "sklearn-metrics-precision-score"]], "Examples using sklearn.metrics.precision_score": [[780, "examples-using-sklearn-metrics-precision-score"]], "sklearn.metrics.r2_score": [[781, "sklearn-metrics-r2-score"]], "Examples using sklearn.metrics.r2_score": [[781, "examples-using-sklearn-metrics-r2-score"]], "sklearn.metrics.rand_score": [[782, "sklearn-metrics-rand-score"]], "Examples using sklearn.metrics.rand_score": [[782, "examples-using-sklearn-metrics-rand-score"]], "sklearn.metrics.recall_score": [[783, "sklearn-metrics-recall-score"]], "Examples using sklearn.metrics.recall_score": [[783, "examples-using-sklearn-metrics-recall-score"]], "sklearn.metrics.roc_auc_score": [[784, "sklearn-metrics-roc-auc-score"]], "Examples using sklearn.metrics.roc_auc_score": [[784, "examples-using-sklearn-metrics-roc-auc-score"]], "sklearn.metrics.roc_curve": [[785, "sklearn-metrics-roc-curve"]], "Examples using sklearn.metrics.roc_curve": [[785, "examples-using-sklearn-metrics-roc-curve"]], "sklearn.metrics.root_mean_squared_error": [[786, "sklearn-metrics-root-mean-squared-error"]], "Examples using sklearn.metrics.root_mean_squared_error": [[786, "examples-using-sklearn-metrics-root-mean-squared-error"]], "sklearn.metrics.root_mean_squared_log_error": [[787, "sklearn-metrics-root-mean-squared-log-error"]], "sklearn.metrics.silhouette_samples": [[788, "sklearn-metrics-silhouette-samples"]], "Examples using sklearn.metrics.silhouette_samples": [[788, "examples-using-sklearn-metrics-silhouette-samples"]], "sklearn.metrics.silhouette_score": [[789, "sklearn-metrics-silhouette-score"]], "Examples using sklearn.metrics.silhouette_score": [[789, "examples-using-sklearn-metrics-silhouette-score"]], "sklearn.metrics.top_k_accuracy_score": [[790, "sklearn-metrics-top-k-accuracy-score"]], "sklearn.metrics.v_measure_score": [[791, "sklearn-metrics-v-measure-score"]], "Examples using sklearn.metrics.v_measure_score": [[791, "examples-using-sklearn-metrics-v-measure-score"]], "sklearn.metrics.zero_one_loss": [[792, "sklearn-metrics-zero-one-loss"]], "sklearn.mixture.BayesianGaussianMixture": [[793, "sklearn-mixture-bayesiangaussianmixture"]], "Examples using sklearn.mixture.BayesianGaussianMixture": [[793, "examples-using-sklearn-mixture-bayesiangaussianmixture"]], "sklearn.mixture.GaussianMixture": [[794, "sklearn-mixture-gaussianmixture"]], "Examples using sklearn.mixture.GaussianMixture": [[794, "examples-using-sklearn-mixture-gaussianmixture"]], "sklearn.model_selection.GridSearchCV": [[795, "sklearn-model-selection-gridsearchcv"]], "Examples using sklearn.model_selection.GridSearchCV": [[795, "examples-using-sklearn-model-selection-gridsearchcv"]], "sklearn.model_selection.GroupKFold": [[796, "sklearn-model-selection-groupkfold"]], "Examples using sklearn.model_selection.GroupKFold": [[796, "examples-using-sklearn-model-selection-groupkfold"]], "sklearn.model_selection.GroupShuffleSplit": [[797, "sklearn-model-selection-groupshufflesplit"]], "Examples using sklearn.model_selection.GroupShuffleSplit": [[797, "examples-using-sklearn-model-selection-groupshufflesplit"]], "sklearn.model_selection.HalvingGridSearchCV": [[798, "sklearn-model-selection-halvinggridsearchcv"]], "Examples using sklearn.model_selection.HalvingGridSearchCV": [[798, "examples-using-sklearn-model-selection-halvinggridsearchcv"]], "sklearn.model_selection.HalvingRandomSearchCV": [[799, "sklearn-model-selection-halvingrandomsearchcv"]], "Examples using sklearn.model_selection.HalvingRandomSearchCV": [[799, "examples-using-sklearn-model-selection-halvingrandomsearchcv"]], "sklearn.model_selection.KFold": [[800, "sklearn-model-selection-kfold"]], "Examples using sklearn.model_selection.KFold": [[800, "examples-using-sklearn-model-selection-kfold"]], "sklearn.model_selection.LearningCurveDisplay": [[801, "sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay": [[801, "examples-using-sklearn-model-selection-learningcurvedisplay"]], "Examples using sklearn.model_selection.LearningCurveDisplay.from_estimator": [[801, "examples-using-sklearn-model-selection-learningcurvedisplay-from-estimator"]], "sklearn.model_selection.LeaveOneGroupOut": [[802, "sklearn-model-selection-leaveonegroupout"]], "sklearn.model_selection.LeaveOneOut": [[803, "sklearn-model-selection-leaveoneout"]], "sklearn.model_selection.LeavePGroupsOut": [[804, "sklearn-model-selection-leavepgroupsout"]], "sklearn.model_selection.LeavePOut": [[805, "sklearn-model-selection-leavepout"]], "sklearn.model_selection.ParameterGrid": [[806, "sklearn-model-selection-parametergrid"]], "sklearn.model_selection.ParameterSampler": [[807, "sklearn-model-selection-parametersampler"]], "sklearn.model_selection.PredefinedSplit": [[808, "sklearn-model-selection-predefinedsplit"]], "sklearn.model_selection.RandomizedSearchCV": [[809, "sklearn-model-selection-randomizedsearchcv"]], "Examples using sklearn.model_selection.RandomizedSearchCV": [[809, "examples-using-sklearn-model-selection-randomizedsearchcv"]], "sklearn.model_selection.RepeatedKFold": [[810, "sklearn-model-selection-repeatedkfold"]], "Examples using sklearn.model_selection.RepeatedKFold": [[810, "examples-using-sklearn-model-selection-repeatedkfold"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[811, "sklearn-model-selection-repeatedstratifiedkfold"]], "Examples using sklearn.model_selection.RepeatedStratifiedKFold": [[811, "examples-using-sklearn-model-selection-repeatedstratifiedkfold"]], "sklearn.model_selection.ShuffleSplit": [[812, "sklearn-model-selection-shufflesplit"]], "Examples using sklearn.model_selection.ShuffleSplit": [[812, "examples-using-sklearn-model-selection-shufflesplit"]], "sklearn.model_selection.StratifiedGroupKFold": [[813, "sklearn-model-selection-stratifiedgroupkfold"]], "Examples using sklearn.model_selection.StratifiedGroupKFold": [[813, "examples-using-sklearn-model-selection-stratifiedgroupkfold"]], "sklearn.model_selection.StratifiedKFold": [[814, "sklearn-model-selection-stratifiedkfold"]], "Examples using sklearn.model_selection.StratifiedKFold": [[814, "examples-using-sklearn-model-selection-stratifiedkfold"]], "sklearn.model_selection.StratifiedShuffleSplit": [[815, "sklearn-model-selection-stratifiedshufflesplit"]], "Examples using sklearn.model_selection.StratifiedShuffleSplit": [[815, "examples-using-sklearn-model-selection-stratifiedshufflesplit"]], "sklearn.model_selection.TimeSeriesSplit": [[816, "sklearn-model-selection-timeseriessplit"]], "Examples using sklearn.model_selection.TimeSeriesSplit": [[816, "examples-using-sklearn-model-selection-timeseriessplit"]], "sklearn.model_selection.ValidationCurveDisplay": [[817, "sklearn-model-selection-validationcurvedisplay"]], "Examples using sklearn.model_selection.ValidationCurveDisplay.from_estimator": [[817, "examples-using-sklearn-model-selection-validationcurvedisplay-from-estimator"]], "sklearn.model_selection.check_cv": [[818, "sklearn-model-selection-check-cv"]], "sklearn.model_selection.cross_val_predict": [[819, "sklearn-model-selection-cross-val-predict"]], "Examples using sklearn.model_selection.cross_val_predict": [[819, "examples-using-sklearn-model-selection-cross-val-predict"]], "sklearn.model_selection.cross_val_score": [[820, "sklearn-model-selection-cross-val-score"]], "Examples using sklearn.model_selection.cross_val_score": [[820, "examples-using-sklearn-model-selection-cross-val-score"]], "sklearn.model_selection.cross_validate": [[821, "sklearn-model-selection-cross-validate"]], "Examples using sklearn.model_selection.cross_validate": [[821, "examples-using-sklearn-model-selection-cross-validate"]], "sklearn.model_selection.learning_curve": [[822, "sklearn-model-selection-learning-curve"]], "Examples using sklearn.model_selection.learning_curve": [[822, "examples-using-sklearn-model-selection-learning-curve"]], "sklearn.model_selection.permutation_test_score": [[823, "sklearn-model-selection-permutation-test-score"]], "Examples using sklearn.model_selection.permutation_test_score": [[823, "examples-using-sklearn-model-selection-permutation-test-score"]], "sklearn.model_selection.train_test_split": [[824, "sklearn-model-selection-train-test-split"]], "Examples using sklearn.model_selection.train_test_split": [[824, "examples-using-sklearn-model-selection-train-test-split"]], "sklearn.model_selection.validation_curve": [[825, "sklearn-model-selection-validation-curve"]], "Examples using sklearn.model_selection.validation_curve": [[825, "examples-using-sklearn-model-selection-validation-curve"]], "sklearn.multiclass.OneVsOneClassifier": [[826, "sklearn-multiclass-onevsoneclassifier"]], "Examples using sklearn.multiclass.OneVsOneClassifier": [[826, "examples-using-sklearn-multiclass-onevsoneclassifier"]], "sklearn.multiclass.OneVsRestClassifier": [[827, "sklearn-multiclass-onevsrestclassifier"]], "Examples using sklearn.multiclass.OneVsRestClassifier": [[827, "examples-using-sklearn-multiclass-onevsrestclassifier"]], "sklearn.multiclass.OutputCodeClassifier": [[828, "sklearn-multiclass-outputcodeclassifier"]], "Examples using sklearn.multiclass.OutputCodeClassifier": [[828, "examples-using-sklearn-multiclass-outputcodeclassifier"]], "sklearn.multioutput.ClassifierChain": [[829, "sklearn-multioutput-classifierchain"]], "Examples using sklearn.multioutput.ClassifierChain": [[829, "examples-using-sklearn-multioutput-classifierchain"]], "sklearn.multioutput.MultiOutputClassifier": [[830, "sklearn-multioutput-multioutputclassifier"]], "sklearn.multioutput.MultiOutputRegressor": [[831, "sklearn-multioutput-multioutputregressor"]], "Examples using sklearn.multioutput.MultiOutputRegressor": [[831, "examples-using-sklearn-multioutput-multioutputregressor"]], "sklearn.multioutput.RegressorChain": [[832, "sklearn-multioutput-regressorchain"]], "sklearn.naive_bayes.BernoulliNB": [[833, "sklearn-naive-bayes-bernoullinb"]], "Examples using sklearn.naive_bayes.BernoulliNB": [[833, "examples-using-sklearn-naive-bayes-bernoullinb"]], "sklearn.naive_bayes.CategoricalNB": [[834, "sklearn-naive-bayes-categoricalnb"]], "sklearn.naive_bayes.ComplementNB": [[835, "sklearn-naive-bayes-complementnb"]], "Examples using sklearn.naive_bayes.ComplementNB": [[835, "examples-using-sklearn-naive-bayes-complementnb"]], "sklearn.naive_bayes.GaussianNB": [[836, "sklearn-naive-bayes-gaussiannb"]], "Examples using sklearn.naive_bayes.GaussianNB": [[836, "examples-using-sklearn-naive-bayes-gaussiannb"]], "sklearn.naive_bayes.MultinomialNB": [[837, "sklearn-naive-bayes-multinomialnb"]], "Examples using sklearn.naive_bayes.MultinomialNB": [[837, "examples-using-sklearn-naive-bayes-multinomialnb"]], "sklearn.neighbors.BallTree": [[838, "sklearn-neighbors-balltree"]], "sklearn.neighbors.KDTree": [[839, "sklearn-neighbors-kdtree"]], "sklearn.neighbors.KNeighborsClassifier": [[840, "sklearn-neighbors-kneighborsclassifier"]], "Examples using sklearn.neighbors.KNeighborsClassifier": [[840, "examples-using-sklearn-neighbors-kneighborsclassifier"]], "sklearn.neighbors.KNeighborsRegressor": [[841, "sklearn-neighbors-kneighborsregressor"]], "Examples using sklearn.neighbors.KNeighborsRegressor": [[841, "examples-using-sklearn-neighbors-kneighborsregressor"]], "sklearn.neighbors.KNeighborsTransformer": [[842, "sklearn-neighbors-kneighborstransformer"]], "Examples using sklearn.neighbors.KNeighborsTransformer": [[842, "examples-using-sklearn-neighbors-kneighborstransformer"]], "sklearn.neighbors.KernelDensity": [[843, "sklearn-neighbors-kerneldensity"]], "Examples using sklearn.neighbors.KernelDensity": [[843, "examples-using-sklearn-neighbors-kerneldensity"]], "sklearn.neighbors.LocalOutlierFactor": [[844, "sklearn-neighbors-localoutlierfactor"]], "Examples using sklearn.neighbors.LocalOutlierFactor": [[844, "examples-using-sklearn-neighbors-localoutlierfactor"]], "sklearn.neighbors.NearestCentroid": [[845, "sklearn-neighbors-nearestcentroid"]], "Examples using sklearn.neighbors.NearestCentroid": [[845, "examples-using-sklearn-neighbors-nearestcentroid"]], "sklearn.neighbors.NearestNeighbors": [[846, "sklearn-neighbors-nearestneighbors"]], "Examples using sklearn.neighbors.NearestNeighbors": [[846, "examples-using-sklearn-neighbors-nearestneighbors"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[847, "sklearn-neighbors-neighborhoodcomponentsanalysis"]], "Examples using sklearn.neighbors.NeighborhoodComponentsAnalysis": [[847, "examples-using-sklearn-neighbors-neighborhoodcomponentsanalysis"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[848, "sklearn-neighbors-radiusneighborsclassifier"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[849, "sklearn-neighbors-radiusneighborsregressor"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[850, "sklearn-neighbors-radiusneighborstransformer"]], "sklearn.neighbors.kneighbors_graph": [[851, "sklearn-neighbors-kneighbors-graph"]], "Examples using sklearn.neighbors.kneighbors_graph": [[851, "examples-using-sklearn-neighbors-kneighbors-graph"]], "sklearn.neighbors.radius_neighbors_graph": [[852, "sklearn-neighbors-radius-neighbors-graph"]], "sklearn.neighbors.sort_graph_by_row_values": [[853, "sklearn-neighbors-sort-graph-by-row-values"]], "sklearn.neural_network.BernoulliRBM": [[854, "sklearn-neural-network-bernoullirbm"]], "Examples using sklearn.neural_network.BernoulliRBM": [[854, "examples-using-sklearn-neural-network-bernoullirbm"]], "sklearn.neural_network.MLPClassifier": [[855, "sklearn-neural-network-mlpclassifier"]], "Examples using sklearn.neural_network.MLPClassifier": [[855, "examples-using-sklearn-neural-network-mlpclassifier"]], "sklearn.neural_network.MLPRegressor": [[856, "sklearn-neural-network-mlpregressor"]], "Examples using sklearn.neural_network.MLPRegressor": [[856, "examples-using-sklearn-neural-network-mlpregressor"]], "sklearn.pipeline.FeatureUnion": [[857, "sklearn-pipeline-featureunion"]], "Examples using sklearn.pipeline.FeatureUnion": [[857, "examples-using-sklearn-pipeline-featureunion"]], "sklearn.pipeline.Pipeline": [[858, "sklearn-pipeline-pipeline"]], "Examples using sklearn.pipeline.Pipeline": [[858, "examples-using-sklearn-pipeline-pipeline"]], "sklearn.pipeline.make_pipeline": [[859, "sklearn-pipeline-make-pipeline"]], "Examples using sklearn.pipeline.make_pipeline": [[859, "examples-using-sklearn-pipeline-make-pipeline"]], "sklearn.pipeline.make_union": [[860, "sklearn-pipeline-make-union"]], "sklearn.preprocessing.Binarizer": [[861, "sklearn-preprocessing-binarizer"]], "sklearn.preprocessing.FunctionTransformer": [[862, "sklearn-preprocessing-functiontransformer"]], "Examples using sklearn.preprocessing.FunctionTransformer": [[862, "examples-using-sklearn-preprocessing-functiontransformer"]], "sklearn.preprocessing.KBinsDiscretizer": [[863, "sklearn-preprocessing-kbinsdiscretizer"]], "Examples using sklearn.preprocessing.KBinsDiscretizer": [[863, "examples-using-sklearn-preprocessing-kbinsdiscretizer"]], "sklearn.preprocessing.KernelCenterer": [[864, "sklearn-preprocessing-kernelcenterer"]], "sklearn.preprocessing.LabelBinarizer": [[865, "sklearn-preprocessing-labelbinarizer"]], "Examples using sklearn.preprocessing.LabelBinarizer": [[865, "examples-using-sklearn-preprocessing-labelbinarizer"]], "sklearn.preprocessing.LabelEncoder": [[866, "sklearn-preprocessing-labelencoder"]], "sklearn.preprocessing.MaxAbsScaler": [[867, "sklearn-preprocessing-maxabsscaler"]], "Examples using sklearn.preprocessing.MaxAbsScaler": [[867, "examples-using-sklearn-preprocessing-maxabsscaler"]], "sklearn.preprocessing.MinMaxScaler": [[868, "sklearn-preprocessing-minmaxscaler"]], "Examples using sklearn.preprocessing.MinMaxScaler": [[868, "examples-using-sklearn-preprocessing-minmaxscaler"]], "sklearn.preprocessing.MultiLabelBinarizer": [[869, "sklearn-preprocessing-multilabelbinarizer"]], "sklearn.preprocessing.Normalizer": [[870, "sklearn-preprocessing-normalizer"]], "Examples using sklearn.preprocessing.Normalizer": [[870, "examples-using-sklearn-preprocessing-normalizer"]], "sklearn.preprocessing.OneHotEncoder": [[871, "sklearn-preprocessing-onehotencoder"]], "Examples using sklearn.preprocessing.OneHotEncoder": [[871, "examples-using-sklearn-preprocessing-onehotencoder"]], "sklearn.preprocessing.OrdinalEncoder": [[872, "sklearn-preprocessing-ordinalencoder"]], "Examples using sklearn.preprocessing.OrdinalEncoder": [[872, "examples-using-sklearn-preprocessing-ordinalencoder"]], "sklearn.preprocessing.PolynomialFeatures": [[873, "sklearn-preprocessing-polynomialfeatures"]], "Examples using sklearn.preprocessing.PolynomialFeatures": [[873, "examples-using-sklearn-preprocessing-polynomialfeatures"]], "sklearn.preprocessing.PowerTransformer": [[874, "sklearn-preprocessing-powertransformer"]], "Examples using sklearn.preprocessing.PowerTransformer": [[874, "examples-using-sklearn-preprocessing-powertransformer"]], "sklearn.preprocessing.QuantileTransformer": [[875, "sklearn-preprocessing-quantiletransformer"]], "Examples using sklearn.preprocessing.QuantileTransformer": [[875, "examples-using-sklearn-preprocessing-quantiletransformer"]], "sklearn.preprocessing.RobustScaler": [[876, "sklearn-preprocessing-robustscaler"]], "Examples using sklearn.preprocessing.RobustScaler": [[876, "examples-using-sklearn-preprocessing-robustscaler"]], "sklearn.preprocessing.SplineTransformer": [[877, "sklearn-preprocessing-splinetransformer"]], "Examples using sklearn.preprocessing.SplineTransformer": [[877, "examples-using-sklearn-preprocessing-splinetransformer"]], "sklearn.preprocessing.StandardScaler": [[878, "sklearn-preprocessing-standardscaler"]], "Examples using sklearn.preprocessing.StandardScaler": [[878, "examples-using-sklearn-preprocessing-standardscaler"]], "sklearn.preprocessing.TargetEncoder": [[879, "sklearn-preprocessing-targetencoder"]], "Examples using sklearn.preprocessing.TargetEncoder": [[879, "examples-using-sklearn-preprocessing-targetencoder"]], "sklearn.preprocessing.add_dummy_feature": [[880, "sklearn-preprocessing-add-dummy-feature"]], "sklearn.preprocessing.binarize": [[881, "sklearn-preprocessing-binarize"]], "sklearn.preprocessing.label_binarize": [[882, "sklearn-preprocessing-label-binarize"]], "Examples using sklearn.preprocessing.label_binarize": [[882, "examples-using-sklearn-preprocessing-label-binarize"]], "sklearn.preprocessing.maxabs_scale": [[883, "sklearn-preprocessing-maxabs-scale"]], "sklearn.preprocessing.minmax_scale": [[884, "sklearn-preprocessing-minmax-scale"]], "Examples using sklearn.preprocessing.minmax_scale": [[884, "examples-using-sklearn-preprocessing-minmax-scale"]], "sklearn.preprocessing.normalize": [[885, "sklearn-preprocessing-normalize"]], "sklearn.preprocessing.power_transform": [[886, "sklearn-preprocessing-power-transform"]], "sklearn.preprocessing.quantile_transform": [[887, "sklearn-preprocessing-quantile-transform"]], "Examples using sklearn.preprocessing.quantile_transform": [[887, "examples-using-sklearn-preprocessing-quantile-transform"]], "sklearn.preprocessing.robust_scale": [[888, "sklearn-preprocessing-robust-scale"]], "sklearn.preprocessing.scale": [[889, "sklearn-preprocessing-scale"]], "sklearn.random_projection.GaussianRandomProjection": [[890, "sklearn-random-projection-gaussianrandomprojection"]], "sklearn.random_projection.SparseRandomProjection": [[891, "sklearn-random-projection-sparserandomprojection"]], "Examples using sklearn.random_projection.SparseRandomProjection": [[891, "examples-using-sklearn-random-projection-sparserandomprojection"]], "sklearn.random_projection.johnson_lindenstrauss_min_dim": [[892, "sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "Examples using sklearn.random_projection.johnson_lindenstrauss_min_dim": [[892, "examples-using-sklearn-random-projection-johnson-lindenstrauss-min-dim"]], "sklearn.semi_supervised.LabelPropagation": [[893, "sklearn-semi-supervised-labelpropagation"]], "sklearn.semi_supervised.LabelSpreading": [[894, "sklearn-semi-supervised-labelspreading"]], "Examples using sklearn.semi_supervised.LabelSpreading": [[894, "examples-using-sklearn-semi-supervised-labelspreading"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[895, "sklearn-semi-supervised-selftrainingclassifier"]], "Examples using sklearn.semi_supervised.SelfTrainingClassifier": [[895, "examples-using-sklearn-semi-supervised-selftrainingclassifier"]], "sklearn.set_config": [[896, "sklearn-set-config"]], "Examples using sklearn.set_config": [[896, "examples-using-sklearn-set-config"]], "sklearn.show_versions": [[897, "sklearn-show-versions"]], "sklearn.svm.LinearSVC": [[898, "sklearn-svm-linearsvc"]], "Examples using sklearn.svm.LinearSVC": [[898, "examples-using-sklearn-svm-linearsvc"]], "sklearn.svm.LinearSVR": [[899, "sklearn-svm-linearsvr"]], "sklearn.svm.NuSVC": [[900, "sklearn-svm-nusvc"]], "Examples using sklearn.svm.NuSVC": [[900, "examples-using-sklearn-svm-nusvc"]], "sklearn.svm.NuSVR": [[901, "sklearn-svm-nusvr"]], "Examples using sklearn.svm.NuSVR": [[901, "examples-using-sklearn-svm-nusvr"]], "sklearn.svm.OneClassSVM": [[902, "sklearn-svm-oneclasssvm"]], "Examples using sklearn.svm.OneClassSVM": [[902, "examples-using-sklearn-svm-oneclasssvm"]], "sklearn.svm.SVC": [[903, "sklearn-svm-svc"]], "Examples using sklearn.svm.SVC": [[903, "examples-using-sklearn-svm-svc"]], "sklearn.svm.SVR": [[904, "sklearn-svm-svr"]], "Examples using sklearn.svm.SVR": [[904, "examples-using-sklearn-svm-svr"]], "sklearn.svm.l1_min_c": [[905, "sklearn-svm-l1-min-c"]], "Examples using sklearn.svm.l1_min_c": [[905, "examples-using-sklearn-svm-l1-min-c"]], "sklearn.tree.DecisionTreeClassifier": [[906, "sklearn-tree-decisiontreeclassifier"]], "Examples using sklearn.tree.DecisionTreeClassifier": [[906, "examples-using-sklearn-tree-decisiontreeclassifier"]], "sklearn.tree.DecisionTreeRegressor": [[907, "sklearn-tree-decisiontreeregressor"]], "Examples using sklearn.tree.DecisionTreeRegressor": [[907, "examples-using-sklearn-tree-decisiontreeregressor"]], "sklearn.tree.ExtraTreeClassifier": [[908, "sklearn-tree-extratreeclassifier"]], "sklearn.tree.ExtraTreeRegressor": [[909, "sklearn-tree-extratreeregressor"]], "sklearn.tree.export_graphviz": [[910, "sklearn-tree-export-graphviz"]], "sklearn.tree.export_text": [[911, "sklearn-tree-export-text"]], "sklearn.tree.plot_tree": [[912, "sklearn-tree-plot-tree"]], "Examples using sklearn.tree.plot_tree": [[912, "examples-using-sklearn-tree-plot-tree"]], "sklearn.utils.Bunch": [[913, "sklearn-utils-bunch"]], "Examples using sklearn.utils.Bunch": [[913, "examples-using-sklearn-utils-bunch"]], "sklearn.utils._safe_indexing": [[914, "sklearn-utils-safe-indexing"]], "sklearn.utils.arrayfuncs.min_pos": [[915, "sklearn-utils-arrayfuncs-min-pos"]], "sklearn.utils.as_float_array": [[916, "sklearn-utils-as-float-array"]], "sklearn.utils.assert_all_finite": [[917, "sklearn-utils-assert-all-finite"]], "sklearn.utils.check_X_y": [[918, "sklearn-utils-check-x-y"]], "sklearn.utils.check_array": [[919, "sklearn-utils-check-array"]], "sklearn.utils.check_consistent_length": [[920, "sklearn-utils-check-consistent-length"]], "sklearn.utils.check_random_state": [[921, "sklearn-utils-check-random-state"]], "Examples using sklearn.utils.check_random_state": [[921, "examples-using-sklearn-utils-check-random-state"]], "sklearn.utils.check_scalar": [[922, "sklearn-utils-check-scalar"]], "sklearn.utils.class_weight.compute_class_weight": [[923, "sklearn-utils-class-weight-compute-class-weight"]], "sklearn.utils.class_weight.compute_sample_weight": [[924, "sklearn-utils-class-weight-compute-sample-weight"]], "sklearn.utils.deprecated": [[925, "sklearn-utils-deprecated"]], "sklearn.utils.discovery.all_displays": [[926, "sklearn-utils-discovery-all-displays"]], "sklearn.utils.discovery.all_estimators": [[927, "sklearn-utils-discovery-all-estimators"]], "sklearn.utils.discovery.all_functions": [[928, "sklearn-utils-discovery-all-functions"]], "sklearn.utils.estimator_checks.check_estimator": [[929, "sklearn-utils-estimator-checks-check-estimator"]], "sklearn.utils.estimator_checks.parametrize_with_checks": [[930, "sklearn-utils-estimator-checks-parametrize-with-checks"]], "Examples using sklearn.utils.estimator_checks.parametrize_with_checks": [[930, "examples-using-sklearn-utils-estimator-checks-parametrize-with-checks"]], "sklearn.utils.estimator_html_repr": [[931, "sklearn-utils-estimator-html-repr"]], "sklearn.utils.extmath.density": [[932, "sklearn-utils-extmath-density"]], "Examples using sklearn.utils.extmath.density": [[932, "examples-using-sklearn-utils-extmath-density"]], "sklearn.utils.extmath.fast_logdet": [[933, "sklearn-utils-extmath-fast-logdet"]], "sklearn.utils.extmath.randomized_range_finder": [[934, "sklearn-utils-extmath-randomized-range-finder"]], "sklearn.utils.extmath.randomized_svd": [[935, "sklearn-utils-extmath-randomized-svd"]], "sklearn.utils.extmath.safe_sparse_dot": [[936, "sklearn-utils-extmath-safe-sparse-dot"]], "sklearn.utils.extmath.weighted_mode": [[937, "sklearn-utils-extmath-weighted-mode"]], "sklearn.utils.gen_batches": [[938, "sklearn-utils-gen-batches"]], "sklearn.utils.gen_even_slices": [[939, "sklearn-utils-gen-even-slices"]], "Examples using sklearn.utils.gen_even_slices": [[939, "examples-using-sklearn-utils-gen-even-slices"]], "sklearn.utils.graph.single_source_shortest_path_length": [[940, "sklearn-utils-graph-single-source-shortest-path-length"]], "sklearn.utils.indexable": [[941, "sklearn-utils-indexable"]], "sklearn.utils.metadata_routing.MetadataRequest": [[942, "sklearn-utils-metadata-routing-metadatarequest"]], "sklearn.utils.metadata_routing.MetadataRouter": [[943, "sklearn-utils-metadata-routing-metadatarouter"]], "Examples using sklearn.utils.metadata_routing.MetadataRouter": [[943, "examples-using-sklearn-utils-metadata-routing-metadatarouter"]], "sklearn.utils.metadata_routing.MethodMapping": [[944, "sklearn-utils-metadata-routing-methodmapping"]], "Examples using sklearn.utils.metadata_routing.MethodMapping": [[944, "examples-using-sklearn-utils-metadata-routing-methodmapping"]], "sklearn.utils.metadata_routing.get_routing_for_object": [[945, "sklearn-utils-metadata-routing-get-routing-for-object"]], "Examples using sklearn.utils.metadata_routing.get_routing_for_object": [[945, "examples-using-sklearn-utils-metadata-routing-get-routing-for-object"]], "sklearn.utils.metadata_routing.process_routing": [[946, "sklearn-utils-metadata-routing-process-routing"]], "Examples using sklearn.utils.metadata_routing.process_routing": [[946, "examples-using-sklearn-utils-metadata-routing-process-routing"]], "sklearn.utils.metaestimators.available_if": [[947, "sklearn-utils-metaestimators-available-if"]], "Examples using sklearn.utils.metaestimators.available_if": [[947, "examples-using-sklearn-utils-metaestimators-available-if"]], "sklearn.utils.multiclass.is_multilabel": [[948, "sklearn-utils-multiclass-is-multilabel"]], "sklearn.utils.multiclass.type_of_target": [[949, "sklearn-utils-multiclass-type-of-target"]], "sklearn.utils.multiclass.unique_labels": [[950, "sklearn-utils-multiclass-unique-labels"]], "sklearn.utils.murmurhash3_32": [[951, "sklearn-utils-murmurhash3-32"]], "sklearn.utils.parallel.Parallel": [[952, "sklearn-utils-parallel-parallel"]], "sklearn.utils.parallel.delayed": [[953, "sklearn-utils-parallel-delayed"]], "sklearn.utils.parallel_backend": [[954, "sklearn-utils-parallel-backend"]], "sklearn.utils.random.sample_without_replacement": [[955, "sklearn-utils-random-sample-without-replacement"]], "sklearn.utils.register_parallel_backend": [[956, "sklearn-utils-register-parallel-backend"]], "sklearn.utils.resample": [[957, "sklearn-utils-resample"]], "sklearn.utils.safe_mask": [[958, "sklearn-utils-safe-mask"]], "sklearn.utils.safe_sqr": [[959, "sklearn-utils-safe-sqr"]], "sklearn.utils.shuffle": [[960, "sklearn-utils-shuffle"]], "Examples using sklearn.utils.shuffle": [[960, "examples-using-sklearn-utils-shuffle"]], "sklearn.utils.sparsefuncs.incr_mean_variance_axis": [[961, "sklearn-utils-sparsefuncs-incr-mean-variance-axis"]], "sklearn.utils.sparsefuncs.inplace_column_scale": [[962, "sklearn-utils-sparsefuncs-inplace-column-scale"]], "sklearn.utils.sparsefuncs.inplace_csr_column_scale": [[963, "sklearn-utils-sparsefuncs-inplace-csr-column-scale"]], "sklearn.utils.sparsefuncs.inplace_row_scale": [[964, "sklearn-utils-sparsefuncs-inplace-row-scale"]], "sklearn.utils.sparsefuncs.inplace_swap_column": [[965, "sklearn-utils-sparsefuncs-inplace-swap-column"]], "sklearn.utils.sparsefuncs.inplace_swap_row": [[966, "sklearn-utils-sparsefuncs-inplace-swap-row"]], "sklearn.utils.sparsefuncs.mean_variance_axis": [[967, "sklearn-utils-sparsefuncs-mean-variance-axis"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1": [[968, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l1"]], "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2": [[969, "sklearn-utils-sparsefuncs-fast-inplace-csr-row-normalize-l2"]], "sklearn.utils.validation.check_is_fitted": [[970, "sklearn-utils-validation-check-is-fitted"]], "Examples using sklearn.utils.validation.check_is_fitted": [[970, "examples-using-sklearn-utils-validation-check-is-fitted"]], "sklearn.utils.validation.check_memory": [[971, "sklearn-utils-validation-check-memory"]], "sklearn.utils.validation.check_symmetric": [[972, "sklearn-utils-validation-check-symmetric"]], "sklearn.utils.validation.column_or_1d": [[973, "sklearn-utils-validation-column-or-1d"]], "sklearn.utils.validation.has_fit_parameter": [[974, "sklearn-utils-validation-has-fit-parameter"]], "Tuning the hyper-parameters of an estimator": [[975, "tuning-the-hyper-parameters-of-an-estimator"]], "Exhaustive Grid Search": [[975, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[975, "randomized-parameter-optimization"]], "Searching for optimal parameters with successive halving": [[975, "searching-for-optimal-parameters-with-successive-halving"]], "Choosing min_resources and the number of candidates": [[975, "choosing-min-resources-and-the-number-of-candidates"]], "Amount of resource and number of candidates at each iteration": [[975, "amount-of-resource-and-number-of-candidates-at-each-iteration"]], "Choosing a resource": [[975, "choosing-a-resource"]], "Exhausting the available resources": [[975, "exhausting-the-available-resources"]], "Aggressive elimination of candidates": [[975, "aggressive-elimination-of-candidates"]], "Analyzing results with the cv_results_ attribute": [[975, "analyzing-results-with-the-cv-results-attribute"]], "Tips for parameter search": [[975, "tips-for-parameter-search"]], "Specifying an objective metric": [[975, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[975, "specifying-multiple-metrics-for-evaluation"]], "Composite estimators and parameter spaces": [[975, "composite-estimators-and-parameter-spaces"]], "Model selection: development and evaluation": [[975, "model-selection-development-and-evaluation"]], "Robustness to failure": [[975, "robustness-to-failure"]], "Alternatives to brute force parameter search": [[975, "alternatives-to-brute-force-parameter-search"]], "Model specific cross-validation": [[975, "model-specific-cross-validation"]], "Information Criterion": [[975, "information-criterion"]], "Out of Bag Estimates": [[975, "out-of-bag-estimates"]], "Imputation of missing values": [[976, "imputation-of-missing-values"], [996, "imputation-of-missing-values"]], "Univariate vs. Multivariate Imputation": [[976, "univariate-vs-multivariate-imputation"]], "Univariate feature imputation": [[976, "univariate-feature-imputation"]], "Multivariate feature imputation": [[976, "multivariate-feature-imputation"]], "Flexibility of IterativeImputer": [[976, "flexibility-of-iterativeimputer"]], "Multiple vs. Single Imputation": [[976, "multiple-vs-single-imputation"]], "Nearest neighbors imputation": [[976, "nearest-neighbors-imputation"]], "Keeping the number of features constant": [[976, "keeping-the-number-of-features-constant"]], "Marking imputed values": [[976, "marking-imputed-values"]], "Estimators that handle NaN values": [[976, "estimators-that-handle-nan-values"]], "Isotonic regression": [[977, "isotonic-regression"]], "Nystroem Method for Kernel Approximation": [[978, "nystroem-method-for-kernel-approximation"]], "Radial Basis Function Kernel": [[978, "radial-basis-function-kernel"]], "Additive Chi Squared Kernel": [[978, "additive-chi-squared-kernel"]], "Skewed Chi Squared Kernel": [[978, "skewed-chi-squared-kernel"]], "Polynomial Kernel Approximation via Tensor Sketch": [[978, "polynomial-kernel-approximation-via-tensor-sketch"]], "Mathematical Details": [[978, "mathematical-details"]], "Kernel ridge regression": [[979, "kernel-ridge-regression"]], "Linear and Quadratic Discriminant Analysis": [[980, "linear-and-quadratic-discriminant-analysis"]], "Dimensionality reduction using Linear Discriminant Analysis": [[980, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Mathematical formulation of the LDA and QDA classifiers": [[980, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "QDA": [[980, "qda"]], "LDA": [[980, "lda"]], "Mathematical formulation of LDA dimensionality reduction": [[980, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Shrinkage and Covariance Estimator": [[980, "shrinkage-and-covariance-estimator"]], "Estimation algorithms": [[980, "estimation-algorithms"]], "Validation curves: plotting scores to evaluate models": [[981, "validation-curves-plotting-scores-to-evaluate-models"]], "Validation curve": [[981, "validation-curve"]], "Learning curve": [[981, "learning-curve"]], "Linear Models": [[982, "linear-models"]], "Ordinary Least Squares": [[982, "ordinary-least-squares"]], "Non-Negative Least Squares": [[982, "non-negative-least-squares"]], "Ordinary Least Squares Complexity": [[982, "ordinary-least-squares-complexity"]], "Ridge regression and classification": [[982, "ridge-regression-and-classification"]], "Ridge Complexity": [[982, "ridge-complexity"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[982, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Setting regularization parameter": [[982, "setting-regularization-parameter"]], "Using cross-validation": [[982, "using-cross-validation"]], "Information-criteria based model selection": [[982, "information-criteria-based-model-selection"]], "AIC and BIC criteria": [[982, "aic-and-bic-criteria"]], "Comparison with the regularization parameter of SVM": [[982, "comparison-with-the-regularization-parameter-of-svm"]], "Multi-task Lasso": [[982, "multi-task-lasso"]], "Elastic-Net": [[982, "elastic-net"]], "Multi-task Elastic-Net": [[982, "multi-task-elastic-net"]], "Least Angle Regression": [[982, "least-angle-regression"]], "LARS Lasso": [[982, "lars-lasso"]], "Orthogonal Matching Pursuit (OMP)": [[982, "orthogonal-matching-pursuit-omp"]], "Bayesian Regression": [[982, "bayesian-regression"]], "Bayesian Ridge Regression": [[982, "bayesian-ridge-regression"]], "Automatic Relevance Determination - ARD": [[982, "automatic-relevance-determination-ard"]], "Logistic regression": [[982, "logistic-regression"]], "Binary Case": [[982, "binary-case"]], "Multinomial Case": [[982, "multinomial-case"]], "Solvers": [[982, "solvers"]], "Differences between solvers": [[982, "differences-between-solvers"]], "Stochastic Gradient Descent - SGD": [[982, "stochastic-gradient-descent-sgd"]], "Perceptron": [[982, "perceptron"]], "Passive Aggressive Algorithms": [[982, "passive-aggressive-algorithms"]], "Robustness regression: outliers and modeling errors": [[982, "robustness-regression-outliers-and-modeling-errors"]], "Different scenario and useful concepts": [[982, "different-scenario-and-useful-concepts"]], "Trade-offs: which estimator ?": [[982, null]], "RANSAC: RANdom SAmple Consensus": [[982, "ransac-random-sample-consensus"]], "Theil-Sen estimator: generalized-median-based estimator": [[982, "theil-sen-estimator-generalized-median-based-estimator"]], "Huber Regression": [[982, "huber-regression"]], "Quantile Regression": [[982, "quantile-regression"]], "Polynomial regression: extending linear models with basis functions": [[982, "polynomial-regression-extending-linear-models-with-basis-functions"]], "Introduction": [[983, "introduction"]], "Isomap": [[983, "isomap"]], "Locally Linear Embedding": [[983, "locally-linear-embedding"]], "Modified Locally Linear Embedding": [[983, "modified-locally-linear-embedding"]], "Hessian Eigenmapping": [[983, "hessian-eigenmapping"]], "Spectral Embedding": [[983, "spectral-embedding"]], "Local Tangent Space Alignment": [[983, "local-tangent-space-alignment"]], "Multi-dimensional Scaling (MDS)": [[983, "multi-dimensional-scaling-mds"]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[983, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "Tips on practical use": [[983, "tips-on-practical-use"], [1002, "tips-on-practical-use"]], "Pairwise metrics, Affinities and Kernels": [[984, "pairwise-metrics-affinities-and-kernels"]], "Cosine similarity": [[984, "cosine-similarity"]], "Laplacian kernel": [[984, "laplacian-kernel"]], "Chi-squared kernel": [[984, "chi-squared-kernel"]], "Gaussian mixture models": [[985, "gaussian-mixture-models"]], "Gaussian Mixture": [[985, "gaussian-mixture"]], "Pros:": [[985, null], [985, null]], "Cons:": [[985, null], [985, null]], "Variational Bayesian Gaussian Mixture": [[985, "variational-bayesian-gaussian-mixture"]], "The Dirichlet Process": [[985, "the-dirichlet-process"]], "Metrics and scoring: quantifying the quality of predictions": [[986, "metrics-and-scoring-quantifying-the-quality-of-predictions"]], "The scoring parameter: defining model evaluation rules": [[986, "the-scoring-parameter-defining-model-evaluation-rules"]], "Common cases: predefined values": [[986, "common-cases-predefined-values"]], "Defining your scoring strategy from metric functions": [[986, "defining-your-scoring-strategy-from-metric-functions"]], "Implementing your own scoring object": [[986, "implementing-your-own-scoring-object"]], "Using multiple metric evaluation": [[986, "using-multiple-metric-evaluation"]], "From binary to multiclass and multilabel": [[986, "from-binary-to-multiclass-and-multilabel"]], "Accuracy score": [[986, "accuracy-score"]], "Example:": [[986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [986, null], [998, null], [1019, null]], "Top-k accuracy score": [[986, "top-k-accuracy-score"]], "Balanced accuracy score": [[986, "balanced-accuracy-score"]], "Cohen\u2019s kappa": [[986, "cohen-s-kappa"]], "Classification report": [[986, "classification-report"]], "Hamming loss": [[986, "hamming-loss"]], "Precision, recall and F-measures": [[986, "precision-recall-and-f-measures"]], "Binary classification": [[986, "binary-classification"]], "Multiclass and multilabel classification": [[986, "multiclass-and-multilabel-classification"]], "Jaccard similarity coefficient score": [[986, "jaccard-similarity-coefficient-score"]], "Hinge loss": [[986, "hinge-loss"]], "Log loss": [[986, "log-loss"]], "Matthews correlation coefficient": [[986, "matthews-correlation-coefficient"]], "Multi-label confusion matrix": [[986, "multi-label-confusion-matrix"]], "Receiver operating characteristic (ROC)": [[986, "receiver-operating-characteristic-roc"]], "Binary case": [[986, "binary-case"]], "Multi-class case": [[986, "multi-class-case"]], "Multi-label case": [[986, "multi-label-case"]], "Detection error tradeoff (DET)": [[986, "detection-error-tradeoff-det"]], "Zero one loss": [[986, "zero-one-loss"]], "Brier score loss": [[986, "brier-score-loss"]], "Class likelihood ratios": [[986, "class-likelihood-ratios"]], "Coverage error": [[986, "coverage-error"]], "Label ranking average precision": [[986, "label-ranking-average-precision"]], "Ranking loss": [[986, "ranking-loss"]], "Normalized Discounted Cumulative Gain": [[986, "normalized-discounted-cumulative-gain"]], "R\u00b2 score, the coefficient of determination": [[986, "r2-score-the-coefficient-of-determination"]], "Mean absolute error": [[986, "mean-absolute-error"]], "Mean squared error": [[986, "mean-squared-error"]], "Mean squared logarithmic error": [[986, "mean-squared-logarithmic-error"]], "Mean absolute percentage error": [[986, "mean-absolute-percentage-error"]], "Median absolute error": [[986, "median-absolute-error"]], "Max error": [[986, "max-error"]], "Explained variance score": [[986, "explained-variance-score"]], "Link to R\u00b2 score, the coefficient of determination": [[986, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[986, "mean-poisson-gamma-and-tweedie-deviances"]], "Pinball loss": [[986, "pinball-loss"]], "D\u00b2 score": [[986, "d2-score"]], "D\u00b2 Tweedie score": [[986, "d2-tweedie-score"]], "D\u00b2 pinball score": [[986, "d2-pinball-score"]], "D\u00b2 absolute error score": [[986, "d2-absolute-error-score"]], "Visual evaluation of regression models": [[986, "visual-evaluation-of-regression-models"]], "Dummy estimators": [[986, "dummy-estimators"]], "Multiclass and multioutput algorithms": [[987, "multiclass-and-multioutput-algorithms"]], "Multiclass classification": [[987, "multiclass-classification"], [1019, null]], "Target format": [[987, "target-format"], [987, "id5"], [987, "id8"], [987, "id10"]], "OneVsRestClassifier": [[987, "onevsrestclassifier"]], "OneVsOneClassifier": [[987, "onevsoneclassifier"]], "OutputCodeClassifier": [[987, "outputcodeclassifier"]], "MultiOutputClassifier": [[987, "multioutputclassifier"]], "ClassifierChain": [[987, "classifierchain"]], "Multiclass-multioutput classification": [[987, "multiclass-multioutput-classification"]], "Multioutput regression": [[987, "multioutput-regression"]], "MultiOutputRegressor": [[987, "multioutputregressor"]], "RegressorChain": [[987, "regressorchain"]], "Naive Bayes": [[988, "naive-bayes"]], "Multinomial Naive Bayes": [[988, "multinomial-naive-bayes"]], "Complement Naive Bayes": [[988, "complement-naive-bayes"]], "Bernoulli Naive Bayes": [[988, "bernoulli-naive-bayes"]], "Categorical Naive Bayes": [[988, "categorical-naive-bayes"]], "Out-of-core naive Bayes model fitting": [[988, "out-of-core-naive-bayes-model-fitting"]], "Unsupervised Nearest Neighbors": [[989, "unsupervised-nearest-neighbors"]], "Finding the Nearest Neighbors": [[989, "finding-the-nearest-neighbors"]], "KDTree and BallTree Classes": [[989, "kdtree-and-balltree-classes"]], "Nearest Neighbors Regression": [[989, "nearest-neighbors-regression"]], "Nearest Neighbor Algorithms": [[989, "nearest-neighbor-algorithms"]], "Brute Force": [[989, "brute-force"]], "K-D Tree": [[989, "k-d-tree"]], "Ball Tree": [[989, "ball-tree"]], "Choice of Nearest Neighbors Algorithm": [[989, "choice-of-nearest-neighbors-algorithm"]], "Effect of leaf_size": [[989, "effect-of-leaf-size"]], "Valid Metrics for Nearest Neighbor Algorithms": [[989, "valid-metrics-for-nearest-neighbor-algorithms"]], "Nearest Centroid Classifier": [[989, "nearest-centroid-classifier"]], "Nearest Shrunken Centroid": [[989, "nearest-shrunken-centroid"]], "Nearest Neighbors Transformer": [[989, "nearest-neighbors-transformer"]], "Neighborhood Components Analysis": [[989, "neighborhood-components-analysis"]], "Dimensionality reduction": [[989, "dimensionality-reduction"]], "Mahalanobis distance": [[989, "mahalanobis-distance"]], "Complexity": [[989, "complexity"], [990, "complexity"], [1000, "complexity"], [1001, "complexity"], [1002, "complexity"]], "Transform": [[989, "transform"]], "Neural network models (supervised)": [[990, "neural-network-models-supervised"]], "Multi-layer Perceptron": [[990, "multi-layer-perceptron"]], "Regularization": [[990, "regularization"]], "Algorithms": [[990, "algorithms"]], "Tips on Practical Use": [[990, "tips-on-practical-use"], [1000, "tips-on-practical-use"], [1001, "tips-on-practical-use"]], "More control with warm_start": [[990, "more-control-with-warm-start"]], "Neural network models (unsupervised)": [[991, "neural-network-models-unsupervised"]], "Restricted Boltzmann machines": [[991, "restricted-boltzmann-machines"]], "Graphical model and parametrization": [[991, "graphical-model-and-parametrization"]], "Bernoulli Restricted Boltzmann machines": [[991, "bernoulli-restricted-boltzmann-machines"]], "Stochastic Maximum Likelihood learning": [[991, "stochastic-maximum-likelihood-learning"]], "Novelty and Outlier Detection": [[992, "novelty-and-outlier-detection"]], "Overview of outlier detection methods": [[992, "overview-of-outlier-detection-methods"]], "Novelty Detection": [[992, "novelty-detection"]], "Scaling up the One-Class SVM": [[992, "scaling-up-the-one-class-svm"]], "Outlier Detection": [[992, "id1"]], "Fitting an elliptic envelope": [[992, "fitting-an-elliptic-envelope"]], "Isolation Forest": [[992, "isolation-forest"]], "Local Outlier Factor": [[992, "local-outlier-factor"]], "Novelty detection with Local Outlier Factor": [[992, "novelty-detection-with-local-outlier-factor"]], "Partial Dependence and Individual Conditional Expectation plots": [[993, "partial-dependence-and-individual-conditional-expectation-plots"]], "Partial dependence plots": [[993, "partial-dependence-plots"]], "Individual conditional expectation (ICE) plot": [[993, "individual-conditional-expectation-ice-plot"]], "Mathematical Definition": [[993, "mathematical-definition"]], "Computation methods": [[993, "computation-methods"]], "Permutation feature importance": [[994, "permutation-feature-importance"]], "Outline of the permutation importance algorithm": [[994, "outline-of-the-permutation-importance-algorithm"]], "Relation to impurity-based importance in trees": [[994, "relation-to-impurity-based-importance-in-trees"]], "Misleading values on strongly correlated features": [[994, "misleading-values-on-strongly-correlated-features"]], "Preprocessing data": [[996, "preprocessing-data"]], "Standardization, or mean removal and variance scaling": [[996, "standardization-or-mean-removal-and-variance-scaling"]], "Scaling features to a range": [[996, "scaling-features-to-a-range"]], "Scaling sparse data": [[996, "scaling-sparse-data"]], "Scaling data with outliers": [[996, "scaling-data-with-outliers"]], "Scaling vs Whitening": [[996, null]], "Centering kernel matrices": [[996, "centering-kernel-matrices"]], "Non-linear transformation": [[996, "non-linear-transformation"]], "Mapping to a Uniform distribution": [[996, "mapping-to-a-uniform-distribution"]], "Mapping to a Gaussian distribution": [[996, "mapping-to-a-gaussian-distribution"]], "Normalization": [[996, "normalization"]], "Sparse input": [[996, null], [996, null]], "Encoding categorical features": [[996, "encoding-categorical-features"]], "Infrequent categories": [[996, "infrequent-categories"]], "Target Encoder": [[996, "target-encoder"]], "Discretization": [[996, "discretization"]], "K-bins discretization": [[996, "k-bins-discretization"]], "Feature binarization": [[996, "feature-binarization"]], "Generating polynomial features": [[996, "generating-polynomial-features"]], "Polynomial features": [[996, "polynomial-features"]], "Spline transformer": [[996, "spline-transformer"]], "Custom transformers": [[996, "custom-transformers"]], "Transforming the prediction target (y)": [[997, "transforming-the-prediction-target-y"]], "Label binarization": [[997, "label-binarization"]], "LabelBinarizer": [[997, "labelbinarizer"]], "MultiLabelBinarizer": [[997, "multilabelbinarizer"]], "Label encoding": [[997, "label-encoding"]], "Random Projection": [[998, "random-projection"]], "The Johnson-Lindenstrauss lemma": [[998, "the-johnson-lindenstrauss-lemma"]], "Gaussian random projection": [[998, "gaussian-random-projection"]], "Sparse random projection": [[998, "sparse-random-projection"]], "Inverse Transform": [[998, "inverse-transform"]], "Unlabeled entries in y": [[999, null]], "Self Training": [[999, "self-training"]], "Label Propagation": [[999, "label-propagation"]], "Stochastic Gradient Descent": [[1000, "stochastic-gradient-descent"]], "Stochastic Gradient Descent for sparse data": [[1000, "stochastic-gradient-descent-for-sparse-data"]], "Stopping criterion": [[1000, "stopping-criterion"]], "SGD": [[1000, "id5"]], "Implementation details": [[1000, "implementation-details"], [1001, "implementation-details"]], "Multi-class classification": [[1001, "multi-class-classification"]], "Scores and probabilities": [[1001, "scores-and-probabilities"]], "Unbalanced problems": [[1001, "unbalanced-problems"]], "Density estimation, novelty detection": [[1001, "density-estimation-novelty-detection"]], "Kernel functions": [[1001, "kernel-functions"]], "Parameters of the RBF Kernel": [[1001, "parameters-of-the-rbf-kernel"]], "Custom Kernels": [[1001, "custom-kernels"]], "SVC": [[1001, "svc"]], "SVR": [[1001, "svr"]], "Multi-output problems": [[1002, "multi-output-problems"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1002, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Classification criteria": [[1002, "classification-criteria"]], "Regression criteria": [[1002, "regression-criteria"]], "Missing Values Support": [[1002, "missing-values-support"]], "Minimal Cost-Complexity Pruning": [[1002, "minimal-cost-complexity-pruning"]], "Unsupervised dimensionality reduction": [[1003, "unsupervised-dimensionality-reduction"]], "Pipelining": [[1003, null], [1017, "pipelining"]], "PCA: principal component analysis": [[1003, "pca-principal-component-analysis"]], "Random projections": [[1003, "random-projections"]], "Feature scaling": [[1003, null]], "Welcome to scikit-learn": [[1004, "welcome-to-scikit-learn"]], "External Resources, Videos and Talks": [[1005, "external-resources-videos-and-talks"]], "New to Scientific Python?": [[1005, "new-to-scientific-python"]], "External Tutorials": [[1005, "external-tutorials"]], "Videos": [[1005, "videos"]], "Related Projects": [[1006, "related-projects"]], "Interoperability and framework enhancements": [[1006, "interoperability-and-framework-enhancements"]], "Other estimators and tasks": [[1006, "other-estimators-and-tasks"]], "Statistical learning with Python": [[1006, "statistical-learning-with-python"]], "Recommendation Engine packages": [[1006, "recommendation-engine-packages"]], "Domain specific packages": [[1006, "domain-specific-packages"]], "Translations of scikit-learn documentation": [[1006, "translations-of-scikit-learn-documentation"]], "Roadmap": [[1007, "id1"]], "Purpose of this document": [[1007, "purpose-of-this-document"]], "Statement of purpose: Scikit-learn in 2018": [[1007, "statement-of-purpose-scikit-learn-in-2018"]], "Architectural / general goals": [[1007, "architectural-general-goals"]], "Subpackage-specific goals": [[1007, "subpackage-specific-goals"]], "Supervised learning": [[1008, "supervised-learning"]], "Support": [[1009, "support"]], "Mailing List": [[1009, "mailing-list"]], "User questions": [[1009, "user-questions"]], "Bug tracker": [[1009, "bug-tracker"]], "Gitter": [[1009, "gitter"]], "Documentation resources": [[1009, "documentation-resources"]], "Who is using scikit-learn?": [[1010, "who-is-using-scikit-learn"]], "J.P.Morgan": [[1010, "id1"]], "Spotify": [[1010, "id2"]], "Inria": [[1010, "id3"]], "betaworks": [[1010, "id4"]], "Hugging Face": [[1010, "id5"]], "Evernote": [[1010, "id6"]], "T\u00e9l\u00e9com ParisTech": [[1010, "id7"]], "Booking.com": [[1010, "id8"]], "AWeber": [[1010, "id9"]], "Yhat": [[1010, "id10"]], "Rangespan": [[1010, "id11"]], "Birchbox": [[1010, "id12"]], "Bestofmedia Group": [[1010, "id13"]], "Change.org": [[1010, "id14"]], "PHIMECA Engineering": [[1010, "id15"]], "HowAboutWe": [[1010, "id16"]], "PeerIndex": [[1010, "id17"]], "DataRobot": [[1010, "id18"]], "OkCupid": [[1010, "id19"]], "Lovely": [[1010, "id20"]], "Data Publica": [[1010, "id21"]], "Machinalis": [[1010, "id22"]], "solido": [[1010, "id23"]], "INFONEA": [[1010, "id24"]], "Dataiku": [[1010, "id25"]], "Otto Group": [[1010, "id26"]], "Zopa": [[1010, "id27"]], "MARS": [[1010, "id28"]], "BNP Paribas Cardif": [[1010, "id29"]], "An introduction to machine learning with scikit-learn": [[1012, "an-introduction-to-machine-learning-with-scikit-learn"]], "Section contents": [[1012, null]], "Machine learning: the problem setting": [[1012, "machine-learning-the-problem-setting"]], "Training set and testing set": [[1012, null], [1019, null]], "Loading an example dataset": [[1012, "loading-an-example-dataset"]], "Shape of the data arrays": [[1012, null]], "Learning and predicting": [[1012, "learning-and-predicting"]], "Choosing the parameters of the model": [[1012, null]], "Conventions": [[1012, "conventions"]], "Type casting": [[1012, "type-casting"]], "Refitting and updating parameters": [[1012, "refitting-and-updating-parameters"]], "Multiclass vs. multilabel fitting": [[1012, "multiclass-vs-multilabel-fitting"]], "scikit-learn Tutorials": [[1013, "scikit-learn-tutorials"]], "Choosing the right estimator": [[1014, "choosing-the-right-estimator"]], "A tutorial on statistical-learning for scientific data processing": [[1015, "a-tutorial-on-statistical-learning-for-scientific-data-processing"]], "Statistical learning": [[1015, null]], "Model selection: choosing estimators and their parameters": [[1016, "model-selection-choosing-estimators-and-their-parameters"]], "Score, and cross-validated scores": [[1016, "score-and-cross-validated-scores"]], "Cross-validation generators": [[1016, "cross-validation-generators"]], "Exercise": [[1016, null], [1016, null], [1019, null], [1019, null]], "Grid-search and cross-validated estimators": [[1016, "grid-search-and-cross-validated-estimators"]], "Grid-search": [[1016, "grid-search"]], "Nested cross-validation": [[1016, null]], "Cross-validated estimators": [[1016, "cross-validated-estimators"]], "Putting it all together": [[1017, "putting-it-all-together"]], "Face recognition with eigenfaces": [[1017, "face-recognition-with-eigenfaces"]], "Open problem: Stock Market Structure": [[1017, "open-problem-stock-market-structure"]], "Statistical learning: the setting and the estimator object in scikit-learn": [[1018, "statistical-learning-the-setting-and-the-estimator-object-in-scikit-learn"]], "Datasets": [[1018, "datasets"]], "A simple example shipped with scikit-learn: iris dataset": [[1018, null]], "An example of reshaping data would be the digits dataset": [[1018, null]], "Estimators objects": [[1018, "estimators-objects"]], "Supervised learning: predicting an output variable from high-dimensional observations": [[1019, "supervised-learning-predicting-an-output-variable-from-high-dimensional-observations"]], "The problem solved in supervised learning": [[1019, null]], "Vocabulary: classification and regression": [[1019, null]], "Nearest neighbor and the curse of dimensionality": [[1019, "nearest-neighbor-and-the-curse-of-dimensionality"]], "Classifying irises:": [[1019, null]], "k-Nearest neighbors classifier": [[1019, "k-nearest-neighbors-classifier"]], "The curse of dimensionality": [[1019, "the-curse-of-dimensionality"]], "Linear model: from regression to sparsity": [[1019, "linear-model-from-regression-to-sparsity"]], "Linear regression": [[1019, "linear-regression"]], "Shrinkage": [[1019, "shrinkage"]], "Different algorithms for the same problem": [[1019, null]], "Shrinkage and sparsity with logistic regression": [[1019, null]], "Support vector machines (SVMs)": [[1019, "support-vector-machines-svms"]], "Linear SVMs": [[1019, "linear-svms"]], "Using kernels": [[1019, "using-kernels"]], "RBF kernel (Radial Basis Function)": [[1019, "rbf-kernel-radial-basis-function"]], "Interactive example": [[1019, null]], "Unsupervised learning: seeking representations of the data": [[1020, "unsupervised-learning-seeking-representations-of-the-data"]], "Clustering: grouping observations together": [[1020, "clustering-grouping-observations-together"]], "The problem solved in clustering": [[1020, null]], "K-means clustering": [[1020, "k-means-clustering"]], "Application example: vector quantization": [[1020, null]], "Hierarchical agglomerative clustering: Ward": [[1020, "hierarchical-agglomerative-clustering-ward"]], "Connectivity-constrained clustering": [[1020, "connectivity-constrained-clustering"]], "transform and inverse_transform methods": [[1020, null]], "Decompositions: from a signal to components and loadings": [[1020, "decompositions-from-a-signal-to-components-and-loadings"]], "Components and loadings": [[1020, null]], "Principal component analysis: PCA": [[1020, "principal-component-analysis-pca"]], "Independent Component Analysis: ICA": [[1020, "independent-component-analysis-ica"]], "Working With Text Data": [[1021, "working-with-text-data"]], "Tutorial setup": [[1021, "tutorial-setup"]], "Loading the 20 newsgroups dataset": [[1021, "loading-the-20-newsgroups-dataset"]], "Extracting features from text files": [[1021, "extracting-features-from-text-files"]], "Bags of words": [[1021, "bags-of-words"]], "Tokenizing text with scikit-learn": [[1021, "tokenizing-text-with-scikit-learn"]], "From occurrences to frequencies": [[1021, "from-occurrences-to-frequencies"]], "Training a classifier": [[1021, "training-a-classifier"]], "Building a pipeline": [[1021, "building-a-pipeline"]], "Evaluation of the performance on the test set": [[1021, "evaluation-of-the-performance-on-the-test-set"]], "Parameter tuning using grid search": [[1021, "parameter-tuning-using-grid-search"]], "Exercises": [[1021, "exercises"]], "Exercise 1: Language identification": [[1021, "exercise-1-language-identification"]], "Exercise 2: Sentiment Analysis on movie reviews": [[1021, "exercise-2-sentiment-analysis-on-movie-reviews"]], "Exercise 3: CLI text classification utility": [[1021, "exercise-3-cli-text-classification-utility"]], "Where to from here": [[1021, "where-to-from-here"]], "Unsupervised learning": [[1022, "unsupervised-learning"]], "User Guide": [[1023, "user-guide"]], "Under Development": [[1023, "under-development"]], "Available documentation for Scikit-learn": [[1024, "available-documentation-for-scikit-learn"]], "Visualizations": [[1025, "visualizations"]], "Available Plotting Utilities": [[1025, "available-plotting-utilities"]], "Display Objects": [[1025, "display-objects"]], "Release History": [[1026, "release-history"]], "Version 0.12.1": [[1028, "version-0-12-1"]], "Changelog": [[1028, "changelog"], [1028, "id1"], [1028, "id3"], [1028, "id6"], [1028, "id9"], [1028, "id12"], [1028, "id14"], [1028, "id16"], [1028, "id18"], [1028, "id19"], [1029, "changelog"], [1029, "id1"], [1030, "changelog"], [1031, "changelog"], [1032, "changelog"], [1032, "id1"], [1033, "changelog"], [1033, "id1"], [1034, "changelog"], [1034, "id1"], [1034, "id2"], [1035, "changelog"], [1035, "id1"], [1036, "changelog"], [1036, "id1"], [1036, "id5"], [1036, "id10"], [1036, "id23"], [1037, "changelog"], [1037, "id1"], [1037, "id2"], [1037, "id7"], [1038, "changelog"], [1038, "id1"], [1038, "id4"], [1039, "changelog"], [1039, "id1"], [1039, "id4"], [1040, "changelog"], [1040, "id1"], [1040, "id4"], [1041, "changelog"], [1041, "id1"], [1041, "id7"], [1042, "changelog"], [1042, "id1"], [1042, "id7"], [1043, "changelog"], [1043, "id1"], [1043, "id9"], [1044, "changelog"], [1044, "id1"], [1044, "id6"], [1045, "changelog"]], "People": [[1028, "people"], [1028, "id2"], [1028, "id5"], [1028, "id8"], [1028, "id11"], [1028, "id13"], [1028, "id15"], [1028, "id17"], [1029, "people"], [1029, "id2"], [1030, "people"], [1031, "people"]], "Version 0.12": [[1028, "version-0-12"]], "API changes summary": [[1028, "api-changes-summary"], [1028, "id4"], [1028, "id7"], [1028, "id10"], [1029, "api-changes-summary"], [1030, "api-changes-summary"], [1031, "api-changes-summary"], [1032, "api-changes-summary"], [1033, "api-changes-summary"], [1034, "api-changes-summary"], [1034, "id5"], [1035, "api-changes-summary"]], "Version 0.11": [[1028, "version-0-11"]], "Highlights": [[1028, "highlights"], [1031, "highlights"], [1032, "highlights"], [1035, "highlights"], [1036, "highlights"]], "Other changes": [[1028, "other-changes"]], "Version 0.10": [[1028, "version-0-10"]], "Version 0.9": [[1028, "version-0-9"]], "Version 0.8": [[1028, "version-0-8"]], "Version 0.7": [[1028, "version-0-7"]], "Version 0.6": [[1028, "version-0-6"]], "Version 0.5": [[1028, "version-0-5"]], "New classes": [[1028, "new-classes"]], "Fixes": [[1028, "fixes"]], "External dependencies": [[1028, "external-dependencies"]], "Removed modules": [[1028, "removed-modules"]], "Misc": [[1028, "misc"]], "Version 0.4": [[1028, "version-0-4"]], "Earlier versions": [[1028, "earlier-versions"]], "Version 0.13.1": [[1029, "version-0-13-1"]], "Version 0.13": [[1029, "version-0-13"]], "New Estimator Classes": [[1029, "new-estimator-classes"]], "Version 0.14": [[1030, "version-0-14"]], "Version 0.15.2": [[1031, "version-0-15-2"]], "Bug fixes": [[1031, "bug-fixes"], [1031, "id1"], [1031, "id2"], [1032, "bug-fixes"], [1032, "id2"], [1033, "bug-fixes"], [1033, "id2"], [1034, "bug-fixes"], [1034, "id4"], [1035, "bug-fixes"], [1035, "id3"]], "Version 0.15.1": [[1031, "version-0-15-1"]], "Version 0.15": [[1031, "version-0-15"]], "New features": [[1031, "new-features"], [1032, "new-features"], [1033, "new-features"], [1034, "new-features"], [1035, "new-features"]], "Enhancements": [[1031, "enhancements"], [1032, "enhancements"], [1033, "enhancements"], [1034, "enhancements"], [1034, "id3"], [1035, "enhancements"], [1035, "id2"]], "Documentation improvements": [[1031, "documentation-improvements"], [1032, "documentation-improvements"]], "Version 0.16.1": [[1032, "version-0-16-1"]], "Version 0.16": [[1032, "version-0-16"]], "Code Contributors": [[1032, "code-contributors"], [1033, "code-contributors"], [1034, "code-contributors"], [1034, "id6"]], "Version 0.17.1": [[1033, "version-0-17-1"]], "Version 0.17": [[1033, "version-0-17"]], "Version 0.18.2": [[1034, "version-0-18-2"]], "Last release with Python 2.6 support": [[1034, null], [1034, null]], "Version 0.18.1": [[1034, "version-0-18-1"]], "Version 0.18": [[1034, "version-0-18"]], "Model Selection Enhancements and API Changes": [[1034, "model-selection-enhancements-and-api-changes"]], "Version 0.19.2": [[1035, "version-0-19-2"]], "Related changes": [[1035, "related-changes"]], "Version 0.19.1": [[1035, "version-0-19-1"]], "API changes": [[1035, "api-changes"]], "Code and Documentation Contributors": [[1035, "code-and-documentation-contributors"], [1035, "id9"], [1036, "code-and-documentation-contributors"], [1036, "id8"], [1036, "id21"], [1036, "id41"], [1037, "code-and-documentation-contributors"], [1038, "code-and-documentation-contributors"], [1039, "code-and-documentation-contributors"], [1040, "code-and-documentation-contributors"], [1041, "code-and-documentation-contributors"], [1042, "code-and-documentation-contributors"], [1043, "code-and-documentation-contributors"], [1044, "code-and-documentation-contributors"], [1045, "code-and-documentation-contributors"]], "Version 0.19": [[1035, "version-0-19"]], "Changed models": [[1035, "changed-models"], [1036, "changed-models"], [1036, "id9"], [1036, "id22"], [1037, "changed-models"], [1037, "id6"], [1038, "changed-models"], [1039, "changed-models"], [1039, "id3"], [1040, "changed-models"], [1041, "changed-models"], [1042, "changed-models"], [1042, "id6"], [1043, "changed-models"], [1043, "id7"], [1044, "changed-models"], [1044, "id4"], [1045, "changed-models"]], "Version 0.20.4": [[1036, "version-0-20-4"]], "sklearn.cluster": [[1036, "sklearn-cluster"], [1036, "id2"], [1036, "id11"], [1036, "id24"], [1037, "sklearn-cluster"], [1037, "id8"], [1038, "sklearn-cluster"], [1038, "id5"], [1039, "sklearn-cluster"], [1039, "id2"], [1039, "id5"], [1040, "sklearn-cluster"], [1041, "sklearn-cluster"], [1041, "id2"], [1041, "id9"], [1042, "sklearn-cluster"], [1042, "id8"], [1043, "sklearn-cluster"], [1043, "id12"], [1044, "sklearn-cluster"], [1044, "id8"], [1045, "sklearn-cluster"]], "sklearn.compose": [[1036, "sklearn-compose"], [1036, "id3"], [1036, "id6"], [1036, "id12"], [1036, "id25"], [1037, "sklearn-compose"], [1037, "id9"], [1038, "sklearn-compose"], [1039, "sklearn-compose"], [1040, "sklearn-compose"], [1040, "id5"], [1041, "sklearn-compose"], [1042, "sklearn-compose"], [1043, "sklearn-compose"], [1044, "sklearn-compose"], [1045, "sklearn-compose"]], "sklearn.decomposition": [[1036, "sklearn-decomposition"], [1036, "id4"], [1036, "id14"], [1036, "id28"], [1037, "sklearn-decomposition"], [1037, "id11"], [1038, "sklearn-decomposition"], [1039, "sklearn-decomposition"], [1039, "id6"], [1040, "sklearn-decomposition"], [1040, "id7"], [1041, "sklearn-decomposition"], [1041, "id11"], [1042, "sklearn-decomposition"], [1042, "id10"], [1043, "sklearn-decomposition"], [1043, "id14"], [1044, "sklearn-decomposition"], [1044, "id10"], [1045, "sklearn-decomposition"]], "sklearn.model_selection": [[1036, "sklearn-model-selection"], [1036, "id35"], [1037, "sklearn-model-selection"], [1038, "sklearn-model-selection"], [1038, "id9"], [1038, "id13"], [1039, "sklearn-model-selection"], [1040, "sklearn-model-selection"], [1040, "id13"], [1041, "sklearn-model-selection"], [1042, "sklearn-model-selection"], [1043, "sklearn-model-selection"], [1043, "id20"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"]], "sklearn.neighbors": [[1036, "sklearn-neighbors"], [1036, "id7"], [1036, "id18"], [1036, "id36"], [1037, "sklearn-neighbors"], [1037, "id5"], [1037, "id17"], [1038, "sklearn-neighbors"], [1038, "id11"], [1040, "sklearn-neighbors"], [1041, "sklearn-neighbors"], [1041, "id5"], [1041, "id18"], [1042, "sklearn-neighbors"], [1043, "sklearn-neighbors"], [1044, "sklearn-neighbors"], [1044, "id16"], [1045, "sklearn-neighbors"]], "Version 0.20.3": [[1036, "version-0-20-3"]], "sklearn.covariance": [[1036, "sklearn-covariance"], [1036, "id26"], [1040, "sklearn-covariance"], [1041, "sklearn-covariance"], [1042, "sklearn-covariance"], [1044, "sklearn-covariance"]], "sklearn.datasets": [[1036, "sklearn-datasets"], [1036, "id13"], [1036, "id27"], [1037, "sklearn-datasets"], [1037, "id10"], [1038, "sklearn-datasets"], [1039, "sklearn-datasets"], [1040, "sklearn-datasets"], [1041, "sklearn-datasets"], [1041, "id10"], [1042, "sklearn-datasets"], [1042, "id9"], [1043, "sklearn-datasets"], [1043, "id13"], [1044, "sklearn-datasets"], [1044, "id9"], [1045, "sklearn-datasets"]], "sklearn.feature_extraction": [[1036, "sklearn-feature-extraction"], [1036, "id15"], [1036, "id30"], [1037, "sklearn-feature-extraction"], [1038, "sklearn-feature-extraction"], [1039, "sklearn-feature-extraction"], [1039, "id8"], [1040, "sklearn-feature-extraction"], [1040, "id9"], [1041, "sklearn-feature-extraction"], [1041, "id13"], [1042, "sklearn-feature-extraction"], [1043, "sklearn-feature-extraction"], [1044, "sklearn-feature-extraction"]], "sklearn.impute": [[1036, "sklearn-impute"], [1036, "id31"], [1037, "sklearn-impute"], [1037, "id13"], [1038, "sklearn-impute"], [1038, "id6"], [1039, "sklearn-impute"], [1040, "sklearn-impute"], [1041, "sklearn-impute"], [1042, "sklearn-impute"], [1042, "id12"], [1043, "sklearn-impute"], [1044, "sklearn-impute"], [1044, "id13"]], "sklearn.linear_model": [[1036, "sklearn-linear-model"], [1036, "id16"], [1036, "id32"], [1037, "sklearn-linear-model"], [1037, "id15"], [1038, "sklearn-linear-model"], [1039, "sklearn-linear-model"], [1039, "id9"], [1040, "sklearn-linear-model"], [1040, "id11"], [1041, "sklearn-linear-model"], [1041, "id4"], [1041, "id15"], [1042, "sklearn-linear-model"], [1042, "id13"], [1043, "sklearn-linear-model"], [1043, "id18"], [1044, "sklearn-linear-model"], [1045, "sklearn-linear-model"]], "sklearn.preprocessing": [[1036, "sklearn-preprocessing"], [1036, "id19"], [1036, "id37"], [1037, "sklearn-preprocessing"], [1037, "id18"], [1038, "sklearn-preprocessing"], [1038, "id12"], [1039, "sklearn-preprocessing"], [1040, "sklearn-preprocessing"], [1040, "id15"], [1041, "sklearn-preprocessing"], [1041, "id20"], [1042, "sklearn-preprocessing"], [1042, "id4"], [1042, "id16"], [1043, "sklearn-preprocessing"], [1043, "id4"], [1043, "id22"], [1044, "sklearn-preprocessing"], [1044, "id17"], [1045, "sklearn-preprocessing"]], "sklearn.svm": [[1036, "sklearn-svm"], [1036, "id38"], [1037, "sklearn-svm"], [1038, "sklearn-svm"], [1039, "sklearn-svm"], [1040, "sklearn-svm"], [1041, "sklearn-svm"], [1041, "id21"], [1042, "sklearn-svm"], [1043, "sklearn-svm"], [1044, "sklearn-svm"]], "Version 0.20.2": [[1036, "version-0-20-2"]], "sklearn.metrics": [[1036, "sklearn-metrics"], [1036, "id17"], [1036, "id33"], [1037, "sklearn-metrics"], [1037, "id4"], [1037, "id16"], [1038, "sklearn-metrics"], [1038, "id2"], [1038, "id8"], [1039, "sklearn-metrics"], [1039, "id10"], [1040, "sklearn-metrics"], [1040, "id2"], [1040, "id12"], [1041, "sklearn-metrics"], [1041, "id17"], [1042, "sklearn-metrics"], [1042, "id3"], [1042, "id15"], [1043, "sklearn-metrics"], [1044, "sklearn-metrics"], [1044, "id2"], [1044, "id14"], [1045, "sklearn-metrics"]], "sklearn.utils": [[1036, "sklearn-utils"], [1036, "id20"], [1036, "id39"], [1037, "sklearn-utils"], [1038, "sklearn-utils"], [1038, "id14"], [1039, "sklearn-utils"], [1039, "id12"], [1040, "sklearn-utils"], [1040, "id18"], [1041, "sklearn-utils"], [1041, "id6"], [1041, "id23"], [1042, "sklearn-utils"], [1042, "id18"], [1043, "sklearn-utils"], [1043, "id6"], [1043, "id24"], [1044, "sklearn-utils"], [1045, "sklearn-utils"]], "Version 0.20.1": [[1036, "version-0-20-1"]], "sklearn.ensemble": [[1036, "sklearn-ensemble"], [1036, "id29"], [1037, "sklearn-ensemble"], [1037, "id12"], [1038, "sklearn-ensemble"], [1039, "sklearn-ensemble"], [1039, "id7"], [1040, "sklearn-ensemble"], [1040, "id8"], [1041, "sklearn-ensemble"], [1041, "id3"], [1041, "id12"], [1042, "sklearn-ensemble"], [1043, "sklearn-ensemble"], [1043, "id3"], [1043, "id15"], [1044, "sklearn-ensemble"], [1044, "id11"], [1045, "sklearn-ensemble"]], "sklearn.mixture": [[1036, "sklearn-mixture"], [1036, "id34"], [1037, "sklearn-mixture"], [1041, "sklearn-mixture"], [1042, "sklearn-mixture"], [1044, "sklearn-mixture"], [1044, "id15"]], "Version 0.20.0": [[1036, "version-0-20-0"]], "Known Major Bugs": [[1036, "known-major-bugs"], [1037, "known-major-bugs"]], "sklearn.discriminant_analysis": [[1036, "sklearn-discriminant-analysis"], [1037, "sklearn-discriminant-analysis"], [1040, "sklearn-discriminant-analysis"], [1042, "sklearn-discriminant-analysis"], [1043, "sklearn-discriminant-analysis"], [1044, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[1036, "sklearn-dummy"], [1037, "sklearn-dummy"], [1038, "sklearn-dummy"], [1041, "sklearn-dummy"], [1042, "sklearn-dummy"]], "sklearn.feature_selection": [[1036, "sklearn-feature-selection"], [1038, "sklearn-feature-selection"], [1039, "sklearn-feature-selection"], [1040, "sklearn-feature-selection"], [1041, "sklearn-feature-selection"], [1041, "id14"], [1042, "sklearn-feature-selection"], [1042, "id2"], [1042, "id11"], [1043, "sklearn-feature-selection"], [1043, "id16"], [1044, "sklearn-feature-selection"], [1044, "id12"], [1045, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[1036, "sklearn-gaussian-process"], [1038, "sklearn-gaussian-process"], [1039, "sklearn-gaussian-process"], [1040, "sklearn-gaussian-process"], [1040, "id10"], [1041, "sklearn-gaussian-process"], [1042, "sklearn-gaussian-process"], [1043, "sklearn-gaussian-process"], [1044, "sklearn-gaussian-process"]], "sklearn.isotonic": [[1036, "sklearn-isotonic"], [1037, "sklearn-isotonic"], [1038, "sklearn-isotonic"], [1040, "sklearn-isotonic"], [1042, "sklearn-isotonic"], [1043, "sklearn-isotonic"]], "sklearn.manifold": [[1036, "sklearn-manifold"], [1037, "sklearn-manifold"], [1038, "sklearn-manifold"], [1039, "sklearn-manifold"], [1040, "sklearn-manifold"], [1041, "sklearn-manifold"], [1041, "id16"], [1042, "sklearn-manifold"], [1042, "id14"], [1043, "sklearn-manifold"], [1043, "id19"], [1044, "sklearn-manifold"]], "sklearn.multioutput": [[1036, "sklearn-multioutput"], [1037, "sklearn-multioutput"], [1038, "sklearn-multioutput"], [1039, "sklearn-multioutput"], [1040, "sklearn-multioutput"], [1040, "id14"], [1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"]], "sklearn.naive_bayes": [[1036, "sklearn-naive-bayes"], [1038, "sklearn-naive-bayes"], [1038, "id10"], [1039, "sklearn-naive-bayes"], [1040, "sklearn-naive-bayes"], [1041, "sklearn-naive-bayes"], [1043, "sklearn-naive-bayes"], [1044, "sklearn-naive-bayes"]], "sklearn.neural_network": [[1036, "sklearn-neural-network"], [1037, "sklearn-neural-network"], [1038, "sklearn-neural-network"], [1039, "sklearn-neural-network"], [1040, "sklearn-neural-network"], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1043, "sklearn-neural-network"], [1043, "id21"], [1044, "sklearn-neural-network"]], "sklearn.pipeline": [[1036, "sklearn-pipeline"], [1037, "sklearn-pipeline"], [1038, "sklearn-pipeline"], [1039, "sklearn-pipeline"], [1040, "sklearn-pipeline"], [1041, "sklearn-pipeline"], [1041, "id19"], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"]], "sklearn.tree": [[1036, "sklearn-tree"], [1037, "sklearn-tree"], [1037, "id19"], [1038, "sklearn-tree"], [1039, "sklearn-tree"], [1040, "sklearn-tree"], [1040, "id17"], [1041, "sklearn-tree"], [1041, "id22"], [1042, "sklearn-tree"], [1042, "id5"], [1042, "id17"], [1043, "sklearn-tree"], [1043, "id5"], [1043, "id23"], [1044, "sklearn-tree"], [1044, "id3"], [1044, "id18"], [1045, "sklearn-tree"]], "Multiple modules": [[1036, "multiple-modules"], [1037, "multiple-modules"]], "Changes to estimator checks": [[1036, "changes-to-estimator-checks"], [1037, "changes-to-estimator-checks"], [1038, "changes-to-estimator-checks"]], "Version 0.21.3": [[1037, "version-0-21-3"]], "Legend for changelogs": [[1037, "legend-for-changelogs"], [1038, "legend-for-changelogs"], [1039, "legend-for-changelogs"], [1040, "legend-for-changelogs"], [1041, "legend-for-changelogs"], [1042, "legend-for-changelogs"], [1043, "legend-for-changelogs"], [1044, "legend-for-changelogs"], [1045, "legend-for-changelogs"]], "sklearn.inspection": [[1037, "sklearn-inspection"], [1037, "id3"], [1037, "id14"], [1038, "sklearn-inspection"], [1038, "id7"], [1039, "sklearn-inspection"], [1039, "id11"], [1040, "sklearn-inspection"], [1041, "sklearn-inspection"], [1042, "sklearn-inspection"], [1043, "sklearn-inspection"], [1043, "id17"], [1044, "sklearn-inspection"], [1045, "sklearn-inspection"]], "Version 0.21.2": [[1037, "version-0-21-2"]], "sklearn.utils.sparsefuncs": [[1037, "sklearn-utils-sparsefuncs"]], "Version 0.21.1": [[1037, "version-0-21-1"]], "Version 0.21.0": [[1037, "version-0-21-0"]], "sklearn.base": [[1037, "sklearn-base"], [1038, "sklearn-base"], [1040, "sklearn-base"], [1041, "sklearn-base"], [1042, "sklearn-base"], [1043, "sklearn-base"], [1043, "id2"], [1043, "id10"], [1044, "sklearn-base"], [1045, "sklearn-base"]], "sklearn.calibration": [[1037, "sklearn-calibration"], [1038, "sklearn-calibration"], [1040, "sklearn-calibration"], [1041, "sklearn-calibration"], [1041, "id8"], [1042, "sklearn-calibration"], [1043, "sklearn-calibration"], [1043, "id11"], [1044, "sklearn-calibration"], [1044, "id7"], [1045, "sklearn-calibration"]], "sklearn.externals": [[1037, "sklearn-externals"]], "sklearn.multiclass": [[1037, "sklearn-multiclass"], [1040, "sklearn-multiclass"], [1041, "sklearn-multiclass"], [1042, "sklearn-multiclass"]], "Version 0.22.2.post1": [[1038, "version-0-22-2-post1"]], "Version 0.22.1": [[1038, "version-0-22-1"]], "sklearn.semi_supervised": [[1038, "sklearn-semi-supervised"], [1039, "sklearn-semi-supervised"], [1040, "sklearn-semi-supervised"], [1040, "id3"], [1040, "id16"], [1044, "sklearn-semi-supervised"]], "Version 0.22.0": [[1038, "version-0-22-0"]], "Website update": [[1038, "website-update"]], "Clear definition of the public API": [[1038, "clear-definition-of-the-public-api"]], "Deprecations: using FutureWarning from now on": [[1038, "deprecations-using-futurewarning-from-now-on"]], "sklearn.cross_decomposition": [[1038, "sklearn-cross-decomposition"], [1040, "sklearn-cross-decomposition"], [1040, "id6"], [1042, "sklearn-cross-decomposition"], [1044, "sklearn-cross-decomposition"]], "sklearn.kernel_approximation": [[1038, "sklearn-kernel-approximation"], [1040, "sklearn-kernel-approximation"], [1041, "sklearn-kernel-approximation"], [1042, "sklearn-kernel-approximation"], [1043, "sklearn-kernel-approximation"], [1044, "sklearn-kernel-approximation"]], "Version 0.23.2": [[1039, "version-0-23-2"]], "Version 0.23.1": [[1039, "version-0-23-1"]], "Version 0.23.0": [[1039, "version-0-23-0"]], "Enforcing keyword-only arguments": [[1039, "enforcing-keyword-only-arguments"], [1041, "enforcing-keyword-only-arguments"]], "Version 0.24.2": [[1040, "version-0-24-2"]], "Version 0.24.1": [[1040, "version-0-24-1"]], "Packaging": [[1040, "packaging"]], "Version 0.24.0": [[1040, "version-0-24-0"]], "sklearn.exceptions": [[1040, "sklearn-exceptions"], [1044, "sklearn-exceptions"]], "Version 1.0.2": [[1041, "version-1-0-2"]], "Version 1.0.1": [[1041, "version-1-0-1"]], "Fixed models": [[1041, "fixed-models"]], "Version 1.0.0": [[1041, "version-1-0-0"]], "Minimal dependencies": [[1041, "minimal-dependencies"], [1042, "minimal-dependencies"]], "Version 1.1.3": [[1042, "version-1-1-3"]], "Version 1.1.2": [[1042, "version-1-1-2"]], "Version 1.1.1": [[1042, "version-1-1-1"]], "Version 1.1.0": [[1042, "version-1-1-0"]], "sklearn.random_projection": [[1042, "sklearn-random-projection"]], "Version 1.2.2": [[1043, "version-1-2-2"]], "Version 1.2.1": [[1043, "version-1-2-1"]], "Changes impacting all modules": [[1043, "changes-impacting-all-modules"], [1043, "id8"], [1044, "changes-impacting-all-modules"], [1044, "id5"], [1045, "changes-impacting-all-modules"]], "Version 1.2.0": [[1043, "version-1-2-0"]], "Version 1.3.2": [[1044, "version-1-3-2"]], "Version 1.3.1": [[1044, "version-1-3-1"]], "Version 1.3.0": [[1044, "version-1-3-0"]], "Changed displays": [[1044, "changed-displays"]], "Experimental / Under Development": [[1044, "experimental-under-development"]], "sklearn": [[1044, "sklearn"]], "Version 1.4.0": [[1045, "version-1-4-0"]], "Support for SciPy sparse arrays": [[1045, "support-for-scipy-sparse-arrays"]]}, "indexentries": {"1d": [[393, "term-1d"]], "1d array": [[393, "term-1d-array"]], "2d": [[393, "term-2d"]], "2d array": [[393, "term-2d-array"]], "api": [[393, "term-API"]], "cv splitter": [[393, "term-CV-splitter"]], "slep": [[393, "term-SLEP"]], "sleps": [[393, "term-SLEPs"]], "x": [[393, "term-X"]], "xt": [[393, "term-Xt"]], "y": [[393, "term-Y"], [393, "term-y"]], "_estimator_type": [[393, "term-_estimator_type"]], "array-like": [[393, "term-array-like"]], "attribute": [[393, "term-attribute"]], "attributes": [[393, "term-attributes"]], "backwards compatibility": [[393, "term-backwards-compatibility"]], "binary": [[393, "term-binary"]], "callable": [[393, "term-callable"]], "categorical feature": [[393, "term-categorical-feature"]], "class_weight": [[393, "term-class_weight"]], "classes_": [[393, "term-classes_"]], "classifier": [[393, "term-classifier"]], "classifiers": [[393, "term-classifiers"]], "clone": [[393, "term-clone"]], "cloned": [[393, "term-cloned"]], "clusterer": [[393, "term-clusterer"]], "clusterers": [[393, "term-clusterers"]], "coef_": [[393, "term-coef_"]], "common tests": [[393, "term-common-tests"]], "components_": [[393, "term-components_"]], "consumer": [[393, "term-consumer"]], "continuous": [[393, "term-continuous"]], "continuous multi-output": [[393, "term-continuous-multi-output"]], "continuous multioutput": [[393, "term-continuous-multioutput"]], "cross fitting": [[393, "term-0"]], "cross validation": [[393, "term-1"]], "cross-fitting": [[393, "term-cross-fitting"]], "cross-validation": [[393, "term-cross-validation"]], "cross-validation estimator": [[393, "term-cross-validation-estimator"]], "cross-validation generator": [[393, "term-cross-validation-generator"]], "cross-validation splitter": [[393, "term-cross-validation-splitter"]], "cv": [[393, "term-cv"]], "data leakage": [[393, "term-data-leakage"]], "data type": [[393, "term-data-type"]], "decision_function": [[393, "term-decision_function"]], "density estimator": [[393, "term-density-estimator"]], "deprecation": [[393, "term-deprecation"]], "dimensionality": [[393, "term-dimensionality"]], "docstring": [[393, "term-docstring"]], "double underscore": [[393, "term-double-underscore"]], "double underscore notation": [[393, "term-double-underscore-notation"]], "dtype": [[393, "term-dtype"]], "duck typing": [[393, "term-duck-typing"]], "early stopping": [[393, "term-early-stopping"]], "embedding_": [[393, "term-embedding_"]], "estimator": [[393, "term-estimator"]], "estimator instance": [[393, "term-estimator-instance"]], "estimator tags": [[393, "term-estimator-tags"]], "estimators": [[393, "term-estimators"]], "evaluation metric": [[393, "term-evaluation-metric"]], "evaluation metrics": [[393, "term-evaluation-metrics"]], "examples": [[393, "term-examples"]], "experimental": [[393, "term-experimental"]], "feature": [[393, "term-feature"]], "feature extractor": [[393, "term-feature-extractor"]], "feature extractors": [[393, "term-feature-extractors"]], "feature vector": [[393, "term-feature-vector"]], "feature_importances_": [[393, "term-feature_importances_"]], "features": [[393, "term-features"]], "fit": [[393, "term-fit"]], "fit_predict": [[393, "term-fit_predict"]], "fit_transform": [[393, "term-fit_transform"]], "fitted": [[393, "term-fitted"]], "fitting": [[393, "term-fitting"]], "function": [[393, "term-function"]], "gallery": [[393, "term-gallery"]], "get_feature_names_out": [[393, "term-get_feature_names_out"]], "get_n_splits": [[393, "term-get_n_splits"]], "get_params": [[393, "term-get_params"]], "groups": [[393, "term-groups"]], "hyper-parameter": [[393, "term-hyper-parameter"]], "hyperparameter": [[393, "term-hyperparameter"]], "imputation": [[393, "term-imputation"]], "impute": [[393, "term-impute"]], "indexable": [[393, "term-indexable"]], "induction": [[393, "term-induction"]], "inductive": [[393, "term-inductive"]], "joblib": [[393, "term-joblib"]], "kernel": [[393, "term-kernel"]], "label indicator matrix": [[393, "term-label-indicator-matrix"]], "labels_": [[393, "term-labels_"]], "leakage": [[393, "term-leakage"]], "max_iter": [[393, "term-max_iter"]], "memmapping": [[393, "term-memmapping"]], "memory": [[393, "term-memory"]], "memory map": [[393, "term-memory-map"]], "memory mapping": [[393, "term-memory-mapping"]], "meta-estimator": [[393, "term-meta-estimator"]], "meta-estimators": [[393, "term-meta-estimators"]], "metadata": [[393, "term-metadata"]], "metaestimator": [[393, "term-metaestimator"]], "metaestimators": [[393, "term-metaestimators"]], "metric": [[393, "term-metric"]], "missing values": [[393, "term-missing-values"]], "multi-class": [[393, "term-multi-class"]], "multi-class multi-output": [[393, "term-multi-class-multi-output"]], "multi-label": [[393, "term-multi-label"]], "multi-output": [[393, "term-multi-output"]], "multi-output continuous": [[393, "term-multi-output-continuous"]], "multi-output multi-class": [[393, "term-multi-output-multi-class"]], "multiclass": [[393, "term-multiclass"]], "multiclass multioutput": [[393, "term-multiclass-multioutput"]], "multilabel": [[393, "term-multilabel"]], "multilabel indicator matrices": [[393, "term-multilabel-indicator-matrices"]], "multilabel indicator matrix": [[393, "term-multilabel-indicator-matrix"]], "multioutput": [[393, "term-multioutput"]], "multioutput continuous": [[393, "term-multioutput-continuous"]], "multioutput multiclass": [[393, "term-multioutput-multiclass"]], "n_components": [[393, "term-n_components"]], "n_features": [[393, "term-n_features"]], "n_iter_": [[393, "term-n_iter_"]], "n_iter_no_change": [[393, "term-n_iter_no_change"]], "n_jobs": [[393, "term-n_jobs"]], "n_outputs": [[393, "term-n_outputs"]], "n_samples": [[393, "term-n_samples"]], "n_targets": [[393, "term-n_targets"]], "narrative docs": [[393, "term-narrative-docs"]], "narrative documentation": [[393, "term-narrative-documentation"]], "np": [[393, "term-np"]], "online learning": [[393, "term-online-learning"]], "out-of-core": [[393, "term-out-of-core"]], "outlier detector": [[393, "term-outlier-detector"]], "outlier detectors": [[393, "term-outlier-detectors"]], "outputs": [[393, "term-outputs"]], "pair": [[393, "term-pair"]], "pairwise metric": [[393, "term-pairwise-metric"]], "pairwise metrics": [[393, "term-pairwise-metrics"]], "param": [[393, "term-param"]], "parameter": [[393, "term-parameter"]], "parameters": [[393, "term-parameters"]], "params": [[393, "term-params"]], "partial_fit": [[393, "term-partial_fit"]], "pd": [[393, "term-pd"]], "pos_label": [[393, "term-pos_label"]], "precomputed": [[393, "term-precomputed"]], "predict": [[393, "term-predict"]], "predict_log_proba": [[393, "term-predict_log_proba"]], "predict_proba": [[393, "term-predict_proba"]], "predictor": [[393, "term-predictor"]], "predictors": [[393, "term-predictors"]], "random_state": [[393, "term-random_state"]], "rectangular": [[393, "term-rectangular"]], "regressor": [[393, "term-regressor"]], "regressors": [[393, "term-regressors"]], "router": [[393, "term-router"]], "sample": [[393, "term-sample"]], "sample properties": [[393, "term-sample-properties"]], "sample property": [[393, "term-sample-property"]], "sample_weight": [[393, "term-sample_weight"]], "samples": [[393, "term-samples"]], "scikit-learn enhancement proposals": [[393, "term-scikit-learn-enhancement-proposals"]], "scikit-learn-contrib": [[393, "term-scikit-learn-contrib"]], "score": [[393, "term-score"]], "score_samples": [[393, "term-score_samples"]], "scorer": [[393, "term-scorer"]], "scoring": [[393, "term-scoring"]], "semi-supervised": [[393, "term-semi-supervised"]], "semi-supervised learning": [[393, "term-semi-supervised-learning"]], "semisupervised": [[393, "term-semisupervised"]], "set_params": [[393, "term-set_params"]], "sparse graph": [[393, "term-sparse-graph"]], "sparse matrix": [[393, "term-sparse-matrix"]], "split": [[393, "term-split"]], "stateless": [[393, "term-stateless"]], "supervised": [[393, "term-supervised"]], "supervised learning": [[393, "term-supervised-learning"]], "target": [[393, "term-target"]], "targets": [[393, "term-targets"]], "transduction": [[393, "term-transduction"]], "transductive": [[393, "term-transductive"]], "transform": [[393, "term-transform"]], "transformer": [[393, "term-transformer"]], "transformers": [[393, "term-transformers"]], "unlabeled": [[393, "term-unlabeled"]], "unlabeled data": [[393, "term-unlabeled-data"]], "unsupervised": [[393, "term-unsupervised"]], "unsupervised learning": [[393, "term-unsupervised-learning"]], "vectorizer": [[393, "term-vectorizer"]], "vectorizers": [[393, "term-vectorizers"]], "verbose": [[393, "term-verbose"]], "warm_start": [[393, "term-warm_start"]], "module": [[405, "module-sklearn"], [405, "module-sklearn.base"], [405, "module-sklearn.calibration"], [405, "module-sklearn.cluster"], [405, "module-sklearn.compose"], [405, "module-sklearn.covariance"], [405, "module-sklearn.cross_decomposition"], [405, "module-sklearn.datasets"], [405, "module-sklearn.decomposition"], [405, "module-sklearn.discriminant_analysis"], [405, "module-sklearn.dummy"], [405, "module-sklearn.ensemble"], [405, "module-sklearn.exceptions"], [405, "module-sklearn.experimental"], [405, "module-sklearn.feature_extraction"], [405, "module-sklearn.feature_extraction.image"], [405, "module-sklearn.feature_extraction.text"], [405, "module-sklearn.feature_selection"], [405, "module-sklearn.gaussian_process"], [405, "module-sklearn.gaussian_process.kernels"], [405, "module-sklearn.impute"], [405, "module-sklearn.inspection"], [405, "module-sklearn.isotonic"], [405, "module-sklearn.kernel_approximation"], [405, "module-sklearn.kernel_ridge"], [405, "module-sklearn.linear_model"], [405, "module-sklearn.manifold"], [405, "module-sklearn.metrics"], [405, "module-sklearn.metrics.cluster"], [405, "module-sklearn.metrics.pairwise"], [405, "module-sklearn.mixture"], [405, "module-sklearn.model_selection"], [405, "module-sklearn.multiclass"], [405, "module-sklearn.multioutput"], [405, "module-sklearn.naive_bayes"], [405, "module-sklearn.neighbors"], [405, "module-sklearn.neural_network"], [405, "module-sklearn.pipeline"], [405, "module-sklearn.preprocessing"], [405, "module-sklearn.random_projection"], [405, "module-sklearn.semi_supervised"], [405, "module-sklearn.svm"], [405, "module-sklearn.tree"], [405, "module-sklearn.utils"], [405, "module-sklearn.utils.arrayfuncs"], [405, "module-sklearn.utils.class_weight"], [405, "module-sklearn.utils.discovery"], [405, "module-sklearn.utils.estimator_checks"], [405, "module-sklearn.utils.extmath"], [405, "module-sklearn.utils.graph"], [405, "module-sklearn.utils.metadata_routing"], [405, "module-sklearn.utils.metaestimators"], [405, "module-sklearn.utils.multiclass"], [405, "module-sklearn.utils.parallel"], [405, "module-sklearn.utils.random"], [405, "module-sklearn.utils.sparsefuncs"], [405, "module-sklearn.utils.sparsefuncs_fast"], [405, "module-sklearn.utils.validation"], [576, "module-sklearn.experimental.enable_halving_search_cv"], [577, "module-sklearn.experimental.enable_iterative_imputer"]], "sklearn": [[405, "module-sklearn"]], "sklearn.base": [[405, "module-sklearn.base"]], "sklearn.calibration": [[405, "module-sklearn.calibration"]], "sklearn.cluster": [[405, "module-sklearn.cluster"]], "sklearn.compose": [[405, "module-sklearn.compose"]], "sklearn.covariance": [[405, "module-sklearn.covariance"]], "sklearn.cross_decomposition": [[405, "module-sklearn.cross_decomposition"]], "sklearn.datasets": [[405, "module-sklearn.datasets"]], "sklearn.decomposition": [[405, "module-sklearn.decomposition"]], "sklearn.discriminant_analysis": [[405, "module-sklearn.discriminant_analysis"]], "sklearn.dummy": [[405, "module-sklearn.dummy"]], "sklearn.ensemble": [[405, "module-sklearn.ensemble"]], "sklearn.exceptions": [[405, "module-sklearn.exceptions"]], "sklearn.experimental": [[405, "module-sklearn.experimental"]], "sklearn.feature_extraction": [[405, "module-sklearn.feature_extraction"]], "sklearn.feature_extraction.image": [[405, "module-sklearn.feature_extraction.image"]], "sklearn.feature_extraction.text": [[405, "module-sklearn.feature_extraction.text"]], "sklearn.feature_selection": [[405, "module-sklearn.feature_selection"]], "sklearn.gaussian_process": [[405, "module-sklearn.gaussian_process"]], "sklearn.gaussian_process.kernels": [[405, "module-sklearn.gaussian_process.kernels"]], "sklearn.impute": [[405, "module-sklearn.impute"]], "sklearn.inspection": [[405, "module-sklearn.inspection"]], "sklearn.isotonic": [[405, "module-sklearn.isotonic"]], "sklearn.kernel_approximation": [[405, "module-sklearn.kernel_approximation"]], "sklearn.kernel_ridge": [[405, "module-sklearn.kernel_ridge"]], "sklearn.linear_model": [[405, "module-sklearn.linear_model"]], "sklearn.manifold": [[405, "module-sklearn.manifold"]], "sklearn.metrics": [[405, "module-sklearn.metrics"]], "sklearn.metrics.cluster": [[405, "module-sklearn.metrics.cluster"]], "sklearn.metrics.pairwise": [[405, "module-sklearn.metrics.pairwise"]], "sklearn.mixture": [[405, "module-sklearn.mixture"]], "sklearn.model_selection": [[405, "module-sklearn.model_selection"]], "sklearn.multiclass": [[405, "module-sklearn.multiclass"]], "sklearn.multioutput": [[405, "module-sklearn.multioutput"]], "sklearn.naive_bayes": [[405, "module-sklearn.naive_bayes"]], "sklearn.neighbors": [[405, "module-sklearn.neighbors"]], "sklearn.neural_network": [[405, "module-sklearn.neural_network"]], "sklearn.pipeline": [[405, "module-sklearn.pipeline"]], "sklearn.preprocessing": [[405, "module-sklearn.preprocessing"]], "sklearn.random_projection": [[405, "module-sklearn.random_projection"]], "sklearn.semi_supervised": [[405, "module-sklearn.semi_supervised"]], "sklearn.svm": [[405, "module-sklearn.svm"]], "sklearn.tree": [[405, "module-sklearn.tree"]], "sklearn.utils": [[405, "module-sklearn.utils"]], "sklearn.utils.arrayfuncs": [[405, "module-sklearn.utils.arrayfuncs"]], "sklearn.utils.class_weight": [[405, "module-sklearn.utils.class_weight"]], "sklearn.utils.discovery": [[405, "module-sklearn.utils.discovery"]], "sklearn.utils.estimator_checks": [[405, "module-sklearn.utils.estimator_checks"]], "sklearn.utils.extmath": [[405, "module-sklearn.utils.extmath"]], "sklearn.utils.graph": [[405, "module-sklearn.utils.graph"]], "sklearn.utils.metadata_routing": [[405, "module-sklearn.utils.metadata_routing"]], "sklearn.utils.metaestimators": [[405, "module-sklearn.utils.metaestimators"]], "sklearn.utils.multiclass": [[405, "module-sklearn.utils.multiclass"]], "sklearn.utils.parallel": [[405, "module-sklearn.utils.parallel"]], "sklearn.utils.random": [[405, "module-sklearn.utils.random"]], "sklearn.utils.sparsefuncs": [[405, "module-sklearn.utils.sparsefuncs"]], "sklearn.utils.sparsefuncs_fast": [[405, "module-sklearn.utils.sparsefuncs_fast"]], "sklearn.utils.validation": [[405, "module-sklearn.utils.validation"]], "dbscan() (in module sklearn.cluster)": [[417, "sklearn.cluster.dbscan"]], "fastica() (in module sklearn.decomposition)": [[418, "sklearn.decomposition.fastica"]], "oas() (in module sklearn.covariance)": [[419, "sklearn.covariance.oas"]], "baseestimator (class in sklearn.base)": [[420, "sklearn.base.BaseEstimator"]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[420, "sklearn.base.BaseEstimator.get_metadata_routing"]], "get_params() (sklearn.base.baseestimator method)": [[420, "sklearn.base.BaseEstimator.get_params"]], "set_params() (sklearn.base.baseestimator method)": [[420, "sklearn.base.BaseEstimator.set_params"]], "biclustermixin (class in sklearn.base)": [[421, "sklearn.base.BiclusterMixin"]], "biclusters_ (sklearn.base.biclustermixin property)": [[421, "sklearn.base.BiclusterMixin.biclusters_"]], "get_indices() (sklearn.base.biclustermixin method)": [[421, "sklearn.base.BiclusterMixin.get_indices"]], "get_shape() (sklearn.base.biclustermixin method)": [[421, "sklearn.base.BiclusterMixin.get_shape"]], "get_submatrix() (sklearn.base.biclustermixin method)": [[421, "sklearn.base.BiclusterMixin.get_submatrix"]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[422, "sklearn.base.ClassNamePrefixFeaturesOutMixin"]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[422, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out"]], "classifiermixin (class in sklearn.base)": [[423, "sklearn.base.ClassifierMixin"]], "score() (sklearn.base.classifiermixin method)": [[423, "sklearn.base.ClassifierMixin.score"]], "clustermixin (class in sklearn.base)": [[424, "sklearn.base.ClusterMixin"]], "fit_predict() (sklearn.base.clustermixin method)": [[424, "sklearn.base.ClusterMixin.fit_predict"]], "densitymixin (class in sklearn.base)": [[425, "sklearn.base.DensityMixin"]], "score() (sklearn.base.densitymixin method)": [[425, "sklearn.base.DensityMixin.score"]], "metaestimatormixin (class in sklearn.base)": [[426, "sklearn.base.MetaEstimatorMixin"]], "onetoonefeaturemixin (class in sklearn.base)": [[427, "sklearn.base.OneToOneFeatureMixin"]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[427, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out"]], "outliermixin (class in sklearn.base)": [[428, "sklearn.base.OutlierMixin"]], "fit_predict() (sklearn.base.outliermixin method)": [[428, "sklearn.base.OutlierMixin.fit_predict"]], "regressormixin (class in sklearn.base)": [[429, "sklearn.base.RegressorMixin"]], "score() (sklearn.base.regressormixin method)": [[429, "sklearn.base.RegressorMixin.score"]], "transformermixin (class in sklearn.base)": [[430, "sklearn.base.TransformerMixin"]], "fit_transform() (sklearn.base.transformermixin method)": [[430, "sklearn.base.TransformerMixin.fit_transform"]], "set_output() (sklearn.base.transformermixin method)": [[430, "sklearn.base.TransformerMixin.set_output"]], "clone() (in module sklearn.base)": [[431, "sklearn.base.clone"]], "is_classifier() (in module sklearn.base)": [[432, "sklearn.base.is_classifier"]], "is_regressor() (in module sklearn.base)": [[433, "sklearn.base.is_regressor"]], "calibratedclassifiercv (class in sklearn.calibration)": [[434, "sklearn.calibration.CalibratedClassifierCV"]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.fit"]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing"]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.get_params"]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.predict"]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.predict_proba"]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.score"]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.set_fit_request"]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.set_params"]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[434, "sklearn.calibration.CalibratedClassifierCV.set_score_request"]], "calibrationdisplay (class in sklearn.calibration)": [[435, "sklearn.calibration.CalibrationDisplay"]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[435, "sklearn.calibration.CalibrationDisplay.from_estimator"]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[435, "sklearn.calibration.CalibrationDisplay.from_predictions"]], "plot() (sklearn.calibration.calibrationdisplay method)": [[435, "sklearn.calibration.CalibrationDisplay.plot"]], "calibration_curve() (in module sklearn.calibration)": [[436, "sklearn.calibration.calibration_curve"]], "affinitypropagation (class in sklearn.cluster)": [[437, "sklearn.cluster.AffinityPropagation"]], "fit() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.fit"]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.fit_predict"]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.get_metadata_routing"]], "get_params() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.get_params"]], "predict() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.predict"]], "set_params() (sklearn.cluster.affinitypropagation method)": [[437, "sklearn.cluster.AffinityPropagation.set_params"]], "agglomerativeclustering (class in sklearn.cluster)": [[438, "sklearn.cluster.AgglomerativeClustering"]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.fit"]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.get_params"]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[438, "sklearn.cluster.AgglomerativeClustering.set_params"]], "birch (class in sklearn.cluster)": [[439, "sklearn.cluster.Birch"]], "fit() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.fit"]], "fit_predict() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.fit_predict"]], "fit_transform() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.fit_transform"]], "get_feature_names_out() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.get_metadata_routing"]], "get_params() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.get_params"]], "partial_fit() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.partial_fit"]], "predict() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.predict"]], "set_output() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.set_output"]], "set_params() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.set_params"]], "transform() (sklearn.cluster.birch method)": [[439, "sklearn.cluster.Birch.transform"]], "bisectingkmeans (class in sklearn.cluster)": [[440, "sklearn.cluster.BisectingKMeans"]], "fit() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.fit"]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.get_params"]], "predict() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.predict"]], "score() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.score"]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_fit_request"]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_output"]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_params"]], "set_predict_request() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.set_score_request"]], "transform() (sklearn.cluster.bisectingkmeans method)": [[440, "sklearn.cluster.BisectingKMeans.transform"]], "dbscan (class in sklearn.cluster)": [[441, "sklearn.cluster.DBSCAN"]], "fit() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.fit"]], "fit_predict() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.get_params"]], "set_fit_request() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.set_fit_request"]], "set_params() (sklearn.cluster.dbscan method)": [[441, "sklearn.cluster.DBSCAN.set_params"]], "featureagglomeration (class in sklearn.cluster)": [[442, "sklearn.cluster.FeatureAgglomeration"]], "fit() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.fit"]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[442, "sklearn.cluster.FeatureAgglomeration.fit_predict"]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.fit_transform"]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing"]], "get_params() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.get_params"]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.inverse_transform"]], "set_output() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.set_output"]], "set_params() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.set_params"]], "transform() (sklearn.cluster.featureagglomeration method)": [[442, "sklearn.cluster.FeatureAgglomeration.transform"]], "hdbscan (class in sklearn.cluster)": [[443, "sklearn.cluster.HDBSCAN"]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.dbscan_clustering"]], "fit() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.fit"]], "fit_predict() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.fit_predict"]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.get_metadata_routing"]], "get_params() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.get_params"]], "set_params() (sklearn.cluster.hdbscan method)": [[443, "sklearn.cluster.HDBSCAN.set_params"]], "kmeans (class in sklearn.cluster)": [[444, "sklearn.cluster.KMeans"]], "fit() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.fit"]], "fit_predict() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.fit_predict"]], "fit_transform() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.get_params"]], "predict() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.predict"]], "score() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.score"]], "set_fit_request() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_fit_request"]], "set_output() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_output"]], "set_params() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_params"]], "set_predict_request() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.set_score_request"]], "transform() (sklearn.cluster.kmeans method)": [[444, "sklearn.cluster.KMeans.transform"]], "meanshift (class in sklearn.cluster)": [[445, "sklearn.cluster.MeanShift"]], "fit() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.fit"]], "fit_predict() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.fit_predict"]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.get_metadata_routing"]], "get_params() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.get_params"]], "predict() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.predict"]], "set_params() (sklearn.cluster.meanshift method)": [[445, "sklearn.cluster.MeanShift.set_params"]], "minibatchkmeans (class in sklearn.cluster)": [[446, "sklearn.cluster.MiniBatchKMeans"]], "fit() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.fit"]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.fit_predict"]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.fit_transform"]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out"]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing"]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.get_params"]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.partial_fit"]], "predict() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.predict"]], "score() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.score"]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_fit_request"]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_output"]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_params"]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request"]], "set_predict_request() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_predict_request"]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.set_score_request"]], "transform() (sklearn.cluster.minibatchkmeans method)": [[446, "sklearn.cluster.MiniBatchKMeans.transform"]], "optics (class in sklearn.cluster)": [[447, "sklearn.cluster.OPTICS"]], "fit() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.fit"]], "fit_predict() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.fit_predict"]], "get_metadata_routing() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.get_metadata_routing"]], "get_params() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.get_params"]], "set_params() (sklearn.cluster.optics method)": [[447, "sklearn.cluster.OPTICS.set_params"]], "spectralbiclustering (class in sklearn.cluster)": [[448, "sklearn.cluster.SpectralBiclustering"]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[448, "sklearn.cluster.SpectralBiclustering.biclusters_"]], "fit() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.fit"]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_params"]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[448, "sklearn.cluster.SpectralBiclustering.set_params"]], "spectralclustering (class in sklearn.cluster)": [[449, "sklearn.cluster.SpectralClustering"]], "fit() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.fit"]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.fit_predict"]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.get_params"]], "set_params() (sklearn.cluster.spectralclustering method)": [[449, "sklearn.cluster.SpectralClustering.set_params"]], "spectralcoclustering (class in sklearn.cluster)": [[450, "sklearn.cluster.SpectralCoclustering"]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[450, "sklearn.cluster.SpectralCoclustering.biclusters_"]], "fit() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.fit"]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_indices"]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_metadata_routing"]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_params"]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_shape"]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.get_submatrix"]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[450, "sklearn.cluster.SpectralCoclustering.set_params"]], "affinity_propagation() (in module sklearn.cluster)": [[451, "sklearn.cluster.affinity_propagation"]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[452, "sklearn.cluster.cluster_optics_dbscan"]], "cluster_optics_xi() (in module sklearn.cluster)": [[453, "sklearn.cluster.cluster_optics_xi"]], "compute_optics_graph() (in module sklearn.cluster)": [[454, "sklearn.cluster.compute_optics_graph"]], "estimate_bandwidth() (in module sklearn.cluster)": [[455, "sklearn.cluster.estimate_bandwidth"]], "k_means() (in module sklearn.cluster)": [[456, "sklearn.cluster.k_means"]], "kmeans_plusplus() (in module sklearn.cluster)": [[457, "sklearn.cluster.kmeans_plusplus"]], "mean_shift() (in module sklearn.cluster)": [[458, "sklearn.cluster.mean_shift"]], "spectral_clustering() (in module sklearn.cluster)": [[459, "sklearn.cluster.spectral_clustering"]], "ward_tree() (in module sklearn.cluster)": [[460, "sklearn.cluster.ward_tree"]], "columntransformer (class in sklearn.compose)": [[461, "sklearn.compose.ColumnTransformer"]], "fit() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.fit"]], "fit_transform() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.fit_transform"]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.get_metadata_routing"]], "get_params() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.get_params"]], "named_transformers_ (sklearn.compose.columntransformer property)": [[461, "sklearn.compose.ColumnTransformer.named_transformers_"]], "set_output() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.set_output"]], "set_params() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.set_params"]], "transform() (sklearn.compose.columntransformer method)": [[461, "sklearn.compose.ColumnTransformer.transform"]], "transformedtargetregressor (class in sklearn.compose)": [[462, "sklearn.compose.TransformedTargetRegressor"]], "fit() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.fit"]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing"]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.get_params"]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[462, "sklearn.compose.TransformedTargetRegressor.n_features_in_"]], "predict() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.predict"]], "score() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.score"]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.set_params"]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[462, "sklearn.compose.TransformedTargetRegressor.set_score_request"]], "make_column_selector() (in module sklearn.compose)": [[463, "sklearn.compose.make_column_selector"]], "make_column_transformer() (in module sklearn.compose)": [[464, "sklearn.compose.make_column_transformer"]], "config_context() (in module sklearn)": [[465, "sklearn.config_context"]], "ellipticenvelope (class in sklearn.covariance)": [[466, "sklearn.covariance.EllipticEnvelope"]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.correct_covariance"]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.decision_function"]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.error_norm"]], "fit() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.fit"]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.fit_predict"]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.get_metadata_routing"]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.get_params"]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.get_precision"]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.mahalanobis"]], "predict() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.predict"]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.reweight_covariance"]], "score() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.score"]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.score_samples"]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.set_params"]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[466, "sklearn.covariance.EllipticEnvelope.set_score_request"]], "empiricalcovariance (class in sklearn.covariance)": [[467, "sklearn.covariance.EmpiricalCovariance"]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.error_norm"]], "fit() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.get_params"]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.mahalanobis"]], "score() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.score"]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.set_params"]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[467, "sklearn.covariance.EmpiricalCovariance.set_score_request"]], "graphicallasso (class in sklearn.covariance)": [[468, "sklearn.covariance.GraphicalLasso"]], "error_norm() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.error_norm"]], "fit() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.get_params"]], "get_precision() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.mahalanobis"]], "score() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.score"]], "set_params() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.set_params"]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[468, "sklearn.covariance.GraphicalLasso.set_score_request"]], "graphicallassocv (class in sklearn.covariance)": [[469, "sklearn.covariance.GraphicalLassoCV"]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.error_norm"]], "fit() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.fit"]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing"]], "get_params() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.get_params"]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.get_precision"]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.mahalanobis"]], "score() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.score"]], "set_params() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.set_params"]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[469, "sklearn.covariance.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in sklearn.covariance)": [[470, "sklearn.covariance.LedoitWolf"]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.error_norm"]], "fit() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.fit"]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.get_metadata_routing"]], "get_params() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.get_params"]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.get_precision"]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.mahalanobis"]], "score() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.score"]], "set_params() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.set_params"]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[470, "sklearn.covariance.LedoitWolf.set_score_request"]], "mincovdet (class in sklearn.covariance)": [[471, "sklearn.covariance.MinCovDet"]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.correct_covariance"]], "error_norm() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.error_norm"]], "fit() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.fit"]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.get_metadata_routing"]], "get_params() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.get_params"]], "get_precision() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.get_precision"]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.mahalanobis"]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.reweight_covariance"]], "score() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.score"]], "set_params() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.set_params"]], "set_score_request() (sklearn.covariance.mincovdet method)": [[471, "sklearn.covariance.MinCovDet.set_score_request"]], "oas (class in sklearn.covariance)": [[472, "sklearn.covariance.OAS"]], "error_norm() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.error_norm"]], "fit() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.fit"]], "get_metadata_routing() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.get_metadata_routing"]], "get_params() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.get_params"]], "get_precision() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.get_precision"]], "mahalanobis() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.mahalanobis"]], "score() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.score"]], "set_params() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.set_params"]], "set_score_request() (sklearn.covariance.oas method)": [[472, "sklearn.covariance.OAS.set_score_request"]], "shrunkcovariance (class in sklearn.covariance)": [[473, "sklearn.covariance.ShrunkCovariance"]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.error_norm"]], "fit() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.fit"]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.get_metadata_routing"]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.get_params"]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.get_precision"]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.mahalanobis"]], "score() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.score"]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.set_params"]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[473, "sklearn.covariance.ShrunkCovariance.set_score_request"]], "empirical_covariance() (in module sklearn.covariance)": [[474, "sklearn.covariance.empirical_covariance"]], "graphical_lasso() (in module sklearn.covariance)": [[475, "sklearn.covariance.graphical_lasso"]], "ledoit_wolf() (in module sklearn.covariance)": [[476, "sklearn.covariance.ledoit_wolf"]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[477, "sklearn.covariance.ledoit_wolf_shrinkage"]], "shrunk_covariance() (in module sklearn.covariance)": [[478, "sklearn.covariance.shrunk_covariance"]], "cca (class in sklearn.cross_decomposition)": [[479, "sklearn.cross_decomposition.CCA"]], "fit() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.fit"]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.get_params"]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.inverse_transform"]], "predict() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.predict"]], "score() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.score"]], "set_output() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_output"]], "set_params() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_params"]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.set_transform_request"]], "transform() (sklearn.cross_decomposition.cca method)": [[479, "sklearn.cross_decomposition.CCA.transform"]], "plscanonical (class in sklearn.cross_decomposition)": [[480, "sklearn.cross_decomposition.PLSCanonical"]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.fit"]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.inverse_transform"]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.predict"]], "score() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.score"]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_output"]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.set_transform_request"]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[480, "sklearn.cross_decomposition.PLSCanonical.transform"]], "plsregression (class in sklearn.cross_decomposition)": [[481, "sklearn.cross_decomposition.PLSRegression"]], "fit() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.fit"]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.get_params"]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.inverse_transform"]], "predict() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.predict"]], "score() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.score"]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_output"]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_params"]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_predict_request"]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_score_request"]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.set_transform_request"]], "transform() (sklearn.cross_decomposition.plsregression method)": [[481, "sklearn.cross_decomposition.PLSRegression.transform"]], "plssvd (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.PLSSVD"]], "fit() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.fit"]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.fit_transform"]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing"]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.get_params"]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.set_output"]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.set_params"]], "transform() (sklearn.cross_decomposition.plssvd method)": [[482, "sklearn.cross_decomposition.PLSSVD.transform"]], "clear_data_home() (in module sklearn.datasets)": [[483, "sklearn.datasets.clear_data_home"]], "dump_svmlight_file() (in module sklearn.datasets)": [[484, "sklearn.datasets.dump_svmlight_file"]], "fetch_20newsgroups() (in module sklearn.datasets)": [[485, "sklearn.datasets.fetch_20newsgroups"]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[486, "sklearn.datasets.fetch_20newsgroups_vectorized"]], "fetch_california_housing() (in module sklearn.datasets)": [[487, "sklearn.datasets.fetch_california_housing"]], "fetch_covtype() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_covtype"]], "fetch_kddcup99() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_kddcup99"]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_lfw_pairs"]], "fetch_lfw_people() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_lfw_people"]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_olivetti_faces"]], "fetch_openml() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_openml"]], "fetch_rcv1() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_rcv1"]], "fetch_species_distributions() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_species_distributions"]], "get_data_home() (in module sklearn.datasets)": [[496, "sklearn.datasets.get_data_home"]], "load_breast_cancer() (in module sklearn.datasets)": [[497, "sklearn.datasets.load_breast_cancer"]], "load_diabetes() (in module sklearn.datasets)": [[498, "sklearn.datasets.load_diabetes"]], "load_digits() (in module sklearn.datasets)": [[499, "sklearn.datasets.load_digits"]], "load_files() (in module sklearn.datasets)": [[500, "sklearn.datasets.load_files"]], "load_iris() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_iris"]], "load_linnerud() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_linnerud"]], "load_sample_image() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_sample_image"]], "load_sample_images() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_sample_images"]], "load_svmlight_file() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_svmlight_file"]], "load_svmlight_files() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_svmlight_files"]], "load_wine() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_wine"]], "make_biclusters() (in module sklearn.datasets)": [[508, "sklearn.datasets.make_biclusters"]], "make_blobs() (in module sklearn.datasets)": [[509, "sklearn.datasets.make_blobs"]], "make_checkerboard() (in module sklearn.datasets)": [[510, "sklearn.datasets.make_checkerboard"]], "make_circles() (in module sklearn.datasets)": [[511, "sklearn.datasets.make_circles"]], "make_classification() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_classification"]], "make_friedman1() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_friedman1"]], "make_friedman2() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_friedman2"]], "make_friedman3() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_friedman3"]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_gaussian_quantiles"]], "make_hastie_10_2() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_hastie_10_2"]], "make_low_rank_matrix() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_low_rank_matrix"]], "make_moons() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_moons"]], "make_multilabel_classification() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_multilabel_classification"]], "make_regression() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_regression"]], "make_s_curve() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_s_curve"]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_sparse_coded_signal"]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_sparse_spd_matrix"]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_sparse_uncorrelated"]], "make_spd_matrix() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_spd_matrix"]], "make_swiss_roll() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_swiss_roll"]], "dictionarylearning (class in sklearn.decomposition)": [[528, "sklearn.decomposition.DictionaryLearning"]], "fit() (sklearn.decomposition.dictionarylearning method)": [[528, "sklearn.decomposition.DictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[528, "sklearn.decomposition.DictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[528, "sklearn.decomposition.DictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[528, "sklearn.decomposition.DictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[528, "sklearn.decomposition.DictionaryLearning.get_params"]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[528, "sklearn.decomposition.DictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[528, "sklearn.decomposition.DictionaryLearning.set_params"]], "transform() (sklearn.decomposition.dictionarylearning method)": [[528, "sklearn.decomposition.DictionaryLearning.transform"]], "factoranalysis (class in sklearn.decomposition)": [[529, "sklearn.decomposition.FactorAnalysis"]], "fit() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.fit"]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.fit_transform"]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.get_metadata_routing"]], "get_params() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.get_params"]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.get_precision"]], "score() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.score"]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.score_samples"]], "set_output() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.set_output"]], "set_params() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.set_params"]], "transform() (sklearn.decomposition.factoranalysis method)": [[529, "sklearn.decomposition.FactorAnalysis.transform"]], "fastica (class in sklearn.decomposition)": [[530, "sklearn.decomposition.FastICA"]], "fit() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.fit"]], "fit_transform() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.get_metadata_routing"]], "get_params() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.get_params"]], "inverse_transform() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.inverse_transform"]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.set_inverse_transform_request"]], "set_output() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.set_output"]], "set_params() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.set_params"]], "set_transform_request() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.set_transform_request"]], "transform() (sklearn.decomposition.fastica method)": [[530, "sklearn.decomposition.FastICA.transform"]], "incrementalpca (class in sklearn.decomposition)": [[531, "sklearn.decomposition.IncrementalPCA"]], "fit() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.fit"]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.fit_transform"]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.get_params"]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.get_precision"]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.inverse_transform"]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.partial_fit"]], "set_output() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.set_output"]], "set_params() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.set_params"]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request"]], "transform() (sklearn.decomposition.incrementalpca method)": [[531, "sklearn.decomposition.IncrementalPCA.transform"]], "kernelpca (class in sklearn.decomposition)": [[532, "sklearn.decomposition.KernelPCA"]], "fit() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.fit"]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.get_params"]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.inverse_transform"]], "set_output() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.set_output"]], "set_params() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.set_params"]], "transform() (sklearn.decomposition.kernelpca method)": [[532, "sklearn.decomposition.KernelPCA.transform"]], "latentdirichletallocation (class in sklearn.decomposition)": [[533, "sklearn.decomposition.LatentDirichletAllocation"]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.fit"]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing"]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.get_params"]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.partial_fit"]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.perplexity"]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.score"]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.set_output"]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.set_params"]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[533, "sklearn.decomposition.LatentDirichletAllocation.transform"]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning"]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.fit"]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params"]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit"]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output"]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params"]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[534, "sklearn.decomposition.MiniBatchDictionaryLearning.transform"]], "minibatchnmf (class in sklearn.decomposition)": [[535, "sklearn.decomposition.MiniBatchNMF"]], "fit() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.fit"]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.inverse_transform"]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.partial_fit"]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.set_output"]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.set_params"]], "set_partial_fit_request() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.set_partial_fit_request"]], "transform() (sklearn.decomposition.minibatchnmf method)": [[535, "sklearn.decomposition.MiniBatchNMF.transform"]], "minibatchsparsepca (class in sklearn.decomposition)": [[536, "sklearn.decomposition.MiniBatchSparsePCA"]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.fit"]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.set_output"]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.set_params"]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[536, "sklearn.decomposition.MiniBatchSparsePCA.transform"]], "nmf (class in sklearn.decomposition)": [[537, "sklearn.decomposition.NMF"]], "fit() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.fit"]], "fit_transform() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.get_metadata_routing"]], "get_params() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.get_params"]], "inverse_transform() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.inverse_transform"]], "set_output() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.set_output"]], "set_params() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.set_params"]], "transform() (sklearn.decomposition.nmf method)": [[537, "sklearn.decomposition.NMF.transform"]], "pca (class in sklearn.decomposition)": [[538, "sklearn.decomposition.PCA"]], "fit() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.fit"]], "fit_transform() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.fit_transform"]], "get_covariance() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.get_covariance"]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.get_params"]], "get_precision() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.get_precision"]], "inverse_transform() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.inverse_transform"]], "score() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.score"]], "score_samples() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.score_samples"]], "set_output() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.set_output"]], "set_params() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.set_params"]], "transform() (sklearn.decomposition.pca method)": [[538, "sklearn.decomposition.PCA.transform"]], "sparsecoder (class in sklearn.decomposition)": [[539, "sklearn.decomposition.SparseCoder"]], "fit() (sklearn.decomposition.sparsecoder method)": [[539, "sklearn.decomposition.SparseCoder.fit"]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[539, "sklearn.decomposition.SparseCoder.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[539, "sklearn.decomposition.SparseCoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[539, "sklearn.decomposition.SparseCoder.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsecoder method)": [[539, "sklearn.decomposition.SparseCoder.get_params"]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[539, "sklearn.decomposition.SparseCoder.n_components_"]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[539, "sklearn.decomposition.SparseCoder.n_features_in_"]], "set_output() (sklearn.decomposition.sparsecoder method)": [[539, "sklearn.decomposition.SparseCoder.set_output"]], "set_params() (sklearn.decomposition.sparsecoder method)": [[539, "sklearn.decomposition.SparseCoder.set_params"]], "transform() (sklearn.decomposition.sparsecoder method)": [[539, "sklearn.decomposition.SparseCoder.transform"]], "sparsepca (class in sklearn.decomposition)": [[540, "sklearn.decomposition.SparsePCA"]], "fit() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.fit"]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.get_metadata_routing"]], "get_params() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.get_params"]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.inverse_transform"]], "set_output() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.set_output"]], "set_params() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.set_params"]], "transform() (sklearn.decomposition.sparsepca method)": [[540, "sklearn.decomposition.SparsePCA.transform"]], "truncatedsvd (class in sklearn.decomposition)": [[541, "sklearn.decomposition.TruncatedSVD"]], "fit() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.fit"]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.fit_transform"]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.get_feature_names_out"]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.get_metadata_routing"]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.get_params"]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.inverse_transform"]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.set_output"]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.set_params"]], "transform() (sklearn.decomposition.truncatedsvd method)": [[541, "sklearn.decomposition.TruncatedSVD.transform"]], "dict_learning() (in module sklearn.decomposition)": [[542, "sklearn.decomposition.dict_learning"]], "dict_learning_online() (in module sklearn.decomposition)": [[543, "sklearn.decomposition.dict_learning_online"]], "non_negative_factorization() (in module sklearn.decomposition)": [[544, "sklearn.decomposition.non_negative_factorization"]], "sparse_encode() (in module sklearn.decomposition)": [[545, "sklearn.decomposition.sparse_encode"]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit"]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score"]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output"]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request"]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[546, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform"]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis"]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function"]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit"]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing"]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params"]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict"]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba"]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba"]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score"]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params"]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[547, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request"]], "dummyclassifier (class in sklearn.dummy)": [[548, "sklearn.dummy.DummyClassifier"]], "fit() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.fit"]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.get_params"]], "predict() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.predict"]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.predict_log_proba"]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.predict_proba"]], "score() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.score"]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.set_fit_request"]], "set_params() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.set_params"]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[548, "sklearn.dummy.DummyClassifier.set_score_request"]], "dummyregressor (class in sklearn.dummy)": [[549, "sklearn.dummy.DummyRegressor"]], "fit() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.fit"]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.get_metadata_routing"]], "get_params() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.get_params"]], "predict() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.predict"]], "score() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.score"]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.set_fit_request"]], "set_params() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.set_params"]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.set_predict_request"]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[549, "sklearn.dummy.DummyRegressor.set_score_request"]], "adaboostclassifier (class in sklearn.ensemble)": [[550, "sklearn.ensemble.AdaBoostClassifier"]], "base_estimator_ (sklearn.ensemble.adaboostclassifier property)": [[550, "sklearn.ensemble.AdaBoostClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[550, "sklearn.ensemble.AdaBoostClassifier.feature_importances_"]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.get_params"]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.predict_proba"]], "score() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.score"]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.set_params"]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba"]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[550, "sklearn.ensemble.AdaBoostClassifier.staged_score"]], "adaboostregressor (class in sklearn.ensemble)": [[551, "sklearn.ensemble.AdaBoostRegressor"]], "base_estimator_ (sklearn.ensemble.adaboostregressor property)": [[551, "sklearn.ensemble.AdaBoostRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[551, "sklearn.ensemble.AdaBoostRegressor.feature_importances_"]], "fit() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.get_params"]], "predict() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.predict"]], "score() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.score"]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.set_params"]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.staged_predict"]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[551, "sklearn.ensemble.AdaBoostRegressor.staged_score"]], "baggingclassifier (class in sklearn.ensemble)": [[552, "sklearn.ensemble.BaggingClassifier"]], "base_estimator_ (sklearn.ensemble.baggingclassifier property)": [[552, "sklearn.ensemble.BaggingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.decision_function"]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[552, "sklearn.ensemble.BaggingClassifier.estimators_samples_"]], "fit() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.get_params"]], "predict() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.predict_proba"]], "score() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.score"]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[552, "sklearn.ensemble.BaggingClassifier.set_score_request"]], "baggingregressor (class in sklearn.ensemble)": [[553, "sklearn.ensemble.BaggingRegressor"]], "base_estimator_ (sklearn.ensemble.baggingregressor property)": [[553, "sklearn.ensemble.BaggingRegressor.base_estimator_"]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[553, "sklearn.ensemble.BaggingRegressor.estimators_samples_"]], "fit() (sklearn.ensemble.baggingregressor method)": [[553, "sklearn.ensemble.BaggingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[553, "sklearn.ensemble.BaggingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.baggingregressor method)": [[553, "sklearn.ensemble.BaggingRegressor.get_params"]], "predict() (sklearn.ensemble.baggingregressor method)": [[553, "sklearn.ensemble.BaggingRegressor.predict"]], "score() (sklearn.ensemble.baggingregressor method)": [[553, "sklearn.ensemble.BaggingRegressor.score"]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[553, "sklearn.ensemble.BaggingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.baggingregressor method)": [[553, "sklearn.ensemble.BaggingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[553, "sklearn.ensemble.BaggingRegressor.set_score_request"]], "extratreesclassifier (class in sklearn.ensemble)": [[554, "sklearn.ensemble.ExtraTreesClassifier"]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.apply"]], "base_estimator_ (sklearn.ensemble.extratreesclassifier property)": [[554, "sklearn.ensemble.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[554, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[554, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_"]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.get_params"]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.predict_proba"]], "score() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.score"]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.set_params"]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[554, "sklearn.ensemble.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sklearn.ensemble)": [[555, "sklearn.ensemble.ExtraTreesRegressor"]], "apply() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.apply"]], "base_estimator_ (sklearn.ensemble.extratreesregressor property)": [[555, "sklearn.ensemble.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[555, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[555, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_"]], "fit() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.get_params"]], "predict() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.predict"]], "score() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.score"]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.set_params"]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[555, "sklearn.ensemble.ExtraTreesRegressor.set_score_request"]], "gradientboostingclassifier (class in sklearn.ensemble)": [[556, "sklearn.ensemble.GradientBoostingClassifier"]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingclassifier property)": [[556, "sklearn.ensemble.GradientBoostingClassifier.base_estimator_"]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.decision_function"]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[556, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.get_params"]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[556, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba"]], "gradientboostingregressor (class in sklearn.ensemble)": [[557, "sklearn.ensemble.GradientBoostingRegressor"]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.apply"]], "base_estimator_ (sklearn.ensemble.gradientboostingregressor property)": [[557, "sklearn.ensemble.GradientBoostingRegressor.base_estimator_"]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[557, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_"]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.get_params"]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[557, "sklearn.ensemble.GradientBoostingRegressor.staged_predict"]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier"]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function"]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.predict"]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba"]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request"]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function"]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict"]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[558, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba"]], "histgradientboostingregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor"]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.get_params"]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_"]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.predict"]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.score"]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request"]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[559, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict"]], "isolationforest (class in sklearn.ensemble)": [[560, "sklearn.ensemble.IsolationForest"]], "base_estimator_ (sklearn.ensemble.isolationforest property)": [[560, "sklearn.ensemble.IsolationForest.base_estimator_"]], "decision_function() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.decision_function"]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[560, "sklearn.ensemble.IsolationForest.estimators_samples_"]], "fit() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.fit"]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.fit_predict"]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.get_metadata_routing"]], "get_params() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.get_params"]], "predict() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.predict"]], "score_samples() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.score_samples"]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.set_fit_request"]], "set_params() (sklearn.ensemble.isolationforest method)": [[560, "sklearn.ensemble.IsolationForest.set_params"]], "randomforestclassifier (class in sklearn.ensemble)": [[561, "sklearn.ensemble.RandomForestClassifier"]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.apply"]], "base_estimator_ (sklearn.ensemble.randomforestclassifier property)": [[561, "sklearn.ensemble.RandomForestClassifier.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[561, "sklearn.ensemble.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[561, "sklearn.ensemble.RandomForestClassifier.feature_importances_"]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.get_params"]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.predict"]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.predict_proba"]], "score() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.score"]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.set_params"]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[561, "sklearn.ensemble.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sklearn.ensemble)": [[562, "sklearn.ensemble.RandomForestRegressor"]], "apply() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.apply"]], "base_estimator_ (sklearn.ensemble.randomforestregressor property)": [[562, "sklearn.ensemble.RandomForestRegressor.base_estimator_"]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[562, "sklearn.ensemble.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[562, "sklearn.ensemble.RandomForestRegressor.feature_importances_"]], "fit() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.fit"]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.get_params"]], "predict() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.predict"]], "score() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.score"]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.set_fit_request"]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.set_params"]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[562, "sklearn.ensemble.RandomForestRegressor.set_score_request"]], "randomtreesembedding (class in sklearn.ensemble)": [[563, "sklearn.ensemble.RandomTreesEmbedding"]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.apply"]], "base_estimator_ (sklearn.ensemble.randomtreesembedding property)": [[563, "sklearn.ensemble.RandomTreesEmbedding.base_estimator_"]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.decision_path"]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[563, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_"]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[563, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_"]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.fit"]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing"]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.get_params"]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request"]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.set_output"]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.set_params"]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[563, "sklearn.ensemble.RandomTreesEmbedding.transform"]], "stackingclassifier (class in sklearn.ensemble)": [[564, "sklearn.ensemble.StackingClassifier"]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.decision_function"]], "fit() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.fit"]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[564, "sklearn.ensemble.StackingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[564, "sklearn.ensemble.StackingClassifier.named_estimators"]], "predict() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.predict"]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.predict_proba"]], "score() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.score"]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.set_output"]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.set_score_request"]], "transform() (sklearn.ensemble.stackingclassifier method)": [[564, "sklearn.ensemble.StackingClassifier.transform"]], "stackingregressor (class in sklearn.ensemble)": [[565, "sklearn.ensemble.StackingRegressor"]], "fit() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.fit"]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[565, "sklearn.ensemble.StackingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[565, "sklearn.ensemble.StackingRegressor.named_estimators"]], "predict() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.predict"]], "score() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.score"]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.set_output"]], "set_params() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.set_score_request"]], "transform() (sklearn.ensemble.stackingregressor method)": [[565, "sklearn.ensemble.StackingRegressor.transform"]], "votingclassifier (class in sklearn.ensemble)": [[566, "sklearn.ensemble.VotingClassifier"]], "fit() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.fit"]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.get_params"]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[566, "sklearn.ensemble.VotingClassifier.n_features_in_"]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[566, "sklearn.ensemble.VotingClassifier.named_estimators"]], "predict() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.predict"]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.predict_proba"]], "score() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.score"]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.set_fit_request"]], "set_output() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.set_output"]], "set_params() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.set_params"]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.set_score_request"]], "transform() (sklearn.ensemble.votingclassifier method)": [[566, "sklearn.ensemble.VotingClassifier.transform"]], "votingregressor (class in sklearn.ensemble)": [[567, "sklearn.ensemble.VotingRegressor"]], "fit() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.fit"]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.fit_transform"]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.get_feature_names_out"]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.get_metadata_routing"]], "get_params() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.get_params"]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[567, "sklearn.ensemble.VotingRegressor.n_features_in_"]], "named_estimators (sklearn.ensemble.votingregressor property)": [[567, "sklearn.ensemble.VotingRegressor.named_estimators"]], "predict() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.predict"]], "score() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.score"]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.set_fit_request"]], "set_output() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.set_output"]], "set_params() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.set_params"]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.set_score_request"]], "transform() (sklearn.ensemble.votingregressor method)": [[567, "sklearn.ensemble.VotingRegressor.transform"]], "convergencewarning (class in sklearn.exceptions)": [[568, "sklearn.exceptions.ConvergenceWarning"]], "with_traceback() (sklearn.exceptions.convergencewarning method)": [[568, "sklearn.exceptions.ConvergenceWarning.with_traceback"]], "dataconversionwarning (class in sklearn.exceptions)": [[569, "sklearn.exceptions.DataConversionWarning"]], "with_traceback() (sklearn.exceptions.dataconversionwarning method)": [[569, "sklearn.exceptions.DataConversionWarning.with_traceback"]], "datadimensionalitywarning (class in sklearn.exceptions)": [[570, "sklearn.exceptions.DataDimensionalityWarning"]], "with_traceback() (sklearn.exceptions.datadimensionalitywarning method)": [[570, "sklearn.exceptions.DataDimensionalityWarning.with_traceback"]], "efficiencywarning (class in sklearn.exceptions)": [[571, "sklearn.exceptions.EfficiencyWarning"]], "with_traceback() (sklearn.exceptions.efficiencywarning method)": [[571, "sklearn.exceptions.EfficiencyWarning.with_traceback"]], "fitfailedwarning (class in sklearn.exceptions)": [[572, "sklearn.exceptions.FitFailedWarning"]], "with_traceback() (sklearn.exceptions.fitfailedwarning method)": [[572, "sklearn.exceptions.FitFailedWarning.with_traceback"]], "inconsistentversionwarning (class in sklearn.exceptions)": [[573, "sklearn.exceptions.InconsistentVersionWarning"]], "with_traceback() (sklearn.exceptions.inconsistentversionwarning method)": [[573, "sklearn.exceptions.InconsistentVersionWarning.with_traceback"]], "notfittederror (class in sklearn.exceptions)": [[574, "sklearn.exceptions.NotFittedError"]], "with_traceback() (sklearn.exceptions.notfittederror method)": [[574, "sklearn.exceptions.NotFittedError.with_traceback"]], "undefinedmetricwarning (class in sklearn.exceptions)": [[575, "sklearn.exceptions.UndefinedMetricWarning"]], "with_traceback() (sklearn.exceptions.undefinedmetricwarning method)": [[575, "sklearn.exceptions.UndefinedMetricWarning.with_traceback"]], "sklearn.experimental.enable_halving_search_cv": [[576, "module-sklearn.experimental.enable_halving_search_cv"]], "sklearn.experimental.enable_iterative_imputer": [[577, "module-sklearn.experimental.enable_iterative_imputer"]], "dictvectorizer (class in sklearn.feature_extraction)": [[578, "sklearn.feature_extraction.DictVectorizer"]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.get_params"]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.inverse_transform"]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.restrict"]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request"]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.set_params"]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[578, "sklearn.feature_extraction.DictVectorizer.transform"]], "featurehasher (class in sklearn.feature_extraction)": [[579, "sklearn.feature_extraction.FeatureHasher"]], "fit() (sklearn.feature_extraction.featurehasher method)": [[579, "sklearn.feature_extraction.FeatureHasher.fit"]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[579, "sklearn.feature_extraction.FeatureHasher.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[579, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[579, "sklearn.feature_extraction.FeatureHasher.get_params"]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[579, "sklearn.feature_extraction.FeatureHasher.set_output"]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[579, "sklearn.feature_extraction.FeatureHasher.set_params"]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[579, "sklearn.feature_extraction.FeatureHasher.set_transform_request"]], "transform() (sklearn.feature_extraction.featurehasher method)": [[579, "sklearn.feature_extraction.FeatureHasher.transform"]], "patchextractor (class in sklearn.feature_extraction.image)": [[580, "sklearn.feature_extraction.image.PatchExtractor"]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[580, "sklearn.feature_extraction.image.PatchExtractor.fit"]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[580, "sklearn.feature_extraction.image.PatchExtractor.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[580, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[580, "sklearn.feature_extraction.image.PatchExtractor.get_params"]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[580, "sklearn.feature_extraction.image.PatchExtractor.set_output"]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[580, "sklearn.feature_extraction.image.PatchExtractor.set_params"]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[580, "sklearn.feature_extraction.image.PatchExtractor.transform"]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[581, "sklearn.feature_extraction.image.extract_patches_2d"]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[582, "sklearn.feature_extraction.image.grid_to_graph"]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[583, "sklearn.feature_extraction.image.img_to_graph"]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.reconstruct_from_patches_2d"]], "countvectorizer (class in sklearn.feature_extraction.text)": [[585, "sklearn.feature_extraction.text.CountVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words"]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[585, "sklearn.feature_extraction.text.CountVectorizer.transform"]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[586, "sklearn.feature_extraction.text.HashingVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform"]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words"]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit"]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.set_output"]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.set_params"]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[586, "sklearn.feature_extraction.text.HashingVectorizer.transform"]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[587, "sklearn.feature_extraction.text.TfidfTransformer"]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.get_params"]], "idf_ (sklearn.feature_extraction.text.tfidftransformer property)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.idf_"]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.set_output"]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[587, "sklearn.feature_extraction.text.TfidfTransformer.transform"]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer"]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer"]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor"]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer"]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.decode"]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.fit"]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform"]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing"]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.get_params"]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words"]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.idf_"]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform"]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request"]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.set_params"]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request"]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[588, "sklearn.feature_extraction.text.TfidfVectorizer.transform"]], "genericunivariateselect (class in sklearn.feature_selection)": [[589, "sklearn.feature_selection.GenericUnivariateSelect"]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.fit"]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing"]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.get_params"]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.get_support"]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform"]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.set_output"]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.set_params"]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[589, "sklearn.feature_selection.GenericUnivariateSelect.transform"]], "rfe (class in sklearn.feature_selection)": [[590, "sklearn.feature_selection.RFE"]], "classes_ (sklearn.feature_selection.rfe property)": [[590, "sklearn.feature_selection.RFE.classes_"]], "decision_function() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.decision_function"]], "fit() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.fit"]], "fit_transform() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.get_params"]], "get_support() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.get_support"]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.inverse_transform"]], "predict() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.predict"]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.predict_proba"]], "score() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.score"]], "set_output() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.set_output"]], "set_params() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.set_params"]], "transform() (sklearn.feature_selection.rfe method)": [[590, "sklearn.feature_selection.RFE.transform"]], "rfecv (class in sklearn.feature_selection)": [[591, "sklearn.feature_selection.RFECV"]], "classes_ (sklearn.feature_selection.rfecv property)": [[591, "sklearn.feature_selection.RFECV.classes_"]], "decision_function() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.decision_function"]], "fit() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.fit"]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.get_metadata_routing"]], "get_params() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.get_params"]], "get_support() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.get_support"]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.inverse_transform"]], "predict() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.predict"]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.predict_log_proba"]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.predict_proba"]], "score() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.score"]], "set_fit_request() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.set_fit_request"]], "set_output() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.set_output"]], "set_params() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.set_params"]], "transform() (sklearn.feature_selection.rfecv method)": [[591, "sklearn.feature_selection.RFECV.transform"]], "selectfdr (class in sklearn.feature_selection)": [[592, "sklearn.feature_selection.SelectFdr"]], "fit() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.fit"]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.get_params"]], "get_support() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.set_output"]], "set_params() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.set_params"]], "transform() (sklearn.feature_selection.selectfdr method)": [[592, "sklearn.feature_selection.SelectFdr.transform"]], "selectfpr (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.SelectFpr"]], "fit() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.fit"]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.get_params"]], "get_support() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.set_output"]], "set_params() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.set_params"]], "transform() (sklearn.feature_selection.selectfpr method)": [[593, "sklearn.feature_selection.SelectFpr.transform"]], "selectfrommodel (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.SelectFromModel"]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.fit"]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.get_params"]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.inverse_transform"]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[594, "sklearn.feature_selection.SelectFromModel.n_features_in_"]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.partial_fit"]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.set_output"]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.set_params"]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[594, "sklearn.feature_selection.SelectFromModel.threshold_"]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[594, "sklearn.feature_selection.SelectFromModel.transform"]], "selectfwe (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.SelectFwe"]], "fit() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.fit"]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.get_params"]], "get_support() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.get_support"]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.inverse_transform"]], "set_output() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.set_output"]], "set_params() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.set_params"]], "transform() (sklearn.feature_selection.selectfwe method)": [[595, "sklearn.feature_selection.SelectFwe.transform"]], "selectkbest (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectKBest"]], "fit() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.fit"]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.get_params"]], "get_support() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.get_support"]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.inverse_transform"]], "set_output() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.set_output"]], "set_params() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.set_params"]], "transform() (sklearn.feature_selection.selectkbest method)": [[596, "sklearn.feature_selection.SelectKBest.transform"]], "selectpercentile (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectPercentile"]], "fit() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.fit"]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.get_metadata_routing"]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.get_params"]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.get_support"]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.inverse_transform"]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.set_output"]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.set_params"]], "transform() (sklearn.feature_selection.selectpercentile method)": [[597, "sklearn.feature_selection.SelectPercentile.transform"]], "selectormixin (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectorMixin"]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[598, "sklearn.feature_selection.SelectorMixin.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[598, "sklearn.feature_selection.SelectorMixin.get_feature_names_out"]], "get_support() (sklearn.feature_selection.selectormixin method)": [[598, "sklearn.feature_selection.SelectorMixin.get_support"]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[598, "sklearn.feature_selection.SelectorMixin.inverse_transform"]], "set_output() (sklearn.feature_selection.selectormixin method)": [[598, "sklearn.feature_selection.SelectorMixin.set_output"]], "transform() (sklearn.feature_selection.selectormixin method)": [[598, "sklearn.feature_selection.SelectorMixin.transform"]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SequentialFeatureSelector"]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.fit"]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing"]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.get_params"]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.get_support"]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform"]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.set_output"]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.set_params"]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[599, "sklearn.feature_selection.SequentialFeatureSelector.transform"]], "variancethreshold (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.VarianceThreshold"]], "fit() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.fit"]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.fit_transform"]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out"]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing"]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.get_params"]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.get_support"]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.inverse_transform"]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.set_output"]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.set_params"]], "transform() (sklearn.feature_selection.variancethreshold method)": [[600, "sklearn.feature_selection.VarianceThreshold.transform"]], "chi2() (in module sklearn.feature_selection)": [[601, "sklearn.feature_selection.chi2"]], "f_classif() (in module sklearn.feature_selection)": [[602, "sklearn.feature_selection.f_classif"]], "f_regression() (in module sklearn.feature_selection)": [[603, "sklearn.feature_selection.f_regression"]], "mutual_info_classif() (in module sklearn.feature_selection)": [[604, "sklearn.feature_selection.mutual_info_classif"]], "mutual_info_regression() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.mutual_info_regression"]], "r_regression() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.r_regression"]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier"]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.get_params"]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.predict"]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba"]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.set_params"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[607, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request"]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor"]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.fit"]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing"]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.get_params"]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood"]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.predict"]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y"]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.score"]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.set_params"]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request"]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[608, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request"]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel"]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[609, "sklearn.gaussian_process.kernels.CompoundKernel.theta"]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel"]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[610, "sklearn.gaussian_process.kernels.ConstantKernel.theta"]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[611, "sklearn.gaussian_process.kernels.DotProduct"]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[611, "sklearn.gaussian_process.kernels.DotProduct.__call__"]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[611, "sklearn.gaussian_process.kernels.DotProduct.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[611, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[611, "sklearn.gaussian_process.kernels.DotProduct.diag"]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[611, "sklearn.gaussian_process.kernels.DotProduct.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[611, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[611, "sklearn.gaussian_process.kernels.DotProduct.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[611, "sklearn.gaussian_process.kernels.DotProduct.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[611, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[611, "sklearn.gaussian_process.kernels.DotProduct.set_params"]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[611, "sklearn.gaussian_process.kernels.DotProduct.theta"]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared"]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__"]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.diag"]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params"]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale"]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params"]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[612, "sklearn.gaussian_process.kernels.ExpSineSquared.theta"]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.Exponentiation"]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.__call__"]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.diag"]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.set_params"]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[613, "sklearn.gaussian_process.kernels.Exponentiation.theta"]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter"]], "__call__() (sklearn.gaussian_process.kernels.hyperparameter method)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter.__call__"]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter.bounds"]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter.count"]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter.fixed"]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter.index"]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements"]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter.name"]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[614, "sklearn.gaussian_process.kernels.Hyperparameter.value_type"]], "kernel (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.Kernel"]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[615, "sklearn.gaussian_process.kernels.Kernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[615, "sklearn.gaussian_process.kernels.Kernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[615, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[615, "sklearn.gaussian_process.kernels.Kernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[615, "sklearn.gaussian_process.kernels.Kernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[615, "sklearn.gaussian_process.kernels.Kernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[615, "sklearn.gaussian_process.kernels.Kernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[615, "sklearn.gaussian_process.kernels.Kernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[615, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[615, "sklearn.gaussian_process.kernels.Kernel.set_params"]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[615, "sklearn.gaussian_process.kernels.Kernel.theta"]], "matern (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.Matern"]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[616, "sklearn.gaussian_process.kernels.Matern.__call__"]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[616, "sklearn.gaussian_process.kernels.Matern.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[616, "sklearn.gaussian_process.kernels.Matern.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[616, "sklearn.gaussian_process.kernels.Matern.diag"]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[616, "sklearn.gaussian_process.kernels.Matern.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[616, "sklearn.gaussian_process.kernels.Matern.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[616, "sklearn.gaussian_process.kernels.Matern.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[616, "sklearn.gaussian_process.kernels.Matern.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[616, "sklearn.gaussian_process.kernels.Matern.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[616, "sklearn.gaussian_process.kernels.Matern.set_params"]], "theta (sklearn.gaussian_process.kernels.matern property)": [[616, "sklearn.gaussian_process.kernels.Matern.theta"]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel"]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[617, "sklearn.gaussian_process.kernels.PairwiseKernel.theta"]], "product (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Product"]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[618, "sklearn.gaussian_process.kernels.Product.__call__"]], "bounds (sklearn.gaussian_process.kernels.product property)": [[618, "sklearn.gaussian_process.kernels.Product.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[618, "sklearn.gaussian_process.kernels.Product.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.product method)": [[618, "sklearn.gaussian_process.kernels.Product.diag"]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[618, "sklearn.gaussian_process.kernels.Product.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[618, "sklearn.gaussian_process.kernels.Product.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[618, "sklearn.gaussian_process.kernels.Product.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[618, "sklearn.gaussian_process.kernels.Product.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[618, "sklearn.gaussian_process.kernels.Product.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[618, "sklearn.gaussian_process.kernels.Product.set_params"]], "theta (sklearn.gaussian_process.kernels.product property)": [[618, "sklearn.gaussian_process.kernels.Product.theta"]], "rbf (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.RBF"]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[619, "sklearn.gaussian_process.kernels.RBF.__call__"]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[619, "sklearn.gaussian_process.kernels.RBF.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[619, "sklearn.gaussian_process.kernels.RBF.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[619, "sklearn.gaussian_process.kernels.RBF.diag"]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[619, "sklearn.gaussian_process.kernels.RBF.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[619, "sklearn.gaussian_process.kernels.RBF.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[619, "sklearn.gaussian_process.kernels.RBF.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[619, "sklearn.gaussian_process.kernels.RBF.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[619, "sklearn.gaussian_process.kernels.RBF.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[619, "sklearn.gaussian_process.kernels.RBF.set_params"]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[619, "sklearn.gaussian_process.kernels.RBF.theta"]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic"]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__"]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.diag"]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params"]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[620, "sklearn.gaussian_process.kernels.RationalQuadratic.theta"]], "sum (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.Sum"]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[621, "sklearn.gaussian_process.kernels.Sum.__call__"]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[621, "sklearn.gaussian_process.kernels.Sum.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[621, "sklearn.gaussian_process.kernels.Sum.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[621, "sklearn.gaussian_process.kernels.Sum.diag"]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[621, "sklearn.gaussian_process.kernels.Sum.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[621, "sklearn.gaussian_process.kernels.Sum.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[621, "sklearn.gaussian_process.kernels.Sum.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[621, "sklearn.gaussian_process.kernels.Sum.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[621, "sklearn.gaussian_process.kernels.Sum.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[621, "sklearn.gaussian_process.kernels.Sum.set_params"]], "theta (sklearn.gaussian_process.kernels.sum property)": [[621, "sklearn.gaussian_process.kernels.Sum.theta"]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel"]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.__call__"]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.bounds"]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta"]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.diag"]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.get_params"]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters"]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary"]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims"]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input"]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.set_params"]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[622, "sklearn.gaussian_process.kernels.WhiteKernel.theta"]], "get_config() (in module sklearn)": [[623, "sklearn.get_config"]], "iterativeimputer (class in sklearn.impute)": [[624, "sklearn.impute.IterativeImputer"]], "fit() (sklearn.impute.iterativeimputer method)": [[624, "sklearn.impute.IterativeImputer.fit"]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[624, "sklearn.impute.IterativeImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[624, "sklearn.impute.IterativeImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[624, "sklearn.impute.IterativeImputer.get_metadata_routing"]], "get_params() (sklearn.impute.iterativeimputer method)": [[624, "sklearn.impute.IterativeImputer.get_params"]], "set_output() (sklearn.impute.iterativeimputer method)": [[624, "sklearn.impute.IterativeImputer.set_output"]], "set_params() (sklearn.impute.iterativeimputer method)": [[624, "sklearn.impute.IterativeImputer.set_params"]], "transform() (sklearn.impute.iterativeimputer method)": [[624, "sklearn.impute.IterativeImputer.transform"]], "knnimputer (class in sklearn.impute)": [[625, "sklearn.impute.KNNImputer"]], "fit() (sklearn.impute.knnimputer method)": [[625, "sklearn.impute.KNNImputer.fit"]], "fit_transform() (sklearn.impute.knnimputer method)": [[625, "sklearn.impute.KNNImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[625, "sklearn.impute.KNNImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[625, "sklearn.impute.KNNImputer.get_metadata_routing"]], "get_params() (sklearn.impute.knnimputer method)": [[625, "sklearn.impute.KNNImputer.get_params"]], "set_output() (sklearn.impute.knnimputer method)": [[625, "sklearn.impute.KNNImputer.set_output"]], "set_params() (sklearn.impute.knnimputer method)": [[625, "sklearn.impute.KNNImputer.set_params"]], "transform() (sklearn.impute.knnimputer method)": [[625, "sklearn.impute.KNNImputer.transform"]], "missingindicator (class in sklearn.impute)": [[626, "sklearn.impute.MissingIndicator"]], "fit() (sklearn.impute.missingindicator method)": [[626, "sklearn.impute.MissingIndicator.fit"]], "fit_transform() (sklearn.impute.missingindicator method)": [[626, "sklearn.impute.MissingIndicator.fit_transform"]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[626, "sklearn.impute.MissingIndicator.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[626, "sklearn.impute.MissingIndicator.get_metadata_routing"]], "get_params() (sklearn.impute.missingindicator method)": [[626, "sklearn.impute.MissingIndicator.get_params"]], "set_output() (sklearn.impute.missingindicator method)": [[626, "sklearn.impute.MissingIndicator.set_output"]], "set_params() (sklearn.impute.missingindicator method)": [[626, "sklearn.impute.MissingIndicator.set_params"]], "transform() (sklearn.impute.missingindicator method)": [[626, "sklearn.impute.MissingIndicator.transform"]], "simpleimputer (class in sklearn.impute)": [[627, "sklearn.impute.SimpleImputer"]], "fit() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.fit"]], "fit_transform() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.fit_transform"]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.get_feature_names_out"]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.get_metadata_routing"]], "get_params() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.get_params"]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.inverse_transform"]], "set_output() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.set_output"]], "set_params() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.set_params"]], "transform() (sklearn.impute.simpleimputer method)": [[627, "sklearn.impute.SimpleImputer.transform"]], "decisionboundarydisplay (class in sklearn.inspection)": [[628, "sklearn.inspection.DecisionBoundaryDisplay"]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[628, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator"]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[628, "sklearn.inspection.DecisionBoundaryDisplay.plot"]], "partialdependencedisplay (class in sklearn.inspection)": [[629, "sklearn.inspection.PartialDependenceDisplay"]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[629, "sklearn.inspection.PartialDependenceDisplay.from_estimator"]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[629, "sklearn.inspection.PartialDependenceDisplay.plot"]], "partial_dependence() (in module sklearn.inspection)": [[630, "sklearn.inspection.partial_dependence"]], "permutation_importance() (in module sklearn.inspection)": [[631, "sklearn.inspection.permutation_importance"]], "isotonicregression (class in sklearn.isotonic)": [[632, "sklearn.isotonic.IsotonicRegression"]], "fit() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.fit"]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.fit_transform"]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.get_feature_names_out"]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.get_metadata_routing"]], "get_params() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.get_params"]], "predict() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.predict"]], "score() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.score"]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.set_fit_request"]], "set_output() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.set_output"]], "set_params() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.set_params"]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.set_predict_request"]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.set_score_request"]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.set_transform_request"]], "transform() (sklearn.isotonic.isotonicregression method)": [[632, "sklearn.isotonic.IsotonicRegression.transform"]], "check_increasing() (in module sklearn.isotonic)": [[633, "sklearn.isotonic.check_increasing"]], "isotonic_regression() (in module sklearn.isotonic)": [[634, "sklearn.isotonic.isotonic_regression"]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler"]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[635, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform"]], "nystroem (class in sklearn.kernel_approximation)": [[636, "sklearn.kernel_approximation.Nystroem"]], "fit() (sklearn.kernel_approximation.nystroem method)": [[636, "sklearn.kernel_approximation.Nystroem.fit"]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[636, "sklearn.kernel_approximation.Nystroem.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[636, "sklearn.kernel_approximation.Nystroem.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[636, "sklearn.kernel_approximation.Nystroem.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[636, "sklearn.kernel_approximation.Nystroem.get_params"]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[636, "sklearn.kernel_approximation.Nystroem.set_output"]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[636, "sklearn.kernel_approximation.Nystroem.set_params"]], "transform() (sklearn.kernel_approximation.nystroem method)": [[636, "sklearn.kernel_approximation.Nystroem.transform"]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch"]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch.fit"]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch.get_params"]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch.set_output"]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch.set_params"]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[637, "sklearn.kernel_approximation.PolynomialCountSketch.transform"]], "rbfsampler (class in sklearn.kernel_approximation)": [[638, "sklearn.kernel_approximation.RBFSampler"]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[638, "sklearn.kernel_approximation.RBFSampler.fit"]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[638, "sklearn.kernel_approximation.RBFSampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[638, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[638, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[638, "sklearn.kernel_approximation.RBFSampler.get_params"]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[638, "sklearn.kernel_approximation.RBFSampler.set_output"]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[638, "sklearn.kernel_approximation.RBFSampler.set_params"]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[638, "sklearn.kernel_approximation.RBFSampler.transform"]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler"]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler.fit"]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform"]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out"]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing"]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params"]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output"]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params"]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[639, "sklearn.kernel_approximation.SkewedChi2Sampler.transform"]], "kernelridge (class in sklearn.kernel_ridge)": [[640, "sklearn.kernel_ridge.KernelRidge"]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[640, "sklearn.kernel_ridge.KernelRidge.fit"]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[640, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing"]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[640, "sklearn.kernel_ridge.KernelRidge.get_params"]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[640, "sklearn.kernel_ridge.KernelRidge.predict"]], "score() (sklearn.kernel_ridge.kernelridge method)": [[640, "sklearn.kernel_ridge.KernelRidge.score"]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[640, "sklearn.kernel_ridge.KernelRidge.set_fit_request"]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[640, "sklearn.kernel_ridge.KernelRidge.set_params"]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[640, "sklearn.kernel_ridge.KernelRidge.set_score_request"]], "ardregression (class in sklearn.linear_model)": [[641, "sklearn.linear_model.ARDRegression"]], "fit() (sklearn.linear_model.ardregression method)": [[641, "sklearn.linear_model.ARDRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[641, "sklearn.linear_model.ARDRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.ardregression method)": [[641, "sklearn.linear_model.ARDRegression.get_params"]], "predict() (sklearn.linear_model.ardregression method)": [[641, "sklearn.linear_model.ARDRegression.predict"]], "score() (sklearn.linear_model.ardregression method)": [[641, "sklearn.linear_model.ARDRegression.score"]], "set_params() (sklearn.linear_model.ardregression method)": [[641, "sklearn.linear_model.ARDRegression.set_params"]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[641, "sklearn.linear_model.ARDRegression.set_predict_request"]], "set_score_request() (sklearn.linear_model.ardregression method)": [[641, "sklearn.linear_model.ARDRegression.set_score_request"]], "bayesianridge (class in sklearn.linear_model)": [[642, "sklearn.linear_model.BayesianRidge"]], "fit() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.fit"]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.get_metadata_routing"]], "get_params() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.get_params"]], "predict() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.predict"]], "score() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.score"]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.set_fit_request"]], "set_params() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.set_params"]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.set_predict_request"]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[642, "sklearn.linear_model.BayesianRidge.set_score_request"]], "elasticnet (class in sklearn.linear_model)": [[643, "sklearn.linear_model.ElasticNet"]], "fit() (sklearn.linear_model.elasticnet method)": [[643, "sklearn.linear_model.ElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[643, "sklearn.linear_model.ElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnet method)": [[643, "sklearn.linear_model.ElasticNet.get_params"]], "path() (sklearn.linear_model.elasticnet static method)": [[643, "sklearn.linear_model.ElasticNet.path"]], "predict() (sklearn.linear_model.elasticnet method)": [[643, "sklearn.linear_model.ElasticNet.predict"]], "score() (sklearn.linear_model.elasticnet method)": [[643, "sklearn.linear_model.ElasticNet.score"]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[643, "sklearn.linear_model.ElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnet method)": [[643, "sklearn.linear_model.ElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[643, "sklearn.linear_model.ElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[643, "sklearn.linear_model.ElasticNet.sparse_coef_"]], "elasticnetcv (class in sklearn.linear_model)": [[644, "sklearn.linear_model.ElasticNetCV"]], "fit() (sklearn.linear_model.elasticnetcv method)": [[644, "sklearn.linear_model.ElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[644, "sklearn.linear_model.ElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[644, "sklearn.linear_model.ElasticNetCV.get_params"]], "path() (sklearn.linear_model.elasticnetcv static method)": [[644, "sklearn.linear_model.ElasticNetCV.path"]], "predict() (sklearn.linear_model.elasticnetcv method)": [[644, "sklearn.linear_model.ElasticNetCV.predict"]], "score() (sklearn.linear_model.elasticnetcv method)": [[644, "sklearn.linear_model.ElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[644, "sklearn.linear_model.ElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[644, "sklearn.linear_model.ElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[644, "sklearn.linear_model.ElasticNetCV.set_score_request"]], "gammaregressor (class in sklearn.linear_model)": [[645, "sklearn.linear_model.GammaRegressor"]], "fit() (sklearn.linear_model.gammaregressor method)": [[645, "sklearn.linear_model.GammaRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[645, "sklearn.linear_model.GammaRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.gammaregressor method)": [[645, "sklearn.linear_model.GammaRegressor.get_params"]], "predict() (sklearn.linear_model.gammaregressor method)": [[645, "sklearn.linear_model.GammaRegressor.predict"]], "score() (sklearn.linear_model.gammaregressor method)": [[645, "sklearn.linear_model.GammaRegressor.score"]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[645, "sklearn.linear_model.GammaRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.gammaregressor method)": [[645, "sklearn.linear_model.GammaRegressor.set_params"]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[645, "sklearn.linear_model.GammaRegressor.set_score_request"]], "huberregressor (class in sklearn.linear_model)": [[646, "sklearn.linear_model.HuberRegressor"]], "fit() (sklearn.linear_model.huberregressor method)": [[646, "sklearn.linear_model.HuberRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[646, "sklearn.linear_model.HuberRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.huberregressor method)": [[646, "sklearn.linear_model.HuberRegressor.get_params"]], "predict() (sklearn.linear_model.huberregressor method)": [[646, "sklearn.linear_model.HuberRegressor.predict"]], "score() (sklearn.linear_model.huberregressor method)": [[646, "sklearn.linear_model.HuberRegressor.score"]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[646, "sklearn.linear_model.HuberRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.huberregressor method)": [[646, "sklearn.linear_model.HuberRegressor.set_params"]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[646, "sklearn.linear_model.HuberRegressor.set_score_request"]], "lars (class in sklearn.linear_model)": [[647, "sklearn.linear_model.Lars"]], "fit() (sklearn.linear_model.lars method)": [[647, "sklearn.linear_model.Lars.fit"]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[647, "sklearn.linear_model.Lars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lars method)": [[647, "sklearn.linear_model.Lars.get_params"]], "predict() (sklearn.linear_model.lars method)": [[647, "sklearn.linear_model.Lars.predict"]], "score() (sklearn.linear_model.lars method)": [[647, "sklearn.linear_model.Lars.score"]], "set_fit_request() (sklearn.linear_model.lars method)": [[647, "sklearn.linear_model.Lars.set_fit_request"]], "set_params() (sklearn.linear_model.lars method)": [[647, "sklearn.linear_model.Lars.set_params"]], "set_score_request() (sklearn.linear_model.lars method)": [[647, "sklearn.linear_model.Lars.set_score_request"]], "larscv (class in sklearn.linear_model)": [[648, "sklearn.linear_model.LarsCV"]], "fit() (sklearn.linear_model.larscv method)": [[648, "sklearn.linear_model.LarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[648, "sklearn.linear_model.LarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.larscv method)": [[648, "sklearn.linear_model.LarsCV.get_params"]], "predict() (sklearn.linear_model.larscv method)": [[648, "sklearn.linear_model.LarsCV.predict"]], "score() (sklearn.linear_model.larscv method)": [[648, "sklearn.linear_model.LarsCV.score"]], "set_fit_request() (sklearn.linear_model.larscv method)": [[648, "sklearn.linear_model.LarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.larscv method)": [[648, "sklearn.linear_model.LarsCV.set_params"]], "set_score_request() (sklearn.linear_model.larscv method)": [[648, "sklearn.linear_model.LarsCV.set_score_request"]], "lasso (class in sklearn.linear_model)": [[649, "sklearn.linear_model.Lasso"]], "fit() (sklearn.linear_model.lasso method)": [[649, "sklearn.linear_model.Lasso.fit"]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[649, "sklearn.linear_model.Lasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.lasso method)": [[649, "sklearn.linear_model.Lasso.get_params"]], "path() (sklearn.linear_model.lasso static method)": [[649, "sklearn.linear_model.Lasso.path"]], "predict() (sklearn.linear_model.lasso method)": [[649, "sklearn.linear_model.Lasso.predict"]], "score() (sklearn.linear_model.lasso method)": [[649, "sklearn.linear_model.Lasso.score"]], "set_fit_request() (sklearn.linear_model.lasso method)": [[649, "sklearn.linear_model.Lasso.set_fit_request"]], "set_params() (sklearn.linear_model.lasso method)": [[649, "sklearn.linear_model.Lasso.set_params"]], "set_score_request() (sklearn.linear_model.lasso method)": [[649, "sklearn.linear_model.Lasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[649, "sklearn.linear_model.Lasso.sparse_coef_"]], "lassocv (class in sklearn.linear_model)": [[650, "sklearn.linear_model.LassoCV"]], "fit() (sklearn.linear_model.lassocv method)": [[650, "sklearn.linear_model.LassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[650, "sklearn.linear_model.LassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassocv method)": [[650, "sklearn.linear_model.LassoCV.get_params"]], "path() (sklearn.linear_model.lassocv static method)": [[650, "sklearn.linear_model.LassoCV.path"]], "predict() (sklearn.linear_model.lassocv method)": [[650, "sklearn.linear_model.LassoCV.predict"]], "score() (sklearn.linear_model.lassocv method)": [[650, "sklearn.linear_model.LassoCV.score"]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[650, "sklearn.linear_model.LassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassocv method)": [[650, "sklearn.linear_model.LassoCV.set_params"]], "set_score_request() (sklearn.linear_model.lassocv method)": [[650, "sklearn.linear_model.LassoCV.set_score_request"]], "lassolars (class in sklearn.linear_model)": [[651, "sklearn.linear_model.LassoLars"]], "fit() (sklearn.linear_model.lassolars method)": [[651, "sklearn.linear_model.LassoLars.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[651, "sklearn.linear_model.LassoLars.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolars method)": [[651, "sklearn.linear_model.LassoLars.get_params"]], "predict() (sklearn.linear_model.lassolars method)": [[651, "sklearn.linear_model.LassoLars.predict"]], "score() (sklearn.linear_model.lassolars method)": [[651, "sklearn.linear_model.LassoLars.score"]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[651, "sklearn.linear_model.LassoLars.set_fit_request"]], "set_params() (sklearn.linear_model.lassolars method)": [[651, "sklearn.linear_model.LassoLars.set_params"]], "set_score_request() (sklearn.linear_model.lassolars method)": [[651, "sklearn.linear_model.LassoLars.set_score_request"]], "lassolarscv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LassoLarsCV"]], "fit() (sklearn.linear_model.lassolarscv method)": [[652, "sklearn.linear_model.LassoLarsCV.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[652, "sklearn.linear_model.LassoLarsCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarscv method)": [[652, "sklearn.linear_model.LassoLarsCV.get_params"]], "predict() (sklearn.linear_model.lassolarscv method)": [[652, "sklearn.linear_model.LassoLarsCV.predict"]], "score() (sklearn.linear_model.lassolarscv method)": [[652, "sklearn.linear_model.LassoLarsCV.score"]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[652, "sklearn.linear_model.LassoLarsCV.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarscv method)": [[652, "sklearn.linear_model.LassoLarsCV.set_params"]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[652, "sklearn.linear_model.LassoLarsCV.set_score_request"]], "lassolarsic (class in sklearn.linear_model)": [[653, "sklearn.linear_model.LassoLarsIC"]], "fit() (sklearn.linear_model.lassolarsic method)": [[653, "sklearn.linear_model.LassoLarsIC.fit"]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[653, "sklearn.linear_model.LassoLarsIC.get_metadata_routing"]], "get_params() (sklearn.linear_model.lassolarsic method)": [[653, "sklearn.linear_model.LassoLarsIC.get_params"]], "predict() (sklearn.linear_model.lassolarsic method)": [[653, "sklearn.linear_model.LassoLarsIC.predict"]], "score() (sklearn.linear_model.lassolarsic method)": [[653, "sklearn.linear_model.LassoLarsIC.score"]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[653, "sklearn.linear_model.LassoLarsIC.set_fit_request"]], "set_params() (sklearn.linear_model.lassolarsic method)": [[653, "sklearn.linear_model.LassoLarsIC.set_params"]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[653, "sklearn.linear_model.LassoLarsIC.set_score_request"]], "linearregression (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LinearRegression"]], "fit() (sklearn.linear_model.linearregression method)": [[654, "sklearn.linear_model.LinearRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[654, "sklearn.linear_model.LinearRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.linearregression method)": [[654, "sklearn.linear_model.LinearRegression.get_params"]], "predict() (sklearn.linear_model.linearregression method)": [[654, "sklearn.linear_model.LinearRegression.predict"]], "score() (sklearn.linear_model.linearregression method)": [[654, "sklearn.linear_model.LinearRegression.score"]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[654, "sklearn.linear_model.LinearRegression.set_fit_request"]], "set_params() (sklearn.linear_model.linearregression method)": [[654, "sklearn.linear_model.LinearRegression.set_params"]], "set_score_request() (sklearn.linear_model.linearregression method)": [[654, "sklearn.linear_model.LinearRegression.set_score_request"]], "logisticregression (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LogisticRegression"]], "decision_function() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.decision_function"]], "densify() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.densify"]], "fit() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.get_params"]], "predict() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.predict_proba"]], "score() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.score"]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.set_params"]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregression method)": [[655, "sklearn.linear_model.LogisticRegression.sparsify"]], "logisticregressioncv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LogisticRegressionCV"]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.decision_function"]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.densify"]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.fit"]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.get_params"]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.predict"]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba"]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.predict_proba"]], "score() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.score"]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.set_fit_request"]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.set_params"]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.set_score_request"]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[656, "sklearn.linear_model.LogisticRegressionCV.sparsify"]], "multitaskelasticnet (class in sklearn.linear_model)": [[657, "sklearn.linear_model.MultiTaskElasticNet"]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.get_params"]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.path"]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.predict"]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[657, "sklearn.linear_model.MultiTaskElasticNet.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[657, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_"]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV"]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.get_params"]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.path"]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.predict"]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.score"]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.set_params"]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[658, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request"]], "multitasklasso (class in sklearn.linear_model)": [[659, "sklearn.linear_model.MultiTaskLasso"]], "fit() (sklearn.linear_model.multitasklasso method)": [[659, "sklearn.linear_model.MultiTaskLasso.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[659, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklasso method)": [[659, "sklearn.linear_model.MultiTaskLasso.get_params"]], "path() (sklearn.linear_model.multitasklasso static method)": [[659, "sklearn.linear_model.MultiTaskLasso.path"]], "predict() (sklearn.linear_model.multitasklasso method)": [[659, "sklearn.linear_model.MultiTaskLasso.predict"]], "score() (sklearn.linear_model.multitasklasso method)": [[659, "sklearn.linear_model.MultiTaskLasso.score"]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[659, "sklearn.linear_model.MultiTaskLasso.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklasso method)": [[659, "sklearn.linear_model.MultiTaskLasso.set_params"]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[659, "sklearn.linear_model.MultiTaskLasso.set_score_request"]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[659, "sklearn.linear_model.MultiTaskLasso.sparse_coef_"]], "multitasklassocv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.MultiTaskLassoCV"]], "fit() (sklearn.linear_model.multitasklassocv method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.fit"]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.get_params"]], "path() (sklearn.linear_model.multitasklassocv static method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.path"]], "predict() (sklearn.linear_model.multitasklassocv method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.predict"]], "score() (sklearn.linear_model.multitasklassocv method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.score"]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request"]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.set_params"]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[660, "sklearn.linear_model.MultiTaskLassoCV.set_score_request"]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuit"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuit.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuit.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuit.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[661, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request"]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuitCV"]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit"]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params"]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict"]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score"]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params"]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[662, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request"]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier"]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function"]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.densify"]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.predict"]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[663, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify"]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor"]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.densify"]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.get_params"]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit"]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.predict"]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.score"]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[664, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify"]], "perceptron (class in sklearn.linear_model)": [[665, "sklearn.linear_model.Perceptron"]], "decision_function() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.decision_function"]], "densify() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.densify"]], "fit() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.fit"]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.get_metadata_routing"]], "get_params() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.get_params"]], "partial_fit() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.partial_fit"]], "predict() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.predict"]], "score() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.score"]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.set_fit_request"]], "set_params() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.set_params"]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.set_score_request"]], "sparsify() (sklearn.linear_model.perceptron method)": [[665, "sklearn.linear_model.Perceptron.sparsify"]], "poissonregressor (class in sklearn.linear_model)": [[666, "sklearn.linear_model.PoissonRegressor"]], "fit() (sklearn.linear_model.poissonregressor method)": [[666, "sklearn.linear_model.PoissonRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[666, "sklearn.linear_model.PoissonRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.poissonregressor method)": [[666, "sklearn.linear_model.PoissonRegressor.get_params"]], "predict() (sklearn.linear_model.poissonregressor method)": [[666, "sklearn.linear_model.PoissonRegressor.predict"]], "score() (sklearn.linear_model.poissonregressor method)": [[666, "sklearn.linear_model.PoissonRegressor.score"]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[666, "sklearn.linear_model.PoissonRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.poissonregressor method)": [[666, "sklearn.linear_model.PoissonRegressor.set_params"]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[666, "sklearn.linear_model.PoissonRegressor.set_score_request"]], "quantileregressor (class in sklearn.linear_model)": [[667, "sklearn.linear_model.QuantileRegressor"]], "fit() (sklearn.linear_model.quantileregressor method)": [[667, "sklearn.linear_model.QuantileRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[667, "sklearn.linear_model.QuantileRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.quantileregressor method)": [[667, "sklearn.linear_model.QuantileRegressor.get_params"]], "predict() (sklearn.linear_model.quantileregressor method)": [[667, "sklearn.linear_model.QuantileRegressor.predict"]], "score() (sklearn.linear_model.quantileregressor method)": [[667, "sklearn.linear_model.QuantileRegressor.score"]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[667, "sklearn.linear_model.QuantileRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.quantileregressor method)": [[667, "sklearn.linear_model.QuantileRegressor.set_params"]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[667, "sklearn.linear_model.QuantileRegressor.set_score_request"]], "ransacregressor (class in sklearn.linear_model)": [[668, "sklearn.linear_model.RANSACRegressor"]], "fit() (sklearn.linear_model.ransacregressor method)": [[668, "sklearn.linear_model.RANSACRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[668, "sklearn.linear_model.RANSACRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.ransacregressor method)": [[668, "sklearn.linear_model.RANSACRegressor.get_params"]], "predict() (sklearn.linear_model.ransacregressor method)": [[668, "sklearn.linear_model.RANSACRegressor.predict"]], "score() (sklearn.linear_model.ransacregressor method)": [[668, "sklearn.linear_model.RANSACRegressor.score"]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[668, "sklearn.linear_model.RANSACRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.ransacregressor method)": [[668, "sklearn.linear_model.RANSACRegressor.set_params"]], "ridge (class in sklearn.linear_model)": [[669, "sklearn.linear_model.Ridge"]], "fit() (sklearn.linear_model.ridge method)": [[669, "sklearn.linear_model.Ridge.fit"]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[669, "sklearn.linear_model.Ridge.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridge method)": [[669, "sklearn.linear_model.Ridge.get_params"]], "predict() (sklearn.linear_model.ridge method)": [[669, "sklearn.linear_model.Ridge.predict"]], "score() (sklearn.linear_model.ridge method)": [[669, "sklearn.linear_model.Ridge.score"]], "set_fit_request() (sklearn.linear_model.ridge method)": [[669, "sklearn.linear_model.Ridge.set_fit_request"]], "set_params() (sklearn.linear_model.ridge method)": [[669, "sklearn.linear_model.Ridge.set_params"]], "set_score_request() (sklearn.linear_model.ridge method)": [[669, "sklearn.linear_model.Ridge.set_score_request"]], "ridgecv (class in sklearn.linear_model)": [[670, "sklearn.linear_model.RidgeCV"]], "fit() (sklearn.linear_model.ridgecv method)": [[670, "sklearn.linear_model.RidgeCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[670, "sklearn.linear_model.RidgeCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgecv method)": [[670, "sklearn.linear_model.RidgeCV.get_params"]], "predict() (sklearn.linear_model.ridgecv method)": [[670, "sklearn.linear_model.RidgeCV.predict"]], "score() (sklearn.linear_model.ridgecv method)": [[670, "sklearn.linear_model.RidgeCV.score"]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[670, "sklearn.linear_model.RidgeCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgecv method)": [[670, "sklearn.linear_model.RidgeCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[670, "sklearn.linear_model.RidgeCV.set_score_request"]], "ridgeclassifier (class in sklearn.linear_model)": [[671, "sklearn.linear_model.RidgeClassifier"]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[671, "sklearn.linear_model.RidgeClassifier.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.get_params"]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.predict"]], "score() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[671, "sklearn.linear_model.RidgeClassifier.set_score_request"]], "ridgeclassifiercv (class in sklearn.linear_model)": [[672, "sklearn.linear_model.RidgeClassifierCV"]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[672, "sklearn.linear_model.RidgeClassifierCV.classes_"]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.decision_function"]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.fit"]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing"]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.get_params"]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.predict"]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.score"]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.set_fit_request"]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.set_params"]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[672, "sklearn.linear_model.RidgeClassifierCV.set_score_request"]], "sgdclassifier (class in sklearn.linear_model)": [[673, "sklearn.linear_model.SGDClassifier"]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.decision_function"]], "densify() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.densify"]], "fit() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.get_params"]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.partial_fit"]], "predict() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.predict"]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.predict_log_proba"]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.predict_proba"]], "score() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.score"]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.set_fit_request"]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.set_score_request"]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[673, "sklearn.linear_model.SGDClassifier.sparsify"]], "sgdoneclasssvm (class in sklearn.linear_model)": [[674, "sklearn.linear_model.SGDOneClassSVM"]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.decision_function"]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.densify"]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.fit"]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.get_params"]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.partial_fit"]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.predict"]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.score_samples"]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.set_fit_request"]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request"]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[674, "sklearn.linear_model.SGDOneClassSVM.sparsify"]], "sgdregressor (class in sklearn.linear_model)": [[675, "sklearn.linear_model.SGDRegressor"]], "densify() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.densify"]], "fit() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.get_params"]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.partial_fit"]], "predict() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.predict"]], "score() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.score"]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.set_params"]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.set_score_request"]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[675, "sklearn.linear_model.SGDRegressor.sparsify"]], "theilsenregressor (class in sklearn.linear_model)": [[676, "sklearn.linear_model.TheilSenRegressor"]], "fit() (sklearn.linear_model.theilsenregressor method)": [[676, "sklearn.linear_model.TheilSenRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[676, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[676, "sklearn.linear_model.TheilSenRegressor.get_params"]], "predict() (sklearn.linear_model.theilsenregressor method)": [[676, "sklearn.linear_model.TheilSenRegressor.predict"]], "score() (sklearn.linear_model.theilsenregressor method)": [[676, "sklearn.linear_model.TheilSenRegressor.score"]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[676, "sklearn.linear_model.TheilSenRegressor.set_params"]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[676, "sklearn.linear_model.TheilSenRegressor.set_score_request"]], "tweedieregressor (class in sklearn.linear_model)": [[677, "sklearn.linear_model.TweedieRegressor"]], "fit() (sklearn.linear_model.tweedieregressor method)": [[677, "sklearn.linear_model.TweedieRegressor.fit"]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[677, "sklearn.linear_model.TweedieRegressor.get_metadata_routing"]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[677, "sklearn.linear_model.TweedieRegressor.get_params"]], "predict() (sklearn.linear_model.tweedieregressor method)": [[677, "sklearn.linear_model.TweedieRegressor.predict"]], "score() (sklearn.linear_model.tweedieregressor method)": [[677, "sklearn.linear_model.TweedieRegressor.score"]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[677, "sklearn.linear_model.TweedieRegressor.set_fit_request"]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[677, "sklearn.linear_model.TweedieRegressor.set_params"]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[677, "sklearn.linear_model.TweedieRegressor.set_score_request"]], "enet_path() (in module sklearn.linear_model)": [[678, "sklearn.linear_model.enet_path"]], "lars_path() (in module sklearn.linear_model)": [[679, "sklearn.linear_model.lars_path"]], "lars_path_gram() (in module sklearn.linear_model)": [[680, "sklearn.linear_model.lars_path_gram"]], "lasso_path() (in module sklearn.linear_model)": [[681, "sklearn.linear_model.lasso_path"]], "orthogonal_mp() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.orthogonal_mp"]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.orthogonal_mp_gram"]], "ridge_regression() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.ridge_regression"]], "isomap (class in sklearn.manifold)": [[685, "sklearn.manifold.Isomap"]], "fit() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.fit"]], "fit_transform() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.fit_transform"]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.get_metadata_routing"]], "get_params() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.get_params"]], "reconstruction_error() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.reconstruction_error"]], "set_output() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.set_output"]], "set_params() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.set_params"]], "transform() (sklearn.manifold.isomap method)": [[685, "sklearn.manifold.Isomap.transform"]], "locallylinearembedding (class in sklearn.manifold)": [[686, "sklearn.manifold.LocallyLinearEmbedding"]], "fit() (sklearn.manifold.locallylinearembedding method)": [[686, "sklearn.manifold.LocallyLinearEmbedding.fit"]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[686, "sklearn.manifold.LocallyLinearEmbedding.fit_transform"]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[686, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[686, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[686, "sklearn.manifold.LocallyLinearEmbedding.get_params"]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[686, "sklearn.manifold.LocallyLinearEmbedding.set_output"]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[686, "sklearn.manifold.LocallyLinearEmbedding.set_params"]], "transform() (sklearn.manifold.locallylinearembedding method)": [[686, "sklearn.manifold.LocallyLinearEmbedding.transform"]], "mds (class in sklearn.manifold)": [[687, "sklearn.manifold.MDS"]], "fit() (sklearn.manifold.mds method)": [[687, "sklearn.manifold.MDS.fit"]], "fit_transform() (sklearn.manifold.mds method)": [[687, "sklearn.manifold.MDS.fit_transform"]], "get_metadata_routing() (sklearn.manifold.mds method)": [[687, "sklearn.manifold.MDS.get_metadata_routing"]], "get_params() (sklearn.manifold.mds method)": [[687, "sklearn.manifold.MDS.get_params"]], "set_fit_request() (sklearn.manifold.mds method)": [[687, "sklearn.manifold.MDS.set_fit_request"]], "set_params() (sklearn.manifold.mds method)": [[687, "sklearn.manifold.MDS.set_params"]], "spectralembedding (class in sklearn.manifold)": [[688, "sklearn.manifold.SpectralEmbedding"]], "fit() (sklearn.manifold.spectralembedding method)": [[688, "sklearn.manifold.SpectralEmbedding.fit"]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[688, "sklearn.manifold.SpectralEmbedding.fit_transform"]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[688, "sklearn.manifold.SpectralEmbedding.get_metadata_routing"]], "get_params() (sklearn.manifold.spectralembedding method)": [[688, "sklearn.manifold.SpectralEmbedding.get_params"]], "set_params() (sklearn.manifold.spectralembedding method)": [[688, "sklearn.manifold.SpectralEmbedding.set_params"]], "tsne (class in sklearn.manifold)": [[689, "sklearn.manifold.TSNE"]], "fit() (sklearn.manifold.tsne method)": [[689, "sklearn.manifold.TSNE.fit"]], "fit_transform() (sklearn.manifold.tsne method)": [[689, "sklearn.manifold.TSNE.fit_transform"]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[689, "sklearn.manifold.TSNE.get_feature_names_out"]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[689, "sklearn.manifold.TSNE.get_metadata_routing"]], "get_params() (sklearn.manifold.tsne method)": [[689, "sklearn.manifold.TSNE.get_params"]], "set_output() (sklearn.manifold.tsne method)": [[689, "sklearn.manifold.TSNE.set_output"]], "set_params() (sklearn.manifold.tsne method)": [[689, "sklearn.manifold.TSNE.set_params"]], "locally_linear_embedding() (in module sklearn.manifold)": [[690, "sklearn.manifold.locally_linear_embedding"]], "smacof() (in module sklearn.manifold)": [[691, "sklearn.manifold.smacof"]], "spectral_embedding() (in module sklearn.manifold)": [[692, "sklearn.manifold.spectral_embedding"]], "trustworthiness() (in module sklearn.manifold)": [[693, "sklearn.manifold.trustworthiness"]], "confusionmatrixdisplay (class in sklearn.metrics)": [[694, "sklearn.metrics.ConfusionMatrixDisplay"]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[694, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[694, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions"]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[694, "sklearn.metrics.ConfusionMatrixDisplay.plot"]], "detcurvedisplay (class in sklearn.metrics)": [[695, "sklearn.metrics.DetCurveDisplay"]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[695, "sklearn.metrics.DetCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[695, "sklearn.metrics.DetCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.detcurvedisplay method)": [[695, "sklearn.metrics.DetCurveDisplay.plot"]], "distancemetric (class in sklearn.metrics)": [[696, "sklearn.metrics.DistanceMetric"]], "get_metric() (sklearn.metrics.distancemetric class method)": [[696, "sklearn.metrics.DistanceMetric.get_metric"]], "precisionrecalldisplay (class in sklearn.metrics)": [[697, "sklearn.metrics.PrecisionRecallDisplay"]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[697, "sklearn.metrics.PrecisionRecallDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[697, "sklearn.metrics.PrecisionRecallDisplay.from_predictions"]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[697, "sklearn.metrics.PrecisionRecallDisplay.plot"]], "predictionerrordisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.PredictionErrorDisplay"]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[698, "sklearn.metrics.PredictionErrorDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[698, "sklearn.metrics.PredictionErrorDisplay.from_predictions"]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[698, "sklearn.metrics.PredictionErrorDisplay.plot"]], "roccurvedisplay (class in sklearn.metrics)": [[699, "sklearn.metrics.RocCurveDisplay"]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[699, "sklearn.metrics.RocCurveDisplay.from_estimator"]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[699, "sklearn.metrics.RocCurveDisplay.from_predictions"]], "plot() (sklearn.metrics.roccurvedisplay method)": [[699, "sklearn.metrics.RocCurveDisplay.plot"]], "accuracy_score() (in module sklearn.metrics)": [[700, "sklearn.metrics.accuracy_score"]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[701, "sklearn.metrics.adjusted_mutual_info_score"]], "adjusted_rand_score() (in module sklearn.metrics)": [[702, "sklearn.metrics.adjusted_rand_score"]], "auc() (in module sklearn.metrics)": [[703, "sklearn.metrics.auc"]], "average_precision_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.average_precision_score"]], "balanced_accuracy_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.balanced_accuracy_score"]], "brier_score_loss() (in module sklearn.metrics)": [[706, "sklearn.metrics.brier_score_loss"]], "calinski_harabasz_score() (in module sklearn.metrics)": [[707, "sklearn.metrics.calinski_harabasz_score"]], "check_scoring() (in module sklearn.metrics)": [[708, "sklearn.metrics.check_scoring"]], "class_likelihood_ratios() (in module sklearn.metrics)": [[709, "sklearn.metrics.class_likelihood_ratios"]], "classification_report() (in module sklearn.metrics)": [[710, "sklearn.metrics.classification_report"]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[711, "sklearn.metrics.cluster.contingency_matrix"]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[712, "sklearn.metrics.cluster.pair_confusion_matrix"]], "cohen_kappa_score() (in module sklearn.metrics)": [[713, "sklearn.metrics.cohen_kappa_score"]], "completeness_score() (in module sklearn.metrics)": [[714, "sklearn.metrics.completeness_score"]], "confusion_matrix() (in module sklearn.metrics)": [[715, "sklearn.metrics.confusion_matrix"]], "consensus_score() (in module sklearn.metrics)": [[716, "sklearn.metrics.consensus_score"]], "coverage_error() (in module sklearn.metrics)": [[717, "sklearn.metrics.coverage_error"]], "d2_absolute_error_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.d2_absolute_error_score"]], "d2_pinball_score() (in module sklearn.metrics)": [[719, "sklearn.metrics.d2_pinball_score"]], "d2_tweedie_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.d2_tweedie_score"]], "davies_bouldin_score() (in module sklearn.metrics)": [[721, "sklearn.metrics.davies_bouldin_score"]], "dcg_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.dcg_score"]], "det_curve() (in module sklearn.metrics)": [[723, "sklearn.metrics.det_curve"]], "explained_variance_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.explained_variance_score"]], "f1_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.f1_score"]], "fbeta_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.fbeta_score"]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.fowlkes_mallows_score"]], "get_scorer() (in module sklearn.metrics)": [[728, "sklearn.metrics.get_scorer"]], "get_scorer_names() (in module sklearn.metrics)": [[729, "sklearn.metrics.get_scorer_names"]], "hamming_loss() (in module sklearn.metrics)": [[730, "sklearn.metrics.hamming_loss"]], "hinge_loss() (in module sklearn.metrics)": [[731, "sklearn.metrics.hinge_loss"]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[732, "sklearn.metrics.homogeneity_completeness_v_measure"]], "homogeneity_score() (in module sklearn.metrics)": [[733, "sklearn.metrics.homogeneity_score"]], "jaccard_score() (in module sklearn.metrics)": [[734, "sklearn.metrics.jaccard_score"]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[735, "sklearn.metrics.label_ranking_average_precision_score"]], "label_ranking_loss() (in module sklearn.metrics)": [[736, "sklearn.metrics.label_ranking_loss"]], "log_loss() (in module sklearn.metrics)": [[737, "sklearn.metrics.log_loss"]], "make_scorer() (in module sklearn.metrics)": [[738, "sklearn.metrics.make_scorer"]], "matthews_corrcoef() (in module sklearn.metrics)": [[739, "sklearn.metrics.matthews_corrcoef"]], "max_error() (in module sklearn.metrics)": [[740, "sklearn.metrics.max_error"]], "mean_absolute_error() (in module sklearn.metrics)": [[741, "sklearn.metrics.mean_absolute_error"]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[742, "sklearn.metrics.mean_absolute_percentage_error"]], "mean_gamma_deviance() (in module sklearn.metrics)": [[743, "sklearn.metrics.mean_gamma_deviance"]], "mean_pinball_loss() (in module sklearn.metrics)": [[744, "sklearn.metrics.mean_pinball_loss"]], "mean_poisson_deviance() (in module sklearn.metrics)": [[745, "sklearn.metrics.mean_poisson_deviance"]], "mean_squared_error() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_squared_error"]], "mean_squared_log_error() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_squared_log_error"]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_tweedie_deviance"]], "median_absolute_error() (in module sklearn.metrics)": [[749, "sklearn.metrics.median_absolute_error"]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[750, "sklearn.metrics.multilabel_confusion_matrix"]], "mutual_info_score() (in module sklearn.metrics)": [[751, "sklearn.metrics.mutual_info_score"]], "ndcg_score() (in module sklearn.metrics)": [[752, "sklearn.metrics.ndcg_score"]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[753, "sklearn.metrics.normalized_mutual_info_score"]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[754, "sklearn.metrics.pairwise.additive_chi2_kernel"]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[755, "sklearn.metrics.pairwise.chi2_kernel"]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[756, "sklearn.metrics.pairwise.cosine_distances"]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[757, "sklearn.metrics.pairwise.cosine_similarity"]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[758, "sklearn.metrics.pairwise.distance_metrics"]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.euclidean_distances"]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.haversine_distances"]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.kernel_metrics"]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.laplacian_kernel"]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.linear_kernel"]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.manhattan_distances"]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.nan_euclidean_distances"]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.paired_cosine_distances"]], "paired_distances() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.paired_distances"]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.paired_euclidean_distances"]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.paired_manhattan_distances"]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.pairwise_kernels"]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.polynomial_kernel"]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.rbf_kernel"]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.sigmoid_kernel"]], "pairwise_distances() (in module sklearn.metrics)": [[774, "sklearn.metrics.pairwise_distances"]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[775, "sklearn.metrics.pairwise_distances_argmin"]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[776, "sklearn.metrics.pairwise_distances_argmin_min"]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[777, "sklearn.metrics.pairwise_distances_chunked"]], "precision_recall_curve() (in module sklearn.metrics)": [[778, "sklearn.metrics.precision_recall_curve"]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[779, "sklearn.metrics.precision_recall_fscore_support"]], "precision_score() (in module sklearn.metrics)": [[780, "sklearn.metrics.precision_score"]], "r2_score() (in module sklearn.metrics)": [[781, "sklearn.metrics.r2_score"]], "rand_score() (in module sklearn.metrics)": [[782, "sklearn.metrics.rand_score"]], "recall_score() (in module sklearn.metrics)": [[783, "sklearn.metrics.recall_score"]], "roc_auc_score() (in module sklearn.metrics)": [[784, "sklearn.metrics.roc_auc_score"]], "roc_curve() (in module sklearn.metrics)": [[785, "sklearn.metrics.roc_curve"]], "root_mean_squared_error() (in module sklearn.metrics)": [[786, "sklearn.metrics.root_mean_squared_error"]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[787, "sklearn.metrics.root_mean_squared_log_error"]], "silhouette_samples() (in module sklearn.metrics)": [[788, "sklearn.metrics.silhouette_samples"]], "silhouette_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.silhouette_score"]], "top_k_accuracy_score() (in module sklearn.metrics)": [[790, "sklearn.metrics.top_k_accuracy_score"]], "v_measure_score() (in module sklearn.metrics)": [[791, "sklearn.metrics.v_measure_score"]], "zero_one_loss() (in module sklearn.metrics)": [[792, "sklearn.metrics.zero_one_loss"]], "bayesiangaussianmixture (class in sklearn.mixture)": [[793, "sklearn.mixture.BayesianGaussianMixture"]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.fit"]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.get_params"]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.predict"]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.predict_proba"]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.sample"]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.score"]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.score_samples"]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[793, "sklearn.mixture.BayesianGaussianMixture.set_params"]], "gaussianmixture (class in sklearn.mixture)": [[794, "sklearn.mixture.GaussianMixture"]], "aic() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.aic"]], "bic() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.bic"]], "fit() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.fit"]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.fit_predict"]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.get_metadata_routing"]], "get_params() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.get_params"]], "predict() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.predict"]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.predict_proba"]], "sample() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.sample"]], "score() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.score"]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.score_samples"]], "set_params() (sklearn.mixture.gaussianmixture method)": [[794, "sklearn.mixture.GaussianMixture.set_params"]], "gridsearchcv (class in sklearn.model_selection)": [[795, "sklearn.model_selection.GridSearchCV"]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[795, "sklearn.model_selection.GridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.decision_function"]], "fit() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[795, "sklearn.model_selection.GridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.predict_proba"]], "score() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.score"]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.set_params"]], "transform() (sklearn.model_selection.gridsearchcv method)": [[795, "sklearn.model_selection.GridSearchCV.transform"]], "groupkfold (class in sklearn.model_selection)": [[796, "sklearn.model_selection.GroupKFold"]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[796, "sklearn.model_selection.GroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[796, "sklearn.model_selection.GroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[796, "sklearn.model_selection.GroupKFold.set_split_request"]], "split() (sklearn.model_selection.groupkfold method)": [[796, "sklearn.model_selection.GroupKFold.split"]], "groupshufflesplit (class in sklearn.model_selection)": [[797, "sklearn.model_selection.GroupShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[797, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[797, "sklearn.model_selection.GroupShuffleSplit.get_n_splits"]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[797, "sklearn.model_selection.GroupShuffleSplit.set_split_request"]], "split() (sklearn.model_selection.groupshufflesplit method)": [[797, "sklearn.model_selection.GroupShuffleSplit.split"]], "halvinggridsearchcv (class in sklearn.model_selection)": [[798, "sklearn.model_selection.HalvingGridSearchCV"]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[798, "sklearn.model_selection.HalvingGridSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[798, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.score"]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.set_params"]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[798, "sklearn.model_selection.HalvingGridSearchCV.transform"]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[799, "sklearn.model_selection.HalvingRandomSearchCV"]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.classes_"]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.decision_function"]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba"]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.score"]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.score_samples"]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.set_params"]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[799, "sklearn.model_selection.HalvingRandomSearchCV.transform"]], "kfold (class in sklearn.model_selection)": [[800, "sklearn.model_selection.KFold"]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[800, "sklearn.model_selection.KFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.kfold method)": [[800, "sklearn.model_selection.KFold.get_n_splits"]], "split() (sklearn.model_selection.kfold method)": [[800, "sklearn.model_selection.KFold.split"]], "learningcurvedisplay (class in sklearn.model_selection)": [[801, "sklearn.model_selection.LearningCurveDisplay"]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[801, "sklearn.model_selection.LearningCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[801, "sklearn.model_selection.LearningCurveDisplay.plot"]], "leaveonegroupout (class in sklearn.model_selection)": [[802, "sklearn.model_selection.LeaveOneGroupOut"]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[802, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[802, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[802, "sklearn.model_selection.LeaveOneGroupOut.set_split_request"]], "split() (sklearn.model_selection.leaveonegroupout method)": [[802, "sklearn.model_selection.LeaveOneGroupOut.split"]], "leaveoneout (class in sklearn.model_selection)": [[803, "sklearn.model_selection.LeaveOneOut"]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[803, "sklearn.model_selection.LeaveOneOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[803, "sklearn.model_selection.LeaveOneOut.get_n_splits"]], "split() (sklearn.model_selection.leaveoneout method)": [[803, "sklearn.model_selection.LeaveOneOut.split"]], "leavepgroupsout (class in sklearn.model_selection)": [[804, "sklearn.model_selection.LeavePGroupsOut"]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[804, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[804, "sklearn.model_selection.LeavePGroupsOut.get_n_splits"]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[804, "sklearn.model_selection.LeavePGroupsOut.set_split_request"]], "split() (sklearn.model_selection.leavepgroupsout method)": [[804, "sklearn.model_selection.LeavePGroupsOut.split"]], "leavepout (class in sklearn.model_selection)": [[805, "sklearn.model_selection.LeavePOut"]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[805, "sklearn.model_selection.LeavePOut.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[805, "sklearn.model_selection.LeavePOut.get_n_splits"]], "split() (sklearn.model_selection.leavepout method)": [[805, "sklearn.model_selection.LeavePOut.split"]], "parametergrid (class in sklearn.model_selection)": [[806, "sklearn.model_selection.ParameterGrid"]], "parametersampler (class in sklearn.model_selection)": [[807, "sklearn.model_selection.ParameterSampler"]], "predefinedsplit (class in sklearn.model_selection)": [[808, "sklearn.model_selection.PredefinedSplit"]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[808, "sklearn.model_selection.PredefinedSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[808, "sklearn.model_selection.PredefinedSplit.get_n_splits"]], "split() (sklearn.model_selection.predefinedsplit method)": [[808, "sklearn.model_selection.PredefinedSplit.split"]], "randomizedsearchcv (class in sklearn.model_selection)": [[809, "sklearn.model_selection.RandomizedSearchCV"]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[809, "sklearn.model_selection.RandomizedSearchCV.classes_"]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.decision_function"]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.fit"]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing"]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.get_params"]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.inverse_transform"]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[809, "sklearn.model_selection.RandomizedSearchCV.n_features_in_"]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.predict"]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba"]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.predict_proba"]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.score"]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.score_samples"]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.set_params"]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[809, "sklearn.model_selection.RandomizedSearchCV.transform"]], "repeatedkfold (class in sklearn.model_selection)": [[810, "sklearn.model_selection.RepeatedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[810, "sklearn.model_selection.RepeatedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[810, "sklearn.model_selection.RepeatedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedkfold method)": [[810, "sklearn.model_selection.RepeatedKFold.split"]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[811, "sklearn.model_selection.RepeatedStratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[811, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[811, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[811, "sklearn.model_selection.RepeatedStratifiedKFold.split"]], "shufflesplit (class in sklearn.model_selection)": [[812, "sklearn.model_selection.ShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[812, "sklearn.model_selection.ShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[812, "sklearn.model_selection.ShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.shufflesplit method)": [[812, "sklearn.model_selection.ShuffleSplit.split"]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[813, "sklearn.model_selection.StratifiedGroupKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[813, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[813, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits"]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[813, "sklearn.model_selection.StratifiedGroupKFold.set_split_request"]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[813, "sklearn.model_selection.StratifiedGroupKFold.split"]], "stratifiedkfold (class in sklearn.model_selection)": [[814, "sklearn.model_selection.StratifiedKFold"]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[814, "sklearn.model_selection.StratifiedKFold.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[814, "sklearn.model_selection.StratifiedKFold.get_n_splits"]], "split() (sklearn.model_selection.stratifiedkfold method)": [[814, "sklearn.model_selection.StratifiedKFold.split"]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[815, "sklearn.model_selection.StratifiedShuffleSplit"]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[815, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[815, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits"]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[815, "sklearn.model_selection.StratifiedShuffleSplit.split"]], "timeseriessplit (class in sklearn.model_selection)": [[816, "sklearn.model_selection.TimeSeriesSplit"]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[816, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing"]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[816, "sklearn.model_selection.TimeSeriesSplit.get_n_splits"]], "split() (sklearn.model_selection.timeseriessplit method)": [[816, "sklearn.model_selection.TimeSeriesSplit.split"]], "validationcurvedisplay (class in sklearn.model_selection)": [[817, "sklearn.model_selection.ValidationCurveDisplay"]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[817, "sklearn.model_selection.ValidationCurveDisplay.from_estimator"]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[817, "sklearn.model_selection.ValidationCurveDisplay.plot"]], "check_cv() (in module sklearn.model_selection)": [[818, "sklearn.model_selection.check_cv"]], "cross_val_predict() (in module sklearn.model_selection)": [[819, "sklearn.model_selection.cross_val_predict"]], "cross_val_score() (in module sklearn.model_selection)": [[820, "sklearn.model_selection.cross_val_score"]], "cross_validate() (in module sklearn.model_selection)": [[821, "sklearn.model_selection.cross_validate"]], "learning_curve() (in module sklearn.model_selection)": [[822, "sklearn.model_selection.learning_curve"]], "permutation_test_score() (in module sklearn.model_selection)": [[823, "sklearn.model_selection.permutation_test_score"]], "train_test_split() (in module sklearn.model_selection)": [[824, "sklearn.model_selection.train_test_split"]], "validation_curve() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.validation_curve"]], "onevsoneclassifier (class in sklearn.multiclass)": [[826, "sklearn.multiclass.OneVsOneClassifier"]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.get_params"]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[826, "sklearn.multiclass.OneVsOneClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.predict"]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.score"]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[826, "sklearn.multiclass.OneVsOneClassifier.set_score_request"]], "onevsrestclassifier (class in sklearn.multiclass)": [[827, "sklearn.multiclass.OneVsRestClassifier"]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.decision_function"]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.get_params"]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[827, "sklearn.multiclass.OneVsRestClassifier.multilabel_"]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[827, "sklearn.multiclass.OneVsRestClassifier.n_classes_"]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.partial_fit"]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.predict"]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.predict_proba"]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.score"]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.set_params"]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[827, "sklearn.multiclass.OneVsRestClassifier.set_score_request"]], "outputcodeclassifier (class in sklearn.multiclass)": [[828, "sklearn.multiclass.OutputCodeClassifier"]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[828, "sklearn.multiclass.OutputCodeClassifier.fit"]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[828, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing"]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[828, "sklearn.multiclass.OutputCodeClassifier.get_params"]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[828, "sklearn.multiclass.OutputCodeClassifier.predict"]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[828, "sklearn.multiclass.OutputCodeClassifier.score"]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[828, "sklearn.multiclass.OutputCodeClassifier.set_params"]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[828, "sklearn.multiclass.OutputCodeClassifier.set_score_request"]], "classifierchain (class in sklearn.multioutput)": [[829, "sklearn.multioutput.ClassifierChain"]], "decision_function() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.decision_function"]], "fit() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.fit"]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.get_params"]], "predict() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.predict"]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.predict_proba"]], "score() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.score"]], "set_params() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.set_params"]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[829, "sklearn.multioutput.ClassifierChain.set_score_request"]], "multioutputclassifier (class in sklearn.multioutput)": [[830, "sklearn.multioutput.MultiOutputClassifier"]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.get_params"]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.partial_fit"]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.predict"]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.predict_proba"]], "score() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.score"]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[830, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request"]], "multioutputregressor (class in sklearn.multioutput)": [[831, "sklearn.multioutput.MultiOutputRegressor"]], "fit() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.fit"]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing"]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.get_params"]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.partial_fit"]], "predict() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.predict"]], "score() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.score"]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.set_fit_request"]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.set_params"]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request"]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[831, "sklearn.multioutput.MultiOutputRegressor.set_score_request"]], "regressorchain (class in sklearn.multioutput)": [[832, "sklearn.multioutput.RegressorChain"]], "fit() (sklearn.multioutput.regressorchain method)": [[832, "sklearn.multioutput.RegressorChain.fit"]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[832, "sklearn.multioutput.RegressorChain.get_metadata_routing"]], "get_params() (sklearn.multioutput.regressorchain method)": [[832, "sklearn.multioutput.RegressorChain.get_params"]], "predict() (sklearn.multioutput.regressorchain method)": [[832, "sklearn.multioutput.RegressorChain.predict"]], "score() (sklearn.multioutput.regressorchain method)": [[832, "sklearn.multioutput.RegressorChain.score"]], "set_params() (sklearn.multioutput.regressorchain method)": [[832, "sklearn.multioutput.RegressorChain.set_params"]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[832, "sklearn.multioutput.RegressorChain.set_score_request"]], "bernoullinb (class in sklearn.naive_bayes)": [[833, "sklearn.naive_bayes.BernoulliNB"]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.get_params"]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.partial_fit"]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.predict_proba"]], "score() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.score"]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[833, "sklearn.naive_bayes.BernoulliNB.set_score_request"]], "categoricalnb (class in sklearn.naive_bayes)": [[834, "sklearn.naive_bayes.CategoricalNB"]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.get_params"]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.partial_fit"]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.predict_proba"]], "score() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.score"]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[834, "sklearn.naive_bayes.CategoricalNB.set_score_request"]], "complementnb (class in sklearn.naive_bayes)": [[835, "sklearn.naive_bayes.ComplementNB"]], "fit() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.get_params"]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.partial_fit"]], "predict() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.predict_proba"]], "score() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.score"]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[835, "sklearn.naive_bayes.ComplementNB.set_score_request"]], "gaussiannb (class in sklearn.naive_bayes)": [[836, "sklearn.naive_bayes.GaussianNB"]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.get_params"]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.partial_fit"]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.predict_proba"]], "score() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.score"]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[836, "sklearn.naive_bayes.GaussianNB.set_score_request"]], "multinomialnb (class in sklearn.naive_bayes)": [[837, "sklearn.naive_bayes.MultinomialNB"]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.fit"]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing"]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.get_params"]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.partial_fit"]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.predict"]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba"]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.predict_log_proba"]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.predict_proba"]], "score() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.score"]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.set_fit_request"]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.set_params"]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request"]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[837, "sklearn.naive_bayes.MultinomialNB.set_score_request"]], "balltree (class in sklearn.neighbors)": [[838, "sklearn.neighbors.BallTree"]], "get_arrays() (sklearn.neighbors.balltree method)": [[838, "sklearn.neighbors.BallTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.balltree method)": [[838, "sklearn.neighbors.BallTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[838, "sklearn.neighbors.BallTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.balltree method)": [[838, "sklearn.neighbors.BallTree.kernel_density"]], "query() (sklearn.neighbors.balltree method)": [[838, "sklearn.neighbors.BallTree.query"]], "query_radius() (sklearn.neighbors.balltree method)": [[838, "sklearn.neighbors.BallTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[838, "sklearn.neighbors.BallTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[838, "sklearn.neighbors.BallTree.two_point_correlation"]], "kdtree (class in sklearn.neighbors)": [[839, "sklearn.neighbors.KDTree"]], "get_arrays() (sklearn.neighbors.kdtree method)": [[839, "sklearn.neighbors.KDTree.get_arrays"]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[839, "sklearn.neighbors.KDTree.get_n_calls"]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[839, "sklearn.neighbors.KDTree.get_tree_stats"]], "kernel_density() (sklearn.neighbors.kdtree method)": [[839, "sklearn.neighbors.KDTree.kernel_density"]], "query() (sklearn.neighbors.kdtree method)": [[839, "sklearn.neighbors.KDTree.query"]], "query_radius() (sklearn.neighbors.kdtree method)": [[839, "sklearn.neighbors.KDTree.query_radius"]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[839, "sklearn.neighbors.KDTree.reset_n_calls"]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[839, "sklearn.neighbors.KDTree.two_point_correlation"]], "kneighborsclassifier (class in sklearn.neighbors)": [[840, "sklearn.neighbors.KNeighborsClassifier"]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.predict_proba"]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[840, "sklearn.neighbors.KNeighborsClassifier.set_score_request"]], "kneighborsregressor (class in sklearn.neighbors)": [[841, "sklearn.neighbors.KNeighborsRegressor"]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.get_params"]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph"]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.predict"]], "score() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[841, "sklearn.neighbors.KNeighborsRegressor.set_score_request"]], "kneighborstransformer (class in sklearn.neighbors)": [[842, "sklearn.neighbors.KNeighborsTransformer"]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.get_params"]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph"]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[842, "sklearn.neighbors.KNeighborsTransformer.transform"]], "kerneldensity (class in sklearn.neighbors)": [[843, "sklearn.neighbors.KernelDensity"]], "fit() (sklearn.neighbors.kerneldensity method)": [[843, "sklearn.neighbors.KernelDensity.fit"]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[843, "sklearn.neighbors.KernelDensity.get_metadata_routing"]], "get_params() (sklearn.neighbors.kerneldensity method)": [[843, "sklearn.neighbors.KernelDensity.get_params"]], "sample() (sklearn.neighbors.kerneldensity method)": [[843, "sklearn.neighbors.KernelDensity.sample"]], "score() (sklearn.neighbors.kerneldensity method)": [[843, "sklearn.neighbors.KernelDensity.score"]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[843, "sklearn.neighbors.KernelDensity.score_samples"]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[843, "sklearn.neighbors.KernelDensity.set_fit_request"]], "set_params() (sklearn.neighbors.kerneldensity method)": [[843, "sklearn.neighbors.KernelDensity.set_params"]], "localoutlierfactor (class in sklearn.neighbors)": [[844, "sklearn.neighbors.LocalOutlierFactor"]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.decision_function"]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.fit"]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.fit_predict"]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing"]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.get_params"]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph"]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.predict"]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.score_samples"]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[844, "sklearn.neighbors.LocalOutlierFactor.set_params"]], "nearestcentroid (class in sklearn.neighbors)": [[845, "sklearn.neighbors.NearestCentroid"]], "fit() (sklearn.neighbors.nearestcentroid method)": [[845, "sklearn.neighbors.NearestCentroid.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[845, "sklearn.neighbors.NearestCentroid.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[845, "sklearn.neighbors.NearestCentroid.get_params"]], "predict() (sklearn.neighbors.nearestcentroid method)": [[845, "sklearn.neighbors.NearestCentroid.predict"]], "score() (sklearn.neighbors.nearestcentroid method)": [[845, "sklearn.neighbors.NearestCentroid.score"]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[845, "sklearn.neighbors.NearestCentroid.set_params"]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[845, "sklearn.neighbors.NearestCentroid.set_score_request"]], "nearestneighbors (class in sklearn.neighbors)": [[846, "sklearn.neighbors.NearestNeighbors"]], "fit() (sklearn.neighbors.nearestneighbors method)": [[846, "sklearn.neighbors.NearestNeighbors.fit"]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[846, "sklearn.neighbors.NearestNeighbors.get_metadata_routing"]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[846, "sklearn.neighbors.NearestNeighbors.get_params"]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[846, "sklearn.neighbors.NearestNeighbors.kneighbors"]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[846, "sklearn.neighbors.NearestNeighbors.kneighbors_graph"]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[846, "sklearn.neighbors.NearestNeighbors.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[846, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph"]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[846, "sklearn.neighbors.NearestNeighbors.set_params"]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis"]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit"]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing"]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params"]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output"]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params"]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[847, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform"]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier"]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.get_params"]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.predict"]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.score"]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[848, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request"]], "radiusneighborsregressor (class in sklearn.neighbors)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor"]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.fit"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.get_params"]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.predict"]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph"]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.score"]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.set_params"]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[849, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request"]], "radiusneighborstransformer (class in sklearn.neighbors)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer"]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.fit"]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform"]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing"]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.get_params"]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors"]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph"]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.set_output"]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.set_params"]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[850, "sklearn.neighbors.RadiusNeighborsTransformer.transform"]], "kneighbors_graph() (in module sklearn.neighbors)": [[851, "sklearn.neighbors.kneighbors_graph"]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[852, "sklearn.neighbors.radius_neighbors_graph"]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[853, "sklearn.neighbors.sort_graph_by_row_values"]], "bernoullirbm (class in sklearn.neural_network)": [[854, "sklearn.neural_network.BernoulliRBM"]], "fit() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.fit"]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.fit_transform"]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.get_feature_names_out"]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.get_metadata_routing"]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.get_params"]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.gibbs"]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.partial_fit"]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.score_samples"]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.set_output"]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.set_params"]], "transform() (sklearn.neural_network.bernoullirbm method)": [[854, "sklearn.neural_network.BernoulliRBM.transform"]], "mlpclassifier (class in sklearn.neural_network)": [[855, "sklearn.neural_network.MLPClassifier"]], "fit() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.get_params"]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.partial_fit"]], "predict() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.predict"]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.predict_log_proba"]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.predict_proba"]], "score() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.score"]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.set_params"]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.set_partial_fit_request"]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[855, "sklearn.neural_network.MLPClassifier.set_score_request"]], "mlpregressor (class in sklearn.neural_network)": [[856, "sklearn.neural_network.MLPRegressor"]], "fit() (sklearn.neural_network.mlpregressor method)": [[856, "sklearn.neural_network.MLPRegressor.fit"]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[856, "sklearn.neural_network.MLPRegressor.get_metadata_routing"]], "get_params() (sklearn.neural_network.mlpregressor method)": [[856, "sklearn.neural_network.MLPRegressor.get_params"]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[856, "sklearn.neural_network.MLPRegressor.partial_fit"]], "predict() (sklearn.neural_network.mlpregressor method)": [[856, "sklearn.neural_network.MLPRegressor.predict"]], "score() (sklearn.neural_network.mlpregressor method)": [[856, "sklearn.neural_network.MLPRegressor.score"]], "set_params() (sklearn.neural_network.mlpregressor method)": [[856, "sklearn.neural_network.MLPRegressor.set_params"]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[856, "sklearn.neural_network.MLPRegressor.set_score_request"]], "featureunion (class in sklearn.pipeline)": [[857, "sklearn.pipeline.FeatureUnion"]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[857, "sklearn.pipeline.FeatureUnion.feature_names_in_"]], "fit() (sklearn.pipeline.featureunion method)": [[857, "sklearn.pipeline.FeatureUnion.fit"]], "fit_transform() (sklearn.pipeline.featureunion method)": [[857, "sklearn.pipeline.FeatureUnion.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[857, "sklearn.pipeline.FeatureUnion.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[857, "sklearn.pipeline.FeatureUnion.get_metadata_routing"]], "get_params() (sklearn.pipeline.featureunion method)": [[857, "sklearn.pipeline.FeatureUnion.get_params"]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[857, "sklearn.pipeline.FeatureUnion.n_features_in_"]], "set_output() (sklearn.pipeline.featureunion method)": [[857, "sklearn.pipeline.FeatureUnion.set_output"]], "set_params() (sklearn.pipeline.featureunion method)": [[857, "sklearn.pipeline.FeatureUnion.set_params"]], "transform() (sklearn.pipeline.featureunion method)": [[857, "sklearn.pipeline.FeatureUnion.transform"]], "pipeline (class in sklearn.pipeline)": [[858, "sklearn.pipeline.Pipeline"]], "classes_ (sklearn.pipeline.pipeline property)": [[858, "sklearn.pipeline.Pipeline.classes_"]], "decision_function() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.decision_function"]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[858, "sklearn.pipeline.Pipeline.feature_names_in_"]], "fit() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.fit"]], "fit_predict() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.fit_predict"]], "fit_transform() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.fit_transform"]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.get_feature_names_out"]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.get_metadata_routing"]], "get_params() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.get_params"]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.inverse_transform"]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[858, "sklearn.pipeline.Pipeline.n_features_in_"]], "named_steps (sklearn.pipeline.pipeline property)": [[858, "sklearn.pipeline.Pipeline.named_steps"]], "predict() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.predict"]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.predict_log_proba"]], "predict_proba() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.predict_proba"]], "score() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.score"]], "score_samples() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.score_samples"]], "set_output() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.set_output"]], "set_params() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.set_params"]], "set_score_request() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.set_score_request"]], "transform() (sklearn.pipeline.pipeline method)": [[858, "sklearn.pipeline.Pipeline.transform"]], "make_pipeline() (in module sklearn.pipeline)": [[859, "sklearn.pipeline.make_pipeline"]], "make_union() (in module sklearn.pipeline)": [[860, "sklearn.pipeline.make_union"]], "binarizer (class in sklearn.preprocessing)": [[861, "sklearn.preprocessing.Binarizer"]], "fit() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.fit"]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.get_params"]], "set_output() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.set_output"]], "set_params() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.set_params"]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.set_transform_request"]], "transform() (sklearn.preprocessing.binarizer method)": [[861, "sklearn.preprocessing.Binarizer.transform"]], "functiontransformer (class in sklearn.preprocessing)": [[862, "sklearn.preprocessing.FunctionTransformer"]], "fit() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.fit"]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.set_output"]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.set_params"]], "transform() (sklearn.preprocessing.functiontransformer method)": [[862, "sklearn.preprocessing.FunctionTransformer.transform"]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[863, "sklearn.preprocessing.KBinsDiscretizer"]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.fit"]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.get_params"]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform"]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request"]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.set_output"]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.set_params"]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[863, "sklearn.preprocessing.KBinsDiscretizer.transform"]], "kernelcenterer (class in sklearn.preprocessing)": [[864, "sklearn.preprocessing.KernelCenterer"]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.fit"]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.get_params"]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.set_fit_request"]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.set_output"]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.set_params"]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.set_transform_request"]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[864, "sklearn.preprocessing.KernelCenterer.transform"]], "labelbinarizer (class in sklearn.preprocessing)": [[865, "sklearn.preprocessing.LabelBinarizer"]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.inverse_transform"]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[865, "sklearn.preprocessing.LabelBinarizer.transform"]], "labelencoder (class in sklearn.preprocessing)": [[866, "sklearn.preprocessing.LabelEncoder"]], "fit() (sklearn.preprocessing.labelencoder method)": [[866, "sklearn.preprocessing.LabelEncoder.fit"]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[866, "sklearn.preprocessing.LabelEncoder.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[866, "sklearn.preprocessing.LabelEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.labelencoder method)": [[866, "sklearn.preprocessing.LabelEncoder.get_params"]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[866, "sklearn.preprocessing.LabelEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.labelencoder method)": [[866, "sklearn.preprocessing.LabelEncoder.set_output"]], "set_params() (sklearn.preprocessing.labelencoder method)": [[866, "sklearn.preprocessing.LabelEncoder.set_params"]], "transform() (sklearn.preprocessing.labelencoder method)": [[866, "sklearn.preprocessing.LabelEncoder.transform"]], "maxabsscaler (class in sklearn.preprocessing)": [[867, "sklearn.preprocessing.MaxAbsScaler"]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.fit"]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.partial_fit"]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.set_output"]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.set_params"]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[867, "sklearn.preprocessing.MaxAbsScaler.transform"]], "minmaxscaler (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.MinMaxScaler"]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.fit"]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.partial_fit"]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.set_output"]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.set_params"]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[868, "sklearn.preprocessing.MinMaxScaler.transform"]], "multilabelbinarizer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.MultiLabelBinarizer"]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[869, "sklearn.preprocessing.MultiLabelBinarizer.fit"]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[869, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform"]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[869, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[869, "sklearn.preprocessing.MultiLabelBinarizer.get_params"]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[869, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform"]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[869, "sklearn.preprocessing.MultiLabelBinarizer.set_output"]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[869, "sklearn.preprocessing.MultiLabelBinarizer.set_params"]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[869, "sklearn.preprocessing.MultiLabelBinarizer.transform"]], "normalizer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.Normalizer"]], "fit() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.fit"]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.get_params"]], "set_output() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.set_output"]], "set_params() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.set_params"]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.set_transform_request"]], "transform() (sklearn.preprocessing.normalizer method)": [[870, "sklearn.preprocessing.Normalizer.transform"]], "onehotencoder (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.OneHotEncoder"]], "fit() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.fit"]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[871, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.set_output"]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.set_params"]], "transform() (sklearn.preprocessing.onehotencoder method)": [[871, "sklearn.preprocessing.OneHotEncoder.transform"]], "ordinalencoder (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.OrdinalEncoder"]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.fit"]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[872, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_"]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.inverse_transform"]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.set_output"]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.set_params"]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[872, "sklearn.preprocessing.OrdinalEncoder.transform"]], "polynomialfeatures (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.PolynomialFeatures"]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[873, "sklearn.preprocessing.PolynomialFeatures.fit"]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[873, "sklearn.preprocessing.PolynomialFeatures.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[873, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[873, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing"]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[873, "sklearn.preprocessing.PolynomialFeatures.get_params"]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[873, "sklearn.preprocessing.PolynomialFeatures.powers_"]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[873, "sklearn.preprocessing.PolynomialFeatures.set_output"]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[873, "sklearn.preprocessing.PolynomialFeatures.set_params"]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[873, "sklearn.preprocessing.PolynomialFeatures.transform"]], "powertransformer (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.PowerTransformer"]], "fit() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.fit"]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.set_output"]], "set_params() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.set_params"]], "transform() (sklearn.preprocessing.powertransformer method)": [[874, "sklearn.preprocessing.PowerTransformer.transform"]], "quantiletransformer (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.QuantileTransformer"]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.fit"]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.get_params"]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.inverse_transform"]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.set_output"]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.set_params"]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[875, "sklearn.preprocessing.QuantileTransformer.transform"]], "robustscaler (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.RobustScaler"]], "fit() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.fit"]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.inverse_transform"]], "set_output() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.set_output"]], "set_params() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.set_params"]], "transform() (sklearn.preprocessing.robustscaler method)": [[876, "sklearn.preprocessing.RobustScaler.transform"]], "splinetransformer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.SplineTransformer"]], "fit() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.fit"]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.get_metadata_routing"]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.get_params"]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.set_fit_request"]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.set_output"]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.set_params"]], "transform() (sklearn.preprocessing.splinetransformer method)": [[877, "sklearn.preprocessing.SplineTransformer.transform"]], "standardscaler (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.StandardScaler"]], "fit() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.fit"]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.get_metadata_routing"]], "get_params() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.get_params"]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.inverse_transform"]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.partial_fit"]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.set_fit_request"]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request"]], "set_output() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.set_output"]], "set_params() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.set_params"]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.set_partial_fit_request"]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.set_transform_request"]], "transform() (sklearn.preprocessing.standardscaler method)": [[878, "sklearn.preprocessing.StandardScaler.transform"]], "targetencoder (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.TargetEncoder"]], "fit() (sklearn.preprocessing.targetencoder method)": [[879, "sklearn.preprocessing.TargetEncoder.fit"]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[879, "sklearn.preprocessing.TargetEncoder.fit_transform"]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[879, "sklearn.preprocessing.TargetEncoder.get_feature_names_out"]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[879, "sklearn.preprocessing.TargetEncoder.get_metadata_routing"]], "get_params() (sklearn.preprocessing.targetencoder method)": [[879, "sklearn.preprocessing.TargetEncoder.get_params"]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[879, "sklearn.preprocessing.TargetEncoder.infrequent_categories_"]], "set_output() (sklearn.preprocessing.targetencoder method)": [[879, "sklearn.preprocessing.TargetEncoder.set_output"]], "set_params() (sklearn.preprocessing.targetencoder method)": [[879, "sklearn.preprocessing.TargetEncoder.set_params"]], "transform() (sklearn.preprocessing.targetencoder method)": [[879, "sklearn.preprocessing.TargetEncoder.transform"]], "add_dummy_feature() (in module sklearn.preprocessing)": [[880, "sklearn.preprocessing.add_dummy_feature"]], "binarize() (in module sklearn.preprocessing)": [[881, "sklearn.preprocessing.binarize"]], "label_binarize() (in module sklearn.preprocessing)": [[882, "sklearn.preprocessing.label_binarize"]], "maxabs_scale() (in module sklearn.preprocessing)": [[883, "sklearn.preprocessing.maxabs_scale"]], "minmax_scale() (in module sklearn.preprocessing)": [[884, "sklearn.preprocessing.minmax_scale"]], "normalize() (in module sklearn.preprocessing)": [[885, "sklearn.preprocessing.normalize"]], "power_transform() (in module sklearn.preprocessing)": [[886, "sklearn.preprocessing.power_transform"]], "quantile_transform() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.quantile_transform"]], "robust_scale() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.robust_scale"]], "scale() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.scale"]], "gaussianrandomprojection (class in sklearn.random_projection)": [[890, "sklearn.random_projection.GaussianRandomProjection"]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.set_output"]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.set_params"]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[890, "sklearn.random_projection.GaussianRandomProjection.transform"]], "sparserandomprojection (class in sklearn.random_projection)": [[891, "sklearn.random_projection.SparseRandomProjection"]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.fit"]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.fit_transform"]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out"]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing"]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.get_params"]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.inverse_transform"]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.set_output"]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.set_params"]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[891, "sklearn.random_projection.SparseRandomProjection.transform"]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[892, "sklearn.random_projection.johnson_lindenstrauss_min_dim"]], "labelpropagation (class in sklearn.semi_supervised)": [[893, "sklearn.semi_supervised.LabelPropagation"]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[893, "sklearn.semi_supervised.LabelPropagation.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[893, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[893, "sklearn.semi_supervised.LabelPropagation.get_params"]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[893, "sklearn.semi_supervised.LabelPropagation.predict"]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[893, "sklearn.semi_supervised.LabelPropagation.predict_proba"]], "score() (sklearn.semi_supervised.labelpropagation method)": [[893, "sklearn.semi_supervised.LabelPropagation.score"]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[893, "sklearn.semi_supervised.LabelPropagation.set_params"]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[893, "sklearn.semi_supervised.LabelPropagation.set_score_request"]], "labelspreading (class in sklearn.semi_supervised)": [[894, "sklearn.semi_supervised.LabelSpreading"]], "fit() (sklearn.semi_supervised.labelspreading method)": [[894, "sklearn.semi_supervised.LabelSpreading.fit"]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[894, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[894, "sklearn.semi_supervised.LabelSpreading.get_params"]], "predict() (sklearn.semi_supervised.labelspreading method)": [[894, "sklearn.semi_supervised.LabelSpreading.predict"]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[894, "sklearn.semi_supervised.LabelSpreading.predict_proba"]], "score() (sklearn.semi_supervised.labelspreading method)": [[894, "sklearn.semi_supervised.LabelSpreading.score"]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[894, "sklearn.semi_supervised.LabelSpreading.set_params"]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[894, "sklearn.semi_supervised.LabelSpreading.set_score_request"]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier"]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function"]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.fit"]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing"]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.get_params"]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.predict"]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba"]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba"]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.score"]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[895, "sklearn.semi_supervised.SelfTrainingClassifier.set_params"]], "set_config() (in module sklearn)": [[896, "sklearn.set_config"]], "show_versions() (in module sklearn)": [[897, "sklearn.show_versions"]], "linearsvc (class in sklearn.svm)": [[898, "sklearn.svm.LinearSVC"]], "decision_function() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.decision_function"]], "densify() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.densify"]], "fit() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.fit"]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.get_params"]], "predict() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.predict"]], "score() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.score"]], "set_fit_request() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.set_fit_request"]], "set_params() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.set_params"]], "set_score_request() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.set_score_request"]], "sparsify() (sklearn.svm.linearsvc method)": [[898, "sklearn.svm.LinearSVC.sparsify"]], "linearsvr (class in sklearn.svm)": [[899, "sklearn.svm.LinearSVR"]], "fit() (sklearn.svm.linearsvr method)": [[899, "sklearn.svm.LinearSVR.fit"]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[899, "sklearn.svm.LinearSVR.get_metadata_routing"]], "get_params() (sklearn.svm.linearsvr method)": [[899, "sklearn.svm.LinearSVR.get_params"]], "predict() (sklearn.svm.linearsvr method)": [[899, "sklearn.svm.LinearSVR.predict"]], "score() (sklearn.svm.linearsvr method)": [[899, "sklearn.svm.LinearSVR.score"]], "set_fit_request() (sklearn.svm.linearsvr method)": [[899, "sklearn.svm.LinearSVR.set_fit_request"]], "set_params() (sklearn.svm.linearsvr method)": [[899, "sklearn.svm.LinearSVR.set_params"]], "set_score_request() (sklearn.svm.linearsvr method)": [[899, "sklearn.svm.LinearSVR.set_score_request"]], "nusvc (class in sklearn.svm)": [[900, "sklearn.svm.NuSVC"]], "coef_ (sklearn.svm.nusvc property)": [[900, "sklearn.svm.NuSVC.coef_"]], "decision_function() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.decision_function"]], "fit() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.fit"]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.get_metadata_routing"]], "get_params() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.get_params"]], "n_support_ (sklearn.svm.nusvc property)": [[900, "sklearn.svm.NuSVC.n_support_"]], "predict() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.predict"]], "predict_log_proba() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.predict_log_proba"]], "predict_proba() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.predict_proba"]], "proba_ (sklearn.svm.nusvc property)": [[900, "sklearn.svm.NuSVC.probA_"]], "probb_ (sklearn.svm.nusvc property)": [[900, "sklearn.svm.NuSVC.probB_"]], "score() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.score"]], "set_fit_request() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.set_fit_request"]], "set_params() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.set_params"]], "set_score_request() (sklearn.svm.nusvc method)": [[900, "sklearn.svm.NuSVC.set_score_request"]], "nusvr (class in sklearn.svm)": [[901, "sklearn.svm.NuSVR"]], "coef_ (sklearn.svm.nusvr property)": [[901, "sklearn.svm.NuSVR.coef_"]], "fit() (sklearn.svm.nusvr method)": [[901, "sklearn.svm.NuSVR.fit"]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[901, "sklearn.svm.NuSVR.get_metadata_routing"]], "get_params() (sklearn.svm.nusvr method)": [[901, "sklearn.svm.NuSVR.get_params"]], "n_support_ (sklearn.svm.nusvr property)": [[901, "sklearn.svm.NuSVR.n_support_"]], "predict() (sklearn.svm.nusvr method)": [[901, "sklearn.svm.NuSVR.predict"]], "score() (sklearn.svm.nusvr method)": [[901, "sklearn.svm.NuSVR.score"]], "set_fit_request() (sklearn.svm.nusvr method)": [[901, "sklearn.svm.NuSVR.set_fit_request"]], "set_params() (sklearn.svm.nusvr method)": [[901, "sklearn.svm.NuSVR.set_params"]], "set_score_request() (sklearn.svm.nusvr method)": [[901, "sklearn.svm.NuSVR.set_score_request"]], "oneclasssvm (class in sklearn.svm)": [[902, "sklearn.svm.OneClassSVM"]], "coef_ (sklearn.svm.oneclasssvm property)": [[902, "sklearn.svm.OneClassSVM.coef_"]], "decision_function() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.decision_function"]], "fit() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.fit"]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.fit_predict"]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.get_metadata_routing"]], "get_params() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.get_params"]], "n_support_ (sklearn.svm.oneclasssvm property)": [[902, "sklearn.svm.OneClassSVM.n_support_"]], "predict() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.predict"]], "score_samples() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.score_samples"]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.set_fit_request"]], "set_params() (sklearn.svm.oneclasssvm method)": [[902, "sklearn.svm.OneClassSVM.set_params"]], "svc (class in sklearn.svm)": [[903, "sklearn.svm.SVC"]], "coef_ (sklearn.svm.svc property)": [[903, "sklearn.svm.SVC.coef_"]], "decision_function() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.decision_function"]], "fit() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.fit"]], "get_metadata_routing() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.get_metadata_routing"]], "get_params() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.get_params"]], "n_support_ (sklearn.svm.svc property)": [[903, "sklearn.svm.SVC.n_support_"]], "predict() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.predict"]], "predict_log_proba() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.predict_log_proba"]], "predict_proba() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.predict_proba"]], "proba_ (sklearn.svm.svc property)": [[903, "sklearn.svm.SVC.probA_"]], "probb_ (sklearn.svm.svc property)": [[903, "sklearn.svm.SVC.probB_"]], "score() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.score"]], "set_fit_request() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.set_fit_request"]], "set_params() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.set_params"]], "set_score_request() (sklearn.svm.svc method)": [[903, "sklearn.svm.SVC.set_score_request"]], "svr (class in sklearn.svm)": [[904, "sklearn.svm.SVR"]], "coef_ (sklearn.svm.svr property)": [[904, "sklearn.svm.SVR.coef_"]], "fit() (sklearn.svm.svr method)": [[904, "sklearn.svm.SVR.fit"]], "get_metadata_routing() (sklearn.svm.svr method)": [[904, "sklearn.svm.SVR.get_metadata_routing"]], "get_params() (sklearn.svm.svr method)": [[904, "sklearn.svm.SVR.get_params"]], "n_support_ (sklearn.svm.svr property)": [[904, "sklearn.svm.SVR.n_support_"]], "predict() (sklearn.svm.svr method)": [[904, "sklearn.svm.SVR.predict"]], "score() (sklearn.svm.svr method)": [[904, "sklearn.svm.SVR.score"]], "set_fit_request() (sklearn.svm.svr method)": [[904, "sklearn.svm.SVR.set_fit_request"]], "set_params() (sklearn.svm.svr method)": [[904, "sklearn.svm.SVR.set_params"]], "set_score_request() (sklearn.svm.svr method)": [[904, "sklearn.svm.SVR.set_score_request"]], "l1_min_c() (in module sklearn.svm)": [[905, "sklearn.svm.l1_min_c"]], "decisiontreeclassifier (class in sklearn.tree)": [[906, "sklearn.tree.DecisionTreeClassifier"]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[906, "sklearn.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.fit"]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.get_params"]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.predict_proba"]], "score() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[906, "sklearn.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sklearn.tree)": [[907, "sklearn.tree.DecisionTreeRegressor"]], "apply() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[907, "sklearn.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.fit"]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.get_params"]], "predict() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.predict"]], "score() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[907, "sklearn.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sklearn.tree)": [[908, "sklearn.tree.ExtraTreeClassifier"]], "apply() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[908, "sklearn.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.fit"]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.get_params"]], "predict() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.predict_proba"]], "score() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.set_params"]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[908, "sklearn.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sklearn.tree)": [[909, "sklearn.tree.ExtraTreeRegressor"]], "apply() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[909, "sklearn.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.fit"]], "get_depth() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.get_depth"]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.get_params"]], "predict() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.predict"]], "score() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[909, "sklearn.tree.ExtraTreeRegressor.set_score_request"]], "export_graphviz() (in module sklearn.tree)": [[910, "sklearn.tree.export_graphviz"]], "export_text() (in module sklearn.tree)": [[911, "sklearn.tree.export_text"]], "plot_tree() (in module sklearn.tree)": [[912, "sklearn.tree.plot_tree"]], "bunch (class in sklearn.utils)": [[913, "sklearn.utils.Bunch"]], "clear() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.clear"]], "copy() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.copy"]], "fromkeys() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.fromkeys"]], "get() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.get"]], "items() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.items"]], "keys() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.keys"]], "pop() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.pop"]], "popitem() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.popitem"]], "setdefault() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.setdefault"]], "update() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.update"]], "values() (sklearn.utils.bunch method)": [[913, "sklearn.utils.Bunch.values"]], "_safe_indexing() (in module sklearn.utils)": [[914, "sklearn.utils._safe_indexing"]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[915, "sklearn.utils.arrayfuncs.min_pos"]], "as_float_array() (in module sklearn.utils)": [[916, "sklearn.utils.as_float_array"]], "assert_all_finite() (in module sklearn.utils)": [[917, "sklearn.utils.assert_all_finite"]], "check_x_y() (in module sklearn.utils)": [[918, "sklearn.utils.check_X_y"]], "check_array() (in module sklearn.utils)": [[919, "sklearn.utils.check_array"]], "check_consistent_length() (in module sklearn.utils)": [[920, "sklearn.utils.check_consistent_length"]], "check_random_state() (in module sklearn.utils)": [[921, "sklearn.utils.check_random_state"]], "check_scalar() (in module sklearn.utils)": [[922, "sklearn.utils.check_scalar"]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[923, "sklearn.utils.class_weight.compute_class_weight"]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[924, "sklearn.utils.class_weight.compute_sample_weight"]], "deprecated() (in module sklearn.utils)": [[925, "sklearn.utils.deprecated"]], "all_displays() (in module sklearn.utils.discovery)": [[926, "sklearn.utils.discovery.all_displays"]], "all_estimators() (in module sklearn.utils.discovery)": [[927, "sklearn.utils.discovery.all_estimators"]], "all_functions() (in module sklearn.utils.discovery)": [[928, "sklearn.utils.discovery.all_functions"]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[929, "sklearn.utils.estimator_checks.check_estimator"]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[930, "sklearn.utils.estimator_checks.parametrize_with_checks"]], "estimator_html_repr() (in module sklearn.utils)": [[931, "sklearn.utils.estimator_html_repr"]], "density() (in module sklearn.utils.extmath)": [[932, "sklearn.utils.extmath.density"]], "fast_logdet() (in module sklearn.utils.extmath)": [[933, "sklearn.utils.extmath.fast_logdet"]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[934, "sklearn.utils.extmath.randomized_range_finder"]], "randomized_svd() (in module sklearn.utils.extmath)": [[935, "sklearn.utils.extmath.randomized_svd"]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[936, "sklearn.utils.extmath.safe_sparse_dot"]], "weighted_mode() (in module sklearn.utils.extmath)": [[937, "sklearn.utils.extmath.weighted_mode"]], "gen_batches() (in module sklearn.utils)": [[938, "sklearn.utils.gen_batches"]], "gen_even_slices() (in module sklearn.utils)": [[939, "sklearn.utils.gen_even_slices"]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[940, "sklearn.utils.graph.single_source_shortest_path_length"]], "indexable() (in module sklearn.utils)": [[941, "sklearn.utils.indexable"]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[942, "sklearn.utils.metadata_routing.MetadataRequest"]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[942, "sklearn.utils.metadata_routing.MetadataRequest.consumes"]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[943, "sklearn.utils.metadata_routing.MetadataRouter"]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[943, "sklearn.utils.metadata_routing.MetadataRouter.add"]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[943, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request"]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[943, "sklearn.utils.metadata_routing.MetadataRouter.consumes"]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[943, "sklearn.utils.metadata_routing.MetadataRouter.route_params"]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[943, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata"]], "methodmapping (class in sklearn.utils.metadata_routing)": [[944, "sklearn.utils.metadata_routing.MethodMapping"]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[944, "sklearn.utils.metadata_routing.MethodMapping.add"]], "from_str() (sklearn.utils.metadata_routing.methodmapping class method)": [[944, "sklearn.utils.metadata_routing.MethodMapping.from_str"]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[945, "sklearn.utils.metadata_routing.get_routing_for_object"]], "process_routing() (in module sklearn.utils.metadata_routing)": [[946, "sklearn.utils.metadata_routing.process_routing"]], "available_if() (in module sklearn.utils.metaestimators)": [[947, "sklearn.utils.metaestimators.available_if"]], "is_multilabel() (in module sklearn.utils.multiclass)": [[948, "sklearn.utils.multiclass.is_multilabel"]], "type_of_target() (in module sklearn.utils.multiclass)": [[949, "sklearn.utils.multiclass.type_of_target"]], "unique_labels() (in module sklearn.utils.multiclass)": [[950, "sklearn.utils.multiclass.unique_labels"]], "murmurhash3_32() (in module sklearn.utils)": [[951, "sklearn.utils.murmurhash3_32"]], "parallel (class in sklearn.utils.parallel)": [[952, "sklearn.utils.parallel.Parallel"]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[952, "sklearn.utils.parallel.Parallel.dispatch_next"]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[952, "sklearn.utils.parallel.Parallel.dispatch_one_batch"]], "format() (sklearn.utils.parallel.parallel method)": [[952, "sklearn.utils.parallel.Parallel.format"]], "print_progress() (sklearn.utils.parallel.parallel method)": [[952, "sklearn.utils.parallel.Parallel.print_progress"]], "delayed() (in module sklearn.utils.parallel)": [[953, "sklearn.utils.parallel.delayed"]], "parallel_backend() (in module sklearn.utils)": [[954, "sklearn.utils.parallel_backend"]], "sample_without_replacement() (in module sklearn.utils.random)": [[955, "sklearn.utils.random.sample_without_replacement"]], "register_parallel_backend() (in module sklearn.utils)": [[956, "sklearn.utils.register_parallel_backend"]], "resample() (in module sklearn.utils)": [[957, "sklearn.utils.resample"]], "safe_mask() (in module sklearn.utils)": [[958, "sklearn.utils.safe_mask"]], "safe_sqr() (in module sklearn.utils)": [[959, "sklearn.utils.safe_sqr"]], "shuffle() (in module sklearn.utils)": [[960, "sklearn.utils.shuffle"]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[961, "sklearn.utils.sparsefuncs.incr_mean_variance_axis"]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[962, "sklearn.utils.sparsefuncs.inplace_column_scale"]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[963, "sklearn.utils.sparsefuncs.inplace_csr_column_scale"]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[964, "sklearn.utils.sparsefuncs.inplace_row_scale"]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[965, "sklearn.utils.sparsefuncs.inplace_swap_column"]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[966, "sklearn.utils.sparsefuncs.inplace_swap_row"]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[967, "sklearn.utils.sparsefuncs.mean_variance_axis"]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[968, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1"]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[969, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2"]], "check_is_fitted() (in module sklearn.utils.validation)": [[970, "sklearn.utils.validation.check_is_fitted"]], "check_memory() (in module sklearn.utils.validation)": [[971, "sklearn.utils.validation.check_memory"]], "check_symmetric() (in module sklearn.utils.validation)": [[972, "sklearn.utils.validation.check_symmetric"]], "column_or_1d() (in module sklearn.utils.validation)": [[973, "sklearn.utils.validation.column_or_1d"]], "has_fit_parameter() (in module sklearn.utils.validation)": [[974, "sklearn.utils.validation.has_fit_parameter"]]}})