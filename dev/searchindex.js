Search.setIndex({"alltitles": {"(Generalized) linear models": [[212, "generalized-linear-models"]], "1-way partial dependence with different models": [[187, "way-partial-dependence-with-different-models"]], "20 newsgroups dataset": [[102, "newsgroups-dataset"]], "2D interaction plots": [[187, "d-interaction-plots"]], "3D representation": [[187, "d-representation"]], "A constant prediction baseline": [[212, "a-constant-prediction-baseline"]], "A demo of K-Means clustering on the handwritten digits data": [[91, null]], "A demo of structured Ward hierarchical clustering on an image of coins": [[81, null]], "A demo of the Spectral Biclustering algorithm": [[58, null]], "A demo of the Spectral Co-Clustering algorithm": [[59, null]], "A demo of the mean-shift clustering algorithm": [[96, null]], "A more flexible plotting API": [[322, "a-more-flexible-plotting-api"]], "A note on shuffling": [[412, "a-note-on-shuffling"]], "A qualitative look at the predictions": [[52, "a-qualitative-look-at-the-predictions"]], "A simple algorithmic trick: warm restarts": [[382, "a-simple-algorithmic-trick-warm-restarts"]], "A typical workflow for triaging issues": [[375, "a-typical-workflow-for-triaging-issues"]], "AIC and BIC criteria": [[998, "aic-and-bic-criteria"]], "API Interface": [[399, "api-interface"]], "API Reference": [[2, null]], "API changes": [[1040, "api-changes"]], "API changes summary": [[1033, "api-changes-summary"], [1033, "id4"], [1033, "id7"], [1033, "id10"], [1034, "api-changes-summary"], [1035, "api-changes-summary"], [1036, "api-changes-summary"], [1037, "api-changes-summary"], [1038, "api-changes-summary"], [1039, "api-changes-summary"], [1039, "id6"], [1040, "api-changes-summary"]], "API compatibility checkers": [[41, "module-sklearn.utils.estimator_checks"]], "APIs of scikit-learn objects": [[378, "apis-of-scikit-learn-objects"]], "ARDRegression": [[645, null]], "ARFF parser": [[370, "arff-parser"]], "AWeber": [[1026, "id9"]], "Ability of Gaussian process regression (GPR) to estimate data noise-level": [[176, null]], "Ablation study": [[249, "ablation-study"]], "About the project": [[388, "about-the-project"]], "About us": [[0, null]], "Access pipeline steps": [[409, "access-pipeline-steps"]], "Access to nested parameters": [[409, "access-to-nested-parameters"]], "Accuracy of the Model": [[188, "accuracy-of-the-model"]], "Accuracy score": [[1002, "accuracy-score"]], "Accuracy vs alpha for training and testing sets": [[355, "accuracy-vs-alpha-for-training-and-testing-sets"]], "Active Core Contributors": [[0, "active-core-contributors"]], "AdaBoost": [[415, "adaboost"]], "AdaBoostClassifier": [[554, null]], "AdaBoostRegressor": [[555, null]], "Add support for monotonic constraints in tree-based models": [[326, "add-support-for-monotonic-constraints-in-tree-based-models"]], "Adding connectivity constraints": [[408, "adding-connectivity-constraints"]], "Additive Chi Squared Kernel": [[994, "additive-chi-squared-kernel"]], "AdditiveChi2Sampler": [[639, null]], "Addressing the problem with a business metric": [[264, "addressing-the-problem-with-a-business-metric"]], "Adjustment for chance in clustering performance evaluation": [[72, null]], "Advanced Plotting With Partial Dependence": [[250, null]], "Advantages:": [[408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null]], "Affinity Propagation": [[408, "affinity-propagation"]], "AffinityPropagation": [[440, null]], "Agglomerative clustering with and without structure": [[74, null]], "Agglomerative clustering with different metrics": [[75, null]], "AgglomerativeClustering": [[441, null]], "Aggressive elimination of candidates": [[991, "aggressive-elimination-of-candidates"]], "Algorithms": [[1006, "algorithms"]], "Alpine Linux": [[394, "alpine-linux"]], "Alternatives to brute force parameter search": [[991, "alternatives-to-brute-force-parameter-search"]], "Ames Housing dataset": [[249, "ames-housing-dataset"]], "An example custom estimator implementing a simple classifier": [[132, "an-example-custom-estimator-implementing-a-simple-classifier"]], "An example of K-Means++ initialization": [[92, null]], "Anaconda and Enthought Deployment Manager for all supported platforms": [[394, "anaconda-and-enthought-deployment-manager-for-all-supported-platforms"]], "Analysis": [[134, "analysis"]], "Analysis of a bag-of-words document classifier": [[351, "analysis-of-a-bag-of-words-document-classifier"]], "Analysis of the error metrics": [[146, "analysis-of-the-error-metrics"]], "Analysis of the plots": [[187, "analysis-of-the-plots"]], "Analysis of the results": [[64, "analysis-of-the-results"]], "Analyzing results with the cv_results_ attribute": [[991, "analyzing-results-with-the-cv-results-attribute"]], "Analyzing the Bike Sharing Demand dataset": [[52, "analyzing-the-bike-sharing-demand-dataset"]], "Applications and examples": [[416, "applications-and-examples"]], "Approximate nearest neighbors in TSNE": [[290, null]], "Arch Linux": [[394, "arch-linux"]], "Architectural / general goals": [[1022, "architectural-general-goals"]], "Array API support (experimental)": [[404, null]], "Artwork": [[0, "artwork"]], "Attributes": [[390, "attributes"]], "Authors": [[1033, "authors"], [1033, "id20"]], "Automated Contributions Policy": [[376, "automated-contributions-policy"]], "Automatic Relevance Determination (ARD)": [[198, "automatic-relevance-determination-ard"]], "Automatic Relevance Determination - ARD": [[998, "automatic-relevance-determination-ard"]], "Automatic parameter searches": [[389, "automatic-parameter-searches"]], "Auxiliary functions that operate on arrays": [[41, "module-sklearn.utils.arrayfuncs"]], "Available Plotting Utilities": [[1030, "available-plotting-utilities"]], "Available documentation for scikit-learn": [[1029, null]], "BIRCH": [[408, "birch"]], "BNP Paribas Cardif": [[1026, "id29"]], "Bagging meta-estimator": [[415, "bagging-meta-estimator"]], "BaggingClassifier": [[556, null]], "BaggingRegressor": [[557, null]], "Balance model complexity and cross-validated score": [[269, null]], "Balanced accuracy score": [[1002, "balanced-accuracy-score"]], "Ball Tree": [[1005, "ball-tree"]], "BallTree": [[845, null]], "BaseEstimator": [[422, null]], "BaseEstimator and mixins:": [[378, null]], "Basic kernels": [[418, "basic-kernels"]], "Basic shrinkage": [[410, "basic-shrinkage"]], "Bayesian Regression": [[998, "bayesian-regression"]], "Bayesian Ridge Regression": [[998, "bayesian-ridge-regression"]], "Bayesian regressions with polynomial feature expansion": [[193, "bayesian-regressions-with-polynomial-feature-expansion"]], "Bayesian regressors": [[25, "bayesian-regressors"]], "BayesianGaussianMixture": [[798, null]], "BayesianRidge": [[646, null]], "Benchmark and plot helper functions": [[49, "benchmark-and-plot-helper-functions"]], "Benchmark bulk/atomic prediction speed for various regressors": [[49, "benchmark-bulk-atomic-prediction-speed-for-various-regressors"]], "Benchmark influence": [[46, "benchmark-influence"]], "Benchmark n_features influence on prediction speed": [[49, "benchmark-n-features-influence-on-prediction-speed"]], "Benchmark throughput": [[49, "benchmark-throughput"]], "Benchmarking classifiers": [[351, "benchmarking-classifiers"]], "Bernoulli Naive Bayes": [[1004, "bernoulli-naive-bayes"]], "Bernoulli Restricted Boltzmann machines": [[1007, "bernoulli-restricted-boltzmann-machines"]], "BernoulliNB": [[840, null]], "BernoulliRBM": [[861, null]], "Bestofmedia Group": [[1026, "id13"]], "BiclusterMixin": [[423, null]], "Biclustering": [[56, null], [183, "biclustering"], [372, "biclustering"], [405, null]], "Biclustering documents with the Spectral Co-clustering algorithm": [[57, null]], "Biclustering evaluation": [[405, "biclustering-evaluation"]], "Biclustering metrics": [[27, "biclustering-metrics"]], "Bike sharing dataset preprocessing": [[187, "bike-sharing-dataset-preprocessing"]], "Binarizer": [[868, null]], "Binary Case": [[998, "binary-case"]], "Binary case": [[1002, "binary-case"]], "Binary classification": [[1002, "binary-classification"]], "Birch": [[442, null]], "Birchbox": [[1026, "id12"]], "Bisecting K-Means": [[408, "bisecting-k-means"]], "Bisecting K-Means and Regular K-Means Performance Comparison": [[78, null]], "BisectingKMeans": [[443, null]], "BisectingKMeans: divide and cluster": [[323, "bisectingkmeans-divide-and-cluster"]], "Blind source separation using FastICA": [[121, null]], "Boil down your script to something as small as possible": [[381, "boil-down-your-script-to-something-as-small-as-possible"]], "Bonus: how much can you trust the selection of alpha?": [[159, "bonus-how-much-can-you-trust-the-selection-of-alpha"]], "Booking.com": [[1026, "id8"]], "Breast cancer wisconsin (diagnostic) dataset": [[373, "breast-cancer-wisconsin-diagnostic-dataset"]], "Brier score loss": [[1002, "brier-score-loss"]], "Brute Force": [[1005, "brute-force"]], "Bug Tracker": [[1025, "bug-tracker"]], "Bug fixes": [[1036, "bug-fixes"], [1036, "id1"], [1036, "id3"], [1037, "bug-fixes"], [1037, "id3"], [1038, "bug-fixes"], [1038, "id3"], [1039, "bug-fixes"], [1039, "id5"], [1040, "bug-fixes"], [1040, "id4"]], "Bug triaging and issue curation": [[375, null]], "Build a pipeline": [[409, "build-a-pipeline"]], "Build dependencies": [[374, "build-dependencies"]], "Build the dataset": [[175, "build-the-dataset"]], "Building a specific version from a tag": [[374, "building-a-specific-version-from-a-tag"]], "Building and testing for the ARM64 platform on a x86_64 machine": [[384, "building-and-testing-for-the-arm64-platform-on-a-x86-64-machine"]], "Building from source": [[374, "building-from-source"]], "Building the documentation": [[376, "building-the-documentation"]], "Bulk versus Atomic mode": [[363, "bulk-versus-atomic-mode"]], "Bunch": [[920, null]], "CCA": [[482, null]], "CCA (PLS mode B with symmetric deflation)": [[115, "cca-pls-mode-b-with-symmetric-deflation"]], "CV splitters": [[359, "cv-splitters"], [359, "id3"]], "Caching nearest neighbors": [[292, null]], "Caching transformers within a Pipeline": [[104, "caching-transformers-within-a-pipeline"]], "Caching transformers: avoid repeated computation": [[409, "caching-transformers-avoid-repeated-computation"]], "CalibratedClassifierCV": [[437, null]], "Calibrating a classifier": [[406, "calibrating-a-classifier"]], "Calibration": [[60, null], [183, "calibration"]], "Calibration curves": [[62, "calibration-curves"], [64, "calibration-curves"], [406, "calibration-curves"]], "Calibration of the confidence interval": [[146, "calibration-of-the-confidence-interval"]], "CalibrationDisplay": [[438, null]], "California Housing dataset": [[371, "california-housing-dataset"]], "Calinski-Harabasz Index": [[408, "calinski-harabasz-index"]], "Canonical (symmetric) PLS": [[115, "canonical-symmetric-pls"]], "Canonical Correlation Analysis": [[411, "canonical-correlation-analysis"]], "Cardiotocography dataset": [[249, "cardiotocography-dataset"]], "Categorical Feature Support in Gradient Boosting": [[143, null]], "Categorical Features Support": [[415, "categorical-features-support"]], "Categorical Naive Bayes": [[1004, "categorical-naive-bayes"]], "CategoricalNB": [[841, null]], "Centering kernel matrices": [[1012, "centering-kernel-matrices"]], "Chain of binary classifiers": [[289, "chain-of-binary-classifiers"]], "Change the default value of a parameter": [[376, "change-the-default-value-of-a-parameter"]], "Change.org": [[1026, "id14"]], "Changed displays": [[1049, "changed-displays"]], "Changed models": [[1040, "changed-models"], [1041, "changed-models"], [1041, "id9"], [1041, "id22"], [1042, "changed-models"], [1042, "id6"], [1043, "changed-models"], [1044, "changed-models"], [1044, "id3"], [1045, "changed-models"], [1046, "changed-models"], [1047, "changed-models"], [1047, "id6"], [1048, "changed-models"], [1048, "id7"], [1049, "changed-models"], [1049, "id4"], [1050, "changed-models"], [1050, "id1"], [1051, "changed-models"]], "Changelog": [[1033, "changelog"], [1033, "id1"], [1033, "id3"], [1033, "id6"], [1033, "id9"], [1033, "id12"], [1033, "id14"], [1033, "id16"], [1033, "id18"], [1033, "id19"], [1034, "changelog"], [1034, "id2"], [1035, "changelog"], [1036, "changelog"], [1037, "changelog"], [1037, "id2"], [1038, "changelog"], [1038, "id2"], [1039, "changelog"], [1039, "id1"], [1039, "id3"], [1040, "changelog"], [1040, "id2"], [1041, "changelog"], [1041, "id1"], [1041, "id5"], [1041, "id10"], [1041, "id23"], [1042, "changelog"], [1042, "id1"], [1042, "id2"], [1042, "id7"], [1043, "changelog"], [1043, "id1"], [1043, "id4"], [1044, "changelog"], [1044, "id1"], [1044, "id4"], [1045, "changelog"], [1045, "id1"], [1045, "id4"], [1046, "changelog"], [1046, "id6"], [1047, "changelog"], [1047, "id1"], [1047, "id7"], [1048, "changelog"], [1048, "id1"], [1048, "id9"], [1049, "changelog"], [1049, "id1"], [1049, "id6"], [1050, "changelog"], [1050, "id3"], [1051, "changelog"], [1051, "id2"], [1051, "id6"]], "Changes impacting all modules": [[1048, "changes-impacting-all-modules"], [1048, "id8"], [1049, "changes-impacting-all-modules"], [1049, "id5"], [1050, "changes-impacting-all-modules"]], "Changes impacting many modules": [[1050, "changes-impacting-many-modules"], [1051, "changes-impacting-many-modules"], [1051, "id1"], [1051, "id5"]], "Changes to estimator checks": [[1041, "changes-to-estimator-checks"], [1042, "changes-to-estimator-checks"], [1043, "changes-to-estimator-checks"]], "Checking out pull requests as remote-tracking branches": [[384, "checking-out-pull-requests-as-remote-tracking-branches"]], "Checking scikit-learn compatibility of an estimator": [[319, "checking-scikit-learn-compatibility-of-an-estimator"]], "Checking the variability of the coefficients": [[186, "checking-the-variability-of-the-coefficients"]], "Chi-squared kernel": [[1000, "chi-squared-kernel"]], "Choice of solver for Kernel PCA": [[413, "choice-of-solver-for-kernel-pca"]], "Choose parameters": [[46, "choose-parameters"]], "Choosing the right estimator": [[396, null]], "Citing scikit-learn": [[0, "citing-scikit-learn"]], "Class APIs and Estimator Types": [[390, "class-apis-and-estimator-types"]], "Class Likelihood Ratios to measure classification performance": [[273, null]], "Class likelihood ratios": [[1002, "class-likelihood-ratios"]], "ClassNamePrefixFeaturesOutMixin": [[424, null]], "Classical linear regressors": [[25, "classical-linear-regressors"]], "Classification": [[65, null], [68, "classification"], [178, "classification"], [183, "classification"], [998, "classification"], [1005, "id4"], [1006, "classification"], [1016, "classification"], [1017, "classification"], [1018, "classification"]], "Classification and ROC analysis": [[280, "classification-and-roc-analysis"]], "Classification criteria": [[1018, "classification-criteria"]], "Classification metrics": [[27, "classification-metrics"], [1002, "classification-metrics"]], "Classification of text documents using sparse features": [[351, null]], "Classification pipeline": [[102, "classification-pipeline"]], "Classification report": [[1002, "classification-report"]], "Classifier comparison": [[67, null]], "ClassifierChain": [[836, null], [1003, "classifierchain"]], "ClassifierMixin": [[425, null]], "ClassifierTags": [[921, null]], "Clear definition of the public API": [[1043, "clear-definition-of-the-public-api"]], "Cloning": [[378, "cloning"]], "Closing issues: a tough call": [[375, null]], "Cluster centers - MiniBatchKMeans": [[120, "cluster-centers-minibatchkmeans"]], "ClusterMixin": [[426, null]], "Clustering": [[71, null], [183, "clustering"], [408, null]], "Clustering evaluation summary": [[352, "clustering-evaluation-summary"]], "Clustering for dictionary learning": [[413, null]], "Clustering metrics": [[27, "module-sklearn.metrics.cluster"], [1002, "clustering-metrics"]], "Clustering performance evaluation": [[408, "clustering-performance-evaluation"]], "Clustering sparse data with k-means": [[352, "clustering-sparse-data-with-k-means"]], "Clustering text documents using k-means": [[352, null]], "Clustering using affinity propagation": [[51, "clustering-using-affinity-propagation"]], "Code Contributors": [[1037, "code-contributors"], [1038, "code-contributors"], [1039, "code-contributors"], [1039, "id7"]], "Code Review Guidelines": [[376, "code-review-guidelines"]], "Code and Documentation Contributors": [[1040, "code-and-documentation-contributors"], [1040, "id10"], [1041, "code-and-documentation-contributors"], [1041, "id8"], [1041, "id21"], [1041, "id41"]], "Coding Sprints": [[0, "coding-sprints"]], "Coding guidelines": [[378, "coding-guidelines"]], "Coefficients comparison": [[283, "coefficients-comparison"]], "Cohen\u2019s kappa": [[1002, "cohen-s-kappa"]], "Column Transformer with Heterogeneous Data Sources": [[102, null]], "Column Transformer with Mixed Types": [[103, null]], "ColumnTransformer": [[464, null]], "ColumnTransformer for heterogeneous data": [[409, "columntransformer-for-heterogeneous-data"]], "ColumnTransformer is subscriptable": [[327, "columntransformer-is-subscriptable"]], "Combine predictors using stacking": [[154, null]], "Combining the display objects into a single plot": [[240, "combining-the-display-objects-into-a-single-plot"]], "Commit message markers": [[376, "commit-message-markers"]], "Common Vectorizer usage": [[416, "common-vectorizer-usage"]], "Common cases: predefined values": [[1002, "common-cases-predefined-values"]], "Common estimator checks": [[404, "common-estimator-checks"]], "Common pitfalls and recommended practices": [[359, null]], "Common pitfalls and subtleties": [[359, "common-pitfalls-and-subtleties"]], "Common pitfalls in the interpretation of coefficients of linear models": [[186, null]], "Communication Team": [[0, "communication-team"]], "Compact text representation": [[241, "compact-text-representation"]], "Compare BIRCH and MiniBatchKMeans": [[77, null]], "Compare Stochastic learning strategies for MLPClassifier": [[306, null]], "Compare cross decomposition methods": [[115, null]], "Compare different approaches to setting the regularization parameter": [[109, "compare-different-approaches-to-setting-the-regularization-parameter"]], "Compare probabilities": [[63, "compare-probabilities"]], "Compare the effect of different scalers on data with outliers": [[310, null]], "Compare times of SVR and Kernel Ridge Regression": [[245, "compare-times-of-svr-and-kernel-ridge-regression"]], "Compare with SVMs": [[164, "compare-with-svms"]], "Comparing Linear Bayesian Regressors": [[193, null]], "Comparing Nearest Neighbors with and without Neighborhood Components Analysis": [[298, null]], "Comparing QuantileRegressor and LinearRegression": [[214, "comparing-quantileregressor-and-linearregression"]], "Comparing Random Forests and Histogram Gradient Boosting models": [[140, null]], "Comparing Target Encoder with Other Encoders": [[316, null]], "Comparing anomaly detection algorithms for outlier detection on toy datasets": [[239, null]], "Comparing different clustering algorithms on toy datasets": [[79, null]], "Comparing different hierarchical linkage methods on toy datasets": [[95, null]], "Comparing random forests and the multi-output meta estimator": [[153, null]], "Comparing randomized search and grid search for hyperparameter estimation": [[278, null]], "Comparing the results": [[191, "comparing-the-results"]], "Comparing the two Lasso implementations on Dense data": [[199, "comparing-the-two-lasso-implementations-on-dense-data"]], "Comparing the two Lasso implementations on Sparse data": [[199, "comparing-the-two-lasso-implementations-on-sparse-data"]], "Comparing two models: Bayesian approach": [[270, "comparing-two-models-bayesian-approach"]], "Comparing two models: frequentist approach": [[270, "comparing-two-models-frequentist-approach"]], "Comparing various online solvers": [[219, null]], "Comparison between grid search and successive halving": [[281, null]], "Comparison of Calibration of Classifiers": [[64, null]], "Comparison of F-test and mutual information": [[163, null]], "Comparison of LDA and PCA 2D projection of Iris dataset": [[128, null]], "Comparison of LDA and QDA": [[70, "comparison-of-lda-and-qda"]], "Comparison of Manifold Learning methods": [[232, null]], "Comparison of kernel ridge and Gaussian process regression": [[170, null]], "Comparison of kernel ridge regression and SVR": [[245, null]], "Comparison of results": [[111, "comparison-of-results"]], "Comparison of the K-Means and MiniBatchKMeans clustering algorithms": [[97, null]], "Comparison with special purpose text vectorizers": [[353, "comparison-with-special-purpose-text-vectorizers"]], "Comparison with the regularization parameter of SVM": [[998, "comparison-with-the-regularization-parameter-of-svm"]], "Complement Naive Bayes": [[1004, "complement-naive-bayes"]], "ComplementNB": [[842, null]], "Complexity": [[1005, "complexity"], [1006, "complexity"], [1016, "complexity"], [1017, "complexity"], [1018, "complexity"]], "Complexity analysis": [[272, "complexity-analysis"]], "Composite estimators and parameter spaces": [[991, "composite-estimators-and-parameter-spaces"]], "CompoundKernel": [[613, null]], "Compression via vector quantization": [[86, "compression-via-vector-quantization"]], "Compressive sensing: tomography reconstruction with L1 prior (Lasso)": [[53, null]], "Computation methods": [[1009, "computation-methods"]], "Computation times": [[1023, null]], "Computational Performance": [[363, null]], "Compute Affinity Propagation": [[73, "compute-affinity-propagation"]], "Compute DBSCAN": [[82, "compute-dbscan"]], "Compute clustering": [[81, "compute-clustering"], [100, "compute-clustering"], [100, "id1"]], "Compute clustering with KMeans": [[97, "compute-clustering-with-kmeans"]], "Compute clustering with MeanShift": [[96, "compute-clustering-with-meanshift"]], "Compute clustering with MiniBatchKMeans": [[97, "compute-clustering-with-minibatchkmeans"]], "Compute paths": [[217, "compute-paths"]], "Compute regularization path": [[206, "compute-regularization-path"]], "Compute score and computation times": [[140, "compute-score-and-computation-times"]], "Compute the likelihood on test data": [[109, "compute-the-likelihood-on-test-data"]], "Computing Centrality scores": [[55, "computing-centrality-scores"]], "Computing Principal Singular Vector using Randomized SVD": [[55, "computing-principal-singular-vector-using-randomized-svd"]], "Computing cross-validated metrics": [[412, "computing-cross-validated-metrics"]], "Computing the Adjacency matrix": [[55, "computing-the-adjacency-matrix"]], "Computing with scikit-learn": [[362, null]], "Concatenating multiple feature extraction methods": [[106, null]], "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture": [[255, null]], "Concluding remarks": [[43, "concluding-remarks"], [236, "concluding-remarks"]], "Conclusion": [[46, "conclusion"], [52, "conclusion"], [202, "conclusion"], [209, "conclusion"], [287, "conclusion"], [293, "conclusion"], [317, "conclusion"], [344, "conclusion"]], "Conclusions": [[198, "conclusions"]], "Configuration switches": [[364, "configuration-switches"]], "Configuring Scikit-learn for reduced validation overhead": [[363, "configuring-scikit-learn-for-reduced-validation-overhead"]], "Confusion matrix": [[263, null], [1002, "confusion-matrix"]], "ConfusionMatrixDisplay": [[698, null]], "Connectivity graph of an image": [[416, "connectivity-graph-of-an-image"]], "Consideration regarding model refitting and cross-validation": [[264, "consideration-regarding-model-refitting-and-cross-validation"]], "ConstantKernel": [[614, null]], "Construct the kernel-based regression models": [[245, "construct-the-kernel-based-regression-models"]], "Consuming Estimator": [[246, "consuming-estimator"]], "Consuming and routing Meta-Estimator": [[246, "consuming-and-routing-meta-estimator"]], "Contingency Matrix": [[408, "contingency-matrix"]], "Continuous Integration (CI)": [[376, "continuous-integration-ci"]], "Contributing": [[376, null], [388, "contributing"]], "Contributing code": [[376, "contributing-code"]], "Contributor Experience Team": [[0, "contributor-experience-team"]], "Contributors": [[391, "contributors"]], "Controlling randomness": [[359, "controlling-randomness"]], "Controlling the tree size": [[415, "controlling-the-tree-size"]], "Convergence of the AdaBoostClassifier": [[134, "convergence-of-the-adaboostclassifier"]], "ConvergenceWarning": [[572, null]], "Core Contributors": [[391, "core-contributors"]], "Cosine similarity": [[1000, "cosine-similarity"]], "Cost-sensitive learning when gains and costs are not constant": [[264, "cost-sensitive-learning-when-gains-and-costs-are-not-constant"]], "Cost-sensitive learning with constant gains and costs": [[264, "cost-sensitive-learning-with-constant-gains-and-costs"]], "CountVectorizer": [[589, null]], "Covariance estimation": [[108, null], [183, "covariance-estimation"], [410, null]], "Coverage error": [[1002, "coverage-error"]], "Crafting a minimal reproducer for scikit-learn": [[381, null]], "Create ConfusionMatrixDisplay": [[240, "create-confusionmatrixdisplay"]], "Create PrecisionRecallDisplay": [[240, "create-precisionrecalldisplay"]], "Create RocCurveDisplay": [[240, "create-roccurvedisplay"]], "Create Synthetic Dataset": [[317, "create-synthetic-dataset"]], "Create a random 1D dataset": [[357, "create-a-random-1d-dataset"]], "Create a random dataset": [[357, "create-a-random-dataset"]], "Create multi-label data, fit, and predict": [[277, "create-multi-label-data-fit-and-predict"]], "Create the data": [[127, "create-the-data"]], "Create the pipeline": [[343, "create-the-pipeline"]], "Creating a dataset": [[344, "creating-a-dataset"]], "Creating a non-noisy data set": [[216, "creating-a-non-noisy-data-set"]], "Creating the dataset": [[134, "creating-the-dataset"]], "Creating transformers": [[102, "creating-transformers"]], "Cross decomposition": [[114, null], [183, "cross-decomposition"], [411, null]], "Cross validation and model selection": [[412, "cross-validation-and-model-selection"]], "Cross validation iterators": [[412, "cross-validation-iterators"]], "Cross validation of time series data": [[412, "cross-validation-of-time-series-data"]], "Cross-validation iterators for grouped data": [[412, "cross-validation-iterators-for-grouped-data"]], "Cross-validation iterators for i.i.d. data": [[412, "cross-validation-iterators-for-i-i-d-data"]], "Cross-validation iterators with stratification based on class labels": [[412, "cross-validation-iterators-with-stratification-based-on-class-labels"]], "Cross-validation of likelihood ratios": [[273, "cross-validation-of-likelihood-ratios"]], "Cross-validation on diabetes Dataset Exercise": [[159, null]], "Cross-validation: evaluating estimator performance": [[412, null]], "Curve Fitting with Bayesian Ridge Regression": [[194, null]], "Custom Kernels": [[1017, "custom-kernels"]], "Custom imputation strategies for the SimpleImputer": [[327, "custom-imputation-strategies-for-the-simpleimputer"]], "Custom refit strategy of a grid search with cross-validation": [[268, null]], "Custom transformers": [[1012, "custom-transformers"]], "Customizing the vectorizer classes": [[416, "customizing-the-vectorizer-classes"]], "Cython Best Practices, Conventions and Knowledge": [[377, null]], "DBSCAN": [[408, "dbscan"], [444, null]], "DO NOT report your data unless it is extremely necessary": [[381, "do-not-report-your-data-unless-it-is-extremely-necessary"]], "Data": [[63, "data"]], "Data Loading and Feature Engineering": [[188, "data-loading-and-feature-engineering"]], "Data Loading and Preparation": [[209, "data-loading-and-preparation"]], "Data Preparation": [[144, "data-preparation"]], "Data Publica": [[1026, "id21"]], "Data and sample properties": [[390, "data-and-sample-properties"]], "Data exploration on the Bike Sharing Demand dataset": [[43, "data-exploration-on-the-bike-sharing-demand-dataset"]], "Data generation": [[70, "data-generation"], [82, "data-generation"], [90, "data-generation"], [150, "data-generation"], [167, "data-generation"], [176, "data-generation"], [260, "data-generation"], [329, "data-generation"], [347, "data-generation"]], "Data generation and model fitting": [[141, "data-generation-and-model-fitting"]], "Data leakage": [[359, "data-leakage"]], "Data leakage during pre-processing": [[359, "data-leakage-during-pre-processing"]], "Data loading": [[271, "data-loading"]], "Data preprocessing": [[147, "data-preprocessing"]], "DataConversionWarning": [[573, null]], "DataDimensionalityWarning": [[574, null]], "DataFrame Support": [[1050, "dataframe-support"]], "DataRobot": [[1026, "id18"]], "Dataiku": [[1026, "id25"]], "Dataset": [[62, "dataset"], [202, "dataset"], [276, "dataset"]], "Dataset Versions": [[370, "dataset-versions"]], "Dataset and Gaussian process generation": [[179, "dataset-and-gaussian-process-generation"]], "Dataset and model": [[277, "dataset-and-model"]], "Dataset based latent variables model": [[115, "dataset-based-latent-variables-model"]], "Dataset examples": [[117, null], [183, "dataset-examples"]], "Dataset generation": [[177, "dataset-generation"], [214, "dataset-generation"]], "Dataset loading utilities": [[369, null], [381, "dataset-loading-utilities"]], "Dataset preparation": [[120, "dataset-preparation"], [232, "dataset-preparation"]], "Dataset preprocessing and model training": [[249, "dataset-preprocessing-and-model-training"]], "Dataset transformations": [[368, null]], "Datasets in svmlight / libsvm format": [[370, "datasets-in-svmlight-libsvm-format"]], "Davies-Bouldin Index": [[408, "davies-bouldin-index"]], "Dealing with multiclass target in classifiers": [[41, "module-sklearn.utils.multiclass"]], "Debian/Ubuntu": [[394, "debian-ubuntu"]], "Debugging CI issues": [[384, "debugging-ci-issues"]], "Debugging memory errors in Cython with valgrind": [[384, "debugging-memory-errors-in-cython-with-valgrind"]], "Decision Making Process": [[391, "decision-making-process"]], "Decision Surfaces of RBF Kernel SVM and Linear SVM": [[244, "decision-surfaces-of-rbf-kernel-svm-and-linear-svm"]], "Decision Tree Regression": [[357, null]], "Decision Tree Regression with AdaBoost": [[135, null]], "Decision Tree Regression with Multi-Output Targets": [[357, "decision-tree-regression-with-multi-output-targets"]], "Decision Tree on a 1D Regression Task": [[357, "decision-tree-on-a-1d-regression-task"]], "Decision Trees": [[183, "decision-trees"], [354, null], [1018, null]], "Decision boundary": [[293, "decision-boundary"]], "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset": [[334, null]], "Decision path": [[358, "decision-path"]], "DecisionBoundaryDisplay": [[632, null]], "DecisionTreeClassifier": [[913, null]], "DecisionTreeRegressor": [[914, null]], "Decoding text files": [[416, "decoding-text-files"]], "Decomposing signals in components (matrix factorization problems)": [[413, null]], "Decomposition": [[119, null], [120, "decomposition"], [183, "decomposition"]], "Decomposition: Dictionary learning": [[120, "decomposition-dictionary-learning"]], "Define a function to visualize cross-validation behavior": [[265, "define-a-function-to-visualize-cross-validation-behavior"]], "Define algorithms for the manifold learning": [[232, "define-algorithms-for-the-manifold-learning"]], "Define our evaluation benchmark": [[91, "define-our-evaluation-benchmark"]], "Define our grid-search strategy": [[268, "define-our-grid-search-strategy"]], "Define preprocessing functions": [[353, "define-preprocessing-functions"]], "Define structure of the data": [[81, "define-structure-of-the-data"]], "Define the classifiers": [[267, "define-the-classifiers"]], "Defining the list of metrics to evaluate": [[72, "defining-the-list-of-metrics-to-evaluate"]], "Defining your scoring strategy from metric functions": [[1002, "defining-your-scoring-strategy-from-metric-functions"]], "Demo of DBSCAN clustering algorithm": [[82, null]], "Demo of HDBSCAN clustering algorithm": [[88, null]], "Demo of OPTICS clustering algorithm": [[98, null]], "Demo of affinity propagation clustering algorithm": [[73, null]], "Demonstrating the different strategies of KBinsDiscretizer": [[313, null]], "Demonstration of k-means assumptions": [[90, null]], "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV": [[274, null]], "Density Estimation": [[414, null]], "Density Estimation for a Gaussian mixture": [[259, null]], "Density Estimation: Histograms": [[414, "density-estimation-histograms"]], "Density estimation, novelty detection": [[1017, "density-estimation-novelty-detection"]], "DensityMixin": [[427, null]], "Dependencies": [[374, "dependencies"]], "Deprecation": [[376, "deprecation"]], "Deprecation / Default Value Change": [[246, "deprecation-default-value-change"]], "Deprecations: using FutureWarning from now on": [[1043, "deprecations-using-futurewarning-from-now-on"]], "Description of the simulated data": [[185, "description-of-the-simulated-data"]], "Design the proper kernel": [[175, "design-the-proper-kernel"]], "DetCurveDisplay": [[699, null]], "Detection error tradeoff (DET)": [[1002, "detection-error-tradeoff-det"]], "Detection error tradeoff (DET) curve": [[267, null]], "Developer API for HTML representation": [[378, "developer-api-for-html-representation"]], "Developer API for check_is_fitted": [[378, "developer-api-for-check-is-fitted"]], "Developer API for set_output": [[378, "developer-api-for-set-output"]], "Developers\u2019 Tips and Tricks": [[384, null]], "Developer\u2019s Guide": [[379, null]], "Developing Estimators": [[131, null], [183, "developing-estimators"]], "Developing scikit-learn estimators": [[378, null]], "Developing with the Plotting API": [[383, null]], "Diabetes dataset": [[373, "diabetes-dataset"]], "DictVectorizer": [[353, "dictvectorizer"], [582, null]], "Dictionary Learning": [[413, "dictionary-learning"]], "Dictionary learning": [[120, "dictionary-learning"]], "Dictionary learning - positive code": [[120, "dictionary-learning-positive-code"]], "Dictionary learning - positive dictionary": [[120, "dictionary-learning-positive-dictionary"]], "Dictionary learning - positive dictionary & code": [[120, "dictionary-learning-positive-dictionary-code"]], "DictionaryLearning": [[532, null]], "Differences between solvers": [[998, "differences-between-solvers"]], "Different label assignment strategies": [[408, "different-label-assignment-strategies"]], "Different linkage type: Ward, complete, average, and single linkage": [[408, "different-linkage-type-ward-complete-average-and-single-linkage"]], "Different objects": [[378, "different-objects"]], "Different scenario and useful concepts": [[998, "different-scenario-and-useful-concepts"]], "Different scoring and fitting weights": [[399, "different-scoring-and-fitting-weights"]], "Digits Classification Exercise": [[160, null]], "Digits dataset": [[68, "digits-dataset"]], "Dimensionality Reduction with Neighborhood Components Analysis": [[299, null]], "Dimensionality reduction": [[1005, "dimensionality-reduction"]], "Dimensionality reduction using Linear Discriminant Analysis": [[996, "dimensionality-reduction-using-linear-discriminant-analysis"]], "Discovering scikit-learn objects": [[41, "module-sklearn.utils.discovery"]], "Discretization": [[1012, "discretization"]], "Dispatching": [[386, null]], "Display Objects": [[1030, "display-objects"]], "Display code coverage in pull requests": [[384, "display-code-coverage-in-pull-requests"]], "Display results": [[217, "display-results"]], "Display the distorted image": [[123, "display-the-distorted-image"]], "Displaying Pipelines": [[251, null]], "Displaying a Complex Pipeline Chaining a Column Transformer": [[251, "displaying-a-complex-pipeline-chaining-a-column-transformer"]], "Displaying a Grid Search over a Pipeline with a Classifier": [[251, "displaying-a-grid-search-over-a-pipeline-with-a-classifier"]], "Displaying a Pipeline Chaining Multiple Preprocessing Steps & Classifier": [[251, "displaying-a-pipeline-chaining-multiple-preprocessing-steps-classifier"]], "Displaying a Pipeline and Dimensionality Reduction and Classifier": [[251, "displaying-a-pipeline-and-dimensionality-reduction-and-classifier"]], "Displaying a Pipeline with a Preprocessing Step and Classifier": [[251, "displaying-a-pipeline-with-a-preprocessing-step-and-classifier"]], "Displaying estimators and complex pipelines": [[241, null]], "Distance metrics": [[27, "distance-metrics"]], "DistanceMetric": [[700, null]], "Do you plan to implement transform for target y in a pipeline?": [[388, "do-you-plan-to-implement-transform-for-target-y-in-a-pipeline"]], "Do you support PyPy?": [[388, "do-you-support-pypy"]], "Documentation": [[376, "documentation"], [1033, "documentation"]], "Documentation Resources": [[1025, "documentation-resources"]], "Documentation Team": [[0, "documentation-team"]], "Documentation improvements": [[1036, "documentation-improvements"], [1037, "documentation-improvements"]], "Does scikit-learn work natively with various types of dataframes?": [[388, "does-scikit-learn-work-natively-with-various-types-of-dataframes"]], "Domain specific packages": [[1021, "domain-specific-packages"]], "Donating to the project": [[0, "donating-to-the-project"]], "Dot-Product kernel": [[418, "dot-product-kernel"]], "Dot-product kernel": [[179, "dot-product-kernel"]], "DotProduct": [[615, null]], "Download data, if not already on disk": [[55, "download-data-if-not-already-on-disk"]], "Download the data and make missing values sets": [[182, "download-the-data-and-make-missing-values-sets"]], "Download the dataset": [[154, "download-the-dataset"]], "Downloading datasets from the openml.org repository": [[370, "downloading-datasets-from-the-openml-org-repository"]], "Drawbacks:": [[408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null], [408, null]], "Dummy estimators": [[1002, "dummy-estimators"]], "DummyClassifier": [[552, null]], "DummyRegressor": [[553, null]], "D\u00b2 score": [[1002, "d2-score"]], "D\u00b2 score for classification": [[1002, "d2-score-for-classification"]], "Earlier versions": [[1033, "earlier-versions"]], "Early stopping in Gradient Boosting": [[144, null]], "Early stopping of Stochastic Gradient Descent": [[220, null]], "Effect of model regularization on training and test error": [[283, null]], "Effect of number of trees and early stopping": [[149, "effect-of-number-of-trees-and-early-stopping"]], "Effect of rescaling on a PCA dimensional reduction": [[315, "effect-of-rescaling-on-a-pca-dimensional-reduction"]], "Effect of rescaling on a k-neighbors models": [[315, "effect-of-rescaling-on-a-k-neighbors-models"]], "Effect of rescaling on model\u2019s performance": [[315, "effect-of-rescaling-on-model-s-performance"]], "Effect of transforming the targets in regression model": [[107, null]], "Effect of varying threshold for self-training": [[332, null]], "EfficiencyWarning": [[575, null]], "Efficient Linear Algebra & Array Operations": [[385, "efficient-linear-algebra-array-operations"]], "Efficient Random Sampling": [[385, "efficient-random-sampling"]], "Efficient Routines for Sparse Matrices": [[385, "efficient-routines-for-sparse-matrices"]], "Eigenfaces - PCA using randomized SVD": [[120, "eigenfaces-pca-using-randomized-svd"]], "Elastic-Net": [[998, "elastic-net"]], "ElasticNet": [[198, "elasticnet"], [647, null]], "ElasticNetCV": [[648, null]], "EllipticEnvelope": [[469, null]], "Embedding in 2D space": [[51, "embedding-in-2d-space"]], "Embedding techniques comparison": [[233, "embedding-techniques-comparison"]], "Emeritus Communication Team": [[0, "emeritus-communication-team"]], "Emeritus Contributor Experience Team": [[0, "emeritus-contributor-experience-team"]], "Emeritus Core Contributors": [[0, "emeritus-core-contributors"]], "Emeritus Maintainers Team": [[0, "emeritus-maintainers-team"]], "Empirical covariance": [[410, "empirical-covariance"]], "Empirical evaluation of the impact of k-means initialization": [[94, null]], "Empirical validation": [[243, "empirical-validation"]], "EmpiricalCovariance": [[470, null]], "Encoding categorical features": [[1012, "encoding-categorical-features"]], "Encoding strategy": [[86, "encoding-strategy"]], "Enforcing keyword-only arguments": [[1044, "enforcing-keyword-only-arguments"], [1046, "enforcing-keyword-only-arguments"]], "Enhancement proposals (SLEPs)": [[391, "enhancement-proposals-sleps"]], "Enhancements": [[1036, "enhancements"], [1037, "enhancements"], [1038, "enhancements"], [1039, "enhancements"], [1039, "id4"], [1040, "enhancements"], [1040, "id3"]], "Enriched estimator displays": [[326, "enriched-estimator-displays"]], "Ensemble methods": [[133, null], [183, "ensemble-methods"]], "Ensembles: Gradient boosting, random forests, bagging, voting, stacking": [[415, null]], "Environment variables": [[364, "environment-variables"]], "Error Calculation": [[144, "error-calculation"]], "Error caused by file path length limit on Windows": [[394, "error-caused-by-file-path-length-limit-on-windows"]], "Errors and weights of the Weak Learners": [[134, "errors-and-weights-of-the-weak-learners"]], "Establishing a baseline model": [[191, "establishing-a-baseline-model"]], "Establishing parity between clusters": [[97, "establishing-parity-between-clusters"]], "Establishing the kernel approximation model": [[191, "establishing-the-kernel-approximation-model"]], "Establishing the kernelized SVM model": [[191, "establishing-the-kernelized-svm-model"]], "Estimate the covariance": [[113, "estimate-the-covariance"]], "Estimate the score": [[182, "estimate-the-score"]], "Estimated Attributes": [[378, "estimated-attributes"]], "Estimation algorithms": [[996, "estimation-algorithms"]], "Estimator Tags": [[378, "estimator-tags"]], "Estimator types": [[378, "estimator-types"]], "Estimators": [[359, "estimators"], [359, "id2"], [378, "estimators"], [404, "estimators"]], "Estimators that handle NaN values": [[992, "estimators-that-handle-nan-values"]], "Evaluate the impact of the regularization parameter": [[283, "evaluate-the-impact-of-the-regularization-parameter"]], "Evaluation": [[112, "evaluation"], [308, "evaluation"]], "Evaluation metrics": [[264, "evaluation-metrics"]], "Evaluation of outlier detection estimators": [[249, null]], "Evaluation of the calibration of predictions": [[212, "evaluation-of-the-calibration-of-predictions"]], "Evaluation of the ranking power": [[212, "evaluation-of-the-ranking-power"]], "Evernote": [[1026, "id6"]], "Exact Kernel PCA": [[413, "exact-kernel-pca"]], "Exact PCA and probabilistic interpretation": [[413, "exact-pca-and-probabilistic-interpretation"]], "Example usage": [[404, "example-usage"]], "Example with noise-free target": [[177, "example-with-noise-free-target"]], "Example with noisy targets": [[177, "example-with-noisy-targets"]], "Examples": [[183, null], [365, "examples"], [407, "examples"], [1033, "examples"]], "Examples based on real world datasets": [[42, null], [183, "examples-based-on-real-world-datasets"]], "Exhaustive Grid Search": [[991, "exhaustive-grid-search"]], "Exp-Sine-Squared kernel": [[179, "exp-sine-squared-kernel"], [418, "exp-sine-squared-kernel"]], "ExpSineSquared": [[616, null]], "Experimental / Under Development": [[1049, "experimental-under-development"]], "Experimental Array API support in LinearDiscriminantAnalysis": [[324, "experimental-array-api-support-in-lineardiscriminantanalysis"]], "Experimental Features": [[380, "experimental-features"]], "Explained variance score": [[1002, "explained-variance-score"]], "Explicit feature map approximation for RBF kernels": [[244, null]], "Exponentiation": [[617, null]], "Exporting": [[40, "exporting"]], "External Resources, Videos and Talks": [[1020, null]], "External Tutorials": [[1020, "external-tutorials"]], "External dependencies": [[1033, "external-dependencies"]], "ExtraTreeClassifier": [[915, null]], "ExtraTreeRegressor": [[916, null]], "ExtraTreesClassifier": [[558, null]], "ExtraTreesRegressor": [[559, null]], "Extract noisy patches and reconstruct them using the dictionary": [[123, "extract-noisy-patches-and-reconstruct-them-using-the-dictionary"]], "Extract reference patches": [[123, "extract-reference-patches"]], "Extracting features": [[365, "extracting-features"]], "Extremely Randomized Trees": [[415, "extremely-randomized-trees"]], "Face completion with a multi-output estimators": [[248, null]], "Faces dataset decompositions": [[120, null]], "Faces recognition example using eigenfaces and SVMs": [[45, null]], "Factor Analysis": [[413, "factor-analysis"]], "Factor Analysis (with rotation) to visualize patterns": [[130, null]], "Factor Analysis components - FA": [[120, "factor-analysis-components-fa"]], "FactorAnalysis": [[533, null]], "Failure of Machine Learning to infer causal effects": [[185, null]], "FastICA": [[534, null]], "FastICA on 2D point clouds": [[122, null]], "Faster parser in fetch_openml": [[324, "faster-parser-in-fetch-openml"]], "Feature Extraction Latency": [[363, "feature-extraction-latency"]], "Feature Extraction using TfidfVectorizer": [[352, "feature-extraction-using-tfidfvectorizer"]], "Feature Names Support": [[322, "feature-names-support"]], "Feature Selection": [[162, null], [183, "feature-selection"]], "Feature agglomeration": [[84, null], [1019, "feature-agglomeration"]], "Feature agglomeration vs. univariate selection": [[87, null]], "Feature binarization": [[1012, "feature-binarization"]], "Feature discretization": [[312, null]], "Feature extraction": [[416, null]], "Feature hashing": [[416, "feature-hashing"]], "Feature importance based on feature permutation": [[141, "feature-importance-based-on-feature-permutation"]], "Feature importance based on mean decrease in impurity": [[141, "feature-importance-based-on-mean-decrease-in-impurity"]], "Feature importance evaluation": [[415, "feature-importance-evaluation"]], "Feature importance from coefficients": [[168, "feature-importance-from-coefficients"]], "Feature importances with a forest of trees": [[141, null]], "Feature normalization": [[191, "feature-normalization"]], "Feature scaling": [[1019, null]], "Feature selection": [[417, null]], "Feature selection as part of a pipeline": [[417, "feature-selection-as-part-of-a-pipeline"]], "Feature selection using SelectFromModel": [[417, "feature-selection-using-selectfrommodel"]], "Feature selection with sparse data": [[417, null]], "Feature transformations with ensembles of trees": [[139, null]], "FeatureAgglomeration": [[408, null], [445, null]], "FeatureHasher": [[353, "featurehasher"], [583, null]], "FeatureHasher and DictVectorizer Comparison": [[353, null]], "FeatureUnion": [[864, null]], "FeatureUnion: composite feature spaces": [[409, "featureunion-composite-feature-spaces"]], "Features in Histogram Gradient Boosting Trees": [[149, null]], "Fedora": [[394, "fedora"]], "Final conclusion": [[170, "final-conclusion"]], "Final remarks": [[90, "final-remarks"]], "Finding the Nearest Neighbors": [[1005, "finding-the-nearest-neighbors"]], "First example": [[48, "first-example"]], "First experiment: fixed ground truth labels and growing number of clusters": [[72, "first-experiment-fixed-ground-truth-labels-and-growing-number-of-clusters"]], "Fit ICA and PCA models": [[121, "fit-ica-and-pca-models"]], "Fit by cubic polynomial": [[194, "fit-by-cubic-polynomial"]], "Fit models": [[207, "fit-models"], [289, "fit-models"]], "Fit models and plot results": [[90, "fit-models-and-plot-results"]], "Fit regression model": [[147, "fit-regression-model"], [302, "fit-regression-model"], [346, "fit-regression-model"], [357, "fit-regression-model"], [357, "id1"]], "Fit the model for outlier detection (default)": [[297, "fit-the-model-for-outlier-detection-default"]], "Fit the models": [[127, "fit-the-models"]], "Fit the regressors": [[193, "fit-the-regressors"], [193, "id2"]], "FitFailedWarning": [[576, null]], "Fitting": [[378, "fitting"]], "Fitting SpectralBiclustering": [[58, "fitting-spectralbiclustering"]], "Fitting a QuantileRegressor": [[214, "fitting-a-quantileregressor"]], "Fitting additional trees": [[415, "fitting-additional-trees"]], "Fitting additional weak-learners": [[415, "fitting-additional-weak-learners"]], "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples": [[195, null]], "Fitting an elliptic envelope": [[1008, "fitting-an-elliptic-envelope"]], "Fitting and calibration": [[63, "fitting-and-calibration"]], "Fitting and predicting: estimator basics": [[389, "fitting-and-predicting-estimator-basics"]], "Fitting non-linear quantile and least squares regressors": [[146, "fitting-non-linear-quantile-and-least-squares-regressors"]], "Fixed models": [[1046, "fixed-models"]], "FixedThresholdClassifier": [[800, null]], "FixedThresholdClassifier: Setting the decision threshold of a binary classifier": [[327, "fixedthresholdclassifier-setting-the-decision-threshold-of-a-binary-classifier"]], "Fixes": [[1033, "fixes"]], "Flexibility of IterativeImputer": [[992, "flexibility-of-iterativeimputer"]], "Folding and unfolding outdated diffs on pull requests": [[384, "folding-and-unfolding-outdated-diffs-on-pull-requests"]], "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)": [[175, null]], "Forest covertypes": [[371, "forest-covertypes"]], "Forest covertypes dataset": [[249, "forest-covertypes-dataset"]], "Fowlkes-Mallows scores": [[408, "fowlkes-mallows-scores"]], "FreeBSD": [[374, "freebsd"]], "Frequency model \u2013 Poisson distribution": [[230, "frequency-model-poisson-distribution"]], "Frequently Asked Questions": [[388, null]], "From binary to multiclass and multilabel": [[1002, "from-binary-to-multiclass-and-multilabel"]], "From images": [[17, "module-sklearn.feature_extraction.image"]], "From text": [[17, "module-sklearn.feature_extraction.text"]], "Fruitful discussions": [[375, null]], "FunctionTransformer": [[869, null]], "Funding": [[0, "funding"]], "GMM Initialization Methods": [[258, null]], "GMM covariances": [[257, null]], "GPC examples": [[418, "gpc-examples"]], "Gallery examples": [[422, "gallery-examples"], [425, "gallery-examples"], [428, "gallery-examples"], [431, "gallery-examples"], [432, "gallery-examples"], [437, "gallery-examples"], [438, "gallery-examples"], [440, "gallery-examples"], [441, "gallery-examples"], [442, "gallery-examples"], [443, "gallery-examples"], [444, "gallery-examples"], [445, "gallery-examples"], [446, "gallery-examples"], [447, "gallery-examples"], [448, "gallery-examples"], [449, "gallery-examples"], [450, "gallery-examples"], [451, "gallery-examples"], [452, "gallery-examples"], [453, "gallery-examples"], [454, "gallery-examples"], [455, "gallery-examples"], [458, "gallery-examples"], [460, "gallery-examples"], [462, "gallery-examples"], [464, "gallery-examples"], [465, "gallery-examples"], [466, "gallery-examples"], [467, "gallery-examples"], [468, "gallery-examples"], [469, "gallery-examples"], [470, "gallery-examples"], [472, "gallery-examples"], [473, "gallery-examples"], [474, "gallery-examples"], [475, "gallery-examples"], [476, "gallery-examples"], [477, "gallery-examples"], [479, "gallery-examples"], [482, "gallery-examples"], [483, "gallery-examples"], [484, "gallery-examples"], [488, "gallery-examples"], [489, "gallery-examples"], [490, "gallery-examples"], [491, "gallery-examples"], [492, "gallery-examples"], [493, "gallery-examples"], [495, "gallery-examples"], [496, "gallery-examples"], [497, "gallery-examples"], [499, "gallery-examples"], [500, "gallery-examples"], [501, "gallery-examples"], [502, "gallery-examples"], [503, "gallery-examples"], [505, "gallery-examples"], [511, "gallery-examples"], [512, "gallery-examples"], [513, "gallery-examples"], [514, "gallery-examples"], [515, "gallery-examples"], [516, "gallery-examples"], [520, "gallery-examples"], [521, "gallery-examples"], [522, "gallery-examples"], [523, "gallery-examples"], [524, "gallery-examples"], [525, "gallery-examples"], [526, "gallery-examples"], [527, "gallery-examples"], [528, "gallery-examples"], [531, "gallery-examples"], [533, "gallery-examples"], [534, "gallery-examples"], [535, "gallery-examples"], [536, "gallery-examples"], [537, "gallery-examples"], [538, "gallery-examples"], [539, "gallery-examples"], [540, "gallery-examples"], [541, "gallery-examples"], [542, "gallery-examples"], [543, "gallery-examples"], [544, "gallery-examples"], [545, "gallery-examples"], [550, "gallery-examples"], [551, "gallery-examples"], [552, "gallery-examples"], [553, "gallery-examples"], [554, "gallery-examples"], [555, "gallery-examples"], [557, "gallery-examples"], [558, "gallery-examples"], [559, "gallery-examples"], [560, "gallery-examples"], [561, "gallery-examples"], [562, "gallery-examples"], [563, "gallery-examples"], [564, "gallery-examples"], [565, "gallery-examples"], [566, "gallery-examples"], [567, "gallery-examples"], [568, "gallery-examples"], [569, "gallery-examples"], [570, "gallery-examples"], [571, "gallery-examples"], [582, "gallery-examples"], [583, "gallery-examples"], [585, "gallery-examples"], [588, "gallery-examples"], [589, "gallery-examples"], [590, "gallery-examples"], [591, "gallery-examples"], [592, "gallery-examples"], [594, "gallery-examples"], [595, "gallery-examples"], [598, "gallery-examples"], [600, "gallery-examples"], [601, "gallery-examples"], [603, "gallery-examples"], [605, "gallery-examples"], [606, "gallery-examples"], [607, "gallery-examples"], [608, "gallery-examples"], [609, "gallery-examples"], [611, "gallery-examples"], [612, "gallery-examples"], [614, "gallery-examples"], [615, "gallery-examples"], [616, "gallery-examples"], [618, "gallery-examples"], [619, "gallery-examples"], [620, "gallery-examples"], [623, "gallery-examples"], [624, "gallery-examples"], [626, "gallery-examples"], [628, "gallery-examples"], [629, "gallery-examples"], [631, "gallery-examples"], [632, "gallery-examples"], [633, "gallery-examples"], [634, "gallery-examples"], [635, "gallery-examples"], [636, "gallery-examples"], [640, "gallery-examples"], [641, "gallery-examples"], [642, "gallery-examples"], [644, "gallery-examples"], [645, "gallery-examples"], [646, "gallery-examples"], [647, "gallery-examples"], [648, "gallery-examples"], [649, "gallery-examples"], [650, "gallery-examples"], [653, "gallery-examples"], [654, "gallery-examples"], [656, "gallery-examples"], [657, "gallery-examples"], [658, "gallery-examples"], [659, "gallery-examples"], [660, "gallery-examples"], [663, "gallery-examples"], [665, "gallery-examples"], [666, "gallery-examples"], [667, "gallery-examples"], [669, "gallery-examples"], [670, "gallery-examples"], [671, "gallery-examples"], [672, "gallery-examples"], [673, "gallery-examples"], [674, "gallery-examples"], [675, "gallery-examples"], [677, "gallery-examples"], [678, "gallery-examples"], [679, "gallery-examples"], [680, "gallery-examples"], [681, "gallery-examples"], [682, "gallery-examples"], [683, "gallery-examples"], [685, "gallery-examples"], [689, "gallery-examples"], [690, "gallery-examples"], [691, "gallery-examples"], [692, "gallery-examples"], [693, "gallery-examples"], [694, "gallery-examples"], [698, "gallery-examples"], [699, "gallery-examples"], [701, "gallery-examples"], [702, "gallery-examples"], [703, "gallery-examples"], [704, "gallery-examples"], [705, "gallery-examples"], [706, "gallery-examples"], [707, "gallery-examples"], [708, "gallery-examples"], [710, "gallery-examples"], [713, "gallery-examples"], [714, "gallery-examples"], [718, "gallery-examples"], [719, "gallery-examples"], [720, "gallery-examples"], [728, "gallery-examples"], [730, "gallery-examples"], [733, "gallery-examples"], [735, "gallery-examples"], [736, "gallery-examples"], [738, "gallery-examples"], [739, "gallery-examples"], [742, "gallery-examples"], [743, "gallery-examples"], [746, "gallery-examples"], [747, "gallery-examples"], [749, "gallery-examples"], [750, "gallery-examples"], [751, "gallery-examples"], [753, "gallery-examples"], [754, "gallery-examples"], [756, "gallery-examples"], [758, "gallery-examples"], [762, "gallery-examples"], [779, "gallery-examples"], [780, "gallery-examples"], [783, "gallery-examples"], [785, "gallery-examples"], [786, "gallery-examples"], [787, "gallery-examples"], [788, "gallery-examples"], [789, "gallery-examples"], [790, "gallery-examples"], [791, "gallery-examples"], [793, "gallery-examples"], [794, "gallery-examples"], [796, "gallery-examples"], [798, "gallery-examples"], [799, "gallery-examples"], [800, "gallery-examples"], [801, "gallery-examples"], [802, "gallery-examples"], [803, "gallery-examples"], [804, "gallery-examples"], [805, "gallery-examples"], [806, "gallery-examples"], [807, "gallery-examples"], [815, "gallery-examples"], [816, "gallery-examples"], [817, "gallery-examples"], [818, "gallery-examples"], [819, "gallery-examples"], [820, "gallery-examples"], [821, "gallery-examples"], [822, "gallery-examples"], [823, "gallery-examples"], [824, "gallery-examples"], [826, "gallery-examples"], [827, "gallery-examples"], [828, "gallery-examples"], [829, "gallery-examples"], [830, "gallery-examples"], [831, "gallery-examples"], [832, "gallery-examples"], [833, "gallery-examples"], [834, "gallery-examples"], [835, "gallery-examples"], [836, "gallery-examples"], [838, "gallery-examples"], [840, "gallery-examples"], [842, "gallery-examples"], [843, "gallery-examples"], [844, "gallery-examples"], [847, "gallery-examples"], [848, "gallery-examples"], [849, "gallery-examples"], [850, "gallery-examples"], [851, "gallery-examples"], [852, "gallery-examples"], [853, "gallery-examples"], [854, "gallery-examples"], [858, "gallery-examples"], [861, "gallery-examples"], [862, "gallery-examples"], [863, "gallery-examples"], [864, "gallery-examples"], [865, "gallery-examples"], [866, "gallery-examples"], [869, "gallery-examples"], [870, "gallery-examples"], [872, "gallery-examples"], [874, "gallery-examples"], [875, "gallery-examples"], [877, "gallery-examples"], [878, "gallery-examples"], [879, "gallery-examples"], [880, "gallery-examples"], [881, "gallery-examples"], [882, "gallery-examples"], [883, "gallery-examples"], [884, "gallery-examples"], [885, "gallery-examples"], [886, "gallery-examples"], [889, "gallery-examples"], [891, "gallery-examples"], [894, "gallery-examples"], [898, "gallery-examples"], [899, "gallery-examples"], [901, "gallery-examples"], [902, "gallery-examples"], [903, "gallery-examples"], [905, "gallery-examples"], [908, "gallery-examples"], [909, "gallery-examples"], [910, "gallery-examples"], [911, "gallery-examples"], [912, "gallery-examples"], [913, "gallery-examples"], [914, "gallery-examples"], [919, "gallery-examples"], [920, "gallery-examples"], [934, "gallery-examples"], [944, "gallery-examples"], [946, "gallery-examples"], [953, "gallery-examples"], [958, "gallery-examples"], [959, "gallery-examples"], [960, "gallery-examples"], [961, "gallery-examples"], [962, "gallery-examples"], [975, "gallery-examples"], [985, "gallery-examples"]], "Gamma loss for gradient boosting": [[325, "gamma-loss-for-gradient-boosting"]], "GammaRegressor": [[649, null]], "Gaussian Mixture": [[1001, "gaussian-mixture"]], "Gaussian Mixture Model Ellipsoids": [[256, null]], "Gaussian Mixture Model Selection": [[260, null]], "Gaussian Mixture Model Sine Curve": [[261, null]], "Gaussian Mixture Models": [[183, "gaussian-mixture-models"], [254, null]], "Gaussian Naive Bayes": [[62, "gaussian-naive-bayes"], [1004, "gaussian-naive-bayes"]], "Gaussian Naive-Bayes": [[61, "gaussian-naive-bayes"]], "Gaussian Process Classification (GPC)": [[418, "gaussian-process-classification-gpc"]], "Gaussian Process Regression (GPR)": [[418, "gaussian-process-regression-gpr"]], "Gaussian Process for Machine Learning": [[169, null], [183, "gaussian-process-for-machine-learning"]], "Gaussian Processes": [[418, null]], "Gaussian Processes regression: basic introductory example": [[177, null]], "Gaussian mixture models": [[1001, null]], "Gaussian process classification (GPC) on iris dataset": [[172, null], [418, "gaussian-process-classification-gpc-on-iris-dataset"]], "Gaussian process regression": [[170, "gaussian-process-regression"]], "Gaussian processes on discrete data structures": [[178, null]], "Gaussian random projection": [[1014, "gaussian-random-projection"]], "GaussianMixture": [[799, null]], "GaussianNB": [[843, null]], "GaussianProcessClassifier": [[611, null]], "GaussianProcessRegressor": [[612, null]], "GaussianRandomProjection": [[897, null]], "General Concepts": [[390, "general-concepts"]], "General recommendations": [[359, "general-recommendations"]], "Generalized Linear Models": [[183, "generalized-linear-models"], [192, null], [998, "generalized-linear-models"]], "Generalized Linear Models, and Poisson loss for gradient boosting": [[320, "generalized-linear-models-and-poisson-loss-for-gradient-boosting"]], "Generalized linear models (GLM) for regression": [[25, "generalized-linear-models-glm-for-regression"]], "Generate data": [[81, "generate-data"], [100, "generate-data"], [111, "generate-data"], [207, "generate-data"], [308, "generate-data"]], "Generate data with outliers": [[297, "generate-data-with-outliers"]], "Generate distorted image": [[123, "generate-distorted-image"]], "Generate sample data": [[58, "generate-sample-data"], [73, "generate-sample-data"], [88, "generate-sample-data"], [96, "generate-sample-data"], [109, "generate-sample-data"], [121, "generate-sample-data"], [122, "generate-sample-data"], [164, "generate-sample-data"], [245, "generate-sample-data"], [283, "generate-sample-data"], [302, "generate-sample-data"], [346, "generate-sample-data"]], "Generate sinusoidal data with noise": [[194, "generate-sinusoidal-data-with-noise"]], "Generate synthetic data": [[267, "generate-synthetic-data"]], "Generate synthetic dataset": [[61, "generate-synthetic-dataset"], [193, "generate-synthetic-dataset"], [193, "id1"], [198, "generate-synthetic-dataset"]], "Generate the data": [[97, "generate-the-data"], [99, "generate-the-data"], [113, "generate-the-data"]], "Generated datasets": [[372, null]], "Generated documentation on GitHub Actions": [[376, "generated-documentation-on-github-actions"]], "Generating Polars-engineered lagged features": [[52, "generating-polars-engineered-lagged-features"]], "Generating a dataset": [[170, "generating-a-dataset"]], "Generating polynomial features": [[1012, "generating-polynomial-features"]], "Generators for classification and clustering": [[372, "generators-for-classification-and-clustering"]], "Generators for decomposition": [[372, "generators-for-decomposition"]], "Generators for manifold learning": [[372, "generators-for-manifold-learning"]], "Generators for regression": [[372, "generators-for-regression"]], "Generic dictionary learning": [[413, "generic-dictionary-learning"]], "GenericUnivariateSelect": [[593, null]], "Getting Started": [[389, null]], "Getting reproducible results across multiple executions": [[359, "getting-reproducible-results-across-multiple-executions"]], "Gitter": [[1025, "gitter"]], "Glossary of Common Terms and API Elements": [[390, null]], "Good practices": [[381, "good-practices"]], "Governance": [[0, "governance"]], "Governance Model Changes": [[391, "governance-model-changes"]], "Gradient Boosting": [[43, "gradient-boosting"]], "Gradient Boosting Out-of-Bag estimates": [[145, null]], "Gradient Boosting Regression Trees for Poisson regression": [[212, "gradient-boosting-regression-trees-for-poisson-regression"]], "Gradient Boosting regression": [[147, null]], "Gradient Boosting regularization": [[148, null]], "Gradient boosting": [[187, "gradient-boosting"]], "Gradient boosting estimator with dropped categorical features": [[143, "gradient-boosting-estimator-with-dropped-categorical-features"]], "Gradient boosting estimator with native categorical support": [[143, "gradient-boosting-estimator-with-native-categorical-support"]], "Gradient boosting estimator with one-hot encoding": [[143, "gradient-boosting-estimator-with-one-hot-encoding"]], "Gradient boosting estimator with ordinal encoding": [[143, "gradient-boosting-estimator-with-ordinal-encoding"]], "Gradient-boosted trees": [[415, "gradient-boosted-trees"]], "GradientBoostingClassifier": [[560, null]], "GradientBoostingClassifier and GradientBoostingRegressor": [[415, "gradientboostingclassifier-and-gradientboostingregressor"]], "GradientBoostingClassifier vs HistGradientBoostingClassifier": [[415, null]], "GradientBoostingRegressor": [[561, null]], "Graph Routines": [[385, "graph-routines"]], "Graphical model and parametrization": [[1007, "graphical-model-and-parametrization"]], "GraphicalLasso": [[471, null]], "GraphicalLassoCV": [[472, null]], "GridSearchCV": [[801, null]], "Group Shuffle Split": [[412, "group-shuffle-split"]], "Group k-fold": [[412, "group-k-fold"]], "GroupKFold": [[802, null]], "GroupShuffleSplit": [[803, null]], "Grouping infrequent categories in OneHotEncoder": [[323, "grouping-infrequent-categories-in-onehotencoder"]], "Grouping infrequent categories in OrdinalEncoder": [[325, "grouping-infrequent-categories-in-ordinalencoder"]], "HDBSCAN": [[408, "hdbscan"], [446, null]], "HDBSCAN: hierarchical density-based clustering": [[325, "hdbscan-hierarchical-density-based-clustering"]], "HalvingGridSearchCV": [[804, null]], "HalvingRandomSearchCV": [[805, null]], "Hamming loss": [[1002, "hamming-loss"]], "Handling Multicollinear Features": [[189, "handling-multicollinear-features"]], "Hash Functions": [[385, "hash-functions"]], "Hashing feature transformation using Totally Random Trees": [[152, null]], "HashingVectorizer": [[352, "hashingvectorizer"], [590, null]], "Helper Functions": [[385, "helper-functions"]], "Helper function": [[179, "helper-function"]], "Helper function to plot embedding": [[233, "helper-function-to-plot-embedding"]], "Hessian Eigenmapping": [[999, "hessian-eigenmapping"]], "Hierarchical Clustering": [[408, "id11"]], "Hierarchical clustering": [[408, "hierarchical-clustering"]], "Hierarchical clustering: structured vs unstructured ward": [[100, null]], "Higher-level parallelism with joblib": [[364, "higher-level-parallelism-with-joblib"]], "Highlights": [[1033, "highlights"], [1036, "highlights"], [1037, "highlights"], [1040, "highlights"], [1041, "highlights"]], "Hinge loss": [[1002, "hinge-loss"]], "HistGradientBoosting Natively Supports Categorical DTypes in DataFrames": [[326, "histgradientboosting-natively-supports-categorical-dtypes-in-dataframes"]], "HistGradientBoostingClassifier": [[562, null]], "HistGradientBoostingRegressor": [[563, null]], "Histogram-Based Gradient Boosting": [[415, "histogram-based-gradient-boosting"]], "Histogram-based Gradient Boosting Models are now stable": [[322, "histogram-based-gradient-boosting-models-are-now-stable"]], "History": [[0, "history"]], "Homogeneity, completeness and V-measure": [[408, "homogeneity-completeness-and-v-measure"]], "How can I contribute to scikit-learn?": [[388, "how-can-i-contribute-to-scikit-learn"]], "How can I create a bunch object?": [[388, "how-can-i-create-a-bunch-object"]], "How can I load my own datasets into a format usable by scikit-learn?": [[388, "how-can-i-load-my-own-datasets-into-a-format-usable-by-scikit-learn"]], "How can I obtain permission to use the images in scikit-learn for my work?": [[388, "how-can-i-obtain-permission-to-use-the-images-in-scikit-learn-for-my-work"]], "How do I deal with string data (or trees, graphs\u2026)?": [[388, "how-do-i-deal-with-string-data-or-trees-graphs"]], "How do I set a random_state for an entire execution?": [[388, "how-do-i-set-a-random-state-for-an-entire-execution"]], "How do you pronounce the project name?": [[388, "how-do-you-pronounce-the-project-name"]], "How should I save, export or deploy estimators for production?": [[388, "how-should-i-save-export-or-deploy-estimators-for-production"]], "How to avoid data leakage": [[359, "how-to-avoid-data-leakage"]], "How to contribute": [[376, "how-to-contribute"]], "How to make a good bug report": [[376, "how-to-make-a-good-bug-report"]], "How to optimize for speed": [[382, null]], "HowAboutWe": [[1026, "id16"]], "Huber Regression": [[998, "huber-regression"]], "HuberRegressor": [[650, null]], "HuberRegressor vs Ridge on dataset with strong outliers": [[196, null]], "Hugging Face": [[1026, "id5"]], "Hyper-parameter optimizers": [[29, "hyper-parameter-optimizers"]], "Hyperparameter": [[618, null]], "Hyperparameter Robustness": [[88, "hyperparameter-robustness"]], "ICE vs. PDP": [[187, "ice-vs-pdp"]], "INFONEA": [[1026, "id24"]], "Illustration of GPC on the XOR dataset": [[418, "illustration-of-gpc-on-the-xor-dataset"]], "Illustration of Gaussian process classification (GPC) on the XOR dataset": [[174, null]], "Illustration of Pipeline and GridSearchCV": [[104, "illustration-of-pipeline-and-gridsearchcv"]], "Illustration of prior and posterior Gaussian process for different kernels": [[179, null]], "Image denoising using dictionary learning": [[123, null]], "Image denoising using kernel PCA": [[44, null]], "Image feature extraction": [[416, "image-feature-extraction"]], "Implementation": [[1005, "implementation"]], "Implementation decisions": [[388, "implementation-decisions"]], "Implementation details": [[1016, "implementation-details"], [1017, "implementation-details"]], "Implementing your own scoring object": [[1002, "implementing-your-own-scoring-object"]], "Importance of Feature Scaling": [[315, null]], "Important notes regarding the internal cross-validation": [[407, "important-notes-regarding-the-internal-cross-validation"]], "Improved efficiency of many estimators": [[324, "improved-efficiency-of-many-estimators"]], "Improved memory and runtime efficiency for PCA on sparse data": [[326, "improved-memory-and-runtime-efficiency-for-pca-on-sparse-data"]], "Improved performances of HistGradientBoosting estimators": [[321, "improved-performances-of-histgradientboosting-estimators"]], "Improvements to the histogram-based Gradient Boosting estimators": [[320, "improvements-to-the-histogram-based-gradient-boosting-estimators"]], "Imputation of missing values": [[992, null], [1012, "imputation-of-missing-values"]], "Impute missing values with mean": [[182, "impute-missing-values-with-mean"]], "Impute the missing data and score": [[182, "impute-the-missing-data-and-score"]], "Imputing missing values before building an estimator": [[182, null]], "Imputing missing values with variants of IterativeImputer": [[181, null]], "In binary classification settings": [[277, "in-binary-classification-settings"]], "In multi-label settings": [[277, "in-multi-label-settings"]], "Income prediction with fully observed variables": [[185, "income-prediction-with-fully-observed-variables"]], "Income prediction with partial observations": [[185, "income-prediction-with-partial-observations"]], "Inconsistent preprocessing": [[359, "inconsistent-preprocessing"]], "InconsistentVersionWarning": [[577, null]], "Incremental PCA": [[124, null], [413, "incremental-pca"]], "Incremental learning": [[365, "incremental-learning"]], "IncrementalPCA": [[535, null]], "Independent component analysis (ICA)": [[413, "independent-component-analysis-ica"]], "Independent components - FastICA": [[120, "independent-components-fastica"]], "Individual Conditional Expectation plots": [[321, "individual-conditional-expectation-plots"]], "Individual conditional expectation (ICE) plot": [[1009, "individual-conditional-expectation-ice-plot"]], "Inductive Clustering": [[89, null]], "Influence of the Input Data Representation": [[363, "influence-of-the-input-data-representation"]], "Influence of the Model Complexity": [[363, "influence-of-the-model-complexity"]], "Influence of the Number of Features": [[363, "influence-of-the-number-of-features"]], "Information Criterion": [[991, "information-criterion"]], "Information-criteria based model selection": [[998, "information-criteria-based-model-selection"]], "Infrastructure support": [[0, "infrastructure-support"]], "Infrequent categories": [[1012, "infrequent-categories"]], "Input and parameter validation": [[41, "module-sklearn.utils.validation"]], "Input data": [[408, null]], "Input validation": [[378, "input-validation"]], "InputTags": [[922, null]], "Inria": [[1026, "id3"]], "Inspection": [[183, "inspection"], [184, null], [393, null]], "Installing nightly builds": [[374, "installing-nightly-builds"]], "Installing scikit-learn": [[394, null]], "Installing the development version of scikit-learn": [[374, null]], "Installing the latest release": [[394, "installing-the-latest-release"]], "Instantiation": [[378, "instantiation"]], "Intel Extension for Scikit-learn": [[394, "intel-extension-for-scikit-learn"]], "Interaction constraints": [[415, "interaction-constraints"]], "Interaction constraints in Histogram-based Gradient Boosting Trees": [[324, "interaction-constraints-in-histogram-based-gradient-boosting-trees"]], "Interoperability and framework enhancements": [[1021, "interoperability-and-framework-enhancements"]], "Interpretation of kernel hyperparameters": [[175, "interpretation-of-kernel-hyperparameters"]], "Interpretation with feature importance": [[415, "interpretation-with-feature-importance"]], "Interpreting coefficients: being cautious about causality": [[186, "interpreting-coefficients-being-cautious-about-causality"]], "Interpreting coefficients: scale matters": [[186, "interpreting-coefficients-scale-matters"]], "Interpreting the plots": [[216, "interpreting-the-plots"]], "Introducing the set_output API": [[253, null]], "Introduction": [[999, "introduction"]], "Invariance with respect to prevalence": [[273, "invariance-with-respect-to-prevalence"]], "Inverse Transform": [[1014, "inverse-transform"]], "Iris plants dataset": [[373, "iris-plants-dataset"]], "Iso-probability lines for Gaussian Processes classification (GPC)": [[173, null]], "Isolation Forest": [[1008, "isolation-forest"]], "IsolationForest": [[564, null]], "IsolationForest example": [[150, null]], "Isomap": [[689, null], [999, "isomap"]], "Isomap Embedding": [[232, "isomap-embedding"]], "Isotonic": [[406, "isotonic"]], "Isotonic Regression": [[242, null]], "Isotonic regression": [[993, null]], "IsotonicRegression": [[636, null]], "Issue Tracker Tags": [[376, "issue-tracker-tags"]], "Issues for New Contributors": [[376, "issues-for-new-contributors"]], "Iterative imputation of the missing values": [[182, "iterative-imputation-of-the-missing-values"]], "IterativeImputer": [[628, null]], "J.P.Morgan": [[1026, "id1"]], "Jaccard similarity coefficient score": [[1002, "jaccard-similarity-coefficient-score"]], "Joint feature selection with multi-task Lasso": [[207, null]], "K-D Tree": [[1005, "k-d-tree"]], "K-bins discretization": [[1012, "k-bins-discretization"]], "K-fold": [[412, "k-fold"]], "K-means": [[408, "k-means"]], "K-means clustering on text features": [[352, "k-means-clustering-on-text-features"]], "K-nearest neighbors classifier": [[293, "k-nearest-neighbors-classifier"]], "KBinsDiscretizer": [[870, null]], "KDDCup99 - SA dataset": [[249, "kddcup99-sa-dataset"]], "KDTree": [[846, null]], "KDTree and BallTree Classes": [[1005, "kdtree-and-balltree-classes"]], "KFold": [[806, null]], "KMeans": [[447, null]], "KNN Based Imputation": [[319, "knn-based-imputation"]], "KNNImputer": [[629, null]], "KNeighborsClassifier": [[847, null]], "KNeighborsRegressor": [[848, null]], "KNeighborsTransformer": [[849, null]], "Kddcup 99 dataset": [[371, "kddcup-99-dataset"]], "Keeping the number of features constant": [[992, "keeping-the-number-of-features-constant"]], "Kernel": [[619, null]], "Kernel Approximation": [[183, "kernel-approximation"], [190, null], [994, null]], "Kernel Density Estimate of Species Distributions": [[303, null]], "Kernel Density Estimation": [[294, null], [414, "kernel-density-estimation"]], "Kernel PCA": [[125, null]], "Kernel Principal Component Analysis (kPCA)": [[413, "kernel-principal-component-analysis-kpca"]], "Kernel cookbook": [[179, "kernel-cookbook"]], "Kernel functions": [[1017, "kernel-functions"]], "Kernel methods: kernel ridge and Gaussian process": [[170, "kernel-methods-kernel-ridge-and-gaussian-process"]], "Kernel operators": [[418, "kernel-operators"]], "Kernel ridge": [[170, "kernel-ridge"]], "Kernel ridge regression": [[995, null]], "KernelCenterer": [[871, null]], "KernelDensity": [[850, null]], "KernelPCA": [[536, null]], "KernelRidge": [[644, null]], "Kernels": [[19, "module-sklearn.gaussian_process.kernels"]], "Kernels for Gaussian Processes": [[418, "kernels-for-gaussian-processes"]], "Keyword and positional arguments": [[322, "keyword-and-positional-arguments"]], "Known Major Bugs": [[1041, "known-major-bugs"], [1042, "known-major-bugs"]], "L1 Penalty and Sparsity in Logistic Regression": [[204, null]], "L1-based feature selection": [[417, "l1-based-feature-selection"]], "L1-based models for Sparse Signals": [[198, null]], "L1-penalty case": [[347, "l1-penalty-case"]], "L2-penalty case": [[347, "l2-penalty-case"]], "LARS Lasso": [[998, "lars-lasso"]], "LDA": [[996, "lda"]], "Label Propagation": [[1015, "label-propagation"]], "Label Propagation digits active learning": [[330, null]], "Label Propagation digits: Demonstrating performance": [[329, null]], "Label Propagation learning a complex structure": [[331, null]], "Label binarization": [[1013, "label-binarization"]], "Label encoding": [[1013, "label-encoding"]], "Label ranking average precision": [[1002, "label-ranking-average-precision"]], "LabelBinarizer": [[872, null], [1013, "labelbinarizer"]], "LabelEncoder": [[873, null]], "LabelPropagation": [[900, null]], "LabelSpreading": [[901, null]], "Lagged features for time series forecasting": [[52, null]], "Laplacian kernel": [[1000, "laplacian-kernel"]], "Lars": [[651, null]], "LarsCV": [[652, null]], "Lasso": [[198, "lasso"], [653, null], [998, "lasso"]], "Lasso model selection via information criteria": [[200, null]], "Lasso model selection: AIC-BIC / cross-validation": [[202, null]], "Lasso on dense and sparse data": [[199, null]], "Lasso via coordinate descent": [[202, "lasso-via-coordinate-descent"]], "Lasso via least angle regression": [[202, "lasso-via-least-angle-regression"]], "Lasso, Lasso-LARS, and Elastic Net paths": [[201, null]], "LassoCV": [[654, null]], "LassoLars": [[655, null]], "LassoLarsCV": [[656, null]], "LassoLarsIC": [[657, null]], "Latent Dirichlet Allocation (LDA)": [[413, "latent-dirichlet-allocation-lda"]], "LatentDirichletAllocation": [[537, null]], "Learn the PCA basis": [[44, "learn-the-pca-basis"]], "Learn the dictionary from reference patches": [[123, "learn-the-dictionary-from-reference-patches"]], "Learn the dictionary of images": [[83, "learn-the-dictionary-of-images"]], "Learning Curve": [[272, "learning-curve"]], "Learning Git": [[376, null]], "Learning a graph structure": [[51, "learning-a-graph-structure"]], "Learning an embedding": [[300, "learning-an-embedding"]], "Learning curve": [[997, "learning-curve"]], "LearningCurveDisplay": [[807, null]], "Least Angle Regression": [[998, "least-angle-regression"]], "Leave One Group Out": [[412, "leave-one-group-out"]], "Leave One Out (LOO)": [[412, "leave-one-out-loo"]], "Leave P Groups Out": [[412, "leave-p-groups-out"]], "Leave P Out (LPO)": [[412, "leave-p-out-lpo"]], "LeaveOneGroupOut": [[808, null]], "LeaveOneOut": [[809, null]], "LeavePGroupsOut": [[810, null]], "LeavePOut": [[811, null]], "Ledoit-Wolf shrinkage": [[410, "ledoit-wolf-shrinkage"]], "Ledoit-Wolf vs OAS estimation": [[110, null]], "LedoitWolf": [[473, null]], "Lessons learned": [[185, "lessons-learned"], [186, "lessons-learned"]], "Limitations of a simple linear model": [[170, "limitations-of-a-simple-linear-model"]], "Limitations of the Bag of Words representation": [[416, "limitations-of-the-bag-of-words-representation"]], "Limiting Working Memory": [[363, "limiting-working-memory"]], "Limiting the number of splits": [[143, "limiting-the-number-of-splits"]], "Linear Models": [[998, null]], "Linear algebra libraries": [[363, "linear-algebra-libraries"]], "Linear and Quadratic Discriminant Analysis": [[996, null]], "Linear and Quadratic Discriminant Analysis with covariance ellipsoid": [[70, null]], "Linear classifiers": [[25, "linear-classifiers"]], "Linear kernel": [[344, "linear-kernel"], [1000, "linear-kernel"]], "Linear models with regularization": [[186, "linear-models-with-regularization"]], "Linear models with sparse coefficients": [[186, "linear-models-with-sparse-coefficients"]], "Linear regression model": [[209, "linear-regression-model"]], "Linear support vector classifier": [[62, "linear-support-vector-classifier"]], "LinearDiscriminantAnalysis": [[550, null]], "LinearRegression": [[658, null]], "LinearSVC": [[905, null]], "LinearSVR": [[906, null]], "Link to R\u00b2 score, the coefficient of determination": [[1002, null]], "Links": [[363, "links"]], "Linnerrud dataset": [[373, "linnerrud-dataset"]], "Linux": [[374, "linux"]], "Linux compilers from conda-forge": [[374, "linux-compilers-from-conda-forge"]], "Linux compilers from the system": [[374, "linux-compilers-from-the-system"]], "Load Ames Housing dataset": [[143, "load-ames-housing-dataset"]], "Load Data": [[353, "load-data"]], "Load Data and Train a SVC": [[252, "load-data-and-train-a-svc"]], "Load Data and train model": [[240, "load-data-and-train-model"]], "Load and prepare data": [[279, "load-and-prepare-data"], [280, "load-and-prepare-data"], [315, "load-and-prepare-data"]], "Load and prepare data set": [[340, "load-and-prepare-data-set"]], "Load data": [[206, "load-data"]], "Load dataset": [[140, "load-dataset"]], "Load dataset and apply GridSearchCV": [[159, "load-dataset-and-apply-gridsearchcv"]], "Load digits dataset": [[233, "load-digits-dataset"]], "Load some data to play with": [[343, "load-some-data-to-play-with"]], "Load the data": [[46, "load-the-data"], [83, "load-the-data"], [147, "load-the-data"], [293, "load-the-data"]], "Load the dataset": [[91, "load-the-dataset"]], "Load the dataset via OpenML": [[44, "load-the-dataset-via-openml"]], "Loaders": [[10, "loaders"]], "Loading Data from OpenML": [[316, "loading-data-from-openml"]], "Loading a dataset": [[289, "loading-a-dataset"]], "Loading and vectorizing the 20 newsgroups text dataset": [[351, "loading-and-vectorizing-the-20-newsgroups-text-dataset"]], "Loading datasets, basic feature extraction and target definitions": [[230, "loading-datasets-basic-feature-extraction-and-target-definitions"]], "Loading features from dicts": [[416, "loading-features-from-dicts"]], "Loading from external datasets": [[370, "loading-from-external-datasets"]], "Loading other datasets": [[370, null]], "Loading text data": [[352, "loading-text-data"]], "Loading the Iris dataset": [[126, "loading-the-iris-dataset"]], "Loading the data": [[168, "loading-the-data"]], "Loading the redirect files": [[55, "loading-the-redirect-files"]], "Local Outlier Factor": [[1008, "local-outlier-factor"]], "Local Tangent Space Alignment": [[999, "local-tangent-space-alignment"]], "LocalOutlierFactor": [[851, null]], "Locally Linear Embedding": [[999, "locally-linear-embedding"]], "Locally Linear Embeddings": [[232, "locally-linear-embeddings"]], "LocallyLinearEmbedding": [[690, null]], "Lock files": [[376, "lock-files"]], "Log loss": [[1002, "log-loss"]], "Logistic Regression 3-class Classifier": [[197, null]], "Logistic function": [[203, null]], "Logistic regression": [[998, "logistic-regression"]], "LogisticRegression": [[659, null]], "LogisticRegression wrapped by OneVsRestClassifier": [[289, "logisticregression-wrapped-by-onevsrestclassifier"]], "LogisticRegressionCV": [[660, null]], "Look at the results": [[245, "look-at-the-results"], [346, "look-at-the-results"]], "Loss Functions": [[415, "loss-functions"]], "Lovely": [[1026, "id20"]], "Low-level parallelism": [[408, "low-level-parallelism"], [415, "low-level-parallelism"]], "Lower-level parallelism with OpenMP": [[364, "lower-level-parallelism-with-openmp"]], "MARS": [[1026, "id28"]], "MDS": [[691, null]], "MLPClassifier": [[862, null]], "MLPRegressor": [[863, null]], "MNIST classification using multinomial logistic + L1": [[228, null]], "MacPorts for Mac OSX": [[394, "macports-for-mac-osx"]], "Machinalis": [[1026, "id22"]], "Mailing Lists": [[1025, "mailing-lists"]], "Main": [[47, "main"]], "Main takeaways": [[212, "main-takeaways"]], "Maintainer Information": [[380, null]], "Maintainers Team": [[0, "maintainers-team"]], "Maintaining backwards compatibility": [[376, "maintaining-backwards-compatibility"]], "Majority Class Labels (Majority/Hard Voting)": [[415, "majority-class-labels-majority-hard-voting"]], "Make pipeline to preprocess the data": [[154, "make-pipeline-to-preprocess-the-data"]], "Making predictions": [[157, "making-predictions"]], "Manifold Learning methods on a severed sphere": [[234, null]], "Manifold learning": [[183, "manifold-learning"], [231, null], [999, null]], "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026": [[233, null]], "Manually setting the decision threshold": [[407, "manually-setting-the-decision-threshold"]], "Manually setting the decision threshold instead of tuning it": [[264, "manually-setting-the-decision-threshold-instead-of-tuning-it"]], "Map data to a normal distribution": [[314, null]], "Mapping to a Gaussian distribution": [[1012, "mapping-to-a-gaussian-distribution"]], "Mapping to a Uniform distribution": [[1012, "mapping-to-a-uniform-distribution"]], "Marking imputed values": [[992, "marking-imputed-values"]], "Matern": [[620, null]], "Mathematical Definition": [[1009, "mathematical-definition"]], "Mathematical Details": [[994, "mathematical-details"]], "Mathematical formulation": [[405, "mathematical-formulation"], [405, "id3"], [415, "mathematical-formulation"], [1005, "mathematical-formulation"], [1016, "mathematical-formulation"], [1017, "mathematical-formulation"], [1018, "mathematical-formulation"]], "Mathematical formulation of LDA dimensionality reduction": [[996, "mathematical-formulation-of-lda-dimensionality-reduction"]], "Mathematical formulation of the LDA and QDA classifiers": [[996, "mathematical-formulation-of-the-lda-and-qda-classifiers"]], "Matthews correlation coefficient": [[1002, "matthews-correlation-coefficient"]], "Mat\u00e9rn kernel": [[179, "matern-kernel"], [418, "matern-kernel"]], "Max error": [[1002, "max-error"]], "MaxAbsScaler": [[310, "maxabsscaler"], [874, null]], "Mean Poisson, Gamma, and Tweedie deviances": [[1002, "mean-poisson-gamma-and-tweedie-deviances"]], "Mean Shift": [[408, "mean-shift"]], "Mean absolute error": [[1002, "mean-absolute-error"]], "Mean absolute percentage error": [[1002, "mean-absolute-percentage-error"]], "Mean squared error": [[1002, "mean-squared-error"]], "Mean squared logarithmic error": [[1002, "mean-squared-logarithmic-error"]], "MeanShift": [[448, null]], "Measure and plot the results": [[154, "measure-and-plot-the-results"]], "Median absolute error": [[1002, "median-absolute-error"]], "Memory footprint": [[86, "memory-footprint"]], "Memory usage profiling": [[382, "memory-usage-profiling"]], "Merging Pull Requests": [[380, "merging-pull-requests"]], "Meta-estimators": [[41, "module-sklearn.utils.metaestimators"], [404, "meta-estimators"]], "MetaEstimatorMixin": [[428, null]], "Metadata Routing": [[246, null], [325, "metadata-routing"], [390, "metadata-routing"], [399, null], [1050, "metadata-routing"], [1050, "id2"], [1051, "metadata-routing"]], "Metadata Routing Support": [[326, "metadata-routing-support"]], "Metadata Routing Support Status": [[399, "metadata-routing-support-status"]], "Metadata routing": [[41, "module-sklearn.utils.metadata_routing"]], "MetadataRequest": [[957, null]], "MetadataRouter": [[958, null]], "MethodMapping": [[959, null]], "Methods": [[390, "methods"]], "Metrics": [[404, "metrics"]], "Metrics and scoring: quantifying the quality of predictions": [[1002, null]], "MinCovDet": [[474, null]], "MinMaxScaler": [[310, "minmaxscaler"], [875, null]], "Mini Batch K-Means": [[408, "mini-batch-k-means"]], "Mini-batch Non Negative Matrix Factorization": [[413, "mini-batch-non-negative-matrix-factorization"]], "Mini-batch dictionary learning": [[413, "mini-batch-dictionary-learning"]], "MiniBatchDictionaryLearning": [[538, null]], "MiniBatchKMeans": [[449, null]], "MiniBatchNMF": [[539, null]], "MiniBatchNMF: an online version of NMF": [[323, "minibatchnmf-an-online-version-of-nmf"]], "MiniBatchSparsePCA": [[540, null]], "Minimal Cost-Complexity Pruning": [[1018, "minimal-cost-complexity-pruning"]], "Minimal dependencies": [[1046, "minimal-dependencies"], [1047, "minimal-dependencies"]], "Minimum Covariance Determinant": [[410, "minimum-covariance-determinant"]], "Minimum Covariance Determinant Estimator": [[112, "minimum-covariance-determinant-estimator"]], "Misc": [[1033, "misc"]], "Miscellaneous": [[25, "miscellaneous"], [183, "miscellaneous"], [238, null], [1041, "miscellaneous"], [1041, "id40"], [1042, "miscellaneous"], [1043, "miscellaneous"], [1044, "miscellaneous"], [1044, "id13"], [1045, "miscellaneous"], [1046, "miscellaneous"], [1049, "miscellaneous"]], "Misleading values on strongly correlated features": [[1010, "misleading-values-on-strongly-correlated-features"]], "Missing Value Imputation": [[180, null], [183, "missing-value-imputation"]], "Missing Values Support": [[1018, "missing-values-support"]], "Missing information": [[182, "missing-information"]], "Missing value support for Random Forest": [[326, "missing-value-support-for-random-forest"]], "Missing values support": [[415, "missing-values-support"]], "Missing values support in decision trees": [[325, "missing-values-support-in-decision-trees"]], "MissingIndicator": [[630, null]], "Model Complexity Influence": [[46, null]], "Model Compression": [[363, "model-compression"]], "Model Reshaping": [[363, "model-reshaping"]], "Model Selection": [[183, "model-selection"], [262, null]], "Model Selection Enhancements and API Changes": [[1039, "model-selection-enhancements-and-api-changes"]], "Model Training and Comparison": [[144, "model-training-and-comparison"]], "Model comparison": [[143, "model-comparison"]], "Model definition": [[283, "model-definition"]], "Model evaluation": [[209, "model-evaluation"], [389, "model-evaluation"]], "Model fitting and extrapolation": [[175, "model-fitting-and-extrapolation"]], "Model persistence": [[402, null]], "Model selection and evaluation": [[403, null]], "Model selection interface": [[27, "model-selection-interface"]], "Model selection with Probabilistic PCA and Factor Analysis (FA)": [[127, null]], "Model selection: development and evaluation": [[991, "model-selection-development-and-evaluation"]], "Model specific cross-validation": [[991, "model-specific-cross-validation"]], "Model training and selection": [[167, "model-training-and-selection"], [260, "model-training-and-selection"]], "Model validation": [[29, "model-validation"]], "Model with metadata stripping": [[351, "model-with-metadata-stripping"]], "Model without metadata stripping": [[351, "model-without-metadata-stripping"]], "Model-based and sequential feature selection": [[168, null]], "Modeling non-linear feature interactions with kernels": [[43, "modeling-non-linear-feature-interactions-with-kernels"]], "Modeling pairwise interactions with splines and polynomial features": [[43, "modeling-pairwise-interactions-with-splines-and-polynomial-features"]], "Modeling predictive uncertainty via quantile regression": [[52, "modeling-predictive-uncertainty-via-quantile-regression"]], "Models definition": [[308, "models-definition"]], "Models robustness to recover the ground truth weights": [[193, "models-robustness-to-recover-the-ground-truth-weights"]], "Modified Locally Linear Embedding": [[999, "modified-locally-linear-embedding"]], "Monitoring performance": [[376, "monitoring-performance"]], "Monotonic Constraints": [[151, null], [415, "monotonic-constraints"]], "Monotonic constraints": [[149, "monotonic-constraints"]], "More control with warm_start": [[1006, "more-control-with-warm-start"]], "Multi-Scale Clustering": [[88, "multi-scale-clustering"]], "Multi-class AdaBoosted Decision Trees": [[134, null]], "Multi-class case": [[1002, "multi-class-case"]], "Multi-class classification": [[1017, "multi-class-classification"]], "Multi-core parallelism using joblib.Parallel": [[382, "multi-core-parallelism-using-joblib-parallel"]], "Multi-dimensional Scaling (MDS)": [[999, "multi-dimensional-scaling-mds"]], "Multi-dimensional scaling": [[235, null]], "Multi-label case": [[1002, "multi-label-case"]], "Multi-label confusion matrix": [[1002, "multi-label-confusion-matrix"]], "Multi-layer Perceptron": [[1006, "multi-layer-perceptron"]], "Multi-layer perceptron": [[187, "multi-layer-perceptron"]], "Multi-output problems": [[1018, "multi-output-problems"]], "Multi-task Elastic-Net": [[998, "multi-task-elastic-net"]], "Multi-task Lasso": [[998, "multi-task-lasso"]], "Multi-task linear regressors with variable selection": [[25, "multi-task-linear-regressors-with-variable-selection"]], "MultiLabelBinarizer": [[876, null], [1013, "multilabelbinarizer"]], "MultiOutputClassifier": [[837, null], [1003, "multioutputclassifier"]], "MultiOutputRegressor": [[838, null], [1003, "multioutputregressor"]], "MultiTaskElasticNet": [[661, null]], "MultiTaskElasticNetCV": [[662, null]], "MultiTaskLasso": [[663, null]], "MultiTaskLassoCV": [[664, null]], "Multiclass Receiver Operating Characteristic (ROC)": [[279, null]], "Multiclass and multilabel classification": [[1002, "multiclass-and-multilabel-classification"]], "Multiclass and multilabel utility function": [[385, "multiclass-and-multilabel-utility-function"]], "Multiclass and multioutput algorithms": [[1003, null]], "Multiclass classification": [[1003, "multiclass-classification"]], "Multiclass methods": [[183, "multiclass-methods"], [286, null]], "Multiclass sparse logistic regression on 20newgroups": [[227, null]], "Multiclass support": [[406, "multiclass-support"]], "Multiclass-multioutput classification": [[1003, "multiclass-multioutput-classification"]], "Multidimensional scaling": [[232, "multidimensional-scaling"]], "Multilabel": [[372, "multilabel"]], "Multilabel classification": [[247, null], [1003, "multilabel-classification"]], "Multilabel classification using a classifier chain": [[289, null]], "Multilabel ranking metrics": [[27, "multilabel-ranking-metrics"], [1002, "multilabel-ranking-metrics"]], "Multinomial Case": [[998, "multinomial-case"]], "Multinomial Naive Bayes": [[1004, "multinomial-naive-bayes"]], "MultinomialNB": [[844, null]], "Multioutput methods": [[183, "multioutput-methods"], [288, null]], "Multioutput regression": [[1003, "multioutput-regression"]], "Multiple modules": [[1041, "multiple-modules"], [1042, "multiple-modules"]], "Multiple vs. Single Imputation": [[992, "multiple-vs-single-imputation"]], "Multivariate feature imputation": [[992, "multivariate-feature-imputation"]], "Mutual Information based scores": [[408, "mutual-information-based-scores"]], "Mutual Reachability Graph": [[408, "mutual-reachability-graph"]], "NMF": [[541, null]], "NMF with a beta-divergence": [[413, "nmf-with-a-beta-divergence"]], "NMF with the Frobenius norm": [[413, "nmf-with-the-frobenius-norm"]], "Naive Bayes": [[1004, null]], "Naive evaluation of the next hour bike demand regression": [[52, "naive-evaluation-of-the-next-hour-bike-demand-regression"]], "Naive linear regression": [[43, "naive-linear-regression"]], "Native Categorical Feature Support": [[316, "native-categorical-feature-support"]], "Native support for categorical features in HistGradientBoosting estimators": [[321, "native-support-for-categorical-features-in-histgradientboosting-estimators"]], "Native support for missing values for gradient boosting": [[319, "native-support-for-missing-values-for-gradient-boosting"]], "Nearest Centroid Classification": [[301, null]], "Nearest Centroid Classifier": [[1005, "nearest-centroid-classifier"]], "Nearest Neighbor Algorithms": [[1005, "nearest-neighbor-algorithms"]], "Nearest Neighbors": [[183, "nearest-neighbors"], [291, null], [1005, null]], "Nearest Neighbors Classification": [[293, null], [1005, "nearest-neighbors-classification"]], "Nearest Neighbors Regression": [[1005, "nearest-neighbors-regression"]], "Nearest Neighbors Transformer": [[1005, "nearest-neighbors-transformer"]], "Nearest Neighbors regression": [[302, null]], "Nearest Shrunken Centroid": [[1005, "nearest-shrunken-centroid"]], "Nearest neighbors imputation": [[992, "nearest-neighbors-imputation"]], "NearestCentroid": [[852, null]], "NearestNeighbors": [[853, null]], "Neighborhood Components Analysis": [[1005, "neighborhood-components-analysis"]], "Neighborhood Components Analysis Illustration": [[300, null]], "NeighborhoodComponentsAnalysis": [[854, null]], "Nested versus non-nested cross-validation": [[275, null]], "NetBSD": [[394, "netbsd"]], "Neural Networks": [[183, "neural-networks"], [304, null]], "Neural network models (supervised)": [[1006, null]], "Neural network models (unsupervised)": [[1007, null]], "New Estimator Classes": [[1034, "new-estimator-classes"]], "New Poisson splitting criterion for DecisionTreeRegressor": [[321, "new-poisson-splitting-criterion-for-decisiontreeregressor"]], "New PolynomialCountSketch kernel approximation function": [[321, "new-polynomialcountsketch-kernel-approximation-function"]], "New SequentialFeatureSelector transformer": [[321, "new-sequentialfeatureselector-transformer"]], "New and enhanced displays": [[324, "new-and-enhanced-displays"]], "New classes": [[1033, "new-classes"]], "New display ValidationCurveDisplay": [[325, "new-display-validationcurvedisplay"]], "New documentation improvements": [[321, "new-documentation-improvements"], [322, "new-documentation-improvements"]], "New features": [[1036, "new-features"], [1037, "new-features"], [1038, "new-features"], [1039, "new-features"], [1040, "new-features"]], "New plotting API": [[319, "new-plotting-api"]], "New self-training meta-estimator": [[321, "new-self-training-meta-estimator"]], "New to Scientific Python?": [[1020, "new-to-scientific-python"]], "Next steps": [[389, "next-steps"]], "Non-Negative Least Squares": [[998, "non-negative-least-squares"]], "Non-linear transformation": [[1012, "non-linear-transformation"]], "Non-negative components - NMF": [[120, "non-negative-components-nmf"]], "Non-negative least squares": [[208, null]], "Non-negative matrix factorization (NMF or NNMF)": [[413, "non-negative-matrix-factorization-nmf-or-nnmf"]], "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification": [[69, null]], "Normalization": [[1012, "normalization"]], "Normalized Discounted Cumulative Gain": [[1002, "normalized-discounted-cumulative-gain"]], "Normalizer": [[310, "normalizer"], [877, null]], "NotFittedError": [[578, null]], "Note on MPS device support": [[404, "note-on-mps-device-support"]], "Note on device support for float64": [[404, "note-on-device-support-for-float64"]], "Notes": [[365, "notes"]], "Novelty Detection": [[1008, "novelty-detection"]], "Novelty and Outlier Detection": [[1008, null]], "Novelty detection with Local Outlier Factor": [[1008, "novelty-detection-with-local-outlier-factor"]], "Novelty detection with Local Outlier Factor (LOF)": [[296, null]], "NuSVC": [[907, null]], "NuSVR": [[908, null]], "NumPy": [[381, "numpy"]], "Number of candidates and amount of resource at each iteration": [[282, "number-of-candidates-and-amount-of-resource-at-each-iteration"]], "Numerical assertions in tests": [[378, "numerical-assertions-in-tests"]], "Nystroem": [[640, null]], "Nystroem Method for Kernel Approximation": [[994, "nystroem-method-for-kernel-approximation"]], "OAS": [[475, null]], "ONNX": [[402, "onnx"]], "OOB Errors for Random Forests": [[138, null]], "OPTICS": [[408, "optics"], [450, null]], "Obtaining predictions by cross-validation": [[412, "obtaining-predictions-by-cross-validation"]], "OkCupid": [[1026, "id19"]], "Older Versions": [[1033, null]], "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent": [[226, null]], "One-class SVM with non-linear kernel (RBF)": [[339, null]], "One-vs-One multiclass ROC": [[279, "one-vs-one-multiclass-roc"]], "One-vs-Rest multiclass ROC": [[279, "one-vs-rest-multiclass-roc"]], "OneClassSVM": [[909, null]], "OneHotEncoder": [[878, null]], "OneToOneFeatureMixin": [[429, null]], "OneVsOneClassifier": [[833, null], [1003, "onevsoneclassifier"]], "OneVsRestClassifier": [[834, null], [1003, "onevsrestclassifier"]], "Online One-Class SVM": [[322, "online-one-class-svm"], [1016, "online-one-class-svm"]], "Online learning of a dictionary of parts of faces": [[83, null]], "Optical recognition of handwritten digits dataset": [[373, "optical-recognition-of-handwritten-digits-dataset"]], "Optimal mathematical operations": [[41, "module-sklearn.utils.extmath"]], "Optimisation of kernel hyperparameters in GPR": [[176, "optimisation-of-kernel-hyperparameters-in-gpr"]], "Optional Arguments": [[378, "optional-arguments"]], "Options to tune the decision threshold": [[407, "options-to-tune-the-decision-threshold"]], "Oracle Approximating Shrinkage": [[410, "oracle-approximating-shrinkage"]], "OrdinalEncoder": [[879, null]], "Ordinary Least Squares": [[998, "ordinary-least-squares"]], "Ordinary Least Squares Complexity": [[998, "ordinary-least-squares-complexity"]], "Ordinary Least Squares Example": [[209, null]], "Ordinary Least Squares and Ridge Regression Variance": [[210, null]], "Original data": [[276, "original-data"], [310, "original-data"]], "Original image": [[86, "original-image"]], "Original points": [[300, "original-points"]], "Orthogonal Matching Pursuit": [[211, null]], "Orthogonal Matching Pursuit (OMP)": [[998, "orthogonal-matching-pursuit-omp"]], "OrthogonalMatchingPursuit": [[665, null]], "OrthogonalMatchingPursuitCV": [[666, null]], "Other changes": [[1033, "other-changes"]], "Other estimators and tasks": [[1021, "other-estimators-and-tasks"]], "Otto Group": [[1026, "id26"]], "Our community, our values": [[376, null]], "Our vanilla classifier": [[284, "our-vanilla-classifier"]], "Out of Bag Estimates": [[991, "out-of-bag-estimates"]], "Out-of-core classification of text documents": [[47, null]], "Out-of-core naive Bayes model fitting": [[1004, "out-of-core-naive-bayes-model-fitting"]], "Outlier Detection": [[1008, "id1"]], "Outlier detection on a real data set": [[48, null]], "Outlier detection with Local Outlier Factor (LOF)": [[297, null]], "Outlier-robust regressors": [[25, "outlier-robust-regressors"]], "OutlierMixin": [[430, null]], "Outliers in the X direction": [[229, "outliers-in-the-x-direction"]], "Outliers only in the y direction": [[229, "outliers-only-in-the-y-direction"]], "Outline of the permutation importance algorithm": [[1010, "outline-of-the-permutation-importance-algorithm"]], "OutputCodeClassifier": [[835, null], [1003, "outputcodeclassifier"]], "Oversubscription: spawning too many threads": [[364, "oversubscription-spawning-too-many-threads"]], "Overview of clustering methods": [[408, "overview-of-clustering-methods"]], "Overview of multiclass training meta-estimators": [[287, null]], "Overview of outlier detection methods": [[1008, "overview-of-outlier-detection-methods"]], "PCA": [[542, null]], "PCA using randomized SVD": [[413, "pca-using-randomized-svd"]], "PCA: principal component analysis": [[1019, "pca-principal-component-analysis"]], "PHIMECA Engineering": [[1026, "id15"]], "PLS regression, with multivariate response, a.k.a. PLS2": [[115, "pls-regression-with-multivariate-response-a-k-a-pls2"]], "PLS regression, with univariate response, a.k.a. PLS1": [[115, "pls-regression-with-univariate-response-a-k-a-pls1"]], "PLSCanonical": [[411, "plscanonical"], [483, null]], "PLSRegression": [[411, "plsregression"], [484, null]], "PLSSVD": [[411, "plssvd"], [485, null]], "Packaging": [[1045, "packaging"]], "Pair Confusion Matrix": [[408, "pair-confusion-matrix"]], "Pairwise comparison of all models: Bayesian approach": [[270, "pairwise-comparison-of-all-models-bayesian-approach"]], "Pairwise comparison of all models: frequentist approach": [[270, "pairwise-comparison-of-all-models-frequentist-approach"]], "Pairwise distances with non-numeric arrays": [[327, "pairwise-distances-with-non-numeric-arrays"]], "Pairwise metrics": [[27, "module-sklearn.metrics.pairwise"]], "Pairwise metrics, Affinities and Kernels": [[1000, null]], "PairwiseKernel": [[621, null]], "Pandas": [[381, "pandas"]], "Pandas output with set_output API": [[324, "pandas-output-with-set-output-api"]], "Parallel": [[967, null]], "Parallel NumPy and SciPy routines from numerical libraries": [[364, "parallel-numpy-and-scipy-routines-from-numerical-libraries"]], "Parallel computing": [[41, "module-sklearn.utils.parallel"]], "Parallelism": [[364, "parallelism"], [991, "parallelism"]], "Parallelism, resource management, and configuration": [[364, null]], "Parallelization": [[415, "parallelization"]], "ParameterGrid": [[812, null]], "ParameterSampler": [[813, null]], "Parameters": [[390, "parameters"], [415, "parameters"]], "Parameters and init": [[378, "parameters-and-init"]], "Parameters of the RBF Kernel": [[1017, "parameters-of-the-rbf-kernel"]], "Partial Dependence and Individual Conditional Expectation Plots": [[187, null]], "Partial Dependence and Individual Conditional Expectation plots": [[1009, null]], "Partial dependence plots": [[1009, "partial-dependence-plots"]], "PartialDependenceDisplay": [[633, null]], "Partitioning the data": [[191, "partitioning-the-data"]], "Passive Aggressive Algorithms": [[998, "passive-aggressive-algorithms"]], "PassiveAggressiveClassifier": [[667, null]], "PassiveAggressiveRegressor": [[668, null]], "Past Sponsors": [[0, "past-sponsors"]], "Patch extraction": [[416, "patch-extraction"]], "PatchExtractor": [[584, null]], "PeerIndex": [[1026, "id17"]], "People": [[1033, "people"], [1033, "id2"], [1033, "id5"], [1033, "id8"], [1033, "id11"], [1033, "id13"], [1033, "id15"], [1033, "id17"], [1034, "people"], [1034, "id3"], [1035, "people"], [1036, "people"]], "Perceptron": [[669, null], [998, "perceptron"]], "Performance improvements": [[323, "performance-improvements"]], "Performance improvements in PCA": [[327, "performance-improvements-in-pca"]], "Performing dimensionality reduction using LSA": [[352, "performing-dimensionality-reduction-using-lsa"]], "Periodic Splines": [[213, "periodic-splines"]], "Periodic spline features": [[43, "periodic-spline-features"]], "Permutation Importance vs Random Forest Feature Importance (MDI)": [[188, null]], "Permutation Importance with Multicollinear or Correlated Features": [[189, null]], "Permutation feature importance": [[1010, null]], "Permutation test score": [[276, "permutation-test-score"], [412, "permutation-test-score"]], "Permutation-based feature importance": [[319, "permutation-based-feature-importance"]], "Pinball loss": [[1002, "pinball-loss"]], "Pipeline": [[865, null]], "Pipeline ANOVA SVM": [[165, null]], "Pipeline compatibility": [[378, "pipeline-compatibility"]], "Pipeline with hyperparameter tuning": [[271, "pipeline-with-hyperparameter-tuning"]], "Pipeline: chaining estimators": [[409, "pipeline-chaining-estimators"]], "Pipelines and composite estimators": [[101, null], [183, "pipelines-and-composite-estimators"], [409, null]], "Pipelines: chaining pre-processors and estimators": [[389, "pipelines-chaining-pre-processors-and-estimators"]], "Pipelining": [[1019, null]], "Pipelining: chaining a PCA and a logistic regression": [[105, null]], "Platform-specific instructions": [[374, "platform-specific-instructions"]], "Plot Hierarchical Clustering Dendrogram": [[76, null]], "Plot Precision-Recall curve for each class and iso-f1 curves": [[277, "plot-precision-recall-curve-for-each-class-and-iso-f1-curves"]], "Plot ROC and DET curves": [[267, "plot-roc-and-det-curves"]], "Plot Ridge coefficients as a function of the regularization": [[217, null]], "Plot a PCA representation": [[126, "plot-a-pca-representation"]], "Plot accuracy, training and test time of each classifier": [[351, "plot-accuracy-training-and-test-time-of-each-classifier"]], "Plot all OvO ROC curves together": [[279, "plot-all-ovo-roc-curves-together"]], "Plot all OvR ROC curves together": [[279, "plot-all-ovr-roc-curves-together"]], "Plot and analysis of the results": [[198, "plot-and-analysis-of-the-results"]], "Plot and interpret results": [[249, "plot-and-interpret-results"]], "Plot class probabilities calculated by the VotingClassifier": [[156, null]], "Plot classification boundaries with different SVM Kernels": [[344, null]], "Plot classification probability": [[66, null]], "Plot data and the predicted probabilities": [[61, "plot-data-and-the-predicted-probabilities"]], "Plot different SVM classifiers in the iris dataset": [[337, null]], "Plot discrete decision boundary": [[150, "plot-discrete-decision-boundary"]], "Plot error lines showing +/- std. errors of the scores": [[159, "plot-error-lines-showing-std-errors-of-the-scores"]], "Plot feature importance": [[147, "plot-feature-importance"]], "Plot individual and voting regression predictions": [[157, null]], "Plot multi-class SGD on the iris dataset": [[221, null]], "Plot multinomial and One-vs-Rest Logistic Regression": [[205, null]], "Plot number of features VS. cross-validation scores": [[167, "plot-number-of-features-vs-cross-validation-scores"]], "Plot of pairs of features of the Iris dataset": [[126, "plot-of-pairs-of-features-of-the-iris-dataset"]], "Plot path length decision boundary": [[150, "plot-path-length-decision-boundary"]], "Plot randomly generated multilabel dataset": [[118, null]], "Plot regularization path": [[206, "plot-regularization-path"]], "Plot result": [[73, "plot-result"], [96, "plot-result"], [100, "plot-result"], [100, "id2"]], "Plot results": [[47, "plot-results"], [82, "plot-results"], [109, "plot-results"], [121, "plot-results"], [122, "plot-results"], [140, "plot-results"], [289, "plot-results"], [297, "plot-results"]], "Plot support and time series": [[207, "plot-support-and-time-series"]], "Plot the BIC scores": [[260, "plot-the-bic-scores"]], "Plot the Precision-Recall curve": [[277, "plot-the-precision-recall-curve"]], "Plot the best model": [[260, "plot-the-best-model"]], "Plot the cross-validation score as a function of percentile of features": [[343, "plot-the-cross-validation-score-as-a-function-of-percentile-of-features"]], "Plot the decision boundaries of a VotingClassifier": [[155, null]], "Plot the decision surface of decision trees trained on the iris dataset": [[356, null]], "Plot the decision surfaces of ensembles of trees on the iris dataset": [[142, null]], "Plot the marginal log-likelihood": [[193, "plot-the-marginal-log-likelihood"]], "Plot the micro-averaged Precision-Recall curve": [[277, "plot-the-micro-averaged-precision-recall-curve"]], "Plot the most uncertain predictions": [[329, "plot-the-most-uncertain-predictions"]], "Plot the results": [[83, "plot-the-results"], [113, "plot-the-results"], [157, "plot-the-results"], [182, "plot-the-results"], [357, "plot-the-results"], [357, "id3"]], "Plot the results on an image": [[81, "plot-the-results-on-an-image"]], "Plot the support vectors in LinearSVC": [[338, null]], "Plot the true and estimated coefficients": [[193, "plot-the-true-and-estimated-coefficients"]], "Plot the true and predicted curves with log marginal likelihood (L)": [[194, "plot-the-true-and-predicted-curves-with-log-marginal-likelihood-l"]], "Plot training deviance": [[147, "plot-training-deviance"]], "Plotting": [[21, "plotting"], [27, "plotting"], [40, "plotting"], [308, "plotting"]], "Plotting API Overview": [[383, "plotting-api-overview"]], "Plotting Cross-Validated Predictions": [[266, null]], "Plotting Functions": [[70, "plotting-functions"]], "Plotting Learning Curves and Checking Models\u2019 Scalability": [[272, null]], "Plotting four circles": [[99, "plotting-four-circles"]], "Plotting partial dependence for one feature": [[250, "plotting-partial-dependence-for-one-feature"]], "Plotting partial dependence for two features": [[250, "plotting-partial-dependence-for-two-features"]], "Plotting partial dependence of the two models together": [[250, "plotting-partial-dependence-of-the-two-models-together"]], "Plotting polynomial regressions with std errors of the scores": [[193, "plotting-polynomial-regressions-with-std-errors-of-the-scores"]], "Plotting results": [[58, "plotting-results"]], "Plotting the ROC Curve": [[252, "plotting-the-roc-curve"]], "Plotting the Results": [[316, "plotting-the-results"]], "Plotting the result": [[274, "plotting-the-result"]], "Plotting the results": [[97, "plotting-the-results"], [135, "plotting-the-results"], [209, "plotting-the-results"]], "Plotting trained Coefficients and Mean Squared Errors": [[216, "plotting-trained-coefficients-and-mean-squared-errors"]], "Plotting two circles": [[99, "plotting-two-circles"]], "Plotting with Multiple Axes": [[383, "plotting-with-multiple-axes"]], "Poisson regression and non-normal loss": [[212, null]], "PoissonRegressor": [[670, null]], "Polars output in set_output": [[326, "polars-output-in-set-output"]], "Polynomial Kernel Approximation via Tensor Sketch": [[994, "polynomial-kernel-approximation-via-tensor-sketch"]], "Polynomial and Spline interpolation": [[213, null]], "Polynomial features": [[1012, "polynomial-features"]], "Polynomial kernel": [[344, "polynomial-kernel"], [1000, "polynomial-kernel"]], "Polynomial regression: extending linear models with basis functions": [[998, "polynomial-regression-extending-linear-models-with-basis-functions"]], "PolynomialCountSketch": [[641, null]], "PolynomialFeatures": [[880, null]], "Possible solutions": [[90, "possible-solutions"]], "Post pruning decision trees with cost complexity pruning": [[355, null]], "Post-fit model tuning": [[29, "post-fit-model-tuning"]], "Post-hoc tuning the cut-off point of decision function": [[284, null]], "Post-tuning the decision threshold": [[407, "post-tuning-the-decision-threshold"]], "Post-tuning the decision threshold for cost-sensitive learning": [[264, null]], "PowerTransformer": [[310, "powertransformer"], [881, null]], "Pre-test vs. post-test analysis": [[273, "pre-test-vs-post-test-analysis"]], "Precision, recall and F-measures": [[1002, "precision-recall-and-f-measures"]], "Precision-Recall": [[277, null]], "PrecisionRecallDisplay": [[701, null]], "Precomputed sparse nearest neighbors graph": [[319, "precomputed-sparse-nearest-neighbors-graph"]], "Predefined fold-splits / Validation-sets": [[412, "predefined-fold-splits-validation-sets"]], "PredefinedSplit": [[814, null]], "Predict": [[357, "predict"], [357, "id2"]], "Prediction Intervals for Gradient Boosting Regression": [[146, null]], "Prediction Latency": [[49, null], [363, "prediction-latency"]], "Prediction Throughput": [[363, "prediction-throughput"]], "PredictionErrorDisplay": [[702, null]], "Preparing the data": [[135, "preparing-the-data"], [149, "preparing-the-data"], [191, "preparing-the-data"]], "Preprocessing": [[183, "preprocessing"], [309, null]], "Preprocessing data": [[1012, null]], "Preprocessing numerical variables": [[186, "preprocessing-numerical-variables"]], "Preprocessor for machine-learning models": [[187, "preprocessor-for-machine-learning-models"]], "Preprocessor for the gradient boosting model": [[187, "preprocessor-for-the-gradient-boosting-model"]], "Preprocessor for the neural network model": [[187, "preprocessor-for-the-neural-network-model"]], "Principal Component Analysis (PCA) on Iris Dataset": [[126, null]], "Principal Component Regression vs Partial Least Squares Regression": [[116, null]], "Principal component analysis (PCA)": [[413, "principal-component-analysis-pca"]], "Private Loss Function Module": [[1050, "private-loss-function-module"]], "Probabilistic predictions with GPC": [[418, "probabilistic-predictions-with-gpc"]], "Probabilistic predictions with Gaussian process classification (GPC)": [[171, null]], "Probability Calibration curves": [[62, null]], "Probability Calibration for 3-class classification": [[63, null]], "Probability calibration": [[406, null]], "Probability calibration of classifiers": [[61, null]], "Processing the dataset": [[186, "processing-the-dataset"]], "Product": [[622, null]], "Productivity and sanity-preserving tips": [[384, "productivity-and-sanity-preserving-tips"]], "Profiling Python code": [[382, "profiling-python-code"]], "Profiling compiled extensions": [[382, "profiling-compiled-extensions"]], "Project template:": [[378, null]], "Projecting data: PCA vs. KernelPCA": [[125, "projecting-data-pca-vs-kernelpca"]], "Projecting into the original feature space": [[125, "projecting-into-the-original-feature-space"]], "Projection on one component and predictive power": [[116, "projection-on-one-component-and-predictive-power"]], "Proper next hour forecasting evaluation": [[52, "proper-next-hour-forecasting-evaluation"]], "Provide a failing code example with minimal comments": [[381, "provide-a-failing-code-example-with-minimal-comments"]], "Pull request checklist": [[376, "pull-request-checklist"]], "Pure Premium Modeling via a Product Model vs single TweedieRegressor": [[230, "pure-premium-modeling-via-a-product-model-vs-single-tweedieregressor"]], "Purpose of this document": [[1022, "purpose-of-this-document"]], "Purpose of this example": [[216, "purpose-of-this-example"]], "PyTorch Support": [[404, "pytorch-support"]], "Python API": [[364, "python-api"]], "Python package and dataset imports, load dataset": [[244, "python-package-and-dataset-imports-load-dataset"]], "Python, Cython or C/C++?": [[382, "python-cython-or-c-c"]], "QDA": [[996, "qda"]], "QuadraticDiscriminantAnalysis": [[551, null]], "Qualitative analysis of the impact of features on linear model predictions": [[43, "qualitative-analysis-of-the-impact-of-features-on-linear-model-predictions"]], "Quantifying the quality of clustering results": [[352, "quantifying-the-quality-of-clustering-results"]], "Quantile Regression": [[998, "quantile-regression"]], "Quantile Regressor": [[322, "quantile-regressor"]], "Quantile loss in HistGradientBoostingRegressor": [[323, "quantile-loss-in-histgradientboostingregressor"]], "Quantile regression": [[214, null]], "QuantileRegressor": [[671, null]], "QuantileTransformer": [[882, null]], "QuantileTransformer (Gaussian output)": [[310, "quantiletransformer-gaussian-output"]], "QuantileTransformer (uniform output)": [[310, "quantiletransformer-uniform-output"]], "RANSAC: RANdom SAmple Consensus": [[998, "ransac-random-sample-consensus"]], "RANSACRegressor": [[672, null]], "RBF": [[623, null]], "RBF SVM parameters": [[340, null]], "RBF kernel": [[344, "rbf-kernel"], [1000, "rbf-kernel"]], "RBFSampler": [[642, null]], "RCV1 dataset": [[371, "rcv1-dataset"]], "RFE": [[594, null]], "RFECV": [[595, null]], "ROC AUC now supports multiclass classification": [[319, "roc-auc-now-supports-multiclass-classification"]], "ROC Curve with Visualization API": [[252, null]], "ROC curve showing a specific class": [[279, "roc-curve-showing-a-specific-class"]], "ROC curve using micro-averaged OvR": [[279, "roc-curve-using-micro-averaged-ovr"]], "ROC curve using the OvO macro-average": [[279, "roc-curve-using-the-ovo-macro-average"]], "ROC curve using the OvR macro-average": [[279, "roc-curve-using-the-ovr-macro-average"]], "Radial Basis Function Kernel": [[994, "radial-basis-function-kernel"]], "Radial Basis Function kernel": [[179, "radial-basis-function-kernel"]], "Radial basis function (RBF) kernel": [[418, "radial-basis-function-rbf-kernel"]], "RadiusNeighborsClassifier": [[855, null]], "RadiusNeighborsRegressor": [[856, null]], "RadiusNeighborsTransformer": [[857, null]], "Rand index": [[408, "rand-index"]], "Random Forest Feature Importance on Breast Cancer Data": [[189, "random-forest-feature-importance-on-breast-cancer-data"]], "Random Forests": [[415, "random-forests"]], "Random Numbers": [[378, "random-numbers"]], "Random Projection": [[1014, null]], "Random data": [[276, "random-data"]], "Random forests and other randomized tree ensembles": [[415, "random-forests-and-other-randomized-tree-ensembles"]], "Random permutations cross-validation a.k.a. Shuffle & Split": [[412, "random-permutations-cross-validation-a-k-a-shuffle-split"]], "Random projections": [[1019, "random-projections"]], "Random sampling": [[41, "module-sklearn.utils.random"]], "RandomForestClassifier": [[565, null]], "RandomForestRegressor": [[566, null]], "RandomTreesEmbedding": [[567, null]], "Randomized Parameter Optimization": [[991, "randomized-parameter-optimization"]], "RandomizedSearchCV": [[815, null]], "Rangespan": [[1026, "id11"]], "Ranking loss": [[1002, "ranking-loss"]], "Rational Quadratic kernel": [[179, "rational-quadratic-kernel"]], "Rational quadratic kernel": [[418, "rational-quadratic-kernel"]], "RationalQuadratic": [[624, null]], "Reading the existing code base": [[376, "reading-the-existing-code-base"]], "Real world datasets": [[371, null]], "Real-world data set": [[107, "real-world-data-set"]], "Receiver Operating Characteristic (ROC) with cross validation": [[280, null]], "Receiver operating characteristic (ROC)": [[1002, "receiver-operating-characteristic-roc"]], "Recently Deprecated": [[1, null]], "Recognizing hand-written digits": [[68, null]], "Recommendation Engine packages": [[1021, "recommendation-engine-packages"]], "Reconstruct and denoise test images": [[44, "reconstruct-and-denoise-test-images"]], "Recursive feature elimination": [[166, null], [417, "recursive-feature-elimination"]], "Recursive feature elimination with cross-validation": [[167, null]], "Reference Steps": [[380, "reference-steps"]], "References": [[50, "references"], [62, "references"], [64, "references"], [112, "references"], [137, "references"], [191, "references"], [198, "references"], [287, "references"], [303, "references"], [418, "references"], [992, "references"]], "Region of Practical Equivalence": [[270, "region-of-practical-equivalence"]], "Regression": [[178, "regression"], [998, "regression"], [1006, "regression"], [1016, "regression"], [1017, "regression"], [1018, "regression"]], "Regression criteria": [[1018, "regression-criteria"]], "Regression metrics": [[27, "regression-metrics"], [1002, "regression-metrics"]], "RegressorChain": [[839, null], [1003, "regressorchain"]], "RegressorMixin": [[431, null]], "RegressorTags": [[923, null]], "Regressors with variable selection": [[25, "regressors-with-variable-selection"]], "Regularization": [[1006, "regularization"]], "Regularization path of L1- Logistic Regression": [[206, null]], "Related Projects": [[1021, null]], "Related changes": [[1040, "related-changes"]], "Relation to impurity-based importance in trees": [[1010, "relation-to-impurity-based-importance-in-trees"]], "Release Highlights": [[183, "release-highlights"], [318, null]], "Release Highlights for scikit-learn 0.22": [[319, null]], "Release Highlights for scikit-learn 0.23": [[320, null]], "Release Highlights for scikit-learn 0.24": [[321, null]], "Release Highlights for scikit-learn 1.0": [[322, null]], "Release Highlights for scikit-learn 1.1": [[323, null]], "Release Highlights for scikit-learn 1.2": [[324, null]], "Release Highlights for scikit-learn 1.3": [[325, null]], "Release Highlights for scikit-learn 1.4": [[326, null]], "Release Highlights for scikit-learn 1.5": [[327, null]], "Release History": [[1031, null]], "Releasing": [[380, "releasing"]], "Remarks": [[243, "remarks"]], "Removed modules": [[1033, "removed-modules"]], "Removing features with low variance": [[417, "removing-features-with-low-variance"]], "Repeated K-Fold": [[412, "repeated-k-fold"]], "RepeatedKFold": [[816, null]], "RepeatedStratifiedKFold": [[817, null]], "Replace missing values by 0": [[182, "replace-missing-values-by-0"]], "Replicating the training environment in production": [[402, "replicating-the-training-environment-in-production"]], "Restricted Boltzmann Machine features for digit classification": [[308, null]], "Restricted Boltzmann machines": [[1007, "restricted-boltzmann-machines"]], "Results interpretation": [[289, "results-interpretation"]], "Retrieve dataframes from OpenML": [[319, "retrieve-dataframes-from-openml"]], "Retrieve the data from Internet": [[51, "retrieve-the-data-from-internet"]], "Reuters Dataset related routines": [[47, "reuters-dataset-related-routines"]], "Rich HTML representation": [[241, "rich-html-representation"]], "Rich visual representation of estimators": [[320, "rich-visual-representation-of-estimators"]], "Ridge": [[673, null]], "Ridge Complexity": [[998, "ridge-complexity"]], "Ridge coefficients as a function of the L2 Regularization": [[216, null]], "Ridge regression and classification": [[998, "ridge-regression-and-classification"]], "RidgeCV": [[674, null]], "RidgeClassifier": [[675, null]], "RidgeClassifierCV": [[676, null]], "Roadmap": [[1022, null]], "Robust Covariance Estimation": [[410, "robust-covariance-estimation"]], "Robust covariance estimation and Mahalanobis distances relevance": [[111, null]], "Robust linear estimator fitting": [[218, null]], "Robust linear model estimation using RANSAC": [[215, null]], "Robust vs Empirical covariance estimate": [[112, null]], "RobustScaler": [[310, "robustscaler"], [883, null]], "Robustness of cross-validation results": [[359, "robustness-of-cross-validation-results"]], "Robustness regression: outliers and modeling errors": [[998, "robustness-regression-outliers-and-modeling-errors"]], "Robustness to failure": [[991, "robustness-to-failure"]], "RocCurveDisplay": [[703, null]], "Roles And Responsibilities": [[391, "roles-and-responsibilities"]], "Rolling your own estimator": [[378, "rolling-your-own-estimator"]], "Routing Meta-Estimator": [[246, "routing-meta-estimator"]], "Run the benchmark": [[91, "run-the-benchmark"]], "Run the code and plot the results": [[46, "run-the-code-and-plot-the-results"]], "Running GridSearchCV using multiple evaluation metrics": [[274, "running-gridsearchcv-using-multiple-evaluation-metrics"]], "Runtime dependencies": [[374, "runtime-dependencies"]], "R\u00b2 score, the coefficient of determination": [[1002, "r2-score-the-coefficient-of-determination"]], "SGD": [[1016, "id5"]], "SGD: Maximum margin separating hyperplane": [[224, null]], "SGD: Penalties": [[223, null]], "SGD: Weighted samples": [[225, null]], "SGD: convex loss functions": [[222, null]], "SGDClassifier": [[677, null]], "SGDOneClassSVM": [[678, null]], "SGDRegressor": [[679, null]], "SKLEARN_ASSUME_FINITE": [[364, "sklearn-assume-finite"]], "SKLEARN_BUILD_ENABLE_DEBUG_SYMBOLS": [[364, "sklearn-build-enable-debug-symbols"]], "SKLEARN_ENABLE_DEBUG_CYTHON_DIRECTIVES": [[364, "sklearn-enable-debug-cython-directives"]], "SKLEARN_PAIRWISE_DIST_CHUNK_SIZE": [[364, "sklearn-pairwise-dist-chunk-size"]], "SKLEARN_RUN_FLOAT32_TESTS": [[364, "sklearn-run-float32-tests"]], "SKLEARN_SEED": [[364, "sklearn-seed"]], "SKLEARN_SKIP_NETWORK_TESTS": [[364, "sklearn-skip-network-tests"]], "SKLEARN_TESTS_GLOBAL_RANDOM_SEED": [[364, "sklearn-tests-global-random-seed"]], "SKLEARN_WARNINGS_AS_ERRORS": [[364, "sklearn-warnings-as-errors"]], "SKLEARN_WORKING_MEMORY": [[364, "sklearn-working-memory"]], "SVC": [[910, null], [1017, "svc"]], "SVM Exercise": [[161, null]], "SVM Margins Example": [[345, null]], "SVM Tie Breaking Example": [[348, null]], "SVM with custom kernel": [[336, null]], "SVM-Anova: SVM with univariate feature selection": [[343, null]], "SVM: Maximum margin separating hyperplane": [[341, null]], "SVM: Separating hyperplane for unbalanced classes": [[342, null]], "SVM: Weighted samples": [[349, null]], "SVR": [[911, null], [1017, "svr"]], "Sample generators": [[10, "sample-generators"]], "Sample images": [[370, "sample-images"]], "Sample pipeline for text feature extraction and evaluation": [[271, null]], "Sample weight support": [[415, "sample-weight-support"]], "Sample-weight support for Lasso and ElasticNet": [[320, "sample-weight-support-for-lasso-and-elasticnet"]], "Scalability and stability improvements to KMeans": [[320, "scalability-and-stability-improvements-to-kmeans"]], "Scalable learning with polynomial kernel approximation": [[191, null]], "Scale Invariance": [[88, "scale-invariance"]], "Scaling data with outliers": [[1012, "scaling-data-with-outliers"]], "Scaling features to a range": [[1012, "scaling-features-to-a-range"]], "Scaling sparse data": [[1012, "scaling-sparse-data"]], "Scaling the regularization parameter for SVCs": [[347, null]], "Scaling up the One-Class SVM": [[1008, "scaling-up-the-one-class-svm"]], "Scaling with instances using out-of-core learning": [[365, "scaling-with-instances-using-out-of-core-learning"]], "Scatter plot of scores": [[115, "scatter-plot-of-scores"]], "Scikit-learn governance and decision-making": [[391, null]], "Scores and probabilities": [[1017, "scores-and-probabilities"]], "Searching for optimal parameters with successive halving": [[991, "searching-for-optimal-parameters-with-successive-halving"]], "Second example": [[48, "second-example"]], "Second experiment: varying number of classes and clusters": [[72, "second-experiment-varying-number-of-classes-and-clusters"]], "Security": [[1051, "security"]], "Security & Maintainability Limitations": [[402, "security-maintainability-limitations"]], "Segmenting the picture of greek coins in regions": [[80, null]], "SelectFdr": [[596, null]], "SelectFpr": [[597, null]], "SelectFromModel": [[598, null]], "SelectFwe": [[599, null]], "SelectKBest": [[600, null]], "SelectPercentile": [[601, null]], "Selecting Lasso via an information criterion": [[202, "selecting-lasso-via-an-information-criterion"]], "Selecting Lasso via cross-validation": [[202, "selecting-lasso-via-cross-validation"]], "Selecting dimensionality reduction with Pipeline and GridSearchCV": [[104, null]], "Selecting features based on importance": [[168, "selecting-features-based-on-importance"]], "Selecting features with Sequential Feature Selection": [[168, "selecting-features-with-sequential-feature-selection"]], "Selecting the number of clusters with silhouette analysis on KMeans clustering": [[93, null]], "SelectorMixin": [[602, null]], "Self Training": [[1015, "self-training"]], "SelfTrainingClassifier": [[902, null]], "Semi Supervised Classification": [[183, "semi-supervised-classification"], [328, null]], "Semi-supervised Classification on a Text Dataset": [[333, null]], "Semi-supervised learning": [[329, "semi-supervised-learning"], [1015, null]], "Sequence similarity matrix under the kernel": [[178, "sequence-similarity-matrix-under-the-kernel"]], "Sequential Feature Selection": [[417, "sequential-feature-selection"]], "SequentialFeatureSelector": [[603, null]], "Serving the model artifact": [[402, "serving-the-model-artifact"]], "Setting regularization parameter": [[998, "setting-regularization-parameter"]], "Setting the regularization parameter: leave-one-out Cross-Validation": [[998, "setting-the-regularization-parameter-leave-one-out-cross-validation"]], "Severity Model -  Gamma distribution": [[230, "severity-model-gamma-distribution"]], "Shrinkage and Covariance Estimator": [[996, "shrinkage-and-covariance-estimator"]], "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood": [[109, null]], "Shrinkage via learning rate": [[415, "shrinkage-via-learning-rate"]], "Shrunk Covariance": [[410, "shrunk-covariance"]], "ShrunkCovariance": [[476, null]], "ShuffleSplit": [[818, null]], "Sigmoid": [[406, "sigmoid"]], "Sigmoid kernel": [[344, "sigmoid-kernel"], [1000, "sigmoid-kernel"]], "Silhouette Coefficient": [[408, "silhouette-coefficient"]], "Simple 1D Kernel Density Estimation": [[295, null]], "Simple Pipeline": [[246, "simple-pipeline"]], "SimpleImputer": [[631, null]], "Single estimator versus bagging: bias-variance decomposition": [[137, null]], "Single label": [[372, "single-label"]], "Skewed Chi Squared Kernel": [[994, "skewed-chi-squared-kernel"]], "SkewedChi2Sampler": [[643, null]], "Social Media": [[1025, "social-media"]], "Solvers": [[998, "solvers"]], "Sparse coding with a precomputed dictionary": [[129, null], [413, "sparse-coding-with-a-precomputed-dictionary"]], "Sparse components - MiniBatchSparsePCA": [[120, "sparse-components-minibatchsparsepca"]], "Sparse input": [[1012, null]], "Sparse inverse covariance": [[410, "sparse-inverse-covariance"]], "Sparse inverse covariance estimation": [[113, null]], "Sparse principal components analysis (SparsePCA and MiniBatchSparsePCA)": [[413, "sparse-principal-components-analysis-sparsepca-and-minibatchsparsepca"]], "Sparse random projection": [[1014, "sparse-random-projection"]], "SparseCoder": [[543, null]], "SparsePCA": [[544, null]], "SparseRandomProjection": [[898, null]], "Sparsity": [[416, "sparsity"]], "Species distribution dataset": [[371, "species-distribution-dataset"]], "Species distribution modeling": [[50, null]], "Specific models": [[378, "specific-models"]], "Specifying an objective metric": [[991, "specifying-an-objective-metric"]], "Specifying multiple metrics for evaluation": [[991, "specifying-multiple-metrics-for-evaluation"]], "Spectral Biclustering": [[405, "spectral-biclustering"]], "Spectral Clustering Graphs": [[408, "spectral-clustering-graphs"]], "Spectral Co-Clustering": [[405, "spectral-co-clustering"]], "Spectral Embedding": [[999, "spectral-embedding"]], "Spectral clustering": [[408, "spectral-clustering"]], "Spectral clustering for image segmentation": [[99, null]], "Spectral embedding for non-linear dimensionality reduction": [[232, "spectral-embedding-for-non-linear-dimensionality-reduction"]], "SpectralBiclustering": [[451, null]], "SpectralClustering": [[452, null]], "SpectralCoclustering": [[453, null]], "SpectralEmbedding": [[692, null]], "Sphinx version": [[376, null]], "Spline Transformers": [[322, "spline-transformers"]], "Spline transformer": [[1012, "spline-transformer"]], "SplineTransformer": [[884, null]], "Splitters": [[29, "splitters"]], "Spotify": [[1026, "id2"]], "Stack of predictors on a single data set": [[154, "stack-of-predictors-on-a-single-data-set"]], "Stacked generalization": [[415, "stacked-generalization"]], "Stacking Classifier and Regressor": [[319, "stacking-classifier-and-regressor"]], "StackingClassifier": [[568, null]], "StackingRegressor": [[569, null]], "Stalled and Unclaimed Issues": [[376, "stalled-and-unclaimed-issues"]], "Stalled pull requests": [[376, "stalled-pull-requests"]], "Standard replies for reviewing": [[384, "standard-replies-for-reviewing"]], "StandardScaler": [[310, "standardscaler"], [885, null]], "Standardization, or mean removal and variance scaling": [[1012, "standardization-or-mean-removal-and-variance-scaling"]], "Statement of purpose: Scikit-learn in 2018": [[1022, "statement-of-purpose-scikit-learn-in-2018"]], "Statistical comparison of models using grid search": [[270, null]], "Statistical learning with Python": [[1021, "statistical-learning-with-python"]], "Stochastic Gradient Descent": [[1016, null]], "Stochastic Gradient Descent - SGD": [[998, "stochastic-gradient-descent-sgd"]], "Stochastic Gradient Descent for sparse data": [[1016, "stochastic-gradient-descent-for-sparse-data"]], "Stochastic Maximum Likelihood learning": [[1007, "stochastic-maximum-likelihood-learning"]], "Stopping criterion": [[1016, "stopping-criterion"]], "Strategies comparison": [[287, "strategies-comparison"]], "Strategies to scale computationally: bigger data": [[365, null]], "Stratified Shuffle Split": [[412, "stratified-shuffle-split"]], "Stratified k-fold": [[412, "stratified-k-fold"]], "StratifiedGroupKFold": [[412, "stratifiedgroupkfold"], [819, null]], "StratifiedKFold": [[820, null]], "StratifiedShuffleSplit": [[821, null]], "Streaming instances": [[365, "streaming-instances"]], "Submitting a bug report or a feature request": [[376, "submitting-a-bug-report-or-a-feature-request"]], "Subpackage-specific goals": [[1022, "subpackage-specific-goals"]], "Subsampling": [[415, "subsampling"]], "Successive Halving Iterations": [[282, null]], "Successive Halving estimators for tuning hyper-parameters": [[321, "successive-halving-estimators-for-tuning-hyper-parameters"]], "Sum": [[625, null]], "Summarizing the key points": [[402, "summarizing-the-key-points"]], "Summary": [[62, "summary"], [144, "summary"], [353, "summary"]], "Summary of cross-validation approach": [[202, "summary-of-cross-validation-approach"]], "Summary of model persistence methods": [[402, "id2"]], "Supervised learning": [[1024, null]], "Support": [[1025, null]], "Support Vector Machines": [[183, "support-vector-machines"], [335, null], [1017, null]], "Support Vector Regression (SVR) using linear and non-linear kernels": [[346, null]], "Support for Array API": [[1050, "support-for-array-api"], [1051, "support-for-array-api"]], "Support for Array API-compatible inputs": [[404, "support-for-array-api-compatible-inputs"]], "Support for SciPy sparse arrays": [[1050, "support-for-scipy-sparse-arrays"]], "Support for building with Meson": [[1051, "support-for-building-with-meson"]], "Support for missing values": [[149, "support-for-missing-values"]], "Support for quantile loss": [[149, "support-for-quantile-loss"]], "Swiss Roll": [[236, "swiss-roll"]], "Swiss Roll And Swiss-Hole Reduction": [[236, null]], "Swiss-Hole": [[236, "swiss-hole"]], "Synthetic dataset": [[381, "synthetic-dataset"]], "Synthetic example": [[107, "synthetic-example"]], "T-distributed Stochastic Neighbor Embedding": [[232, "t-distributed-stochastic-neighbor-embedding"]], "TSNE": [[693, null]], "Table of Contents": [[388, "table-of-contents"]], "Tags": [[924, null]], "Take-home messages": [[270, "take-home-messages"]], "Target Encoder": [[1012, "target-encoder"]], "Target Encoder\u2019s Internal Cross fitting": [[317, null]], "Target Types": [[390, "target-types"]], "Target format": [[1003, "target-format"], [1003, "id5"], [1003, "id8"], [1003, "id10"]], "TargetEncoder": [[886, null]], "TargetEncoder: a new category encoding strategy": [[325, "targetencoder-a-new-category-encoding-strategy"]], "TargetTags": [[925, null]], "Technical Committee": [[391, "technical-committee"]], "Test dependencies": [[374, "test-dependencies"]], "Test with permutations the significance of a classification score": [[276, null]], "Testing Functions": [[385, "testing-functions"]], "Testing and improving test coverage": [[376, "testing-and-improving-test-coverage"]], "Text feature extraction": [[416, "text-feature-extraction"]], "TfidfTransformer": [[591, null]], "TfidfVectorizer": [[353, "tfidfvectorizer"], [592, null]], "Tf\u2013idf term weighting": [[416, "tfidf-term-weighting"]], "The 20 newsgroups text dataset": [[371, "the-20-newsgroups-text-dataset"]], "The Bag of Words representation": [[416, "the-bag-of-words-representation"]], "The Dirichlet Process": [[1001, "the-dirichlet-process"]], "The French Motor Third-Party Liability Claims dataset": [[212, "the-french-motor-third-party-liability-claims-dataset"]], "The Johnson-Lindenstrauss bound for embedding with random projections": [[243, null]], "The Johnson-Lindenstrauss lemma": [[1014, "the-johnson-lindenstrauss-lemma"]], "The Labeled Faces in the Wild face recognition dataset": [[371, "the-labeled-faces-in-the-wild-face-recognition-dataset"]], "The Meson Build Backend": [[384, "the-meson-build-backend"]], "The Olivetti faces dataset": [[371, "the-olivetti-faces-dataset"]], "The Yeast UCI dataset": [[287, "the-yeast-uci-dataset"]], "The average precision score in multi-label settings": [[277, "the-average-precision-score-in-multi-label-settings"]], "The credit card dataset": [[264, "the-credit-card-dataset"]], "The cross_validate function and multiple metric evaluation": [[412, "the-cross-validate-function-and-multiple-metric-evaluation"]], "The data": [[116, "the-data"]], "The dataset": [[268, "the-dataset"]], "The dataset: simulated hourly wages": [[185, "the-dataset-simulated-hourly-wages"]], "The dataset: wages": [[186, "the-dataset-wages"]], "The diabetes dataset": [[284, "the-diabetes-dataset"]], "The importance of hyperparameters search": [[287, "the-importance-of-hyperparameters-search"]], "The machine-learning pipeline": [[186, "the-machine-learning-pipeline"]], "The people behind scikit-learn": [[0, "the-people-behind-scikit-learn"]], "The problem of correlated variables": [[186, "the-problem-of-correlated-variables"]], "The scikit-learn.org Website": [[380, "the-scikit-learn-org-website"]], "The scoring parameter: defining model evaluation rules": [[1002, "the-scoring-parameter-defining-model-evaluation-rules"]], "Theil-Sen Regression": [[229, null]], "Theil-Sen estimator: generalized-median-based estimator": [[998, "theil-sen-estimator-generalized-median-based-estimator"]], "TheilSenRegressor": [[680, null]], "Theoretical bounds": [[243, "theoretical-bounds"]], "Third Party Development and scikit-learn Dependency": [[246, "third-party-development-and-scikit-learn-dependency"]], "Third party distributions of scikit-learn": [[394, "third-party-distributions-of-scikit-learn"]], "Time Series Split": [[412, "time-series-split"]], "Time-based cross-validation": [[43, "time-based-cross-validation"]], "Time-related feature engineering": [[43, null]], "Time-steps as categories": [[43, "time-steps-as-categories"]], "TimeSeriesSplit": [[822, null]], "Timing and accuracy plots": [[244, "timing-and-accuracy-plots"]], "Tips and Tricks": [[363, "tips-and-tricks"]], "Tips for developing with Cython in scikit-learn": [[377, "tips-for-developing-with-cython-in-scikit-learn"]], "Tips for parameter search": [[991, "tips-for-parameter-search"]], "Tips for performance": [[377, "tips-for-performance"]], "Tips on Practical Use": [[1006, "tips-on-practical-use"], [1016, "tips-on-practical-use"], [1017, "tips-on-practical-use"]], "Tips on practical use": [[999, "tips-on-practical-use"], [1018, "tips-on-practical-use"]], "Tips to ease development": [[377, "tips-to-ease-development"]], "Tools": [[404, "tools"]], "Top terms per cluster": [[352, "top-terms-per-cluster"]], "Top-k accuracy score": [[1002, "top-k-accuracy-score"]], "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation": [[54, null]], "Total impurity of leaves vs effective alphas of pruned tree": [[355, "total-impurity-of-leaves-vs-effective-alphas-of-pruned-tree"]], "Totally Random Trees Embedding": [[415, "totally-random-trees-embedding"]], "Toy datasets": [[373, null]], "Tracking feature names in a pipeline": [[409, "tracking-feature-names-in-a-pipeline"]], "Trade-offs: which estimator ?": [[998, null]], "Train and Persist the Model": [[402, "train-and-persist-the-model"]], "Train classifiers": [[340, "train-classifiers"]], "Train models on the diabetes dataset": [[250, "train-models-on-the-diabetes-dataset"]], "Train tree classifier": [[358, "train-tree-classifier"]], "Training": [[308, "training"], [1005, "training"]], "Training SVC model and plotting decision boundaries": [[344, "training-svc-model-and-plotting-decision-boundaries"]], "Training a Random Forest and Plotting the ROC Curve": [[252, "training-a-random-forest-and-plotting-the-roc-curve"]], "Training a Ridge Regressor": [[317, "training-a-ridge-regressor"]], "Training and Evaluating Pipelines with Different Encoders": [[316, "training-and-evaluating-pipelines-with-different-encoders"]], "Training and prediction with DecisionTree and AdaBoost Regressors": [[135, "training-and-prediction-with-decisiontree-and-adaboost-regressors"]], "Training classifiers": [[157, "training-classifiers"]], "Training of the model": [[150, "training-of-the-model"]], "Training the AdaBoostClassifier": [[134, "training-the-adaboostclassifier"]], "Training the Ridge Regressor": [[216, "training-the-ridge-regressor"]], "Transform": [[1005, "transform"]], "Transform data": [[115, "transform-data"]], "TransformedTargetRegressor": [[465, null]], "TransformerMixin": [[432, null]], "TransformerTags": [[926, null]], "Transformers and pre-processors": [[389, "transformers-and-pre-processors"]], "Transforming target in regression": [[409, "transforming-target-in-regression"]], "Transforming the prediction target (y)": [[1013, null]], "Translations of scikit-learn documentation": [[1021, "translations-of-scikit-learn-documentation"]], "Tree algorithms: ID3, C4.5, C5.0 and CART": [[1018, "tree-algorithms-id3-c4-5-c5-0-and-cart"]], "Tree pruning": [[319, "tree-pruning"]], "Tree structure": [[358, "tree-structure"]], "Tree-based feature selection": [[417, "tree-based-feature-selection"]], "Tree\u2019s Feature Importance from Mean Decrease in Impurity (MDI)": [[188, "tree-s-feature-importance-from-mean-decrease-in-impurity-mdi"]], "Triaging operations for members of the core and contributor experience teams": [[375, "triaging-operations-for-members-of-the-core-and-contributor-experience-teams"]], "Trigonometric features": [[43, "trigonometric-features"]], "Troubleshooting": [[394, "troubleshooting"]], "Truncated singular value decomposition and latent semantic analysis": [[413, "truncated-singular-value-decomposition-and-latent-semantic-analysis"]], "TruncatedSVD": [[545, null]], "TunedThresholdClassifierCV": [[823, null]], "TunedThresholdClassifierCV: Tuning the decision threshold of a binary classifier": [[327, "tunedthresholdclassifiercv-tuning-the-decision-threshold-of-a-binary-classifier"]], "Tuning hyper-parameters": [[268, "tuning-hyper-parameters"]], "Tuning the cut-off point": [[264, "tuning-the-cut-off-point"]], "Tuning the decision threshold": [[264, "tuning-the-decision-threshold"], [284, "tuning-the-decision-threshold"]], "Tuning the decision threshold for class prediction": [[407, null]], "Tuning the hyper-parameters of an estimator": [[991, null]], "Tuning the hyper-parameters of the quantile regressors": [[146, "tuning-the-hyper-parameters-of-the-quantile-regressors"]], "Tutorial exercises": [[158, null], [183, "tutorial-exercises"]], "Tweedie regression on insurance claims": [[230, null]], "TweedieRegressor": [[681, null]], "Two-class AdaBoost": [[136, null]], "Type of return values and fitted attributes": [[404, "type-of-return-values-and-fitted-attributes"]], "Types": [[377, "types"]], "T\u00e9l\u00e9com ParisTech": [[1026, "id7"]], "Unbalanced problems": [[1017, "unbalanced-problems"]], "UndefinedMetricWarning": [[579, null]], "Under Development": [[1028, "under-development"]], "Underfitting vs. Overfitting": [[285, null]], "Understanding the decision tree structure": [[358, null]], "Univariate Feature Selection": [[164, null]], "Univariate feature imputation": [[992, "univariate-feature-imputation"]], "Univariate feature selection": [[164, "id1"], [417, "univariate-feature-selection"]], "Univariate vs. Multivariate Imputation": [[992, "univariate-vs-multivariate-imputation"]], "Universal attributes": [[378, "universal-attributes"]], "Unlabeled entries in y": [[1015, null]], "Unsupervised Nearest Neighbors": [[1005, "unsupervised-nearest-neighbors"]], "Unsupervised dimensionality reduction": [[1019, null]], "Unsupervised learning": [[1027, null]], "Unweighted feature selection": [[399, "unweighted-feature-selection"]], "Updating Authors List": [[380, "updating-authors-list"]], "Usage": [[406, "usage"], [409, "usage"], [409, "id1"], [415, "usage"], [415, "id24"], [415, "id25"], [415, "id27"], [415, "id35"], [998, "usage"]], "Usage Examples": [[399, "usage-examples"]], "Use markdown formatting": [[381, "use-markdown-formatting"]], "Useful pytest aliases and flags": [[384, "useful-pytest-aliases-and-flags"]], "User Guide": [[1028, null]], "User Questions": [[1025, "user-questions"]], "Using Cython": [[382, "using-cython"]], "Using KBinsDiscretizer to discretize continuous features": [[311, null]], "Using None or RandomState instances, and repeated calls to fit and split": [[359, "using-none-or-randomstate-instances-and-repeated-calls-to-fit-and-split"]], "Using OpenMP": [[377, "using-openmp"]], "Using a debugger, gdb": [[382, "using-a-debugger-gdb"]], "Using a lock-file to get an environment close to the CI": [[384, "using-a-lock-file-to-get-an-environment-close-to-the-ci"]], "Using cross-validation": [[998, "using-cross-validation"]], "Using cross-validation iterators to split train and test": [[412, "using-cross-validation-iterators-to-split-train-and-test"]], "Using feature names to specify monotonic constraints": [[151, "using-feature-names-to-specify-monotonic-constraints"]], "Using gprof": [[382, "using-gprof"]], "Using multiple metric evaluation": [[1002, "using-multiple-metric-evaluation"]], "Using negative tolerance values": [[168, "using-negative-tolerance-values"]], "Using scikit-learn": [[388, "using-scikit-learn"]], "Using stop words": [[416, "using-stop-words"]], "Using valgrind / callgrind / kcachegrind": [[382, "using-valgrind-callgrind-kcachegrind"]], "Using yep and gperftools": [[382, "using-yep-and-gperftools"]], "Utilities for Developers": [[385, null]], "Validation Tools": [[385, "validation-tools"]], "Validation curve": [[997, "validation-curve"]], "Validation curves: plotting scores to evaluate models": [[997, null]], "ValidationCurveDisplay": [[824, null]], "Vanilla predictive model": [[264, "vanilla-predictive-model"]], "VarianceThreshold": [[604, null]], "Variational Bayesian Gaussian Mixture": [[1001, "variational-bayesian-gaussian-mixture"]], "Various Agglomerative Clustering on a 2D embedding of digits": [[85, null]], "Varying regularization in Multi-layer Perceptron": [[305, null]], "Varying the metric": [[408, "varying-the-metric"]], "Vector Quantization Example": [[86, null]], "Vectorizing a large text corpus with the hashing trick": [[416, "vectorizing-a-large-text-corpus-with-the-hashing-trick"]], "Version 0.10": [[1033, "version-0-10"]], "Version 0.11": [[1033, "version-0-11"]], "Version 0.12": [[1033, "version-0-12"]], "Version 0.12.1": [[1033, "version-0-12-1"]], "Version 0.13": [[1034, null], [1034, "changes-0-13"]], "Version 0.13.1": [[1034, "version-0-13-1"]], "Version 0.14": [[1035, null], [1035, "changes-0-14"]], "Version 0.15": [[1036, null], [1036, "changes-0-15"]], "Version 0.15.1": [[1036, "version-0-15-1"]], "Version 0.15.2": [[1036, "version-0-15-2"]], "Version 0.16": [[1037, null], [1037, "changes-0-16"]], "Version 0.16.1": [[1037, "version-0-16-1"]], "Version 0.17": [[1038, null], [1038, "changes-0-17"]], "Version 0.17.1": [[1038, "version-0-17-1"]], "Version 0.18": [[1039, null], [1039, "changes-0-18"]], "Version 0.18.1": [[1039, "version-0-18-1"]], "Version 0.18.2": [[1039, "version-0-18-2"]], "Version 0.19": [[1040, null], [1040, "id1"]], "Version 0.19.1": [[1040, "version-0-19-1"]], "Version 0.19.2": [[1040, "version-0-19-2"]], "Version 0.20": [[1041, null]], "Version 0.20.0": [[1041, "version-0-20-0"]], "Version 0.20.1": [[1041, "version-0-20-1"]], "Version 0.20.2": [[1041, "version-0-20-2"]], "Version 0.20.3": [[1041, "version-0-20-3"]], "Version 0.20.4": [[1041, "version-0-20-4"]], "Version 0.21": [[1042, null]], "Version 0.21.0": [[1042, "version-0-21-0"]], "Version 0.21.1": [[1042, "version-0-21-1"]], "Version 0.21.2": [[1042, "version-0-21-2"]], "Version 0.21.3": [[1042, "version-0-21-3"]], "Version 0.22": [[1043, null]], "Version 0.22.0": [[1043, "version-0-22-0"]], "Version 0.22.1": [[1043, "version-0-22-1"]], "Version 0.22.2.post1": [[1043, "version-0-22-2-post1"]], "Version 0.23": [[1044, null]], "Version 0.23.0": [[1044, "version-0-23-0"]], "Version 0.23.1": [[1044, "version-0-23-1"]], "Version 0.23.2": [[1044, "version-0-23-2"]], "Version 0.24": [[1045, null]], "Version 0.24.0": [[1045, "version-0-24-0"]], "Version 0.24.1": [[1045, "version-0-24-1"]], "Version 0.24.2": [[1045, "version-0-24-2"]], "Version 0.4": [[1033, "version-0-4"]], "Version 0.5": [[1033, "version-0-5"]], "Version 0.6": [[1033, "version-0-6"]], "Version 0.7": [[1033, "version-0-7"]], "Version 0.8": [[1033, "version-0-8"]], "Version 0.9": [[1033, "version-0-9"]], "Version 1.0": [[1046, null]], "Version 1.0.0": [[1046, "version-1-0-0"]], "Version 1.0.1": [[1046, "version-1-0-1"]], "Version 1.0.2": [[1046, "version-1-0-2"]], "Version 1.1": [[1047, null]], "Version 1.1.0": [[1047, "version-1-1-0"]], "Version 1.1.1": [[1047, "version-1-1-1"]], "Version 1.1.2": [[1047, "version-1-1-2"]], "Version 1.1.3": [[1047, "version-1-1-3"]], "Version 1.2": [[1048, null]], "Version 1.2.0": [[1048, "version-1-2-0"]], "Version 1.2.1": [[1048, "version-1-2-1"]], "Version 1.2.2": [[1048, "version-1-2-2"]], "Version 1.3": [[1049, null]], "Version 1.3.0": [[1049, "version-1-3-0"]], "Version 1.3.1": [[1049, "version-1-3-1"]], "Version 1.3.2": [[1049, "version-1-3-2"]], "Version 1.4": [[1050, null]], "Version 1.4.0": [[1050, "version-1-4-0"]], "Version 1.4.1": [[1050, "version-1-4-1"]], "Version 1.4.2": [[1050, "version-1-4-2"]], "Version 1.5": [[1051, null]], "Version 1.5.0": [[1051, "version-1-5-0"]], "Version 1.5.1": [[1051, "version-1-5-1"]], "Version 1.5.2": [[1051, "version-1-5-2"]], "Version 1.6": [[1052, null]], "Video resources": [[376, "video-resources"]], "Videos": [[1020, "videos"]], "Visual evaluation of regression models": [[1002, "visual-evaluation-of-regression-models"]], "Visualization": [[5, "visualization"], [29, "visualization"], [51, "visualization"], [340, "visualization"]], "Visualization of MLP weights on MNIST": [[307, null]], "Visualization of cluster hierarchy": [[408, "visualization-of-cluster-hierarchy"]], "Visualizations": [[1030, null]], "Visualizations with Display Objects": [[240, null]], "Visualize Comparison": [[144, "visualize-comparison"]], "Visualize cross-validation indices for many CV objects": [[265, "visualize-cross-validation-indices-for-many-cv-objects"]], "Visualize our data": [[265, "visualize-our-data"]], "Visualize the learning curves": [[245, "visualize-the-learning-curves"]], "Visualize the results on PCA-reduced data": [[91, "visualize-the-results-on-pca-reduced-data"]], "Visualize training and prediction times": [[245, "visualize-training-and-prediction-times"]], "Visualizing Composite Estimators": [[409, "visualizing-composite-estimators"]], "Visualizing cross-validation behavior in scikit-learn": [[265, null]], "Visualizing the stock market structure": [[51, null]], "Voting Classifier": [[415, "voting-classifier"]], "Voting Regressor": [[415, "voting-regressor"]], "VotingClassifier": [[570, null]], "VotingRegressor": [[571, null]], "Warnings and Exceptions": [[385, "warnings-and-exceptions"]], "Ways to contribute": [[376, "ways-to-contribute"]], "We are defining k-Nearest Neighbors with 10 neighbors": [[100, "we-are-defining-k-nearest-neighbors-with-10-neighbors"]], "Website update": [[1043, "website-update"]], "Weight handling based on class labels": [[41, "module-sklearn.utils.class_weight"]], "Weighted Average Probabilities (Soft Voting)": [[415, "weighted-average-probabilities-soft-voting"]], "Weighted scoring and fitting": [[399, "weighted-scoring-and-fitting"]], "Weighted scoring and unweighted fitting": [[399, "weighted-scoring-and-unweighted-fitting"]], "What are the inclusion criteria for new algorithms?": [[388, "what-are-the-inclusion-criteria-for-new-algorithms"]], "What is the project name (a lot of people get it wrong)?": [[388, "what-is-the-project-name-a-lot-of-people-get-it-wrong"]], "What is the values array used here?": [[358, "what-is-the-values-array-used-here"]], "What\u2019s the best way to get help on scikit-learn usage?": [[388, "what-s-the-best-way-to-get-help-on-scikit-learn-usage"]], "WhiteKernel": [[626, null]], "Who is using scikit-learn?": [[1026, null]], "Why are there so many different estimators for linear models?": [[388, "why-are-there-so-many-different-estimators-for-linear-models"]], "Why are you so selective on what algorithms you include in scikit-learn?": [[388, "why-are-you-so-selective-on-what-algorithms-you-include-in-scikit-learn"]], "Why did you remove HMMs from scikit-learn?": [[388, "why-did-you-remove-hmms-from-scikit-learn"]], "Why do I sometimes get a crash/freeze with n_jobs > 1 under OSX or Linux?": [[388, "why-do-i-sometimes-get-a-crash-freeze-with-n-jobs-1-under-osx-or-linux"]], "Why do categorical variables need preprocessing in scikit-learn, compared to other tools?": [[388, "why-do-categorical-variables-need-preprocessing-in-scikit-learn-compared-to-other-tools"]], "Why does my job use more cores than specified with n_jobs?": [[388, "why-does-my-job-use-more-cores-than-specified-with-n-jobs"]], "Why is my pull request not getting any attention?": [[388, "why-is-my-pull-request-not-getting-any-attention"]], "Why is there no support for deep or reinforcement learning? Will there be such support in the future?": [[388, "why-is-there-no-support-for-deep-or-reinforcement-learning-will-there-be-such-support-in-the-future"]], "Why it\u2019s faster": [[415, "why-it-s-faster"]], "Why scikit?": [[388, "why-scikit"]], "Wikipedia principal eigenvector": [[55, null]], "Will you add GPU support?": [[388, "will-you-add-gpu-support"]], "Will you add graphical models or sequence prediction to scikit-learn?": [[388, "will-you-add-graphical-models-or-sequence-prediction-to-scikit-learn"]], "WinPython for Windows": [[394, "winpython-for-windows"]], "Windows": [[374, "windows"]], "Wine recognition dataset": [[373, "wine-recognition-dataset"]], "Workflow Overview": [[402, "workflow-overview"]], "Working on PRs to help review": [[375, "working-on-prs-to-help-review"]], "Working on issues to improve them": [[375, "working-on-issues-to-improve-them"]], "Working with graphs": [[41, "module-sklearn.utils.graph"]], "Working with sparse matrices and arrays": [[41, "module-sklearn.utils.sparsefuncs"]], "Working with text documents": [[183, "working-with-text-documents"], [350, null]], "Wrong causal interpretation": [[186, "wrong-causal-interpretation"]], "XOR dataset": [[344, "xor-dataset"]], "Yhat": [[1026, "id10"]], "Zero one loss": [[1002, "zero-one-loss"]], "Zopa": [[1026, "id27"]], "__sklearn_is_fitted__ as Developer API": [[132, null]], "_safe_indexing": [[927, null]], "accuracy_score": [[704, null]], "add_dummy_feature": [[887, null]], "additive_chi2_kernel": [[759, null]], "adjusted_mutual_info_score": [[705, null]], "adjusted_rand_score": [[706, null]], "affinity_propagation": [[454, null]], "all_displays": [[940, null]], "all_estimators": [[941, null]], "all_functions": [[942, null]], "as_float_array": [[929, null]], "assert_all_finite": [[930, null]], "auc": [[707, null]], "available_if": [[962, null]], "average_precision_score": [[708, null]], "balanced_accuracy_score": [[709, null]], "betaworks": [[1026, "id4"]], "binarize": [[888, null]], "brier_score_loss": [[710, null]], "calibration_curve": [[439, null]], "calinski_harabasz_score": [[711, null]], "check_X_y": [[931, null]], "check_array": [[932, null]], "check_consistent_length": [[933, null]], "check_cv": [[825, null]], "check_estimator": [[943, null]], "check_increasing": [[637, null]], "check_is_fitted": [[985, null]], "check_memory": [[986, null]], "check_random_state": [[934, null]], "check_scalar": [[935, null]], "check_scoring": [[712, null]], "check_symmetric": [[987, null]], "chi2": [[605, null]], "chi2_kernel": [[760, null]], "class_likelihood_ratios": [[713, null]], "classification_report": [[714, null]], "clear_data_home": [[486, null]], "clone": [[433, null]], "cluster_optics_dbscan": [[455, null]], "cluster_optics_xi": [[456, null]], "cohen_kappa_score": [[717, null]], "column_or_1d": [[988, null]], "completeness_score": [[718, null]], "compute_class_weight": [[936, null]], "compute_optics_graph": [[457, null]], "compute_sample_weight": [[937, null]], "config_context": [[468, null]], "confusion_matrix": [[719, null]], "consensus_score": [[720, null]], "contingency_matrix": [[715, null]], "cosine_distances": [[761, null]], "cosine_similarity": [[762, null]], "coverage_error": [[721, null]], "cross_val_predict": [[826, null]], "cross_val_score": [[827, null]], "cross_validate": [[828, null]], "d2_absolute_error_score": [[722, null]], "d2_log_loss_score": [[723, null]], "d2_pinball_score": [[724, null]], "d2_tweedie_score": [[725, null]], "davies_bouldin_score": [[726, null]], "dbscan": [[419, null]], "dbscan_clustering": [[88, "dbscan-clustering"]], "dcg_score": [[727, null]], "default_tags": [[938, null]], "delayed": [[968, null]], "density": [[946, null]], "deprecated": [[939, null]], "det_curve": [[728, null]], "dict_learning": [[546, null]], "dict_learning_online": [[547, null]], "distance_metrics": [[763, null]], "dump_svmlight_file": [[487, null]], "empirical_covariance": [[477, null]], "enable_halving_search_cv": [[580, null]], "enable_iterative_imputer": [[581, null]], "enet_path": [[682, null]], "estimate_bandwidth": [[458, null]], "estimator_html_repr": [[945, null]], "euclidean_distances": [[764, null]], "explained_variance_score": [[729, null]], "export_graphviz": [[917, null]], "export_text": [[918, null]], "extract_patches_2d": [[585, null]], "f1_score": [[730, null]], "f_classif": [[606, null]], "f_regression": [[607, null]], "fast_logdet": [[947, null]], "fastica": [[420, null]], "fbeta_score": [[731, null]], "fetch_20newsgroups": [[488, null]], "fetch_20newsgroups_vectorized": [[489, null]], "fetch_california_housing": [[490, null]], "fetch_covtype": [[491, null]], "fetch_file": [[492, null]], "fetch_kddcup99": [[493, null]], "fetch_lfw_pairs": [[494, null]], "fetch_lfw_people": [[495, null]], "fetch_olivetti_faces": [[496, null]], "fetch_openml": [[497, null]], "fetch_rcv1": [[498, null]], "fetch_species_distributions": [[499, null]], "fowlkes_mallows_score": [[732, null]], "gen_batches": [[952, null]], "gen_even_slices": [[953, null]], "get_config": [[627, null]], "get_data_home": [[500, null]], "get_feature_names_out Available in all Transformers": [[323, "get-feature-names-out-available-in-all-transformers"]], "get_params and set_params": [[378, "get-params-and-set-params"]], "get_routing_for_object": [[960, null]], "get_scorer": [[733, null]], "get_scorer_names": [[734, null]], "get_tags": [[954, null]], "graphical_lasso": [[478, null]], "grid_to_graph": [[586, null]], "hamming_loss": [[735, null]], "has_fit_parameter": [[989, null]], "haversine_distances": [[765, null]], "hinge_loss": [[736, null]], "homogeneity_completeness_v_measure": [[737, null]], "homogeneity_score": [[738, null]], "img_to_graph": [[587, null]], "incr_mean_variance_axis": [[976, null]], "indexable": [[956, null]], "inplace_column_scale": [[977, null]], "inplace_csr_column_scale": [[978, null]], "inplace_csr_row_normalize_l1": [[983, null]], "inplace_csr_row_normalize_l2": [[984, null]], "inplace_row_scale": [[979, null]], "inplace_swap_column": [[980, null]], "inplace_swap_row": [[981, null]], "is_classifier": [[434, null]], "is_clusterer": [[435, null]], "is_multilabel": [[963, null]], "is_regressor": [[436, null]], "isotonic_regression": [[638, null]], "jaccard_score": [[739, null]], "johnson_lindenstrauss_min_dim": [[899, null]], "kNN-imputation of the missing values": [[182, "knn-imputation-of-the-missing-values"]], "k_means": [[459, null]], "kcachegrind": [[382, "kcachegrind"]], "kernel_metrics": [[766, null]], "kmeans_plusplus": [[460, null]], "kneighbors_graph": [[858, null]], "l1_min_c": [[912, null]], "label_binarize": [[889, null]], "label_ranking_average_precision_score": [[740, null]], "label_ranking_loss": [[741, null]], "laplacian_kernel": [[767, null]], "lars_path": [[683, null]], "lars_path_gram": [[684, null]], "lasso_path": [[685, null]], "learning_curve": [[829, null]], "ledoit_wolf": [[479, null]], "ledoit_wolf_shrinkage": [[480, null]], "linear_kernel": [[768, null]], "load_breast_cancer": [[501, null]], "load_diabetes": [[502, null]], "load_digits": [[503, null]], "load_files": [[504, null]], "load_iris": [[505, null]], "load_linnerud": [[506, null]], "load_sample_image": [[507, null]], "load_sample_images": [[508, null]], "load_svmlight_file": [[509, null]], "load_svmlight_files": [[510, null]], "load_wine": [[511, null]], "locally_linear_embedding": [[694, null]], "log_loss": [[742, null]], "macOS": [[374, "macos"]], "macOS compilers from Homebrew": [[374, "macos-compilers-from-homebrew"]], "macOS compilers from conda-forge": [[374, "macos-compilers-from-conda-forge"]], "make_biclusters": [[512, null]], "make_blobs": [[381, "make-blobs"], [513, null]], "make_checkerboard": [[514, null]], "make_circles": [[515, null]], "make_classification": [[381, "make-classification"], [516, null]], "make_column_selector": [[466, null]], "make_column_transformer": [[467, null]], "make_friedman1": [[517, null]], "make_friedman2": [[518, null]], "make_friedman3": [[519, null]], "make_gaussian_quantiles": [[520, null]], "make_hastie_10_2": [[521, null]], "make_low_rank_matrix": [[522, null]], "make_moons": [[523, null]], "make_multilabel_classification": [[524, null]], "make_pipeline": [[866, null]], "make_regression": [[381, "make-regression"], [525, null]], "make_s_curve": [[526, null]], "make_scorer": [[743, null]], "make_sparse_coded_signal": [[527, null]], "make_sparse_spd_matrix": [[528, null]], "make_sparse_uncorrelated": [[529, null]], "make_spd_matrix": [[530, null]], "make_swiss_roll": [[531, null]], "make_union": [[867, null]], "manhattan_distances": [[769, null]], "matthews_corrcoef": [[744, null]], "max_error": [[745, null]], "maxabs_scale": [[890, null]], "mean_absolute_error": [[746, null]], "mean_absolute_percentage_error": [[747, null]], "mean_gamma_deviance": [[748, null]], "mean_pinball_loss": [[749, null]], "mean_poisson_deviance": [[750, null]], "mean_shift": [[461, null]], "mean_squared_error": [[751, null]], "mean_squared_log_error": [[752, null]], "mean_tweedie_deviance": [[753, null]], "mean_variance_axis": [[982, null]], "median_absolute_error": [[754, null]], "min_cluster_size": [[88, "min-cluster-size"]], "min_pos": [[928, null]], "min_samples": [[88, "min-samples"]], "minmax_scale": [[891, null]], "multilabel_confusion_matrix": [[755, null]], "murmurhash3_32": [[966, null]], "mutual_info_classif": [[608, null]], "mutual_info_regression": [[609, null]], "mutual_info_score": [[756, null]], "nan_euclidean_distances": [[770, null]], "ndcg_score": [[757, null]], "non_negative_factorization": [[548, null]], "normalize": [[892, null]], "normalized_mutual_info_score": [[758, null]], "oas": [[421, null]], "orthogonal_mp": [[686, null]], "orthogonal_mp_gram": [[687, null]], "pair_confusion_matrix": [[716, null]], "paired_cosine_distances": [[771, null]], "paired_distances": [[772, null]], "paired_euclidean_distances": [[773, null]], "paired_manhattan_distances": [[774, null]], "pairwise_distances": [[779, null]], "pairwise_distances_argmin": [[780, null]], "pairwise_distances_argmin_min": [[781, null]], "pairwise_distances_chunked": [[782, null]], "pairwise_kernels": [[775, null]], "parallel_backend": [[969, null]], "parametrize_with_checks": [[944, null]], "partial_dependence": [[634, null]], "permutation_importance": [[635, null]], "permutation_test_score": [[830, null]], "pickle, joblib, and cloudpickle": [[402, "pickle-joblib-and-cloudpickle"]], "plot_tree": [[919, null]], "polynomial_kernel": [[776, null]], "power_transform": [[893, null]], "precision_recall_curve": [[783, null]], "precision_recall_fscore_support": [[784, null]], "precision_score": [[785, null]], "process_routing": [[961, null]], "quantile_transform": [[894, null]], "r2_score": [[786, null]], "r_regression": [[610, null]], "radius_neighbors_graph": [[859, null]], "rand_score": [[787, null]], "randomized_range_finder": [[948, null]], "randomized_svd": [[949, null]], "rbf_kernel": [[777, null]], "recall_score": [[788, null]], "reconstruct_from_patches_2d": [[588, null]], "register_parallel_backend": [[971, null]], "resample": [[972, null]], "ridge_regression": [[688, null]], "robust_scale": [[895, null]], "roc_auc_score": [[789, null]], "roc_curve": [[790, null]], "root_mean_squared_error": [[791, null]], "root_mean_squared_log_error": [[792, null]], "safe_mask": [[973, null]], "safe_sparse_dot": [[950, null]], "safe_sqr": [[974, null]], "sample_without_replacement": [[970, null]], "scale": [[896, null]], "set_config": [[903, null]], "show_versions": [[904, null]], "shrunk_covariance": [[481, null]], "shuffle": [[975, null]], "sigmoid_kernel": [[778, null]], "silhouette_samples": [[793, null]], "silhouette_score": [[794, null]], "single_source_shortest_path_length": [[955, null]], "sklearn": [[3, null], [1049, "sklearn"]], "sklearn.base": [[4, null], [1042, "sklearn-base"], [1043, "sklearn-base"], [1045, "sklearn-base"], [1046, "sklearn-base"], [1047, "sklearn-base"], [1048, "sklearn-base"], [1048, "id2"], [1048, "id10"], [1049, "sklearn-base"], [1050, "sklearn-base"]], "sklearn.calibration": [[5, null], [1042, "sklearn-calibration"], [1043, "sklearn-calibration"], [1045, "sklearn-calibration"], [1046, "sklearn-calibration"], [1046, "id7"], [1047, "sklearn-calibration"], [1048, "sklearn-calibration"], [1048, "id11"], [1049, "sklearn-calibration"], [1049, "id7"], [1050, "sklearn-calibration"], [1050, "id4"], [1051, "sklearn-calibration"], [1051, "id7"]], "sklearn.cluster": [[6, null], [1041, "sklearn-cluster"], [1041, "id2"], [1041, "id11"], [1041, "id24"], [1042, "sklearn-cluster"], [1042, "id8"], [1043, "sklearn-cluster"], [1043, "id5"], [1044, "sklearn-cluster"], [1044, "id2"], [1044, "id5"], [1045, "sklearn-cluster"], [1046, "sklearn-cluster"], [1046, "id1"], [1046, "id8"], [1047, "sklearn-cluster"], [1047, "id8"], [1048, "sklearn-cluster"], [1048, "id12"], [1049, "sklearn-cluster"], [1049, "id8"], [1050, "sklearn-cluster"], [1050, "id5"], [1051, "sklearn-cluster"]], "sklearn.compose": [[7, null], [1041, "sklearn-compose"], [1041, "id3"], [1041, "id6"], [1041, "id12"], [1041, "id25"], [1042, "sklearn-compose"], [1042, "id9"], [1043, "sklearn-compose"], [1044, "sklearn-compose"], [1045, "sklearn-compose"], [1045, "id5"], [1046, "sklearn-compose"], [1047, "sklearn-compose"], [1048, "sklearn-compose"], [1049, "sklearn-compose"], [1050, "sklearn-compose"], [1050, "id6"], [1051, "sklearn-compose"], [1051, "id3"], [1051, "id8"]], "sklearn.covariance": [[8, null], [1041, "sklearn-covariance"], [1041, "id26"], [1045, "sklearn-covariance"], [1046, "sklearn-covariance"], [1047, "sklearn-covariance"], [1049, "sklearn-covariance"], [1050, "sklearn-covariance"]], "sklearn.cross_decomposition": [[9, null], [1043, "sklearn-cross-decomposition"], [1045, "sklearn-cross-decomposition"], [1045, "id6"], [1047, "sklearn-cross-decomposition"], [1049, "sklearn-cross-decomposition"], [1051, "sklearn-cross-decomposition"]], "sklearn.datasets": [[10, null], [1041, "sklearn-datasets"], [1041, "id13"], [1041, "id27"], [1042, "sklearn-datasets"], [1042, "id10"], [1043, "sklearn-datasets"], [1044, "sklearn-datasets"], [1045, "sklearn-datasets"], [1046, "sklearn-datasets"], [1046, "id9"], [1047, "sklearn-datasets"], [1047, "id9"], [1048, "sklearn-datasets"], [1048, "id13"], [1049, "sklearn-datasets"], [1049, "id9"], [1050, "sklearn-datasets"], [1051, "sklearn-datasets"]], "sklearn.decomposition": [[11, null], [1041, "sklearn-decomposition"], [1041, "id4"], [1041, "id14"], [1041, "id28"], [1042, "sklearn-decomposition"], [1042, "id11"], [1043, "sklearn-decomposition"], [1044, "sklearn-decomposition"], [1044, "id6"], [1045, "sklearn-decomposition"], [1045, "id7"], [1046, "sklearn-decomposition"], [1046, "id10"], [1047, "sklearn-decomposition"], [1047, "id10"], [1048, "sklearn-decomposition"], [1048, "id14"], [1049, "sklearn-decomposition"], [1049, "id10"], [1050, "sklearn-decomposition"], [1051, "sklearn-decomposition"], [1051, "id9"]], "sklearn.discriminant_analysis": [[12, null], [1041, "sklearn-discriminant-analysis"], [1042, "sklearn-discriminant-analysis"], [1045, "sklearn-discriminant-analysis"], [1047, "sklearn-discriminant-analysis"], [1048, "sklearn-discriminant-analysis"], [1049, "sklearn-discriminant-analysis"]], "sklearn.dummy": [[13, null], [1041, "sklearn-dummy"], [1042, "sklearn-dummy"], [1043, "sklearn-dummy"], [1046, "sklearn-dummy"], [1047, "sklearn-dummy"], [1051, "sklearn-dummy"]], "sklearn.ensemble": [[14, null], [1041, "sklearn-ensemble"], [1041, "id29"], [1042, "sklearn-ensemble"], [1042, "id12"], [1043, "sklearn-ensemble"], [1044, "sklearn-ensemble"], [1044, "id7"], [1045, "sklearn-ensemble"], [1045, "id8"], [1046, "sklearn-ensemble"], [1046, "id2"], [1046, "id11"], [1047, "sklearn-ensemble"], [1048, "sklearn-ensemble"], [1048, "id3"], [1048, "id15"], [1049, "sklearn-ensemble"], [1049, "id11"], [1050, "sklearn-ensemble"], [1050, "id7"], [1051, "sklearn-ensemble"]], "sklearn.exceptions": [[15, null], [1045, "sklearn-exceptions"], [1049, "sklearn-exceptions"]], "sklearn.experimental": [[16, null]], "sklearn.externals": [[1042, "sklearn-externals"]], "sklearn.feature_extraction": [[17, null], [1041, "sklearn-feature-extraction"], [1041, "id15"], [1041, "id30"], [1042, "sklearn-feature-extraction"], [1043, "sklearn-feature-extraction"], [1044, "sklearn-feature-extraction"], [1044, "id8"], [1045, "sklearn-feature-extraction"], [1045, "id9"], [1046, "sklearn-feature-extraction"], [1046, "id12"], [1047, "sklearn-feature-extraction"], [1048, "sklearn-feature-extraction"], [1049, "sklearn-feature-extraction"], [1050, "sklearn-feature-extraction"], [1051, "sklearn-feature-extraction"]], "sklearn.feature_selection": [[18, null], [1041, "sklearn-feature-selection"], [1043, "sklearn-feature-selection"], [1044, "sklearn-feature-selection"], [1045, "sklearn-feature-selection"], [1046, "sklearn-feature-selection"], [1046, "id13"], [1047, "sklearn-feature-selection"], [1047, "id2"], [1047, "id11"], [1048, "sklearn-feature-selection"], [1048, "id16"], [1049, "sklearn-feature-selection"], [1049, "id12"], [1050, "sklearn-feature-selection"], [1051, "sklearn-feature-selection"]], "sklearn.gaussian_process": [[19, null], [1041, "sklearn-gaussian-process"], [1043, "sklearn-gaussian-process"], [1044, "sklearn-gaussian-process"], [1045, "sklearn-gaussian-process"], [1045, "id10"], [1046, "sklearn-gaussian-process"], [1047, "sklearn-gaussian-process"], [1048, "sklearn-gaussian-process"], [1049, "sklearn-gaussian-process"]], "sklearn.impute": [[20, null], [1041, "sklearn-impute"], [1041, "id31"], [1042, "sklearn-impute"], [1042, "id13"], [1043, "sklearn-impute"], [1043, "id6"], [1044, "sklearn-impute"], [1045, "sklearn-impute"], [1046, "sklearn-impute"], [1047, "sklearn-impute"], [1047, "id12"], [1048, "sklearn-impute"], [1049, "sklearn-impute"], [1049, "id13"], [1050, "sklearn-impute"], [1051, "sklearn-impute"]], "sklearn.inspection": [[21, null], [1042, "sklearn-inspection"], [1042, "id3"], [1042, "id14"], [1043, "sklearn-inspection"], [1043, "id7"], [1044, "sklearn-inspection"], [1044, "id11"], [1045, "sklearn-inspection"], [1046, "sklearn-inspection"], [1047, "sklearn-inspection"], [1048, "sklearn-inspection"], [1048, "id17"], [1049, "sklearn-inspection"], [1050, "sklearn-inspection"], [1050, "id8"], [1051, "sklearn-inspection"]], "sklearn.isotonic": [[22, null], [1041, "sklearn-isotonic"], [1042, "sklearn-isotonic"], [1043, "sklearn-isotonic"], [1045, "sklearn-isotonic"], [1047, "sklearn-isotonic"], [1048, "sklearn-isotonic"]], "sklearn.kernel_approximation": [[23, null], [1043, "sklearn-kernel-approximation"], [1045, "sklearn-kernel-approximation"], [1046, "sklearn-kernel-approximation"], [1047, "sklearn-kernel-approximation"], [1048, "sklearn-kernel-approximation"], [1049, "sklearn-kernel-approximation"]], "sklearn.kernel_ridge": [[24, null], [1050, "sklearn-kernel-ridge"]], "sklearn.linear_model": [[25, null], [1041, "sklearn-linear-model"], [1041, "id16"], [1041, "id32"], [1042, "sklearn-linear-model"], [1042, "id15"], [1043, "sklearn-linear-model"], [1044, "sklearn-linear-model"], [1044, "id9"], [1045, "sklearn-linear-model"], [1045, "id11"], [1046, "sklearn-linear-model"], [1046, "id3"], [1046, "id14"], [1047, "sklearn-linear-model"], [1047, "id13"], [1048, "sklearn-linear-model"], [1048, "id18"], [1049, "sklearn-linear-model"], [1050, "sklearn-linear-model"], [1050, "id9"], [1051, "sklearn-linear-model"]], "sklearn.manifold": [[26, null], [1041, "sklearn-manifold"], [1042, "sklearn-manifold"], [1043, "sklearn-manifold"], [1044, "sklearn-manifold"], [1045, "sklearn-manifold"], [1046, "sklearn-manifold"], [1046, "id15"], [1047, "sklearn-manifold"], [1047, "id14"], [1048, "sklearn-manifold"], [1048, "id19"], [1049, "sklearn-manifold"], [1051, "sklearn-manifold"]], "sklearn.metrics": [[27, null], [1041, "sklearn-metrics"], [1041, "id17"], [1041, "id33"], [1042, "sklearn-metrics"], [1042, "id4"], [1042, "id16"], [1043, "sklearn-metrics"], [1043, "id2"], [1043, "id8"], [1044, "sklearn-metrics"], [1044, "id10"], [1045, "sklearn-metrics"], [1045, "id2"], [1045, "id12"], [1046, "sklearn-metrics"], [1046, "id16"], [1047, "sklearn-metrics"], [1047, "id3"], [1047, "id15"], [1048, "sklearn-metrics"], [1049, "sklearn-metrics"], [1049, "id2"], [1049, "id14"], [1050, "sklearn-metrics"], [1051, "sklearn-metrics"], [1051, "id4"], [1051, "id10"]], "sklearn.mixture": [[28, null], [1041, "sklearn-mixture"], [1041, "id34"], [1042, "sklearn-mixture"], [1046, "sklearn-mixture"], [1047, "sklearn-mixture"], [1049, "sklearn-mixture"], [1049, "id15"], [1051, "sklearn-mixture"]], "sklearn.model_selection": [[29, null], [1041, "sklearn-model-selection"], [1041, "id35"], [1042, "sklearn-model-selection"], [1043, "sklearn-model-selection"], [1043, "id9"], [1043, "id13"], [1044, "sklearn-model-selection"], [1045, "sklearn-model-selection"], [1045, "id13"], [1046, "sklearn-model-selection"], [1047, "sklearn-model-selection"], [1048, "sklearn-model-selection"], [1048, "id20"], [1049, "sklearn-model-selection"], [1050, "sklearn-model-selection"], [1051, "sklearn-model-selection"], [1051, "id11"]], "sklearn.multiclass": [[30, null], [1042, "sklearn-multiclass"], [1045, "sklearn-multiclass"], [1046, "sklearn-multiclass"], [1047, "sklearn-multiclass"]], "sklearn.multioutput": [[31, null], [1041, "sklearn-multioutput"], [1042, "sklearn-multioutput"], [1043, "sklearn-multioutput"], [1044, "sklearn-multioutput"], [1045, "sklearn-multioutput"], [1045, "id14"], [1048, "sklearn-multioutput"], [1049, "sklearn-multioutput"], [1050, "sklearn-multioutput"], [1051, "sklearn-multioutput"]], "sklearn.naive_bayes": [[32, null], [1041, "sklearn-naive-bayes"], [1043, "sklearn-naive-bayes"], [1043, "id10"], [1044, "sklearn-naive-bayes"], [1045, "sklearn-naive-bayes"], [1046, "sklearn-naive-bayes"], [1048, "sklearn-naive-bayes"], [1049, "sklearn-naive-bayes"]], "sklearn.neighbors": [[33, null], [1041, "sklearn-neighbors"], [1041, "id7"], [1041, "id18"], [1041, "id36"], [1042, "sklearn-neighbors"], [1042, "id5"], [1042, "id17"], [1043, "sklearn-neighbors"], [1043, "id11"], [1045, "sklearn-neighbors"], [1046, "sklearn-neighbors"], [1046, "id4"], [1046, "id17"], [1047, "sklearn-neighbors"], [1048, "sklearn-neighbors"], [1049, "sklearn-neighbors"], [1049, "id16"], [1050, "sklearn-neighbors"], [1051, "sklearn-neighbors"]], "sklearn.neural_network": [[34, null], [1041, "sklearn-neural-network"], [1042, "sklearn-neural-network"], [1043, "sklearn-neural-network"], [1044, "sklearn-neural-network"], [1045, "sklearn-neural-network"], [1046, "sklearn-neural-network"], [1047, "sklearn-neural-network"], [1048, "sklearn-neural-network"], [1048, "id21"], [1049, "sklearn-neural-network"]], "sklearn.pipeline": [[35, null], [1041, "sklearn-pipeline"], [1042, "sklearn-pipeline"], [1043, "sklearn-pipeline"], [1044, "sklearn-pipeline"], [1045, "sklearn-pipeline"], [1046, "sklearn-pipeline"], [1046, "id18"], [1047, "sklearn-pipeline"], [1048, "sklearn-pipeline"], [1049, "sklearn-pipeline"], [1051, "sklearn-pipeline"]], "sklearn.preprocessing": [[36, null], [1041, "sklearn-preprocessing"], [1041, "id19"], [1041, "id37"], [1042, "sklearn-preprocessing"], [1042, "id18"], [1043, "sklearn-preprocessing"], [1043, "id12"], [1044, "sklearn-preprocessing"], [1045, "sklearn-preprocessing"], [1045, "id15"], [1046, "sklearn-preprocessing"], [1046, "id19"], [1047, "sklearn-preprocessing"], [1047, "id4"], [1047, "id16"], [1048, "sklearn-preprocessing"], [1048, "id4"], [1048, "id22"], [1049, "sklearn-preprocessing"], [1049, "id17"], [1050, "sklearn-preprocessing"], [1050, "id10"], [1051, "sklearn-preprocessing"]], "sklearn.random_projection": [[37, null], [1047, "sklearn-random-projection"]], "sklearn.semi_supervised": [[38, null], [1043, "sklearn-semi-supervised"], [1044, "sklearn-semi-supervised"], [1045, "sklearn-semi-supervised"], [1045, "id3"], [1045, "id16"], [1049, "sklearn-semi-supervised"]], "sklearn.svm": [[39, null], [1041, "sklearn-svm"], [1041, "id38"], [1042, "sklearn-svm"], [1043, "sklearn-svm"], [1044, "sklearn-svm"], [1045, "sklearn-svm"], [1046, "sklearn-svm"], [1046, "id20"], [1047, "sklearn-svm"], [1048, "sklearn-svm"], [1049, "sklearn-svm"], [1051, "sklearn-svm"]], "sklearn.tree": [[40, null], [1041, "sklearn-tree"], [1042, "sklearn-tree"], [1042, "id19"], [1043, "sklearn-tree"], [1044, "sklearn-tree"], [1045, "sklearn-tree"], [1045, "id17"], [1046, "sklearn-tree"], [1046, "id21"], [1047, "sklearn-tree"], [1047, "id5"], [1047, "id17"], [1048, "sklearn-tree"], [1048, "id5"], [1048, "id23"], [1049, "sklearn-tree"], [1049, "id3"], [1049, "id18"], [1050, "sklearn-tree"], [1050, "id11"], [1051, "sklearn-tree"], [1051, "id12"]], "sklearn.utils": [[41, null], [1041, "sklearn-utils"], [1041, "id20"], [1041, "id39"], [1042, "sklearn-utils"], [1043, "sklearn-utils"], [1043, "id14"], [1044, "sklearn-utils"], [1044, "id12"], [1045, "sklearn-utils"], [1045, "id18"], [1046, "sklearn-utils"], [1046, "id5"], [1046, "id22"], [1047, "sklearn-utils"], [1047, "id18"], [1048, "sklearn-utils"], [1048, "id6"], [1048, "id24"], [1049, "sklearn-utils"], [1050, "sklearn-utils"], [1050, "id12"], [1051, "sklearn-utils"], [1051, "id13"]], "sklearn.utils.sparsefuncs": [[1042, "sklearn-utils-sparsefuncs"]], "skops.io": [[402, "skops-io"]], "smacof": [[695, null]], "solido": [[1026, "id23"]], "sort_graph_by_row_values": [[860, null]], "sparse_encode": [[549, null]], "spectral_clustering": [[462, null]], "spectral_embedding": [[696, null]], "t-SNE: The effect of various perplexity values on the shape": [[237, null]], "t-distributed Stochastic Neighbor Embedding (t-SNE)": [[999, "t-distributed-stochastic-neighbor-embedding-t-sne"]], "top_k_accuracy_score": [[795, null]], "train_test_split": [[831, null]], "trustworthiness": [[697, null]], "type_of_target": [[964, null]], "unique_labels": [[965, null]], "v_measure_score": [[796, null]], "validate_data": [[990, null]], "validation_curve": [[832, null]], "ward_tree": [[463, null]], "weighted_mode": [[951, null]], "zero_one_loss": [[797, null]], "\u201cStatlog\u201d German credit dataset": [[264, "statlog-german-credit-dataset"]]}, "docnames": ["about", "api/deprecated", "api/index", "api/sklearn", "api/sklearn.base", "api/sklearn.calibration", "api/sklearn.cluster", "api/sklearn.compose", "api/sklearn.covariance", "api/sklearn.cross_decomposition", "api/sklearn.datasets", "api/sklearn.decomposition", "api/sklearn.discriminant_analysis", "api/sklearn.dummy", "api/sklearn.ensemble", "api/sklearn.exceptions", "api/sklearn.experimental", "api/sklearn.feature_extraction", "api/sklearn.feature_selection", "api/sklearn.gaussian_process", "api/sklearn.impute", "api/sklearn.inspection", "api/sklearn.isotonic", "api/sklearn.kernel_approximation", "api/sklearn.kernel_ridge", "api/sklearn.linear_model", "api/sklearn.manifold", "api/sklearn.metrics", "api/sklearn.mixture", "api/sklearn.model_selection", "api/sklearn.multiclass", "api/sklearn.multioutput", "api/sklearn.naive_bayes", "api/sklearn.neighbors", "api/sklearn.neural_network", "api/sklearn.pipeline", "api/sklearn.preprocessing", "api/sklearn.random_projection", "api/sklearn.semi_supervised", "api/sklearn.svm", "api/sklearn.tree", "api/sklearn.utils", "auto_examples/applications/index", "auto_examples/applications/plot_cyclical_feature_engineering", "auto_examples/applications/plot_digits_denoising", "auto_examples/applications/plot_face_recognition", "auto_examples/applications/plot_model_complexity_influence", "auto_examples/applications/plot_out_of_core_classification", "auto_examples/applications/plot_outlier_detection_wine", "auto_examples/applications/plot_prediction_latency", "auto_examples/applications/plot_species_distribution_modeling", "auto_examples/applications/plot_stock_market", "auto_examples/applications/plot_time_series_lagged_features", "auto_examples/applications/plot_tomography_l1_reconstruction", "auto_examples/applications/plot_topics_extraction_with_nmf_lda", "auto_examples/applications/wikipedia_principal_eigenvector", "auto_examples/bicluster/index", "auto_examples/bicluster/plot_bicluster_newsgroups", "auto_examples/bicluster/plot_spectral_biclustering", "auto_examples/bicluster/plot_spectral_coclustering", "auto_examples/calibration/index", "auto_examples/calibration/plot_calibration", "auto_examples/calibration/plot_calibration_curve", "auto_examples/calibration/plot_calibration_multiclass", "auto_examples/calibration/plot_compare_calibration", "auto_examples/classification/index", "auto_examples/classification/plot_classification_probability", "auto_examples/classification/plot_classifier_comparison", "auto_examples/classification/plot_digits_classification", "auto_examples/classification/plot_lda", "auto_examples/classification/plot_lda_qda", "auto_examples/cluster/index", "auto_examples/cluster/plot_adjusted_for_chance_measures", "auto_examples/cluster/plot_affinity_propagation", "auto_examples/cluster/plot_agglomerative_clustering", "auto_examples/cluster/plot_agglomerative_clustering_metrics", "auto_examples/cluster/plot_agglomerative_dendrogram", "auto_examples/cluster/plot_birch_vs_minibatchkmeans", "auto_examples/cluster/plot_bisect_kmeans", "auto_examples/cluster/plot_cluster_comparison", "auto_examples/cluster/plot_coin_segmentation", "auto_examples/cluster/plot_coin_ward_segmentation", "auto_examples/cluster/plot_dbscan", "auto_examples/cluster/plot_dict_face_patches", "auto_examples/cluster/plot_digits_agglomeration", "auto_examples/cluster/plot_digits_linkage", "auto_examples/cluster/plot_face_compress", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection", "auto_examples/cluster/plot_hdbscan", "auto_examples/cluster/plot_inductive_clustering", "auto_examples/cluster/plot_kmeans_assumptions", "auto_examples/cluster/plot_kmeans_digits", "auto_examples/cluster/plot_kmeans_plusplus", "auto_examples/cluster/plot_kmeans_silhouette_analysis", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense", "auto_examples/cluster/plot_linkage_comparison", "auto_examples/cluster/plot_mean_shift", "auto_examples/cluster/plot_mini_batch_kmeans", "auto_examples/cluster/plot_optics", "auto_examples/cluster/plot_segmentation_toy", "auto_examples/cluster/plot_ward_structured_vs_unstructured", "auto_examples/compose/index", "auto_examples/compose/plot_column_transformer", "auto_examples/compose/plot_column_transformer_mixed_types", "auto_examples/compose/plot_compare_reduction", "auto_examples/compose/plot_digits_pipe", "auto_examples/compose/plot_feature_union", "auto_examples/compose/plot_transformed_target", "auto_examples/covariance/index", "auto_examples/covariance/plot_covariance_estimation", "auto_examples/covariance/plot_lw_vs_oas", "auto_examples/covariance/plot_mahalanobis_distances", "auto_examples/covariance/plot_robust_vs_empirical_covariance", "auto_examples/covariance/plot_sparse_cov", "auto_examples/cross_decomposition/index", "auto_examples/cross_decomposition/plot_compare_cross_decomposition", "auto_examples/cross_decomposition/plot_pcr_vs_pls", "auto_examples/datasets/index", "auto_examples/datasets/plot_random_multilabel_dataset", "auto_examples/decomposition/index", "auto_examples/decomposition/plot_faces_decomposition", "auto_examples/decomposition/plot_ica_blind_source_separation", "auto_examples/decomposition/plot_ica_vs_pca", "auto_examples/decomposition/plot_image_denoising", "auto_examples/decomposition/plot_incremental_pca", "auto_examples/decomposition/plot_kernel_pca", "auto_examples/decomposition/plot_pca_iris", "auto_examples/decomposition/plot_pca_vs_fa_model_selection", "auto_examples/decomposition/plot_pca_vs_lda", "auto_examples/decomposition/plot_sparse_coding", "auto_examples/decomposition/plot_varimax_fa", "auto_examples/developing_estimators/index", "auto_examples/developing_estimators/sklearn_is_fitted", "auto_examples/ensemble/index", "auto_examples/ensemble/plot_adaboost_multiclass", "auto_examples/ensemble/plot_adaboost_regression", "auto_examples/ensemble/plot_adaboost_twoclass", "auto_examples/ensemble/plot_bias_variance", "auto_examples/ensemble/plot_ensemble_oob", "auto_examples/ensemble/plot_feature_transformation", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison", "auto_examples/ensemble/plot_forest_importances", "auto_examples/ensemble/plot_forest_iris", "auto_examples/ensemble/plot_gradient_boosting_categorical", "auto_examples/ensemble/plot_gradient_boosting_early_stopping", "auto_examples/ensemble/plot_gradient_boosting_oob", "auto_examples/ensemble/plot_gradient_boosting_quantile", "auto_examples/ensemble/plot_gradient_boosting_regression", "auto_examples/ensemble/plot_gradient_boosting_regularization", "auto_examples/ensemble/plot_hgbt_regression", "auto_examples/ensemble/plot_isolation_forest", "auto_examples/ensemble/plot_monotonic_constraints", "auto_examples/ensemble/plot_random_forest_embedding", "auto_examples/ensemble/plot_random_forest_regression_multioutput", "auto_examples/ensemble/plot_stack_predictors", "auto_examples/ensemble/plot_voting_decision_regions", "auto_examples/ensemble/plot_voting_probas", "auto_examples/ensemble/plot_voting_regressor", "auto_examples/exercises/index", "auto_examples/exercises/plot_cv_diabetes", "auto_examples/exercises/plot_digits_classification_exercise", "auto_examples/exercises/plot_iris_exercise", "auto_examples/feature_selection/index", "auto_examples/feature_selection/plot_f_test_vs_mi", "auto_examples/feature_selection/plot_feature_selection", "auto_examples/feature_selection/plot_feature_selection_pipeline", "auto_examples/feature_selection/plot_rfe_digits", "auto_examples/feature_selection/plot_rfe_with_cross_validation", "auto_examples/feature_selection/plot_select_from_model_diabetes", "auto_examples/gaussian_process/index", "auto_examples/gaussian_process/plot_compare_gpr_krr", "auto_examples/gaussian_process/plot_gpc", "auto_examples/gaussian_process/plot_gpc_iris", "auto_examples/gaussian_process/plot_gpc_isoprobability", "auto_examples/gaussian_process/plot_gpc_xor", "auto_examples/gaussian_process/plot_gpr_co2", "auto_examples/gaussian_process/plot_gpr_noisy", "auto_examples/gaussian_process/plot_gpr_noisy_targets", "auto_examples/gaussian_process/plot_gpr_on_structured_data", "auto_examples/gaussian_process/plot_gpr_prior_posterior", "auto_examples/impute/index", "auto_examples/impute/plot_iterative_imputer_variants_comparison", "auto_examples/impute/plot_missing_values", "auto_examples/index", "auto_examples/inspection/index", "auto_examples/inspection/plot_causal_interpretation", "auto_examples/inspection/plot_linear_model_coefficient_interpretation", "auto_examples/inspection/plot_partial_dependence", "auto_examples/inspection/plot_permutation_importance", "auto_examples/inspection/plot_permutation_importance_multicollinear", "auto_examples/kernel_approximation/index", "auto_examples/kernel_approximation/plot_scalable_poly_kernels", "auto_examples/linear_model/index", "auto_examples/linear_model/plot_ard", "auto_examples/linear_model/plot_bayesian_ridge_curvefit", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples", "auto_examples/linear_model/plot_huber_vs_ridge", "auto_examples/linear_model/plot_iris_logistic", "auto_examples/linear_model/plot_lasso_and_elasticnet", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data", "auto_examples/linear_model/plot_lasso_lars_ic", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path", "auto_examples/linear_model/plot_lasso_model_selection", "auto_examples/linear_model/plot_logistic", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity", "auto_examples/linear_model/plot_logistic_multinomial", "auto_examples/linear_model/plot_logistic_path", "auto_examples/linear_model/plot_multi_task_lasso_support", "auto_examples/linear_model/plot_nnls", "auto_examples/linear_model/plot_ols", "auto_examples/linear_model/plot_ols_ridge_variance", "auto_examples/linear_model/plot_omp", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss", "auto_examples/linear_model/plot_polynomial_interpolation", "auto_examples/linear_model/plot_quantile_regression", "auto_examples/linear_model/plot_ransac", "auto_examples/linear_model/plot_ridge_coeffs", "auto_examples/linear_model/plot_ridge_path", "auto_examples/linear_model/plot_robust_fit", "auto_examples/linear_model/plot_sgd_comparison", "auto_examples/linear_model/plot_sgd_early_stopping", "auto_examples/linear_model/plot_sgd_iris", "auto_examples/linear_model/plot_sgd_loss_functions", "auto_examples/linear_model/plot_sgd_penalties", "auto_examples/linear_model/plot_sgd_separating_hyperplane", "auto_examples/linear_model/plot_sgd_weighted_samples", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist", "auto_examples/linear_model/plot_theilsen", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims", "auto_examples/manifold/index", "auto_examples/manifold/plot_compare_methods", "auto_examples/manifold/plot_lle_digits", "auto_examples/manifold/plot_manifold_sphere", "auto_examples/manifold/plot_mds", "auto_examples/manifold/plot_swissroll", "auto_examples/manifold/plot_t_sne_perplexity", "auto_examples/miscellaneous/index", "auto_examples/miscellaneous/plot_anomaly_comparison", "auto_examples/miscellaneous/plot_display_object_visualization", "auto_examples/miscellaneous/plot_estimator_representation", "auto_examples/miscellaneous/plot_isotonic_regression", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound", "auto_examples/miscellaneous/plot_kernel_approximation", "auto_examples/miscellaneous/plot_kernel_ridge_regression", "auto_examples/miscellaneous/plot_metadata_routing", "auto_examples/miscellaneous/plot_multilabel", "auto_examples/miscellaneous/plot_multioutput_face_completion", "auto_examples/miscellaneous/plot_outlier_detection_bench", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api", "auto_examples/miscellaneous/plot_pipeline_display", "auto_examples/miscellaneous/plot_roc_curve_visualization_api", "auto_examples/miscellaneous/plot_set_output", "auto_examples/mixture/index", "auto_examples/mixture/plot_concentration_prior", "auto_examples/mixture/plot_gmm", "auto_examples/mixture/plot_gmm_covariances", "auto_examples/mixture/plot_gmm_init", "auto_examples/mixture/plot_gmm_pdf", "auto_examples/mixture/plot_gmm_selection", "auto_examples/mixture/plot_gmm_sin", "auto_examples/model_selection/index", "auto_examples/model_selection/plot_confusion_matrix", "auto_examples/model_selection/plot_cost_sensitive_learning", "auto_examples/model_selection/plot_cv_indices", "auto_examples/model_selection/plot_cv_predict", "auto_examples/model_selection/plot_det", "auto_examples/model_selection/plot_grid_search_digits", "auto_examples/model_selection/plot_grid_search_refit_callable", "auto_examples/model_selection/plot_grid_search_stats", "auto_examples/model_selection/plot_grid_search_text_feature_extraction", "auto_examples/model_selection/plot_learning_curve", "auto_examples/model_selection/plot_likelihood_ratios", "auto_examples/model_selection/plot_multi_metric_evaluation", "auto_examples/model_selection/plot_nested_cross_validation_iris", "auto_examples/model_selection/plot_permutation_tests_for_classification", "auto_examples/model_selection/plot_precision_recall", "auto_examples/model_selection/plot_randomized_search", "auto_examples/model_selection/plot_roc", "auto_examples/model_selection/plot_roc_crossval", "auto_examples/model_selection/plot_successive_halving_heatmap", "auto_examples/model_selection/plot_successive_halving_iterations", "auto_examples/model_selection/plot_train_error_vs_test_error", "auto_examples/model_selection/plot_tuned_decision_threshold", "auto_examples/model_selection/plot_underfitting_overfitting", "auto_examples/multiclass/index", "auto_examples/multiclass/plot_multiclass_overview", "auto_examples/multioutput/index", "auto_examples/multioutput/plot_classifier_chain_yeast", "auto_examples/neighbors/approximate_nearest_neighbors", "auto_examples/neighbors/index", "auto_examples/neighbors/plot_caching_nearest_neighbors", "auto_examples/neighbors/plot_classification", "auto_examples/neighbors/plot_digits_kde_sampling", "auto_examples/neighbors/plot_kde_1d", "auto_examples/neighbors/plot_lof_novelty_detection", "auto_examples/neighbors/plot_lof_outlier_detection", "auto_examples/neighbors/plot_nca_classification", "auto_examples/neighbors/plot_nca_dim_reduction", "auto_examples/neighbors/plot_nca_illustration", "auto_examples/neighbors/plot_nearest_centroid", "auto_examples/neighbors/plot_regression", "auto_examples/neighbors/plot_species_kde", "auto_examples/neural_networks/index", "auto_examples/neural_networks/plot_mlp_alpha", "auto_examples/neural_networks/plot_mlp_training_curves", "auto_examples/neural_networks/plot_mnist_filters", "auto_examples/neural_networks/plot_rbm_logistic_classification", "auto_examples/preprocessing/index", "auto_examples/preprocessing/plot_all_scaling", "auto_examples/preprocessing/plot_discretization", "auto_examples/preprocessing/plot_discretization_classification", "auto_examples/preprocessing/plot_discretization_strategies", "auto_examples/preprocessing/plot_map_data_to_normal", "auto_examples/preprocessing/plot_scaling_importance", "auto_examples/preprocessing/plot_target_encoder", "auto_examples/preprocessing/plot_target_encoder_cross_val", "auto_examples/release_highlights/index", "auto_examples/release_highlights/plot_release_highlights_0_22_0", "auto_examples/release_highlights/plot_release_highlights_0_23_0", "auto_examples/release_highlights/plot_release_highlights_0_24_0", "auto_examples/release_highlights/plot_release_highlights_1_0_0", "auto_examples/release_highlights/plot_release_highlights_1_1_0", "auto_examples/release_highlights/plot_release_highlights_1_2_0", "auto_examples/release_highlights/plot_release_highlights_1_3_0", "auto_examples/release_highlights/plot_release_highlights_1_4_0", "auto_examples/release_highlights/plot_release_highlights_1_5_0", "auto_examples/semi_supervised/index", "auto_examples/semi_supervised/plot_label_propagation_digits", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning", "auto_examples/semi_supervised/plot_label_propagation_structure", "auto_examples/semi_supervised/plot_self_training_varying_threshold", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris", "auto_examples/svm/index", "auto_examples/svm/plot_custom_kernel", "auto_examples/svm/plot_iris_svc", "auto_examples/svm/plot_linearsvc_support_vectors", "auto_examples/svm/plot_oneclass", "auto_examples/svm/plot_rbf_parameters", "auto_examples/svm/plot_separating_hyperplane", "auto_examples/svm/plot_separating_hyperplane_unbalanced", "auto_examples/svm/plot_svm_anova", "auto_examples/svm/plot_svm_kernels", "auto_examples/svm/plot_svm_margin", "auto_examples/svm/plot_svm_regression", "auto_examples/svm/plot_svm_scale_c", "auto_examples/svm/plot_svm_tie_breaking", "auto_examples/svm/plot_weighted_samples", "auto_examples/text/index", "auto_examples/text/plot_document_classification_20newsgroups", "auto_examples/text/plot_document_clustering", "auto_examples/text/plot_hashing_vs_dict_vectorizer", "auto_examples/tree/index", "auto_examples/tree/plot_cost_complexity_pruning", "auto_examples/tree/plot_iris_dtc", "auto_examples/tree/plot_tree_regression", "auto_examples/tree/plot_unveil_tree_structure", "common_pitfalls", "communication_team", "communication_team_emeritus", "computing", "computing/computational_performance", "computing/parallelism", "computing/scaling_strategies", "contributor_experience_team", "contributor_experience_team_emeritus", "data_transforms", "datasets", "datasets/loading_other_datasets", "datasets/real_world", "datasets/sample_generators", "datasets/toy_dataset", "developers/advanced_installation", "developers/bug_triaging", "developers/contributing", "developers/cython", "developers/develop", "developers/index", "developers/maintainer", "developers/minimal_reproducer", "developers/performance", "developers/plotting", "developers/tips", "developers/utilities", "dispatching", "documentation_team", "faq", "getting_started", "glossary", "governance", "index", "inspection", "install", "install_instructions_conda", "machine_learning_map", "maintainers", "maintainers_emeritus", "metadata_routing", "min_dependency_substitutions", "min_dependency_table", "model_persistence", "model_selection", "modules/array_api", "modules/biclustering", "modules/calibration", "modules/classification_threshold", "modules/clustering", "modules/compose", "modules/covariance", "modules/cross_decomposition", "modules/cross_validation", "modules/decomposition", "modules/density", "modules/ensemble", "modules/feature_extraction", "modules/feature_selection", "modules/gaussian_process", "modules/generated/dbscan-function", "modules/generated/fastica-function", "modules/generated/oas-function", "modules/generated/sklearn.base.BaseEstimator", "modules/generated/sklearn.base.BiclusterMixin", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin", "modules/generated/sklearn.base.ClassifierMixin", "modules/generated/sklearn.base.ClusterMixin", "modules/generated/sklearn.base.DensityMixin", "modules/generated/sklearn.base.MetaEstimatorMixin", "modules/generated/sklearn.base.OneToOneFeatureMixin", "modules/generated/sklearn.base.OutlierMixin", "modules/generated/sklearn.base.RegressorMixin", "modules/generated/sklearn.base.TransformerMixin", "modules/generated/sklearn.base.clone", "modules/generated/sklearn.base.is_classifier", "modules/generated/sklearn.base.is_clusterer", "modules/generated/sklearn.base.is_regressor", "modules/generated/sklearn.calibration.CalibratedClassifierCV", "modules/generated/sklearn.calibration.CalibrationDisplay", "modules/generated/sklearn.calibration.calibration_curve", "modules/generated/sklearn.cluster.AffinityPropagation", "modules/generated/sklearn.cluster.AgglomerativeClustering", "modules/generated/sklearn.cluster.Birch", "modules/generated/sklearn.cluster.BisectingKMeans", "modules/generated/sklearn.cluster.DBSCAN", "modules/generated/sklearn.cluster.FeatureAgglomeration", "modules/generated/sklearn.cluster.HDBSCAN", "modules/generated/sklearn.cluster.KMeans", "modules/generated/sklearn.cluster.MeanShift", "modules/generated/sklearn.cluster.MiniBatchKMeans", "modules/generated/sklearn.cluster.OPTICS", "modules/generated/sklearn.cluster.SpectralBiclustering", "modules/generated/sklearn.cluster.SpectralClustering", "modules/generated/sklearn.cluster.SpectralCoclustering", "modules/generated/sklearn.cluster.affinity_propagation", "modules/generated/sklearn.cluster.cluster_optics_dbscan", "modules/generated/sklearn.cluster.cluster_optics_xi", "modules/generated/sklearn.cluster.compute_optics_graph", "modules/generated/sklearn.cluster.estimate_bandwidth", "modules/generated/sklearn.cluster.k_means", "modules/generated/sklearn.cluster.kmeans_plusplus", "modules/generated/sklearn.cluster.mean_shift", "modules/generated/sklearn.cluster.spectral_clustering", "modules/generated/sklearn.cluster.ward_tree", "modules/generated/sklearn.compose.ColumnTransformer", "modules/generated/sklearn.compose.TransformedTargetRegressor", "modules/generated/sklearn.compose.make_column_selector", "modules/generated/sklearn.compose.make_column_transformer", "modules/generated/sklearn.config_context", "modules/generated/sklearn.covariance.EllipticEnvelope", "modules/generated/sklearn.covariance.EmpiricalCovariance", "modules/generated/sklearn.covariance.GraphicalLasso", "modules/generated/sklearn.covariance.GraphicalLassoCV", "modules/generated/sklearn.covariance.LedoitWolf", "modules/generated/sklearn.covariance.MinCovDet", "modules/generated/sklearn.covariance.OAS", "modules/generated/sklearn.covariance.ShrunkCovariance", "modules/generated/sklearn.covariance.empirical_covariance", "modules/generated/sklearn.covariance.graphical_lasso", "modules/generated/sklearn.covariance.ledoit_wolf", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage", "modules/generated/sklearn.covariance.shrunk_covariance", "modules/generated/sklearn.cross_decomposition.CCA", "modules/generated/sklearn.cross_decomposition.PLSCanonical", "modules/generated/sklearn.cross_decomposition.PLSRegression", "modules/generated/sklearn.cross_decomposition.PLSSVD", "modules/generated/sklearn.datasets.clear_data_home", "modules/generated/sklearn.datasets.dump_svmlight_file", "modules/generated/sklearn.datasets.fetch_20newsgroups", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized", "modules/generated/sklearn.datasets.fetch_california_housing", "modules/generated/sklearn.datasets.fetch_covtype", "modules/generated/sklearn.datasets.fetch_file", "modules/generated/sklearn.datasets.fetch_kddcup99", "modules/generated/sklearn.datasets.fetch_lfw_pairs", "modules/generated/sklearn.datasets.fetch_lfw_people", "modules/generated/sklearn.datasets.fetch_olivetti_faces", "modules/generated/sklearn.datasets.fetch_openml", "modules/generated/sklearn.datasets.fetch_rcv1", "modules/generated/sklearn.datasets.fetch_species_distributions", "modules/generated/sklearn.datasets.get_data_home", "modules/generated/sklearn.datasets.load_breast_cancer", "modules/generated/sklearn.datasets.load_diabetes", "modules/generated/sklearn.datasets.load_digits", "modules/generated/sklearn.datasets.load_files", "modules/generated/sklearn.datasets.load_iris", "modules/generated/sklearn.datasets.load_linnerud", "modules/generated/sklearn.datasets.load_sample_image", "modules/generated/sklearn.datasets.load_sample_images", "modules/generated/sklearn.datasets.load_svmlight_file", "modules/generated/sklearn.datasets.load_svmlight_files", "modules/generated/sklearn.datasets.load_wine", "modules/generated/sklearn.datasets.make_biclusters", "modules/generated/sklearn.datasets.make_blobs", "modules/generated/sklearn.datasets.make_checkerboard", "modules/generated/sklearn.datasets.make_circles", "modules/generated/sklearn.datasets.make_classification", "modules/generated/sklearn.datasets.make_friedman1", "modules/generated/sklearn.datasets.make_friedman2", "modules/generated/sklearn.datasets.make_friedman3", "modules/generated/sklearn.datasets.make_gaussian_quantiles", "modules/generated/sklearn.datasets.make_hastie_10_2", "modules/generated/sklearn.datasets.make_low_rank_matrix", "modules/generated/sklearn.datasets.make_moons", "modules/generated/sklearn.datasets.make_multilabel_classification", "modules/generated/sklearn.datasets.make_regression", "modules/generated/sklearn.datasets.make_s_curve", "modules/generated/sklearn.datasets.make_sparse_coded_signal", "modules/generated/sklearn.datasets.make_sparse_spd_matrix", "modules/generated/sklearn.datasets.make_sparse_uncorrelated", "modules/generated/sklearn.datasets.make_spd_matrix", "modules/generated/sklearn.datasets.make_swiss_roll", "modules/generated/sklearn.decomposition.DictionaryLearning", "modules/generated/sklearn.decomposition.FactorAnalysis", "modules/generated/sklearn.decomposition.FastICA", "modules/generated/sklearn.decomposition.IncrementalPCA", "modules/generated/sklearn.decomposition.KernelPCA", "modules/generated/sklearn.decomposition.LatentDirichletAllocation", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning", "modules/generated/sklearn.decomposition.MiniBatchNMF", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA", "modules/generated/sklearn.decomposition.NMF", "modules/generated/sklearn.decomposition.PCA", "modules/generated/sklearn.decomposition.SparseCoder", "modules/generated/sklearn.decomposition.SparsePCA", "modules/generated/sklearn.decomposition.TruncatedSVD", "modules/generated/sklearn.decomposition.dict_learning", "modules/generated/sklearn.decomposition.dict_learning_online", "modules/generated/sklearn.decomposition.non_negative_factorization", "modules/generated/sklearn.decomposition.sparse_encode", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", "modules/generated/sklearn.dummy.DummyClassifier", "modules/generated/sklearn.dummy.DummyRegressor", "modules/generated/sklearn.ensemble.AdaBoostClassifier", "modules/generated/sklearn.ensemble.AdaBoostRegressor", "modules/generated/sklearn.ensemble.BaggingClassifier", "modules/generated/sklearn.ensemble.BaggingRegressor", "modules/generated/sklearn.ensemble.ExtraTreesClassifier", "modules/generated/sklearn.ensemble.ExtraTreesRegressor", "modules/generated/sklearn.ensemble.GradientBoostingClassifier", "modules/generated/sklearn.ensemble.GradientBoostingRegressor", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor", "modules/generated/sklearn.ensemble.IsolationForest", "modules/generated/sklearn.ensemble.RandomForestClassifier", "modules/generated/sklearn.ensemble.RandomForestRegressor", "modules/generated/sklearn.ensemble.RandomTreesEmbedding", "modules/generated/sklearn.ensemble.StackingClassifier", "modules/generated/sklearn.ensemble.StackingRegressor", "modules/generated/sklearn.ensemble.VotingClassifier", "modules/generated/sklearn.ensemble.VotingRegressor", "modules/generated/sklearn.exceptions.ConvergenceWarning", "modules/generated/sklearn.exceptions.DataConversionWarning", "modules/generated/sklearn.exceptions.DataDimensionalityWarning", "modules/generated/sklearn.exceptions.EfficiencyWarning", "modules/generated/sklearn.exceptions.FitFailedWarning", "modules/generated/sklearn.exceptions.InconsistentVersionWarning", "modules/generated/sklearn.exceptions.NotFittedError", "modules/generated/sklearn.exceptions.UndefinedMetricWarning", "modules/generated/sklearn.experimental.enable_halving_search_cv", "modules/generated/sklearn.experimental.enable_iterative_imputer", "modules/generated/sklearn.feature_extraction.DictVectorizer", "modules/generated/sklearn.feature_extraction.FeatureHasher", "modules/generated/sklearn.feature_extraction.image.PatchExtractor", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d", "modules/generated/sklearn.feature_extraction.image.grid_to_graph", "modules/generated/sklearn.feature_extraction.image.img_to_graph", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d", "modules/generated/sklearn.feature_extraction.text.CountVectorizer", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect", "modules/generated/sklearn.feature_selection.RFE", "modules/generated/sklearn.feature_selection.RFECV", "modules/generated/sklearn.feature_selection.SelectFdr", "modules/generated/sklearn.feature_selection.SelectFpr", "modules/generated/sklearn.feature_selection.SelectFromModel", "modules/generated/sklearn.feature_selection.SelectFwe", "modules/generated/sklearn.feature_selection.SelectKBest", "modules/generated/sklearn.feature_selection.SelectPercentile", "modules/generated/sklearn.feature_selection.SelectorMixin", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector", "modules/generated/sklearn.feature_selection.VarianceThreshold", "modules/generated/sklearn.feature_selection.chi2", "modules/generated/sklearn.feature_selection.f_classif", "modules/generated/sklearn.feature_selection.f_regression", "modules/generated/sklearn.feature_selection.mutual_info_classif", "modules/generated/sklearn.feature_selection.mutual_info_regression", "modules/generated/sklearn.feature_selection.r_regression", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel", "modules/generated/sklearn.gaussian_process.kernels.DotProduct", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter", "modules/generated/sklearn.gaussian_process.kernels.Kernel", "modules/generated/sklearn.gaussian_process.kernels.Matern", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel", "modules/generated/sklearn.gaussian_process.kernels.Product", "modules/generated/sklearn.gaussian_process.kernels.RBF", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic", "modules/generated/sklearn.gaussian_process.kernels.Sum", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel", "modules/generated/sklearn.get_config", "modules/generated/sklearn.impute.IterativeImputer", "modules/generated/sklearn.impute.KNNImputer", "modules/generated/sklearn.impute.MissingIndicator", "modules/generated/sklearn.impute.SimpleImputer", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay", "modules/generated/sklearn.inspection.PartialDependenceDisplay", "modules/generated/sklearn.inspection.partial_dependence", "modules/generated/sklearn.inspection.permutation_importance", "modules/generated/sklearn.isotonic.IsotonicRegression", "modules/generated/sklearn.isotonic.check_increasing", "modules/generated/sklearn.isotonic.isotonic_regression", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler", "modules/generated/sklearn.kernel_approximation.Nystroem", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch", "modules/generated/sklearn.kernel_approximation.RBFSampler", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler", "modules/generated/sklearn.kernel_ridge.KernelRidge", "modules/generated/sklearn.linear_model.ARDRegression", "modules/generated/sklearn.linear_model.BayesianRidge", "modules/generated/sklearn.linear_model.ElasticNet", "modules/generated/sklearn.linear_model.ElasticNetCV", "modules/generated/sklearn.linear_model.GammaRegressor", "modules/generated/sklearn.linear_model.HuberRegressor", "modules/generated/sklearn.linear_model.Lars", "modules/generated/sklearn.linear_model.LarsCV", "modules/generated/sklearn.linear_model.Lasso", "modules/generated/sklearn.linear_model.LassoCV", "modules/generated/sklearn.linear_model.LassoLars", "modules/generated/sklearn.linear_model.LassoLarsCV", "modules/generated/sklearn.linear_model.LassoLarsIC", "modules/generated/sklearn.linear_model.LinearRegression", "modules/generated/sklearn.linear_model.LogisticRegression", "modules/generated/sklearn.linear_model.LogisticRegressionCV", "modules/generated/sklearn.linear_model.MultiTaskElasticNet", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV", "modules/generated/sklearn.linear_model.MultiTaskLasso", "modules/generated/sklearn.linear_model.MultiTaskLassoCV", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor", "modules/generated/sklearn.linear_model.Perceptron", "modules/generated/sklearn.linear_model.PoissonRegressor", "modules/generated/sklearn.linear_model.QuantileRegressor", "modules/generated/sklearn.linear_model.RANSACRegressor", "modules/generated/sklearn.linear_model.Ridge", "modules/generated/sklearn.linear_model.RidgeCV", "modules/generated/sklearn.linear_model.RidgeClassifier", "modules/generated/sklearn.linear_model.RidgeClassifierCV", "modules/generated/sklearn.linear_model.SGDClassifier", "modules/generated/sklearn.linear_model.SGDOneClassSVM", "modules/generated/sklearn.linear_model.SGDRegressor", "modules/generated/sklearn.linear_model.TheilSenRegressor", "modules/generated/sklearn.linear_model.TweedieRegressor", "modules/generated/sklearn.linear_model.enet_path", "modules/generated/sklearn.linear_model.lars_path", "modules/generated/sklearn.linear_model.lars_path_gram", "modules/generated/sklearn.linear_model.lasso_path", "modules/generated/sklearn.linear_model.orthogonal_mp", "modules/generated/sklearn.linear_model.orthogonal_mp_gram", "modules/generated/sklearn.linear_model.ridge_regression", "modules/generated/sklearn.manifold.Isomap", "modules/generated/sklearn.manifold.LocallyLinearEmbedding", "modules/generated/sklearn.manifold.MDS", "modules/generated/sklearn.manifold.SpectralEmbedding", "modules/generated/sklearn.manifold.TSNE", "modules/generated/sklearn.manifold.locally_linear_embedding", "modules/generated/sklearn.manifold.smacof", "modules/generated/sklearn.manifold.spectral_embedding", "modules/generated/sklearn.manifold.trustworthiness", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay", "modules/generated/sklearn.metrics.DetCurveDisplay", "modules/generated/sklearn.metrics.DistanceMetric", "modules/generated/sklearn.metrics.PrecisionRecallDisplay", "modules/generated/sklearn.metrics.PredictionErrorDisplay", "modules/generated/sklearn.metrics.RocCurveDisplay", "modules/generated/sklearn.metrics.accuracy_score", "modules/generated/sklearn.metrics.adjusted_mutual_info_score", "modules/generated/sklearn.metrics.adjusted_rand_score", "modules/generated/sklearn.metrics.auc", "modules/generated/sklearn.metrics.average_precision_score", "modules/generated/sklearn.metrics.balanced_accuracy_score", "modules/generated/sklearn.metrics.brier_score_loss", "modules/generated/sklearn.metrics.calinski_harabasz_score", "modules/generated/sklearn.metrics.check_scoring", "modules/generated/sklearn.metrics.class_likelihood_ratios", "modules/generated/sklearn.metrics.classification_report", "modules/generated/sklearn.metrics.cluster.contingency_matrix", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix", "modules/generated/sklearn.metrics.cohen_kappa_score", "modules/generated/sklearn.metrics.completeness_score", "modules/generated/sklearn.metrics.confusion_matrix", "modules/generated/sklearn.metrics.consensus_score", "modules/generated/sklearn.metrics.coverage_error", "modules/generated/sklearn.metrics.d2_absolute_error_score", "modules/generated/sklearn.metrics.d2_log_loss_score", "modules/generated/sklearn.metrics.d2_pinball_score", "modules/generated/sklearn.metrics.d2_tweedie_score", "modules/generated/sklearn.metrics.davies_bouldin_score", "modules/generated/sklearn.metrics.dcg_score", "modules/generated/sklearn.metrics.det_curve", "modules/generated/sklearn.metrics.explained_variance_score", "modules/generated/sklearn.metrics.f1_score", "modules/generated/sklearn.metrics.fbeta_score", "modules/generated/sklearn.metrics.fowlkes_mallows_score", "modules/generated/sklearn.metrics.get_scorer", "modules/generated/sklearn.metrics.get_scorer_names", "modules/generated/sklearn.metrics.hamming_loss", "modules/generated/sklearn.metrics.hinge_loss", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure", "modules/generated/sklearn.metrics.homogeneity_score", "modules/generated/sklearn.metrics.jaccard_score", "modules/generated/sklearn.metrics.label_ranking_average_precision_score", "modules/generated/sklearn.metrics.label_ranking_loss", "modules/generated/sklearn.metrics.log_loss", "modules/generated/sklearn.metrics.make_scorer", "modules/generated/sklearn.metrics.matthews_corrcoef", "modules/generated/sklearn.metrics.max_error", "modules/generated/sklearn.metrics.mean_absolute_error", "modules/generated/sklearn.metrics.mean_absolute_percentage_error", "modules/generated/sklearn.metrics.mean_gamma_deviance", "modules/generated/sklearn.metrics.mean_pinball_loss", "modules/generated/sklearn.metrics.mean_poisson_deviance", "modules/generated/sklearn.metrics.mean_squared_error", "modules/generated/sklearn.metrics.mean_squared_log_error", "modules/generated/sklearn.metrics.mean_tweedie_deviance", "modules/generated/sklearn.metrics.median_absolute_error", "modules/generated/sklearn.metrics.multilabel_confusion_matrix", "modules/generated/sklearn.metrics.mutual_info_score", "modules/generated/sklearn.metrics.ndcg_score", "modules/generated/sklearn.metrics.normalized_mutual_info_score", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel", "modules/generated/sklearn.metrics.pairwise.chi2_kernel", "modules/generated/sklearn.metrics.pairwise.cosine_distances", "modules/generated/sklearn.metrics.pairwise.cosine_similarity", "modules/generated/sklearn.metrics.pairwise.distance_metrics", "modules/generated/sklearn.metrics.pairwise.euclidean_distances", "modules/generated/sklearn.metrics.pairwise.haversine_distances", "modules/generated/sklearn.metrics.pairwise.kernel_metrics", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel", "modules/generated/sklearn.metrics.pairwise.linear_kernel", "modules/generated/sklearn.metrics.pairwise.manhattan_distances", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances", "modules/generated/sklearn.metrics.pairwise.paired_distances", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel", "modules/generated/sklearn.metrics.pairwise.rbf_kernel", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel", "modules/generated/sklearn.metrics.pairwise_distances", "modules/generated/sklearn.metrics.pairwise_distances_argmin", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min", "modules/generated/sklearn.metrics.pairwise_distances_chunked", "modules/generated/sklearn.metrics.precision_recall_curve", "modules/generated/sklearn.metrics.precision_recall_fscore_support", "modules/generated/sklearn.metrics.precision_score", "modules/generated/sklearn.metrics.r2_score", "modules/generated/sklearn.metrics.rand_score", "modules/generated/sklearn.metrics.recall_score", "modules/generated/sklearn.metrics.roc_auc_score", "modules/generated/sklearn.metrics.roc_curve", "modules/generated/sklearn.metrics.root_mean_squared_error", "modules/generated/sklearn.metrics.root_mean_squared_log_error", "modules/generated/sklearn.metrics.silhouette_samples", "modules/generated/sklearn.metrics.silhouette_score", "modules/generated/sklearn.metrics.top_k_accuracy_score", "modules/generated/sklearn.metrics.v_measure_score", "modules/generated/sklearn.metrics.zero_one_loss", "modules/generated/sklearn.mixture.BayesianGaussianMixture", "modules/generated/sklearn.mixture.GaussianMixture", "modules/generated/sklearn.model_selection.FixedThresholdClassifier", "modules/generated/sklearn.model_selection.GridSearchCV", "modules/generated/sklearn.model_selection.GroupKFold", "modules/generated/sklearn.model_selection.GroupShuffleSplit", "modules/generated/sklearn.model_selection.HalvingGridSearchCV", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV", "modules/generated/sklearn.model_selection.KFold", "modules/generated/sklearn.model_selection.LearningCurveDisplay", "modules/generated/sklearn.model_selection.LeaveOneGroupOut", "modules/generated/sklearn.model_selection.LeaveOneOut", "modules/generated/sklearn.model_selection.LeavePGroupsOut", "modules/generated/sklearn.model_selection.LeavePOut", "modules/generated/sklearn.model_selection.ParameterGrid", "modules/generated/sklearn.model_selection.ParameterSampler", "modules/generated/sklearn.model_selection.PredefinedSplit", "modules/generated/sklearn.model_selection.RandomizedSearchCV", "modules/generated/sklearn.model_selection.RepeatedKFold", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold", "modules/generated/sklearn.model_selection.ShuffleSplit", "modules/generated/sklearn.model_selection.StratifiedGroupKFold", "modules/generated/sklearn.model_selection.StratifiedKFold", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit", "modules/generated/sklearn.model_selection.TimeSeriesSplit", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV", "modules/generated/sklearn.model_selection.ValidationCurveDisplay", "modules/generated/sklearn.model_selection.check_cv", "modules/generated/sklearn.model_selection.cross_val_predict", "modules/generated/sklearn.model_selection.cross_val_score", "modules/generated/sklearn.model_selection.cross_validate", "modules/generated/sklearn.model_selection.learning_curve", "modules/generated/sklearn.model_selection.permutation_test_score", "modules/generated/sklearn.model_selection.train_test_split", "modules/generated/sklearn.model_selection.validation_curve", "modules/generated/sklearn.multiclass.OneVsOneClassifier", "modules/generated/sklearn.multiclass.OneVsRestClassifier", "modules/generated/sklearn.multiclass.OutputCodeClassifier", "modules/generated/sklearn.multioutput.ClassifierChain", "modules/generated/sklearn.multioutput.MultiOutputClassifier", "modules/generated/sklearn.multioutput.MultiOutputRegressor", "modules/generated/sklearn.multioutput.RegressorChain", "modules/generated/sklearn.naive_bayes.BernoulliNB", "modules/generated/sklearn.naive_bayes.CategoricalNB", "modules/generated/sklearn.naive_bayes.ComplementNB", "modules/generated/sklearn.naive_bayes.GaussianNB", "modules/generated/sklearn.naive_bayes.MultinomialNB", "modules/generated/sklearn.neighbors.BallTree", "modules/generated/sklearn.neighbors.KDTree", "modules/generated/sklearn.neighbors.KNeighborsClassifier", "modules/generated/sklearn.neighbors.KNeighborsRegressor", "modules/generated/sklearn.neighbors.KNeighborsTransformer", "modules/generated/sklearn.neighbors.KernelDensity", "modules/generated/sklearn.neighbors.LocalOutlierFactor", "modules/generated/sklearn.neighbors.NearestCentroid", "modules/generated/sklearn.neighbors.NearestNeighbors", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer", "modules/generated/sklearn.neighbors.kneighbors_graph", "modules/generated/sklearn.neighbors.radius_neighbors_graph", "modules/generated/sklearn.neighbors.sort_graph_by_row_values", "modules/generated/sklearn.neural_network.BernoulliRBM", "modules/generated/sklearn.neural_network.MLPClassifier", "modules/generated/sklearn.neural_network.MLPRegressor", "modules/generated/sklearn.pipeline.FeatureUnion", "modules/generated/sklearn.pipeline.Pipeline", "modules/generated/sklearn.pipeline.make_pipeline", "modules/generated/sklearn.pipeline.make_union", "modules/generated/sklearn.preprocessing.Binarizer", "modules/generated/sklearn.preprocessing.FunctionTransformer", "modules/generated/sklearn.preprocessing.KBinsDiscretizer", "modules/generated/sklearn.preprocessing.KernelCenterer", "modules/generated/sklearn.preprocessing.LabelBinarizer", "modules/generated/sklearn.preprocessing.LabelEncoder", "modules/generated/sklearn.preprocessing.MaxAbsScaler", "modules/generated/sklearn.preprocessing.MinMaxScaler", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer", "modules/generated/sklearn.preprocessing.Normalizer", "modules/generated/sklearn.preprocessing.OneHotEncoder", "modules/generated/sklearn.preprocessing.OrdinalEncoder", "modules/generated/sklearn.preprocessing.PolynomialFeatures", "modules/generated/sklearn.preprocessing.PowerTransformer", "modules/generated/sklearn.preprocessing.QuantileTransformer", "modules/generated/sklearn.preprocessing.RobustScaler", "modules/generated/sklearn.preprocessing.SplineTransformer", "modules/generated/sklearn.preprocessing.StandardScaler", "modules/generated/sklearn.preprocessing.TargetEncoder", "modules/generated/sklearn.preprocessing.add_dummy_feature", "modules/generated/sklearn.preprocessing.binarize", "modules/generated/sklearn.preprocessing.label_binarize", "modules/generated/sklearn.preprocessing.maxabs_scale", "modules/generated/sklearn.preprocessing.minmax_scale", "modules/generated/sklearn.preprocessing.normalize", "modules/generated/sklearn.preprocessing.power_transform", "modules/generated/sklearn.preprocessing.quantile_transform", "modules/generated/sklearn.preprocessing.robust_scale", "modules/generated/sklearn.preprocessing.scale", "modules/generated/sklearn.random_projection.GaussianRandomProjection", "modules/generated/sklearn.random_projection.SparseRandomProjection", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim", "modules/generated/sklearn.semi_supervised.LabelPropagation", "modules/generated/sklearn.semi_supervised.LabelSpreading", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier", "modules/generated/sklearn.set_config", "modules/generated/sklearn.show_versions", "modules/generated/sklearn.svm.LinearSVC", "modules/generated/sklearn.svm.LinearSVR", "modules/generated/sklearn.svm.NuSVC", "modules/generated/sklearn.svm.NuSVR", "modules/generated/sklearn.svm.OneClassSVM", "modules/generated/sklearn.svm.SVC", "modules/generated/sklearn.svm.SVR", "modules/generated/sklearn.svm.l1_min_c", "modules/generated/sklearn.tree.DecisionTreeClassifier", "modules/generated/sklearn.tree.DecisionTreeRegressor", "modules/generated/sklearn.tree.ExtraTreeClassifier", "modules/generated/sklearn.tree.ExtraTreeRegressor", "modules/generated/sklearn.tree.export_graphviz", "modules/generated/sklearn.tree.export_text", "modules/generated/sklearn.tree.plot_tree", "modules/generated/sklearn.utils.Bunch", "modules/generated/sklearn.utils.ClassifierTags", "modules/generated/sklearn.utils.InputTags", "modules/generated/sklearn.utils.RegressorTags", "modules/generated/sklearn.utils.Tags", "modules/generated/sklearn.utils.TargetTags", "modules/generated/sklearn.utils.TransformerTags", "modules/generated/sklearn.utils._safe_indexing", "modules/generated/sklearn.utils.arrayfuncs.min_pos", "modules/generated/sklearn.utils.as_float_array", "modules/generated/sklearn.utils.assert_all_finite", "modules/generated/sklearn.utils.check_X_y", "modules/generated/sklearn.utils.check_array", "modules/generated/sklearn.utils.check_consistent_length", "modules/generated/sklearn.utils.check_random_state", "modules/generated/sklearn.utils.check_scalar", "modules/generated/sklearn.utils.class_weight.compute_class_weight", "modules/generated/sklearn.utils.class_weight.compute_sample_weight", "modules/generated/sklearn.utils.default_tags", "modules/generated/sklearn.utils.deprecated", "modules/generated/sklearn.utils.discovery.all_displays", "modules/generated/sklearn.utils.discovery.all_estimators", "modules/generated/sklearn.utils.discovery.all_functions", "modules/generated/sklearn.utils.estimator_checks.check_estimator", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks", "modules/generated/sklearn.utils.estimator_html_repr", "modules/generated/sklearn.utils.extmath.density", "modules/generated/sklearn.utils.extmath.fast_logdet", "modules/generated/sklearn.utils.extmath.randomized_range_finder", "modules/generated/sklearn.utils.extmath.randomized_svd", "modules/generated/sklearn.utils.extmath.safe_sparse_dot", "modules/generated/sklearn.utils.extmath.weighted_mode", "modules/generated/sklearn.utils.gen_batches", "modules/generated/sklearn.utils.gen_even_slices", "modules/generated/sklearn.utils.get_tags", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length", "modules/generated/sklearn.utils.indexable", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter", "modules/generated/sklearn.utils.metadata_routing.MethodMapping", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object", "modules/generated/sklearn.utils.metadata_routing.process_routing", "modules/generated/sklearn.utils.metaestimators.available_if", "modules/generated/sklearn.utils.multiclass.is_multilabel", "modules/generated/sklearn.utils.multiclass.type_of_target", "modules/generated/sklearn.utils.multiclass.unique_labels", "modules/generated/sklearn.utils.murmurhash3_32", "modules/generated/sklearn.utils.parallel.Parallel", "modules/generated/sklearn.utils.parallel.delayed", "modules/generated/sklearn.utils.parallel_backend", "modules/generated/sklearn.utils.random.sample_without_replacement", "modules/generated/sklearn.utils.register_parallel_backend", "modules/generated/sklearn.utils.resample", "modules/generated/sklearn.utils.safe_mask", "modules/generated/sklearn.utils.safe_sqr", "modules/generated/sklearn.utils.shuffle", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", "modules/generated/sklearn.utils.validation.check_is_fitted", "modules/generated/sklearn.utils.validation.check_memory", "modules/generated/sklearn.utils.validation.check_symmetric", "modules/generated/sklearn.utils.validation.column_or_1d", "modules/generated/sklearn.utils.validation.has_fit_parameter", "modules/generated/sklearn.utils.validation.validate_data", "modules/grid_search", "modules/impute", "modules/isotonic", "modules/kernel_approximation", "modules/kernel_ridge", "modules/lda_qda", "modules/learning_curve", "modules/linear_model", "modules/manifold", "modules/metrics", "modules/mixture", "modules/model_evaluation", "modules/multiclass", "modules/naive_bayes", "modules/neighbors", "modules/neural_networks_supervised", "modules/neural_networks_unsupervised", "modules/outlier_detection", "modules/partial_dependence", "modules/permutation_importance", "modules/pipeline", "modules/preprocessing", "modules/preprocessing_targets", "modules/random_projection", "modules/semi_supervised", "modules/sgd", "modules/svm", "modules/tree", "modules/unsupervised_reduction", "presentations", "related_projects", "roadmap", "sg_execution_times", "supervised_learning", "support", "testimonials/testimonials", "unsupervised_learning", "user_guide", "versions", "visualizations", "whats_new", "whats_new/_contributors", "whats_new/older_versions", "whats_new/v0.13", "whats_new/v0.14", "whats_new/v0.15", "whats_new/v0.16", "whats_new/v0.17", "whats_new/v0.18", "whats_new/v0.19", "whats_new/v0.20", "whats_new/v0.21", "whats_new/v0.22", "whats_new/v0.23", "whats_new/v0.24", "whats_new/v1.0", "whats_new/v1.1", "whats_new/v1.2", "whats_new/v1.3", "whats_new/v1.4", "whats_new/v1.5", "whats_new/v1.6"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["about.rst", "api/deprecated.rst", "api/index.rst", "api/sklearn.rst", "api/sklearn.base.rst", "api/sklearn.calibration.rst", "api/sklearn.cluster.rst", "api/sklearn.compose.rst", "api/sklearn.covariance.rst", "api/sklearn.cross_decomposition.rst", "api/sklearn.datasets.rst", "api/sklearn.decomposition.rst", "api/sklearn.discriminant_analysis.rst", "api/sklearn.dummy.rst", "api/sklearn.ensemble.rst", "api/sklearn.exceptions.rst", "api/sklearn.experimental.rst", "api/sklearn.feature_extraction.rst", "api/sklearn.feature_selection.rst", "api/sklearn.gaussian_process.rst", "api/sklearn.impute.rst", "api/sklearn.inspection.rst", "api/sklearn.isotonic.rst", "api/sklearn.kernel_approximation.rst", "api/sklearn.kernel_ridge.rst", "api/sklearn.linear_model.rst", "api/sklearn.manifold.rst", "api/sklearn.metrics.rst", "api/sklearn.mixture.rst", "api/sklearn.model_selection.rst", "api/sklearn.multiclass.rst", "api/sklearn.multioutput.rst", "api/sklearn.naive_bayes.rst", "api/sklearn.neighbors.rst", "api/sklearn.neural_network.rst", "api/sklearn.pipeline.rst", "api/sklearn.preprocessing.rst", "api/sklearn.random_projection.rst", "api/sklearn.semi_supervised.rst", "api/sklearn.svm.rst", "api/sklearn.tree.rst", "api/sklearn.utils.rst", "auto_examples/applications/index.rst", "auto_examples/applications/plot_cyclical_feature_engineering.rst", "auto_examples/applications/plot_digits_denoising.rst", "auto_examples/applications/plot_face_recognition.rst", "auto_examples/applications/plot_model_complexity_influence.rst", "auto_examples/applications/plot_out_of_core_classification.rst", "auto_examples/applications/plot_outlier_detection_wine.rst", "auto_examples/applications/plot_prediction_latency.rst", "auto_examples/applications/plot_species_distribution_modeling.rst", "auto_examples/applications/plot_stock_market.rst", "auto_examples/applications/plot_time_series_lagged_features.rst", "auto_examples/applications/plot_tomography_l1_reconstruction.rst", "auto_examples/applications/plot_topics_extraction_with_nmf_lda.rst", "auto_examples/applications/wikipedia_principal_eigenvector.rst", "auto_examples/bicluster/index.rst", "auto_examples/bicluster/plot_bicluster_newsgroups.rst", "auto_examples/bicluster/plot_spectral_biclustering.rst", "auto_examples/bicluster/plot_spectral_coclustering.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_calibration.rst", "auto_examples/calibration/plot_calibration_curve.rst", "auto_examples/calibration/plot_calibration_multiclass.rst", "auto_examples/calibration/plot_compare_calibration.rst", "auto_examples/classification/index.rst", "auto_examples/classification/plot_classification_probability.rst", "auto_examples/classification/plot_classifier_comparison.rst", "auto_examples/classification/plot_digits_classification.rst", "auto_examples/classification/plot_lda.rst", "auto_examples/classification/plot_lda_qda.rst", "auto_examples/cluster/index.rst", "auto_examples/cluster/plot_adjusted_for_chance_measures.rst", "auto_examples/cluster/plot_affinity_propagation.rst", "auto_examples/cluster/plot_agglomerative_clustering.rst", "auto_examples/cluster/plot_agglomerative_clustering_metrics.rst", "auto_examples/cluster/plot_agglomerative_dendrogram.rst", "auto_examples/cluster/plot_birch_vs_minibatchkmeans.rst", "auto_examples/cluster/plot_bisect_kmeans.rst", "auto_examples/cluster/plot_cluster_comparison.rst", "auto_examples/cluster/plot_coin_segmentation.rst", "auto_examples/cluster/plot_coin_ward_segmentation.rst", "auto_examples/cluster/plot_dbscan.rst", "auto_examples/cluster/plot_dict_face_patches.rst", "auto_examples/cluster/plot_digits_agglomeration.rst", "auto_examples/cluster/plot_digits_linkage.rst", "auto_examples/cluster/plot_face_compress.rst", "auto_examples/cluster/plot_feature_agglomeration_vs_univariate_selection.rst", "auto_examples/cluster/plot_hdbscan.rst", "auto_examples/cluster/plot_inductive_clustering.rst", "auto_examples/cluster/plot_kmeans_assumptions.rst", "auto_examples/cluster/plot_kmeans_digits.rst", "auto_examples/cluster/plot_kmeans_plusplus.rst", "auto_examples/cluster/plot_kmeans_silhouette_analysis.rst", "auto_examples/cluster/plot_kmeans_stability_low_dim_dense.rst", "auto_examples/cluster/plot_linkage_comparison.rst", "auto_examples/cluster/plot_mean_shift.rst", "auto_examples/cluster/plot_mini_batch_kmeans.rst", "auto_examples/cluster/plot_optics.rst", "auto_examples/cluster/plot_segmentation_toy.rst", "auto_examples/cluster/plot_ward_structured_vs_unstructured.rst", "auto_examples/compose/index.rst", "auto_examples/compose/plot_column_transformer.rst", "auto_examples/compose/plot_column_transformer_mixed_types.rst", "auto_examples/compose/plot_compare_reduction.rst", "auto_examples/compose/plot_digits_pipe.rst", "auto_examples/compose/plot_feature_union.rst", "auto_examples/compose/plot_transformed_target.rst", "auto_examples/covariance/index.rst", "auto_examples/covariance/plot_covariance_estimation.rst", "auto_examples/covariance/plot_lw_vs_oas.rst", "auto_examples/covariance/plot_mahalanobis_distances.rst", "auto_examples/covariance/plot_robust_vs_empirical_covariance.rst", "auto_examples/covariance/plot_sparse_cov.rst", "auto_examples/cross_decomposition/index.rst", "auto_examples/cross_decomposition/plot_compare_cross_decomposition.rst", "auto_examples/cross_decomposition/plot_pcr_vs_pls.rst", "auto_examples/datasets/index.rst", "auto_examples/datasets/plot_random_multilabel_dataset.rst", "auto_examples/decomposition/index.rst", "auto_examples/decomposition/plot_faces_decomposition.rst", "auto_examples/decomposition/plot_ica_blind_source_separation.rst", "auto_examples/decomposition/plot_ica_vs_pca.rst", "auto_examples/decomposition/plot_image_denoising.rst", "auto_examples/decomposition/plot_incremental_pca.rst", "auto_examples/decomposition/plot_kernel_pca.rst", "auto_examples/decomposition/plot_pca_iris.rst", "auto_examples/decomposition/plot_pca_vs_fa_model_selection.rst", "auto_examples/decomposition/plot_pca_vs_lda.rst", "auto_examples/decomposition/plot_sparse_coding.rst", "auto_examples/decomposition/plot_varimax_fa.rst", "auto_examples/developing_estimators/index.rst", "auto_examples/developing_estimators/sklearn_is_fitted.rst", "auto_examples/ensemble/index.rst", "auto_examples/ensemble/plot_adaboost_multiclass.rst", "auto_examples/ensemble/plot_adaboost_regression.rst", "auto_examples/ensemble/plot_adaboost_twoclass.rst", "auto_examples/ensemble/plot_bias_variance.rst", "auto_examples/ensemble/plot_ensemble_oob.rst", "auto_examples/ensemble/plot_feature_transformation.rst", "auto_examples/ensemble/plot_forest_hist_grad_boosting_comparison.rst", "auto_examples/ensemble/plot_forest_importances.rst", "auto_examples/ensemble/plot_forest_iris.rst", "auto_examples/ensemble/plot_gradient_boosting_categorical.rst", "auto_examples/ensemble/plot_gradient_boosting_early_stopping.rst", "auto_examples/ensemble/plot_gradient_boosting_oob.rst", "auto_examples/ensemble/plot_gradient_boosting_quantile.rst", "auto_examples/ensemble/plot_gradient_boosting_regression.rst", "auto_examples/ensemble/plot_gradient_boosting_regularization.rst", "auto_examples/ensemble/plot_hgbt_regression.rst", "auto_examples/ensemble/plot_isolation_forest.rst", "auto_examples/ensemble/plot_monotonic_constraints.rst", "auto_examples/ensemble/plot_random_forest_embedding.rst", "auto_examples/ensemble/plot_random_forest_regression_multioutput.rst", "auto_examples/ensemble/plot_stack_predictors.rst", "auto_examples/ensemble/plot_voting_decision_regions.rst", "auto_examples/ensemble/plot_voting_probas.rst", "auto_examples/ensemble/plot_voting_regressor.rst", "auto_examples/exercises/index.rst", "auto_examples/exercises/plot_cv_diabetes.rst", "auto_examples/exercises/plot_digits_classification_exercise.rst", "auto_examples/exercises/plot_iris_exercise.rst", "auto_examples/feature_selection/index.rst", "auto_examples/feature_selection/plot_f_test_vs_mi.rst", "auto_examples/feature_selection/plot_feature_selection.rst", "auto_examples/feature_selection/plot_feature_selection_pipeline.rst", "auto_examples/feature_selection/plot_rfe_digits.rst", "auto_examples/feature_selection/plot_rfe_with_cross_validation.rst", "auto_examples/feature_selection/plot_select_from_model_diabetes.rst", "auto_examples/gaussian_process/index.rst", "auto_examples/gaussian_process/plot_compare_gpr_krr.rst", "auto_examples/gaussian_process/plot_gpc.rst", "auto_examples/gaussian_process/plot_gpc_iris.rst", "auto_examples/gaussian_process/plot_gpc_isoprobability.rst", "auto_examples/gaussian_process/plot_gpc_xor.rst", "auto_examples/gaussian_process/plot_gpr_co2.rst", "auto_examples/gaussian_process/plot_gpr_noisy.rst", "auto_examples/gaussian_process/plot_gpr_noisy_targets.rst", "auto_examples/gaussian_process/plot_gpr_on_structured_data.rst", "auto_examples/gaussian_process/plot_gpr_prior_posterior.rst", "auto_examples/impute/index.rst", "auto_examples/impute/plot_iterative_imputer_variants_comparison.rst", "auto_examples/impute/plot_missing_values.rst", "auto_examples/index.rst", "auto_examples/inspection/index.rst", "auto_examples/inspection/plot_causal_interpretation.rst", "auto_examples/inspection/plot_linear_model_coefficient_interpretation.rst", "auto_examples/inspection/plot_partial_dependence.rst", "auto_examples/inspection/plot_permutation_importance.rst", "auto_examples/inspection/plot_permutation_importance_multicollinear.rst", "auto_examples/kernel_approximation/index.rst", "auto_examples/kernel_approximation/plot_scalable_poly_kernels.rst", "auto_examples/linear_model/index.rst", "auto_examples/linear_model/plot_ard.rst", "auto_examples/linear_model/plot_bayesian_ridge_curvefit.rst", "auto_examples/linear_model/plot_elastic_net_precomputed_gram_matrix_with_weighted_samples.rst", "auto_examples/linear_model/plot_huber_vs_ridge.rst", "auto_examples/linear_model/plot_iris_logistic.rst", "auto_examples/linear_model/plot_lasso_and_elasticnet.rst", "auto_examples/linear_model/plot_lasso_dense_vs_sparse_data.rst", "auto_examples/linear_model/plot_lasso_lars_ic.rst", "auto_examples/linear_model/plot_lasso_lasso_lars_elasticnet_path.rst", "auto_examples/linear_model/plot_lasso_model_selection.rst", "auto_examples/linear_model/plot_logistic.rst", "auto_examples/linear_model/plot_logistic_l1_l2_sparsity.rst", "auto_examples/linear_model/plot_logistic_multinomial.rst", "auto_examples/linear_model/plot_logistic_path.rst", "auto_examples/linear_model/plot_multi_task_lasso_support.rst", "auto_examples/linear_model/plot_nnls.rst", "auto_examples/linear_model/plot_ols.rst", "auto_examples/linear_model/plot_ols_ridge_variance.rst", "auto_examples/linear_model/plot_omp.rst", "auto_examples/linear_model/plot_poisson_regression_non_normal_loss.rst", "auto_examples/linear_model/plot_polynomial_interpolation.rst", "auto_examples/linear_model/plot_quantile_regression.rst", "auto_examples/linear_model/plot_ransac.rst", "auto_examples/linear_model/plot_ridge_coeffs.rst", "auto_examples/linear_model/plot_ridge_path.rst", "auto_examples/linear_model/plot_robust_fit.rst", "auto_examples/linear_model/plot_sgd_comparison.rst", "auto_examples/linear_model/plot_sgd_early_stopping.rst", "auto_examples/linear_model/plot_sgd_iris.rst", "auto_examples/linear_model/plot_sgd_loss_functions.rst", "auto_examples/linear_model/plot_sgd_penalties.rst", "auto_examples/linear_model/plot_sgd_separating_hyperplane.rst", "auto_examples/linear_model/plot_sgd_weighted_samples.rst", "auto_examples/linear_model/plot_sgdocsvm_vs_ocsvm.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_20newsgroups.rst", "auto_examples/linear_model/plot_sparse_logistic_regression_mnist.rst", "auto_examples/linear_model/plot_theilsen.rst", "auto_examples/linear_model/plot_tweedie_regression_insurance_claims.rst", "auto_examples/manifold/index.rst", "auto_examples/manifold/plot_compare_methods.rst", "auto_examples/manifold/plot_lle_digits.rst", "auto_examples/manifold/plot_manifold_sphere.rst", "auto_examples/manifold/plot_mds.rst", "auto_examples/manifold/plot_swissroll.rst", "auto_examples/manifold/plot_t_sne_perplexity.rst", "auto_examples/miscellaneous/index.rst", "auto_examples/miscellaneous/plot_anomaly_comparison.rst", "auto_examples/miscellaneous/plot_display_object_visualization.rst", "auto_examples/miscellaneous/plot_estimator_representation.rst", "auto_examples/miscellaneous/plot_isotonic_regression.rst", "auto_examples/miscellaneous/plot_johnson_lindenstrauss_bound.rst", "auto_examples/miscellaneous/plot_kernel_approximation.rst", "auto_examples/miscellaneous/plot_kernel_ridge_regression.rst", "auto_examples/miscellaneous/plot_metadata_routing.rst", "auto_examples/miscellaneous/plot_multilabel.rst", "auto_examples/miscellaneous/plot_multioutput_face_completion.rst", "auto_examples/miscellaneous/plot_outlier_detection_bench.rst", "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.rst", "auto_examples/miscellaneous/plot_pipeline_display.rst", "auto_examples/miscellaneous/plot_roc_curve_visualization_api.rst", "auto_examples/miscellaneous/plot_set_output.rst", "auto_examples/mixture/index.rst", "auto_examples/mixture/plot_concentration_prior.rst", "auto_examples/mixture/plot_gmm.rst", "auto_examples/mixture/plot_gmm_covariances.rst", "auto_examples/mixture/plot_gmm_init.rst", "auto_examples/mixture/plot_gmm_pdf.rst", "auto_examples/mixture/plot_gmm_selection.rst", "auto_examples/mixture/plot_gmm_sin.rst", "auto_examples/model_selection/index.rst", "auto_examples/model_selection/plot_confusion_matrix.rst", "auto_examples/model_selection/plot_cost_sensitive_learning.rst", "auto_examples/model_selection/plot_cv_indices.rst", "auto_examples/model_selection/plot_cv_predict.rst", "auto_examples/model_selection/plot_det.rst", "auto_examples/model_selection/plot_grid_search_digits.rst", "auto_examples/model_selection/plot_grid_search_refit_callable.rst", "auto_examples/model_selection/plot_grid_search_stats.rst", "auto_examples/model_selection/plot_grid_search_text_feature_extraction.rst", "auto_examples/model_selection/plot_learning_curve.rst", "auto_examples/model_selection/plot_likelihood_ratios.rst", "auto_examples/model_selection/plot_multi_metric_evaluation.rst", "auto_examples/model_selection/plot_nested_cross_validation_iris.rst", "auto_examples/model_selection/plot_permutation_tests_for_classification.rst", "auto_examples/model_selection/plot_precision_recall.rst", "auto_examples/model_selection/plot_randomized_search.rst", "auto_examples/model_selection/plot_roc.rst", "auto_examples/model_selection/plot_roc_crossval.rst", "auto_examples/model_selection/plot_successive_halving_heatmap.rst", "auto_examples/model_selection/plot_successive_halving_iterations.rst", "auto_examples/model_selection/plot_train_error_vs_test_error.rst", "auto_examples/model_selection/plot_tuned_decision_threshold.rst", "auto_examples/model_selection/plot_underfitting_overfitting.rst", "auto_examples/multiclass/index.rst", "auto_examples/multiclass/plot_multiclass_overview.rst", "auto_examples/multioutput/index.rst", "auto_examples/multioutput/plot_classifier_chain_yeast.rst", "auto_examples/neighbors/approximate_nearest_neighbors.rst", "auto_examples/neighbors/index.rst", "auto_examples/neighbors/plot_caching_nearest_neighbors.rst", "auto_examples/neighbors/plot_classification.rst", "auto_examples/neighbors/plot_digits_kde_sampling.rst", "auto_examples/neighbors/plot_kde_1d.rst", "auto_examples/neighbors/plot_lof_novelty_detection.rst", "auto_examples/neighbors/plot_lof_outlier_detection.rst", "auto_examples/neighbors/plot_nca_classification.rst", "auto_examples/neighbors/plot_nca_dim_reduction.rst", "auto_examples/neighbors/plot_nca_illustration.rst", "auto_examples/neighbors/plot_nearest_centroid.rst", "auto_examples/neighbors/plot_regression.rst", "auto_examples/neighbors/plot_species_kde.rst", "auto_examples/neural_networks/index.rst", "auto_examples/neural_networks/plot_mlp_alpha.rst", "auto_examples/neural_networks/plot_mlp_training_curves.rst", "auto_examples/neural_networks/plot_mnist_filters.rst", "auto_examples/neural_networks/plot_rbm_logistic_classification.rst", "auto_examples/preprocessing/index.rst", "auto_examples/preprocessing/plot_all_scaling.rst", "auto_examples/preprocessing/plot_discretization.rst", "auto_examples/preprocessing/plot_discretization_classification.rst", "auto_examples/preprocessing/plot_discretization_strategies.rst", "auto_examples/preprocessing/plot_map_data_to_normal.rst", "auto_examples/preprocessing/plot_scaling_importance.rst", "auto_examples/preprocessing/plot_target_encoder.rst", "auto_examples/preprocessing/plot_target_encoder_cross_val.rst", "auto_examples/release_highlights/index.rst", "auto_examples/release_highlights/plot_release_highlights_0_22_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_23_0.rst", "auto_examples/release_highlights/plot_release_highlights_0_24_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_0_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_1_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_2_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_3_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_4_0.rst", "auto_examples/release_highlights/plot_release_highlights_1_5_0.rst", "auto_examples/semi_supervised/index.rst", "auto_examples/semi_supervised/plot_label_propagation_digits.rst", "auto_examples/semi_supervised/plot_label_propagation_digits_active_learning.rst", "auto_examples/semi_supervised/plot_label_propagation_structure.rst", "auto_examples/semi_supervised/plot_self_training_varying_threshold.rst", "auto_examples/semi_supervised/plot_semi_supervised_newsgroups.rst", "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.rst", "auto_examples/svm/index.rst", "auto_examples/svm/plot_custom_kernel.rst", "auto_examples/svm/plot_iris_svc.rst", "auto_examples/svm/plot_linearsvc_support_vectors.rst", "auto_examples/svm/plot_oneclass.rst", "auto_examples/svm/plot_rbf_parameters.rst", "auto_examples/svm/plot_separating_hyperplane.rst", "auto_examples/svm/plot_separating_hyperplane_unbalanced.rst", "auto_examples/svm/plot_svm_anova.rst", "auto_examples/svm/plot_svm_kernels.rst", "auto_examples/svm/plot_svm_margin.rst", "auto_examples/svm/plot_svm_regression.rst", "auto_examples/svm/plot_svm_scale_c.rst", "auto_examples/svm/plot_svm_tie_breaking.rst", "auto_examples/svm/plot_weighted_samples.rst", "auto_examples/text/index.rst", "auto_examples/text/plot_document_classification_20newsgroups.rst", "auto_examples/text/plot_document_clustering.rst", "auto_examples/text/plot_hashing_vs_dict_vectorizer.rst", "auto_examples/tree/index.rst", "auto_examples/tree/plot_cost_complexity_pruning.rst", "auto_examples/tree/plot_iris_dtc.rst", "auto_examples/tree/plot_tree_regression.rst", "auto_examples/tree/plot_unveil_tree_structure.rst", "common_pitfalls.rst", "communication_team.rst", "communication_team_emeritus.rst", "computing.rst", "computing/computational_performance.rst", "computing/parallelism.rst", "computing/scaling_strategies.rst", "contributor_experience_team.rst", "contributor_experience_team_emeritus.rst", "data_transforms.rst", "datasets.rst", "datasets/loading_other_datasets.rst", "datasets/real_world.rst", "datasets/sample_generators.rst", "datasets/toy_dataset.rst", "developers/advanced_installation.rst", "developers/bug_triaging.rst", "developers/contributing.rst", "developers/cython.rst", "developers/develop.rst", "developers/index.rst", "developers/maintainer.rst", "developers/minimal_reproducer.rst", "developers/performance.rst", "developers/plotting.rst", "developers/tips.rst", "developers/utilities.rst", "dispatching.rst", "documentation_team.rst", "faq.rst", "getting_started.rst", "glossary.rst", "governance.rst", "index.rst", "inspection.rst", "install.rst", "install_instructions_conda.rst", "machine_learning_map.rst", "maintainers.rst", "maintainers_emeritus.rst", "metadata_routing.rst", "min_dependency_substitutions.rst", "min_dependency_table.rst", "model_persistence.rst", "model_selection.rst", "modules/array_api.rst", "modules/biclustering.rst", "modules/calibration.rst", "modules/classification_threshold.rst", "modules/clustering.rst", "modules/compose.rst", "modules/covariance.rst", "modules/cross_decomposition.rst", "modules/cross_validation.rst", "modules/decomposition.rst", "modules/density.rst", "modules/ensemble.rst", "modules/feature_extraction.rst", "modules/feature_selection.rst", "modules/gaussian_process.rst", "modules/generated/dbscan-function.rst", "modules/generated/fastica-function.rst", "modules/generated/oas-function.rst", "modules/generated/sklearn.base.BaseEstimator.rst", "modules/generated/sklearn.base.BiclusterMixin.rst", "modules/generated/sklearn.base.ClassNamePrefixFeaturesOutMixin.rst", "modules/generated/sklearn.base.ClassifierMixin.rst", "modules/generated/sklearn.base.ClusterMixin.rst", "modules/generated/sklearn.base.DensityMixin.rst", "modules/generated/sklearn.base.MetaEstimatorMixin.rst", "modules/generated/sklearn.base.OneToOneFeatureMixin.rst", "modules/generated/sklearn.base.OutlierMixin.rst", "modules/generated/sklearn.base.RegressorMixin.rst", "modules/generated/sklearn.base.TransformerMixin.rst", "modules/generated/sklearn.base.clone.rst", "modules/generated/sklearn.base.is_classifier.rst", "modules/generated/sklearn.base.is_clusterer.rst", "modules/generated/sklearn.base.is_regressor.rst", "modules/generated/sklearn.calibration.CalibratedClassifierCV.rst", "modules/generated/sklearn.calibration.CalibrationDisplay.rst", "modules/generated/sklearn.calibration.calibration_curve.rst", "modules/generated/sklearn.cluster.AffinityPropagation.rst", "modules/generated/sklearn.cluster.AgglomerativeClustering.rst", "modules/generated/sklearn.cluster.Birch.rst", "modules/generated/sklearn.cluster.BisectingKMeans.rst", "modules/generated/sklearn.cluster.DBSCAN.rst", "modules/generated/sklearn.cluster.FeatureAgglomeration.rst", "modules/generated/sklearn.cluster.HDBSCAN.rst", "modules/generated/sklearn.cluster.KMeans.rst", "modules/generated/sklearn.cluster.MeanShift.rst", "modules/generated/sklearn.cluster.MiniBatchKMeans.rst", "modules/generated/sklearn.cluster.OPTICS.rst", "modules/generated/sklearn.cluster.SpectralBiclustering.rst", "modules/generated/sklearn.cluster.SpectralClustering.rst", "modules/generated/sklearn.cluster.SpectralCoclustering.rst", "modules/generated/sklearn.cluster.affinity_propagation.rst", "modules/generated/sklearn.cluster.cluster_optics_dbscan.rst", "modules/generated/sklearn.cluster.cluster_optics_xi.rst", "modules/generated/sklearn.cluster.compute_optics_graph.rst", "modules/generated/sklearn.cluster.estimate_bandwidth.rst", "modules/generated/sklearn.cluster.k_means.rst", "modules/generated/sklearn.cluster.kmeans_plusplus.rst", "modules/generated/sklearn.cluster.mean_shift.rst", "modules/generated/sklearn.cluster.spectral_clustering.rst", "modules/generated/sklearn.cluster.ward_tree.rst", "modules/generated/sklearn.compose.ColumnTransformer.rst", "modules/generated/sklearn.compose.TransformedTargetRegressor.rst", "modules/generated/sklearn.compose.make_column_selector.rst", "modules/generated/sklearn.compose.make_column_transformer.rst", "modules/generated/sklearn.config_context.rst", "modules/generated/sklearn.covariance.EllipticEnvelope.rst", "modules/generated/sklearn.covariance.EmpiricalCovariance.rst", "modules/generated/sklearn.covariance.GraphicalLasso.rst", "modules/generated/sklearn.covariance.GraphicalLassoCV.rst", "modules/generated/sklearn.covariance.LedoitWolf.rst", "modules/generated/sklearn.covariance.MinCovDet.rst", "modules/generated/sklearn.covariance.OAS.rst", "modules/generated/sklearn.covariance.ShrunkCovariance.rst", "modules/generated/sklearn.covariance.empirical_covariance.rst", "modules/generated/sklearn.covariance.graphical_lasso.rst", "modules/generated/sklearn.covariance.ledoit_wolf.rst", "modules/generated/sklearn.covariance.ledoit_wolf_shrinkage.rst", "modules/generated/sklearn.covariance.shrunk_covariance.rst", "modules/generated/sklearn.cross_decomposition.CCA.rst", "modules/generated/sklearn.cross_decomposition.PLSCanonical.rst", "modules/generated/sklearn.cross_decomposition.PLSRegression.rst", "modules/generated/sklearn.cross_decomposition.PLSSVD.rst", "modules/generated/sklearn.datasets.clear_data_home.rst", "modules/generated/sklearn.datasets.dump_svmlight_file.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups.rst", "modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.rst", "modules/generated/sklearn.datasets.fetch_california_housing.rst", "modules/generated/sklearn.datasets.fetch_covtype.rst", "modules/generated/sklearn.datasets.fetch_file.rst", "modules/generated/sklearn.datasets.fetch_kddcup99.rst", "modules/generated/sklearn.datasets.fetch_lfw_pairs.rst", "modules/generated/sklearn.datasets.fetch_lfw_people.rst", "modules/generated/sklearn.datasets.fetch_olivetti_faces.rst", "modules/generated/sklearn.datasets.fetch_openml.rst", "modules/generated/sklearn.datasets.fetch_rcv1.rst", "modules/generated/sklearn.datasets.fetch_species_distributions.rst", "modules/generated/sklearn.datasets.get_data_home.rst", "modules/generated/sklearn.datasets.load_breast_cancer.rst", "modules/generated/sklearn.datasets.load_diabetes.rst", "modules/generated/sklearn.datasets.load_digits.rst", "modules/generated/sklearn.datasets.load_files.rst", "modules/generated/sklearn.datasets.load_iris.rst", "modules/generated/sklearn.datasets.load_linnerud.rst", "modules/generated/sklearn.datasets.load_sample_image.rst", "modules/generated/sklearn.datasets.load_sample_images.rst", "modules/generated/sklearn.datasets.load_svmlight_file.rst", "modules/generated/sklearn.datasets.load_svmlight_files.rst", "modules/generated/sklearn.datasets.load_wine.rst", "modules/generated/sklearn.datasets.make_biclusters.rst", "modules/generated/sklearn.datasets.make_blobs.rst", "modules/generated/sklearn.datasets.make_checkerboard.rst", "modules/generated/sklearn.datasets.make_circles.rst", "modules/generated/sklearn.datasets.make_classification.rst", "modules/generated/sklearn.datasets.make_friedman1.rst", "modules/generated/sklearn.datasets.make_friedman2.rst", "modules/generated/sklearn.datasets.make_friedman3.rst", "modules/generated/sklearn.datasets.make_gaussian_quantiles.rst", "modules/generated/sklearn.datasets.make_hastie_10_2.rst", "modules/generated/sklearn.datasets.make_low_rank_matrix.rst", "modules/generated/sklearn.datasets.make_moons.rst", "modules/generated/sklearn.datasets.make_multilabel_classification.rst", "modules/generated/sklearn.datasets.make_regression.rst", "modules/generated/sklearn.datasets.make_s_curve.rst", "modules/generated/sklearn.datasets.make_sparse_coded_signal.rst", "modules/generated/sklearn.datasets.make_sparse_spd_matrix.rst", "modules/generated/sklearn.datasets.make_sparse_uncorrelated.rst", "modules/generated/sklearn.datasets.make_spd_matrix.rst", "modules/generated/sklearn.datasets.make_swiss_roll.rst", "modules/generated/sklearn.decomposition.DictionaryLearning.rst", "modules/generated/sklearn.decomposition.FactorAnalysis.rst", "modules/generated/sklearn.decomposition.FastICA.rst", "modules/generated/sklearn.decomposition.IncrementalPCA.rst", "modules/generated/sklearn.decomposition.KernelPCA.rst", "modules/generated/sklearn.decomposition.LatentDirichletAllocation.rst", "modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.rst", "modules/generated/sklearn.decomposition.MiniBatchNMF.rst", "modules/generated/sklearn.decomposition.MiniBatchSparsePCA.rst", "modules/generated/sklearn.decomposition.NMF.rst", "modules/generated/sklearn.decomposition.PCA.rst", "modules/generated/sklearn.decomposition.SparseCoder.rst", "modules/generated/sklearn.decomposition.SparsePCA.rst", "modules/generated/sklearn.decomposition.TruncatedSVD.rst", "modules/generated/sklearn.decomposition.dict_learning.rst", "modules/generated/sklearn.decomposition.dict_learning_online.rst", "modules/generated/sklearn.decomposition.non_negative_factorization.rst", "modules/generated/sklearn.decomposition.sparse_encode.rst", "modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.rst", "modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.rst", "modules/generated/sklearn.dummy.DummyClassifier.rst", "modules/generated/sklearn.dummy.DummyRegressor.rst", "modules/generated/sklearn.ensemble.AdaBoostClassifier.rst", "modules/generated/sklearn.ensemble.AdaBoostRegressor.rst", "modules/generated/sklearn.ensemble.BaggingClassifier.rst", "modules/generated/sklearn.ensemble.BaggingRegressor.rst", "modules/generated/sklearn.ensemble.ExtraTreesClassifier.rst", "modules/generated/sklearn.ensemble.ExtraTreesRegressor.rst", "modules/generated/sklearn.ensemble.GradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.GradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingClassifier.rst", "modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.rst", "modules/generated/sklearn.ensemble.IsolationForest.rst", "modules/generated/sklearn.ensemble.RandomForestClassifier.rst", "modules/generated/sklearn.ensemble.RandomForestRegressor.rst", "modules/generated/sklearn.ensemble.RandomTreesEmbedding.rst", "modules/generated/sklearn.ensemble.StackingClassifier.rst", "modules/generated/sklearn.ensemble.StackingRegressor.rst", "modules/generated/sklearn.ensemble.VotingClassifier.rst", "modules/generated/sklearn.ensemble.VotingRegressor.rst", "modules/generated/sklearn.exceptions.ConvergenceWarning.rst", "modules/generated/sklearn.exceptions.DataConversionWarning.rst", "modules/generated/sklearn.exceptions.DataDimensionalityWarning.rst", "modules/generated/sklearn.exceptions.EfficiencyWarning.rst", "modules/generated/sklearn.exceptions.FitFailedWarning.rst", "modules/generated/sklearn.exceptions.InconsistentVersionWarning.rst", "modules/generated/sklearn.exceptions.NotFittedError.rst", "modules/generated/sklearn.exceptions.UndefinedMetricWarning.rst", "modules/generated/sklearn.experimental.enable_halving_search_cv.rst", "modules/generated/sklearn.experimental.enable_iterative_imputer.rst", "modules/generated/sklearn.feature_extraction.DictVectorizer.rst", "modules/generated/sklearn.feature_extraction.FeatureHasher.rst", "modules/generated/sklearn.feature_extraction.image.PatchExtractor.rst", "modules/generated/sklearn.feature_extraction.image.extract_patches_2d.rst", "modules/generated/sklearn.feature_extraction.image.grid_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.img_to_graph.rst", "modules/generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.rst", "modules/generated/sklearn.feature_extraction.text.CountVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.HashingVectorizer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfTransformer.rst", "modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.rst", "modules/generated/sklearn.feature_selection.GenericUnivariateSelect.rst", "modules/generated/sklearn.feature_selection.RFE.rst", "modules/generated/sklearn.feature_selection.RFECV.rst", "modules/generated/sklearn.feature_selection.SelectFdr.rst", "modules/generated/sklearn.feature_selection.SelectFpr.rst", "modules/generated/sklearn.feature_selection.SelectFromModel.rst", "modules/generated/sklearn.feature_selection.SelectFwe.rst", "modules/generated/sklearn.feature_selection.SelectKBest.rst", "modules/generated/sklearn.feature_selection.SelectPercentile.rst", "modules/generated/sklearn.feature_selection.SelectorMixin.rst", "modules/generated/sklearn.feature_selection.SequentialFeatureSelector.rst", "modules/generated/sklearn.feature_selection.VarianceThreshold.rst", "modules/generated/sklearn.feature_selection.chi2.rst", "modules/generated/sklearn.feature_selection.f_classif.rst", "modules/generated/sklearn.feature_selection.f_regression.rst", "modules/generated/sklearn.feature_selection.mutual_info_classif.rst", "modules/generated/sklearn.feature_selection.mutual_info_regression.rst", "modules/generated/sklearn.feature_selection.r_regression.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessClassifier.rst", "modules/generated/sklearn.gaussian_process.GaussianProcessRegressor.rst", "modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.DotProduct.rst", "modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.rst", "modules/generated/sklearn.gaussian_process.kernels.Exponentiation.rst", "modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.rst", "modules/generated/sklearn.gaussian_process.kernels.Kernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Matern.rst", "modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.rst", "modules/generated/sklearn.gaussian_process.kernels.Product.rst", "modules/generated/sklearn.gaussian_process.kernels.RBF.rst", "modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.rst", "modules/generated/sklearn.gaussian_process.kernels.Sum.rst", "modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.rst", "modules/generated/sklearn.get_config.rst", "modules/generated/sklearn.impute.IterativeImputer.rst", "modules/generated/sklearn.impute.KNNImputer.rst", "modules/generated/sklearn.impute.MissingIndicator.rst", "modules/generated/sklearn.impute.SimpleImputer.rst", "modules/generated/sklearn.inspection.DecisionBoundaryDisplay.rst", "modules/generated/sklearn.inspection.PartialDependenceDisplay.rst", "modules/generated/sklearn.inspection.partial_dependence.rst", "modules/generated/sklearn.inspection.permutation_importance.rst", "modules/generated/sklearn.isotonic.IsotonicRegression.rst", "modules/generated/sklearn.isotonic.check_increasing.rst", "modules/generated/sklearn.isotonic.isotonic_regression.rst", "modules/generated/sklearn.kernel_approximation.AdditiveChi2Sampler.rst", "modules/generated/sklearn.kernel_approximation.Nystroem.rst", "modules/generated/sklearn.kernel_approximation.PolynomialCountSketch.rst", "modules/generated/sklearn.kernel_approximation.RBFSampler.rst", "modules/generated/sklearn.kernel_approximation.SkewedChi2Sampler.rst", "modules/generated/sklearn.kernel_ridge.KernelRidge.rst", "modules/generated/sklearn.linear_model.ARDRegression.rst", "modules/generated/sklearn.linear_model.BayesianRidge.rst", "modules/generated/sklearn.linear_model.ElasticNet.rst", "modules/generated/sklearn.linear_model.ElasticNetCV.rst", "modules/generated/sklearn.linear_model.GammaRegressor.rst", "modules/generated/sklearn.linear_model.HuberRegressor.rst", "modules/generated/sklearn.linear_model.Lars.rst", "modules/generated/sklearn.linear_model.LarsCV.rst", "modules/generated/sklearn.linear_model.Lasso.rst", "modules/generated/sklearn.linear_model.LassoCV.rst", "modules/generated/sklearn.linear_model.LassoLars.rst", "modules/generated/sklearn.linear_model.LassoLarsCV.rst", "modules/generated/sklearn.linear_model.LassoLarsIC.rst", "modules/generated/sklearn.linear_model.LinearRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegression.rst", "modules/generated/sklearn.linear_model.LogisticRegressionCV.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNet.rst", "modules/generated/sklearn.linear_model.MultiTaskElasticNetCV.rst", "modules/generated/sklearn.linear_model.MultiTaskLasso.rst", "modules/generated/sklearn.linear_model.MultiTaskLassoCV.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuit.rst", "modules/generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveClassifier.rst", "modules/generated/sklearn.linear_model.PassiveAggressiveRegressor.rst", "modules/generated/sklearn.linear_model.Perceptron.rst", "modules/generated/sklearn.linear_model.PoissonRegressor.rst", "modules/generated/sklearn.linear_model.QuantileRegressor.rst", "modules/generated/sklearn.linear_model.RANSACRegressor.rst", "modules/generated/sklearn.linear_model.Ridge.rst", "modules/generated/sklearn.linear_model.RidgeCV.rst", "modules/generated/sklearn.linear_model.RidgeClassifier.rst", "modules/generated/sklearn.linear_model.RidgeClassifierCV.rst", "modules/generated/sklearn.linear_model.SGDClassifier.rst", "modules/generated/sklearn.linear_model.SGDOneClassSVM.rst", "modules/generated/sklearn.linear_model.SGDRegressor.rst", "modules/generated/sklearn.linear_model.TheilSenRegressor.rst", "modules/generated/sklearn.linear_model.TweedieRegressor.rst", "modules/generated/sklearn.linear_model.enet_path.rst", "modules/generated/sklearn.linear_model.lars_path.rst", "modules/generated/sklearn.linear_model.lars_path_gram.rst", "modules/generated/sklearn.linear_model.lasso_path.rst", "modules/generated/sklearn.linear_model.orthogonal_mp.rst", "modules/generated/sklearn.linear_model.orthogonal_mp_gram.rst", "modules/generated/sklearn.linear_model.ridge_regression.rst", "modules/generated/sklearn.manifold.Isomap.rst", "modules/generated/sklearn.manifold.LocallyLinearEmbedding.rst", "modules/generated/sklearn.manifold.MDS.rst", "modules/generated/sklearn.manifold.SpectralEmbedding.rst", "modules/generated/sklearn.manifold.TSNE.rst", "modules/generated/sklearn.manifold.locally_linear_embedding.rst", "modules/generated/sklearn.manifold.smacof.rst", "modules/generated/sklearn.manifold.spectral_embedding.rst", "modules/generated/sklearn.manifold.trustworthiness.rst", "modules/generated/sklearn.metrics.ConfusionMatrixDisplay.rst", "modules/generated/sklearn.metrics.DetCurveDisplay.rst", "modules/generated/sklearn.metrics.DistanceMetric.rst", "modules/generated/sklearn.metrics.PrecisionRecallDisplay.rst", "modules/generated/sklearn.metrics.PredictionErrorDisplay.rst", "modules/generated/sklearn.metrics.RocCurveDisplay.rst", "modules/generated/sklearn.metrics.accuracy_score.rst", "modules/generated/sklearn.metrics.adjusted_mutual_info_score.rst", "modules/generated/sklearn.metrics.adjusted_rand_score.rst", "modules/generated/sklearn.metrics.auc.rst", "modules/generated/sklearn.metrics.average_precision_score.rst", "modules/generated/sklearn.metrics.balanced_accuracy_score.rst", "modules/generated/sklearn.metrics.brier_score_loss.rst", "modules/generated/sklearn.metrics.calinski_harabasz_score.rst", "modules/generated/sklearn.metrics.check_scoring.rst", "modules/generated/sklearn.metrics.class_likelihood_ratios.rst", "modules/generated/sklearn.metrics.classification_report.rst", "modules/generated/sklearn.metrics.cluster.contingency_matrix.rst", "modules/generated/sklearn.metrics.cluster.pair_confusion_matrix.rst", "modules/generated/sklearn.metrics.cohen_kappa_score.rst", "modules/generated/sklearn.metrics.completeness_score.rst", "modules/generated/sklearn.metrics.confusion_matrix.rst", "modules/generated/sklearn.metrics.consensus_score.rst", "modules/generated/sklearn.metrics.coverage_error.rst", "modules/generated/sklearn.metrics.d2_absolute_error_score.rst", "modules/generated/sklearn.metrics.d2_log_loss_score.rst", "modules/generated/sklearn.metrics.d2_pinball_score.rst", "modules/generated/sklearn.metrics.d2_tweedie_score.rst", "modules/generated/sklearn.metrics.davies_bouldin_score.rst", "modules/generated/sklearn.metrics.dcg_score.rst", "modules/generated/sklearn.metrics.det_curve.rst", "modules/generated/sklearn.metrics.explained_variance_score.rst", "modules/generated/sklearn.metrics.f1_score.rst", "modules/generated/sklearn.metrics.fbeta_score.rst", "modules/generated/sklearn.metrics.fowlkes_mallows_score.rst", "modules/generated/sklearn.metrics.get_scorer.rst", "modules/generated/sklearn.metrics.get_scorer_names.rst", "modules/generated/sklearn.metrics.hamming_loss.rst", "modules/generated/sklearn.metrics.hinge_loss.rst", "modules/generated/sklearn.metrics.homogeneity_completeness_v_measure.rst", "modules/generated/sklearn.metrics.homogeneity_score.rst", "modules/generated/sklearn.metrics.jaccard_score.rst", "modules/generated/sklearn.metrics.label_ranking_average_precision_score.rst", "modules/generated/sklearn.metrics.label_ranking_loss.rst", "modules/generated/sklearn.metrics.log_loss.rst", "modules/generated/sklearn.metrics.make_scorer.rst", "modules/generated/sklearn.metrics.matthews_corrcoef.rst", "modules/generated/sklearn.metrics.max_error.rst", "modules/generated/sklearn.metrics.mean_absolute_error.rst", "modules/generated/sklearn.metrics.mean_absolute_percentage_error.rst", "modules/generated/sklearn.metrics.mean_gamma_deviance.rst", "modules/generated/sklearn.metrics.mean_pinball_loss.rst", "modules/generated/sklearn.metrics.mean_poisson_deviance.rst", "modules/generated/sklearn.metrics.mean_squared_error.rst", "modules/generated/sklearn.metrics.mean_squared_log_error.rst", "modules/generated/sklearn.metrics.mean_tweedie_deviance.rst", "modules/generated/sklearn.metrics.median_absolute_error.rst", "modules/generated/sklearn.metrics.multilabel_confusion_matrix.rst", "modules/generated/sklearn.metrics.mutual_info_score.rst", "modules/generated/sklearn.metrics.ndcg_score.rst", "modules/generated/sklearn.metrics.normalized_mutual_info_score.rst", "modules/generated/sklearn.metrics.pairwise.additive_chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.chi2_kernel.rst", "modules/generated/sklearn.metrics.pairwise.cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.cosine_similarity.rst", "modules/generated/sklearn.metrics.pairwise.distance_metrics.rst", "modules/generated/sklearn.metrics.pairwise.euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.haversine_distances.rst", "modules/generated/sklearn.metrics.pairwise.kernel_metrics.rst", "modules/generated/sklearn.metrics.pairwise.laplacian_kernel.rst", "modules/generated/sklearn.metrics.pairwise.linear_kernel.rst", "modules/generated/sklearn.metrics.pairwise.manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.nan_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_cosine_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_euclidean_distances.rst", "modules/generated/sklearn.metrics.pairwise.paired_manhattan_distances.rst", "modules/generated/sklearn.metrics.pairwise.pairwise_kernels.rst", "modules/generated/sklearn.metrics.pairwise.polynomial_kernel.rst", "modules/generated/sklearn.metrics.pairwise.rbf_kernel.rst", "modules/generated/sklearn.metrics.pairwise.sigmoid_kernel.rst", "modules/generated/sklearn.metrics.pairwise_distances.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin.rst", "modules/generated/sklearn.metrics.pairwise_distances_argmin_min.rst", "modules/generated/sklearn.metrics.pairwise_distances_chunked.rst", "modules/generated/sklearn.metrics.precision_recall_curve.rst", "modules/generated/sklearn.metrics.precision_recall_fscore_support.rst", "modules/generated/sklearn.metrics.precision_score.rst", "modules/generated/sklearn.metrics.r2_score.rst", "modules/generated/sklearn.metrics.rand_score.rst", "modules/generated/sklearn.metrics.recall_score.rst", "modules/generated/sklearn.metrics.roc_auc_score.rst", "modules/generated/sklearn.metrics.roc_curve.rst", "modules/generated/sklearn.metrics.root_mean_squared_error.rst", "modules/generated/sklearn.metrics.root_mean_squared_log_error.rst", "modules/generated/sklearn.metrics.silhouette_samples.rst", "modules/generated/sklearn.metrics.silhouette_score.rst", "modules/generated/sklearn.metrics.top_k_accuracy_score.rst", "modules/generated/sklearn.metrics.v_measure_score.rst", "modules/generated/sklearn.metrics.zero_one_loss.rst", "modules/generated/sklearn.mixture.BayesianGaussianMixture.rst", "modules/generated/sklearn.mixture.GaussianMixture.rst", "modules/generated/sklearn.model_selection.FixedThresholdClassifier.rst", "modules/generated/sklearn.model_selection.GridSearchCV.rst", "modules/generated/sklearn.model_selection.GroupKFold.rst", "modules/generated/sklearn.model_selection.GroupShuffleSplit.rst", "modules/generated/sklearn.model_selection.HalvingGridSearchCV.rst", "modules/generated/sklearn.model_selection.HalvingRandomSearchCV.rst", "modules/generated/sklearn.model_selection.KFold.rst", "modules/generated/sklearn.model_selection.LearningCurveDisplay.rst", "modules/generated/sklearn.model_selection.LeaveOneGroupOut.rst", "modules/generated/sklearn.model_selection.LeaveOneOut.rst", "modules/generated/sklearn.model_selection.LeavePGroupsOut.rst", "modules/generated/sklearn.model_selection.LeavePOut.rst", "modules/generated/sklearn.model_selection.ParameterGrid.rst", "modules/generated/sklearn.model_selection.ParameterSampler.rst", "modules/generated/sklearn.model_selection.PredefinedSplit.rst", "modules/generated/sklearn.model_selection.RandomizedSearchCV.rst", "modules/generated/sklearn.model_selection.RepeatedKFold.rst", "modules/generated/sklearn.model_selection.RepeatedStratifiedKFold.rst", "modules/generated/sklearn.model_selection.ShuffleSplit.rst", "modules/generated/sklearn.model_selection.StratifiedGroupKFold.rst", "modules/generated/sklearn.model_selection.StratifiedKFold.rst", "modules/generated/sklearn.model_selection.StratifiedShuffleSplit.rst", "modules/generated/sklearn.model_selection.TimeSeriesSplit.rst", "modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.rst", "modules/generated/sklearn.model_selection.ValidationCurveDisplay.rst", "modules/generated/sklearn.model_selection.check_cv.rst", "modules/generated/sklearn.model_selection.cross_val_predict.rst", "modules/generated/sklearn.model_selection.cross_val_score.rst", "modules/generated/sklearn.model_selection.cross_validate.rst", "modules/generated/sklearn.model_selection.learning_curve.rst", "modules/generated/sklearn.model_selection.permutation_test_score.rst", "modules/generated/sklearn.model_selection.train_test_split.rst", "modules/generated/sklearn.model_selection.validation_curve.rst", "modules/generated/sklearn.multiclass.OneVsOneClassifier.rst", "modules/generated/sklearn.multiclass.OneVsRestClassifier.rst", "modules/generated/sklearn.multiclass.OutputCodeClassifier.rst", "modules/generated/sklearn.multioutput.ClassifierChain.rst", "modules/generated/sklearn.multioutput.MultiOutputClassifier.rst", "modules/generated/sklearn.multioutput.MultiOutputRegressor.rst", "modules/generated/sklearn.multioutput.RegressorChain.rst", "modules/generated/sklearn.naive_bayes.BernoulliNB.rst", "modules/generated/sklearn.naive_bayes.CategoricalNB.rst", "modules/generated/sklearn.naive_bayes.ComplementNB.rst", "modules/generated/sklearn.naive_bayes.GaussianNB.rst", "modules/generated/sklearn.naive_bayes.MultinomialNB.rst", "modules/generated/sklearn.neighbors.BallTree.rst", "modules/generated/sklearn.neighbors.KDTree.rst", "modules/generated/sklearn.neighbors.KNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.KNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.KNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.KernelDensity.rst", "modules/generated/sklearn.neighbors.LocalOutlierFactor.rst", "modules/generated/sklearn.neighbors.NearestCentroid.rst", "modules/generated/sklearn.neighbors.NearestNeighbors.rst", "modules/generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsClassifier.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsRegressor.rst", "modules/generated/sklearn.neighbors.RadiusNeighborsTransformer.rst", "modules/generated/sklearn.neighbors.kneighbors_graph.rst", "modules/generated/sklearn.neighbors.radius_neighbors_graph.rst", "modules/generated/sklearn.neighbors.sort_graph_by_row_values.rst", "modules/generated/sklearn.neural_network.BernoulliRBM.rst", "modules/generated/sklearn.neural_network.MLPClassifier.rst", "modules/generated/sklearn.neural_network.MLPRegressor.rst", "modules/generated/sklearn.pipeline.FeatureUnion.rst", "modules/generated/sklearn.pipeline.Pipeline.rst", "modules/generated/sklearn.pipeline.make_pipeline.rst", "modules/generated/sklearn.pipeline.make_union.rst", "modules/generated/sklearn.preprocessing.Binarizer.rst", "modules/generated/sklearn.preprocessing.FunctionTransformer.rst", "modules/generated/sklearn.preprocessing.KBinsDiscretizer.rst", "modules/generated/sklearn.preprocessing.KernelCenterer.rst", "modules/generated/sklearn.preprocessing.LabelBinarizer.rst", "modules/generated/sklearn.preprocessing.LabelEncoder.rst", "modules/generated/sklearn.preprocessing.MaxAbsScaler.rst", "modules/generated/sklearn.preprocessing.MinMaxScaler.rst", "modules/generated/sklearn.preprocessing.MultiLabelBinarizer.rst", "modules/generated/sklearn.preprocessing.Normalizer.rst", "modules/generated/sklearn.preprocessing.OneHotEncoder.rst", "modules/generated/sklearn.preprocessing.OrdinalEncoder.rst", "modules/generated/sklearn.preprocessing.PolynomialFeatures.rst", "modules/generated/sklearn.preprocessing.PowerTransformer.rst", "modules/generated/sklearn.preprocessing.QuantileTransformer.rst", "modules/generated/sklearn.preprocessing.RobustScaler.rst", "modules/generated/sklearn.preprocessing.SplineTransformer.rst", "modules/generated/sklearn.preprocessing.StandardScaler.rst", "modules/generated/sklearn.preprocessing.TargetEncoder.rst", "modules/generated/sklearn.preprocessing.add_dummy_feature.rst", "modules/generated/sklearn.preprocessing.binarize.rst", "modules/generated/sklearn.preprocessing.label_binarize.rst", "modules/generated/sklearn.preprocessing.maxabs_scale.rst", "modules/generated/sklearn.preprocessing.minmax_scale.rst", "modules/generated/sklearn.preprocessing.normalize.rst", "modules/generated/sklearn.preprocessing.power_transform.rst", "modules/generated/sklearn.preprocessing.quantile_transform.rst", "modules/generated/sklearn.preprocessing.robust_scale.rst", "modules/generated/sklearn.preprocessing.scale.rst", "modules/generated/sklearn.random_projection.GaussianRandomProjection.rst", "modules/generated/sklearn.random_projection.SparseRandomProjection.rst", "modules/generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.rst", "modules/generated/sklearn.semi_supervised.LabelPropagation.rst", "modules/generated/sklearn.semi_supervised.LabelSpreading.rst", "modules/generated/sklearn.semi_supervised.SelfTrainingClassifier.rst", "modules/generated/sklearn.set_config.rst", "modules/generated/sklearn.show_versions.rst", "modules/generated/sklearn.svm.LinearSVC.rst", "modules/generated/sklearn.svm.LinearSVR.rst", "modules/generated/sklearn.svm.NuSVC.rst", "modules/generated/sklearn.svm.NuSVR.rst", "modules/generated/sklearn.svm.OneClassSVM.rst", "modules/generated/sklearn.svm.SVC.rst", "modules/generated/sklearn.svm.SVR.rst", "modules/generated/sklearn.svm.l1_min_c.rst", "modules/generated/sklearn.tree.DecisionTreeClassifier.rst", "modules/generated/sklearn.tree.DecisionTreeRegressor.rst", "modules/generated/sklearn.tree.ExtraTreeClassifier.rst", "modules/generated/sklearn.tree.ExtraTreeRegressor.rst", "modules/generated/sklearn.tree.export_graphviz.rst", "modules/generated/sklearn.tree.export_text.rst", "modules/generated/sklearn.tree.plot_tree.rst", "modules/generated/sklearn.utils.Bunch.rst", "modules/generated/sklearn.utils.ClassifierTags.rst", "modules/generated/sklearn.utils.InputTags.rst", "modules/generated/sklearn.utils.RegressorTags.rst", "modules/generated/sklearn.utils.Tags.rst", "modules/generated/sklearn.utils.TargetTags.rst", "modules/generated/sklearn.utils.TransformerTags.rst", "modules/generated/sklearn.utils._safe_indexing.rst", "modules/generated/sklearn.utils.arrayfuncs.min_pos.rst", "modules/generated/sklearn.utils.as_float_array.rst", "modules/generated/sklearn.utils.assert_all_finite.rst", "modules/generated/sklearn.utils.check_X_y.rst", "modules/generated/sklearn.utils.check_array.rst", "modules/generated/sklearn.utils.check_consistent_length.rst", "modules/generated/sklearn.utils.check_random_state.rst", "modules/generated/sklearn.utils.check_scalar.rst", "modules/generated/sklearn.utils.class_weight.compute_class_weight.rst", "modules/generated/sklearn.utils.class_weight.compute_sample_weight.rst", "modules/generated/sklearn.utils.default_tags.rst", "modules/generated/sklearn.utils.deprecated.rst", "modules/generated/sklearn.utils.discovery.all_displays.rst", "modules/generated/sklearn.utils.discovery.all_estimators.rst", "modules/generated/sklearn.utils.discovery.all_functions.rst", "modules/generated/sklearn.utils.estimator_checks.check_estimator.rst", "modules/generated/sklearn.utils.estimator_checks.parametrize_with_checks.rst", "modules/generated/sklearn.utils.estimator_html_repr.rst", "modules/generated/sklearn.utils.extmath.density.rst", "modules/generated/sklearn.utils.extmath.fast_logdet.rst", "modules/generated/sklearn.utils.extmath.randomized_range_finder.rst", "modules/generated/sklearn.utils.extmath.randomized_svd.rst", "modules/generated/sklearn.utils.extmath.safe_sparse_dot.rst", "modules/generated/sklearn.utils.extmath.weighted_mode.rst", "modules/generated/sklearn.utils.gen_batches.rst", "modules/generated/sklearn.utils.gen_even_slices.rst", "modules/generated/sklearn.utils.get_tags.rst", "modules/generated/sklearn.utils.graph.single_source_shortest_path_length.rst", "modules/generated/sklearn.utils.indexable.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRequest.rst", "modules/generated/sklearn.utils.metadata_routing.MetadataRouter.rst", "modules/generated/sklearn.utils.metadata_routing.MethodMapping.rst", "modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.rst", "modules/generated/sklearn.utils.metadata_routing.process_routing.rst", "modules/generated/sklearn.utils.metaestimators.available_if.rst", "modules/generated/sklearn.utils.multiclass.is_multilabel.rst", "modules/generated/sklearn.utils.multiclass.type_of_target.rst", "modules/generated/sklearn.utils.multiclass.unique_labels.rst", "modules/generated/sklearn.utils.murmurhash3_32.rst", "modules/generated/sklearn.utils.parallel.Parallel.rst", "modules/generated/sklearn.utils.parallel.delayed.rst", "modules/generated/sklearn.utils.parallel_backend.rst", "modules/generated/sklearn.utils.random.sample_without_replacement.rst", "modules/generated/sklearn.utils.register_parallel_backend.rst", "modules/generated/sklearn.utils.resample.rst", "modules/generated/sklearn.utils.safe_mask.rst", "modules/generated/sklearn.utils.safe_sqr.rst", "modules/generated/sklearn.utils.shuffle.rst", "modules/generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_row_scale.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_column.rst", "modules/generated/sklearn.utils.sparsefuncs.inplace_swap_row.rst", "modules/generated/sklearn.utils.sparsefuncs.mean_variance_axis.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.rst", "modules/generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.rst", "modules/generated/sklearn.utils.validation.check_is_fitted.rst", "modules/generated/sklearn.utils.validation.check_memory.rst", "modules/generated/sklearn.utils.validation.check_symmetric.rst", "modules/generated/sklearn.utils.validation.column_or_1d.rst", "modules/generated/sklearn.utils.validation.has_fit_parameter.rst", "modules/generated/sklearn.utils.validation.validate_data.rst", "modules/grid_search.rst", "modules/impute.rst", "modules/isotonic.rst", "modules/kernel_approximation.rst", "modules/kernel_ridge.rst", "modules/lda_qda.rst", "modules/learning_curve.rst", "modules/linear_model.rst", "modules/manifold.rst", "modules/metrics.rst", "modules/mixture.rst", "modules/model_evaluation.rst", "modules/multiclass.rst", "modules/naive_bayes.rst", "modules/neighbors.rst", "modules/neural_networks_supervised.rst", "modules/neural_networks_unsupervised.rst", "modules/outlier_detection.rst", "modules/partial_dependence.rst", "modules/permutation_importance.rst", "modules/pipeline.rst", "modules/preprocessing.rst", "modules/preprocessing_targets.rst", "modules/random_projection.rst", "modules/semi_supervised.rst", "modules/sgd.rst", "modules/svm.rst", "modules/tree.rst", "modules/unsupervised_reduction.rst", "presentations.rst", "related_projects.rst", "roadmap.rst", "sg_execution_times.rst", "supervised_learning.rst", "support.rst", "testimonials/testimonials.rst", "unsupervised_learning.rst", "user_guide.rst", "versions.rst", "visualizations.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/older_versions.rst", "whats_new/v0.13.rst", "whats_new/v0.14.rst", "whats_new/v0.15.rst", "whats_new/v0.16.rst", "whats_new/v0.17.rst", "whats_new/v0.18.rst", "whats_new/v0.19.rst", "whats_new/v0.20.rst", "whats_new/v0.21.rst", "whats_new/v0.22.rst", "whats_new/v0.23.rst", "whats_new/v0.24.rst", "whats_new/v1.0.rst", "whats_new/v1.1.rst", "whats_new/v1.2.rst", "whats_new/v1.3.rst", "whats_new/v1.4.rst", "whats_new/v1.5.rst", "whats_new/v1.6.rst"], "indexentries": {"1d": [[390, "term-1d", true]], "1d array": [[390, "term-1d-array", true]], "2d": [[390, "term-2d", true]], "2d array": [[390, "term-2d-array", true]], "__call__() (sklearn.compose.make_column_selector method)": [[466, "sklearn.compose.make_column_selector.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.__call__", false]], "__call__() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.__call__", false]], "__call__() (sklearn.utils.deprecated method)": [[939, "sklearn.utils.deprecated.__call__", false]], "__call__() (sklearn.utils.parallel.parallel method)": [[967, "sklearn.utils.parallel.Parallel.__call__", false]], "_estimator_type": [[390, "term-_estimator_type", true]], "_safe_indexing() (in module sklearn.utils)": [[927, "sklearn.utils._safe_indexing", false]], "accuracy_score() (in module sklearn.metrics)": [[704, "sklearn.metrics.accuracy_score", false]], "adaboostclassifier (class in sklearn.ensemble)": [[554, "sklearn.ensemble.AdaBoostClassifier", false]], "adaboostregressor (class in sklearn.ensemble)": [[555, "sklearn.ensemble.AdaBoostRegressor", false]], "add() (sklearn.utils.metadata_routing.metadatarouter method)": [[958, "sklearn.utils.metadata_routing.MetadataRouter.add", false]], "add() (sklearn.utils.metadata_routing.methodmapping method)": [[959, "sklearn.utils.metadata_routing.MethodMapping.add", false]], "add_dummy_feature() (in module sklearn.preprocessing)": [[887, "sklearn.preprocessing.add_dummy_feature", false]], "add_self_request() (sklearn.utils.metadata_routing.metadatarouter method)": [[958, "sklearn.utils.metadata_routing.MetadataRouter.add_self_request", false]], "additive_chi2_kernel() (in module sklearn.metrics.pairwise)": [[759, "sklearn.metrics.pairwise.additive_chi2_kernel", false]], "additivechi2sampler (class in sklearn.kernel_approximation)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler", false]], "adjusted_mutual_info_score() (in module sklearn.metrics)": [[705, "sklearn.metrics.adjusted_mutual_info_score", false]], "adjusted_rand_score() (in module sklearn.metrics)": [[706, "sklearn.metrics.adjusted_rand_score", false]], "affinity_propagation() (in module sklearn.cluster)": [[454, "sklearn.cluster.affinity_propagation", false]], "affinitypropagation (class in sklearn.cluster)": [[440, "sklearn.cluster.AffinityPropagation", false]], "agglomerativeclustering (class in sklearn.cluster)": [[441, "sklearn.cluster.AgglomerativeClustering", false]], "aic() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.aic", false]], "all_displays() (in module sklearn.utils.discovery)": [[940, "sklearn.utils.discovery.all_displays", false]], "all_estimators() (in module sklearn.utils.discovery)": [[941, "sklearn.utils.discovery.all_estimators", false]], "all_functions() (in module sklearn.utils.discovery)": [[942, "sklearn.utils.discovery.all_functions", false]], "api": [[390, "term-API", true]], "apply() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.apply", false]], "apply() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.apply", false]], "apply() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.apply", false]], "apply() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.apply", false]], "apply() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.apply", false]], "apply() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.apply", false]], "apply() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.apply", false]], "apply() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.apply", false]], "apply() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.apply", false]], "apply() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.apply", false]], "apply() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.apply", false]], "ardregression (class in sklearn.linear_model)": [[645, "sklearn.linear_model.ARDRegression", false]], "array-like": [[390, "term-array-like", true]], "as_float_array() (in module sklearn.utils)": [[929, "sklearn.utils.as_float_array", false]], "assert_all_finite() (in module sklearn.utils)": [[930, "sklearn.utils.assert_all_finite", false]], "attribute": [[390, "term-attribute", true]], "attributes": [[390, "term-attributes", true]], "auc() (in module sklearn.metrics)": [[707, "sklearn.metrics.auc", false]], "available_if() (in module sklearn.utils.metaestimators)": [[962, "sklearn.utils.metaestimators.available_if", false]], "average_precision_score() (in module sklearn.metrics)": [[708, "sklearn.metrics.average_precision_score", false]], "backwards compatibility": [[390, "term-backwards-compatibility", true]], "baggingclassifier (class in sklearn.ensemble)": [[556, "sklearn.ensemble.BaggingClassifier", false]], "baggingregressor (class in sklearn.ensemble)": [[557, "sklearn.ensemble.BaggingRegressor", false]], "balanced_accuracy_score() (in module sklearn.metrics)": [[709, "sklearn.metrics.balanced_accuracy_score", false]], "balltree (class in sklearn.neighbors)": [[845, "sklearn.neighbors.BallTree", false]], "baseestimator (class in sklearn.base)": [[422, "sklearn.base.BaseEstimator", false]], "bayesiangaussianmixture (class in sklearn.mixture)": [[798, "sklearn.mixture.BayesianGaussianMixture", false]], "bayesianridge (class in sklearn.linear_model)": [[646, "sklearn.linear_model.BayesianRidge", false]], "bernoullinb (class in sklearn.naive_bayes)": [[840, "sklearn.naive_bayes.BernoulliNB", false]], "bernoullirbm (class in sklearn.neural_network)": [[861, "sklearn.neural_network.BernoulliRBM", false]], "bic() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.bic", false]], "biclustermixin (class in sklearn.base)": [[423, "sklearn.base.BiclusterMixin", false]], "biclusters_ (sklearn.base.biclustermixin property)": [[423, "sklearn.base.BiclusterMixin.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralbiclustering property)": [[451, "sklearn.cluster.SpectralBiclustering.biclusters_", false]], "biclusters_ (sklearn.cluster.spectralcoclustering property)": [[453, "sklearn.cluster.SpectralCoclustering.biclusters_", false]], "binarize() (in module sklearn.preprocessing)": [[888, "sklearn.preprocessing.binarize", false]], "binarizer (class in sklearn.preprocessing)": [[868, "sklearn.preprocessing.Binarizer", false]], "binary": [[390, "term-binary", true]], "birch (class in sklearn.cluster)": [[442, "sklearn.cluster.Birch", false]], "bisectingkmeans (class in sklearn.cluster)": [[443, "sklearn.cluster.BisectingKMeans", false]], "bounds (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.bounds", false]], "bounds (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.bounds", false]], "bounds (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.bounds", false]], "bounds (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.bounds", false]], "bounds (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.bounds", false]], "bounds (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.bounds", false]], "bounds (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.bounds", false]], "bounds (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.bounds", false]], "bounds (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.bounds", false]], "bounds (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.bounds", false]], "brier_score_loss() (in module sklearn.metrics)": [[710, "sklearn.metrics.brier_score_loss", false]], "build_analyzer() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.build_analyzer", false]], "build_analyzer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.build_analyzer", false]], "build_preprocessor() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.build_preprocessor", false]], "build_preprocessor() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.build_preprocessor", false]], "build_tokenizer() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.build_tokenizer", false]], "build_tokenizer() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.build_tokenizer", false]], "bunch (class in sklearn.utils)": [[920, "sklearn.utils.Bunch", false]], "calibratedclassifiercv (class in sklearn.calibration)": [[437, "sklearn.calibration.CalibratedClassifierCV", false]], "calibration_curve() (in module sklearn.calibration)": [[439, "sklearn.calibration.calibration_curve", false]], "calibrationdisplay (class in sklearn.calibration)": [[438, "sklearn.calibration.CalibrationDisplay", false]], "calinski_harabasz_score() (in module sklearn.metrics)": [[711, "sklearn.metrics.calinski_harabasz_score", false]], "callable": [[390, "term-callable", true]], "categorical feature": [[390, "term-categorical-feature", true]], "categoricalnb (class in sklearn.naive_bayes)": [[841, "sklearn.naive_bayes.CategoricalNB", false]], "cca (class in sklearn.cross_decomposition)": [[482, "sklearn.cross_decomposition.CCA", false]], "check_array() (in module sklearn.utils)": [[932, "sklearn.utils.check_array", false]], "check_consistent_length() (in module sklearn.utils)": [[933, "sklearn.utils.check_consistent_length", false]], "check_cv() (in module sklearn.model_selection)": [[825, "sklearn.model_selection.check_cv", false]], "check_estimator() (in module sklearn.utils.estimator_checks)": [[943, "sklearn.utils.estimator_checks.check_estimator", false]], "check_increasing() (in module sklearn.isotonic)": [[637, "sklearn.isotonic.check_increasing", false]], "check_is_fitted() (in module sklearn.utils.validation)": [[985, "sklearn.utils.validation.check_is_fitted", false]], "check_memory() (in module sklearn.utils.validation)": [[986, "sklearn.utils.validation.check_memory", false]], "check_random_state() (in module sklearn.utils)": [[934, "sklearn.utils.check_random_state", false]], "check_scalar() (in module sklearn.utils)": [[935, "sklearn.utils.check_scalar", false]], "check_scoring() (in module sklearn.metrics)": [[712, "sklearn.metrics.check_scoring", false]], "check_symmetric() (in module sklearn.utils.validation)": [[987, "sklearn.utils.validation.check_symmetric", false]], "check_x_y() (in module sklearn.utils)": [[931, "sklearn.utils.check_X_y", false]], "chi2() (in module sklearn.feature_selection)": [[605, "sklearn.feature_selection.chi2", false]], "chi2_kernel() (in module sklearn.metrics.pairwise)": [[760, "sklearn.metrics.pairwise.chi2_kernel", false]], "class_likelihood_ratios() (in module sklearn.metrics)": [[713, "sklearn.metrics.class_likelihood_ratios", false]], "class_weight": [[390, "term-class_weight", true]], "classes_": [[390, "term-classes_", true]], "classes_ (sklearn.feature_selection.rfe property)": [[594, "sklearn.feature_selection.RFE.classes_", false]], "classes_ (sklearn.feature_selection.rfecv property)": [[595, "sklearn.feature_selection.RFECV.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifier property)": [[675, "sklearn.linear_model.RidgeClassifier.classes_", false]], "classes_ (sklearn.linear_model.ridgeclassifiercv property)": [[676, "sklearn.linear_model.RidgeClassifierCV.classes_", false]], "classes_ (sklearn.model_selection.fixedthresholdclassifier property)": [[800, "sklearn.model_selection.FixedThresholdClassifier.classes_", false]], "classes_ (sklearn.model_selection.gridsearchcv property)": [[801, "sklearn.model_selection.GridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvinggridsearchcv property)": [[804, "sklearn.model_selection.HalvingGridSearchCV.classes_", false]], "classes_ (sklearn.model_selection.halvingrandomsearchcv property)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.classes_", false]], "classes_ (sklearn.model_selection.randomizedsearchcv property)": [[815, "sklearn.model_selection.RandomizedSearchCV.classes_", false]], "classes_ (sklearn.model_selection.tunedthresholdclassifiercv property)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.classes_", false]], "classes_ (sklearn.pipeline.pipeline property)": [[865, "sklearn.pipeline.Pipeline.classes_", false]], "classification_report() (in module sklearn.metrics)": [[714, "sklearn.metrics.classification_report", false]], "classifier": [[390, "term-classifier", true]], "classifierchain (class in sklearn.multioutput)": [[836, "sklearn.multioutput.ClassifierChain", false]], "classifiermixin (class in sklearn.base)": [[425, "sklearn.base.ClassifierMixin", false]], "classifiers": [[390, "term-classifiers", true]], "classifiertags (class in sklearn.utils)": [[921, "sklearn.utils.ClassifierTags", false]], "classnameprefixfeaturesoutmixin (class in sklearn.base)": [[424, "sklearn.base.ClassNamePrefixFeaturesOutMixin", false]], "clear() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.clear", false]], "clear_data_home() (in module sklearn.datasets)": [[486, "sklearn.datasets.clear_data_home", false]], "clone": [[390, "term-clone", true]], "clone() (in module sklearn.base)": [[433, "sklearn.base.clone", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.clone_with_theta", false]], "clone_with_theta() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.clone_with_theta", false]], "cloned": [[390, "term-cloned", true]], "cluster_optics_dbscan() (in module sklearn.cluster)": [[455, "sklearn.cluster.cluster_optics_dbscan", false]], "cluster_optics_xi() (in module sklearn.cluster)": [[456, "sklearn.cluster.cluster_optics_xi", false]], "clusterer": [[390, "term-clusterer", true]], "clusterers": [[390, "term-clusterers", true]], "clustermixin (class in sklearn.base)": [[426, "sklearn.base.ClusterMixin", false]], "coef_": [[390, "term-coef_", true]], "coef_ (sklearn.svm.nusvc property)": [[907, "sklearn.svm.NuSVC.coef_", false]], "coef_ (sklearn.svm.nusvr property)": [[908, "sklearn.svm.NuSVR.coef_", false]], "coef_ (sklearn.svm.oneclasssvm property)": [[909, "sklearn.svm.OneClassSVM.coef_", false]], "coef_ (sklearn.svm.svc property)": [[910, "sklearn.svm.SVC.coef_", false]], "coef_ (sklearn.svm.svr property)": [[911, "sklearn.svm.SVR.coef_", false]], "cohen_kappa_score() (in module sklearn.metrics)": [[717, "sklearn.metrics.cohen_kappa_score", false]], "column_or_1d() (in module sklearn.utils.validation)": [[988, "sklearn.utils.validation.column_or_1d", false]], "columntransformer (class in sklearn.compose)": [[464, "sklearn.compose.ColumnTransformer", false]], "common tests": [[390, "term-common-tests", true]], "complementnb (class in sklearn.naive_bayes)": [[842, "sklearn.naive_bayes.ComplementNB", false]], "completeness_score() (in module sklearn.metrics)": [[718, "sklearn.metrics.completeness_score", false]], "components_": [[390, "term-components_", true]], "compoundkernel (class in sklearn.gaussian_process.kernels)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel", false]], "compute_class_weight() (in module sklearn.utils.class_weight)": [[936, "sklearn.utils.class_weight.compute_class_weight", false]], "compute_optics_graph() (in module sklearn.cluster)": [[457, "sklearn.cluster.compute_optics_graph", false]], "compute_sample_weight() (in module sklearn.utils.class_weight)": [[937, "sklearn.utils.class_weight.compute_sample_weight", false]], "config_context() (in module sklearn)": [[468, "sklearn.config_context", false]], "confusion_matrix() (in module sklearn.metrics)": [[719, "sklearn.metrics.confusion_matrix", false]], "confusionmatrixdisplay (class in sklearn.metrics)": [[698, "sklearn.metrics.ConfusionMatrixDisplay", false]], "consensus_score() (in module sklearn.metrics)": [[720, "sklearn.metrics.consensus_score", false]], "constantkernel (class in sklearn.gaussian_process.kernels)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel", false]], "consumer": [[390, "term-consumer", true]], "consumes() (sklearn.utils.metadata_routing.metadatarequest method)": [[957, "sklearn.utils.metadata_routing.MetadataRequest.consumes", false]], "consumes() (sklearn.utils.metadata_routing.metadatarouter method)": [[958, "sklearn.utils.metadata_routing.MetadataRouter.consumes", false]], "contingency_matrix() (in module sklearn.metrics.cluster)": [[715, "sklearn.metrics.cluster.contingency_matrix", false]], "continuous": [[390, "term-continuous", true]], "continuous multi-output": [[390, "term-continuous-multi-output", true]], "continuous multioutput": [[390, "term-continuous-multioutput", true]], "convergencewarning": [[572, "sklearn.exceptions.ConvergenceWarning", false]], "copy() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.copy", false]], "correct_covariance() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.correct_covariance", false]], "correct_covariance() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.correct_covariance", false]], "cosine_distances() (in module sklearn.metrics.pairwise)": [[761, "sklearn.metrics.pairwise.cosine_distances", false]], "cosine_similarity() (in module sklearn.metrics.pairwise)": [[762, "sklearn.metrics.pairwise.cosine_similarity", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.cost_complexity_pruning_path", false]], "cost_complexity_pruning_path() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.cost_complexity_pruning_path", false]], "count() (sklearn.gaussian_process.kernels.hyperparameter method)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.count", false]], "countvectorizer (class in sklearn.feature_extraction.text)": [[589, "sklearn.feature_extraction.text.CountVectorizer", false]], "coverage_error() (in module sklearn.metrics)": [[721, "sklearn.metrics.coverage_error", false]], "cross fitting": [[390, "term-0", true]], "cross validation": [[390, "term-1", true]], "cross-fitting": [[390, "term-cross-fitting", true]], "cross-validation": [[390, "term-cross-validation", true]], "cross-validation estimator": [[390, "term-cross-validation-estimator", true]], "cross-validation generator": [[390, "term-cross-validation-generator", true]], "cross-validation splitter": [[390, "term-cross-validation-splitter", true]], "cross_val_predict() (in module sklearn.model_selection)": [[826, "sklearn.model_selection.cross_val_predict", false]], "cross_val_score() (in module sklearn.model_selection)": [[827, "sklearn.model_selection.cross_val_score", false]], "cross_validate() (in module sklearn.model_selection)": [[828, "sklearn.model_selection.cross_validate", false]], "cv": [[390, "term-cv", true]], "cv splitter": [[390, "term-CV-splitter", true]], "d2_absolute_error_score() (in module sklearn.metrics)": [[722, "sklearn.metrics.d2_absolute_error_score", false]], "d2_log_loss_score() (in module sklearn.metrics)": [[723, "sklearn.metrics.d2_log_loss_score", false]], "d2_pinball_score() (in module sklearn.metrics)": [[724, "sklearn.metrics.d2_pinball_score", false]], "d2_tweedie_score() (in module sklearn.metrics)": [[725, "sklearn.metrics.d2_tweedie_score", false]], "data leakage": [[390, "term-data-leakage", true]], "data type": [[390, "term-data-type", true]], "dataconversionwarning": [[573, "sklearn.exceptions.DataConversionWarning", false]], "datadimensionalitywarning": [[574, "sklearn.exceptions.DataDimensionalityWarning", false]], "davies_bouldin_score() (in module sklearn.metrics)": [[726, "sklearn.metrics.davies_bouldin_score", false]], "dbscan (class in sklearn.cluster)": [[444, "sklearn.cluster.DBSCAN", false]], "dbscan() (in module sklearn.cluster)": [[419, "sklearn.cluster.dbscan", false]], "dbscan_clustering() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.dbscan_clustering", false]], "dcg_score() (in module sklearn.metrics)": [[727, "sklearn.metrics.dcg_score", false]], "decision_function": [[390, "term-decision_function", true]], "decision_function() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.decision_function", false]], "decision_function() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.decision_function", false]], "decision_function() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.decision_function", false]], "decision_function() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.decision_function", false]], "decision_function() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.decision_function", false]], "decision_function() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.decision_function", false]], "decision_function() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.decision_function", false]], "decision_function() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.decision_function", false]], "decision_function() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.decision_function", false]], "decision_function() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.decision_function", false]], "decision_function() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.decision_function", false]], "decision_function() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.decision_function", false]], "decision_function() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.decision_function", false]], "decision_function() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.decision_function", false]], "decision_function() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.decision_function", false]], "decision_function() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.decision_function", false]], "decision_function() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.decision_function", false]], "decision_function() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.decision_function", false]], "decision_function() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.decision_function", false]], "decision_function() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.decision_function", false]], "decision_function() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.decision_function", false]], "decision_function() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.decision_function", false]], "decision_function() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.decision_function", false]], "decision_path() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.decision_path", false]], "decision_path() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.decision_path", false]], "decision_path() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.decision_path", false]], "decision_path() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.decision_path", false]], "decision_path() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.decision_path", false]], "decisionboundarydisplay (class in sklearn.inspection)": [[632, "sklearn.inspection.DecisionBoundaryDisplay", false]], "decisiontreeclassifier (class in sklearn.tree)": [[913, "sklearn.tree.DecisionTreeClassifier", false]], "decisiontreeregressor (class in sklearn.tree)": [[914, "sklearn.tree.DecisionTreeRegressor", false]], "decode() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.decode", false]], "decode() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.decode", false]], "default_tags() (in module sklearn.utils)": [[938, "sklearn.utils.default_tags", false]], "delayed() (in module sklearn.utils.parallel)": [[968, "sklearn.utils.parallel.delayed", false]], "densify() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.densify", false]], "densify() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.densify", false]], "densify() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.densify", false]], "densify() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.densify", false]], "densify() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.densify", false]], "densify() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.densify", false]], "densify() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.densify", false]], "densify() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.densify", false]], "density estimator": [[390, "term-density-estimator", true]], "density() (in module sklearn.utils.extmath)": [[946, "sklearn.utils.extmath.density", false]], "densitymixin (class in sklearn.base)": [[427, "sklearn.base.DensityMixin", false]], "deprecated (class in sklearn.utils)": [[939, "sklearn.utils.deprecated", false]], "deprecation": [[390, "term-deprecation", true]], "det_curve() (in module sklearn.metrics)": [[728, "sklearn.metrics.det_curve", false]], "detcurvedisplay (class in sklearn.metrics)": [[699, "sklearn.metrics.DetCurveDisplay", false]], "diag() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.diag", false]], "diag() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.diag", false]], "diag() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.diag", false]], "diag() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.diag", false]], "diag() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.diag", false]], "diag() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.diag", false]], "diag() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.diag", false]], "diag() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.diag", false]], "diag() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.diag", false]], "diag() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.diag", false]], "dict_learning() (in module sklearn.decomposition)": [[546, "sklearn.decomposition.dict_learning", false]], "dict_learning_online() (in module sklearn.decomposition)": [[547, "sklearn.decomposition.dict_learning_online", false]], "dictionarylearning (class in sklearn.decomposition)": [[532, "sklearn.decomposition.DictionaryLearning", false]], "dictvectorizer (class in sklearn.feature_extraction)": [[582, "sklearn.feature_extraction.DictVectorizer", false]], "dimensionality": [[390, "term-dimensionality", true]], "dispatch_next() (sklearn.utils.parallel.parallel method)": [[967, "sklearn.utils.parallel.Parallel.dispatch_next", false]], "dispatch_one_batch() (sklearn.utils.parallel.parallel method)": [[967, "sklearn.utils.parallel.Parallel.dispatch_one_batch", false]], "distance_metrics() (in module sklearn.metrics.pairwise)": [[763, "sklearn.metrics.pairwise.distance_metrics", false]], "distancemetric (class in sklearn.metrics)": [[700, "sklearn.metrics.DistanceMetric", false]], "docstring": [[390, "term-docstring", true]], "dotproduct (class in sklearn.gaussian_process.kernels)": [[615, "sklearn.gaussian_process.kernels.DotProduct", false]], "double underscore": [[390, "term-double-underscore", true]], "double underscore notation": [[390, "term-double-underscore-notation", true]], "dtype": [[390, "term-dtype", true]], "duck typing": [[390, "term-duck-typing", true]], "dummyclassifier (class in sklearn.dummy)": [[552, "sklearn.dummy.DummyClassifier", false]], "dummyregressor (class in sklearn.dummy)": [[553, "sklearn.dummy.DummyRegressor", false]], "dump_svmlight_file() (in module sklearn.datasets)": [[487, "sklearn.datasets.dump_svmlight_file", false]], "early stopping": [[390, "term-early-stopping", true]], "efficiencywarning": [[575, "sklearn.exceptions.EfficiencyWarning", false]], "elasticnet (class in sklearn.linear_model)": [[647, "sklearn.linear_model.ElasticNet", false]], "elasticnetcv (class in sklearn.linear_model)": [[648, "sklearn.linear_model.ElasticNetCV", false]], "ellipticenvelope (class in sklearn.covariance)": [[469, "sklearn.covariance.EllipticEnvelope", false]], "embedding_": [[390, "term-embedding_", true]], "empirical_covariance() (in module sklearn.covariance)": [[477, "sklearn.covariance.empirical_covariance", false]], "empiricalcovariance (class in sklearn.covariance)": [[470, "sklearn.covariance.EmpiricalCovariance", false]], "enet_path() (in module sklearn.linear_model)": [[682, "sklearn.linear_model.enet_path", false]], "error_norm() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.error_norm", false]], "error_norm() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.error_norm", false]], "error_norm() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.error_norm", false]], "error_norm() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.error_norm", false]], "error_norm() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.error_norm", false]], "error_norm() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.error_norm", false]], "error_norm() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.error_norm", false]], "error_norm() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.error_norm", false]], "estimate_bandwidth() (in module sklearn.cluster)": [[458, "sklearn.cluster.estimate_bandwidth", false]], "estimator": [[390, "term-estimator", true]], "estimator instance": [[390, "term-estimator-instance", true]], "estimator tags": [[390, "term-estimator-tags", true]], "estimator_html_repr() (in module sklearn.utils)": [[945, "sklearn.utils.estimator_html_repr", false]], "estimators": [[390, "term-estimators", true]], "estimators_samples_ (sklearn.ensemble.baggingclassifier property)": [[556, "sklearn.ensemble.BaggingClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.baggingregressor property)": [[557, "sklearn.ensemble.BaggingRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesclassifier property)": [[558, "sklearn.ensemble.ExtraTreesClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.extratreesregressor property)": [[559, "sklearn.ensemble.ExtraTreesRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.isolationforest property)": [[564, "sklearn.ensemble.IsolationForest.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestclassifier property)": [[565, "sklearn.ensemble.RandomForestClassifier.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomforestregressor property)": [[566, "sklearn.ensemble.RandomForestRegressor.estimators_samples_", false]], "estimators_samples_ (sklearn.ensemble.randomtreesembedding property)": [[567, "sklearn.ensemble.RandomTreesEmbedding.estimators_samples_", false]], "euclidean_distances() (in module sklearn.metrics.pairwise)": [[764, "sklearn.metrics.pairwise.euclidean_distances", false]], "evaluation metric": [[390, "term-evaluation-metric", true]], "evaluation metrics": [[390, "term-evaluation-metrics", true]], "examples": [[390, "term-examples", true]], "experimental": [[390, "term-experimental", true]], "explained_variance_score() (in module sklearn.metrics)": [[729, "sklearn.metrics.explained_variance_score", false]], "exponentiation (class in sklearn.gaussian_process.kernels)": [[617, "sklearn.gaussian_process.kernels.Exponentiation", false]], "export_graphviz() (in module sklearn.tree)": [[917, "sklearn.tree.export_graphviz", false]], "export_text() (in module sklearn.tree)": [[918, "sklearn.tree.export_text", false]], "expsinesquared (class in sklearn.gaussian_process.kernels)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared", false]], "extract_patches_2d() (in module sklearn.feature_extraction.image)": [[585, "sklearn.feature_extraction.image.extract_patches_2d", false]], "extratreeclassifier (class in sklearn.tree)": [[915, "sklearn.tree.ExtraTreeClassifier", false]], "extratreeregressor (class in sklearn.tree)": [[916, "sklearn.tree.ExtraTreeRegressor", false]], "extratreesclassifier (class in sklearn.ensemble)": [[558, "sklearn.ensemble.ExtraTreesClassifier", false]], "extratreesregressor (class in sklearn.ensemble)": [[559, "sklearn.ensemble.ExtraTreesRegressor", false]], "f1_score() (in module sklearn.metrics)": [[730, "sklearn.metrics.f1_score", false]], "f_classif() (in module sklearn.feature_selection)": [[606, "sklearn.feature_selection.f_classif", false]], "f_regression() (in module sklearn.feature_selection)": [[607, "sklearn.feature_selection.f_regression", false]], "factoranalysis (class in sklearn.decomposition)": [[533, "sklearn.decomposition.FactorAnalysis", false]], "fast_logdet() (in module sklearn.utils.extmath)": [[947, "sklearn.utils.extmath.fast_logdet", false]], "fastica (class in sklearn.decomposition)": [[534, "sklearn.decomposition.FastICA", false]], "fastica() (in module sklearn.decomposition)": [[420, "sklearn.decomposition.fastica", false]], "fbeta_score() (in module sklearn.metrics)": [[731, "sklearn.metrics.fbeta_score", false]], "feature": [[390, "term-feature", true]], "feature extractor": [[390, "term-feature-extractor", true]], "feature extractors": [[390, "term-feature-extractors", true]], "feature vector": [[390, "term-feature-vector", true]], "feature_importances_": [[390, "term-feature_importances_", true]], "feature_importances_ (sklearn.ensemble.adaboostclassifier property)": [[554, "sklearn.ensemble.AdaBoostClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.adaboostregressor property)": [[555, "sklearn.ensemble.AdaBoostRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesclassifier property)": [[558, "sklearn.ensemble.ExtraTreesClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.extratreesregressor property)": [[559, "sklearn.ensemble.ExtraTreesRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingclassifier property)": [[560, "sklearn.ensemble.GradientBoostingClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.gradientboostingregressor property)": [[561, "sklearn.ensemble.GradientBoostingRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestclassifier property)": [[565, "sklearn.ensemble.RandomForestClassifier.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomforestregressor property)": [[566, "sklearn.ensemble.RandomForestRegressor.feature_importances_", false]], "feature_importances_ (sklearn.ensemble.randomtreesembedding property)": [[567, "sklearn.ensemble.RandomTreesEmbedding.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeclassifier property)": [[913, "sklearn.tree.DecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.decisiontreeregressor property)": [[914, "sklearn.tree.DecisionTreeRegressor.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeclassifier property)": [[915, "sklearn.tree.ExtraTreeClassifier.feature_importances_", false]], "feature_importances_ (sklearn.tree.extratreeregressor property)": [[916, "sklearn.tree.ExtraTreeRegressor.feature_importances_", false]], "feature_names_in_ (sklearn.pipeline.featureunion property)": [[864, "sklearn.pipeline.FeatureUnion.feature_names_in_", false]], "feature_names_in_ (sklearn.pipeline.pipeline property)": [[865, "sklearn.pipeline.Pipeline.feature_names_in_", false]], "featureagglomeration (class in sklearn.cluster)": [[445, "sklearn.cluster.FeatureAgglomeration", false]], "featurehasher (class in sklearn.feature_extraction)": [[583, "sklearn.feature_extraction.FeatureHasher", false]], "features": [[390, "term-features", true]], "featureunion (class in sklearn.pipeline)": [[864, "sklearn.pipeline.FeatureUnion", false]], "fetch_20newsgroups() (in module sklearn.datasets)": [[488, "sklearn.datasets.fetch_20newsgroups", false]], "fetch_20newsgroups_vectorized() (in module sklearn.datasets)": [[489, "sklearn.datasets.fetch_20newsgroups_vectorized", false]], "fetch_california_housing() (in module sklearn.datasets)": [[490, "sklearn.datasets.fetch_california_housing", false]], "fetch_covtype() (in module sklearn.datasets)": [[491, "sklearn.datasets.fetch_covtype", false]], "fetch_file() (in module sklearn.datasets)": [[492, "sklearn.datasets.fetch_file", false]], "fetch_kddcup99() (in module sklearn.datasets)": [[493, "sklearn.datasets.fetch_kddcup99", false]], "fetch_lfw_pairs() (in module sklearn.datasets)": [[494, "sklearn.datasets.fetch_lfw_pairs", false]], "fetch_lfw_people() (in module sklearn.datasets)": [[495, "sklearn.datasets.fetch_lfw_people", false]], "fetch_olivetti_faces() (in module sklearn.datasets)": [[496, "sklearn.datasets.fetch_olivetti_faces", false]], "fetch_openml() (in module sklearn.datasets)": [[497, "sklearn.datasets.fetch_openml", false]], "fetch_rcv1() (in module sklearn.datasets)": [[498, "sklearn.datasets.fetch_rcv1", false]], "fetch_species_distributions() (in module sklearn.datasets)": [[499, "sklearn.datasets.fetch_species_distributions", false]], "fit": [[390, "term-fit", true]], "fit() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.fit", false]], "fit() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.fit", false]], "fit() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.fit", false]], "fit() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit", false]], "fit() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit", false]], "fit() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.fit", false]], "fit() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.fit", false]], "fit() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.fit", false]], "fit() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit", false]], "fit() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.fit", false]], "fit() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit", false]], "fit() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.fit", false]], "fit() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.fit", false]], "fit() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.fit", false]], "fit() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.fit", false]], "fit() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.fit", false]], "fit() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.fit", false]], "fit() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.fit", false]], "fit() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.fit", false]], "fit() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.fit", false]], "fit() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.fit", false]], "fit() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.fit", false]], "fit() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.fit", false]], "fit() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.fit", false]], "fit() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.fit", false]], "fit() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.fit", false]], "fit() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.fit", false]], "fit() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.fit", false]], "fit() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.fit", false]], "fit() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.fit", false]], "fit() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.fit", false]], "fit() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.fit", false]], "fit() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.fit", false]], "fit() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.fit", false]], "fit() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.fit", false]], "fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.fit", false]], "fit() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.fit", false]], "fit() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.fit", false]], "fit() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.fit", false]], "fit() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.fit", false]], "fit() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.fit", false]], "fit() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.fit", false]], "fit() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.fit", false]], "fit() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit", false]], "fit() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.fit", false]], "fit() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.fit", false]], "fit() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.fit", false]], "fit() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.fit", false]], "fit() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.fit", false]], "fit() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.fit", false]], "fit() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.fit", false]], "fit() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.fit", false]], "fit() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.fit", false]], "fit() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.fit", false]], "fit() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.fit", false]], "fit() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.fit", false]], "fit() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.fit", false]], "fit() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.fit", false]], "fit() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.fit", false]], "fit() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.fit", false]], "fit() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.fit", false]], "fit() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.fit", false]], "fit() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.fit", false]], "fit() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.fit", false]], "fit() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.fit", false]], "fit() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.fit", false]], "fit() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.fit", false]], "fit() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.fit", false]], "fit() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.fit", false]], "fit() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.fit", false]], "fit() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.fit", false]], "fit() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.fit", false]], "fit() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.fit", false]], "fit() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.fit", false]], "fit() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.fit", false]], "fit() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.fit", false]], "fit() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.fit", false]], "fit() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.fit", false]], "fit() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.fit", false]], "fit() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.fit", false]], "fit() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.fit", false]], "fit() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.fit", false]], "fit() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.fit", false]], "fit() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.fit", false]], "fit() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.fit", false]], "fit() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit", false]], "fit() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.fit", false]], "fit() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.fit", false]], "fit() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.fit", false]], "fit() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.fit", false]], "fit() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.fit", false]], "fit() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.fit", false]], "fit() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.fit", false]], "fit() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.fit", false]], "fit() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.fit", false]], "fit() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.fit", false]], "fit() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.fit", false]], "fit() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.fit", false]], "fit() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.fit", false]], "fit() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.fit", false]], "fit() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.fit", false]], "fit() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.fit", false]], "fit() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.fit", false]], "fit() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.fit", false]], "fit() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.fit", false]], "fit() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.fit", false]], "fit() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.fit", false]], "fit() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.fit", false]], "fit() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.fit", false]], "fit() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.fit", false]], "fit() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.fit", false]], "fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.fit", false]], "fit() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.fit", false]], "fit() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.fit", false]], "fit() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.fit", false]], "fit() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.fit", false]], "fit() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.fit", false]], "fit() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.fit", false]], "fit() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.fit", false]], "fit() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.fit", false]], "fit() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.fit", false]], "fit() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.fit", false]], "fit() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.fit", false]], "fit() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.fit", false]], "fit() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.fit", false]], "fit() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.fit", false]], "fit() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.fit", false]], "fit() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.fit", false]], "fit() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.fit", false]], "fit() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.fit", false]], "fit() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.fit", false]], "fit() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.fit", false]], "fit() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.fit", false]], "fit() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.fit", false]], "fit() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.fit", false]], "fit() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.fit", false]], "fit() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.fit", false]], "fit() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.fit", false]], "fit() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.fit", false]], "fit() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.fit", false]], "fit() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.fit", false]], "fit() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.fit", false]], "fit() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.fit", false]], "fit() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.fit", false]], "fit() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.fit", false]], "fit() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.fit", false]], "fit() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.fit", false]], "fit() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.fit", false]], "fit() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.fit", false]], "fit() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.fit", false]], "fit() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.fit", false]], "fit() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.fit", false]], "fit() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.fit", false]], "fit() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.fit", false]], "fit() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit", false]], "fit() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.fit", false]], "fit() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.fit", false]], "fit() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.fit", false]], "fit() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.fit", false]], "fit() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.fit", false]], "fit() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.fit", false]], "fit() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.fit", false]], "fit() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.fit", false]], "fit() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.fit", false]], "fit() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.fit", false]], "fit() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.fit", false]], "fit() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.fit", false]], "fit() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.fit", false]], "fit() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.fit", false]], "fit() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.fit", false]], "fit() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.fit", false]], "fit() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.fit", false]], "fit() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.fit", false]], "fit() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.fit", false]], "fit() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.fit", false]], "fit() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.fit", false]], "fit() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.fit", false]], "fit() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.fit", false]], "fit() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.fit", false]], "fit() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.fit", false]], "fit() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.fit", false]], "fit() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.fit", false]], "fit() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.fit", false]], "fit() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.fit", false]], "fit() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.fit", false]], "fit() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.fit", false]], "fit() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.fit", false]], "fit() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.fit", false]], "fit() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.fit", false]], "fit() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.fit", false]], "fit() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.fit", false]], "fit() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.fit", false]], "fit() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.fit", false]], "fit() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.fit", false]], "fit() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.fit", false]], "fit() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.fit", false]], "fit() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.fit", false]], "fit_predict": [[390, "term-fit_predict", true]], "fit_predict (sklearn.cluster.featureagglomeration property)": [[445, "sklearn.cluster.FeatureAgglomeration.fit_predict", false]], "fit_predict() (sklearn.base.clustermixin method)": [[426, "sklearn.base.ClusterMixin.fit_predict", false]], "fit_predict() (sklearn.base.outliermixin method)": [[430, "sklearn.base.OutlierMixin.fit_predict", false]], "fit_predict() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.fit_predict", false]], "fit_predict() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.fit_predict", false]], "fit_predict() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit_predict", false]], "fit_predict() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.fit_predict", false]], "fit_predict() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.fit_predict", false]], "fit_predict() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit_predict", false]], "fit_predict() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.fit_predict", false]], "fit_predict() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.fit_predict", false]], "fit_predict() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.fit_predict", false]], "fit_predict() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.fit_predict", false]], "fit_predict() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.fit_predict", false]], "fit_predict() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.fit_predict", false]], "fit_predict() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.fit_predict", false]], "fit_predict() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.fit_predict", false]], "fit_predict() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.fit_predict", false]], "fit_predict() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.fit_predict", false]], "fit_transform": [[390, "term-fit_transform", true]], "fit_transform() (sklearn.base.transformermixin method)": [[432, "sklearn.base.TransformerMixin.fit_transform", false]], "fit_transform() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.fit_transform", false]], "fit_transform() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.fit_transform", false]], "fit_transform() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.fit_transform", false]], "fit_transform() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.fit_transform", false]], "fit_transform() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.fit_transform", false]], "fit_transform() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.fit_transform", false]], "fit_transform() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.fit_transform", false]], "fit_transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.fit_transform", false]], "fit_transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.fit_transform", false]], "fit_transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.fit_transform", false]], "fit_transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.fit_transform", false]], "fit_transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.fit_transform", false]], "fit_transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.fit_transform", false]], "fit_transform() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.fit_transform", false]], "fit_transform() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.fit_transform", false]], "fit_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.fit_transform", false]], "fit_transform() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.fit_transform", false]], "fit_transform() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.fit_transform", false]], "fit_transform() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.fit_transform", false]], "fit_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.fit_transform", false]], "fit_transform() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.fit_transform", false]], "fit_transform() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.fit_transform", false]], "fit_transform() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.fit_transform", false]], "fit_transform() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.fit_transform", false]], "fit_transform() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.fit_transform", false]], "fit_transform() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.fit_transform", false]], "fit_transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.fit_transform", false]], "fit_transform() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.fit_transform", false]], "fit_transform() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.fit_transform", false]], "fit_transform() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.fit_transform", false]], "fit_transform() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.fit_transform", false]], "fit_transform() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.fit_transform", false]], "fit_transform() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.fit_transform", false]], "fit_transform() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.fit_transform", false]], "fit_transform() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.fit_transform", false]], "fit_transform() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.fit_transform", false]], "fit_transform() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.fit_transform", false]], "fit_transform() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.fit_transform", false]], "fit_transform() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.fit_transform", false]], "fit_transform() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.fit_transform", false]], "fit_transform() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.fit_transform", false]], "fit_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.fit_transform", false]], "fit_transform() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.fit_transform", false]], "fitfailedwarning": [[576, "sklearn.exceptions.FitFailedWarning", false]], "fitted": [[390, "term-fitted", true]], "fitting": [[390, "term-fitting", true]], "fixed (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.fixed", false]], "fixedthresholdclassifier (class in sklearn.model_selection)": [[800, "sklearn.model_selection.FixedThresholdClassifier", false]], "format() (sklearn.utils.parallel.parallel method)": [[967, "sklearn.utils.parallel.Parallel.format", false]], "fowlkes_mallows_score() (in module sklearn.metrics)": [[732, "sklearn.metrics.fowlkes_mallows_score", false]], "from_estimator() (sklearn.calibration.calibrationdisplay class method)": [[438, "sklearn.calibration.CalibrationDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.decisionboundarydisplay class method)": [[632, "sklearn.inspection.DecisionBoundaryDisplay.from_estimator", false]], "from_estimator() (sklearn.inspection.partialdependencedisplay class method)": [[633, "sklearn.inspection.PartialDependenceDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.confusionmatrixdisplay class method)": [[698, "sklearn.metrics.ConfusionMatrixDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.detcurvedisplay class method)": [[699, "sklearn.metrics.DetCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.precisionrecalldisplay class method)": [[701, "sklearn.metrics.PrecisionRecallDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.predictionerrordisplay class method)": [[702, "sklearn.metrics.PredictionErrorDisplay.from_estimator", false]], "from_estimator() (sklearn.metrics.roccurvedisplay class method)": [[703, "sklearn.metrics.RocCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.learningcurvedisplay class method)": [[807, "sklearn.model_selection.LearningCurveDisplay.from_estimator", false]], "from_estimator() (sklearn.model_selection.validationcurvedisplay class method)": [[824, "sklearn.model_selection.ValidationCurveDisplay.from_estimator", false]], "from_predictions() (sklearn.calibration.calibrationdisplay class method)": [[438, "sklearn.calibration.CalibrationDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.confusionmatrixdisplay class method)": [[698, "sklearn.metrics.ConfusionMatrixDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.detcurvedisplay class method)": [[699, "sklearn.metrics.DetCurveDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.precisionrecalldisplay class method)": [[701, "sklearn.metrics.PrecisionRecallDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.predictionerrordisplay class method)": [[702, "sklearn.metrics.PredictionErrorDisplay.from_predictions", false]], "from_predictions() (sklearn.metrics.roccurvedisplay class method)": [[703, "sklearn.metrics.RocCurveDisplay.from_predictions", false]], "fromkeys() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.fromkeys", false]], "function": [[390, "term-function", true]], "functiontransformer (class in sklearn.preprocessing)": [[869, "sklearn.preprocessing.FunctionTransformer", false]], "gallery": [[390, "term-gallery", true]], "gammaregressor (class in sklearn.linear_model)": [[649, "sklearn.linear_model.GammaRegressor", false]], "gaussianmixture (class in sklearn.mixture)": [[799, "sklearn.mixture.GaussianMixture", false]], "gaussiannb (class in sklearn.naive_bayes)": [[843, "sklearn.naive_bayes.GaussianNB", false]], "gaussianprocessclassifier (class in sklearn.gaussian_process)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier", false]], "gaussianprocessregressor (class in sklearn.gaussian_process)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor", false]], "gaussianrandomprojection (class in sklearn.random_projection)": [[897, "sklearn.random_projection.GaussianRandomProjection", false]], "gen_batches() (in module sklearn.utils)": [[952, "sklearn.utils.gen_batches", false]], "gen_even_slices() (in module sklearn.utils)": [[953, "sklearn.utils.gen_even_slices", false]], "genericunivariateselect (class in sklearn.feature_selection)": [[593, "sklearn.feature_selection.GenericUnivariateSelect", false]], "get() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.get", false]], "get_arrays() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.get_arrays", false]], "get_arrays() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.get_arrays", false]], "get_config() (in module sklearn)": [[627, "sklearn.get_config", false]], "get_covariance() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_covariance", false]], "get_covariance() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_covariance", false]], "get_covariance() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_covariance", false]], "get_data_home() (in module sklearn.datasets)": [[500, "sklearn.datasets.get_data_home", false]], "get_depth() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.get_depth", false]], "get_depth() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.get_depth", false]], "get_depth() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.get_depth", false]], "get_feature_names_out": [[390, "term-get_feature_names_out", true]], "get_feature_names_out() (sklearn.base.classnameprefixfeaturesoutmixin method)": [[424, "sklearn.base.ClassNamePrefixFeaturesOutMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.base.onetoonefeaturemixin method)": [[429, "sklearn.base.OneToOneFeatureMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_feature_names_out", false]], "get_feature_names_out() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_feature_names_out", false]], "get_feature_names_out() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_feature_names_out", false]], "get_feature_names_out() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_feature_names_out", false]], "get_feature_names_out() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.get_feature_names_out", false]], "get_feature_names_out() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.get_feature_names_out", false]], "get_feature_names_out() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.get_feature_names_out", false]], "get_feature_names_out() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.get_feature_names_out", false]], "get_feature_names_out() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.get_feature_names_out", false]], "get_feature_names_out() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.get_feature_names_out", false]], "get_feature_names_out() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.get_feature_names_out", false]], "get_indices() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_indices", false]], "get_indices() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_indices", false]], "get_indices() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_indices", false]], "get_metadata_routing() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_metadata_routing", false]], "get_metadata_routing() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.get_metadata_routing", false]], "get_metadata_routing() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.get_metadata_routing", false]], "get_metadata_routing() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.get_metadata_routing", false]], "get_metadata_routing() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupkfold method)": [[802, "sklearn.model_selection.GroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.groupshufflesplit method)": [[803, "sklearn.model_selection.GroupShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.kfold method)": [[806, "sklearn.model_selection.KFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveonegroupout method)": [[808, "sklearn.model_selection.LeaveOneGroupOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leaveoneout method)": [[809, "sklearn.model_selection.LeaveOneOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepgroupsout method)": [[810, "sklearn.model_selection.LeavePGroupsOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.leavepout method)": [[811, "sklearn.model_selection.LeavePOut.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.predefinedsplit method)": [[814, "sklearn.model_selection.PredefinedSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedkfold method)": [[816, "sklearn.model_selection.RepeatedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.repeatedstratifiedkfold method)": [[817, "sklearn.model_selection.RepeatedStratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.shufflesplit method)": [[818, "sklearn.model_selection.ShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedgroupkfold method)": [[819, "sklearn.model_selection.StratifiedGroupKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedkfold method)": [[820, "sklearn.model_selection.StratifiedKFold.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.stratifiedshufflesplit method)": [[821, "sklearn.model_selection.StratifiedShuffleSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.timeseriessplit method)": [[822, "sklearn.model_selection.TimeSeriesSplit.get_metadata_routing", false]], "get_metadata_routing() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.get_metadata_routing", false]], "get_metadata_routing() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.get_metadata_routing", false]], "get_metadata_routing() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.get_metadata_routing", false]], "get_metadata_routing() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.get_metadata_routing", false]], "get_metadata_routing() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.get_metadata_routing", false]], "get_metric() (sklearn.metrics.distancemetric class method)": [[700, "sklearn.metrics.DistanceMetric.get_metric", false]], "get_n_calls() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.get_n_calls", false]], "get_n_calls() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.get_n_calls", false]], "get_n_leaves() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.get_n_leaves", false]], "get_n_leaves() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.get_n_leaves", false]], "get_n_splits": [[390, "term-get_n_splits", true]], "get_n_splits() (sklearn.model_selection.groupkfold method)": [[802, "sklearn.model_selection.GroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.groupshufflesplit method)": [[803, "sklearn.model_selection.GroupShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.kfold method)": [[806, "sklearn.model_selection.KFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveonegroupout method)": [[808, "sklearn.model_selection.LeaveOneGroupOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leaveoneout method)": [[809, "sklearn.model_selection.LeaveOneOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepgroupsout method)": [[810, "sklearn.model_selection.LeavePGroupsOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.leavepout method)": [[811, "sklearn.model_selection.LeavePOut.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.predefinedsplit method)": [[814, "sklearn.model_selection.PredefinedSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedkfold method)": [[816, "sklearn.model_selection.RepeatedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.repeatedstratifiedkfold method)": [[817, "sklearn.model_selection.RepeatedStratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.shufflesplit method)": [[818, "sklearn.model_selection.ShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedgroupkfold method)": [[819, "sklearn.model_selection.StratifiedGroupKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedkfold method)": [[820, "sklearn.model_selection.StratifiedKFold.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.stratifiedshufflesplit method)": [[821, "sklearn.model_selection.StratifiedShuffleSplit.get_n_splits", false]], "get_n_splits() (sklearn.model_selection.timeseriessplit method)": [[822, "sklearn.model_selection.TimeSeriesSplit.get_n_splits", false]], "get_params": [[390, "term-get_params", true]], "get_params() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.get_params", false]], "get_params() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.get_params", false]], "get_params() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.get_params", false]], "get_params() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.get_params", false]], "get_params() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.get_params", false]], "get_params() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.get_params", false]], "get_params() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.get_params", false]], "get_params() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.get_params", false]], "get_params() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.get_params", false]], "get_params() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.get_params", false]], "get_params() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.get_params", false]], "get_params() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.get_params", false]], "get_params() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.get_params", false]], "get_params() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_params", false]], "get_params() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.get_params", false]], "get_params() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_params", false]], "get_params() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.get_params", false]], "get_params() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.get_params", false]], "get_params() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_params", false]], "get_params() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_params", false]], "get_params() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_params", false]], "get_params() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_params", false]], "get_params() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_params", false]], "get_params() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_params", false]], "get_params() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_params", false]], "get_params() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_params", false]], "get_params() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.get_params", false]], "get_params() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.get_params", false]], "get_params() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.get_params", false]], "get_params() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.get_params", false]], "get_params() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_params", false]], "get_params() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.get_params", false]], "get_params() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_params", false]], "get_params() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.get_params", false]], "get_params() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.get_params", false]], "get_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.get_params", false]], "get_params() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.get_params", false]], "get_params() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.get_params", false]], "get_params() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.get_params", false]], "get_params() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_params", false]], "get_params() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.get_params", false]], "get_params() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.get_params", false]], "get_params() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.get_params", false]], "get_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.get_params", false]], "get_params() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.get_params", false]], "get_params() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.get_params", false]], "get_params() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.get_params", false]], "get_params() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.get_params", false]], "get_params() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.get_params", false]], "get_params() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.get_params", false]], "get_params() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.get_params", false]], "get_params() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.get_params", false]], "get_params() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.get_params", false]], "get_params() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.get_params", false]], "get_params() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.get_params", false]], "get_params() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.get_params", false]], "get_params() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.get_params", false]], "get_params() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.get_params", false]], "get_params() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.get_params", false]], "get_params() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.get_params", false]], "get_params() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.get_params", false]], "get_params() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.get_params", false]], "get_params() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.get_params", false]], "get_params() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.get_params", false]], "get_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.get_params", false]], "get_params() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.get_params", false]], "get_params() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.get_params", false]], "get_params() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.get_params", false]], "get_params() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.get_params", false]], "get_params() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.get_params", false]], "get_params() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.get_params", false]], "get_params() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.get_params", false]], "get_params() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.get_params", false]], "get_params() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.get_params", false]], "get_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.get_params", false]], "get_params() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.get_params", false]], "get_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.get_params", false]], "get_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.get_params", false]], "get_params() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.get_params", false]], "get_params() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.get_params", false]], "get_params() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.get_params", false]], "get_params() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.get_params", false]], "get_params() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.get_params", false]], "get_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.get_params", false]], "get_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.get_params", false]], "get_params() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.get_params", false]], "get_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.get_params", false]], "get_params() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.get_params", false]], "get_params() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.get_params", false]], "get_params() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.get_params", false]], "get_params() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.get_params", false]], "get_params() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.get_params", false]], "get_params() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.get_params", false]], "get_params() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.get_params", false]], "get_params() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.get_params", false]], "get_params() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.get_params", false]], "get_params() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.get_params", false]], "get_params() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.get_params", false]], "get_params() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.get_params", false]], "get_params() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.get_params", false]], "get_params() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.get_params", false]], "get_params() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.get_params", false]], "get_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.get_params", false]], "get_params() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.get_params", false]], "get_params() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.get_params", false]], "get_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.get_params", false]], "get_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.get_params", false]], "get_params() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.get_params", false]], "get_params() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.get_params", false]], "get_params() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.get_params", false]], "get_params() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.get_params", false]], "get_params() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.get_params", false]], "get_params() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.get_params", false]], "get_params() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.get_params", false]], "get_params() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.get_params", false]], "get_params() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.get_params", false]], "get_params() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.get_params", false]], "get_params() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.get_params", false]], "get_params() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.get_params", false]], "get_params() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.get_params", false]], "get_params() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.get_params", false]], "get_params() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.get_params", false]], "get_params() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.get_params", false]], "get_params() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.get_params", false]], "get_params() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.get_params", false]], "get_params() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.get_params", false]], "get_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.get_params", false]], "get_params() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.get_params", false]], "get_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.get_params", false]], "get_params() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.get_params", false]], "get_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.get_params", false]], "get_params() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.get_params", false]], "get_params() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.get_params", false]], "get_params() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.get_params", false]], "get_params() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.get_params", false]], "get_params() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.get_params", false]], "get_params() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.get_params", false]], "get_params() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.get_params", false]], "get_params() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.get_params", false]], "get_params() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.get_params", false]], "get_params() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.get_params", false]], "get_params() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.get_params", false]], "get_params() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.get_params", false]], "get_params() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.get_params", false]], "get_params() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.get_params", false]], "get_params() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.get_params", false]], "get_params() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.get_params", false]], "get_params() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.get_params", false]], "get_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.get_params", false]], "get_params() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.get_params", false]], "get_params() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.get_params", false]], "get_params() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.get_params", false]], "get_params() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.get_params", false]], "get_params() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.get_params", false]], "get_params() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.get_params", false]], "get_params() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.get_params", false]], "get_params() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.get_params", false]], "get_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.get_params", false]], "get_params() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.get_params", false]], "get_params() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.get_params", false]], "get_params() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.get_params", false]], "get_params() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.get_params", false]], "get_params() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.get_params", false]], "get_params() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.get_params", false]], "get_params() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.get_params", false]], "get_params() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.get_params", false]], "get_params() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.get_params", false]], "get_params() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.get_params", false]], "get_params() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.get_params", false]], "get_params() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.get_params", false]], "get_params() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.get_params", false]], "get_params() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.get_params", false]], "get_params() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.get_params", false]], "get_params() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.get_params", false]], "get_params() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.get_params", false]], "get_params() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.get_params", false]], "get_params() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.get_params", false]], "get_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.get_params", false]], "get_params() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.get_params", false]], "get_params() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.get_params", false]], "get_params() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.get_params", false]], "get_params() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.get_params", false]], "get_params() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.get_params", false]], "get_params() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.get_params", false]], "get_params() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.get_params", false]], "get_params() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.get_params", false]], "get_params() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.get_params", false]], "get_params() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.get_params", false]], "get_params() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.get_params", false]], "get_precision() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.get_precision", false]], "get_precision() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.get_precision", false]], "get_precision() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.get_precision", false]], "get_precision() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.get_precision", false]], "get_precision() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.get_precision", false]], "get_precision() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.get_precision", false]], "get_precision() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.get_precision", false]], "get_precision() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.get_precision", false]], "get_precision() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.get_precision", false]], "get_precision() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.get_precision", false]], "get_precision() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.get_precision", false]], "get_routing_for_object() (in module sklearn.utils.metadata_routing)": [[960, "sklearn.utils.metadata_routing.get_routing_for_object", false]], "get_scorer() (in module sklearn.metrics)": [[733, "sklearn.metrics.get_scorer", false]], "get_scorer_names() (in module sklearn.metrics)": [[734, "sklearn.metrics.get_scorer_names", false]], "get_shape() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_shape", false]], "get_shape() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_shape", false]], "get_shape() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_shape", false]], "get_stop_words() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.get_stop_words", false]], "get_stop_words() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.get_stop_words", false]], "get_submatrix() (sklearn.base.biclustermixin method)": [[423, "sklearn.base.BiclusterMixin.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.get_submatrix", false]], "get_submatrix() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.get_submatrix", false]], "get_support() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.get_support", false]], "get_support() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.get_support", false]], "get_support() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.get_support", false]], "get_support() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.get_support", false]], "get_support() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.get_support", false]], "get_support() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.get_support", false]], "get_support() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.get_support", false]], "get_support() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.get_support", false]], "get_support() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.get_support", false]], "get_support() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.get_support", false]], "get_support() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.get_support", false]], "get_support() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.get_support", false]], "get_tags() (in module sklearn.utils)": [[954, "sklearn.utils.get_tags", false]], "get_tree_stats() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.get_tree_stats", false]], "get_tree_stats() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.get_tree_stats", false]], "gibbs() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.gibbs", false]], "gradientboostingclassifier (class in sklearn.ensemble)": [[560, "sklearn.ensemble.GradientBoostingClassifier", false]], "gradientboostingregressor (class in sklearn.ensemble)": [[561, "sklearn.ensemble.GradientBoostingRegressor", false]], "graphical_lasso() (in module sklearn.covariance)": [[478, "sklearn.covariance.graphical_lasso", false]], "graphicallasso (class in sklearn.covariance)": [[471, "sklearn.covariance.GraphicalLasso", false]], "graphicallassocv (class in sklearn.covariance)": [[472, "sklearn.covariance.GraphicalLassoCV", false]], "grid_to_graph() (in module sklearn.feature_extraction.image)": [[586, "sklearn.feature_extraction.image.grid_to_graph", false]], "gridsearchcv (class in sklearn.model_selection)": [[801, "sklearn.model_selection.GridSearchCV", false]], "groupkfold (class in sklearn.model_selection)": [[802, "sklearn.model_selection.GroupKFold", false]], "groups": [[390, "term-groups", true]], "groupshufflesplit (class in sklearn.model_selection)": [[803, "sklearn.model_selection.GroupShuffleSplit", false]], "halvinggridsearchcv (class in sklearn.model_selection)": [[804, "sklearn.model_selection.HalvingGridSearchCV", false]], "halvingrandomsearchcv (class in sklearn.model_selection)": [[805, "sklearn.model_selection.HalvingRandomSearchCV", false]], "hamming_loss() (in module sklearn.metrics)": [[735, "sklearn.metrics.hamming_loss", false]], "has_fit_parameter() (in module sklearn.utils.validation)": [[989, "sklearn.utils.validation.has_fit_parameter", false]], "hashingvectorizer (class in sklearn.feature_extraction.text)": [[590, "sklearn.feature_extraction.text.HashingVectorizer", false]], "haversine_distances() (in module sklearn.metrics.pairwise)": [[765, "sklearn.metrics.pairwise.haversine_distances", false]], "hdbscan (class in sklearn.cluster)": [[446, "sklearn.cluster.HDBSCAN", false]], "hinge_loss() (in module sklearn.metrics)": [[736, "sklearn.metrics.hinge_loss", false]], "histgradientboostingclassifier (class in sklearn.ensemble)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier", false]], "histgradientboostingregressor (class in sklearn.ensemble)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor", false]], "homogeneity_completeness_v_measure() (in module sklearn.metrics)": [[737, "sklearn.metrics.homogeneity_completeness_v_measure", false]], "homogeneity_score() (in module sklearn.metrics)": [[738, "sklearn.metrics.homogeneity_score", false]], "huberregressor (class in sklearn.linear_model)": [[650, "sklearn.linear_model.HuberRegressor", false]], "hyper-parameter": [[390, "term-hyper-parameter", true]], "hyperparameter": [[390, "term-hyperparameter", true]], "hyperparameter (class in sklearn.gaussian_process.kernels)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter", false]], "hyperparameter_length_scale (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameter_length_scale", false]], "hyperparameters (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.hyperparameters", false]], "hyperparameters (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.hyperparameters", false]], "idf_ (sklearn.feature_extraction.text.tfidfvectorizer property)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.idf_", false]], "img_to_graph() (in module sklearn.feature_extraction.image)": [[587, "sklearn.feature_extraction.image.img_to_graph", false]], "imputation": [[390, "term-imputation", true]], "impute": [[390, "term-impute", true]], "inconsistentversionwarning": [[577, "sklearn.exceptions.InconsistentVersionWarning", false]], "incr_mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[976, "sklearn.utils.sparsefuncs.incr_mean_variance_axis", false]], "incrementalpca (class in sklearn.decomposition)": [[535, "sklearn.decomposition.IncrementalPCA", false]], "index() (sklearn.gaussian_process.kernels.hyperparameter method)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.index", false]], "indexable": [[390, "term-indexable", true]], "indexable() (in module sklearn.utils)": [[956, "sklearn.utils.indexable", false]], "induction": [[390, "term-induction", true]], "inductive": [[390, "term-inductive", true]], "infrequent_categories_ (sklearn.preprocessing.onehotencoder property)": [[878, "sklearn.preprocessing.OneHotEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.ordinalencoder property)": [[879, "sklearn.preprocessing.OrdinalEncoder.infrequent_categories_", false]], "infrequent_categories_ (sklearn.preprocessing.targetencoder property)": [[886, "sklearn.preprocessing.TargetEncoder.infrequent_categories_", false]], "inplace_column_scale() (in module sklearn.utils.sparsefuncs)": [[977, "sklearn.utils.sparsefuncs.inplace_column_scale", false]], "inplace_csr_column_scale() (in module sklearn.utils.sparsefuncs)": [[978, "sklearn.utils.sparsefuncs.inplace_csr_column_scale", false]], "inplace_csr_row_normalize_l1() (in module sklearn.utils.sparsefuncs_fast)": [[983, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1", false]], "inplace_csr_row_normalize_l2() (in module sklearn.utils.sparsefuncs_fast)": [[984, "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2", false]], "inplace_row_scale() (in module sklearn.utils.sparsefuncs)": [[979, "sklearn.utils.sparsefuncs.inplace_row_scale", false]], "inplace_swap_column() (in module sklearn.utils.sparsefuncs)": [[980, "sklearn.utils.sparsefuncs.inplace_swap_column", false]], "inplace_swap_row() (in module sklearn.utils.sparsefuncs)": [[981, "sklearn.utils.sparsefuncs.inplace_swap_row", false]], "inputtags (class in sklearn.utils)": [[922, "sklearn.utils.InputTags", false]], "inverse_transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.inverse_transform", false]], "inverse_transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.inverse_transform", false]], "inverse_transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.inverse_transform", false]], "inverse_transform() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.inverse_transform", false]], "inverse_transform() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.inverse_transform", false]], "inverse_transform() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.inverse_transform", false]], "inverse_transform() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.inverse_transform", false]], "inverse_transform() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.inverse_transform", false]], "is_classifier() (in module sklearn.base)": [[434, "sklearn.base.is_classifier", false]], "is_clusterer() (in module sklearn.base)": [[435, "sklearn.base.is_clusterer", false]], "is_multilabel() (in module sklearn.utils.multiclass)": [[963, "sklearn.utils.multiclass.is_multilabel", false]], "is_regressor() (in module sklearn.base)": [[436, "sklearn.base.is_regressor", false]], "is_stationary() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.is_stationary", false]], "is_stationary() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.is_stationary", false]], "isolationforest (class in sklearn.ensemble)": [[564, "sklearn.ensemble.IsolationForest", false]], "isomap (class in sklearn.manifold)": [[689, "sklearn.manifold.Isomap", false]], "isotonic_regression() (in module sklearn.isotonic)": [[638, "sklearn.isotonic.isotonic_regression", false]], "isotonicregression (class in sklearn.isotonic)": [[636, "sklearn.isotonic.IsotonicRegression", false]], "items() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.items", false]], "iterativeimputer (class in sklearn.impute)": [[628, "sklearn.impute.IterativeImputer", false]], "jaccard_score() (in module sklearn.metrics)": [[739, "sklearn.metrics.jaccard_score", false]], "joblib": [[390, "term-joblib", true]], "johnson_lindenstrauss_min_dim() (in module sklearn.random_projection)": [[899, "sklearn.random_projection.johnson_lindenstrauss_min_dim", false]], "k_means() (in module sklearn.cluster)": [[459, "sklearn.cluster.k_means", false]], "kbinsdiscretizer (class in sklearn.preprocessing)": [[870, "sklearn.preprocessing.KBinsDiscretizer", false]], "kdtree (class in sklearn.neighbors)": [[846, "sklearn.neighbors.KDTree", false]], "kernel": [[390, "term-kernel", true]], "kernel (class in sklearn.gaussian_process.kernels)": [[619, "sklearn.gaussian_process.kernels.Kernel", false]], "kernel_ (sklearn.gaussian_process.gaussianprocessclassifier property)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.kernel_", false]], "kernel_density() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.kernel_density", false]], "kernel_density() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.kernel_density", false]], "kernel_metrics() (in module sklearn.metrics.pairwise)": [[766, "sklearn.metrics.pairwise.kernel_metrics", false]], "kernelcenterer (class in sklearn.preprocessing)": [[871, "sklearn.preprocessing.KernelCenterer", false]], "kerneldensity (class in sklearn.neighbors)": [[850, "sklearn.neighbors.KernelDensity", false]], "kernelpca (class in sklearn.decomposition)": [[536, "sklearn.decomposition.KernelPCA", false]], "kernelridge (class in sklearn.kernel_ridge)": [[644, "sklearn.kernel_ridge.KernelRidge", false]], "keys() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.keys", false]], "kfold (class in sklearn.model_selection)": [[806, "sklearn.model_selection.KFold", false]], "kmeans (class in sklearn.cluster)": [[447, "sklearn.cluster.KMeans", false]], "kmeans_plusplus() (in module sklearn.cluster)": [[460, "sklearn.cluster.kmeans_plusplus", false]], "kneighbors() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.kneighbors", false]], "kneighbors() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.kneighbors", false]], "kneighbors() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.kneighbors", false]], "kneighbors() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.kneighbors", false]], "kneighbors_graph() (in module sklearn.neighbors)": [[858, "sklearn.neighbors.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.kneighbors_graph", false]], "kneighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.kneighbors_graph", false]], "kneighborsclassifier (class in sklearn.neighbors)": [[847, "sklearn.neighbors.KNeighborsClassifier", false]], "kneighborsregressor (class in sklearn.neighbors)": [[848, "sklearn.neighbors.KNeighborsRegressor", false]], "kneighborstransformer (class in sklearn.neighbors)": [[849, "sklearn.neighbors.KNeighborsTransformer", false]], "knnimputer (class in sklearn.impute)": [[629, "sklearn.impute.KNNImputer", false]], "l1_min_c() (in module sklearn.svm)": [[912, "sklearn.svm.l1_min_c", false]], "label indicator matrix": [[390, "term-label-indicator-matrix", true]], "label_binarize() (in module sklearn.preprocessing)": [[889, "sklearn.preprocessing.label_binarize", false]], "label_ranking_average_precision_score() (in module sklearn.metrics)": [[740, "sklearn.metrics.label_ranking_average_precision_score", false]], "label_ranking_loss() (in module sklearn.metrics)": [[741, "sklearn.metrics.label_ranking_loss", false]], "labelbinarizer (class in sklearn.preprocessing)": [[872, "sklearn.preprocessing.LabelBinarizer", false]], "labelencoder (class in sklearn.preprocessing)": [[873, "sklearn.preprocessing.LabelEncoder", false]], "labelpropagation (class in sklearn.semi_supervised)": [[900, "sklearn.semi_supervised.LabelPropagation", false]], "labels_": [[390, "term-labels_", true]], "labelspreading (class in sklearn.semi_supervised)": [[901, "sklearn.semi_supervised.LabelSpreading", false]], "laplacian_kernel() (in module sklearn.metrics.pairwise)": [[767, "sklearn.metrics.pairwise.laplacian_kernel", false]], "lars (class in sklearn.linear_model)": [[651, "sklearn.linear_model.Lars", false]], "lars_path() (in module sklearn.linear_model)": [[683, "sklearn.linear_model.lars_path", false]], "lars_path_gram() (in module sklearn.linear_model)": [[684, "sklearn.linear_model.lars_path_gram", false]], "larscv (class in sklearn.linear_model)": [[652, "sklearn.linear_model.LarsCV", false]], "lasso (class in sklearn.linear_model)": [[653, "sklearn.linear_model.Lasso", false]], "lasso_path() (in module sklearn.linear_model)": [[685, "sklearn.linear_model.lasso_path", false]], "lassocv (class in sklearn.linear_model)": [[654, "sklearn.linear_model.LassoCV", false]], "lassolars (class in sklearn.linear_model)": [[655, "sklearn.linear_model.LassoLars", false]], "lassolarscv (class in sklearn.linear_model)": [[656, "sklearn.linear_model.LassoLarsCV", false]], "lassolarsic (class in sklearn.linear_model)": [[657, "sklearn.linear_model.LassoLarsIC", false]], "latentdirichletallocation (class in sklearn.decomposition)": [[537, "sklearn.decomposition.LatentDirichletAllocation", false]], "leakage": [[390, "term-leakage", true]], "learning_curve() (in module sklearn.model_selection)": [[829, "sklearn.model_selection.learning_curve", false]], "learningcurvedisplay (class in sklearn.model_selection)": [[807, "sklearn.model_selection.LearningCurveDisplay", false]], "leaveonegroupout (class in sklearn.model_selection)": [[808, "sklearn.model_selection.LeaveOneGroupOut", false]], "leaveoneout (class in sklearn.model_selection)": [[809, "sklearn.model_selection.LeaveOneOut", false]], "leavepgroupsout (class in sklearn.model_selection)": [[810, "sklearn.model_selection.LeavePGroupsOut", false]], "leavepout (class in sklearn.model_selection)": [[811, "sklearn.model_selection.LeavePOut", false]], "ledoit_wolf() (in module sklearn.covariance)": [[479, "sklearn.covariance.ledoit_wolf", false]], "ledoit_wolf_shrinkage() (in module sklearn.covariance)": [[480, "sklearn.covariance.ledoit_wolf_shrinkage", false]], "ledoitwolf (class in sklearn.covariance)": [[473, "sklearn.covariance.LedoitWolf", false]], "linear_kernel() (in module sklearn.metrics.pairwise)": [[768, "sklearn.metrics.pairwise.linear_kernel", false]], "lineardiscriminantanalysis (class in sklearn.discriminant_analysis)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis", false]], "linearregression (class in sklearn.linear_model)": [[658, "sklearn.linear_model.LinearRegression", false]], "linearsvc (class in sklearn.svm)": [[905, "sklearn.svm.LinearSVC", false]], "linearsvr (class in sklearn.svm)": [[906, "sklearn.svm.LinearSVR", false]], "load_breast_cancer() (in module sklearn.datasets)": [[501, "sklearn.datasets.load_breast_cancer", false]], "load_diabetes() (in module sklearn.datasets)": [[502, "sklearn.datasets.load_diabetes", false]], "load_digits() (in module sklearn.datasets)": [[503, "sklearn.datasets.load_digits", false]], "load_files() (in module sklearn.datasets)": [[504, "sklearn.datasets.load_files", false]], "load_iris() (in module sklearn.datasets)": [[505, "sklearn.datasets.load_iris", false]], "load_linnerud() (in module sklearn.datasets)": [[506, "sklearn.datasets.load_linnerud", false]], "load_sample_image() (in module sklearn.datasets)": [[507, "sklearn.datasets.load_sample_image", false]], "load_sample_images() (in module sklearn.datasets)": [[508, "sklearn.datasets.load_sample_images", false]], "load_svmlight_file() (in module sklearn.datasets)": [[509, "sklearn.datasets.load_svmlight_file", false]], "load_svmlight_files() (in module sklearn.datasets)": [[510, "sklearn.datasets.load_svmlight_files", false]], "load_wine() (in module sklearn.datasets)": [[511, "sklearn.datasets.load_wine", false]], "locally_linear_embedding() (in module sklearn.manifold)": [[694, "sklearn.manifold.locally_linear_embedding", false]], "locallylinearembedding (class in sklearn.manifold)": [[690, "sklearn.manifold.LocallyLinearEmbedding", false]], "localoutlierfactor (class in sklearn.neighbors)": [[851, "sklearn.neighbors.LocalOutlierFactor", false]], "log_loss() (in module sklearn.metrics)": [[742, "sklearn.metrics.log_loss", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.log_marginal_likelihood", false]], "log_marginal_likelihood() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.log_marginal_likelihood", false]], "logisticregression (class in sklearn.linear_model)": [[659, "sklearn.linear_model.LogisticRegression", false]], "logisticregressioncv (class in sklearn.linear_model)": [[660, "sklearn.linear_model.LogisticRegressionCV", false]], "mahalanobis() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.mahalanobis", false]], "mahalanobis() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.mahalanobis", false]], "mahalanobis() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.mahalanobis", false]], "mahalanobis() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.mahalanobis", false]], "mahalanobis() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.mahalanobis", false]], "mahalanobis() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.mahalanobis", false]], "mahalanobis() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.mahalanobis", false]], "make_biclusters() (in module sklearn.datasets)": [[512, "sklearn.datasets.make_biclusters", false]], "make_blobs() (in module sklearn.datasets)": [[513, "sklearn.datasets.make_blobs", false]], "make_checkerboard() (in module sklearn.datasets)": [[514, "sklearn.datasets.make_checkerboard", false]], "make_circles() (in module sklearn.datasets)": [[515, "sklearn.datasets.make_circles", false]], "make_classification() (in module sklearn.datasets)": [[516, "sklearn.datasets.make_classification", false]], "make_column_selector (class in sklearn.compose)": [[466, "sklearn.compose.make_column_selector", false]], "make_column_transformer() (in module sklearn.compose)": [[467, "sklearn.compose.make_column_transformer", false]], "make_friedman1() (in module sklearn.datasets)": [[517, "sklearn.datasets.make_friedman1", false]], "make_friedman2() (in module sklearn.datasets)": [[518, "sklearn.datasets.make_friedman2", false]], "make_friedman3() (in module sklearn.datasets)": [[519, "sklearn.datasets.make_friedman3", false]], "make_gaussian_quantiles() (in module sklearn.datasets)": [[520, "sklearn.datasets.make_gaussian_quantiles", false]], "make_hastie_10_2() (in module sklearn.datasets)": [[521, "sklearn.datasets.make_hastie_10_2", false]], "make_low_rank_matrix() (in module sklearn.datasets)": [[522, "sklearn.datasets.make_low_rank_matrix", false]], "make_moons() (in module sklearn.datasets)": [[523, "sklearn.datasets.make_moons", false]], "make_multilabel_classification() (in module sklearn.datasets)": [[524, "sklearn.datasets.make_multilabel_classification", false]], "make_pipeline() (in module sklearn.pipeline)": [[866, "sklearn.pipeline.make_pipeline", false]], "make_regression() (in module sklearn.datasets)": [[525, "sklearn.datasets.make_regression", false]], "make_s_curve() (in module sklearn.datasets)": [[526, "sklearn.datasets.make_s_curve", false]], "make_scorer() (in module sklearn.metrics)": [[743, "sklearn.metrics.make_scorer", false]], "make_sparse_coded_signal() (in module sklearn.datasets)": [[527, "sklearn.datasets.make_sparse_coded_signal", false]], "make_sparse_spd_matrix() (in module sklearn.datasets)": [[528, "sklearn.datasets.make_sparse_spd_matrix", false]], "make_sparse_uncorrelated() (in module sklearn.datasets)": [[529, "sklearn.datasets.make_sparse_uncorrelated", false]], "make_spd_matrix() (in module sklearn.datasets)": [[530, "sklearn.datasets.make_spd_matrix", false]], "make_swiss_roll() (in module sklearn.datasets)": [[531, "sklearn.datasets.make_swiss_roll", false]], "make_union() (in module sklearn.pipeline)": [[867, "sklearn.pipeline.make_union", false]], "manhattan_distances() (in module sklearn.metrics.pairwise)": [[769, "sklearn.metrics.pairwise.manhattan_distances", false]], "matern (class in sklearn.gaussian_process.kernels)": [[620, "sklearn.gaussian_process.kernels.Matern", false]], "matthews_corrcoef() (in module sklearn.metrics)": [[744, "sklearn.metrics.matthews_corrcoef", false]], "max_error() (in module sklearn.metrics)": [[745, "sklearn.metrics.max_error", false]], "max_iter": [[390, "term-max_iter", true]], "maxabs_scale() (in module sklearn.preprocessing)": [[890, "sklearn.preprocessing.maxabs_scale", false]], "maxabsscaler (class in sklearn.preprocessing)": [[874, "sklearn.preprocessing.MaxAbsScaler", false]], "mds (class in sklearn.manifold)": [[691, "sklearn.manifold.MDS", false]], "mean_absolute_error() (in module sklearn.metrics)": [[746, "sklearn.metrics.mean_absolute_error", false]], "mean_absolute_percentage_error() (in module sklearn.metrics)": [[747, "sklearn.metrics.mean_absolute_percentage_error", false]], "mean_gamma_deviance() (in module sklearn.metrics)": [[748, "sklearn.metrics.mean_gamma_deviance", false]], "mean_pinball_loss() (in module sklearn.metrics)": [[749, "sklearn.metrics.mean_pinball_loss", false]], "mean_poisson_deviance() (in module sklearn.metrics)": [[750, "sklearn.metrics.mean_poisson_deviance", false]], "mean_shift() (in module sklearn.cluster)": [[461, "sklearn.cluster.mean_shift", false]], "mean_squared_error() (in module sklearn.metrics)": [[751, "sklearn.metrics.mean_squared_error", false]], "mean_squared_log_error() (in module sklearn.metrics)": [[752, "sklearn.metrics.mean_squared_log_error", false]], "mean_tweedie_deviance() (in module sklearn.metrics)": [[753, "sklearn.metrics.mean_tweedie_deviance", false]], "mean_variance_axis() (in module sklearn.utils.sparsefuncs)": [[982, "sklearn.utils.sparsefuncs.mean_variance_axis", false]], "meanshift (class in sklearn.cluster)": [[448, "sklearn.cluster.MeanShift", false]], "median_absolute_error() (in module sklearn.metrics)": [[754, "sklearn.metrics.median_absolute_error", false]], "memmapping": [[390, "term-memmapping", true]], "memory": [[390, "term-memory", true]], "memory map": [[390, "term-memory-map", true]], "memory mapping": [[390, "term-memory-mapping", true]], "meta-estimator": [[390, "term-meta-estimator", true]], "meta-estimators": [[390, "term-meta-estimators", true]], "metadata": [[390, "term-metadata", true]], "metadatarequest (class in sklearn.utils.metadata_routing)": [[957, "sklearn.utils.metadata_routing.MetadataRequest", false]], "metadatarouter (class in sklearn.utils.metadata_routing)": [[958, "sklearn.utils.metadata_routing.MetadataRouter", false]], "metaestimator": [[390, "term-metaestimator", true]], "metaestimatormixin (class in sklearn.base)": [[428, "sklearn.base.MetaEstimatorMixin", false]], "metaestimators": [[390, "term-metaestimators", true]], "methodmapping (class in sklearn.utils.metadata_routing)": [[959, "sklearn.utils.metadata_routing.MethodMapping", false]], "metric": [[390, "term-metric", true]], "min_pos() (in module sklearn.utils.arrayfuncs)": [[928, "sklearn.utils.arrayfuncs.min_pos", false]], "mincovdet (class in sklearn.covariance)": [[474, "sklearn.covariance.MinCovDet", false]], "minibatchdictionarylearning (class in sklearn.decomposition)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning", false]], "minibatchkmeans (class in sklearn.cluster)": [[449, "sklearn.cluster.MiniBatchKMeans", false]], "minibatchnmf (class in sklearn.decomposition)": [[539, "sklearn.decomposition.MiniBatchNMF", false]], "minibatchsparsepca (class in sklearn.decomposition)": [[540, "sklearn.decomposition.MiniBatchSparsePCA", false]], "minmax_scale() (in module sklearn.preprocessing)": [[891, "sklearn.preprocessing.minmax_scale", false]], "minmaxscaler (class in sklearn.preprocessing)": [[875, "sklearn.preprocessing.MinMaxScaler", false]], "missing values": [[390, "term-missing-values", true]], "missingindicator (class in sklearn.impute)": [[630, "sklearn.impute.MissingIndicator", false]], "mlpclassifier (class in sklearn.neural_network)": [[862, "sklearn.neural_network.MLPClassifier", false]], "mlpregressor (class in sklearn.neural_network)": [[863, "sklearn.neural_network.MLPRegressor", false]], "module": [[3, "module-sklearn", false], [4, "module-sklearn.base", false], [5, "module-sklearn.calibration", false], [6, "module-sklearn.cluster", false], [7, "module-sklearn.compose", false], [8, "module-sklearn.covariance", false], [9, "module-sklearn.cross_decomposition", false], [10, "module-sklearn.datasets", false], [11, "module-sklearn.decomposition", false], [12, "module-sklearn.discriminant_analysis", false], [13, "module-sklearn.dummy", false], [14, "module-sklearn.ensemble", false], [15, "module-sklearn.exceptions", false], [16, "module-sklearn.experimental", false], [17, "module-sklearn.feature_extraction", false], [17, "module-sklearn.feature_extraction.image", false], [17, "module-sklearn.feature_extraction.text", false], [18, "module-sklearn.feature_selection", false], [19, "module-sklearn.gaussian_process", false], [19, "module-sklearn.gaussian_process.kernels", false], [20, "module-sklearn.impute", false], [21, "module-sklearn.inspection", false], [22, "module-sklearn.isotonic", false], [23, "module-sklearn.kernel_approximation", false], [24, "module-sklearn.kernel_ridge", false], [25, "module-sklearn.linear_model", false], [26, "module-sklearn.manifold", false], [27, "module-sklearn.metrics", false], [27, "module-sklearn.metrics.cluster", false], [27, "module-sklearn.metrics.pairwise", false], [28, "module-sklearn.mixture", false], [29, "module-sklearn.model_selection", false], [30, "module-sklearn.multiclass", false], [31, "module-sklearn.multioutput", false], [32, "module-sklearn.naive_bayes", false], [33, "module-sklearn.neighbors", false], [34, "module-sklearn.neural_network", false], [35, "module-sklearn.pipeline", false], [36, "module-sklearn.preprocessing", false], [37, "module-sklearn.random_projection", false], [38, "module-sklearn.semi_supervised", false], [39, "module-sklearn.svm", false], [40, "module-sklearn.tree", false], [41, "module-sklearn.utils", false], [41, "module-sklearn.utils.arrayfuncs", false], [41, "module-sklearn.utils.class_weight", false], [41, "module-sklearn.utils.discovery", false], [41, "module-sklearn.utils.estimator_checks", false], [41, "module-sklearn.utils.extmath", false], [41, "module-sklearn.utils.graph", false], [41, "module-sklearn.utils.metadata_routing", false], [41, "module-sklearn.utils.metaestimators", false], [41, "module-sklearn.utils.multiclass", false], [41, "module-sklearn.utils.parallel", false], [41, "module-sklearn.utils.random", false], [41, "module-sklearn.utils.sparsefuncs", false], [41, "module-sklearn.utils.sparsefuncs_fast", false], [41, "module-sklearn.utils.validation", false], [580, "module-sklearn.experimental.enable_halving_search_cv", false], [581, "module-sklearn.experimental.enable_iterative_imputer", false]], "multi-class": [[390, "term-multi-class", true]], "multi-class multi-output": [[390, "term-multi-class-multi-output", true]], "multi-label": [[390, "term-multi-label", true]], "multi-output": [[390, "term-multi-output", true]], "multi-output continuous": [[390, "term-multi-output-continuous", true]], "multi-output multi-class": [[390, "term-multi-output-multi-class", true]], "multiclass": [[390, "term-multiclass", true]], "multiclass multioutput": [[390, "term-multiclass-multioutput", true]], "multilabel": [[390, "term-multilabel", true]], "multilabel indicator matrices": [[390, "term-multilabel-indicator-matrices", true]], "multilabel indicator matrix": [[390, "term-multilabel-indicator-matrix", true]], "multilabel_ (sklearn.multiclass.onevsrestclassifier property)": [[834, "sklearn.multiclass.OneVsRestClassifier.multilabel_", false]], "multilabel_confusion_matrix() (in module sklearn.metrics)": [[755, "sklearn.metrics.multilabel_confusion_matrix", false]], "multilabelbinarizer (class in sklearn.preprocessing)": [[876, "sklearn.preprocessing.MultiLabelBinarizer", false]], "multinomialnb (class in sklearn.naive_bayes)": [[844, "sklearn.naive_bayes.MultinomialNB", false]], "multioutput": [[390, "term-multioutput", true]], "multioutput continuous": [[390, "term-multioutput-continuous", true]], "multioutput multiclass": [[390, "term-multioutput-multiclass", true]], "multioutputclassifier (class in sklearn.multioutput)": [[837, "sklearn.multioutput.MultiOutputClassifier", false]], "multioutputregressor (class in sklearn.multioutput)": [[838, "sklearn.multioutput.MultiOutputRegressor", false]], "multitaskelasticnet (class in sklearn.linear_model)": [[661, "sklearn.linear_model.MultiTaskElasticNet", false]], "multitaskelasticnetcv (class in sklearn.linear_model)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV", false]], "multitasklasso (class in sklearn.linear_model)": [[663, "sklearn.linear_model.MultiTaskLasso", false]], "multitasklassocv (class in sklearn.linear_model)": [[664, "sklearn.linear_model.MultiTaskLassoCV", false]], "murmurhash3_32() (in module sklearn.utils)": [[966, "sklearn.utils.murmurhash3_32", false]], "mutual_info_classif() (in module sklearn.feature_selection)": [[608, "sklearn.feature_selection.mutual_info_classif", false]], "mutual_info_regression() (in module sklearn.feature_selection)": [[609, "sklearn.feature_selection.mutual_info_regression", false]], "mutual_info_score() (in module sklearn.metrics)": [[756, "sklearn.metrics.mutual_info_score", false]], "n_classes_ (sklearn.multiclass.onevsoneclassifier property)": [[833, "sklearn.multiclass.OneVsOneClassifier.n_classes_", false]], "n_classes_ (sklearn.multiclass.onevsrestclassifier property)": [[834, "sklearn.multiclass.OneVsRestClassifier.n_classes_", false]], "n_components": [[390, "term-n_components", true]], "n_components_ (sklearn.decomposition.sparsecoder property)": [[543, "sklearn.decomposition.SparseCoder.n_components_", false]], "n_dims (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.n_dims", false]], "n_dims (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.n_dims", false]], "n_elements (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.n_elements", false]], "n_features": [[390, "term-n_features", true]], "n_features_in_ (sklearn.compose.transformedtargetregressor property)": [[465, "sklearn.compose.TransformedTargetRegressor.n_features_in_", false]], "n_features_in_ (sklearn.decomposition.sparsecoder property)": [[543, "sklearn.decomposition.SparseCoder.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingclassifier property)": [[568, "sklearn.ensemble.StackingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.stackingregressor property)": [[569, "sklearn.ensemble.StackingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingclassifier property)": [[570, "sklearn.ensemble.VotingClassifier.n_features_in_", false]], "n_features_in_ (sklearn.ensemble.votingregressor property)": [[571, "sklearn.ensemble.VotingRegressor.n_features_in_", false]], "n_features_in_ (sklearn.feature_selection.selectfrommodel property)": [[598, "sklearn.feature_selection.SelectFromModel.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.gridsearchcv property)": [[801, "sklearn.model_selection.GridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvinggridsearchcv property)": [[804, "sklearn.model_selection.HalvingGridSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.halvingrandomsearchcv property)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.model_selection.randomizedsearchcv property)": [[815, "sklearn.model_selection.RandomizedSearchCV.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.featureunion property)": [[864, "sklearn.pipeline.FeatureUnion.n_features_in_", false]], "n_features_in_ (sklearn.pipeline.pipeline property)": [[865, "sklearn.pipeline.Pipeline.n_features_in_", false]], "n_iter_": [[390, "term-n_iter_", true]], "n_iter_ (sklearn.ensemble.histgradientboostingclassifier property)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.n_iter_", false]], "n_iter_ (sklearn.ensemble.histgradientboostingregressor property)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.n_iter_", false]], "n_iter_no_change": [[390, "term-n_iter_no_change", true]], "n_jobs": [[390, "term-n_jobs", true]], "n_outputs": [[390, "term-n_outputs", true]], "n_samples": [[390, "term-n_samples", true]], "n_support_ (sklearn.svm.nusvc property)": [[907, "sklearn.svm.NuSVC.n_support_", false]], "n_support_ (sklearn.svm.nusvr property)": [[908, "sklearn.svm.NuSVR.n_support_", false]], "n_support_ (sklearn.svm.oneclasssvm property)": [[909, "sklearn.svm.OneClassSVM.n_support_", false]], "n_support_ (sklearn.svm.svc property)": [[910, "sklearn.svm.SVC.n_support_", false]], "n_support_ (sklearn.svm.svr property)": [[911, "sklearn.svm.SVR.n_support_", false]], "n_targets": [[390, "term-n_targets", true]], "name (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.name", false]], "named_estimators (sklearn.ensemble.stackingclassifier property)": [[568, "sklearn.ensemble.StackingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.stackingregressor property)": [[569, "sklearn.ensemble.StackingRegressor.named_estimators", false]], "named_estimators (sklearn.ensemble.votingclassifier property)": [[570, "sklearn.ensemble.VotingClassifier.named_estimators", false]], "named_estimators (sklearn.ensemble.votingregressor property)": [[571, "sklearn.ensemble.VotingRegressor.named_estimators", false]], "named_steps (sklearn.pipeline.pipeline property)": [[865, "sklearn.pipeline.Pipeline.named_steps", false]], "named_transformers_ (sklearn.compose.columntransformer property)": [[464, "sklearn.compose.ColumnTransformer.named_transformers_", false]], "nan_euclidean_distances() (in module sklearn.metrics.pairwise)": [[770, "sklearn.metrics.pairwise.nan_euclidean_distances", false]], "narrative docs": [[390, "term-narrative-docs", true]], "narrative documentation": [[390, "term-narrative-documentation", true]], "ndcg_score() (in module sklearn.metrics)": [[757, "sklearn.metrics.ndcg_score", false]], "nearestcentroid (class in sklearn.neighbors)": [[852, "sklearn.neighbors.NearestCentroid", false]], "nearestneighbors (class in sklearn.neighbors)": [[853, "sklearn.neighbors.NearestNeighbors", false]], "neighborhoodcomponentsanalysis (class in sklearn.neighbors)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis", false]], "nmf (class in sklearn.decomposition)": [[541, "sklearn.decomposition.NMF", false]], "non_negative_factorization() (in module sklearn.decomposition)": [[548, "sklearn.decomposition.non_negative_factorization", false]], "normalize() (in module sklearn.preprocessing)": [[892, "sklearn.preprocessing.normalize", false]], "normalized_mutual_info_score() (in module sklearn.metrics)": [[758, "sklearn.metrics.normalized_mutual_info_score", false]], "normalizer (class in sklearn.preprocessing)": [[877, "sklearn.preprocessing.Normalizer", false]], "notfittederror": [[578, "sklearn.exceptions.NotFittedError", false]], "np": [[390, "term-np", true]], "nusvc (class in sklearn.svm)": [[907, "sklearn.svm.NuSVC", false]], "nusvr (class in sklearn.svm)": [[908, "sklearn.svm.NuSVR", false]], "nystroem (class in sklearn.kernel_approximation)": [[640, "sklearn.kernel_approximation.Nystroem", false]], "oas (class in sklearn.covariance)": [[475, "sklearn.covariance.OAS", false]], "oas() (in module sklearn.covariance)": [[421, "sklearn.covariance.oas", false]], "oneclasssvm (class in sklearn.svm)": [[909, "sklearn.svm.OneClassSVM", false]], "onehotencoder (class in sklearn.preprocessing)": [[878, "sklearn.preprocessing.OneHotEncoder", false]], "onetoonefeaturemixin (class in sklearn.base)": [[429, "sklearn.base.OneToOneFeatureMixin", false]], "onevsoneclassifier (class in sklearn.multiclass)": [[833, "sklearn.multiclass.OneVsOneClassifier", false]], "onevsrestclassifier (class in sklearn.multiclass)": [[834, "sklearn.multiclass.OneVsRestClassifier", false]], "online learning": [[390, "term-online-learning", true]], "optics (class in sklearn.cluster)": [[450, "sklearn.cluster.OPTICS", false]], "ordinalencoder (class in sklearn.preprocessing)": [[879, "sklearn.preprocessing.OrdinalEncoder", false]], "orthogonal_mp() (in module sklearn.linear_model)": [[686, "sklearn.linear_model.orthogonal_mp", false]], "orthogonal_mp_gram() (in module sklearn.linear_model)": [[687, "sklearn.linear_model.orthogonal_mp_gram", false]], "orthogonalmatchingpursuit (class in sklearn.linear_model)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit", false]], "orthogonalmatchingpursuitcv (class in sklearn.linear_model)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV", false]], "out-of-core": [[390, "term-out-of-core", true]], "outlier detector": [[390, "term-outlier-detector", true]], "outlier detectors": [[390, "term-outlier-detectors", true]], "outliermixin (class in sklearn.base)": [[430, "sklearn.base.OutlierMixin", false]], "outputcodeclassifier (class in sklearn.multiclass)": [[835, "sklearn.multiclass.OutputCodeClassifier", false]], "outputs": [[390, "term-outputs", true]], "pair": [[390, "term-pair", true]], "pair_confusion_matrix() (in module sklearn.metrics.cluster)": [[716, "sklearn.metrics.cluster.pair_confusion_matrix", false]], "paired_cosine_distances() (in module sklearn.metrics.pairwise)": [[771, "sklearn.metrics.pairwise.paired_cosine_distances", false]], "paired_distances() (in module sklearn.metrics.pairwise)": [[772, "sklearn.metrics.pairwise.paired_distances", false]], "paired_euclidean_distances() (in module sklearn.metrics.pairwise)": [[773, "sklearn.metrics.pairwise.paired_euclidean_distances", false]], "paired_manhattan_distances() (in module sklearn.metrics.pairwise)": [[774, "sklearn.metrics.pairwise.paired_manhattan_distances", false]], "pairwise metric": [[390, "term-pairwise-metric", true]], "pairwise metrics": [[390, "term-pairwise-metrics", true]], "pairwise_distances() (in module sklearn.metrics)": [[779, "sklearn.metrics.pairwise_distances", false]], "pairwise_distances_argmin() (in module sklearn.metrics)": [[780, "sklearn.metrics.pairwise_distances_argmin", false]], "pairwise_distances_argmin_min() (in module sklearn.metrics)": [[781, "sklearn.metrics.pairwise_distances_argmin_min", false]], "pairwise_distances_chunked() (in module sklearn.metrics)": [[782, "sklearn.metrics.pairwise_distances_chunked", false]], "pairwise_kernels() (in module sklearn.metrics.pairwise)": [[775, "sklearn.metrics.pairwise.pairwise_kernels", false]], "pairwisekernel (class in sklearn.gaussian_process.kernels)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel", false]], "parallel (class in sklearn.utils.parallel)": [[967, "sklearn.utils.parallel.Parallel", false]], "parallel_backend (class in sklearn.utils)": [[969, "sklearn.utils.parallel_backend", false]], "param": [[390, "term-param", true]], "parameter": [[390, "term-parameter", true]], "parametergrid (class in sklearn.model_selection)": [[812, "sklearn.model_selection.ParameterGrid", false]], "parameters": [[390, "term-parameters", true]], "parametersampler (class in sklearn.model_selection)": [[813, "sklearn.model_selection.ParameterSampler", false]], "parametrize_with_checks() (in module sklearn.utils.estimator_checks)": [[944, "sklearn.utils.estimator_checks.parametrize_with_checks", false]], "params": [[390, "term-params", true]], "partial_dependence() (in module sklearn.inspection)": [[634, "sklearn.inspection.partial_dependence", false]], "partial_fit": [[390, "term-partial_fit", true]], "partial_fit() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.partial_fit", false]], "partial_fit() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.partial_fit", false]], "partial_fit() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.partial_fit", false]], "partial_fit() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.partial_fit", false]], "partial_fit() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.partial_fit", false]], "partial_fit() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.partial_fit", false]], "partial_fit() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.partial_fit", false]], "partial_fit() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.partial_fit", false]], "partial_fit() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.partial_fit", false]], "partial_fit() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.partial_fit", false]], "partial_fit() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.partial_fit", false]], "partial_fit() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.partial_fit", false]], "partial_fit() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.partial_fit", false]], "partial_fit() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.partial_fit", false]], "partial_fit() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.partial_fit", false]], "partial_fit() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.partial_fit", false]], "partialdependencedisplay (class in sklearn.inspection)": [[633, "sklearn.inspection.PartialDependenceDisplay", false]], "passiveaggressiveclassifier (class in sklearn.linear_model)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier", false]], "passiveaggressiveregressor (class in sklearn.linear_model)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor", false]], "patchextractor (class in sklearn.feature_extraction.image)": [[584, "sklearn.feature_extraction.image.PatchExtractor", false]], "path() (sklearn.linear_model.elasticnet static method)": [[647, "sklearn.linear_model.ElasticNet.path", false]], "path() (sklearn.linear_model.elasticnetcv static method)": [[648, "sklearn.linear_model.ElasticNetCV.path", false]], "path() (sklearn.linear_model.lasso static method)": [[653, "sklearn.linear_model.Lasso.path", false]], "path() (sklearn.linear_model.lassocv static method)": [[654, "sklearn.linear_model.LassoCV.path", false]], "path() (sklearn.linear_model.multitaskelasticnet static method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.path", false]], "path() (sklearn.linear_model.multitaskelasticnetcv static method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.path", false]], "path() (sklearn.linear_model.multitasklasso static method)": [[663, "sklearn.linear_model.MultiTaskLasso.path", false]], "path() (sklearn.linear_model.multitasklassocv static method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.path", false]], "pca (class in sklearn.decomposition)": [[542, "sklearn.decomposition.PCA", false]], "pd": [[390, "term-pd", true]], "perceptron (class in sklearn.linear_model)": [[669, "sklearn.linear_model.Perceptron", false]], "permutation_importance() (in module sklearn.inspection)": [[635, "sklearn.inspection.permutation_importance", false]], "permutation_test_score() (in module sklearn.model_selection)": [[830, "sklearn.model_selection.permutation_test_score", false]], "perplexity() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.perplexity", false]], "pipeline (class in sklearn.pipeline)": [[865, "sklearn.pipeline.Pipeline", false]], "plot() (sklearn.calibration.calibrationdisplay method)": [[438, "sklearn.calibration.CalibrationDisplay.plot", false]], "plot() (sklearn.inspection.decisionboundarydisplay method)": [[632, "sklearn.inspection.DecisionBoundaryDisplay.plot", false]], "plot() (sklearn.inspection.partialdependencedisplay method)": [[633, "sklearn.inspection.PartialDependenceDisplay.plot", false]], "plot() (sklearn.metrics.confusionmatrixdisplay method)": [[698, "sklearn.metrics.ConfusionMatrixDisplay.plot", false]], "plot() (sklearn.metrics.detcurvedisplay method)": [[699, "sklearn.metrics.DetCurveDisplay.plot", false]], "plot() (sklearn.metrics.precisionrecalldisplay method)": [[701, "sklearn.metrics.PrecisionRecallDisplay.plot", false]], "plot() (sklearn.metrics.predictionerrordisplay method)": [[702, "sklearn.metrics.PredictionErrorDisplay.plot", false]], "plot() (sklearn.metrics.roccurvedisplay method)": [[703, "sklearn.metrics.RocCurveDisplay.plot", false]], "plot() (sklearn.model_selection.learningcurvedisplay method)": [[807, "sklearn.model_selection.LearningCurveDisplay.plot", false]], "plot() (sklearn.model_selection.validationcurvedisplay method)": [[824, "sklearn.model_selection.ValidationCurveDisplay.plot", false]], "plot_tree() (in module sklearn.tree)": [[919, "sklearn.tree.plot_tree", false]], "plscanonical (class in sklearn.cross_decomposition)": [[483, "sklearn.cross_decomposition.PLSCanonical", false]], "plsregression (class in sklearn.cross_decomposition)": [[484, "sklearn.cross_decomposition.PLSRegression", false]], "plssvd (class in sklearn.cross_decomposition)": [[485, "sklearn.cross_decomposition.PLSSVD", false]], "poissonregressor (class in sklearn.linear_model)": [[670, "sklearn.linear_model.PoissonRegressor", false]], "polynomial_kernel() (in module sklearn.metrics.pairwise)": [[776, "sklearn.metrics.pairwise.polynomial_kernel", false]], "polynomialcountsketch (class in sklearn.kernel_approximation)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch", false]], "polynomialfeatures (class in sklearn.preprocessing)": [[880, "sklearn.preprocessing.PolynomialFeatures", false]], "pop() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.pop", false]], "popitem() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.popitem", false]], "pos_label": [[390, "term-pos_label", true]], "power_transform() (in module sklearn.preprocessing)": [[893, "sklearn.preprocessing.power_transform", false]], "powers_ (sklearn.preprocessing.polynomialfeatures property)": [[880, "sklearn.preprocessing.PolynomialFeatures.powers_", false]], "powertransformer (class in sklearn.preprocessing)": [[881, "sklearn.preprocessing.PowerTransformer", false]], "precision_recall_curve() (in module sklearn.metrics)": [[783, "sklearn.metrics.precision_recall_curve", false]], "precision_recall_fscore_support() (in module sklearn.metrics)": [[784, "sklearn.metrics.precision_recall_fscore_support", false]], "precision_score() (in module sklearn.metrics)": [[785, "sklearn.metrics.precision_score", false]], "precisionrecalldisplay (class in sklearn.metrics)": [[701, "sklearn.metrics.PrecisionRecallDisplay", false]], "precomputed": [[390, "term-precomputed", true]], "predefinedsplit (class in sklearn.model_selection)": [[814, "sklearn.model_selection.PredefinedSplit", false]], "predict": [[390, "term-predict", true]], "predict() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.predict", false]], "predict() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.predict", false]], "predict() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.predict", false]], "predict() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.predict", false]], "predict() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.predict", false]], "predict() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.predict", false]], "predict() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.predict", false]], "predict() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.predict", false]], "predict() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.predict", false]], "predict() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.predict", false]], "predict() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.predict", false]], "predict() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.predict", false]], "predict() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict", false]], "predict() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict", false]], "predict() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict", false]], "predict() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.predict", false]], "predict() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict", false]], "predict() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.predict", false]], "predict() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict", false]], "predict() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.predict", false]], "predict() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict", false]], "predict() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.predict", false]], "predict() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.predict", false]], "predict() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.predict", false]], "predict() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.predict", false]], "predict() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict", false]], "predict() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.predict", false]], "predict() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.predict", false]], "predict() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.predict", false]], "predict() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.predict", false]], "predict() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.predict", false]], "predict() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.predict", false]], "predict() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.predict", false]], "predict() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.predict", false]], "predict() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.predict", false]], "predict() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.predict", false]], "predict() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.predict", false]], "predict() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.predict", false]], "predict() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.predict", false]], "predict() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.predict", false]], "predict() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.predict", false]], "predict() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.predict", false]], "predict() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.predict", false]], "predict() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.predict", false]], "predict() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.predict", false]], "predict() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.predict", false]], "predict() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.predict", false]], "predict() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.predict", false]], "predict() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.predict", false]], "predict() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.predict", false]], "predict() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.predict", false]], "predict() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.predict", false]], "predict() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.predict", false]], "predict() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.predict", false]], "predict() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.predict", false]], "predict() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.predict", false]], "predict() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.predict", false]], "predict() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.predict", false]], "predict() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.predict", false]], "predict() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.predict", false]], "predict() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.predict", false]], "predict() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.predict", false]], "predict() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.predict", false]], "predict() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.predict", false]], "predict() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.predict", false]], "predict() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.predict", false]], "predict() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.predict", false]], "predict() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.predict", false]], "predict() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.predict", false]], "predict() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.predict", false]], "predict() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.predict", false]], "predict() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.predict", false]], "predict() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.predict", false]], "predict() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.predict", false]], "predict() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.predict", false]], "predict() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.predict", false]], "predict() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.predict", false]], "predict() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.predict", false]], "predict() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.predict", false]], "predict() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.predict", false]], "predict() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.predict", false]], "predict() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.predict", false]], "predict() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.predict", false]], "predict() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.predict", false]], "predict() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.predict", false]], "predict() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.predict", false]], "predict() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.predict", false]], "predict() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.predict", false]], "predict() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.predict", false]], "predict() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.predict", false]], "predict() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.predict", false]], "predict() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.predict", false]], "predict() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.predict", false]], "predict() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.predict", false]], "predict() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.predict", false]], "predict() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.predict", false]], "predict() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.predict", false]], "predict() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.predict", false]], "predict() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.predict", false]], "predict() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.predict", false]], "predict() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.predict", false]], "predict() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.predict", false]], "predict() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.predict", false]], "predict() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.predict", false]], "predict() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.predict", false]], "predict() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.predict", false]], "predict() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.predict", false]], "predict() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.predict", false]], "predict() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.predict", false]], "predict() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.predict", false]], "predict() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.predict", false]], "predict_joint_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.predict_joint_log_proba", false]], "predict_joint_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.predict_joint_log_proba", false]], "predict_log_proba": [[390, "term-predict_log_proba", true]], "predict_log_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_log_proba", false]], "predict_log_proba() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.predict_log_proba", false]], "predict_log_proba() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.predict_log_proba", false]], "predict_log_proba() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.predict_log_proba", false]], "predict_log_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.predict_log_proba", false]], "predict_log_proba() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.predict_log_proba", false]], "predict_log_proba() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.predict_log_proba", false]], "predict_log_proba() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.predict_log_proba", false]], "predict_log_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.predict_log_proba", false]], "predict_log_proba() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.predict_log_proba", false]], "predict_proba": [[390, "term-predict_proba", true]], "predict_proba() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.predict_proba", false]], "predict_proba() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.predict_proba", false]], "predict_proba() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.predict_proba", false]], "predict_proba() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.predict_proba", false]], "predict_proba() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.predict_proba", false]], "predict_proba() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.predict_proba", false]], "predict_proba() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.predict_proba", false]], "predict_proba() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.predict_proba", false]], "predict_proba() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.predict_proba", false]], "predict_proba() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.predict_proba", false]], "predict_proba() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.predict_proba", false]], "predict_proba() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.predict_proba", false]], "predict_proba() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.predict_proba", false]], "predict_proba() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.predict_proba", false]], "predict_proba() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.predict_proba", false]], "predict_proba() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.predict_proba", false]], "predict_proba() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.predict_proba", false]], "predict_proba() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.predict_proba", false]], "predict_proba() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.predict_proba", false]], "predict_proba() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.predict_proba", false]], "predict_proba() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.predict_proba", false]], "predict_proba() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.predict_proba", false]], "predict_proba() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.predict_proba", false]], "predict_proba() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.predict_proba", false]], "predictionerrordisplay (class in sklearn.metrics)": [[702, "sklearn.metrics.PredictionErrorDisplay", false]], "predictor": [[390, "term-predictor", true]], "predictors": [[390, "term-predictors", true]], "print_progress() (sklearn.utils.parallel.parallel method)": [[967, "sklearn.utils.parallel.Parallel.print_progress", false]], "proba_ (sklearn.svm.nusvc property)": [[907, "sklearn.svm.NuSVC.probA_", false]], "proba_ (sklearn.svm.svc property)": [[910, "sklearn.svm.SVC.probA_", false]], "probb_ (sklearn.svm.nusvc property)": [[907, "sklearn.svm.NuSVC.probB_", false]], "probb_ (sklearn.svm.svc property)": [[910, "sklearn.svm.SVC.probB_", false]], "process_routing() (in module sklearn.utils.metadata_routing)": [[961, "sklearn.utils.metadata_routing.process_routing", false]], "product (class in sklearn.gaussian_process.kernels)": [[622, "sklearn.gaussian_process.kernels.Product", false]], "quadraticdiscriminantanalysis (class in sklearn.discriminant_analysis)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis", false]], "quantile_transform() (in module sklearn.preprocessing)": [[894, "sklearn.preprocessing.quantile_transform", false]], "quantileregressor (class in sklearn.linear_model)": [[671, "sklearn.linear_model.QuantileRegressor", false]], "quantiletransformer (class in sklearn.preprocessing)": [[882, "sklearn.preprocessing.QuantileTransformer", false]], "query() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.query", false]], "query() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.query", false]], "query_radius() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.query_radius", false]], "query_radius() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.query_radius", false]], "r2_score() (in module sklearn.metrics)": [[786, "sklearn.metrics.r2_score", false]], "r_regression() (in module sklearn.feature_selection)": [[610, "sklearn.feature_selection.r_regression", false]], "radius_neighbors() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors", false]], "radius_neighbors() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors", false]], "radius_neighbors_graph() (in module sklearn.neighbors)": [[859, "sklearn.neighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.radius_neighbors_graph", false]], "radius_neighbors_graph() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.radius_neighbors_graph", false]], "radiusneighborsclassifier (class in sklearn.neighbors)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier", false]], "radiusneighborsregressor (class in sklearn.neighbors)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor", false]], "radiusneighborstransformer (class in sklearn.neighbors)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer", false]], "rand_score() (in module sklearn.metrics)": [[787, "sklearn.metrics.rand_score", false]], "random_state": [[390, "term-random_state", true]], "randomforestclassifier (class in sklearn.ensemble)": [[565, "sklearn.ensemble.RandomForestClassifier", false]], "randomforestregressor (class in sklearn.ensemble)": [[566, "sklearn.ensemble.RandomForestRegressor", false]], "randomized_range_finder() (in module sklearn.utils.extmath)": [[948, "sklearn.utils.extmath.randomized_range_finder", false]], "randomized_svd() (in module sklearn.utils.extmath)": [[949, "sklearn.utils.extmath.randomized_svd", false]], "randomizedsearchcv (class in sklearn.model_selection)": [[815, "sklearn.model_selection.RandomizedSearchCV", false]], "randomtreesembedding (class in sklearn.ensemble)": [[567, "sklearn.ensemble.RandomTreesEmbedding", false]], "ransacregressor (class in sklearn.linear_model)": [[672, "sklearn.linear_model.RANSACRegressor", false]], "rationalquadratic (class in sklearn.gaussian_process.kernels)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic", false]], "rbf (class in sklearn.gaussian_process.kernels)": [[623, "sklearn.gaussian_process.kernels.RBF", false]], "rbf_kernel() (in module sklearn.metrics.pairwise)": [[777, "sklearn.metrics.pairwise.rbf_kernel", false]], "rbfsampler (class in sklearn.kernel_approximation)": [[642, "sklearn.kernel_approximation.RBFSampler", false]], "recall_score() (in module sklearn.metrics)": [[788, "sklearn.metrics.recall_score", false]], "reconstruct_from_patches_2d() (in module sklearn.feature_extraction.image)": [[588, "sklearn.feature_extraction.image.reconstruct_from_patches_2d", false]], "reconstruction_error() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.reconstruction_error", false]], "rectangular": [[390, "term-rectangular", true]], "register_parallel_backend() (in module sklearn.utils)": [[971, "sklearn.utils.register_parallel_backend", false]], "regressor": [[390, "term-regressor", true]], "regressorchain (class in sklearn.multioutput)": [[839, "sklearn.multioutput.RegressorChain", false]], "regressormixin (class in sklearn.base)": [[431, "sklearn.base.RegressorMixin", false]], "regressors": [[390, "term-regressors", true]], "regressortags (class in sklearn.utils)": [[923, "sklearn.utils.RegressorTags", false]], "repeatedkfold (class in sklearn.model_selection)": [[816, "sklearn.model_selection.RepeatedKFold", false]], "repeatedstratifiedkfold (class in sklearn.model_selection)": [[817, "sklearn.model_selection.RepeatedStratifiedKFold", false]], "requires_vector_input (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.requires_vector_input", false]], "requires_vector_input (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.requires_vector_input", false]], "resample() (in module sklearn.utils)": [[972, "sklearn.utils.resample", false]], "reset_n_calls() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.reset_n_calls", false]], "reset_n_calls() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.reset_n_calls", false]], "restrict() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.restrict", false]], "reweight_covariance() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.reweight_covariance", false]], "reweight_covariance() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.reweight_covariance", false]], "rfe (class in sklearn.feature_selection)": [[594, "sklearn.feature_selection.RFE", false]], "rfecv (class in sklearn.feature_selection)": [[595, "sklearn.feature_selection.RFECV", false]], "ridge (class in sklearn.linear_model)": [[673, "sklearn.linear_model.Ridge", false]], "ridge_regression() (in module sklearn.linear_model)": [[688, "sklearn.linear_model.ridge_regression", false]], "ridgeclassifier (class in sklearn.linear_model)": [[675, "sklearn.linear_model.RidgeClassifier", false]], "ridgeclassifiercv (class in sklearn.linear_model)": [[676, "sklearn.linear_model.RidgeClassifierCV", false]], "ridgecv (class in sklearn.linear_model)": [[674, "sklearn.linear_model.RidgeCV", false]], "robust_scale() (in module sklearn.preprocessing)": [[895, "sklearn.preprocessing.robust_scale", false]], "robustscaler (class in sklearn.preprocessing)": [[883, "sklearn.preprocessing.RobustScaler", false]], "roc_auc_score() (in module sklearn.metrics)": [[789, "sklearn.metrics.roc_auc_score", false]], "roc_curve() (in module sklearn.metrics)": [[790, "sklearn.metrics.roc_curve", false]], "roccurvedisplay (class in sklearn.metrics)": [[703, "sklearn.metrics.RocCurveDisplay", false]], "root_mean_squared_error() (in module sklearn.metrics)": [[791, "sklearn.metrics.root_mean_squared_error", false]], "root_mean_squared_log_error() (in module sklearn.metrics)": [[792, "sklearn.metrics.root_mean_squared_log_error", false]], "route_params() (sklearn.utils.metadata_routing.metadatarouter method)": [[958, "sklearn.utils.metadata_routing.MetadataRouter.route_params", false]], "router": [[390, "term-router", true]], "safe_mask() (in module sklearn.utils)": [[973, "sklearn.utils.safe_mask", false]], "safe_sparse_dot() (in module sklearn.utils.extmath)": [[950, "sklearn.utils.extmath.safe_sparse_dot", false]], "safe_sqr() (in module sklearn.utils)": [[974, "sklearn.utils.safe_sqr", false]], "sample": [[390, "term-sample", true]], "sample properties": [[390, "term-sample-properties", true]], "sample property": [[390, "term-sample-property", true]], "sample() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.sample", false]], "sample() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.sample", false]], "sample() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.sample", false]], "sample_weight": [[390, "term-sample_weight", true]], "sample_without_replacement() (in module sklearn.utils.random)": [[970, "sklearn.utils.random.sample_without_replacement", false]], "sample_y() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.sample_y", false]], "samples": [[390, "term-samples", true]], "scale() (in module sklearn.preprocessing)": [[896, "sklearn.preprocessing.scale", false]], "scikit-learn enhancement proposals": [[390, "term-scikit-learn-enhancement-proposals", true]], "scikit-learn-contrib": [[390, "term-scikit-learn-contrib", true]], "score": [[390, "term-score", true]], "score() (sklearn.base.classifiermixin method)": [[425, "sklearn.base.ClassifierMixin.score", false]], "score() (sklearn.base.densitymixin method)": [[427, "sklearn.base.DensityMixin.score", false]], "score() (sklearn.base.regressormixin method)": [[431, "sklearn.base.RegressorMixin.score", false]], "score() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.score", false]], "score() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.score", false]], "score() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.score", false]], "score() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.score", false]], "score() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.score", false]], "score() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.score", false]], "score() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.score", false]], "score() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.score", false]], "score() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.score", false]], "score() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.score", false]], "score() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.score", false]], "score() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.score", false]], "score() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.score", false]], "score() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.score", false]], "score() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.score", false]], "score() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.score", false]], "score() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.score", false]], "score() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.score", false]], "score() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.score", false]], "score() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.score", false]], "score() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.score", false]], "score() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.score", false]], "score() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.score", false]], "score() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.score", false]], "score() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.score", false]], "score() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.score", false]], "score() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.score", false]], "score() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.score", false]], "score() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.score", false]], "score() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.score", false]], "score() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.score", false]], "score() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.score", false]], "score() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.score", false]], "score() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.score", false]], "score() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.score", false]], "score() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.score", false]], "score() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.score", false]], "score() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.score", false]], "score() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.score", false]], "score() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.score", false]], "score() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.score", false]], "score() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.score", false]], "score() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.score", false]], "score() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.score", false]], "score() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.score", false]], "score() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.score", false]], "score() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.score", false]], "score() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.score", false]], "score() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.score", false]], "score() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.score", false]], "score() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.score", false]], "score() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.score", false]], "score() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.score", false]], "score() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.score", false]], "score() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.score", false]], "score() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.score", false]], "score() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.score", false]], "score() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.score", false]], "score() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.score", false]], "score() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.score", false]], "score() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.score", false]], "score() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.score", false]], "score() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.score", false]], "score() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.score", false]], "score() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.score", false]], "score() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.score", false]], "score() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.score", false]], "score() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.score", false]], "score() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.score", false]], "score() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.score", false]], "score() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.score", false]], "score() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.score", false]], "score() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.score", false]], "score() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.score", false]], "score() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.score", false]], "score() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.score", false]], "score() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.score", false]], "score() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.score", false]], "score() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.score", false]], "score() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.score", false]], "score() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.score", false]], "score() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.score", false]], "score() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.score", false]], "score() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.score", false]], "score() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.score", false]], "score() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.score", false]], "score() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.score", false]], "score() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.score", false]], "score() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.score", false]], "score() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.score", false]], "score() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.score", false]], "score() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.score", false]], "score() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.score", false]], "score() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.score", false]], "score() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.score", false]], "score() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.score", false]], "score() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.score", false]], "score() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.score", false]], "score() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.score", false]], "score() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.score", false]], "score() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.score", false]], "score() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.score", false]], "score() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.score", false]], "score() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.score", false]], "score() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.score", false]], "score() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.score", false]], "score() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.score", false]], "score() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.score", false]], "score() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.score", false]], "score() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.score", false]], "score() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.score", false]], "score() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.score", false]], "score() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.score", false]], "score() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.score", false]], "score() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.score", false]], "score() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.score", false]], "score() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.score", false]], "score() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.score", false]], "score() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.score", false]], "score() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.score", false]], "score_samples": [[390, "term-score_samples", true]], "score_samples() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.score_samples", false]], "score_samples() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.score_samples", false]], "score_samples() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.score_samples", false]], "score_samples() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.score_samples", false]], "score_samples() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.score_samples", false]], "score_samples() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.score_samples", false]], "score_samples() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.score_samples", false]], "score_samples() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.score_samples", false]], "score_samples() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.score_samples", false]], "score_samples() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.score_samples", false]], "score_samples() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.score_samples", false]], "score_samples() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.score_samples", false]], "score_samples() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.score_samples", false]], "score_samples() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.score_samples", false]], "scorer": [[390, "term-scorer", true]], "scoring": [[390, "term-scoring", true]], "selectfdr (class in sklearn.feature_selection)": [[596, "sklearn.feature_selection.SelectFdr", false]], "selectfpr (class in sklearn.feature_selection)": [[597, "sklearn.feature_selection.SelectFpr", false]], "selectfrommodel (class in sklearn.feature_selection)": [[598, "sklearn.feature_selection.SelectFromModel", false]], "selectfwe (class in sklearn.feature_selection)": [[599, "sklearn.feature_selection.SelectFwe", false]], "selectkbest (class in sklearn.feature_selection)": [[600, "sklearn.feature_selection.SelectKBest", false]], "selectormixin (class in sklearn.feature_selection)": [[602, "sklearn.feature_selection.SelectorMixin", false]], "selectpercentile (class in sklearn.feature_selection)": [[601, "sklearn.feature_selection.SelectPercentile", false]], "selftrainingclassifier (class in sklearn.semi_supervised)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier", false]], "semi-supervised": [[390, "term-semi-supervised", true]], "semi-supervised learning": [[390, "term-semi-supervised-learning", true]], "semisupervised": [[390, "term-semisupervised", true]], "sequentialfeatureselector (class in sklearn.feature_selection)": [[603, "sklearn.feature_selection.SequentialFeatureSelector", false]], "set_config() (in module sklearn)": [[903, "sklearn.set_config", false]], "set_fit_request() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.set_fit_request", false]], "set_fit_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_fit_request", false]], "set_fit_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_fit_request", false]], "set_fit_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_fit_request", false]], "set_fit_request() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.set_fit_request", false]], "set_fit_request() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_fit_request", false]], "set_fit_request() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.set_fit_request", false]], "set_fit_request() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.set_fit_request", false]], "set_fit_request() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.set_fit_request", false]], "set_fit_request() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.set_fit_request", false]], "set_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.set_fit_request", false]], "set_fit_request() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.set_fit_request", false]], "set_fit_request() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.set_fit_request", false]], "set_fit_request() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.set_fit_request", false]], "set_fit_request() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.set_fit_request", false]], "set_fit_request() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_fit_request", false]], "set_fit_request() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.set_fit_request", false]], "set_inverse_transform_request() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.set_inverse_transform_request", false]], "set_inverse_transform_request() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_inverse_transform_request", false]], "set_output() (sklearn.base.transformermixin method)": [[432, "sklearn.base.TransformerMixin.set_output", false]], "set_output() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.set_output", false]], "set_output() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_output", false]], "set_output() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.set_output", false]], "set_output() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_output", false]], "set_output() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_output", false]], "set_output() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.set_output", false]], "set_output() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_output", false]], "set_output() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_output", false]], "set_output() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_output", false]], "set_output() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.set_output", false]], "set_output() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.set_output", false]], "set_output() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_output", false]], "set_output() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.set_output", false]], "set_output() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.set_output", false]], "set_output() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.set_output", false]], "set_output() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.set_output", false]], "set_output() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.set_output", false]], "set_output() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.set_output", false]], "set_output() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.set_output", false]], "set_output() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.set_output", false]], "set_output() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.set_output", false]], "set_output() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.set_output", false]], "set_output() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.set_output", false]], "set_output() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_output", false]], "set_output() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_output", false]], "set_output() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_output", false]], "set_output() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_output", false]], "set_output() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_output", false]], "set_output() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_output", false]], "set_output() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.set_output", false]], "set_output() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.set_output", false]], "set_output() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.set_output", false]], "set_output() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.set_output", false]], "set_output() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.set_output", false]], "set_output() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.set_output", false]], "set_output() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.set_output", false]], "set_output() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.set_output", false]], "set_output() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.set_output", false]], "set_output() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.set_output", false]], "set_output() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.set_output", false]], "set_output() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.set_output", false]], "set_output() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.set_output", false]], "set_output() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.set_output", false]], "set_output() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.set_output", false]], "set_output() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.set_output", false]], "set_output() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.set_output", false]], "set_output() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.set_output", false]], "set_output() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.set_output", false]], "set_output() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.set_output", false]], "set_output() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_output", false]], "set_output() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_output", false]], "set_output() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.set_output", false]], "set_output() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.set_output", false]], "set_output() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.set_output", false]], "set_output() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.set_output", false]], "set_output() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.set_output", false]], "set_output() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.set_output", false]], "set_output() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.set_output", false]], "set_output() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.set_output", false]], "set_output() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_output", false]], "set_output() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.set_output", false]], "set_output() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.set_output", false]], "set_output() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.set_output", false]], "set_output() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.set_output", false]], "set_output() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.set_output", false]], "set_output() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.set_output", false]], "set_output() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.set_output", false]], "set_output() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.set_output", false]], "set_output() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.set_output", false]], "set_output() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.set_output", false]], "set_output() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.set_output", false]], "set_output() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.set_output", false]], "set_output() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.set_output", false]], "set_output() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.set_output", false]], "set_output() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.set_output", false]], "set_output() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.set_output", false]], "set_output() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.set_output", false]], "set_output() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.set_output", false]], "set_output() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.set_output", false]], "set_output() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.set_output", false]], "set_output() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_output", false]], "set_output() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.set_output", false]], "set_output() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.set_output", false]], "set_output() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.set_output", false]], "set_params": [[390, "term-set_params", true]], "set_params() (sklearn.base.baseestimator method)": [[422, "sklearn.base.BaseEstimator.set_params", false]], "set_params() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_params", false]], "set_params() (sklearn.cluster.affinitypropagation method)": [[440, "sklearn.cluster.AffinityPropagation.set_params", false]], "set_params() (sklearn.cluster.agglomerativeclustering method)": [[441, "sklearn.cluster.AgglomerativeClustering.set_params", false]], "set_params() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.set_params", false]], "set_params() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_params", false]], "set_params() (sklearn.cluster.dbscan method)": [[444, "sklearn.cluster.DBSCAN.set_params", false]], "set_params() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.set_params", false]], "set_params() (sklearn.cluster.hdbscan method)": [[446, "sklearn.cluster.HDBSCAN.set_params", false]], "set_params() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_params", false]], "set_params() (sklearn.cluster.meanshift method)": [[448, "sklearn.cluster.MeanShift.set_params", false]], "set_params() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_params", false]], "set_params() (sklearn.cluster.optics method)": [[450, "sklearn.cluster.OPTICS.set_params", false]], "set_params() (sklearn.cluster.spectralbiclustering method)": [[451, "sklearn.cluster.SpectralBiclustering.set_params", false]], "set_params() (sklearn.cluster.spectralclustering method)": [[452, "sklearn.cluster.SpectralClustering.set_params", false]], "set_params() (sklearn.cluster.spectralcoclustering method)": [[453, "sklearn.cluster.SpectralCoclustering.set_params", false]], "set_params() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.set_params", false]], "set_params() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.set_params", false]], "set_params() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.set_params", false]], "set_params() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.set_params", false]], "set_params() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.set_params", false]], "set_params() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.set_params", false]], "set_params() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.set_params", false]], "set_params() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.set_params", false]], "set_params() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.set_params", false]], "set_params() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.set_params", false]], "set_params() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_params", false]], "set_params() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_params", false]], "set_params() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_params", false]], "set_params() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.set_params", false]], "set_params() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.set_params", false]], "set_params() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_params", false]], "set_params() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.set_params", false]], "set_params() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.set_params", false]], "set_params() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.set_params", false]], "set_params() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.set_params", false]], "set_params() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.set_params", false]], "set_params() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.set_params", false]], "set_params() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.set_params", false]], "set_params() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.set_params", false]], "set_params() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.set_params", false]], "set_params() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.set_params", false]], "set_params() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.set_params", false]], "set_params() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_params", false]], "set_params() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_params", false]], "set_params() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_params", false]], "set_params() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_params", false]], "set_params() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_params", false]], "set_params() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_params", false]], "set_params() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_params", false]], "set_params() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_params", false]], "set_params() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_params", false]], "set_params() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_params", false]], "set_params() (sklearn.ensemble.isolationforest method)": [[564, "sklearn.ensemble.IsolationForest.set_params", false]], "set_params() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_params", false]], "set_params() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_params", false]], "set_params() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.set_params", false]], "set_params() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_params", false]], "set_params() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_params", false]], "set_params() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_params", false]], "set_params() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_params", false]], "set_params() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.set_params", false]], "set_params() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.set_params", false]], "set_params() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.set_params", false]], "set_params() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.set_params", false]], "set_params() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.set_params", false]], "set_params() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.set_params", false]], "set_params() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.set_params", false]], "set_params() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.set_params", false]], "set_params() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.set_params", false]], "set_params() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.set_params", false]], "set_params() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.set_params", false]], "set_params() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.set_params", false]], "set_params() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.set_params", false]], "set_params() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.set_params", false]], "set_params() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.set_params", false]], "set_params() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.compoundkernel method)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.constantkernel method)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.dotproduct method)": [[615, "sklearn.gaussian_process.kernels.DotProduct.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.exponentiation method)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.expsinesquared method)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.kernel method)": [[619, "sklearn.gaussian_process.kernels.Kernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.matern method)": [[620, "sklearn.gaussian_process.kernels.Matern.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.pairwisekernel method)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.product method)": [[622, "sklearn.gaussian_process.kernels.Product.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rationalquadratic method)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.rbf method)": [[623, "sklearn.gaussian_process.kernels.RBF.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.sum method)": [[625, "sklearn.gaussian_process.kernels.Sum.set_params", false]], "set_params() (sklearn.gaussian_process.kernels.whitekernel method)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.set_params", false]], "set_params() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.set_params", false]], "set_params() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.set_params", false]], "set_params() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.set_params", false]], "set_params() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.set_params", false]], "set_params() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_params", false]], "set_params() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.set_params", false]], "set_params() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.set_params", false]], "set_params() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.set_params", false]], "set_params() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.set_params", false]], "set_params() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.set_params", false]], "set_params() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.set_params", false]], "set_params() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.set_params", false]], "set_params() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.set_params", false]], "set_params() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.set_params", false]], "set_params() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.set_params", false]], "set_params() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.set_params", false]], "set_params() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.set_params", false]], "set_params() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.set_params", false]], "set_params() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.set_params", false]], "set_params() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.set_params", false]], "set_params() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.set_params", false]], "set_params() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.set_params", false]], "set_params() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.set_params", false]], "set_params() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.set_params", false]], "set_params() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.set_params", false]], "set_params() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.set_params", false]], "set_params() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.set_params", false]], "set_params() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.set_params", false]], "set_params() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.set_params", false]], "set_params() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.set_params", false]], "set_params() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.set_params", false]], "set_params() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.set_params", false]], "set_params() (sklearn.linear_model.ransacregressor method)": [[672, "sklearn.linear_model.RANSACRegressor.set_params", false]], "set_params() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.set_params", false]], "set_params() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.set_params", false]], "set_params() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.set_params", false]], "set_params() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.set_params", false]], "set_params() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.set_params", false]], "set_params() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.set_params", false]], "set_params() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.set_params", false]], "set_params() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.set_params", false]], "set_params() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.set_params", false]], "set_params() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.set_params", false]], "set_params() (sklearn.manifold.mds method)": [[691, "sklearn.manifold.MDS.set_params", false]], "set_params() (sklearn.manifold.spectralembedding method)": [[692, "sklearn.manifold.SpectralEmbedding.set_params", false]], "set_params() (sklearn.manifold.tsne method)": [[693, "sklearn.manifold.TSNE.set_params", false]], "set_params() (sklearn.mixture.bayesiangaussianmixture method)": [[798, "sklearn.mixture.BayesianGaussianMixture.set_params", false]], "set_params() (sklearn.mixture.gaussianmixture method)": [[799, "sklearn.mixture.GaussianMixture.set_params", false]], "set_params() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.set_params", false]], "set_params() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.set_params", false]], "set_params() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.set_params", false]], "set_params() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.set_params", false]], "set_params() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.set_params", false]], "set_params() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.set_params", false]], "set_params() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.set_params", false]], "set_params() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.set_params", false]], "set_params() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.set_params", false]], "set_params() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.set_params", false]], "set_params() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.set_params", false]], "set_params() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.set_params", false]], "set_params() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.set_params", false]], "set_params() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.set_params", false]], "set_params() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.set_params", false]], "set_params() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.set_params", false]], "set_params() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.set_params", false]], "set_params() (sklearn.neighbors.kerneldensity method)": [[850, "sklearn.neighbors.KernelDensity.set_params", false]], "set_params() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.set_params", false]], "set_params() (sklearn.neighbors.localoutlierfactor method)": [[851, "sklearn.neighbors.LocalOutlierFactor.set_params", false]], "set_params() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.set_params", false]], "set_params() (sklearn.neighbors.nearestneighbors method)": [[853, "sklearn.neighbors.NearestNeighbors.set_params", false]], "set_params() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.set_params", false]], "set_params() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.set_params", false]], "set_params() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.set_params", false]], "set_params() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.set_params", false]], "set_params() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.set_params", false]], "set_params() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.set_params", false]], "set_params() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.set_params", false]], "set_params() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.set_params", false]], "set_params() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.set_params", false]], "set_params() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.set_params", false]], "set_params() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.set_params", false]], "set_params() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.set_params", false]], "set_params() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.set_params", false]], "set_params() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.set_params", false]], "set_params() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.set_params", false]], "set_params() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.set_params", false]], "set_params() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.set_params", false]], "set_params() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.set_params", false]], "set_params() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.set_params", false]], "set_params() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.set_params", false]], "set_params() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.set_params", false]], "set_params() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.set_params", false]], "set_params() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.set_params", false]], "set_params() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_params", false]], "set_params() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.set_params", false]], "set_params() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.set_params", false]], "set_params() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.set_params", false]], "set_params() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.set_params", false]], "set_params() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.set_params", false]], "set_params() (sklearn.semi_supervised.selftrainingclassifier method)": [[902, "sklearn.semi_supervised.SelfTrainingClassifier.set_params", false]], "set_params() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.set_params", false]], "set_params() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.set_params", false]], "set_params() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.set_params", false]], "set_params() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.set_params", false]], "set_params() (sklearn.svm.oneclasssvm method)": [[909, "sklearn.svm.OneClassSVM.set_params", false]], "set_params() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.set_params", false]], "set_params() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.set_params", false]], "set_params() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_params", false]], "set_params() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.set_params", false]], "set_params() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_params", false]], "set_params() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.set_params", false]], "set_partial_fit_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputclassifier method)": [[837, "sklearn.multioutput.MultiOutputClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.set_partial_fit_request", false]], "set_partial_fit_request() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_partial_fit_request", false]], "set_predict_proba_request() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_predict_proba_request", false]], "set_predict_proba_request() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_predict_proba_request", false]], "set_predict_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_predict_request", false]], "set_predict_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_predict_request", false]], "set_predict_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_predict_request", false]], "set_predict_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.set_predict_request", false]], "set_predict_request() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.set_predict_request", false]], "set_predict_request() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_predict_request", false]], "set_predict_request() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.set_predict_request", false]], "set_score_request() (sklearn.calibration.calibratedclassifiercv method)": [[437, "sklearn.calibration.CalibratedClassifierCV.set_score_request", false]], "set_score_request() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.set_score_request", false]], "set_score_request() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.set_score_request", false]], "set_score_request() (sklearn.compose.transformedtargetregressor method)": [[465, "sklearn.compose.TransformedTargetRegressor.set_score_request", false]], "set_score_request() (sklearn.covariance.ellipticenvelope method)": [[469, "sklearn.covariance.EllipticEnvelope.set_score_request", false]], "set_score_request() (sklearn.covariance.empiricalcovariance method)": [[470, "sklearn.covariance.EmpiricalCovariance.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallasso method)": [[471, "sklearn.covariance.GraphicalLasso.set_score_request", false]], "set_score_request() (sklearn.covariance.graphicallassocv method)": [[472, "sklearn.covariance.GraphicalLassoCV.set_score_request", false]], "set_score_request() (sklearn.covariance.ledoitwolf method)": [[473, "sklearn.covariance.LedoitWolf.set_score_request", false]], "set_score_request() (sklearn.covariance.mincovdet method)": [[474, "sklearn.covariance.MinCovDet.set_score_request", false]], "set_score_request() (sklearn.covariance.oas method)": [[475, "sklearn.covariance.OAS.set_score_request", false]], "set_score_request() (sklearn.covariance.shrunkcovariance method)": [[476, "sklearn.covariance.ShrunkCovariance.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_score_request", false]], "set_score_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.discriminant_analysis.quadraticdiscriminantanalysis method)": [[551, "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyclassifier method)": [[552, "sklearn.dummy.DummyClassifier.set_score_request", false]], "set_score_request() (sklearn.dummy.dummyregressor method)": [[553, "sklearn.dummy.DummyRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingclassifier method)": [[556, "sklearn.ensemble.BaggingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.baggingregressor method)": [[557, "sklearn.ensemble.BaggingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesclassifier method)": [[558, "sklearn.ensemble.ExtraTreesClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.extratreesregressor method)": [[559, "sklearn.ensemble.ExtraTreesRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestclassifier method)": [[565, "sklearn.ensemble.RandomForestClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.randomforestregressor method)": [[566, "sklearn.ensemble.RandomForestRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.set_score_request", false]], "set_score_request() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessclassifier method)": [[611, "sklearn.gaussian_process.GaussianProcessClassifier.set_score_request", false]], "set_score_request() (sklearn.gaussian_process.gaussianprocessregressor method)": [[612, "sklearn.gaussian_process.GaussianProcessRegressor.set_score_request", false]], "set_score_request() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_score_request", false]], "set_score_request() (sklearn.kernel_ridge.kernelridge method)": [[644, "sklearn.kernel_ridge.KernelRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ardregression method)": [[645, "sklearn.linear_model.ARDRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.bayesianridge method)": [[646, "sklearn.linear_model.BayesianRidge.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnet method)": [[647, "sklearn.linear_model.ElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.elasticnetcv method)": [[648, "sklearn.linear_model.ElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.gammaregressor method)": [[649, "sklearn.linear_model.GammaRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.huberregressor method)": [[650, "sklearn.linear_model.HuberRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.lars method)": [[651, "sklearn.linear_model.Lars.set_score_request", false]], "set_score_request() (sklearn.linear_model.larscv method)": [[652, "sklearn.linear_model.LarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lasso method)": [[653, "sklearn.linear_model.Lasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassocv method)": [[654, "sklearn.linear_model.LassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolars method)": [[655, "sklearn.linear_model.LassoLars.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarscv method)": [[656, "sklearn.linear_model.LassoLarsCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.lassolarsic method)": [[657, "sklearn.linear_model.LassoLarsIC.set_score_request", false]], "set_score_request() (sklearn.linear_model.linearregression method)": [[658, "sklearn.linear_model.LinearRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.set_score_request", false]], "set_score_request() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnet method)": [[661, "sklearn.linear_model.MultiTaskElasticNet.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitaskelasticnetcv method)": [[662, "sklearn.linear_model.MultiTaskElasticNetCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklasso method)": [[663, "sklearn.linear_model.MultiTaskLasso.set_score_request", false]], "set_score_request() (sklearn.linear_model.multitasklassocv method)": [[664, "sklearn.linear_model.MultiTaskLassoCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuit method)": [[665, "sklearn.linear_model.OrthogonalMatchingPursuit.set_score_request", false]], "set_score_request() (sklearn.linear_model.orthogonalmatchingpursuitcv method)": [[666, "sklearn.linear_model.OrthogonalMatchingPursuitCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.set_score_request", false]], "set_score_request() (sklearn.linear_model.poissonregressor method)": [[670, "sklearn.linear_model.PoissonRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.quantileregressor method)": [[671, "sklearn.linear_model.QuantileRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridge method)": [[673, "sklearn.linear_model.Ridge.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifier method)": [[675, "sklearn.linear_model.RidgeClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgeclassifiercv method)": [[676, "sklearn.linear_model.RidgeClassifierCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.ridgecv method)": [[674, "sklearn.linear_model.RidgeCV.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.set_score_request", false]], "set_score_request() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.theilsenregressor method)": [[680, "sklearn.linear_model.TheilSenRegressor.set_score_request", false]], "set_score_request() (sklearn.linear_model.tweedieregressor method)": [[681, "sklearn.linear_model.TweedieRegressor.set_score_request", false]], "set_score_request() (sklearn.model_selection.fixedthresholdclassifier method)": [[800, "sklearn.model_selection.FixedThresholdClassifier.set_score_request", false]], "set_score_request() (sklearn.model_selection.tunedthresholdclassifiercv method)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsoneclassifier method)": [[833, "sklearn.multiclass.OneVsOneClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.onevsrestclassifier method)": [[834, "sklearn.multiclass.OneVsRestClassifier.set_score_request", false]], "set_score_request() (sklearn.multiclass.outputcodeclassifier method)": [[835, "sklearn.multiclass.OutputCodeClassifier.set_score_request", false]], "set_score_request() (sklearn.multioutput.classifierchain method)": [[836, "sklearn.multioutput.ClassifierChain.set_score_request", false]], "set_score_request() (sklearn.multioutput.multioutputregressor method)": [[838, "sklearn.multioutput.MultiOutputRegressor.set_score_request", false]], "set_score_request() (sklearn.multioutput.regressorchain method)": [[839, "sklearn.multioutput.RegressorChain.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.bernoullinb method)": [[840, "sklearn.naive_bayes.BernoulliNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.categoricalnb method)": [[841, "sklearn.naive_bayes.CategoricalNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.complementnb method)": [[842, "sklearn.naive_bayes.ComplementNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.gaussiannb method)": [[843, "sklearn.naive_bayes.GaussianNB.set_score_request", false]], "set_score_request() (sklearn.naive_bayes.multinomialnb method)": [[844, "sklearn.naive_bayes.MultinomialNB.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsclassifier method)": [[847, "sklearn.neighbors.KNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.kneighborsregressor method)": [[848, "sklearn.neighbors.KNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neighbors.nearestcentroid method)": [[852, "sklearn.neighbors.NearestCentroid.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsclassifier method)": [[855, "sklearn.neighbors.RadiusNeighborsClassifier.set_score_request", false]], "set_score_request() (sklearn.neighbors.radiusneighborsregressor method)": [[856, "sklearn.neighbors.RadiusNeighborsRegressor.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpclassifier method)": [[862, "sklearn.neural_network.MLPClassifier.set_score_request", false]], "set_score_request() (sklearn.neural_network.mlpregressor method)": [[863, "sklearn.neural_network.MLPRegressor.set_score_request", false]], "set_score_request() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelpropagation method)": [[900, "sklearn.semi_supervised.LabelPropagation.set_score_request", false]], "set_score_request() (sklearn.semi_supervised.labelspreading method)": [[901, "sklearn.semi_supervised.LabelSpreading.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.set_score_request", false]], "set_score_request() (sklearn.svm.linearsvr method)": [[906, "sklearn.svm.LinearSVR.set_score_request", false]], "set_score_request() (sklearn.svm.nusvc method)": [[907, "sklearn.svm.NuSVC.set_score_request", false]], "set_score_request() (sklearn.svm.nusvr method)": [[908, "sklearn.svm.NuSVR.set_score_request", false]], "set_score_request() (sklearn.svm.svc method)": [[910, "sklearn.svm.SVC.set_score_request", false]], "set_score_request() (sklearn.svm.svr method)": [[911, "sklearn.svm.SVR.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeclassifier method)": [[913, "sklearn.tree.DecisionTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.decisiontreeregressor method)": [[914, "sklearn.tree.DecisionTreeRegressor.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeclassifier method)": [[915, "sklearn.tree.ExtraTreeClassifier.set_score_request", false]], "set_score_request() (sklearn.tree.extratreeregressor method)": [[916, "sklearn.tree.ExtraTreeRegressor.set_score_request", false]], "set_split_request() (sklearn.model_selection.groupkfold method)": [[802, "sklearn.model_selection.GroupKFold.set_split_request", false]], "set_split_request() (sklearn.model_selection.groupshufflesplit method)": [[803, "sklearn.model_selection.GroupShuffleSplit.set_split_request", false]], "set_split_request() (sklearn.model_selection.leaveonegroupout method)": [[808, "sklearn.model_selection.LeaveOneGroupOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.leavepgroupsout method)": [[810, "sklearn.model_selection.LeavePGroupsOut.set_split_request", false]], "set_split_request() (sklearn.model_selection.stratifiedgroupkfold method)": [[819, "sklearn.model_selection.StratifiedGroupKFold.set_split_request", false]], "set_transform_request() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.set_transform_request", false]], "set_transform_request() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.set_transform_request", false]], "set_transform_request() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.set_transform_request", false]], "set_transform_request() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.set_transform_request", false]], "set_transform_request() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.set_transform_request", false]], "set_transform_request() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.set_transform_request", false]], "setdefault() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.setdefault", false]], "sgdclassifier (class in sklearn.linear_model)": [[677, "sklearn.linear_model.SGDClassifier", false]], "sgdoneclasssvm (class in sklearn.linear_model)": [[678, "sklearn.linear_model.SGDOneClassSVM", false]], "sgdregressor (class in sklearn.linear_model)": [[679, "sklearn.linear_model.SGDRegressor", false]], "show_versions() (in module sklearn)": [[904, "sklearn.show_versions", false]], "shrunk_covariance() (in module sklearn.covariance)": [[481, "sklearn.covariance.shrunk_covariance", false]], "shrunkcovariance (class in sklearn.covariance)": [[476, "sklearn.covariance.ShrunkCovariance", false]], "shuffle() (in module sklearn.utils)": [[975, "sklearn.utils.shuffle", false]], "shufflesplit (class in sklearn.model_selection)": [[818, "sklearn.model_selection.ShuffleSplit", false]], "sigmoid_kernel() (in module sklearn.metrics.pairwise)": [[778, "sklearn.metrics.pairwise.sigmoid_kernel", false]], "silhouette_samples() (in module sklearn.metrics)": [[793, "sklearn.metrics.silhouette_samples", false]], "silhouette_score() (in module sklearn.metrics)": [[794, "sklearn.metrics.silhouette_score", false]], "simpleimputer (class in sklearn.impute)": [[631, "sklearn.impute.SimpleImputer", false]], "single_source_shortest_path_length() (in module sklearn.utils.graph)": [[955, "sklearn.utils.graph.single_source_shortest_path_length", false]], "skewedchi2sampler (class in sklearn.kernel_approximation)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler", false]], "sklearn": [[3, "module-sklearn", false]], "sklearn.base": [[4, "module-sklearn.base", false]], "sklearn.calibration": [[5, "module-sklearn.calibration", false]], "sklearn.cluster": [[6, "module-sklearn.cluster", false]], "sklearn.compose": [[7, "module-sklearn.compose", false]], "sklearn.covariance": [[8, "module-sklearn.covariance", false]], "sklearn.cross_decomposition": [[9, "module-sklearn.cross_decomposition", false]], "sklearn.datasets": [[10, "module-sklearn.datasets", false]], "sklearn.decomposition": [[11, "module-sklearn.decomposition", false]], "sklearn.discriminant_analysis": [[12, "module-sklearn.discriminant_analysis", false]], "sklearn.dummy": [[13, "module-sklearn.dummy", false]], "sklearn.ensemble": [[14, "module-sklearn.ensemble", false]], "sklearn.exceptions": [[15, "module-sklearn.exceptions", false]], "sklearn.experimental": [[16, "module-sklearn.experimental", false]], "sklearn.experimental.enable_halving_search_cv": [[580, "module-sklearn.experimental.enable_halving_search_cv", false]], "sklearn.experimental.enable_iterative_imputer": [[581, "module-sklearn.experimental.enable_iterative_imputer", false]], "sklearn.feature_extraction": [[17, "module-sklearn.feature_extraction", false]], "sklearn.feature_extraction.image": [[17, "module-sklearn.feature_extraction.image", false]], "sklearn.feature_extraction.text": [[17, "module-sklearn.feature_extraction.text", false]], "sklearn.feature_selection": [[18, "module-sklearn.feature_selection", false]], "sklearn.gaussian_process": [[19, "module-sklearn.gaussian_process", false]], "sklearn.gaussian_process.kernels": [[19, "module-sklearn.gaussian_process.kernels", false]], "sklearn.impute": [[20, "module-sklearn.impute", false]], "sklearn.inspection": [[21, "module-sklearn.inspection", false]], "sklearn.isotonic": [[22, "module-sklearn.isotonic", false]], "sklearn.kernel_approximation": [[23, "module-sklearn.kernel_approximation", false]], "sklearn.kernel_ridge": [[24, "module-sklearn.kernel_ridge", false]], "sklearn.linear_model": [[25, "module-sklearn.linear_model", false]], "sklearn.manifold": [[26, "module-sklearn.manifold", false]], "sklearn.metrics": [[27, "module-sklearn.metrics", false]], "sklearn.metrics.cluster": [[27, "module-sklearn.metrics.cluster", false]], "sklearn.metrics.pairwise": [[27, "module-sklearn.metrics.pairwise", false]], "sklearn.mixture": [[28, "module-sklearn.mixture", false]], "sklearn.model_selection": [[29, "module-sklearn.model_selection", false]], "sklearn.multiclass": [[30, "module-sklearn.multiclass", false]], "sklearn.multioutput": [[31, "module-sklearn.multioutput", false]], "sklearn.naive_bayes": [[32, "module-sklearn.naive_bayes", false]], "sklearn.neighbors": [[33, "module-sklearn.neighbors", false]], "sklearn.neural_network": [[34, "module-sklearn.neural_network", false]], "sklearn.pipeline": [[35, "module-sklearn.pipeline", false]], "sklearn.preprocessing": [[36, "module-sklearn.preprocessing", false]], "sklearn.random_projection": [[37, "module-sklearn.random_projection", false]], "sklearn.semi_supervised": [[38, "module-sklearn.semi_supervised", false]], "sklearn.svm": [[39, "module-sklearn.svm", false]], "sklearn.tree": [[40, "module-sklearn.tree", false]], "sklearn.utils": [[41, "module-sklearn.utils", false]], "sklearn.utils.arrayfuncs": [[41, "module-sklearn.utils.arrayfuncs", false]], "sklearn.utils.class_weight": [[41, "module-sklearn.utils.class_weight", false]], "sklearn.utils.discovery": [[41, "module-sklearn.utils.discovery", false]], "sklearn.utils.estimator_checks": [[41, "module-sklearn.utils.estimator_checks", false]], "sklearn.utils.extmath": [[41, "module-sklearn.utils.extmath", false]], "sklearn.utils.graph": [[41, "module-sklearn.utils.graph", false]], "sklearn.utils.metadata_routing": [[41, "module-sklearn.utils.metadata_routing", false]], "sklearn.utils.metaestimators": [[41, "module-sklearn.utils.metaestimators", false]], "sklearn.utils.multiclass": [[41, "module-sklearn.utils.multiclass", false]], "sklearn.utils.parallel": [[41, "module-sklearn.utils.parallel", false]], "sklearn.utils.random": [[41, "module-sklearn.utils.random", false]], "sklearn.utils.sparsefuncs": [[41, "module-sklearn.utils.sparsefuncs", false]], "sklearn.utils.sparsefuncs_fast": [[41, "module-sklearn.utils.sparsefuncs_fast", false]], "sklearn.utils.validation": [[41, "module-sklearn.utils.validation", false]], "slep": [[390, "term-SLEP", true]], "sleps": [[390, "term-SLEPs", true]], "smacof() (in module sklearn.manifold)": [[695, "sklearn.manifold.smacof", false]], "sort_graph_by_row_values() (in module sklearn.neighbors)": [[860, "sklearn.neighbors.sort_graph_by_row_values", false]], "sparse graph": [[390, "term-sparse-graph", true]], "sparse matrix": [[390, "term-sparse-matrix", true]], "sparse_coef_ (sklearn.linear_model.elasticnet property)": [[647, "sklearn.linear_model.ElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.lasso property)": [[653, "sklearn.linear_model.Lasso.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitaskelasticnet property)": [[661, "sklearn.linear_model.MultiTaskElasticNet.sparse_coef_", false]], "sparse_coef_ (sklearn.linear_model.multitasklasso property)": [[663, "sklearn.linear_model.MultiTaskLasso.sparse_coef_", false]], "sparse_encode() (in module sklearn.decomposition)": [[549, "sklearn.decomposition.sparse_encode", false]], "sparsecoder (class in sklearn.decomposition)": [[543, "sklearn.decomposition.SparseCoder", false]], "sparsepca (class in sklearn.decomposition)": [[544, "sklearn.decomposition.SparsePCA", false]], "sparserandomprojection (class in sklearn.random_projection)": [[898, "sklearn.random_projection.SparseRandomProjection", false]], "sparsify() (sklearn.linear_model.logisticregression method)": [[659, "sklearn.linear_model.LogisticRegression.sparsify", false]], "sparsify() (sklearn.linear_model.logisticregressioncv method)": [[660, "sklearn.linear_model.LogisticRegressionCV.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveclassifier method)": [[667, "sklearn.linear_model.PassiveAggressiveClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.passiveaggressiveregressor method)": [[668, "sklearn.linear_model.PassiveAggressiveRegressor.sparsify", false]], "sparsify() (sklearn.linear_model.perceptron method)": [[669, "sklearn.linear_model.Perceptron.sparsify", false]], "sparsify() (sklearn.linear_model.sgdclassifier method)": [[677, "sklearn.linear_model.SGDClassifier.sparsify", false]], "sparsify() (sklearn.linear_model.sgdoneclasssvm method)": [[678, "sklearn.linear_model.SGDOneClassSVM.sparsify", false]], "sparsify() (sklearn.linear_model.sgdregressor method)": [[679, "sklearn.linear_model.SGDRegressor.sparsify", false]], "sparsify() (sklearn.svm.linearsvc method)": [[905, "sklearn.svm.LinearSVC.sparsify", false]], "spectral_clustering() (in module sklearn.cluster)": [[462, "sklearn.cluster.spectral_clustering", false]], "spectral_embedding() (in module sklearn.manifold)": [[696, "sklearn.manifold.spectral_embedding", false]], "spectralbiclustering (class in sklearn.cluster)": [[451, "sklearn.cluster.SpectralBiclustering", false]], "spectralclustering (class in sklearn.cluster)": [[452, "sklearn.cluster.SpectralClustering", false]], "spectralcoclustering (class in sklearn.cluster)": [[453, "sklearn.cluster.SpectralCoclustering", false]], "spectralembedding (class in sklearn.manifold)": [[692, "sklearn.manifold.SpectralEmbedding", false]], "splinetransformer (class in sklearn.preprocessing)": [[884, "sklearn.preprocessing.SplineTransformer", false]], "split": [[390, "term-split", true]], "split() (sklearn.model_selection.groupkfold method)": [[802, "sklearn.model_selection.GroupKFold.split", false]], "split() (sklearn.model_selection.groupshufflesplit method)": [[803, "sklearn.model_selection.GroupShuffleSplit.split", false]], "split() (sklearn.model_selection.kfold method)": [[806, "sklearn.model_selection.KFold.split", false]], "split() (sklearn.model_selection.leaveonegroupout method)": [[808, "sklearn.model_selection.LeaveOneGroupOut.split", false]], "split() (sklearn.model_selection.leaveoneout method)": [[809, "sklearn.model_selection.LeaveOneOut.split", false]], "split() (sklearn.model_selection.leavepgroupsout method)": [[810, "sklearn.model_selection.LeavePGroupsOut.split", false]], "split() (sklearn.model_selection.leavepout method)": [[811, "sklearn.model_selection.LeavePOut.split", false]], "split() (sklearn.model_selection.predefinedsplit method)": [[814, "sklearn.model_selection.PredefinedSplit.split", false]], "split() (sklearn.model_selection.repeatedkfold method)": [[816, "sklearn.model_selection.RepeatedKFold.split", false]], "split() (sklearn.model_selection.repeatedstratifiedkfold method)": [[817, "sklearn.model_selection.RepeatedStratifiedKFold.split", false]], "split() (sklearn.model_selection.shufflesplit method)": [[818, "sklearn.model_selection.ShuffleSplit.split", false]], "split() (sklearn.model_selection.stratifiedgroupkfold method)": [[819, "sklearn.model_selection.StratifiedGroupKFold.split", false]], "split() (sklearn.model_selection.stratifiedkfold method)": [[820, "sklearn.model_selection.StratifiedKFold.split", false]], "split() (sklearn.model_selection.stratifiedshufflesplit method)": [[821, "sklearn.model_selection.StratifiedShuffleSplit.split", false]], "split() (sklearn.model_selection.timeseriessplit method)": [[822, "sklearn.model_selection.TimeSeriesSplit.split", false]], "stackingclassifier (class in sklearn.ensemble)": [[568, "sklearn.ensemble.StackingClassifier", false]], "stackingregressor (class in sklearn.ensemble)": [[569, "sklearn.ensemble.StackingRegressor", false]], "staged_decision_function() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_decision_function", false]], "staged_decision_function() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_decision_function", false]], "staged_predict() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.gradientboostingregressor method)": [[561, "sklearn.ensemble.GradientBoostingRegressor.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict", false]], "staged_predict() (sklearn.ensemble.histgradientboostingregressor method)": [[563, "sklearn.ensemble.HistGradientBoostingRegressor.staged_predict", false]], "staged_predict_proba() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.gradientboostingclassifier method)": [[560, "sklearn.ensemble.GradientBoostingClassifier.staged_predict_proba", false]], "staged_predict_proba() (sklearn.ensemble.histgradientboostingclassifier method)": [[562, "sklearn.ensemble.HistGradientBoostingClassifier.staged_predict_proba", false]], "staged_score() (sklearn.ensemble.adaboostclassifier method)": [[554, "sklearn.ensemble.AdaBoostClassifier.staged_score", false]], "staged_score() (sklearn.ensemble.adaboostregressor method)": [[555, "sklearn.ensemble.AdaBoostRegressor.staged_score", false]], "standardscaler (class in sklearn.preprocessing)": [[885, "sklearn.preprocessing.StandardScaler", false]], "stateless": [[390, "term-stateless", true]], "stratifiedgroupkfold (class in sklearn.model_selection)": [[819, "sklearn.model_selection.StratifiedGroupKFold", false]], "stratifiedkfold (class in sklearn.model_selection)": [[820, "sklearn.model_selection.StratifiedKFold", false]], "stratifiedshufflesplit (class in sklearn.model_selection)": [[821, "sklearn.model_selection.StratifiedShuffleSplit", false]], "sum (class in sklearn.gaussian_process.kernels)": [[625, "sklearn.gaussian_process.kernels.Sum", false]], "supervised": [[390, "term-supervised", true]], "supervised learning": [[390, "term-supervised-learning", true]], "svc (class in sklearn.svm)": [[910, "sklearn.svm.SVC", false]], "svr (class in sklearn.svm)": [[911, "sklearn.svm.SVR", false]], "tags (class in sklearn.utils)": [[924, "sklearn.utils.Tags", false]], "target": [[390, "term-target", true]], "targetencoder (class in sklearn.preprocessing)": [[886, "sklearn.preprocessing.TargetEncoder", false]], "targets": [[390, "term-targets", true]], "targettags (class in sklearn.utils)": [[925, "sklearn.utils.TargetTags", false]], "tfidftransformer (class in sklearn.feature_extraction.text)": [[591, "sklearn.feature_extraction.text.TfidfTransformer", false]], "tfidfvectorizer (class in sklearn.feature_extraction.text)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer", false]], "theilsenregressor (class in sklearn.linear_model)": [[680, "sklearn.linear_model.TheilSenRegressor", false]], "theta (sklearn.gaussian_process.kernels.compoundkernel property)": [[613, "sklearn.gaussian_process.kernels.CompoundKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.constantkernel property)": [[614, "sklearn.gaussian_process.kernels.ConstantKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.dotproduct property)": [[615, "sklearn.gaussian_process.kernels.DotProduct.theta", false]], "theta (sklearn.gaussian_process.kernels.exponentiation property)": [[617, "sklearn.gaussian_process.kernels.Exponentiation.theta", false]], "theta (sklearn.gaussian_process.kernels.expsinesquared property)": [[616, "sklearn.gaussian_process.kernels.ExpSineSquared.theta", false]], "theta (sklearn.gaussian_process.kernels.kernel property)": [[619, "sklearn.gaussian_process.kernels.Kernel.theta", false]], "theta (sklearn.gaussian_process.kernels.matern property)": [[620, "sklearn.gaussian_process.kernels.Matern.theta", false]], "theta (sklearn.gaussian_process.kernels.pairwisekernel property)": [[621, "sklearn.gaussian_process.kernels.PairwiseKernel.theta", false]], "theta (sklearn.gaussian_process.kernels.product property)": [[622, "sklearn.gaussian_process.kernels.Product.theta", false]], "theta (sklearn.gaussian_process.kernels.rationalquadratic property)": [[624, "sklearn.gaussian_process.kernels.RationalQuadratic.theta", false]], "theta (sklearn.gaussian_process.kernels.rbf property)": [[623, "sklearn.gaussian_process.kernels.RBF.theta", false]], "theta (sklearn.gaussian_process.kernels.sum property)": [[625, "sklearn.gaussian_process.kernels.Sum.theta", false]], "theta (sklearn.gaussian_process.kernels.whitekernel property)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel.theta", false]], "threshold_ (sklearn.feature_selection.selectfrommodel property)": [[598, "sklearn.feature_selection.SelectFromModel.threshold_", false]], "timeseriessplit (class in sklearn.model_selection)": [[822, "sklearn.model_selection.TimeSeriesSplit", false]], "top_k_accuracy_score() (in module sklearn.metrics)": [[795, "sklearn.metrics.top_k_accuracy_score", false]], "train_test_split() (in module sklearn.model_selection)": [[831, "sklearn.model_selection.train_test_split", false]], "transduction": [[390, "term-transduction", true]], "transductive": [[390, "term-transductive", true]], "transform": [[390, "term-transform", true]], "transform() (sklearn.cluster.birch method)": [[442, "sklearn.cluster.Birch.transform", false]], "transform() (sklearn.cluster.bisectingkmeans method)": [[443, "sklearn.cluster.BisectingKMeans.transform", false]], "transform() (sklearn.cluster.featureagglomeration method)": [[445, "sklearn.cluster.FeatureAgglomeration.transform", false]], "transform() (sklearn.cluster.kmeans method)": [[447, "sklearn.cluster.KMeans.transform", false]], "transform() (sklearn.cluster.minibatchkmeans method)": [[449, "sklearn.cluster.MiniBatchKMeans.transform", false]], "transform() (sklearn.compose.columntransformer method)": [[464, "sklearn.compose.ColumnTransformer.transform", false]], "transform() (sklearn.cross_decomposition.cca method)": [[482, "sklearn.cross_decomposition.CCA.transform", false]], "transform() (sklearn.cross_decomposition.plscanonical method)": [[483, "sklearn.cross_decomposition.PLSCanonical.transform", false]], "transform() (sklearn.cross_decomposition.plsregression method)": [[484, "sklearn.cross_decomposition.PLSRegression.transform", false]], "transform() (sklearn.cross_decomposition.plssvd method)": [[485, "sklearn.cross_decomposition.PLSSVD.transform", false]], "transform() (sklearn.decomposition.dictionarylearning method)": [[532, "sklearn.decomposition.DictionaryLearning.transform", false]], "transform() (sklearn.decomposition.factoranalysis method)": [[533, "sklearn.decomposition.FactorAnalysis.transform", false]], "transform() (sklearn.decomposition.fastica method)": [[534, "sklearn.decomposition.FastICA.transform", false]], "transform() (sklearn.decomposition.incrementalpca method)": [[535, "sklearn.decomposition.IncrementalPCA.transform", false]], "transform() (sklearn.decomposition.kernelpca method)": [[536, "sklearn.decomposition.KernelPCA.transform", false]], "transform() (sklearn.decomposition.latentdirichletallocation method)": [[537, "sklearn.decomposition.LatentDirichletAllocation.transform", false]], "transform() (sklearn.decomposition.minibatchdictionarylearning method)": [[538, "sklearn.decomposition.MiniBatchDictionaryLearning.transform", false]], "transform() (sklearn.decomposition.minibatchnmf method)": [[539, "sklearn.decomposition.MiniBatchNMF.transform", false]], "transform() (sklearn.decomposition.minibatchsparsepca method)": [[540, "sklearn.decomposition.MiniBatchSparsePCA.transform", false]], "transform() (sklearn.decomposition.nmf method)": [[541, "sklearn.decomposition.NMF.transform", false]], "transform() (sklearn.decomposition.pca method)": [[542, "sklearn.decomposition.PCA.transform", false]], "transform() (sklearn.decomposition.sparsecoder method)": [[543, "sklearn.decomposition.SparseCoder.transform", false]], "transform() (sklearn.decomposition.sparsepca method)": [[544, "sklearn.decomposition.SparsePCA.transform", false]], "transform() (sklearn.decomposition.truncatedsvd method)": [[545, "sklearn.decomposition.TruncatedSVD.transform", false]], "transform() (sklearn.discriminant_analysis.lineardiscriminantanalysis method)": [[550, "sklearn.discriminant_analysis.LinearDiscriminantAnalysis.transform", false]], "transform() (sklearn.ensemble.randomtreesembedding method)": [[567, "sklearn.ensemble.RandomTreesEmbedding.transform", false]], "transform() (sklearn.ensemble.stackingclassifier method)": [[568, "sklearn.ensemble.StackingClassifier.transform", false]], "transform() (sklearn.ensemble.stackingregressor method)": [[569, "sklearn.ensemble.StackingRegressor.transform", false]], "transform() (sklearn.ensemble.votingclassifier method)": [[570, "sklearn.ensemble.VotingClassifier.transform", false]], "transform() (sklearn.ensemble.votingregressor method)": [[571, "sklearn.ensemble.VotingRegressor.transform", false]], "transform() (sklearn.feature_extraction.dictvectorizer method)": [[582, "sklearn.feature_extraction.DictVectorizer.transform", false]], "transform() (sklearn.feature_extraction.featurehasher method)": [[583, "sklearn.feature_extraction.FeatureHasher.transform", false]], "transform() (sklearn.feature_extraction.image.patchextractor method)": [[584, "sklearn.feature_extraction.image.PatchExtractor.transform", false]], "transform() (sklearn.feature_extraction.text.countvectorizer method)": [[589, "sklearn.feature_extraction.text.CountVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.hashingvectorizer method)": [[590, "sklearn.feature_extraction.text.HashingVectorizer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidftransformer method)": [[591, "sklearn.feature_extraction.text.TfidfTransformer.transform", false]], "transform() (sklearn.feature_extraction.text.tfidfvectorizer method)": [[592, "sklearn.feature_extraction.text.TfidfVectorizer.transform", false]], "transform() (sklearn.feature_selection.genericunivariateselect method)": [[593, "sklearn.feature_selection.GenericUnivariateSelect.transform", false]], "transform() (sklearn.feature_selection.rfe method)": [[594, "sklearn.feature_selection.RFE.transform", false]], "transform() (sklearn.feature_selection.rfecv method)": [[595, "sklearn.feature_selection.RFECV.transform", false]], "transform() (sklearn.feature_selection.selectfdr method)": [[596, "sklearn.feature_selection.SelectFdr.transform", false]], "transform() (sklearn.feature_selection.selectfpr method)": [[597, "sklearn.feature_selection.SelectFpr.transform", false]], "transform() (sklearn.feature_selection.selectfrommodel method)": [[598, "sklearn.feature_selection.SelectFromModel.transform", false]], "transform() (sklearn.feature_selection.selectfwe method)": [[599, "sklearn.feature_selection.SelectFwe.transform", false]], "transform() (sklearn.feature_selection.selectkbest method)": [[600, "sklearn.feature_selection.SelectKBest.transform", false]], "transform() (sklearn.feature_selection.selectormixin method)": [[602, "sklearn.feature_selection.SelectorMixin.transform", false]], "transform() (sklearn.feature_selection.selectpercentile method)": [[601, "sklearn.feature_selection.SelectPercentile.transform", false]], "transform() (sklearn.feature_selection.sequentialfeatureselector method)": [[603, "sklearn.feature_selection.SequentialFeatureSelector.transform", false]], "transform() (sklearn.feature_selection.variancethreshold method)": [[604, "sklearn.feature_selection.VarianceThreshold.transform", false]], "transform() (sklearn.impute.iterativeimputer method)": [[628, "sklearn.impute.IterativeImputer.transform", false]], "transform() (sklearn.impute.knnimputer method)": [[629, "sklearn.impute.KNNImputer.transform", false]], "transform() (sklearn.impute.missingindicator method)": [[630, "sklearn.impute.MissingIndicator.transform", false]], "transform() (sklearn.impute.simpleimputer method)": [[631, "sklearn.impute.SimpleImputer.transform", false]], "transform() (sklearn.isotonic.isotonicregression method)": [[636, "sklearn.isotonic.IsotonicRegression.transform", false]], "transform() (sklearn.kernel_approximation.additivechi2sampler method)": [[639, "sklearn.kernel_approximation.AdditiveChi2Sampler.transform", false]], "transform() (sklearn.kernel_approximation.nystroem method)": [[640, "sklearn.kernel_approximation.Nystroem.transform", false]], "transform() (sklearn.kernel_approximation.polynomialcountsketch method)": [[641, "sklearn.kernel_approximation.PolynomialCountSketch.transform", false]], "transform() (sklearn.kernel_approximation.rbfsampler method)": [[642, "sklearn.kernel_approximation.RBFSampler.transform", false]], "transform() (sklearn.kernel_approximation.skewedchi2sampler method)": [[643, "sklearn.kernel_approximation.SkewedChi2Sampler.transform", false]], "transform() (sklearn.manifold.isomap method)": [[689, "sklearn.manifold.Isomap.transform", false]], "transform() (sklearn.manifold.locallylinearembedding method)": [[690, "sklearn.manifold.LocallyLinearEmbedding.transform", false]], "transform() (sklearn.model_selection.gridsearchcv method)": [[801, "sklearn.model_selection.GridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvinggridsearchcv method)": [[804, "sklearn.model_selection.HalvingGridSearchCV.transform", false]], "transform() (sklearn.model_selection.halvingrandomsearchcv method)": [[805, "sklearn.model_selection.HalvingRandomSearchCV.transform", false]], "transform() (sklearn.model_selection.randomizedsearchcv method)": [[815, "sklearn.model_selection.RandomizedSearchCV.transform", false]], "transform() (sklearn.neighbors.kneighborstransformer method)": [[849, "sklearn.neighbors.KNeighborsTransformer.transform", false]], "transform() (sklearn.neighbors.neighborhoodcomponentsanalysis method)": [[854, "sklearn.neighbors.NeighborhoodComponentsAnalysis.transform", false]], "transform() (sklearn.neighbors.radiusneighborstransformer method)": [[857, "sklearn.neighbors.RadiusNeighborsTransformer.transform", false]], "transform() (sklearn.neural_network.bernoullirbm method)": [[861, "sklearn.neural_network.BernoulliRBM.transform", false]], "transform() (sklearn.pipeline.featureunion method)": [[864, "sklearn.pipeline.FeatureUnion.transform", false]], "transform() (sklearn.pipeline.pipeline method)": [[865, "sklearn.pipeline.Pipeline.transform", false]], "transform() (sklearn.preprocessing.binarizer method)": [[868, "sklearn.preprocessing.Binarizer.transform", false]], "transform() (sklearn.preprocessing.functiontransformer method)": [[869, "sklearn.preprocessing.FunctionTransformer.transform", false]], "transform() (sklearn.preprocessing.kbinsdiscretizer method)": [[870, "sklearn.preprocessing.KBinsDiscretizer.transform", false]], "transform() (sklearn.preprocessing.kernelcenterer method)": [[871, "sklearn.preprocessing.KernelCenterer.transform", false]], "transform() (sklearn.preprocessing.labelbinarizer method)": [[872, "sklearn.preprocessing.LabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.labelencoder method)": [[873, "sklearn.preprocessing.LabelEncoder.transform", false]], "transform() (sklearn.preprocessing.maxabsscaler method)": [[874, "sklearn.preprocessing.MaxAbsScaler.transform", false]], "transform() (sklearn.preprocessing.minmaxscaler method)": [[875, "sklearn.preprocessing.MinMaxScaler.transform", false]], "transform() (sklearn.preprocessing.multilabelbinarizer method)": [[876, "sklearn.preprocessing.MultiLabelBinarizer.transform", false]], "transform() (sklearn.preprocessing.normalizer method)": [[877, "sklearn.preprocessing.Normalizer.transform", false]], "transform() (sklearn.preprocessing.onehotencoder method)": [[878, "sklearn.preprocessing.OneHotEncoder.transform", false]], "transform() (sklearn.preprocessing.ordinalencoder method)": [[879, "sklearn.preprocessing.OrdinalEncoder.transform", false]], "transform() (sklearn.preprocessing.polynomialfeatures method)": [[880, "sklearn.preprocessing.PolynomialFeatures.transform", false]], "transform() (sklearn.preprocessing.powertransformer method)": [[881, "sklearn.preprocessing.PowerTransformer.transform", false]], "transform() (sklearn.preprocessing.quantiletransformer method)": [[882, "sklearn.preprocessing.QuantileTransformer.transform", false]], "transform() (sklearn.preprocessing.robustscaler method)": [[883, "sklearn.preprocessing.RobustScaler.transform", false]], "transform() (sklearn.preprocessing.splinetransformer method)": [[884, "sklearn.preprocessing.SplineTransformer.transform", false]], "transform() (sklearn.preprocessing.standardscaler method)": [[885, "sklearn.preprocessing.StandardScaler.transform", false]], "transform() (sklearn.preprocessing.targetencoder method)": [[886, "sklearn.preprocessing.TargetEncoder.transform", false]], "transform() (sklearn.random_projection.gaussianrandomprojection method)": [[897, "sklearn.random_projection.GaussianRandomProjection.transform", false]], "transform() (sklearn.random_projection.sparserandomprojection method)": [[898, "sklearn.random_projection.SparseRandomProjection.transform", false]], "transformedtargetregressor (class in sklearn.compose)": [[465, "sklearn.compose.TransformedTargetRegressor", false]], "transformer": [[390, "term-transformer", true]], "transformermixin (class in sklearn.base)": [[432, "sklearn.base.TransformerMixin", false]], "transformers": [[390, "term-transformers", true]], "transformertags (class in sklearn.utils)": [[926, "sklearn.utils.TransformerTags", false]], "truncatedsvd (class in sklearn.decomposition)": [[545, "sklearn.decomposition.TruncatedSVD", false]], "trustworthiness() (in module sklearn.manifold)": [[697, "sklearn.manifold.trustworthiness", false]], "tsne (class in sklearn.manifold)": [[693, "sklearn.manifold.TSNE", false]], "tunedthresholdclassifiercv (class in sklearn.model_selection)": [[823, "sklearn.model_selection.TunedThresholdClassifierCV", false]], "tweedieregressor (class in sklearn.linear_model)": [[681, "sklearn.linear_model.TweedieRegressor", false]], "two_point_correlation() (sklearn.neighbors.balltree method)": [[845, "sklearn.neighbors.BallTree.two_point_correlation", false]], "two_point_correlation() (sklearn.neighbors.kdtree method)": [[846, "sklearn.neighbors.KDTree.two_point_correlation", false]], "type_of_target() (in module sklearn.utils.multiclass)": [[964, "sklearn.utils.multiclass.type_of_target", false]], "undefinedmetricwarning": [[579, "sklearn.exceptions.UndefinedMetricWarning", false]], "unique_labels() (in module sklearn.utils.multiclass)": [[965, "sklearn.utils.multiclass.unique_labels", false]], "unlabeled": [[390, "term-unlabeled", true]], "unlabeled data": [[390, "term-unlabeled-data", true]], "unsupervised": [[390, "term-unsupervised", true]], "unsupervised learning": [[390, "term-unsupervised-learning", true]], "update() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.update", false]], "v_measure_score() (in module sklearn.metrics)": [[796, "sklearn.metrics.v_measure_score", false]], "validate_data() (in module sklearn.utils.validation)": [[990, "sklearn.utils.validation.validate_data", false]], "validate_metadata() (sklearn.utils.metadata_routing.metadatarouter method)": [[958, "sklearn.utils.metadata_routing.MetadataRouter.validate_metadata", false]], "validation_curve() (in module sklearn.model_selection)": [[832, "sklearn.model_selection.validation_curve", false]], "validationcurvedisplay (class in sklearn.model_selection)": [[824, "sklearn.model_selection.ValidationCurveDisplay", false]], "value_type (sklearn.gaussian_process.kernels.hyperparameter attribute)": [[618, "sklearn.gaussian_process.kernels.Hyperparameter.value_type", false]], "values() (sklearn.utils.bunch method)": [[920, "sklearn.utils.Bunch.values", false]], "variancethreshold (class in sklearn.feature_selection)": [[604, "sklearn.feature_selection.VarianceThreshold", false]], "vectorizer": [[390, "term-vectorizer", true]], "vectorizers": [[390, "term-vectorizers", true]], "verbose": [[390, "term-verbose", true]], "votingclassifier (class in sklearn.ensemble)": [[570, "sklearn.ensemble.VotingClassifier", false]], "votingregressor (class in sklearn.ensemble)": [[571, "sklearn.ensemble.VotingRegressor", false]], "ward_tree() (in module sklearn.cluster)": [[463, "sklearn.cluster.ward_tree", false]], "warm_start": [[390, "term-warm_start", true]], "weighted_mode() (in module sklearn.utils.extmath)": [[951, "sklearn.utils.extmath.weighted_mode", false]], "whitekernel (class in sklearn.gaussian_process.kernels)": [[626, "sklearn.gaussian_process.kernels.WhiteKernel", false]], "x": [[390, "term-X", true]], "xt": [[390, "term-Xt", true]], "y": [[390, "term-Y", true], [390, "term-y", true]], "zero_one_loss() (in module sklearn.metrics)": [[797, "sklearn.metrics.zero_one_loss", false]]}, "objects": {"": [[3, 0, 0, "-", "sklearn"]], "sklearn": [[4, 0, 0, "-", "base"], [5, 0, 0, "-", "calibration"], [6, 0, 0, "-", "cluster"], [7, 0, 0, "-", "compose"], [468, 4, 1, "", "config_context"], [8, 0, 0, "-", "covariance"], [9, 0, 0, "-", "cross_decomposition"], [10, 0, 0, "-", "datasets"], [11, 0, 0, "-", "decomposition"], [12, 0, 0, "-", "discriminant_analysis"], [13, 0, 0, "-", "dummy"], [14, 0, 0, "-", "ensemble"], [15, 0, 0, "-", "exceptions"], [16, 0, 0, "-", "experimental"], [17, 0, 0, "-", "feature_extraction"], [18, 0, 0, "-", "feature_selection"], [19, 0, 0, "-", "gaussian_process"], [627, 4, 1, "", "get_config"], [20, 0, 0, "-", "impute"], [21, 0, 0, "-", "inspection"], [22, 0, 0, "-", "isotonic"], [23, 0, 0, "-", "kernel_approximation"], [24, 0, 0, "-", "kernel_ridge"], [25, 0, 0, "-", "linear_model"], [26, 0, 0, "-", "manifold"], [27, 0, 0, "-", "metrics"], [28, 0, 0, "-", "mixture"], [29, 0, 0, "-", "model_selection"], [30, 0, 0, "-", "multiclass"], [31, 0, 0, "-", "multioutput"], [32, 0, 0, "-", "naive_bayes"], [33, 0, 0, "-", "neighbors"], [34, 0, 0, "-", "neural_network"], [35, 0, 0, "-", "pipeline"], [36, 0, 0, "-", "preprocessing"], [37, 0, 0, "-", "random_projection"], [38, 0, 0, "-", "semi_supervised"], [903, 4, 1, "", "set_config"], [904, 4, 1, "", "show_versions"], [39, 0, 0, "-", "svm"], [40, 0, 0, "-", "tree"], [41, 0, 0, "-", "utils"]], "sklearn.base": [[422, 1, 1, "", "BaseEstimator"], [423, 1, 1, "", "BiclusterMixin"], [424, 1, 1, "", "ClassNamePrefixFeaturesOutMixin"], [425, 1, 1, "", "ClassifierMixin"], [426, 1, 1, "", "ClusterMixin"], [427, 1, 1, "", "DensityMixin"], [428, 1, 1, "", "MetaEstimatorMixin"], [429, 1, 1, "", "OneToOneFeatureMixin"], [430, 1, 1, "", "OutlierMixin"], [431, 1, 1, "", "RegressorMixin"], [432, 1, 1, "", "TransformerMixin"], [433, 4, 1, "", "clone"], [434, 4, 1, "", "is_classifier"], [435, 4, 1, "", "is_clusterer"], [436, 4, 1, "", "is_regressor"]], "sklearn.base.BaseEstimator": [[422, 2, 1, "", "get_metadata_routing"], [422, 2, 1, "", "get_params"], [422, 2, 1, "", "set_params"]], "sklearn.base.BiclusterMixin": [[423, 3, 1, "", "biclusters_"], [423, 2, 1, "", "get_indices"], [423, 2, 1, "", "get_shape"], [423, 2, 1, "", "get_submatrix"]], "sklearn.base.ClassNamePrefixFeaturesOutMixin": [[424, 2, 1, "", "get_feature_names_out"]], "sklearn.base.ClassifierMixin": [[425, 2, 1, "", "score"]], "sklearn.base.ClusterMixin": [[426, 2, 1, "", "fit_predict"]], "sklearn.base.DensityMixin": [[427, 2, 1, "", "score"]], "sklearn.base.OneToOneFeatureMixin": [[429, 2, 1, "", "get_feature_names_out"]], "sklearn.base.OutlierMixin": [[430, 2, 1, "", "fit_predict"]], "sklearn.base.RegressorMixin": [[431, 2, 1, "", "score"]], "sklearn.base.TransformerMixin": [[432, 2, 1, "", "fit_transform"], [432, 2, 1, "", "set_output"]], "sklearn.calibration": [[437, 1, 1, "", "CalibratedClassifierCV"], [438, 1, 1, "", "CalibrationDisplay"], [439, 4, 1, "", "calibration_curve"]], "sklearn.calibration.CalibratedClassifierCV": [[437, 2, 1, "", "fit"], [437, 2, 1, "", "get_metadata_routing"], [437, 2, 1, "", "get_params"], [437, 2, 1, "", "predict"], [437, 2, 1, "", "predict_proba"], [437, 2, 1, "", "score"], [437, 2, 1, "", "set_fit_request"], [437, 2, 1, "", "set_params"], [437, 2, 1, "", "set_score_request"]], "sklearn.calibration.CalibrationDisplay": [[438, 2, 1, "", "from_estimator"], [438, 2, 1, "", "from_predictions"], [438, 2, 1, "", "plot"]], "sklearn.cluster": [[440, 1, 1, "", "AffinityPropagation"], [441, 1, 1, "", "AgglomerativeClustering"], [442, 1, 1, "", "Birch"], [443, 1, 1, "", "BisectingKMeans"], [444, 1, 1, "", "DBSCAN"], [445, 1, 1, "", "FeatureAgglomeration"], [446, 1, 1, "", "HDBSCAN"], [447, 1, 1, "", "KMeans"], [448, 1, 1, "", "MeanShift"], [449, 1, 1, "", "MiniBatchKMeans"], [450, 1, 1, "", "OPTICS"], [451, 1, 1, "", "SpectralBiclustering"], [452, 1, 1, "", "SpectralClustering"], [453, 1, 1, "", "SpectralCoclustering"], [454, 4, 1, "", "affinity_propagation"], [455, 4, 1, "", "cluster_optics_dbscan"], [456, 4, 1, "", "cluster_optics_xi"], [457, 4, 1, "", "compute_optics_graph"], [419, 4, 1, "", "dbscan"], [458, 4, 1, "", "estimate_bandwidth"], [459, 4, 1, "", "k_means"], [460, 4, 1, "", "kmeans_plusplus"], [461, 4, 1, "", "mean_shift"], [462, 4, 1, "", "spectral_clustering"], [463, 4, 1, "", "ward_tree"]], "sklearn.cluster.AffinityPropagation": [[440, 2, 1, "", "fit"], [440, 2, 1, "", "fit_predict"], [440, 2, 1, "", "get_metadata_routing"], [440, 2, 1, "", "get_params"], [440, 2, 1, "", "predict"], [440, 2, 1, "", "set_params"]], "sklearn.cluster.AgglomerativeClustering": [[441, 2, 1, "", "fit"], [441, 2, 1, "", "fit_predict"], [441, 2, 1, "", "get_metadata_routing"], [441, 2, 1, "", "get_params"], [441, 2, 1, "", "set_params"]], "sklearn.cluster.Birch": [[442, 2, 1, "", "fit"], [442, 2, 1, "", "fit_predict"], [442, 2, 1, "", "fit_transform"], [442, 2, 1, "", "get_feature_names_out"], [442, 2, 1, "", "get_metadata_routing"], [442, 2, 1, "", "get_params"], [442, 2, 1, "", "partial_fit"], [442, 2, 1, "", "predict"], [442, 2, 1, "", "set_output"], [442, 2, 1, "", "set_params"], [442, 2, 1, "", "transform"]], "sklearn.cluster.BisectingKMeans": [[443, 2, 1, "", "fit"], [443, 2, 1, "", "fit_predict"], [443, 2, 1, "", "fit_transform"], [443, 2, 1, "", "get_feature_names_out"], [443, 2, 1, "", "get_metadata_routing"], [443, 2, 1, "", "get_params"], [443, 2, 1, "", "predict"], [443, 2, 1, "", "score"], [443, 2, 1, "", "set_fit_request"], [443, 2, 1, "", "set_output"], [443, 2, 1, "", "set_params"], [443, 2, 1, "", "set_score_request"], [443, 2, 1, "", "transform"]], "sklearn.cluster.DBSCAN": [[444, 2, 1, "", "fit"], [444, 2, 1, "", "fit_predict"], [444, 2, 1, "", "get_metadata_routing"], [444, 2, 1, "", "get_params"], [444, 2, 1, "", "set_fit_request"], [444, 2, 1, "", "set_params"]], "sklearn.cluster.FeatureAgglomeration": [[445, 2, 1, "", "fit"], [445, 3, 1, "", "fit_predict"], [445, 2, 1, "", "fit_transform"], [445, 2, 1, "", "get_feature_names_out"], [445, 2, 1, "", "get_metadata_routing"], [445, 2, 1, "", "get_params"], [445, 2, 1, "", "inverse_transform"], [445, 2, 1, "", "set_output"], [445, 2, 1, "", "set_params"], [445, 2, 1, "", "transform"]], "sklearn.cluster.HDBSCAN": [[446, 2, 1, "", "dbscan_clustering"], [446, 2, 1, "", "fit"], [446, 2, 1, "", "fit_predict"], [446, 2, 1, "", "get_metadata_routing"], [446, 2, 1, "", "get_params"], [446, 2, 1, "", "set_params"]], "sklearn.cluster.KMeans": [[447, 2, 1, "", "fit"], [447, 2, 1, "", "fit_predict"], [447, 2, 1, "", "fit_transform"], [447, 2, 1, "", "get_feature_names_out"], [447, 2, 1, "", "get_metadata_routing"], [447, 2, 1, "", "get_params"], [447, 2, 1, "", "predict"], [447, 2, 1, "", "score"], [447, 2, 1, "", "set_fit_request"], [447, 2, 1, "", "set_output"], [447, 2, 1, "", "set_params"], [447, 2, 1, "", "set_score_request"], [447, 2, 1, "", "transform"]], "sklearn.cluster.MeanShift": [[448, 2, 1, "", "fit"], [448, 2, 1, "", "fit_predict"], [448, 2, 1, "", "get_metadata_routing"], [448, 2, 1, "", "get_params"], [448, 2, 1, "", "predict"], [448, 2, 1, "", "set_params"]], "sklearn.cluster.MiniBatchKMeans": [[449, 2, 1, "", "fit"], [449, 2, 1, "", "fit_predict"], [449, 2, 1, "", "fit_transform"], [449, 2, 1, "", "get_feature_names_out"], [449, 2, 1, "", "get_metadata_routing"], [449, 2, 1, "", "get_params"], [449, 2, 1, "", "partial_fit"], [449, 2, 1, "", "predict"], [449, 2, 1, "", "score"], [449, 2, 1, "", "set_fit_request"], [449, 2, 1, "", "set_output"], [449, 2, 1, "", "set_params"], [449, 2, 1, "", "set_partial_fit_request"], [449, 2, 1, "", "set_score_request"], [449, 2, 1, "", "transform"]], "sklearn.cluster.OPTICS": [[450, 2, 1, "", "fit"], [450, 2, 1, "", "fit_predict"], [450, 2, 1, "", "get_metadata_routing"], [450, 2, 1, "", "get_params"], [450, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralBiclustering": [[451, 3, 1, "", "biclusters_"], [451, 2, 1, "", "fit"], [451, 2, 1, "", "get_indices"], [451, 2, 1, "", "get_metadata_routing"], [451, 2, 1, "", "get_params"], [451, 2, 1, "", "get_shape"], [451, 2, 1, "", "get_submatrix"], [451, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralClustering": [[452, 2, 1, "", "fit"], [452, 2, 1, "", "fit_predict"], [452, 2, 1, "", "get_metadata_routing"], [452, 2, 1, "", "get_params"], [452, 2, 1, "", "set_params"]], "sklearn.cluster.SpectralCoclustering": [[453, 3, 1, "", "biclusters_"], [453, 2, 1, "", "fit"], [453, 2, 1, "", "get_indices"], [453, 2, 1, "", "get_metadata_routing"], [453, 2, 1, "", "get_params"], [453, 2, 1, "", "get_shape"], [453, 2, 1, "", "get_submatrix"], [453, 2, 1, "", "set_params"]], "sklearn.compose": [[464, 1, 1, "", "ColumnTransformer"], [465, 1, 1, "", "TransformedTargetRegressor"], [466, 1, 1, "", "make_column_selector"], [467, 4, 1, "", "make_column_transformer"]], "sklearn.compose.ColumnTransformer": [[464, 2, 1, "", "fit"], [464, 2, 1, "", "fit_transform"], [464, 2, 1, "", "get_feature_names_out"], [464, 2, 1, "", "get_metadata_routing"], [464, 2, 1, "", "get_params"], [464, 3, 1, "", "named_transformers_"], [464, 2, 1, "", "set_output"], [464, 2, 1, "", "set_params"], [464, 2, 1, "", "transform"]], "sklearn.compose.TransformedTargetRegressor": [[465, 2, 1, "", "fit"], [465, 2, 1, "", "get_metadata_routing"], [465, 2, 1, "", "get_params"], [465, 3, 1, "", "n_features_in_"], [465, 2, 1, "", "predict"], [465, 2, 1, "", "score"], [465, 2, 1, "", "set_params"], [465, 2, 1, "", "set_score_request"]], "sklearn.compose.make_column_selector": [[466, 2, 1, "", "__call__"]], "sklearn.covariance": [[469, 1, 1, "", "EllipticEnvelope"], [470, 1, 1, "", "EmpiricalCovariance"], [471, 1, 1, "", "GraphicalLasso"], [472, 1, 1, "", "GraphicalLassoCV"], [473, 1, 1, "", "LedoitWolf"], [474, 1, 1, "", "MinCovDet"], [475, 1, 1, "", "OAS"], [476, 1, 1, "", "ShrunkCovariance"], [477, 4, 1, "", "empirical_covariance"], [478, 4, 1, "", "graphical_lasso"], [479, 4, 1, "", "ledoit_wolf"], [480, 4, 1, "", "ledoit_wolf_shrinkage"], [421, 4, 1, "", "oas"], [481, 4, 1, "", "shrunk_covariance"]], "sklearn.covariance.EllipticEnvelope": [[469, 2, 1, "", "correct_covariance"], [469, 2, 1, "", "decision_function"], [469, 2, 1, "", "error_norm"], [469, 2, 1, "", "fit"], [469, 2, 1, "", "fit_predict"], [469, 2, 1, "", "get_metadata_routing"], [469, 2, 1, "", "get_params"], [469, 2, 1, "", "get_precision"], [469, 2, 1, "", "mahalanobis"], [469, 2, 1, "", "predict"], [469, 2, 1, "", "reweight_covariance"], [469, 2, 1, "", "score"], [469, 2, 1, "", "score_samples"], [469, 2, 1, "", "set_params"], [469, 2, 1, "", "set_score_request"]], "sklearn.covariance.EmpiricalCovariance": [[470, 2, 1, "", "error_norm"], [470, 2, 1, "", "fit"], [470, 2, 1, "", "get_metadata_routing"], [470, 2, 1, "", "get_params"], [470, 2, 1, "", "get_precision"], [470, 2, 1, "", "mahalanobis"], [470, 2, 1, "", "score"], [470, 2, 1, "", "set_params"], [470, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLasso": [[471, 2, 1, "", "error_norm"], [471, 2, 1, "", "fit"], [471, 2, 1, "", "get_metadata_routing"], [471, 2, 1, "", "get_params"], [471, 2, 1, "", "get_precision"], [471, 2, 1, "", "mahalanobis"], [471, 2, 1, "", "score"], [471, 2, 1, "", "set_params"], [471, 2, 1, "", "set_score_request"]], "sklearn.covariance.GraphicalLassoCV": [[472, 2, 1, "", "error_norm"], [472, 2, 1, "", "fit"], [472, 2, 1, "", "get_metadata_routing"], [472, 2, 1, "", "get_params"], [472, 2, 1, "", "get_precision"], [472, 2, 1, "", "mahalanobis"], [472, 2, 1, "", "score"], [472, 2, 1, "", "set_params"], [472, 2, 1, "", "set_score_request"]], "sklearn.covariance.LedoitWolf": [[473, 2, 1, "", "error_norm"], [473, 2, 1, "", "fit"], [473, 2, 1, "", "get_metadata_routing"], [473, 2, 1, "", "get_params"], [473, 2, 1, "", "get_precision"], [473, 2, 1, "", "mahalanobis"], [473, 2, 1, "", "score"], [473, 2, 1, "", "set_params"], [473, 2, 1, "", "set_score_request"]], "sklearn.covariance.MinCovDet": [[474, 2, 1, "", "correct_covariance"], [474, 2, 1, "", "error_norm"], [474, 2, 1, "", "fit"], [474, 2, 1, "", "get_metadata_routing"], [474, 2, 1, "", "get_params"], [474, 2, 1, "", "get_precision"], [474, 2, 1, "", "mahalanobis"], [474, 2, 1, "", "reweight_covariance"], [474, 2, 1, "", "score"], [474, 2, 1, "", "set_params"], [474, 2, 1, "", "set_score_request"]], "sklearn.covariance.OAS": [[475, 2, 1, "", "error_norm"], [475, 2, 1, "", "fit"], [475, 2, 1, "", "get_metadata_routing"], [475, 2, 1, "", "get_params"], [475, 2, 1, "", "get_precision"], [475, 2, 1, "", "mahalanobis"], [475, 2, 1, "", "score"], [475, 2, 1, "", "set_params"], [475, 2, 1, "", "set_score_request"]], "sklearn.covariance.ShrunkCovariance": [[476, 2, 1, "", "error_norm"], [476, 2, 1, "", "fit"], [476, 2, 1, "", "get_metadata_routing"], [476, 2, 1, "", "get_params"], [476, 2, 1, "", "get_precision"], [476, 2, 1, "", "mahalanobis"], [476, 2, 1, "", "score"], [476, 2, 1, "", "set_params"], [476, 2, 1, "", "set_score_request"]], "sklearn.cross_decomposition": [[482, 1, 1, "", "CCA"], [483, 1, 1, "", "PLSCanonical"], [484, 1, 1, "", "PLSRegression"], [485, 1, 1, "", "PLSSVD"]], "sklearn.cross_decomposition.CCA": [[482, 2, 1, "", "fit"], [482, 2, 1, "", "fit_transform"], [482, 2, 1, "", "get_feature_names_out"], [482, 2, 1, "", "get_metadata_routing"], [482, 2, 1, "", "get_params"], [482, 2, 1, "", "inverse_transform"], [482, 2, 1, "", "predict"], [482, 2, 1, "", "score"], [482, 2, 1, "", "set_output"], [482, 2, 1, "", "set_params"], [482, 2, 1, "", "set_predict_request"], [482, 2, 1, "", "set_score_request"], [482, 2, 1, "", "set_transform_request"], [482, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSCanonical": [[483, 2, 1, "", "fit"], [483, 2, 1, "", "fit_transform"], [483, 2, 1, "", "get_feature_names_out"], [483, 2, 1, "", "get_metadata_routing"], [483, 2, 1, "", "get_params"], [483, 2, 1, "", "inverse_transform"], [483, 2, 1, "", "predict"], [483, 2, 1, "", "score"], [483, 2, 1, "", "set_output"], [483, 2, 1, "", "set_params"], [483, 2, 1, "", "set_predict_request"], [483, 2, 1, "", "set_score_request"], [483, 2, 1, "", "set_transform_request"], [483, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSRegression": [[484, 2, 1, "", "fit"], [484, 2, 1, "", "fit_transform"], [484, 2, 1, "", "get_feature_names_out"], [484, 2, 1, "", "get_metadata_routing"], [484, 2, 1, "", "get_params"], [484, 2, 1, "", "inverse_transform"], [484, 2, 1, "", "predict"], [484, 2, 1, "", "score"], [484, 2, 1, "", "set_output"], [484, 2, 1, "", "set_params"], [484, 2, 1, "", "set_predict_request"], [484, 2, 1, "", "set_score_request"], [484, 2, 1, "", "set_transform_request"], [484, 2, 1, "", "transform"]], "sklearn.cross_decomposition.PLSSVD": [[485, 2, 1, "", "fit"], [485, 2, 1, "", "fit_transform"], [485, 2, 1, "", "get_feature_names_out"], [485, 2, 1, "", "get_metadata_routing"], [485, 2, 1, "", "get_params"], [485, 2, 1, "", "set_output"], [485, 2, 1, "", "set_params"], [485, 2, 1, "", "transform"]], "sklearn.datasets": [[486, 4, 1, "", "clear_data_home"], [487, 4, 1, "", "dump_svmlight_file"], [488, 4, 1, "", "fetch_20newsgroups"], [489, 4, 1, "", "fetch_20newsgroups_vectorized"], [490, 4, 1, "", "fetch_california_housing"], [491, 4, 1, "", "fetch_covtype"], [492, 4, 1, "", "fetch_file"], [493, 4, 1, "", "fetch_kddcup99"], [494, 4, 1, "", "fetch_lfw_pairs"], [495, 4, 1, "", "fetch_lfw_people"], [496, 4, 1, "", "fetch_olivetti_faces"], [497, 4, 1, "", "fetch_openml"], [498, 4, 1, "", "fetch_rcv1"], [499, 4, 1, "", "fetch_species_distributions"], [500, 4, 1, "", "get_data_home"], [501, 4, 1, "", "load_breast_cancer"], [502, 4, 1, "", "load_diabetes"], [503, 4, 1, "", "load_digits"], [504, 4, 1, "", "load_files"], [505, 4, 1, "", "load_iris"], [506, 4, 1, "", "load_linnerud"], [507, 4, 1, "", "load_sample_image"], [508, 4, 1, "", "load_sample_images"], [509, 4, 1, "", "load_svmlight_file"], [510, 4, 1, "", "load_svmlight_files"], [511, 4, 1, "", "load_wine"], [512, 4, 1, "", "make_biclusters"], [513, 4, 1, "", "make_blobs"], [514, 4, 1, "", "make_checkerboard"], [515, 4, 1, "", "make_circles"], [516, 4, 1, "", "make_classification"], [517, 4, 1, "", "make_friedman1"], [518, 4, 1, "", "make_friedman2"], [519, 4, 1, "", "make_friedman3"], [520, 4, 1, "", "make_gaussian_quantiles"], [521, 4, 1, "", "make_hastie_10_2"], [522, 4, 1, "", "make_low_rank_matrix"], [523, 4, 1, "", "make_moons"], [524, 4, 1, "", "make_multilabel_classification"], [525, 4, 1, "", "make_regression"], [526, 4, 1, "", "make_s_curve"], [527, 4, 1, "", "make_sparse_coded_signal"], [528, 4, 1, "", "make_sparse_spd_matrix"], [529, 4, 1, "", "make_sparse_uncorrelated"], [530, 4, 1, "", "make_spd_matrix"], [531, 4, 1, "", "make_swiss_roll"]], "sklearn.decomposition": [[532, 1, 1, "", "DictionaryLearning"], [533, 1, 1, "", "FactorAnalysis"], [534, 1, 1, "", "FastICA"], [535, 1, 1, "", "IncrementalPCA"], [536, 1, 1, "", "KernelPCA"], [537, 1, 1, "", "LatentDirichletAllocation"], [538, 1, 1, "", "MiniBatchDictionaryLearning"], [539, 1, 1, "", "MiniBatchNMF"], [540, 1, 1, "", "MiniBatchSparsePCA"], [541, 1, 1, "", "NMF"], [542, 1, 1, "", "PCA"], [543, 1, 1, "", "SparseCoder"], [544, 1, 1, "", "SparsePCA"], [545, 1, 1, "", "TruncatedSVD"], [546, 4, 1, "", "dict_learning"], [547, 4, 1, "", "dict_learning_online"], [420, 4, 1, "", "fastica"], [548, 4, 1, "", "non_negative_factorization"], [549, 4, 1, "", "sparse_encode"]], "sklearn.decomposition.DictionaryLearning": [[532, 2, 1, "", "fit"], [532, 2, 1, "", "fit_transform"], [532, 2, 1, "", "get_feature_names_out"], [532, 2, 1, "", "get_metadata_routing"], [532, 2, 1, "", "get_params"], [532, 2, 1, "", "set_output"], [532, 2, 1, "", "set_params"], [532, 2, 1, "", "transform"]], "sklearn.decomposition.FactorAnalysis": [[533, 2, 1, "", "fit"], [533, 2, 1, "", "fit_transform"], [533, 2, 1, "", "get_covariance"], [533, 2, 1, "", "get_feature_names_out"], [533, 2, 1, "", "get_metadata_routing"], [533, 2, 1, "", "get_params"], [533, 2, 1, "", "get_precision"], [533, 2, 1, "", "score"], [533, 2, 1, "", "score_samples"], [533, 2, 1, "", "set_output"], [533, 2, 1, "", "set_params"], [533, 2, 1, "", "transform"]], "sklearn.decomposition.FastICA": [[534, 2, 1, "", "fit"], [534, 2, 1, "", "fit_transform"], [534, 2, 1, "", "get_feature_names_out"], [534, 2, 1, "", "get_metadata_routing"], [534, 2, 1, "", "get_params"], [534, 2, 1, "", "inverse_transform"], [534, 2, 1, "", "set_inverse_transform_request"], [534, 2, 1, "", "set_output"], [534, 2, 1, "", "set_params"], [534, 2, 1, "", "set_transform_request"], [534, 2, 1, "", "transform"]], "sklearn.decomposition.IncrementalPCA": [[535, 2, 1, "", "fit"], [535, 2, 1, "", "fit_transform"], [535, 2, 1, "", "get_covariance"], [535, 2, 1, "", "get_feature_names_out"], [535, 2, 1, "", "get_metadata_routing"], [535, 2, 1, "", "get_params"], [535, 2, 1, "", "get_precision"], [535, 2, 1, "", "inverse_transform"], [535, 2, 1, "", "partial_fit"], [535, 2, 1, "", "set_output"], [535, 2, 1, "", "set_params"], [535, 2, 1, "", "set_partial_fit_request"], [535, 2, 1, "", "transform"]], "sklearn.decomposition.KernelPCA": [[536, 2, 1, "", "fit"], [536, 2, 1, "", "fit_transform"], [536, 2, 1, "", "get_feature_names_out"], [536, 2, 1, "", "get_metadata_routing"], [536, 2, 1, "", "get_params"], [536, 2, 1, "", "inverse_transform"], [536, 2, 1, "", "set_output"], [536, 2, 1, "", "set_params"], [536, 2, 1, "", "transform"]], "sklearn.decomposition.LatentDirichletAllocation": [[537, 2, 1, "", "fit"], [537, 2, 1, "", "fit_transform"], [537, 2, 1, "", "get_feature_names_out"], [537, 2, 1, "", "get_metadata_routing"], [537, 2, 1, "", "get_params"], [537, 2, 1, "", "partial_fit"], [537, 2, 1, "", "perplexity"], [537, 2, 1, "", "score"], [537, 2, 1, "", "set_output"], [537, 2, 1, "", "set_params"], [537, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchDictionaryLearning": [[538, 2, 1, "", "fit"], [538, 2, 1, "", "fit_transform"], [538, 2, 1, "", "get_feature_names_out"], [538, 2, 1, "", "get_metadata_routing"], [538, 2, 1, "", "get_params"], [538, 2, 1, "", "partial_fit"], [538, 2, 1, "", "set_output"], [538, 2, 1, "", "set_params"], [538, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchNMF": [[539, 2, 1, "", "fit"], [539, 2, 1, "", "fit_transform"], [539, 2, 1, "", "get_feature_names_out"], [539, 2, 1, "", "get_metadata_routing"], [539, 2, 1, "", "get_params"], [539, 2, 1, "", "inverse_transform"], [539, 2, 1, "", "partial_fit"], [539, 2, 1, "", "set_output"], [539, 2, 1, "", "set_params"], [539, 2, 1, "", "transform"]], "sklearn.decomposition.MiniBatchSparsePCA": [[540, 2, 1, "", "fit"], [540, 2, 1, "", "fit_transform"], [540, 2, 1, "", "get_feature_names_out"], [540, 2, 1, "", "get_metadata_routing"], [540, 2, 1, "", "get_params"], [540, 2, 1, "", "inverse_transform"], [540, 2, 1, "", "set_output"], [540, 2, 1, "", "set_params"], [540, 2, 1, "", "transform"]], "sklearn.decomposition.NMF": [[541, 2, 1, "", "fit"], [541, 2, 1, "", "fit_transform"], [541, 2, 1, "", "get_feature_names_out"], [541, 2, 1, "", "get_metadata_routing"], [541, 2, 1, "", "get_params"], [541, 2, 1, "", "inverse_transform"], [541, 2, 1, "", "set_output"], [541, 2, 1, "", "set_params"], [541, 2, 1, "", "transform"]], "sklearn.decomposition.PCA": [[542, 2, 1, "", "fit"], [542, 2, 1, "", "fit_transform"], [542, 2, 1, "", "get_covariance"], [542, 2, 1, "", "get_feature_names_out"], [542, 2, 1, "", "get_metadata_routing"], [542, 2, 1, "", "get_params"], [542, 2, 1, "", "get_precision"], [542, 2, 1, "", "inverse_transform"], [542, 2, 1, "", "score"], [542, 2, 1, "", "score_samples"], [542, 2, 1, "", "set_output"], [542, 2, 1, "", "set_params"], [542, 2, 1, "", "transform"]], "sklearn.decomposition.SparseCoder": [[543, 2, 1, "", "fit"], [543, 2, 1, "", "fit_transform"], [543, 2, 1, "", "get_feature_names_out"], [543, 2, 1, "", "get_metadata_routing"], [543, 2, 1, "", "get_params"], [543, 3, 1, "", "n_components_"], [543, 3, 1, "", "n_features_in_"], [543, 2, 1, "", "set_output"], [543, 2, 1, "", "set_params"], [543, 2, 1, "", "transform"]], "sklearn.decomposition.SparsePCA": [[544, 2, 1, "", "fit"], [544, 2, 1, "", "fit_transform"], [544, 2, 1, "", "get_feature_names_out"], [544, 2, 1, "", "get_metadata_routing"], [544, 2, 1, "", "get_params"], [544, 2, 1, "", "inverse_transform"], [544, 2, 1, "", "set_output"], [544, 2, 1, "", "set_params"], [544, 2, 1, "", "transform"]], "sklearn.decomposition.TruncatedSVD": [[545, 2, 1, "", "fit"], [545, 2, 1, "", "fit_transform"], [545, 2, 1, "", "get_feature_names_out"], [545, 2, 1, "", "get_metadata_routing"], [545, 2, 1, "", "get_params"], [545, 2, 1, "", "inverse_transform"], [545, 2, 1, "", "set_output"], [545, 2, 1, "", "set_params"], [545, 2, 1, "", "transform"]], "sklearn.discriminant_analysis": [[550, 1, 1, "", "LinearDiscriminantAnalysis"], [551, 1, 1, "", "QuadraticDiscriminantAnalysis"]], "sklearn.discriminant_analysis.LinearDiscriminantAnalysis": [[550, 2, 1, "", "decision_function"], [550, 2, 1, "", "fit"], [550, 2, 1, "", "fit_transform"], [550, 2, 1, "", "get_feature_names_out"], [550, 2, 1, "", "get_metadata_routing"], [550, 2, 1, "", "get_params"], [550, 2, 1, "", "predict"], [550, 2, 1, "", "predict_log_proba"], [550, 2, 1, "", "predict_proba"], [550, 2, 1, "", "score"], [550, 2, 1, "", "set_output"], [550, 2, 1, "", "set_params"], [550, 2, 1, "", "set_score_request"], [550, 2, 1, "", "transform"]], "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis": [[551, 2, 1, "", "decision_function"], [551, 2, 1, "", "fit"], [551, 2, 1, "", "get_metadata_routing"], [551, 2, 1, "", "get_params"], [551, 2, 1, "", "predict"], [551, 2, 1, "", "predict_log_proba"], [551, 2, 1, "", "predict_proba"], [551, 2, 1, "", "score"], [551, 2, 1, "", "set_params"], [551, 2, 1, "", "set_score_request"]], "sklearn.dummy": [[552, 1, 1, "", "DummyClassifier"], [553, 1, 1, "", "DummyRegressor"]], "sklearn.dummy.DummyClassifier": [[552, 2, 1, "", "fit"], [552, 2, 1, "", "get_metadata_routing"], [552, 2, 1, "", "get_params"], [552, 2, 1, "", "predict"], [552, 2, 1, "", "predict_log_proba"], [552, 2, 1, "", "predict_proba"], [552, 2, 1, "", "score"], [552, 2, 1, "", "set_fit_request"], [552, 2, 1, "", "set_params"], [552, 2, 1, "", "set_score_request"]], "sklearn.dummy.DummyRegressor": [[553, 2, 1, "", "fit"], [553, 2, 1, "", "get_metadata_routing"], [553, 2, 1, "", "get_params"], [553, 2, 1, "", "predict"], [553, 2, 1, "", "score"], [553, 2, 1, "", "set_fit_request"], [553, 2, 1, "", "set_params"], [553, 2, 1, "", "set_predict_request"], [553, 2, 1, "", "set_score_request"]], "sklearn.ensemble": [[554, 1, 1, "", "AdaBoostClassifier"], [555, 1, 1, "", "AdaBoostRegressor"], [556, 1, 1, "", "BaggingClassifier"], [557, 1, 1, "", "BaggingRegressor"], [558, 1, 1, "", "ExtraTreesClassifier"], [559, 1, 1, "", "ExtraTreesRegressor"], [560, 1, 1, "", "GradientBoostingClassifier"], [561, 1, 1, "", "GradientBoostingRegressor"], [562, 1, 1, "", "HistGradientBoostingClassifier"], [563, 1, 1, "", "HistGradientBoostingRegressor"], [564, 1, 1, "", "IsolationForest"], [565, 1, 1, "", "RandomForestClassifier"], [566, 1, 1, "", "RandomForestRegressor"], [567, 1, 1, "", "RandomTreesEmbedding"], [568, 1, 1, "", "StackingClassifier"], [569, 1, 1, "", "StackingRegressor"], [570, 1, 1, "", "VotingClassifier"], [571, 1, 1, "", "VotingRegressor"]], "sklearn.ensemble.AdaBoostClassifier": [[554, 2, 1, "", "decision_function"], [554, 3, 1, "", "feature_importances_"], [554, 2, 1, "", "fit"], [554, 2, 1, "", "get_metadata_routing"], [554, 2, 1, "", "get_params"], [554, 2, 1, "", "predict"], [554, 2, 1, "", "predict_log_proba"], [554, 2, 1, "", "predict_proba"], [554, 2, 1, "", "score"], [554, 2, 1, "", "set_fit_request"], [554, 2, 1, "", "set_params"], [554, 2, 1, "", "set_score_request"], [554, 2, 1, "", "staged_decision_function"], [554, 2, 1, "", "staged_predict"], [554, 2, 1, "", "staged_predict_proba"], [554, 2, 1, "", "staged_score"]], "sklearn.ensemble.AdaBoostRegressor": [[555, 3, 1, "", "feature_importances_"], [555, 2, 1, "", "fit"], [555, 2, 1, "", "get_metadata_routing"], [555, 2, 1, "", "get_params"], [555, 2, 1, "", "predict"], [555, 2, 1, "", "score"], [555, 2, 1, "", "set_fit_request"], [555, 2, 1, "", "set_params"], [555, 2, 1, "", "set_score_request"], [555, 2, 1, "", "staged_predict"], [555, 2, 1, "", "staged_score"]], "sklearn.ensemble.BaggingClassifier": [[556, 2, 1, "", "decision_function"], [556, 3, 1, "", "estimators_samples_"], [556, 2, 1, "", "fit"], [556, 2, 1, "", "get_metadata_routing"], [556, 2, 1, "", "get_params"], [556, 2, 1, "", "predict"], [556, 2, 1, "", "predict_log_proba"], [556, 2, 1, "", "predict_proba"], [556, 2, 1, "", "score"], [556, 2, 1, "", "set_fit_request"], [556, 2, 1, "", "set_params"], [556, 2, 1, "", "set_score_request"]], "sklearn.ensemble.BaggingRegressor": [[557, 3, 1, "", "estimators_samples_"], [557, 2, 1, "", "fit"], [557, 2, 1, "", "get_metadata_routing"], [557, 2, 1, "", "get_params"], [557, 2, 1, "", "predict"], [557, 2, 1, "", "score"], [557, 2, 1, "", "set_fit_request"], [557, 2, 1, "", "set_params"], [557, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesClassifier": [[558, 2, 1, "", "apply"], [558, 2, 1, "", "decision_path"], [558, 3, 1, "", "estimators_samples_"], [558, 3, 1, "", "feature_importances_"], [558, 2, 1, "", "fit"], [558, 2, 1, "", "get_metadata_routing"], [558, 2, 1, "", "get_params"], [558, 2, 1, "", "predict"], [558, 2, 1, "", "predict_log_proba"], [558, 2, 1, "", "predict_proba"], [558, 2, 1, "", "score"], [558, 2, 1, "", "set_fit_request"], [558, 2, 1, "", "set_params"], [558, 2, 1, "", "set_score_request"]], "sklearn.ensemble.ExtraTreesRegressor": [[559, 2, 1, "", "apply"], [559, 2, 1, "", "decision_path"], [559, 3, 1, "", "estimators_samples_"], [559, 3, 1, "", "feature_importances_"], [559, 2, 1, "", "fit"], [559, 2, 1, "", "get_metadata_routing"], [559, 2, 1, "", "get_params"], [559, 2, 1, "", "predict"], [559, 2, 1, "", "score"], [559, 2, 1, "", "set_fit_request"], [559, 2, 1, "", "set_params"], [559, 2, 1, "", "set_score_request"]], "sklearn.ensemble.GradientBoostingClassifier": [[560, 2, 1, "", "apply"], [560, 2, 1, "", "decision_function"], [560, 3, 1, "", "feature_importances_"], [560, 2, 1, "", "fit"], [560, 2, 1, "", "get_metadata_routing"], [560, 2, 1, "", "get_params"], [560, 2, 1, "", "predict"], [560, 2, 1, "", "predict_log_proba"], [560, 2, 1, "", "predict_proba"], [560, 2, 1, "", "score"], [560, 2, 1, "", "set_fit_request"], [560, 2, 1, "", "set_params"], [560, 2, 1, "", "set_score_request"], [560, 2, 1, "", "staged_decision_function"], [560, 2, 1, "", "staged_predict"], [560, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.GradientBoostingRegressor": [[561, 2, 1, "", "apply"], [561, 3, 1, "", "feature_importances_"], [561, 2, 1, "", "fit"], [561, 2, 1, "", "get_metadata_routing"], [561, 2, 1, "", "get_params"], [561, 2, 1, "", "predict"], [561, 2, 1, "", "score"], [561, 2, 1, "", "set_fit_request"], [561, 2, 1, "", "set_params"], [561, 2, 1, "", "set_score_request"], [561, 2, 1, "", "staged_predict"]], "sklearn.ensemble.HistGradientBoostingClassifier": [[562, 2, 1, "", "decision_function"], [562, 2, 1, "", "fit"], [562, 2, 1, "", "get_metadata_routing"], [562, 2, 1, "", "get_params"], [562, 3, 1, "", "n_iter_"], [562, 2, 1, "", "predict"], [562, 2, 1, "", "predict_proba"], [562, 2, 1, "", "score"], [562, 2, 1, "", "set_fit_request"], [562, 2, 1, "", "set_params"], [562, 2, 1, "", "set_score_request"], [562, 2, 1, "", "staged_decision_function"], [562, 2, 1, "", "staged_predict"], [562, 2, 1, "", "staged_predict_proba"]], "sklearn.ensemble.HistGradientBoostingRegressor": [[563, 2, 1, "", "fit"], [563, 2, 1, "", "get_metadata_routing"], [563, 2, 1, "", "get_params"], [563, 3, 1, "", "n_iter_"], [563, 2, 1, "", "predict"], [563, 2, 1, "", "score"], [563, 2, 1, "", "set_fit_request"], [563, 2, 1, "", "set_params"], [563, 2, 1, "", "set_score_request"], [563, 2, 1, "", "staged_predict"]], "sklearn.ensemble.IsolationForest": [[564, 2, 1, "", "decision_function"], [564, 3, 1, "", "estimators_samples_"], [564, 2, 1, "", "fit"], [564, 2, 1, "", "fit_predict"], [564, 2, 1, "", "get_metadata_routing"], [564, 2, 1, "", "get_params"], [564, 2, 1, "", "predict"], [564, 2, 1, "", "score_samples"], [564, 2, 1, "", "set_fit_request"], [564, 2, 1, "", "set_params"]], "sklearn.ensemble.RandomForestClassifier": [[565, 2, 1, "", "apply"], [565, 2, 1, "", "decision_path"], [565, 3, 1, "", "estimators_samples_"], [565, 3, 1, "", "feature_importances_"], [565, 2, 1, "", "fit"], [565, 2, 1, "", "get_metadata_routing"], [565, 2, 1, "", "get_params"], [565, 2, 1, "", "predict"], [565, 2, 1, "", "predict_log_proba"], [565, 2, 1, "", "predict_proba"], [565, 2, 1, "", "score"], [565, 2, 1, "", "set_fit_request"], [565, 2, 1, "", "set_params"], [565, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomForestRegressor": [[566, 2, 1, "", "apply"], [566, 2, 1, "", "decision_path"], [566, 3, 1, "", "estimators_samples_"], [566, 3, 1, "", "feature_importances_"], [566, 2, 1, "", "fit"], [566, 2, 1, "", "get_metadata_routing"], [566, 2, 1, "", "get_params"], [566, 2, 1, "", "predict"], [566, 2, 1, "", "score"], [566, 2, 1, "", "set_fit_request"], [566, 2, 1, "", "set_params"], [566, 2, 1, "", "set_score_request"]], "sklearn.ensemble.RandomTreesEmbedding": [[567, 2, 1, "", "apply"], [567, 2, 1, "", "decision_path"], [567, 3, 1, "", "estimators_samples_"], [567, 3, 1, "", "feature_importances_"], [567, 2, 1, "", "fit"], [567, 2, 1, "", "fit_transform"], [567, 2, 1, "", "get_feature_names_out"], [567, 2, 1, "", "get_metadata_routing"], [567, 2, 1, "", "get_params"], [567, 2, 1, "", "set_fit_request"], [567, 2, 1, "", "set_output"], [567, 2, 1, "", "set_params"], [567, 2, 1, "", "transform"]], "sklearn.ensemble.StackingClassifier": [[568, 2, 1, "", "decision_function"], [568, 2, 1, "", "fit"], [568, 2, 1, "", "fit_transform"], [568, 2, 1, "", "get_feature_names_out"], [568, 2, 1, "", "get_metadata_routing"], [568, 2, 1, "", "get_params"], [568, 3, 1, "", "n_features_in_"], [568, 3, 1, "", "named_estimators"], [568, 2, 1, "", "predict"], [568, 2, 1, "", "predict_proba"], [568, 2, 1, "", "score"], [568, 2, 1, "", "set_fit_request"], [568, 2, 1, "", "set_output"], [568, 2, 1, "", "set_params"], [568, 2, 1, "", "set_score_request"], [568, 2, 1, "", "transform"]], "sklearn.ensemble.StackingRegressor": [[569, 2, 1, "", "fit"], [569, 2, 1, "", "fit_transform"], [569, 2, 1, "", "get_feature_names_out"], [569, 2, 1, "", "get_metadata_routing"], [569, 2, 1, "", "get_params"], [569, 3, 1, "", "n_features_in_"], [569, 3, 1, "", "named_estimators"], [569, 2, 1, "", "predict"], [569, 2, 1, "", "score"], [569, 2, 1, "", "set_fit_request"], [569, 2, 1, "", "set_output"], [569, 2, 1, "", "set_params"], [569, 2, 1, "", "set_score_request"], [569, 2, 1, "", "transform"]], "sklearn.ensemble.VotingClassifier": [[570, 2, 1, "", "fit"], [570, 2, 1, "", "fit_transform"], [570, 2, 1, "", "get_feature_names_out"], [570, 2, 1, "", "get_metadata_routing"], [570, 2, 1, "", "get_params"], [570, 3, 1, "", "n_features_in_"], [570, 3, 1, "", "named_estimators"], [570, 2, 1, "", "predict"], [570, 2, 1, "", "predict_proba"], [570, 2, 1, "", "score"], [570, 2, 1, "", "set_fit_request"], [570, 2, 1, "", "set_output"], [570, 2, 1, "", "set_params"], [570, 2, 1, "", "set_score_request"], [570, 2, 1, "", "transform"]], "sklearn.ensemble.VotingRegressor": [[571, 2, 1, "", "fit"], [571, 2, 1, "", "fit_transform"], [571, 2, 1, "", "get_feature_names_out"], [571, 2, 1, "", "get_metadata_routing"], [571, 2, 1, "", "get_params"], [571, 3, 1, "", "n_features_in_"], [571, 3, 1, "", "named_estimators"], [571, 2, 1, "", "predict"], [571, 2, 1, "", "score"], [571, 2, 1, "", "set_fit_request"], [571, 2, 1, "", "set_output"], [571, 2, 1, "", "set_params"], [571, 2, 1, "", "set_score_request"], [571, 2, 1, "", "transform"]], "sklearn.exceptions": [[572, 5, 1, "", "ConvergenceWarning"], [573, 5, 1, "", "DataConversionWarning"], [574, 5, 1, "", "DataDimensionalityWarning"], [575, 5, 1, "", "EfficiencyWarning"], [576, 5, 1, "", "FitFailedWarning"], [577, 5, 1, "", "InconsistentVersionWarning"], [578, 5, 1, "", "NotFittedError"], [579, 5, 1, "", "UndefinedMetricWarning"]], "sklearn.experimental": [[580, 0, 0, "-", "enable_halving_search_cv"], [581, 0, 0, "-", "enable_iterative_imputer"]], "sklearn.feature_extraction": [[582, 1, 1, "", "DictVectorizer"], [583, 1, 1, "", "FeatureHasher"], [17, 0, 0, "-", "image"], [17, 0, 0, "-", "text"]], "sklearn.feature_extraction.DictVectorizer": [[582, 2, 1, "", "fit"], [582, 2, 1, "", "fit_transform"], [582, 2, 1, "", "get_feature_names_out"], [582, 2, 1, "", "get_metadata_routing"], [582, 2, 1, "", "get_params"], [582, 2, 1, "", "inverse_transform"], [582, 2, 1, "", "restrict"], [582, 2, 1, "", "set_inverse_transform_request"], [582, 2, 1, "", "set_output"], [582, 2, 1, "", "set_params"], [582, 2, 1, "", "transform"]], "sklearn.feature_extraction.FeatureHasher": [[583, 2, 1, "", "fit"], [583, 2, 1, "", "fit_transform"], [583, 2, 1, "", "get_metadata_routing"], [583, 2, 1, "", "get_params"], [583, 2, 1, "", "set_output"], [583, 2, 1, "", "set_params"], [583, 2, 1, "", "set_transform_request"], [583, 2, 1, "", "transform"]], "sklearn.feature_extraction.image": [[584, 1, 1, "", "PatchExtractor"], [585, 4, 1, "", "extract_patches_2d"], [586, 4, 1, "", "grid_to_graph"], [587, 4, 1, "", "img_to_graph"], [588, 4, 1, "", "reconstruct_from_patches_2d"]], "sklearn.feature_extraction.image.PatchExtractor": [[584, 2, 1, "", "fit"], [584, 2, 1, "", "fit_transform"], [584, 2, 1, "", "get_metadata_routing"], [584, 2, 1, "", "get_params"], [584, 2, 1, "", "set_output"], [584, 2, 1, "", "set_params"], [584, 2, 1, "", "transform"]], "sklearn.feature_extraction.text": [[589, 1, 1, "", "CountVectorizer"], [590, 1, 1, "", "HashingVectorizer"], [591, 1, 1, "", "TfidfTransformer"], [592, 1, 1, "", "TfidfVectorizer"]], "sklearn.feature_extraction.text.CountVectorizer": [[589, 2, 1, "", "build_analyzer"], [589, 2, 1, "", "build_preprocessor"], [589, 2, 1, "", "build_tokenizer"], [589, 2, 1, "", "decode"], [589, 2, 1, "", "fit"], [589, 2, 1, "", "fit_transform"], [589, 2, 1, "", "get_feature_names_out"], [589, 2, 1, "", "get_metadata_routing"], [589, 2, 1, "", "get_params"], [589, 2, 1, "", "get_stop_words"], [589, 2, 1, "", "inverse_transform"], [589, 2, 1, "", "set_fit_request"], [589, 2, 1, "", "set_params"], [589, 2, 1, "", "set_transform_request"], [589, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.HashingVectorizer": [[590, 2, 1, "", "build_analyzer"], [590, 2, 1, "", "build_preprocessor"], [590, 2, 1, "", "build_tokenizer"], [590, 2, 1, "", "decode"], [590, 2, 1, "", "fit"], [590, 2, 1, "", "fit_transform"], [590, 2, 1, "", "get_metadata_routing"], [590, 2, 1, "", "get_params"], [590, 2, 1, "", "get_stop_words"], [590, 2, 1, "", "partial_fit"], [590, 2, 1, "", "set_output"], [590, 2, 1, "", "set_params"], [590, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfTransformer": [[591, 2, 1, "", "fit"], [591, 2, 1, "", "fit_transform"], [591, 2, 1, "", "get_feature_names_out"], [591, 2, 1, "", "get_metadata_routing"], [591, 2, 1, "", "get_params"], [591, 2, 1, "", "set_output"], [591, 2, 1, "", "set_params"], [591, 2, 1, "", "set_transform_request"], [591, 2, 1, "", "transform"]], "sklearn.feature_extraction.text.TfidfVectorizer": [[592, 2, 1, "", "build_analyzer"], [592, 2, 1, "", "build_preprocessor"], [592, 2, 1, "", "build_tokenizer"], [592, 2, 1, "", "decode"], [592, 2, 1, "", "fit"], [592, 2, 1, "", "fit_transform"], [592, 2, 1, "", "get_feature_names_out"], [592, 2, 1, "", "get_metadata_routing"], [592, 2, 1, "", "get_params"], [592, 2, 1, "", "get_stop_words"], [592, 3, 1, "", "idf_"], [592, 2, 1, "", "inverse_transform"], [592, 2, 1, "", "set_fit_request"], [592, 2, 1, "", "set_params"], [592, 2, 1, "", "set_transform_request"], [592, 2, 1, "", "transform"]], "sklearn.feature_selection": [[593, 1, 1, "", "GenericUnivariateSelect"], [594, 1, 1, "", "RFE"], [595, 1, 1, "", "RFECV"], [596, 1, 1, "", "SelectFdr"], [597, 1, 1, "", "SelectFpr"], [598, 1, 1, "", "SelectFromModel"], [599, 1, 1, "", "SelectFwe"], [600, 1, 1, "", "SelectKBest"], [601, 1, 1, "", "SelectPercentile"], [602, 1, 1, "", "SelectorMixin"], [603, 1, 1, "", "SequentialFeatureSelector"], [604, 1, 1, "", "VarianceThreshold"], [605, 4, 1, "", "chi2"], [606, 4, 1, "", "f_classif"], [607, 4, 1, "", "f_regression"], [608, 4, 1, "", "mutual_info_classif"], [609, 4, 1, "", "mutual_info_regression"], [610, 4, 1, "", "r_regression"]], "sklearn.feature_selection.GenericUnivariateSelect": [[593, 2, 1, "", "fit"], [593, 2, 1, "", "fit_transform"], [593, 2, 1, "", "get_feature_names_out"], [593, 2, 1, "", "get_metadata_routing"], [593, 2, 1, "", "get_params"], [593, 2, 1, "", "get_support"], [593, 2, 1, "", "inverse_transform"], [593, 2, 1, "", "set_output"], [593, 2, 1, "", "set_params"], [593, 2, 1, "", "transform"]], "sklearn.feature_selection.RFE": [[594, 3, 1, "", "classes_"], [594, 2, 1, "", "decision_function"], [594, 2, 1, "", "fit"], [594, 2, 1, "", "fit_transform"], [594, 2, 1, "", "get_feature_names_out"], [594, 2, 1, "", "get_metadata_routing"], [594, 2, 1, "", "get_params"], [594, 2, 1, "", "get_support"], [594, 2, 1, "", "inverse_transform"], [594, 2, 1, "", "predict"], [594, 2, 1, "", "predict_log_proba"], [594, 2, 1, "", "predict_proba"], [594, 2, 1, "", "score"], [594, 2, 1, "", "set_output"], [594, 2, 1, "", "set_params"], [594, 2, 1, "", "transform"]], "sklearn.feature_selection.RFECV": [[595, 3, 1, "", "classes_"], [595, 2, 1, "", "decision_function"], [595, 2, 1, "", "fit"], [595, 2, 1, "", "fit_transform"], [595, 2, 1, "", "get_feature_names_out"], [595, 2, 1, "", "get_metadata_routing"], [595, 2, 1, "", "get_params"], [595, 2, 1, "", "get_support"], [595, 2, 1, "", "inverse_transform"], [595, 2, 1, "", "predict"], [595, 2, 1, "", "predict_log_proba"], [595, 2, 1, "", "predict_proba"], [595, 2, 1, "", "score"], [595, 2, 1, "", "set_output"], [595, 2, 1, "", "set_params"], [595, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFdr": [[596, 2, 1, "", "fit"], [596, 2, 1, "", "fit_transform"], [596, 2, 1, "", "get_feature_names_out"], [596, 2, 1, "", "get_metadata_routing"], [596, 2, 1, "", "get_params"], [596, 2, 1, "", "get_support"], [596, 2, 1, "", "inverse_transform"], [596, 2, 1, "", "set_output"], [596, 2, 1, "", "set_params"], [596, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFpr": [[597, 2, 1, "", "fit"], [597, 2, 1, "", "fit_transform"], [597, 2, 1, "", "get_feature_names_out"], [597, 2, 1, "", "get_metadata_routing"], [597, 2, 1, "", "get_params"], [597, 2, 1, "", "get_support"], [597, 2, 1, "", "inverse_transform"], [597, 2, 1, "", "set_output"], [597, 2, 1, "", "set_params"], [597, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFromModel": [[598, 2, 1, "", "fit"], [598, 2, 1, "", "fit_transform"], [598, 2, 1, "", "get_feature_names_out"], [598, 2, 1, "", "get_metadata_routing"], [598, 2, 1, "", "get_params"], [598, 2, 1, "", "get_support"], [598, 2, 1, "", "inverse_transform"], [598, 3, 1, "", "n_features_in_"], [598, 2, 1, "", "partial_fit"], [598, 2, 1, "", "set_output"], [598, 2, 1, "", "set_params"], [598, 3, 1, "", "threshold_"], [598, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectFwe": [[599, 2, 1, "", "fit"], [599, 2, 1, "", "fit_transform"], [599, 2, 1, "", "get_feature_names_out"], [599, 2, 1, "", "get_metadata_routing"], [599, 2, 1, "", "get_params"], [599, 2, 1, "", "get_support"], [599, 2, 1, "", "inverse_transform"], [599, 2, 1, "", "set_output"], [599, 2, 1, "", "set_params"], [599, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectKBest": [[600, 2, 1, "", "fit"], [600, 2, 1, "", "fit_transform"], [600, 2, 1, "", "get_feature_names_out"], [600, 2, 1, "", "get_metadata_routing"], [600, 2, 1, "", "get_params"], [600, 2, 1, "", "get_support"], [600, 2, 1, "", "inverse_transform"], [600, 2, 1, "", "set_output"], [600, 2, 1, "", "set_params"], [600, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectPercentile": [[601, 2, 1, "", "fit"], [601, 2, 1, "", "fit_transform"], [601, 2, 1, "", "get_feature_names_out"], [601, 2, 1, "", "get_metadata_routing"], [601, 2, 1, "", "get_params"], [601, 2, 1, "", "get_support"], [601, 2, 1, "", "inverse_transform"], [601, 2, 1, "", "set_output"], [601, 2, 1, "", "set_params"], [601, 2, 1, "", "transform"]], "sklearn.feature_selection.SelectorMixin": [[602, 2, 1, "", "fit_transform"], [602, 2, 1, "", "get_feature_names_out"], [602, 2, 1, "", "get_support"], [602, 2, 1, "", "inverse_transform"], [602, 2, 1, "", "set_output"], [602, 2, 1, "", "transform"]], "sklearn.feature_selection.SequentialFeatureSelector": [[603, 2, 1, "", "fit"], [603, 2, 1, "", "fit_transform"], [603, 2, 1, "", "get_feature_names_out"], [603, 2, 1, "", "get_metadata_routing"], [603, 2, 1, "", "get_params"], [603, 2, 1, "", "get_support"], [603, 2, 1, "", "inverse_transform"], [603, 2, 1, "", "set_output"], [603, 2, 1, "", "set_params"], [603, 2, 1, "", "transform"]], "sklearn.feature_selection.VarianceThreshold": [[604, 2, 1, "", "fit"], [604, 2, 1, "", "fit_transform"], [604, 2, 1, "", "get_feature_names_out"], [604, 2, 1, "", "get_metadata_routing"], [604, 2, 1, "", "get_params"], [604, 2, 1, "", "get_support"], [604, 2, 1, "", "inverse_transform"], [604, 2, 1, "", "set_output"], [604, 2, 1, "", "set_params"], [604, 2, 1, "", "transform"]], "sklearn.gaussian_process": [[611, 1, 1, "", "GaussianProcessClassifier"], [612, 1, 1, "", "GaussianProcessRegressor"], [19, 0, 0, "-", "kernels"]], "sklearn.gaussian_process.GaussianProcessClassifier": [[611, 2, 1, "", "fit"], [611, 2, 1, "", "get_metadata_routing"], [611, 2, 1, "", "get_params"], [611, 3, 1, "", "kernel_"], [611, 2, 1, "", "log_marginal_likelihood"], [611, 2, 1, "", "predict"], [611, 2, 1, "", "predict_proba"], [611, 2, 1, "", "score"], [611, 2, 1, "", "set_params"], [611, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.GaussianProcessRegressor": [[612, 2, 1, "", "fit"], [612, 2, 1, "", "get_metadata_routing"], [612, 2, 1, "", "get_params"], [612, 2, 1, "", "log_marginal_likelihood"], [612, 2, 1, "", "predict"], [612, 2, 1, "", "sample_y"], [612, 2, 1, "", "score"], [612, 2, 1, "", "set_params"], [612, 2, 1, "", "set_predict_request"], [612, 2, 1, "", "set_score_request"]], "sklearn.gaussian_process.kernels": [[613, 1, 1, "", "CompoundKernel"], [614, 1, 1, "", "ConstantKernel"], [615, 1, 1, "", "DotProduct"], [616, 1, 1, "", "ExpSineSquared"], [617, 1, 1, "", "Exponentiation"], [618, 1, 1, "", "Hyperparameter"], [619, 1, 1, "", "Kernel"], [620, 1, 1, "", "Matern"], [621, 1, 1, "", "PairwiseKernel"], [622, 1, 1, "", "Product"], [623, 1, 1, "", "RBF"], [624, 1, 1, "", "RationalQuadratic"], [625, 1, 1, "", "Sum"], [626, 1, 1, "", "WhiteKernel"]], "sklearn.gaussian_process.kernels.CompoundKernel": [[613, 2, 1, "", "__call__"], [613, 3, 1, "", "bounds"], [613, 2, 1, "", "clone_with_theta"], [613, 2, 1, "", "diag"], [613, 2, 1, "", "get_params"], [613, 3, 1, "", "hyperparameters"], [613, 2, 1, "", "is_stationary"], [613, 3, 1, "", "n_dims"], [613, 3, 1, "", "requires_vector_input"], [613, 2, 1, "", "set_params"], [613, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ConstantKernel": [[614, 2, 1, "", "__call__"], [614, 3, 1, "", "bounds"], [614, 2, 1, "", "clone_with_theta"], [614, 2, 1, "", "diag"], [614, 2, 1, "", "get_params"], [614, 3, 1, "", "hyperparameters"], [614, 2, 1, "", "is_stationary"], [614, 3, 1, "", "n_dims"], [614, 3, 1, "", "requires_vector_input"], [614, 2, 1, "", "set_params"], [614, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.DotProduct": [[615, 2, 1, "", "__call__"], [615, 3, 1, "", "bounds"], [615, 2, 1, "", "clone_with_theta"], [615, 2, 1, "", "diag"], [615, 2, 1, "", "get_params"], [615, 3, 1, "", "hyperparameters"], [615, 2, 1, "", "is_stationary"], [615, 3, 1, "", "n_dims"], [615, 3, 1, "", "requires_vector_input"], [615, 2, 1, "", "set_params"], [615, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.ExpSineSquared": [[616, 2, 1, "", "__call__"], [616, 3, 1, "", "bounds"], [616, 2, 1, "", "clone_with_theta"], [616, 2, 1, "", "diag"], [616, 2, 1, "", "get_params"], [616, 3, 1, "", "hyperparameter_length_scale"], [616, 3, 1, "", "hyperparameters"], [616, 2, 1, "", "is_stationary"], [616, 3, 1, "", "n_dims"], [616, 3, 1, "", "requires_vector_input"], [616, 2, 1, "", "set_params"], [616, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Exponentiation": [[617, 2, 1, "", "__call__"], [617, 3, 1, "", "bounds"], [617, 2, 1, "", "clone_with_theta"], [617, 2, 1, "", "diag"], [617, 2, 1, "", "get_params"], [617, 3, 1, "", "hyperparameters"], [617, 2, 1, "", "is_stationary"], [617, 3, 1, "", "n_dims"], [617, 3, 1, "", "requires_vector_input"], [617, 2, 1, "", "set_params"], [617, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Hyperparameter": [[618, 6, 1, "", "bounds"], [618, 2, 1, "", "count"], [618, 6, 1, "", "fixed"], [618, 2, 1, "", "index"], [618, 6, 1, "", "n_elements"], [618, 6, 1, "", "name"], [618, 6, 1, "", "value_type"]], "sklearn.gaussian_process.kernels.Kernel": [[619, 2, 1, "", "__call__"], [619, 3, 1, "", "bounds"], [619, 2, 1, "", "clone_with_theta"], [619, 2, 1, "", "diag"], [619, 2, 1, "", "get_params"], [619, 3, 1, "", "hyperparameters"], [619, 2, 1, "", "is_stationary"], [619, 3, 1, "", "n_dims"], [619, 3, 1, "", "requires_vector_input"], [619, 2, 1, "", "set_params"], [619, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Matern": [[620, 2, 1, "", "__call__"], [620, 3, 1, "", "bounds"], [620, 2, 1, "", "clone_with_theta"], [620, 2, 1, "", "diag"], [620, 2, 1, "", "get_params"], [620, 3, 1, "", "hyperparameters"], [620, 2, 1, "", "is_stationary"], [620, 3, 1, "", "n_dims"], [620, 3, 1, "", "requires_vector_input"], [620, 2, 1, "", "set_params"], [620, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.PairwiseKernel": [[621, 2, 1, "", "__call__"], [621, 3, 1, "", "bounds"], [621, 2, 1, "", "clone_with_theta"], [621, 2, 1, "", "diag"], [621, 2, 1, "", "get_params"], [621, 3, 1, "", "hyperparameters"], [621, 2, 1, "", "is_stationary"], [621, 3, 1, "", "n_dims"], [621, 3, 1, "", "requires_vector_input"], [621, 2, 1, "", "set_params"], [621, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Product": [[622, 2, 1, "", "__call__"], [622, 3, 1, "", "bounds"], [622, 2, 1, "", "clone_with_theta"], [622, 2, 1, "", "diag"], [622, 2, 1, "", "get_params"], [622, 3, 1, "", "hyperparameters"], [622, 2, 1, "", "is_stationary"], [622, 3, 1, "", "n_dims"], [622, 3, 1, "", "requires_vector_input"], [622, 2, 1, "", "set_params"], [622, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RBF": [[623, 2, 1, "", "__call__"], [623, 3, 1, "", "bounds"], [623, 2, 1, "", "clone_with_theta"], [623, 2, 1, "", "diag"], [623, 2, 1, "", "get_params"], [623, 3, 1, "", "hyperparameters"], [623, 2, 1, "", "is_stationary"], [623, 3, 1, "", "n_dims"], [623, 3, 1, "", "requires_vector_input"], [623, 2, 1, "", "set_params"], [623, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.RationalQuadratic": [[624, 2, 1, "", "__call__"], [624, 3, 1, "", "bounds"], [624, 2, 1, "", "clone_with_theta"], [624, 2, 1, "", "diag"], [624, 2, 1, "", "get_params"], [624, 3, 1, "", "hyperparameters"], [624, 2, 1, "", "is_stationary"], [624, 3, 1, "", "n_dims"], [624, 3, 1, "", "requires_vector_input"], [624, 2, 1, "", "set_params"], [624, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.Sum": [[625, 2, 1, "", "__call__"], [625, 3, 1, "", "bounds"], [625, 2, 1, "", "clone_with_theta"], [625, 2, 1, "", "diag"], [625, 2, 1, "", "get_params"], [625, 3, 1, "", "hyperparameters"], [625, 2, 1, "", "is_stationary"], [625, 3, 1, "", "n_dims"], [625, 3, 1, "", "requires_vector_input"], [625, 2, 1, "", "set_params"], [625, 3, 1, "", "theta"]], "sklearn.gaussian_process.kernels.WhiteKernel": [[626, 2, 1, "", "__call__"], [626, 3, 1, "", "bounds"], [626, 2, 1, "", "clone_with_theta"], [626, 2, 1, "", "diag"], [626, 2, 1, "", "get_params"], [626, 3, 1, "", "hyperparameters"], [626, 2, 1, "", "is_stationary"], [626, 3, 1, "", "n_dims"], [626, 3, 1, "", "requires_vector_input"], [626, 2, 1, "", "set_params"], [626, 3, 1, "", "theta"]], "sklearn.impute": [[628, 1, 1, "", "IterativeImputer"], [629, 1, 1, "", "KNNImputer"], [630, 1, 1, "", "MissingIndicator"], [631, 1, 1, "", "SimpleImputer"]], "sklearn.impute.IterativeImputer": [[628, 2, 1, "", "fit"], [628, 2, 1, "", "fit_transform"], [628, 2, 1, "", "get_feature_names_out"], [628, 2, 1, "", "get_metadata_routing"], [628, 2, 1, "", "get_params"], [628, 2, 1, "", "set_output"], [628, 2, 1, "", "set_params"], [628, 2, 1, "", "transform"]], "sklearn.impute.KNNImputer": [[629, 2, 1, "", "fit"], [629, 2, 1, "", "fit_transform"], [629, 2, 1, "", "get_feature_names_out"], [629, 2, 1, "", "get_metadata_routing"], [629, 2, 1, "", "get_params"], [629, 2, 1, "", "set_output"], [629, 2, 1, "", "set_params"], [629, 2, 1, "", "transform"]], "sklearn.impute.MissingIndicator": [[630, 2, 1, "", "fit"], [630, 2, 1, "", "fit_transform"], [630, 2, 1, "", "get_feature_names_out"], [630, 2, 1, "", "get_metadata_routing"], [630, 2, 1, "", "get_params"], [630, 2, 1, "", "set_output"], [630, 2, 1, "", "set_params"], [630, 2, 1, "", "transform"]], "sklearn.impute.SimpleImputer": [[631, 2, 1, "", "fit"], [631, 2, 1, "", "fit_transform"], [631, 2, 1, "", "get_feature_names_out"], [631, 2, 1, "", "get_metadata_routing"], [631, 2, 1, "", "get_params"], [631, 2, 1, "", "inverse_transform"], [631, 2, 1, "", "set_output"], [631, 2, 1, "", "set_params"], [631, 2, 1, "", "transform"]], "sklearn.inspection": [[632, 1, 1, "", "DecisionBoundaryDisplay"], [633, 1, 1, "", "PartialDependenceDisplay"], [634, 4, 1, "", "partial_dependence"], [635, 4, 1, "", "permutation_importance"]], "sklearn.inspection.DecisionBoundaryDisplay": [[632, 2, 1, "", "from_estimator"], [632, 2, 1, "", "plot"]], "sklearn.inspection.PartialDependenceDisplay": [[633, 2, 1, "", "from_estimator"], [633, 2, 1, "", "plot"]], "sklearn.isotonic": [[636, 1, 1, "", "IsotonicRegression"], [637, 4, 1, "", "check_increasing"], [638, 4, 1, "", "isotonic_regression"]], "sklearn.isotonic.IsotonicRegression": [[636, 2, 1, "", "fit"], [636, 2, 1, "", "fit_transform"], [636, 2, 1, "", "get_feature_names_out"], [636, 2, 1, "", "get_metadata_routing"], [636, 2, 1, "", "get_params"], [636, 2, 1, "", "predict"], [636, 2, 1, "", "score"], [636, 2, 1, "", "set_fit_request"], [636, 2, 1, "", "set_output"], [636, 2, 1, "", "set_params"], [636, 2, 1, "", "set_predict_request"], [636, 2, 1, "", "set_score_request"], [636, 2, 1, "", "set_transform_request"], [636, 2, 1, "", "transform"]], "sklearn.kernel_approximation": [[639, 1, 1, "", "AdditiveChi2Sampler"], [640, 1, 1, "", "Nystroem"], [641, 1, 1, "", "PolynomialCountSketch"], [642, 1, 1, "", "RBFSampler"], [643, 1, 1, "", "SkewedChi2Sampler"]], "sklearn.kernel_approximation.AdditiveChi2Sampler": [[639, 2, 1, "", "fit"], [639, 2, 1, "", "fit_transform"], [639, 2, 1, "", "get_feature_names_out"], [639, 2, 1, "", "get_metadata_routing"], [639, 2, 1, "", "get_params"], [639, 2, 1, "", "set_output"], [639, 2, 1, "", "set_params"], [639, 2, 1, "", "transform"]], "sklearn.kernel_approximation.Nystroem": [[640, 2, 1, "", "fit"], [640, 2, 1, "", "fit_transform"], [640, 2, 1, "", "get_feature_names_out"], [640, 2, 1, "", "get_metadata_routing"], [640, 2, 1, "", "get_params"], [640, 2, 1, "", "set_output"], [640, 2, 1, "", "set_params"], [640, 2, 1, "", "transform"]], "sklearn.kernel_approximation.PolynomialCountSketch": [[641, 2, 1, "", "fit"], [641, 2, 1, "", "fit_transform"], [641, 2, 1, "", "get_feature_names_out"], [641, 2, 1, "", "get_metadata_routing"], [641, 2, 1, "", "get_params"], [641, 2, 1, "", "set_output"], [641, 2, 1, "", "set_params"], [641, 2, 1, "", "transform"]], "sklearn.kernel_approximation.RBFSampler": [[642, 2, 1, "", "fit"], [642, 2, 1, "", "fit_transform"], [642, 2, 1, "", "get_feature_names_out"], [642, 2, 1, "", "get_metadata_routing"], [642, 2, 1, "", "get_params"], [642, 2, 1, "", "set_output"], [642, 2, 1, "", "set_params"], [642, 2, 1, "", "transform"]], "sklearn.kernel_approximation.SkewedChi2Sampler": [[643, 2, 1, "", "fit"], [643, 2, 1, "", "fit_transform"], [643, 2, 1, "", "get_feature_names_out"], [643, 2, 1, "", "get_metadata_routing"], [643, 2, 1, "", "get_params"], [643, 2, 1, "", "set_output"], [643, 2, 1, "", "set_params"], [643, 2, 1, "", "transform"]], "sklearn.kernel_ridge": [[644, 1, 1, "", "KernelRidge"]], "sklearn.kernel_ridge.KernelRidge": [[644, 2, 1, "", "fit"], [644, 2, 1, "", "get_metadata_routing"], [644, 2, 1, "", "get_params"], [644, 2, 1, "", "predict"], [644, 2, 1, "", "score"], [644, 2, 1, "", "set_fit_request"], [644, 2, 1, "", "set_params"], [644, 2, 1, "", "set_score_request"]], "sklearn.linear_model": [[645, 1, 1, "", "ARDRegression"], [646, 1, 1, "", "BayesianRidge"], [647, 1, 1, "", "ElasticNet"], [648, 1, 1, "", "ElasticNetCV"], [649, 1, 1, "", "GammaRegressor"], [650, 1, 1, "", "HuberRegressor"], [651, 1, 1, "", "Lars"], [652, 1, 1, "", "LarsCV"], [653, 1, 1, "", "Lasso"], [654, 1, 1, "", "LassoCV"], [655, 1, 1, "", "LassoLars"], [656, 1, 1, "", "LassoLarsCV"], [657, 1, 1, "", "LassoLarsIC"], [658, 1, 1, "", "LinearRegression"], [659, 1, 1, "", "LogisticRegression"], [660, 1, 1, "", "LogisticRegressionCV"], [661, 1, 1, "", "MultiTaskElasticNet"], [662, 1, 1, "", "MultiTaskElasticNetCV"], [663, 1, 1, "", "MultiTaskLasso"], [664, 1, 1, "", "MultiTaskLassoCV"], [665, 1, 1, "", "OrthogonalMatchingPursuit"], [666, 1, 1, "", "OrthogonalMatchingPursuitCV"], [667, 1, 1, "", "PassiveAggressiveClassifier"], [668, 1, 1, "", "PassiveAggressiveRegressor"], [669, 1, 1, "", "Perceptron"], [670, 1, 1, "", "PoissonRegressor"], [671, 1, 1, "", "QuantileRegressor"], [672, 1, 1, "", "RANSACRegressor"], [673, 1, 1, "", "Ridge"], [674, 1, 1, "", "RidgeCV"], [675, 1, 1, "", "RidgeClassifier"], [676, 1, 1, "", "RidgeClassifierCV"], [677, 1, 1, "", "SGDClassifier"], [678, 1, 1, "", "SGDOneClassSVM"], [679, 1, 1, "", "SGDRegressor"], [680, 1, 1, "", "TheilSenRegressor"], [681, 1, 1, "", "TweedieRegressor"], [682, 4, 1, "", "enet_path"], [683, 4, 1, "", "lars_path"], [684, 4, 1, "", "lars_path_gram"], [685, 4, 1, "", "lasso_path"], [686, 4, 1, "", "orthogonal_mp"], [687, 4, 1, "", "orthogonal_mp_gram"], [688, 4, 1, "", "ridge_regression"]], "sklearn.linear_model.ARDRegression": [[645, 2, 1, "", "fit"], [645, 2, 1, "", "get_metadata_routing"], [645, 2, 1, "", "get_params"], [645, 2, 1, "", "predict"], [645, 2, 1, "", "score"], [645, 2, 1, "", "set_params"], [645, 2, 1, "", "set_predict_request"], [645, 2, 1, "", "set_score_request"]], "sklearn.linear_model.BayesianRidge": [[646, 2, 1, "", "fit"], [646, 2, 1, "", "get_metadata_routing"], [646, 2, 1, "", "get_params"], [646, 2, 1, "", "predict"], [646, 2, 1, "", "score"], [646, 2, 1, "", "set_fit_request"], [646, 2, 1, "", "set_params"], [646, 2, 1, "", "set_predict_request"], [646, 2, 1, "", "set_score_request"]], "sklearn.linear_model.ElasticNet": [[647, 2, 1, "", "fit"], [647, 2, 1, "", "get_metadata_routing"], [647, 2, 1, "", "get_params"], [647, 2, 1, "", "path"], [647, 2, 1, "", "predict"], [647, 2, 1, "", "score"], [647, 2, 1, "", "set_fit_request"], [647, 2, 1, "", "set_params"], [647, 2, 1, "", "set_score_request"], [647, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.ElasticNetCV": [[648, 2, 1, "", "fit"], [648, 2, 1, "", "get_metadata_routing"], [648, 2, 1, "", "get_params"], [648, 2, 1, "", "path"], [648, 2, 1, "", "predict"], [648, 2, 1, "", "score"], [648, 2, 1, "", "set_fit_request"], [648, 2, 1, "", "set_params"], [648, 2, 1, "", "set_score_request"]], "sklearn.linear_model.GammaRegressor": [[649, 2, 1, "", "fit"], [649, 2, 1, "", "get_metadata_routing"], [649, 2, 1, "", "get_params"], [649, 2, 1, "", "predict"], [649, 2, 1, "", "score"], [649, 2, 1, "", "set_fit_request"], [649, 2, 1, "", "set_params"], [649, 2, 1, "", "set_score_request"]], "sklearn.linear_model.HuberRegressor": [[650, 2, 1, "", "fit"], [650, 2, 1, "", "get_metadata_routing"], [650, 2, 1, "", "get_params"], [650, 2, 1, "", "predict"], [650, 2, 1, "", "score"], [650, 2, 1, "", "set_fit_request"], [650, 2, 1, "", "set_params"], [650, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lars": [[651, 2, 1, "", "fit"], [651, 2, 1, "", "get_metadata_routing"], [651, 2, 1, "", "get_params"], [651, 2, 1, "", "predict"], [651, 2, 1, "", "score"], [651, 2, 1, "", "set_fit_request"], [651, 2, 1, "", "set_params"], [651, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LarsCV": [[652, 2, 1, "", "fit"], [652, 2, 1, "", "get_metadata_routing"], [652, 2, 1, "", "get_params"], [652, 2, 1, "", "predict"], [652, 2, 1, "", "score"], [652, 2, 1, "", "set_fit_request"], [652, 2, 1, "", "set_params"], [652, 2, 1, "", "set_score_request"]], "sklearn.linear_model.Lasso": [[653, 2, 1, "", "fit"], [653, 2, 1, "", "get_metadata_routing"], [653, 2, 1, "", "get_params"], [653, 2, 1, "", "path"], [653, 2, 1, "", "predict"], [653, 2, 1, "", "score"], [653, 2, 1, "", "set_fit_request"], [653, 2, 1, "", "set_params"], [653, 2, 1, "", "set_score_request"], [653, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.LassoCV": [[654, 2, 1, "", "fit"], [654, 2, 1, "", "get_metadata_routing"], [654, 2, 1, "", "get_params"], [654, 2, 1, "", "path"], [654, 2, 1, "", "predict"], [654, 2, 1, "", "score"], [654, 2, 1, "", "set_fit_request"], [654, 2, 1, "", "set_params"], [654, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLars": [[655, 2, 1, "", "fit"], [655, 2, 1, "", "get_metadata_routing"], [655, 2, 1, "", "get_params"], [655, 2, 1, "", "predict"], [655, 2, 1, "", "score"], [655, 2, 1, "", "set_fit_request"], [655, 2, 1, "", "set_params"], [655, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsCV": [[656, 2, 1, "", "fit"], [656, 2, 1, "", "get_metadata_routing"], [656, 2, 1, "", "get_params"], [656, 2, 1, "", "predict"], [656, 2, 1, "", "score"], [656, 2, 1, "", "set_fit_request"], [656, 2, 1, "", "set_params"], [656, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LassoLarsIC": [[657, 2, 1, "", "fit"], [657, 2, 1, "", "get_metadata_routing"], [657, 2, 1, "", "get_params"], [657, 2, 1, "", "predict"], [657, 2, 1, "", "score"], [657, 2, 1, "", "set_fit_request"], [657, 2, 1, "", "set_params"], [657, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LinearRegression": [[658, 2, 1, "", "fit"], [658, 2, 1, "", "get_metadata_routing"], [658, 2, 1, "", "get_params"], [658, 2, 1, "", "predict"], [658, 2, 1, "", "score"], [658, 2, 1, "", "set_fit_request"], [658, 2, 1, "", "set_params"], [658, 2, 1, "", "set_score_request"]], "sklearn.linear_model.LogisticRegression": [[659, 2, 1, "", "decision_function"], [659, 2, 1, "", "densify"], [659, 2, 1, "", "fit"], [659, 2, 1, "", "get_metadata_routing"], [659, 2, 1, "", "get_params"], [659, 2, 1, "", "predict"], [659, 2, 1, "", "predict_log_proba"], [659, 2, 1, "", "predict_proba"], [659, 2, 1, "", "score"], [659, 2, 1, "", "set_fit_request"], [659, 2, 1, "", "set_params"], [659, 2, 1, "", "set_score_request"], [659, 2, 1, "", "sparsify"]], "sklearn.linear_model.LogisticRegressionCV": [[660, 2, 1, "", "decision_function"], [660, 2, 1, "", "densify"], [660, 2, 1, "", "fit"], [660, 2, 1, "", "get_metadata_routing"], [660, 2, 1, "", "get_params"], [660, 2, 1, "", "predict"], [660, 2, 1, "", "predict_log_proba"], [660, 2, 1, "", "predict_proba"], [660, 2, 1, "", "score"], [660, 2, 1, "", "set_fit_request"], [660, 2, 1, "", "set_params"], [660, 2, 1, "", "set_score_request"], [660, 2, 1, "", "sparsify"]], "sklearn.linear_model.MultiTaskElasticNet": [[661, 2, 1, "", "fit"], [661, 2, 1, "", "get_metadata_routing"], [661, 2, 1, "", "get_params"], [661, 2, 1, "", "path"], [661, 2, 1, "", "predict"], [661, 2, 1, "", "score"], [661, 2, 1, "", "set_fit_request"], [661, 2, 1, "", "set_params"], [661, 2, 1, "", "set_score_request"], [661, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskElasticNetCV": [[662, 2, 1, "", "fit"], [662, 2, 1, "", "get_metadata_routing"], [662, 2, 1, "", "get_params"], [662, 2, 1, "", "path"], [662, 2, 1, "", "predict"], [662, 2, 1, "", "score"], [662, 2, 1, "", "set_fit_request"], [662, 2, 1, "", "set_params"], [662, 2, 1, "", "set_score_request"]], "sklearn.linear_model.MultiTaskLasso": [[663, 2, 1, "", "fit"], [663, 2, 1, "", "get_metadata_routing"], [663, 2, 1, "", "get_params"], [663, 2, 1, "", "path"], [663, 2, 1, "", "predict"], [663, 2, 1, "", "score"], [663, 2, 1, "", "set_fit_request"], [663, 2, 1, "", "set_params"], [663, 2, 1, "", "set_score_request"], [663, 3, 1, "", "sparse_coef_"]], "sklearn.linear_model.MultiTaskLassoCV": [[664, 2, 1, "", "fit"], [664, 2, 1, "", "get_metadata_routing"], [664, 2, 1, "", "get_params"], [664, 2, 1, "", "path"], [664, 2, 1, "", "predict"], [664, 2, 1, "", "score"], [664, 2, 1, "", "set_fit_request"], [664, 2, 1, "", "set_params"], [664, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuit": [[665, 2, 1, "", "fit"], [665, 2, 1, "", "get_metadata_routing"], [665, 2, 1, "", "get_params"], [665, 2, 1, "", "predict"], [665, 2, 1, "", "score"], [665, 2, 1, "", "set_params"], [665, 2, 1, "", "set_score_request"]], "sklearn.linear_model.OrthogonalMatchingPursuitCV": [[666, 2, 1, "", "fit"], [666, 2, 1, "", "get_metadata_routing"], [666, 2, 1, "", "get_params"], [666, 2, 1, "", "predict"], [666, 2, 1, "", "score"], [666, 2, 1, "", "set_params"], [666, 2, 1, "", "set_score_request"]], "sklearn.linear_model.PassiveAggressiveClassifier": [[667, 2, 1, "", "decision_function"], [667, 2, 1, "", "densify"], [667, 2, 1, "", "fit"], [667, 2, 1, "", "get_metadata_routing"], [667, 2, 1, "", "get_params"], [667, 2, 1, "", "partial_fit"], [667, 2, 1, "", "predict"], [667, 2, 1, "", "score"], [667, 2, 1, "", "set_fit_request"], [667, 2, 1, "", "set_params"], [667, 2, 1, "", "set_partial_fit_request"], [667, 2, 1, "", "set_score_request"], [667, 2, 1, "", "sparsify"]], "sklearn.linear_model.PassiveAggressiveRegressor": [[668, 2, 1, "", "densify"], [668, 2, 1, "", "fit"], [668, 2, 1, "", "get_metadata_routing"], [668, 2, 1, "", "get_params"], [668, 2, 1, "", "partial_fit"], [668, 2, 1, "", "predict"], [668, 2, 1, "", "score"], [668, 2, 1, "", "set_fit_request"], [668, 2, 1, "", "set_params"], [668, 2, 1, "", "set_partial_fit_request"], [668, 2, 1, "", "set_score_request"], [668, 2, 1, "", "sparsify"]], "sklearn.linear_model.Perceptron": [[669, 2, 1, "", "decision_function"], [669, 2, 1, "", "densify"], [669, 2, 1, "", "fit"], [669, 2, 1, "", "get_metadata_routing"], [669, 2, 1, "", "get_params"], [669, 2, 1, "", "partial_fit"], [669, 2, 1, "", "predict"], [669, 2, 1, "", "score"], [669, 2, 1, "", "set_fit_request"], [669, 2, 1, "", "set_params"], [669, 2, 1, "", "set_partial_fit_request"], [669, 2, 1, "", "set_score_request"], [669, 2, 1, "", "sparsify"]], "sklearn.linear_model.PoissonRegressor": [[670, 2, 1, "", "fit"], [670, 2, 1, "", "get_metadata_routing"], [670, 2, 1, "", "get_params"], [670, 2, 1, "", "predict"], [670, 2, 1, "", "score"], [670, 2, 1, "", "set_fit_request"], [670, 2, 1, "", "set_params"], [670, 2, 1, "", "set_score_request"]], "sklearn.linear_model.QuantileRegressor": [[671, 2, 1, "", "fit"], [671, 2, 1, "", "get_metadata_routing"], [671, 2, 1, "", "get_params"], [671, 2, 1, "", "predict"], [671, 2, 1, "", "score"], [671, 2, 1, "", "set_fit_request"], [671, 2, 1, "", "set_params"], [671, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RANSACRegressor": [[672, 2, 1, "", "fit"], [672, 2, 1, "", "get_metadata_routing"], [672, 2, 1, "", "get_params"], [672, 2, 1, "", "predict"], [672, 2, 1, "", "score"], [672, 2, 1, "", "set_fit_request"], [672, 2, 1, "", "set_params"]], "sklearn.linear_model.Ridge": [[673, 2, 1, "", "fit"], [673, 2, 1, "", "get_metadata_routing"], [673, 2, 1, "", "get_params"], [673, 2, 1, "", "predict"], [673, 2, 1, "", "score"], [673, 2, 1, "", "set_fit_request"], [673, 2, 1, "", "set_params"], [673, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeCV": [[674, 2, 1, "", "fit"], [674, 2, 1, "", "get_metadata_routing"], [674, 2, 1, "", "get_params"], [674, 2, 1, "", "predict"], [674, 2, 1, "", "score"], [674, 2, 1, "", "set_fit_request"], [674, 2, 1, "", "set_params"], [674, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifier": [[675, 3, 1, "", "classes_"], [675, 2, 1, "", "decision_function"], [675, 2, 1, "", "fit"], [675, 2, 1, "", "get_metadata_routing"], [675, 2, 1, "", "get_params"], [675, 2, 1, "", "predict"], [675, 2, 1, "", "score"], [675, 2, 1, "", "set_fit_request"], [675, 2, 1, "", "set_params"], [675, 2, 1, "", "set_score_request"]], "sklearn.linear_model.RidgeClassifierCV": [[676, 3, 1, "", "classes_"], [676, 2, 1, "", "decision_function"], [676, 2, 1, "", "fit"], [676, 2, 1, "", "get_metadata_routing"], [676, 2, 1, "", "get_params"], [676, 2, 1, "", "predict"], [676, 2, 1, "", "score"], [676, 2, 1, "", "set_fit_request"], [676, 2, 1, "", "set_params"], [676, 2, 1, "", "set_score_request"]], "sklearn.linear_model.SGDClassifier": [[677, 2, 1, "", "decision_function"], [677, 2, 1, "", "densify"], [677, 2, 1, "", "fit"], [677, 2, 1, "", "get_metadata_routing"], [677, 2, 1, "", "get_params"], [677, 2, 1, "", "partial_fit"], [677, 2, 1, "", "predict"], [677, 2, 1, "", "predict_log_proba"], [677, 2, 1, "", "predict_proba"], [677, 2, 1, "", "score"], [677, 2, 1, "", "set_fit_request"], [677, 2, 1, "", "set_params"], [677, 2, 1, "", "set_partial_fit_request"], [677, 2, 1, "", "set_score_request"], [677, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDOneClassSVM": [[678, 2, 1, "", "decision_function"], [678, 2, 1, "", "densify"], [678, 2, 1, "", "fit"], [678, 2, 1, "", "fit_predict"], [678, 2, 1, "", "get_metadata_routing"], [678, 2, 1, "", "get_params"], [678, 2, 1, "", "partial_fit"], [678, 2, 1, "", "predict"], [678, 2, 1, "", "score_samples"], [678, 2, 1, "", "set_fit_request"], [678, 2, 1, "", "set_params"], [678, 2, 1, "", "set_partial_fit_request"], [678, 2, 1, "", "sparsify"]], "sklearn.linear_model.SGDRegressor": [[679, 2, 1, "", "densify"], [679, 2, 1, "", "fit"], [679, 2, 1, "", "get_metadata_routing"], [679, 2, 1, "", "get_params"], [679, 2, 1, "", "partial_fit"], [679, 2, 1, "", "predict"], [679, 2, 1, "", "score"], [679, 2, 1, "", "set_fit_request"], [679, 2, 1, "", "set_params"], [679, 2, 1, "", "set_partial_fit_request"], [679, 2, 1, "", "set_score_request"], [679, 2, 1, "", "sparsify"]], "sklearn.linear_model.TheilSenRegressor": [[680, 2, 1, "", "fit"], [680, 2, 1, "", "get_metadata_routing"], [680, 2, 1, "", "get_params"], [680, 2, 1, "", "predict"], [680, 2, 1, "", "score"], [680, 2, 1, "", "set_params"], [680, 2, 1, "", "set_score_request"]], "sklearn.linear_model.TweedieRegressor": [[681, 2, 1, "", "fit"], [681, 2, 1, "", "get_metadata_routing"], [681, 2, 1, "", "get_params"], [681, 2, 1, "", "predict"], [681, 2, 1, "", "score"], [681, 2, 1, "", "set_fit_request"], [681, 2, 1, "", "set_params"], [681, 2, 1, "", "set_score_request"]], "sklearn.manifold": [[689, 1, 1, "", "Isomap"], [690, 1, 1, "", "LocallyLinearEmbedding"], [691, 1, 1, "", "MDS"], [692, 1, 1, "", "SpectralEmbedding"], [693, 1, 1, "", "TSNE"], [694, 4, 1, "", "locally_linear_embedding"], [695, 4, 1, "", "smacof"], [696, 4, 1, "", "spectral_embedding"], [697, 4, 1, "", "trustworthiness"]], "sklearn.manifold.Isomap": [[689, 2, 1, "", "fit"], [689, 2, 1, "", "fit_transform"], [689, 2, 1, "", "get_feature_names_out"], [689, 2, 1, "", "get_metadata_routing"], [689, 2, 1, "", "get_params"], [689, 2, 1, "", "reconstruction_error"], [689, 2, 1, "", "set_output"], [689, 2, 1, "", "set_params"], [689, 2, 1, "", "transform"]], "sklearn.manifold.LocallyLinearEmbedding": [[690, 2, 1, "", "fit"], [690, 2, 1, "", "fit_transform"], [690, 2, 1, "", "get_feature_names_out"], [690, 2, 1, "", "get_metadata_routing"], [690, 2, 1, "", "get_params"], [690, 2, 1, "", "set_output"], [690, 2, 1, "", "set_params"], [690, 2, 1, "", "transform"]], "sklearn.manifold.MDS": [[691, 2, 1, "", "fit"], [691, 2, 1, "", "fit_transform"], [691, 2, 1, "", "get_metadata_routing"], [691, 2, 1, "", "get_params"], [691, 2, 1, "", "set_fit_request"], [691, 2, 1, "", "set_params"]], "sklearn.manifold.SpectralEmbedding": [[692, 2, 1, "", "fit"], [692, 2, 1, "", "fit_transform"], [692, 2, 1, "", "get_metadata_routing"], [692, 2, 1, "", "get_params"], [692, 2, 1, "", "set_params"]], "sklearn.manifold.TSNE": [[693, 2, 1, "", "fit"], [693, 2, 1, "", "fit_transform"], [693, 2, 1, "", "get_feature_names_out"], [693, 2, 1, "", "get_metadata_routing"], [693, 2, 1, "", "get_params"], [693, 2, 1, "", "set_output"], [693, 2, 1, "", "set_params"]], "sklearn.metrics": [[698, 1, 1, "", "ConfusionMatrixDisplay"], [699, 1, 1, "", "DetCurveDisplay"], [700, 1, 1, "", "DistanceMetric"], [701, 1, 1, "", "PrecisionRecallDisplay"], [702, 1, 1, "", "PredictionErrorDisplay"], [703, 1, 1, "", "RocCurveDisplay"], [704, 4, 1, "", "accuracy_score"], [705, 4, 1, "", "adjusted_mutual_info_score"], [706, 4, 1, "", "adjusted_rand_score"], [707, 4, 1, "", "auc"], [708, 4, 1, "", "average_precision_score"], [709, 4, 1, "", "balanced_accuracy_score"], [710, 4, 1, "", "brier_score_loss"], [711, 4, 1, "", "calinski_harabasz_score"], [712, 4, 1, "", "check_scoring"], [713, 4, 1, "", "class_likelihood_ratios"], [714, 4, 1, "", "classification_report"], [27, 0, 0, "-", "cluster"], [717, 4, 1, "", "cohen_kappa_score"], [718, 4, 1, "", "completeness_score"], [719, 4, 1, "", "confusion_matrix"], [720, 4, 1, "", "consensus_score"], [721, 4, 1, "", "coverage_error"], [722, 4, 1, "", "d2_absolute_error_score"], [723, 4, 1, "", "d2_log_loss_score"], [724, 4, 1, "", "d2_pinball_score"], [725, 4, 1, "", "d2_tweedie_score"], [726, 4, 1, "", "davies_bouldin_score"], [727, 4, 1, "", "dcg_score"], [728, 4, 1, "", "det_curve"], [729, 4, 1, "", "explained_variance_score"], [730, 4, 1, "", "f1_score"], [731, 4, 1, "", "fbeta_score"], [732, 4, 1, "", "fowlkes_mallows_score"], [733, 4, 1, "", "get_scorer"], [734, 4, 1, "", "get_scorer_names"], [735, 4, 1, "", "hamming_loss"], [736, 4, 1, "", "hinge_loss"], [737, 4, 1, "", "homogeneity_completeness_v_measure"], [738, 4, 1, "", "homogeneity_score"], [739, 4, 1, "", "jaccard_score"], [740, 4, 1, "", "label_ranking_average_precision_score"], [741, 4, 1, "", "label_ranking_loss"], [742, 4, 1, "", "log_loss"], [743, 4, 1, "", "make_scorer"], [744, 4, 1, "", "matthews_corrcoef"], [745, 4, 1, "", "max_error"], [746, 4, 1, "", "mean_absolute_error"], [747, 4, 1, "", "mean_absolute_percentage_error"], [748, 4, 1, "", "mean_gamma_deviance"], [749, 4, 1, "", "mean_pinball_loss"], [750, 4, 1, "", "mean_poisson_deviance"], [751, 4, 1, "", "mean_squared_error"], [752, 4, 1, "", "mean_squared_log_error"], [753, 4, 1, "", "mean_tweedie_deviance"], [754, 4, 1, "", "median_absolute_error"], [755, 4, 1, "", "multilabel_confusion_matrix"], [756, 4, 1, "", "mutual_info_score"], [757, 4, 1, "", "ndcg_score"], [758, 4, 1, "", "normalized_mutual_info_score"], [27, 0, 0, "-", "pairwise"], [779, 4, 1, "", "pairwise_distances"], [780, 4, 1, "", "pairwise_distances_argmin"], [781, 4, 1, "", "pairwise_distances_argmin_min"], [782, 4, 1, "", "pairwise_distances_chunked"], [783, 4, 1, "", "precision_recall_curve"], [784, 4, 1, "", "precision_recall_fscore_support"], [785, 4, 1, "", "precision_score"], [786, 4, 1, "", "r2_score"], [787, 4, 1, "", "rand_score"], [788, 4, 1, "", "recall_score"], [789, 4, 1, "", "roc_auc_score"], [790, 4, 1, "", "roc_curve"], [791, 4, 1, "", "root_mean_squared_error"], [792, 4, 1, "", "root_mean_squared_log_error"], [793, 4, 1, "", "silhouette_samples"], [794, 4, 1, "", "silhouette_score"], [795, 4, 1, "", "top_k_accuracy_score"], [796, 4, 1, "", "v_measure_score"], [797, 4, 1, "", "zero_one_loss"]], "sklearn.metrics.ConfusionMatrixDisplay": [[698, 2, 1, "", "from_estimator"], [698, 2, 1, "", "from_predictions"], [698, 2, 1, "", "plot"]], "sklearn.metrics.DetCurveDisplay": [[699, 2, 1, "", "from_estimator"], [699, 2, 1, "", "from_predictions"], [699, 2, 1, "", "plot"]], "sklearn.metrics.DistanceMetric": [[700, 2, 1, "", "get_metric"]], "sklearn.metrics.PrecisionRecallDisplay": [[701, 2, 1, "", "from_estimator"], [701, 2, 1, "", "from_predictions"], [701, 2, 1, "", "plot"]], "sklearn.metrics.PredictionErrorDisplay": [[702, 2, 1, "", "from_estimator"], [702, 2, 1, "", "from_predictions"], [702, 2, 1, "", "plot"]], "sklearn.metrics.RocCurveDisplay": [[703, 2, 1, "", "from_estimator"], [703, 2, 1, "", "from_predictions"], [703, 2, 1, "", "plot"]], "sklearn.metrics.cluster": [[715, 4, 1, "", "contingency_matrix"], [716, 4, 1, "", "pair_confusion_matrix"]], "sklearn.metrics.pairwise": [[759, 4, 1, "", "additive_chi2_kernel"], [760, 4, 1, "", "chi2_kernel"], [761, 4, 1, "", "cosine_distances"], [762, 4, 1, "", "cosine_similarity"], [763, 4, 1, "", "distance_metrics"], [764, 4, 1, "", "euclidean_distances"], [765, 4, 1, "", "haversine_distances"], [766, 4, 1, "", "kernel_metrics"], [767, 4, 1, "", "laplacian_kernel"], [768, 4, 1, "", "linear_kernel"], [769, 4, 1, "", "manhattan_distances"], [770, 4, 1, "", "nan_euclidean_distances"], [771, 4, 1, "", "paired_cosine_distances"], [772, 4, 1, "", "paired_distances"], [773, 4, 1, "", "paired_euclidean_distances"], [774, 4, 1, "", "paired_manhattan_distances"], [775, 4, 1, "", "pairwise_kernels"], [776, 4, 1, "", "polynomial_kernel"], [777, 4, 1, "", "rbf_kernel"], [778, 4, 1, "", "sigmoid_kernel"]], "sklearn.mixture": [[798, 1, 1, "", "BayesianGaussianMixture"], [799, 1, 1, "", "GaussianMixture"]], "sklearn.mixture.BayesianGaussianMixture": [[798, 2, 1, "", "fit"], [798, 2, 1, "", "fit_predict"], [798, 2, 1, "", "get_metadata_routing"], [798, 2, 1, "", "get_params"], [798, 2, 1, "", "predict"], [798, 2, 1, "", "predict_proba"], [798, 2, 1, "", "sample"], [798, 2, 1, "", "score"], [798, 2, 1, "", "score_samples"], [798, 2, 1, "", "set_params"]], "sklearn.mixture.GaussianMixture": [[799, 2, 1, "", "aic"], [799, 2, 1, "", "bic"], [799, 2, 1, "", "fit"], [799, 2, 1, "", "fit_predict"], [799, 2, 1, "", "get_metadata_routing"], [799, 2, 1, "", "get_params"], [799, 2, 1, "", "predict"], [799, 2, 1, "", "predict_proba"], [799, 2, 1, "", "sample"], [799, 2, 1, "", "score"], [799, 2, 1, "", "score_samples"], [799, 2, 1, "", "set_params"]], "sklearn.model_selection": [[800, 1, 1, "", "FixedThresholdClassifier"], [801, 1, 1, "", "GridSearchCV"], [802, 1, 1, "", "GroupKFold"], [803, 1, 1, "", "GroupShuffleSplit"], [804, 1, 1, "", "HalvingGridSearchCV"], [805, 1, 1, "", "HalvingRandomSearchCV"], [806, 1, 1, "", "KFold"], [807, 1, 1, "", "LearningCurveDisplay"], [808, 1, 1, "", "LeaveOneGroupOut"], [809, 1, 1, "", "LeaveOneOut"], [810, 1, 1, "", "LeavePGroupsOut"], [811, 1, 1, "", "LeavePOut"], [812, 1, 1, "", "ParameterGrid"], [813, 1, 1, "", "ParameterSampler"], [814, 1, 1, "", "PredefinedSplit"], [815, 1, 1, "", "RandomizedSearchCV"], [816, 1, 1, "", "RepeatedKFold"], [817, 1, 1, "", "RepeatedStratifiedKFold"], [818, 1, 1, "", "ShuffleSplit"], [819, 1, 1, "", "StratifiedGroupKFold"], [820, 1, 1, "", "StratifiedKFold"], [821, 1, 1, "", "StratifiedShuffleSplit"], [822, 1, 1, "", "TimeSeriesSplit"], [823, 1, 1, "", "TunedThresholdClassifierCV"], [824, 1, 1, "", "ValidationCurveDisplay"], [825, 4, 1, "", "check_cv"], [826, 4, 1, "", "cross_val_predict"], [827, 4, 1, "", "cross_val_score"], [828, 4, 1, "", "cross_validate"], [829, 4, 1, "", "learning_curve"], [830, 4, 1, "", "permutation_test_score"], [831, 4, 1, "", "train_test_split"], [832, 4, 1, "", "validation_curve"]], "sklearn.model_selection.FixedThresholdClassifier": [[800, 3, 1, "", "classes_"], [800, 2, 1, "", "decision_function"], [800, 2, 1, "", "fit"], [800, 2, 1, "", "get_metadata_routing"], [800, 2, 1, "", "get_params"], [800, 2, 1, "", "predict"], [800, 2, 1, "", "predict_log_proba"], [800, 2, 1, "", "predict_proba"], [800, 2, 1, "", "score"], [800, 2, 1, "", "set_params"], [800, 2, 1, "", "set_score_request"]], "sklearn.model_selection.GridSearchCV": [[801, 3, 1, "", "classes_"], [801, 2, 1, "", "decision_function"], [801, 2, 1, "", "fit"], [801, 2, 1, "", "get_metadata_routing"], [801, 2, 1, "", "get_params"], [801, 2, 1, "", "inverse_transform"], [801, 3, 1, "", "n_features_in_"], [801, 2, 1, "", "predict"], [801, 2, 1, "", "predict_log_proba"], [801, 2, 1, "", "predict_proba"], [801, 2, 1, "", "score"], [801, 2, 1, "", "score_samples"], [801, 2, 1, "", "set_params"], [801, 2, 1, "", "transform"]], "sklearn.model_selection.GroupKFold": [[802, 2, 1, "", "get_metadata_routing"], [802, 2, 1, "", "get_n_splits"], [802, 2, 1, "", "set_split_request"], [802, 2, 1, "", "split"]], "sklearn.model_selection.GroupShuffleSplit": [[803, 2, 1, "", "get_metadata_routing"], [803, 2, 1, "", "get_n_splits"], [803, 2, 1, "", "set_split_request"], [803, 2, 1, "", "split"]], "sklearn.model_selection.HalvingGridSearchCV": [[804, 3, 1, "", "classes_"], [804, 2, 1, "", "decision_function"], [804, 2, 1, "", "fit"], [804, 2, 1, "", "get_metadata_routing"], [804, 2, 1, "", "get_params"], [804, 2, 1, "", "inverse_transform"], [804, 3, 1, "", "n_features_in_"], [804, 2, 1, "", "predict"], [804, 2, 1, "", "predict_log_proba"], [804, 2, 1, "", "predict_proba"], [804, 2, 1, "", "score"], [804, 2, 1, "", "score_samples"], [804, 2, 1, "", "set_params"], [804, 2, 1, "", "transform"]], "sklearn.model_selection.HalvingRandomSearchCV": [[805, 3, 1, "", "classes_"], [805, 2, 1, "", "decision_function"], [805, 2, 1, "", "fit"], [805, 2, 1, "", "get_metadata_routing"], [805, 2, 1, "", "get_params"], [805, 2, 1, "", "inverse_transform"], [805, 3, 1, "", "n_features_in_"], [805, 2, 1, "", "predict"], [805, 2, 1, "", "predict_log_proba"], [805, 2, 1, "", "predict_proba"], [805, 2, 1, "", "score"], [805, 2, 1, "", "score_samples"], [805, 2, 1, "", "set_params"], [805, 2, 1, "", "transform"]], "sklearn.model_selection.KFold": [[806, 2, 1, "", "get_metadata_routing"], [806, 2, 1, "", "get_n_splits"], [806, 2, 1, "", "split"]], "sklearn.model_selection.LearningCurveDisplay": [[807, 2, 1, "", "from_estimator"], [807, 2, 1, "", "plot"]], "sklearn.model_selection.LeaveOneGroupOut": [[808, 2, 1, "", "get_metadata_routing"], [808, 2, 1, "", "get_n_splits"], [808, 2, 1, "", "set_split_request"], [808, 2, 1, "", "split"]], "sklearn.model_selection.LeaveOneOut": [[809, 2, 1, "", "get_metadata_routing"], [809, 2, 1, "", "get_n_splits"], [809, 2, 1, "", "split"]], "sklearn.model_selection.LeavePGroupsOut": [[810, 2, 1, "", "get_metadata_routing"], [810, 2, 1, "", "get_n_splits"], [810, 2, 1, "", "set_split_request"], [810, 2, 1, "", "split"]], "sklearn.model_selection.LeavePOut": [[811, 2, 1, "", "get_metadata_routing"], [811, 2, 1, "", "get_n_splits"], [811, 2, 1, "", "split"]], "sklearn.model_selection.PredefinedSplit": [[814, 2, 1, "", "get_metadata_routing"], [814, 2, 1, "", "get_n_splits"], [814, 2, 1, "", "split"]], "sklearn.model_selection.RandomizedSearchCV": [[815, 3, 1, "", "classes_"], [815, 2, 1, "", "decision_function"], [815, 2, 1, "", "fit"], [815, 2, 1, "", "get_metadata_routing"], [815, 2, 1, "", "get_params"], [815, 2, 1, "", "inverse_transform"], [815, 3, 1, "", "n_features_in_"], [815, 2, 1, "", "predict"], [815, 2, 1, "", "predict_log_proba"], [815, 2, 1, "", "predict_proba"], [815, 2, 1, "", "score"], [815, 2, 1, "", "score_samples"], [815, 2, 1, "", "set_params"], [815, 2, 1, "", "transform"]], "sklearn.model_selection.RepeatedKFold": [[816, 2, 1, "", "get_metadata_routing"], [816, 2, 1, "", "get_n_splits"], [816, 2, 1, "", "split"]], "sklearn.model_selection.RepeatedStratifiedKFold": [[817, 2, 1, "", "get_metadata_routing"], [817, 2, 1, "", "get_n_splits"], [817, 2, 1, "", "split"]], "sklearn.model_selection.ShuffleSplit": [[818, 2, 1, "", "get_metadata_routing"], [818, 2, 1, "", "get_n_splits"], [818, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedGroupKFold": [[819, 2, 1, "", "get_metadata_routing"], [819, 2, 1, "", "get_n_splits"], [819, 2, 1, "", "set_split_request"], [819, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedKFold": [[820, 2, 1, "", "get_metadata_routing"], [820, 2, 1, "", "get_n_splits"], [820, 2, 1, "", "split"]], "sklearn.model_selection.StratifiedShuffleSplit": [[821, 2, 1, "", "get_metadata_routing"], [821, 2, 1, "", "get_n_splits"], [821, 2, 1, "", "split"]], "sklearn.model_selection.TimeSeriesSplit": [[822, 2, 1, "", "get_metadata_routing"], [822, 2, 1, "", "get_n_splits"], [822, 2, 1, "", "split"]], "sklearn.model_selection.TunedThresholdClassifierCV": [[823, 3, 1, "", "classes_"], [823, 2, 1, "", "decision_function"], [823, 2, 1, "", "fit"], [823, 2, 1, "", "get_metadata_routing"], [823, 2, 1, "", "get_params"], [823, 2, 1, "", "predict"], [823, 2, 1, "", "predict_log_proba"], [823, 2, 1, "", "predict_proba"], [823, 2, 1, "", "score"], [823, 2, 1, "", "set_params"], [823, 2, 1, "", "set_score_request"]], "sklearn.model_selection.ValidationCurveDisplay": [[824, 2, 1, "", "from_estimator"], [824, 2, 1, "", "plot"]], "sklearn.multiclass": [[833, 1, 1, "", "OneVsOneClassifier"], [834, 1, 1, "", "OneVsRestClassifier"], [835, 1, 1, "", "OutputCodeClassifier"]], "sklearn.multiclass.OneVsOneClassifier": [[833, 2, 1, "", "decision_function"], [833, 2, 1, "", "fit"], [833, 2, 1, "", "get_metadata_routing"], [833, 2, 1, "", "get_params"], [833, 3, 1, "", "n_classes_"], [833, 2, 1, "", "partial_fit"], [833, 2, 1, "", "predict"], [833, 2, 1, "", "score"], [833, 2, 1, "", "set_params"], [833, 2, 1, "", "set_partial_fit_request"], [833, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OneVsRestClassifier": [[834, 2, 1, "", "decision_function"], [834, 2, 1, "", "fit"], [834, 2, 1, "", "get_metadata_routing"], [834, 2, 1, "", "get_params"], [834, 3, 1, "", "multilabel_"], [834, 3, 1, "", "n_classes_"], [834, 2, 1, "", "partial_fit"], [834, 2, 1, "", "predict"], [834, 2, 1, "", "predict_proba"], [834, 2, 1, "", "score"], [834, 2, 1, "", "set_params"], [834, 2, 1, "", "set_partial_fit_request"], [834, 2, 1, "", "set_score_request"]], "sklearn.multiclass.OutputCodeClassifier": [[835, 2, 1, "", "fit"], [835, 2, 1, "", "get_metadata_routing"], [835, 2, 1, "", "get_params"], [835, 2, 1, "", "predict"], [835, 2, 1, "", "score"], [835, 2, 1, "", "set_params"], [835, 2, 1, "", "set_score_request"]], "sklearn.multioutput": [[836, 1, 1, "", "ClassifierChain"], [837, 1, 1, "", "MultiOutputClassifier"], [838, 1, 1, "", "MultiOutputRegressor"], [839, 1, 1, "", "RegressorChain"]], "sklearn.multioutput.ClassifierChain": [[836, 2, 1, "", "decision_function"], [836, 2, 1, "", "fit"], [836, 2, 1, "", "get_metadata_routing"], [836, 2, 1, "", "get_params"], [836, 2, 1, "", "predict"], [836, 2, 1, "", "predict_log_proba"], [836, 2, 1, "", "predict_proba"], [836, 2, 1, "", "score"], [836, 2, 1, "", "set_params"], [836, 2, 1, "", "set_score_request"]], "sklearn.multioutput.MultiOutputClassifier": [[837, 2, 1, "", "fit"], [837, 2, 1, "", "get_metadata_routing"], [837, 2, 1, "", "get_params"], [837, 2, 1, "", "partial_fit"], [837, 2, 1, "", "predict"], [837, 2, 1, "", "predict_proba"], [837, 2, 1, "", "score"], [837, 2, 1, "", "set_fit_request"], [837, 2, 1, "", "set_params"], [837, 2, 1, "", "set_partial_fit_request"]], "sklearn.multioutput.MultiOutputRegressor": [[838, 2, 1, "", "fit"], [838, 2, 1, "", "get_metadata_routing"], [838, 2, 1, "", "get_params"], [838, 2, 1, "", "partial_fit"], [838, 2, 1, "", "predict"], [838, 2, 1, "", "score"], [838, 2, 1, "", "set_fit_request"], [838, 2, 1, "", "set_params"], [838, 2, 1, "", "set_partial_fit_request"], [838, 2, 1, "", "set_score_request"]], "sklearn.multioutput.RegressorChain": [[839, 2, 1, "", "fit"], [839, 2, 1, "", "get_metadata_routing"], [839, 2, 1, "", "get_params"], [839, 2, 1, "", "predict"], [839, 2, 1, "", "score"], [839, 2, 1, "", "set_params"], [839, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes": [[840, 1, 1, "", "BernoulliNB"], [841, 1, 1, "", "CategoricalNB"], [842, 1, 1, "", "ComplementNB"], [843, 1, 1, "", "GaussianNB"], [844, 1, 1, "", "MultinomialNB"]], "sklearn.naive_bayes.BernoulliNB": [[840, 2, 1, "", "fit"], [840, 2, 1, "", "get_metadata_routing"], [840, 2, 1, "", "get_params"], [840, 2, 1, "", "partial_fit"], [840, 2, 1, "", "predict"], [840, 2, 1, "", "predict_joint_log_proba"], [840, 2, 1, "", "predict_log_proba"], [840, 2, 1, "", "predict_proba"], [840, 2, 1, "", "score"], [840, 2, 1, "", "set_fit_request"], [840, 2, 1, "", "set_params"], [840, 2, 1, "", "set_partial_fit_request"], [840, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.CategoricalNB": [[841, 2, 1, "", "fit"], [841, 2, 1, "", "get_metadata_routing"], [841, 2, 1, "", "get_params"], [841, 2, 1, "", "partial_fit"], [841, 2, 1, "", "predict"], [841, 2, 1, "", "predict_joint_log_proba"], [841, 2, 1, "", "predict_log_proba"], [841, 2, 1, "", "predict_proba"], [841, 2, 1, "", "score"], [841, 2, 1, "", "set_fit_request"], [841, 2, 1, "", "set_params"], [841, 2, 1, "", "set_partial_fit_request"], [841, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.ComplementNB": [[842, 2, 1, "", "fit"], [842, 2, 1, "", "get_metadata_routing"], [842, 2, 1, "", "get_params"], [842, 2, 1, "", "partial_fit"], [842, 2, 1, "", "predict"], [842, 2, 1, "", "predict_joint_log_proba"], [842, 2, 1, "", "predict_log_proba"], [842, 2, 1, "", "predict_proba"], [842, 2, 1, "", "score"], [842, 2, 1, "", "set_fit_request"], [842, 2, 1, "", "set_params"], [842, 2, 1, "", "set_partial_fit_request"], [842, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.GaussianNB": [[843, 2, 1, "", "fit"], [843, 2, 1, "", "get_metadata_routing"], [843, 2, 1, "", "get_params"], [843, 2, 1, "", "partial_fit"], [843, 2, 1, "", "predict"], [843, 2, 1, "", "predict_joint_log_proba"], [843, 2, 1, "", "predict_log_proba"], [843, 2, 1, "", "predict_proba"], [843, 2, 1, "", "score"], [843, 2, 1, "", "set_fit_request"], [843, 2, 1, "", "set_params"], [843, 2, 1, "", "set_partial_fit_request"], [843, 2, 1, "", "set_score_request"]], "sklearn.naive_bayes.MultinomialNB": [[844, 2, 1, "", "fit"], [844, 2, 1, "", "get_metadata_routing"], [844, 2, 1, "", "get_params"], [844, 2, 1, "", "partial_fit"], [844, 2, 1, "", "predict"], [844, 2, 1, "", "predict_joint_log_proba"], [844, 2, 1, "", "predict_log_proba"], [844, 2, 1, "", "predict_proba"], [844, 2, 1, "", "score"], [844, 2, 1, "", "set_fit_request"], [844, 2, 1, "", "set_params"], [844, 2, 1, "", "set_partial_fit_request"], [844, 2, 1, "", "set_score_request"]], "sklearn.neighbors": [[845, 1, 1, "", "BallTree"], [846, 1, 1, "", "KDTree"], [847, 1, 1, "", "KNeighborsClassifier"], [848, 1, 1, "", "KNeighborsRegressor"], [849, 1, 1, "", "KNeighborsTransformer"], [850, 1, 1, "", "KernelDensity"], [851, 1, 1, "", "LocalOutlierFactor"], [852, 1, 1, "", "NearestCentroid"], [853, 1, 1, "", "NearestNeighbors"], [854, 1, 1, "", "NeighborhoodComponentsAnalysis"], [855, 1, 1, "", "RadiusNeighborsClassifier"], [856, 1, 1, "", "RadiusNeighborsRegressor"], [857, 1, 1, "", "RadiusNeighborsTransformer"], [858, 4, 1, "", "kneighbors_graph"], [859, 4, 1, "", "radius_neighbors_graph"], [860, 4, 1, "", "sort_graph_by_row_values"]], "sklearn.neighbors.BallTree": [[845, 2, 1, "", "get_arrays"], [845, 2, 1, "", "get_n_calls"], [845, 2, 1, "", "get_tree_stats"], [845, 2, 1, "", "kernel_density"], [845, 2, 1, "", "query"], [845, 2, 1, "", "query_radius"], [845, 2, 1, "", "reset_n_calls"], [845, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KDTree": [[846, 2, 1, "", "get_arrays"], [846, 2, 1, "", "get_n_calls"], [846, 2, 1, "", "get_tree_stats"], [846, 2, 1, "", "kernel_density"], [846, 2, 1, "", "query"], [846, 2, 1, "", "query_radius"], [846, 2, 1, "", "reset_n_calls"], [846, 2, 1, "", "two_point_correlation"]], "sklearn.neighbors.KNeighborsClassifier": [[847, 2, 1, "", "fit"], [847, 2, 1, "", "get_metadata_routing"], [847, 2, 1, "", "get_params"], [847, 2, 1, "", "kneighbors"], [847, 2, 1, "", "kneighbors_graph"], [847, 2, 1, "", "predict"], [847, 2, 1, "", "predict_proba"], [847, 2, 1, "", "score"], [847, 2, 1, "", "set_params"], [847, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsRegressor": [[848, 2, 1, "", "fit"], [848, 2, 1, "", "get_metadata_routing"], [848, 2, 1, "", "get_params"], [848, 2, 1, "", "kneighbors"], [848, 2, 1, "", "kneighbors_graph"], [848, 2, 1, "", "predict"], [848, 2, 1, "", "score"], [848, 2, 1, "", "set_params"], [848, 2, 1, "", "set_score_request"]], "sklearn.neighbors.KNeighborsTransformer": [[849, 2, 1, "", "fit"], [849, 2, 1, "", "fit_transform"], [849, 2, 1, "", "get_feature_names_out"], [849, 2, 1, "", "get_metadata_routing"], [849, 2, 1, "", "get_params"], [849, 2, 1, "", "kneighbors"], [849, 2, 1, "", "kneighbors_graph"], [849, 2, 1, "", "set_output"], [849, 2, 1, "", "set_params"], [849, 2, 1, "", "transform"]], "sklearn.neighbors.KernelDensity": [[850, 2, 1, "", "fit"], [850, 2, 1, "", "get_metadata_routing"], [850, 2, 1, "", "get_params"], [850, 2, 1, "", "sample"], [850, 2, 1, "", "score"], [850, 2, 1, "", "score_samples"], [850, 2, 1, "", "set_fit_request"], [850, 2, 1, "", "set_params"]], "sklearn.neighbors.LocalOutlierFactor": [[851, 2, 1, "", "decision_function"], [851, 2, 1, "", "fit"], [851, 2, 1, "", "fit_predict"], [851, 2, 1, "", "get_metadata_routing"], [851, 2, 1, "", "get_params"], [851, 2, 1, "", "kneighbors"], [851, 2, 1, "", "kneighbors_graph"], [851, 2, 1, "", "predict"], [851, 2, 1, "", "score_samples"], [851, 2, 1, "", "set_params"]], "sklearn.neighbors.NearestCentroid": [[852, 2, 1, "", "fit"], [852, 2, 1, "", "get_metadata_routing"], [852, 2, 1, "", "get_params"], [852, 2, 1, "", "predict"], [852, 2, 1, "", "score"], [852, 2, 1, "", "set_params"], [852, 2, 1, "", "set_score_request"]], "sklearn.neighbors.NearestNeighbors": [[853, 2, 1, "", "fit"], [853, 2, 1, "", "get_metadata_routing"], [853, 2, 1, "", "get_params"], [853, 2, 1, "", "kneighbors"], [853, 2, 1, "", "kneighbors_graph"], [853, 2, 1, "", "radius_neighbors"], [853, 2, 1, "", "radius_neighbors_graph"], [853, 2, 1, "", "set_params"]], "sklearn.neighbors.NeighborhoodComponentsAnalysis": [[854, 2, 1, "", "fit"], [854, 2, 1, "", "fit_transform"], [854, 2, 1, "", "get_feature_names_out"], [854, 2, 1, "", "get_metadata_routing"], [854, 2, 1, "", "get_params"], [854, 2, 1, "", "set_output"], [854, 2, 1, "", "set_params"], [854, 2, 1, "", "transform"]], "sklearn.neighbors.RadiusNeighborsClassifier": [[855, 2, 1, "", "fit"], [855, 2, 1, "", "get_metadata_routing"], [855, 2, 1, "", "get_params"], [855, 2, 1, "", "predict"], [855, 2, 1, "", "predict_proba"], [855, 2, 1, "", "radius_neighbors"], [855, 2, 1, "", "radius_neighbors_graph"], [855, 2, 1, "", "score"], [855, 2, 1, "", "set_params"], [855, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsRegressor": [[856, 2, 1, "", "fit"], [856, 2, 1, "", "get_metadata_routing"], [856, 2, 1, "", "get_params"], [856, 2, 1, "", "predict"], [856, 2, 1, "", "radius_neighbors"], [856, 2, 1, "", "radius_neighbors_graph"], [856, 2, 1, "", "score"], [856, 2, 1, "", "set_params"], [856, 2, 1, "", "set_score_request"]], "sklearn.neighbors.RadiusNeighborsTransformer": [[857, 2, 1, "", "fit"], [857, 2, 1, "", "fit_transform"], [857, 2, 1, "", "get_feature_names_out"], [857, 2, 1, "", "get_metadata_routing"], [857, 2, 1, "", "get_params"], [857, 2, 1, "", "radius_neighbors"], [857, 2, 1, "", "radius_neighbors_graph"], [857, 2, 1, "", "set_output"], [857, 2, 1, "", "set_params"], [857, 2, 1, "", "transform"]], "sklearn.neural_network": [[861, 1, 1, "", "BernoulliRBM"], [862, 1, 1, "", "MLPClassifier"], [863, 1, 1, "", "MLPRegressor"]], "sklearn.neural_network.BernoulliRBM": [[861, 2, 1, "", "fit"], [861, 2, 1, "", "fit_transform"], [861, 2, 1, "", "get_feature_names_out"], [861, 2, 1, "", "get_metadata_routing"], [861, 2, 1, "", "get_params"], [861, 2, 1, "", "gibbs"], [861, 2, 1, "", "partial_fit"], [861, 2, 1, "", "score_samples"], [861, 2, 1, "", "set_output"], [861, 2, 1, "", "set_params"], [861, 2, 1, "", "transform"]], "sklearn.neural_network.MLPClassifier": [[862, 2, 1, "", "fit"], [862, 2, 1, "", "get_metadata_routing"], [862, 2, 1, "", "get_params"], [862, 2, 1, "", "partial_fit"], [862, 2, 1, "", "predict"], [862, 2, 1, "", "predict_log_proba"], [862, 2, 1, "", "predict_proba"], [862, 2, 1, "", "score"], [862, 2, 1, "", "set_params"], [862, 2, 1, "", "set_partial_fit_request"], [862, 2, 1, "", "set_score_request"]], "sklearn.neural_network.MLPRegressor": [[863, 2, 1, "", "fit"], [863, 2, 1, "", "get_metadata_routing"], [863, 2, 1, "", "get_params"], [863, 2, 1, "", "partial_fit"], [863, 2, 1, "", "predict"], [863, 2, 1, "", "score"], [863, 2, 1, "", "set_params"], [863, 2, 1, "", "set_score_request"]], "sklearn.pipeline": [[864, 1, 1, "", "FeatureUnion"], [865, 1, 1, "", "Pipeline"], [866, 4, 1, "", "make_pipeline"], [867, 4, 1, "", "make_union"]], "sklearn.pipeline.FeatureUnion": [[864, 3, 1, "", "feature_names_in_"], [864, 2, 1, "", "fit"], [864, 2, 1, "", "fit_transform"], [864, 2, 1, "", "get_feature_names_out"], [864, 2, 1, "", "get_metadata_routing"], [864, 2, 1, "", "get_params"], [864, 3, 1, "", "n_features_in_"], [864, 2, 1, "", "set_output"], [864, 2, 1, "", "set_params"], [864, 2, 1, "", "transform"]], "sklearn.pipeline.Pipeline": [[865, 3, 1, "", "classes_"], [865, 2, 1, "", "decision_function"], [865, 3, 1, "", "feature_names_in_"], [865, 2, 1, "", "fit"], [865, 2, 1, "", "fit_predict"], [865, 2, 1, "", "fit_transform"], [865, 2, 1, "", "get_feature_names_out"], [865, 2, 1, "", "get_metadata_routing"], [865, 2, 1, "", "get_params"], [865, 2, 1, "", "inverse_transform"], [865, 3, 1, "", "n_features_in_"], [865, 3, 1, "", "named_steps"], [865, 2, 1, "", "predict"], [865, 2, 1, "", "predict_log_proba"], [865, 2, 1, "", "predict_proba"], [865, 2, 1, "", "score"], [865, 2, 1, "", "score_samples"], [865, 2, 1, "", "set_output"], [865, 2, 1, "", "set_params"], [865, 2, 1, "", "set_score_request"], [865, 2, 1, "", "transform"]], "sklearn.preprocessing": [[868, 1, 1, "", "Binarizer"], [869, 1, 1, "", "FunctionTransformer"], [870, 1, 1, "", "KBinsDiscretizer"], [871, 1, 1, "", "KernelCenterer"], [872, 1, 1, "", "LabelBinarizer"], [873, 1, 1, "", "LabelEncoder"], [874, 1, 1, "", "MaxAbsScaler"], [875, 1, 1, "", "MinMaxScaler"], [876, 1, 1, "", "MultiLabelBinarizer"], [877, 1, 1, "", "Normalizer"], [878, 1, 1, "", "OneHotEncoder"], [879, 1, 1, "", "OrdinalEncoder"], [880, 1, 1, "", "PolynomialFeatures"], [881, 1, 1, "", "PowerTransformer"], [882, 1, 1, "", "QuantileTransformer"], [883, 1, 1, "", "RobustScaler"], [884, 1, 1, "", "SplineTransformer"], [885, 1, 1, "", "StandardScaler"], [886, 1, 1, "", "TargetEncoder"], [887, 4, 1, "", "add_dummy_feature"], [888, 4, 1, "", "binarize"], [889, 4, 1, "", "label_binarize"], [890, 4, 1, "", "maxabs_scale"], [891, 4, 1, "", "minmax_scale"], [892, 4, 1, "", "normalize"], [893, 4, 1, "", "power_transform"], [894, 4, 1, "", "quantile_transform"], [895, 4, 1, "", "robust_scale"], [896, 4, 1, "", "scale"]], "sklearn.preprocessing.Binarizer": [[868, 2, 1, "", "fit"], [868, 2, 1, "", "fit_transform"], [868, 2, 1, "", "get_feature_names_out"], [868, 2, 1, "", "get_metadata_routing"], [868, 2, 1, "", "get_params"], [868, 2, 1, "", "set_output"], [868, 2, 1, "", "set_params"], [868, 2, 1, "", "set_transform_request"], [868, 2, 1, "", "transform"]], "sklearn.preprocessing.FunctionTransformer": [[869, 2, 1, "", "fit"], [869, 2, 1, "", "fit_transform"], [869, 2, 1, "", "get_feature_names_out"], [869, 2, 1, "", "get_metadata_routing"], [869, 2, 1, "", "get_params"], [869, 2, 1, "", "inverse_transform"], [869, 2, 1, "", "set_output"], [869, 2, 1, "", "set_params"], [869, 2, 1, "", "transform"]], "sklearn.preprocessing.KBinsDiscretizer": [[870, 2, 1, "", "fit"], [870, 2, 1, "", "fit_transform"], [870, 2, 1, "", "get_feature_names_out"], [870, 2, 1, "", "get_metadata_routing"], [870, 2, 1, "", "get_params"], [870, 2, 1, "", "inverse_transform"], [870, 2, 1, "", "set_fit_request"], [870, 2, 1, "", "set_output"], [870, 2, 1, "", "set_params"], [870, 2, 1, "", "transform"]], "sklearn.preprocessing.KernelCenterer": [[871, 2, 1, "", "fit"], [871, 2, 1, "", "fit_transform"], [871, 2, 1, "", "get_feature_names_out"], [871, 2, 1, "", "get_metadata_routing"], [871, 2, 1, "", "get_params"], [871, 2, 1, "", "set_fit_request"], [871, 2, 1, "", "set_output"], [871, 2, 1, "", "set_params"], [871, 2, 1, "", "set_transform_request"], [871, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelBinarizer": [[872, 2, 1, "", "fit"], [872, 2, 1, "", "fit_transform"], [872, 2, 1, "", "get_metadata_routing"], [872, 2, 1, "", "get_params"], [872, 2, 1, "", "inverse_transform"], [872, 2, 1, "", "set_inverse_transform_request"], [872, 2, 1, "", "set_output"], [872, 2, 1, "", "set_params"], [872, 2, 1, "", "transform"]], "sklearn.preprocessing.LabelEncoder": [[873, 2, 1, "", "fit"], [873, 2, 1, "", "fit_transform"], [873, 2, 1, "", "get_metadata_routing"], [873, 2, 1, "", "get_params"], [873, 2, 1, "", "inverse_transform"], [873, 2, 1, "", "set_output"], [873, 2, 1, "", "set_params"], [873, 2, 1, "", "transform"]], "sklearn.preprocessing.MaxAbsScaler": [[874, 2, 1, "", "fit"], [874, 2, 1, "", "fit_transform"], [874, 2, 1, "", "get_feature_names_out"], [874, 2, 1, "", "get_metadata_routing"], [874, 2, 1, "", "get_params"], [874, 2, 1, "", "inverse_transform"], [874, 2, 1, "", "partial_fit"], [874, 2, 1, "", "set_output"], [874, 2, 1, "", "set_params"], [874, 2, 1, "", "transform"]], "sklearn.preprocessing.MinMaxScaler": [[875, 2, 1, "", "fit"], [875, 2, 1, "", "fit_transform"], [875, 2, 1, "", "get_feature_names_out"], [875, 2, 1, "", "get_metadata_routing"], [875, 2, 1, "", "get_params"], [875, 2, 1, "", "inverse_transform"], [875, 2, 1, "", "partial_fit"], [875, 2, 1, "", "set_output"], [875, 2, 1, "", "set_params"], [875, 2, 1, "", "transform"]], "sklearn.preprocessing.MultiLabelBinarizer": [[876, 2, 1, "", "fit"], [876, 2, 1, "", "fit_transform"], [876, 2, 1, "", "get_metadata_routing"], [876, 2, 1, "", "get_params"], [876, 2, 1, "", "inverse_transform"], [876, 2, 1, "", "set_output"], [876, 2, 1, "", "set_params"], [876, 2, 1, "", "transform"]], "sklearn.preprocessing.Normalizer": [[877, 2, 1, "", "fit"], [877, 2, 1, "", "fit_transform"], [877, 2, 1, "", "get_feature_names_out"], [877, 2, 1, "", "get_metadata_routing"], [877, 2, 1, "", "get_params"], [877, 2, 1, "", "set_output"], [877, 2, 1, "", "set_params"], [877, 2, 1, "", "set_transform_request"], [877, 2, 1, "", "transform"]], "sklearn.preprocessing.OneHotEncoder": [[878, 2, 1, "", "fit"], [878, 2, 1, "", "fit_transform"], [878, 2, 1, "", "get_feature_names_out"], [878, 2, 1, "", "get_metadata_routing"], [878, 2, 1, "", "get_params"], [878, 3, 1, "", "infrequent_categories_"], [878, 2, 1, "", "inverse_transform"], [878, 2, 1, "", "set_output"], [878, 2, 1, "", "set_params"], [878, 2, 1, "", "transform"]], "sklearn.preprocessing.OrdinalEncoder": [[879, 2, 1, "", "fit"], [879, 2, 1, "", "fit_transform"], [879, 2, 1, "", "get_feature_names_out"], [879, 2, 1, "", "get_metadata_routing"], [879, 2, 1, "", "get_params"], [879, 3, 1, "", "infrequent_categories_"], [879, 2, 1, "", "inverse_transform"], [879, 2, 1, "", "set_output"], [879, 2, 1, "", "set_params"], [879, 2, 1, "", "transform"]], "sklearn.preprocessing.PolynomialFeatures": [[880, 2, 1, "", "fit"], [880, 2, 1, "", "fit_transform"], [880, 2, 1, "", "get_feature_names_out"], [880, 2, 1, "", "get_metadata_routing"], [880, 2, 1, "", "get_params"], [880, 3, 1, "", "powers_"], [880, 2, 1, "", "set_output"], [880, 2, 1, "", "set_params"], [880, 2, 1, "", "transform"]], "sklearn.preprocessing.PowerTransformer": [[881, 2, 1, "", "fit"], [881, 2, 1, "", "fit_transform"], [881, 2, 1, "", "get_feature_names_out"], [881, 2, 1, "", "get_metadata_routing"], [881, 2, 1, "", "get_params"], [881, 2, 1, "", "inverse_transform"], [881, 2, 1, "", "set_output"], [881, 2, 1, "", "set_params"], [881, 2, 1, "", "transform"]], "sklearn.preprocessing.QuantileTransformer": [[882, 2, 1, "", "fit"], [882, 2, 1, "", "fit_transform"], [882, 2, 1, "", "get_feature_names_out"], [882, 2, 1, "", "get_metadata_routing"], [882, 2, 1, "", "get_params"], [882, 2, 1, "", "inverse_transform"], [882, 2, 1, "", "set_output"], [882, 2, 1, "", "set_params"], [882, 2, 1, "", "transform"]], "sklearn.preprocessing.RobustScaler": [[883, 2, 1, "", "fit"], [883, 2, 1, "", "fit_transform"], [883, 2, 1, "", "get_feature_names_out"], [883, 2, 1, "", "get_metadata_routing"], [883, 2, 1, "", "get_params"], [883, 2, 1, "", "inverse_transform"], [883, 2, 1, "", "set_output"], [883, 2, 1, "", "set_params"], [883, 2, 1, "", "transform"]], "sklearn.preprocessing.SplineTransformer": [[884, 2, 1, "", "fit"], [884, 2, 1, "", "fit_transform"], [884, 2, 1, "", "get_feature_names_out"], [884, 2, 1, "", "get_metadata_routing"], [884, 2, 1, "", "get_params"], [884, 2, 1, "", "set_fit_request"], [884, 2, 1, "", "set_output"], [884, 2, 1, "", "set_params"], [884, 2, 1, "", "transform"]], "sklearn.preprocessing.StandardScaler": [[885, 2, 1, "", "fit"], [885, 2, 1, "", "fit_transform"], [885, 2, 1, "", "get_feature_names_out"], [885, 2, 1, "", "get_metadata_routing"], [885, 2, 1, "", "get_params"], [885, 2, 1, "", "inverse_transform"], [885, 2, 1, "", "partial_fit"], [885, 2, 1, "", "set_fit_request"], [885, 2, 1, "", "set_inverse_transform_request"], [885, 2, 1, "", "set_output"], [885, 2, 1, "", "set_params"], [885, 2, 1, "", "set_partial_fit_request"], [885, 2, 1, "", "set_transform_request"], [885, 2, 1, "", "transform"]], "sklearn.preprocessing.TargetEncoder": [[886, 2, 1, "", "fit"], [886, 2, 1, "", "fit_transform"], [886, 2, 1, "", "get_feature_names_out"], [886, 2, 1, "", "get_metadata_routing"], [886, 2, 1, "", "get_params"], [886, 3, 1, "", "infrequent_categories_"], [886, 2, 1, "", "set_output"], [886, 2, 1, "", "set_params"], [886, 2, 1, "", "transform"]], "sklearn.random_projection": [[897, 1, 1, "", "GaussianRandomProjection"], [898, 1, 1, "", "SparseRandomProjection"], [899, 4, 1, "", "johnson_lindenstrauss_min_dim"]], "sklearn.random_projection.GaussianRandomProjection": [[897, 2, 1, "", "fit"], [897, 2, 1, "", "fit_transform"], [897, 2, 1, "", "get_feature_names_out"], [897, 2, 1, "", "get_metadata_routing"], [897, 2, 1, "", "get_params"], [897, 2, 1, "", "inverse_transform"], [897, 2, 1, "", "set_output"], [897, 2, 1, "", "set_params"], [897, 2, 1, "", "transform"]], "sklearn.random_projection.SparseRandomProjection": [[898, 2, 1, "", "fit"], [898, 2, 1, "", "fit_transform"], [898, 2, 1, "", "get_feature_names_out"], [898, 2, 1, "", "get_metadata_routing"], [898, 2, 1, "", "get_params"], [898, 2, 1, "", "inverse_transform"], [898, 2, 1, "", "set_output"], [898, 2, 1, "", "set_params"], [898, 2, 1, "", "transform"]], "sklearn.semi_supervised": [[900, 1, 1, "", "LabelPropagation"], [901, 1, 1, "", "LabelSpreading"], [902, 1, 1, "", "SelfTrainingClassifier"]], "sklearn.semi_supervised.LabelPropagation": [[900, 2, 1, "", "fit"], [900, 2, 1, "", "get_metadata_routing"], [900, 2, 1, "", "get_params"], [900, 2, 1, "", "predict"], [900, 2, 1, "", "predict_proba"], [900, 2, 1, "", "score"], [900, 2, 1, "", "set_params"], [900, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.LabelSpreading": [[901, 2, 1, "", "fit"], [901, 2, 1, "", "get_metadata_routing"], [901, 2, 1, "", "get_params"], [901, 2, 1, "", "predict"], [901, 2, 1, "", "predict_proba"], [901, 2, 1, "", "score"], [901, 2, 1, "", "set_params"], [901, 2, 1, "", "set_score_request"]], "sklearn.semi_supervised.SelfTrainingClassifier": [[902, 2, 1, "", "decision_function"], [902, 2, 1, "", "fit"], [902, 2, 1, "", "get_metadata_routing"], [902, 2, 1, "", "get_params"], [902, 2, 1, "", "predict"], [902, 2, 1, "", "predict_log_proba"], [902, 2, 1, "", "predict_proba"], [902, 2, 1, "", "score"], [902, 2, 1, "", "set_params"]], "sklearn.svm": [[905, 1, 1, "", "LinearSVC"], [906, 1, 1, "", "LinearSVR"], [907, 1, 1, "", "NuSVC"], [908, 1, 1, "", "NuSVR"], [909, 1, 1, "", "OneClassSVM"], [910, 1, 1, "", "SVC"], [911, 1, 1, "", "SVR"], [912, 4, 1, "", "l1_min_c"]], "sklearn.svm.LinearSVC": [[905, 2, 1, "", "decision_function"], [905, 2, 1, "", "densify"], [905, 2, 1, "", "fit"], [905, 2, 1, "", "get_metadata_routing"], [905, 2, 1, "", "get_params"], [905, 2, 1, "", "predict"], [905, 2, 1, "", "score"], [905, 2, 1, "", "set_fit_request"], [905, 2, 1, "", "set_params"], [905, 2, 1, "", "set_score_request"], [905, 2, 1, "", "sparsify"]], "sklearn.svm.LinearSVR": [[906, 2, 1, "", "fit"], [906, 2, 1, "", "get_metadata_routing"], [906, 2, 1, "", "get_params"], [906, 2, 1, "", "predict"], [906, 2, 1, "", "score"], [906, 2, 1, "", "set_fit_request"], [906, 2, 1, "", "set_params"], [906, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVC": [[907, 3, 1, "", "coef_"], [907, 2, 1, "", "decision_function"], [907, 2, 1, "", "fit"], [907, 2, 1, "", "get_metadata_routing"], [907, 2, 1, "", "get_params"], [907, 3, 1, "", "n_support_"], [907, 2, 1, "", "predict"], [907, 2, 1, "", "predict_log_proba"], [907, 2, 1, "", "predict_proba"], [907, 3, 1, "", "probA_"], [907, 3, 1, "", "probB_"], [907, 2, 1, "", "score"], [907, 2, 1, "", "set_fit_request"], [907, 2, 1, "", "set_params"], [907, 2, 1, "", "set_score_request"]], "sklearn.svm.NuSVR": [[908, 3, 1, "", "coef_"], [908, 2, 1, "", "fit"], [908, 2, 1, "", "get_metadata_routing"], [908, 2, 1, "", "get_params"], [908, 3, 1, "", "n_support_"], [908, 2, 1, "", "predict"], [908, 2, 1, "", "score"], [908, 2, 1, "", "set_fit_request"], [908, 2, 1, "", "set_params"], [908, 2, 1, "", "set_score_request"]], "sklearn.svm.OneClassSVM": [[909, 3, 1, "", "coef_"], [909, 2, 1, "", "decision_function"], [909, 2, 1, "", "fit"], [909, 2, 1, "", "fit_predict"], [909, 2, 1, "", "get_metadata_routing"], [909, 2, 1, "", "get_params"], [909, 3, 1, "", "n_support_"], [909, 2, 1, "", "predict"], [909, 2, 1, "", "score_samples"], [909, 2, 1, "", "set_fit_request"], [909, 2, 1, "", "set_params"]], "sklearn.svm.SVC": [[910, 3, 1, "", "coef_"], [910, 2, 1, "", "decision_function"], [910, 2, 1, "", "fit"], [910, 2, 1, "", "get_metadata_routing"], [910, 2, 1, "", "get_params"], [910, 3, 1, "", "n_support_"], [910, 2, 1, "", "predict"], [910, 2, 1, "", "predict_log_proba"], [910, 2, 1, "", "predict_proba"], [910, 3, 1, "", "probA_"], [910, 3, 1, "", "probB_"], [910, 2, 1, "", "score"], [910, 2, 1, "", "set_fit_request"], [910, 2, 1, "", "set_params"], [910, 2, 1, "", "set_score_request"]], "sklearn.svm.SVR": [[911, 3, 1, "", "coef_"], [911, 2, 1, "", "fit"], [911, 2, 1, "", "get_metadata_routing"], [911, 2, 1, "", "get_params"], [911, 3, 1, "", "n_support_"], [911, 2, 1, "", "predict"], [911, 2, 1, "", "score"], [911, 2, 1, "", "set_fit_request"], [911, 2, 1, "", "set_params"], [911, 2, 1, "", "set_score_request"]], "sklearn.tree": [[913, 1, 1, "", "DecisionTreeClassifier"], [914, 1, 1, "", "DecisionTreeRegressor"], [915, 1, 1, "", "ExtraTreeClassifier"], [916, 1, 1, "", "ExtraTreeRegressor"], [917, 4, 1, "", "export_graphviz"], [918, 4, 1, "", "export_text"], [919, 4, 1, "", "plot_tree"]], "sklearn.tree.DecisionTreeClassifier": [[913, 2, 1, "", "apply"], [913, 2, 1, "", "cost_complexity_pruning_path"], [913, 2, 1, "", "decision_path"], [913, 3, 1, "", "feature_importances_"], [913, 2, 1, "", "fit"], [913, 2, 1, "", "get_depth"], [913, 2, 1, "", "get_metadata_routing"], [913, 2, 1, "", "get_n_leaves"], [913, 2, 1, "", "get_params"], [913, 2, 1, "", "predict"], [913, 2, 1, "", "predict_log_proba"], [913, 2, 1, "", "predict_proba"], [913, 2, 1, "", "score"], [913, 2, 1, "", "set_fit_request"], [913, 2, 1, "", "set_params"], [913, 2, 1, "", "set_predict_proba_request"], [913, 2, 1, "", "set_predict_request"], [913, 2, 1, "", "set_score_request"]], "sklearn.tree.DecisionTreeRegressor": [[914, 2, 1, "", "apply"], [914, 2, 1, "", "cost_complexity_pruning_path"], [914, 2, 1, "", "decision_path"], [914, 3, 1, "", "feature_importances_"], [914, 2, 1, "", "fit"], [914, 2, 1, "", "get_depth"], [914, 2, 1, "", "get_metadata_routing"], [914, 2, 1, "", "get_n_leaves"], [914, 2, 1, "", "get_params"], [914, 2, 1, "", "predict"], [914, 2, 1, "", "score"], [914, 2, 1, "", "set_fit_request"], [914, 2, 1, "", "set_params"], [914, 2, 1, "", "set_predict_request"], [914, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeClassifier": [[915, 2, 1, "", "apply"], [915, 2, 1, "", "cost_complexity_pruning_path"], [915, 2, 1, "", "decision_path"], [915, 3, 1, "", "feature_importances_"], [915, 2, 1, "", "fit"], [915, 2, 1, "", "get_depth"], [915, 2, 1, "", "get_metadata_routing"], [915, 2, 1, "", "get_n_leaves"], [915, 2, 1, "", "get_params"], [915, 2, 1, "", "predict"], [915, 2, 1, "", "predict_log_proba"], [915, 2, 1, "", "predict_proba"], [915, 2, 1, "", "score"], [915, 2, 1, "", "set_fit_request"], [915, 2, 1, "", "set_params"], [915, 2, 1, "", "set_predict_proba_request"], [915, 2, 1, "", "set_predict_request"], [915, 2, 1, "", "set_score_request"]], "sklearn.tree.ExtraTreeRegressor": [[916, 2, 1, "", "apply"], [916, 2, 1, "", "cost_complexity_pruning_path"], [916, 2, 1, "", "decision_path"], [916, 3, 1, "", "feature_importances_"], [916, 2, 1, "", "fit"], [916, 2, 1, "", "get_depth"], [916, 2, 1, "", "get_metadata_routing"], [916, 2, 1, "", "get_n_leaves"], [916, 2, 1, "", "get_params"], [916, 2, 1, "", "predict"], [916, 2, 1, "", "score"], [916, 2, 1, "", "set_fit_request"], [916, 2, 1, "", "set_params"], [916, 2, 1, "", "set_predict_request"], [916, 2, 1, "", "set_score_request"]], "sklearn.utils": [[920, 1, 1, "", "Bunch"], [921, 1, 1, "", "ClassifierTags"], [922, 1, 1, "", "InputTags"], [923, 1, 1, "", "RegressorTags"], [924, 1, 1, "", "Tags"], [925, 1, 1, "", "TargetTags"], [926, 1, 1, "", "TransformerTags"], [927, 4, 1, "", "_safe_indexing"], [41, 0, 0, "-", "arrayfuncs"], [929, 4, 1, "", "as_float_array"], [930, 4, 1, "", "assert_all_finite"], [931, 4, 1, "", "check_X_y"], [932, 4, 1, "", "check_array"], [933, 4, 1, "", "check_consistent_length"], [934, 4, 1, "", "check_random_state"], [935, 4, 1, "", "check_scalar"], [41, 0, 0, "-", "class_weight"], [938, 4, 1, "", "default_tags"], [939, 1, 1, "", "deprecated"], [41, 0, 0, "-", "discovery"], [41, 0, 0, "-", "estimator_checks"], [945, 4, 1, "", "estimator_html_repr"], [41, 0, 0, "-", "extmath"], [952, 4, 1, "", "gen_batches"], [953, 4, 1, "", "gen_even_slices"], [954, 4, 1, "", "get_tags"], [41, 0, 0, "-", "graph"], [956, 4, 1, "", "indexable"], [41, 0, 0, "-", "metadata_routing"], [41, 0, 0, "-", "metaestimators"], [41, 0, 0, "-", "multiclass"], [966, 4, 1, "", "murmurhash3_32"], [41, 0, 0, "-", "parallel"], [969, 1, 1, "", "parallel_backend"], [41, 0, 0, "-", "random"], [971, 4, 1, "", "register_parallel_backend"], [972, 4, 1, "", "resample"], [973, 4, 1, "", "safe_mask"], [974, 4, 1, "", "safe_sqr"], [975, 4, 1, "", "shuffle"], [41, 0, 0, "-", "sparsefuncs"], [41, 0, 0, "-", "sparsefuncs_fast"], [41, 0, 0, "-", "validation"]], "sklearn.utils.Bunch": [[920, 2, 1, "", "clear"], [920, 2, 1, "", "copy"], [920, 2, 1, "", "fromkeys"], [920, 2, 1, "", "get"], [920, 2, 1, "", "items"], [920, 2, 1, "", "keys"], [920, 2, 1, "", "pop"], [920, 2, 1, "", "popitem"], [920, 2, 1, "", "setdefault"], [920, 2, 1, "", "update"], [920, 2, 1, "", "values"]], "sklearn.utils.arrayfuncs": [[928, 4, 1, "", "min_pos"]], "sklearn.utils.class_weight": [[936, 4, 1, "", "compute_class_weight"], [937, 4, 1, "", "compute_sample_weight"]], "sklearn.utils.deprecated": [[939, 2, 1, "", "__call__"]], "sklearn.utils.discovery": [[940, 4, 1, "", "all_displays"], [941, 4, 1, "", "all_estimators"], [942, 4, 1, "", "all_functions"]], "sklearn.utils.estimator_checks": [[943, 4, 1, "", "check_estimator"], [944, 4, 1, "", "parametrize_with_checks"]], "sklearn.utils.extmath": [[946, 4, 1, "", "density"], [947, 4, 1, "", "fast_logdet"], [948, 4, 1, "", "randomized_range_finder"], [949, 4, 1, "", "randomized_svd"], [950, 4, 1, "", "safe_sparse_dot"], [951, 4, 1, "", "weighted_mode"]], "sklearn.utils.graph": [[955, 4, 1, "", "single_source_shortest_path_length"]], "sklearn.utils.metadata_routing": [[957, 1, 1, "", "MetadataRequest"], [958, 1, 1, "", "MetadataRouter"], [959, 1, 1, "", "MethodMapping"], [960, 4, 1, "", "get_routing_for_object"], [961, 4, 1, "", "process_routing"]], "sklearn.utils.metadata_routing.MetadataRequest": [[957, 2, 1, "", "consumes"]], "sklearn.utils.metadata_routing.MetadataRouter": [[958, 2, 1, "", "add"], [958, 2, 1, "", "add_self_request"], [958, 2, 1, "", "consumes"], [958, 2, 1, "", "route_params"], [958, 2, 1, "", "validate_metadata"]], "sklearn.utils.metadata_routing.MethodMapping": [[959, 2, 1, "", "add"]], "sklearn.utils.metaestimators": [[962, 4, 1, "", "available_if"]], "sklearn.utils.multiclass": [[963, 4, 1, "", "is_multilabel"], [964, 4, 1, "", "type_of_target"], [965, 4, 1, "", "unique_labels"]], "sklearn.utils.parallel": [[967, 1, 1, "", "Parallel"], [968, 4, 1, "", "delayed"]], "sklearn.utils.parallel.Parallel": [[967, 2, 1, "", "__call__"], [967, 2, 1, "", "dispatch_next"], [967, 2, 1, "", "dispatch_one_batch"], [967, 2, 1, "", "format"], [967, 2, 1, "", "print_progress"]], "sklearn.utils.random": [[970, 4, 1, "", "sample_without_replacement"]], "sklearn.utils.sparsefuncs": [[976, 4, 1, "", "incr_mean_variance_axis"], [977, 4, 1, "", "inplace_column_scale"], [978, 4, 1, "", "inplace_csr_column_scale"], [979, 4, 1, "", "inplace_row_scale"], [980, 4, 1, "", "inplace_swap_column"], [981, 4, 1, "", "inplace_swap_row"], [982, 4, 1, "", "mean_variance_axis"]], "sklearn.utils.sparsefuncs_fast": [[983, 4, 1, "", "inplace_csr_row_normalize_l1"], [984, 4, 1, "", "inplace_csr_row_normalize_l2"]], "sklearn.utils.validation": [[985, 4, 1, "", "check_is_fitted"], [986, 4, 1, "", "check_memory"], [987, 4, 1, "", "check_symmetric"], [988, 4, 1, "", "column_or_1d"], [989, 4, 1, "", "has_fit_parameter"], [990, 4, 1, "", "validate_data"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception", "6": "py:attribute"}, "terms": {"": [0, 2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 57, 58, 61, 64, 70, 73, 74, 75, 77, 78, 79, 80, 81, 85, 86, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 109, 110, 113, 115, 118, 120, 121, 122, 125, 126, 128, 129, 130, 132, 134, 136, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 161, 163, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 186, 187, 189, 191, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 209, 210, 212, 214, 216, 218, 219, 221, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 243, 245, 246, 247, 249, 255, 257, 258, 260, 264, 265, 270, 271, 272, 273, 274, 277, 281, 283, 285, 290, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 308, 309, 310, 313, 316, 319, 321, 322, 323, 324, 325, 326, 327, 330, 331, 337, 338, 339, 340, 341, 344, 345, 346, 349, 351, 352, 353, 356, 357, 358, 359, 363, 364, 365, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 418, 420, 422, 429, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 489, 491, 497, 499, 501, 505, 511, 512, 520, 526, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 688, 689, 690, 691, 692, 693, 694, 701, 702, 703, 709, 712, 717, 721, 723, 736, 742, 759, 760, 780, 781, 798, 799, 800, 801, 803, 804, 805, 810, 815, 819, 820, 823, 826, 827, 828, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 929, 931, 932, 935, 949, 951, 958, 959, 961, 985, 989, 990, 991, 993, 994, 996, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1026, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "0": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 927, 928, 929, 931, 932, 936, 937, 940, 941, 942, 943, 944, 946, 948, 949, 951, 952, 953, 955, 962, 963, 964, 966, 967, 970, 971, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1022, 1023, 1024, 1028, 1029, 1030, 1031], "00": [52, 68, 111, 123, 186, 187, 204, 230, 243, 264, 268, 271, 308, 326, 329, 330, 352, 370, 373, 382, 408, 415, 416, 606, 607, 714, 716, 789, 801, 815, 829, 914, 998, 1002, 1012, 1014, 1016, 1023], "000": [43, 44, 59, 62, 64, 77, 106, 171, 188, 191, 243, 264, 268, 270, 272, 315, 322, 351, 352, 359, 371, 382, 415, 416, 490, 562, 563, 645, 678, 1016, 1023, 1044], "0000": [43, 324], "000000": [79, 186, 202, 230, 270, 314, 738], "00000000": 173, "000000e": 230, "000024": 363, "000045": 186, "00005": 54, "0000ff": [67, 298, 305], "0001": [49, 159, 168, 220, 268, 378, 420, 443, 447, 459, 471, 472, 478, 534, 539, 541, 548, 550, 551, 560, 561, 647, 648, 649, 650, 653, 654, 659, 660, 661, 662, 663, 664, 669, 670, 673, 675, 677, 679, 681, 688, 690, 694, 862, 863, 905, 906, 991], "000198": 186, "000220": 46, "000224": 46, "000242": 46, "000285": 46, "0003": 137, "000316": 46, "000336": 46, "000346": 46, "0004": [52, 137, 315, 605], "000557": 46, "000559": 351, "000636": 351, "000665": 46, "000687": 351, "000698": 351, "00073": 351, "0008": 384, "000963": 46, "000977": 270, "00099547": 173, "000e": 416, "001": [46, 53, 68, 75, 79, 95, 144, 168, 170, 186, 198, 221, 239, 249, 255, 268, 270, 272, 332, 352, 373, 382, 412, 537, 538, 540, 547, 628, 645, 646, 647, 648, 653, 654, 661, 662, 663, 664, 667, 668, 669, 677, 678, 679, 680, 682, 685, 690, 691, 694, 695, 798, 799, 862, 863, 900, 901, 907, 908, 909, 910, 911, 991, 1023], "00103": 351, "0012": [43, 695], "0013": 43, "00134": 351, "0014": 43, "0015": 43, "001540": 52, "00166409": 662, "00171412": [759, 760, 1000], "001727": 264, "00186": 351, "001882": [200, 202], "002": [43, 51, 168, 170, 187, 373, 1023], "002592": [200, 202], "00271": 351, "00274": 212, "0028": 43, "002861": [200, 202], "003": 43, "0032": 43, "0034189458230957995": 45, "003533": 202, "003586": 537, "00360392": 537, "0036211": 537, "00362644": 537, "00364": 323, "00393284e": 195, "003935": [200, 202], "003e": 416, "004": [43, 352], "0044": 912, "004577621581492997": 317, "00462428": 752, "0049896314219659565": 317, "005": [43, 270, 274, 295, 310, 352, 382], "005027": 273, "005118": 268, "005383": [200, 202], "005422": 270, "005670": [200, 202], "005840": 273, "005861": 273, "006": [43, 45, 141, 278, 382], "006360": 273, "007": [255, 278, 290, 352], "0072b2": 255, "0075": [473, 542], "00755": 542, "007581": 275, "00768662e": 195, "007822": 284, "007833": 275, "008": [168, 314, 373, 382, 1023], "008142": [200, 202], "0083899664": 765, "008449": [200, 202], "00860051": 659, "008915": 273, "009": [43, 352, 382], "009077": 186, "00911944e": 195, "0092": 137, "009362": [200, 202], "009747": 284, "009778": 273, "009788": 284, "0098": 137, "00ff00": 298, "01": [45, 47, 49, 52, 53, 75, 79, 84, 95, 120, 122, 123, 137, 145, 147, 149, 151, 152, 168, 175, 179, 186, 187, 195, 198, 204, 219, 224, 225, 230, 232, 233, 239, 243, 244, 245, 249, 250, 257, 261, 263, 264, 269, 270, 271, 275, 277, 278, 279, 295, 306, 308, 310, 320, 326, 342, 352, 357, 371, 373, 381, 408, 417, 449, 471, 516, 522, 533, 540, 544, 546, 596, 597, 599, 606, 643, 647, 655, 659, 679, 697, 716, 801, 815, 899, 970, 998, 1002, 1006, 1012, 1014, 1016, 1023], "010": [352, 382, 830, 1010], "0106": 650, "010877306503748912": 278, "011": [43, 91, 278, 290, 352, 382], "011595": [200, 202], "0116": 605, "011e": 416, "012": [52, 165, 189, 191, 1023], "012191": [200, 202], "012521": 202, "012831": 202, "0129126": 370, "013": [43, 52, 278, 352], "01327": 371, "013520": 186, "014": [43, 278, 322, 382, 1023], "0144": 616, "015": [355, 1010], "0152": 137, "015347e": 230, "015414e": 230, "015579": 284, "015587e": 230, "015596": [200, 202], "0157": 545, "015716e": 230, "01621459": 408, "016445": 270, "017": [198, 352, 382, 471, 472], "017379": 52, "017646": [200, 202], "018": [52, 270, 472], "0182": 898, "018727": 186, "0188ff": 314, "018900": 202, "019": [168, 373, 382, 471], "019023": 270, "019069": 202, "01915283": 130, "019163": [200, 202], "0193": [470, 476], "0195": [421, 475], "0196": 137, "0198e1": 118, "019907": [200, 202], "01e": 199, "02": [43, 51, 52, 66, 79, 83, 85, 91, 95, 97, 113, 115, 120, 123, 136, 142, 168, 172, 177, 185, 186, 195, 230, 239, 247, 249, 264, 265, 271, 277, 295, 305, 308, 310, 312, 334, 336, 352, 356, 370, 373, 381, 407, 412, 441, 445, 598, 606, 659, 677, 801, 815, 884, 900, 914, 998, 1023], "020": [43, 52, 1010], "02069427": 86, "021": 352, "021849": 324, "021872": [200, 202], "022": 1010, "022593": 186, "0226": 650, "022688": [200, 202], "023": [52, 278, 352, 906, 1010], "02306214": 668, "024": [62, 1023], "02449161": 130, "02456369": 198, "024991": [200, 202], "025": [67, 214, 249, 267, 691, 695], "025102": 186, "025422": 270, "0255": 137, "0256": 173, "025930": [200, 202], "026": [116, 352, 358], "026328": [200, 202], "026711": 87, "027": [52, 168, 373], "027400": 363, "028": [268, 352], "02818216": 115, "02891072": 1003, "029": [352, 1010], "02d": 202, "03": [51, 52, 85, 100, 111, 120, 149, 168, 175, 186, 195, 230, 243, 255, 261, 264, 271, 330, 373, 416, 749, 801, 998, 1002, 1023], "030": [149, 170, 199, 352], "030462": 103, "030498": 103, "030585": 284, "030677e": 230, "030867": 186, "031": [168, 373], "031020": 103, "031026": 186, "031255": 186, "0314": 351, "031555": 202, "03162278": 51, "031988": [200, 202], "032": [91, 241, 1023], "0321": [351, 836], "032179": 202, "03228": 623, "03228706": 611, "032356": [200, 202], "03237920e": 195, "032405": 186, "03260883": 1003, "0328": 351, "033": 1010, "033764e": 230, "033823": 186, "034": [149, 471], "034077": 202, "034194": [200, 202], "034278": 273, "034309": [200, 202], "03433306457": 45, "034821": [200, 202], "03498585": 1003, "035": [91, 141, 1023], "035005": 186, "03531816": [827, 828], "035445": 284, "0358": 46, "035914": 284, "036": [382, 472], "036038": [200, 202], "036385": [200, 202], "036445": 270, "036592": 284, "036656": [200, 202], "0367": 175, "0368": 620, "037": 710, "0370": 851, "037600e": 230, "037621": 46, "038": [471, 472, 862], "038076": [200, 202], "03812219": 1003, "038159": 813, "03823144": 173, "038689": 260, "0387": 605, "039": [268, 752, 782, 1002], "039493": [200, 202], "039497": 253, "03f": 268, "04": [52, 66, 75, 77, 87, 115, 122, 129, 168, 175, 186, 195, 211, 230, 247, 255, 261, 264, 270, 271, 303, 327, 346, 373, 415, 417, 471, 472, 647, 648, 653, 661, 662, 663, 682, 789, 801, 815, 998, 1002, 1006, 1016, 1023], "040": [171, 1023], "040094": 46, "040530e": 230, "041": 52, "041297": 306, "0416": 407, "042": [234, 382], "0427": [230, 469, 474], "042898": 306, "043": [283, 352, 382, 1023], "043401": [200, 202], "044": [43, 268, 752, 1002], "044223": [200, 202], "044451": [200, 202], "044642": [200, 202], "0448": 230, "045": 724, "04520": 159, "0453": 545, "045311": 306, "045390e": 230, "045599": [200, 202], "045934": 306, "046": [67, 352, 1023], "046010e": 230, "046636": 186, "046641": [200, 202], "047": [197, 382, 1023], "0479": 545, "048": [246, 1010, 1023], "049": 471, "049530": 306, "049540": 306, "0499": 545, "04995982": 115, "05": [46, 47, 52, 54, 61, 63, 72, 79, 85, 93, 95, 97, 98, 100, 107, 115, 125, 137, 140, 146, 149, 152, 164, 168, 178, 179, 186, 194, 195, 211, 214, 226, 236, 237, 239, 249, 255, 257, 258, 261, 264, 270, 271, 279, 281, 295, 298, 303, 310, 312, 319, 323, 330, 332, 345, 373, 417, 450, 456, 478, 526, 531, 532, 547, 593, 596, 597, 599, 614, 615, 616, 620, 621, 623, 624, 626, 633, 634, 650, 691, 695, 757, 801, 854, 905, 906, 998, 1006, 1012, 1023], "050": [52, 90, 1010, 1023], "05063247886572012": 278, "050680": [200, 202], "051": 472, "0512": 545, "051474": [200, 202], "0517578125e": 46, "052": [45, 538], "05216586": 115, "052506": 324, "053": [43, 168, 373, 382], "05306648": 128, "053156": 46, "05317": 175, "054045": 273, "054699": 186, "0547": 909, "0548": 351, "055": [168, 373, 1002], "05518": 624, "05532": 621, "05534985": 307, "0556": 909, "056": [52, 230, 756, 1010, 1023], "0561": 909, "0566": 624, "05663": 621, "0568": 748, "057": [382, 830], "057122": 202, "05752333": 130, "057711": 202, "058": [168, 268, 373], "05840206": 130, "0595": 473, "05968": 159, "05994843": 51, "06": [52, 186, 204, 211, 212, 234, 264, 270, 271, 308, 312, 346, 382, 407, 482, 483, 484, 645, 646, 690, 694, 798, 799, 801, 815, 914, 998, 1012, 1014, 1023], "060": [43, 52, 86, 92, 752, 1023], "0602": 46, "061": 268, "0614": 624, "06165": 621, "061696": [200, 202], "0622": [470, 476], "0626": 836, "063": [142, 268, 270, 437, 1023], "0631": 52, "064": [382, 1010], "065": [268, 382], "06506307": 307, "0652": 623, "06525643": 611, "066": [189, 268, 649, 1023], "066312": 46, "06686804": 227, "06694199": 130, "06695631e": 111, "067": 179, "067109": 202, "067528": 202, "068": [43, 52, 208, 270, 345, 1023], "068332": [200, 202], "06880943": 115, "06896552": 449, "069": [268, 341, 1023], "069196": 268, "0693": 620, "07": [52, 115, 123, 129, 186, 209, 230, 249, 264, 279, 352, 359, 371, 408, 562, 563, 693, 695, 1002, 1016, 1023], "0707": 624, "07073": 621, "071": [54, 168, 224, 327, 373, 437, 1023], "071964": 186, "072": [160, 437, 649, 1023], "073": [268, 471, 472], "0732": 351, "074": [54, 268], "074412": [200, 202], "075": [123, 225, 1023], "07582983e": 195, "075887": 202, "076": [43, 53, 893, 1023], "077": 290, "077846": 270, "0779": 46, "078": [43, 54, 358, 1023], "07846529": 307, "07880": 159, "079": [168, 373], "079297": 270, "07963978e": 195, "07993421": 227, "08": [43, 79, 83, 123, 179, 186, 187, 198, 308, 373, 478, 532, 544, 546, 564, 642, 659, 801, 862, 863, 884, 1008, 1023], "080": 352, "08022103": [827, 828], "080295": 202, "081": 1010, "0813": [469, 474], "082": 43, "0825": 315, "083": [268, 358], "08377444": 752, "084": 61, "085299": [200, 202], "08533159": 215, "085711": 87, "086": 353, "08604995": 115, "086944": 253, "08699432": 216, "0872422": 661, "088": [670, 1010], "089": 352, "089063": [200, 202], "08d": 55, "08t16": 370, "09": [122, 123, 129, 186, 243, 247, 308, 408, 530, 608, 736, 843, 1002, 1012, 1016, 1023], "09000": 212, "090528": 186, "090808": 186, "091": [45, 336, 1023], "091053": 186, "091621": 87, "092": [215, 297, 1023], "092204": [200, 202], "093": 471, "094": [187, 472], "09443967": 307, "09541846": 537, "096": [199, 200, 222, 1023], "09684337": 227, "096950": 306, "097": [43, 168, 373], "098": 352, "098332": 62, "0986": [416, 869], "09861229": [613, 1012], "098758": 62, "098776": 270, "098932": 62, "099": 43, "099820": 62, "0d": 1034, "0e": [281, 550, 551], "0e4": 219, "0f": [57, 91], "0min": 87, "0rc1": 380, "0rcn": 380, "0x": 934, "0x7f963045cdf0": 282, "0x7f9630900700": 250, "0x7f9630abc640": 282, "0x7f9630bc2a40": 282, "0x7f9631400910": 154, "0x7f9631400ac0": 154, "0x7f9631776460": 212, "0x7f9631dc0a60": 282, "0x7f9632010160": 139, "0x7f963201b790": 139, "0x7f96322e4040": 268, "0x7f96324a3310": 329, "0x7f9655a7b7c0": 103, "0x7f9655a7b9a0": 103, "0x7f96566718b0": 260, "0x7f9666177280": 103, "0x7f966618b4c0": 104, "0x7f9678bb6040": 277, "1": [0, 1, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 389, 390, 391, 394, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 943, 944, 946, 947, 948, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1029, 1031, 1035], "10": [2, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 58, 62, 63, 64, 66, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 103, 104, 106, 109, 110, 111, 112, 113, 115, 116, 118, 122, 123, 124, 125, 129, 130, 134, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 155, 157, 161, 165, 168, 171, 172, 174, 176, 177, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 198, 203, 204, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 228, 229, 230, 233, 234, 239, 242, 243, 244, 245, 246, 248, 249, 250, 252, 258, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 281, 283, 284, 285, 287, 289, 295, 305, 306, 307, 308, 310, 311, 313, 314, 315, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 333, 338, 339, 340, 342, 343, 345, 346, 347, 349, 351, 352, 353, 359, 363, 370, 371, 372, 373, 374, 376, 381, 382, 388, 389, 390, 394, 399, 400, 401, 405, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 438, 443, 447, 449, 451, 452, 453, 459, 460, 462, 475, 488, 493, 494, 497, 501, 502, 503, 505, 511, 512, 513, 514, 517, 521, 522, 525, 527, 529, 532, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 549, 553, 556, 557, 558, 559, 562, 563, 565, 566, 567, 568, 569, 571, 583, 584, 588, 594, 595, 600, 601, 606, 608, 612, 618, 620, 628, 631, 633, 635, 636, 637, 638, 641, 643, 644, 645, 647, 648, 650, 653, 660, 661, 662, 663, 665, 666, 667, 668, 670, 671, 673, 674, 676, 677, 678, 679, 682, 686, 687, 692, 693, 696, 697, 700, 706, 716, 727, 743, 757, 770, 798, 799, 801, 802, 803, 804, 805, 812, 815, 816, 817, 818, 819, 821, 822, 824, 829, 831, 832, 833, 834, 840, 841, 842, 844, 845, 846, 852, 861, 862, 863, 865, 871, 875, 878, 879, 882, 894, 902, 908, 911, 913, 914, 918, 923, 935, 946, 949, 953, 965, 970, 971, 977, 978, 987, 991, 992, 997, 998, 999, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1016, 1017, 1023, 1030, 1031, 1034, 1035, 1036, 1041, 1043, 1044, 1045, 1047, 1048], "100": [43, 44, 46, 49, 51, 52, 55, 57, 62, 64, 72, 76, 77, 83, 86, 90, 94, 99, 103, 104, 107, 110, 111, 120, 122, 123, 129, 135, 140, 149, 150, 153, 156, 171, 175, 178, 179, 186, 187, 189, 191, 193, 194, 196, 198, 199, 203, 204, 205, 207, 211, 212, 213, 214, 216, 221, 222, 223, 225, 227, 228, 230, 234, 235, 237, 242, 243, 244, 245, 246, 250, 255, 257, 261, 264, 265, 266, 268, 270, 273, 275, 280, 281, 285, 295, 296, 297, 308, 311, 312, 314, 316, 317, 322, 326, 327, 333, 334, 338, 339, 341, 342, 343, 346, 347, 349, 351, 352, 355, 357, 358, 363, 365, 371, 373, 376, 378, 381, 382, 399, 405, 408, 409, 412, 413, 414, 415, 416, 437, 441, 445, 449, 471, 472, 478, 490, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 529, 531, 535, 537, 545, 546, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 606, 608, 611, 632, 633, 634, 640, 641, 642, 643, 647, 648, 649, 650, 653, 654, 659, 660, 661, 662, 663, 664, 666, 668, 670, 672, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 747, 798, 799, 803, 823, 829, 830, 835, 840, 841, 842, 844, 845, 846, 850, 862, 863, 881, 883, 886, 895, 912, 991, 992, 995, 999, 1002, 1003, 1009, 1012, 1014, 1023, 1041, 1042, 1043, 1046, 1047], "1000": [43, 46, 47, 54, 63, 67, 72, 83, 104, 107, 115, 129, 137, 139, 141, 144, 145, 146, 151, 156, 160, 163, 176, 191, 199, 205, 215, 234, 242, 243, 245, 255, 259, 264, 268, 270, 276, 279, 281, 295, 297, 311, 314, 320, 321, 323, 325, 326, 341, 342, 348, 351, 352, 381, 382, 389, 406, 416, 437, 473, 479, 480, 532, 533, 538, 540, 542, 543, 544, 546, 547, 549, 554, 564, 565, 633, 647, 648, 652, 653, 654, 656, 661, 662, 663, 664, 667, 668, 669, 673, 677, 678, 679, 688, 693, 699, 702, 765, 882, 894, 900, 905, 906, 991, 995, 1017, 1040, 1042, 1051], "10000": [43, 50, 52, 66, 78, 96, 104, 105, 147, 159, 199, 206, 212, 220, 228, 243, 245, 321, 337, 339, 359, 365, 415, 416, 562, 563, 645, 680, 882, 911, 1014], "100000": [174, 245, 255, 376, 614, 615, 616, 620, 621, 623, 624, 626, 894, 995], "1000000": [55, 537], "10005": 1041, "1000x": 1039, "1001": [223, 253], "10027": 1046, "10045": 1041, "1005": 1017, "10058": 1042, "10059": 1041, "10065": 249, "1007": 706, "10070308464041304": 212, "10071": 1041, "10093": 1041, "10095": 1041, "10096": 1046, "100_000": [62, 64, 186], "100k": [243, 396], "100ksampl": 396, "100x": [1033, 1036, 1050], "101": [64, 168, 196, 287, 373, 851, 1023, 1034], "10101": 1041, "10112": 1041, "1013": 1010, "10142": 1041, "10153": 1041, "10168": 1048, "10181": 1041, "10192": 1041, "10195": 1041, "101alexmartin": [1050, 1051], "102": [199, 382, 1035], "10210": 1041, "10229": 1041, "1024": [86, 129, 449, 468, 539, 903, 1046], "10280": 1041, "10297": 1041, "103": [149, 251, 289, 290, 371, 415, 498, 556, 557, 1023, 1033], "10306": 1041, "10325": 1041, "10336": 1041, "10346": 1041, "10377": 1041, "1038": 408, "10397": 1041, "104": [43, 61], "10403": 230, "10412": 1041, "10428": 1041, "10437": 1041, "10440": 1042, "10441": 1041, "1045": 103, "10452": 1041, "10458": 1041, "1046": [103, 260], "10463": 1022, "10468": 1048, "10469096": 173, "1047": 103, "10471": 1041, "10474": 1041, "10478008": 408, "10482": 1043, "1048576": [416, 583, 590], "10493": 1045, "105": 314, "10500": 1041, "10521": 1041, "10526": 408, "10536": 1041, "10580": 1042, "10581": 1041, "10584743": 173, "10587": 1041, "10591": 1045, "10593": 1041, "106": [93, 168, 253, 373, 881, 996, 1023, 1034], "10606655": 227, "10610": 1041, "10655": 1041, "10663": 1041, "10677": 1041, "10687": 1041, "107": [149, 157, 324, 408, 900, 1003, 1023, 1035], "10708": 1045, "10711": 1045, "10723": [1040, 1041], "10727": 1042, "1073": [371, 488], "10733": 1022, "10740": 1041, "1076": 333, "10774": 1041, "10795": 1041, "108": [0, 47, 1034], "1080": [370, 408], "10805": 1047, "10811": 1041, "10815": 1043, "10827": 1041, "10829": 1041, "10834": 230, "10836": 1041, "1084": 260, "10845": 1041, "10869": 1041, "1088": 253, "10881": 1041, "108843": 273, "10887": 1041, "108880": 62, "10898": 1041, "10899": 1041, "109": [61, 86, 203, 1003, 1023, 1035], "10908": 1041, "10913": 1041, "10914094": 227, "10928": 1041, "10933": 1041, "10982": 1041, "10992": 1041, "10998": 1041, "10999": 1041, "10_000": [46, 62, 107, 139, 146, 185, 191, 243, 273, 283, 290, 327, 560, 561, 565, 566, 882], "10_fold": [371, 494], "10e": [193, 198], "10k": [320, 396, 447], "10ksampl": 396, "10x": 1033, "10x10": 217, "10\u2079": 1041, "11": [43, 57, 83, 106, 112, 122, 168, 173, 186, 187, 198, 212, 213, 214, 217, 249, 264, 267, 275, 276, 282, 293, 294, 296, 314, 321, 324, 325, 339, 343, 347, 353, 370, 373, 374, 382, 389, 408, 411, 412, 415, 450, 457, 482, 483, 484, 485, 497, 502, 518, 519, 613, 651, 657, 671, 716, 722, 724, 725, 779, 780, 781, 802, 805, 819, 822, 830, 857, 914, 950, 965, 994, 998, 1000, 1012, 1016, 1017, 1023, 1031, 1035, 1039, 1041, 1042, 1044, 1047, 1048], "110": [126, 193, 206, 219, 242, 316, 326, 437, 996, 997, 1023], "1100": 83, "11000": 1042, "11005": 1041, "11006": 1041, "11010": 1041, "11011": 1041, "11021": 149, "11042": 1041, "11047": [1022, 1043], "11064": 1045, "11082": 1041, "110923": 202, "11099": 765, "111": [43, 46, 47, 100, 126, 227, 236, 270, 290, 857, 1036], "1111": [651, 657], "1111111111111111": 278, "11124": 1041, "1112658": [899, 1014], "11135": 1041, "11136": 1041, "1114": 260, "11144": [1041, 1042], "11144673": 227, "11160": 1041, "11166": 1041, "1117": 620, "11176": 1041, "11179": 1042, "1118": 103, "112": [87, 168, 187, 371, 373, 1035], "11206": 1041, "11211": 1041, "112141": 382, "11232": 1043, "11235": 1041, "112589990684262": 747, "11272": 1041, "11293": 1041, "11295": 1041, "11296": 1044, "113": [287, 382, 1036], "11306": 1041, "11308": 1041, "11310": 1041, "11314": 371, "11315": 1041, "11327": 1041, "113516": 273, "11353": 1041, "11354": 1042, "11364": 1042, "11364637": 51, "113781": 324, "11378556": 307, "114": [324, 711, 1033], "1140": 371, "11413": 43, "11420": 1041, "1145": [191, 408, 677], "11452112": 227, "11458": 1042, "11464": 1041, "11466": 1041, "11467": 1041, "1148": 260, "115": [187, 221, 1010, 1023], "11505": 1041, "11514": 1044, "11520": 1041, "11526": 1042, "11528972": 227, "11542": 1041, "11553": 1041, "11556": 1041, "11557": 1041, "11558": 1041, "11576": 1041, "11585": 1041, "11596": 1041, "116": 1033, "1162": 408, "11635": 1043, "11646": 1042, "11650": 1042, "11679": 1041, "11680": 47, "11682": 1045, "11682692": 227, "11693539": 115, "11699": 1042, "117": [259, 1023, 1034], "11705": 1042, "117154": 186, "11724": 1041, "11727": 1042, "11741": 1041, "11754": 1042, "11756": [1041, 1042], "117608": 62, "11774": 1041, "1179": 260, "118": 591, "11805": 1022, "11841": [899, 1014], "1185": 382, "11860": 1048, "1189": 415, "119": [996, 1036], "11901": 1041, "11905": 1041, "11912": 1041, "11915045": 359, "11924": 1041, "11931": 212, "11932": 212, "11933": 212, "11935": 212, "11950": 1044, "11951": 1041, "11958": 175, "11973": 1042, "11977": 1022, "12": [0, 43, 45, 52, 57, 58, 70, 75, 77, 78, 86, 88, 89, 90, 105, 106, 115, 142, 143, 144, 147, 149, 168, 173, 174, 175, 182, 186, 187, 189, 194, 198, 199, 212, 220, 230, 232, 235, 236, 239, 240, 242, 243, 250, 253, 257, 258, 264, 269, 270, 272, 273, 276, 282, 283, 284, 293, 308, 314, 315, 316, 324, 327, 347, 351, 353, 372, 373, 374, 381, 389, 391, 394, 400, 401, 402, 408, 412, 416, 443, 447, 449, 457, 482, 483, 484, 485, 497, 533, 535, 542, 571, 647, 648, 653, 661, 662, 663, 665, 670, 672, 682, 686, 687, 690, 693, 694, 726, 731, 798, 799, 802, 819, 822, 836, 857, 873, 982, 991, 992, 994, 998, 1000, 1002, 1003, 1012, 1016, 1017, 1023, 1031, 1034, 1036, 1040, 1041, 1043, 1044, 1049, 1050], "120": [150, 233, 326, 417, 591, 1033], "1200": [83, 145, 310, 415], "12000": 521, "12068": 1043, "12069": 1046, "121": [100, 136, 182, 244, 619, 670, 1012], "12105": 1041, "12116": 1042, "1212": 499, "12122": 1041, "121351": 202, "12143": 1042, "12145": 1043, "12147": 1022, "12159": 1041, "12165": 1041, "12165031": 1003, "1217": 212, "12171": 1041, "12174": 1042, "12177": 1042, "12190903": 115, "12196": 212, "12197": 1042, "122": [0, 136, 175, 182, 187, 244, 245, 382, 1003], "1220": 620, "12211": 1041, "12222": 1042, "12232": 1042, "12234": 1041, "12246": 1041, "12251": 1042, "12258": 1043, "12274212": 1003, "12279": 1042, "12285": 1048, "1229": 518, "123": [138, 156, 359, 415, 517, 518, 519, 556, 557, 838, 1003, 1010], "12300": 1042, "12303": 1043, "12304": 1041, "12317": [175, 1041], "1232": 415, "12326": 43, "12327": 43, "12328": [43, 1042], "12329": 43, "12330": [43, 1041], "12334": 1042, "12338": 1041, "12339": 1041, "1234": [194, 258, 273, 376], "12344": 1042, "12345": 1041, "12350": 1041, "1236": 316, "12360": 1041, "12365": 1041, "12379": 43, "12380": 43, "12381": 43, "12382": 43, "123828": 273, "12383": 43, "12388": 1041, "12393": 1041, "124": [46, 415, 1035], "124225": 202, "12436": 1042, "12441": 1041, "12451": 1041, "12462": 1041, "12467": 1041, "12471": 1041, "12481": 1041, "125": [43, 86, 111, 123, 322, 535, 991, 1002, 1012], "12513": 1042, "12514": 1041, "125140": 273, "12517": 1041, "12518": 1041, "12522": 1041, "125247168": 52, "12543": 1042, "12557": 1043, "12568": 1042, "12569": 1043, "12582": 1042, "12583": 1042, "1259": 57, "12599": 1042, "126": [118, 415, 1023], "12612": 1041, "12613": 1042, "12625": 1041, "1263": 382, "12638": 1045, "12650": 1043, "126502": 202, "12669": 1042, "1268187": 227, "12685": 1041, "12699": 1041, "127": [145, 281, 1023, 1033], "12701": 1041, "12704": 1041, "127128": 146, "12715": 1042, "12732": 1042, "1276": 47, "12789": 1043, "128": [53, 54, 212, 363, 537], "12800": 1022, "12807": 1042, "12821": 1042, "12834": 1042, "12852": [1022, 1043], "12855": 1042, "12860": [230, 1042], "12861": 1042, "12866": 1022, "1288": [45, 371], "12881": 1041, "12883823": 412, "12887": 1043, "129": [214, 1033], "12908": 1042, "12914884": 1003, "12916": 1042, "12927": 1043, "12946": 1041, "12949": 1041, "12955": 1042, "12972": 1042, "12983": 1042, "12988": 1042, "1299": [871, 1012], "12th": 1014, "13": [43, 45, 49, 50, 52, 79, 88, 106, 125, 129, 142, 145, 147, 181, 186, 191, 199, 221, 237, 263, 264, 271, 274, 276, 308, 310, 314, 327, 340, 371, 373, 376, 382, 389, 412, 420, 497, 511, 514, 533, 534, 552, 553, 583, 607, 636, 640, 735, 760, 819, 849, 864, 871, 897, 898, 998, 1002, 1003, 1008, 1009, 1012, 1017, 1023, 1031, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1045], "130": [84, 382, 1023], "1300": 83, "13003": 1045, "13005": 1041, "13007": 1042, "130107": [227, 243, 489], "13013": 1043, "13042": 1048, "13046": 1041, "13077794": 359, "13086": 1042, "131": [43, 53, 89, 352, 382, 1002, 1034], "13124": [1041, 1042], "13134": 1041, "13142": 1042, "13146": [1022, 1043], "13151": 1042, "13157": 1042, "13164": 1042, "13165": 1041, "13174": 1042, "1319": [871, 1012], "131900": 102, "13193": 1042, "131mb": 351, "132": [43, 47, 53, 89, 415], "13204": 1045, "13213": 1043, "1322": 623, "13221": 1041, "13222543": 611, "13227": 1022, "1323": 212, "13231": 1043, "13233": [371, 494, 495], "13240": 1042, "13241": 1042, "13250": 1042, "13251": 1042, "13253": 1042, "13260": 1042, "13266": 1042, "13276": 1041, "13279": 1042, "13283": 1042, "13286": 992, "13290": 1043, "133": [53, 89], "13312": 1041, "13317": 1042, "1332": 47, "13328": 1042, "13333": 1042, "13336": 1042, "13350": 1042, "13363": 1042, "13366": 1042, "13374": 43, "13375": 43, "13376": 43, "13377": 43, "13378": 43, "1338": [47, 265], "13382": 1042, "13389": 1042, "13392": 1043, "13393": 1043, "13397": 1042, "134": [86, 145, 264, 270, 1036], "13422": 1042, "13427": 1042, "13439": 1042, "13447": 1042, "13459": 1042, "13467": 1043, "13485": 1042, "13486": 1042, "13496": 1042, "135": [168, 324, 373], "13511": 1044, "13524": 1042, "1353": 351, "13531": 1042, "1354": 47, "13545": 1042, "13549": 1042, "13554": 1042, "13562": 1042, "13575": 1043, "136": [173, 339, 1023], "13601": 1042, "13607": 1042, "13609": 1043, "1361": 47, "13618": 1043, "13620": 1042, "13628": 1042, "13636": [998, 1042], "13641": 1042, "13649": 1050, "13651": 1042, "137": [249, 382, 1034], "13704": 1043, "13707": 1043, "1371": 535, "13726": 1043, "1373": 999, "1374": 535, "13741": 1042, "13769": 1043, "13772": [1041, 1042], "13773": 1043, "13779": 1042, "1378": 230, "13780": 1042, "1379": 230, "138": [319, 382, 415, 1002, 1023], "13806": 1043, "1382": 525, "13822072286080167": 278, "13835": 1042, "1385": 474, "13864": 1042, "13875": 1043, "13877": 1042, "13894": 1042, "13896": 1043, "139": [230, 290, 382, 415, 452, 462, 692, 696, 1003], "13900": 1045, "13902": [1022, 1043], "13903": [1041, 1042], "13910": 1042, "13911": [1022, 1043], "13925": 1043, "13933": 1043, "13938": 1043, "13947": 1042, "1396": 999, "13960": 1043, "1397": 382, "13974": 1042, "13983521": 307, "13987": 1043, "13988486": 227, "13995": 1043, "13th": 64, "14": [43, 50, 52, 73, 82, 93, 95, 96, 99, 106, 112, 123, 125, 163, 187, 198, 202, 204, 230, 234, 239, 244, 264, 269, 275, 276, 285, 289, 290, 308, 313, 314, 324, 346, 349, 364, 371, 373, 374, 389, 394, 400, 401, 408, 412, 497, 499, 511, 554, 555, 636, 644, 693, 815, 819, 871, 995, 998, 1002, 1012, 1017, 1031, 1033, 1034, 1036, 1037, 1041, 1046], "140": [86, 326, 415, 511, 517, 518, 519, 556, 557, 1003], "1400": [83, 474], "14012": 1043, "14024": 1042, "14028": 1043, "14035": 1043, "14048": 1044, "14053": 1042, "14067": 1042, "14075": 1044, "14087": 1042, "14092": 1042, "141": [81, 287, 502, 535, 905, 1003], "14108": 1043, "14114": 1043, "14156": 230, "14170": 1043, "14180": [1022, 1044], "1419": 43, "14194": 1043, "14197": 1042, "142": [43, 415], "1422": 43, "14228": 364, "14237": [1041, 1042], "14259": 1043, "14264": 1044, "142857": 230, "14286": 1043, "14287": 1043, "14294": 1043, "14296": 1043, "143": [168, 373, 471, 472, 1014, 1033, 1034], "14300": 1044, "14302": 249, "14305": 1043, "14309": 1042, "14336": 1043, "14338": 992, "14356": 1043, "14357": 1043, "1436": 147, "14378": 1043, "14381": 1043, "14393": 1042, "144": [270, 382, 1033], "1440": 43, "14406": 1043, "1441": 623, "14410151": 611, "14417": 1043, "144204": 146, "1443": 1008, "14430": 1043, "14446": 1045, "14458": 1043, "14464": 1043, "14475": 1043, "144943": 62, "14496": [382, 1042], "145": [52, 408], "14510": 1043, "14516": 1044, "14520": 1043, "14538": 1043, "14544": 1043, "14549": 1043, "1456": 230, "14582": 1022, "14591": 1043, "14593": 1043, "14595": 1043, "145957": 146, "146": [45, 172, 415, 1023], "1460": [143, 154], "14602": 1043, "14603365": 227, "14623": 1043, "14625": 47, "14629": 1043, "1464": 240, "14646": 1043, "14647": 1043, "14680": 1043, "14682": 1043, "14696": 1044, "147": 1003, "14702": 1043, "147022": 202, "14704": 1043, "14706": 1043, "1471": 1008, "14710": 1043, "14732": 1043, "14736": 1048, "1474": 382, "14740": 1043, "14764": 1043, "148": 1036, "14800": 1045, "14810": 316, "14848": 1044, "14849": 1043, "14862": 1048, "14864": 1043, "14865": 1043, "14869": 1043, "14872": 1043, "14884": 1043, "14890": 1043, "14894": 1043, "14898": 1043, "149": [1003, 1033], "14900": 1043, "14902": 1043, "14907": 1043, "14908": 1043, "14933": 1043, "14936": 1043, "14971": 1043, "14975": 1047, "14982": 1045, "1499": 47, "15": [43, 45, 46, 51, 52, 53, 54, 66, 67, 70, 75, 79, 86, 87, 94, 95, 99, 105, 106, 111, 113, 118, 129, 138, 140, 142, 143, 146, 149, 163, 165, 167, 170, 174, 181, 185, 186, 187, 202, 214, 226, 230, 234, 237, 239, 257, 258, 264, 265, 273, 275, 278, 281, 282, 285, 294, 298, 305, 306, 310, 312, 314, 325, 330, 338, 340, 343, 346, 349, 356, 370, 371, 374, 376, 389, 394, 400, 401, 412, 415, 416, 440, 454, 490, 497, 498, 499, 532, 538, 546, 547, 556, 557, 599, 605, 610, 645, 653, 662, 664, 669, 677, 679, 693, 819, 834, 857, 886, 991, 997, 998, 999, 1002, 1005, 1006, 1012, 1017, 1029, 1031, 1035, 1045, 1047, 1048], "150": [43, 45, 118, 126, 138, 146, 159, 233, 237, 239, 283, 326, 344, 347, 373, 412, 417, 505, 602, 603, 826, 827, 828, 1002], "1500": [74, 83, 90, 95, 100, 118, 232, 236, 255], "15000": [673, 688, 862, 863], "15005": [1044, 1046], "15007": 1045, "15010": 1043, "15028": 1043, "15038": 1043, "150407": 382, "15044": 1043, "15049": 1043, "150527": 306, "15053": 1043, "15057": 1043, "1506": 384, "15080": 1043, "15082": 1043, "15083": 1043, "15084": 1043, "15086": 1043, "15094": 1043, "15096": 1043, "15099": 1043, "151": [316, 324, 382, 415, 502, 1014, 1023], "15100": 1043, "1511007": 253, "151101": 253, "15119": 1043, "15120": 1043, "15126": 1045, "15138": 1043, "15160": 1043, "15179": 1044, "152": [91, 331, 382, 1023], "15257": 1043, "1527": 861, "15274": 1043, "15297572": 537, "153": 664, "15304": 1043, "15319": 1022, "153244303321897735": 408, "15361": 1045, "15375": 1043, "15380": 1044, "15382": 1043, "15393": 1043, "154": [308, 652, 1003], "1542": 382, "15427": 1045, "15429": 1043, "15436": 1044, "154453": 306, "15463": 1043, "15488": 1043, "15490": 1043, "155": [168, 209, 300, 1023], "15503": 1044, "15521": 159, "15524": 1043, "1553374": 408, "1553511": 408, "1554": 861, "15550": 1022, "15557": 1043, "15558": 1044, "15582": 1044, "156": [168, 186, 373], "15611": 992, "15622": 1044, "15625": 1043, "156252": 202, "15636": 1045, "15652": 1044, "15655": 1044, "15661": 1043, "15669": 1044, "15699552": 1003, "157": 382, "15707": 1044, "15709": 1044, "15730": 1044, "157334": 306, "15751": 1043, "15760": 1043, "15762": 1044, "15763": 1045, "15773": 1044, "15782": 1044, "15785": 1044, "15797": 1043, "158": [77, 415, 670], "15806": 1044, "15810": 1043, "15834": 1044, "15863": 1043, "15864": 1044, "15868": 1043, "15879": 1043, "15888": 1043, "15898": 1043, "159": [86, 371, 1033], "1590": 308, "15918": 1044, "1592": 499, "15926": 1044, "15930": 1043, "15933": 1043, "15936": 1043, "15937": 1043, "159419": 253, "15946": 1044, "15947": 1043, "15948": 1047, "15950": 1044, "15953": 1044, "15959": 1044, "15963": 1044, "1597": 264, "15980": 1044, "15984": 1047, "15996": 1043, "15e": 120, "16": [43, 44, 47, 52, 57, 64, 78, 83, 84, 87, 99, 106, 111, 120, 123, 163, 187, 206, 211, 212, 213, 230, 232, 233, 244, 248, 249, 264, 272, 273, 274, 294, 308, 310, 314, 319, 344, 352, 357, 371, 373, 374, 382, 389, 394, 400, 401, 412, 413, 416, 442, 457, 459, 471, 472, 478, 479, 498, 499, 503, 517, 535, 536, 571, 590, 596, 597, 608, 609, 640, 651, 652, 655, 656, 657, 658, 683, 684, 814, 819, 831, 880, 906, 914, 977, 978, 979, 991, 998, 1002, 1012, 1017, 1029, 1031, 1033, 1034, 1038, 1039, 1041, 1042], "160": [247, 991], "1600": 83, "160030": 202, "16006": 1044, "1600x1600": 87, "16018": 1047, "16021": 1044, "16052385": 130, "16061": 1047, "16066": 1045, "16069": 1044, "16075": 1044, "16076": 1043, "16084": 1044, "16090": 1044, "16103": 1044, "16111": 1044, "16112": 1044, "16117": 1044, "161245": 87, "16132": 1044, "16144": 382, "16147": 373, "16149": 1044, "16159": [382, 1044], "1616": 473, "16182": 1044, "16183": 1044, "162": [91, 342, 373, 1023], "16224": 1044, "1623": 57, "1624": 499, "16245": 1044, "16257": 1044, "1626": 1022, "16261": 1044, "16266": 1044, "16280": 1044, "16289": 1045, "163": [83, 168, 249, 287, 373, 1010, 1023], "163224": 202, "16323": 1044, "16326": [43, 1045], "16327": 43, "16328": 43, "16329": 43, "16330": 43, "16331": 1044, "16335": 1045, "16352": 1045, "16362": 1044, "16379": 43, "16380": 43, "16381": 43, "16382": 43, "16383": 43, "16392": 1045, "16397": [1043, 1044], "164": [253, 301, 415, 1023], "164009": 273, "16401": 1044, "16403": 1044, "16431": 1044, "16437": 1044, "16442": 1044, "16443186": 1003, "16449": 1046, "16451": 1044, "16466": 1044, "16484": 1044, "16493": 1045, "165": [82, 1003, 1023], "16500": 1043, "16505": 1043, "16508": 1044, "16530": 1045, "16531": 149, "16539": 1044, "16585": 1044, "166": [43, 308, 382, 1002, 1033], "16605": 1047, "16619": 1045, "16622": 1044, "16625": 1045, "16632": 1044, "16655": 1044, "16663": 1044, "166667315173": 52, "16692": 1044, "16695": 1048, "167": [382, 1033], "16718": 1044, "16726": 1044, "16728": 1044, "16747": 1048, "16748": 1047, "168": [243, 252, 1023, 1033], "1680": 373, "16801": 1044, "16837": 1044, "16841": 1044, "16849": 1044, "1689": 352, "169": [91, 308], "16906": 1045, "1691": 998, "169106": 270, "1693": 905, "16935": 1045, "16948": 1047, "16950": 1044, "169504": 230, "16979946": 1003, "1698": 650, "16981": 1044, "16985": 1045, "16993": 1044, "17": [47, 49, 52, 57, 74, 85, 106, 111, 123, 149, 171, 186, 211, 243, 264, 273, 305, 314, 347, 371, 374, 381, 394, 400, 401, 408, 412, 444, 461, 487, 498, 499, 501, 524, 532, 537, 541, 548, 550, 551, 556, 560, 561, 570, 571, 598, 629, 650, 658, 659, 660, 667, 670, 673, 675, 688, 693, 730, 731, 741, 762, 767, 784, 785, 788, 790, 819, 843, 854, 869, 874, 875, 883, 885, 891, 907, 910, 913, 914, 915, 916, 950, 991, 992, 1003, 1005, 1012, 1023, 1029, 1031, 1033, 1034, 1035, 1036, 1039, 1042, 1047], "170": [79, 90, 91, 95, 242, 245, 382, 1023], "1700": 83, "170087": 306, "17021": 1044, "17032": 1044, "17036": 1046, "17038": 1045, "170388": 1003, "1706": 333, "17061": 1044, "17090": 1045, "17095": 1045, "171": [86, 168, 373, 382, 789, 1002], "17107": 1045, "1714": 998, "17148": 1045, "17159": 1045, "17169": 1046, "17187": 1045, "17192": 1045, "17193": 1045, "172": [97, 382, 494, 495, 650, 998, 1023], "17204": 1044, "17205": 1044, "17210": [52, 1044], "17225": 1045, "17226834": 86, "1723": 46, "17233": 1045, "17235": 1044, "17236387": 215, "17266": 1047, "17289014": 173, "1729": 187, "173": [382, 585], "17309": 1044, "17317": 1045, "17357": 1044, "17360": [47, 1044], "17367": 1045, "17370318": 227, "17374": 43, "17375": 43, "17376": 43, "17377": 43, "17378": 43, "17379": [43, 52, 1045], "1738": 1002, "17386": 1045, "17388": 1049, "17396": 1045, "174": [145, 308, 382, 585], "17406": 1045, "17412": 1045, "17414": 1045, "17427": 1045, "17433": 1044, "17443": 1046, "17448": 1045, "1747": 187, "17474": 230, "17478": 1045, "17491": 1045, "17499": 1045, "175": [45, 382, 1012, 1023], "17526": 1045, "175298": 273, "17546": 1045, "17569": 1045, "17578": 1045, "17598": 1045, "176": [382, 838, 1003, 1010], "17603": 1045, "17604": 1045, "17606": 1045, "17608": 1045, "17609": 1045, "17610": 1045, "17612": 1045, "17614": 1045, "17616": 1045, "17622": 1046, "17633": 1045, "17644": 1045, "17651": 1045, "17661": 1045, "17662": 1045, "17679": 1045, "17694": 1044, "177": 382, "17702": 1045, "1771": 352, "17742": 1044, "17743": 1046, "17746": 1046, "17750": 1046, "17759": 1045, "17769": 1046, "17772": 1046, "17777": 1045, "17785": 1046, "178": [46, 373, 382, 511, 849], "178000": 312, "17804": 1045, "17812": 1044, "17819": 1047, "17826": 1045, "17833": 1045, "17848": 1044, "1785": 352, "17856": 1045, "17864": 1045, "17876": 1045, "17878": 1045, "179": [240, 373, 382, 415, 1033], "17914": 1044, "17928620": 370, "17932": 1045, "17935": 1045, "17937": 1045, "17959": 1044, "1797": [91, 268, 308, 329, 373, 420, 445, 503, 533, 534, 535, 536, 600, 601, 689, 690, 691, 692, 694, 1005], "17984": 1045, "17985": 1044, "17985197": 227, "17987": 1045, "17992": 1045, "17995": 1044, "17997": 1045, "17_760": 149, "17t14": 370, "18": [43, 46, 47, 57, 75, 79, 82, 86, 93, 95, 106, 127, 146, 179, 186, 223, 227, 232, 236, 237, 239, 244, 264, 270, 308, 314, 316, 330, 351, 352, 353, 376, 382, 412, 413, 416, 447, 459, 493, 501, 502, 503, 505, 506, 511, 536, 537, 539, 541, 542, 558, 559, 560, 561, 564, 565, 566, 567, 570, 572, 573, 574, 575, 576, 578, 579, 590, 595, 600, 601, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 647, 650, 659, 660, 672, 715, 719, 732, 735, 736, 742, 744, 761, 771, 798, 799, 822, 838, 861, 862, 863, 869, 875, 883, 884, 895, 905, 906, 913, 914, 915, 916, 917, 948, 949, 991, 1000, 1002, 1012, 1023, 1029, 1031, 1033, 1034, 1037, 1038, 1040, 1041, 1043, 1044], "180": [70, 255, 256, 257, 260, 261, 299, 303, 382, 503], "1800": 83, "18000": [353, 371], "18010": 1046, "18016": 1044, "18020": 1048, "1804243": 370, "18052": 1045, "18094": 1048, "181": [287, 308, 382], "18108182014": 179, "18114": 1045, "18121": 1045, "18124": 1045, "18149": 1045, "18167": 1045, "18170": 1047, "18176": 1045, "18197458": 359, "182": [170, 175, 308, 382, 415, 1023], "18222": 1045, "18256": 1045, "18266": 1045, "18269": 1045, "18278": 1045, "18280": 1045, "18293": 1045, "18298": 1048, "183": [199, 330, 351, 382, 1003, 1033], "18302": 1045, "18310": 1047, "18326": 1045, "18328": 1046, "18334": 1045, "18341": 1045, "18343": 1045, "18368": 1046, "18370": 1045, "18393": 1046, "18394": 1045, "184": [43, 164, 212, 269, 308, 382, 800, 1023], "18405": 1045, "18406": 1045, "18410": 1045, "18429": 1045, "18433": 1046, "18444": 1046, "18447": 1045, "18459": 1046, "1847": 46, "18482": 1047, "18488": 1049, "185": [86, 168, 179, 373, 382, 862, 863], "1850": [45, 371], "18508": 1045, "18510": 1045, "18525": 1045, "18527": 1045, "18528": 1045, "18543": 1046, "18545": 1045, "18555": 1051, "185654": 273, "185659": 202, "18595": 1045, "186": [212, 308, 338, 382, 789, 1002, 1023], "18607": 1045, "18612": 1045, "18622": 1045, "18639": 1045, "18649": 1046, "1865": 47, "18682": 1045, "18689": 1050, "18691": 1045, "187": [270, 382, 585, 1003, 1035], "1871": 1017, "18723": 1049, "18736": 1046, "1874": 1017, "18746": 1045, "1875": 982, "18768": 1045, "188": [128, 168, 175, 373, 382, 585, 1023], "1880": 382, "18805": 1048, "18815268": 253, "188153": 253, "18818427": 668, "18832": 1047, "18842": 1046, "18843": 1051, "18846": [371, 488, 489], "1887": 352, "18898": 1046, "189": [212, 382, 902, 1015], "18925": 1046, "189267": 273, "18959": 1046, "189631": 202, "18964": 1046, "18975": 1047, "189830": 324, "18987": 1045, "19": [43, 52, 77, 149, 175, 186, 212, 216, 234, 260, 264, 287, 314, 315, 330, 373, 374, 390, 394, 400, 401, 408, 416, 419, 444, 493, 517, 518, 519, 537, 541, 542, 548, 550, 551, 558, 559, 560, 561, 565, 566, 567, 583, 590, 608, 649, 659, 660, 667, 668, 669, 672, 673, 675, 677, 679, 688, 708, 782, 786, 800, 801, 815, 828, 833, 834, 836, 837, 851, 852, 871, 882, 903, 907, 910, 913, 914, 915, 916, 991, 1002, 1012, 1023, 1029, 1031, 1033, 1034, 1035, 1036, 1038, 1041, 1050], "190": [44, 50, 145, 230, 263, 279, 303, 347, 371, 382, 499, 1023], "1900": 83, "19002": 1046, "19004": 1046, "19011": 1046, "19024": 1046, "19035": 1046, "1903908407869": 215, "19041": 1046, "19046": 1046, "19047631514961908949361222113": 52, "1905": [168, 373], "19052": 1046, "19055": 1046, "19069": 1046, "19075": 1048, "19085": 1047, "191": [256, 257, 310, 382, 1003, 1023], "19112072e": 195, "19126": 1045, "19145": 353, "19158": 1047, "19159": 1046, "19162": 1046, "19172": 1046, "19174891": 307, "19179": 1045, "19182": 1045, "19198": 1046, "192": [145, 382, 1033], "19210": 1046, "19211": 1045, "19234": 1045, "19244": 1046, "19263": 1046, "19271": 1045, "19278": 1046, "192913": 273, "192938": 52, "19296": 1046, "19297": 1046, "193": [382, 415, 716, 787, 1015], "19308": 1045, "1931": 111, "19310": 1046, "19317": 175, "19336": 1046, "193548": 230, "19356": 1046, "1936": 373, "19365": 1046, "19390": 1046, "19391": 1046, "193949": 273, "194": [308, 324, 1023], "1940": 230, "19401": 1046, "19407": 1045, "19411": 1046, "19415": 1046, "19417": 1045, "194239": 382, "19426": 1046, "19428": 1046, "19438": 1047, "19459": 1046, "19472": 1046, "19473": 1046, "1948": 57, "19483": 1046, "19490": 1047, "19491": 1046, "19499": 1046, "195": [494, 495], "1950": [373, 1002], "1951": 230, "195133": 382, "19520": 1046, "19522393": 227, "19527": 1046, "19564": 1046, "19568": 1046, "19571": 1046, "19579": 1045, "1958": [175, 413, 415, 533], "19580": 1045, "196": [105, 337, 902, 1015, 1023], "1960": [628, 717], "19616": 1046, "19631": 1046, "1964": [691, 695, 881, 893, 999], "19641": 1046, "19643": 1046, "19646": 1045, "19659": 1045, "19662693": [845, 846], "19664": 1049, "19669": 1046, "196795181": 52, "19680": 1047, "196861": 202, "19689": 1047, "197": [115, 1023], "19703": 1045, "1972": 373, "19721": 1045, "19727": 1045, "1973": [373, 406], "19732": 1045, "19733": 1046, "19734": 1046, "1974": [408, 416, 711], "19747": 1047, "1975": 1005, "19752": 1046, "19766": 1046, "197666": 273, "1977": 636, "1978": [230, 998], "19784": 1046, "19788": 1046, "1979": [408, 726, 770], "19790": 1046, "19794": 1047, "19799": 1046, "198": 1033, "1980": 373, "19803308": 115, "1981": [230, 998], "19829832": 227, "1983": [408, 732, 885], "19836": 1046, "1984": [111, 112, 410, 474, 913, 914, 1018], "19847": 1045, "1985": [186, 408, 706, 716, 787], "1986": [992, 1018], "19869": 1046, "1987": [408, 608, 609, 793, 794], "198766": 273, "19879": 1046, "1988": 373, "19883": 1046, "19888": 1045, "1989": [279, 636, 789, 862, 863, 998, 1005], "199": [648, 792, 1017], "1990": 371, "19906": 1046, "19908": 1046, "1990a": 406, "1991": [517, 518, 519], "19916": 1047, "1992": [168, 371, 373, 412, 415, 568, 569, 646, 998], "19922": 1045, "19924": 1045, "1993": [168, 373, 474, 665, 686, 687, 1018], "19934": 1046, "19939": 1045, "1993apr6": 102, "1994": [168, 371, 373, 645], "19948": 1046, "1995": [168, 270, 373, 406, 415, 554, 555, 835, 902, 1003], "1996": [64, 149, 408, 415, 419, 444, 517, 518, 519, 556, 557, 1012], "1997": [135, 371, 413, 415, 536, 555, 691, 695, 998, 999, 1002], "1998": [149, 270, 371, 373, 413, 415, 556, 557, 835, 840, 871, 1003, 1004, 1006, 1012, 1016], "19982": 1045, "1999": [178, 371, 406, 408, 410, 413, 415, 437, 450, 457, 469, 474, 535, 542, 556, 557, 560, 561, 724, 899, 907, 908, 910, 911, 1008, 1014], "19th": 408, "1_": 1012, "1_000": [44, 64, 70, 104, 125, 149, 170, 175, 177, 187, 243, 267, 347, 407, 538, 540, 702, 800, 823, 824, 832], "1d": [2, 135, 137, 183, 187, 213, 243, 291, 294, 303, 327, 346, 376, 383, 385, 389, 390, 409, 414, 464, 467, 618, 631, 634, 654, 658, 661, 664, 685, 704, 713, 714, 720, 730, 731, 735, 739, 784, 785, 788, 797, 847, 848, 849, 850, 851, 853, 855, 856, 857, 870, 922, 925, 927, 931, 932, 964, 988, 1003, 1023, 1033, 1038, 1039, 1040, 1042, 1046, 1047, 1051], "1e": [44, 45, 46, 49, 55, 63, 80, 120, 168, 170, 173, 175, 176, 177, 178, 179, 181, 186, 194, 206, 212, 213, 219, 226, 230, 235, 239, 245, 250, 255, 258, 261, 268, 278, 281, 307, 317, 322, 325, 333, 338, 340, 347, 351, 382, 420, 443, 447, 452, 459, 462, 471, 472, 478, 482, 483, 484, 532, 533, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 560, 561, 562, 563, 593, 598, 607, 609, 610, 612, 614, 615, 616, 620, 621, 623, 624, 626, 628, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 653, 654, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 690, 691, 692, 693, 694, 695, 696, 729, 786, 798, 799, 815, 840, 841, 842, 843, 844, 845, 846, 854, 862, 863, 870, 900, 901, 905, 906, 907, 908, 909, 910, 911, 987, 991, 1002, 1006, 1010, 1012, 1016, 1041, 1046, 1047, 1048], "1e0": [170, 245, 261, 278, 991], "1e1": [170, 176, 212, 245, 340], "1e15": 179, "1e2": [49, 170, 177, 245, 261, 340], "1e3": [45, 46, 49, 170, 176, 181, 245, 281, 325, 991], "1e4": [281, 660, 680, 899, 1014], "1e5": [45, 175, 195, 197, 203, 281, 614, 615, 616, 620, 621, 623, 624, 626, 894, 899, 1014], "1e6": [47, 49, 206, 243, 327, 351, 353, 363, 537, 899, 1002, 1014], "1e7": 382, "1er": 416, "1f": [52, 58, 83, 86, 123, 194, 212, 243, 255, 257, 277, 319, 326, 352, 353], "1gb": 363, "1kastner": 1040, "1m": 967, "1mb": [364, 1038], "1mo": 175, "1nn": 373, "1or": 416, "1px": 308, "1qlettinn8oi": 351, "1st": [0, 43, 93, 126, 178, 213, 315, 883, 884], "1z": 416, "2": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 372, 373, 374, 376, 378, 380, 381, 382, 383, 385, 388, 389, 390, 394, 399, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473, 474, 475, 478, 479, 480, 482, 483, 484, 485, 494, 497, 501, 502, 505, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 585, 586, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 704, 705, 706, 707, 708, 709, 712, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 764, 765, 768, 769, 770, 772, 774, 775, 776, 777, 779, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 895, 896, 898, 899, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 920, 927, 928, 929, 931, 932, 933, 937, 941, 947, 948, 949, 950, 951, 952, 953, 955, 956, 962, 963, 964, 965, 966, 967, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1023, 1029, 1030, 1031, 1033, 1034, 1035, 1037, 1038], "20": [2, 43, 46, 47, 52, 54, 57, 62, 63, 64, 69, 70, 74, 75, 78, 80, 81, 83, 87, 88, 94, 100, 109, 113, 118, 120, 127, 129, 136, 140, 142, 143, 146, 150, 154, 155, 157, 161, 163, 164, 165, 168, 176, 185, 187, 188, 196, 202, 203, 205, 209, 211, 212, 213, 216, 221, 224, 225, 226, 227, 229, 235, 243, 249, 257, 259, 260, 264, 270, 271, 273, 274, 276, 281, 282, 285, 287, 290, 294, 295, 296, 297, 298, 301, 308, 314, 315, 316, 320, 321, 322, 323, 325, 329, 330, 333, 337, 339, 343, 345, 349, 352, 353, 357, 369, 373, 374, 376, 381, 382, 394, 400, 401, 408, 415, 416, 441, 446, 447, 449, 464, 465, 469, 471, 472, 478, 488, 489, 490, 491, 493, 495, 497, 498, 501, 503, 505, 506, 512, 513, 516, 517, 524, 532, 537, 538, 543, 546, 547, 549, 553, 556, 557, 560, 561, 562, 563, 564, 570, 571, 583, 590, 591, 593, 595, 598, 600, 630, 631, 646, 650, 659, 667, 668, 669, 677, 679, 697, 705, 709, 714, 717, 726, 727, 740, 757, 758, 768, 793, 794, 798, 799, 800, 801, 815, 827, 828, 829, 832, 834, 837, 838, 839, 842, 843, 850, 851, 862, 863, 864, 865, 867, 869, 870, 878, 879, 880, 881, 886, 900, 901, 903, 904, 909, 912, 917, 923, 929, 931, 932, 935, 979, 991, 998, 1002, 1005, 1008, 1009, 1012, 1015, 1023, 1025, 1026, 1028, 1029, 1031, 1033, 1039, 1042, 1045, 1047, 1048], "200": [69, 70, 79, 83, 87, 93, 107, 123, 136, 146, 153, 168, 174, 199, 208, 213, 216, 217, 218, 224, 229, 233, 251, 255, 271, 277, 279, 280, 310, 313, 331, 339, 340, 357, 359, 371, 388, 413, 415, 420, 440, 454, 468, 471, 472, 523, 534, 535, 536, 539, 540, 541, 544, 548, 585, 650, 652, 672, 680, 693, 747, 815, 862, 863, 903, 907, 908, 909, 910, 911, 923, 1002, 1017], "2000": [54, 63, 75, 83, 107, 121, 127, 191, 258, 261, 270, 287, 305, 323, 352, 371, 373, 408, 409, 415, 420, 452, 462, 534, 535, 560, 690, 692, 694, 744, 789, 798, 851, 881, 893, 999, 1002, 1008, 1014], "20000": [57, 122], "200000": [230, 870], "20002": 1046, "2001": [2, 64, 175, 188, 264, 269, 405, 408, 415, 437, 451, 452, 453, 462, 512, 560, 561, 565, 566, 629, 635, 640, 646, 692, 697, 736, 789, 886, 898, 936, 992, 994, 998, 1002, 1008, 1010, 1012, 1014, 1017], "2002": [96, 406, 408, 415, 437, 448, 594, 595, 727, 757, 852, 900, 994, 1002], "20023": 1046, "2003": [2, 51, 175, 405, 408, 413, 416, 451, 452, 462, 514, 516, 690, 694, 840, 842, 998, 999, 1004, 1014, 1041], "20030": 1046, "20031": 1047, "2004": [44, 168, 270, 287, 371, 373, 408, 410, 413, 473, 536, 608, 609, 690, 694, 706, 744, 784, 901, 996, 998, 999, 1004, 1017], "2005": [62, 64, 112, 373, 406, 437, 439, 854, 998, 1005, 1015], "20056": 1046, "2006": [2, 50, 303, 371, 415, 418, 462, 499, 558, 559, 566, 567, 611, 612, 615, 620, 623, 650, 667, 668, 742, 789, 790, 798, 840, 898, 915, 916, 998, 1002, 1004, 1007, 1014, 1015], "2007": [0, 73, 200, 371, 408, 417, 440, 452, 454, 460, 462, 567, 657, 692, 718, 735, 738, 759, 760, 796, 994, 998, 1000, 1002], "20072": 1046, "2008": [51, 410, 412, 413, 478, 535, 564, 591, 646, 665, 686, 687, 693, 717, 727, 757, 835, 840, 844, 861, 996, 999, 1000, 1002, 1003, 1004, 1007, 1008, 1017], "20087": 1046, "2009": [2, 134, 137, 138, 148, 198, 408, 412, 413, 415, 416, 520, 521, 529, 532, 538, 539, 541, 542, 545, 548, 554, 560, 561, 636, 672, 680, 697, 836, 913, 914, 948, 949, 998, 1002, 1003, 1009, 1018], "200_000": [870, 1049], "200j": 161, "200m": 371, "200x": 1033, "201": [145, 168, 247, 373, 585, 1023], "2010": [0, 110, 187, 275, 276, 405, 408, 410, 412, 413, 421, 475, 537, 705, 709, 720, 721, 741, 830, 862, 863, 994, 998, 1002, 1006, 1016, 1020, 1033], "2011": [0, 187, 382, 413, 416, 536, 539, 541, 542, 548, 591, 628, 639, 659, 731, 992, 1006, 1016, 1020, 1033], "20117": 1046, "2012": [0, 112, 406, 415, 556, 557, 564, 640, 744, 991, 995, 1002, 1020, 1033], "2013": [0, 191, 373, 408, 412, 413, 537, 727, 757, 994, 1002, 1020, 1034, 1035], "2014": [0, 370, 402, 413, 415, 418, 531, 608, 609, 623, 624, 659, 693, 862, 863, 948, 949, 999, 1006, 1026, 1036], "20145": 1047, "2015": [0, 187, 370, 709, 722, 724, 725, 862, 863, 1002, 1009, 1026, 1037, 1038], "201520": 202, "20155": 1046, "20159": 1046, "2016": [0, 47, 237, 370, 408, 991, 1038, 1039], "20161": 1046, "20165": 1046, "2017": [0, 270, 370, 406, 408, 419, 444, 1002, 1039, 1040], "2018": [0, 212, 230, 416, 450, 991, 1002, 1026, 1040, 1041], "2019": [0, 47, 187, 374, 408, 452, 462, 693, 999, 1002, 1009, 1012, 1041, 1042, 1043], "202": [255, 1023], "2020": [0, 371, 1043, 1044, 1045, 1046], "20200": 1046, "20207": 1046, "20209": 1046, "2021": [0, 374, 376, 672, 1002, 1045, 1046], "2022": [0, 364, 408, 415, 706, 1012, 1047, 1048], "2023": [0, 388, 402, 406, 1048, 1049], "20231": 1046, "2024": [1050, 1051], "20240": 1046, "20250": 1046, "20272": 1046, "2028": 47, "20297": 1046, "203": [86, 352], "2031": 47, "20312": 1046, "203174": 202, "20326": 1046, "20331": 1048, "2034": [351, 371], "20380": 1046, "20385": 1046, "2039": 273, "204": [1010, 1015], "20408": 1047, "20415": 1048, "20416": 1046, "20431": 1046, "20477": 1046, "205": [211, 1023], "20512": 1046, "20515": 1046, "20521": 1046, "20524": 1049, "20526": 1046, "20528": 1046, "20531": 1046, "20534": 1046, "20552": 1046, "20554": 1046, "20560": 1046, "20567": 1047, "20583": 1046, "20597": 1046, "20617": 1048, "20619": 1046, "20638": 1046, "20640": [140, 182, 371, 490], "20652": 1046, "20653": 1047, "20657": 1046, "20673": 1046, "20683": 1046, "207": [308, 1033], "2071716": [845, 846], "20727": 1046, "20729": 1046, "20752": 1046, "2075215": 227, "20753": 1047, "20761": 1046, "207667": 273, "2079": 275, "208": [168, 290, 373], "20802": 1048, "20803": 1047, "20811": 1047, "20842": 1046, "20843": 1046, "20860": 1047, "20880": 1046, "208864": 202, "20899": 1046, "209": [235, 742, 881, 1023], "20904": 1046, "20959": 1046, "20960": 1046, "20961": 1046, "20_000": 290, "20new": 371, "20newgroup": [66, 183, 192, 205, 228, 308, 489, 659, 831, 834, 998, 1023], "20news_hom": 371, "20newsgroup": [227, 369, 1033], "20th": 709, "21": [43, 52, 105, 118, 168, 186, 202, 213, 230, 237, 260, 264, 290, 308, 312, 314, 325, 373, 374, 378, 380, 394, 405, 415, 416, 441, 445, 474, 478, 530, 533, 562, 563, 564, 570, 571, 589, 590, 592, 628, 670, 688, 755, 801, 815, 828, 871, 878, 880, 886, 903, 919, 948, 994, 998, 1002, 1003, 1012, 1029, 1031, 1033, 1034, 1036, 1040, 1041, 1043], "2100": [83, 322], "2102": 545, "21020": 1048, "21026": 1047, "21032": 1047, "21038": 1047, "2107": 275, "21078": 1047, "21079": 1047, "21080": 1046, "21086": 1047, "21093": 1046, "211": [103, 266, 275, 280, 324, 332, 881, 893, 1023], "21109": 1047, "21114": 1047, "211217613": 1041, "21130": 1046, "21145": 1046, "21148": 1047, "2117": 333, "21177": 1047, "21179": 1046, "21194": [80, 1046], "21195": 1046, "21199": 1046, "212": [145, 168, 275, 285, 332, 373, 469, 501, 1008, 1023], "21219": 1047, "212197e": 230, "21243": 80, "21251": 1046, "2126": 249, "21271": 1046, "21278": 1047, "21295": 1046, "21298": 1047, "213": [54, 353, 1023], "21301203": 173, "213056e": 230, "21310": 1047, "21316": 1047, "21330": 1047, "21334": 1047, "21336": 1046, "21340": 1046, "21341": 1047, "21351": 1046, "21389": 1046, "2139": [212, 230], "214": [171, 585], "21408": 1047, "21425": 1047, "21430": 1047, "21432": 1047, "21434": 1047, "21436": 1047, "21443888": 227, "21445": 1047, "21448": 1047, "21469": 1048, "2148": 47, "21481": [1046, 1047], "21482": 1047, "21493": 1046, "215": 585, "2150": 47, "21517": 1046, "21534": 1047, "21542": 1047, "21544347": 51, "21552": 1046, "2156": 47, "21565": 1047, "2156660": 326, "21567": 1047, "21569": 1047, "21573": 1047, "21576": 1047, "21578": [47, 1046], "2158": 47, "2159048": [654, 664, 685], "216": 1015, "21606": 1047, "21616": 742, "21617": 1047, "21632": 1047, "2164": 47, "2165": 47, "2168": 47, "2169": 47, "21694": 1046, "217": [186, 205, 282, 536, 542, 800, 1023], "21701": 1047, "21705": 1047, "2171": 46, "21713": 1047, "21724": 1047, "2173": [200, 657, 998], "21735": 1047, "21741": 1046, "21762": 1047, "21767": 1047, "2179": 47, "218": [373, 471, 716, 787], "2180": 57, "21800": 1047, "21805": 1047, "21807": 1050, "21808": 1047, "21809": 1049, "21814": 1047, "21832": 1047, "21833": 1046, "21837": 1047, "21845": 1046, "21871": 1046, "21873": 1047, "21880": 1047, "21881": 1047, "21888": 1047, "218997": 202, "219": [163, 269, 1023], "21901": 1047, "21915": 1046, "21917": 1046, "2192": [200, 657, 998], "21938": 1048, "21954": 1047, "21987": 1047, "21988": 1047, "21991": 1046, "21998": 1047, "22": [43, 52, 77, 138, 139, 141, 154, 181, 182, 183, 186, 187, 188, 220, 229, 237, 252, 260, 264, 292, 308, 310, 314, 318, 321, 324, 327, 330, 333, 353, 376, 381, 394, 405, 437, 448, 472, 478, 488, 489, 496, 497, 505, 516, 525, 532, 538, 543, 546, 547, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 595, 610, 628, 629, 633, 635, 646, 648, 652, 654, 656, 659, 660, 662, 664, 666, 670, 689, 693, 703, 705, 714, 758, 770, 779, 784, 785, 789, 801, 802, 806, 815, 820, 822, 825, 826, 827, 828, 829, 830, 831, 832, 849, 851, 853, 855, 856, 857, 862, 863, 864, 866, 869, 885, 896, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 943, 944, 994, 1002, 1012, 1023, 1029, 1031, 1033, 1036, 1041, 1044, 1046], "220": [79, 264, 302, 1023, 1033], "2200": [83, 371, 494], "22002": 1047, "22014": 1048, "22015": 1047, "22016": 1047, "22027": 1047, "220446049250313e": [471, 472, 478, 651, 652, 655, 656, 657, 683, 684], "22050": 1046, "22054": 1048, "22058": 1047, "22059": 1047, "22062": 1047, "22063": 1047, "22064": 1047, "22065": 1047, "221": [115, 124, 152, 264, 1023, 1036], "22106": 1047, "22108": 1047, "2211": 635, "22111": 1047, "22114": 1047, "22118": 1047, "22119": 1047, "22120": 1047, "22137": 1047, "22148": 1047, "22149": 1047, "22150": 1047, "22154": 1047, "22159": 1047, "22181": 1047, "22188": 1047, "22191": 1047, "22199": 1047, "222": [115, 152, 333, 1017], "22203": 1047, "22206": 1047, "2221": 47, "22212": 1047, "22215": 1047, "22217": 1047, "22218": 1047, "2222": [47, 657], "22223": 1047, "22235": 1047, "22237": 1047, "2224": [47, 1035], "22240": 1047, "22248": 1047, "22249": 1047, "2225": 47, "22254": 1047, "22255": 1047, "22268": 1048, "22269": 1048, "22284": 1047, "22288": 1047, "223": [115, 152, 168, 267, 373, 1023], "22300": 1047, "22314355": 591, "22318": 1047, "2232": 47, "22320": 1047, "2234": 47, "22356": 1047, "22361": 373, "22370": 1047, "223745": 212, "2238": 47, "224": [86, 115, 152, 408, 726, 823], "2240": 47, "22409": 1049, "22410": 1047, "22412": 1047, "22438": 388, "2244": 47, "2245": 47, "2246": 230, "22476": 1047, "2248": 47, "22486": 1047, "2249": 47, "22493": 1047, "22498": 1047, "225": [311, 415, 1023], "22504": 408, "22506": 1049, "22508": 1047, "22518": 1048, "22525": 1047, "22526": 1047, "22527": 1048, "22537": 1047, "22548": 1047, "22553": 1047, "22554": 1048, "22562": 1048, "22566": 1047, "22578": 1047, "225806": 230, "22595": 1047, "226": [178, 243, 408, 419, 444, 1023], "22604": 1047, "22629": 1048, "22635": 1047, "22665": 1048, "22685": 1047, "22687": 1047, "22692": 123, "22694": 1047, "22695": 1047, "22696": 1047, "22697": 1047, "227": [270, 408, 726], "22710": 1048, "22735": 1047, "22747343e": 111, "22775": 1047, "22784907": 828, "22806": 1047, "22808": 1047, "22830": 1047, "2284": 187, "22856": 1047, "2286": 371, "22866": 1047, "22868": 1047, "2287": 371, "2288": 371, "22891": 1047, "22898": 1048, "22899": 1047, "229": 1002, "22908": 1047, "22913": 1047, "22950": 1047, "22953": 1047, "22965": 1048, "22968": 1048, "22982": 1047, "22982331": 326, "22993": 1048, "22nd": 439, "23": [43, 57, 63, 70, 83, 123, 151, 168, 183, 187, 212, 233, 241, 251, 253, 260, 264, 308, 314, 316, 318, 321, 322, 323, 326, 330, 373, 382, 394, 415, 421, 431, 440, 447, 452, 454, 462, 465, 467, 468, 475, 478, 479, 480, 482, 483, 484, 490, 493, 501, 502, 503, 505, 506, 511, 513, 515, 523, 525, 539, 540, 541, 544, 548, 555, 557, 559, 561, 562, 563, 566, 569, 570, 571, 608, 609, 612, 628, 631, 633, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 676, 679, 680, 681, 682, 718, 731, 779, 831, 837, 838, 839, 848, 856, 863, 866, 878, 885, 893, 894, 903, 906, 908, 911, 914, 916, 929, 931, 932, 943, 944, 949, 1002, 1023, 1029, 1031, 1033, 1034, 1040, 1041, 1042, 1045], "230": [94, 245, 585, 1023], "2300": [83, 202], "23023": 1047, "23033": 1047, "23034": 1047, "23036": 1047, "23038": 1048, "23040": 1047, "23046": 1047, "23047": 1047, "23077": 1047, "23079": 1047, "23095": 1047, "23097": 1047, "23098": 1047, "23099": 1049, "231": [50, 303, 371, 408, 419, 444, 499, 585], "23101": 1048, "23113": 1047, "23115": 1047, "23127": 1048, "23139": 1048, "23149": [371, 498, 1047], "23194": 1047, "23197": 1048, "23198": 1047, "232": [264, 1002], "23210": 1048, "23214": 1047, "2323": [690, 694, 999], "23252": 1048, "23256": 1047, "23264": 1047, "23271": 1047, "23273": 1047, "23275": 1048, "23299": 1047, "2331": 43, "23317": 1050, "2332": 43, "2333": 43, "2334": 43, "2335": 43, "23358": 1047, "2336": 382, "23370": 1047, "23395": 1047, "233mb": 45, "234": [86, 840, 844, 862, 863, 1004], "2341": 525, "23410": 1047, "234137": 202, "23442": 1048, "23446": 1048, "23461": 1048, "23470": 1048, "23471": 1047, "23480": 1048, "235": [260, 316, 1023], "235430": 273, "23548": 1047, "2357juan": [1047, 1048, 1049], "23585": 1048, "23595": 1049, "236": 351, "23604": 1048, "23608": 1047, "23619": 1048, "23636": 1047, "23637": 1048, "23668876": [654, 664, 685], "236720": 202, "23683": 1048, "23689075": [654, 664, 685], "23726": 1048, "23731": 1049, "23734": 1048, "237703": 202, "23773583": 111, "23798": 1048, "23819": [1048, 1049], "23833": 1047, "23834": 1048, "23865": 1048, "23874": 1048, "238744": 202, "23877": 1048, "238955": 273, "239": 1033, "23905": 1048, "23935": 1048, "23977": 1048, "23990": 1047, "23993": 1048, "24": [43, 44, 52, 99, 123, 149, 168, 183, 187, 191, 198, 237, 250, 264, 282, 290, 318, 319, 320, 322, 325, 326, 329, 330, 374, 376, 380, 394, 400, 401, 408, 415, 416, 437, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 460, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 493, 497, 505, 516, 517, 518, 519, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 582, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 614, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 699, 700, 701, 703, 709, 715, 728, 747, 754, 798, 799, 801, 804, 805, 815, 822, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 866, 868, 869, 870, 871, 874, 875, 877, 879, 880, 881, 882, 883, 885, 895, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 943, 944, 948, 976, 982, 991, 1009, 1012, 1023, 1029, 1031, 1033, 1041, 1042, 1043, 1044, 1046], "240": [43, 45, 52, 79, 207, 1010, 1023, 1033], "2400": 83, "24000": 521, "24015": 1047, "24017": 1047, "24027": 1049, "24051": 1048, "24058": 1048, "24075": 1048, "24076": 1049, "24083": 1049, "24084": 1048, "24087": 1047, "241": [415, 568, 569], "2410": 545, "24140": 1049, "24141": 1048, "24145": 1049, "24146": 1048, "24160": 324, "242": [885, 1033], "24218": 1048, "24230": 1049, "24245": 1048, "24258": 1048, "24264": 1048, "24283": 1048, "243": 585, "2431": 475, "24317": 1048, "24338": 1048, "24350": 1048, "24354": 1048, "24365": 1048, "243802": 306, "244": [264, 287, 585], "24404831511191221642141021252626109": 52, "24405": 1048, "2441": 230, "24412": 1048, "24421": 1048, "24433": 1048, "24446": 1047, "244466": 253, "24465": 1048, "2449": 382, "245": [138, 1014, 1023, 1035], "24512": 1048, "24523": 1048, "24528": 1048, "24538": 1048, "24539": 1048, "24543": 1048, "24556": 1048, "24568": 1049, "245961": 146, "245mb": 353, "246": [198, 1010, 1033], "24617": 1048, "2463": 998, "24630": 1048, "24631": 1047, "24637": 1048, "24640578": 111, "24645": 1048, "24667": 1048, "24668": 1049, "24677": 1049, "24683": 1048, "24688": 1048, "24699": 1048, "247": 885, "24714": 1048, "24747": 1048, "24750": 1048, "24755": 1048, "24767": 1048, "24769": 1049, "24838": 1050, "24849": 1048, "24855": 1048, "24856": 1048, "24871": 1049, "24873": 1048, "2487575": 191, "2487591": 191, "24882": 1049, "24889": 1048, "24894": 1048, "249": 264, "24935": 1049, "24951": 1048, "25": [43, 44, 45, 46, 48, 49, 50, 52, 57, 61, 63, 77, 87, 88, 111, 115, 127, 129, 138, 146, 164, 165, 171, 181, 186, 194, 203, 216, 237, 239, 257, 264, 270, 303, 305, 308, 310, 312, 324, 329, 330, 351, 357, 359, 363, 382, 412, 415, 416, 419, 444, 477, 481, 502, 505, 522, 571, 598, 619, 679, 735, 797, 818, 831, 857, 875, 880, 882, 883, 886, 894, 895, 897, 898, 946, 950, 982, 998, 1002, 1003, 1005, 1012, 1033, 1035, 1041, 1044], "250": [49, 98, 146, 191, 232, 494, 693, 823, 991, 1014, 1040], "2500": 1002, "25000": 77, "2501": [168, 373], "25044": 1049, "250639": 202, "25067": 1048, "25077": 1048, "25080": 1048, "25089": 1048, "25093": 1049, "25094": 1048, "251": [168, 234, 373], "25102": 1049, "25120": 1049, "25129": 1048, "25147": 1048, "25163598": 384, "25172": 1048, "25174": 1048, "25177": 1049, "25183501383331797": 278, "25186": 1049, "25188": 1048, "25190": 1049, "25193977": 1003, "25196": 1049, "252": [129, 168, 234, 373, 535, 881, 893, 1023], "25209": 1049, "25214": 1049, "25220": 1049, "25232": 1049, "25250": 1048, "25251": 1049, "25257": 1049, "25274": 1048, "25275": 1050, "25291": 1049, "25291366": 359, "25294": 1049, "25295": 1048, "25296": 1048, "25297": 1049, "25299": 1049, "253": [145, 535], "25308": 1049, "25312": 1048, "25334": 1049, "25341": 1048, "253445": 146, "25349312e": 195, "2535": [469, 474], "25354": 1048, "2536": 476, "25363": 1048, "25367": 1049, "25370": 1048, "25387": 1049, "254": 54, "25402": 1049, "25417": 1049, "25432": 1049, "25438": 1049, "25443": 1049, "25477": 1048, "2548": 209, "25490": 1049, "25499205": 537, "255": [123, 290, 307, 316, 322, 371, 415, 494, 495, 562, 563], "25500": 1048, "25506": 1049, "25511": 1048, "25531": 1049, "25563": 1048, "25570": 1048, "25587": 1049, "25589": 1048, "256": [77, 86, 145, 316, 364, 371, 408, 415, 449, 468, 538, 547, 564, 861, 893, 903, 1047], "25601": 1049, "25619": 1048, "25629": 1049, "25638": 1048, "25659": 1049, "25664": 1048, "25672": 1049, "25677": 1049, "2568": 1042, "25694": 1048, "25697": 1049, "257": [234, 268], "25704": 1048, "25713": 1049, "25719016": 1003, "25732": 1049, "25733": 1049, "25744": 1048, "25747": 1048, "25752": 1049, "25774": 1048, "25784": 1049, "2579": 693, "258": 234, "25805": 1049, "25813": 1049, "25814": 1049, "25815": 1049, "259": [50, 143, 234, 303, 371, 415, 499, 568, 569, 1023], "259031": 202, "259297": 202, "25931": 1049, "25956": 1049, "25973": 1049, "25987": 1049, "25991": 1051, "25th": [43, 249, 883], "26": [43, 80, 87, 111, 118, 122, 175, 186, 248, 249, 264, 330, 382, 571, 649, 730, 784, 823, 881, 893, 949, 1002, 1012, 1033, 1036, 1037, 1045, 1051], "260": [54, 269, 1046], "26019": 1049, "26021": 1049, "26033": 1049, "2605": 693, "26082": 1049, "26093": 1049, "26106": 1049, "26108": 1049, "26113448": 165, "26120": 1051, "26121": 1049, "26163": 1050, "26194": 1049, "262": 1033, "26207": 1049, "26242": 1049, "26243": 1050, "26253567e": 111, "26264": 1049, "26267": 1050, "26278": 1050, "26286": 1049, "26286057": 227, "26289": 1049, "26299": 1050, "26315": 1050, "26316": 175, "26318": 1049, "26323": 1049, "263234": 253, "26323428": 253, "26325": 1049, "26333": 1049, "26337": 1049, "26362917": 227, "26366": 1050, "263758": [584, 588], "26376": 1049, "26385": 1049, "26386": 1049, "26386883": 173, "26391": 1050, "2640": 836, "26400": 1049, "26410": 1050, "26411": 1050, "26416": 1049, "26424": 1049, "26433": 1049, "26454": 1049, "26459": 1050, "26464": 1050, "26466": 1049, "265": [736, 840, 844, 1004], "26503": 1049, "26506": 1050, "26521": 1049, "2652124": 816, "26525": 1050, "26551": 1049, "26566": 1049, "26579": 1049, "26593496": 227, "26600": 1049, "26602": 1049, "26616": 1050, "26634": 1050, "26642044": 667, "26644": 1049, "26648": 1050, "26653": 1049, "26657": 1049, "2666": 1002, "2667": 499, "26674": 1050, "26683": 1050, "267": [111, 1023, 1033], "2671": 1012, "26721": 1050, "26734": 1050, "26736": 1050, "26744": 1050, "26748": 1049, "2675": 46, "26754": 1049, "26760": 1049, "26765": 1050, "267703": 87, "26772": 1049, "26786": 1050, "26789": 1050, "268": [243, 284], "26814": 1049, "268147": 273, "26828": 1050, "26830": 1050, "26831": 1050, "26837": 1051, "26840": 1050, "26855": 1050, "26862": 1050, "26893": 1049, "26896": 1050, "269": [223, 256, 512, 1023], "26903": 1049, "26909": 1050, "26913": 1049, "2692": 1012, "26931": 1049, "26934744": 130, "26940": 1049, "26944": 1050, "26957": 1050, "26th": [408, 727, 757, 1002], "27": [43, 45, 52, 57, 67, 81, 87, 191, 237, 249, 264, 329, 330, 348, 373, 408, 416, 518, 525, 606, 714, 789, 790, 886, 906, 1002, 1012, 1023, 1033, 1035], "270": [198, 330], "27000": 230, "27002": 1049, "27005": 1050, "27006": 1050, "27017": 1050, "27018": 1050, "27044": 1049, "27054655": 227, "27058": 1050, "27098": 1050, "27100": 1050, "27104": 1050, "27110": 1050, "27137": 1050, "27139": 1050, "2714": 249, "271411": 253, "27161": 1050, "27161955": 165, "27166": 1050, "27167": 1049, "27179": 1050, "27185": 1050, "272": [210, 1023], "27204": 1050, "27219": 1050, "272214": 585, "27239": 1050, "27240": 1050, "27243": 1049, "27250": 1050, "27252": 1050, "2727": 559, "27274": 1050, "27277": 1050, "27291": 1050, "27292": 1049, "273": [344, 1023], "27301": 1050, "27308": 1050, "27309": 1050, "2730984": 326, "27311": 1049, "27314": 1050, "27315": 1050, "27328": 1050, "27336": 1050, "2734": 382, "27344": 1051, "27372": 1050, "27389": 1050, "274": 512, "27417": 1050, "27431": 1050, "27438": 1050, "27456": 1051, "27468": 1049, "27478": 1050, "27490": 1050, "27491": 1051, "27499706": 51, "275": [43, 330, 1036], "27500": 1050, "27526": 1051, "27538": 1050, "27544": 1050, "27556": 1050, "27558": 1050, "27560": 1051, "27566": 1051, "275706": 87, "27573": 1049, "27576": 1051, "27577": 1050, "27580": 1049, "27583": 1049, "27584": 1051, "275851": 253, "2759": [897, 898], "27597342": 115, "276": 270, "27601": 1050, "27614": 1050, "27624": 1050, "2763": [421, 475], "27636": 1051, "27639": 1050, "27645": 1050, "27650": 1050, "27651": 1050, "27657": 1051, "27668": 1050, "27670": 1050, "27675": 1050, "27678": 1050, "277": [1010, 1035], "27700": 1051, "27702": 1050, "27710": 1050, "27718": 1050, "27720": 1050, "27721": 1050, "27734": 1050, "27757": 1050, "27760": 1050, "27772182": 52, "278": [194, 373, 845, 846, 1023], "2780": 382, "27800": 1051, "27801": 1050, "27817": 1050, "27821": 1050, "27828": 1050, "27834": 1050, "27835": 1050, "27841": 1050, "27844": 1051, "27865": 1050, "27898": 1050, "27899": 1050, "279": [179, 998], "27904": 1051, "27937": 1051, "27979": 1050, "27990": 1051, "28": [43, 99, 146, 168, 186, 228, 264, 279, 307, 329, 330, 373, 382, 408, 412, 450, 457, 1012, 1033, 1036, 1039], "280": 330, "28009951": 828, "2802": 57, "28040": 1051, "28048": 1050, "28051": 1051, "28053": 1051, "28074": 1050, "28085": 1051, "28090": 1050, "28092": 1051, "28095": 1050, "28102": 1051, "28111": 1050, "28121": 1050, "28136": 1051, "28160": 1051, "28165": 1050, "28167": 1050, "2818": 470, "28184": 1050, "28187": 1051, "28188": 1050, "28191": 1050, "28195": 1050, "28198": 1050, "282": [332, 1023, 1033], "28205": 1051, "28207552": 227, "28210": 1051, "28222": 1050, "28225276": 86, "2823": 333, "28233": 1050, "28235": 1050, "28240": 1050, "28241": 1050, "28247": 1050, "2825": 0, "28256": 1050, "28261": 1051, "28262": 1050, "28263": 1050, "28295": 1050, "283": 1023, "2830": 0, "28306": 1051, "28327": 1050, "2833": 382, "28351": 1051, "28352": 1051, "28360": 1051, "28365": 1050, "28377": 1050, "28385": 1050, "28399": 1051, "284": [73, 650, 1023], "28407": 1051, "28425": 1051, "284315": 264, "28432": 1051, "28435": 1051, "28471": 1051, "284806": 264, "284807": 264, "28483": 1051, "28491": 1051, "28498": 1051, "285": [253, 307, 330, 725, 1023], "28521": 1051, "28552": 1051, "28557": 1051, "28582": 1051, "286": 415, "28604": 1051, "28612": 1051, "28651": 1051, "28664": 1051, "28670": 1051, "28692": 1051, "287": [187, 1014], "28703": 1051, "28712": 1051, "28718": 1051, "28722": 1051, "28756": 1051, "28763": 1051, "28768": 1051, "2879": 1040, "288": [317, 536, 542, 1023], "28808734": 216, "28822": 1051, "28823": 1051, "28843": 1051, "28847": 1051, "289": 186, "28915": 1051, "28925": 1051, "28951": 1051, "28975": 1046, "28988": 1051, "28x28": 307, "29": [112, 171, 175, 204, 212, 216, 229, 237, 264, 271, 324, 330, 373, 415, 560, 561, 691, 695, 782, 798, 857, 998, 999, 1016], "290": [330, 689, 690, 694, 999], "290075": 202, "29018": 1051, "290584": 306, "29078": 1051, "291": [168, 352, 371, 373], "29119": 1051, "2914": 495, "29179": 1051, "292": [394, 415, 736], "29235": 1051, "29269": 1051, "2928359": 227, "293": 243, "29314": 1051, "29316": 175, "29327": 1051, "29330": 1051, "29336": 1051, "2939931": 326, "29401": 1051, "29473397": [845, 846], "295040e": 230, "29545": 1051, "295505e": 230, "296": [66, 1014, 1023], "2961": 652, "29612": 1051, "296575": 202, "29694": 1051, "297": 371, "29780": 1051, "298": [294, 1010, 1023], "298688": 270, "29898468": 227, "299": [135, 352, 357, 681, 1023], "299546e": 230, "2_": 994, "2_000": 134, "2_2": [647, 648, 653, 654, 655, 656, 657, 661, 662, 663, 664, 673, 682, 683, 684, 685], "2_f": 653, "2_fro": [654, 663, 664, 685], "2_poli": 270, "2_y": 1004, "2c": [644, 653, 673, 674, 675, 676, 688, 994], "2d": [2, 43, 69, 71, 74, 79, 81, 82, 86, 89, 94, 95, 119, 121, 124, 126, 130, 152, 183, 207, 213, 218, 232, 233, 234, 237, 239, 242, 243, 299, 329, 330, 337, 340, 358, 370, 372, 376, 385, 390, 408, 409, 413, 416, 418, 441, 452, 462, 464, 467, 481, 488, 490, 491, 493, 494, 495, 501, 502, 503, 505, 511, 515, 534, 542, 550, 585, 587, 636, 644, 658, 673, 692, 739, 780, 826, 830, 834, 872, 922, 925, 927, 931, 932, 948, 964, 987, 988, 996, 998, 999, 1002, 1009, 1013, 1018, 1023, 1033, 1037, 1040, 1041, 1042, 1045, 1047, 1051], "2e": [199, 283, 285], "2e6": 1002, "2ec5ac": 314, "2f": [44, 47, 50, 52, 57, 67, 74, 77, 79, 80, 83, 85, 95, 97, 100, 115, 118, 123, 129, 146, 149, 153, 154, 163, 186, 187, 191, 194, 202, 204, 209, 212, 227, 228, 229, 230, 239, 243, 249, 264, 269, 273, 274, 276, 278, 279, 280, 284, 298, 299, 305, 312, 315, 323, 327, 340, 351, 352, 359, 409, 412, 415, 697, 829, 832], "2fbf01908075": 706, "2fx": 258, "2g": [234, 237, 698, 1044], "2h": 414, "2k": 181, "2l": [418, 623], "2n": [697, 994, 1006], "2n_": 998, "2nd": [93, 126, 178, 315, 408, 419, 444, 531, 1012, 1048], "2x": 1033, "2x2": [337, 408, 755], "2x_iy_im": 371, "31": [43, 102, 110, 168, 230, 264, 271, 284, 295, 322, 329, 330, 405, 416, 501, 562, 563, 598, 650, 672, 680, 966, 1003, 1023, 1033], "3109306": 173, "311": 352, "312": [149, 1036], "3121": 709, "313276e": 230, "315": [290, 352, 373], "316": [59, 175, 179, 612, 615, 626, 881, 1023], "31622776601683794": 159, "3164764": [212, 230], "317": 175, "31760": 998, "318": [329, 450, 1023], "318387": 306, "319": [61, 171, 292, 1023], "31958": 175, "31973683": 227, "31bit": 1044, "31st": [213, 884], "32": [43, 44, 52, 84, 118, 185, 188, 248, 249, 284, 323, 330, 370, 374, 381, 390, 405, 415, 416, 445, 565, 566, 583, 590, 635, 677, 884, 886, 931, 932, 966, 1010, 1012, 1033, 1036, 1039, 1041, 1042, 1045, 1046, 1047, 1050], "320": [371, 991, 1016, 1033], "3204": 1039, "321301": 62, "322": [45, 352, 471, 472], "3221": [693, 999], "323": [243, 325, 1023], "323200": 62, "324": 371, "324084": 202, "3245": [693, 999], "325": [343, 1023], "325198e": 230, "3252": 598, "32634568": 216, "3264": 46, "327": [63, 731], "3272984419327777": 355, "3273": 747, "327407": 253, "327605": 253, "32767": 1044, "32782448": 173, "3279": 46, "328": [352, 731], "3288": 545, "329": 450, "329616": 202, "32987858": 566, "32bit": [2, 363, 966, 1051], "32x32": 373, "33": [43, 52, 111, 212, 324, 330, 358, 371, 373, 381, 382, 408, 416, 461, 533, 638, 649, 713, 714, 730, 731, 739, 744, 784, 785, 788, 807, 829, 831, 833, 892, 916, 983, 998, 1002, 1012, 1033, 1041], "330": 330, "331263": 202, "3315057": [827, 828], "3317": 212, "332": [352, 893], "333": 847, "3333": 499, "333333": 230, "33333333": [855, 1012], "334": 173, "334795": 273, "335": [43, 54], "335919": 306, "336": [100, 149, 382, 1012, 1023], "336188": 306, "3367": 1040, "337": 382, "3375": 324, "338": [69, 110, 249, 1023], "3383": 46, "3384": 352, "3387": 352, "339": 352, "3397": [665, 686, 687], "33rd": [902, 1015], "34": [43, 146, 168, 170, 295, 308, 329, 330, 358, 373, 412, 521, 530, 571, 598, 650, 668, 717, 765, 1033], "340": [245, 265, 329, 1023], "34118": 371, "34125758": 227, "3415": [665, 686, 687], "341523": 306, "3419": 273, "341949": 202, "342": 823, "34279478": 227, "343": [121, 1023], "3433": 46, "34346583": 86, "3445": 46, "345": [168, 373], "34545455": 998, "3456": 46, "34586917": 227, "346": [415, 502, 556, 557], "3467": 616, "347": [57, 1023], "347717": 146, "34862835": 326, "34867495": 1003, "349": [134, 352, 382, 554], "34990341": 115, "35": [43, 45, 46, 48, 50, 88, 103, 136, 156, 186, 187, 193, 200, 239, 287, 315, 329, 330, 545, 649, 650, 657, 703, 707, 708, 728, 742, 757, 783, 790, 838, 991, 998, 1002, 1008, 1009, 1012, 1033, 1035], "350": 186, "351390": 270, "352": [217, 270, 382, 1023], "352124": 202, "35278655": 227, "3534": 57, "3539": 102, "354394": 146, "3551": 46, "355440": 270, "355445": 146, "356": [191, 1010, 1023], "356497": 146, "3565178": 966, "357": [168, 352, 373, 501, 906], "3573": 828, "35776189065725783": 320, "3582": 46, "358295": 202, "358990": 202, "3591": 1042, "36": [43, 45, 46, 47, 52, 53, 122, 168, 176, 186, 230, 249, 343, 358, 373, 382, 415, 416, 556, 557, 571, 736, 760, 1002, 1033], "360": [134, 554], "360000": 306, "36047253": 227, "361": [371, 415, 556, 557], "362": 351, "362176": 324, "363": 52, "3635": 828, "364": [122, 471, 472, 1023, 1034], "365": [410, 473], "3659": 1038, "366": 358, "367": [352, 415, 1033], "36787944": 1000, "3680": [612, 615, 626], "3684": 836, "36851234": 817, "368896": 62, "3690483151908911912247722318110": 52, "3696": 614, "3697": 851, "3697178": 52, "37": [43, 47, 198, 227, 273, 284, 329, 358, 371, 415, 525, 717, 885, 896, 1012, 1033], "370000e": 230, "370039": 202, "370738": 62, "371": [152, 1023], "372": 352, "37257991": 115, "373333": 273, "375": [86, 449, 751, 1002], "376": 1010, "37647423": 52, "376999": 62, "377": [240, 1023], "37741762": 130, "377eb8": [75, 79, 95, 96, 239], "378": [186, 352, 415, 1033], "37815029": 227, "37845099": 359, "37967282": 1003, "379710": 186, "379763": 146, "38": [47, 187, 204, 211, 216, 263, 279, 295, 325, 415, 633, 886, 948, 1002, 1012, 1033, 1034, 1035], "3800": 202, "3803": 353, "381327": 371, "382005": 146, "382120e": 230, "38353048": 227, "383973": 273, "384": [352, 697, 906], "3840": 1041, "384338": 202, "384616559": 385, "385": [70, 1023], "385000e": 230, "3854": [665, 666], "3855": 1022, "386": [156, 881, 1023], "3862": 869, "38629436": 1012, "38690531511642143152471231333333107": 52, "387": [352, 1033], "387580e": 230, "387599": 52, "387830e": 230, "3889": 475, "3889873516666431": 52, "389": [594, 595], "3894": 616, "39": [43, 47, 52, 168, 253, 264, 371, 373, 374, 380, 408, 416, 496, 896, 914, 950], "390": [234, 1023], "3908844": 828, "391": 697, "3910350737": 385, "3911": 47, "392": [107, 1023], "3928": 470, "393297": 253, "39329747": 253, "394": [96, 102, 179, 1023], "3947": 1014, "395": [43, 321, 1023], "39568399": 537, "396": [102, 168, 373], "3964": [421, 475], "397": 371, "3972": 656, "398": [352, 648], "3986": 230, "3996": 652, "3_": 994, "3_poli": 270, "3bae43c9b14e387f76a61b6d82bf98a4fb5d3ef99ef7e7075ff2ccbcf59f9d30": 47, "3c479a6885bfa0438971388283a1ce32": 370, "3d": [100, 126, 232, 234, 236, 358, 416, 507, 587, 922, 964, 1040, 1041, 1043], "3f": [43, 45, 47, 50, 52, 54, 55, 59, 61, 63, 73, 75, 81, 82, 91, 103, 105, 107, 116, 134, 141, 149, 164, 168, 170, 171, 172, 174, 179, 185, 187, 188, 194, 198, 199, 205, 212, 214, 218, 227, 228, 230, 233, 243, 245, 268, 270, 271, 273, 276, 278, 281, 283, 290, 305, 327, 333, 351, 352, 353, 823, 830, 1010], "3k": 697, "3l": 418, "3llobo": 1048, "3m": 51, "3rd": [126, 178, 840, 883, 1004, 1012], "3ssnporch": 143, "4": [43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 57, 58, 62, 63, 64, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 95, 97, 98, 99, 102, 103, 104, 105, 106, 112, 113, 115, 116, 118, 121, 122, 123, 124, 125, 126, 128, 129, 134, 135, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 159, 164, 168, 170, 173, 175, 176, 178, 179, 181, 182, 183, 186, 187, 188, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 216, 218, 219, 220, 222, 225, 226, 230, 232, 234, 239, 243, 244, 245, 246, 247, 248, 249, 251, 253, 255, 256, 257, 258, 260, 261, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 277, 278, 279, 281, 282, 284, 285, 289, 290, 292, 294, 295, 296, 297, 300, 305, 307, 308, 310, 311, 313, 314, 316, 318, 319, 320, 321, 322, 324, 325, 327, 329, 330, 331, 332, 333, 337, 339, 340, 343, 344, 345, 347, 348, 349, 351, 352, 358, 359, 364, 370, 371, 372, 373, 374, 376, 380, 381, 382, 385, 388, 389, 390, 394, 399, 400, 401, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 437, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 491, 497, 505, 513, 514, 517, 518, 519, 525, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 584, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 615, 618, 619, 620, 623, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 678, 680, 681, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 699, 700, 703, 707, 708, 716, 717, 726, 727, 728, 733, 735, 743, 744, 745, 747, 748, 749, 750, 752, 753, 757, 769, 770, 782, 783, 789, 790, 791, 792, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 831, 833, 834, 835, 836, 839, 840, 841, 842, 844, 849, 853, 854, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 892, 893, 897, 898, 899, 903, 905, 906, 909, 913, 914, 915, 916, 927, 928, 930, 931, 932, 933, 937, 948, 949, 950, 951, 953, 955, 956, 957, 958, 965, 972, 973, 974, 976, 977, 978, 979, 982, 983, 984, 991, 992, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1012, 1013, 1016, 1017, 1023, 1029, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1046, 1047, 1048, 1051], "40": [43, 47, 52, 54, 87, 99, 109, 120, 126, 150, 156, 170, 198, 204, 205, 207, 229, 234, 236, 247, 249, 259, 271, 296, 302, 307, 312, 329, 330, 338, 339, 341, 343, 345, 346, 358, 364, 371, 412, 446, 496, 518, 519, 800, 845, 846, 850, 862, 863, 991, 1003, 1012, 1033, 1034], "400": [44, 63, 83, 120, 130, 148, 153, 170, 182, 218, 237, 282, 306, 352, 371, 413, 496, 1023], "4000": [92, 148, 258], "400000e": 230, "4017": 525, "4018260": 326, "402": 274, "402344": 382, "4025": 1038, "403": [68, 237, 274, 1023], "404": 230, "40597": 289, "406": [690, 694, 999, 1023], "4066": 46, "407": [168, 352, 373], "408": [48, 1023], "40842387": 51, "40887718": 90, "409": [198, 1023], "40945": 103, "4096": [120, 371, 413, 496], "40966": 370, "409717": 273, "41": [52, 168, 212, 249, 358, 371, 373, 457, 469, 481, 493, 622, 625, 636, 647, 648, 653, 659, 661, 662, 663, 665, 682, 686, 687, 700, 782, 840, 1004, 1008], "41075698": 414, "41076071": 414, "41082": 44, "411": [186, 333, 410, 420, 473, 534], "4110": 476, "41187": 175, "412": [497, 998], "412021": 146, "41214": [212, 230], "41215": 230, "412304": 202, "414": [230, 409, 727, 757, 881, 893, 1002], "41421356": [764, 770, 1005], "4143": 388, "414810": 253, "414912": 149, "415": [261, 352, 1023], "416": [740, 1002], "416010": 324, "41666667": 751, "41691605": 130, "417": [226, 289, 1023], "41726413": 130, "418": [277, 1023], "41888636": 663, "419": 617, "4194": 373, "42": [43, 44, 45, 52, 58, 61, 62, 63, 64, 67, 79, 80, 89, 109, 115, 118, 122, 127, 134, 141, 143, 144, 146, 147, 149, 150, 154, 164, 165, 182, 186, 188, 189, 191, 193, 202, 205, 207, 208, 214, 218, 219, 220, 226, 227, 229, 232, 233, 234, 239, 244, 245, 246, 249, 252, 264, 269, 271, 274, 283, 284, 290, 296, 297, 298, 305, 310, 311, 312, 313, 315, 317, 319, 321, 323, 332, 338, 340, 351, 352, 359, 364, 381, 382, 390, 399, 408, 412, 415, 416, 419, 437, 444, 478, 488, 493, 512, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 528, 530, 532, 538, 545, 546, 547, 558, 559, 566, 567, 568, 569, 571, 606, 607, 608, 609, 610, 678, 695, 696, 697, 761, 793, 794, 798, 800, 803, 823, 829, 831, 845, 846, 850, 854, 857, 897, 898, 900, 901, 902, 912, 915, 916, 923, 934, 948, 966, 970, 1005, 1012, 1029, 1030, 1033], "420": [161, 1023], "42074": 316, "421": [727, 757, 1002], "421087": 273, "42165": 143, "422": [352, 594, 595, 727, 757, 1002], "4226193151": 52, "4232": [43, 52], "423641": 202, "424": 230, "4242": [43, 52], "42425183539869415": 320, "425": [63, 233, 616, 1023], "4254": [168, 373], "4260": [750, 753], "427": [168, 346, 373, 507, 508, 584, 585, 588, 1023], "427329": 253, "428": [52, 1023], "4285714285714286": 1002, "42898696": 326, "429": [287, 352], "4294": 1039, "43": [168, 177, 243, 270, 290, 373, 381, 801, 815, 886], "430": [420, 534], "431": [303, 352, 373, 1023], "4310090": 770, "432": [270, 355, 410, 1023], "4325": 57, "433": [243, 264, 373], "43348936": 227, "4337": 998, "43475": 879, "435": [167, 1023], "436": [106, 243, 1023], "4362": 1038, "437": [102, 1023], "437362": 202, "438": [87, 186, 1010, 1023], "43847489": 130, "43873": 353, "4387766": 52, "4394": 1041, "44": [43, 104, 175, 186, 187, 198, 287, 294, 479, 782, 886, 906, 909, 984, 1002, 1009, 1023, 1033], "440": 186, "440409": 202, "4406": 473, "44063": 52, "4409": [43, 52], "441": [213, 1023], "44139186": 307, "4415": 57, "442": [168, 178, 182, 373, 502], "4425765": [654, 664, 685], "44300751539296973": 52, "44300752": 52, "443238": 273, "44373091": 1003, "44381023": 216, "44412786": 537, "445": [264, 1010], "445978": 202, "446": [352, 727, 757, 1002], "447268": 87, "4472869": 130, "4474": 382, "4478": 1038, "448": 290, "4486": 545, "449": [44, 113, 413, 536, 1023], "4496": [43, 52], "4497": 1022, "45": [75, 97, 105, 115, 118, 149, 164, 175, 188, 202, 212, 230, 277, 281, 282, 330, 340, 412, 415, 416, 565, 566, 628, 635, 647, 648, 653, 661, 662, 663, 682, 683, 684, 789, 798, 909, 992, 1002, 1010, 1020, 1029, 1033, 1036], "4500": 227, "45070924": 667, "451": 647, "45192": 159, "451933": 87, "452": [174, 176], "453": 358, "454": 179, "4544": 43, "455": 316, "4550": 370, "456": [44, 413, 536], "45612256": 661, "45663524": 661, "457": 616, "4576": 836, "458333315172": 52, "459": [204, 408, 442, 1023], "459074": 253, "46": [43, 52, 86, 212, 249, 359, 382, 594, 595, 683, 684, 717, 823, 909, 914, 1012, 1029], "46033": 497, "46043": 497, "46081961": 1003, "461": 382, "462234": 253, "463": [230, 287], "463088": 52, "46428631511221642143151251232633109": 52, "465660": 62, "465730": 202, "466": 1009, "4666": 635, "467": [85, 99, 1023], "46779927": 51, "468": 91, "46858513287221654": 325, "46874778": [654, 664, 685], "469": 91, "46915237": [654, 664, 685], "4694": 525, "469474": 202, "46958558": 662, "4697": 81, "47": [43, 77, 209, 371, 494, 495, 536, 542], "470": 187, "471": 373, "47140": 408, "47236": [371, 498], "47330339": 416, "4738": 1038, "474": 141, "475": 134, "47668": 353, "478522": 202, "47885": 353, "479": [177, 1023], "4792": 230, "47922861": 253, "479229": 253, "47928": 353, "4794": 202, "4795": 202, "4796": 202, "4798": 202, "47985": 497, "47987268e": 195, "4799": 202, "48": [43, 52, 115, 149, 175, 253, 316, 373, 382, 408, 511, 598, 700, 747, 829, 840, 991, 1004, 1012, 1029], "480": [198, 352], "4801": 202, "4802": 202, "4803": 202, "4804": 202, "4805": 202, "4806": 202, "4807": 202, "4809": [202, 273], "481": [109, 352, 1023], "4810": 202, "4812": 46, "4815": 202, "48204257": 1003, "4828": 202, "483": 649, "4830": 202, "4831": [202, 656], "4832": 202, "4836": 202, "484": [179, 349, 1023], "4841": 202, "484109": 202, "4846": 202, "485": [104, 170, 697, 1023], "4852": 202, "4855": 202, "48551382": 326, "4857596147013469": 93, "486": 214, "4860": 202, "4866": 202, "4867": 202, "4869": 202, "487": [52, 174, 220, 351, 725, 1023], "4872": 202, "48736655": 668, "4874": 202, "4876": 202, "488": [330, 1023], "4880": 202, "4881": [202, 1038], "48841": 497, "48842": 497, "4885": 202, "48858": 382, "4888": 202, "4891": 202, "48938813e": 195, "4894": 202, "48979592": 449, "4898431": [371, 493], "49": [43, 118, 168, 216, 249, 370, 371, 373, 381, 408, 450, 457, 714, 727, 757, 765, 794, 798, 801, 886, 1002, 1012, 1036], "490": [58, 264, 1023], "491": 697, "492": [264, 644, 995], "4923": 650, "4928": 202, "493": [644, 905, 995], "4936": 202, "4939": 1040, "494": [233, 1023], "494021": 493, "4948": 46, "4951": 654, "495761": 382, "49665188": 216, "4967": 525, "4976": 598, "499": [168, 373, 382], "4995": 1039, "49999993": 998, "4daf4a": [79, 95], "4dbd33": 118, "4e": 233, "4e9a06": [92, 97], "4eacc5": [92, 97], "4f": [46, 47, 57, 137, 145, 147, 227, 228, 230, 315, 912], "4i": 83, "4th": [168, 178, 373], "4x": [382, 1048], "4x11": 294, "4x4": [373, 413, 416], "5": [43, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 62, 63, 64, 67, 68, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 100, 102, 103, 105, 106, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 132, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 159, 161, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 218, 220, 223, 224, 225, 226, 227, 228, 230, 233, 234, 235, 237, 239, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 279, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 299, 300, 302, 303, 305, 306, 307, 308, 310, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 332, 333, 334, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 371, 372, 373, 374, 376, 380, 381, 382, 384, 388, 389, 390, 394, 400, 401, 402, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 423, 437, 438, 439, 440, 442, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 462, 463, 464, 466, 467, 469, 472, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 505, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 529, 532, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 553, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 593, 594, 595, 598, 603, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 635, 637, 638, 639, 642, 644, 647, 648, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 689, 690, 692, 693, 694, 696, 697, 698, 700, 704, 706, 708, 710, 713, 714, 719, 721, 722, 723, 724, 725, 727, 728, 729, 731, 733, 736, 739, 740, 741, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 770, 771, 779, 782, 783, 785, 786, 788, 789, 790, 791, 792, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 862, 863, 864, 865, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 899, 905, 906, 907, 908, 909, 910, 911, 913, 915, 923, 927, 928, 931, 932, 936, 937, 947, 948, 949, 950, 951, 953, 955, 956, 964, 965, 970, 972, 973, 976, 977, 978, 979, 980, 981, 982, 991, 992, 994, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1023, 1024, 1028, 1029, 1031, 1034, 1035, 1036, 1038, 1040, 1041, 1043, 1047, 1048, 1049, 1052], "50": [0, 43, 46, 49, 52, 54, 61, 68, 69, 73, 83, 85, 92, 93, 98, 99, 102, 103, 115, 118, 120, 123, 129, 134, 137, 140, 146, 149, 152, 153, 168, 171, 173, 174, 175, 176, 185, 186, 187, 194, 198, 208, 212, 215, 219, 220, 224, 226, 228, 230, 232, 236, 237, 242, 243, 245, 253, 264, 265, 270, 272, 273, 283, 290, 308, 310, 314, 321, 323, 330, 332, 334, 338, 346, 352, 371, 373, 376, 381, 396, 412, 415, 416, 417, 420, 442, 473, 479, 480, 501, 505, 522, 524, 527, 534, 540, 545, 554, 555, 570, 594, 595, 607, 609, 610, 616, 618, 659, 660, 667, 668, 669, 671, 677, 678, 679, 693, 714, 793, 801, 815, 834, 854, 905, 914, 997, 998, 1002, 1003, 1005, 1008, 1012, 1025, 1033, 1050], "500": [49, 79, 83, 90, 93, 94, 96, 115, 116, 127, 129, 138, 140, 147, 167, 170, 191, 225, 226, 233, 250, 251, 255, 256, 260, 264, 270, 273, 283, 284, 290, 296, 302, 314, 320, 325, 326, 344, 349, 363, 415, 421, 469, 470, 474, 475, 476, 481, 482, 483, 484, 612, 614, 615, 617, 622, 625, 626, 651, 652, 655, 656, 657, 681, 683, 684, 863, 991, 1017], "5000": [89, 199, 227, 228, 230, 321, 886], "50000": 61, "500000": 306, "5000000": 55, "50000000": 173, "50000013": 998, "500526": 149, "500x500": 542, "5012": 1039, "5016": [410, 421, 475], "502": [50, 1023], "5029": [410, 421, 475], "503": [185, 1023], "503452": 306, "5036": 1040, "504": [116, 1023], "504185": 306, "50447799": 1003, "505": 830, "506": 353, "507": [98, 409, 1023], "50755672": 466, "507943": 273, "5082": 1022, "50941682": 1003, "50_000": [317, 352], "50sampl": 396, "51": [61, 118, 175, 230, 287, 290, 408, 409, 767, 777, 782, 998, 1029], "51082562": 591, "512": 211, "512281": 260, "512595": 306, "51292546": 613, "513": [854, 1005], "513034": 306, "5131": [46, 1038], "51341712": 1000, "5141": 1039, "51462041": 850, "5149": 46, "515": 43, "515390": 382, "516": [312, 1023], "5166": 674, "5166646": 765, "517": [47, 452, 462], "517272": 260, "5182": 1038, "5186": 1038, "5193": 46, "51958": 175, "51963999": 111, "52": [43, 123, 175, 212, 532, 634, 798, 948, 1033], "520": [629, 854, 992, 1005], "52003279": 1003, "5208": 202, "521": [118, 147, 1023], "52106591": 130, "5211": 1040, "5212": 202, "522": 906, "5224167": 52, "5229": 1040, "523": [179, 525], "524": 52, "5243": 416, "52433293": 416, "5244": 202, "525": [439, 629, 992], "5251": 1039, "526": 905, "526599": 202, "5279": 1040, "528": [146, 150, 1023], "5282": 1038, "52875032": 662, "5289": 46, "529": [125, 1023], "5291": 1039, "5295": 1040, "52955942": 850, "5299": 1039, "53": [43, 86, 249, 408, 415, 536, 542, 547, 793, 794], "5315170": 52, "5316": 351, "53284267": 253, "532843": 253, "533": 186, "5337": 1038, "534": 186, "535": [154, 229, 1023], "5355": 1038, "5359": 1040, "536": [175, 290], "5360": 1038, "53777511": 52, "538": 353, "53844117956": 765, "5395559": 227, "53959628e": 195, "54": [140, 168, 191, 198, 212, 215, 249, 371, 373, 408, 491, 1023, 1034, 1035], "540": [181, 1023], "54035582": 765, "541": [452, 462], "5415": 999, "5417": 230, "542": [168, 373], "5420": 545, "542052": 202, "54209": 159, "5425": 525, "543": [187, 198], "5431": 1038, "543841": 202, "54434690031882": 105, "54488318": 385, "545": [258, 1023], "5460": 1039, "546068": 253, "54606834": 253, "54675220": 52, "5469": 373, "547": 358, "5488135": 385, "549": 63, "5495": 1038, "54980": 542, "55": [118, 186, 191, 208, 212, 230, 234, 330, 381, 408, 412, 491, 598, 801, 807, 815, 829, 1002, 1033], "5500": [324, 689, 999], "550213": 202, "55102041": 449, "5515": 747, "552": 1002, "55212743": 359, "5523": 1022, "55249": 598, "55390036": 130, "554": [220, 228, 307], "5540": 1039, "55422893": 416, "555": 717, "5555555555555556": 278, "5557": 273, "5558": 46, "557": [135, 1023], "558": [151, 1023], "55800226": 227, "559": 617, "5591": [690, 694, 999], "55968825": 647, "56": [43, 230, 243, 333, 382, 647, 648, 653, 661, 662, 663, 682, 714, 736, 1002, 1012, 1029, 1033], "560": [212, 518, 519], "561": 408, "561464362648773": 93, "563": [149, 1023], "564": 212, "56479934": 359, "56485654": 130, "565": [159, 270, 1023], "566": [168, 212], "569": [168, 332, 373, 501, 593, 596, 597, 599], "5697": 1040, "56b4e9": 255, "57": [47, 170, 186, 228, 279, 308, 373, 374, 394, 400, 401, 409, 706, 762, 782, 838, 1002, 1012, 1033], "570": [168, 373], "570655": 202, "5713": 664, "57142857": 722, "573": [137, 416, 1023], "5732": 1040, "57320793": 416, "573491": 202, "574": [91, 353, 535, 542], "5748": 495, "5749": [371, 494, 495], "575": [102, 212, 353], "576": [333, 1023], "5762": 1039, "576989": 253, "577": [168, 373], "578": [320, 1023], "579": 525, "58": [47, 99, 110, 373, 410, 421, 475, 608, 765, 1012], "580": [352, 845, 846], "5804131": 130, "5805": 1039, "5807": 1005, "581": 191, "581012": [371, 491], "5814": 1040, "58149261": 416, "58195950e": 195, "582": [120, 906, 1023], "5828": [371, 494, 495], "583": 408, "5833": [739, 1002], "583333315172": 52, "58364548": 1000, "5853": 1022, "5857": 1038, "5863": 382, "58667835e": 195, "586798": 202, "5871": 680, "5874": 1039, "5882004012129721": 93, "589715": 202, "59": [43, 191, 198, 230, 373, 382, 408, 409, 511, 823, 1002, 1029, 1033], "591": [153, 1023], "59122734": 668, "592": [245, 612, 615, 626, 1009], "592373": 324, "5925110": 52, "5929": 1039, "593": 138, "594": [179, 212], "594754": 202, "59489497": 227, "595": 212, "5956": 1041, "596": 717, "5960": 227, "5963": 1043, "597": [168, 212, 1023], "598": [91, 127, 171, 542], "5981": 545, "598533": 202, "599": 681, "5991": 1040, "5_000": 191, "5a": 885, "5d": 47, "5e": [44, 120, 201, 596, 597, 599], "5e5": 212, "5f": [159, 323], "5m": 55, "5n_": 112, "5th": [52, 146, 149, 178, 408], "5x": 1050, "6": [0, 43, 45, 47, 48, 49, 50, 51, 52, 57, 63, 64, 67, 68, 75, 79, 80, 82, 83, 85, 89, 90, 93, 94, 95, 96, 97, 98, 100, 105, 106, 107, 109, 110, 111, 113, 115, 120, 122, 126, 129, 135, 146, 147, 149, 151, 153, 159, 163, 168, 170, 173, 175, 177, 178, 179, 181, 182, 186, 187, 189, 191, 193, 194, 195, 198, 202, 206, 210, 212, 213, 214, 216, 226, 230, 232, 233, 236, 239, 242, 243, 247, 250, 251, 255, 256, 257, 258, 260, 261, 263, 264, 265, 269, 270, 271, 272, 273, 279, 280, 281, 282, 283, 289, 292, 295, 303, 305, 307, 308, 310, 312, 314, 315, 317, 319, 322, 323, 324, 325, 326, 327, 329, 330, 333, 334, 340, 341, 343, 345, 347, 349, 351, 352, 353, 357, 358, 359, 370, 371, 373, 374, 376, 378, 380, 381, 382, 389, 394, 400, 401, 406, 408, 409, 412, 413, 415, 416, 417, 423, 428, 435, 442, 445, 446, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 464, 465, 482, 483, 484, 485, 490, 492, 497, 506, 518, 525, 528, 531, 539, 541, 542, 546, 548, 554, 563, 564, 568, 569, 570, 571, 594, 595, 603, 605, 606, 607, 609, 612, 615, 616, 626, 628, 629, 631, 637, 638, 645, 646, 680, 690, 694, 700, 712, 717, 722, 729, 739, 743, 746, 747, 751, 752, 754, 770, 779, 786, 789, 791, 798, 799, 800, 802, 803, 808, 810, 811, 813, 818, 819, 822, 829, 830, 831, 832, 840, 841, 842, 844, 845, 846, 853, 855, 856, 857, 872, 873, 875, 878, 880, 883, 884, 888, 889, 902, 920, 927, 929, 931, 932, 943, 944, 948, 949, 950, 952, 955, 956, 964, 976, 979, 987, 990, 991, 992, 996, 998, 999, 1002, 1012, 1013, 1016, 1017, 1018, 1025, 1029, 1031, 1034, 1035, 1036, 1039, 1041, 1046, 1050, 1051], "60": [43, 45, 92, 105, 113, 212, 224, 230, 232, 233, 253, 258, 278, 283, 330, 343, 351, 370, 408, 412, 450, 457, 714, 801, 1002, 1012, 1033, 1036], "600": [63, 83, 91, 144, 153, 154, 371, 681], "6000": [308, 628], "601052": 306, "601707": 202, "602": [88, 1023], "60244657": 850, "60276338": 385, "603": [96, 448], "604": [127, 542], "606": [614, 835, 1003], "6072758064261095": 170, "607752": 146, "60809415": 663, "60834549": 90, "60836363e": 195, "609": [179, 382], "61": [112, 187, 230, 370, 373, 382, 409, 458, 542, 561, 647, 648, 653, 661, 662, 663, 682, 714, 823, 950], "610": [293, 1023], "6101": 1040, "611": [268, 270, 542], "6114": 828, "6114326": 212, "6114327": 212, "6114328": 212, "6114329": 212, "6114330": 212, "611676": 202, "612": 791, "6121": 1039, "6126": 1040, "614": [214, 295, 1023], "6147": 1038, "615373": 186, "616": [842, 1004, 1012], "61611719": 173, "617": [91, 273, 408, 770], "617050e": 230, "6173": 1039, "617715": 146, "6178": 1039, "618": [91, 268], "6181": 1040, "6182": 1039, "618263": 202, "619": [96, 179, 448, 1023], "619052": 371, "61958": 175, "6196": [273, 1038], "6198": 747, "62": [52, 187, 191, 230, 263, 324, 330, 359, 371, 494, 495, 845, 846, 1029, 1036], "620": 499, "621": [91, 770], "621645": 202, "622": [91, 542], "62241605": 198, "622811": 146, "623": [842, 1004], "6231": 1022, "6237": 230, "624": 1009, "625": [86, 212, 619, 709], "6250": 1040, "6258": 1038, "626": [43, 82, 199, 1023], "6261": 1042, "626286": 202, "627": [193, 1023], "62717609": 227, "62722912": 52, "62745778": 1003, "628": 352, "6282": 1039, "6284": 1022, "6288": 1040, "6291456": 86, "63": [45, 52, 264, 373, 415, 558, 559, 566, 567, 647, 648, 653, 661, 662, 663, 682, 700, 727, 801, 815, 823, 915, 916, 1002], "630": 725, "63035731": 416, "630382": 324, "6312": 52, "632": 316, "6323": 1022, "6331": 43, "6332": 43, "63327171": 198, "6333": 43, "6334": 43, "6335": 43, "6338211367102258": 317, "63394388": 198, "635": [43, 617], "636": [198, 382], "63667341": 90, "6371000": 765, "6374": 1041, "6375861597263857": 947, "638": [187, 352, 382], "638768": 87, "638843": 306, "63bit": 1044, "64": [43, 52, 68, 86, 91, 120, 175, 186, 233, 243, 244, 248, 268, 279, 294, 299, 363, 364, 373, 374, 382, 390, 394, 409, 413, 420, 496, 499, 503, 600, 601, 647, 659, 689, 690, 691, 692, 694, 906, 1005, 1029, 1033, 1035, 1041, 1042, 1045, 1046, 1047, 1050], "640": [406, 490, 507, 508, 584, 585, 588, 991], "640000e": 230, "640770e": 230, "640880e": 230, "64185414": 667, "64236448": 537, "6424": 1022, "6425": 1022, "643": 268, "644": 333, "6440": 227, "64447187": 86, "645": 91, "6451": 1022, "6452": 1041, "646": 178, "6463": 1042, "647": 91, "6472": 1039, "6476": 525, "647689": 202, "648026": 146, "6497": 1039, "64_conda": 384, "64bit": 1033, "64x64": [120, 371, 413], "65": [43, 69, 187, 212, 279, 316, 351, 408, 439, 503, 518, 598, 700, 742, 793, 794, 823, 1009, 1033, 1034, 1035], "650": 406, "6505186632729437": 93, "6507": 1040, "651": 382, "652": [239, 352, 1023], "652739": 202, "653": [382, 612, 615, 626], "654": 187, "6545": 1045, "656": [232, 270, 371, 1023], "6567": 852, "657": [64, 253, 270, 1023], "6572": 852, "6573": 1040, "65799352e": 195, "658": 116, "6586": 1039, "6599": 1022, "65e": 199, "66": [43, 236, 316, 373, 408, 425, 461, 533, 633, 713, 784, 785, 796, 884, 892, 983, 1002, 1014], "660": [144, 253, 1023], "660797": 253, "661086": 273, "6624": 1045, "662409": 202, "663": [899, 1010, 1014], "664": [168, 313, 373, 1023], "665": [43, 296, 1023], "6650": 52, "6651": 1039, "666": [173, 408, 847, 992], "6660": 1039, "6666": [739, 1002, 1039], "66666667": [730, 783, 855, 1012], "666667315174": 52, "6667": 1039, "66670169e": 195, "667": [721, 741, 1002], "667219": 146, "6689": 1041, "6691": 1039, "6697": 1039, "669930e": 230, "67": [52, 99, 186, 230, 234, 278, 373, 499, 517, 518, 519, 628, 668, 714, 815, 992, 1002, 1016, 1029, 1033], "670": [91, 214, 264, 1023], "671": 1014, "6715": 1022, "67251877": 667, "673": [116, 352, 382], "67443065": 130, "67451144e": 195, "675": [140, 170, 352, 1023], "675318": 87, "676": 670, "6764": 1039, "678008": 212, "678009": 212, "678010": 212, "678011": 212, "678012": 212, "678013": [212, 230], "678359": 202, "679": [214, 905], "68": [43, 204, 308, 329, 408, 478, 536, 542, 591, 686, 687, 1033], "681": [91, 382], "6817": 1039, "682": 382, "6821": 47, "682880e": 230, "683980e": 230, "684": [103, 111], "6846": 1039, "6848": 1042, "685": [721, 741, 1002], "6852": 270, "686": [176, 1023], "6860": 145, "687": 1014, "6875": 717, "6875046614372227": 320, "688": [111, 216, 1023], "689015": 306, "689143": 306, "689751": 306, "69": [45, 204, 264, 315, 330, 408, 471, 472, 608, 609, 757, 1002, 1012], "690": 214, "6902": 1039, "691": 722, "6913": 1039, "692": 134, "692270e": 230, "692470": 306, "6929": 1022, "692901": 146, "693": 1002, "6931": 869, "69314718": [418, 613, 1012], "695": [268, 1023], "69513": 91, "6954": 1039, "69545": 91, "695740e": 230, "696": [212, 1023], "697": 179, "69735": 91, "698": [91, 264], "6984743": 173, "69892343": 216, "699": [327, 1023], "699691": 371, "69e": 179, "6d": 47, "6f": [55, 124, 275, 738, 796], "6ppm": 175, "6th": 178, "7": [1, 2, 43, 45, 47, 50, 51, 52, 53, 54, 63, 66, 68, 69, 70, 74, 77, 79, 80, 86, 87, 88, 89, 93, 97, 98, 100, 103, 104, 106, 111, 113, 120, 123, 134, 137, 142, 146, 149, 150, 154, 155, 168, 179, 185, 186, 187, 189, 191, 195, 196, 211, 212, 213, 214, 219, 228, 230, 232, 239, 244, 245, 251, 253, 255, 256, 259, 260, 264, 265, 270, 274, 275, 276, 277, 281, 287, 289, 290, 292, 295, 296, 298, 307, 308, 310, 314, 319, 322, 323, 324, 326, 329, 330, 332, 333, 337, 344, 347, 348, 352, 353, 359, 371, 373, 374, 381, 382, 394, 400, 401, 406, 412, 413, 415, 416, 417, 419, 420, 423, 439, 444, 445, 448, 450, 451, 452, 453, 455, 456, 457, 458, 461, 462, 463, 464, 467, 471, 472, 482, 483, 484, 485, 491, 497, 499, 533, 534, 535, 536, 537, 539, 541, 545, 562, 563, 589, 592, 601, 606, 607, 628, 629, 631, 638, 647, 648, 650, 653, 659, 660, 661, 662, 663, 674, 676, 682, 683, 684, 693, 700, 708, 710, 722, 724, 725, 727, 729, 745, 746, 747, 751, 752, 754, 783, 786, 791, 792, 795, 798, 800, 801, 802, 803, 804, 805, 808, 811, 815, 818, 819, 822, 828, 831, 835, 845, 846, 854, 863, 864, 865, 870, 877, 878, 900, 901, 948, 949, 952, 953, 956, 965, 970, 991, 992, 997, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1012, 1016, 1017, 1029, 1031, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1046, 1051], "70": [43, 45, 50, 99, 103, 105, 134, 187, 249, 255, 270, 330, 371, 373, 412, 494, 495, 683, 684, 714, 727, 757, 801, 815, 892, 991, 1012], "700": [83, 264, 321], "7000": 230, "701": 91, "702266": 202, "703": [274, 406, 514, 1023], "70359377": 198, "704": [155, 351, 1023], "70432034": 115, "7049": 1039, "7049787496083262": 93, "706026": 202, "707": [179, 353, 881, 893], "7071": 1041, "70763101": 86, "708": [539, 541, 548, 751], "70814003": 359, "7083": 1002, "708333315174": 52, "7089": 1040, "709": 271, "70x": 1050, "71": [43, 47, 168, 216, 230, 373, 511, 731, 737, 767, 777, 1002, 1029, 1035], "710": 406, "7101": 1039, "711": 271, "713": 199, "714": 321, "715": 168, "71518937": 385, "7152": 1039, "7154": 1039, "715413": 146, "7159": 1039, "716": 514, "7187": 1039, "718747": 202, "7194": 1039, "72": [43, 45, 46, 47, 52, 140, 173, 381, 823, 829], "720": [315, 1023], "7200": 650, "721": [74, 539, 541, 548, 1023], "722128e": 230, "72295655": 115, "723": [91, 245], "723665": 284, "7239": 1039, "7242": 1022, "724702": 273, "7248": 1039, "7256": 636, "726": 1010, "7260": 1039, "7261": 1039, "726573": 186, "72667194": 1003, "727148206404819": 278, "72850319": 1003, "7295": 1039, "7298221281347037": 43, "73": [47, 274, 330, 389, 481, 737, 801, 815, 851, 914, 1012, 1033, 1035], "7301": 1039, "730119e": 230, "731249e": 230, "7313": 46, "73153": 382, "732": 214, "7321432711315247203224138160467097": 52, "7323": 1039, "7325": 1039, "732913": 284, "733": [290, 353], "7331": [321, 1040], "7332": 909, "7350": 1039, "7353": 1039, "7356": 1040, "736": [112, 1023], "7365": 1040, "73654189": 52, "737": [245, 525], "7376": 1040, "738": [49, 1023], "7382": 1022, "7387": 476, "7388": 1040, "739": [126, 1023], "739865e": 230, "739950": 284, "74": [43, 228, 329, 330, 373, 591, 695, 801, 815, 884, 1029], "741": [51, 1023], "7411": [469, 474, 1039], "7419": 1039, "743": 268, "74310541": 173, "7436926291700353": 208, "744": [268, 290], "744029": 284, "744042e": 230, "7441": 1040, "744497e": 230, "74495357": 198, "7459": 1040, "746": 373, "7464": 1040, "746492": 270, "748": [351, 382], "7490": [1039, 1040], "75": [43, 45, 46, 49, 52, 69, 79, 88, 113, 137, 165, 177, 178, 182, 186, 191, 193, 196, 204, 219, 230, 253, 257, 258, 264, 270, 279, 295, 310, 322, 349, 351, 359, 449, 502, 552, 638, 659, 695, 707, 713, 735, 740, 741, 746, 754, 757, 795, 801, 883, 891, 895, 902, 918, 936, 937, 982, 1002, 1004, 1012, 1018, 1020, 1035], "750": [82, 88, 187, 270], "75000": 212, "7501": 1040, "750348": 146, "750389": 202, "7506": 1040, "752": [243, 351], "752470": 284, "752867": 202, "753": 73, "7532": 489, "7533": [421, 475, 1040], "75474165": 1003, "7548": 1040, "7548291": 326, "755": 227, "7553": 1039, "756": [188, 276, 1023], "7565": 1040, "756687e": 230, "7567": 1040, "756746e": 230, "7569": 470, "757": [168, 268, 290, 352, 373, 1023], "7573": 1040, "75747153": 216, "7578": [273, 1040], "75788833": 165, "757915": 284, "758": 351, "759": 290, "7593": 1039, "7594": 1039, "75949622": 216, "75th": [249, 883], "76": [43, 191, 212, 234, 330, 351, 359, 373, 382, 778, 782, 865], "760": [43, 149], "7608": 1022, "76195467e": 195, "7621951219512195": 253, "7632": 1039, "7638": 998, "764": [722, 1002], "7646": 1022, "764779": 202, "765": [298, 1023], "765012": 324, "7655": 1040, "765671": 202, "7660": 1039, "7661": 1040, "7668": 1041, "7674": [525, 1040], "767498": 146, "7676": 1039, "768": 86, "7680": 1039, "76823": 45, "7685": 1040, "769": 290, "76995": 371, "77": [43, 45, 79, 168, 191, 279, 330, 370, 373, 535, 708, 737, 776, 823], "77000": 212, "7702": 1040, "770926": 284, "771": [47, 1023], "772": [351, 724], "7721": 1040, "7723": 1040, "7724": 1039, "773": [270, 333, 649, 843], "77310": 371, "7732": 1039, "77322639": 115, "7738": 1041, "7739": 1040, "77426368": 51, "775": 57, "7750": 1039, "775047": 677, "775151": 677, "7756": 1039, "77630514": 416, "7768366": 1000, "777": 382, "7771": 1040, "77764": 404, "77777215": 115, "7786": 1039, "779": 351, "7794": 1040, "779751": 284, "7798": 909, "7799": 1039, "78": [43, 86, 191, 230, 279, 312, 330, 494, 495, 647, 648, 653, 654, 656, 661, 662, 663, 665, 666, 682, 686, 687, 801, 807, 823, 829, 1002, 1022], "780": 268, "7812": 1040, "781265": [371, 498], "7814": 1040, "7816": 52, "7819": [408, 1040], "782": [279, 1023], "7823": [1040, 1041], "7825": 1040, "7825594": 51, "7826": 373, "782755": 62, "7831": 351, "783149": 103, "7833": 475, "783392": 270, "7838": 1040, "784": 307, "7840": 87, "7849": 1040, "785063": 103, "78571427112143152472031331383346104": 52, "786": [86, 103], "786015": 103, "7863": 1040, "786432": 86, "78681467": 86, "7872": 1040, "7880": 1040, "7887550": 52, "788808": 324, "789": [164, 415], "7894": [899, 1014], "79": [43, 45, 66, 68, 111, 112, 118, 123, 168, 191, 308, 330, 373, 381, 410, 474, 525, 598, 695, 823, 843, 1033, 1035], "790": [43, 102, 308, 1023], "7906": [623, 650], "79064206": 611, "79084103": 359, "791": [179, 264, 1023], "7914": 1040, "791667315161908911936472223112": 52, "792": [79, 95, 1023], "79269019073225": 294, "7927845601690917": 317, "7929": [352, 1040], "794": [218, 1023], "7943": 1043, "7944": 1040, "7946": 1039, "795": [195, 649, 1023], "7954": 1040, "796": [146, 356, 1023], "7970": 1040, "7971": 664, "7972": 555, "79769376": 115, "798": [103, 201, 415, 1023], "7983": 1040, "798301": 253, "7986": 1040, "7986499491396734": 170, "798982054": 1002, "799": [179, 352], "7990": 1040, "7998": 1040, "7_qbz5n2kfra8p0": 394, "7x": 326, "8": [43, 44, 45, 46, 47, 48, 51, 52, 53, 57, 62, 63, 64, 67, 68, 70, 72, 78, 79, 83, 86, 88, 93, 95, 97, 98, 102, 104, 106, 107, 112, 115, 118, 120, 121, 124, 125, 126, 128, 130, 134, 137, 139, 140, 143, 145, 146, 148, 152, 155, 156, 159, 167, 168, 171, 173, 175, 176, 178, 179, 182, 185, 186, 187, 189, 191, 193, 194, 199, 201, 204, 207, 212, 213, 216, 220, 222, 228, 230, 232, 233, 234, 236, 237, 240, 243, 244, 245, 247, 251, 252, 253, 255, 256, 257, 259, 260, 261, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 277, 280, 281, 287, 289, 292, 294, 298, 302, 305, 307, 308, 310, 312, 313, 314, 315, 316, 319, 324, 329, 330, 331, 333, 334, 337, 340, 344, 345, 346, 347, 348, 351, 352, 353, 357, 359, 364, 370, 371, 372, 373, 374, 376, 381, 382, 394, 402, 406, 408, 412, 413, 415, 416, 417, 419, 421, 439, 442, 443, 444, 447, 449, 450, 452, 455, 456, 457, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 483, 484, 485, 487, 490, 497, 499, 503, 504, 515, 517, 532, 535, 539, 541, 544, 546, 548, 550, 551, 554, 556, 557, 566, 571, 583, 589, 590, 591, 592, 605, 606, 629, 630, 637, 638, 649, 659, 671, 677, 680, 690, 693, 694, 695, 696, 700, 703, 707, 708, 710, 711, 716, 722, 728, 729, 730, 742, 743, 746, 747, 751, 752, 754, 779, 783, 784, 786, 789, 790, 791, 792, 796, 798, 800, 802, 803, 808, 811, 818, 819, 822, 823, 824, 829, 831, 832, 834, 843, 845, 846, 852, 862, 863, 864, 870, 877, 884, 886, 902, 907, 910, 929, 931, 932, 947, 948, 949, 953, 970, 976, 977, 978, 979, 980, 981, 982, 991, 992, 998, 999, 1000, 1002, 1005, 1010, 1012, 1016, 1026, 1029, 1030, 1031, 1034, 1035, 1036, 1040, 1041, 1046, 1047, 1049], "80": [43, 45, 50, 64, 80, 100, 112, 154, 161, 165, 176, 187, 193, 247, 312, 316, 329, 343, 345, 351, 357, 359, 371, 373, 376, 406, 412, 417, 419, 444, 479, 511, 542, 714, 801, 815, 823, 886, 899, 918, 991, 997, 998, 1002, 1009, 1015, 1018], "800": [83, 322, 371, 585, 693], "8000": [230, 273, 274], "800000011920929": 358, "8000184677460305": 317, "8002": 1040, "8003": 1041, "8005": 1040, "8006": 1040, "8010": 1040, "801770e": 230, "802": [46, 168, 373], "8022": [46, 473, 1042], "802601": 202, "8028": 1040, "803": [127, 1023], "803483": 146, "803882e": 230, "8040": 1039, "804414": [371, 498], "805": 214, "8053": 1040, "8059798": 198, "806": [236, 284, 305, 650, 1023], "8061": 1040, "8065": 1040, "8066": 1041, "8068": 1040, "807": [268, 270], "8075": 1041, "808": [136, 1023], "8086": [620, 1040], "8087": 1040, "8093": 1040, "8094": 1040, "80956739": 1003, "80_000": 139, "81": [43, 83, 253, 329, 330, 408, 700, 762, 789, 801, 815, 832, 1002, 1003, 1005, 1012], "810": [188, 830], "8100": 1022, "8102": 1041, "810596": 371, "8117": 1040, "8120": 1040, "8125": 722, "812526": 202, "8129": 1041, "8133333333333334": 301, "81355169": 416, "8137": 1040, "8139": 1040, "814": 188, "815476315189119122164721021826110": 52, "8157": 1022, "8159": 1040, "816": [271, 471, 472], "8160": 1040, "817": 187, "8174": 1040, "817724": 202, "8181": 1040, "819": [148, 416, 1023], "8190": 1041, "81940995": 416, "8198": 1040, "82": [43, 66, 80, 86, 91, 142, 165, 215, 301, 329, 789, 801, 815, 948, 1002, 1005, 1033], "820": [43, 52, 845, 846], "820705": 202, "8216": 1042, "822": [54, 791, 1023], "822097": 186, "8224": 1040, "8225220806196525": 208, "823": 290, "8243": 1022, "825": 751, "8251": 1040, "8253": 228, "8259": 1040, "826": [227, 1023], "827": [275, 1023], "827917": 146, "828": [145, 290, 1023], "8282": 1040, "829429": 260, "8295": 1040, "83": [45, 66, 70, 74, 329, 373, 695, 708, 787, 921, 997, 1002, 1036], "830000": 306, "8306": 1040, "831": [278, 1023], "8316": 1040, "832": [188, 415, 556, 557], "83236428": 416, "83281226": [845, 846], "8333": 499, "83333": 765, "833333": 186, "8335": 1040, "834": [244, 333, 1023], "834310": 202, "8344": 1040, "8345": 598, "8353": 46, "8354": [623, 1040], "83548752": 611, "8355": 1039, "836": [271, 1023], "8361": 1041, "836224": 62, "8363": 1040, "8370": 1022, "8377": 1040, "83816048": 647, "83822343": 1000, "83833": 382, "8387": 836, "839": 681, "84": [43, 45, 102, 165, 204, 230, 312, 329, 359, 373, 415, 416, 789, 815, 1002, 1012], "840": 382, "84000": 212, "840000": 306, "8407": 102, "84077985": 198, "841": 103, "84127814": 667, "84253": 1003, "843": [245, 1023], "844": [134, 415, 556, 557, 1023], "8446": 1040, "8449": 1040, "847222222222214": 208, "8473": 416, "8478": 1042, "8480": 1022, "8481": 1040, "8484": 1041, "848743": 62, "849835": 87, "85": [45, 55, 68, 83, 88, 102, 123, 165, 227, 230, 281, 308, 330, 359, 415, 439, 499, 501, 556, 557, 598, 653, 659, 746, 754, 789, 801, 829, 1002, 1003, 1033], "850000": 306, "850031": 202, "8508": 1042, "851": [139, 270, 1023], "8512": 1040, "8513": 620, "851348": 62, "8515": [416, 1040], "85151335": 416, "851792": 62, "85253229": 90, "852774": 146, "853174": 62, "853846": 202, "854": [250, 268, 1023], "85418642": 359, "8549": 1040, "855": [47, 170], "8554": 1041, "855465": 306, "857": [271, 352], "857400": 62, "858486250088675": 317, "85857475": 130, "8586": 1040, "859007": 62, "8591": 1040, "86": [52, 68, 102, 165, 204, 312, 329, 330, 407, 789, 913, 1002], "860000": 306, "861": [168, 373, 789, 790, 1002], "861053": 62, "861106": 62, "8614": 1022, "861533": 62, "8617": 1041, "861868": 62, "8626621": 326, "8628": 636, "8640": 187, "865400": 62, "866": 1010, "866161": 62, "866571": 62, "867": [106, 168], "8672": 1040, "8676": [621, 1040], "8678": 624, "868": [146, 164], "868443": 50, "869": [202, 1023], "8698": 1040, "87": [45, 57, 68, 102, 179, 234, 264, 268, 330, 598, 668, 778, 789, 801, 823, 881, 893, 1002], "870": [168, 373], "871": [46, 73, 111, 112, 410, 474, 1023], "871277": 62, "871965": 62, "872": [73, 1010], "8720": [557, 1041], "872186": 62, "873": [168, 373], "873724": 62, "87382323": 663, "874": [105, 789, 790, 1002], "87421f": 118, "874771": 146, "875": [86, 171, 670], "875315171": 52, "875315173": 52, "875941": 62, "87600388": 173, "8768": 1040, "8769": 1042, "877": [47, 268], "877206": 268, "8773": 1042, "877981": 62, "878": [47, 323, 1023], "878051": 202, "878964": 813, "879": [287, 1023], "87mb": 351, "88": [43, 45, 68, 204, 216, 269, 308, 327, 329, 330, 355, 371, 373, 376, 407, 410, 473, 647, 648, 653, 661, 662, 663, 682, 865, 948, 1033], "880": [43, 248, 1023], "880191": 202, "880298": 202, "88089948": 416, "88096009": 130, "882": 270, "88213": 371, "882561": 270, "883": 82, "883065": 62, "8833": 499, "8835": 1040, "884": [283, 290], "8845": 1040, "885": [47, 168, 333, 373], "8854": 1040, "887": [219, 1023], "8874": 1040, "8878": 836, "8880": 621, "8881": 624, "889": [268, 334, 437, 1023], "88978285": 1003, "89": [43, 68, 175, 204, 329, 330, 984, 997, 1002, 1012, 1033, 1036, 1044], "890": 268, "891": 47, "8922": 1040, "893055": 202, "8931": 1040, "8936": 1040, "894264": 253, "8947": 915, "8948018": 52, "89483932": 1000, "8948621": 1003, "896": 649, "8963": 273, "8965": 415, "897": [89, 1023], "8973": 1040, "89856": 813, "899": [68, 268], "8992": 1040, "8995": 1040, "8pt": 1012, "8x8": [68, 204, 243, 299, 308, 373, 503], "9": [43, 44, 46, 48, 51, 52, 61, 63, 64, 67, 68, 70, 77, 79, 83, 88, 91, 95, 97, 106, 113, 115, 142, 143, 145, 146, 147, 152, 154, 160, 161, 168, 173, 177, 182, 185, 186, 187, 189, 195, 196, 204, 212, 225, 226, 229, 230, 232, 235, 243, 244, 253, 255, 256, 257, 258, 263, 264, 273, 277, 279, 283, 289, 292, 294, 295, 298, 299, 300, 305, 306, 308, 310, 312, 313, 314, 316, 317, 319, 324, 325, 327, 329, 330, 332, 333, 334, 340, 344, 349, 353, 359, 373, 374, 382, 389, 394, 400, 401, 406, 407, 409, 410, 412, 415, 416, 439, 443, 450, 457, 463, 482, 483, 484, 485, 490, 497, 499, 517, 519, 521, 528, 535, 539, 540, 541, 548, 561, 568, 571, 584, 592, 605, 606, 608, 609, 628, 631, 635, 638, 640, 647, 648, 653, 659, 661, 662, 663, 682, 683, 684, 688, 693, 700, 710, 724, 727, 742, 749, 770, 779, 780, 781, 798, 800, 802, 804, 805, 819, 822, 823, 829, 831, 834, 842, 843, 847, 848, 853, 856, 862, 863, 871, 877, 880, 948, 949, 953, 974, 991, 997, 998, 1002, 1006, 1012, 1016, 1017, 1029, 1031, 1034, 1035, 1036, 1038, 1047, 1049], "90": [45, 49, 52, 54, 68, 106, 129, 130, 145, 146, 147, 149, 165, 175, 189, 194, 204, 211, 214, 219, 230, 255, 279, 281, 312, 316, 325, 329, 330, 359, 363, 376, 382, 412, 564, 782, 801, 829, 834, 886, 997, 1002, 1029, 1048, 1049], "900": [47, 83, 106, 107], "9000": 230, "900000e": 230, "9010": 1039, "9012": 1041, "9015": [664, 1041], "9019": 1040, "9022": 1040, "9024": 1040, "9026666666666666": 146, "903": 47, "904": [187, 268, 409], "9041": 1041, "9043": 1041, "9044": [270, 1040], "90453403": 466, "904556e": 230, "904558e": 230, "904747e": 230, "904751e": 230, "905": 268, "905206": 87, "9067": 1040, "9069": 1042, "9078": 1040, "908": 1002, "90809432": 130, "9085": 1041, "9087": 1047, "90885631": 86, "909": 47, "909293": 306, "909909": 146, "91": [45, 68, 84, 175, 308, 329, 330, 415, 997], "910": 43, "9100": 1040, "9101": 1041, "9105": 1040, "9108": 1040, "911": [166, 1023], "912": 73, "912632": 306, "913": [415, 560], "914370e": 230, "914387e": 230, "9144057": 52, "9145": 1040, "914538e": 230, "914573e": 230, "9147": 1041, "9149": 1039, "915": 47, "9151": 1041, "9157": 1041, "916": [82, 272, 1023], "91629073": 591, "916555e": 230, "9167": 324, "917": [82, 358], "917281": 146, "9173": 1022, "917618e": 230, "918": [123, 1023], "919": 264, "92": [52, 68, 83, 123, 165, 191, 268, 308, 329, 330, 340, 371, 373, 539, 541, 548, 563, 598, 697, 801, 815, 823, 997], "9206": 1040, "9219": 1040, "9221": 650, "9222": 1041, "9226260871125187": 278, "923223": 813, "92329566": 130, "9234": 1041, "9239": 1040, "924": 47, "92461872": 128, "925": 1002, "9250": 1043, "92529176": 1003, "9257": 1041, "9259": 1040, "9266666666666666": 142, "927": [228, 437], "9274": 1043, "9277": 1040, "9278": 1040, "928": [112, 437], "9284": 1040, "928525575873858": 326, "928571": 230, "9288": 1043, "9289": 1040, "929": [348, 1023], "93": [45, 47, 68, 123, 168, 212, 253, 268, 330, 351, 373, 647, 648, 653, 661, 662, 663, 682, 778, 789, 801, 823, 829, 913, 997, 1002], "9300": 270, "930000": 306, "9302": 1040, "9304": 1041, "932": 47, "9326": 1022, "93271427": 173, "933": [47, 78, 106, 412, 1023], "933197": 253, "933253": 146, "9333": 412, "933333": [160, 854], "935": [72, 1023, 1040], "9354": 1041, "936": [47, 437, 1002], "936480": 62, "9372": 1041, "937443": 62, "937532": 62, "937597": 62, "9378": 1041, "938": [47, 786, 1002], "938613": 62, "939": 669, "9399": 1041, "93fletcher": 998, "93goldfarb": 998, "93lindenstrauss_lemma": 899, "93shanno_algorithm": 998, "94": [43, 47, 68, 70, 87, 122, 142, 211, 247, 312, 329, 330, 407, 415, 664, 789, 823, 997, 1002, 1003, 1012, 1033], "940": 43, "9400": 270, "940000": 306, "940184": 146, "940201": 62, "940374": 62, "9403917": 115, "941": 47, "94114649": [845, 846], "9416": 52, "9417": 672, "9431": 836, "944": 47, "9456": 1041, "94592424": 663, "946": [80, 112, 340, 1023], "94731329": 668, "9473684210526315": 319, "947958": 991, "948": [786, 1002], "9484": 1041, "949": 47, "9490": 373, "9492": 1041, "9497": 1041, "9499": 639, "95": [45, 52, 54, 68, 79, 85, 90, 100, 142, 146, 149, 177, 186, 193, 212, 214, 219, 230, 257, 258, 261, 270, 271, 295, 303, 312, 316, 323, 330, 340, 359, 415, 528, 633, 634, 637, 648, 662, 749, 823, 902, 998, 1002, 1003, 1015, 1036], "950": 47, "950000047683716": 358, "9502547": 198, "9507": 1040, "9515": 1041, "951751e": 230, "951958": 991, "952": [47, 82], "9521": 1041, "952289": 202, "9524": 1041, "953": [47, 82, 352], "953061": 307, "95373": 371, "954": [326, 881, 893, 1023], "95433992": 115, "955": [290, 412, 655], "9558": 1040, "955989": 991, "956": 47, "956038": 306, "9565": 373, "9569": 1041, "957": [47, 315, 729, 1002], "9579": 1041, "958": 47, "9583": 407, "9584": [628, 1040], "959": [881, 893], "9593": 1040, "9595": 675, "9597": 1043, "9599": 1041, "95th": [52, 146, 149, 749], "96": [43, 52, 68, 95, 177, 239, 249, 268, 308, 312, 315, 316, 329, 330, 373, 412, 554, 683, 684, 712, 823, 991, 997, 1002, 1012, 1033], "9600": 1040, "9604": 1040, "961": 862, "961009": 991, "961111": 160, "9612": 1041, "961904": 854, "96190476": 1005, "962": 47, "96228895": 130, "9623": 1040, "9630": 676, "9641": 1040, "9647": 1041, "965": [47, 299, 1002, 1023], "9655": 1041, "9656": 1041, "966": [45, 306, 1023], "9666": 544, "966981": 202, "967": [106, 1002, 1006], "9677": 1040, "968": [175, 185, 268], "9681": 1041, "9686": 1041, "969": 370, "9693": 1040, "9694898472080092": 325, "9697": 1040, "97": [68, 80, 129, 168, 189, 247, 261, 330, 340, 373, 382, 389, 412, 647, 648, 653, 659, 661, 662, 663, 682, 683, 684, 997, 1003, 1012, 1033], "9701": 1041, "9707": 1041, "9711": 1040, "9717": 1040, "9723": 1041, "9726": 1041, "973": [352, 412], "9731": 1041, "9733": [621, 624], "973554": 324, "973770": 202, "974": 358, "974e": 416, "975": [168, 185, 1017], "9750": 1040, "97545464": 253, "975455": 253, "9759": 47, "976": [205, 278], "976158": 371, "977": [43, 412], "9771": 555, "9772": 1041, "9775": 1041, "977890": 260, "9781605585161": 408, "978444": 306, "9786": 1041, "9788": 1040, "98": [68, 77, 79, 87, 95, 97, 113, 123, 168, 239, 249, 268, 305, 312, 330, 373, 412, 415, 660, 840, 896, 997, 1002, 1004], "980000": 306, "9802": 1040, "981": [168, 373, 1002], "9815": 1040, "9816": 1041, "982": [273, 1023], "9821": 851, "983": 729, "9830": 1040, "9832": 1041, "9833": 499, "98350372e": 195, "983667": 991, "9837": 1041, "9843": 1046, "9847": 1040, "984ea3": [79, 95], "9850": 212, "9851": 1041, "9858": 1041, "98633022": 130, "986429": 307, "9865": 1040, "9866": [611, 620, 623], "9866666666666667": 142, "9867074786324785": 319, "9868": [899, 1014], "986989": 273, "987": [278, 352], "9875": 1041, "98809919e": 195, "9884": 680, "9885": 672, "9886": 1041, "988mb": 351, "989341": 202, "98mb": 351, "99": [45, 52, 62, 68, 79, 84, 95, 120, 230, 239, 243, 249, 255, 257, 268, 271, 310, 330, 364, 369, 373, 412, 415, 416, 493, 648, 662, 672, 683, 684, 789, 823, 852, 970, 997, 1002, 1012, 1016, 1028, 1035], "990": [670, 1002], "9900": 230, "9907": 1042, "9908": 1041, "991": [278, 1002], "991584977345022": 170, "991653": 306, "9922": 1040, "9924": 542, "99244": 542, "992766": 306, "993": [228, 278, 1023], "9933333333333333": 142, "9935": 836, "993879": 306, "9939": 1041, "993919": 50, "994": 290, "9945": 1040, "995": 205, "9951": 1043, "996": 54, "9969977": 52, "997": [46, 75, 168], "9978": 1046, "9979": 43, "9979281": 52, "998": [168, 289, 1006, 1023], "9980": [43, 1041], "9981": 43, "998142": 52, "998273": 264, "9987": 640, "99891212e": 195, "999": [230, 264, 270, 415, 718, 862, 863], "9990": 230, "9991": [665, 666, 1041], "99918858": 130, "9993": [43, 654, 656, 1041], "9994": 664, "9995": 43, "9996": 652, "999791942438998": 320, "9998": [50, 303], "9999": [50, 230, 303, 332, 499, 628, 1041], "99999": 332, "999999": [79, 95], "A": [0, 2, 19, 25, 41, 53, 55, 56, 62, 64, 67, 71, 73, 74, 75, 76, 79, 80, 82, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 107, 109, 112, 116, 118, 121, 122, 123, 135, 136, 141, 143, 153, 157, 159, 160, 161, 165, 167, 170, 173, 175, 177, 178, 179, 183, 186, 187, 198, 200, 213, 216, 222, 226, 227, 230, 233, 246, 249, 258, 264, 270, 271, 273, 277, 285, 287, 305, 310, 312, 315, 319, 321, 324, 330, 331, 332, 334, 340, 344, 345, 351, 352, 353, 358, 359, 363, 365, 370, 371, 373, 374, 376, 378, 379, 380, 381, 384, 388, 389, 390, 391, 393, 399, 403, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 490, 491, 493, 495, 498, 501, 502, 503, 504, 505, 509, 511, 512, 513, 514, 515, 521, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 611, 612, 618, 621, 628, 629, 630, 631, 633, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 705, 706, 711, 712, 713, 717, 718, 720, 722, 723, 724, 725, 726, 727, 732, 737, 738, 741, 743, 744, 745, 748, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 765, 767, 768, 775, 776, 777, 778, 779, 782, 789, 791, 792, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 947, 948, 949, 957, 958, 960, 961, 986, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1028, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "AND": 736, "AS": 420, "AT": [2, 371, 496], "And": [52, 183, 231, 232, 237, 246, 270, 351, 384, 402, 408, 412, 416, 531, 589, 590, 592, 693, 694, 998, 1002, 1023, 1040], "As": [0, 30, 43, 46, 58, 62, 66, 75, 78, 86, 88, 90, 91, 99, 113, 116, 125, 134, 135, 141, 143, 144, 145, 147, 149, 153, 163, 166, 170, 175, 176, 182, 186, 188, 189, 191, 193, 196, 198, 202, 204, 212, 216, 220, 230, 237, 246, 258, 264, 265, 267, 268, 270, 271, 273, 289, 295, 311, 322, 327, 332, 340, 344, 352, 353, 355, 357, 359, 363, 364, 371, 375, 376, 378, 381, 388, 389, 390, 402, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 446, 494, 555, 563, 567, 620, 633, 656, 657, 673, 675, 688, 736, 759, 765, 847, 848, 849, 851, 853, 884, 991, 996, 998, 999, 1001, 1002, 1003, 1005, 1009, 1012, 1016, 1017, 1018, 1021, 1022, 1026, 1033, 1039, 1044, 1049, 1051], "At": [52, 107, 134, 217, 246, 264, 282, 287, 289, 329, 332, 363, 364, 380, 391, 399, 404, 411, 415, 437, 440, 465, 589, 590, 592, 603, 833, 835, 872, 965, 991, 998, 1001, 1003, 1007, 1016, 1026], "Be": [165, 179, 351, 376, 410, 568, 569, 649, 655, 656, 657, 659, 660, 670, 681, 705, 819, 820, 880, 1012, 1030, 1034], "Being": [376, 390, 391, 998, 1005], "But": [43, 48, 86, 185, 213, 214, 270, 290, 310, 376, 388, 408, 411, 414, 415, 462, 747, 913, 914, 991, 1002, 1017, 1022], "By": [57, 120, 149, 150, 151, 193, 216, 246, 264, 279, 287, 310, 319, 325, 326, 344, 351, 364, 376, 378, 382, 383, 390, 399, 407, 408, 409, 411, 412, 413, 414, 415, 417, 438, 441, 445, 446, 450, 464, 467, 468, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 525, 550, 551, 558, 559, 560, 561, 565, 566, 586, 587, 589, 590, 592, 607, 610, 633, 634, 672, 674, 676, 678, 691, 693, 695, 698, 700, 701, 703, 704, 719, 730, 731, 735, 739, 784, 785, 788, 795, 797, 804, 805, 851, 865, 866, 878, 879, 881, 883, 893, 895, 903, 908, 909, 913, 914, 915, 916, 931, 932, 991, 992, 994, 998, 1002, 1009, 1010, 1012, 1014, 1018, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1045, 1047, 1050, 1051], "For": [2, 30, 43, 47, 48, 51, 52, 53, 57, 64, 68, 72, 75, 79, 80, 82, 86, 88, 90, 91, 93, 100, 105, 111, 116, 121, 137, 139, 146, 147, 149, 150, 152, 164, 165, 168, 170, 172, 177, 181, 182, 186, 187, 198, 200, 202, 209, 212, 213, 216, 217, 220, 229, 230, 232, 234, 237, 239, 240, 242, 243, 244, 246, 253, 260, 264, 267, 270, 271, 277, 284, 289, 290, 300, 305, 307, 308, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 332, 334, 340, 342, 344, 347, 351, 352, 353, 355, 356, 358, 359, 363, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 399, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 424, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 458, 460, 461, 462, 464, 465, 466, 468, 471, 472, 474, 482, 483, 484, 485, 489, 495, 497, 499, 504, 515, 516, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 582, 583, 584, 585, 589, 590, 592, 593, 594, 595, 598, 603, 608, 609, 610, 611, 612, 615, 620, 623, 624, 628, 629, 630, 631, 632, 633, 634, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 689, 690, 691, 693, 694, 696, 702, 705, 707, 708, 730, 731, 739, 742, 764, 770, 779, 784, 785, 788, 789, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 834, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 931, 937, 954, 964, 985, 991, 992, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1020, 1025, 1026, 1033, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "If": [0, 43, 50, 52, 64, 68, 77, 82, 88, 103, 113, 123, 132, 146, 149, 154, 179, 182, 186, 195, 212, 227, 229, 230, 246, 249, 253, 264, 270, 277, 284, 295, 303, 310, 315, 316, 340, 344, 347, 348, 351, 352, 353, 358, 359, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 394, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 429, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 516, 520, 523, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 712, 713, 714, 715, 717, 718, 719, 723, 727, 728, 729, 730, 731, 732, 733, 737, 739, 742, 746, 747, 749, 754, 755, 756, 757, 758, 759, 760, 762, 764, 765, 767, 768, 769, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 813, 815, 818, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 926, 927, 929, 930, 931, 932, 934, 935, 936, 937, 938, 941, 947, 949, 951, 953, 958, 960, 964, 967, 970, 972, 975, 976, 982, 985, 986, 987, 988, 990, 991, 992, 994, 996, 997, 998, 999, 1000, 1002, 1005, 1006, 1008, 1009, 1012, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1033, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1046, 1047, 1049, 1051], "In": [0, 7, 37, 43, 44, 46, 48, 50, 51, 52, 53, 54, 62, 63, 64, 70, 72, 74, 82, 86, 88, 90, 91, 93, 99, 100, 103, 104, 106, 107, 109, 111, 112, 113, 116, 120, 122, 125, 126, 127, 128, 132, 134, 137, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 154, 157, 164, 165, 167, 168, 170, 174, 175, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 198, 200, 201, 202, 204, 208, 212, 213, 214, 215, 216, 217, 220, 229, 230, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 251, 252, 253, 258, 260, 263, 264, 267, 268, 270, 271, 272, 273, 275, 276, 279, 280, 282, 283, 284, 285, 287, 290, 293, 296, 297, 299, 308, 310, 311, 312, 315, 316, 317, 319, 320, 321, 323, 324, 326, 327, 331, 333, 340, 344, 347, 351, 352, 353, 355, 357, 358, 359, 363, 364, 365, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 388, 389, 390, 391, 393, 394, 395, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 437, 440, 441, 442, 443, 444, 447, 448, 449, 452, 462, 463, 464, 469, 472, 475, 494, 497, 504, 509, 510, 512, 524, 535, 537, 539, 541, 542, 543, 545, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 592, 603, 607, 610, 611, 612, 631, 633, 634, 635, 637, 644, 645, 646, 648, 649, 650, 652, 654, 656, 659, 660, 662, 664, 666, 667, 669, 670, 675, 676, 677, 680, 681, 685, 686, 687, 697, 700, 704, 713, 719, 721, 727, 729, 730, 735, 736, 739, 741, 743, 755, 757, 758, 782, 784, 786, 789, 795, 797, 798, 799, 800, 801, 804, 805, 807, 815, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 862, 870, 872, 878, 879, 883, 884, 886, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 910, 913, 915, 920, 930, 932, 949, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1026, 1030, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "Ines": 1050, "It": [0, 30, 43, 46, 47, 48, 52, 58, 62, 70, 72, 75, 86, 88, 91, 104, 109, 111, 113, 120, 123, 124, 126, 129, 134, 137, 139, 140, 142, 144, 146, 154, 168, 175, 176, 177, 181, 182, 186, 187, 188, 194, 198, 200, 202, 212, 216, 226, 229, 230, 232, 233, 239, 244, 246, 249, 264, 265, 266, 268, 270, 271, 273, 276, 277, 284, 287, 290, 296, 297, 298, 300, 301, 303, 310, 314, 315, 317, 319, 325, 327, 336, 340, 344, 347, 351, 352, 353, 359, 363, 364, 365, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 388, 389, 390, 391, 394, 399, 402, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 437, 438, 441, 442, 443, 444, 445, 447, 448, 449, 452, 459, 462, 464, 467, 468, 469, 474, 478, 485, 487, 497, 509, 516, 525, 534, 536, 537, 539, 541, 542, 550, 551, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 590, 597, 603, 607, 608, 609, 612, 615, 616, 620, 621, 623, 624, 628, 631, 632, 633, 634, 642, 643, 644, 647, 648, 651, 653, 654, 655, 656, 659, 661, 662, 663, 664, 667, 668, 669, 671, 672, 673, 675, 677, 678, 679, 680, 682, 683, 684, 685, 688, 690, 692, 693, 694, 696, 697, 698, 699, 700, 701, 703, 705, 709, 710, 711, 717, 724, 735, 743, 744, 748, 759, 760, 763, 766, 782, 784, 789, 800, 801, 804, 805, 807, 813, 814, 815, 823, 824, 826, 829, 832, 841, 842, 847, 848, 849, 851, 854, 855, 856, 857, 861, 862, 863, 867, 868, 869, 873, 874, 875, 879, 882, 884, 894, 897, 898, 902, 903, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 922, 926, 935, 949, 958, 972, 975, 977, 978, 979, 980, 981, 982, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1021, 1026, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "Its": [109, 268, 272, 372, 390, 413, 418, 539, 922, 997, 998, 1007, 1010, 1016, 1021, 1026, 1036, 1050], "NOT": [246, 296, 373, 379, 564, 811, 845, 846], "Nearness": 628, "No": [61, 148, 198, 218, 220, 240, 246, 264, 330, 347, 373, 384, 394, 402, 408, 474, 560, 561, 591, 592, 636, 646, 665, 677, 679, 686, 687, 798, 998, 1050], "Not": [88, 159, 187, 363, 388, 402, 408, 426, 427, 430, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 564, 567, 570, 571, 582, 583, 584, 589, 590, 592, 628, 629, 630, 631, 678, 689, 690, 691, 692, 694, 795, 798, 799, 801, 804, 805, 815, 842, 845, 846, 849, 850, 851, 853, 857, 869, 877, 880, 881, 883, 886, 897, 898, 909, 1002, 1008, 1021, 1042], "OF": 373, "ON": 324, "ONE": [370, 608, 609], "OR": [310, 408, 419, 444, 1044], "Of": [48, 62, 64, 181, 284, 363, 378, 408, 416, 992], "On": [43, 51, 52, 55, 63, 100, 103, 104, 115, 116, 125, 134, 137, 139, 141, 146, 150, 151, 154, 157, 163, 165, 174, 175, 186, 187, 188, 195, 200, 202, 214, 216, 240, 241, 242, 243, 245, 246, 249, 250, 251, 252, 253, 255, 257, 260, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 277, 282, 284, 308, 310, 312, 314, 315, 316, 320, 321, 323, 324, 326, 331, 340, 347, 357, 358, 363, 374, 376, 377, 378, 380, 388, 390, 404, 406, 408, 412, 413, 415, 417, 418, 644, 657, 692, 736, 762, 870, 886, 991, 995, 998, 1001, 1002, 1004, 1008, 1010, 1015, 1017], "One": [2, 43, 48, 51, 61, 66, 82, 88, 125, 127, 143, 146, 149, 150, 183, 186, 189, 192, 216, 221, 227, 239, 250, 260, 264, 270, 277, 280, 287, 296, 299, 311, 326, 335, 337, 348, 352, 358, 363, 373, 376, 389, 390, 402, 407, 408, 411, 413, 414, 415, 416, 417, 419, 444, 449, 472, 474, 478, 513, 567, 632, 640, 659, 667, 669, 674, 676, 677, 678, 789, 808, 809, 833, 834, 835, 866, 867, 878, 909, 964, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1012, 1017, 1023, 1024, 1028, 1037, 1039, 1046, 1048], "Or": [351, 358, 412, 413, 878, 1002, 1008, 1016], "Such": [53, 150, 170, 175, 185, 193, 198, 202, 213, 264, 273, 351, 390, 391, 402, 412, 413, 415, 556, 557, 657, 992, 1002, 1005, 1012, 1018, 1043, 1048, 1050], "THE": 373, "That": [52, 64, 120, 134, 149, 168, 186, 202, 239, 270, 274, 352, 353, 364, 370, 384, 390, 407, 412, 417, 418, 443, 446, 447, 558, 565, 594, 819, 913, 914, 991, 999, 1000, 1008, 1018, 1042, 1043], "The": [2, 16, 25, 27, 30, 31, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 285, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 388, 389, 390, 391, 393, 394, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 428, 430, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 753, 754, 755, 756, 757, 758, 759, 760, 763, 765, 766, 767, 768, 771, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 943, 944, 945, 946, 947, 948, 949, 951, 952, 954, 957, 958, 961, 964, 966, 967, 968, 970, 971, 972, 975, 983, 984, 985, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "Their": [186, 371, 373, 391, 408, 645, 1033], "Then": [103, 135, 139, 149, 154, 157, 165, 186, 191, 198, 200, 209, 212, 216, 236, 240, 246, 252, 264, 272, 273, 287, 351, 358, 370, 380, 382, 384, 394, 395, 405, 408, 411, 413, 416, 417, 571, 594, 720, 757, 801, 815, 905, 906, 992, 1001, 1002, 1008, 1017, 1018, 1042], "There": [0, 74, 80, 140, 170, 230, 236, 246, 261, 265, 267, 270, 289, 351, 369, 371, 373, 376, 377, 378, 381, 388, 390, 391, 394, 405, 408, 413, 415, 416, 417, 446, 452, 462, 535, 554, 555, 560, 561, 589, 590, 592, 607, 646, 992, 998, 999, 1000, 1001, 1002, 1005, 1009, 1012, 1016, 1017, 1018, 1020, 1025, 1033, 1041], "These": [11, 18, 25, 32, 38, 43, 44, 46, 64, 84, 120, 122, 139, 142, 183, 187, 202, 212, 213, 214, 240, 264, 287, 290, 294, 308, 310, 317, 318, 323, 330, 332, 359, 363, 364, 369, 372, 373, 376, 378, 380, 383, 385, 388, 390, 394, 399, 402, 405, 406, 407, 408, 411, 413, 415, 416, 417, 418, 442, 446, 448, 499, 509, 510, 516, 539, 568, 569, 603, 604, 669, 677, 678, 700, 707, 734, 779, 795, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 830, 832, 850, 851, 870, 924, 991, 993, 996, 998, 999, 1002, 1003, 1013, 1015, 1017, 1021, 1033, 1039, 1041, 1042, 1043, 1046, 1050], "To": [1, 43, 47, 63, 64, 68, 80, 88, 90, 109, 111, 113, 116, 125, 134, 143, 146, 147, 156, 159, 168, 175, 176, 179, 181, 182, 185, 186, 191, 195, 198, 200, 212, 213, 214, 216, 220, 230, 243, 244, 246, 249, 251, 253, 260, 264, 265, 267, 268, 270, 272, 273, 275, 277, 283, 284, 287, 289, 307, 310, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 349, 352, 355, 359, 363, 364, 369, 370, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 394, 402, 404, 405, 408, 409, 410, 411, 412, 413, 415, 416, 446, 448, 449, 450, 461, 464, 467, 493, 497, 503, 504, 508, 509, 510, 532, 538, 539, 540, 542, 544, 545, 546, 547, 558, 559, 560, 561, 565, 566, 570, 598, 612, 628, 633, 647, 648, 653, 654, 657, 659, 660, 661, 662, 663, 664, 685, 701, 713, 729, 764, 786, 794, 804, 805, 827, 834, 865, 876, 881, 895, 896, 905, 906, 910, 913, 914, 915, 916, 939, 949, 988, 991, 992, 994, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1016, 1017, 1018, 1026, 1033, 1036, 1038, 1039, 1040, 1042, 1044], "Will": [376, 498, 535, 628, 645, 646, 647, 653, 657, 658, 661, 662, 663, 664, 665, 666, 674, 676, 708, 715, 789, 870, 874, 884, 885, 1036, 1037, 1039, 1041, 1051], "Willing": [1039, 1040], "With": [61, 70, 79, 100, 107, 125, 126, 149, 151, 164, 183, 187, 212, 214, 238, 240, 245, 247, 253, 270, 294, 363, 371, 374, 376, 378, 390, 399, 408, 409, 412, 415, 417, 437, 439, 502, 542, 583, 633, 634, 659, 863, 866, 868, 879, 885, 886, 912, 914, 995, 998, 999, 1002, 1003, 1005, 1006, 1009, 1016, 1018, 1023, 1030, 1036, 1040, 1041, 1043, 1045, 1047], "_": [43, 44, 46, 47, 48, 50, 51, 52, 54, 58, 62, 63, 64, 66, 68, 69, 75, 78, 83, 86, 88, 91, 96, 100, 102, 113, 118, 120, 125, 126, 127, 129, 137, 138, 139, 149, 163, 170, 175, 176, 177, 185, 186, 187, 189, 191, 193, 197, 198, 200, 201, 202, 205, 210, 212, 214, 216, 225, 226, 229, 233, 236, 240, 245, 249, 253, 264, 265, 270, 272, 273, 274, 276, 277, 279, 283, 284, 287, 293, 298, 301, 308, 312, 315, 316, 317, 320, 323, 324, 325, 327, 330, 331, 339, 344, 347, 351, 353, 356, 378, 382, 390, 413, 415, 416, 420, 446, 478, 533, 534, 535, 536, 537, 539, 540, 541, 544, 546, 547, 548, 567, 598, 647, 648, 653, 654, 661, 662, 663, 664, 682, 683, 684, 685, 689, 690, 691, 692, 694, 696, 697, 699, 701, 711, 765, 801, 807, 815, 824, 849, 857, 878, 879, 886, 992, 998, 999, 1002, 1004, 1005, 1006, 1009, 1010, 1012, 1017, 1018, 1040], "_0": [211, 686, 998, 1002, 1017], "_1": [322, 344, 410, 413, 416, 532, 538, 539, 541, 546, 547, 548, 647, 648, 653, 654, 655, 656, 657, 661, 662, 663, 664, 682, 683, 684, 685, 767, 998, 1000, 1002, 1017], "_11": 653, "_2": [112, 175, 344, 413, 416, 532, 538, 546, 547, 647, 653, 998, 1006, 1016, 1017], "_21": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685], "__": [105, 271, 390, 409, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 1041, 1042], "______________________________________________________________________": 330, "________________________________________________________________________________": [50, 87, 351], "__________________________________________________________________________________": 91, "________________________________________________________ward_tre": 87, "_____________________________________________________f_regress": 87, "__add__": [418, 625], "__array__": [1036, 1043], "__array_function__": [1022, 1043], "__c": 378, "__call__": [178, 340, 390, 416, 418, 466, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 939, 967, 1040], "__class__": [181, 212, 214, 246, 249, 272, 312, 351, 352, 353, 383], "__class_weight": 378, "__dataframe__": [562, 563], "__doc__": [78, 107, 175, 258, 390], "__file__": [47, 49, 1046], "__getattr__": 378, "__getitem__": 1051, "__getstate__": [1040, 1048], "__init__": [47, 89, 132, 178, 246, 290, 340, 376, 378, 380, 381, 382, 383, 390, 416, 422, 425, 428, 431, 432, 619, 962, 1034, 1039, 1041, 1046, 1047, 1048, 1049], "__init_subclass__": 378, "__len__": 1042, "__main__": [333, 388], "__metadata_request__fit": 246, "__mul__": 622, "__mul___": 418, "__name__": [46, 62, 94, 181, 212, 214, 246, 249, 253, 265, 272, 312, 333, 351, 352, 353, 383, 388, 878], "__pow__": [418, 617], "__repr__": [378, 1022, 1042], "__sklearn_clone__": [378, 433, 1049], "__sklearn_is_fitted__": [89, 131, 183, 378, 422, 425, 985, 1023, 1046, 1047], "__sklearn_tags__": [378, 938, 954], "__version__": [147, 189, 319, 380], "_agglom": 87, "_array_api": 404, "_bag": 941, "_base": [256, 378], "_basehmm": 1033, "_bay": 941, "_birch": 1043, "_breast_cancer_dataset": 168, "_build": 376, "_c_step": 1040, "_cfnode": 442, "_check_bounds_param": 1045, "_check_i": 990, "_check_param_grid": 1039, "_check_sample_weight": 1046, "_check_stop_list": 592, "_check_target": 1040, "_check_x": 1043, "_class": 1002, "_class_cov": 1041, "_class_mean": 1041, "_classif": 308, "_classifier_ha": 89, "_column_transform": [103, 154], "_compon": [243, 537], "_coo": [586, 587], "_count_nonzero_coeffici": 46, "_criterion": 1041, "_csr": 878, "_cython_bla": 377, "_devianc": 1002, "_diabetes_dataset": 168, "_distn_infrastructur": 282, "_doc_link_modul": 378, "_doc_link_templ": 378, "_doc_link_url_param_gener": 378, "_dotbla": 382, "_encod": 1041, "_error": 1002, "_estim": 990, "_estimator_html_repr": 945, "_estimator_typ": [378, 390, 425, 426, 427, 430, 431, 1038], "_estimator_with_converted_arrai": 404, "_f": [178, 998], "_featur": [413, 539, 541, 548], "_fit_and_scor": 1041, "_fit_stag": [560, 561], "_fro": [532, 538, 546, 547, 647, 648, 653, 661, 662, 663, 682], "_g": 178, "_gb": 1043, "_generate_center_coordin": 53, "_get_support_mask": 602, "_get_tag": 1044, "_get_warnings_filters_info_list": 364, "_gpr": 179, "_h": [539, 541, 548], "_hist_gradient_boost": 380, "_i": [406, 415, 993, 998, 1002, 1006, 1017], "_idx": 390, "_init": 194, "_init_t": 1016, "_initialize_nmf": 382, "_is_fit": 132, "_iter": 380, "_j": [406, 993], "_k": [410, 996, 998], "_l": 1002, "_learntselectormixin": 1038, "_level": [418, 626], "_logist": 376, "_loss": [390, 1002, 1051], "_m": 1018, "_mean": 316, "_mean_frequency_by_risk_group": 212, "_method": 961, "_my": 376, "_n": [416, 1002], "_n_cluster": 376, "_n_compon": 548, "_n_features_out": 424, "_name_estim": 1043, "_neg": 382, "_newton_cg": 1044, "_nls_subproblem": 382, "_nmf": 382, "_not_in_sphinx": [47, 49], "_num_thread": 364, "_obj": 961, "_openmp_help": 377, "_pairwis": [1043, 1045], "_plain_sgd": 1048, "_plot": [240, 329], "_po": 382, "_posterior_mod": 611, "_preprocess_data": 688, "_pvalu": 1033, "_rand": 359, "_ratio": [539, 541, 548], "_request": [246, 399, 1051], "_required_paramet": 428, "_reset": 47, "_run_search": 1041, "_safe_index": [2, 1046, 1050, 1051], "_safe_split": 922, "_safe_tag": 1044, "_sag": 1042, "_sampl": [243, 413, 539, 541, 548], "_samples_gener": 258, "_score": [390, 801, 815, 828, 1002, 1033, 1046], "_search": 1039, "_serial": 246, "_sgd_fast": 1048, "_skip_test": 924, "_spars": 382, "_sparse_fit": 1043, "_std": 316, "_t": 1016, "_test": [220, 312, 364, 378, 1046], "_test_scor": [270, 472, 595, 1046], "_transform_select": 1039, "_tree": [913, 914, 915, 916, 1034, 1036], "_typedef": 377, "_univariate_select": 87, "_valu": [418, 614], "_w": [539, 541, 548], "_weight": [53, 230], "_weight_boost": 941, "_weighted_percentil": 1046, "_x_is_even": 962, "_xfail_check": 924, "a16": [1043, 1044], "a65628": [79, 95], "a674e682c281": 381, "a_": [121, 405, 408, 539, 541, 548, 998], "a_column": 720, "a_i": 408, "a_mask": 279, "a_n": 405, "a_row": 720, "a_tru": 279, "aaa": 178, "aaaaff": [295, 298], "aaai": [408, 419, 444, 840, 1004], "aact": 178, "aaffaa": 298, "aagaard": 1037, "aakanksha": 1041, "aapl": 51, "aarch64": 384, "aaron": [495, 998, 1036, 1037, 1038, 1043], "aarshai": [1040, 1041], "aashil": 1040, "ab": [51, 55, 75, 107, 124, 130, 136, 143, 154, 164, 168, 189, 204, 223, 225, 228, 230, 235, 270, 310, 327, 338, 349, 408, 539, 541, 548, 628, 845, 846, 880, 1002], "ab_mask": 279, "abadi": [1039, 1040], "abandon": 376, "abati": [1048, 1050, 1051], "abbi": [1043, 1044], "abbrevi": 700, "abdela": 1042, "abdulaziz": 1051, "abdulelah": 1046, "abdur": 1043, "abenbihi": 1043, "abhijeet": 1035, "abhinav": [1043, 1046], "abhishek": [1036, 1037, 1043, 1047, 1049, 1050], "abhyudai": 1040, "abid": 376, "abil": [48, 52, 94, 111, 146, 169, 170, 171, 175, 177, 179, 181, 183, 185, 186, 188, 212, 216, 230, 239, 351, 365, 394, 415, 416, 418, 612, 623, 626, 783, 784, 785, 788, 789, 999, 1002, 1005, 1008, 1018, 1022, 1023, 1033, 1035, 1040, 1042, 1046, 1047], "abirami": 408, "abl": [43, 44, 48, 61, 81, 88, 94, 113, 116, 124, 125, 149, 151, 176, 186, 189, 198, 202, 212, 228, 230, 236, 276, 281, 283, 326, 327, 340, 359, 363, 364, 365, 370, 374, 376, 378, 380, 381, 384, 388, 402, 408, 410, 412, 416, 485, 504, 535, 830, 877, 991, 992, 998, 1001, 1002, 1003, 1008, 1012, 1015, 1018, 1019, 1022, 1039, 1040, 1044, 1051], "ablin": 1048, "abnorm": [226, 239, 296, 339, 371, 493, 564, 851, 1008, 1041], "abo7atm": 1045, "abort": 693, "about": [3, 46, 50, 65, 79, 86, 90, 95, 102, 116, 142, 165, 179, 183, 185, 189, 216, 229, 239, 246, 264, 267, 268, 270, 272, 277, 289, 295, 315, 319, 321, 322, 323, 324, 325, 330, 351, 353, 358, 359, 363, 364, 369, 371, 375, 376, 378, 380, 381, 382, 384, 389, 390, 391, 402, 407, 412, 413, 416, 418, 438, 493, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 516, 562, 563, 594, 595, 608, 609, 615, 641, 677, 679, 744, 801, 807, 815, 824, 834, 884, 932, 992, 998, 999, 1001, 1003, 1005, 1008, 1009, 1012, 1013, 1015, 1017, 1018, 1021, 1025, 1026, 1038, 1039, 1049, 1051], "abov": [43, 62, 63, 64, 72, 79, 99, 102, 136, 139, 140, 146, 149, 157, 167, 168, 186, 187, 199, 212, 214, 218, 223, 243, 246, 247, 264, 270, 276, 287, 295, 312, 315, 316, 320, 322, 326, 344, 352, 353, 358, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 378, 380, 382, 388, 390, 391, 406, 408, 409, 410, 412, 413, 414, 415, 416, 418, 441, 445, 464, 467, 489, 496, 497, 498, 524, 591, 635, 705, 756, 801, 805, 813, 815, 826, 868, 869, 882, 888, 894, 902, 964, 991, 992, 994, 996, 998, 999, 1002, 1005, 1007, 1009, 1012, 1016, 1017, 1018, 1022, 1039, 1051], "abraham": [1033, 1034, 1039, 1043], "abrahamowicz": 1012, "absenc": [239, 273, 390, 713, 868, 1001, 1002], "absent": [390, 406, 416, 730, 755, 826], "absgrad": 1044, "absher": 1035, "absolut": [2, 43, 52, 107, 124, 143, 168, 186, 212, 214, 218, 230, 327, 358, 378, 402, 408, 410, 412, 413, 415, 416, 417, 418, 419, 444, 450, 456, 457, 532, 538, 543, 546, 547, 549, 550, 551, 559, 561, 562, 563, 566, 589, 591, 592, 594, 598, 603, 620, 628, 633, 647, 650, 651, 653, 655, 657, 672, 673, 675, 677, 679, 683, 684, 705, 718, 722, 737, 738, 746, 747, 749, 754, 756, 758, 796, 803, 807, 818, 821, 829, 831, 843, 845, 846, 850, 869, 874, 877, 890, 914, 916, 987, 998, 999, 1012, 1016, 1018, 1034, 1039, 1044, 1045, 1046, 1047, 1050], "absolute_error": [52, 415, 559, 561, 563, 566, 672, 914, 916, 1046], "absolute_loss": 1046, "absolutelynowarranti": 1041, "absp": 861, "abstain": 535, "abstract": [390, 413, 418, 619, 770, 1033], "abstractmethod": 1043, "absurd": 1009, "abund": 371, "ac": [531, 665, 686, 687, 998, 1015], "acad": [690, 694, 999], "academ": [412, 1026], "academi": [111, 852], "acategorypredict": 396, "acc": 145, "acc_clf1": 69, "acc_clf2": 69, "acc_clf3": 69, "acc_histori": 47, "acc_knn": 299, "acceler": [244, 324, 363, 388, 404, 408, 468, 693, 903, 999, 1021, 1026, 1042, 1046, 1048, 1050], "accent": [348, 589, 590, 592, 1043], "accept": [168, 170, 246, 264, 267, 319, 327, 340, 351, 353, 359, 363, 364, 370, 376, 378, 385, 388, 389, 390, 391, 399, 404, 408, 416, 437, 441, 444, 445, 448, 461, 464, 467, 509, 510, 556, 557, 562, 563, 570, 571, 582, 583, 594, 595, 598, 629, 636, 640, 644, 647, 648, 653, 654, 680, 728, 743, 779, 798, 799, 800, 804, 805, 823, 847, 848, 855, 856, 865, 869, 929, 931, 932, 935, 990, 998, 1000, 1002, 1005, 1010, 1012, 1017, 1021, 1022, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "accept_large_spars": [931, 932, 1041], "accept_spars": [869, 931, 932, 1040, 1050], "access": [43, 82, 109, 144, 249, 256, 261, 326, 327, 351, 358, 363, 364, 376, 377, 378, 384, 388, 390, 391, 404, 408, 410, 411, 415, 416, 418, 450, 457, 464, 467, 537, 568, 569, 570, 571, 618, 863, 864, 865, 920, 991, 998, 1001, 1002, 1008, 1009, 1010, 1016, 1017, 1022, 1026, 1033, 1035, 1039, 1040, 1041, 1042, 1045, 1047, 1048, 1049], "accid": [212, 230], "accident": [1033, 1037, 1042], "accommod": [175, 1041], "accompani": [270, 1041], "accomplish": [246, 378, 406, 547, 999, 1003, 1005, 1026, 1050], "accord": [2, 55, 61, 63, 72, 82, 109, 140, 145, 168, 171, 197, 212, 230, 243, 319, 344, 352, 359, 376, 378, 388, 389, 390, 391, 402, 405, 406, 408, 410, 412, 413, 415, 416, 418, 437, 450, 452, 456, 460, 462, 465, 469, 505, 517, 518, 519, 526, 531, 533, 536, 537, 539, 541, 551, 554, 555, 562, 563, 564, 567, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 642, 643, 645, 646, 650, 659, 660, 671, 681, 692, 696, 736, 780, 781, 801, 802, 803, 804, 805, 808, 809, 810, 815, 826, 840, 841, 842, 843, 844, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 868, 875, 883, 895, 897, 898, 905, 906, 907, 908, 910, 911, 996, 998, 1002, 1004, 1005, 1012, 1015, 1016, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "accordingli": [149, 187, 249, 344, 376, 380, 381, 1040, 1041, 1048], "account": [52, 53, 88, 122, 128, 134, 149, 175, 181, 186, 230, 246, 264, 270, 293, 299, 347, 349, 352, 363, 372, 376, 390, 391, 399, 408, 411, 412, 413, 415, 416, 463, 562, 563, 568, 569, 628, 629, 631, 633, 634, 650, 674, 680, 705, 708, 729, 730, 731, 739, 744, 757, 784, 785, 788, 789, 802, 806, 819, 879, 991, 994, 996, 1000, 1002, 1003, 1004, 1005, 1012, 1016, 1018, 1038, 1040, 1041, 1042, 1045, 1046, 1048, 1050, 1051], "acctactagaagtt": 388, "acctcctagaag": 388, "accumul": [47, 83, 141, 202, 380, 382, 408, 416, 1002, 1034, 1041], "accur": [43, 48, 52, 59, 62, 63, 111, 120, 148, 170, 177, 186, 187, 216, 227, 230, 264, 270, 277, 281, 287, 323, 351, 352, 359, 375, 390, 406, 408, 410, 413, 415, 416, 417, 437, 443, 447, 451, 453, 459, 532, 539, 541, 543, 544, 546, 547, 548, 608, 609, 635, 804, 805, 845, 846, 948, 949, 994, 999, 1002, 1018, 1047], "accuraci": [2, 30, 37, 43, 45, 46, 47, 62, 66, 67, 68, 69, 102, 103, 104, 105, 134, 140, 141, 144, 145, 152, 164, 165, 167, 171, 189, 191, 212, 216, 220, 227, 228, 257, 268, 269, 270, 271, 272, 274, 276, 284, 287, 292, 298, 299, 300, 308, 312, 315, 325, 329, 330, 332, 340, 343, 344, 347, 359, 363, 389, 390, 407, 408, 412, 415, 416, 417, 425, 437, 449, 469, 471, 472, 478, 533, 535, 542, 550, 551, 552, 554, 556, 558, 559, 560, 562, 565, 566, 568, 570, 611, 635, 659, 660, 667, 669, 672, 675, 676, 677, 693, 698, 704, 709, 712, 714, 719, 733, 734, 735, 739, 744, 755, 764, 788, 795, 797, 800, 823, 829, 832, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 847, 852, 854, 855, 862, 900, 901, 905, 907, 910, 913, 915, 921, 948, 949, 991, 996, 997, 998, 999, 1003, 1005, 1006, 1010, 1014, 1016, 1018, 1041, 1042, 1051], "accuracy_histori": 47, "accuracy_scor": [2, 66, 134, 171, 274, 315, 332, 351, 359, 389, 399, 404, 425, 558, 565, 709, 712, 730, 731, 735, 739, 784, 785, 788, 795, 797, 942, 991, 1002, 1034, 1035, 1036, 1045, 1050, 1051], "acf": 143, "achar": [1040, 1041, 1042, 1043], "achiev": [43, 51, 55, 57, 64, 67, 123, 134, 142, 144, 149, 152, 178, 191, 212, 220, 267, 270, 277, 315, 327, 332, 340, 343, 344, 347, 351, 359, 363, 365, 370, 371, 373, 378, 382, 388, 390, 396, 405, 406, 407, 408, 412, 413, 415, 416, 559, 566, 641, 650, 677, 679, 708, 730, 731, 739, 741, 764, 784, 785, 788, 804, 805, 841, 885, 991, 992, 994, 998, 1002, 1012, 1015, 1017, 1046], "achin": 1026, "achliopta": [243, 898, 899, 1014], "acid": [315, 373], "acknowledg": [375, 610, 1050], "acl": [902, 1015, 1016], "acm": [370, 371, 408, 419, 444, 450, 457, 460, 512, 564, 677, 727, 757, 851, 1002, 1005, 1008, 1014], "acoust": 1002, "acq": 47, "acquaint": 376, "acquir": [53, 272, 1045], "acquisit": [405, 720], "acronym": 380, "across": [0, 2, 15, 43, 52, 88, 94, 100, 115, 126, 140, 159, 186, 202, 207, 233, 265, 267, 270, 283, 284, 290, 310, 315, 344, 377, 378, 385, 390, 402, 406, 408, 412, 415, 416, 417, 420, 437, 440, 450, 452, 454, 457, 460, 462, 469, 472, 474, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 568, 569, 589, 592, 595, 603, 608, 609, 611, 612, 633, 634, 635, 640, 641, 642, 643, 647, 648, 651, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 677, 679, 680, 686, 687, 690, 691, 692, 693, 694, 695, 696, 705, 706, 718, 732, 758, 789, 794, 796, 798, 799, 801, 802, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 850, 854, 861, 862, 863, 870, 874, 875, 882, 883, 885, 886, 894, 897, 898, 900, 901, 905, 906, 907, 910, 913, 914, 948, 949, 972, 975, 991, 998, 1000, 1002, 1012, 1016, 1018, 1022, 1026, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1051], "act": [340, 351, 376, 389, 414, 415, 714, 730, 731, 739, 784, 785, 788, 880, 884, 999, 1002, 1005, 1017, 1041], "action": [322, 351, 375, 379, 380, 394, 407, 1012, 1043], "activ": [52, 68, 183, 220, 255, 261, 271, 328, 329, 353, 370, 371, 374, 376, 377, 382, 384, 388, 390, 391, 394, 395, 399, 409, 497, 503, 527, 633, 636, 638, 651, 652, 654, 655, 656, 664, 665, 666, 683, 684, 685, 686, 687, 714, 719, 798, 861, 862, 863, 901, 967, 998, 999, 1000, 1001, 1005, 1006, 1007, 1015, 1023, 1025, 1044], "active_": [651, 652, 655, 656], "active_features_": 1041, "actual": [43, 52, 64, 80, 93, 107, 116, 140, 149, 168, 186, 191, 202, 212, 216, 220, 257, 266, 273, 277, 353, 358, 359, 363, 365, 373, 376, 378, 381, 382, 388, 389, 390, 406, 408, 413, 415, 416, 417, 433, 510, 516, 517, 528, 536, 539, 541, 548, 563, 564, 645, 646, 649, 659, 660, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 681, 688, 692, 696, 702, 705, 710, 716, 722, 723, 724, 725, 786, 798, 804, 805, 817, 820, 821, 851, 882, 905, 911, 940, 941, 942, 976, 994, 1001, 1002, 1005, 1009, 1010, 1018, 1025, 1040, 1041, 1047, 1048, 1049], "actual_vs_predict": [43, 107, 154, 186, 266, 324, 702], "actuari": 406, "ad": [43, 53, 58, 107, 127, 129, 134, 140, 149, 164, 170, 176, 177, 193, 198, 209, 214, 216, 236, 245, 246, 270, 271, 272, 310, 320, 321, 322, 323, 324, 325, 326, 327, 333, 344, 352, 375, 376, 378, 380, 388, 390, 391, 413, 415, 416, 417, 418, 419, 420, 426, 430, 432, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 511, 513, 515, 523, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 705, 709, 712, 714, 715, 717, 719, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 735, 740, 741, 742, 743, 744, 747, 754, 755, 758, 762, 767, 768, 770, 776, 778, 779, 783, 784, 785, 786, 788, 790, 791, 792, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 814, 815, 819, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 891, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 929, 931, 932, 939, 943, 944, 948, 949, 957, 958, 959, 960, 961, 964, 967, 971, 976, 982, 988, 990, 991, 995, 997, 998, 999, 1003, 1005, 1006, 1008, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "adaboost": [2, 67, 133, 137, 142, 150, 153, 154, 157, 173, 183, 311, 344, 356, 357, 520, 552, 554, 555, 560, 632, 704, 831, 913, 914, 1023, 1024, 1028, 1035], "adaboost_clf": 134, "adaboostclassifi": [2, 67, 136, 142, 399, 415, 555, 560, 562, 941, 1035, 1036, 1039, 1040, 1042, 1043, 1046, 1048, 1049, 1050], "adaboostregressor": [2, 135, 399, 415, 554, 563, 941, 1035, 1036, 1039, 1042, 1043, 1046, 1048, 1049], "adam": [0, 306, 397, 862, 863, 1006, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "adamgonzo": 1047, "adamson": 1045, "adanhawth": [1041, 1042], "adapt": [86, 88, 134, 145, 146, 255, 256, 264, 344, 364, 375, 376, 385, 408, 415, 418, 516, 517, 518, 519, 677, 678, 679, 862, 863, 998, 1004, 1006, 1012, 1016, 1021, 1022, 1041, 1042, 1049, 1050], "adarsh": [1050, 1051], "add": [44, 51, 55, 58, 62, 63, 64, 68, 69, 75, 79, 87, 107, 111, 112, 116, 121, 126, 142, 145, 164, 166, 168, 170, 175, 176, 177, 181, 182, 196, 201, 202, 208, 213, 215, 216, 227, 235, 239, 243, 245, 246, 277, 279, 280, 290, 302, 312, 314, 319, 321, 322, 343, 344, 346, 347, 352, 363, 374, 375, 376, 377, 378, 380, 382, 384, 390, 394, 404, 406, 412, 415, 416, 417, 516, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 603, 628, 629, 631, 633, 659, 660, 695, 698, 822, 845, 846, 902, 939, 958, 959, 991, 992, 1001, 1008, 1012, 1015, 1016, 1022, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "add_2d_scatt": 232, "add_artist": [70, 126, 233, 255, 256, 257, 260, 261], "add_ax": [187, 236, 281], "add_categori": 249, "add_collect": [51, 235, 242], "add_dummy_featur": 2, "add_ind": [154, 182, 628, 629, 631, 992, 1042, 1045, 1049], "add_missing_valu": 182, "add_nois": 176, "add_self_request": [246, 958], "add_subplot": [46, 62, 64, 77, 97, 100, 126, 187, 227, 234, 236, 329, 330, 383], "add_trac": 140, "adddatapointbatch": 290, "addep": 1044, "addison": [591, 731], "addit": [2, 7, 37, 43, 44, 46, 51, 53, 54, 99, 103, 113, 120, 123, 126, 134, 138, 140, 141, 143, 144, 167, 175, 176, 177, 182, 186, 187, 193, 198, 202, 213, 214, 216, 236, 250, 264, 272, 279, 283, 285, 289, 310, 320, 321, 326, 331, 344, 353, 357, 359, 363, 364, 368, 369, 370, 371, 372, 375, 376, 378, 380, 381, 382, 384, 388, 390, 391, 394, 402, 407, 408, 410, 412, 413, 416, 417, 418, 419, 432, 441, 442, 444, 445, 446, 450, 457, 469, 474, 497, 504, 533, 535, 537, 538, 540, 542, 543, 544, 550, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 613, 620, 629, 631, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 671, 688, 689, 693, 699, 700, 703, 743, 759, 760, 789, 793, 798, 799, 807, 824, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 887, 897, 898, 905, 906, 943, 949, 991, 996, 998, 1002, 1003, 1005, 1006, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1028, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "addition": [86, 104, 136, 149, 186, 212, 230, 246, 320, 322, 352, 376, 388, 406, 416, 611, 612, 647, 653, 672, 882, 991, 992, 1002, 1010, 1021, 1039, 1050], "additional_nois": 75, "additive_chi2": [621, 639, 766, 775], "additive_chi2_kernel": [2, 404, 639, 760, 766, 994], "additivechi2sampl": [2, 640, 641, 642, 643, 759, 760, 994, 1047, 1049], "address": [43, 216, 246, 351, 371, 376, 407, 408, 416, 447, 658, 998, 999, 1004, 1005, 1006, 1007, 1008, 1012, 1026, 1041], "adelr": 1041, "adequ": [364, 382, 568, 1046], "adeyemi": 1051, "adher": [2, 363, 378, 390, 943, 944, 1033, 1034], "adien": 1049, "adijohar": 1047, "adil": 1048, "adimension": 186, "adithya": 1038, "aditi": 1051, "aditya": [1039, 1041, 1042, 1043, 1047, 1048], "adityadaflapurkar": 1041, "adjac": [408, 413, 452, 462, 586, 587, 636, 692, 696, 955, 999, 1005], "adjacency_matrix": 408, "adjust": [2, 43, 48, 71, 73, 82, 91, 109, 134, 146, 163, 183, 216, 239, 244, 252, 271, 287, 319, 333, 347, 352, 383, 408, 409, 413, 415, 416, 525, 554, 555, 558, 560, 562, 563, 565, 659, 660, 667, 669, 675, 676, 677, 705, 706, 709, 715, 716, 756, 758, 787, 796, 840, 841, 843, 844, 875, 897, 898, 905, 906, 907, 910, 913, 915, 937, 1001, 1002, 1006, 1012, 1023, 1030, 1033, 1039, 1049], "adjusted_mutual_info_scor": [2, 72, 73, 82, 91, 408, 706, 716, 734, 756, 758, 787, 1002, 1033, 1041, 1045, 1049], "adjusted_rand_index": 706, "adjusted_rand_scor": [2, 72, 73, 82, 91, 352, 408, 705, 716, 734, 758, 787, 1002, 1046], "administr": [394, 395], "admir": [1048, 1049], "admiss": [243, 364], "adopt": [378, 380, 388, 390, 901, 1002, 1016, 1041, 1048, 1050], "adoublet": [1048, 1049], "adpot": 325, "adrian": [1046, 1047, 1048], "adrien": 1033, "adrin": [0, 391, 397, 402, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "adrinjalali": [1036, 1045], "adult": [326, 497, 1012], "advanc": [44, 151, 183, 187, 238, 240, 270, 289, 365, 376, 408, 413, 489, 502, 536, 633, 640, 784, 798, 854, 863, 866, 885, 914, 991, 994, 1002, 1005, 1012, 1023, 1026, 1030, 1035], "advani": 1045, "advantag": [43, 44, 74, 88, 90, 120, 125, 147, 212, 213, 239, 256, 271, 289, 323, 327, 359, 390, 406, 412, 413, 416, 418, 441, 445, 460, 535, 590, 650, 675, 676, 764, 833, 834, 835, 865, 866, 905, 906, 907, 908, 909, 910, 911, 991, 994, 997, 998, 999, 1002, 1003, 1005, 1006, 1010, 1012, 1016, 1017, 1018, 1036], "advic": [384, 418, 623, 624], "advik": [1050, 1051], "advis": [52, 213, 246, 359, 376, 408, 416, 437, 647, 653, 655, 661, 663, 673, 688, 994, 998, 1004, 1006, 1017, 1047], "advoc": 1003, "aeberhard": 373, "aesthet": [310, 1018, 1038], "af": 73, "affan": 1039, "affanv14": 1040, "affect": [46, 62, 111, 149, 177, 185, 186, 216, 236, 249, 250, 273, 280, 315, 325, 359, 363, 364, 365, 372, 390, 393, 406, 408, 411, 412, 414, 416, 419, 421, 444, 450, 457, 473, 475, 479, 550, 551, 570, 700, 713, 789, 801, 804, 805, 806, 815, 819, 820, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 885, 886, 896, 910, 1001, 1005, 1017, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1051], "affili": 371, "affin": [2, 27, 71, 72, 79, 82, 88, 96, 183, 310, 331, 368, 378, 390, 413, 440, 441, 452, 454, 462, 513, 536, 692, 696, 705, 706, 718, 738, 794, 796, 901, 922, 996, 999, 1002, 1023, 1027, 1028, 1033, 1034, 1037, 1043, 1044, 1046, 1048], "affinity_matrix": [692, 696], "affinity_matrix_": [440, 452, 692], "affinity_propag": [2, 51, 79], "affinitypropag": [2, 73, 79, 323, 408, 1033, 1036, 1037, 1041, 1044, 1046, 1047, 1048, 1049, 1050], "affirm": 43, "afnlp": 1016, "afor": [897, 898], "aforement": [364, 1003], "afraid": 394, "africa": 1012, "afroj": 1050, "aft": [316, 1036], "aftab": 1042, "after": [43, 55, 58, 59, 63, 80, 86, 88, 102, 103, 107, 112, 122, 134, 144, 149, 152, 154, 157, 164, 168, 175, 177, 179, 181, 186, 191, 206, 212, 249, 250, 253, 258, 270, 279, 289, 290, 298, 300, 310, 311, 314, 315, 351, 352, 365, 371, 373, 375, 376, 378, 380, 382, 383, 384, 388, 390, 402, 404, 405, 406, 408, 409, 412, 413, 416, 417, 420, 442, 447, 450, 451, 452, 453, 456, 462, 516, 533, 537, 551, 554, 555, 560, 561, 562, 563, 598, 628, 631, 659, 660, 667, 668, 669, 674, 676, 677, 678, 679, 693, 713, 727, 757, 795, 798, 799, 804, 805, 854, 861, 865, 878, 884, 905, 910, 911, 926, 991, 992, 996, 998, 1002, 1006, 1007, 1012, 1014, 1016, 1017, 1018, 1022, 1033, 1036, 1040, 1041, 1044, 1045, 1048, 1051], "afterward": [58, 380, 536, 542, 829], "ag": [103, 168, 186, 188, 200, 202, 212, 230, 250, 251, 253, 264, 310, 322, 323, 324, 326, 371, 373, 497, 1026], "again": [43, 58, 100, 104, 146, 174, 176, 178, 186, 236, 271, 351, 359, 380, 385, 390, 391, 408, 409, 410, 415, 416, 472, 568, 569, 635, 648, 652, 654, 656, 662, 664, 666, 693, 991, 998, 1002, 1016, 1030, 1033, 1041, 1050], "against": [64, 72, 116, 129, 137, 147, 163, 191, 204, 205, 221, 229, 246, 279, 316, 319, 340, 371, 376, 391, 402, 406, 408, 412, 416, 438, 510, 543, 549, 552, 677, 679, 756, 758, 789, 803, 808, 810, 830, 834, 967, 994, 998, 1002, 1003, 1005, 1017, 1020], "agamemnon": [1040, 1041, 1042, 1043, 1045, 1046], "agarw": [1040, 1041, 1043], "agath": 1047, "agc": 178, "agct": 178, "agent": 1026, "agg": 175, "aggfunc": 281, "agglo": [84, 445], "agglom": [2, 51, 71, 72, 77, 79, 81, 89, 93, 95, 100, 183, 233, 235, 329, 330, 408, 441, 445, 503, 692, 779, 858, 1023, 1036], "agglomer": [2, 44, 68, 71, 83, 164, 166, 183, 196, 211, 248, 294, 329, 330, 368, 408, 416, 445, 503, 601, 607, 646, 801, 806, 865, 1023, 1028], "agglomerativeclust": [2, 74, 75, 76, 79, 81, 85, 89, 95, 100, 390, 408, 440, 442, 445, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1050], "aggreg": [93, 138, 230, 273, 279, 284, 323, 325, 408, 415, 417, 535, 556, 557, 595, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 1003, 1005, 1012, 1049], "aggress": [2, 47, 219, 667, 668, 804, 805, 1024, 1028, 1034], "aggressive_elimin": [804, 805, 991], "agnost": [1001, 1010, 1051], "ago": [51, 380, 1022], "agraw": [1036, 1041, 1047, 1048], "agre": [25, 163, 384, 391, 408, 787], "agreement": [0, 2, 408, 705, 717, 756, 758, 796, 1002], "agricultur": 998, "aguiar": 417, "agundez": 1041, "ahead": 889, "ahmadi": 1044, "ahmadjubair33": 1047, "ahmedbgh": [1048, 1049], "ahn": 1045, "ahuja": [1040, 1047, 1048], "ai": 412, "ai8rahim": 1036, "aic": [2, 159, 183, 192, 199, 200, 201, 207, 220, 260, 502, 652, 654, 655, 656, 657, 799, 866, 885, 991, 1023, 1033, 1040, 1046, 1047], "aic_criterion": 200, "aid": [267, 408, 793, 794, 999, 1026, 1033, 1045], "aidan": 1041, "aidar": 1047, "aig": 51, "aiko": 1048, "aim": [52, 58, 112, 149, 182, 216, 264, 298, 331, 344, 365, 371, 374, 376, 390, 402, 408, 410, 416, 448, 998, 1002, 1005, 1012, 1017, 1021, 1047], "air": [175, 765], "airport": 765, "airspe": 376, "aisha": 1051, "aishgrt1": 1041, "aishwarya": 1041, "aishwaryark": 1040, "aistat": 1015, "aivision2020": 1040, "aj": [495, 1047], "ak": [406, 1047, 1048], "aka": [2, 45, 305, 351, 388, 416, 452, 537, 539, 541, 545, 548, 582, 583, 616, 623, 652, 653, 655, 656, 657, 659, 660, 663, 667, 668, 669, 671, 677, 678, 679, 742, 872, 876, 878, 998, 1006, 1016, 1035, 1047], "akai": 1046, "akaik": [200, 202, 260, 657, 799, 991, 998], "akash": [1041, 1051], "aki": [1047, 1048, 1049], "akihiro": 1051, "akin": [43, 213, 390], "akinkunl": 1043, "akitti": 1038, "akshai": [1037, 1040, 1045], "akshay0724": 1040, "akshayah3": 1037, "akshita": 1048, "al": [0, 2, 50, 109, 110, 134, 148, 200, 303, 371, 373, 405, 408, 410, 413, 415, 416, 417, 451, 499, 520, 521, 529, 536, 542, 545, 564, 683, 684, 720, 721, 840, 842, 862, 863, 898, 948, 949, 998, 999, 1002, 1008, 1012, 1014, 1017, 1018, 1041, 1046, 1049, 1050], "ala": [1048, 1049], "aladago": 1043, "alam": [1048, 1049], "alan": [1040, 1041, 1044, 1046, 1047, 1051], "alastuei": 1036, "albeit": 62, "albert": [0, 366, 1040, 1041, 1042, 1045, 1046], "alberto": [1042, 1046, 1047, 1051], "alcalin": 373, "alcohol": [315, 373], "alcorn": 1041, "aldrian": 1037, "aleator": 52, "alec": 1043, "alejandro": [1034, 1039, 1050], "alek": [1046, 1047], "aleksandr": 1040, "aleksandra": 1044, "alemagnani": 1036, "alert": 1040, "alessandro": [1043, 1045, 1048], "alessia": 1046, "alex": [402, 416, 1017, 1033, 1036, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "alexand": [0, 398, 408, 413, 536, 871, 1035, 1036, 1037, 1039, 1040, 1041, 1045, 1046, 1047, 1050], "alexandercbooth": 1040, "alexandr": [0, 120, 391, 397, 398, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "alexandracraciun": 1045, "alexandru": 439, "alexanmv": 1047, "alexei": 1038, "alexfield": 1039, "alexgoryainov": 1043, "alexi": [1033, 1036, 1037, 1040, 1050, 1051], "alexl": [1049, 1050], "alexqiao": 1051, "alexryndin": 1041, "alexshack": [1043, 1044, 1045], "alfalfa": 57, "alfano": 1040, "alfaro": [0, 366, 1044, 1045, 1046, 1047, 1048], "alfr": 0, "algebra": [364, 374, 379, 388, 413, 416, 462, 871, 1012], "algesheim": 408, "algo": [78, 129], "algo_param": [79, 95], "algorithm": [2, 6, 8, 9, 11, 18, 28, 30, 32, 33, 38, 39, 41, 48, 53, 55, 56, 65, 71, 72, 77, 78, 80, 83, 89, 90, 91, 92, 93, 94, 95, 99, 100, 102, 110, 111, 115, 120, 122, 134, 135, 140, 150, 183, 191, 201, 202, 215, 226, 228, 234, 236, 238, 242, 243, 249, 256, 257, 258, 261, 267, 270, 279, 290, 296, 297, 299, 303, 310, 312, 315, 319, 320, 321, 324, 325, 326, 331, 333, 339, 351, 352, 353, 359, 363, 365, 369, 370, 371, 372, 373, 376, 377, 378, 379, 384, 385, 389, 390, 393, 404, 405, 408, 410, 411, 412, 413, 415, 416, 418, 419, 420, 421, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 469, 474, 475, 478, 482, 483, 484, 488, 504, 512, 513, 514, 515, 516, 523, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 554, 555, 556, 557, 560, 561, 564, 592, 604, 605, 611, 612, 636, 638, 640, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 705, 706, 709, 718, 720, 736, 738, 744, 775, 779, 780, 794, 796, 798, 799, 833, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 861, 866, 870, 872, 885, 889, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 931, 948, 949, 951, 966, 970, 976, 992, 994, 997, 999, 1000, 1001, 1002, 1004, 1007, 1008, 1012, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "algorithm_nam": 78, "ali": [1038, 1041, 1042, 1045, 1046, 1048, 1049, 1050], "alia": [52, 246, 377, 384, 390, 399, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 611, 612, 618, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 975, 1008, 1022, 1033, 1047], "alias": [80, 81, 246, 374, 376, 379, 399, 598, 1033, 1037, 1047], "aliased_sample_weight": 246, "align": [70, 147, 149, 182, 232, 255, 281, 353, 390, 690, 694, 994, 1005, 1016, 1027, 1028, 1049, 1050], "alihan": 1046, "alik": [413, 1000], "alin": 1046, "alison": 1040, "all": [0, 2, 4, 30, 43, 44, 46, 47, 50, 53, 57, 61, 62, 64, 70, 73, 74, 75, 77, 78, 85, 86, 87, 88, 93, 97, 107, 113, 120, 122, 123, 132, 139, 140, 142, 146, 149, 156, 157, 168, 175, 176, 178, 183, 185, 186, 187, 189, 193, 198, 199, 205, 206, 207, 212, 213, 214, 215, 216, 221, 223, 227, 229, 230, 232, 233, 239, 245, 246, 249, 250, 253, 256, 258, 260, 264, 268, 271, 272, 273, 274, 276, 277, 278, 280, 282, 283, 287, 290, 293, 295, 307, 310, 311, 315, 319, 320, 321, 322, 324, 325, 326, 327, 329, 331, 332, 333, 337, 340, 344, 345, 347, 348, 351, 352, 353, 356, 358, 359, 363, 364, 365, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 388, 389, 390, 391, 395, 399, 402, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 428, 430, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 504, 509, 510, 516, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 706, 710, 714, 715, 716, 717, 718, 719, 721, 722, 724, 727, 729, 730, 731, 733, 734, 736, 737, 738, 739, 743, 746, 747, 749, 751, 752, 754, 757, 762, 770, 775, 779, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 796, 798, 799, 801, 802, 803, 804, 805, 807, 808, 810, 811, 813, 815, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 927, 929, 931, 932, 933, 937, 940, 941, 942, 943, 955, 958, 964, 976, 985, 990, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "all_class": 47, "all_displai": [2, 385, 1048], "all_estim": [2, 385, 1043, 1044, 1048], "all_funct": [2, 385, 1048], "all_label": 902, "all_model": 146, "all_or_ani": [985, 1043], "all_scor": 734, "all_split": [43, 52], "all_uppercas": 416, "allan": [351, 406, 1045], "allclos": [121, 151, 1014], "allefeld": 1046, "allen": [324, 1036, 1038, 1040, 1043], "allend": [1044, 1046], "allevi": [90, 149, 193, 198, 408, 1004], "allison": 324, "alloc": [2, 42, 45, 62, 94, 183, 282, 321, 372, 376, 377, 408, 416, 443, 447, 459, 488, 537, 539, 541, 585, 589, 592, 647, 653, 661, 663, 804, 805, 807, 824, 829, 832, 991, 1012, 1021, 1023, 1027, 1028, 1037, 1038, 1043, 1044, 1050], "allow": [25, 43, 58, 89, 91, 106, 107, 124, 125, 126, 137, 138, 144, 152, 170, 175, 176, 177, 179, 201, 207, 212, 216, 230, 233, 240, 243, 250, 252, 253, 255, 264, 270, 283, 284, 289, 319, 320, 321, 322, 324, 327, 344, 345, 351, 358, 359, 363, 370, 371, 376, 377, 378, 380, 383, 384, 385, 388, 390, 391, 399, 402, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 437, 443, 444, 446, 447, 449, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 497, 524, 525, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 594, 595, 598, 604, 611, 612, 616, 628, 629, 631, 635, 636, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 689, 691, 693, 700, 743, 763, 766, 775, 779, 782, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 812, 815, 819, 822, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 855, 856, 860, 862, 863, 865, 867, 868, 870, 871, 872, 877, 884, 885, 889, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 929, 931, 932, 943, 944, 965, 991, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "allow_nan": [922, 930, 932, 1049], "allow_nd": [931, 932], "allow_non": 712, "allow_single_clust": [79, 446], "allow_unlabel": [118, 247, 524], "allowed_extens": 504, "allwein": 287, "almeida": [1034, 1035, 1046], "almeidayoel": 1047, "almer": 1040, "almost": [43, 70, 140, 145, 214, 220, 246, 249, 264, 285, 315, 327, 332, 359, 369, 371, 380, 382, 388, 389, 390, 399, 408, 412, 413, 470, 471, 472, 473, 475, 476, 477, 798, 991, 997, 998, 1001, 1002, 1017, 1041, 1046], "almubarak": [1046, 1047], "alon": [186, 216, 276, 340, 390, 406, 649, 670, 681, 1040, 1042], "along": [2, 51, 53, 89, 92, 99, 116, 141, 146, 149, 175, 201, 212, 244, 246, 274, 319, 352, 353, 359, 371, 376, 380, 384, 385, 390, 394, 399, 402, 405, 413, 415, 416, 417, 420, 534, 551, 588, 612, 613, 631, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 677, 679, 682, 683, 684, 685, 686, 687, 780, 781, 793, 801, 815, 874, 875, 878, 879, 882, 883, 884, 885, 890, 891, 892, 894, 895, 896, 927, 951, 976, 982, 991, 998, 1005, 1012, 1015, 1026, 1033, 1038, 1039, 1041, 1045, 1046], "alongsid": [376, 382, 390, 394, 417, 826, 827, 828, 829, 830, 832, 1002, 1009, 1021, 1022], "alonso": [1044, 1046], "aloqe": 1051, "alpaydin": 373, "alpha": [2, 43, 44, 46, 47, 49, 51, 52, 53, 55, 61, 63, 67, 70, 72, 75, 77, 85, 89, 93, 98, 107, 113, 116, 120, 122, 123, 125, 128, 129, 134, 136, 137, 142, 146, 149, 150, 151, 153, 154, 155, 168, 170, 173, 175, 176, 177, 178, 179, 181, 182, 186, 193, 194, 195, 196, 198, 199, 200, 201, 202, 207, 208, 210, 212, 213, 214, 216, 217, 221, 224, 225, 230, 232, 233, 236, 244, 245, 252, 255, 270, 271, 272, 273, 274, 277, 278, 280, 282, 283, 289, 290, 293, 295, 298, 300, 305, 307, 310, 311, 312, 313, 315, 317, 320, 322, 323, 326, 331, 333, 337, 338, 341, 342, 344, 345, 347, 348, 349, 351, 363, 371, 378, 382, 388, 410, 411, 413, 415, 417, 418, 420, 446, 471, 472, 478, 528, 532, 534, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 561, 596, 597, 599, 612, 614, 616, 617, 624, 632, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 688, 724, 749, 840, 841, 842, 844, 862, 863, 901, 913, 914, 915, 916, 991, 998, 1002, 1004, 1006, 1010, 1015, 1016, 1017, 1018, 1030, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1051], "alpha_": [43, 113, 159, 186, 194, 200, 202, 472, 612, 645, 646, 648, 652, 654, 656, 657, 662, 664, 674, 676, 998, 1018, 1033, 1040], "alpha_1": [645, 646, 998], "alpha_2": [645, 646, 998], "alpha_a": 202, "alpha_b": 202, "alpha_bound": [179, 624], "alpha_h": [54, 413, 539, 541, 548, 1046], "alpha_i": [1004, 1017], "alpha_init": [194, 646, 998, 1043], "alpha_max": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685], "alpha_min": [647, 648, 651, 653, 654, 655, 657, 661, 662, 663, 664, 682, 683, 684, 685], "alpha_per_target": [674, 1045], "alpha_w": [54, 413, 539, 541, 548, 1046], "alphabet": [104, 390, 723, 742], "alphalpha": 57, "alphanumer": [390, 589, 590, 592], "alphas_": [200, 202, 648, 651, 652, 654, 655, 656, 657, 662, 664, 683, 684, 1033, 1036, 1046], "alphas_enet": 201, "alphas_lar": 201, "alphas_lasso": 201, "alphas_positive_enet": 201, "alphas_positive_lar": 201, "alphas_positive_lasso": 201, "alphavantag": 51, "alphonsu": 1043, "alreadi": [2, 43, 45, 49, 88, 91, 125, 126, 134, 149, 154, 168, 186, 240, 247, 249, 252, 264, 271, 277, 290, 322, 325, 376, 377, 381, 388, 390, 406, 407, 410, 412, 414, 415, 420, 437, 492, 500, 524, 534, 568, 569, 635, 647, 650, 665, 666, 667, 668, 669, 675, 677, 678, 679, 686, 687, 769, 779, 840, 860, 868, 874, 875, 877, 882, 902, 905, 906, 934, 960, 991, 994, 1008, 1012, 1013, 1022, 1030, 1034, 1038, 1041, 1045, 1046, 1047, 1048], "alsadi": 1041, "alsaedi": 1046, "alsalhi": [0, 1036, 1037], "alsawadi": 1046, "also": [0, 2, 25, 30, 43, 46, 50, 52, 55, 57, 58, 61, 62, 63, 64, 68, 80, 86, 90, 91, 93, 97, 102, 103, 109, 111, 115, 116, 120, 127, 129, 134, 137, 140, 143, 144, 145, 146, 147, 149, 152, 154, 164, 165, 166, 168, 170, 172, 175, 182, 183, 186, 187, 188, 189, 191, 194, 195, 197, 202, 205, 206, 212, 213, 214, 216, 217, 221, 229, 230, 232, 242, 244, 246, 249, 250, 261, 264, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 283, 284, 287, 289, 290, 298, 301, 302, 303, 305, 310, 311, 312, 314, 315, 319, 320, 321, 322, 326, 327, 334, 336, 337, 338, 340, 342, 344, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 382, 384, 385, 388, 389, 390, 391, 394, 396, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 437, 438, 439, 441, 442, 445, 446, 447, 448, 450, 452, 454, 462, 463, 465, 467, 482, 484, 493, 497, 499, 504, 509, 533, 534, 536, 537, 542, 547, 550, 552, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 608, 609, 610, 611, 612, 623, 633, 634, 636, 644, 645, 646, 647, 648, 651, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 665, 673, 677, 679, 682, 685, 688, 692, 695, 696, 700, 711, 714, 717, 724, 730, 731, 739, 744, 764, 780, 781, 784, 785, 788, 798, 799, 801, 803, 804, 805, 815, 818, 821, 827, 828, 829, 830, 831, 832, 834, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 861, 862, 863, 865, 867, 868, 873, 874, 878, 882, 885, 890, 894, 907, 910, 913, 914, 915, 916, 924, 931, 949, 951, 958, 965, 991, 992, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "alt": [57, 271, 333, 351, 352, 353, 371, 384, 488], "altai": 1043, "alter": [62, 182, 378, 390, 730, 731, 739, 784, 785, 788, 1038, 1042, 1045], "altern": [43, 63, 103, 116, 141, 147, 149, 154, 188, 198, 212, 230, 240, 258, 261, 264, 279, 319, 344, 351, 352, 353, 359, 371, 374, 376, 380, 382, 388, 390, 391, 394, 402, 403, 405, 406, 408, 409, 410, 412, 413, 415, 416, 418, 441, 442, 445, 446, 447, 452, 458, 463, 500, 539, 541, 542, 548, 554, 555, 558, 559, 560, 561, 565, 566, 567, 583, 589, 590, 592, 618, 621, 644, 693, 707, 709, 772, 775, 779, 782, 803, 834, 869, 875, 878, 891, 898, 900, 913, 914, 915, 916, 968, 996, 998, 999, 1001, 1002, 1005, 1006, 1010, 1012, 1014, 1015, 1017, 1018, 1022, 1028, 1038, 1040, 1046, 1047, 1051], "alternate_sign": [47, 416, 583, 590, 1040], "although": [43, 48, 62, 141, 154, 185, 230, 239, 257, 289, 344, 359, 365, 378, 380, 384, 390, 408, 409, 413, 416, 497, 876, 1001, 1003, 1004, 1005, 1008, 1018, 1033, 1041, 1048], "altman": [629, 992], "altogeth": [143, 382, 1041], "alva": 1043, "alvaro": [1039, 1041], "alvin": 1041, "alwai": [140, 143, 146, 186, 193, 212, 230, 237, 243, 264, 273, 276, 280, 317, 337, 344, 347, 352, 359, 363, 364, 370, 374, 376, 377, 378, 382, 384, 389, 390, 394, 402, 406, 408, 409, 412, 415, 416, 417, 418, 425, 431, 443, 449, 464, 465, 467, 469, 482, 483, 484, 488, 497, 509, 510, 545, 550, 552, 553, 555, 557, 559, 560, 561, 562, 563, 565, 566, 569, 571, 582, 589, 590, 592, 595, 612, 628, 629, 631, 633, 634, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 672, 673, 674, 677, 679, 680, 696, 706, 710, 716, 722, 723, 724, 725, 733, 735, 736, 740, 783, 786, 787, 798, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 838, 839, 848, 849, 856, 857, 863, 870, 878, 883, 885, 888, 890, 891, 892, 893, 894, 895, 896, 898, 906, 907, 908, 910, 911, 913, 914, 916, 950, 960, 961, 991, 992, 994, 996, 998, 1001, 1002, 1005, 1008, 1010, 1014, 1015, 1017, 1018, 1026, 1033, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "always_accept_polici": 264, "always_reject_polici": 264, "alyssa": [1036, 1040], "alyssaq": 1039, "am": [102, 107, 111, 154, 187, 351, 381, 410, 474, 494, 1040], "amai": 1049, "aman": [1039, 1040, 1041, 1047, 1048], "amanda": [1041, 1044, 1045, 1046, 1047], "amar": [1047, 1048, 1049, 1051], "amax": 109, "amazon": 51, "amber": 390, "ambient": 236, "ambigu": [271, 381, 416, 573, 713, 949, 1005, 1042, 1044, 1046], "ambival": 93, "ambrosio": 1040, "ambroz": [1043, 1044], "amelia": 992, "amen": [382, 388, 418, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 991], "america": [50, 51, 111, 303, 371, 852, 1012], "american": [50, 51, 102, 112, 371, 408, 410, 414, 415, 416, 469, 474, 732, 885], "amerr": 1051, "ames_h": 249, "amg": [80, 99, 408, 452, 462, 692, 696, 1043, 1047, 1048], "amherst": 371, "ami": [72, 82, 91, 408, 705], "amicel": [1033, 1036], "amin": 109, "aminaka": 1037, "amit": [1033, 1047, 1048], "amlan": 1039, "amo": 1036, "amol": 1046, "among": [2, 64, 126, 178, 187, 189, 191, 212, 260, 277, 289, 358, 365, 371, 378, 390, 391, 406, 411, 447, 449, 513, 520, 795, 830, 848, 853, 855, 907, 910, 913, 914, 915, 916, 991, 994, 1002, 1003, 1009, 1012, 1017, 1018, 1033, 1039, 1040, 1043, 1050], "amongst": [51, 1018], "amor": [0, 387, 1047, 1048, 1049, 1050, 1051], "amormachin": 1036, "amort": 1005, "amount": [37, 38, 47, 51, 86, 99, 109, 112, 120, 124, 135, 137, 176, 186, 198, 216, 230, 244, 264, 283, 321, 327, 329, 332, 334, 340, 347, 353, 363, 364, 365, 388, 408, 410, 413, 415, 416, 417, 443, 454, 469, 539, 540, 542, 544, 564, 597, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 666, 682, 685, 693, 804, 805, 845, 846, 851, 886, 901, 902, 915, 916, 991, 997, 998, 1001, 1004, 1006, 1012, 1014, 1015, 1016, 1017, 1046, 1050], "amount_fraud": 264, "amount_iter": 332, "amount_label": 332, "amount_test": 264, "amount_train": 264, "amourav": 1042, "amplitud": [146, 175, 177, 207, 998], "amplitude_nois": 75, "amput": 1022, "amrcod": 1047, "amsterdam": [402, 873, 1013], "amy12xx": 1045, "amzn": 51, "an": [0, 2, 25, 29, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 62, 63, 64, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 120, 121, 122, 123, 124, 125, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 154, 157, 164, 168, 170, 171, 172, 175, 176, 177, 179, 180, 181, 183, 185, 186, 187, 188, 191, 192, 193, 194, 197, 198, 200, 201, 208, 209, 212, 213, 214, 216, 217, 219, 220, 226, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 242, 243, 244, 245, 246, 247, 249, 253, 255, 256, 258, 260, 261, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 289, 290, 293, 296, 297, 298, 301, 303, 310, 315, 316, 317, 320, 321, 322, 324, 325, 326, 327, 330, 334, 336, 337, 339, 340, 342, 343, 344, 351, 352, 353, 355, 358, 359, 363, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 389, 390, 391, 393, 394, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 429, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 576, 577, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 613, 620, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 710, 712, 713, 719, 721, 722, 728, 730, 731, 735, 736, 738, 743, 744, 746, 747, 749, 751, 752, 754, 757, 759, 760, 764, 765, 767, 768, 769, 770, 771, 774, 776, 777, 778, 779, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 928, 929, 931, 932, 934, 935, 938, 939, 943, 944, 945, 947, 948, 949, 951, 953, 954, 957, 958, 959, 960, 961, 962, 964, 965, 966, 971, 972, 975, 976, 982, 985, 987, 988, 989, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "ana": [1044, 1046, 1051], "anaconda": [0, 364, 374, 380], "anak": 1045, "analog": [43, 57, 148, 382, 415, 1002, 1003, 1017, 1042], "analogi": [1001, 1002], "analys": [232, 358, 413, 804, 805, 999, 1021, 1026], "analysen": 450, "analysi": [2, 12, 27, 44, 46, 48, 49, 55, 58, 62, 65, 71, 90, 96, 98, 109, 110, 111, 112, 113, 115, 118, 119, 121, 122, 124, 125, 128, 129, 143, 160, 182, 183, 186, 197, 202, 221, 233, 254, 256, 260, 261, 263, 264, 267, 270, 271, 275, 276, 281, 290, 291, 292, 293, 301, 302, 310, 315, 347, 352, 356, 368, 371, 373, 376, 378, 391, 405, 408, 410, 415, 416, 420, 439, 447, 448, 473, 475, 476, 482, 483, 485, 503, 505, 513, 516, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 556, 557, 632, 639, 689, 691, 692, 693, 694, 711, 720, 726, 727, 757, 789, 790, 793, 794, 798, 801, 827, 831, 847, 854, 865, 866, 871, 881, 885, 893, 920, 948, 949, 992, 998, 999, 1001, 1002, 1012, 1020, 1021, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1035, 1037, 1042], "analyst": 868, "analyt": [125, 413, 418, 533, 621, 709, 992, 996, 1002, 1020, 1026], "analyz": [43, 46, 55, 198, 272, 279, 324, 351, 353, 381, 382, 408, 416, 504, 589, 590, 592, 789, 999, 1002, 1009, 1010, 1018, 1033, 1042], "anam": 1050, "anand": [1041, 1045], "ananiad": 1016, "anantharam": 1047, "anavelyz": 1046, "ana\u00ebl": 1043, "anbari": 529, "anchor": 281, "ander": [1037, 1043], "andersen": [744, 1047], "anderson": [50, 303, 371, 499, 1039, 1045, 1051], "andi": [1033, 1040], "ando": 1038, "andr": [1040, 1047], "andrea": [0, 391, 397, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "andreh7": 1040, "andrei": [1048, 1050, 1051], "andrew": [408, 462, 692, 696, 718, 738, 796, 880, 1006, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "andrewww": 1041, "andrii": 1047, "andriushchenko": [1039, 1040], "androutsopoulo": [840, 1004], "andrzej": [539, 541, 548], "andr\u00e1": [1046, 1047, 1048, 1049], "andr\u00e9": [1046, 1047, 1049], "ands": 876, "andyscanzio": 1050, "ang": 1040, "angel": [0, 398], "angela": [1043, 1044, 1048], "angelaambroz": 1044, "angermuel": [1037, 1038], "angl": [2, 53, 70, 123, 168, 255, 256, 257, 260, 261, 373, 413, 532, 538, 540, 543, 544, 546, 547, 549, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 679, 683, 684, 685, 686, 687, 693, 999, 1000, 1024, 1028, 1033], "angmar": 57, "angu": [1040, 1041, 1047], "angular": [414, 693, 765], "anh": [539, 541, 548], "ani": [2, 25, 37, 43, 47, 48, 52, 53, 57, 79, 80, 88, 90, 100, 151, 163, 168, 176, 177, 185, 186, 187, 188, 189, 202, 212, 216, 230, 239, 242, 243, 246, 256, 260, 261, 264, 270, 271, 273, 276, 279, 287, 303, 310, 311, 314, 319, 321, 322, 324, 327, 340, 344, 353, 359, 363, 364, 365, 370, 371, 373, 374, 376, 378, 380, 381, 382, 384, 389, 390, 391, 394, 396, 399, 402, 404, 405, 406, 408, 409, 412, 413, 414, 415, 416, 417, 433, 440, 446, 448, 449, 450, 452, 454, 456, 457, 461, 464, 467, 488, 489, 509, 510, 524, 535, 538, 540, 547, 552, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 580, 581, 583, 589, 590, 592, 594, 604, 611, 612, 621, 628, 633, 634, 646, 649, 659, 660, 667, 668, 669, 670, 677, 678, 679, 680, 681, 693, 697, 700, 701, 705, 717, 718, 720, 725, 737, 738, 753, 756, 758, 775, 779, 780, 781, 782, 793, 794, 796, 801, 804, 805, 813, 814, 834, 837, 845, 846, 851, 855, 864, 865, 869, 870, 874, 876, 878, 879, 886, 895, 896, 899, 902, 905, 906, 913, 914, 915, 916, 917, 919, 927, 931, 932, 938, 971, 985, 991, 992, 994, 997, 998, 999, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1025, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "aniket": [1048, 1050], "anil": [408, 452, 462], "anim": [351, 416], "anirban": 416, "aniruddha": 1041, "anish": [1038, 1039], "anisha": 1043, "aniso": [79, 95], "anisotrop": [90, 172, 418, 618, 620, 623], "anisotropicli": [79, 95], "anjirbag": 1041, "ankan": 1038, "ankerst": [408, 450, 457], "ankit": [1036, 1043, 1045, 1047], "ankit810": 1044, "ankita": 1041, "ankur": [1038, 1049], "ann": [1033, 1045, 1047], "anna": 1041, "annaayzenshtat": 1041, "annal": [168, 198, 200, 373, 415, 474, 517, 518, 519, 560, 561, 657, 998], "annau": 1046, "annegnx": 1049, "anno": [693, 999], "annoi": 364, "annot": [2, 43, 48, 63, 156, 166, 191, 233, 274, 277, 351, 376, 377, 378, 408, 717, 919, 1002, 1018, 1042], "annotationbbox": 233, "announc": [0, 319, 320, 321, 322, 323, 324, 325, 326, 327, 380], "annual": [373, 408, 727, 757, 902, 1002, 1015], "anomali": [14, 48, 111, 150, 183, 226, 238, 249, 296, 297, 371, 469, 513, 523, 564, 640, 678, 851, 866, 909, 1008, 1021, 1023, 1039, 1040], "anomaly_algorithm": 239, "anomaly_frac": 249, "anoth": [43, 72, 120, 125, 134, 144, 148, 168, 170, 178, 182, 186, 202, 216, 220, 237, 239, 246, 250, 256, 264, 270, 272, 273, 276, 280, 284, 300, 351, 353, 355, 359, 363, 365, 370, 371, 374, 376, 378, 382, 388, 390, 402, 405, 408, 412, 413, 415, 416, 417, 419, 442, 444, 452, 455, 462, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 509, 539, 541, 548, 674, 677, 693, 710, 720, 807, 823, 824, 864, 865, 886, 991, 992, 997, 998, 999, 1002, 1003, 1005, 1008, 1012, 1016, 1017, 1042, 1043, 1050], "anova": [2, 49, 87, 106, 162, 164, 167, 168, 183, 335, 409, 445, 505, 516, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 714, 827, 831, 865, 866, 885, 905, 910, 1017, 1023], "anova__percentil": [87, 343], "anova_filt": 165, "anova_svm": 165, "ansam": 1049, "answer": [159, 185, 270, 376, 388, 402, 407, 727, 757, 1002, 1026], "ant": [719, 755, 1002], "anthoni": [1038, 1040, 1041], "anthony22": [1048, 1049], "anti": [198, 359, 607, 840, 1004], "anti_alias": [80, 81], "anticip": 52, "antoin": [1033, 1035, 1036, 1037, 1040], "antoni": [1037, 1039, 1045, 1048], "antonin": 1040, "antonio": [1041, 1043], "anubhav": 1041, "anuja": 1043, "anulekh": 1048, "anupam": [899, 1014, 1048], "any_method": 961, "anymor": [149, 188, 212, 272, 319, 320, 340, 359, 380, 409, 428, 671, 1039, 1042, 1045, 1046, 1047, 1049, 1050], "anyon": [376, 391, 407, 1025, 1026], "anyth": [353, 382, 390, 399, 409, 412, 961, 965, 1047], "anywai": [48, 351, 378, 666, 686, 687], "anywher": 311, "anz": 1034, "aoif": [709, 1002], "ap": [2, 277, 708, 709, 1002], "apart": [186, 322, 340, 388, 390, 399, 409, 411, 417, 726, 1017, 1026, 1041], "api": [0, 51, 83, 89, 131, 183, 238, 240, 246, 250, 251, 267, 272, 279, 280, 290, 326, 327, 352, 353, 365, 369, 370, 376, 379, 380, 385, 386, 388, 389, 391, 394, 402, 407, 413, 415, 416, 418, 422, 425, 426, 427, 430, 432, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 505, 509, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 564, 565, 567, 568, 569, 570, 571, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 659, 672, 678, 689, 690, 691, 692, 693, 703, 798, 799, 804, 805, 807, 824, 831, 849, 851, 853, 854, 857, 861, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 903, 909, 910, 924, 943, 944, 967, 985, 991, 1000, 1001, 1002, 1005, 1012, 1016, 1021, 1022, 1023, 1026, 1028, 1030, 1031, 1032, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1052], "api_refer": 376, "apk": 394, "apostolo": 1048, "appar": [115, 1004, 1026], "appdata": 394, "appeal": 391, "appear": [0, 47, 80, 137, 186, 189, 265, 267, 268, 296, 297, 305, 307, 311, 330, 344, 351, 352, 353, 371, 374, 376, 381, 390, 410, 413, 488, 489, 556, 568, 569, 580, 611, 628, 629, 631, 698, 701, 703, 713, 717, 719, 783, 790, 802, 819, 840, 841, 842, 843, 844, 907, 910, 951, 998, 1004, 1008, 1033, 1041, 1045, 1046], "append": [46, 47, 48, 51, 52, 55, 62, 69, 72, 75, 79, 83, 94, 103, 127, 137, 138, 140, 144, 146, 149, 182, 189, 206, 216, 217, 219, 220, 227, 230, 244, 245, 270, 273, 279, 280, 305, 306, 316, 332, 340, 343, 351, 352, 353, 355, 358, 382, 390, 409, 416, 659, 660, 905, 906, 912, 939, 1012], "appendix": [646, 677, 998, 1012], "appl": [51, 363, 374, 388, 1003], "appli": [2, 32, 48, 54, 57, 62, 64, 68, 75, 79, 80, 81, 88, 89, 91, 95, 103, 107, 116, 120, 121, 126, 128, 130, 139, 140, 144, 146, 164, 170, 186, 188, 198, 202, 216, 217, 226, 232, 233, 234, 239, 244, 246, 270, 271, 273, 282, 283, 284, 289, 299, 310, 314, 315, 320, 340, 344, 353, 358, 359, 363, 368, 376, 378, 380, 384, 388, 389, 390, 399, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 440, 446, 452, 462, 464, 465, 467, 469, 474, 482, 483, 484, 485, 509, 510, 517, 518, 519, 525, 532, 533, 534, 535, 536, 538, 540, 542, 543, 544, 549, 550, 551, 554, 555, 558, 559, 560, 561, 565, 566, 567, 589, 590, 591, 592, 628, 633, 634, 639, 640, 642, 643, 659, 660, 669, 677, 678, 679, 692, 700, 702, 708, 712, 727, 757, 759, 760, 782, 789, 793, 794, 801, 815, 831, 834, 840, 841, 842, 843, 844, 854, 864, 865, 874, 881, 882, 885, 890, 891, 893, 894, 895, 896, 901, 912, 913, 914, 915, 916, 926, 931, 937, 941, 948, 949, 973, 992, 994, 998, 999, 1000, 1001, 1002, 1004, 1006, 1008, 1010, 1012, 1016, 1017, 1018, 1019, 1020, 1026, 1034, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047], "applic": [42, 44, 57, 82, 88, 111, 183, 191, 212, 229, 234, 263, 264, 273, 310, 327, 363, 365, 371, 373, 376, 382, 384, 385, 388, 390, 406, 407, 408, 412, 413, 414, 415, 418, 420, 444, 446, 452, 497, 533, 534, 535, 554, 555, 630, 689, 690, 691, 695, 713, 730, 731, 739, 784, 785, 788, 831, 925, 991, 998, 999, 1000, 1001, 1002, 1006, 1008, 1014, 1018, 1021, 1022, 1023, 1025, 1026, 1033, 1034, 1039, 1041, 1044], "apply_along_axi": 308, "appr": 620, "appreci": [0, 376, 388], "approach": [44, 47, 91, 96, 99, 124, 168, 170, 181, 186, 189, 196, 200, 212, 214, 220, 230, 232, 264, 287, 316, 344, 351, 352, 353, 365, 375, 376, 382, 385, 390, 394, 396, 402, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 437, 443, 446, 448, 452, 462, 521, 533, 583, 590, 612, 636, 659, 660, 675, 676, 834, 850, 949, 991, 992, 998, 999, 1002, 1003, 1005, 1006, 1012, 1016, 1017, 1020, 1021, 1026, 1037, 1049], "appropri": [25, 88, 90, 127, 175, 186, 216, 246, 279, 284, 327, 355, 359, 376, 378, 384, 390, 402, 406, 408, 412, 414, 415, 419, 444, 450, 457, 489, 490, 491, 497, 501, 502, 503, 505, 506, 511, 578, 583, 592, 593, 596, 597, 599, 600, 601, 673, 675, 688, 710, 847, 848, 849, 851, 853, 855, 856, 857, 985, 998, 1001, 1002, 1012, 1037, 1040, 1046, 1049, 1051], "approv": [376, 391, 415], "approx": [64, 120, 244, 413, 415, 416, 1002, 1009, 1016], "approxim": [0, 2, 23, 43, 44, 64, 69, 80, 86, 111, 124, 125, 129, 138, 145, 146, 168, 171, 186, 194, 212, 213, 226, 230, 234, 237, 238, 239, 242, 245, 261, 270, 275, 285, 291, 292, 299, 310, 312, 313, 315, 319, 322, 351, 353, 357, 359, 368, 373, 385, 388, 390, 405, 406, 409, 411, 412, 413, 415, 418, 420, 421, 422, 432, 449, 469, 470, 473, 474, 475, 476, 482, 483, 484, 491, 497, 503, 522, 525, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 560, 561, 583, 590, 611, 612, 620, 639, 640, 641, 642, 643, 646, 658, 659, 660, 673, 675, 677, 678, 680, 688, 693, 759, 760, 765, 798, 802, 819, 826, 830, 831, 845, 846, 849, 853, 855, 856, 857, 861, 865, 866, 871, 875, 877, 878, 882, 894, 905, 910, 911, 948, 949, 975, 995, 996, 997, 998, 999, 1001, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1017, 1018, 1021, 1022, 1023, 1028, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047], "approximate_nearest_neighbor": [290, 1023], "approximateident": 1034, "april": [371, 665, 686, 687, 1002, 1037, 1045, 1050], "apriori": 230, "apt": [374, 384, 394], "aptitud": 186, "aqua": 279, "aquantitypredict": 396, "ar": [0, 2, 16, 25, 30, 31, 32, 37, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 68, 70, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 97, 99, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 122, 125, 126, 127, 130, 132, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 164, 165, 167, 168, 170, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 212, 213, 214, 216, 221, 223, 230, 232, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 253, 256, 257, 258, 260, 263, 265, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 295, 296, 300, 303, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 338, 340, 342, 344, 347, 348, 351, 352, 353, 355, 357, 358, 359, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 390, 391, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 428, 429, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 509, 510, 511, 513, 516, 517, 518, 519, 520, 521, 524, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 710, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 749, 751, 752, 754, 755, 757, 758, 762, 763, 764, 766, 768, 769, 770, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 813, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 927, 928, 929, 931, 932, 935, 936, 937, 941, 943, 944, 948, 949, 950, 953, 954, 955, 957, 958, 961, 964, 965, 967, 972, 975, 976, 980, 981, 982, 985, 987, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "arab": 628, "arabi": [408, 706, 716, 787], "aradwad": 1044, "arafat": 1039, "arai": 1043, "arang": [43, 50, 52, 53, 75, 91, 93, 98, 105, 110, 111, 127, 130, 142, 143, 145, 147, 148, 152, 156, 164, 170, 172, 177, 178, 181, 182, 189, 198, 212, 215, 217, 221, 235, 242, 244, 265, 270, 273, 278, 281, 289, 290, 303, 305, 312, 322, 329, 330, 332, 334, 340, 346, 351, 353, 357, 358, 359, 388, 405, 412, 416, 465, 545, 831, 880, 884, 997, 998, 1006, 1012, 1016], "aravindh": 1048, "arbitarili": 351, "arbitrari": [2, 43, 52, 88, 116, 120, 121, 122, 139, 177, 193, 212, 229, 230, 268, 310, 314, 316, 321, 327, 351, 358, 376, 388, 390, 402, 409, 412, 413, 415, 416, 420, 446, 450, 455, 457, 465, 533, 534, 560, 561, 582, 640, 649, 670, 681, 689, 743, 790, 802, 803, 808, 810, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 869, 871, 884, 991, 993, 994, 998, 999, 1002, 1005, 1012, 1022, 1033, 1034, 1037, 1039, 1040, 1041, 1043, 1047, 1049], "arbitrarili": [171, 256, 261, 351, 390, 418, 431, 465, 482, 483, 484, 553, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 679, 680, 681, 722, 723, 724, 725, 747, 786, 790, 838, 839, 848, 856, 863, 886, 906, 908, 911, 914, 916, 1002, 1005, 1012, 1018], "arc": [373, 415], "archana": [1043, 1045], "archit": 1039, "architectur": [374, 378, 384, 388, 394, 402, 468, 903, 1006, 1026, 1033, 1050], "archiv": [47, 287, 370, 371, 373, 374, 408, 442, 501, 503, 511, 759, 760, 1000, 1017], "archive_filenam": 47, "archive_path": 47, "archive_sha256": 47, "arci": [709, 1002], "arcidiacono": [1047, 1048, 1050, 1051], "arcsin": [700, 765], "arctan": [70, 256, 261, 372, 519], "arctan2": [255, 257, 260], "ard": [2, 193, 645, 646], "ard_poli": 193, "ard_scor": 193, "ardregress": [2, 193, 198, 646, 941, 998, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1049, 1050], "area": [2, 50, 52, 150, 168, 212, 230, 249, 267, 270, 277, 279, 280, 340, 344, 345, 348, 373, 376, 380, 388, 408, 416, 703, 707, 708, 709, 789, 790, 999, 1002, 1005, 1020, 1035], "aren": [16, 246, 351, 371, 380, 394, 727, 757, 1007, 1043, 1045], "arezki": 1033, "arfa": 1039, "arff": [324, 376, 497, 1045, 1048, 1049], "arg": [246, 306, 344, 377, 390, 413, 415, 422, 700, 869, 967, 969, 998, 1004, 1005], "arg_sort_bi": 52, "argentina": 765, "argmax": [63, 127, 269, 283, 378, 415, 570, 833, 913, 1017, 1046], "argmin": [51, 145, 269, 378, 410, 532, 538, 546, 547, 686, 780, 781, 1018], "argpartit": 1040, "argsort": [54, 55, 57, 58, 59, 145, 147, 188, 189, 212, 230, 319, 329, 330, 351, 352, 371, 1010], "argument": [2, 104, 147, 189, 213, 240, 243, 246, 319, 364, 370, 371, 376, 377, 379, 381, 382, 384, 385, 388, 390, 408, 409, 412, 413, 415, 417, 419, 420, 422, 426, 430, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 457, 459, 461, 463, 464, 468, 469, 494, 497, 504, 509, 534, 536, 537, 539, 541, 552, 560, 561, 564, 568, 569, 570, 571, 578, 582, 583, 589, 590, 592, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 632, 640, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 667, 669, 677, 678, 682, 685, 689, 693, 697, 699, 700, 701, 702, 703, 715, 720, 736, 743, 764, 780, 781, 807, 824, 826, 827, 828, 829, 830, 832, 833, 834, 837, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 862, 865, 869, 903, 909, 919, 929, 939, 944, 968, 970, 971, 985, 991, 994, 998, 999, 1000, 1002, 1005, 1009, 1010, 1017, 1018, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051], "argv": 243, "ari": [72, 91, 352, 408, 706, 1038, 1044], "aria": [1041, 1042, 1048], "aric": 55, "arida": [1042, 1043, 1045, 1047, 1050], "ariel": [45, 371, 1033, 1039], "arif": 1051, "ariga": 1039, "arik": 1041, "arima": 1021, "aris": [2, 186, 273, 347, 364, 381, 384, 408, 716, 998, 999, 1045], "arisa": [1047, 1048], "arithmet": [245, 382, 384, 408, 552, 649, 670, 681, 705, 718, 737, 738, 758, 796, 852, 1002, 1041], "ari\u00f1o": 1036, "arjona": 1042, "arka204": [1046, 1048], "arm": [374, 376, 384, 991], "arm64": [374, 379], "arm64v8": 384, "armstrong": 1045, "arnaud": [0, 398, 1034, 1035, 1036, 1037, 1038, 1039, 1051], "arnaudov": [1045, 1047], "arnaudstiegl": 1043, "arnold": [1033, 1034], "arnoldi": [689, 690, 694], "aroma": 316, "arora": [1041, 1048], "around": [0, 43, 63, 72, 85, 115, 134, 137, 146, 176, 187, 191, 246, 249, 264, 273, 284, 308, 329, 331, 332, 340, 343, 344, 351, 352, 353, 358, 359, 371, 373, 376, 382, 388, 396, 407, 408, 412, 413, 416, 471, 472, 516, 545, 621, 641, 650, 669, 705, 743, 798, 807, 824, 851, 853, 855, 856, 857, 885, 998, 999, 1001, 1002, 1008, 1012, 1016, 1021, 1022, 1025, 1026, 1037, 1038], "arpack": [51, 57, 79, 80, 99, 102, 233, 326, 413, 451, 452, 453, 462, 536, 542, 545, 689, 690, 692, 694, 696, 999, 1039, 1040, 1045, 1049, 1050, 1051], "arpanchowdhri": 1043, "arr": 327, "arrai": [2, 45, 46, 47, 49, 50, 51, 52, 53, 57, 68, 69, 70, 75, 79, 80, 86, 87, 94, 95, 97, 102, 104, 112, 115, 118, 121, 122, 145, 147, 149, 150, 153, 156, 165, 168, 171, 172, 173, 178, 186, 193, 195, 198, 206, 207, 212, 213, 219, 229, 233, 234, 239, 243, 246, 249, 250, 253, 255, 256, 257, 259, 260, 264, 265, 266, 268, 270, 271, 274, 275, 279, 289, 303, 313, 319, 322, 323, 325, 326, 330, 336, 343, 344, 351, 357, 359, 363, 364, 369, 370, 371, 376, 377, 378, 379, 381, 382, 384, 386, 388, 389, 390, 402, 405, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 516, 520, 524, 525, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 582, 583, 584, 585, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 924, 927, 928, 929, 930, 931, 932, 933, 936, 937, 947, 948, 949, 950, 951, 953, 955, 956, 963, 964, 965, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 990, 992, 997, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1026, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "arrang": [2, 58, 289, 633, 836, 837, 838, 839, 1002], "array_api": 404, "array_api_compat": 404, "array_api_dispatch": [404, 468, 903], "array_api_support": [404, 924], "array_convert": 932, "array_equ": [570, 1040], "array_lik": 947, "array_paramet": 376, "array_sym": 987, "arrayfunc": [2, 385, 928], "arrow": [63, 396, 1047], "arrow_arg": 48, "arrowprop": [48, 63], "arrowstyl": 48, "arroyo": 1047, "art": [321, 382, 650, 693, 1026], "artem": [1037, 1040, 1050], "arth": 1047, "arthur": [408, 447, 460, 1038, 1039, 1040, 1041, 1042, 1045, 1047], "arthurmello": 1047, "articl": [0, 55, 102, 351, 371, 375, 376, 384, 412, 421, 475, 706, 998, 1002, 1046], "artiem": 1041, "artifact": [43, 53, 80, 81, 310, 365, 380, 1028], "artifici": [10, 141, 143, 151, 168, 182, 216, 232, 245, 264, 308, 351, 371, 372, 373, 381, 405, 408, 412, 413, 536, 697, 835, 862, 863, 995, 999, 1001, 1003, 1009, 1014, 1018, 1022, 1026, 1033], "artist": [240, 383, 438, 633, 699, 701, 702, 703, 807, 824, 919], "artsiom": 1040, "artsion": 1039, "artstein": 717, "artur": [1048, 1049], "arturo": [0, 387, 1047, 1048, 1049, 1050, 1051], "arturoamor": 1047, "aruku": [1041, 1042], "arunav": 1044, "arunava": 1041, "arxiv": [376, 462], "arya": 1041, "as_float_arrai": [2, 385], "as_fram": [43, 44, 103, 107, 126, 140, 143, 149, 154, 175, 186, 187, 188, 189, 200, 202, 212, 220, 228, 230, 249, 253, 264, 284, 287, 290, 293, 307, 315, 316, 319, 321, 323, 324, 370, 371, 489, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 1043, 1044, 1045, 1046, 1049], "asanyarrai": 378, "asarrai": [47, 55, 212, 230, 308, 331, 351, 352, 378, 390, 404, 727, 757, 853, 855, 856, 857, 1012, 1017, 1050], "ascend": [58, 103, 188, 316, 415, 450, 456, 595, 628, 636, 917, 918, 919, 1016, 1043, 1049], "ascent": [175, 418], "ascii": [50, 303, 416, 487, 589, 590, 592], "ascontiguousarrai": 542, "asctim": 120, "aseem": 1040, "asgd": [219, 1016], "ash": [48, 373, 1036, 1039], "ashah002": [1048, 1049, 1050], "ashim": 1043, "ashimb9": 1043, "ashimin": 1046, "ashish": [1046, 1049], "ashra": 645, "ashutosh": [1040, 1041, 1043, 1045], "ashvith": 1046, "ashwin": [1048, 1049], "asia": [270, 1012], "asian": 416, "asid": [144, 220, 402, 560, 561, 562, 563, 667, 668, 669, 677, 679, 862, 863], "asish": [1039, 1040], "ask": [0, 181, 182, 270, 375, 376, 380, 381, 384, 390, 391, 402, 417, 847, 848, 849, 851, 853, 855, 856, 857, 1025, 1049], "asnt": 1039, "aspect": [46, 91, 116, 120, 174, 187, 232, 239, 279, 284, 299, 363, 364, 365, 376, 390, 391, 408, 491, 659, 660, 991, 1018, 1026, 1050], "aspir": [168, 373, 376], "ass": [111, 112, 410, 474], "assembl": [289, 317, 353, 865], "assert": [47, 55, 121, 243, 270, 279, 364, 379, 1022], "assert_all_finit": [2, 363, 385, 468], "assert_allclos": 378, "assert_array_equ": 416, "assert_warn": 1046, "assert_warns_messag": 1046, "assertionerror": 1040, "assess": [44, 52, 72, 93, 134, 144, 146, 186, 212, 230, 249, 266, 267, 269, 273, 406, 415, 702, 744, 1001, 1002, 1008, 1022, 1048], "assia": 1042, "assiaben": 1042, "assign": [47, 55, 58, 70, 72, 80, 82, 90, 91, 93, 134, 139, 150, 152, 164, 166, 172, 225, 230, 239, 244, 247, 264, 305, 312, 317, 327, 334, 347, 352, 371, 376, 378, 390, 405, 412, 413, 415, 416, 417, 418, 440, 441, 442, 443, 445, 446, 447, 448, 449, 452, 454, 456, 459, 460, 461, 462, 516, 537, 562, 563, 594, 595, 608, 609, 611, 659, 660, 667, 668, 669, 677, 678, 679, 705, 706, 716, 717, 718, 720, 721, 730, 731, 732, 739, 740, 744, 756, 758, 784, 785, 787, 788, 794, 795, 796, 801, 804, 805, 807, 810, 815, 824, 826, 827, 828, 829, 832, 849, 855, 857, 858, 859, 872, 900, 901, 905, 906, 907, 908, 909, 910, 911, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1012, 1015, 1026, 1033, 1038, 1040, 1041, 1050, 1051], "assign_label": [80, 408, 452, 462], "assist": [0, 376, 388, 407, 1012, 1025, 1026], "associ": [50, 61, 62, 111, 134, 170, 185, 186, 216, 258, 264, 316, 329, 331, 351, 384, 408, 410, 412, 413, 415, 416, 426, 446, 449, 469, 470, 471, 472, 473, 474, 475, 476, 494, 495, 496, 525, 558, 562, 565, 606, 607, 631, 646, 659, 660, 667, 669, 675, 676, 677, 690, 696, 700, 732, 740, 823, 828, 848, 856, 870, 882, 894, 902, 911, 913, 915, 937, 1001, 1002, 1005, 1012, 1015, 1026, 1033, 1045, 1049], "assum": [48, 70, 88, 90, 177, 182, 185, 186, 202, 212, 230, 239, 242, 249, 261, 270, 279, 310, 347, 353, 364, 375, 376, 378, 382, 388, 389, 390, 393, 402, 405, 406, 408, 410, 412, 413, 415, 416, 418, 419, 424, 429, 437, 439, 444, 446, 450, 457, 463, 469, 470, 471, 472, 473, 474, 475, 476, 504, 509, 510, 533, 543, 549, 550, 562, 563, 568, 569, 588, 589, 590, 592, 621, 633, 644, 645, 647, 648, 653, 659, 660, 661, 662, 663, 667, 668, 669, 672, 673, 677, 678, 679, 682, 686, 688, 689, 693, 710, 723, 727, 736, 742, 757, 765, 770, 775, 779, 782, 801, 804, 805, 815, 841, 847, 848, 851, 853, 855, 856, 861, 872, 885, 961, 977, 978, 979, 992, 996, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1012, 1016, 1018, 1039, 1045], "assume_cent": [69, 110, 410, 421, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "assume_finit": [363, 364, 468, 903], "assumpt": [32, 43, 48, 52, 62, 64, 71, 78, 109, 110, 123, 175, 179, 183, 185, 212, 239, 266, 289, 310, 382, 388, 389, 393, 406, 408, 410, 412, 413, 416, 418, 447, 451, 453, 488, 504, 513, 533, 535, 542, 651, 655, 799, 801, 804, 805, 815, 842, 897, 898, 996, 998, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1012, 1015, 1018, 1023, 1040, 1046], "assur": [0, 390, 798, 799, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "astel": 1041, "astolfi": 1033, "astrai": 390, "astroml": 1021, "astronom": 1020, "astronomi": 1021, "astropi": 376, "astyp": [43, 53, 72, 76, 79, 86, 93, 95, 99, 112, 143, 145, 161, 185, 187, 203, 204, 230, 235, 245, 249, 264, 281, 290, 317, 402, 416, 992, 998, 1040], "asv": 376, "asv_benchmark": 376, "aswathavicki": 1051, "asymmetr": [146, 214, 390, 1038], "asymmetri": [214, 351], "asymptot": [109, 110, 202, 363, 410, 474, 537, 731, 998, 1001, 1043], "atag": 178, "atariah": 1042, "ateif": 1046, "atharva": 1047, "atheism": [57, 271, 333, 351, 352, 353, 371, 488], "atheist": 351, "athena": 1026, "ation": 416, "atla": [363, 374], "atleast_2d": [146, 378], "atmospher": 175, "atol": [378, 673, 675, 845, 846, 850], "atom": [123, 129, 413, 532, 538, 540, 543, 544, 546, 547, 654, 664, 685, 998, 1033, 1046], "atomic_benchmark": 49, "atomic_benchmark_estim": 49, "atomic_runtim": 49, "atsushi": [1045, 1046], "attach": [47, 351, 433, 850, 1034, 1044], "attack": [249, 371], "attalla": 1047, "attard": 1046, "attempt": [43, 87, 187, 218, 265, 351, 363, 375, 390, 408, 420, 446, 450, 457, 464, 468, 632, 689, 690, 694, 819, 847, 848, 849, 851, 853, 855, 856, 857, 883, 885, 903, 931, 932, 998, 999, 1005, 1018, 1040, 1045, 1050], "attenberg": 416, "attent": [384, 608, 609, 1016], "attenu": 170, "attia": 798, "attr": [47, 89], "attract": [419, 444, 996, 1005, 1021], "attractador": [1040, 1041], "attrgett": [594, 598], "attribut": [2, 47, 62, 68, 82, 103, 128, 132, 134, 141, 144, 164, 168, 212, 220, 246, 260, 268, 269, 274, 282, 299, 303, 322, 344, 353, 358, 365, 369, 370, 371, 373, 376, 379, 383, 388, 402, 405, 406, 408, 409, 410, 411, 413, 415, 416, 417, 418, 423, 424, 425, 426, 427, 430, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 581, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 618, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 737, 796, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 920, 922, 962, 985, 990, 994, 996, 998, 1003, 1005, 1006, 1008, 1012, 1015, 1016, 1017, 1018, 1026, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "attributeerror": [409, 560, 578, 962, 1042, 1043, 1045, 1049, 1050], "attrselect": 1033, "atukorala": 1048, "atuo": [1049, 1050], "aubert": 1040, "auc": [2, 50, 62, 168, 212, 230, 249, 267, 270, 274, 277, 279, 280, 326, 406, 703, 709, 789, 1002, 1038, 1041, 1045], "auc_scor": [1033, 1035], "audio": [370, 504], "audrei": 1051, "aufarkari": 1047, "aug": 1017, "augment": [2, 332, 631, 887, 1010, 1026], "augspurg": [1041, 1043], "august": [168, 373, 408, 512, 535, 1017, 1033, 1035, 1036, 1040, 1047], "aura": 1045, "auroc": 1002, "aur\u00e9lien": [1040, 1041, 1042, 1046, 1047], "austin": 1040, "australian": [149, 394], "author": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 376, 379, 384, 388, 390, 391, 412, 451, 535, 872, 994, 1021, 1036], "authorit": 391, "authorship": 380, "auto": [57, 69, 90, 91, 118, 168, 174, 197, 232, 237, 251, 290, 293, 298, 319, 320, 321, 322, 323, 324, 327, 336, 337, 343, 346, 353, 370, 371, 378, 415, 418, 419, 441, 444, 445, 446, 447, 449, 450, 452, 455, 456, 457, 459, 462, 497, 509, 510, 536, 539, 541, 542, 545, 548, 550, 558, 559, 562, 563, 564, 565, 566, 568, 594, 595, 598, 603, 608, 609, 630, 632, 633, 634, 636, 647, 648, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 673, 674, 675, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 703, 800, 804, 805, 823, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 862, 863, 878, 879, 886, 897, 898, 902, 905, 906, 907, 908, 909, 910, 911, 915, 916, 948, 949, 967, 970, 993, 996, 998, 999, 1005, 1012, 1021, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "auto_examples_jupyt": 183, "auto_examples_python": 183, "auto_viml": 1045, "auto_wrap_output_kei": 378, "autoclass": 373, "autocorrel": 412, "autolabel": 47, "autom": [271, 379, 380, 394, 693, 991, 998, 999, 1002, 1021, 1026], "automat": [2, 43, 47, 51, 52, 64, 80, 96, 98, 103, 127, 149, 159, 167, 193, 215, 255, 256, 264, 268, 271, 310, 317, 320, 324, 333, 342, 344, 364, 371, 374, 376, 378, 380, 384, 390, 394, 402, 404, 408, 409, 410, 413, 415, 416, 417, 432, 450, 452, 456, 462, 464, 465, 467, 497, 500, 516, 539, 541, 542, 548, 550, 552, 558, 562, 565, 584, 589, 592, 595, 603, 644, 646, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 667, 668, 669, 673, 675, 676, 677, 679, 682, 685, 688, 689, 692, 696, 803, 818, 821, 831, 841, 862, 863, 866, 867, 869, 878, 879, 886, 897, 898, 905, 906, 907, 910, 913, 915, 919, 937, 972, 975, 990, 991, 993, 996, 1001, 1006, 1012, 1016, 1018, 1021, 1022, 1033, 1036, 1037, 1038, 1044, 1047, 1048, 1049, 1050, 1051], "automl": [1002, 1021], "automobil": 1026, "autoregress": 371, "autoviml": 1021, "autoviz": 1045, "auxiliari": [182, 327, 374, 1026, 1048], "av": 1041, "avail": [0, 2, 44, 50, 51, 53, 76, 89, 90, 123, 126, 145, 149, 168, 170, 175, 179, 185, 186, 187, 202, 212, 220, 230, 233, 246, 249, 264, 267, 268, 273, 274, 277, 284, 295, 296, 297, 303, 315, 319, 320, 321, 322, 324, 325, 332, 334, 359, 363, 370, 371, 373, 374, 375, 376, 377, 380, 381, 385, 389, 390, 394, 402, 405, 408, 409, 412, 413, 414, 415, 416, 417, 419, 447, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 509, 536, 550, 556, 557, 558, 559, 560, 561, 565, 566, 568, 569, 570, 571, 594, 595, 603, 611, 612, 628, 633, 634, 648, 652, 654, 656, 658, 662, 664, 666, 669, 671, 672, 673, 674, 675, 676, 677, 690, 697, 700, 733, 734, 801, 804, 805, 815, 827, 828, 833, 834, 835, 836, 837, 838, 839, 851, 862, 863, 865, 872, 881, 884, 889, 893, 898, 902, 957, 962, 991, 992, 996, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1012, 1015, 1016, 1017, 1020, 1021, 1022, 1025, 1026, 1028, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049], "available_if": [2, 89, 390, 1046, 1047, 1050], "avebedrm": [310, 371, 490], "aventi": 51, "aveoccup": [310, 321, 371, 490], "averag": [2, 43, 52, 62, 64, 72, 74, 75, 79, 85, 93, 95, 137, 138, 142, 146, 149, 150, 155, 156, 157, 168, 175, 187, 195, 202, 212, 219, 230, 249, 264, 273, 275, 278, 280, 284, 289, 310, 319, 325, 327, 333, 351, 359, 363, 371, 373, 378, 388, 405, 406, 410, 412, 416, 417, 419, 420, 437, 438, 441, 444, 445, 446, 447, 449, 490, 494, 495, 524, 532, 533, 534, 538, 539, 541, 542, 546, 547, 548, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 570, 571, 588, 595, 633, 634, 649, 659, 660, 667, 668, 670, 673, 675, 677, 678, 679, 681, 688, 701, 704, 705, 707, 708, 709, 714, 721, 722, 724, 726, 727, 729, 730, 731, 735, 736, 737, 739, 740, 741, 744, 746, 747, 749, 751, 752, 754, 757, 765, 782, 783, 784, 785, 786, 788, 789, 791, 792, 796, 797, 798, 799, 829, 832, 851, 871, 886, 987, 992, 997, 998, 1003, 1006, 1008, 1009, 1016, 1017, 1018, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "average_bike_rent": 187, "average_coef_": 1044, "average_feature_effect": 351, "average_intercept_": 1044, "average_linkag": 79, "average_method": [408, 705, 758, 1041], "average_pr": 149, "average_precis": [277, 701, 708, 1002], "average_precision_scor": [2, 277, 701, 707, 709, 783, 789, 1002, 1033, 1036, 1040, 1041, 1047, 1049], "average_week_demand": [43, 149], "averoom": [310, 321, 371, 490], "avg": [45, 68, 102, 165, 268, 308, 329, 330, 570, 705, 714, 823, 1002, 1049], "avg_dist": [75, 782], "avgclaim": 230, "avgclaimamount": 230, "avi": [1045, 1046], "avidar": 1049, "avinash": 1045, "avm19": [1047, 1048, 1050], "avoid": [43, 46, 51, 52, 79, 90, 95, 104, 139, 140, 144, 149, 186, 187, 216, 221, 230, 235, 246, 249, 264, 265, 271, 275, 283, 298, 300, 301, 314, 315, 326, 336, 337, 352, 364, 374, 376, 377, 378, 380, 381, 382, 388, 390, 391, 394, 402, 406, 408, 410, 412, 415, 416, 419, 440, 442, 444, 452, 462, 468, 494, 495, 496, 500, 509, 510, 535, 540, 544, 635, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 690, 692, 694, 696, 713, 793, 801, 802, 806, 812, 815, 826, 827, 828, 865, 868, 874, 875, 877, 882, 883, 884, 885, 888, 890, 891, 892, 893, 894, 895, 896, 898, 903, 949, 996, 999, 1001, 1002, 1005, 1006, 1008, 1010, 1012, 1017, 1018, 1022, 1025, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "aw": 384, "awai": [62, 63, 64, 93, 109, 142, 170, 171, 175, 215, 264, 344, 345, 371, 406, 418, 629, 847, 848, 855, 856, 1001, 1002, 1017], "await": 320, "awalei": 1041, "awar": [48, 54, 165, 179, 264, 337, 351, 374, 376, 378, 388, 391, 407, 412, 416, 568, 569, 649, 655, 656, 657, 659, 660, 670, 681, 851, 880, 1008, 1012, 1018, 1030, 1033, 1034, 1047], "awesom": 1026, "awwwyan": 1051, "ax": [43, 44, 46, 47, 48, 49, 51, 52, 54, 62, 64, 66, 67, 68, 70, 75, 77, 78, 86, 88, 89, 90, 97, 99, 104, 107, 111, 113, 116, 118, 120, 126, 130, 134, 136, 139, 141, 143, 144, 149, 151, 152, 154, 155, 156, 173, 174, 179, 181, 185, 186, 187, 188, 189, 191, 193, 194, 197, 198, 202, 204, 205, 208, 209, 210, 212, 213, 214, 216, 217, 220, 221, 223, 225, 226, 227, 230, 232, 233, 234, 235, 236, 237, 240, 245, 249, 250, 252, 255, 257, 260, 264, 265, 266, 267, 270, 272, 273, 274, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 298, 300, 301, 305, 306, 307, 310, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 326, 336, 337, 338, 339, 341, 342, 344, 346, 347, 348, 349, 351, 352, 353, 355, 356, 372, 379, 413, 418, 438, 535, 542, 551, 632, 633, 698, 699, 701, 702, 703, 719, 807, 824, 919, 922, 1002, 1005, 1009, 1030, 1043, 1049], "ax0": [105, 107, 212, 242, 352], "ax1": [46, 49, 90, 93, 98, 100, 105, 107, 111, 118, 143, 182, 189, 212, 240, 242, 250, 255, 273, 281, 311, 315, 316, 332, 351, 352, 372], "ax2": [46, 90, 93, 98, 100, 111, 118, 143, 182, 189, 212, 240, 250, 255, 273, 281, 300, 311, 315, 316, 332, 351, 372], "ax3": [98, 332], "ax4": 98, "ax_": [150, 263, 273, 277, 279, 283, 293, 315, 319, 383, 438, 632, 698, 699, 701, 702, 703, 807, 824], "ax_bc": 314, "ax_bottom": 383, "ax_calibration_curv": [62, 64], "ax_colorbar": 310, "ax_det": 267, "ax_histi": 310, "ax_histx": 310, "ax_histx_zoom": 310, "ax_histy_zoom": 310, "ax_idx": 272, "ax_origin": 314, "ax_qt": 314, "ax_roc": 267, "ax_row": 70, "ax_scatt": 310, "ax_scatter_zoom": 310, "ax_top_left": 383, "ax_top_right": 383, "ax_yj": 314, "ax_zoom_in": 310, "ax_zoom_out": 310, "axarr": [155, 310], "axes_": [149, 151, 250, 320, 326, 383, 633], "axes_idx": 314, "axes_list": 314, "axes_row": 204, "axesimag": 698, "axhlin": [127, 159, 203, 269, 273], "axi": [2, 43, 44, 46, 50, 51, 53, 54, 55, 57, 62, 63, 72, 74, 75, 81, 83, 85, 86, 87, 88, 94, 103, 104, 107, 113, 116, 118, 120, 121, 122, 123, 124, 129, 136, 137, 141, 142, 150, 153, 157, 161, 164, 174, 179, 181, 185, 186, 195, 201, 202, 205, 206, 207, 212, 217, 221, 224, 226, 227, 229, 230, 233, 234, 237, 239, 243, 244, 248, 255, 257, 259, 260, 266, 267, 271, 272, 277, 279, 280, 283, 289, 290, 295, 296, 297, 300, 301, 302, 308, 310, 314, 317, 326, 330, 332, 334, 336, 339, 340, 343, 345, 346, 347, 349, 351, 352, 356, 357, 358, 371, 378, 385, 390, 406, 408, 416, 420, 438, 445, 464, 467, 532, 534, 537, 538, 540, 542, 544, 546, 547, 551, 586, 613, 632, 633, 686, 687, 702, 764, 780, 781, 782, 783, 807, 824, 833, 874, 875, 882, 883, 885, 890, 891, 892, 894, 895, 896, 919, 927, 931, 932, 951, 976, 982, 992, 1002, 1009, 1012, 1017, 1041, 1043, 1045, 1050, 1051], "axis_idx": 43, "axis_list": 122, "axp": 51, "axvlin": [86, 93, 105, 113, 127, 145, 156, 186, 188, 189, 202, 276, 284, 347], "ayako": 1045, "ayan": 1047, "ayc\u0131": 1051, "aydor": [1040, 1041, 1044], "ayerdi": 1037, "aymer": 1034, "aymericbasset": 1049, "ayomid": 1043, "ayush": [1041, 1046], "ayzenshtat": [1026, 1041], "azaria": [1048, 1049], "azencott": 1047, "azim": [100, 126, 187, 232, 236], "azur": [0, 376], "b": [0, 2, 47, 49, 61, 63, 92, 98, 111, 127, 136, 137, 142, 146, 147, 157, 159, 171, 172, 173, 178, 182, 196, 198, 201, 212, 213, 218, 230, 247, 249, 264, 269, 273, 275, 280, 285, 289, 322, 332, 359, 371, 373, 376, 380, 381, 382, 405, 406, 408, 411, 412, 413, 416, 437, 482, 499, 501, 542, 567, 589, 590, 591, 592, 608, 609, 611, 612, 629, 647, 648, 649, 650, 659, 670, 673, 675, 677, 681, 688, 689, 706, 720, 731, 732, 793, 794, 812, 813, 852, 878, 879, 880, 881, 884, 885, 893, 920, 933, 949, 950, 964, 966, 992, 994, 998, 999, 1000, 1002, 1005, 1007, 1012, 1016, 1017, 1033, 1041, 1044, 1046, 1047, 1048], "b0noi": 1039, "b0rxington": 1048, "b1": [226, 296, 339], "b12": [212, 230], "b1996": 415, "b1998": 415, "b1999": 415, "b2": [226, 296, 339], "b2001": 415, "b2011": 408, "b2c": 1026, "b30065": 312, "b5": 324, "b7a2ff": 314, "b_1": 1006, "b_2": 1006, "b_column": 720, "b_i": 1007, "b_iv_i": 1007, "b_j": 408, "b_k": 408, "b_mask": 279, "b_row": 720, "b_true": 279, "ba": [51, 862, 863, 1006], "baak": 1047, "baam": [1046, 1047], "babino": [1046, 1047], "bac": 51, "bach": [413, 532, 537, 538, 539, 659, 998], "bachant": 1040, "back": [43, 125, 251, 364, 374, 376, 390, 391, 402, 409, 416, 433, 443, 446, 447, 459, 482, 483, 484, 509, 510, 534, 535, 536, 539, 541, 542, 545, 582, 631, 659, 660, 667, 668, 669, 677, 678, 679, 729, 870, 872, 873, 874, 878, 879, 880, 882, 883, 885, 897, 898, 905, 954, 998, 1002, 1006, 1022, 1036, 1041, 1043, 1044, 1047, 1051], "backend": [2, 364, 379, 390, 468, 903, 967, 971, 1002, 1036, 1041, 1042, 1043, 1044], "background": [44, 50, 81, 99, 150, 308, 312, 371, 376, 384, 408, 494, 495, 999, 1007, 1016, 1043], "background_point": 50, "backlink": 1038, "backport": [380, 385, 1040], "backprop": [1006, 1016], "backpropag": 1006, "backslash": 1048, "backtick": [376, 381], "backup": [509, 1033], "backward": [168, 246, 321, 379, 390, 417, 497, 578, 603, 615, 616, 619, 620, 621, 623, 624, 918, 927, 1006, 1022, 1033, 1036, 1041, 1042, 1043, 1045, 1047, 1049], "bad": [93, 94, 171, 176, 186, 264, 327, 351, 359, 376, 408, 418, 693, 747, 991, 998, 999, 1004, 1010, 1033], "badaracco": 1046, "badli": [202, 212, 351, 365, 885, 998, 1012], "badr": 1048, "baeza": [591, 731, 1036], "bag": [2, 14, 64, 102, 122, 133, 138, 140, 148, 183, 188, 287, 352, 353, 372, 406, 517, 518, 519, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 742, 806, 831, 914, 1000, 1003, 1023, 1024, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1046, 1047, 1049], "bagai": 1046, "baggingclassifi": [2, 390, 399, 415, 557, 915, 941, 992, 1036, 1039, 1040, 1041, 1044, 1048, 1049, 1051], "baggingregressor": [2, 137, 399, 415, 556, 916, 992, 1036, 1039, 1041, 1044, 1048, 1049, 1051], "baggipont": 1051, "baharev": 1038, "bahavior": 351, "bahaviour": 351, "baibak": [1041, 1042], "bail": 1044, "bailei": [408, 705], "bajic": 1048, "baji\u0107": 1048, "bakir2003": 413, "bakiri": [835, 1003], "bak\u0131r": [44, 413, 536], "bala": [1033, 1036], "balakumaran": [1040, 1041], "balanc": [2, 43, 45, 52, 64, 86, 99, 104, 134, 140, 144, 167, 183, 216, 217, 262, 268, 271, 273, 274, 284, 310, 365, 388, 390, 406, 407, 412, 413, 415, 503, 516, 535, 541, 542, 548, 558, 562, 565, 641, 659, 660, 667, 669, 675, 676, 677, 704, 709, 730, 744, 783, 788, 801, 802, 819, 865, 905, 907, 910, 913, 915, 936, 937, 991, 1017, 1018, 1023, 1033, 1035, 1038, 1039, 1042, 1043, 1047], "balanced_accuraci": [284, 709, 823, 1002, 1041], "balanced_accuracy_scor": [2, 704, 788, 1002, 1041], "balanced_subsampl": [558, 565, 1041], "balaz": 1037, "baldi": 744, "ball": [102, 295, 303, 408, 414, 448, 693, 845, 846, 850, 853, 855, 856, 857, 1033, 1035, 1038, 1044], "ball_tre": [303, 419, 444, 446, 450, 457, 689, 690, 847, 848, 849, 850, 851, 853, 855, 856, 857, 1005, 1033, 1050], "balltre": [2, 419, 444, 446, 450, 457, 689, 690, 700, 847, 848, 849, 850, 851, 853, 855, 856, 857, 999, 1033, 1035, 1037, 1041, 1046, 1049, 1050], "baloo": 999, "baluyot": 1042, "bamidel": 1043, "banana": [48, 1002], "band": [52, 273, 312, 1012], "bandit": 991, "bandol": 316, "bandwidth": [2, 48, 79, 96, 245, 294, 295, 303, 388, 390, 408, 414, 448, 458, 461, 845, 846, 850, 995, 1008, 1044, 1048], "bandwidth_": 850, "bangda": 1041, "banik": 1051, "banilo": [1037, 1038], "bank": [51, 57, 1026], "bannerje": [1049, 1050], "bansal": 1040, "bansod": [1038, 1039, 1040], "bao": [1039, 1047], "baod": 408, "baptbillard": 1046, "baptist": [1036, 1044], "bar": [47, 49, 54, 104, 140, 141, 143, 144, 147, 156, 164, 168, 178, 181, 187, 193, 255, 260, 269, 271, 275, 289, 315, 316, 323, 324, 352, 378, 411, 582, 633, 649, 670, 681, 1002, 1009, 1016, 1018, 1039, 1040, 1041, 1042], "bar_color": 47, "bar_kw": 633, "bar_siz": 351, "baran": 1043, "barang": 1049, "baraniuk": 417, "barankaraku": 1045, "barata": 1049, "barber": 533, "barberogaston": 1045, "bardiya": [1047, 1048], "bare": [371, 999], "barh": [54, 147, 181, 182, 185, 186, 188, 189, 253, 317, 351, 352, 353], "barikbin": 1049, "barkhorn": 1041, "barklei": 1043, "barmalei": [1037, 1038], "barn": [693, 999, 1038, 1040, 1043, 1051], "barnes_hut": [290, 693, 1040, 1041], "barnett": 1041, "barnhil": [594, 595], "barnowski": [1047, 1048], "barreca": [886, 1012], "barreto": 1047, "barri": [371, 1041], "barrier": 416, "barrycg": 1043, "bars_": 633, "bartelheim": 1044, "barth\u00e9lemi": [1049, 1050], "bartosz": 1042, "bart\u0142omiej": 1048, "barycent": [302, 1033], "basbug": 1040, "base": [2, 14, 19, 23, 30, 31, 32, 34, 40, 44, 51, 52, 53, 54, 55, 58, 62, 63, 64, 70, 82, 89, 90, 91, 100, 102, 103, 107, 111, 120, 121, 126, 132, 134, 135, 140, 144, 145, 146, 147, 149, 152, 154, 157, 162, 165, 166, 170, 175, 176, 178, 187, 188, 189, 192, 193, 199, 200, 201, 202, 207, 208, 212, 213, 220, 229, 230, 232, 239, 246, 247, 249, 267, 268, 273, 283, 287, 289, 290, 303, 308, 310, 311, 313, 315, 321, 323, 327, 334, 338, 344, 352, 355, 363, 370, 371, 372, 373, 374, 377, 378, 379, 380, 384, 388, 390, 391, 393, 402, 404, 406, 407, 409, 413, 414, 416, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 444, 445, 446, 447, 448, 449, 450, 452, 456, 457, 461, 463, 464, 465, 466, 467, 487, 501, 502, 509, 510, 533, 534, 536, 537, 538, 539, 540, 542, 547, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 579, 589, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 617, 618, 619, 622, 625, 633, 634, 636, 637, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 665, 670, 672, 673, 674, 675, 676, 681, 683, 684, 686, 687, 688, 691, 693, 705, 718, 727, 736, 737, 738, 740, 742, 756, 757, 758, 786, 789, 796, 800, 801, 803, 804, 805, 807, 808, 810, 815, 817, 819, 820, 821, 822, 829, 831, 835, 836, 839, 847, 848, 849, 851, 853, 855, 856, 857, 862, 863, 866, 867, 870, 877, 878, 880, 884, 885, 886, 894, 897, 898, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 921, 923, 925, 934, 943, 954, 970, 991, 993, 994, 996, 997, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1026, 1028, 1029, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1051], "base_classifi": [332, 334, 1015], "base_clf": 437, "base_estim": [406, 554, 555, 556, 557, 836, 839, 902, 991, 1044, 1046, 1047, 1048, 1049], "base_estimator_": [554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 611, 1048], "base_estimator__": 1048, "base_lr": [289, 836], "base_model": 407, "base_x_test": 109, "base_x_train": 109, "basebag": [1039, 1041], "basebal": [57, 371], "basedecisiontre": [1041, 1042, 1045], "basedictionarylearn": 1033, "baseensembl": [1040, 1043], "baseestim": [2, 89, 132, 246, 290, 376, 389, 390, 418, 423, 425, 426, 430, 431, 432, 602, 633, 634, 941, 954, 1033, 1040, 1043, 1045, 1047, 1048], "basegradientboost": 1034, "baselabelpropag": 1040, "baselibsvm": 1043, "baselin": [62, 134, 143, 146, 157, 168, 189, 193, 230, 264, 280, 289, 321, 352, 373, 408, 417, 552, 553, 635, 1002, 1005, 1049], "baseline_similar": 178, "baseline_similarity_bound": 178, "basemap": [50, 303], "basemixtur": [1041, 1042], "basemultilayerperceptron": [1041, 1043], "basenb": 1043, "baserandomproject": [897, 898], "basesearchcv": [1040, 1041], "basesgd": 1016, "basesgdclassifi": 1042, "baseshufflesplit": 1046, "bash": [364, 384], "bashrc": 384, "basi": [2, 43, 45, 53, 125, 170, 175, 177, 213, 264, 307, 322, 340, 344, 368, 374, 377, 408, 413, 415, 452, 535, 623, 633, 640, 692, 884, 1000, 1012, 1017, 1024, 1028, 1041, 1043, 1046], "basic": [146, 169, 170, 175, 176, 178, 179, 182, 183, 210, 284, 317, 345, 363, 365, 376, 378, 380, 388, 390, 408, 412, 413, 415, 612, 623, 901, 913, 914, 915, 916, 991, 992, 1005, 1016, 1020, 1021, 1022, 1023, 1026], "basicconfig": 120, "basil": 1040, "basilisk": 1021, "basis_1": 213, "basis_2": 213, "basri": 514, "bassett": 998, "bastiaan": [1034, 1035], "bastian": 1041, "bat": 374, "batch": [2, 47, 50, 97, 120, 124, 303, 323, 365, 385, 390, 416, 440, 442, 447, 449, 451, 453, 532, 534, 535, 537, 538, 539, 540, 541, 543, 544, 546, 547, 665, 686, 687, 806, 819, 820, 840, 841, 842, 843, 844, 862, 863, 874, 875, 885, 898, 952, 967, 1006, 1007, 1016, 1033, 1037, 1038, 1041, 1042, 1043, 1044, 1046, 1048, 1049], "batch_dict_estim": 120, "batch_pca_estim": 120, "batch_siz": [2, 54, 57, 77, 97, 120, 123, 124, 352, 413, 449, 535, 537, 538, 539, 540, 547, 861, 862, 863, 952, 953, 967, 1034, 1041, 1044, 1046, 1047], "batch_size_": 535, "batchkarov": [1034, 1038], "batiss": 1044, "batista": [1041, 1042, 1046], "batistaki": 408, "batoul": 1046, "battista": 1044, "batula": 1040, "bauk": [1041, 1042], "baum": 446, "baumgartn": 1040, "baxlei": 1040, "bay": [2, 32, 64, 67, 137, 152, 170, 202, 260, 272, 351, 371, 406, 413, 415, 416, 537, 550, 551, 657, 840, 841, 842, 843, 844, 886, 996, 997, 998, 1012, 1024, 1028, 1033, 1034, 1035, 1036, 1041, 1043, 1046, 1048], "bayer": [0, 1033, 1034, 1038, 1051], "bayesian": [2, 46, 64, 87, 98, 118, 182, 183, 192, 198, 200, 213, 218, 254, 256, 260, 261, 273, 281, 285, 295, 300, 311, 315, 413, 437, 525, 529, 533, 612, 645, 646, 657, 658, 798, 799, 866, 868, 880, 885, 991, 1021, 1023, 1024, 1027, 1028, 1039, 1046], "bayesiangaussianmixtur": [2, 255, 256, 261, 799, 1001, 1039, 1041, 1042, 1046, 1047, 1051], "bayesianridg": [2, 87, 181, 193, 194, 198, 321, 628, 645, 998, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050], "baz": [378, 582], "baze": 1042, "bbbbbb": 97, "bbox": [48, 51, 70, 255, 256, 257, 260, 261, 312], "bbox_arg": 48, "bbox_to_anchor": [43, 72, 179, 275, 346], "bc": 314, "bcde": 143, "bcross_val": 1033, "bde": 143, "bdegraaff": 1048, "bdt": 136, "beach": 1041, "beam": [137, 1033], "bear": [415, 1021], "bearer": 1041, "beatrizsmg": 1045, "beauchamp": [1034, 1037], "beaugnon": 1043, "becam": [154, 391, 1041], "becaus": [43, 44, 52, 57, 62, 64, 75, 81, 83, 103, 113, 116, 134, 139, 146, 149, 168, 171, 174, 177, 186, 187, 189, 194, 199, 206, 212, 216, 218, 220, 230, 245, 246, 256, 264, 267, 270, 271, 276, 289, 290, 306, 307, 308, 310, 314, 315, 316, 317, 331, 340, 344, 351, 352, 353, 355, 358, 359, 363, 364, 371, 380, 381, 384, 388, 389, 390, 399, 402, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 418, 421, 431, 447, 448, 461, 465, 475, 482, 483, 484, 535, 537, 553, 555, 557, 559, 561, 563, 564, 566, 569, 571, 608, 609, 612, 633, 634, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 673, 674, 677, 678, 679, 680, 681, 690, 700, 710, 713, 714, 722, 723, 724, 725, 747, 764, 786, 789, 795, 801, 815, 829, 833, 838, 839, 848, 851, 853, 855, 856, 857, 863, 874, 875, 883, 885, 886, 890, 891, 893, 894, 895, 896, 906, 908, 911, 914, 916, 924, 965, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1005, 1007, 1009, 1012, 1017, 1018, 1026, 1039, 1040, 1042, 1043, 1044, 1045, 1047, 1049], "becker": [408, 1026, 1036, 1045], "becom": [83, 88, 90, 104, 111, 144, 186, 214, 216, 246, 249, 272, 290, 311, 315, 340, 344, 351, 359, 370, 376, 378, 380, 384, 390, 391, 408, 410, 415, 416, 418, 440, 450, 454, 455, 457, 582, 589, 590, 592, 620, 628, 659, 660, 677, 679, 879, 905, 906, 912, 997, 998, 999, 1001, 1005, 1012, 1017, 1034, 1041, 1042, 1045, 1046, 1047, 1048, 1050], "bednar": 1040, "bedroom": [310, 371], "been": [0, 43, 48, 63, 79, 86, 93, 112, 125, 132, 134, 147, 168, 170, 175, 177, 186, 189, 236, 239, 241, 246, 247, 268, 270, 276, 277, 319, 320, 321, 322, 323, 325, 326, 327, 331, 351, 359, 364, 370, 371, 373, 374, 375, 376, 378, 380, 382, 384, 385, 388, 389, 390, 391, 399, 402, 405, 406, 407, 408, 410, 412, 413, 415, 418, 433, 437, 469, 471, 472, 474, 478, 487, 524, 535, 537, 550, 551, 568, 569, 582, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 634, 635, 659, 660, 667, 668, 669, 674, 676, 677, 678, 679, 721, 779, 780, 781, 794, 801, 804, 805, 807, 815, 823, 824, 829, 830, 854, 902, 905, 992, 994, 995, 997, 998, 999, 1002, 1003, 1005, 1008, 1012, 1014, 1016, 1017, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "befor": [2, 47, 51, 62, 77, 102, 104, 107, 116, 144, 149, 154, 164, 177, 179, 180, 181, 183, 186, 187, 189, 195, 198, 200, 202, 206, 246, 264, 270, 277, 292, 293, 311, 314, 315, 317, 322, 343, 359, 363, 364, 371, 374, 376, 378, 380, 381, 382, 384, 385, 388, 390, 391, 393, 394, 402, 404, 406, 408, 409, 410, 412, 413, 415, 417, 420, 421, 443, 447, 448, 449, 459, 461, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 490, 502, 535, 538, 539, 540, 541, 542, 545, 547, 548, 562, 563, 566, 568, 570, 571, 578, 589, 590, 592, 612, 628, 629, 631, 646, 667, 668, 669, 672, 677, 679, 688, 693, 695, 798, 799, 806, 807, 819, 820, 822, 827, 829, 831, 845, 846, 853, 854, 855, 856, 857, 860, 865, 866, 869, 872, 879, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 902, 913, 914, 924, 949, 985, 992, 998, 999, 1002, 1008, 1012, 1016, 1017, 1018, 1022, 1023, 1033, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "beforehand": [253, 293, 1018], "begin": [57, 132, 168, 170, 265, 272, 289, 322, 351, 359, 376, 381, 382, 390, 405, 408, 415, 554, 555, 560, 562, 563, 667, 668, 677, 678, 679, 991, 994, 998, 1002, 1012, 1014, 1016, 1041, 1047, 1048], "beginn": 1022, "behav": [43, 51, 85, 90, 216, 264, 265, 310, 321, 340, 359, 376, 382, 389, 408, 409, 412, 885, 998, 1012, 1017, 1019, 1022, 1033, 1040, 1042, 1046, 1047], "behavior": [62, 72, 74, 85, 181, 183, 186, 187, 201, 209, 212, 230, 246, 253, 261, 262, 264, 273, 275, 307, 308, 310, 312, 317, 340, 359, 364, 370, 373, 376, 378, 380, 384, 385, 390, 404, 406, 407, 408, 412, 415, 416, 537, 552, 567, 667, 668, 669, 677, 678, 679, 700, 702, 730, 731, 784, 785, 788, 801, 802, 803, 806, 815, 818, 819, 820, 821, 822, 842, 878, 905, 906, 991, 998, 1002, 1003, 1008, 1012, 1017, 1023, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "behaviour": [74, 125, 149, 213, 214, 230, 342, 376, 390, 402, 408, 415, 560, 561, 565, 566, 603, 802, 803, 806, 818, 819, 820, 821, 822, 903, 913, 914, 974, 991, 992, 1002, 1012, 1041, 1044, 1045, 1048, 1049], "behind": [37, 86, 111, 134, 287, 378, 380, 384, 410, 415, 1001, 1005, 1014, 1049], "behrend": 1043, "behrouz": 1047, "behzad": 1039, "beier": 1044, "beimportantfew": 396, "being": [61, 64, 70, 85, 88, 113, 116, 125, 134, 138, 149, 151, 170, 175, 188, 191, 207, 246, 249, 263, 270, 308, 314, 315, 340, 344, 351, 353, 374, 375, 376, 378, 381, 388, 390, 391, 407, 408, 410, 412, 415, 416, 417, 418, 419, 421, 441, 442, 444, 445, 450, 456, 469, 475, 494, 524, 570, 641, 650, 657, 673, 675, 688, 691, 695, 713, 719, 735, 737, 784, 790, 798, 845, 846, 851, 853, 855, 856, 857, 880, 898, 950, 991, 992, 998, 1001, 1002, 1005, 1008, 1009, 1012, 1014, 1016, 1017, 1018, 1033, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "beings": 351, "beirouti": 1040, "belatedli": 1040, "belief": [57, 270, 861, 1007], "believ": [351, 352, 384, 388, 1026], "belkin": 999, "belkina": [693, 999], "bell": [2, 522, 1041, 1043, 1045, 1046], "bella": 1002, "bella2012": 1002, "bellet": [1040, 1041, 1042], "belmont": [913, 914, 1018], "belong": [61, 64, 66, 88, 93, 249, 270, 319, 325, 331, 370, 371, 405, 406, 408, 409, 411, 412, 415, 423, 440, 443, 447, 448, 449, 451, 453, 524, 713, 732, 808, 814, 826, 872, 886, 957, 958, 998, 1001, 1002, 1004, 1005, 1006, 1008, 1017, 1021], "below": [0, 2, 48, 52, 62, 63, 64, 68, 70, 88, 93, 102, 107, 111, 120, 132, 138, 141, 146, 163, 185, 187, 197, 212, 214, 228, 229, 233, 237, 241, 246, 249, 251, 253, 265, 268, 273, 275, 276, 277, 310, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 345, 351, 358, 359, 364, 369, 370, 374, 376, 378, 380, 381, 385, 390, 391, 394, 396, 408, 410, 411, 412, 413, 415, 416, 417, 418, 444, 446, 448, 471, 472, 478, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 511, 532, 538, 543, 549, 583, 596, 597, 598, 599, 600, 601, 634, 647, 653, 659, 660, 668, 669, 674, 676, 693, 700, 706, 744, 764, 798, 799, 801, 812, 815, 834, 865, 868, 878, 879, 882, 888, 894, 991, 992, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1016, 1017, 1018, 1019, 1021, 1029, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1051], "beltran": 1051, "ben": [1035, 1036, 1037, 1040, 1041, 1042, 1045, 1050], "ben3940": 1047, "benavoli": 270, "benbihi": 1042, "bench_k_mean": 91, "benchmark": [290, 321, 352, 353, 363, 369, 371, 376, 388, 394, 401, 406, 468, 516, 903], "benchmark_estim": 49, "benchmark_influ": 46, "benchmark_throughput": 49, "bend": 344, "benedek": 1049, "benedikt": 1037, "benediktsson": [1033, 1034, 1035], "benefici": [104, 106, 109, 120, 152, 264, 310, 311, 327, 402, 407, 999], "benefit": [43, 80, 89, 106, 107, 134, 135, 144, 149, 186, 226, 236, 242, 244, 264, 292, 323, 363, 376, 385, 390, 406, 408, 448, 461, 468, 509, 568, 569, 659, 660, 667, 668, 669, 677, 678, 679, 836, 903, 905, 991, 997, 1005, 1012, 1022, 1026, 1033, 1036, 1037, 1038, 1045, 1046, 1047, 1048], "benfield": 1040, "bengio": [270, 862, 863, 991, 1015], "bengtsson": 1037, "benhel": 377, "benhur": 1046, "benign": [168, 373, 501], "benjamin": [642, 1035, 1036, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "benjamini": [596, 1039, 1040], "benjaminirv": 1038, "benjastudio": [1041, 1042], "benn": 1041, "bennett": [168, 373, 1002], "benni": 1047, "benoit": 1050, "beno\u00eet": 1046, "benson": 57, "bentlei": 1005, "bera": 1048, "berei": 1047, "beren": 693, "berenbaum": 1049, "bereng": 1046, "berg": [371, 1034, 1035, 1045, 1050], "bergman": [1050, 1051], "bergstra": [991, 1033, 1034], "berk": 1033, "berkecanrizai": 1048, "berkelei": [642, 913, 914], "berlin": [175, 408, 413, 536, 697, 727, 757, 1002], "bernardo": 1039, "bernd": 1048, "bernhard": [44, 413, 536, 836, 871, 901, 1003, 1008, 1017, 1039], "bernhardsson": 1026, "berni": 1044, "bernoulli": [2, 308, 416, 417, 840, 841, 842, 843, 844, 861, 862, 863, 868, 998, 1012, 1024, 1028, 1033], "bernoullinb": [2, 152, 365, 841, 842, 843, 844, 1003, 1004, 1034, 1035, 1037, 1040, 1045, 1046, 1048], "bernoullirbm": [2, 308, 862, 863, 1007, 1012, 1035, 1036, 1045, 1047, 1050], "bertin": 1026, "bertoncelj": 1044, "bertrand": [0, 397, 1033, 1039, 1040, 1045, 1046], "bertrandhaut": [1041, 1042], "besid": [154, 242, 284, 376, 381, 590, 991, 1041], "bessel": [418, 620], "bessi": 324, "besson": [1038, 1039], "best": [0, 43, 45, 47, 51, 52, 53, 57, 61, 63, 64, 75, 80, 87, 88, 94, 102, 103, 104, 105, 109, 115, 120, 124, 127, 128, 129, 137, 140, 143, 145, 146, 147, 149, 154, 157, 168, 170, 171, 176, 181, 186, 193, 198, 200, 202, 226, 227, 228, 232, 235, 239, 244, 245, 249, 256, 257, 261, 263, 264, 268, 269, 270, 271, 274, 277, 278, 281, 282, 285, 289, 294, 299, 311, 316, 321, 322, 327, 340, 343, 344, 351, 352, 353, 357, 363, 364, 370, 373, 375, 376, 379, 382, 389, 390, 394, 399, 402, 405, 406, 407, 408, 412, 413, 415, 416, 417, 418, 431, 443, 446, 447, 449, 451, 452, 453, 459, 462, 465, 472, 482, 483, 484, 539, 546, 547, 553, 555, 557, 558, 559, 560, 561, 563, 565, 566, 567, 569, 571, 594, 595, 598, 603, 611, 612, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 676, 677, 679, 680, 681, 689, 690, 691, 694, 695, 704, 709, 720, 721, 722, 723, 724, 725, 729, 730, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 757, 784, 785, 786, 788, 791, 792, 793, 794, 795, 797, 798, 799, 801, 804, 805, 815, 828, 830, 833, 838, 839, 848, 856, 862, 863, 906, 908, 911, 913, 914, 915, 916, 991, 996, 997, 998, 999, 1002, 1005, 1006, 1008, 1016, 1018, 1021, 1022, 1026, 1033, 1036, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1051], "best_alpha": 1033, "best_c": 347, "best_c_scal": 347, "best_clf": 105, "best_estim": [801, 804, 805, 815], "best_estimator_": [45, 87, 104, 105, 106, 109, 127, 245, 260, 264, 268, 270, 271, 274, 282, 294, 801, 804, 805, 815, 991, 1040], "best_idx": [57, 269], "best_index": [268, 274], "best_index_": [269, 274, 801, 804, 805, 815], "best_loss": [677, 679], "best_loss_": [862, 863, 1048], "best_low_complex": 269, "best_n_it": 459, "best_paramet": 271, "best_parameters_": 260, "best_params_": [103, 105, 146, 170, 245, 260, 268, 274, 321, 340, 389, 801, 804, 805, 815, 991], "best_recal": 268, "best_recall_std": 268, "best_recall_threshold": 268, "best_scor": 274, "best_score_": [103, 105, 245, 264, 271, 274, 275, 340, 407, 674, 676, 801, 804, 805, 815, 823, 1044], "best_score_idx": 269, "best_threshold_": [264, 284, 327, 823], "best_validation_score_": [862, 863, 1048], "beta": [2, 80, 115, 185, 216, 382, 406, 408, 411, 537, 539, 541, 548, 645, 730, 731, 737, 743, 784, 796, 798, 1002, 1035, 1038, 1040, 1042, 1043], "beta_": [216, 413], "beta_1": [862, 863], "beta_2": [862, 863], "beta_k": 413, "beta_loss": [54, 539, 541, 548, 1040], "betatim": 1048, "better": [43, 44, 48, 52, 57, 58, 61, 67, 83, 88, 106, 107, 109, 110, 111, 112, 116, 120, 123, 126, 137, 140, 144, 145, 146, 149, 154, 163, 174, 175, 176, 178, 181, 186, 188, 194, 198, 199, 202, 212, 213, 214, 220, 227, 229, 230, 236, 244, 245, 246, 249, 260, 263, 264, 270, 272, 273, 276, 279, 280, 283, 287, 289, 308, 314, 315, 323, 324, 340, 347, 351, 352, 353, 355, 359, 363, 371, 375, 376, 377, 378, 381, 382, 384, 390, 393, 396, 404, 406, 408, 410, 412, 413, 414, 415, 416, 418, 449, 450, 539, 541, 548, 560, 561, 562, 563, 608, 609, 631, 672, 678, 693, 710, 726, 735, 740, 743, 764, 799, 830, 840, 841, 842, 843, 844, 845, 846, 851, 862, 863, 882, 883, 886, 894, 897, 898, 905, 906, 991, 992, 994, 995, 996, 998, 999, 1001, 1002, 1004, 1005, 1006, 1010, 1012, 1015, 1016, 1018, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "better_prob": 270, "between": [2, 25, 37, 43, 44, 47, 48, 50, 51, 52, 58, 70, 72, 73, 74, 75, 77, 78, 86, 93, 94, 99, 115, 123, 125, 126, 128, 134, 137, 140, 143, 144, 146, 149, 163, 170, 175, 176, 178, 183, 185, 186, 187, 188, 193, 198, 199, 201, 204, 208, 209, 212, 213, 214, 216, 217, 220, 230, 232, 239, 244, 246, 249, 262, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 282, 283, 284, 287, 289, 292, 296, 297, 299, 300, 310, 315, 317, 322, 327, 332, 340, 344, 346, 347, 351, 352, 353, 358, 359, 363, 364, 371, 376, 378, 380, 384, 385, 388, 389, 390, 391, 399, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 429, 440, 441, 443, 444, 445, 446, 447, 450, 452, 453, 454, 456, 457, 458, 463, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 515, 516, 522, 525, 528, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 550, 551, 554, 555, 560, 561, 563, 564, 565, 566, 585, 589, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 612, 621, 628, 633, 634, 635, 640, 643, 646, 647, 648, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 677, 679, 680, 682, 685, 689, 691, 693, 695, 696, 697, 700, 702, 704, 705, 706, 708, 710, 711, 715, 716, 717, 718, 720, 725, 726, 727, 730, 731, 732, 735, 737, 738, 744, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 787, 788, 793, 794, 796, 797, 798, 799, 801, 802, 803, 804, 806, 810, 818, 819, 820, 821, 822, 830, 831, 833, 835, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 863, 869, 872, 873, 875, 876, 878, 879, 882, 883, 884, 886, 891, 894, 895, 899, 905, 906, 910, 913, 914, 915, 916, 918, 946, 958, 959, 970, 991, 994, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1022, 1023, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "bewar": 417, "beyond": [43, 64, 213, 214, 264, 363, 365, 375, 376, 388, 406, 415, 730, 731, 739, 784, 785, 788, 910, 999, 1003, 1012, 1017, 1022, 1041], "beyst": 1047, "bezuidenhout": 1046, "bf5fff": 118, "bfg": [306, 611, 612, 649, 650, 659, 670, 673, 675, 681, 688, 1005, 1006, 1048], "bgm": 798, "bharat": [412, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "bharathi": 1044, "bhardwaj": [1040, 1041], "bhargav": 1039, "bhaskaran": [1040, 1041], "bhat": [1046, 1048, 1049, 1050], "bhattacharya": 1041, "bhattarai": 1043, "bhavika": 1045, "bhoomika": 1048, "bhsu": 1037, "bhtsne": [693, 1040], "bi": [88, 416], "bia": [43, 64, 109, 122, 133, 141, 146, 149, 183, 186, 188, 193, 194, 196, 275, 305, 344, 347, 359, 371, 390, 406, 410, 414, 415, 418, 525, 557, 560, 561, 608, 609, 615, 643, 649, 650, 659, 660, 670, 671, 681, 862, 863, 878, 880, 884, 890, 891, 893, 894, 895, 896, 914, 923, 997, 998, 1001, 1002, 1006, 1007, 1010, 1016, 1023], "bianca": 64, "bianp": 382, "bias": [48, 113, 123, 146, 153, 185, 186, 188, 275, 371, 393, 406, 415, 525, 550, 861, 885, 896, 997, 1001, 1010, 1016, 1018], "bibhash": [1043, 1044], "bibl": 352, "bibliograph": 376, "bibtex": 0, "bic": [2, 159, 183, 192, 199, 200, 201, 207, 220, 417, 502, 652, 654, 655, 656, 657, 799, 866, 885, 991, 1001, 1023, 1033, 1040, 1046, 1047], "bic_criterion": 200, "bicker": 1043, "biclust": [2, 6, 59, 102, 331, 333, 351, 352, 353, 416, 423, 449, 451, 453, 488, 512, 514, 592, 720, 796, 1002, 1023, 1027, 1028, 1035, 1039], "bicluster_ncut": 57, "biclustermixin": 2, "biclusters_": [58, 59, 423, 451, 453], "bidu": [1046, 1047], "biernat": 1045, "big": [43, 79, 93, 95, 217, 233, 249, 261, 364, 376, 382, 391, 410, 416, 420, 539, 562, 563, 565, 566, 807, 829, 840, 841, 842, 843, 844, 1022, 1026, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "bigg": [418, 620], "bigger": [47, 75, 93, 225, 270, 308, 344, 349, 352, 362, 364, 416, 438, 439, 509, 539, 851, 1028], "biggest": [408, 411, 413, 443], "biggest_inertia": [408, 443], "biggio": 1044, "bigram": [271, 416, 589, 590, 592], "bigram_vector": 416, "bijil": 1047, "bike": 1009, "bike_shar": 43, "bike_sharing_data_fil": 52, "bike_sharing_demand": [43, 187], "bilbro": 1040, "bill": [1043, 1044], "billaud": 1041, "billi": 1037, "billing": [1036, 1037, 1038], "billion": 1026, "bimod": [314, 414], "bin": [2, 43, 61, 62, 64, 86, 107, 136, 140, 212, 243, 249, 264, 276, 295, 310, 311, 312, 313, 314, 316, 317, 374, 384, 394, 406, 414, 415, 438, 439, 448, 461, 562, 563, 868, 870, 884, 951, 1041, 1042, 1043, 1047, 1051], "bin_cent": [86, 212], "bin_edg": 86, "bin_edges_": [86, 311, 870], "bin_seed": [79, 96, 448, 461, 1044], "binar": [2, 36, 277, 279, 280, 368, 370, 755, 840, 869, 870, 872, 876, 878, 886, 889, 1002, 1004, 1028, 1047, 1049], "binari": [2, 30, 47, 53, 62, 64, 138, 140, 150, 152, 165, 178, 186, 191, 204, 206, 212, 220, 233, 240, 249, 252, 264, 267, 268, 273, 279, 284, 287, 294, 340, 344, 358, 359, 370, 371, 372, 380, 381, 390, 394, 402, 405, 406, 407, 408, 415, 416, 418, 437, 438, 439, 452, 487, 501, 509, 510, 521, 524, 550, 551, 554, 556, 560, 562, 567, 568, 569, 582, 589, 590, 592, 594, 595, 603, 611, 628, 629, 630, 631, 632, 633, 634, 659, 660, 667, 669, 674, 675, 676, 677, 701, 704, 708, 709, 710, 713, 714, 716, 719, 721, 723, 728, 730, 731, 735, 736, 739, 740, 741, 742, 744, 783, 784, 785, 788, 789, 790, 795, 797, 800, 801, 802, 804, 805, 806, 807, 815, 819, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 840, 851, 861, 872, 876, 878, 886, 889, 905, 907, 910, 921, 964, 992, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1030, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1047, 1048, 1050, 1051], "binary_crossentropi": 1047, "binary_eros": 53, "binary_onli": [1043, 1044], "binarytre": [850, 1037, 1041, 1045], "bincount": [390, 412, 558, 562, 565, 659, 660, 667, 669, 675, 676, 677, 905, 907, 910, 913, 915, 936, 937, 1040], "bind": [394, 1021, 1033, 1040, 1041], "binder": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358], "binesh": [1049, 1050], "binet": [1043, 1048], "bing": [1039, 1040], "bingham": 1014, "binned_numer": [212, 230], "binom": 998, "binomi": [145, 148, 415, 554, 560, 562, 998, 1047, 1050], "bio": 273, "biocsklearn": 1021, "bioinformat": [629, 992], "biola": 1051, "biologi": 50, "biometrika": [881, 893], "biostatist": [410, 478], "bipartit": [405, 453, 512, 1007], "biprateep": 1045, "birch": [2, 71, 79, 97, 183, 323, 365, 390, 446, 449, 513, 1023, 1027, 1028, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "birch_model": 77, "bird": [583, 719, 755, 1002], "birodkar": [1038, 1039, 1041], "bischl": 370, "bisect": [2, 71, 75, 90, 91, 92, 93, 94, 179, 183, 266, 443, 447, 513, 1023, 1047], "bisect_km": 323, "bisect_mean": 443, "bisecting_strategi": [408, 443], "bisectingkmean": [2, 78, 408, 447, 1047, 1048, 1049], "bisector": 70, "bishop": [533, 535, 542, 742, 798, 998, 1003, 1017], "bistochast": [405, 451], "biswadip": 1043, "biswaroop": 1048, "bit": [43, 52, 64, 86, 109, 123, 210, 214, 287, 310, 340, 352, 359, 363, 371, 374, 390, 394, 396, 415, 416, 583, 590, 659, 835, 931, 932, 999, 1003, 1020, 1033, 1036, 1039, 1041, 1042, 1045, 1046, 1047, 1050, 1051], "bithash": 641, "bithash_": 641, "bitli": 1026, "bitmap": 373, "bittarello": 1046, "bjerr": 1041, "bla": [363, 364, 374, 377, 382, 384, 779, 1033, 1041, 1042, 1044, 1045, 1051], "black": [43, 48, 49, 50, 52, 63, 70, 79, 82, 88, 89, 111, 112, 118, 120, 122, 142, 163, 166, 170, 171, 175, 176, 179, 182, 186, 187, 193, 200, 202, 203, 205, 212, 213, 214, 218, 221, 224, 225, 230, 239, 249, 255, 258, 295, 305, 306, 308, 334, 349, 356, 357, 376, 394, 401, 408, 415, 418, 556, 557, 632, 1008, 1009, 1018], "blackberri": 316, "blackburn": [1036, 1039], "blackd0t": 1043, "blair": [45, 371], "blakeflei": 1039, "blame": 376, "blanc": 316, "blanchard": [1037, 1038], "blank": [93, 381, 992, 1018], "bldgtype": 143, "bleed": 1026, "blei": [413, 537, 798], "bleich": [187, 1009], "bleki": 1045, "blend": [142, 154, 316, 390, 412], "bli": [364, 374, 388], "blind": [119, 122, 183, 211, 351, 413, 534, 542, 1023], "blink": 340, "blis_num_thread": 364, "blob": [2, 61, 69, 70, 77, 79, 90, 95, 97, 408, 448, 513], "blobs_param": 239, "block": [2, 295, 310, 323, 371, 373, 376, 381, 384, 390, 405, 408, 411, 414, 452, 453, 462, 473, 479, 480, 488, 489, 512, 514, 696, 949, 1005, 1007], "block_siz": [473, 479, 480, 1037], "blocker": [380, 1051], "blocknum": 47, "blockwis": [405, 998], "blog": [323, 363, 376, 382, 384, 391, 1044], "blogpost": 381, "blondel": [0, 398, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1046], "blood": [168, 240, 373], "bloom": [385, 966], "blown": 343, "blue": [46, 48, 52, 58, 59, 63, 70, 111, 118, 120, 134, 137, 141, 148, 149, 151, 154, 156, 166, 175, 177, 191, 194, 200, 202, 210, 235, 243, 263, 264, 265, 270, 306, 315, 320, 326, 331, 357, 373, 408, 413, 1050], "blueviolet": [226, 296, 339], "blum": 1040, "blyston": [1043, 1044], "bmaisonn": 1045, "bmalezieux": 1046, "bmatrix": [405, 994], "bmc": 1012, "bme": 1051, "bmi": [168, 200, 202, 250, 373, 1010], "bmreinig": 1047, "bmug": 57, "bmva": 672, "bmvc": [672, 998], "bo": [63, 1045], "board": 0, "boat": 324, "bob": [1034, 1040], "bobyrev": 1040, "boca": 998, "bodega": 316, "bodenhof": [405, 720], "bodi": [47, 102, 168, 250, 324, 373], "body_bow": 102, "body_stat": 102, "boe": 51, "boechat": 1040, "boenisch": 1044, "boerner": 1047, "boersma": 1039, "bogazici": 373, "bogdan": 1033, "boggavarapu": 1045, "bohl": [1045, 1047], "bohn\u00e9": 1046, "boil": [134, 379, 390, 410], "boilerpl": [246, 378, 1026], "boisberrang": [0, 397, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "bold": [93, 146, 202, 208, 376], "boll": 998, "bolleddula": 1051, "bolmier": [1044, 1045, 1049], "boltzmann": [2, 105, 160, 183, 203, 304, 503, 659, 714, 831, 861, 862, 863, 865, 891, 1023, 1027, 1028, 1035], "bommarito": [1036, 1037], "bonald": 1048, "bone": [225, 349], "bonferroni": 270, "bonu": [230, 374, 376], "bonusmalu": [212, 230], "boo": [168, 373], "book": [102, 443, 447, 449, 835, 840, 844, 998, 999, 1000, 1003, 1045], "booktitl": 0, "bool": [82, 99, 112, 182, 230, 358, 376, 420, 421, 422, 423, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 701, 703, 704, 708, 709, 710, 712, 713, 714, 715, 727, 728, 729, 730, 731, 732, 739, 742, 743, 755, 757, 762, 764, 768, 770, 775, 779, 783, 784, 785, 786, 788, 790, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 815, 819, 820, 823, 824, 825, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 929, 930, 931, 932, 943, 944, 949, 950, 963, 964, 966, 972, 974, 982, 987, 988, 989, 990, 992, 1042, 1045, 1046], "bool_": 214, "boolean": [2, 132, 246, 358, 371, 376, 378, 385, 409, 415, 416, 417, 464, 562, 563, 582, 583, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 630, 633, 634, 637, 650, 672, 700, 779, 834, 840, 861, 868, 888, 922, 927, 985, 992, 998, 1004, 1009, 1012, 1018, 1033, 1036, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1051], "boom": 1051, "boost": [2, 14, 46, 52, 103, 133, 134, 135, 138, 139, 141, 151, 154, 157, 177, 183, 188, 189, 194, 209, 214, 220, 235, 269, 271, 306, 314, 316, 323, 326, 377, 382, 390, 407, 417, 448, 466, 467, 490, 497, 502, 521, 554, 555, 560, 561, 562, 563, 565, 566, 633, 634, 635, 636, 742, 743, 749, 751, 791, 801, 804, 805, 806, 822, 828, 831, 866, 878, 879, 998, 1002, 1021, 1023, 1024, 1028, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1046], "booster": 1038, "boosting_error": 134, "boostingcolumntransform": 154, "boostingdecis": 415, "booth": 1040, "bootstrap": [137, 138, 145, 181, 273, 282, 321, 412, 415, 555, 556, 557, 558, 559, 564, 565, 566, 937, 972, 998, 1033, 1034, 1036, 1038, 1041, 1043, 1046], "bootstrap_featur": [415, 556, 557], "bootstrap_indic": 273, "borchmann": 1048, "border": [446, 1043], "borderaxespad": 111, "borderpad": 356, "borderwidth": 140, "borg": [691, 695, 999], "borgn": 1046, "bori": [1037, 1045, 1049], "borja": 1037, "born": 1039, "borovec": 1047, "borovikova": 1044, "bosch": 1046, "bossan": [1045, 1047, 1048, 1049, 1051], "bossch": [0, 397, 1040, 1041, 1042, 1046], "boston": 1026, "bot": [376, 380, 1007, 1047, 1050, 1051], "botelho": 1045, "both": [30, 43, 44, 46, 48, 49, 52, 54, 58, 62, 63, 64, 70, 77, 87, 88, 97, 103, 109, 111, 115, 116, 125, 127, 132, 137, 140, 141, 143, 144, 149, 153, 154, 157, 163, 164, 166, 168, 170, 177, 179, 185, 186, 187, 188, 193, 198, 199, 200, 202, 212, 213, 214, 216, 217, 218, 220, 230, 236, 245, 246, 247, 255, 256, 257, 258, 259, 260, 264, 270, 271, 272, 273, 277, 279, 281, 283, 290, 302, 310, 314, 315, 319, 321, 325, 331, 332, 337, 342, 344, 351, 352, 353, 358, 359, 363, 364, 365, 369, 370, 371, 374, 376, 378, 380, 382, 383, 385, 388, 389, 390, 391, 394, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 421, 437, 446, 452, 462, 468, 475, 482, 483, 484, 485, 488, 489, 497, 498, 501, 503, 506, 508, 509, 510, 535, 539, 541, 548, 552, 556, 557, 558, 564, 565, 566, 567, 568, 578, 589, 590, 592, 598, 608, 609, 628, 633, 634, 644, 658, 659, 660, 673, 675, 677, 679, 688, 700, 705, 713, 717, 730, 731, 732, 737, 739, 758, 762, 768, 775, 779, 784, 785, 788, 789, 790, 796, 804, 805, 807, 824, 834, 862, 863, 877, 879, 881, 893, 898, 903, 905, 906, 913, 915, 922, 935, 941, 950, 964, 976, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "botstein": [629, 992], "bottleneck": [363, 382, 415, 448, 862, 863], "bottom": [45, 47, 51, 53, 54, 70, 72, 74, 77, 79, 84, 86, 95, 97, 118, 144, 152, 157, 212, 223, 239, 255, 257, 258, 261, 267, 270, 281, 295, 310, 330, 332, 340, 376, 406, 408, 414, 588, 917, 996, 998, 1002, 1010, 1022], "bottom_h": 310, "bottou": [677, 678, 679, 1006, 1016], "bou": [1048, 1049], "boucaud": 1041, "boucher": 1040, "bouckaert": 270, "boukhobza": 1051, "boulard": 1050, "bould": 408, "bouldin": [2, 726], "boulogn": 1036, "boun": 373, "bound": [2, 64, 174, 176, 178, 183, 214, 230, 238, 269, 383, 408, 413, 416, 418, 419, 444, 489, 503, 513, 524, 537, 564, 596, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 633, 636, 638, 651, 655, 659, 678, 706, 736, 789, 798, 799, 845, 846, 882, 894, 897, 898, 899, 907, 908, 909, 912, 935, 998, 1001, 1002, 1005, 1014, 1016, 1017, 1019, 1023, 1041, 1044, 1045, 1047], "bound_": 537, "boundari": [2, 50, 53, 62, 63, 64, 67, 70, 91, 93, 133, 136, 142, 152, 156, 161, 171, 172, 174, 183, 187, 197, 213, 221, 239, 244, 247, 273, 285, 298, 300, 301, 303, 305, 310, 312, 315, 328, 333, 335, 336, 337, 338, 339, 340, 342, 348, 349, 356, 372, 406, 415, 416, 418, 450, 456, 505, 537, 550, 551, 570, 589, 590, 592, 632, 736, 762, 801, 834, 847, 853, 855, 856, 857, 880, 884, 901, 902, 907, 909, 910, 913, 935, 996, 1005, 1008, 1012, 1015, 1016, 1017, 1023, 1033, 1035, 1037, 1046, 1047, 1048, 1050], "bounding_ax_": [383, 633], "boundscheck": [364, 377], "bourassa": 415, "bourbeau": [1040, 1041, 1042], "bourboux": 1044, "bourguignat": 1038, "bournhonesqu": 1043, "bousquet": 901, "boutili": 1014, "boutsidi": 413, "bow": 409, "bown": 1039, "bowyer": 1051, "box": [43, 49, 66, 88, 187, 188, 233, 287, 310, 314, 383, 413, 415, 513, 556, 557, 881, 893, 917, 919, 1002, 1003, 1009, 1012, 1018, 1041, 1049], "boxplot": [49, 111, 147, 186, 189, 284, 319], "boxplot_runtim": 49, "boxstyl": [48, 312], "boy": 1047, "boyd": 998, "boyl": [1050, 1051], "boyuan": [1037, 1038, 1039], "bp": [49, 147, 168, 200, 202, 373, 1010], "bpo": 879, "br": 136, "br_estim": 181, "bracket": [376, 998], "bradi": 1040, "bradlei": [168, 373, 998], "bradshaw": [1036, 1037, 1040], "bradypu": [50, 303, 371, 499], "bradypus_variegatus_0": 50, "brain": 370, "branch": [363, 374, 376, 379, 380, 408, 415, 442, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 913, 914, 915, 916, 918, 1005, 1009, 1018], "branching_factor": 442, "brand": [391, 394], "brandon": [1039, 1040, 1047, 1048], "brandt": 1044, "brandyn": 1033, "brault": 1040, "braun": 1041, "bravi": 1039, "braycurti": [450, 457, 700, 779, 780, 781, 1005], "braycurtisdist": 700, "brc": [408, 442], "brdav": 1051, "bre": [2, 635, 1018], "bread": 1026, "breadth": [845, 846, 850, 1026, 1035], "breadth_first": [845, 846, 850], "break": [2, 55, 74, 80, 102, 112, 183, 202, 205, 218, 246, 257, 287, 322, 330, 335, 351, 353, 376, 380, 382, 389, 408, 469, 513, 640, 775, 779, 782, 798, 878, 885, 890, 907, 910, 924, 998, 1001, 1010, 1012, 1017, 1022, 1023, 1033, 1034, 1040, 1041, 1043, 1045, 1049], "break_ti": [348, 907, 910, 1017, 1043], "breakdown": [111, 112, 229, 680, 998], "breakdown_": 680, "breast": [2, 168, 369, 501, 1010, 1028, 1038], "breast_canc": 332, "breast_cancer_data": 168, "brecht": 642, "bredin": 1037, "breiman": [188, 412, 415, 517, 518, 519, 556, 557, 565, 566, 635, 913, 914, 1010, 1018], "brekk": 1048, "brendan": [73, 440, 454, 1049, 1050, 1051], "brenden": 1047, "brenner": 1002, "breno": [1040, 1041], "brent": [1037, 1041, 1042], "brentfagan": 1042, "brett": [1036, 1038, 1039, 1040, 1041, 1048], "brettingen": 1039, "breuer": 1044, "breunig": [408, 450, 457, 851, 1008], "breve": 1049, "brevin": [1049, 1050], "brew": [145, 374, 394], "brian": [0, 398, 709, 1002, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1046, 1047], "brice": [1045, 1046], "bridg": [388, 999], "brief": [376, 1000], "briefli": [279, 375, 389, 415, 991, 1043], "brier": [2, 61, 62, 64, 406, 710], "brier1950": 1002, "brier_scor": 61, "brier_score_loss": [2, 61, 62, 406, 1002, 1041, 1042, 1043, 1051], "brigata": 373, "bright": 340, "brighter": 178, "brigi": [1044, 1045], "brigitta": [1043, 1044, 1045, 1049, 1051], "bring": [186, 310, 413, 677, 679, 999, 1026], "british": 416, "brittl": [74, 408], "broad": [376, 390, 1021], "broadcast": 628, "broader": [312, 998, 1025], "broadli": [390, 408], "brocchini": 1045, "brochart": 1050, "brockherd": 1035, "brodersen": 709, "broke": 1040, "broken": [394, 412, 600, 601, 636, 721, 927, 1002, 1018, 1036, 1040, 1041, 1042, 1044, 1047], "brook": [1036, 1037, 1045], "brought": [185, 554, 555, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "brown": [50, 118, 303, 371, 499, 629, 992, 1038, 1040, 1041, 1042, 1045], "browser": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 376, 384, 1012, 1050], "broyden": 998, "brr": 193, "brr_poli": 193, "brr_score": 193, "bruce": [1043, 1044], "brucher": [0, 398, 1033], "brummitt": [1040, 1041], "brunak": 744, "brunner": 1037, "bruno": [1044, 1045, 1046, 1051], "brutal": 340, "brute": [290, 388, 403, 412, 419, 444, 446, 450, 457, 633, 634, 689, 690, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 1009, 1028, 1037, 1041, 1045, 1048, 1049, 1050, 1051], "bry": [205, 221], "bryan": [1033, 1036, 1042, 1043, 1046], "br\u00f6mmel": [1047, 1048], "br\u00fblade": 316, "bsa": 765, "bsas_in_radian": 765, "bscikit": 1033, "bsd": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 382, 388], "bsh": 1048, "bsmtfinsf1": [143, 154], "bsmtfinsf2": 143, "bsmthalfbath": 143, "bsmtunfsf": 154, "bspline": 884, "bsplines_": [213, 884], "bsr": [931, 932, 1046], "bt": 416, "btol": [673, 675], "buck": 628, "budarz": 1046, "buddha": 1038, "budget": [0, 143, 840, 841, 842, 843, 844, 991], "bueno": 765, "buffer": [83, 1046, 1051], "buffer_mb": 1033, "bug": [246, 319, 320, 321, 322, 323, 324, 325, 326, 327, 374, 378, 379, 380, 381, 384, 388, 390, 1022, 1033, 1034, 1035, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "bugfix": [1033, 1047], "buguen": 1033, "buhmann": 709, "build": [0, 2, 7, 17, 35, 43, 46, 55, 68, 78, 88, 100, 106, 124, 134, 142, 144, 151, 157, 165, 167, 180, 181, 183, 186, 220, 275, 278, 287, 289, 290, 307, 308, 311, 316, 317, 353, 359, 363, 364, 365, 372, 378, 379, 380, 381, 382, 390, 394, 401, 408, 412, 415, 416, 442, 490, 502, 504, 525, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 586, 587, 589, 590, 592, 628, 629, 631, 692, 714, 715, 802, 806, 810, 819, 825, 827, 866, 883, 885, 913, 914, 915, 916, 918, 945, 949, 991, 992, 999, 1002, 1006, 1008, 1012, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1033, 1036, 1038, 1039, 1040, 1042, 1045], "build_analyz": [416, 589, 590, 592, 1043], "build_preprocessor": [416, 589, 590, 592, 1043], "build_projection_oper": 53, "build_token": [57, 416, 589, 590, 592], "build_tool": [376, 380, 384], "builder": [47, 49, 347, 380], "buildtool": 374, "built": [2, 25, 66, 116, 132, 134, 135, 142, 144, 188, 220, 273, 287, 303, 319, 356, 358, 363, 371, 374, 376, 377, 378, 380, 382, 384, 385, 388, 389, 390, 394, 402, 408, 409, 412, 415, 417, 445, 504, 554, 555, 556, 557, 560, 561, 562, 563, 589, 590, 594, 598, 640, 641, 642, 643, 644, 647, 648, 653, 659, 661, 662, 663, 664, 673, 674, 675, 676, 682, 804, 805, 812, 836, 839, 845, 846, 915, 916, 954, 985, 998, 1002, 1003, 1015, 1016, 1018, 1021, 1026, 1033, 1036, 1037, 1039, 1045, 1051], "builtin": 1017, "buitinck": [0, 398, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "bulk": [279, 419, 444], "bulk_benchmark": 49, "bulk_benchmark_estim": 49, "bulk_runtim": 49, "bull": 1040, "buluttekin": 1043, "bumblebe": 1046, "bunch": [2, 50, 126, 246, 369, 370, 371, 464, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 568, 569, 570, 571, 633, 634, 635, 864, 865, 913, 914, 915, 916, 958, 961, 1026, 1038, 1040, 1043, 1045, 1049], "bundl": [1041, 1042], "bupu": 187, "burden": [376, 877, 1022], "bureau": 371, "buri": 376, "burjek": 1033, "burk": [0, 360, 1048], "burn": [1040, 1041], "burst": 1002, "busch": [1041, 1042, 1044], "bush": [45, 371], "busi": [43, 212, 270, 327, 384, 388, 407, 789, 998, 1002, 1026], "business_metr": 264, "business_scor": 264, "bussonni": [1033, 1045], "butler": [474, 1036, 1044, 1045], "butlerdavi": 474, "butter": 1026, "button": [376, 384], "butyugina": 1049, "buuren": [628, 992], "buzenet": [1048, 1049], "bv_bunch": 50, "bwignal": 1036, "bypass": [407, 409, 600, 647, 653, 823, 913, 914, 915, 916, 1049], "byproduct": 236, "byrd": 659, "byron": 1045, "byte": [86, 416, 487, 504, 509, 510, 583, 589, 590, 592, 966, 1033, 1040, 1041, 1048, 1051], "bz2": [55, 509, 510], "bz2file": 55, "bzip2": 1033, "b\u00e9gude": 316, "c": [2, 43, 45, 46, 47, 50, 51, 52, 57, 61, 62, 64, 66, 67, 70, 74, 75, 77, 78, 85, 89, 90, 92, 93, 94, 98, 103, 104, 106, 116, 118, 125, 126, 134, 136, 137, 142, 143, 150, 152, 153, 155, 156, 161, 168, 171, 172, 173, 174, 178, 191, 197, 201, 203, 204, 205, 206, 208, 210, 219, 221, 223, 224, 225, 226, 228, 229, 232, 234, 236, 237, 244, 245, 247, 251, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 273, 275, 279, 281, 290, 293, 296, 298, 299, 300, 301, 303, 305, 306, 308, 310, 311, 312, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 331, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 356, 357, 363, 364, 370, 371, 372, 373, 374, 376, 377, 378, 379, 381, 384, 385, 388, 394, 395, 399, 405, 406, 408, 409, 410, 411, 412, 413, 415, 417, 421, 437, 442, 443, 446, 447, 449, 459, 468, 475, 524, 529, 535, 539, 541, 542, 548, 550, 551, 591, 608, 609, 611, 632, 640, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 673, 674, 680, 686, 687, 689, 690, 693, 694, 709, 715, 716, 719, 732, 736, 742, 743, 759, 760, 801, 815, 824, 830, 832, 840, 841, 842, 843, 844, 845, 846, 852, 854, 861, 876, 878, 879, 880, 884, 886, 900, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 920, 931, 932, 964, 991, 994, 995, 997, 998, 999, 1000, 1002, 1004, 1005, 1007, 1009, 1012, 1014, 1016, 1017, 1018, 1021, 1026, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1049, 1051], "c0": [143, 242, 316], "c1": [98, 143, 178, 242, 316], "c2": [98, 143, 178, 242, 316], "c22": 324, "c26": 324, "c3": [98, 143, 316], "c4": [98, 316, 1024, 1028], "c5": [98, 1024, 1028], "c56poni": 1043, "c6": 98, "c99": 1021, "c_": [50, 62, 63, 64, 91, 111, 121, 142, 145, 151, 152, 161, 172, 210, 225, 228, 239, 296, 313, 315, 334, 340, 348, 349, 408, 660, 715, 716, 719, 1002], "c_0": [994, 1000], "c_1": 999, "c_2": [408, 999], "c_2d_rang": 340, "c_e": 408, "c_i": [408, 1005], "c_j": [408, 1007], "c_jh_j": 1007, "c_k": 550, "c_option": 104, "c_p": 998, "c_q": 408, "c_rang": 340, "c_scale": 347, "ca": [168, 373, 408, 442, 913, 914, 1014, 1018], "cabernet": 316, "cabin": 324, "cablevis": 51, "cabrera": 1043, "cach": [2, 52, 87, 99, 183, 271, 290, 291, 293, 298, 302, 363, 364, 371, 390, 441, 445, 450, 468, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 503, 509, 510, 801, 847, 849, 865, 866, 903, 907, 908, 909, 910, 911, 986, 1005, 1017, 1023, 1036, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1051], "cache_path": 1005, "cache_s": [468, 903, 907, 908, 909, 910, 911, 1017], "cached_pip": [104, 409], "cachedir": [87, 104, 385, 409], "caching_dir": 986, "caherrera": 1046, "cai": 1046, "caicedo": 1033, "cailean": 1051, "cainei": 1051, "caio": [1039, 1041, 1043], "caj": 51, "caje": 1034, "cal_clf": 63, "cal_clf_prob": 63, "cal_hous": 371, "cal_scor": 63, "calcot": 1046, "calcsiz": 374, "calcul": [2, 46, 63, 64, 69, 80, 92, 111, 132, 133, 134, 138, 155, 182, 183, 189, 216, 217, 229, 244, 246, 269, 270, 276, 280, 285, 289, 338, 344, 345, 359, 363, 383, 390, 399, 405, 406, 408, 412, 413, 415, 419, 438, 443, 444, 446, 448, 450, 451, 453, 455, 456, 471, 472, 478, 481, 537, 548, 564, 565, 570, 598, 612, 621, 633, 634, 635, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 680, 682, 685, 689, 691, 693, 695, 708, 717, 730, 731, 736, 737, 739, 745, 755, 765, 770, 772, 773, 774, 775, 779, 782, 784, 785, 788, 789, 790, 793, 794, 796, 808, 810, 826, 830, 843, 845, 846, 883, 884, 885, 891, 895, 905, 906, 937, 951, 994, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1010, 1012, 1015, 1017, 1023, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "cald": 900, "caleb": 1045, "calibr": [2, 52, 66, 137, 149, 156, 230, 242, 264, 270, 272, 390, 399, 437, 438, 439, 513, 516, 565, 570, 659, 660, 677, 710, 730, 742, 785, 788, 789, 800, 823, 831, 843, 902, 905, 940, 991, 998, 1002, 1015, 1017, 1023, 1024, 1028, 1030, 1037, 1039], "calibrated_classifi": 63, "calibrated_classifiers_": [63, 406, 437], "calibrated_clf": 437, "calibrated_df": [62, 64], "calibrated_forest": 991, "calibratedclassifiercv": [2, 61, 62, 63, 359, 390, 399, 406, 677, 800, 823, 991, 1017, 1022, 1037, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "calibratedclassifiercvifittedcalibratedclassifiercv": 63, "calibration_curv": [2, 61, 406, 437, 438, 1042, 1047, 1051], "calibration_displai": [62, 64], "calibrationdisplai": [2, 62, 64, 406, 940, 1046, 1047, 1051], "california": [2, 144, 178, 181, 182, 310, 316, 321, 369, 373, 490, 1028], "calinski": [2, 711, 1039], "calinski_harabasz_scor": [2, 408, 1041], "calinski_harabaz_scor": [1039, 1041], "cali\u0144ski": 408, "call": [52, 53, 55, 80, 83, 87, 103, 118, 132, 139, 145, 165, 170, 174, 176, 178, 185, 187, 200, 209, 212, 213, 216, 230, 240, 246, 250, 252, 253, 264, 270, 271, 279, 283, 285, 287, 290, 292, 315, 317, 321, 322, 351, 352, 353, 358, 363, 364, 365, 371, 376, 377, 378, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 399, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 418, 420, 431, 440, 443, 446, 447, 449, 450, 451, 452, 453, 454, 457, 460, 462, 464, 465, 468, 469, 474, 482, 483, 484, 488, 491, 493, 496, 498, 504, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 578, 583, 584, 589, 590, 592, 598, 603, 608, 609, 611, 612, 615, 621, 628, 629, 630, 631, 632, 633, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 705, 733, 743, 756, 772, 775, 779, 780, 781, 782, 794, 798, 799, 800, 801, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 854, 856, 861, 862, 863, 864, 865, 868, 869, 870, 872, 874, 875, 877, 882, 885, 886, 889, 894, 895, 896, 897, 898, 902, 905, 906, 907, 908, 910, 911, 914, 916, 924, 926, 939, 943, 948, 949, 958, 959, 961, 967, 968, 972, 975, 985, 990, 991, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1014, 1015, 1017, 1018, 1021, 1026, 1028, 1030, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "callabl": [2, 260, 274, 327, 390, 412, 415, 416, 417, 419, 420, 441, 443, 444, 445, 446, 447, 449, 450, 452, 457, 459, 460, 464, 465, 466, 467, 532, 534, 536, 538, 540, 546, 547, 558, 559, 560, 561, 562, 563, 565, 566, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 611, 612, 621, 629, 631, 635, 640, 644, 660, 672, 674, 676, 689, 692, 693, 697, 712, 720, 733, 743, 772, 775, 779, 780, 781, 782, 793, 794, 801, 804, 805, 807, 815, 823, 824, 827, 828, 829, 830, 832, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 869, 878, 900, 901, 907, 908, 909, 910, 911, 962, 968, 971, 985, 991, 1002, 1012, 1033, 1037, 1040, 1041, 1042, 1043, 1045, 1047, 1049], "callback": [532, 538, 540, 546, 547, 854, 967, 1022, 1049], "callbl": 847, "calle": [2, 246, 959], "caller": [2, 246, 409, 647, 648, 653, 661, 662, 663, 682, 895, 896, 958, 959, 977, 978, 979, 1042], "callgrin": 382, "callgrind": 379, "calm": 51, "caltech": 351, "calvin": [1036, 1037], "calvo": [1041, 1042], "cambridg": [371, 413, 591, 840, 844, 998, 1000, 1004], "came": 1001, "camera_ind": 53, "camil": [1041, 1049, 1050], "camila": 1043, "camilaagw": 1043, "camilo": 1039, "campello": [408, 446], "campustrampu": 1040, "can": [0, 11, 19, 25, 37, 43, 44, 46, 47, 48, 49, 51, 52, 54, 57, 58, 61, 62, 63, 64, 67, 68, 69, 72, 75, 77, 78, 80, 82, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 102, 103, 104, 105, 109, 110, 111, 112, 113, 116, 121, 123, 124, 125, 126, 127, 129, 130, 132, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 163, 164, 165, 166, 167, 168, 170, 175, 176, 177, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 198, 200, 202, 204, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 220, 228, 229, 230, 232, 233, 234, 239, 240, 241, 242, 243, 245, 246, 249, 250, 253, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 277, 279, 281, 282, 283, 284, 285, 287, 289, 290, 292, 294, 295, 296, 297, 299, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 331, 333, 334, 337, 338, 340, 343, 344, 347, 351, 352, 353, 357, 358, 359, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 389, 390, 391, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 431, 433, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 472, 482, 483, 484, 487, 497, 500, 504, 509, 510, 513, 522, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 580, 581, 582, 583, 584, 585, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 631, 633, 635, 636, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 690, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 705, 708, 710, 712, 713, 719, 721, 722, 723, 724, 725, 727, 728, 730, 731, 733, 734, 738, 739, 740, 741, 744, 747, 753, 756, 757, 758, 759, 760, 764, 780, 781, 783, 784, 785, 786, 788, 789, 790, 795, 796, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 862, 863, 864, 865, 868, 869, 870, 872, 873, 874, 878, 879, 880, 883, 884, 885, 890, 897, 898, 902, 903, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 917, 918, 921, 922, 925, 927, 929, 931, 935, 937, 943, 946, 948, 949, 956, 958, 961, 964, 967, 971, 972, 975, 982, 985, 986, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1026, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "canberra": [450, 457, 700, 779, 780, 781, 1005], "canberradist": 700, "cancel": [415, 416, 764], "cancer": [2, 168, 369, 407, 501, 594, 595, 852, 1010, 1028, 1038], "candela": 373, "candid": [106, 260, 268, 271, 278, 321, 365, 376, 380, 408, 415, 448, 450, 801, 804, 805, 813, 815, 998, 1005, 1018, 1039], "candidate_idx": 269, "cannon": 1048, "cannot": [43, 52, 75, 89, 107, 113, 120, 125, 186, 187, 198, 212, 230, 246, 283, 310, 340, 347, 365, 375, 377, 382, 388, 390, 391, 396, 402, 408, 409, 410, 412, 413, 415, 416, 418, 465, 522, 539, 540, 541, 544, 548, 611, 614, 615, 616, 618, 620, 621, 623, 624, 626, 652, 656, 683, 693, 712, 718, 779, 804, 805, 852, 853, 855, 856, 857, 865, 866, 870, 875, 876, 887, 929, 931, 932, 991, 992, 996, 998, 999, 1002, 1003, 1008, 1012, 1017, 1018, 1022, 1026, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "canon": [2, 51, 390, 406, 415, 482, 483, 485, 769, 1022, 1024, 1028], "canonic": 390, "cant": [1050, 1051], "cantor": [629, 992], "canuma": 1046, "canva": 51, "cao": 408, "cap": [405, 408, 756, 1002, 1042], "capabl": [88, 89, 116, 149, 175, 216, 236, 378, 390, 394, 1003, 1006, 1017, 1018, 1026, 1033, 1042, 1050], "capac": [149, 170, 188], "capit": [49, 62, 326, 497, 807, 824], "capitain": 1051, "cappion": [693, 999], "cappuzzo": 1050, "capsiz": 332, "caption": 102, "captur": [2, 43, 48, 51, 52, 72, 74, 116, 146, 151, 163, 175, 186, 193, 198, 212, 216, 261, 283, 289, 320, 340, 344, 384, 408, 415, 416, 417, 572, 589, 590, 592, 851, 968, 1002, 1007, 1015, 1019, 1045], "car": 212, "carbal": 1050, "card": 1041, "cardin": [72, 141, 147, 188, 189, 316, 317, 325, 408, 415, 463, 554, 555, 558, 559, 560, 561, 565, 566, 567, 680, 878, 879, 886, 913, 914, 915, 916, 1002, 1003, 1010, 1012, 1047, 1048], "cardiotocogram": 249, "care": [47, 88, 147, 186, 264, 287, 344, 363, 365, 380, 382, 388, 390, 391, 402, 407, 408, 410, 416, 437, 460, 469, 641, 659, 660, 667, 668, 669, 677, 678, 679, 696, 905, 999, 1017, 1026, 1049], "carefulli": [284, 363, 406, 413, 1017], "carei": [1036, 1037, 1038, 1039, 1040], "carett": 1040, "cari": 1045, "carl": [175, 418, 611, 612, 615, 620, 623], "carla": 1049, "carlo": [0, 244, 366, 415, 418, 612, 642, 643, 994, 1007, 1033, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "carlson": 1040, "carlsson": 1036, "carmen": 316, "carnegi": 900, "caro": 1038, "carodorum": 316, "carol": [1039, 1040], "carolin": 1006, "carrascosa": [1026, 1037], "carre\u00f1o": 1048, "carri": [51, 67, 134, 182, 264, 270, 273, 278, 283, 306, 312, 353, 391, 416, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1026], "carrillo": 1038, "carsten": 1046, "cart": [1024, 1028], "carter": [1039, 1040, 1048, 1051], "cartesian": [103, 405, 634, 1005, 1048], "cartman_nabana": 1043, "cartograph": 191, "cartographi": 998, "caruana": [62, 64, 406, 437, 439], "carvaj": 1033, "casado": 1044, "casagrand": [1041, 1042], "casalegno": 1045, "cascad": 373, "case": [2, 30, 43, 46, 47, 52, 62, 64, 70, 72, 82, 85, 88, 90, 94, 99, 103, 104, 112, 116, 125, 127, 137, 139, 140, 146, 147, 154, 165, 167, 168, 170, 177, 186, 187, 189, 198, 199, 202, 204, 212, 213, 214, 216, 217, 220, 226, 228, 229, 230, 239, 243, 244, 245, 246, 249, 250, 260, 263, 264, 267, 269, 270, 271, 273, 276, 277, 279, 287, 290, 293, 297, 307, 310, 312, 315, 317, 319, 322, 327, 344, 351, 352, 353, 357, 358, 359, 363, 364, 365, 370, 371, 376, 377, 378, 380, 381, 382, 383, 385, 388, 389, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 437, 440, 443, 444, 446, 447, 451, 453, 463, 464, 465, 467, 474, 497, 509, 510, 516, 540, 542, 543, 544, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 589, 592, 594, 595, 598, 603, 607, 610, 611, 612, 626, 628, 629, 631, 633, 648, 649, 654, 657, 658, 659, 660, 662, 664, 667, 669, 670, 673, 675, 676, 677, 681, 683, 684, 685, 686, 687, 688, 700, 704, 709, 710, 713, 717, 719, 721, 722, 724, 727, 729, 730, 731, 735, 736, 739, 743, 744, 746, 747, 749, 751, 754, 755, 757, 764, 779, 782, 784, 785, 786, 788, 789, 790, 791, 795, 797, 799, 801, 804, 805, 807, 815, 819, 824, 825, 826, 827, 828, 829, 830, 832, 834, 842, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 865, 872, 874, 875, 878, 879, 880, 883, 884, 885, 886, 889, 895, 896, 897, 898, 905, 907, 910, 913, 914, 920, 925, 927, 937, 949, 950, 990, 991, 992, 994, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1016, 1017, 1018, 1021, 1022, 1026, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "caselli": [1041, 1042], "cash": 998, "cashman": 1043, "casino": [1047, 1048], "cass": 1039, "cassi": 316, "cast": [50, 52, 86, 212, 233, 370, 391, 416, 497, 645, 646, 647, 653, 657, 658, 661, 662, 663, 664, 665, 666, 674, 676, 966, 1040, 1041, 1042, 1043, 1046, 1048, 1050], "castachick": 1044, "castello": 1037, "castor": 1044, "caswel": [1046, 1049], "cat": [51, 103, 187, 188, 249, 322, 323, 324, 325, 326, 327, 371, 416, 488, 583, 713, 719, 755, 784, 886, 1002, 1012, 1042, 1043, 1045], "cat_column": 249, "cat_linear_processor": 154, "cat_proc": [241, 320], "cat_selector": 154, "cat_str": 57, "cat_tree_processor": 154, "catajara": 1043, "catalfo": 1041, "catalin": 643, "catastroph": [264, 317, 764, 1022], "catch": [79, 95, 307, 364, 384, 385], "catch_warn": [79, 95, 246, 306, 307], "categor": [2, 43, 103, 133, 139, 149, 154, 183, 186, 187, 188, 212, 230, 249, 251, 253, 264, 317, 322, 324, 325, 365, 368, 370, 371, 381, 390, 409, 416, 466, 467, 489, 490, 497, 506, 562, 563, 582, 583, 608, 609, 633, 634, 649, 659, 660, 670, 681, 710, 828, 840, 841, 842, 843, 844, 866, 868, 872, 873, 876, 878, 879, 886, 900, 901, 922, 992, 998, 1009, 1010, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1033, 1034, 1037, 1038, 1041, 1043, 1045, 1048, 1049, 1050, 1051], "categori": [2, 25, 57, 79, 95, 102, 103, 143, 154, 186, 187, 212, 220, 227, 249, 264, 271, 306, 307, 312, 316, 317, 321, 324, 326, 333, 351, 352, 353, 370, 371, 385, 408, 409, 415, 416, 418, 488, 497, 498, 504, 562, 563, 649, 659, 660, 670, 681, 744, 759, 760, 841, 878, 879, 886, 943, 944, 992, 998, 999, 1000, 1004, 1010, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "categorical_column": [43, 143, 186, 188, 249, 467], "categorical_columns_selector": 249, "categorical_columns_subset": 143, "categorical_crossentropi": [1043, 1047], "categorical_encod": 188, "categorical_featur": [43, 103, 143, 149, 187, 264, 316, 321, 322, 323, 324, 326, 381, 388, 415, 562, 563, 633, 634, 1009, 1041, 1045, 1048, 1050], "categorical_preprocessor": [251, 316], "categorical_transform": 103, "categoricaldtyp": 388, "categoricalnb": [2, 840, 842, 843, 844, 1004, 1043, 1044, 1045, 1046, 1048], "categories_": [878, 879, 886, 1012, 1041, 1048], "categoris": [943, 944], "category_1_fold": 504, "category_2_fold": 504, "category_count_": 841, "category_s": 352, "categr": 1010, "caterpillar": 51, "cathi": [1037, 1043], "catindex": 187, "catplot": 260, "caught": [357, 376, 384, 402], "caus": [43, 62, 64, 146, 171, 186, 210, 212, 216, 217, 230, 289, 317, 344, 353, 359, 374, 381, 406, 408, 413, 414, 416, 418, 443, 447, 449, 459, 510, 533, 583, 590, 611, 612, 779, 840, 841, 842, 844, 869, 878, 880, 883, 884, 931, 932, 992, 998, 1002, 1010, 1012, 1015, 1022, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051], "causal": [183, 184, 208, 658, 786, 831, 1023], "causat": 186, "caution": [186, 264, 380, 440, 454, 1041], "cautiou": 1040, "caveat": [412, 417, 418], "cawlei": [275, 1002], "cax": [66, 173, 281], "ca\u00f1ardo": 1036, "cb": [173, 243, 259], "cbar_ax": 281, "cbar_kw": [193, 198], "cc": 374, "cc18": 370, "cc_home": [913, 914], "cca": [2, 247, 411, 483, 485, 1003, 1037, 1041, 1042, 1043, 1045, 1047, 1051], "ccat": 371, "ccf2002": 994, "cclauss": 1041, "cco": 351, "ccp_alpha": [319, 355, 558, 559, 560, 561, 565, 566, 913, 914, 915, 916, 1018, 1043], "ccp_path": [913, 914, 915, 916], "cd": [120, 168, 373, 374, 376, 380, 382, 413, 471, 472, 478, 532, 538, 540, 541, 544, 546, 547, 548, 998, 1038, 1048], "cdef": 377, "cdf": 270, "cdist": 1046, "cdivis": 377, "cdot": [270, 344, 405, 408, 413, 414, 418, 615, 616, 620, 623, 624, 871, 994, 996, 1002, 1006, 1012], "cdrig": 1047, "cdt": 57, "cea": [840, 1004], "ceballo": 1047, "ceder": [789, 1002], "ceethinwa": [1045, 1046], "ceh": 1048, "ceil": [149, 249, 558, 559, 560, 561, 564, 565, 566, 567, 595, 672, 804, 805, 913, 914, 915, 916, 1016], "celelibi": 1042, "celeo": 1037, "celeux": 529, "cell": [50, 51, 58, 63, 68, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 195, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 303, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 373, 381, 693, 1002, 1003, 1039, 1047], "cellular": 53, "celsiu": [187, 1009], "cemlyn": 1051, "cen": 744, "censor": 1021, "censu": 371, "center": [0, 2, 36, 43, 46, 47, 48, 53, 61, 63, 69, 70, 72, 73, 75, 77, 78, 82, 83, 86, 88, 89, 92, 93, 94, 96, 97, 112, 125, 129, 144, 145, 146, 147, 166, 168, 182, 187, 195, 205, 207, 212, 213, 223, 224, 235, 236, 239, 240, 249, 255, 258, 259, 265, 271, 281, 295, 298, 300, 306, 310, 312, 313, 323, 331, 338, 340, 341, 342, 346, 352, 353, 371, 372, 373, 381, 408, 410, 411, 413, 414, 415, 421, 440, 442, 443, 446, 447, 448, 449, 452, 454, 459, 460, 461, 462, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 502, 513, 525, 535, 536, 542, 545, 551, 607, 610, 611, 612, 633, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 679, 691, 695, 697, 798, 870, 871, 874, 883, 885, 895, 896, 905, 906, 996, 998, 999, 1001, 1009, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1050], "center1": 99, "center2": 99, "center3": 99, "center4": 99, "center_": 883, "center_box": [93, 513], "centers_0": 313, "centers_1": 313, "centers_init": 92, "cento": 374, "centr": 153, "central": [0, 53, 214, 371, 377, 408, 1008, 1021], "centrality_scor": 55, "centroid": [2, 77, 90, 91, 109, 183, 291, 298, 313, 323, 352, 372, 399, 408, 442, 443, 446, 447, 448, 449, 452, 459, 460, 462, 505, 550, 632, 852, 1023, 1024, 1028, 1033, 1037, 1040, 1045, 1049], "centroids_": [442, 446, 852], "ceo": 1026, "cerda": 1047, "certain": [52, 88, 144, 149, 186, 217, 229, 246, 270, 290, 314, 344, 359, 371, 372, 376, 380, 390, 393, 402, 404, 408, 413, 417, 639, 650, 654, 659, 664, 685, 865, 870, 905, 991, 994, 998, 999, 1002, 1003, 1006, 1012, 1017, 1021, 1038, 1042, 1045, 1048], "certainli": [86, 102, 186, 352, 407], "certainti": [270, 378, 1002], "ceshin": 1039, "cest": 1002, "cetina": 1045, "cf": [317, 407, 408, 411, 442, 701, 998, 1012, 1022], "cflag": 374, "cft": 408, "cftree": 442, "cg": [308, 659, 660, 673, 675, 688, 998, 1037, 1038, 1040, 1044, 1046, 1047, 1050, 1051], "cga": 178, "cgi": 898, "cgohlk": [1036, 1037], "cgroup": [1046, 1047], "cgsavard": [1043, 1044], "ch6": 531, "chacon": 706, "chac\u00f3n": [408, 706], "chad": 1050, "chadi": 1041, "chai": [1045, 1048, 1049], "chain": [2, 35, 101, 107, 134, 160, 183, 242, 278, 281, 287, 288, 290, 293, 308, 359, 368, 388, 390, 418, 497, 503, 542, 612, 628, 659, 739, 801, 831, 834, 836, 837, 838, 839, 865, 866, 885, 991, 992, 1003, 1007, 1019, 1023, 1026, 1028], "chain_jaccard_scor": 289, "chain_method": [836, 1051], "chain_method_": 836, "chaitanya": 1044, "chaitanyamog": 1045, "chakhchoukh": 112, "chakravarti": [636, 638], "chalearn": 1002, "challeng": [51, 154, 170, 187, 193, 230, 239, 365, 371, 372, 402, 408, 410, 462, 472, 1002, 1008, 1026], "chalmer": 1047, "chalmerlow": 1036, "chalulu": 1048, "chan": [0, 843, 885, 1051], "chanc": [2, 71, 73, 82, 134, 163, 183, 189, 212, 220, 227, 230, 270, 276, 279, 280, 316, 347, 352, 359, 375, 407, 408, 412, 701, 703, 705, 706, 709, 717, 756, 758, 787, 796, 830, 1002, 1010, 1018, 1023, 1049], "chance_level_": [701, 703, 1049], "chance_level_kw": [249, 701, 703, 1049], "chandra": [1043, 1044, 1047], "chang": [2, 46, 62, 63, 64, 120, 124, 125, 137, 140, 147, 171, 181, 185, 186, 189, 201, 213, 214, 216, 217, 250, 251, 264, 265, 270, 277, 280, 284, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 340, 344, 353, 357, 358, 359, 363, 364, 365, 371, 378, 379, 380, 381, 384, 388, 390, 399, 408, 412, 415, 416, 418, 420, 428, 433, 437, 440, 443, 444, 447, 449, 452, 454, 459, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 494, 495, 497, 505, 509, 510, 513, 514, 515, 523, 528, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 589, 590, 591, 592, 594, 595, 598, 603, 611, 612, 614, 615, 616, 618, 620, 621, 623, 624, 626, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 693, 695, 701, 705, 708, 713, 717, 718, 730, 731, 737, 738, 756, 758, 779, 784, 785, 786, 788, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 815, 819, 820, 822, 823, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 855, 856, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 877, 878, 884, 885, 886, 893, 894, 899, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 924, 929, 931, 932, 944, 949, 960, 967, 968, 971, 991, 992, 993, 1001, 1002, 1003, 1005, 1012, 1015, 1016, 1017, 1018, 1022, 1031, 1032, 1052], "changed_onli": 1044, "changedbehaviorwarn": 1045, "changedbehaviourwarn": 1042, "changelog": [324, 380, 390, 1031, 1052], "changing_param": 46, "changing_param_valu": 46, "changyao": [1048, 1049], "channel": [364, 371, 374, 394, 416, 494, 495, 584, 585, 587, 588, 1025], "channel_prior": 374, "chapman": 998, "chapter": [120, 359, 378, 408, 413, 415, 418, 531, 533, 535, 615, 620, 623, 644, 992, 995, 998, 1017, 1018], "char": [416, 589, 590, 592, 1033], "char_wb": [416, 589, 590, 592], "charact": [353, 376, 381, 390, 416, 504, 509, 510, 589, 590, 592, 917, 1007, 1033, 1046, 1048], "character": [75, 230, 355, 408, 412, 999], "characteris": 1005, "characterist": [2, 79, 95, 168, 175, 183, 239, 240, 252, 262, 264, 265, 267, 272, 310, 359, 371, 373, 381, 406, 407, 412, 415, 418, 504, 505, 624, 639, 659, 703, 707, 709, 728, 783, 789, 790, 820, 831, 834, 872, 910, 998, 1023], "chardet": 416, "chardetect": 416, "charg": [0, 264, 376], "charikar": 994, "charl": [64, 264, 765, 1033, 1036, 1039, 1043, 1045, 1048], "charli": [1040, 1041, 1049], "charlton": 1040, "charra": [1048, 1050, 1051], "charron": [1026, 1036, 1037, 1044, 1045, 1046], "charset": [1033, 1035], "charset_error": 1035, "chart": [72, 144, 275, 396, 1003, 1036], "chartbeat": 1026, "chase": [51, 1033], "chasnovski": 1044, "chat": 1026, "chatterje": 1044, "chaudhuri": 446, "chauhan": [1041, 1042, 1048, 1049], "chaumond": [1026, 1041], "chauvin": 744, "chavez": [45, 371], "chawla": 1043, "chayant": 1040, "chazalon": 1047, "cheaper": [187, 408, 418, 674, 994, 998], "cheat": [52, 340, 396, 1006, 1016, 1035], "chebee7i": 1037, "chebyshev": [450, 457, 700, 779, 780, 781, 1005], "chebyshevdist": 700, "check": [2, 41, 43, 44, 47, 55, 80, 86, 89, 124, 132, 140, 154, 170, 183, 185, 187, 188, 199, 200, 202, 212, 233, 246, 256, 262, 264, 279, 287, 322, 331, 358, 363, 364, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 388, 389, 390, 394, 395, 399, 402, 409, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 491, 503, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 688, 689, 690, 691, 692, 693, 694, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 931, 932, 933, 943, 944, 954, 956, 957, 958, 962, 963, 985, 986, 987, 989, 990, 997, 998, 999, 1002, 1017, 1018, 1022, 1023, 1026, 1028, 1033, 1034, 1036, 1040, 1044, 1045, 1046, 1047, 1048, 1050], "check_arrai": [2, 378, 385, 468, 535, 903, 990, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "check_classifier_multioutput": 1043, "check_consistent_length": 2, "check_cv": [2, 390, 1038], "check_decision_proba_consist": 1040, "check_estim": [2, 319, 378, 390, 924, 944, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "check_estimator_sparse_arrai": 1051, "check_estimator_sparse_data": 1051, "check_estimator_sparse_matrix": 1051, "check_estimators_fit_returns_self": 944, "check_estimators_pickl": 1050, "check_fit_idempot": 1042, "check_increas": 2, "check_input": [535, 549, 647, 648, 653, 661, 662, 663, 682, 688, 913, 914, 915, 916, 1041], "check_invers": [409, 465, 869, 1012, 1041, 1047, 1048], "check_is_fit": [2, 89, 132, 246, 379, 385, 390, 1043, 1046, 1047], "check_memori": [2, 385, 390, 1040], "check_metadata": 246, "check_methods_sample_order_invari": [1045, 1047], "check_methods_subset_invari": [1041, 1047], "check_nam": 924, "check_pairwise_arrai": 1042, "check_param": 990, "check_random_st": [2, 94, 228, 234, 242, 248, 378, 385, 390], "check_regressor_multioutput": 1043, "check_requires_y_non": 1047, "check_sample_weights_pandas_seri": 1041, "check_scalar": [2, 1047], "check_scor": [2, 390, 1051], "check_set_param": 1041, "check_symmetr": 2, "check_transformer_data_not_an_arrai": 1043, "check_transformers_unfitted_stateless": 1049, "check_x_i": [2, 378, 385, 990, 1037, 1041, 1042, 1047], "checkbox": 376, "checked_cv": 825, "checker": [2, 380, 825], "checkerboard": [2, 58, 405, 451, 453, 512, 514], "checking_statu": 264, "checkingclassifi": 1043, "checklist": [379, 380], "checkout": [374, 376, 380, 384], "checks_gener": 943, "checksum": [492, 1045], "cheeseman": 373, "chege": 1047, "chemic": 373, "chemometr": 373, "chen": [109, 110, 410, 415, 421, 475, 727, 757, 994, 1002, 1036, 1039, 1040, 1041, 1043, 1046, 1047, 1048, 1049], "chenal": [1042, 1043, 1045], "cherkasski": 998, "chernei": 1051, "chernyi": 1047, "cherri": 380, "cherti": 1037, "cherubin": 1039, "chestervil": 324, "cheuk": [1041, 1042], "cheung": 1034, "chevali": 1045, "chevalli": 1050, "chevron": 51, "chi": [2, 103, 111, 134, 314, 368, 417, 520, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 639, 640, 641, 642, 643, 759, 760, 1028, 1033, 1038, 1039], "chi2": [2, 103, 416, 417, 452, 582, 593, 596, 597, 599, 600, 601, 606, 607, 610, 621, 639, 640, 641, 642, 643, 644, 760, 766, 775, 1033, 1040, 1047], "chi2_featur": 643, "chi2_kernel": [2, 404, 639, 643, 759, 766, 1000, 1034], "chi2_stat": 605, "chi2sampl": 639, "chiang": 1041, "chiara": [0, 367, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "chibuik": 1046, "chicco": 1051, "chief": 1026, "chieh": [1040, 1041], "chigurupati": 1045, "chih": [659, 1038], "chilamkurthi": 1039, "child": [149, 246, 351, 358, 364, 388, 390, 399, 408, 415, 442, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 913, 914, 915, 916, 958, 959, 961, 1018, 1040], "child_idx": 76, "children": [358, 408, 415, 441, 445, 463, 567, 1037, 1050], "children_": [76, 441, 445, 463], "children_left": 358, "children_right": 358, "chime": 375, "chin": [373, 1037], "china": [408, 507, 508, 585, 588], "chines": 1021, "chinmaya": 1040, "chinthala": 1040, "chiotelli": 1042, "chip": [404, 1026], "chisquar": 314, "chitteti": 1047, "chkoar": 1040, "chloe": 1047, "cho": 1044, "choe": 1042, "choi": [998, 1051], "choic": [2, 43, 46, 64, 75, 80, 88, 98, 102, 109, 127, 149, 170, 171, 177, 181, 202, 213, 249, 263, 264, 268, 270, 273, 284, 295, 317, 321, 351, 352, 359, 363, 374, 381, 390, 394, 408, 410, 412, 414, 415, 417, 418, 452, 462, 471, 472, 473, 474, 475, 476, 478, 539, 541, 542, 548, 560, 639, 648, 649, 657, 659, 660, 662, 670, 681, 693, 706, 743, 834, 847, 848, 853, 855, 856, 882, 885, 894, 896, 905, 906, 935, 991, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1010, 1015, 1016, 1017, 1018, 1040, 1043, 1044, 1048, 1049], "choleski": [110, 212, 230, 385, 471, 472, 478, 528, 612, 649, 651, 652, 655, 656, 657, 659, 660, 670, 673, 675, 681, 683, 684, 688, 798, 799, 998, 1036, 1040, 1042, 1045, 1048, 1049], "cholesky_delet": 385, "cholesterol": [168, 373], "chong": 537, "choo": [1048, 1049], "choos": [43, 50, 51, 79, 80, 83, 86, 93, 95, 99, 109, 142, 154, 168, 186, 189, 206, 247, 264, 265, 275, 282, 355, 359, 363, 364, 365, 378, 381, 384, 389, 390, 402, 406, 407, 408, 410, 412, 415, 416, 419, 443, 444, 447, 449, 459, 524, 533, 539, 560, 561, 583, 603, 659, 660, 673, 675, 680, 688, 689, 690, 694, 727, 757, 801, 804, 805, 815, 872, 905, 906, 913, 914, 915, 916, 991, 992, 993, 997, 998, 999, 1000, 1001, 1005, 1012, 1015, 1016, 1017, 1028, 1035, 1036, 1040, 1042, 1044], "choose_check_classifiers_label": 1043, "choose_random_sampl": 378, "choraria": 1045, "chose": [77, 186], "chosen": [47, 58, 80, 105, 154, 171, 186, 187, 202, 213, 229, 247, 263, 264, 265, 267, 273, 284, 352, 359, 363, 388, 407, 408, 410, 411, 415, 418, 440, 446, 449, 451, 453, 454, 460, 497, 524, 536, 558, 559, 560, 561, 562, 563, 565, 566, 648, 654, 657, 659, 660, 662, 664, 672, 677, 678, 679, 680, 681, 691, 695, 795, 798, 799, 801, 804, 805, 815, 835, 854, 905, 906, 913, 914, 915, 916, 949, 991, 994, 996, 998, 999, 1001, 1003, 1008, 1009, 1016, 1018, 1041, 1049, 1050], "chou": [1040, 1041], "choudhari": [1037, 1038, 1047, 1049], "choudhri": 1051, "chowdhuri": [1041, 1047], "choyal": [1040, 1041], "chri": [0, 398, 1033, 1036, 1041, 1042, 1043, 1044, 1047], "chrissobel": 1046, "christ": 57, "christian": [0, 57, 351, 352, 371, 397, 1026, 1033, 1034, 1037, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "christianwaldmann": 1048, "christin": [1048, 1049], "christo": [1042, 1043, 1045, 1047, 1050], "christof": [1037, 1038], "christoph": [187, 413, 418, 533, 611, 612, 615, 620, 623, 798, 998, 1003, 1034, 1038, 1041, 1044, 1045, 1046, 1047, 1048], "christopherlim98": 1047, "chrome": 1012, "chronolog": [371, 498], "chu": [852, 1049], "chuan": 1006, "chugh": 1045, "chuliang": 1046, "chun": [1044, 1045, 1047, 1048, 1049], "chung": [1040, 1041], "chunk": [2, 47, 83, 363, 364, 408, 413, 419, 444, 449, 468, 539, 779, 782, 833, 834, 840, 841, 842, 843, 844, 903, 1004, 1040, 1041, 1042, 1043, 1044], "chunk_siz": 1034, "chunker": 416, "church": [898, 1014], "chyi": [1036, 1037, 1038, 1039, 1040], "ci": [88, 364, 379, 380, 1004, 1039, 1041], "ciccolella": [693, 999], "cice": [1009, 1047], "cichocki": [413, 539, 541, 548], "cimport": [377, 385, 1041], "cindi": [1038, 1046, 1050, 1051], "cio": 370, "cipri\u00e1n": 1047, "circl": [2, 70, 93, 125, 152, 153, 161, 237, 247, 297, 300, 306, 310, 312, 331, 344, 357, 372, 380, 384, 408, 452, 462, 515, 523, 765, 1017], "circle1": 99, "circle2": 99, "circle3": 99, "circle4": 99, "circleci": [52, 174, 176, 178, 179, 240, 256, 308, 376], "circlecl": 0, "circuit": [57, 999], "circular": 53, "circumst": [127, 230, 1005, 1021], "circumstanti": 212, "cirru": [0, 376], "cisco": 51, "citat": [0, 370, 373, 388], "cite": [370, 388, 408], "citi": [409, 416, 466], "citizen": 1012, "city_categori": 409, "city_london": 409, "city_pari": 409, "city_sallisaw": 409, "cityblock": [75, 79, 408, 450, 457, 763, 779, 780, 781, 1005], "cividi": 75, "ciyou": 659, "cj": [1004, 1036, 1037, 1038, 1039, 1040], "cjlin": [191, 370, 487, 509, 510, 659, 1036], "ckdtree": [419, 444, 1035], "cl": [0, 47, 51, 383, 390, 915], "clabel": [173, 223], "clae": 1041, "clai": 1033, "claim": [183, 192, 376, 464, 497, 553, 649, 670, 681, 707, 746, 751, 753, 831, 866, 869, 870, 878, 885, 998, 1023], "claimamount": 230, "claimnb": [212, 230], "clair": 1033, "clamp": [901, 1015], "clang": [374, 377], "clara": [370, 1045], "clare": 1043, "clarifi": [384, 391, 794], "clariti": [166, 376, 384], "clark": 51, "class": [2, 4, 27, 30, 43, 47, 48, 49, 50, 53, 57, 60, 61, 62, 64, 66, 70, 75, 87, 88, 89, 91, 103, 104, 118, 124, 125, 126, 128, 130, 132, 133, 135, 140, 149, 150, 155, 168, 170, 171, 173, 174, 176, 178, 179, 181, 183, 186, 187, 191, 192, 203, 204, 205, 220, 224, 227, 228, 233, 239, 246, 247, 249, 255, 256, 257, 262, 263, 264, 265, 270, 272, 276, 280, 281, 284, 287, 289, 290, 293, 295, 296, 298, 299, 300, 301, 315, 319, 323, 325, 326, 327, 329, 331, 332, 335, 336, 337, 338, 340, 341, 344, 348, 351, 352, 353, 356, 358, 365, 368, 370, 371, 372, 373, 376, 377, 378, 380, 381, 382, 383, 385, 388, 389, 394, 399, 402, 403, 404, 406, 408, 409, 411, 413, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 491, 493, 494, 495, 496, 497, 498, 501, 503, 504, 505, 509, 510, 511, 513, 515, 516, 520, 523, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 576, 578, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 721, 723, 728, 730, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 744, 755, 756, 758, 783, 784, 785, 787, 788, 789, 790, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 936, 937, 939, 940, 941, 943, 944, 954, 957, 958, 959, 962, 967, 969, 971, 972, 985, 991, 992, 993, 994, 996, 997, 998, 999, 1001, 1003, 1004, 1006, 1009, 1010, 1012, 1013, 1015, 1018, 1022, 1023, 1024, 1026, 1028, 1030, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "class1_1": 156, "class2_1": 156, "class_0": [220, 373, 511], "class_1": [220, 373, 511], "class_2": [373, 511], "class_count_": [840, 841, 842, 843, 844], "class_id": [279, 280], "class_index": 88, "class_label": [390, 558, 562, 565, 659, 660, 667, 669, 675, 676, 677, 800, 823, 913, 915, 937, 1017], "class_likelihood_ratio": [2, 273, 1002, 1048], "class_log_prior_": [840, 841, 842, 844], "class_memb": 73, "class_member_mask": 82, "class_nam": [136, 263, 886, 917, 918, 919, 1018, 1049], "class_name0": [424, 442, 443, 445, 447, 449, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 871, 897, 898], "class_name1": [424, 442, 443, 445, 447, 449, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 871, 897, 898], "class_name2": [424, 442, 443, 445, 447, 449, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 871, 897, 898], "class_of_interest": [66, 279, 632, 1050], "class_prior": [371, 840, 841, 842, 844, 1034, 1037], "class_prior_": [552, 843], "class_protein_loc": 287, "class_sep": [167, 300, 516, 800, 823], "class_weight": [2, 45, 342, 390, 558, 562, 565, 659, 660, 667, 669, 675, 676, 677, 678, 905, 907, 910, 912, 913, 915, 936, 937, 991, 1016, 1017, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1047, 1048], "class_weight_": [907, 910, 1048], "class_weight_vect": 936, "classes_": [132, 205, 221, 240, 246, 279, 329, 330, 376, 378, 390, 433, 437, 438, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 594, 595, 611, 632, 659, 660, 667, 669, 675, 676, 677, 698, 701, 703, 789, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 847, 852, 855, 862, 865, 872, 873, 876, 886, 900, 901, 902, 905, 907, 910, 913, 915, 918, 1002, 1013, 1016, 1034, 1037, 1038, 1040, 1043, 1045], "classic": [55, 208, 236, 255, 261, 344, 373, 380, 410, 412, 413, 443, 447, 449, 459, 493, 501, 505, 511, 542, 633, 634, 915, 916, 996, 998, 1001, 1004, 1012, 1021, 1033, 1034, 1038, 1047], "classif": [2, 14, 19, 30, 31, 38, 40, 42, 45, 46, 49, 57, 60, 61, 62, 64, 67, 70, 103, 104, 105, 109, 110, 115, 118, 123, 134, 136, 138, 140, 141, 142, 147, 149, 150, 152, 156, 158, 161, 163, 164, 165, 167, 168, 169, 175, 176, 186, 187, 191, 192, 203, 204, 205, 206, 212, 220, 222, 223, 224, 225, 227, 238, 240, 244, 245, 249, 252, 258, 259, 262, 263, 267, 268, 269, 270, 271, 279, 284, 285, 287, 288, 291, 292, 298, 299, 300, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 329, 334, 335, 336, 340, 343, 345, 346, 347, 348, 349, 350, 352, 353, 359, 363, 365, 369, 370, 371, 373, 378, 381, 385, 389, 390, 403, 406, 407, 408, 409, 412, 413, 415, 416, 417, 425, 437, 469, 475, 482, 487, 488, 489, 491, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 511, 513, 515, 516, 520, 521, 523, 524, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 568, 570, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 607, 610, 611, 612, 614, 615, 623, 632, 633, 634, 644, 659, 660, 667, 669, 675, 676, 677, 698, 704, 706, 709, 713, 714, 716, 717, 719, 727, 728, 730, 731, 735, 736, 739, 742, 744, 755, 757, 759, 760, 762, 783, 784, 785, 787, 788, 789, 790, 795, 797, 800, 801, 802, 804, 805, 806, 807, 815, 819, 820, 823, 824, 825, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 847, 852, 854, 855, 861, 862, 863, 865, 869, 872, 877, 878, 879, 880, 885, 886, 889, 891, 900, 901, 902, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 934, 937, 946, 991, 992, 994, 995, 996, 999, 1000, 1004, 1007, 1009, 1010, 1012, 1013, 1015, 1020, 1021, 1023, 1024, 1025, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "classifi": [2, 30, 45, 46, 47, 48, 60, 63, 65, 66, 68, 70, 89, 102, 103, 104, 105, 106, 125, 126, 128, 130, 134, 135, 136, 137, 138, 141, 142, 145, 152, 155, 156, 161, 164, 165, 166, 167, 172, 183, 188, 189, 191, 192, 203, 204, 205, 210, 212, 219, 221, 224, 227, 230, 239, 242, 244, 246, 247, 252, 263, 264, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 287, 288, 292, 298, 299, 301, 305, 308, 312, 321, 322, 326, 328, 329, 330, 332, 333, 335, 336, 338, 339, 341, 342, 343, 344, 348, 349, 353, 371, 373, 376, 378, 381, 388, 390, 399, 407, 408, 409, 412, 416, 417, 418, 425, 433, 434, 435, 436, 437, 438, 439, 488, 489, 497, 505, 513, 515, 516, 523, 532, 537, 538, 543, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 567, 568, 569, 570, 571, 594, 595, 603, 607, 611, 623, 630, 632, 633, 634, 650, 659, 660, 667, 669, 672, 673, 674, 675, 676, 677, 698, 699, 701, 703, 704, 708, 709, 710, 712, 713, 714, 719, 721, 723, 727, 728, 730, 731, 733, 735, 736, 739, 740, 741, 742, 744, 755, 757, 783, 784, 785, 788, 789, 790, 795, 797, 800, 801, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 853, 855, 856, 861, 862, 863, 865, 866, 872, 885, 886, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 921, 924, 925, 938, 941, 943, 991, 992, 994, 997, 998, 999, 1002, 1003, 1004, 1007, 1010, 1012, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "classification_data": 46, "classification_report": [2, 45, 68, 102, 165, 268, 308, 329, 330, 823, 1002, 1035, 1037, 1041, 1042, 1043, 1045, 1049, 1051], "classificationcriterion": 1041, "classifier_": [89, 246], "classifier_01": 327, "classifier_05": 327, "classifier__c": 103, "classifier__criterion": 251, "classifier__max_depth": 251, "classifier__max_featur": 251, "classifier__min_samples_leaf": 188, "classifier__n_estim": 251, "classifier__n_neighbor": 292, "classifier_idx": 66, "classifier_model": 292, "classifier_other_threshold": 800, "classifier_tag": [924, 938], "classifier_tun": 823, "classifierchain": [2, 289, 390, 399, 837, 839, 1040, 1045, 1048, 1050, 1051], "classifiermixin": [2, 132, 246, 376, 378, 390, 412, 925, 1044], "classifiertag": [2, 924, 938], "classify__c": 104, "classmethod": [383, 438, 632, 633, 698, 699, 700, 701, 702, 703, 807, 824], "classnameprefixfeaturesoutmixin": [2, 378, 432, 1048], "claudio": [373, 1047, 1048, 1050, 1051], "claus": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 388], "clauss": 1050, "clb": 187, "clean": [85, 103, 211, 359, 368, 374, 414, 1008, 1012, 1043], "cleaner": 99, "cleanli": [95, 1033], "cleanup": [376, 1033], "clear": [43, 88, 93, 104, 186, 187, 315, 371, 375, 376, 378, 388, 389, 390, 406, 409, 414, 919, 920, 991, 996, 1044, 1045, 1046, 1051], "clear_data_hom": 2, "clearer": [237, 1017], "clearli": [43, 93, 123, 187, 244, 344, 375, 376, 388, 390, 413, 415, 1003, 1009], "clegg": 1036, "clemen": 1037, "clement": [1040, 1041, 1045], "clenaghan": [1038, 1039], "cleveland": 371, "cleverless": 1035, "clf": [45, 49, 50, 51, 61, 62, 63, 64, 67, 68, 73, 84, 87, 91, 96, 103, 138, 145, 148, 150, 155, 159, 161, 164, 165, 167, 172, 174, 189, 203, 205, 206, 210, 216, 219, 221, 224, 225, 226, 227, 228, 235, 240, 241, 244, 247, 253, 259, 267, 271, 275, 276, 278, 281, 282, 293, 296, 297, 298, 301, 305, 312, 315, 319, 320, 321, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 351, 355, 356, 358, 363, 371, 389, 390, 402, 409, 412, 415, 417, 438, 550, 551, 554, 556, 558, 560, 562, 564, 565, 568, 594, 595, 598, 633, 635, 639, 640, 641, 642, 643, 645, 646, 649, 653, 659, 660, 661, 662, 663, 667, 669, 670, 673, 674, 675, 676, 677, 678, 681, 698, 699, 701, 703, 712, 789, 801, 804, 805, 815, 833, 834, 835, 837, 840, 841, 842, 843, 844, 851, 852, 862, 905, 907, 909, 910, 913, 917, 919, 992, 994, 998, 1002, 1003, 1005, 1006, 1008, 1009, 1016, 1017, 1018], "clf1": [69, 155, 156, 415, 570], "clf2": [69, 155, 156, 378, 415, 570], "clf3": [69, 155, 156, 378, 415, 570], "clf__": 271, "clf__alpha": 271, "clf__c": 409, "clf_descr": 351, "clf_en_lr": 204, "clf_err": 138, "clf_isoton": 61, "clf_isotonic_scor": 61, "clf_l1_lr": 204, "clf_l2_lr": 204, "clf_list": [62, 64], "clf_name": [49, 351], "clf_no_weight": 349, "clf_pf": 843, "clf_prob": 63, "clf_sample_weight": 246, "clf_score": 61, "clf_sel": 189, "clf_select": 164, "clf_sgd": 226, "clf_sigmoid": 61, "clf_sigmoid_scor": 61, "clf_tut": 160, "clf_weight": 349, "click": [241, 251, 271, 320, 326, 376, 378, 384, 396, 1026], "clickabl": 1047, "client": 378, "clifford": 1046, "cliffordemmanuel": 1046, "clim": 173, "climatologi": 406, "climb": [408, 448, 461], "clinton": 57, "clip": [62, 64, 230, 242, 310, 340, 636, 677, 742, 875, 1012, 1037, 1044, 1045], "clmbst": 1045, "clock": 43, "clone": [2, 89, 146, 178, 187, 246, 308, 326, 359, 374, 376, 379, 380, 382, 384, 390, 406, 409, 418, 437, 465, 570, 571, 598, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 807, 824, 829, 832, 836, 839, 865, 866, 902, 1022, 1033, 1039, 1041, 1045, 1049, 1050], "clone_kernel": [611, 612, 1043], "clone_with_theta": [178, 418, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "cloned_classifi": 433, "close": [8, 47, 51, 55, 61, 62, 64, 73, 74, 80, 87, 93, 99, 109, 110, 113, 125, 137, 143, 146, 150, 154, 170, 171, 174, 175, 176, 177, 178, 186, 188, 198, 216, 218, 233, 239, 245, 249, 255, 261, 270, 271, 283, 284, 296, 297, 310, 319, 340, 344, 345, 352, 359, 371, 376, 378, 379, 380, 388, 390, 391, 406, 408, 411, 412, 415, 418, 450, 455, 472, 509, 510, 533, 564, 629, 644, 648, 662, 673, 675, 688, 706, 747, 798, 819, 820, 840, 841, 842, 844, 851, 932, 991, 995, 996, 998, 999, 1001, 1002, 1003, 1005, 1008, 1009, 1012, 1017, 1021, 1026, 1036, 1040, 1041, 1042], "close_pric": 51, "closer": [43, 72, 123, 125, 153, 168, 170, 187, 193, 216, 344, 353, 406, 408, 413, 449, 554, 629, 713, 847, 848, 853, 855, 856, 857, 1017, 1040], "closest": [64, 80, 97, 216, 378, 408, 440, 442, 443, 447, 448, 449, 459, 654, 780, 781, 835, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 993, 996, 1003, 1005], "closur": 55, "cloud": [78, 115, 119, 121, 183, 384, 413, 534, 542, 693, 1002, 1020, 1021, 1023], "cloudpickl": 1028, "clouldpickl": 402, "cls_info": 49, "cls_name": [47, 49], "cls_runtim": 47, "cls_stat": 47, "cls_valu": 49, "club": 373, "clue": [371, 384, 999], "clump": 236, "clust": [98, 450, 457], "cluster": [2, 48, 53, 54, 56, 58, 61, 77, 78, 80, 83, 84, 86, 87, 90, 92, 94, 95, 102, 111, 132, 136, 142, 150, 163, 178, 189, 233, 235, 236, 237, 243, 249, 255, 256, 257, 258, 271, 296, 297, 299, 313, 320, 324, 329, 330, 331, 333, 342, 350, 351, 353, 358, 365, 369, 371, 373, 376, 378, 381, 388, 390, 403, 404, 409, 414, 416, 419, 422, 423, 426, 434, 435, 436, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 488, 503, 504, 505, 512, 513, 514, 515, 516, 523, 531, 542, 545, 554, 565, 567, 590, 591, 592, 632, 692, 693, 696, 705, 706, 711, 715, 716, 718, 720, 726, 732, 737, 738, 756, 758, 779, 780, 787, 793, 794, 796, 798, 799, 857, 858, 866, 870, 877, 885, 941, 943, 962, 985, 992, 999, 1001, 1005, 1008, 1010, 1012, 1015, 1019, 1021, 1022, 1023, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "cluster_1": 150, "cluster_2": 150, "cluster_al": [448, 461], "cluster_cent": [73, 94, 96, 97, 461], "cluster_center_indic": [440, 454], "cluster_centers_": [77, 78, 83, 91, 93, 94, 96, 97, 120, 323, 352, 440, 443, 447, 448, 449], "cluster_centers_indic": [73, 454], "cluster_centers_indices_": [73, 440], "cluster_data": 92, "cluster_doc": 57, "cluster_hierarchy_": [408, 450], "cluster_id": [189, 352], "cluster_id_to_feature_id": 189, "cluster_label": [89, 93], "cluster_method": 450, "cluster_optics_dbscan": [2, 98, 408], "cluster_optics_xi": 2, "cluster_qr": [80, 408, 452, 462, 1047], "cluster_s": 352, "cluster_selection_epsilon": 446, "cluster_selection_method": 446, "cluster_std": [63, 73, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 224, 239, 258, 313, 342, 372, 513], "cluster_word": 57, "clusterer_": 89, "clustering_algorithm": [78, 79, 95], "clustering_metr": 91, "clustermixin": [2, 378, 1050], "clusters_std": 342, "clyde": 1038, "cl\u00e9ment": [1042, 1046, 1048], "cm": [43, 45, 50, 51, 53, 58, 59, 61, 66, 67, 68, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 100, 111, 113, 120, 123, 136, 142, 161, 166, 173, 174, 187, 197, 205, 221, 224, 225, 228, 233, 234, 235, 240, 243, 244, 248, 253, 263, 264, 265, 290, 293, 294, 296, 300, 303, 305, 307, 308, 310, 312, 321, 324, 329, 330, 334, 336, 337, 338, 340, 341, 342, 348, 349, 356, 373, 409, 698, 918, 1002, 1012, 1018], "cm2013": 408, "cm_bright": [67, 305, 312], "cm_displai": 240, "cm_piyg": 312, "cmap": [43, 44, 45, 50, 51, 53, 58, 59, 66, 67, 68, 70, 74, 75, 80, 81, 83, 84, 86, 87, 91, 111, 113, 120, 123, 130, 136, 142, 161, 166, 173, 174, 187, 193, 197, 198, 204, 205, 221, 224, 225, 226, 228, 233, 234, 235, 243, 244, 248, 263, 265, 290, 294, 296, 298, 299, 301, 303, 305, 307, 308, 310, 312, 329, 330, 334, 336, 337, 338, 339, 340, 341, 342, 345, 348, 349, 356, 698], "cmap_bold": [298, 301], "cmap_cv": 265, "cmap_data": 265, "cmap_light": [298, 301], "cmcsa": 51, "cmd": 374, "cmu": 900, "cname": 77, "cnb": 1004, "cnp": 377, "cnx": 1041, "co": [2, 43, 51, 53, 56, 58, 74, 75, 102, 151, 153, 175, 183, 186, 213, 234, 270, 285, 323, 333, 351, 352, 353, 357, 380, 414, 416, 449, 451, 453, 488, 512, 592, 700, 720, 765, 796, 997, 1012, 1023, 1026, 1027, 1028], "co2": [169, 177, 183, 418, 497, 612, 616, 623, 624, 626, 1023, 1040], "co2_data": 175, "co2_kernel": 175, "coars": [43, 142, 382, 448, 461], "coarser": [142, 146], "coast": [50, 303], "coastlin": [50, 168, 303, 373], "coca": 51, "cock": [154, 1042], "cockburn": 1035, "coclust": [57, 405, 451, 514], "cocoa": 1026, "code": [2, 30, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 370, 374, 375, 377, 379, 380, 385, 388, 390, 391, 394, 399, 402, 404, 407, 408, 415, 416, 442, 443, 447, 449, 459, 497, 527, 531, 532, 538, 539, 543, 544, 546, 547, 549, 567, 573, 582, 583, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 666, 683, 684, 686, 687, 712, 833, 834, 835, 872, 879, 991, 999, 1003, 1012, 1014, 1016, 1017, 1021, 1022, 1023, 1025, 1026, 1033, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "code_book_": 835, "code_init": [532, 546], "code_s": [287, 835, 1003], "codebas": [325, 359, 376, 377, 378, 416, 1033, 1039], "codebook": [287, 567, 835], "codecov": 384, "codeofconduct": 376, "coder": [129, 543, 717], "codevig": 1039, "coef": [49, 87, 129, 185, 186, 193, 198, 204, 205, 207, 211, 215, 216, 217, 221, 227, 228, 253, 283, 307, 325, 348, 525, 647, 648, 650, 653, 654, 660, 661, 662, 663, 664, 670, 673, 675, 681, 682, 683, 684, 685, 686, 687, 688, 1006], "coef0": [191, 344, 346, 452, 536, 640, 641, 644, 776, 778, 907, 908, 909, 910, 911, 1000, 1017], "coef_": [46, 49, 53, 87, 115, 164, 165, 168, 185, 186, 193, 196, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 215, 216, 217, 221, 227, 228, 247, 253, 283, 284, 317, 323, 338, 345, 348, 351, 359, 371, 378, 390, 411, 417, 465, 482, 483, 484, 550, 594, 595, 598, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 905, 906, 907, 908, 909, 910, 911, 985, 996, 998, 1016, 1017, 1033, 1035, 1038, 1040, 1045, 1047, 1050, 1051], "coef_agglomeration_": 87, "coef_en_lr": 204, "coef_i": 186, "coef_init": [647, 648, 653, 654, 661, 662, 663, 664, 667, 668, 669, 677, 678, 679, 682, 685], "coef_l": 201, "coef_l1_lr": 204, "coef_l2_lr": 204, "coef_lar": 201, "coef_lasso": 201, "coef_lasso_": 207, "coef_multi_task_lasso_": 207, "coef_p": 201, "coef_path": [654, 664, 685], "coef_path_": [651, 652, 655, 656, 998], "coef_path_continu": [654, 664, 685], "coef_path_lar": [654, 664, 685], "coef_pl": 201, "coef_positive_lar": 201, "coef_ridg": 196, "coef_selection_": 87, "coeff": 681, "coeff_diff": 199, "coeffeci": 1042, "coeffici": [2, 25, 46, 49, 73, 82, 91, 93, 109, 110, 113, 120, 123, 159, 165, 170, 183, 184, 185, 192, 196, 198, 199, 201, 204, 206, 207, 208, 209, 210, 214, 215, 227, 230, 253, 270, 284, 307, 317, 321, 322, 323, 344, 347, 351, 352, 353, 363, 372, 378, 390, 393, 410, 411, 413, 417, 418, 421, 431, 452, 465, 467, 473, 475, 476, 478, 479, 480, 481, 482, 483, 484, 497, 525, 527, 528, 532, 536, 538, 540, 543, 544, 549, 553, 555, 557, 559, 561, 563, 566, 569, 571, 583, 590, 594, 598, 610, 612, 615, 628, 636, 637, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 702, 704, 717, 720, 730, 735, 739, 744, 751, 754, 776, 778, 786, 787, 789, 793, 794, 797, 816, 828, 831, 838, 839, 848, 856, 863, 866, 878, 885, 905, 906, 907, 908, 909, 910, 911, 914, 916, 993, 996, 998, 1016, 1017, 1023, 1033, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1050], "coefs_": [206, 307, 862, 863, 1006, 1038], "coefs_cf": 317, "coefs_enet": 201, "coefs_lar": 201, "coefs_lasso": 201, "coefs_no_cf": 317, "coefs_path": 660, "coefs_paths_": [660, 1043], "coefs_positive_enet": 201, "coefs_positive_lar": 201, "coefs_positive_lasso": 201, "coelho": [1034, 1036, 1037, 1041], "coelhudo": 1045, "cognit": [168, 373], "cohen": [2, 717, 1041], "cohen_kappa_scor": [2, 1002, 1038, 1040], "coher": 408, "cohort": 157, "coin": [51, 53, 55, 59, 71, 74, 75, 76, 79, 86, 87, 89, 95, 99, 100, 123, 183, 408, 416, 441, 462, 1014, 1023], "coincid": [174, 214, 418], "col": [52, 57, 62, 64, 73, 77, 82, 88, 92, 96, 97, 102, 105, 140, 155, 175, 232, 249, 348, 512, 514], "col_compl": 57, "col_idx": 59, "col_idx_shuffl": 58, "col_ind": [423, 451, 453], "col_indic": 149, "col_nam": 52, "col_split": 52, "cola": 51, "cold": 290, "cole": 1042, "coleman": [1034, 1035], "colgat": [51, 55], "colin": [45, 371, 1039], "collabor": 376, "collaps": [43, 187, 249, 310, 340, 388], "colleagu": 270, "collect": [2, 41, 46, 49, 51, 52, 57, 62, 105, 138, 149, 150, 157, 168, 175, 182, 189, 200, 206, 235, 242, 273, 277, 352, 353, 363, 371, 373, 380, 394, 412, 413, 415, 416, 446, 464, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 570, 571, 582, 584, 585, 589, 590, 591, 592, 633, 730, 731, 739, 779, 784, 785, 788, 803, 807, 808, 810, 824, 972, 975, 991, 997, 998, 1002, 1008, 1013, 1022, 1026, 1035, 1045], "colleg": [0, 185], "college_degre": 185, "collid": 416, "collin": 1036, "collinear": [186, 189, 217, 230, 415, 568, 649, 670, 681, 878, 998, 1033], "collis": [352, 353, 416, 583, 590], "collot": [1047, 1048], "colombia": [50, 303, 371, 499], "colon": 376, "coloni": 371, "color": [43, 46, 47, 48, 49, 50, 51, 52, 58, 61, 62, 63, 64, 67, 69, 70, 73, 75, 77, 79, 80, 81, 82, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 100, 109, 110, 111, 112, 113, 116, 118, 120, 121, 122, 124, 126, 127, 128, 129, 134, 135, 140, 142, 143, 145, 148, 149, 150, 151, 152, 154, 156, 159, 161, 166, 170, 172, 173, 174, 175, 176, 177, 178, 179, 182, 186, 188, 189, 193, 194, 196, 197, 198, 200, 201, 202, 203, 205, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 226, 229, 230, 233, 234, 235, 237, 239, 243, 244, 245, 247, 250, 255, 256, 257, 258, 259, 260, 261, 264, 265, 269, 271, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 289, 292, 295, 296, 297, 298, 301, 302, 303, 305, 310, 311, 312, 314, 315, 316, 320, 326, 331, 332, 334, 338, 339, 340, 341, 342, 344, 346, 347, 348, 356, 357, 371, 373, 384, 408, 416, 494, 495, 507, 584, 585, 1016, 1018, 1038, 1043, 1045, 1050], "color_continuous_scal": 271, "color_intens": 48, "color_it": [256, 260, 261], "color_map": 334, "color_palett": [72, 135, 149, 260], "colorbar": [43, 50, 66, 75, 120, 130, 150, 166, 171, 173, 174, 176, 187, 232, 243, 259, 281, 310, 340, 698, 1045], "colorbarbas": 310, "colorblind": [72, 135, 149], "coloring_matrix": [109, 110], "colormap": [120, 178, 340, 698, 1046], "colors_": 77, "colors_list": 140, "colour": [258, 373, 416, 588, 1003], "colt": [727, 757, 1002], "colton": 994, "columbia": 0, "column": [2, 43, 47, 52, 58, 59, 93, 101, 104, 107, 141, 142, 143, 146, 149, 151, 154, 168, 175, 181, 183, 185, 186, 187, 188, 189, 202, 212, 213, 216, 220, 230, 241, 248, 249, 250, 253, 260, 264, 270, 271, 281, 282, 284, 289, 307, 315, 316, 317, 321, 322, 323, 324, 326, 327, 351, 352, 353, 363, 370, 371, 373, 376, 378, 382, 385, 388, 389, 390, 405, 408, 409, 411, 413, 415, 416, 417, 420, 423, 451, 453, 464, 466, 467, 471, 472, 478, 487, 488, 489, 490, 491, 493, 495, 497, 501, 502, 503, 505, 506, 509, 510, 511, 512, 514, 516, 527, 532, 535, 538, 542, 543, 549, 556, 558, 559, 562, 563, 565, 566, 567, 568, 582, 583, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 628, 631, 633, 634, 635, 647, 649, 653, 659, 661, 663, 665, 666, 670, 681, 686, 687, 698, 714, 719, 720, 730, 731, 739, 755, 764, 769, 770, 771, 774, 784, 785, 788, 789, 801, 804, 805, 815, 826, 831, 836, 839, 840, 841, 842, 843, 844, 845, 846, 865, 869, 870, 871, 872, 878, 879, 880, 884, 885, 886, 887, 889, 890, 891, 895, 896, 905, 907, 910, 913, 915, 922, 927, 931, 932, 937, 949, 964, 977, 978, 980, 988, 991, 992, 994, 998, 1000, 1002, 1003, 1010, 1012, 1017, 1022, 1023, 1033, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "column_labels_": [58, 59, 405, 451, 453], "column_nam": 230, "column_or_1d": [2, 385, 1044, 1048], "column_result": 271, "column_stack": [76, 305, 312], "column_to_drop": 186, "column_tran": [230, 409], "column_transform": 327, "columnar": [370, 464, 1021], "columns_": [57, 405, 423, 451, 453], "columns_to_drop": 264, "columntransform": [2, 43, 102, 103, 154, 186, 187, 188, 212, 230, 241, 249, 251, 253, 316, 320, 322, 323, 324, 326, 368, 370, 388, 389, 399, 466, 467, 630, 870, 991, 992, 1022, 1028, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "columntransformercolumntransform": [103, 154, 186, 188, 241, 251, 316, 320, 323], "columntransformerinot": [154, 187], "columnwis": 413, "com": [51, 102, 290, 351, 371, 374, 376, 380, 381, 382, 384, 388, 408, 442, 535, 542, 672, 706, 1040, 1043], "coma": 1026, "comaniciu": [96, 408, 448], "comapar": 408, "comaprison": [611, 659, 910], "comb": 1047, "combat": [305, 413], "combin": [2, 19, 43, 51, 52, 58, 62, 64, 94, 102, 103, 105, 106, 107, 120, 126, 128, 129, 133, 143, 144, 148, 149, 157, 170, 176, 181, 182, 183, 186, 198, 212, 216, 229, 230, 236, 239, 241, 244, 270, 271, 279, 281, 282, 299, 306, 316, 321, 322, 324, 343, 344, 353, 356, 363, 368, 372, 373, 376, 381, 389, 390, 404, 405, 406, 408, 409, 412, 413, 414, 415, 416, 417, 418, 420, 421, 445, 464, 466, 467, 473, 475, 476, 479, 480, 481, 489, 497, 509, 510, 516, 522, 525, 527, 532, 538, 539, 541, 543, 548, 550, 561, 563, 566, 568, 569, 611, 615, 617, 622, 625, 631, 635, 644, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 667, 669, 673, 674, 675, 676, 677, 679, 680, 682, 685, 693, 702, 731, 789, 801, 804, 805, 812, 813, 826, 828, 832, 849, 864, 865, 866, 870, 878, 879, 880, 885, 905, 975, 991, 994, 995, 998, 1002, 1003, 1005, 1008, 1012, 1015, 1016, 1018, 1019, 1023, 1026, 1033, 1038, 1041, 1044, 1045, 1046, 1048, 1049], "combinator": 811, "combined_featur": 106, "combsccod": 1047, "comcast": 51, "come": [82, 100, 102, 111, 116, 125, 168, 170, 244, 284, 319, 351, 352, 363, 365, 369, 373, 376, 377, 380, 384, 388, 390, 394, 402, 407, 408, 412, 415, 416, 439, 450, 456, 472, 551, 706, 796, 822, 907, 910, 954, 991, 992, 996, 999, 1001, 1005, 1008, 1017, 1033, 1044, 1047, 1049], "comedi": 876, "comfort": [88, 415], "command": [243, 363, 364, 374, 376, 380, 382, 384, 394, 416, 509, 1021, 1035], "comment": [80, 351, 374, 375, 376, 377, 379, 380, 384, 487, 580, 1002], "commerc": 1026, "commerci": [412, 1026], "commit": [379, 380, 384, 1025, 1033, 1034, 1035, 1036], "committ": [376, 1033], "commod": 1002, "common": [2, 52, 54, 55, 57, 123, 165, 168, 183, 184, 185, 216, 217, 265, 270, 277, 287, 321, 344, 351, 353, 358, 363, 370, 376, 378, 384, 386, 388, 389, 393, 394, 399, 405, 406, 408, 409, 412, 414, 417, 418, 447, 465, 467, 497, 591, 633, 654, 673, 674, 702, 747, 754, 770, 802, 803, 806, 816, 818, 819, 820, 821, 822, 828, 831, 866, 868, 876, 877, 878, 883, 885, 890, 891, 893, 894, 895, 896, 922, 924, 951, 954, 991, 992, 998, 1005, 1008, 1012, 1017, 1018, 1021, 1022, 1023, 1026, 1028, 1033, 1041, 1043, 1044, 1048], "common_nod": 358, "common_node_id": 358, "common_param": [90, 146, 149, 187, 245, 272, 273, 344], "commonli": [209, 212, 267, 283, 344, 369, 390, 408, 409, 418, 615, 759, 760, 798, 834, 877, 999, 1000, 1002, 1003, 1005, 1049], "commun": [246, 369, 375, 381, 384, 390, 391, 408, 415, 539, 541, 548, 693, 711, 877, 992, 999, 1005, 1012, 1016, 1021, 1025, 1026, 1041, 1042], "commut": [43, 52], "comp": [57, 115, 116, 123, 130, 308, 333, 351, 352, 353, 371], "comp_cov": [469, 470, 471, 472, 473, 474, 475, 476], "compact": [168, 191, 310, 363, 373, 845, 846, 1018, 1035], "compani": [212, 230, 407, 408, 1026], "companion": [376, 1012], "companioni": 1033, "compar": [43, 44, 48, 52, 57, 58, 61, 62, 64, 70, 71, 72, 74, 75, 76, 78, 81, 82, 85, 87, 88, 89, 90, 91, 97, 100, 103, 104, 105, 106, 111, 112, 114, 116, 123, 127, 129, 133, 134, 135, 137, 139, 142, 143, 144, 146, 148, 149, 150, 152, 154, 160, 168, 174, 181, 182, 183, 186, 187, 188, 189, 192, 194, 196, 198, 200, 201, 202, 208, 212, 213, 215, 216, 218, 220, 222, 226, 229, 230, 232, 233, 236, 238, 241, 244, 247, 249, 250, 252, 257, 258, 262, 265, 267, 268, 269, 271, 273, 275, 277, 279, 281, 282, 283, 285, 287, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 302, 304, 307, 309, 311, 314, 315, 317, 321, 344, 351, 352, 353, 357, 358, 359, 365, 371, 373, 376, 378, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 417, 418, 440, 441, 442, 444, 445, 446, 448, 449, 450, 452, 458, 463, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 497, 503, 505, 513, 515, 523, 525, 529, 532, 538, 540, 542, 546, 547, 552, 553, 562, 563, 564, 565, 566, 632, 640, 645, 646, 654, 656, 658, 659, 664, 667, 669, 677, 678, 685, 696, 706, 713, 716, 732, 739, 744, 787, 799, 801, 806, 815, 828, 831, 838, 847, 851, 854, 858, 862, 863, 865, 866, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 905, 906, 907, 909, 910, 991, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1023, 1033, 1035, 1040, 1041, 1046], "comparison": [47, 51, 53, 57, 60, 61, 62, 63, 65, 69, 71, 73, 75, 77, 83, 90, 91, 92, 93, 94, 96, 102, 110, 119, 121, 122, 124, 126, 130, 134, 137, 140, 146, 149, 152, 156, 157, 162, 169, 175, 176, 177, 179, 183, 188, 196, 198, 199, 200, 201, 204, 210, 212, 216, 227, 230, 231, 234, 235, 236, 237, 238, 242, 243, 257, 262, 264, 265, 266, 267, 274, 282, 284, 289, 299, 305, 312, 314, 315, 319, 321, 334, 337, 346, 350, 351, 352, 359, 371, 373, 390, 406, 408, 410, 411, 413, 417, 418, 437, 438, 442, 443, 445, 446, 447, 449, 462, 482, 483, 484, 488, 505, 513, 515, 516, 523, 526, 536, 542, 550, 551, 554, 565, 566, 582, 583, 589, 590, 591, 592, 607, 609, 611, 612, 616, 623, 626, 632, 640, 644, 660, 673, 689, 690, 691, 692, 693, 705, 739, 744, 780, 789, 801, 802, 803, 804, 806, 807, 815, 817, 818, 819, 820, 821, 822, 831, 840, 843, 847, 862, 863, 866, 878, 879, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 905, 907, 908, 910, 911, 913, 991, 995, 996, 999, 1002, 1004, 1005, 1008, 1017, 1023, 1030], "compat": [246, 273, 290, 320, 370, 379, 385, 386, 388, 390, 394, 399, 402, 416, 463, 469, 509, 567, 578, 590, 604, 615, 616, 619, 620, 621, 623, 624, 633, 634, 635, 659, 660, 674, 676, 775, 779, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 849, 850, 865, 870, 878, 879, 917, 918, 924, 927, 943, 944, 964, 999, 1005, 1007, 1021, 1022, 1026, 1028, 1033, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "compens": [112, 185, 187, 191, 212, 230, 271, 410, 413], "compet": [43, 186], "competit": [43, 146, 351, 415, 645, 1005], "compil": [154, 290, 353, 363, 364, 377, 378, 379, 384, 385, 388, 1021, 1033], "compl": 91, "complain": 1051, "complement": [2, 187, 280, 351, 633, 634, 803, 818, 821, 831, 840, 841, 842, 843, 844, 1009, 1024, 1028, 1041], "complementari": [43, 416], "complementnb": [2, 271, 351, 840, 841, 843, 844, 1004, 1041, 1045, 1046, 1048], "complementnbcomplementnb": 271, "complet": [0, 2, 43, 72, 73, 74, 79, 82, 85, 91, 95, 116, 149, 152, 163, 165, 168, 183, 188, 189, 218, 238, 239, 246, 249, 264, 268, 315, 317, 319, 352, 359, 371, 376, 380, 381, 384, 388, 409, 412, 413, 415, 416, 441, 445, 449, 452, 462, 463, 464, 467, 496, 537, 538, 539, 540, 545, 547, 559, 570, 571, 582, 588, 589, 590, 592, 628, 629, 630, 631, 646, 650, 658, 672, 674, 705, 706, 716, 717, 718, 730, 732, 737, 738, 758, 787, 796, 833, 836, 839, 848, 864, 865, 866, 867, 934, 986, 996, 998, 1002, 1003, 1005, 1017, 1018, 1021, 1023, 1033, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "completed_fac": 248, "completeness_scor": [2, 73, 82, 91, 320, 352, 408, 737, 738, 796, 1002], "complex": [42, 48, 49, 54, 58, 104, 140, 154, 167, 170, 175, 181, 183, 216, 226, 229, 238, 245, 246, 249, 262, 268, 271, 274, 279, 311, 319, 322, 323, 327, 328, 340, 344, 353, 354, 358, 372, 376, 381, 388, 408, 409, 413, 415, 419, 440, 444, 447, 448, 450, 467, 489, 501, 502, 503, 515, 535, 542, 552, 558, 559, 560, 561, 563, 565, 566, 605, 631, 639, 657, 659, 677, 678, 735, 751, 801, 831, 833, 861, 865, 866, 870, 878, 885, 901, 905, 908, 911, 913, 914, 915, 916, 991, 992, 994, 995, 997, 999, 1001, 1003, 1008, 1012, 1015, 1022, 1023, 1024, 1026, 1028, 1034, 1036, 1042, 1043, 1046], "complexity_comput": [46, 49], "complexity_label": [46, 49], "compli": [376, 390, 943, 1022], "complianc": [0, 149], "compliant": [324, 376, 1051], "complic": [64, 246, 305, 382, 418, 695, 1005], "compon": [2, 11, 43, 44, 55, 79, 91, 95, 102, 105, 114, 115, 119, 121, 122, 124, 125, 127, 128, 130, 152, 160, 175, 183, 185, 197, 198, 221, 232, 243, 244, 247, 255, 256, 259, 260, 261, 263, 269, 271, 276, 290, 291, 292, 293, 301, 302, 308, 315, 321, 356, 363, 368, 371, 376, 378, 382, 385, 402, 404, 408, 409, 411, 416, 418, 420, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 503, 505, 516, 522, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 696, 798, 799, 800, 801, 804, 805, 815, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 948, 949, 994, 999, 1001, 1012, 1014, 1017, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1033, 1035, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "component_1": 260, "component_2": 260, "component_indices_": [640, 1046], "components_": [45, 54, 91, 116, 120, 122, 123, 130, 243, 244, 308, 315, 323, 390, 409, 413, 444, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 544, 545, 640, 854, 861, 897, 898, 994, 1014, 1037, 1039, 1045, 1048, 1051], "components_col": 105, "compos": [2, 43, 44, 62, 101, 102, 103, 107, 116, 136, 143, 154, 183, 186, 187, 188, 212, 214, 230, 241, 249, 251, 253, 284, 287, 316, 320, 322, 323, 324, 326, 327, 389, 399, 408, 409, 412, 464, 465, 466, 467, 516, 554, 613, 1001, 1003, 1023, 1033], "composit": [7, 35, 241, 320, 368, 412, 659, 789, 992, 998, 1011, 1028, 1034], "compound": [43, 230, 416, 611, 613, 681, 725, 753, 998], "compoundkernel": [2, 611, 1047], "comprehens": [344, 384, 416, 759, 760, 1000, 1026, 1041], "compress": [42, 50, 55, 99, 183, 287, 310, 371, 402, 408, 413, 416, 417, 653, 673, 693, 835, 878, 972, 975, 987, 998, 1003, 1012, 1023, 1033, 1042], "compressed_raccoon_kmean": 86, "compressed_raccoon_uniform": 86, "compris": [102, 146, 268, 351, 352, 353, 371, 388, 413, 415, 516, 808, 999], "compromis": [48, 64, 187, 363, 376, 648, 680, 1005, 1036], "comput": [0, 2, 27, 43, 45, 46, 50, 52, 53, 58, 63, 72, 74, 76, 77, 80, 85, 87, 90, 91, 93, 94, 102, 104, 110, 111, 112, 113, 121, 129, 137, 141, 144, 145, 146, 147, 148, 149, 167, 168, 170, 175, 177, 178, 181, 186, 187, 188, 189, 191, 194, 195, 198, 199, 200, 201, 202, 212, 214, 216, 220, 226, 229, 230, 233, 236, 240, 242, 243, 245, 249, 250, 252, 264, 266, 268, 270, 271, 272, 273, 277, 279, 281, 290, 292, 294, 296, 297, 299, 300, 303, 310, 319, 323, 324, 327, 330, 332, 340, 344, 347, 351, 352, 353, 358, 364, 365, 370, 371, 373, 376, 381, 382, 383, 385, 388, 389, 390, 393, 394, 402, 403, 404, 405, 406, 408, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 457, 459, 461, 462, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 517, 532, 533, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 583, 586, 587, 590, 591, 592, 594, 595, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 726, 727, 728, 730, 731, 732, 735, 737, 739, 740, 741, 744, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 870, 871, 874, 875, 880, 881, 882, 883, 884, 885, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 907, 910, 912, 913, 914, 915, 916, 946, 947, 948, 949, 966, 967, 974, 976, 982, 991, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "computation": [37, 53, 109, 120, 140, 145, 154, 170, 290, 344, 351, 362, 377, 388, 408, 409, 412, 413, 415, 418, 539, 633, 634, 672, 764, 801, 803, 804, 805, 815, 828, 998, 999, 1001, 1009, 1010, 1014, 1028, 1037], "compute_class_weight": [2, 390, 1036, 1047], "compute_corrected_ttest": 270, "compute_dist": [441, 445, 1045], "compute_full_tre": [441, 445, 1037], "compute_import": 1035, "compute_inverse_compon": [897, 898, 1014], "compute_inverse_transform": 1047, "compute_label": [442, 449], "compute_node_depth": 358, "compute_optics_graph": [2, 455, 456, 1050], "compute_sample_weight": [2, 1047], "compute_scor": [107, 127, 193, 194, 645, 646, 1042], "compute_sourc": 420, "computed_scor": 646, "con": [402, 590, 1001], "concat": [43, 181, 185, 202, 230, 878], "concaten": [2, 63, 70, 74, 83, 94, 101, 104, 112, 136, 150, 164, 178, 183, 193, 196, 205, 226, 227, 233, 239, 255, 259, 260, 266, 275, 277, 278, 279, 280, 295, 308, 314, 317, 330, 339, 343, 351, 409, 464, 467, 505, 510, 532, 538, 542, 543, 600, 782, 801, 864, 865, 867, 870, 878, 910, 1003, 1023, 1034], "concav": [168, 327, 373], "concentr": [46, 48, 98, 118, 125, 134, 152, 175, 182, 183, 237, 254, 256, 261, 281, 300, 312, 331, 372, 376, 415, 443, 520, 798, 1001, 1008, 1023], "concentrations_prior": 255, "concept": [2, 112, 140, 144, 246, 279, 388, 408, 414, 416, 994, 1002, 1005, 1018, 1026], "conceptu": [373, 415, 1000], "concern": [37, 56, 71, 108, 114, 117, 119, 131, 133, 162, 169, 180, 183, 190, 192, 231, 254, 260, 264, 286, 288, 291, 304, 309, 328, 335, 350, 354, 363, 378, 402, 999, 1014], "concis": [64, 212, 376, 381, 1044, 1046], "conclud": [134, 186, 194, 230, 270, 353, 359, 391, 865], "conclus": [43, 125, 186, 188, 212, 214, 270, 272, 359, 415], "concomit": [650, 998], "concret": [216, 377, 391, 407, 417, 675, 676, 897, 898, 998, 1016, 1021], "concurr": [390, 416, 967, 1045, 1047], "conda": [319, 320, 321, 322, 323, 324, 325, 326, 327, 364, 376, 377, 379, 380, 382, 384, 394, 395, 401, 402, 1018], "conda_prefix": 382, "condarc": 374, "condens": [191, 446], "condit": [2, 43, 51, 52, 62, 64, 113, 146, 183, 184, 186, 202, 209, 214, 217, 230, 246, 250, 273, 322, 358, 382, 388, 393, 404, 405, 406, 407, 408, 410, 413, 415, 417, 451, 464, 471, 472, 473, 478, 497, 514, 524, 525, 537, 540, 541, 542, 544, 546, 548, 550, 551, 563, 628, 633, 634, 644, 651, 652, 653, 655, 656, 657, 671, 673, 674, 675, 676, 683, 684, 688, 698, 713, 718, 719, 737, 738, 796, 840, 841, 842, 843, 844, 863, 866, 869, 878, 879, 882, 886, 949, 973, 996, 998, 999, 1000, 1002, 1004, 1005, 1007, 1012, 1018, 1023, 1028, 1034, 1036, 1037, 1038, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1051], "condition": [51, 64, 212, 406, 410, 759, 996], "condition2": 154, "conduct": [185, 270, 418, 1025, 1047], "conf": [46, 64, 380, 406, 412, 840, 1004, 1047], "confer": [264, 270, 371, 408, 413, 419, 439, 444, 450, 512, 536, 564, 697, 709, 727, 757, 861, 862, 863, 1002, 1008, 1014, 1018], "confid": [52, 61, 62, 63, 64, 149, 175, 177, 256, 270, 273, 332, 391, 406, 418, 637, 659, 660, 667, 669, 672, 675, 676, 677, 699, 703, 708, 721, 727, 728, 740, 741, 757, 790, 833, 872, 905, 907, 910, 998, 1001, 1002, 1003, 1008, 1015, 1016, 1017, 1026, 1043], "config": [52, 364, 374, 376, 377, 384, 627, 1041], "config_context": [2, 253, 363, 364, 404, 627, 903, 1040, 1046, 1049], "configur": [2, 3, 46, 49, 64, 103, 104, 187, 246, 251, 253, 284, 317, 351, 362, 374, 376, 378, 382, 384, 388, 390, 394, 399, 404, 409, 416, 417, 432, 442, 443, 445, 447, 449, 452, 462, 464, 468, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 627, 628, 629, 630, 631, 633, 636, 639, 640, 641, 642, 643, 689, 690, 691, 692, 693, 695, 696, 789, 801, 815, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 967, 968, 999, 1002, 1012, 1017, 1021, 1028, 1037, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050], "confirm": [43, 52, 116, 137, 143, 146, 149, 188, 212, 214, 264, 273, 276, 279, 315, 353, 380, 991, 1012, 1041], "conflict": [374, 376, 380, 384, 394, 1040, 1041], "conform": [52, 376, 582, 629, 833, 834, 1002, 1021, 1022, 1040, 1046], "confound": [185, 186], "confus": [2, 68, 183, 240, 262, 264, 279, 329, 330, 351, 390, 468, 505, 632, 653, 698, 714, 716, 719, 730, 731, 739, 755, 785, 788, 831, 903, 910, 1023, 1033, 1034, 1038, 1042, 1043, 1045, 1046, 1047, 1048], "confusingli": 374, "confusion_matrix": [2, 68, 240, 263, 264, 327, 329, 330, 698, 714, 755, 800, 828, 1002, 1034, 1039, 1040, 1043, 1044, 1046, 1050], "confusion_matrix_scor": 1002, "confusionmatrixdisplai": [2, 45, 68, 263, 322, 327, 329, 351, 632, 719, 1002, 1043, 1044, 1046, 1047, 1048], "congruenc": [655, 656, 657, 683, 684], "conjug": [270, 452, 462, 673, 675, 688, 696, 998], "conjunct": [399, 408, 595, 807, 823, 824, 826, 827, 828, 829, 832, 968, 992, 998, 1048], "connect": [2, 51, 74, 79, 81, 84, 87, 95, 99, 100, 374, 376, 385, 390, 410, 441, 445, 452, 462, 463, 586, 587, 696, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 1000, 1005, 1007, 1015, 1025, 1037, 1046, 1050], "connected_compon": 1040, "connectionist": [862, 863], "conner": 1046, "connor": [1041, 1046, 1050, 1051], "connossor": [1041, 1042], "conocophillip": 51, "conort": 1026, "conquer": 949, "conrad": [1033, 1034, 1048, 1051], "conroi": 1048, "consecut": [134, 144, 213, 388, 406, 412, 416, 443, 447, 449, 450, 452, 456, 459, 462, 538, 539, 540, 547, 603, 646, 667, 668, 669, 677, 678, 679, 798, 799, 806, 840, 841, 842, 843, 844, 862, 863, 991, 1012, 1041], "consensu": [2, 58, 59, 72, 375, 376, 391, 405, 408, 650, 672, 679, 680, 720, 1002], "consensus_scor": [2, 58, 59, 405, 1035], "consequ": [90, 127, 230, 270, 271, 310, 337, 359, 406, 407, 413, 415, 562, 563, 567, 656, 657, 992, 998, 1002, 1010, 1018, 1042, 1044, 1049, 1051], "conserv": [50, 390, 583, 590, 897, 898, 1001, 1014], "consid": [0, 43, 51, 52, 53, 58, 62, 74, 88, 99, 103, 112, 120, 124, 126, 143, 146, 163, 167, 168, 182, 187, 212, 214, 246, 264, 270, 273, 277, 281, 284, 290, 293, 296, 297, 310, 321, 327, 337, 344, 345, 347, 351, 359, 363, 364, 365, 368, 375, 376, 378, 382, 384, 388, 390, 391, 399, 402, 404, 407, 408, 413, 414, 415, 416, 417, 418, 419, 420, 438, 444, 446, 450, 457, 474, 509, 510, 522, 534, 542, 550, 551, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 586, 587, 589, 590, 592, 594, 608, 609, 621, 632, 633, 634, 647, 653, 659, 660, 661, 663, 672, 680, 689, 690, 691, 693, 694, 695, 697, 701, 703, 706, 708, 710, 716, 727, 731, 735, 757, 787, 789, 795, 847, 848, 849, 851, 853, 855, 856, 857, 860, 862, 863, 868, 878, 879, 886, 900, 901, 910, 911, 913, 914, 915, 916, 926, 985, 991, 997, 998, 999, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1012, 1016, 1017, 1018, 1022, 1036, 1037, 1041, 1045, 1046, 1048, 1049, 1050], "consider": [148, 149, 171, 174, 249, 265, 271, 277, 371, 376, 407, 418, 620, 801, 815, 823, 991, 998, 1004, 1008, 1016, 1026, 1050], "consist": [2, 43, 46, 63, 68, 72, 89, 90, 102, 111, 118, 120, 140, 143, 149, 150, 157, 168, 173, 175, 178, 182, 189, 212, 230, 245, 249, 276, 279, 307, 315, 319, 322, 347, 352, 359, 363, 369, 371, 373, 376, 382, 383, 384, 385, 389, 390, 391, 406, 408, 410, 414, 415, 416, 426, 427, 430, 431, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 498, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 555, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 592, 612, 628, 629, 630, 631, 636, 639, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 675, 678, 679, 680, 688, 689, 690, 691, 692, 701, 736, 798, 799, 808, 833, 834, 835, 837, 838, 839, 840, 848, 849, 851, 853, 856, 857, 863, 868, 869, 870, 872, 876, 877, 880, 881, 883, 884, 886, 897, 898, 901, 905, 906, 908, 909, 911, 914, 916, 922, 931, 933, 956, 972, 975, 990, 991, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1012, 1015, 1017, 1018, 1020, 1022, 1026, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "consol": [142, 374], "consolid": [0, 390, 391, 1033], "consolidate_scor": 52, "consortium": [0, 1026], "constant": [2, 43, 129, 137, 149, 173, 176, 177, 182, 186, 200, 213, 214, 216, 230, 241, 246, 251, 273, 302, 306, 308, 311, 313, 320, 347, 349, 359, 368, 378, 385, 390, 405, 415, 418, 431, 446, 465, 482, 483, 484, 512, 514, 535, 539, 541, 548, 550, 551, 552, 553, 555, 557, 559, 561, 563, 566, 569, 571, 591, 607, 610, 612, 614, 628, 631, 633, 634, 636, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 677, 678, 679, 680, 681, 688, 690, 694, 696, 722, 724, 725, 729, 733, 776, 778, 786, 800, 823, 838, 839, 848, 856, 862, 863, 870, 881, 884, 893, 905, 906, 907, 908, 909, 910, 911, 912, 914, 916, 994, 996, 998, 999, 1002, 1004, 1005, 1012, 1016, 1018, 1028, 1036, 1041, 1043, 1045, 1046, 1047, 1049, 1051], "constant_": 553, "constant_valu": [418, 614, 618], "constant_value_bound": [418, 612, 614, 618], "constantini": 1049, "constantkernel": [2, 173, 179, 418, 612, 618, 622, 625], "constantli": [72, 212, 1026], "constitu": 373, "constitut": [83, 390, 412, 415, 450, 456, 589, 590, 592, 1006], "constrain": [25, 81, 120, 143, 149, 151, 187, 204, 283, 305, 320, 326, 338, 340, 369, 390, 408, 413, 415, 510, 562, 563, 636, 659, 660, 691, 695, 823, 830, 998, 1001, 1037], "constrained_layout": [120, 187, 232, 316, 317, 324], "constraint": [88, 90, 100, 120, 133, 183, 201, 208, 216, 249, 250, 265, 306, 307, 308, 320, 376, 388, 413, 416, 487, 509, 510, 558, 559, 560, 561, 562, 563, 565, 566, 633, 636, 819, 820, 913, 914, 915, 916, 970, 991, 993, 998, 999, 1016, 1023, 1037, 1040, 1041, 1044, 1046, 1048, 1050], "constru": 416, "construct": [2, 43, 50, 102, 104, 134, 136, 138, 154, 168, 230, 240, 246, 251, 253, 303, 311, 313, 320, 323, 370, 373, 378, 385, 390, 408, 409, 412, 413, 415, 416, 419, 433, 441, 442, 444, 445, 450, 452, 457, 463, 465, 467, 520, 536, 542, 545, 556, 557, 582, 588, 640, 689, 691, 692, 815, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 864, 865, 866, 867, 869, 910, 930, 932, 948, 949, 960, 964, 991, 992, 994, 998, 999, 1002, 1003, 1005, 1012, 1015, 1017, 1018, 1022, 1038, 1040, 1041, 1044, 1047], "construct_grid": [50, 303], "constructor": [30, 31, 104, 242, 364, 378, 390, 409, 416, 464, 467, 550, 551, 556, 568, 569, 570, 571, 582, 583, 589, 590, 598, 669, 677, 678, 800, 801, 815, 847, 848, 849, 851, 853, 855, 856, 857, 864, 865, 866, 867, 991, 1003, 1012, 1017, 1022, 1033, 1034, 1036, 1037, 1038, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "consult": 1002, "consum": [2, 120, 359, 370, 378, 390, 399, 408, 412, 415, 449, 804, 805, 865, 866, 957, 958, 967, 998, 1026, 1038, 1050], "consumpt": [47, 363, 390, 408, 535, 558, 559, 565, 566, 801, 815, 826, 827, 828, 913, 914, 915, 916, 967, 1033, 1035, 1039, 1041, 1042, 1047], "contact": [388, 1021], "contain": [2, 49, 57, 61, 64, 69, 75, 82, 89, 91, 102, 103, 126, 136, 138, 149, 150, 176, 186, 187, 189, 191, 204, 216, 230, 239, 246, 249, 250, 253, 260, 264, 268, 270, 276, 279, 280, 283, 289, 296, 297, 299, 310, 322, 330, 333, 351, 352, 369, 370, 371, 373, 376, 378, 380, 381, 382, 383, 384, 385, 388, 390, 402, 404, 406, 408, 409, 411, 412, 413, 415, 416, 417, 418, 420, 422, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 497, 501, 503, 504, 505, 509, 510, 511, 515, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 687, 689, 690, 691, 692, 693, 697, 698, 699, 701, 702, 703, 710, 713, 717, 736, 737, 738, 773, 780, 781, 789, 795, 798, 799, 800, 801, 804, 805, 807, 815, 819, 820, 823, 824, 828, 829, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 927, 930, 931, 932, 952, 953, 956, 957, 964, 967, 968, 970, 991, 992, 994, 1000, 1003, 1006, 1008, 1010, 1012, 1013, 1015, 1018, 1021, 1025, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "container": 402, "container_fold": 504, "container_path": 504, "contamin": [48, 111, 112, 239, 249, 296, 297, 469, 564, 851, 1008, 1041, 1049, 1050], "content": [2, 7, 55, 315, 351, 353, 371, 376, 380, 382, 402, 416, 486, 504, 509, 510, 589, 590, 592, 672, 919, 1011, 1026, 1034, 1043], "context": [2, 91, 253, 264, 283, 290, 327, 363, 364, 370, 375, 377, 389, 390, 408, 409, 414, 415, 416, 418, 419, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 468, 472, 532, 536, 537, 538, 540, 543, 544, 545, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 627, 628, 631, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 851, 853, 855, 856, 858, 859, 864, 867, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 992, 998, 1002, 1008, 1012, 1016, 1022, 1025, 1026, 1033, 1040, 1041, 1046, 1049], "contigu": [43, 59, 378, 388, 405, 412, 416, 443, 447, 449, 459, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 782, 820, 845, 846, 905, 907, 908, 909, 910, 911, 1017, 1036, 1043, 1047, 1051], "contin": [414, 715, 1012], "conting": [2, 715, 716, 732, 756, 1039], "contingency_matrix": [2, 408, 756, 1041], "continu": [0, 2, 52, 55, 57, 77, 118, 143, 170, 183, 187, 194, 213, 220, 230, 233, 236, 249, 250, 252, 256, 260, 261, 307, 309, 315, 316, 321, 322, 358, 364, 371, 374, 378, 379, 380, 381, 384, 388, 390, 391, 394, 408, 413, 415, 468, 493, 593, 596, 597, 600, 601, 608, 609, 610, 633, 647, 648, 653, 654, 658, 661, 662, 663, 664, 727, 757, 813, 815, 868, 870, 872, 874, 875, 884, 885, 886, 902, 903, 914, 964, 991, 998, 999, 1002, 1003, 1005, 1006, 1012, 1018, 1022, 1023, 1026, 1030, 1033, 1035, 1036, 1041, 1046, 1047, 1048, 1050], "continuous_featur": 381, "contour": [48, 50, 70, 80, 81, 111, 142, 161, 168, 173, 174, 176, 223, 224, 225, 226, 239, 244, 259, 296, 303, 338, 339, 341, 342, 344, 345, 373, 383, 632, 633, 1008, 1016], "contour_kw": 633, "contourf": [50, 142, 226, 244, 296, 303, 305, 312, 313, 334, 339, 345, 349, 632, 633], "contours_": [383, 633], "contract": [212, 230, 344, 364, 390, 1022], "contradict": [189, 1022], "contrari": [43, 53, 186, 233, 237, 249, 255, 273, 310, 351, 370, 408, 497, 545, 607, 803, 818, 886, 998, 1004, 1008], "contrast": [128, 187, 214, 245, 249, 270, 272, 299, 315, 352, 390, 406, 408, 411, 415, 418, 449, 452, 462, 620, 644, 815, 861, 992, 995, 997, 998, 1002, 1005, 1007, 1010, 1012, 1015, 1016, 1018, 1043], "contrib": [325, 376, 378, 384, 388, 390, 408, 446, 1021, 1022, 1049], "contribut": [0, 53, 58, 147, 175, 198, 216, 279, 315, 373, 374, 378, 379, 380, 384, 390, 391, 394, 413, 414, 415, 447, 449, 554, 555, 560, 561, 727, 730, 757, 996, 1002, 1005, 1010, 1017, 1021, 1022, 1025, 1026, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "contributor": [364, 379, 380, 381, 384, 388, 390, 1002, 1022, 1034, 1035, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "control": [37, 51, 70, 94, 124, 125, 140, 159, 175, 177, 198, 209, 213, 216, 220, 242, 243, 271, 273, 287, 292, 308, 320, 322, 344, 355, 357, 363, 364, 369, 372, 376, 378, 381, 384, 388, 390, 394, 407, 408, 411, 412, 413, 414, 417, 418, 433, 440, 449, 454, 471, 472, 478, 532, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 594, 595, 597, 615, 620, 626, 628, 633, 635, 640, 642, 643, 647, 648, 650, 651, 652, 653, 655, 656, 657, 673, 675, 677, 678, 683, 684, 688, 693, 702, 710, 798, 799, 801, 803, 804, 805, 806, 807, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 831, 832, 835, 836, 839, 862, 863, 884, 886, 897, 898, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 919, 967, 988, 991, 998, 999, 1001, 1002, 1003, 1005, 1008, 1009, 1012, 1014, 1016, 1017, 1018, 1021, 1022, 1024, 1028, 1033, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "convei": [67, 237, 312], "conveni": [52, 88, 216, 249, 368, 384, 388, 409, 412, 416, 418, 423, 443, 447, 449, 451, 453, 464, 489, 612, 677, 679, 700, 729, 786, 864, 865, 975, 992, 994, 998, 999, 1009, 1026, 1033], "convent": [2, 132, 149, 264, 270, 376, 378, 379, 380, 382, 390, 404, 426, 427, 430, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 472, 473, 474, 475, 476, 509, 510, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 548, 564, 567, 570, 571, 582, 583, 584, 589, 590, 592, 628, 629, 630, 631, 678, 689, 690, 691, 692, 719, 798, 799, 833, 834, 849, 851, 853, 857, 869, 877, 880, 881, 883, 886, 897, 898, 909, 943, 944, 1002, 1033, 1040, 1041, 1044, 1046, 1047, 1049, 1050], "convention": [338, 390, 901], "converg": [2, 55, 90, 94, 109, 110, 144, 146, 149, 170, 176, 206, 214, 220, 228, 256, 258, 306, 307, 310, 315, 330, 365, 385, 390, 405, 408, 413, 416, 418, 420, 440, 443, 446, 447, 448, 449, 452, 454, 459, 460, 461, 462, 471, 472, 478, 482, 483, 484, 534, 536, 537, 538, 539, 540, 547, 572, 611, 645, 646, 647, 648, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 669, 673, 675, 677, 679, 683, 684, 688, 689, 691, 692, 695, 696, 798, 799, 854, 862, 863, 900, 901, 907, 992, 997, 998, 999, 1001, 1006, 1016, 1033, 1036, 1037, 1038, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "converged_": [798, 799, 1051], "convergence_it": [440, 454], "convergencewarn": [2, 174, 176, 178, 220, 227, 256, 306, 307, 312, 385, 390, 798, 799, 1041, 1042, 1045], "convers": [2, 55, 146, 204, 351, 359, 365, 370, 376, 378, 384, 388, 390, 402, 416, 573, 860, 869, 877, 931, 932, 987, 999, 1022, 1026, 1041, 1042, 1043, 1046, 1049], "convert": [2, 55, 70, 80, 99, 103, 123, 175, 189, 212, 232, 249, 252, 256, 257, 260, 261, 284, 303, 327, 358, 363, 370, 371, 385, 388, 390, 402, 416, 440, 443, 444, 447, 449, 450, 451, 452, 459, 464, 465, 497, 535, 542, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 573, 582, 583, 589, 590, 591, 592, 594, 595, 607, 628, 629, 630, 631, 647, 653, 659, 660, 661, 663, 667, 668, 669, 671, 675, 677, 678, 679, 693, 747, 779, 800, 823, 860, 869, 870, 872, 876, 878, 879, 880, 882, 905, 913, 914, 915, 916, 929, 931, 932, 956, 986, 987, 991, 998, 999, 1000, 1002, 1012, 1013, 1017, 1018, 1033, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051], "convex": [129, 145, 146, 183, 192, 219, 232, 348, 352, 408, 410, 413, 421, 446, 452, 462, 473, 475, 476, 479, 480, 481, 659, 677, 693, 998, 999, 1005, 1006, 1016, 1023, 1046], "convinc": 186, "convolut": [45, 178], "convolv": 308, "coo": [390, 554, 555, 693, 872, 927, 931, 932, 1005, 1034, 1050], "coo_matrix": [53, 199, 452, 586, 587, 972, 975], "cook": [373, 495, 1033, 1039], "cookbook": [418, 623, 624], "cool": [416, 1033], "coolwarm": [265, 337], "cooman": 373, "coord": [586, 1003], "coordin": [2, 50, 51, 53, 87, 125, 153, 174, 201, 232, 271, 303, 363, 371, 413, 418, 443, 447, 448, 449, 461, 471, 472, 478, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 551, 586, 615, 647, 648, 652, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 682, 683, 684, 685, 689, 690, 691, 694, 695, 707, 765, 770, 905, 998, 999, 1017, 1033, 1036, 1037, 1038, 1042, 1044, 1046, 1047, 1048], "cop": 51, "cope": [239, 365, 371, 998], "copeland": [1041, 1042], "copi": [44, 51, 55, 79, 95, 107, 123, 137, 149, 168, 181, 182, 186, 187, 188, 199, 206, 218, 228, 230, 233, 246, 290, 329, 330, 332, 334, 352, 356, 364, 373, 376, 378, 380, 381, 382, 388, 390, 433, 437, 440, 442, 443, 444, 446, 447, 449, 454, 459, 482, 483, 484, 485, 501, 503, 511, 533, 534, 535, 536, 542, 549, 554, 555, 560, 562, 563, 573, 591, 598, 608, 609, 611, 612, 629, 631, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 672, 673, 675, 680, 682, 685, 686, 687, 733, 770, 793, 801, 815, 845, 846, 860, 868, 871, 874, 875, 876, 877, 881, 882, 883, 885, 888, 890, 891, 892, 893, 894, 895, 896, 900, 901, 905, 907, 908, 909, 910, 911, 920, 929, 931, 932, 960, 972, 974, 975, 1012, 1017, 1018, 1022, 1033, 1036, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "copy_": 1033, "copy_cov": 549, "copy_gram": [683, 684, 687], "copy_x": [443, 447, 459, 536, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 673, 675, 680, 682, 683, 684, 685, 686, 1035, 1041, 1042], "copy_x_train": [611, 612], "copy_xi": 687, "copybutton": [376, 394, 401], "copyright": [0, 55], "corani": 270, "cordier": 1040, "core": [42, 49, 82, 88, 98, 103, 134, 140, 142, 183, 186, 187, 264, 324, 362, 364, 376, 379, 384, 390, 394, 402, 408, 413, 415, 416, 419, 444, 446, 449, 450, 455, 457, 497, 500, 539, 590, 595, 659, 660, 667, 669, 677, 840, 841, 842, 843, 844, 849, 857, 998, 1005, 1008, 1017, 1022, 1023, 1024, 1026, 1028, 1035, 1037, 1038, 1040, 1043, 1047, 1048, 1049], "core_dist": [98, 455, 456, 457], "core_distances_": [98, 450, 455, 457], "core_sampl": 419, "core_sample_indices_": [82, 444], "core_samples_mask": 82, "corei": [1034, 1041, 1042], "corentin": 1047, "cori": 1038, "corneil": 1046, "corner": [50, 53, 63, 86, 185, 267, 271, 279, 280, 303, 326, 371, 376, 499, 917, 919, 1002, 1047], "cornerston": 1026, "cornflowerblu": [153, 207, 215, 222, 256, 258, 261, 277, 279, 295, 301, 357], "corollari": 378, "corona": 1046, "corpora": 413, "corpu": [54, 352, 353, 371, 413, 589, 590, 591, 592, 1034], "corr": [115, 189, 270], "corrcoef": [115, 130], "correct": [2, 30, 52, 63, 64, 90, 112, 134, 144, 178, 186, 198, 202, 212, 230, 255, 263, 264, 270, 277, 279, 287, 289, 340, 342, 351, 359, 373, 376, 378, 380, 391, 404, 406, 408, 412, 413, 415, 416, 425, 431, 450, 456, 469, 474, 488, 502, 504, 636, 668, 677, 679, 704, 705, 709, 713, 714, 719, 722, 724, 725, 729, 730, 731, 735, 739, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 784, 785, 786, 788, 791, 792, 795, 797, 833, 834, 835, 842, 850, 876, 986, 998, 1002, 1003, 1017, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "correct_covari": [469, 474], "corrected_std": 270, "corrected_var": 270, "correctli": [2, 163, 167, 212, 230, 246, 277, 279, 285, 300, 317, 331, 340, 376, 385, 413, 415, 425, 437, 469, 494, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 659, 667, 669, 675, 676, 677, 704, 795, 797, 800, 823, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 852, 855, 862, 885, 900, 901, 905, 907, 908, 909, 910, 911, 913, 915, 950, 999, 1002, 1005, 1006, 1012, 1017, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "correl": [2, 51, 64, 113, 115, 116, 130, 141, 147, 149, 151, 164, 167, 175, 183, 184, 185, 187, 188, 198, 202, 208, 230, 270, 276, 289, 316, 320, 321, 332, 369, 372, 373, 381, 390, 393, 405, 410, 412, 417, 450, 457, 482, 483, 485, 494, 495, 501, 525, 565, 607, 610, 628, 635, 636, 637, 683, 684, 744, 758, 779, 780, 781, 831, 845, 846, 882, 883, 885, 894, 993, 998, 1003, 1009, 1012, 1016, 1018, 1022, 1023, 1024, 1028, 1033, 1034, 1035, 1046, 1047], "correlation_coeffici": 610, "correlation_model": 1040, "correspond": [2, 50, 52, 53, 58, 63, 64, 68, 76, 86, 98, 109, 113, 122, 134, 137, 140, 141, 142, 150, 164, 167, 168, 171, 176, 179, 186, 202, 205, 209, 212, 213, 216, 221, 230, 240, 245, 246, 253, 260, 264, 269, 271, 273, 274, 279, 280, 284, 303, 315, 321, 322, 323, 352, 355, 356, 358, 359, 364, 370, 371, 372, 375, 376, 378, 380, 383, 384, 389, 390, 391, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 423, 429, 437, 439, 441, 445, 448, 451, 453, 459, 461, 463, 464, 467, 472, 482, 483, 484, 490, 491, 493, 494, 495, 496, 497, 535, 542, 545, 546, 547, 550, 551, 553, 556, 558, 560, 561, 562, 565, 583, 585, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 618, 629, 631, 633, 634, 636, 644, 647, 648, 649, 653, 659, 660, 661, 662, 663, 669, 670, 672, 673, 674, 675, 676, 677, 679, 681, 682, 683, 684, 688, 691, 692, 693, 695, 704, 711, 714, 725, 726, 735, 739, 743, 747, 753, 755, 775, 779, 783, 789, 790, 795, 797, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 826, 834, 836, 837, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 854, 862, 863, 872, 875, 876, 878, 879, 882, 886, 894, 905, 906, 907, 910, 913, 914, 915, 916, 926, 936, 943, 958, 961, 976, 991, 992, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1016, 1017, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "correspondingli": 1050, "corri": 1044, "corrobor": 388, "corrupt": [44, 127, 198, 218, 229, 388, 861, 998, 1010], "cort": [1044, 1045, 1048, 1049], "cortex": 413, "cos_transform": 43, "cosin": [2, 43, 75, 285, 290, 295, 368, 371, 390, 408, 413, 414, 441, 445, 450, 457, 536, 591, 592, 621, 697, 761, 762, 763, 766, 771, 772, 775, 779, 780, 781, 845, 846, 850, 877, 1005, 1018, 1028, 1043], "cosine_dist": [2, 404, 697, 763, 1005, 1039], "cosine_similar": [2, 344, 404, 761, 766, 1000, 1038], "cosinesimil": 290, "cosmo": 57, "cost": [0, 43, 74, 123, 140, 149, 170, 183, 191, 232, 240, 244, 262, 272, 274, 277, 279, 284, 319, 327, 340, 352, 353, 354, 358, 376, 382, 384, 388, 407, 408, 415, 478, 497, 501, 538, 539, 540, 547, 552, 558, 559, 560, 561, 562, 565, 566, 603, 611, 620, 628, 647, 648, 653, 654, 659, 661, 662, 663, 664, 669, 673, 675, 677, 679, 688, 689, 693, 701, 703, 719, 743, 785, 788, 800, 801, 823, 831, 866, 885, 903, 905, 906, 907, 910, 913, 914, 915, 916, 949, 994, 998, 999, 1002, 1005, 1015, 1016, 1017, 1023, 1024, 1028, 1039, 1042, 1043], "cost_complexity_pruning_path": [355, 913, 914, 915, 916], "costa": [1041, 1046], "costin": 1033, "costli": [104, 109, 141, 181, 264, 271, 348, 364, 377, 382, 408, 443, 628, 809, 811, 897, 898, 949, 1002, 1005, 1014, 1022], "costlier": 672, "costs_": [471, 472, 1049], "could": [43, 48, 52, 53, 64, 72, 77, 86, 103, 104, 120, 123, 135, 136, 143, 146, 149, 165, 170, 175, 182, 185, 186, 187, 212, 213, 216, 221, 230, 236, 244, 245, 246, 263, 264, 270, 283, 289, 298, 301, 322, 336, 337, 351, 355, 358, 365, 376, 382, 384, 390, 394, 402, 406, 412, 415, 416, 420, 474, 534, 539, 608, 609, 630, 672, 803, 808, 810, 992, 998, 999, 1009, 1010, 1012, 1017, 1022, 1030, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "couldn": [1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "count": [2, 23, 43, 52, 54, 62, 64, 76, 82, 86, 102, 103, 118, 155, 156, 186, 187, 212, 214, 230, 243, 253, 264, 279, 284, 287, 290, 320, 321, 352, 353, 371, 373, 380, 385, 390, 391, 406, 408, 413, 415, 416, 446, 449, 489, 497, 537, 545, 582, 589, 590, 591, 592, 595, 605, 618, 641, 698, 706, 716, 719, 730, 731, 739, 755, 784, 785, 787, 788, 840, 844, 845, 846, 854, 857, 868, 917, 919, 951, 966, 990, 991, 994, 998, 1002, 1004, 1005, 1012, 1018, 1026, 1033, 1036, 1038, 1041, 1042, 1044, 1045, 1050], "count_nonzero": [46, 49, 363], "count_onli": [845, 846], "counter": [57, 134, 277, 408, 677, 678, 679, 1046], "counterpart": [991, 999, 1017], "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i6416nullnullnullnullnullnullnullnullnullnullnullnullnull4016nullnullnullnullnullnullnullnullnullnullnullnull324016nullnullnullnullnullnullnullnullnullnullnull13324016nullnullnullnullnullnullnullnullnullnull1133240nullnullnullnullnullnullnullnullnullnull111332nullnullnullnullnullnullnullnullnullnull21113nullnullnullnullnullnullnullnullnullnull3211nullnullnullnullnullnullnullnullnullnull8321nullnullnullnullnullnullnullnullnullnull14832nullnullnullnullnullnullnullnullnullnul": 52, "countlagged_count_1hlagged_count_2hlagged_count_3hlagged_count_1dlagged_count_1d_1hlagged_count_7dlagged_count_7d_1hlagged_mean_24hlagged_max_24hlagged_min_24hlagged_mean_7dlagged_max_7dlagged_min_7di64i64i64i64i64i64i64i64f64i64i64f64i64i642472032241571601697013593": 52, "countri": [316, 326, 497, 999], "counts_": 1045, "countvector": [2, 54, 333, 353, 371, 381, 409, 413, 416, 464, 489, 537, 583, 590, 591, 592, 1033, 1035, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1051], "coupl": [54, 85, 86, 88, 233, 370, 371, 405, 406, 408, 417, 590, 911, 991, 1017], "cournapeau": [0, 398, 1033, 1036], "cours": [47, 48, 191, 284, 363, 376, 378, 407, 413, 416, 417, 992, 997, 998, 1026], "coursecentr": [408, 442], "courtesi": 376, "couvreur": [1042, 1043], "cov": [70, 113, 116, 136, 260, 376, 390, 394, 401, 411, 421, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 520, 533, 535, 542, 549], "cov_": [50, 113], "cov_class_1": 70, "cov_class_2": 70, "cov_init": 1049, "cov_test": 50, "cov_train": 50, "cov_typ": [257, 491], "covar": [255, 256, 261], "covari": [2, 48, 51, 65, 69, 110, 115, 127, 130, 148, 150, 170, 177, 179, 215, 239, 254, 256, 258, 259, 260, 261, 277, 301, 326, 385, 390, 399, 408, 411, 413, 418, 421, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 505, 516, 520, 528, 533, 535, 542, 549, 550, 551, 564, 611, 612, 614, 623, 624, 632, 645, 646, 651, 655, 657, 683, 684, 687, 690, 694, 798, 799, 801, 820, 1001, 1008, 1012, 1023, 1024, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1040, 1042], "covariance_": [51, 70, 111, 113, 469, 470, 471, 472, 473, 474, 475, 476, 550, 551, 996, 1040], "covariance_correct": [469, 474], "covariance_eigh": [327, 542, 1051], "covariance_estim": [69, 550, 996, 1045], "covariance_prior": [261, 798], "covariance_prior_": 798, "covariance_reweight": [469, 474], "covariance_typ": [79, 256, 257, 259, 260, 261, 798, 799, 1049], "covariances_": [255, 256, 257, 260, 261, 798, 799, 1040], "cover": [0, 85, 191, 212, 230, 359, 368, 371, 376, 389, 636, 721, 795, 1002, 1003, 1020], "coverag": [2, 50, 52, 146, 149, 212, 230, 303, 371, 379, 404, 499, 628, 721], "coverage_error": [2, 1002, 1037, 1047], "coverage_fract": 146, "coverages_land": 50, "covertyp": [2, 369, 491, 1028], "covtyp": 191, "cow": 1034, "cowlei": 1043, "cowton": 1047, "cox": [310, 314, 881, 893, 1012, 1041, 1049], "cpo": [168, 373], "cppflag": 374, "cpu": [0, 94, 271, 290, 324, 363, 364, 382, 384, 390, 394, 404, 416, 497, 564, 633, 648, 652, 654, 656, 659, 660, 662, 664, 666, 667, 669, 677, 680, 801, 815, 826, 827, 828, 849, 857, 898, 1002, 1038, 1047, 1048, 1050, 1051], "cpu_count": [77, 140, 290], "cpuexecutionprovid": 402, "cpython": [376, 377, 382, 1048], "craeton": 1051, "craft": 379, "craig": [1014, 1036, 1041], "crall": [1040, 1046], "crammer": [667, 668, 736, 998, 1002, 1017], "crammer06a": [667, 668], "crammer_sing": [905, 1003, 1017, 1033], "cranenburgh": 1037, "crash": [51, 376, 402, 468, 895, 896, 903, 1012, 1037, 1041, 1049, 1050], "crawl": [522, 941], "craze": 1040, "crc": 998, "creat": [2, 43, 44, 47, 50, 58, 59, 63, 64, 66, 68, 70, 72, 74, 76, 78, 79, 80, 82, 85, 91, 93, 95, 103, 104, 111, 116, 122, 125, 126, 136, 139, 142, 143, 144, 146, 150, 153, 167, 170, 172, 175, 176, 177, 179, 182, 185, 187, 193, 195, 197, 199, 209, 213, 214, 224, 225, 234, 244, 246, 249, 250, 252, 260, 264, 265, 266, 268, 270, 280, 284, 298, 300, 301, 312, 314, 315, 319, 322, 323, 334, 336, 337, 341, 342, 345, 347, 348, 349, 353, 355, 359, 364, 371, 372, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 389, 390, 394, 395, 402, 406, 408, 409, 412, 414, 415, 416, 418, 438, 451, 453, 465, 466, 500, 516, 517, 518, 519, 547, 554, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 589, 590, 592, 598, 629, 631, 632, 633, 634, 698, 699, 701, 702, 703, 783, 790, 801, 803, 807, 811, 815, 819, 823, 824, 826, 827, 835, 866, 878, 907, 910, 913, 914, 915, 916, 920, 929, 952, 953, 960, 974, 986, 992, 998, 1001, 1002, 1003, 1005, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1022, 1026, 1030, 1033, 1034, 1036, 1039, 1043, 1046, 1047, 1048, 1049, 1050, 1051], "create_ax": 310, "create_species_bunch": 50, "createindex": 290, "creation": [378, 512, 513, 514, 516, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 657, 845, 846, 1026, 1040, 1041, 1042, 1046], "creativ": 370, "creator": [168, 370, 373], "cred_int_df": 270, "cred_interv": 270, "credibl": 270, "credit": [371, 384, 415, 998, 1026], "credit_amount": 264, "credit_card": 264, "credit_gain": 264, "credit_gain_scor": 264, "credit_histori": 264, "creighton": 324, "crispinlogan": [1045, 1048, 1049, 1051], "cristian": 643, "cristina": 1045, "criteria": [90, 140, 183, 192, 202, 220, 260, 270, 384, 408, 417, 441, 466, 482, 483, 484, 502, 558, 559, 560, 561, 565, 566, 647, 653, 657, 659, 660, 672, 693, 866, 885, 905, 906, 913, 914, 915, 916, 992, 1001, 1006, 1016, 1023, 1036, 1041, 1044], "criterion": [64, 109, 110, 189, 200, 220, 260, 282, 320, 378, 385, 390, 408, 413, 441, 445, 449, 452, 459, 462, 533, 538, 540, 547, 554, 555, 558, 559, 560, 561, 565, 566, 567, 607, 628, 645, 646, 649, 657, 667, 668, 669, 670, 672, 673, 675, 677, 678, 679, 681, 692, 696, 711, 799, 902, 907, 908, 909, 910, 911, 913, 914, 915, 916, 998, 1001, 1002, 1010, 1015, 1018, 1024, 1028, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "criterion_": [200, 202, 657], "critic": [370, 376, 389, 415, 693, 999, 1002, 1010, 1017, 1026, 1044], "crockett": 1048, "crombach": 1035, "crop": [384, 1048], "cross": [2, 9, 29, 52, 53, 64, 70, 87, 90, 91, 103, 104, 106, 107, 109, 113, 116, 127, 140, 142, 143, 145, 146, 149, 158, 162, 165, 166, 168, 186, 187, 192, 198, 199, 200, 201, 207, 209, 212, 214, 220, 230, 247, 252, 257, 258, 260, 262, 267, 270, 271, 272, 274, 276, 277, 278, 279, 282, 284, 285, 287, 294, 308, 309, 311, 316, 319, 321, 326, 332, 340, 347, 357, 371, 376, 378, 385, 388, 389, 390, 402, 403, 406, 409, 410, 413, 415, 416, 417, 418, 437, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 494, 502, 503, 505, 516, 542, 568, 569, 576, 594, 595, 598, 603, 607, 610, 643, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 677, 679, 680, 682, 683, 684, 685, 686, 687, 702, 703, 707, 714, 729, 742, 786, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 847, 855, 865, 866, 870, 885, 886, 903, 905, 907, 910, 922, 956, 1001, 1002, 1005, 1006, 1010, 1012, 1017, 1018, 1022, 1023, 1024, 1026, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "cross_decomposit": [2, 114, 115, 116, 183, 247, 482, 483, 484, 485, 1003, 1023, 1037, 1038, 1040, 1041, 1042], "cross_val": 1033, "cross_val_predict": [2, 154, 266, 319, 399, 406, 412, 415, 437, 568, 569, 827, 828, 1037, 1038, 1039, 1040, 1042, 1044, 1046, 1050], "cross_val_scor": [2, 52, 127, 181, 182, 183, 262, 266, 275, 285, 325, 343, 359, 376, 378, 388, 399, 412, 415, 472, 521, 576, 704, 743, 801, 826, 828, 847, 855, 913, 914, 991, 1002, 1023, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1045, 1046, 1049, 1050], "cross_valid": [2, 43, 52, 143, 149, 154, 186, 214, 246, 266, 273, 284, 287, 316, 326, 376, 389, 399, 576, 826, 827, 1002, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050], "crossentropi": 562, "crossvalid": [270, 285], "crowd": [384, 391, 999, 1022], "crucial": [51, 149, 185, 216, 265, 363, 375, 376, 390, 391, 408, 418, 1017], "crude": 1044, "crunch": 382, "cruz": 178, "crypt": [57, 371], "cryptograph": 385, "cs_": 660, "cs_note": 417, "cs_point": 142, "csail": [408, 667, 668, 677, 842], "csc": [2, 363, 388, 390, 416, 528, 552, 554, 555, 671, 693, 872, 874, 880, 885, 888, 890, 896, 927, 931, 932, 964, 976, 977, 979, 980, 981, 982, 1005, 1012, 1041, 1042, 1044, 1047], "csc_matrix": [452, 558, 559, 564, 565, 566, 567, 882, 913, 914, 915, 916, 992, 1012, 1018, 1038], "csco": 51, "csgraph": [390, 1046], "csie": [191, 370, 487, 509, 510, 659], "csizsek": 1040, "csr": [2, 55, 327, 353, 363, 370, 371, 385, 388, 390, 416, 419, 443, 446, 447, 449, 450, 459, 498, 509, 524, 528, 554, 555, 558, 559, 565, 566, 567, 591, 631, 659, 693, 715, 769, 793, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 860, 868, 872, 874, 876, 877, 878, 880, 883, 884, 885, 888, 889, 890, 892, 895, 898, 913, 914, 915, 916, 927, 931, 932, 956, 964, 976, 977, 978, 979, 980, 981, 982, 983, 984, 1005, 1012, 1016, 1033, 1034, 1039, 1041, 1042, 1048, 1049, 1050], "csr_arrai": 983, "csr_matrix": [290, 320, 440, 444, 452, 497, 535, 545, 558, 559, 560, 561, 564, 565, 566, 567, 589, 594, 595, 715, 831, 860, 878, 880, 907, 908, 910, 911, 913, 914, 915, 916, 950, 956, 973, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 1003, 1012, 1016, 1017, 1018, 1048], "css": 1045, "cst": 996, "cstride": 187, "csv": [51, 370, 373, 381, 1041, 1046], "csytraci": 1036, "ct": [53, 178, 253, 409, 464, 466, 467], "ctc": 178, "cttt": 178, "cube": [420, 534], "cubic": [111, 418], "cuda": [388, 404], "cue": 1001, "culprit": 388, "cultiv": 373, "cultur": 371, "cum_claim": [212, 230], "cum_exposur": 212, "cumsum": [145, 212, 230, 1040], "cumtim": 382, "cumul": [2, 145, 212, 230, 408, 727, 736, 757, 882, 894, 1012, 1016, 1040, 1042, 1043], "cumulated_claim": 212, "cumulated_claim_amount": 230, "cumulated_exposur": 212, "cumulated_sampl": 230, "cunha": [1034, 1035], "cup": [371, 1002], "cupi": [324, 327, 388, 404, 1050, 1051], "cupy_to_ndarrai": 404, "curat": [376, 379, 380], "cure": 998, "curic": [1041, 1042], "current": [0, 2, 7, 47, 80, 134, 175, 186, 230, 310, 319, 364, 365, 371, 374, 376, 377, 381, 385, 388, 390, 391, 404, 405, 408, 412, 415, 416, 417, 418, 440, 446, 450, 468, 469, 470, 471, 472, 473, 474, 475, 476, 533, 536, 542, 554, 555, 558, 559, 560, 561, 563, 565, 566, 567, 577, 592, 594, 611, 618, 627, 628, 647, 668, 672, 676, 677, 678, 679, 789, 798, 799, 850, 854, 862, 863, 881, 893, 903, 913, 914, 915, 916, 919, 921, 922, 923, 968, 976, 991, 996, 998, 1002, 1005, 1006, 1012, 1022, 1025, 1041, 1045, 1047, 1048, 1049], "current_count": 76, "current_month": 175, "current_sklearn_vers": 577, "current_sz_mb": 47, "currentcontrolset": 394, "currentmodul": 376, "curs": [351, 352, 408, 414, 1004, 1005], "cursor": [140, 271], "curv": [2, 29, 47, 50, 60, 61, 63, 72, 107, 109, 137, 139, 140, 145, 183, 192, 193, 203, 212, 230, 232, 234, 237, 238, 240, 242, 249, 250, 254, 255, 256, 257, 259, 260, 262, 264, 270, 280, 283, 306, 311, 319, 327, 344, 357, 383, 403, 407, 412, 414, 437, 438, 439, 503, 511, 516, 522, 526, 565, 633, 646, 659, 699, 701, 703, 707, 708, 709, 710, 728, 730, 742, 783, 785, 788, 789, 790, 798, 799, 807, 818, 824, 829, 831, 832, 843, 866, 885, 905, 910, 998, 999, 1001, 1002, 1008, 1018, 1023, 1024, 1026, 1028, 1030, 1035, 1036, 1039, 1043, 1045, 1046, 1047, 1048, 1049], "curvatur": 305, "cusick": 1043, "custom": [2, 15, 30, 41, 131, 165, 167, 183, 197, 250, 262, 264, 269, 271, 274, 277, 278, 282, 292, 297, 301, 319, 335, 337, 338, 340, 341, 343, 351, 353, 368, 371, 374, 378, 383, 384, 385, 388, 389, 390, 399, 402, 408, 409, 412, 418, 468, 489, 494, 495, 503, 505, 539, 541, 548, 550, 558, 559, 565, 566, 572, 574, 603, 631, 632, 691, 700, 714, 779, 801, 831, 869, 903, 910, 985, 996, 1002, 1005, 1021, 1022, 1023, 1026, 1028, 1033, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1048, 1049, 1050, 1051], "custom_combin": 878, "custom_cv": 412, "custom_cv_2fold": 412, "custom_fnames_enc": 878, "custom_nam": 351, "custom_scor": 327, "custom_scorer_modul": 1002, "custom_scoring_funct": 1002, "customestim": 132, "customkernel": 619, "customvector": 416, "cut": [57, 78, 80, 98, 99, 167, 168, 183, 234, 262, 273, 287, 327, 332, 380, 388, 405, 407, 408, 446, 452, 453, 462, 497, 589, 592, 659, 692, 696, 817, 823, 828, 866, 885, 1012, 1023], "cut_dist": [88, 446], "cutler": [913, 914], "cutoff": [193, 955, 1012, 1042], "cutoffs_x0": 310, "cutoffs_x1": 310, "cv": [2, 43, 51, 52, 61, 62, 63, 64, 87, 103, 104, 105, 106, 109, 127, 140, 143, 145, 149, 159, 167, 181, 182, 186, 202, 211, 214, 246, 264, 266, 268, 269, 270, 271, 272, 273, 275, 276, 280, 284, 285, 287, 316, 324, 326, 327, 340, 347, 389, 390, 399, 406, 407, 412, 415, 417, 437, 472, 568, 569, 595, 603, 648, 652, 654, 656, 660, 662, 664, 666, 674, 676, 801, 803, 804, 805, 806, 807, 815, 816, 817, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 847, 855, 886, 913, 914, 991, 994, 997, 998, 1002, 1012, 1022, 1035, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1051], "cv_alpha": [652, 656], "cv_alphas_": [202, 652, 656, 1045], "cv_best_it": 145, "cv_clf": 145, "cv_color": 145, "cv_estim": 145, "cv_estimators_tut": 159, "cv_line": 145, "cv_mape_scor": 52, "cv_model": 186, "cv_result": [43, 52, 103, 140, 149, 167, 268, 269, 271, 273, 399, 815, 828, 1002], "cv_results_": [103, 104, 105, 113, 140, 159, 167, 260, 264, 268, 269, 270, 271, 274, 278, 281, 282, 292, 340, 472, 595, 674, 676, 801, 804, 805, 815, 823, 1039, 1043, 1045, 1046, 1051], "cv_results_ecoc": 287, "cv_results_lr": 214, "cv_results_ovo": 287, "cv_results_ovr": 287, "cv_results_qr": 214, "cv_results_tre": 287, "cv_results_tuned_model": 284, "cv_results_vanilla_model": 284, "cv_score": [145, 284], "cv_test_scor": 829, "cv_train_scor": 829, "cv_valu": 1041, "cv_values_": [674, 676, 1051], "cvc": 51, "cve": 1046, "cvx": 51, "cwitt": 1041, "cxx": 374, "cxxflag": 374, "cyan": [109, 137, 186, 301], "cybernet": 770, "cycl": [0, 16, 43, 77, 79, 83, 95, 120, 201, 256, 261, 277, 279, 322, 323, 376, 380, 399, 413, 580, 581, 628, 804, 805, 927, 991, 992, 1041, 1042, 1043, 1045, 1046, 1047, 1048], "cycler": 73, "cyclic": [43, 647, 648, 653, 654, 661, 662, 663, 664, 1045], "cyclic_cossin_linear_pipelin": 43, "cyclic_cossin_linear_predict": 43, "cyclic_cossin_transform": 43, "cyclic_hour": 43, "cyclic_month": 43, "cyclic_spline_interactions_pipelin": 43, "cyclic_spline_linear_pipelin": 43, "cyclic_spline_linear_predict": 43, "cyclic_spline_poly_pipelin": 43, "cyclic_spline_poly_predict": 43, "cyclic_spline_transform": 43, "cyclic_weekdai": 43, "cyl": [50, 303], "cynthias13w": 1050, "cyt": 287, "cython": [41, 323, 363, 364, 374, 376, 379, 385, 388, 394, 401, 404, 408, 415, 509, 1012, 1013, 1016, 1017, 1021, 1022, 1033, 1036, 1037, 1039, 1045, 1048, 1049, 1050, 1051], "cython3": 374, "cythonx": 377, "c\u00e8sar": 1002, "d": [0, 2, 45, 46, 47, 49, 50, 51, 52, 54, 55, 67, 68, 72, 73, 77, 82, 83, 93, 94, 96, 102, 103, 113, 118, 120, 123, 127, 129, 170, 178, 186, 212, 220, 228, 230, 237, 242, 243, 244, 245, 258, 269, 270, 278, 284, 289, 296, 297, 303, 307, 329, 330, 333, 340, 344, 345, 353, 370, 371, 373, 376, 378, 382, 388, 406, 408, 410, 411, 413, 415, 416, 418, 419, 444, 446, 447, 452, 460, 463, 488, 494, 504, 527, 535, 537, 558, 559, 566, 567, 582, 583, 591, 615, 616, 620, 623, 624, 629, 645, 646, 649, 670, 671, 672, 681, 689, 690, 693, 694, 698, 700, 706, 709, 722, 723, 724, 725, 727, 757, 765, 779, 782, 789, 813, 840, 842, 844, 845, 846, 861, 872, 876, 878, 879, 881, 893, 898, 915, 916, 920, 994, 996, 998, 999, 1000, 1001, 1002, 1004, 1010, 1012, 1014, 1017, 1018, 1036, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1051], "d120af76829af0d256338dc6dd4be5df4fd1f35bf3a283cab66a51c1c6abd06a": 52, "d1997": 415, "d2": [723, 724, 1002], "d2_absolute_error_scor": [2, 724, 1002, 1047], "d2_log_loss_scor": [2, 1002, 1051], "d2_pinball_scor": [2, 1002, 1047], "d2_pinball_score_08": 1002, "d2_tweedie_scor": [2, 404, 1002, 1046], "d2_tweedie_score_15": 1002, "d55e00": 255, "d81b60": 314, "d83": 373, "d_": [111, 408, 413, 649, 670, 681, 779, 999, 1004], "d_c": 408, "d_chunk": 782, "d_fit": 689, "d_fix": 129, "d_m": 408, "d_multi": 129, "da": [371, 1048, 1049, 1051], "dae": 998, "dagm": 994, "dagstuhl": 1002, "dai": [0, 43, 51, 52, 149, 175, 187, 213, 373, 376, 884, 1026, 1039, 1040, 1047, 1048], "daiki": 1037, "daili": [51, 149, 1026], "dakota": 1043, "dale": 1046, "dalla": 1041, "dalmia": [1039, 1040, 1041], "damag": 416, "damicelli": 1048, "damink": 1050, "daml": [408, 452, 462], "damp": [79, 408, 440, 454], "dan": [55, 1033, 1037, 1038, 1039, 1041, 1042], "danfrankj": 1037, "dang": [680, 998, 1051], "danger": [213, 412], "dangi": 1050, "dangl": 55, "dangonite57": [1048, 1049], "daniel": [324, 363, 886, 1012, 1026, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1045, 1047, 1050], "daniela": [1047, 1048], "danielgaerb": 1048, "danielsen": 1040, "danielweitzenfeld": 1036, "daniil": 1040, "danil": 1041, "dani\u00ebl": 1044, "danna": 1043, "danni": [1036, 1037, 1038], "dantzig": 347, "danylo": 1042, "dao": 1041, "daphn": 1044, "dare": 1043, "darioka": [1045, 1047, 1048], "dariu": [1040, 1041], "dark": [137, 186, 340, 371, 1050], "dark2": [62, 64, 233], "darkblu": 301, "darkorang": [110, 124, 128, 129, 213, 223, 235, 256, 257, 258, 261, 277, 279, 295, 301, 302, 331, 357], "darkorchid": 222, "darkr": [226, 296, 339], "darpa": 371, "darren": [1047, 1048], "darshan": 1045, "dart": 1021, "dartmouth": 0, "dasarathi": 373, "dasgupta": [416, 446, 899, 1014], "dash": [69, 111, 134, 145, 156, 170, 173, 175, 186, 205, 208, 213, 214, 221, 224, 225, 249, 264, 270, 280, 342, 1016], "dashdot": [145, 170, 173, 249], "dask": [1022, 1041], "data": [0, 2, 10, 17, 22, 26, 36, 37, 38, 42, 45, 47, 50, 52, 53, 54, 57, 59, 62, 64, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 89, 92, 93, 94, 95, 98, 101, 103, 104, 106, 110, 112, 118, 120, 123, 124, 126, 128, 130, 132, 134, 137, 139, 140, 142, 143, 145, 146, 151, 152, 153, 155, 157, 159, 161, 165, 169, 170, 171, 172, 174, 175, 177, 179, 181, 183, 186, 187, 192, 193, 196, 197, 198, 201, 202, 203, 208, 210, 211, 212, 213, 214, 215, 218, 220, 221, 225, 226, 228, 229, 230, 232, 233, 234, 235, 236, 239, 242, 243, 244, 246, 248, 249, 250, 253, 255, 256, 257, 258, 259, 261, 263, 264, 268, 270, 272, 273, 274, 275, 278, 284, 285, 287, 289, 290, 294, 296, 298, 299, 300, 301, 303, 306, 307, 309, 311, 312, 313, 317, 319, 321, 323, 324, 325, 327, 330, 331, 333, 334, 336, 337, 339, 344, 345, 351, 356, 357, 358, 362, 364, 368, 369, 370, 371, 372, 373, 376, 378, 379, 382, 383, 384, 385, 389, 394, 396, 399, 402, 404, 405, 406, 407, 410, 411, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 425, 426, 427, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 521, 522, 523, 524, 525, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 574, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 618, 619, 623, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 711, 712, 714, 718, 719, 721, 726, 728, 729, 730, 731, 732, 735, 737, 738, 739, 741, 742, 755, 756, 758, 762, 764, 765, 770, 779, 784, 785, 786, 788, 789, 790, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 922, 924, 925, 926, 927, 929, 930, 931, 932, 935, 936, 937, 946, 948, 949, 964, 967, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "data1010": 1038, "data_filenam": [502, 506], "data_hom": [486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 1040, 1049], "data_home_path": 500, "data_id": [44, 143, 175, 186, 212, 230, 240, 264, 284, 287, 316, 370, 497], "data_ind": 53, "data_max": 1038, "data_max_": [875, 1038], "data_min": 1038, "data_min_": [875, 1038], "data_modul": 126, "data_nam": 394, "data_path": 47, "data_rang": 1038, "data_range_": [875, 1038], "data_sampl": 54, "data_set": 306, "data_size_mb": 353, "data_stream": 47, "data_test": [244, 264, 271, 351, 510], "data_test_size_mb": 351, "data_train": [244, 264, 271, 351, 510], "data_train_size_mb": 351, "data_transform": 640, "data_transpos": [1047, 1049], "data_unravel_indic": 53, "data_vers": 394, "databas": [47, 168, 315, 363, 365, 371, 373, 408, 413, 415, 416, 419, 442, 444, 511, 556, 557, 898, 1014], "dataconversionwarn": 2, "datadimensionalitywarn": 2, "datafram": [2, 43, 52, 62, 102, 103, 104, 134, 140, 143, 146, 151, 167, 175, 181, 185, 186, 187, 188, 193, 198, 202, 216, 220, 230, 250, 253, 260, 264, 268, 270, 271, 273, 281, 282, 284, 287, 315, 316, 317, 322, 323, 324, 347, 351, 352, 370, 371, 376, 378, 381, 390, 409, 415, 432, 442, 443, 445, 447, 449, 464, 466, 467, 468, 482, 483, 484, 485, 489, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 689, 690, 693, 801, 804, 805, 815, 831, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 927, 956, 972, 975, 990, 991, 992, 1022, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "datalim": 257, "datapoint": [43, 77, 85, 89, 174, 177, 197, 244, 245, 249, 265, 270, 289, 418, 446, 503, 558, 559, 560, 561, 565, 566, 567, 612, 913, 914, 915, 916, 995], "dataset": [2, 37, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 59, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 100, 103, 104, 105, 106, 107, 111, 112, 113, 116, 119, 122, 123, 124, 125, 127, 129, 130, 133, 135, 136, 137, 138, 139, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 165, 166, 167, 168, 169, 171, 173, 178, 181, 182, 188, 189, 191, 192, 195, 197, 199, 200, 201, 203, 204, 205, 206, 209, 210, 211, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 234, 236, 237, 238, 240, 243, 245, 247, 248, 252, 253, 255, 257, 258, 259, 261, 263, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 290, 292, 293, 294, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 338, 340, 341, 342, 343, 345, 347, 348, 349, 352, 353, 354, 355, 358, 359, 364, 365, 379, 380, 382, 389, 390, 393, 394, 402, 404, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 420, 423, 428, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 469, 470, 473, 474, 475, 476, 478, 481, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 584, 585, 588, 589, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 629, 632, 633, 634, 635, 636, 639, 640, 641, 644, 646, 647, 648, 650, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 709, 711, 712, 730, 756, 758, 788, 789, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 861, 862, 863, 865, 866, 869, 870, 878, 879, 883, 885, 887, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 931, 932, 936, 937, 991, 992, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1026, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "dataset_44063": 52, "dataset_nam": [249, 290], "datasets_0004_44063": 52, "datasets_nam": 249, "datastructur": [404, 1041, 1045], "datastuctur": 1050, "datatyp": [388, 464, 466, 1040, 1043], "date": [43, 102, 149, 168, 175, 187, 371, 373, 376, 380, 391, 409, 1022], "dateco2datef641958": 175, "daten": [450, 1041, 1042], "datenbergwerk": 1043, "datetim": [43, 55, 175, 187], "dauphin": 1035, "dave": [1033, 1040, 1041, 1047, 1049], "davi": [2, 474, 726, 1002, 1037], "david": [0, 112, 371, 398, 408, 415, 418, 462, 533, 537, 568, 569, 623, 624, 629, 726, 798, 902, 992, 998, 1006, 1015, 1026, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "davidblnc": [1048, 1049], "davidleon123": 1051, "davies_bouldin_scor": [2, 408, 1041], "davis2006": 1002, "daw": [0, 398, 1033, 1034, 1035, 1036, 1037], "dawson": [1037, 1051], "dayn": [1048, 1049], "db": [82, 88, 408], "dbauer9": 1044, "dberenbaum": 1049, "dbg": 382, "dbpedia": 55, "dbpedia_resource_prefix_len": 55, "dbscan": [2, 71, 72, 73, 79, 88, 93, 96, 98, 183, 325, 331, 388, 390, 446, 450, 452, 455, 513, 705, 706, 718, 738, 794, 796, 857, 885, 1005, 1023, 1027, 1028, 1033, 1035, 1037, 1038, 1040, 1041, 1042, 1049, 1050], "dbscan_clust": 446, "dcc": 371, "dcg": [727, 757, 1002, 1040], "dcg_score": [2, 757, 1002, 1040, 1043], "dd": [50, 51, 152, 303, 499], "ddof": [270, 885, 896], "de": [51, 154, 316, 373, 636, 689, 765, 998, 999, 1022, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "dea": [1047, 1048, 1049], "deactiv": [251, 370, 377, 382, 394, 409, 804, 805, 1047], "dead": 1051, "deadlock": 391, "deal": [62, 90, 103, 149, 181, 186, 198, 236, 284, 287, 344, 353, 376, 381, 409, 416, 417, 418, 474, 497, 704, 709, 764, 788, 871, 949, 998, 1026, 1036, 1048, 1049], "dealloc": 1050, "dean": [154, 1041, 1047, 1049, 1051], "death": 371, "debian": [0, 363, 374, 382], "debias": 129, "deborah": [1039, 1040, 1050], "debug": [2, 359, 364, 377, 379, 382, 390, 393, 628, 904, 1041, 1045], "debugg": [379, 384], "dec": [213, 287, 678, 884, 909, 1017], "decad": [186, 1022], "decai": [175, 545, 862, 863, 949, 1002, 1016, 1037], "decal": 1045, "decemb": [112, 149, 175, 371, 665, 686, 687, 1033, 1041, 1043, 1045, 1046, 1048], "decent": [239, 269, 371, 1004], "deci": 279, "decid": [43, 50, 90, 93, 103, 144, 149, 261, 267, 270, 277, 371, 376, 391, 402, 407, 416, 418, 450, 457, 560, 561, 612, 636, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 672, 682, 685, 798, 847, 848, 849, 851, 853, 855, 856, 857, 868, 1001, 1008, 1026, 1046, 1049], "decil": [633, 1044], "deciles_hlines_": 633, "deciles_vlines_": 633, "decim": [62, 176, 471, 472, 918, 1040, 1041], "decis": [0, 2, 40, 43, 62, 64, 67, 70, 76, 89, 91, 93, 124, 126, 133, 136, 137, 138, 139, 144, 152, 153, 154, 156, 157, 161, 167, 168, 172, 174, 186, 196, 197, 205, 221, 222, 225, 239, 240, 242, 247, 250, 262, 273, 274, 276, 277, 287, 298, 301, 305, 310, 311, 312, 315, 328, 332, 333, 336, 337, 338, 339, 340, 341, 342, 348, 349, 351, 363, 372, 373, 376, 390, 402, 403, 406, 408, 415, 437, 469, 497, 501, 505, 520, 537, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 594, 595, 632, 633, 634, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 699, 701, 703, 704, 708, 719, 721, 727, 728, 736, 740, 741, 743, 757, 783, 785, 788, 789, 790, 795, 800, 801, 804, 805, 815, 817, 823, 828, 831, 833, 834, 836, 847, 866, 885, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 996, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1015, 1016, 1017, 1021, 1022, 1023, 1024, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1047, 1049, 1050, 1051], "decision_funct": [48, 50, 62, 64, 89, 136, 150, 161, 224, 225, 226, 240, 249, 264, 277, 284, 296, 297, 305, 312, 326, 338, 339, 340, 344, 345, 349, 378, 390, 406, 407, 415, 437, 469, 550, 551, 554, 556, 560, 562, 564, 568, 594, 595, 632, 633, 634, 659, 660, 667, 669, 675, 676, 677, 678, 699, 701, 703, 708, 721, 727, 728, 736, 740, 741, 743, 757, 783, 789, 790, 795, 800, 801, 804, 805, 815, 823, 826, 833, 834, 835, 836, 851, 865, 872, 902, 905, 907, 909, 910, 924, 998, 1002, 1008, 1009, 1016, 1017, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1050], "decision_function_shap": [319, 348, 907, 910, 1017, 1038, 1039, 1042, 1043], "decision_path": [358, 558, 559, 565, 566, 567, 913, 914, 915, 916, 1039, 1044], "decision_threshold": [264, 284], "decision_tre": [917, 918, 919, 1018], "decision_tree_learn": [913, 914, 1018], "decisionboundarydisplai": [2, 48, 66, 67, 70, 89, 136, 150, 155, 197, 205, 221, 226, 273, 293, 298, 301, 315, 336, 337, 338, 339, 341, 342, 344, 356, 1047, 1048, 1050, 1051], "decisiontre": [142, 554, 1038], "decisiontreeclassifi": [2, 67, 134, 136, 142, 155, 274, 287, 325, 355, 356, 358, 390, 407, 415, 554, 556, 558, 560, 562, 565, 632, 712, 807, 829, 914, 915, 917, 918, 919, 992, 1003, 1018, 1034, 1035, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "decisiontreeclassifierifitteddecisiontreeclassifi": 358, "decisiontreeregressor": [2, 135, 137, 250, 311, 319, 325, 357, 381, 555, 557, 559, 560, 561, 563, 566, 633, 634, 913, 916, 918, 944, 992, 1003, 1018, 1034, 1035, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "decisiontreeregressorifitteddecisiontreeregressor": [321, 357], "declan": 1045, "declar": [89, 233, 246, 359, 376, 377, 382, 390, 443, 446, 447, 459, 471, 472, 478, 691, 695, 1040, 1044], "decod": [47, 303, 371, 390, 504, 570, 589, 590, 592, 1033, 1034], "decode_error": [47, 416, 504, 589, 590, 592, 1035], "decompos": [11, 120, 124, 137, 312, 535, 539, 710, 826, 949, 997, 998, 1002, 1019, 1027, 1028], "decomposit": [2, 9, 44, 45, 54, 55, 83, 91, 102, 104, 105, 106, 116, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 152, 191, 232, 233, 235, 243, 244, 247, 248, 251, 269, 294, 299, 315, 323, 326, 327, 352, 365, 369, 382, 385, 390, 404, 405, 406, 409, 415, 420, 449, 451, 452, 453, 462, 482, 483, 484, 496, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 557, 612, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 673, 674, 675, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 798, 799, 854, 861, 864, 867, 883, 914, 948, 949, 998, 999, 1002, 1019, 1021, 1023, 1024, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "decompress": [402, 1033], "decor": [2, 187, 319, 376, 377, 378, 385, 807, 824, 939, 943, 944, 962, 968, 1043, 1046, 1049, 1051], "decoupl": [415, 1004], "decreas": [63, 74, 80, 88, 91, 99, 107, 149, 151, 167, 168, 178, 186, 187, 189, 220, 242, 243, 272, 277, 305, 312, 315, 319, 355, 363, 365, 376, 406, 408, 415, 441, 445, 463, 522, 535, 536, 542, 558, 559, 560, 561, 562, 563, 565, 566, 567, 603, 636, 637, 638, 677, 678, 679, 707, 713, 728, 783, 790, 862, 863, 913, 914, 915, 916, 991, 993, 994, 998, 999, 1002, 1005, 1006, 1009, 1010, 1016, 1017, 1026, 1035, 1040, 1043, 1046], "dede00": [79, 95, 96], "dedic": [43, 268, 349, 374, 380, 382, 388, 391, 404, 408, 585, 673, 675, 688, 991, 998, 1021, 1041, 1050], "deduc": 46, "deduct": 1006, "dedupl": 1037, "deeksha": 1045, "deem": [278, 279, 535, 1010, 1046], "deep": [212, 378, 390, 402, 415, 422, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 770, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 1006, 1007, 1021, 1022, 1026, 1038, 1044, 1045, 1047], "deepcopi": 378, "deeper": [351, 1018], "deepest": [562, 563, 1044], "deeplook": 1043, "deeppink": 279, "def": [43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 57, 62, 64, 69, 70, 72, 75, 76, 85, 88, 89, 91, 94, 102, 107, 118, 120, 122, 123, 127, 129, 132, 134, 137, 139, 143, 145, 146, 149, 154, 173, 176, 178, 179, 182, 189, 194, 200, 202, 205, 212, 213, 220, 221, 222, 230, 232, 233, 246, 247, 249, 255, 256, 257, 258, 260, 261, 264, 265, 268, 269, 270, 271, 273, 278, 281, 285, 290, 295, 297, 300, 303, 306, 308, 310, 312, 315, 316, 319, 327, 333, 336, 340, 344, 349, 351, 352, 353, 363, 371, 376, 378, 382, 383, 388, 409, 412, 416, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 509, 510, 534, 598, 602, 611, 612, 619, 782, 878, 939, 944, 962, 1002, 1009, 1017], "default": [2, 43, 52, 54, 62, 66, 77, 80, 88, 92, 120, 126, 140, 164, 170, 181, 187, 193, 194, 202, 209, 212, 213, 230, 241, 243, 249, 251, 253, 258, 264, 265, 273, 279, 284, 289, 290, 310, 314, 317, 319, 320, 324, 326, 327, 344, 347, 348, 351, 352, 353, 355, 358, 359, 363, 364, 370, 371, 374, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 399, 402, 406, 407, 408, 409, 412, 413, 415, 416, 417, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 712, 713, 714, 715, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 735, 736, 737, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 935, 937, 938, 939, 941, 943, 944, 948, 949, 950, 951, 952, 953, 954, 955, 964, 966, 967, 970, 971, 972, 974, 975, 976, 982, 985, 987, 988, 990, 991, 992, 994, 996, 998, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1014, 1016, 1017, 1018, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "default_bas": [79, 95], "default_rng": 273, "default_scor": 381, "default_tag": 2, "default_target_attribut": 370, "default_tim": [227, 258], "defaultdict": [49, 52, 62, 189, 273, 352, 353], "defazio": [659, 998], "defens": 287, "defer": 376, "deffici": 1051, "defici": [551, 999, 1016], "defin": [8, 27, 46, 51, 64, 70, 86, 88, 90, 99, 102, 103, 105, 116, 120, 125, 132, 134, 135, 154, 168, 170, 177, 178, 179, 187, 188, 189, 193, 213, 220, 229, 230, 239, 243, 246, 250, 252, 255, 260, 264, 270, 271, 273, 277, 279, 280, 281, 282, 284, 287, 290, 308, 310, 320, 326, 327, 340, 344, 347, 351, 352, 363, 372, 375, 376, 377, 378, 382, 383, 385, 388, 389, 390, 402, 403, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 416, 418, 423, 424, 425, 427, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 489, 520, 521, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 623, 624, 628, 629, 630, 631, 633, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 697, 698, 700, 709, 711, 712, 717, 722, 723, 724, 725, 726, 729, 732, 739, 742, 746, 747, 749, 751, 752, 754, 755, 758, 761, 767, 782, 786, 791, 792, 793, 794, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 892, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 935, 937, 941, 947, 959, 961, 985, 991, 992, 998, 999, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1022, 1028, 1030, 1035, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "definit": [2, 91, 112, 200, 212, 277, 290, 352, 376, 377, 378, 390, 393, 408, 410, 411, 413, 528, 530, 536, 612, 629, 693, 709, 719, 729, 747, 759, 798, 799, 991, 994, 996, 998, 1000, 1002, 1005, 1016, 1020, 1028, 1037, 1041, 1048], "definitelyuncertain": 1039, "deflat": [186, 411, 420, 534], "defoi": 1046, "deform": [150, 260, 349], "degener": [118, 256, 420, 440, 454, 534, 721, 998, 1002, 1042, 1046, 1047], "degrad": [149, 187, 239, 310, 347, 352, 414, 779, 1010], "degre": [43, 70, 122, 136, 175, 181, 185, 186, 187, 191, 193, 198, 200, 202, 213, 216, 245, 251, 255, 256, 257, 260, 261, 270, 285, 308, 321, 322, 337, 344, 346, 413, 417, 446, 452, 499, 536, 542, 640, 641, 644, 657, 776, 798, 801, 851, 880, 884, 907, 908, 909, 910, 911, 994, 995, 997, 998, 999, 1000, 1002, 1003, 1005, 1008, 1009, 1012, 1015, 1017, 1036, 1042, 1046, 1047, 1050], "degrees_of_freedom_": 798, "degrees_of_freedom_prior": 798, "degrees_of_freedom_prior_": 798, "dei": 1045, "deil": [1034, 1044, 1045], "dein": 416, "dekel": [667, 668, 998], "del": [55, 382, 1045, 1046], "delai": [2, 376, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 801, 815, 826, 827, 1047, 1048, 1051], "delalleau": 1015, "delanou": 1044, "delattr": 1045, "delayed_funct": 967, "delbert": [73, 440, 454], "deleg": [89, 382, 432, 433, 918, 990, 1037, 1039, 1045], "delet": [2, 104, 330, 332, 380, 381, 469, 474, 486], "delete_index": 330, "delete_indic": 330, "deleteri": 1040, "deli": 402, "deliber": 998, "delimit": [376, 1008, 1048], "deliv": [363, 1026], "deliveri": 380, "dell": 51, "delong": [1045, 1046], "delta": [411, 452], "delta_": 999, "delta_k": 411, "delteil": 1037, "delv": [862, 863], "demand": [145, 149, 390, 416, 801, 815, 826, 827], "demarc": 93, "demiraj": [1048, 1049], "demo": [52, 53, 56, 71, 72, 74, 75, 76, 79, 80, 86, 87, 89, 90, 92, 93, 94, 95, 97, 100, 150, 183, 189, 198, 218, 243, 258, 260, 271, 279, 315, 325, 331, 351, 352, 378, 405, 408, 416, 419, 440, 441, 444, 446, 447, 448, 450, 451, 453, 454, 455, 458, 461, 503, 512, 513, 514, 542, 705, 706, 718, 720, 738, 794, 796, 866, 885, 886, 1023], "demo_param": 378, "demonstr": [46, 52, 57, 58, 59, 62, 68, 71, 75, 78, 88, 94, 102, 104, 134, 138, 144, 147, 165, 166, 178, 179, 183, 189, 213, 246, 252, 253, 257, 261, 262, 266, 273, 276, 279, 285, 292, 295, 302, 309, 311, 312, 314, 317, 321, 328, 330, 331, 334, 338, 344, 351, 352, 353, 357, 359, 365, 371, 372, 376, 381, 388, 399, 404, 408, 412, 415, 447, 503, 513, 521, 698, 704, 714, 743, 799, 801, 848, 870, 901, 913, 991, 992, 996, 1002, 1003, 1004, 1005, 1012, 1015, 1018, 1020, 1023], "dem\u0161ar": 270, "den": [0, 397, 1034, 1035, 1040, 1041, 1042, 1045, 1046], "dendrit": [408, 711], "dendro": 189, "dendro_idx": 189, "dendrogram": [71, 100, 183, 189, 358, 408, 441, 445, 505, 1023, 1045], "denero": 736, "deng": [1037, 1038, 1039], "dengemann": 1034, "dengyong": 901, "deni": [1035, 1036, 1040, 1041, 1042, 1048, 1049], "denni": 1047, "denois": [42, 68, 83, 84, 86, 99, 119, 125, 183, 413, 497, 536, 538, 542, 585, 588, 831, 875, 1023], "denomin": [277, 415, 416, 421, 475, 591, 705, 758, 996], "denot": [166, 385, 390, 394, 406, 408, 412, 415, 589, 590, 592, 801, 807, 815, 824, 878, 879, 986, 991, 994, 998, 1000, 1002, 1003, 1012, 1015, 1050], "dens": [51, 55, 88, 183, 192, 198, 201, 207, 323, 324, 333, 363, 385, 390, 408, 413, 415, 417, 443, 446, 447, 449, 464, 467, 497, 524, 525, 528, 535, 536, 545, 567, 608, 609, 630, 631, 653, 658, 659, 660, 667, 668, 669, 673, 674, 677, 678, 679, 688, 689, 690, 693, 694, 761, 762, 768, 780, 793, 862, 863, 870, 877, 878, 880, 882, 883, 884, 885, 894, 895, 896, 897, 898, 905, 906, 907, 908, 910, 911, 950, 972, 975, 992, 995, 998, 999, 1002, 1003, 1005, 1008, 1012, 1014, 1015, 1016, 1017, 1018, 1023, 1033, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "dense_lasso": 199, "dense_output": [762, 768, 898, 950, 1041], "denser": 444, "densif": 1042, "densifi": [390, 659, 660, 667, 668, 669, 677, 678, 679, 905, 992, 1035], "densiti": [2, 50, 82, 88, 93, 98, 107, 129, 166, 168, 173, 183, 199, 212, 227, 230, 236, 239, 243, 254, 255, 261, 270, 276, 287, 291, 296, 297, 310, 340, 351, 371, 373, 378, 385, 390, 408, 415, 419, 427, 444, 446, 448, 450, 452, 464, 467, 499, 503, 537, 542, 550, 551, 798, 799, 801, 845, 846, 850, 851, 898, 996, 998, 1001, 1005, 1007, 1008, 1014, 1021, 1023, 1024, 1027, 1028, 1035, 1037, 1041, 1042, 1048, 1049], "density_": 898, "densityestim": [378, 427], "densitymixin": [2, 378], "denton": 1035, "deodhar": 1045, "deoli": 1046, "depart": [178, 408], "depedend": 1050, "depend": [2, 25, 43, 44, 46, 52, 64, 72, 86, 107, 124, 140, 143, 146, 147, 149, 151, 154, 163, 167, 176, 181, 183, 184, 186, 189, 191, 194, 198, 230, 233, 238, 239, 245, 249, 260, 264, 270, 271, 275, 276, 277, 284, 290, 306, 310, 315, 321, 324, 327, 337, 344, 347, 352, 353, 359, 363, 364, 365, 369, 376, 378, 379, 384, 385, 388, 389, 390, 391, 393, 394, 401, 402, 404, 408, 410, 412, 413, 415, 416, 417, 418, 419, 438, 439, 440, 444, 446, 447, 449, 450, 452, 454, 457, 459, 460, 462, 464, 469, 484, 489, 490, 491, 494, 497, 501, 502, 503, 505, 506, 511, 535, 536, 542, 545, 552, 560, 561, 563, 589, 590, 591, 592, 603, 605, 608, 609, 612, 628, 633, 634, 639, 641, 649, 659, 660, 670, 672, 674, 677, 678, 679, 681, 688, 691, 692, 695, 696, 712, 730, 731, 739, 779, 782, 784, 785, 788, 793, 794, 798, 799, 820, 830, 847, 848, 849, 851, 853, 854, 855, 856, 857, 863, 864, 866, 878, 879, 882, 885, 899, 906, 907, 910, 914, 929, 990, 991, 992, 994, 995, 996, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1010, 1014, 1016, 1017, 1018, 1023, 1028, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1048, 1049, 1050], "dependabot": 1051, "dependen": 347, "depict": [134, 272, 415, 1001], "deploi": [264, 327, 363, 393, 402, 407, 1022, 1026], "deploy": [384, 402, 1021, 1022, 1026], "depot": 51, "deprec": [2, 16, 147, 189, 319, 322, 364, 378, 379, 380, 385, 390, 399, 442, 445, 447, 450, 457, 459, 482, 483, 484, 485, 528, 537, 539, 541, 554, 570, 571, 580, 581, 583, 628, 659, 660, 674, 676, 680, 693, 710, 743, 779, 780, 781, 783, 801, 804, 805, 815, 829, 830, 832, 852, 864, 865, 870, 902, 907, 910, 927, 929, 931, 932, 943, 944, 991, 992, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "deprecated_api_refer": 376, "deprecationwarn": 1043, "dept": 373, "depth": [43, 139, 143, 147, 150, 155, 287, 355, 357, 358, 363, 374, 376, 380, 389, 415, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 845, 846, 850, 913, 914, 915, 916, 917, 919, 955, 1007, 1008, 1018, 1035, 1036, 1044], "der": [693, 697, 999, 1036, 1037, 1041], "derek": 1041, "deriv": [43, 57, 129, 130, 145, 175, 178, 188, 200, 202, 206, 213, 364, 371, 378, 410, 412, 414, 415, 416, 418, 420, 441, 445, 446, 465, 492, 534, 607, 618, 623, 649, 670, 677, 681, 862, 863, 878, 884, 905, 906, 996, 998, 999, 1002, 1006, 1008, 1017, 1033, 1034, 1035, 1040, 1041, 1042, 1048], "deros": 1044, "derouich": 1033, "derweh": 1051, "desai": [1040, 1042, 1045, 1046, 1048, 1049], "desalvo": 991, "descamp": 1041, "descend": [142, 628, 1043], "descent": [2, 46, 53, 144, 183, 192, 200, 201, 239, 244, 296, 322, 339, 413, 415, 471, 472, 478, 488, 497, 504, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 632, 640, 647, 648, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 669, 673, 675, 677, 678, 679, 682, 683, 684, 685, 688, 695, 831, 862, 863, 866, 905, 909, 975, 999, 1006, 1008, 1017, 1023, 1024, 1028, 1033, 1036, 1037, 1038, 1040, 1042, 1044, 1046, 1047, 1048], "descr": [126, 168, 369, 370, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 1041], "describ": [2, 43, 52, 89, 154, 168, 186, 230, 244, 270, 279, 359, 363, 364, 369, 371, 373, 375, 376, 378, 381, 384, 390, 391, 405, 408, 410, 411, 412, 413, 415, 416, 462, 469, 473, 474, 491, 494, 496, 497, 498, 501, 502, 503, 504, 505, 506, 511, 517, 518, 519, 529, 608, 609, 646, 660, 669, 715, 798, 799, 840, 842, 878, 880, 949, 991, 994, 997, 998, 1001, 1002, 1004, 1008, 1016, 1017, 1018, 1025, 1041, 1043], "descript": [2, 52, 168, 186, 316, 369, 370, 375, 376, 380, 381, 384, 390, 408, 416, 452, 462, 464, 467, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 545, 631, 677, 763, 766, 779, 1002, 1016, 1017, 1022, 1025, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "descriptor": [390, 509, 510], "deseri": 402, "deserv": [376, 382], "deshmukh": 1046, "deshpand": [1038, 1039], "design": [0, 2, 53, 58, 111, 134, 154, 173, 185, 186, 195, 246, 260, 264, 310, 316, 358, 365, 370, 376, 381, 388, 389, 390, 391, 393, 394, 396, 401, 402, 408, 415, 417, 516, 529, 633, 634, 649, 666, 670, 677, 681, 686, 801, 819, 820, 840, 842, 992, 998, 999, 1002, 1003, 1012, 1021, 1022, 1026, 1035, 1042, 1051], "desir": [50, 61, 136, 168, 182, 212, 214, 310, 314, 327, 369, 376, 384, 396, 402, 405, 408, 411, 412, 413, 417, 504, 539, 541, 545, 548, 568, 594, 603, 604, 665, 671, 686, 687, 700, 709, 737, 845, 846, 850, 865, 870, 872, 875, 876, 878, 879, 881, 882, 886, 889, 891, 893, 894, 935, 970, 994, 996, 999, 1005, 1012, 1016, 1017, 1018, 1033, 1041, 1042, 1043, 1046], "desislava": 1047, "desktop": 374, "despit": [64, 116, 176, 210, 212, 230, 245, 299, 390, 399, 410, 628, 629, 631, 998, 1005, 1026, 1041, 1042], "dessyvv": 1047, "dest": 324, "destin": 1026, "destroi": [276, 416, 796, 874, 1012], "det": [2, 183, 252, 262, 279, 280, 376, 410, 516, 565, 699, 703, 728, 790, 831, 866, 885, 905, 947, 1023, 1045], "det_curv": [2, 267, 699, 783, 790, 1002, 1045, 1046, 1051], "detail": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 64, 90, 134, 135, 137, 141, 142, 147, 154, 183, 187, 200, 202, 216, 237, 241, 244, 245, 249, 251, 253, 261, 264, 268, 277, 284, 293, 296, 297, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 355, 357, 359, 363, 364, 365, 368, 369, 370, 371, 374, 376, 378, 380, 381, 382, 384, 388, 389, 390, 391, 394, 402, 404, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 432, 433, 437, 443, 444, 446, 447, 448, 450, 451, 452, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 472, 497, 505, 525, 532, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 549, 550, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 594, 595, 598, 603, 608, 609, 611, 615, 620, 623, 628, 629, 631, 632, 633, 635, 640, 641, 646, 647, 648, 652, 654, 656, 657, 658, 659, 660, 662, 664, 666, 667, 669, 672, 673, 674, 675, 676, 677, 679, 680, 688, 689, 690, 691, 692, 693, 694, 695, 696, 702, 706, 712, 714, 775, 779, 780, 781, 782, 799, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 843, 847, 848, 850, 851, 852, 853, 855, 856, 858, 859, 861, 864, 865, 867, 869, 870, 882, 886, 894, 900, 901, 902, 903, 907, 910, 913, 914, 915, 916, 943, 967, 991, 992, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1015, 1018, 1024, 1025, 1026, 1028, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "detcurvedisplai": [2, 267, 322, 728, 1045, 1046, 1050, 1051], "detect": [2, 14, 42, 47, 49, 58, 70, 96, 98, 111, 112, 113, 141, 143, 150, 183, 195, 216, 226, 238, 252, 262, 264, 270, 273, 279, 280, 291, 310, 316, 327, 339, 371, 374, 376, 380, 388, 390, 406, 407, 408, 410, 412, 416, 430, 446, 449, 464, 466, 469, 470, 473, 474, 475, 476, 488, 489, 491, 493, 497, 511, 513, 516, 523, 538, 539, 540, 547, 564, 565, 589, 592, 597, 632, 640, 678, 699, 703, 728, 790, 831, 851, 855, 866, 875, 878, 879, 883, 884, 885, 905, 909, 994, 998, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1033, 1036, 1039, 1040, 1041, 1043, 1045, 1046, 1048, 1049], "detection_error_tradeoff": 1002, "detector": [371, 378, 390, 851], "determin": [2, 48, 50, 53, 57, 80, 88, 111, 134, 136, 140, 149, 166, 175, 186, 193, 194, 209, 215, 270, 283, 310, 315, 344, 353, 358, 359, 375, 376, 378, 385, 389, 390, 405, 406, 408, 412, 413, 415, 416, 417, 418, 431, 437, 441, 442, 443, 445, 447, 449, 450, 456, 459, 460, 461, 465, 469, 470, 472, 473, 474, 475, 476, 482, 483, 484, 488, 491, 493, 496, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 538, 540, 543, 544, 553, 554, 555, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 583, 584, 585, 589, 592, 595, 603, 608, 609, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 636, 637, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 688, 690, 691, 693, 694, 695, 708, 712, 724, 730, 731, 739, 784, 785, 786, 788, 789, 794, 801, 803, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 838, 839, 841, 848, 850, 851, 856, 861, 862, 863, 869, 870, 878, 879, 880, 882, 886, 894, 905, 906, 908, 911, 914, 916, 919, 947, 964, 970, 972, 975, 991, 994, 996, 1001, 1005, 1007, 1008, 1010, 1012, 1015, 1016, 1018, 1033, 1038, 1041, 1042, 1044, 1045, 1046], "determinist": [91, 146, 364, 372, 390, 408, 443, 447, 449, 451, 452, 453, 458, 459, 462, 552, 560, 561, 565, 566, 584, 585, 692, 696, 812, 813, 861, 913, 914, 924, 994, 998, 1034, 1037, 1039, 1041, 1042, 1045, 1048, 1049], "detlefsen": 1047, "detomaso": 1040, "detriment": [46, 167, 284, 364, 417, 998], "dev": [179, 186, 230, 275, 280, 374, 376, 380, 382, 384, 943, 944, 1002, 1026, 1029, 1040, 1045, 1048, 1049], "dev0": [374, 380, 1025, 1029], "dev514": 1047, "devansh": [1040, 1041], "devanshkyada27": 1050, "devashish": 1039, "devel": 374, "develop": [0, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 325, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 371, 375, 376, 380, 382, 388, 390, 391, 393, 399, 402, 405, 410, 411, 415, 416, 422, 425, 432, 494, 801, 943, 944, 985, 998, 1002, 1005, 1018, 1021, 1022, 1023, 1025, 1026, 1033, 1041, 1042, 1043, 1048, 1051], "developing_estim": 1023, "devi": 1045, "devianc": [2, 145, 148, 212, 230, 325, 415, 554, 559, 560, 562, 563, 566, 649, 670, 681, 722, 724, 725, 748, 750, 753, 914, 916, 998, 1018, 1034, 1043, 1044, 1046, 1047, 1049], "deviant": [218, 1008], "deviat": [52, 58, 70, 94, 111, 137, 140, 141, 142, 144, 168, 170, 175, 177, 179, 186, 193, 218, 249, 267, 268, 269, 270, 271, 273, 296, 297, 310, 315, 368, 372, 373, 381, 385, 390, 412, 415, 418, 450, 472, 502, 512, 513, 514, 515, 517, 518, 519, 523, 525, 526, 531, 553, 595, 612, 635, 645, 646, 672, 725, 753, 807, 824, 851, 874, 875, 885, 894, 895, 896, 998, 1002, 1008, 1012, 1039, 1040, 1041, 1044, 1045, 1046], "devic": [412, 583, 1021, 1051], "devnani": 1045, "deweight": 951, "dexter": 1043, "dezub": 1040, "df": [43, 52, 62, 64, 149, 154, 185, 187, 193, 198, 212, 230, 260, 270, 314, 316, 326, 352, 381, 416, 466, 591, 592, 991, 992, 1050], "df_": 230, "df_freq": 230, "df_max_": [62, 64], "df_min_": [62, 64], "df_out": 326, "df_sev": 230, "df_std": 352, "df_test": [212, 230], "df_train": [212, 230], "dfrac": [1006, 1012], "dgemm": 363, "dgesdd": 382, "dhanshre": 1048, "dhillon": [2, 57, 405, 451, 453, 512], "dhingra": [1041, 1042, 1045, 1050], "di": [390, 408, 413, 532, 538, 665, 686, 687, 898, 1037, 1046], "dia": 1050, "diabet": [2, 46, 147, 157, 158, 168, 182, 183, 200, 202, 209, 266, 369, 415, 502, 653, 654, 801, 806, 826, 827, 828, 1010, 1023, 1028], "diadochokinet": 1048, "diag": [51, 113, 178, 257, 260, 413, 418, 533, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 798, 799, 998, 1048], "diag_kind": [185, 186], "diagnos": [168, 273, 373, 384, 393, 409], "diagnosi": [168, 273, 373, 852], "diagnost": [168, 189, 273, 369, 390, 407, 501, 713, 827, 828, 1002, 1010, 1021, 1022, 1028], "diagon": [2, 43, 62, 64, 75, 113, 115, 126, 230, 249, 257, 260, 261, 263, 340, 405, 408, 410, 418, 453, 471, 472, 478, 481, 512, 514, 528, 533, 551, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 651, 652, 655, 656, 657, 683, 684, 702, 716, 793, 798, 799, 849, 857, 994, 996, 998, 1001, 1002, 1005, 1012, 1039, 1041, 1042, 1043], "diagram": [2, 62, 64, 103, 251, 320, 326, 378, 406, 408, 438, 439, 468, 903, 1012, 1044, 1045, 1050, 1051], "diamet": 408, "diamond": 258, "diaz": 1041, "dice": [450, 457, 700, 779, 780, 781, 1005], "dicedist": 700, "dichotomis": 1018, "dickerson": 1034, "dickson": 1040, "dico": 123, "dict": [48, 49, 50, 51, 55, 63, 74, 102, 105, 106, 140, 144, 146, 148, 210, 218, 239, 248, 257, 268, 269, 271, 274, 277, 279, 290, 294, 312, 316, 323, 333, 340, 344, 352, 353, 365, 368, 370, 378, 388, 390, 409, 412, 419, 420, 422, 426, 430, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 712, 714, 763, 766, 772, 780, 781, 798, 799, 800, 801, 804, 805, 807, 812, 813, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 922, 924, 936, 937, 955, 958, 961, 990, 991, 1002, 1012, 1028, 1033, 1039, 1040, 1049, 1050, 1051], "dict_count_vector": 353, "dict_init": [532, 538, 546, 547], "dict_kei": [126, 627], "dict_learn": [2, 385, 532, 538, 547, 1034, 1041, 1043, 1046, 1047, 1049], "dict_learning_onlin": [2, 546, 1034, 1043, 1046, 1047, 1050], "dict_pos_code_estim": 120, "dict_pos_dict_estim": 120, "dict_pos_estim": 120, "dict_typ": 582, "dictat": 408, "dictionari": [2, 44, 45, 46, 47, 71, 84, 86, 119, 121, 149, 151, 183, 211, 246, 248, 264, 352, 353, 369, 370, 371, 378, 388, 390, 408, 416, 449, 464, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 511, 527, 532, 538, 539, 540, 541, 543, 544, 545, 546, 547, 549, 568, 569, 570, 571, 582, 583, 585, 588, 589, 590, 595, 633, 634, 635, 665, 686, 687, 702, 712, 714, 801, 804, 805, 812, 813, 815, 823, 828, 864, 869, 878, 913, 914, 915, 916, 920, 922, 924, 936, 958, 961, 991, 998, 1002, 1017, 1023, 1027, 1028, 1033, 1041, 1044, 1045, 1046, 1047, 1048], "dictionarylearn": [2, 413, 538, 540, 541, 543, 544, 545, 546, 547, 1034, 1038, 1040, 1043, 1046, 1047, 1048, 1049], "dictlearn": 1038, "dictvector": [2, 47, 57, 102, 183, 350, 351, 352, 371, 416, 488, 583, 589, 590, 591, 592, 878, 1023, 1033, 1034, 1037, 1043, 1045, 1046, 1049, 1050], "did": [146, 170, 186, 189, 212, 220, 230, 256, 264, 317, 371, 402, 628, 713, 820, 907, 1034, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048], "didact": [376, 1022], "didi": [1039, 1040, 1041, 1042], "didn": [246, 359, 390, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "die": 999, "diebold": 270, "diederik": [862, 863, 1006, 1048], "diederikwp": 1048, "diego": [1034, 1035], "diegodlh": [1040, 1041], "diemert": [1026, 1035, 1036], "diesel": [212, 230], "dietterich": [270, 835, 1003], "diff": [379, 1002], "diff_embed": 300, "differ": [2, 25, 43, 44, 46, 49, 51, 53, 54, 58, 61, 64, 66, 67, 70, 71, 72, 74, 76, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 91, 93, 97, 98, 99, 100, 102, 103, 104, 106, 111, 115, 116, 118, 120, 122, 123, 125, 127, 128, 129, 134, 137, 139, 140, 142, 143, 144, 146, 148, 149, 150, 154, 155, 156, 157, 159, 161, 163, 168, 169, 170, 171, 172, 175, 176, 177, 181, 182, 183, 185, 186, 188, 191, 193, 194, 197, 199, 200, 201, 202, 204, 212, 213, 214, 216, 217, 218, 219, 220, 229, 230, 232, 233, 234, 235, 237, 239, 241, 244, 245, 246, 249, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 287, 289, 290, 293, 296, 297, 299, 305, 306, 309, 311, 312, 314, 315, 319, 327, 334, 335, 336, 338, 339, 340, 342, 343, 347, 348, 351, 352, 353, 357, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 379, 380, 381, 383, 384, 385, 389, 390, 394, 396, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 433, 437, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 458, 459, 462, 464, 475, 478, 490, 494, 495, 497, 504, 505, 509, 510, 513, 515, 523, 538, 539, 540, 541, 547, 548, 550, 551, 556, 557, 564, 582, 583, 589, 590, 591, 592, 595, 612, 614, 615, 616, 620, 623, 624, 628, 632, 633, 634, 635, 639, 644, 645, 646, 648, 650, 652, 654, 656, 659, 662, 667, 668, 673, 675, 677, 678, 679, 681, 691, 693, 695, 699, 701, 702, 705, 706, 707, 708, 710, 716, 718, 719, 728, 729, 730, 731, 732, 735, 736, 738, 744, 758, 759, 760, 762, 779, 783, 784, 785, 787, 788, 790, 793, 794, 796, 799, 801, 803, 804, 805, 806, 807, 810, 815, 816, 817, 819, 820, 821, 823, 824, 826, 828, 829, 832, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 855, 858, 861, 865, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 890, 891, 892, 893, 894, 895, 896, 905, 906, 907, 910, 913, 914, 915, 916, 958, 965, 991, 992, 994, 995, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1026, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "difference_plot": 275, "differenti": [126, 277, 415, 418, 560, 561, 620, 623], "difficult": [88, 134, 186, 220, 249, 376, 384, 406, 413, 415, 554, 555, 560, 562, 563, 997, 999, 1001, 1005, 1007, 1009, 1018, 1026, 1033, 1047], "difficulti": [48, 64, 230, 310, 365, 376, 406, 862, 863, 1001, 1005], "diffus": 175, "digest": [376, 1048], "digg": [1026, 1040], "digicosm": 0, "digit": [2, 44, 51, 52, 65, 71, 74, 80, 84, 86, 89, 90, 92, 94, 95, 97, 104, 105, 123, 139, 158, 166, 168, 183, 203, 204, 219, 228, 231, 232, 234, 236, 243, 244, 258, 263, 268, 269, 272, 294, 299, 300, 304, 306, 307, 325, 328, 331, 352, 369, 376, 382, 408, 414, 415, 417, 441, 445, 447, 503, 542, 545, 550, 567, 659, 689, 690, 691, 692, 693, 698, 705, 706, 714, 718, 719, 738, 794, 796, 831, 847, 854, 861, 865, 866, 875, 885, 891, 898, 901, 910, 917, 918, 919, 999, 1002, 1005, 1007, 1015, 1023, 1028, 1037], "digraph": 917, "dijkstra": [385, 689, 999], "dilemma": 997, "dillon": [1041, 1042, 1043], "dilut": [189, 373], "dilutedsauc": 1041, "dim": [221, 243, 298, 299, 301, 336, 337, 528, 700, 1050], "dim_reduction_method": 299, "dimens": [2, 37, 48, 51, 52, 54, 72, 75, 86, 113, 115, 120, 126, 168, 172, 174, 176, 178, 187, 197, 198, 209, 210, 234, 236, 239, 243, 244, 250, 256, 257, 294, 295, 299, 313, 344, 351, 352, 353, 371, 373, 377, 390, 408, 413, 414, 418, 420, 442, 443, 445, 447, 448, 449, 452, 464, 465, 482, 483, 484, 494, 495, 516, 525, 526, 530, 531, 534, 542, 550, 583, 584, 585, 586, 588, 590, 598, 612, 620, 623, 642, 645, 660, 691, 692, 693, 695, 696, 700, 765, 826, 845, 846, 850, 864, 897, 898, 899, 907, 908, 909, 910, 911, 931, 932, 933, 964, 972, 975, 992, 994, 996, 998, 999, 1000, 1003, 1005, 1006, 1008, 1014, 1017, 1021, 1040, 1042, 1043, 1045], "dimension": [2, 11, 37, 45, 48, 49, 57, 67, 75, 79, 87, 88, 90, 91, 95, 101, 103, 105, 106, 115, 116, 118, 120, 126, 127, 128, 134, 139, 152, 168, 170, 172, 173, 177, 183, 198, 213, 229, 231, 233, 234, 236, 239, 243, 244, 247, 256, 257, 291, 294, 298, 300, 312, 337, 344, 351, 359, 363, 368, 371, 372, 373, 376, 385, 390, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 445, 447, 449, 465, 469, 473, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 498, 501, 502, 503, 505, 506, 511, 516, 520, 533, 535, 536, 539, 540, 541, 542, 545, 548, 550, 564, 567, 574, 600, 608, 632, 641, 642, 643, 653, 689, 690, 691, 692, 693, 694, 695, 697, 700, 711, 726, 798, 799, 801, 831, 845, 846, 847, 850, 853, 854, 861, 865, 866, 869, 875, 880, 885, 897, 898, 899, 905, 909, 949, 987, 993, 994, 997, 998, 1003, 1004, 1008, 1014, 1015, 1016, 1017, 1018, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1042, 1045, 1048, 1049], "dimensionalityreduct": 373, "dimensionalityreductiondimension": 396, "diminish": 416, "dimitri": [1046, 1047, 1048, 1049, 1050], "dimmick": 373, "dinga92": 1051, "dingwal": 1040, "dionisi": 1047, "diop": 1043, "dipan": 1051, "direct": [51, 115, 116, 120, 122, 128, 168, 218, 255, 261, 267, 299, 308, 315, 340, 345, 374, 376, 377, 380, 384, 391, 394, 408, 411, 413, 416, 417, 452, 462, 471, 472, 478, 535, 542, 550, 589, 590, 592, 603, 642, 689, 854, 996, 997, 998, 1003, 1005, 1007, 1022, 1033, 1036], "direction": 1051, "direction_vector": 308, "directli": [0, 45, 57, 64, 80, 89, 103, 126, 139, 143, 168, 178, 198, 200, 212, 218, 230, 240, 275, 308, 310, 323, 326, 327, 353, 359, 363, 374, 376, 377, 378, 380, 382, 388, 389, 390, 391, 404, 405, 406, 408, 409, 410, 411, 412, 416, 418, 442, 452, 462, 464, 465, 469, 474, 528, 568, 569, 570, 571, 594, 598, 612, 621, 633, 644, 647, 648, 653, 654, 661, 662, 663, 664, 665, 678, 682, 685, 691, 775, 779, 782, 793, 794, 800, 801, 804, 805, 815, 829, 830, 832, 848, 850, 864, 865, 866, 872, 882, 884, 887, 894, 991, 998, 1000, 1005, 1007, 1009, 1012, 1017, 1018, 1022, 1033, 1041, 1042, 1044, 1045, 1046, 1049, 1050], "director": 1026, "directori": [0, 2, 47, 292, 370, 374, 376, 378, 380, 382, 384, 390, 394, 409, 441, 445, 450, 486, 492, 500, 865, 866, 1047], "direr": [1036, 1037, 1040, 1041], "dirichlet": [2, 42, 45, 183, 255, 256, 261, 265, 416, 488, 537, 539, 541, 589, 592, 798, 1021, 1023, 1027, 1028, 1033, 1038, 1039], "dirichlet_distribut": [255, 798, 1001, 1039], "dirichlet_process": [255, 261, 798, 1001, 1039], "disabl": [138, 246, 264, 317, 326, 351, 374, 376, 399, 416, 449, 460, 468, 538, 539, 540, 547, 560, 561, 562, 563, 864, 882, 894, 903, 931, 932, 1012, 1039, 1042, 1046, 1048, 1051], "disadvantag": [413, 418, 998, 999, 1006, 1016, 1017, 1018], "disagre": [736, 1009], "disambigu": [376, 833, 902, 1015, 1048], "disappear": [998, 1033], "disappoint": 43, "discard": [47, 88, 195, 273, 363, 405, 410, 417, 509, 510, 550, 598, 628, 631, 645, 878, 882, 894, 992, 998, 1041, 1045, 1051], "disclaim": 1021, "disclos": 389, "disconnect": 1046, "discontinu": [43, 388], "discord": [706, 1025], "discount": [2, 371, 408, 727, 757, 1040, 1043], "discounted_cumulative_gain": 727, "discourag": [216, 388, 394, 690], "discov": [352, 408, 413, 416, 419, 444, 448, 1048, 1051], "discoveri": [2, 270, 371, 382, 385, 408, 415, 417, 419, 444, 512, 556, 557, 564, 593, 596, 597, 599, 600, 601, 607, 721, 741, 784, 940, 941, 942, 1002, 1014, 1026, 1047, 1048], "discrep": [416, 1037], "discret": [2, 43, 67, 80, 118, 129, 134, 169, 183, 187, 194, 212, 230, 250, 287, 305, 309, 313, 365, 368, 371, 372, 376, 380, 389, 390, 408, 413, 416, 418, 438, 439, 448, 452, 460, 461, 462, 493, 515, 516, 523, 554, 560, 589, 590, 593, 596, 597, 600, 601, 608, 609, 611, 612, 613, 617, 618, 619, 658, 659, 801, 812, 823, 831, 840, 841, 844, 866, 870, 878, 879, 882, 885, 894, 905, 910, 914, 964, 991, 998, 999, 1000, 1002, 1003, 1005, 1018, 1021, 1023, 1028, 1035, 1038, 1046, 1047, 1048], "discrete_featur": [608, 609], "discrim": 212, "discrimin": [2, 12, 48, 49, 65, 109, 110, 111, 112, 113, 126, 128, 163, 165, 168, 183, 191, 227, 233, 247, 260, 299, 373, 406, 415, 475, 513, 550, 551, 567, 632, 784, 854, 991, 999, 1002, 1005, 1016, 1018, 1023, 1024, 1028, 1036], "discriminant_analysi": [2, 67, 69, 70, 128, 233, 299, 359, 404, 537, 550, 551, 854, 996, 1003, 1033, 1036, 1037, 1038, 1039, 1040], "discriminatori": 406, "discuss": [43, 86, 91, 168, 186, 202, 232, 237, 264, 273, 287, 351, 359, 365, 371, 373, 376, 381, 382, 384, 388, 390, 391, 407, 408, 410, 414, 415, 417, 418, 499, 683, 684, 847, 848, 853, 855, 856, 992, 996, 998, 999, 1002, 1005, 1012, 1019, 1022, 1025, 1036], "diseas": [46, 157, 168, 182, 273, 373, 713, 1002], "disentangl": 999, "disjoint": [406, 408, 409, 437, 705, 732, 756, 758, 999], "disk": [45, 53, 371, 376, 381, 390, 402], "disp": [43, 66, 68, 136, 149, 150, 151, 263, 273, 283, 293, 315, 320, 326, 337, 342, 438, 632, 698, 701, 702, 854], "disp1": 633, "disp2": 633, "dispar": [691, 695, 999], "dispatch": [103, 264, 390, 404, 468, 801, 815, 826, 827, 828, 903, 967, 968, 1028, 1048, 1051], "dispatch_next": 967, "dispatch_one_batch": 967, "dispers": [70, 284, 408, 711, 726, 998], "displai": [2, 51, 62, 64, 70, 72, 80, 93, 103, 112, 113, 115, 116, 120, 140, 150, 151, 154, 181, 183, 186, 187, 201, 230, 238, 239, 249, 253, 259, 267, 271, 272, 277, 279, 280, 283, 285, 300, 316, 320, 321, 339, 356, 363, 376, 378, 379, 383, 385, 394, 396, 409, 413, 416, 417, 422, 438, 464, 467, 468, 497, 542, 565, 631, 632, 633, 659, 688, 698, 699, 701, 702, 703, 714, 719, 783, 790, 801, 807, 815, 824, 831, 865, 866, 878, 880, 885, 903, 910, 917, 918, 919, 940, 967, 988, 1002, 1006, 1021, 1023, 1028, 1042, 1044, 1045, 1047, 1048], "display_label": [45, 263, 698, 1045], "dispos": 991, "disproportion": 414, "disput": 140, "disregard": [351, 390, 416, 431, 465, 482, 483, 484, 553, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 722, 723, 724, 725, 786, 838, 839, 848, 856, 863, 874, 875, 881, 882, 885, 890, 893, 894, 896, 906, 908, 911, 914, 916, 1002, 1041], "disrupt": [364, 374], "dissemin": 1021, "dissimilar": [235, 344, 390, 405, 452, 691, 695, 999, 1039, 1049], "dissimilarity_matrix_": 691, "dist": [111, 233, 243, 380, 469, 470, 471, 472, 473, 474, 475, 476, 700, 764, 770, 845, 846], "dist_": [469, 474], "dist_embed": 300, "dist_linkag": 189, "dist_matrix": 452, "dist_matrix_": 689, "distanc": [2, 37, 74, 75, 88, 90, 93, 94, 98, 100, 108, 112, 125, 168, 181, 183, 189, 199, 213, 215, 232, 234, 237, 243, 249, 290, 292, 293, 298, 300, 302, 303, 310, 315, 319, 323, 324, 344, 351, 352, 363, 373, 385, 388, 390, 405, 408, 410, 413, 414, 418, 419, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 455, 456, 457, 458, 459, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 539, 541, 548, 608, 609, 616, 620, 621, 623, 624, 629, 659, 660, 667, 669, 675, 676, 677, 678, 679, 689, 690, 691, 693, 694, 695, 696, 697, 700, 704, 726, 735, 759, 761, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 779, 780, 781, 782, 793, 794, 797, 801, 815, 834, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 884, 899, 903, 905, 907, 909, 910, 911, 913, 914, 915, 916, 992, 996, 999, 1000, 1002, 1005, 1008, 1012, 1014, 1016, 1017, 1022, 1023, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "distance_matrix": 189, "distance_metr": [2, 779, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859], "distance_threshold": [76, 441, 445, 1042, 1045], "distancemetr": [2, 390, 414, 848, 1005, 1041, 1045, 1046, 1047, 1050], "distancemetric64": [845, 846], "distances_": [76, 441, 445, 1045], "distant": [408, 693, 710, 1005], "distil": 237, "distinct": [93, 270, 331, 351, 353, 371, 378, 381, 390, 391, 412, 415, 416, 590, 802, 811, 819, 879, 880, 900, 901, 991, 998, 1005, 1008, 1041], "distinguish": [43, 58, 75, 111, 118, 125, 214, 267, 287, 371, 378, 390, 391, 418, 991, 1002, 1005, 1008], "distort": [37, 211, 243, 373, 406, 882, 894, 899, 999, 1012, 1014], "distribut": [2, 25, 37, 42, 43, 47, 48, 49, 52, 58, 64, 70, 72, 74, 79, 85, 86, 88, 90, 95, 107, 110, 111, 112, 116, 118, 126, 134, 136, 146, 150, 163, 168, 170, 179, 183, 185, 186, 189, 191, 193, 212, 214, 216, 234, 236, 239, 243, 249, 255, 260, 261, 264, 266, 270, 276, 278, 284, 287, 291, 295, 309, 310, 312, 315, 325, 329, 330, 345, 347, 351, 363, 364, 369, 372, 373, 374, 376, 377, 381, 390, 406, 408, 410, 412, 413, 414, 420, 447, 449, 469, 470, 471, 472, 473, 474, 475, 476, 488, 499, 504, 516, 517, 518, 519, 520, 524, 533, 534, 537, 551, 552, 553, 564, 612, 626, 641, 643, 645, 646, 649, 659, 660, 670, 680, 681, 689, 690, 691, 693, 707, 709, 725, 753, 790, 798, 799, 805, 806, 813, 815, 819, 820, 831, 841, 844, 850, 854, 861, 868, 881, 882, 883, 884, 885, 893, 894, 895, 900, 901, 909, 920, 951, 991, 996, 998, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1014, 1015, 1021, 1022, 1023, 1027, 1028, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "district": [182, 371], "distutils_use_sdk": 374, "ditenberg": 1040, "div": [249, 945], "dive": [116, 376, 382, 991], "diverg": [54, 145, 232, 237, 295, 539, 541, 548, 693, 861, 999, 1001, 1002, 1007, 1009, 1040, 1041, 1046], "divers": [0, 390, 415], "divid": [72, 78, 120, 165, 175, 212, 249, 255, 352, 359, 372, 373, 405, 407, 408, 412, 413, 415, 469, 470, 471, 472, 473, 474, 475, 476, 513, 520, 535, 542, 677, 678, 679, 720, 727, 735, 739, 747, 757, 795, 797, 862, 863, 907, 910, 949, 952, 953, 991, 999, 1001, 1002, 1005, 1012, 1016, 1018, 1033, 1040, 1041, 1044], "dividend": 1002, "divis": [323, 408, 416, 591, 592, 595, 713, 714, 717, 730, 731, 739, 747, 784, 785, 788, 1002, 1037, 1041, 1042, 1045, 1049, 1050], "divisor": 1002, "divo": 1043, "divyanshu": 1046, "divyaprabha": 1044, "diwakar": 1047, "dixon": [770, 1043, 1044], "dizietasahi": 1043, "di\u1ec5n": 1048, "djipei": [1038, 1039], "dl": 677, "dlabal": 1037, "dll": 1047, "dlovel": 1041, "dmallia17": 1046, "dmitri": [1038, 1040, 1041, 1042, 1046, 1049, 1050], "dmitrij": 1037, "dmytro": 1046, "dn": [0, 1005], "dna": [388, 629, 992], "dnf": 394, "do": [0, 30, 43, 49, 52, 62, 64, 77, 88, 94, 100, 106, 124, 126, 129, 138, 141, 142, 146, 147, 149, 154, 165, 175, 181, 186, 187, 188, 212, 216, 230, 232, 234, 246, 247, 249, 261, 264, 265, 268, 271, 273, 283, 289, 290, 292, 296, 322, 326, 334, 337, 340, 344, 345, 347, 351, 352, 353, 358, 359, 363, 364, 365, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 390, 391, 402, 404, 406, 408, 409, 410, 411, 412, 415, 416, 417, 427, 450, 461, 464, 467, 504, 537, 539, 543, 545, 553, 556, 582, 583, 589, 590, 592, 603, 633, 634, 646, 647, 653, 656, 657, 659, 660, 667, 669, 677, 738, 764, 779, 783, 803, 818, 821, 837, 838, 842, 869, 870, 872, 879, 883, 885, 890, 891, 893, 894, 895, 896, 913, 914, 915, 916, 930, 975, 991, 994, 996, 998, 999, 1002, 1003, 1005, 1006, 1010, 1012, 1017, 1018, 1021, 1022, 1025, 1026, 1033, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "do_early_stopping_": [562, 563], "doc": [0, 43, 47, 52, 57, 351, 353, 364, 376, 380, 381, 384, 390, 394, 401, 416, 589, 590, 592, 779, 782, 793, 794, 828, 1033, 1037, 1047], "doc_environ": 384, "doc_it": 47, "doc_linux": 384, "doc_topic_distr": [537, 1040], "doc_topic_prior": [413, 537], "doc_topic_prior_": 537, "docker": [384, 402, 1046, 1047], "dock\u00e8": [1042, 1043, 1044, 1050, 1051], "docstr": [376, 378, 382, 390, 448, 461, 472, 700, 702, 939, 991, 1005, 1006, 1016, 1033, 1040, 1041, 1046, 1047, 1050], "doctest": [376, 390, 1033], "document": [2, 17, 42, 45, 46, 49, 51, 54, 56, 59, 63, 72, 90, 91, 93, 94, 102, 103, 104, 118, 120, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 227, 240, 241, 242, 243, 246, 247, 249, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 307, 308, 316, 320, 323, 324, 326, 331, 333, 347, 353, 357, 358, 363, 364, 365, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 382, 384, 388, 390, 391, 394, 396, 399, 402, 405, 408, 413, 416, 419, 444, 447, 448, 449, 450, 453, 457, 464, 488, 489, 500, 502, 512, 522, 524, 537, 545, 565, 589, 590, 591, 592, 605, 632, 640, 644, 659, 667, 669, 675, 677, 697, 698, 700, 704, 706, 718, 738, 759, 760, 770, 779, 780, 781, 794, 796, 801, 804, 805, 807, 815, 824, 835, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 866, 877, 905, 910, 927, 930, 932, 946, 967, 991, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1010, 1016, 1019, 1023, 1026, 1034, 1035, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "document_clust": 1039, "document_nam": 57, "doddington": 1002, "doe": [27, 43, 46, 47, 48, 51, 52, 61, 62, 67, 70, 75, 80, 86, 88, 90, 102, 104, 105, 116, 130, 134, 139, 140, 142, 143, 144, 148, 149, 154, 168, 176, 186, 187, 198, 212, 218, 230, 232, 233, 234, 237, 239, 242, 243, 244, 246, 247, 249, 257, 258, 264, 265, 270, 272, 273, 277, 279, 280, 289, 290, 303, 310, 312, 314, 316, 317, 322, 323, 332, 333, 338, 340, 347, 349, 351, 352, 353, 357, 363, 364, 370, 374, 376, 377, 378, 380, 384, 389, 390, 396, 399, 402, 404, 406, 408, 409, 412, 413, 415, 416, 417, 418, 433, 440, 442, 446, 447, 449, 450, 454, 456, 467, 473, 479, 487, 500, 504, 509, 528, 536, 538, 539, 540, 545, 547, 550, 551, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 582, 583, 584, 589, 590, 592, 594, 595, 598, 603, 607, 611, 633, 639, 650, 651, 652, 655, 656, 657, 660, 672, 683, 684, 699, 701, 703, 708, 729, 730, 731, 735, 737, 739, 744, 779, 784, 785, 788, 789, 795, 801, 804, 805, 815, 862, 866, 867, 868, 870, 872, 874, 877, 878, 879, 882, 885, 886, 894, 897, 898, 902, 905, 906, 913, 914, 915, 916, 920, 931, 935, 949, 952, 953, 954, 967, 985, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1016, 1017, 1018, 1033, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "doepk": 1040, "doesn": [47, 186, 212, 246, 256, 289, 307, 340, 384, 390, 394, 402, 408, 416, 417, 421, 433, 475, 633, 634, 667, 669, 677, 717, 829, 832, 837, 847, 848, 862, 874, 875, 1001, 1002, 1018, 1037, 1050], "dog": [322, 323, 325, 326, 327, 583, 784, 886, 1012], "dohmatob": [1038, 1039, 1040], "dohri": [1050, 1051], "doi": [191, 212, 230, 376, 408, 677], "dok": [554, 555, 872, 1046], "dokato": 1040, "dolan": 371, "dollar": [186, 371], "dolmatov": 1043, "dolphin": 351, "domain": [149, 212, 284, 316, 390, 393, 412, 636, 722, 724, 725, 802, 803, 808, 809, 810, 998, 1022], "domin": [140, 182, 189, 212, 217, 249, 279, 315, 371, 382, 406, 885, 1004, 1012, 1018, 1049], "domingo": [64, 789, 1002], "dominik": [1040, 1049], "don": [51, 64, 87, 102, 149, 186, 233, 246, 247, 264, 270, 283, 290, 332, 337, 341, 351, 352, 363, 370, 376, 378, 380, 382, 384, 389, 394, 399, 407, 409, 416, 428, 647, 653, 833, 913, 914, 915, 916, 924, 965, 991, 998, 1001, 1003, 1006, 1008, 1016, 1037, 1042, 1049, 1050, 1051], "don86": 1040, "donald": [45, 371, 408, 726, 992], "donat": 240, "done": [0, 45, 47, 48, 50, 52, 54, 55, 57, 83, 85, 86, 123, 149, 165, 168, 175, 176, 186, 187, 191, 193, 198, 199, 216, 229, 245, 246, 260, 268, 271, 274, 279, 290, 313, 321, 351, 352, 353, 357, 359, 364, 370, 374, 376, 378, 380, 383, 384, 385, 388, 390, 399, 408, 410, 412, 413, 415, 441, 442, 445, 450, 452, 472, 482, 483, 484, 485, 489, 536, 562, 563, 583, 607, 608, 609, 629, 631, 633, 635, 644, 645, 646, 660, 723, 742, 798, 799, 801, 815, 817, 820, 821, 823, 869, 883, 986, 991, 992, 995, 998, 999, 1002, 1004, 1005, 1006, 1012, 1015, 1016, 1017, 1018, 1022, 1033, 1035, 1040, 1043, 1045, 1049], "dong": 1043, "donn": 1038, "donoho": [690, 694, 999], "donor": [168, 373], "donovan": 1039, "dor": 1041, "dorin": [96, 448], "dormagen": 1043, "dot": [2, 55, 69, 79, 82, 87, 90, 95, 109, 110, 111, 113, 115, 116, 121, 122, 123, 127, 129, 134, 137, 170, 171, 177, 178, 186, 195, 198, 205, 207, 208, 244, 256, 257, 259, 260, 264, 274, 336, 338, 344, 363, 378, 382, 385, 390, 405, 413, 416, 534, 539, 541, 548, 591, 592, 615, 647, 648, 651, 653, 654, 655, 658, 661, 662, 663, 664, 682, 685, 688, 762, 764, 877, 917, 950, 1000, 1004, 1012, 1016, 1017, 1042], "dot_data": [917, 1018], "dot_product": 950, "dotproduct": [2, 173, 174, 179, 418, 612, 626], "dotson": 1038, "doubl": [70, 140, 282, 376, 390, 413, 539, 541, 542, 548, 845, 846, 856, 985, 992, 1017, 1018, 1033, 1043, 1044], "doubt": [376, 377, 380, 998, 1008, 1021], "doucet": 1047, "douetteau": 1026, "doug": [1034, 1035, 1045], "dougal": [1035, 1037, 1038, 1040, 1041, 1042, 1043], "dougla": 1041, "douillard": 1040, "doumouro": 1042, "douriez": [1043, 1044], "dowl": 1039, "down": [80, 81, 112, 134, 227, 228, 234, 243, 244, 246, 273, 287, 308, 310, 344, 359, 370, 379, 384, 390, 410, 413, 443, 450, 456, 591, 594, 595, 640, 650, 775, 779, 782, 874, 875, 880, 883, 884, 895, 907, 910, 917, 998, 1041], "downarrow": 1004, "download": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 369, 371, 373, 374, 380, 381, 384, 396, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 511, 1018, 1028, 1037, 1038, 1041, 1045, 1046, 1047], "download_20newsgroup": 1037, "download_if_miss": [488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 1040], "download_url": 47, "downsampl": 123, "downsid": 353, "downstream": [43, 111, 317, 353, 416, 532, 535, 538, 542, 543, 607, 878, 1012, 1043], "downweight": [410, 537], "dowon": [1041, 1042], "dozen": [389, 418], "do\u0161ilovi\u0107": [1050, 1051], "dp": [256, 261], "dpgmm": [256, 261, 1033, 1037, 1039], "dpi": [223, 919, 1046], "dpy_debug": 382, "dqd": 382, "dr": [0, 168, 373, 408, 1047], "draft": [376, 391], "drag": 396, "dragon": 1012, "drama": 416, "dramat": 365, "dramsch": 1043, "drastic": [170, 243, 278, 408, 412, 1005, 1015], "draw": [43, 46, 93, 179, 186, 250, 272, 277, 340, 383, 411, 413, 414, 415, 556, 557, 558, 559, 564, 565, 566, 567, 612, 635, 702, 807, 824, 917, 919, 1001, 1021, 1046, 1047], "drawback": [229, 994, 997], "drawcoastlin": [50, 303], "drawcountri": [50, 303], "drawn": [46, 85, 111, 137, 167, 170, 179, 185, 250, 277, 294, 351, 364, 372, 408, 414, 415, 418, 420, 469, 470, 471, 472, 473, 474, 475, 476, 516, 524, 534, 556, 557, 558, 559, 564, 565, 566, 567, 612, 628, 633, 642, 841, 897, 898, 915, 916, 998, 1012, 1014, 1036], "drawstyl": [355, 701], "draxu": 1033, "drew": [1042, 1051], "drewhogg": 1048, "drewmjohnston": 1042, "drgfreeman": 1043, "driessen": [410, 469, 474, 1008], "drift": 1022, "drivag": [212, 230], "drive": [365, 413, 414, 550, 1016, 1026], "driven": [0, 189, 1026], "driver": [212, 230, 1048], "drop": [43, 44, 52, 103, 107, 116, 149, 175, 185, 186, 187, 189, 212, 216, 230, 249, 253, 264, 280, 316, 321, 324, 326, 352, 380, 384, 409, 413, 415, 464, 467, 568, 569, 570, 571, 696, 701, 703, 783, 790, 864, 878, 884, 992, 998, 1002, 1012, 1021, 1033, 1034, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "drop_binary_enc": 878, "drop_dupl": 282, "drop_enc": [878, 1012], "drop_first": 696, "drop_idx": 878, "drop_idx_": [878, 1044, 1048], "drop_intermedi": [701, 703, 783, 790, 1049], "drop_nul": [52, 175], "dropdown": [168, 376, 991], "dropped_result": 143, "dropper": 143, "dror": 1042, "dross": 535, "dro\u017cd\u017c": 1036, "drskd": 1047, "druck": 1047, "drucker": [135, 415, 555], "drug": 998, "dry": 187, "dryden": 102, "ds_ana": 1046, "ds_cnt": [67, 312, 313], "dschult": 55, "dscullei": 449, "dseg": 102, "dsouza": [1044, 1045, 1046, 1047], "dsquareindia": 1039, "dss": 1026, "dt": [83, 123, 155, 175, 415, 416, 1018], "dtreeviz": 1021, "dtype": [43, 47, 49, 50, 55, 82, 86, 98, 102, 103, 143, 145, 147, 148, 150, 171, 172, 173, 182, 186, 187, 214, 230, 253, 255, 264, 268, 274, 278, 284, 287, 297, 303, 316, 322, 323, 325, 330, 358, 370, 371, 376, 378, 388, 390, 404, 409, 412, 415, 416, 423, 424, 426, 429, 442, 443, 447, 448, 449, 450, 451, 453, 459, 464, 466, 467, 469, 472, 474, 488, 489, 490, 491, 497, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 515, 523, 543, 549, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 586, 587, 589, 590, 592, 594, 595, 602, 603, 607, 628, 629, 630, 631, 633, 634, 641, 642, 645, 646, 647, 653, 657, 658, 661, 662, 663, 664, 665, 666, 672, 674, 676, 698, 700, 706, 715, 716, 732, 739, 742, 756, 787, 807, 826, 828, 829, 841, 845, 846, 848, 856, 870, 876, 878, 879, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 899, 907, 908, 909, 910, 911, 913, 914, 915, 916, 926, 928, 929, 931, 932, 956, 966, 972, 975, 976, 977, 978, 979, 982, 987, 988, 992, 1003, 1012, 1015, 1017, 1034, 1036, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "dtype_exclud": [103, 466], "dtype_includ": [103, 143, 154, 249, 409, 466], "du": [0, 397, 398, 1033, 1034, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "dua": 1042, "dual": [102, 104, 319, 347, 351, 416, 417, 471, 472, 478, 612, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 682, 685, 845, 846, 905, 906, 907, 910, 1017, 1035, 1044, 1047, 1049], "dual_coef_": [536, 644, 907, 908, 909, 910, 911, 1017, 1037], "dual_gap": [471, 472, 478, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685], "dual_gap_": [647, 648, 653, 654, 661, 662, 663, 664, 1046], "dualiti": [472, 998], "dualtre": [845, 846], "duan": [1042, 1044], "duart": [1038, 1046, 1048, 1051], "dubai": 416, "duboi": [1039, 1041], "dubou": 1043, "dubourg": [0, 398, 1026, 1033, 1037], "duchesnai": [0, 398, 1033], "duck": [378, 390, 1043], "ducktyp": [1037, 1050], "duckworth": 1033, "ducout": 1047, "duda": [373, 996], "due": [48, 52, 63, 64, 86, 88, 93, 107, 134, 137, 170, 186, 187, 193, 198, 204, 210, 212, 214, 229, 230, 243, 249, 256, 278, 279, 284, 289, 290, 315, 316, 344, 347, 351, 352, 353, 376, 382, 388, 390, 394, 406, 407, 408, 412, 413, 415, 418, 443, 446, 447, 459, 536, 540, 544, 545, 575, 672, 801, 804, 805, 809, 811, 815, 826, 827, 830, 833, 837, 838, 870, 874, 875, 885, 992, 998, 999, 1001, 1002, 1003, 1005, 1009, 1016, 1017, 1022, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "dueck": [73, 440, 454], "dugnat": 1047, "duhaim": 1041, "dummi": [2, 134, 135, 212, 230, 246, 264, 273, 381, 403, 552, 553, 733, 878, 887, 924, 1003, 1012, 1018, 1028, 1034, 1036, 1037, 1038, 1040], "dummy_classifiers_misclassification_error": 134, "dummy_clf": [134, 552], "dummy_leaf_": 442, "dummy_regr": 553, "dummy_sev": 230, "dummybiclust": 423, "dummyclassifi": [2, 134, 264, 273, 553, 733, 1002, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1051], "dummyestim": [560, 561], "dummyregressor": [2, 212, 230, 552, 1002, 1003, 1034, 1036, 1037, 1040, 1041, 1043, 1046, 1047, 1051], "dumont": 1018, "dump": [2, 55, 402, 487, 845, 846], "dump_svmlight_fil": [2, 1033, 1034, 1038, 1048, 1050], "duong": [1050, 1051], "duplic": [364, 375, 376, 377, 390, 408, 419, 444, 448, 449, 516, 636, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 829, 876, 987, 1005, 1033, 1036, 1045, 1047, 1049, 1050], "dupont": 51, "dupr": [1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "dupr\u00e9": [0, 397, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "duqu": 1046, "durat": [43, 47, 212, 230, 249, 264, 292, 353, 364, 967, 968, 998], "duration_sec": 49, "duration_test": 351, "duration_train": 351, "dure": [0, 43, 44, 51, 52, 83, 88, 91, 104, 107, 116, 125, 138, 143, 144, 149, 151, 165, 170, 175, 186, 187, 189, 202, 213, 220, 264, 268, 272, 284, 290, 321, 322, 344, 363, 365, 374, 376, 378, 381, 390, 391, 408, 409, 413, 415, 416, 418, 419, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 459, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 614, 615, 616, 618, 620, 621, 623, 624, 626, 628, 629, 630, 631, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 701, 790, 798, 799, 800, 801, 804, 805, 815, 823, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 992, 994, 998, 999, 1005, 1012, 1014, 1018, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "duron": 1047, "duti": 391, "dutt": 1049, "dutta": [1050, 1051], "duv2014": 418, "duvenaud": [418, 623, 624], "dwight": 1048, "dx": [51, 53, 700], "dx_c": 1009, "dy": [51, 700], "dye": 1046, "dylan": [1040, 1043], "dynam": [51, 52, 187, 556, 557, 558, 559, 564, 565, 566, 567, 580, 581, 677, 678, 679, 1018, 1026, 1039, 1045, 1050], "dzi": 1051, "dziki": 1036, "d\u00b2": 230, "d\u00f6pfert": 1041, "e": [0, 25, 43, 47, 49, 50, 52, 62, 63, 64, 68, 70, 86, 88, 90, 94, 102, 109, 111, 112, 113, 115, 116, 123, 125, 126, 134, 137, 143, 145, 146, 149, 150, 159, 164, 167, 168, 178, 185, 186, 187, 191, 194, 198, 202, 203, 212, 213, 214, 216, 230, 232, 233, 245, 246, 264, 266, 270, 271, 273, 275, 276, 277, 285, 287, 289, 296, 303, 312, 315, 319, 321, 327, 347, 353, 357, 358, 359, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 388, 389, 390, 394, 399, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 437, 439, 441, 443, 444, 445, 447, 449, 450, 454, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 497, 499, 501, 502, 503, 504, 525, 534, 535, 536, 537, 539, 541, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 589, 590, 591, 592, 594, 595, 598, 604, 605, 606, 607, 608, 609, 610, 611, 612, 618, 623, 624, 629, 631, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 691, 693, 695, 698, 700, 702, 705, 706, 709, 710, 717, 729, 730, 731, 732, 739, 742, 743, 756, 764, 768, 779, 786, 789, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 814, 815, 819, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 861, 862, 863, 865, 868, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 900, 901, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 920, 943, 948, 949, 951, 955, 956, 958, 961, 976, 987, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1022, 1025, 1026, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "e0129126": 370, "e11": 371, "e2": [899, 998], "e41a1c": [79, 95], "e501": [168, 351], "e_": 413, "each": [2, 27, 43, 46, 47, 49, 50, 51, 52, 54, 55, 58, 62, 63, 64, 68, 70, 72, 76, 78, 79, 81, 82, 86, 88, 91, 93, 94, 102, 103, 105, 106, 107, 115, 116, 118, 120, 121, 125, 126, 127, 128, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 152, 153, 154, 155, 156, 157, 164, 168, 172, 174, 179, 181, 182, 185, 186, 187, 189, 191, 193, 199, 201, 202, 207, 210, 212, 213, 214, 216, 217, 220, 227, 230, 233, 239, 240, 243, 244, 245, 246, 247, 249, 250, 251, 253, 255, 258, 260, 263, 264, 265, 266, 268, 270, 271, 273, 275, 276, 279, 280, 284, 287, 289, 290, 293, 295, 299, 301, 303, 305, 306, 308, 310, 311, 312, 313, 315, 316, 317, 319, 321, 322, 323, 325, 326, 327, 329, 330, 331, 334, 340, 344, 347, 352, 353, 355, 356, 358, 359, 363, 364, 365, 370, 371, 372, 373, 374, 376, 377, 378, 380, 381, 384, 385, 388, 389, 390, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 426, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 708, 709, 711, 714, 720, 726, 729, 730, 731, 739, 740, 746, 747, 749, 751, 752, 754, 755, 759, 760, 763, 764, 765, 766, 767, 769, 770, 771, 772, 774, 775, 777, 779, 780, 781, 782, 784, 785, 786, 788, 789, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 922, 937, 943, 944, 949, 951, 952, 957, 958, 977, 978, 979, 982, 991, 992, 994, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1026, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "eager": 264, "eargl": 1047, "earl": 1036, "earli": [43, 54, 79, 95, 133, 134, 140, 142, 183, 192, 200, 314, 320, 390, 415, 441, 445, 449, 463, 490, 497, 537, 538, 539, 540, 547, 554, 555, 560, 561, 562, 563, 628, 646, 657, 667, 668, 669, 677, 679, 693, 751, 831, 862, 863, 975, 999, 1005, 1012, 1016, 1020, 1022, 1023, 1026, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1050], "earlier": [140, 187, 216, 370, 376, 411, 836, 839, 1012, 1031, 1034, 1046, 1048], "earliest": [370, 999], "early_exager": 1040, "early_exagger": 693, "early_stop": [140, 149, 187, 220, 305, 322, 351, 390, 415, 562, 563, 667, 668, 669, 677, 678, 679, 862, 863, 1016, 1041, 1044, 1047, 1048], "earn": [185, 186, 391], "earth": [234, 352, 765, 1021], "eas": [104, 189, 260, 315, 376, 379, 382, 998, 1016, 1021, 1022, 1026, 1044, 1045, 1047], "easi": [187, 220, 230, 258, 268, 270, 340, 351, 359, 371, 376, 382, 384, 388, 389, 402, 408, 415, 501, 505, 511, 872, 991, 997, 1001, 1009, 1012, 1021, 1022, 1026, 1043, 1048, 1049], "easier": [79, 95, 99, 113, 143, 193, 201, 241, 249, 267, 268, 310, 340, 351, 359, 371, 376, 378, 381, 384, 388, 394, 410, 412, 468, 516, 903, 943, 997, 1002, 1009, 1018, 1022, 1026, 1042, 1047], "easiest": [378, 384, 409, 999], "easili": [43, 48, 67, 126, 165, 189, 215, 228, 244, 246, 250, 253, 270, 272, 279, 295, 312, 376, 378, 390, 391, 402, 409, 415, 416, 418, 449, 996, 998, 999, 1012, 1016, 1017, 1018, 1025, 1039], "easlii": 240, "ec": [310, 531], "ecat": 371, "echo": [374, 380], "eckert": 1038, "eckhart": 495, "eclf": [155, 156, 415], "eclf1": 570, "eclf2": 570, "eclf3": 570, "ecml": 0, "ecoc": 287, "ecolog": [50, 303, 371, 499], "econom": [185, 186, 270], "econometr": 998, "econometrica": 998, "ecosystem": [376, 384, 992, 1020, 1026], "ecuador": [50, 303, 371, 499], "ed": [138, 148, 408, 415, 521, 560, 561, 1014, 1033, 1040], "eddi": [1036, 1050, 1051], "eden": 1048, "edern": [1048, 1049], "edg": [51, 63, 80, 99, 123, 143, 166, 235, 277, 384, 390, 405, 408, 410, 453, 562, 563, 586, 587, 589, 590, 592, 798, 842, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 870, 918, 1012, 1015, 1026, 1039, 1041, 1044, 1047], "edge_model": 51, "edgecolor": [51, 61, 66, 67, 70, 77, 89, 93, 100, 118, 136, 142, 150, 152, 153, 155, 156, 161, 163, 171, 172, 174, 178, 187, 197, 205, 214, 221, 224, 225, 226, 243, 244, 245, 247, 249, 255, 258, 270, 273, 285, 293, 296, 297, 298, 301, 305, 312, 313, 315, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 349, 356, 357, 632], "edit": [77, 373, 374, 375, 376, 380, 384, 388, 394, 531, 535, 835, 996, 998, 1003, 1009], "editor": [376, 384, 388], "edm": 998, "edoardo": [1048, 1050, 1051], "edouard": [0, 398, 1033], "edson": [1002, 1038], "edu": [45, 47, 55, 168, 191, 287, 351, 370, 371, 373, 408, 449, 487, 501, 503, 509, 510, 511, 535, 642, 645, 650, 659, 667, 668, 677, 680, 683, 684, 840, 842, 844, 854, 861, 898, 900, 913, 914, 998, 1000], "eduardo": [1036, 1038, 1046, 1047], "educ": [185, 186, 326, 376, 497, 717, 1003], "edvardlindelof": 1043, "edward": [175, 615, 620, 623, 1036, 1041, 1042, 1043, 1044, 1048, 1051], "edwinensa": 1039, "edwinwenink": 1046, "eec": [449, 642], "ef": 1048, "eff": 1018, "effect": [43, 45, 64, 72, 74, 75, 80, 86, 90, 95, 98, 101, 105, 116, 118, 123, 125, 134, 144, 146, 148, 150, 151, 159, 167, 170, 171, 175, 177, 183, 184, 186, 187, 189, 198, 206, 208, 212, 213, 214, 216, 217, 218, 229, 231, 234, 236, 242, 249, 253, 256, 260, 262, 264, 266, 270, 271, 272, 275, 278, 279, 284, 290, 302, 308, 309, 311, 314, 320, 328, 340, 344, 345, 347, 348, 349, 351, 352, 353, 357, 359, 364, 376, 378, 381, 388, 390, 406, 408, 409, 413, 414, 415, 416, 418, 419, 437, 442, 443, 444, 446, 447, 449, 450, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 490, 497, 501, 515, 525, 526, 534, 535, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 607, 610, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 692, 693, 702, 704, 754, 786, 798, 800, 802, 803, 806, 808, 810, 812, 819, 820, 823, 824, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 855, 856, 862, 863, 865, 868, 869, 870, 871, 872, 874, 875, 877, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 931, 932, 949, 967, 975, 991, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1023, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "effective_learning_r": [862, 863], "effective_metric_": [847, 848, 849, 851, 853, 855, 856, 857, 1005], "effective_metric_params_": [847, 848, 849, 851, 853, 855, 856, 857], "effective_rank": [522, 525], "efficaci": 202, "effici": [37, 43, 44, 51, 53, 77, 80, 86, 88, 120, 135, 140, 144, 152, 191, 202, 206, 214, 220, 295, 327, 351, 363, 368, 370, 376, 378, 379, 380, 381, 382, 388, 390, 402, 405, 408, 413, 414, 415, 418, 420, 442, 443, 446, 447, 449, 450, 452, 454, 457, 459, 461, 462, 497, 534, 535, 536, 539, 541, 542, 545, 564, 567, 575, 582, 583, 589, 590, 592, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 633, 634, 635, 639, 641, 656, 659, 660, 665, 667, 668, 669, 674, 676, 677, 678, 679, 680, 686, 687, 689, 727, 757, 764, 780, 781, 798, 799, 801, 815, 834, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 870, 882, 894, 898, 905, 914, 916, 949, 991, 994, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1021, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "efficiencywarn": [2, 860, 1048], "effort": [321, 376, 382, 1021, 1026, 1044, 1046], "efron": [168, 373, 683, 684, 998], "eg": 985, "egashira": 1048, "egehan": 1051, "egg": 1041, "egger": 1051, "egin": 408, "egli": [1040, 1050], "egor": 1045, "ehrenheim": [1040, 1041], "eib": [836, 1003], "eickenberg": [1033, 1035, 1036, 1037, 1038], "eig": 1040, "eig_tol": 1034, "eig_val": 255, "eig_vec": 255, "eigen": [452, 550, 674, 692, 696, 996, 1039, 1042], "eigen_solv": [51, 79, 80, 99, 232, 233, 413, 452, 462, 536, 689, 690, 692, 694, 696, 999, 1034, 1043, 1046, 1047, 1048], "eigen_tol": [80, 452, 462, 692, 696, 1034, 1047, 1048], "eigendecompos": 413, "eigendecomposit": [462, 674, 692, 696, 871, 994], "eigenfac": [42, 54, 183, 248, 371, 413, 495, 542, 698, 714, 815, 831, 885, 910, 1019, 1023, 1033], "eigenface_titl": 45, "eigenmap": [232, 690, 692, 694, 696, 1027, 1028, 1034], "eigensolv": [413, 452, 462, 536, 545, 696, 999], "eigenvalu": [260, 326, 405, 408, 410, 452, 462, 469, 470, 471, 472, 473, 474, 475, 476, 536, 542, 550, 674, 689, 690, 692, 694, 696, 871, 994, 999, 1012, 1035, 1039, 1042, 1043, 1044, 1045], "eigenvalues_": [536, 1046], "eigenvector": [2, 42, 80, 116, 126, 183, 255, 408, 452, 462, 535, 536, 542, 551, 689, 690, 692, 696, 949, 999, 1023, 1033, 1037, 1047], "eigenvector_centr": 55, "eigenvectors_": [536, 1046], "eigh": [70, 255, 256, 257, 260, 261, 413, 420, 534, 536, 1048, 1051], "eighteenth": 408, "eighth": [564, 1008], "eigsh": [413, 536, 1039, 1040], "eiler": 1012, "einsum": 300, "eitan": 1050, "either": [43, 49, 64, 103, 140, 142, 143, 186, 200, 203, 240, 249, 264, 265, 274, 279, 284, 295, 347, 351, 358, 363, 364, 368, 371, 374, 376, 377, 378, 390, 399, 402, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 420, 442, 447, 452, 487, 497, 513, 525, 534, 535, 537, 545, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 583, 584, 585, 589, 590, 591, 592, 594, 595, 598, 603, 608, 609, 611, 612, 623, 628, 631, 633, 634, 651, 655, 657, 665, 677, 679, 683, 684, 691, 698, 699, 703, 707, 708, 713, 721, 725, 727, 728, 729, 730, 731, 736, 739, 740, 741, 753, 757, 770, 775, 779, 783, 784, 785, 786, 788, 789, 790, 795, 801, 804, 805, 807, 815, 824, 825, 826, 827, 828, 829, 830, 832, 835, 865, 895, 896, 902, 905, 906, 913, 914, 915, 916, 920, 958, 962, 990, 991, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1012, 1016, 1017, 1033, 1036, 1042, 1043, 1044, 1047, 1051], "ekaterina": [1039, 1040, 1041, 1042, 1044, 1049], "ekman": [1035, 1039], "el": [529, 1046, 1048, 1049], "elabonga": [1049, 1050], "elabor": 1003, "elad": [665, 686, 687], "elaps": [50, 81, 100, 140, 141, 363, 464, 467, 570, 571, 864, 865, 866, 867], "elapsed_tim": [46, 74, 100, 141, 154, 229], "elast": [2, 25, 183, 192, 198, 199, 202, 204, 207, 223, 246, 283, 471, 472, 478, 502, 525, 647, 648, 653, 658, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 683, 685, 991, 1002, 1016, 1023, 1024, 1028, 1033, 1038, 1042, 1043], "elastic_net": 223, "elastic_net_color": 223, "elastic_net_contour": 223, "elasticnet": [2, 46, 49, 195, 204, 278, 283, 363, 382, 388, 413, 648, 653, 658, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 998, 1003, 1016, 1033, 1034, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1051], "elasticnetcv": [2, 198, 390, 399, 647, 653, 661, 662, 663, 664, 682, 998, 1033, 1036, 1044, 1046, 1047, 1050, 1051], "elasticnetifittedelasticnet": 195, "elbo": 413, "eldar": [410, 421, 475], "eleanor": 1048, "elec2": 149, "electr": [51, 149, 373, 408], "electron": [57, 168, 371, 373, 539, 541, 548, 628], "element": [2, 87, 120, 137, 138, 148, 241, 263, 269, 277, 279, 320, 352, 355, 358, 373, 375, 376, 378, 385, 391, 405, 408, 412, 413, 415, 416, 419, 444, 446, 452, 464, 487, 509, 513, 515, 521, 523, 527, 528, 532, 538, 539, 541, 551, 558, 559, 560, 561, 565, 566, 567, 568, 569, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 618, 633, 659, 660, 667, 668, 669, 677, 678, 679, 708, 718, 728, 735, 737, 747, 764, 770, 779, 783, 789, 790, 835, 845, 846, 847, 848, 849, 851, 853, 855, 856, 860, 862, 863, 868, 884, 885, 888, 892, 905, 910, 913, 914, 915, 916, 951, 952, 953, 972, 974, 975, 987, 996, 998, 1002, 1003, 1006, 1009, 1012, 1013, 1014, 1018, 1026, 1038, 1039, 1041, 1043, 1044, 1045, 1047, 1049], "elementari": [899, 1014], "elementwis": [413, 539, 541, 548], "elena": 1040, "eleni": 1046, "eleph": 583, "elev": [100, 126, 187, 232, 236, 491], "eleven": 1022, "elfner": 1047, "elia": 1039, "eliaschiavon": 1048, "eliasi": [1048, 1049, 1050], "elicit": 1002, "elif": [46, 47, 194, 214, 247, 257, 295, 881], "elimin": [2, 18, 159, 162, 165, 168, 183, 265, 268, 269, 275, 284, 294, 408, 412, 448, 503, 516, 594, 595, 598, 603, 659, 804, 805, 820, 865, 875, 987, 1002, 1023, 1024, 1026, 1028, 1033], "elisabeth": [324, 1050], "elizabeth": [1040, 1042, 1045], "elkan": [64, 264, 320, 406, 437, 443, 447, 459, 677, 1039, 1043, 1044, 1046, 1047], "ell": [70, 255, 256, 257, 261, 405], "ell_": 998, "ell_0": [998, 1002], "ell_1": [413, 998], "ell_2": 998, "ella": 1014, "ellen": 1040, "elli": [1039, 1042], "elliot": [1050, 1051], "elliott": 1040, "ellips": [70, 239, 255, 256, 257, 260, 261, 1008], "ellipsoid": [48, 65, 69, 111, 112, 113, 183, 254, 255, 257, 258, 259, 260, 261, 550, 551, 632, 798, 799, 996, 1001, 1023], "ellipt": [90, 998], "ellipticenvelop": [2, 48, 239, 470, 473, 474, 475, 476, 564, 1008, 1033, 1036, 1040, 1041, 1046], "eln": 1044, "elong": 408, "els": [2, 43, 47, 50, 51, 52, 57, 70, 76, 79, 82, 88, 89, 95, 113, 124, 137, 142, 143, 146, 147, 178, 186, 187, 189, 202, 205, 227, 230, 233, 239, 243, 245, 246, 247, 248, 249, 265, 270, 271, 274, 281, 290, 295, 303, 305, 306, 312, 319, 344, 351, 352, 358, 376, 380, 382, 415, 416, 418, 420, 428, 437, 449, 509, 521, 534, 570, 619, 626, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 673, 674, 675, 677, 680, 682, 683, 684, 685, 704, 710, 789, 795, 797, 804, 805, 831, 869, 881, 884, 892, 905, 906, 920, 963, 965, 967, 988, 990, 1018], "elsewher": [390, 462, 463, 471, 472, 478], "eltermann": 1036, "elucid": 994, "elvezio": [650, 998], "elvi": [1038, 1039, 1040], "em": [256, 257, 261, 443, 447, 459, 537, 798, 799, 1001, 1047], "emad": 1051, "email": [0, 351, 376, 388, 391, 416, 840, 1004, 1026], "emami": 1047, "emanuel": 1034, "emb": [170, 233, 243, 299, 369, 370, 462, 696, 999], "embark": [103, 188, 253, 319, 323, 324], "embed": [2, 26, 37, 71, 74, 79, 80, 89, 95, 139, 170, 183, 231, 234, 236, 238, 290, 299, 329, 330, 390, 408, 441, 452, 462, 489, 503, 545, 550, 567, 583, 640, 689, 690, 691, 692, 693, 694, 695, 696, 697, 854, 866, 875, 897, 898, 899, 994, 1005, 1008, 1014, 1019, 1021, 1023, 1027, 1028, 1033, 1034, 1044, 1045, 1047], "embedding_": [235, 390, 689, 690, 691, 692, 693], "emerg": [408, 1026], "emeritu": 391, "emiko": 1047, "emil": 1047, "emili": [1044, 1045], "emilyxinyi": 1051, "emipr": 798, "emir": [1048, 1049], "emit": [1044, 1051], "emlearn": 1021, "emma": 1050, "emmanouil": 1047, "emmanuel": [1033, 1040, 1041, 1042, 1050], "emoji": 396, "emp_cov": [109, 111, 113, 478, 481], "emp_cov_contour": 111, "emp_mah": 111, "emphas": [186, 349, 382, 413, 1002], "emphasi": [349, 407, 411, 907, 908, 909, 910, 911, 1009, 1021], "empir": [2, 48, 52, 61, 62, 70, 71, 77, 78, 97, 108, 110, 111, 113, 149, 183, 194, 230, 276, 310, 406, 412, 415, 418, 447, 449, 460, 469, 470, 471, 474, 477, 478, 533, 535, 540, 542, 544, 550, 552, 566, 591, 604, 640, 650, 668, 672, 679, 680, 717, 722, 724, 725, 830, 840, 841, 842, 844, 863, 886, 934, 975, 994, 996, 1002, 1004, 1006, 1012, 1014, 1016, 1023, 1027, 1028], "empirical_covari": [2, 109, 410, 478, 479, 481, 1049], "empiricalcovari": [2, 109, 111, 112, 410, 469, 473, 474, 475, 476, 1008], "emploi": [0, 51, 170, 245, 390, 410, 416, 450, 478, 583, 590, 1026, 1039], "employ": [186, 264], "empti": [94, 102, 129, 224, 332, 363, 371, 380, 408, 420, 428, 483, 534, 562, 563, 632, 717, 812, 870, 910, 912, 920, 926, 931, 932, 939, 960, 961, 992, 1017, 1035, 1037, 1041, 1042, 1044, 1045, 1047, 1048, 1049], "emptyset": 1002, "emul": [186, 384], "en": [55, 61, 384, 532, 538, 596, 637, 665, 669, 672, 686, 687, 696, 706, 847, 848, 853, 854, 855, 856, 883, 899, 913, 914, 998, 1002, 1017, 1018], "enabl": [2, 16, 52, 66, 83, 104, 149, 187, 220, 234, 246, 312, 320, 322, 323, 325, 326, 327, 348, 374, 376, 381, 384, 388, 390, 394, 399, 404, 408, 409, 413, 415, 416, 449, 464, 468, 535, 536, 542, 560, 561, 562, 563, 564, 580, 581, 591, 592, 603, 611, 798, 799, 801, 804, 826, 827, 828, 829, 830, 832, 865, 866, 878, 879, 902, 903, 905, 906, 907, 908, 909, 910, 911, 920, 961, 968, 992, 994, 999, 1001, 1002, 1005, 1012, 1013, 1016, 1017, 1022, 1026, 1033, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "enable_cython_pairwise_dist": [468, 903], "enable_halving_search_cv": [2, 146, 281, 282, 321, 380, 804, 805, 991], "enable_hist_gradient_boost": [380, 1042], "enable_iterative_imput": [2, 181, 182, 380, 628, 992, 1042], "enable_metadata_rout": [246, 264, 326, 399, 437, 443, 444, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 594, 595, 598, 603, 611, 612, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 801, 802, 803, 804, 805, 808, 810, 815, 819, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 864, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 1049], "enable_my_experimental_featur": 380, "enblom": 1051, "enc": [311, 313, 323, 325, 878, 879, 1012], "enc_auto": 886, "enc_high_smooth": 886, "enc_low_smooth": 886, "encapsul": [383, 409, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916], "enclos": 991, "encod": [2, 43, 47, 50, 88, 103, 120, 139, 149, 154, 183, 186, 187, 188, 211, 212, 249, 264, 279, 284, 309, 311, 312, 313, 321, 323, 324, 340, 351, 353, 368, 370, 372, 381, 388, 390, 409, 412, 413, 415, 416, 418, 464, 487, 497, 504, 527, 532, 538, 540, 541, 543, 545, 546, 547, 549, 552, 562, 563, 567, 568, 570, 582, 589, 590, 592, 631, 649, 659, 660, 670, 673, 681, 736, 803, 808, 810, 828, 831, 865, 866, 868, 870, 872, 873, 876, 878, 879, 886, 889, 903, 922, 991, 992, 998, 999, 1002, 1004, 1005, 1007, 1016, 1021, 1022, 1023, 1028, 1034, 1035, 1041, 1045, 1047, 1048, 1049, 1050, 1051], "encoded_missing_valu": [154, 188, 879, 1012, 1047, 1048], "encodings_": [325, 886, 1012], "encompass": [390, 450, 456, 556, 557, 999], "encount": [364, 374, 394, 402, 408, 415, 416, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 562, 563, 582, 840, 841, 842, 844, 878, 976, 1012, 1016, 1021, 1025, 1026, 1041, 1044], "encourag": [186, 201, 216, 305, 340, 375, 376, 388, 1017, 1021, 1051], "encrypt": 1021, "encyclopedia": 1002, "end": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 374, 376, 378, 388, 390, 391, 394, 399, 405, 408, 409, 411, 415, 450, 456, 468, 488, 489, 509, 510, 538, 547, 558, 559, 560, 561, 565, 566, 567, 646, 647, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 682, 683, 684, 685, 801, 804, 805, 815, 822, 826, 863, 865, 903, 913, 914, 915, 916, 953, 955, 985, 991, 994, 998, 999, 1001, 1002, 1012, 1014, 1016, 1021, 1026, 1038, 1040, 1043, 1046, 1047], "end_": 47, "end_bodi": 47, "end_d": 47, "end_idx": [51, 235], "end_reut": 47, "end_titl": 47, "end_top": 47, "endian": 1045, "endo": 1046, "endpoint": [53, 311, 343, 636], "enemi": 376, "energi": [51, 149, 384, 861, 1007], "enet": [198, 283], "enet_path": [2, 201, 390, 647, 648, 653, 661, 662, 663, 1035, 1037, 1046], "enet_tol": [471, 472, 478, 1038], "enforc": [43, 51, 70, 86, 120, 149, 175, 207, 299, 363, 376, 410, 413, 415, 425, 431, 509, 528, 532, 538, 540, 543, 544, 546, 547, 549, 558, 559, 562, 563, 565, 566, 869, 884, 913, 914, 915, 916, 931, 932, 992, 999, 1035, 1041, 1043, 1045, 1049], "enforce_estimator_tags_i": 1043, "eng": 1041, "engag": [382, 391], "engemann": [1035, 1036, 1040], "engin": [42, 75, 139, 143, 149, 175, 183, 187, 213, 363, 370, 373, 408, 414, 416, 464, 497, 563, 640, 674, 702, 822, 828, 863, 864, 866, 869, 870, 875, 878, 880, 884, 992, 994, 1002, 1012, 1023, 1039], "english": [54, 57, 102, 351, 352, 353, 381, 416, 589, 590, 592, 1021, 1022, 1046], "enh": 380, "enhanc": [120, 216, 375, 376, 380, 388, 390, 408, 1002, 1031, 1032, 1033, 1034, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "enjoi": [77, 264], "enough": [2, 43, 52, 64, 72, 79, 95, 140, 142, 149, 170, 181, 187, 188, 202, 212, 244, 247, 249, 264, 283, 314, 351, 353, 359, 374, 376, 380, 391, 406, 408, 410, 412, 415, 568, 569, 590, 801, 804, 805, 807, 815, 829, 949, 991, 996, 999, 1001, 1008, 1012, 1017, 1021, 1026, 1039, 1049, 1050], "enrich": 344, "ensembl": [2, 43, 46, 49, 52, 63, 64, 67, 89, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 181, 182, 187, 188, 189, 212, 233, 239, 248, 249, 251, 252, 264, 267, 282, 287, 289, 312, 316, 319, 320, 321, 322, 323, 324, 325, 326, 351, 356, 357, 359, 363, 380, 381, 389, 390, 399, 402, 406, 408, 412, 417, 437, 505, 516, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 633, 634, 636, 659, 703, 804, 805, 823, 831, 835, 836, 866, 869, 878, 909, 913, 915, 916, 941, 991, 1002, 1003, 1008, 1009, 1018, 1021, 1022, 1023, 1024, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "ensemble_clf": 138, "ensemble_jaccard_scor": 289, "ensembleregressorsensembl": 396, "ensur": [0, 52, 58, 76, 90, 113, 118, 134, 140, 141, 149, 189, 212, 233, 264, 265, 273, 307, 358, 359, 363, 364, 376, 378, 380, 381, 382, 391, 394, 399, 404, 406, 408, 409, 412, 420, 469, 534, 535, 542, 612, 628, 697, 706, 783, 789, 790, 826, 898, 931, 932, 943, 944, 949, 956, 967, 998, 999, 1002, 1012, 1018, 1035, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "ensure_2d": [931, 932], "ensure_all_finit": [779, 929, 931, 932], "ensure_min_featur": [931, 932], "ensure_min_sampl": [931, 932], "ensure_non_neg": 932, "entail": [264, 389, 883, 885, 1016], "enter": [377, 380, 408, 442, 1009], "entertain": 998, "entic": 186, "entir": [68, 181, 212, 220, 264, 308, 310, 320, 344, 358, 359, 370, 377, 390, 402, 408, 412, 414, 416, 472, 493, 535, 589, 590, 591, 592, 648, 652, 654, 656, 659, 660, 662, 664, 666, 667, 669, 677, 683, 684, 735, 797, 823, 833, 834, 837, 862, 864, 865, 878, 890, 891, 893, 894, 895, 896, 924, 970, 992, 1002, 1012, 1016, 1018, 1042, 1043], "entireti": 390, "entiti": [391, 727, 757], "entitl": [284, 293, 407, 447, 612, 847, 994], "entri": [0, 103, 107, 149, 154, 182, 186, 187, 264, 266, 319, 352, 359, 380, 382, 384, 389, 390, 405, 406, 408, 413, 415, 418, 463, 464, 467, 472, 497, 532, 533, 538, 546, 547, 562, 563, 589, 592, 595, 612, 621, 633, 639, 641, 648, 652, 654, 656, 657, 660, 662, 664, 665, 666, 674, 676, 683, 684, 686, 687, 700, 705, 708, 710, 713, 716, 717, 719, 727, 730, 731, 732, 735, 736, 739, 744, 757, 759, 760, 784, 786, 789, 790, 793, 794, 814, 829, 845, 846, 853, 854, 855, 856, 857, 876, 882, 894, 987, 991, 992, 998, 1002, 1005, 1012, 1017, 1022, 1040, 1043, 1044, 1046, 1050], "entropi": [2, 50, 64, 251, 282, 303, 321, 329, 330, 359, 371, 404, 408, 415, 420, 499, 534, 558, 565, 608, 609, 659, 718, 737, 738, 742, 796, 913, 915, 998, 999, 1002, 1006, 1018, 1035, 1037, 1041, 1042, 1047, 1049, 1050], "entrypoint_to_bug_reproduc": 377, "enumer": [43, 47, 49, 50, 51, 53, 54, 55, 57, 62, 64, 66, 67, 72, 74, 75, 76, 77, 78, 79, 83, 88, 92, 93, 94, 95, 98, 102, 110, 112, 113, 116, 121, 123, 129, 137, 140, 144, 145, 147, 148, 149, 159, 172, 174, 179, 189, 194, 196, 204, 212, 233, 234, 237, 239, 244, 248, 249, 255, 256, 257, 258, 260, 261, 264, 265, 272, 273, 279, 280, 295, 299, 300, 302, 308, 312, 313, 329, 330, 332, 334, 338, 340, 346, 347, 351, 356, 371, 372, 560, 561, 565, 566, 782, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822], "env": [374, 384, 394, 395], "environ": [0, 3, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 363, 371, 373, 374, 376, 378, 379, 382, 388, 394, 395, 404, 409, 500, 1022, 1026, 1028, 1040, 1041, 1050], "environment": [50, 198, 230], "environmenterror": 1049, "eom": 446, "eoss": 0, "ep": [67, 79, 80, 82, 88, 98, 197, 201, 235, 243, 388, 408, 419, 444, 450, 455, 471, 472, 478, 632, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 682, 683, 684, 685, 691, 695, 715, 742, 857, 897, 898, 899, 1014, 1048, 1049], "epanechnikov": [295, 414, 845, 846, 850], "ephemer": 384, "ephrem": 1048, "epimorph": 1050, "epistem": 52, "epoch": [227, 390, 537, 667, 668, 669, 677, 678, 679, 862, 863, 1016, 1040, 1041, 1046], "epp": [408, 705], "eps_": [661, 663], "eps_rang": 243, "epsilon": [2, 88, 98, 196, 235, 245, 325, 346, 413, 446, 455, 644, 650, 668, 677, 679, 747, 862, 863, 906, 908, 911, 995, 998, 1002, 1006, 1016, 1017, 1033], "epsilon_": 843, "epsilon_i": 1002, "epsilon_insensit": [668, 677, 679, 906, 998, 1016], "epsilon_valu": 196, "eq": [264, 421, 475, 722, 724, 725], "equal": [43, 50, 51, 63, 70, 72, 74, 86, 93, 111, 116, 122, 134, 146, 173, 186, 213, 214, 223, 229, 250, 257, 260, 263, 268, 270, 279, 300, 312, 316, 340, 342, 348, 352, 371, 372, 376, 378, 390, 405, 406, 408, 412, 413, 415, 416, 421, 437, 440, 441, 442, 443, 445, 447, 449, 454, 459, 460, 463, 469, 474, 479, 480, 504, 513, 516, 520, 533, 534, 535, 540, 542, 544, 545, 550, 551, 552, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 589, 594, 595, 598, 600, 601, 608, 609, 626, 629, 630, 633, 634, 635, 636, 638, 642, 643, 650, 659, 660, 672, 700, 719, 721, 730, 784, 788, 789, 795, 797, 801, 802, 804, 805, 814, 815, 819, 826, 833, 837, 838, 845, 846, 847, 848, 853, 854, 855, 856, 857, 862, 863, 868, 869, 870, 877, 880, 883, 884, 885, 886, 888, 895, 902, 905, 906, 912, 913, 914, 915, 916, 937, 949, 976, 982, 996, 998, 1002, 1003, 1005, 1006, 1008, 1012, 1016, 1017, 1018, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "equat": [2, 64, 347, 376, 408, 413, 415, 558, 559, 560, 561, 565, 566, 567, 591, 628, 659, 660, 683, 684, 688, 764, 885, 913, 914, 915, 916, 992, 999, 1002, 1007, 1041], "equi": 1001, "equiangular": 998, "equidist": [143, 693], "equip": 1026, "equiv": [994, 1017], "equival": [43, 54, 70, 88, 90, 143, 150, 167, 170, 175, 186, 198, 230, 260, 279, 290, 315, 344, 353, 359, 363, 382, 385, 389, 390, 402, 408, 409, 410, 411, 412, 413, 415, 417, 418, 441, 443, 444, 445, 446, 447, 449, 450, 457, 464, 469, 474, 510, 535, 542, 559, 562, 563, 564, 565, 566, 589, 592, 614, 617, 620, 622, 625, 647, 648, 649, 653, 655, 659, 660, 667, 668, 669, 670, 673, 677, 678, 681, 684, 688, 689, 694, 709, 710, 724, 735, 743, 748, 749, 750, 762, 771, 780, 781, 798, 799, 804, 805, 809, 811, 836, 839, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 868, 874, 875, 877, 880, 881, 882, 883, 885, 893, 895, 896, 935, 947, 987, 991, 996, 998, 999, 1000, 1002, 1008, 1012, 1016, 1017, 1018, 1041, 1042, 1043, 1044, 1046, 1047, 1050], "er": 571, "era": 1022, "eras": [560, 561, 647, 653, 659, 661, 663, 667, 668, 669, 677, 678, 679, 862, 863], "ereg": [157, 415], "eren": [0, 1035, 1036], "eric": [1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "ericellwang": [1046, 1047], "erich": [450, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1051], "erick": 1038, "erik": [371, 1026, 1036], "eriksson": 1040, "erin": [287, 1045], "erl": 287, "erlbaum": 264, "erling": 1038, "ermolaevpa": [1047, 1048], "ernst": [415, 558, 559, 566, 567, 915, 916], "err": [55, 115, 124, 134], "err_cov_emp_ful": 112, "err_cov_emp_pur": 112, "err_cov_mcd": 112, "err_loc_emp_ful": 112, "err_loc_emp_pur": 112, "err_loc_mcd": 112, "errno": 394, "erron": [111, 112, 413, 998, 1034, 1041, 1045], "error": [2, 15, 25, 30, 43, 44, 46, 52, 53, 55, 64, 107, 109, 110, 112, 124, 129, 133, 137, 140, 141, 143, 145, 147, 149, 168, 170, 181, 183, 185, 186, 198, 202, 206, 208, 209, 212, 214, 217, 218, 219, 226, 230, 242, 245, 246, 252, 261, 262, 264, 266, 270, 271, 275, 279, 280, 285, 287, 296, 297, 323, 326, 339, 347, 351, 352, 364, 373, 374, 376, 378, 379, 380, 381, 385, 388, 390, 399, 402, 406, 408, 409, 410, 412, 413, 415, 416, 417, 437, 443, 444, 447, 449, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 504, 516, 525, 532, 534, 535, 538, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 582, 583, 589, 591, 592, 593, 596, 597, 599, 600, 601, 607, 611, 612, 630, 633, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 689, 690, 691, 693, 694, 697, 699, 702, 703, 710, 712, 713, 721, 722, 724, 728, 741, 744, 745, 746, 747, 748, 749, 751, 752, 754, 765, 779, 783, 789, 790, 791, 792, 800, 801, 802, 803, 804, 805, 807, 808, 810, 815, 819, 823, 824, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 852, 853, 855, 856, 857, 860, 862, 863, 864, 865, 866, 868, 870, 871, 872, 877, 878, 879, 884, 885, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 929, 930, 931, 932, 935, 964, 985, 988, 990, 991, 992, 993, 995, 996, 997, 999, 1003, 1006, 1010, 1012, 1016, 1017, 1018, 1023, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "error_": [532, 544], "error_i": [140, 271], "error_norm": [110, 112, 469, 470, 471, 472, 473, 474, 475, 476], "error_on_new": 630, "error_r": 138, "error_scor": [801, 804, 805, 807, 815, 824, 827, 828, 829, 832, 991, 1037, 1041, 1045, 1048], "error_x": [140, 271], "errorbar": [72, 94, 105, 110, 112, 167, 176, 177, 292, 332, 343, 807, 824], "errorbar_": [807, 824], "errorbar_kw": [807, 824], "errorbarcontain": [807, 824], "errors_coef": 216, "errors_lines_": 702, "erwan": 1050, "erwin": 1036, "escal": 391, "escalant": 1002, "escalera": 1002, "escap": [1046, 1048], "eschibli": 1045, "eschlbeck": 1047, "esdi": 57, "esp": [408, 1033], "especi": [43, 47, 52, 88, 89, 143, 146, 149, 186, 212, 246, 316, 324, 352, 359, 364, 370, 376, 384, 388, 390, 406, 408, 416, 443, 449, 502, 539, 558, 559, 560, 561, 565, 566, 567, 647, 648, 649, 651, 653, 654, 655, 659, 660, 661, 662, 663, 664, 670, 681, 696, 706, 747, 840, 841, 842, 843, 844, 913, 914, 915, 916, 998, 1004, 1005, 1012, 1026, 1036, 1041, 1045, 1046, 1047], "espinoza": [1034, 1035], "essenc": [608, 609, 744, 999, 1002], "essenti": [0, 270, 324, 374, 378, 408, 412, 413, 510, 1002, 1005, 1022, 1026, 1041], "est": [154, 186, 205, 227, 246, 248, 264, 284, 312, 321, 359, 402, 415, 563, 736, 870, 954, 991, 1002, 1012, 1016, 1044, 1045], "est1": [390, 633], "est2": [390, 633], "est_freq": 230, "est_idx": 312, "est_sev": 230, "establish": [384, 388, 391, 992], "estefania": 1047, "ester": [408, 419, 444], "estev": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "estim": [2, 4, 7, 8, 13, 16, 25, 29, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 51, 52, 61, 63, 64, 66, 69, 70, 72, 73, 79, 82, 87, 88, 89, 90, 91, 94, 96, 103, 104, 105, 106, 115, 116, 120, 121, 122, 127, 129, 133, 134, 138, 139, 140, 141, 142, 144, 146, 148, 149, 151, 154, 155, 156, 157, 166, 167, 168, 169, 170, 171, 173, 175, 177, 179, 180, 181, 185, 186, 192, 195, 198, 200, 202, 203, 208, 209, 212, 214, 216, 217, 219, 220, 229, 230, 238, 239, 240, 245, 251, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 267, 268, 270, 271, 272, 273, 274, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 297, 301, 310, 312, 322, 323, 325, 327, 343, 344, 347, 352, 353, 355, 356, 357, 363, 364, 365, 368, 374, 376, 379, 380, 383, 384, 385, 386, 394, 399, 402, 403, 406, 407, 408, 411, 413, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 490, 491, 493, 496, 497, 499, 502, 503, 525, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 577, 578, 580, 581, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 688, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 708, 709, 712, 713, 714, 717, 719, 721, 722, 724, 725, 727, 728, 729, 730, 731, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 817, 819, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 921, 922, 923, 924, 925, 930, 931, 932, 934, 936, 937, 938, 941, 943, 944, 945, 954, 957, 958, 959, 961, 985, 989, 990, 997, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1022, 1023, 1024, 1026, 1027, 1028, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "estimate_bandwidth": [2, 79, 96, 408, 448, 461], "estimated_coef": [647, 648, 653, 661, 662, 663, 682, 683, 684], "estimator_": [215, 246, 284, 428, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 594, 595, 598, 672, 800, 823, 902, 985, 1048], "estimator__alpha": 146, "estimator__max_depth": [390, 991], "estimator_alpha": 142, "estimator_check": [2, 319, 378, 390, 943, 944, 1040, 1041, 1043, 1044, 1047, 1048, 1049, 1051], "estimator_conf": 49, "estimator_config": 49, "estimator_dict": 220, "estimator_errors_": [134, 554, 555], "estimator_html_repr": [2, 378, 409, 1044, 1045, 1046, 1047, 1050], "estimator_modul": 378, "estimator_nam": [49, 220, 378, 383, 438, 577, 699, 701, 703, 930], "estimator_samples_": 1044, "estimator_weights_": [134, 554, 555], "estimatorcv": [390, 1022], "estimators_": [141, 142, 205, 227, 247, 319, 390, 415, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 833, 834, 835, 836, 837, 838, 839, 1034, 1040, 1047], "estimators_early_stop": 144, "estimators_features_": [556, 557, 564], "estimators_samples_": [556, 557, 558, 559, 564, 565, 566, 567, 1039, 1041, 1044, 1050], "est\u00e8v": [0, 397, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "est\u00e8vc": 1051, "esuli": [1040, 1045], "esvhd": 1042, "et": [0, 2, 50, 109, 110, 134, 148, 200, 303, 371, 373, 405, 408, 410, 413, 415, 416, 417, 451, 499, 520, 521, 529, 536, 542, 545, 564, 683, 684, 720, 721, 840, 842, 862, 863, 898, 948, 949, 998, 999, 1002, 1008, 1012, 1014, 1017, 1018, 1041, 1049], "eta": [413, 537, 677, 678, 679, 1006, 1016, 1038], "eta0": [669, 677, 678, 679, 1016], "eta_0": 1016, "etc": [2, 143, 212, 230, 265, 274, 275, 327, 359, 363, 365, 376, 378, 381, 388, 389, 390, 399, 402, 405, 409, 412, 416, 489, 504, 528, 558, 559, 565, 566, 669, 677, 693, 719, 772, 801, 815, 836, 839, 869, 880, 913, 914, 915, 916, 917, 919, 931, 932, 943, 991, 992, 996, 1002, 1005, 1021, 1022, 1026, 1033, 1040, 1042, 1043], "eth": 1043, "ethan": [1036, 1039], "ethic": 149, "etiquett": 376, "etl": [1022, 1026], "euclidean": [2, 37, 75, 90, 91, 199, 243, 249, 290, 293, 298, 319, 324, 344, 352, 405, 408, 413, 414, 415, 416, 418, 440, 441, 444, 445, 446, 450, 452, 457, 460, 463, 532, 538, 546, 547, 590, 616, 620, 623, 624, 677, 679, 691, 693, 696, 697, 700, 763, 764, 770, 771, 772, 773, 779, 780, 781, 782, 793, 794, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 899, 992, 996, 1000, 1003, 1005, 1014, 1022, 1037, 1040, 1041, 1042, 1043, 1049, 1050], "euclidean_dist": [2, 235, 243, 378, 404, 450, 454, 457, 689, 695, 763, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 1033, 1038, 1041, 1042, 1050], "euclideandist": 700, "eugen": [373, 1034, 1039], "eunji": 1041, "eunseop": 1043, "euro": 327, "europ": [416, 1012], "european": [727, 757, 1002], "eustach": [1026, 1035, 1036], "eval_and_print_metr": 333, "eval_gradi": [178, 418, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "evalml": 1021, "evalu": [2, 27, 29, 43, 44, 45, 49, 50, 61, 68, 71, 73, 77, 78, 82, 88, 97, 103, 104, 123, 134, 140, 141, 143, 144, 146, 149, 163, 164, 173, 183, 189, 191, 194, 202, 214, 219, 230, 238, 262, 263, 267, 268, 269, 270, 273, 275, 276, 277, 279, 281, 282, 284, 285, 289, 297, 299, 303, 310, 315, 317, 321, 325, 326, 333, 340, 344, 351, 359, 369, 371, 378, 382, 390, 393, 409, 416, 417, 418, 447, 449, 464, 466, 488, 491, 493, 494, 497, 510, 521, 537, 552, 562, 563, 564, 568, 569, 592, 595, 603, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 632, 633, 634, 635, 648, 654, 660, 674, 676, 698, 700, 702, 703, 704, 705, 706, 712, 714, 715, 716, 718, 719, 727, 728, 737, 738, 743, 755, 756, 757, 758, 787, 796, 798, 799, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 831, 832, 836, 842, 845, 846, 851, 863, 865, 866, 872, 875, 878, 879, 883, 884, 885, 890, 891, 893, 894, 895, 896, 907, 910, 913, 934, 943, 975, 994, 998, 1000, 1004, 1005, 1008, 1009, 1010, 1013, 1016, 1018, 1021, 1023, 1026, 1027, 1028, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046], "evaluate_everi": 537, "evaluate_model_and_stor": 316, "evaluation_std": 352, "evaluations_std": 352, "evelyn": 1051, "even": [37, 43, 52, 53, 64, 75, 77, 85, 107, 116, 123, 140, 146, 176, 186, 187, 188, 202, 212, 213, 220, 230, 236, 237, 245, 246, 256, 276, 287, 310, 312, 314, 315, 334, 347, 351, 352, 353, 359, 365, 371, 375, 376, 377, 378, 380, 381, 384, 388, 390, 402, 406, 408, 409, 410, 412, 413, 415, 416, 418, 441, 443, 445, 446, 447, 448, 449, 459, 461, 533, 536, 558, 559, 560, 561, 565, 566, 583, 590, 595, 628, 629, 631, 640, 659, 660, 696, 701, 706, 713, 744, 762, 768, 775, 779, 782, 787, 789, 828, 865, 866, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 913, 914, 915, 916, 949, 970, 991, 992, 994, 996, 998, 1001, 1002, 1005, 1007, 1008, 1010, 1012, 1014, 1016, 1017, 1018, 1026, 1040, 1041, 1042, 1045, 1047, 1050], "evenli": [2, 47, 74, 85, 146, 189, 216, 265, 416, 953], "event": [0, 43, 212, 230, 273, 406, 408, 589, 590, 637, 840, 936, 998, 1003, 1004, 1021, 1026, 1039], "eventu": [7, 258, 408, 417, 594, 1026], "ever": [140, 153, 385, 415, 1026], "everi": [43, 120, 149, 175, 181, 210, 213, 233, 245, 256, 261, 279, 322, 326, 359, 371, 376, 378, 380, 384, 390, 406, 408, 410, 412, 413, 416, 440, 454, 509, 532, 537, 540, 546, 558, 560, 561, 562, 563, 565, 591, 592, 604, 647, 648, 650, 653, 654, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 686, 687, 688, 693, 697, 755, 772, 780, 781, 814, 854, 913, 915, 917, 919, 937, 995, 997, 1002, 1003, 1004, 1012, 1018, 1026, 1033, 1037, 1039, 1042, 1046, 1050], "everingham": 1002, "everingham2010": 1002, "everybodi": [370, 376], "everyon": [376, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "everyth": [329, 359, 380, 382, 388, 402, 464, 956, 1021, 1022, 1033], "everywher": 390, "evgeni": 1044, "evid": [276, 351, 384, 408, 412, 413, 415, 645, 798, 1001], "evol": 1002, "evolut": [47, 49, 282, 363, 365], "evolv": [385, 1048], "ex": [102, 374, 377, 394, 1037, 1038], "exact": [44, 46, 113, 125, 140, 175, 216, 244, 264, 290, 326, 359, 363, 364, 370, 376, 378, 384, 385, 388, 389, 390, 408, 415, 417, 433, 482, 483, 484, 488, 497, 535, 536, 542, 562, 563, 639, 643, 647, 693, 801, 815, 826, 827, 828, 907, 910, 991, 994, 998, 999, 1008, 1012, 1016, 1017, 1040, 1041, 1043], "exactli": [103, 134, 185, 193, 198, 206, 212, 216, 261, 264, 278, 311, 347, 351, 376, 378, 384, 405, 408, 412, 413, 416, 421, 446, 453, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 516, 527, 591, 592, 616, 677, 679, 704, 706, 764, 802, 819, 826, 994, 998, 999, 1000, 1002, 1003, 1018, 1033, 1039, 1040, 1046], "exagger": [74, 186, 693, 999], "examin": [164, 382, 384, 408, 854], "exampl": [2, 30, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 393, 394, 401, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 423, 424, 426, 427, 429, 430, 433, 434, 435, 436, 439, 456, 457, 459, 461, 463, 471, 478, 480, 481, 485, 486, 487, 494, 498, 504, 506, 507, 508, 509, 510, 517, 518, 519, 529, 530, 532, 546, 547, 548, 549, 556, 573, 574, 578, 584, 586, 587, 593, 596, 597, 599, 602, 604, 610, 613, 617, 621, 622, 625, 627, 630, 637, 638, 639, 643, 651, 652, 655, 661, 662, 664, 668, 676, 684, 686, 687, 688, 695, 696, 697, 700, 709, 711, 712, 715, 716, 717, 721, 722, 724, 725, 726, 727, 729, 731, 732, 734, 737, 740, 741, 744, 745, 748, 752, 755, 757, 759, 760, 761, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 784, 792, 795, 797, 808, 809, 810, 811, 812, 813, 814, 825, 837, 839, 841, 845, 846, 855, 856, 857, 859, 860, 867, 868, 871, 873, 876, 887, 888, 890, 892, 893, 895, 896, 897, 900, 904, 906, 907, 915, 916, 917, 918, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 939, 940, 941, 942, 943, 945, 947, 948, 949, 950, 951, 952, 955, 956, 963, 964, 965, 966, 970, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1024, 1026, 1028, 1030, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1046, 1048, 1049, 1050], "example_funct": 376, "example_gaussian_process_plot_gp_probabilistic_classification_after_regress": 1033, "example_gaussian_process_plot_gp_regress": 1033, "exampleclassifi": 246, "exampleclassifierexampleclassifi": 246, "exampleestim": 376, "exampleregressor": 246, "examples_pattern": 376, "exampletransform": 246, "exc": [287, 985], "exce": [115, 289, 320, 418, 442, 516, 603, 650, 659, 1042, 1045, 1047], "exceed": [804, 805, 1039], "excel": [152, 370, 376, 415, 691, 695, 998, 1026], "except": [2, 50, 79, 86, 123, 132, 140, 149, 220, 227, 239, 246, 278, 290, 303, 306, 307, 310, 312, 324, 369, 376, 378, 379, 381, 388, 390, 399, 402, 405, 409, 412, 413, 415, 416, 418, 431, 460, 465, 468, 482, 483, 484, 510, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 612, 628, 631, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 688, 712, 779, 808, 838, 839, 845, 846, 848, 851, 856, 862, 863, 869, 883, 885, 903, 906, 908, 911, 914, 916, 930, 953, 985, 987, 991, 998, 1002, 1017, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1051], "exception": 230, "excerpt": [45, 1014], "excess": [216, 446, 1012, 1040], "exchang": [402, 1025], "excit": 1040, "exclud": [47, 57, 185, 310, 376, 380, 390, 446, 464, 466, 730, 731, 739, 784, 785, 788, 814, 822, 880, 976, 1002, 1005, 1042, 1049], "exclus": [364, 388, 390, 413, 415, 628, 629, 631, 717, 803, 818, 821, 991, 998, 1002, 1003, 1026, 1040, 1044], "exec": 388, "execut": [64, 181, 198, 202, 245, 275, 364, 374, 376, 382, 402, 404, 408, 413, 419, 443, 461, 801, 807, 815, 824, 826, 827, 828, 829, 832, 850, 967, 968, 1012, 1015, 1023, 1035, 1038, 1041], "exemplar": [408, 440, 454], "exemplari": [155, 156], "exemplifi": 390, "exercis": [2, 105, 142, 152, 172, 174, 222, 225, 305, 306, 334, 345, 348, 349, 365, 373, 376, 502, 503, 505, 506, 653, 654, 659, 801, 806, 847, 910, 1023, 1036], "exhaust": [2, 168, 271, 319, 320, 321, 322, 323, 324, 325, 326, 327, 363, 373, 381, 389, 403, 408, 415, 801, 804, 805, 815, 895, 896, 898, 998, 1028], "exhibit": [171, 217, 344, 351, 393, 412, 413, 415, 418, 1010], "exist": [47, 48, 52, 55, 57, 86, 230, 270, 307, 310, 344, 370, 375, 378, 379, 382, 388, 390, 391, 394, 402, 408, 412, 413, 415, 416, 423, 428, 433, 437, 443, 444, 447, 449, 451, 453, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 492, 500, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 586, 589, 590, 591, 592, 598, 604, 611, 612, 633, 634, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 699, 701, 703, 763, 766, 770, 800, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 878, 879, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 985, 994, 999, 1001, 1002, 1006, 1008, 1009, 1012, 1026, 1033, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "exist_ok": 47, "existing_credit": 264, "exit": [104, 290, 380, 384, 468], "exp": [2, 80, 87, 99, 129, 137, 146, 171, 198, 222, 295, 300, 303, 320, 321, 325, 344, 406, 408, 409, 414, 420, 452, 465, 522, 534, 537, 616, 617, 623, 642, 760, 767, 777, 862, 863, 881, 996, 998, 1000, 1004, 1005, 1006, 1015, 1016, 1017], "exp10": 186, "exp_dirichlet_component_": 537, "exp_dist_embed": 300, "expand": [43, 82, 98, 241, 316, 320, 359, 368, 378, 415, 444, 450, 500, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1002, 1034, 1041, 1042, 1049], "expand_frame_repr": 230, "expans": [43, 181, 321, 450, 880, 1042], "expect": [43, 44, 49, 52, 61, 72, 79, 86, 116, 118, 125, 134, 137, 139, 141, 143, 146, 149, 165, 166, 170, 176, 183, 184, 188, 199, 204, 212, 213, 214, 216, 220, 230, 243, 246, 249, 250, 256, 257, 260, 261, 264, 277, 290, 315, 347, 351, 352, 359, 363, 364, 376, 378, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 399, 404, 406, 408, 409, 410, 412, 415, 416, 417, 431, 464, 465, 467, 468, 469, 482, 483, 484, 497, 524, 533, 537, 539, 542, 553, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 571, 573, 589, 590, 592, 596, 598, 607, 612, 628, 633, 634, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 675, 676, 679, 680, 696, 705, 706, 717, 736, 789, 795, 800, 801, 815, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 855, 856, 857, 858, 863, 866, 871, 878, 879, 882, 885, 886, 895, 896, 903, 905, 906, 907, 908, 909, 910, 911, 914, 916, 926, 964, 991, 998, 1001, 1002, 1004, 1008, 1012, 1016, 1017, 1018, 1023, 1025, 1028, 1033, 1034, 1035, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "expected_anomaly_fract": 249, "expected_i": 146, "expected_n_anomali": 249, "expected_ri": 706, "expectedli": 351, "expens": [0, 89, 140, 154, 170, 185, 187, 240, 267, 279, 340, 344, 351, 352, 353, 365, 382, 390, 408, 409, 412, 415, 416, 449, 468, 509, 801, 804, 805, 815, 828, 903, 905, 999, 1001, 1012, 1017, 1026, 1037], "experi": [30, 134, 173, 177, 185, 186, 187, 188, 191, 214, 264, 287, 315, 347, 352, 353, 364, 370, 376, 379, 391, 412, 516, 729, 786, 998, 1003, 1014, 1020, 1021, 1026], "experienc": 376, "experiment": [2, 146, 181, 182, 212, 281, 282, 321, 322, 327, 378, 379, 386, 388, 390, 399, 412, 497, 550, 580, 581, 628, 697, 804, 805, 971, 991, 992, 998, 1001, 1002, 1021, 1022, 1028, 1041, 1042, 1045, 1046, 1047, 1048, 1050, 1051], "expert_r": 409, "expertis": [375, 376, 388], "expit": [145, 203, 415, 562, 998, 1040], "explain": [2, 43, 44, 51, 64, 89, 105, 115, 116, 128, 146, 170, 175, 176, 187, 188, 212, 230, 239, 246, 261, 280, 316, 327, 351, 352, 364, 376, 388, 402, 404, 411, 413, 418, 494, 522, 525, 535, 542, 545, 550, 626, 649, 657, 670, 681, 722, 723, 724, 725, 729, 786, 998, 1005, 1018, 1020, 1044, 1046, 1047], "explained_vari": [352, 1002], "explained_variance_": [116, 535, 542, 545, 1040], "explained_variance_ratio": 1039, "explained_variance_ratio_": [105, 128, 327, 352, 413, 535, 542, 545, 550, 1036, 1039], "explained_variance_scor": [2, 1002, 1036, 1040, 1047], "explan": [64, 116, 246, 363, 375, 376, 406, 416, 991, 1001, 1003, 1018, 1021, 1026, 1036], "explic": 1014, "explicit": [43, 149, 183, 187, 191, 238, 246, 284, 344, 363, 364, 365, 375, 377, 388, 390, 391, 399, 409, 416, 422, 472, 500, 502, 503, 542, 552, 553, 632, 639, 640, 642, 677, 801, 802, 809, 849, 857, 865, 905, 910, 965, 994, 996, 998, 1002, 1012, 1018, 1021, 1023, 1033, 1037, 1042, 1043, 1046, 1050], "explicitli": [43, 80, 141, 170, 177, 181, 182, 213, 242, 246, 326, 344, 353, 359, 364, 370, 372, 376, 377, 378, 380, 388, 390, 399, 402, 404, 412, 416, 418, 536, 550, 551, 580, 581, 598, 628, 649, 659, 660, 670, 681, 710, 728, 783, 789, 790, 804, 805, 836, 839, 845, 846, 871, 895, 896, 990, 991, 992, 994, 996, 998, 999, 1002, 1004, 1005, 1012, 1026, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1051], "explod": 316, "exploit": [62, 289, 402, 1003, 1022, 1036], "exploit_incremental_learn": [807, 829], "explor": [52, 72, 137, 138, 149, 189, 236, 237, 249, 264, 271, 272, 278, 279, 287, 317, 321, 340, 352, 359, 370, 373, 375, 382, 408, 415, 472, 801, 804, 812, 886, 991, 998, 999, 1001, 1007, 1009, 1012, 1026, 1039], "exploratori": [186, 1026], "explos": [801, 815, 826, 827, 828], "expm1": 107, "expon": [418, 617, 677, 678, 679, 813, 862, 863, 880, 991], "exponenti": [2, 80, 107, 170, 175, 295, 300, 414, 415, 418, 449, 537, 555, 560, 615, 620, 623, 640, 644, 759, 760, 845, 846, 850, 862, 863, 880, 994, 998, 1002, 1017, 1040, 1046], "export": [2, 374, 377, 378, 394, 917, 918, 1018, 1021, 1042], "export_graphviz": [2, 1018, 1038, 1040, 1046, 1048, 1049, 1051], "export_text": [2, 1018, 1042, 1049], "expos": [2, 168, 246, 283, 287, 322, 324, 364, 369, 373, 378, 390, 399, 406, 409, 415, 417, 418, 437, 464, 554, 555, 562, 563, 568, 569, 570, 571, 594, 595, 603, 612, 800, 801, 804, 805, 815, 823, 834, 835, 836, 837, 838, 839, 920, 998, 1002, 1004, 1021, 1030, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "exposur": [212, 230, 998], "express": [43, 46, 51, 52, 134, 140, 170, 175, 186, 270, 271, 316, 321, 337, 344, 353, 370, 371, 376, 377, 382, 388, 402, 408, 413, 414, 415, 416, 450, 456, 457, 589, 590, 592, 717, 789, 801, 807, 815, 824, 826, 827, 828, 829, 832, 852, 994, 998, 1002, 1006, 1012, 1013, 1018, 1041], "expsinesquar": [2, 170, 175, 179, 418], "exstrac": 1002, "ext": 647, "extend": [31, 52, 88, 89, 100, 132, 213, 259, 264, 277, 340, 373, 374, 388, 390, 406, 408, 413, 415, 499, 632, 659, 721, 822, 834, 837, 838, 870, 872, 889, 905, 906, 909, 920, 994, 1002, 1003, 1017, 1022, 1024, 1028, 1038, 1039, 1040, 1041, 1043, 1048], "extens": [277, 279, 295, 363, 364, 370, 371, 374, 377, 379, 380, 384, 385, 388, 402, 408, 413, 497, 504, 535, 742, 943, 951, 999, 1001, 1002, 1020, 1021, 1026, 1033, 1039, 1046, 1047, 1049, 1050], "extent": [2, 48, 91, 172, 173, 174, 243, 348, 440, 536, 697, 798, 1002], "extercond": 143, "extern": [159, 170, 264, 365, 369, 373, 376, 378, 381, 388, 390, 405, 408, 416, 417, 418, 594, 611, 612, 718, 738, 796, 998, 1001, 1002, 1005, 1018, 1022, 1028, 1041, 1045], "exterqu": [143, 154], "extmath": [2, 258, 351, 385, 453, 946, 947, 948, 949, 950, 951, 1033, 1034, 1039, 1040, 1043, 1047, 1048, 1050], "extr": 47, "extra": [2, 80, 142, 149, 248, 290, 326, 353, 374, 375, 377, 390, 402, 415, 416, 438, 443, 447, 459, 464, 533, 558, 559, 567, 591, 592, 701, 702, 703, 826, 849, 915, 916, 939, 1001, 1002, 1005, 1033, 1036, 1038, 1039, 1041, 1046, 1048], "extra_cflag": 382, "extra_tre": [915, 916], "extract": [2, 17, 42, 43, 45, 47, 50, 51, 55, 83, 88, 101, 102, 103, 104, 115, 120, 140, 164, 168, 183, 227, 262, 269, 275, 278, 308, 333, 343, 351, 353, 359, 368, 371, 373, 382, 385, 388, 408, 409, 412, 413, 450, 452, 455, 456, 462, 464, 488, 489, 494, 495, 504, 505, 532, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 584, 585, 589, 590, 592, 594, 595, 598, 600, 632, 719, 789, 801, 815, 842, 864, 865, 910, 922, 949, 958, 965, 991, 999, 1003, 1007, 1012, 1016, 1021, 1023, 1026, 1028, 1033, 1034, 1042, 1045], "extract_dbscan": 408, "extract_patches_2d": [2, 83, 123, 416, 588, 1041], "extract_scor": 273, "extractal": 47, "extractor": [212, 308, 365, 371, 390, 416, 504, 582, 583, 589, 590, 592, 991, 1033], "extran": 376, "extrapol": [43, 170, 193, 213, 242, 273, 884, 1002, 1012, 1018, 1046, 1048], "extratre": [142, 152, 363, 1036], "extratreeclassifi": [2, 558, 567, 916, 992, 1003, 1018, 1037, 1042, 1043, 1044, 1046, 1047, 1048, 1050], "extratreeregressor": [2, 559, 564, 567, 915, 992, 1003, 1008, 1018, 1042, 1043, 1044, 1046, 1047, 1048, 1050], "extratreesclassifi": [2, 142, 152, 415, 417, 559, 565, 567, 915, 916, 992, 1003, 1036, 1037, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050], "extratreesregressor": [2, 248, 415, 558, 566, 567, 915, 916, 992, 1003, 1036, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050], "extrem": [2, 146, 212, 214, 248, 249, 283, 310, 317, 332, 352, 376, 379, 407, 408, 413, 558, 559, 565, 566, 567, 633, 634, 680, 725, 753, 915, 916, 917, 919, 1002, 1004], "extrema": 996, "exxon": 51, "ey": [111, 112, 257, 261, 340, 371, 535, 542, 551], "eyast": 1047, "ezebunandu": 1045, "ezeiza": 765, "ezri": 1046, "f": [0, 2, 43, 44, 46, 50, 51, 52, 54, 55, 57, 58, 63, 66, 68, 72, 78, 81, 82, 85, 86, 88, 91, 97, 100, 103, 107, 116, 123, 134, 137, 140, 141, 143, 144, 146, 149, 154, 155, 160, 162, 164, 167, 168, 170, 176, 177, 179, 183, 185, 186, 187, 188, 189, 191, 198, 199, 202, 204, 209, 212, 213, 214, 216, 222, 226, 230, 233, 243, 245, 246, 249, 253, 260, 264, 268, 270, 271, 272, 273, 276, 277, 279, 280, 282, 283, 284, 290, 293, 305, 306, 307, 312, 315, 316, 319, 321, 323, 325, 326, 327, 329, 330, 339, 344, 347, 351, 352, 353, 359, 371, 376, 377, 378, 382, 384, 388, 402, 406, 409, 413, 415, 416, 417, 418, 487, 509, 510, 532, 533, 538, 539, 567, 582, 583, 584, 588, 593, 596, 597, 599, 600, 601, 605, 606, 607, 608, 609, 610, 618, 628, 633, 636, 659, 697, 714, 724, 727, 730, 731, 757, 784, 785, 788, 789, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 829, 830, 832, 862, 863, 867, 876, 879, 880, 884, 885, 886, 912, 920, 931, 932, 985, 994, 997, 1006, 1009, 1010, 1012, 1016, 1023, 1035, 1041, 1042, 1043, 1045, 1047], "f0_c0": 886, "f0_c1": 886, "f0_c2": 886, "f0e442": 255, "f1": [2, 45, 62, 68, 102, 165, 268, 308, 329, 330, 333, 412, 714, 730, 731, 739, 784, 823, 1002, 1003, 1037, 1049], "f1_c0": 886, "f1_c1": 886, "f1_c2": 886, "f1_macro": [412, 1002, 1037], "f1_micro": [1002, 1037], "f1_sampl": 1002, "f1_score": [2, 62, 277, 333, 371, 407, 739, 1002, 1033, 1035, 1036, 1037, 1038, 1042, 1043, 1049, 1050], "f1_weight": [1002, 1037], "f2": [380, 1003], "f2001": 1002, "f2006": 1002, "f3": 1003, "f4": 499, "f401": [100, 126, 187, 232, 234], "f781bf": [75, 79, 95, 96], "f7bd01": 75, "f_": [415, 636, 731, 1002], "f_0": 151, "f_1": [151, 1002], "f_beta": 1002, "f_classif": [2, 164, 165, 343, 417, 593, 596, 597, 599, 600, 601, 605, 607, 610], "f_i": 406, "f_idx": 151, "f_j": [406, 1010], "f_m": 415, "f_n": 277, "f_p": 277, "f_regress": [2, 87, 163, 417, 593, 596, 597, 599, 600, 601, 605, 606, 610, 1036, 1040, 1047, 1050], "f_score": 277, "f_statist": [606, 607], "f_test": 163, "fa": [2, 119, 129, 130, 183, 382, 413, 473, 476, 533, 542, 801, 827, 1023], "fa_estim": 120, "fa_scor": 127, "fab": [1026, 1043, 1044], "fabia": [405, 720], "fabian": [0, 398, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1050], "fabiana": 1044, "fabio": 1039, "fabisch": [0, 398, 1035, 1036, 1037, 1039], "fabrizio": 1048, "face": [2, 42, 44, 54, 71, 84, 86, 119, 123, 125, 127, 129, 183, 191, 238, 243, 369, 376, 380, 408, 413, 415, 449, 472, 494, 495, 496, 522, 533, 534, 538, 540, 541, 542, 544, 559, 585, 658, 674, 698, 714, 815, 831, 848, 885, 910, 934, 1005, 1018, 1019, 1023, 1028, 1033, 1041], "face_id": 248, "facecolor": [51, 63, 70, 93, 120, 136, 161, 178, 232, 247, 270, 297, 312, 338, 341, 344, 345, 346], "faces_cent": 120, "facial": 371, "facil": [1001, 1021], "facilit": [363, 390, 402, 1021, 1022, 1039, 1042], "fact": [43, 50, 57, 62, 112, 116, 134, 144, 146, 188, 243, 253, 287, 289, 351, 370, 383, 388, 390, 404, 411, 413, 414, 415, 416, 650, 669, 671, 705, 996, 998, 1005, 1012, 1016, 1017, 1022, 1026, 1047], "facto": 1043, "factor": [2, 11, 42, 45, 48, 63, 67, 79, 80, 86, 88, 95, 115, 119, 125, 129, 152, 183, 186, 226, 237, 239, 249, 264, 281, 282, 290, 291, 305, 306, 310, 312, 321, 323, 339, 363, 364, 372, 376, 382, 385, 390, 405, 408, 415, 416, 418, 440, 442, 454, 469, 471, 472, 473, 474, 476, 478, 488, 505, 515, 516, 528, 533, 536, 537, 539, 541, 542, 545, 546, 547, 548, 550, 551, 562, 563, 564, 589, 592, 598, 614, 650, 651, 652, 655, 656, 657, 683, 684, 693, 720, 784, 801, 804, 805, 827, 851, 885, 899, 901, 909, 948, 949, 991, 998, 999, 1005, 1012, 1015, 1019, 1023, 1027, 1028, 1033, 1034, 1036, 1037, 1039, 1047, 1049], "factoranalysi": [2, 120, 127, 130, 413, 545, 1034, 1036, 1045, 1047], "factori": [2, 94, 264, 270, 416, 924, 926, 971, 1002], "facundo": [1044, 1047], "fagan": 1042, "fail": [43, 87, 99, 121, 127, 178, 193, 198, 216, 246, 270, 319, 364, 374, 376, 379, 384, 391, 394, 411, 412, 440, 472, 474, 677, 678, 679, 712, 862, 863, 921, 923, 930, 943, 991, 999, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "failur": [183, 184, 186, 208, 376, 384, 394, 658, 786, 831, 931, 932, 1023, 1025, 1026, 1046, 1047, 1051], "fair": [51, 64, 415, 691, 695, 834, 1003, 1026], "fairer": 359, "fairli": [113, 145, 234, 306, 384, 408, 560, 561, 700, 1003], "faith": [57, 345], "fake": 416, "falak": 1042, "fall": [25, 30, 43, 52, 146, 149, 177, 269, 270, 376, 408, 416, 433, 446, 447, 509, 510, 728, 729, 795, 882, 894, 954, 1001, 1002, 1012, 1042], "fallback": [391, 394, 833, 834, 1002], "fals": [2, 43, 44, 46, 47, 49, 50, 53, 54, 58, 59, 61, 63, 64, 68, 69, 70, 74, 77, 79, 80, 81, 87, 88, 97, 100, 102, 103, 104, 110, 112, 118, 124, 128, 129, 134, 140, 141, 143, 146, 147, 149, 157, 159, 170, 175, 176, 177, 178, 186, 187, 188, 189, 193, 194, 198, 199, 209, 212, 213, 217, 218, 220, 228, 230, 232, 235, 246, 247, 249, 253, 255, 264, 267, 268, 270, 273, 274, 277, 278, 279, 280, 281, 282, 283, 285, 290, 294, 300, 303, 306, 307, 310, 311, 316, 317, 319, 321, 322, 323, 324, 326, 327, 331, 340, 342, 344, 347, 348, 351, 352, 370, 376, 377, 378, 381, 390, 399, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 421, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 514, 516, 524, 525, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 695, 696, 698, 699, 700, 701, 702, 703, 704, 709, 710, 712, 713, 714, 715, 716, 719, 720, 727, 728, 729, 730, 731, 732, 739, 744, 755, 757, 762, 764, 768, 770, 775, 779, 783, 784, 785, 786, 788, 790, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 815, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 929, 930, 931, 932, 938, 943, 950, 962, 963, 964, 966, 967, 971, 972, 973, 975, 982, 987, 988, 990, 991, 992, 998, 1002, 1005, 1012, 1016, 1017, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "false_": 637, "false_discovery_r": 596, "famili": [2, 45, 264, 363, 365, 390, 408, 411, 413, 416, 417, 593, 596, 597, 599, 600, 601, 607, 862, 863, 881, 893, 998, 1012, 1016, 1037, 1047], "familiar": [376, 414, 1041], "famou": [371, 373, 415, 1017], "famous": 1004, "fan": [0, 364, 391, 397, 1017, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "fanci": 416, "fancybox": 346, "fanelli": [1048, 1049], "fang": [659, 1040, 1041], "fanni": 1043, "fantasi": 1007, "fantast": 1026, "faouzi": [1043, 1044], "faq": [0, 384, 412, 693, 999, 1012], "far": [62, 93, 113, 143, 171, 177, 186, 212, 230, 264, 340, 344, 351, 353, 376, 385, 418, 721, 885, 976, 1007, 1008, 1017, 1026], "farach": 994, "farahsae": 1041, "farawai": 1005, "fare": [103, 188, 253, 323, 324, 1037, 1038], "fargo": 51, "farhan": 1049, "farlei": [0, 398, 1033], "farouk": [1041, 1042], "farther": 726, "farthest": 408, "fashion": [2, 46, 139, 144, 220, 279, 364, 390, 405, 406, 408, 413, 415, 554, 558, 559, 560, 561, 565, 566, 567, 603, 628, 831, 854, 869, 872, 878, 889, 913, 914, 915, 916, 972, 992, 998, 1002, 1012, 1018, 1042], "fast": [2, 52, 64, 95, 191, 198, 202, 227, 228, 244, 245, 311, 353, 363, 371, 376, 385, 402, 408, 410, 412, 413, 415, 416, 420, 446, 447, 469, 474, 509, 533, 534, 536, 539, 541, 545, 548, 565, 566, 567, 589, 590, 592, 633, 634, 641, 659, 660, 673, 675, 688, 700, 801, 815, 826, 827, 837, 838, 845, 846, 850, 861, 949, 970, 994, 998, 1001, 1004, 1005, 1007, 1008, 1018, 1021, 1026, 1033, 1034, 1039, 1040, 1043, 1044], "fast_dict": 1043, "fast_dot": 1040, "fast_logdet": [2, 385], "fast_svd": 1033, "faster": [37, 46, 57, 74, 97, 105, 120, 139, 140, 143, 144, 146, 149, 168, 187, 191, 199, 212, 214, 227, 228, 230, 245, 249, 264, 290, 292, 307, 320, 322, 323, 327, 351, 352, 353, 363, 370, 376, 384, 385, 390, 402, 408, 413, 417, 418, 420, 443, 447, 449, 451, 452, 453, 462, 509, 532, 533, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 560, 561, 562, 563, 564, 644, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 673, 675, 685, 688, 692, 696, 727, 757, 779, 780, 781, 845, 846, 847, 850, 855, 862, 863, 880, 882, 884, 894, 898, 949, 970, 991, 995, 998, 1003, 1005, 1006, 1009, 1014, 1016, 1017, 1018, 1021, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "fastest": [90, 268, 353, 447, 671, 673, 675, 688, 948, 949, 1001], "fastest_top_recall_high_precision_index": 268, "fastica": [2, 119, 183, 211, 413, 533, 536, 542, 1023, 1033, 1035, 1041, 1047, 1048, 1051], "fastkmean": 449, "fastmcd": [410, 469, 474], "fastnc": 861, "fat": [522, 525], "fatima": [1047, 1050], "fato": 1046, "fauchereau": 1046, "fault": [384, 1041, 1043, 1045], "faulti": [215, 1033], "faust": 1051, "favor": [44, 113, 140, 255, 261, 388, 410, 415, 674, 676, 731, 809, 811, 864, 991, 1010, 1035, 1037, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "favorit": [376, 388, 1026], "favour": [793, 999, 1001, 1042], "fawcett": [789, 790, 1002], "fazlul": 1035, "fbeta_scor": [2, 730, 743, 784, 1002, 1035, 1036, 1037, 1038, 1043, 1049], "fc": [48, 295, 371], "fc2009": 1002, "fcd116": 118, "fcharra": 1048, "fcluster": 189, "fcostin": 1033, "fd": 47, "fdr": 593, "feasibl": [376, 874, 875, 885], "feast": 409, "feat": [47, 49, 380, 416], "feat0": [241, 320], "feat1": [241, 320, 416], "feat2": [241, 320, 416], "feat3": [241, 320, 416], "feat_idx": 628, "featur": [2, 8, 16, 17, 18, 23, 25, 32, 42, 44, 45, 46, 47, 49, 50, 54, 57, 58, 62, 63, 64, 66, 67, 68, 69, 71, 77, 83, 91, 93, 96, 101, 102, 103, 104, 105, 111, 112, 116, 118, 120, 122, 124, 127, 128, 130, 133, 135, 138, 140, 142, 146, 148, 153, 154, 155, 157, 159, 160, 163, 165, 170, 171, 172, 175, 176, 178, 181, 182, 184, 185, 186, 187, 192, 194, 196, 197, 198, 199, 202, 203, 209, 211, 212, 213, 214, 216, 217, 220, 221, 227, 228, 229, 233, 238, 241, 243, 248, 249, 252, 253, 262, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 279, 280, 283, 284, 285, 289, 293, 294, 295, 298, 299, 301, 304, 305, 307, 309, 310, 313, 317, 318, 320, 323, 324, 325, 326, 327, 329, 330, 332, 333, 335, 336, 337, 340, 344, 347, 350, 353, 356, 357, 358, 359, 368, 369, 370, 371, 372, 373, 374, 378, 379, 381, 383, 384, 385, 388, 389, 390, 391, 393, 394, 396, 402, 406, 408, 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 424, 429, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 580, 581, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 619, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 687, 688, 689, 690, 691, 692, 693, 698, 702, 703, 704, 714, 722, 723, 724, 725, 742, 743, 746, 747, 749, 759, 760, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 782, 786, 789, 791, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 931, 932, 946, 966, 976, 977, 978, 982, 990, 991, 994, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "feature_0": 918, "feature_1": [632, 918], "feature_2": 632, "feature_all_": 842, "feature_count_": [840, 842, 844], "feature_extract": [2, 47, 54, 57, 80, 81, 83, 84, 87, 99, 102, 123, 183, 271, 333, 350, 351, 352, 353, 365, 371, 408, 409, 416, 464, 545, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 878, 1000, 1033, 1034, 1035, 1036, 1039, 1040], "feature_import": 147, "feature_importances_": [141, 147, 168, 188, 189, 390, 415, 417, 554, 555, 558, 559, 560, 561, 565, 566, 567, 594, 595, 598, 913, 914, 915, 916, 1035, 1038, 1042], "feature_index": 416, "feature_indices_": 1041, "feature_log_prob_": [840, 841, 842, 844], "feature_map": [244, 310], "feature_map__n_compon": 244, "feature_map_fouri": 244, "feature_map_nystroem": [244, 640], "feature_nam": [54, 57, 126, 130, 141, 147, 151, 168, 186, 188, 221, 250, 284, 293, 310, 319, 320, 321, 326, 337, 351, 356, 369, 371, 381, 409, 464, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 583, 632, 633, 634, 886, 917, 918, 919, 1010, 1018, 1049], "feature_name_combin": [878, 1049], "feature_names_": 582, "feature_names_in": 1047, "feature_names_in_": [253, 317, 322, 390, 429, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 628, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 990, 1046, 1047, 1048, 1049, 1051], "feature_names_out": [424, 429, 442, 443, 445, 447, 449, 464, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 1047, 1050], "feature_rang": [308, 875, 891, 1012, 1035, 1045], "feature_select": [2, 87, 103, 104, 106, 162, 163, 164, 165, 166, 167, 168, 183, 253, 321, 323, 343, 359, 390, 399, 409, 417, 582, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 991, 1023, 1033, 1034, 1036, 1037, 1038, 1039, 1040], "feature_selector": 168, "feature_to_plot": 207, "feature_union": 1049, "featureagglomer": [2, 84, 87, 440, 441, 1019, 1036, 1042, 1043, 1046, 1047, 1049, 1050, 1051], "featureforg": 1026, "featurehash": [2, 47, 57, 102, 183, 350, 351, 352, 365, 371, 416, 488, 582, 589, 590, 591, 592, 878, 1023, 1034, 1039, 1040, 1041, 1047, 1048], "featureheash": 353, "features_": [630, 992], "features__pca__n_compon": 106, "features__univ_select__k": 106, "features_idx": 310, "features_info": 187, "features_nam": [185, 1040], "features_samples_ratio": 69, "featureselector": 602, "featuresshould": 396, "featuretool": 1021, "featureunion": [2, 7, 43, 106, 368, 390, 399, 464, 630, 867, 992, 1022, 1026, 1028, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051], "featurewis": [2, 881], "feb": [73, 440, 454], "februari": [0, 410, 473, 1002, 1034, 1038, 1050], "fed": [47, 154, 359, 371, 416, 991, 1007, 1012, 1044], "feda": [1041, 1042], "feder": 1021, "federico": [1035, 1036, 1041, 1042, 1047], "federicopisanu": 1043, "feed": [47, 116, 213, 246, 353, 371, 374, 381, 388, 408, 416, 743, 878, 1003], "feedback": [267, 375, 376, 377, 391, 1021, 1025, 1041], "feedforward": [862, 863], "feedstock": 380, "feel": [64, 182, 310, 375, 376, 384, 408, 446, 1018], "feel_temp": [43, 187], "feghali": 1050, "fei": [564, 1008], "feld": [1037, 1049], "feldbauer": [1041, 1042, 1043, 1044, 1047], "feldman": [1035, 1040, 1041, 1042, 1043], "felip": [1046, 1047, 1048, 1049], "felix": [1035, 1040, 1041, 1043, 1045, 1046, 1047], "femal": [103, 186, 324, 381, 878, 879, 1012], "fenc": 381, "feng": [1043, 1045, 1046, 1047], "fenil": 1046, "fenx": 1041, "ferdman": 1050, "ferenc": 1026, "fernand": [1041, 1047, 1048], "fernandez": 1042, "fernando": [1038, 1045], "fern\u00e1ndez": 1047, "ferrando": 1043, "ferrari": 1041, "ferreira": [1041, 1046, 1047], "ferri": [417, 1002], "ferria": 1040, "ferrin": 1047, "ferriss": 1040, "ferr\u00e9": 1047, "ferr\u00edn": 1044, "fetal": 249, "fetch": [2, 51, 55, 154, 186, 230, 264, 284, 369, 370, 371, 376, 380, 381, 384, 413, 492, 497, 556, 557, 558, 559, 564, 565, 566, 567, 589, 590, 592, 1041, 1049], "fetch_": 1040, "fetch_20newsgroup": [2, 54, 57, 102, 271, 333, 351, 352, 353, 371, 489, 1038, 1043, 1051], "fetch_20newsgroups_vector": [2, 46, 227, 243, 371, 1033, 1043, 1045, 1050, 1051], "fetch_california_h": [2, 140, 144, 181, 182, 310, 321, 371, 389, 409, 1042, 1044, 1051], "fetch_covtyp": [2, 191, 249, 321, 371, 1042, 1045, 1047, 1051], "fetch_fil": [2, 52], "fetch_kddcup99": [2, 249, 371, 1040, 1041, 1042, 1045, 1046, 1051], "fetch_lfw_pair": [2, 371, 1038, 1048, 1051], "fetch_lfw_peopl": [2, 45, 371, 1048, 1051], "fetch_mldata": 1041, "fetch_olivetti_fac": [2, 83, 120, 248, 371, 1041, 1042, 1043, 1051], "fetch_openml": [2, 43, 44, 52, 103, 107, 143, 149, 154, 175, 186, 187, 188, 212, 220, 228, 230, 240, 249, 253, 264, 284, 287, 289, 290, 307, 316, 319, 323, 326, 370, 380, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "fetch_rcv1": [2, 371, 1038, 1042, 1051], "fetch_species_distribut": [2, 50, 303, 1042, 1051], "fetcher": [369, 1038, 1040, 1049], "feth": 1033, "feurer": [1036, 1041], "fevott": [413, 539, 541, 548], "few": [0, 46, 54, 57, 74, 80, 85, 124, 143, 149, 173, 176, 177, 202, 210, 212, 214, 230, 245, 246, 255, 272, 273, 277, 302, 307, 310, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 347, 353, 363, 371, 372, 373, 376, 378, 389, 391, 399, 402, 405, 406, 408, 412, 413, 415, 417, 418, 437, 449, 562, 563, 656, 693, 696, 898, 949, 998, 999, 1001, 1002, 1005, 1006, 1015, 1017, 1018, 1026, 1039, 1049, 1051], "fewer": [43, 53, 63, 88, 134, 142, 144, 212, 363, 377, 408, 417, 418, 448, 461, 542, 595, 697, 835, 953, 998, 1003, 1005, 1038, 1039, 1040], "fewest": [269, 628], "ff": 384, "ff0000": [67, 298, 305], "ff3333": 118, "ff7216": 118, "ff7f00": [79, 95, 239], "ff9c34": [92, 97], "ffaaaa": 298, "ffc107": 314, "fft": 641, "fhaselbeck": 1045, "fhoang7": 1042, "fhr": 249, "fi": 876, "fibins": [1041, 1042], "fidel": 53, "fidor": 1049, "fiedler": 1039, "fiegel": [1045, 1046, 1048], "field": [168, 230, 373, 405, 408, 409, 416, 464, 499, 502, 618, 998, 1000, 1009, 1017, 1025, 1034], "fifth": [245, 995], "fig": [43, 44, 46, 47, 48, 49, 52, 54, 62, 64, 66, 70, 77, 78, 86, 88, 90, 93, 97, 99, 105, 109, 111, 116, 120, 125, 126, 130, 134, 140, 141, 143, 144, 146, 147, 149, 151, 152, 154, 156, 173, 179, 181, 187, 189, 191, 194, 200, 204, 207, 208, 209, 210, 212, 213, 216, 220, 225, 227, 230, 232, 233, 234, 235, 236, 237, 240, 242, 249, 250, 260, 264, 265, 266, 267, 270, 271, 272, 273, 276, 279, 280, 281, 283, 284, 289, 290, 292, 294, 295, 303, 306, 307, 310, 311, 312, 314, 315, 316, 319, 323, 324, 337, 344, 346, 347, 348, 349, 351, 352, 353, 355, 372, 383], "fig1": 100, "fig2": 100, "figaspect": 314, "fight": [74, 216, 1026], "fighter": 102, "fignum": 345, "figsiz": [43, 44, 45, 49, 51, 52, 53, 54, 62, 63, 64, 66, 67, 68, 70, 74, 75, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 105, 107, 111, 113, 115, 116, 118, 120, 123, 124, 125, 126, 129, 130, 134, 136, 137, 143, 144, 145, 146, 147, 149, 152, 154, 155, 163, 172, 174, 178, 179, 181, 182, 186, 187, 189, 191, 193, 194, 197, 198, 203, 207, 209, 210, 211, 212, 213, 214, 216, 218, 220, 223, 226, 228, 230, 232, 233, 234, 236, 237, 239, 240, 242, 244, 247, 248, 249, 250, 255, 257, 258, 261, 264, 265, 266, 267, 272, 273, 274, 277, 279, 280, 283, 284, 285, 289, 290, 292, 293, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 323, 324, 329, 331, 338, 340, 344, 345, 346, 347, 348, 349, 351, 352, 353, 372, 919], "figur": [45, 46, 47, 49, 51, 53, 61, 62, 63, 64, 67, 72, 73, 74, 75, 77, 79, 80, 81, 83, 84, 85, 87, 89, 91, 92, 94, 95, 96, 97, 98, 100, 109, 113, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 136, 137, 145, 146, 147, 148, 149, 152, 153, 157, 159, 161, 163, 164, 167, 171, 172, 173, 174, 177, 178, 182, 186, 187, 188, 189, 193, 198, 201, 203, 206, 207, 211, 213, 214, 218, 223, 227, 228, 229, 234, 235, 236, 239, 243, 244, 245, 247, 248, 250, 255, 257, 258, 261, 263, 269, 274, 275, 285, 295, 299, 300, 303, 305, 308, 310, 312, 313, 317, 319, 321, 329, 330, 331, 338, 340, 345, 356, 357, 376, 408, 414, 415, 416, 418, 438, 632, 633, 698, 699, 701, 702, 703, 807, 824, 919, 991, 995, 998, 1001, 1002, 1005, 1006, 1009, 1010, 1016, 1017, 1018, 1046], "figure_": [68, 187, 250, 319, 321, 383, 438, 632, 633, 698, 699, 701, 702, 703, 807, 824], "figure_titl": 143, "filali": 1041, "file": [2, 47, 51, 52, 68, 351, 352, 363, 364, 365, 370, 371, 373, 374, 379, 380, 381, 382, 388, 402, 409, 413, 487, 492, 494, 495, 497, 504, 509, 510, 535, 580, 581, 589, 590, 592, 917, 1005, 1018, 1023, 1025, 1033, 1034, 1036, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1048, 1049], "file_1": 504, "file_2": 504, "file_42": 504, "file_43": 504, "file_44": 504, "file_id": 370, "file_path": 492, "filenam": [2, 47, 55, 126, 333, 371, 376, 382, 402, 488, 492, 501, 504, 505, 508, 589, 590, 592, 1033, 1038, 1041, 1042], "filesystem": [384, 394, 1046], "filho": 406, "filip": [1050, 1051], "filipj8": [1040, 1041], "fill": [70, 142, 159, 188, 265, 295, 356, 390, 409, 413, 516, 528, 539, 541, 548, 588, 631, 917, 919, 992, 1005, 1018], "fill_between": [52, 146, 149, 159, 170, 175, 177, 179, 193, 194, 230, 270, 272, 273, 274, 280, 807, 824], "fill_between_": [807, 824], "fill_between_kw": [807, 824], "fill_betweenx": 93, "fill_diagon": [189, 235], "fill_legend": 230, "fill_valu": [182, 241, 251, 320, 422, 425, 431, 432, 628, 631, 1012, 1041, 1049, 1050], "fillna": [230, 249], "filo": [1033, 1036], "filter": [2, 18, 47, 54, 80, 81, 105, 218, 230, 268, 270, 292, 351, 364, 371, 382, 385, 408, 416, 448, 488, 489, 504, 589, 592, 596, 597, 598, 599, 600, 601, 775, 840, 941, 966, 1004, 1005, 1043], "filter_param": 775, "filtered_cv_result": 268, "filterwarn": [79, 95, 227, 306, 307, 376, 1012], "final": [2, 43, 52, 63, 64, 70, 75, 77, 88, 102, 103, 111, 113, 116, 125, 134, 135, 137, 139, 143, 144, 147, 154, 157, 165, 175, 182, 185, 187, 189, 191, 193, 198, 200, 202, 209, 212, 214, 229, 230, 233, 239, 253, 259, 264, 268, 276, 287, 290, 316, 317, 319, 320, 340, 344, 363, 365, 371, 374, 376, 377, 378, 380, 389, 390, 405, 406, 408, 409, 412, 415, 416, 417, 437, 442, 447, 448, 452, 459, 462, 464, 537, 556, 557, 568, 569, 571, 595, 628, 648, 654, 660, 680, 691, 695, 720, 801, 833, 834, 865, 866, 902, 905, 991, 992, 994, 998, 999, 1002, 1005, 1008, 1009, 1012, 1015, 1026, 1038, 1041, 1042, 1043, 1044, 1046], "final_estim": [154, 319, 415, 568, 569], "final_estimator_": [568, 569], "final_estimatorridgecv": 154, "final_lay": 415, "final_layer_gbr": 415, "final_layer_rfr": 415, "final_step": 77, "financ": [264, 1003], "financi": [0, 51, 408, 415, 998], "find": [2, 43, 44, 45, 51, 55, 64, 75, 80, 81, 82, 85, 86, 88, 90, 98, 105, 111, 112, 120, 122, 124, 125, 130, 144, 154, 170, 174, 176, 178, 187, 198, 200, 202, 214, 220, 232, 234, 236, 237, 242, 249, 260, 264, 269, 270, 271, 281, 283, 293, 298, 299, 300, 315, 319, 325, 327, 342, 343, 344, 347, 351, 352, 355, 364, 373, 374, 376, 377, 378, 381, 382, 385, 388, 389, 390, 391, 396, 405, 407, 408, 410, 411, 413, 415, 416, 417, 419, 441, 444, 445, 446, 450, 451, 452, 453, 462, 532, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 559, 566, 583, 590, 611, 612, 648, 651, 654, 655, 656, 657, 659, 660, 672, 677, 689, 708, 730, 731, 739, 783, 784, 785, 788, 789, 795, 800, 801, 815, 823, 847, 848, 849, 851, 853, 855, 856, 857, 878, 879, 884, 897, 898, 899, 913, 914, 916, 928, 948, 949, 951, 991, 992, 994, 997, 998, 999, 1001, 1002, 1003, 1006, 1008, 1012, 1016, 1017, 1018, 1020, 1022, 1025, 1026, 1033, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1051], "findal": 353, "fine": [43, 72, 142, 168, 216, 228, 261, 268, 344, 357, 373, 380, 390, 416, 446, 949, 1005, 1008, 1017, 1022, 1043], "finer": [43, 52, 72, 292, 340, 364, 408, 412, 991, 1005, 1043], "finfo": [235, 471, 472, 478, 607, 651, 652, 655, 656, 657, 683, 684, 1048], "finish": [168, 258, 999], "finit": [64, 255, 261, 363, 371, 390, 468, 539, 552, 583, 607, 610, 611, 612, 659, 729, 779, 786, 798, 826, 903, 929, 930, 931, 932, 998, 1001, 1002, 1026, 1040, 1041, 1045, 1047, 1048], "finn": [1041, 1042], "firefox": 1012, "fireplac": 143, "fireplacequ": 143, "firm": [51, 408], "first": [0, 2, 43, 44, 46, 47, 50, 52, 55, 58, 62, 63, 66, 67, 68, 70, 74, 88, 89, 91, 94, 97, 98, 99, 100, 102, 103, 104, 107, 111, 115, 116, 125, 126, 128, 134, 135, 139, 141, 142, 143, 144, 145, 147, 149, 151, 154, 155, 156, 157, 164, 165, 168, 170, 171, 172, 175, 176, 177, 178, 182, 185, 186, 187, 189, 191, 193, 195, 197, 202, 210, 213, 214, 220, 221, 226, 233, 236, 243, 244, 246, 247, 248, 250, 252, 253, 257, 261, 264, 265, 270, 272, 273, 277, 279, 281, 282, 283, 287, 289, 290, 292, 295, 299, 300, 301, 305, 307, 310, 312, 315, 316, 317, 320, 321, 330, 333, 336, 337, 340, 342, 351, 352, 353, 355, 356, 358, 359, 364, 365, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 384, 388, 390, 402, 405, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 420, 443, 446, 447, 450, 459, 460, 464, 472, 483, 487, 488, 490, 491, 493, 495, 498, 501, 503, 505, 509, 510, 511, 529, 534, 535, 539, 542, 554, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 583, 585, 589, 590, 591, 592, 594, 595, 602, 611, 612, 618, 622, 625, 632, 633, 634, 635, 647, 653, 660, 667, 669, 675, 677, 689, 696, 699, 700, 701, 703, 713, 717, 737, 743, 764, 765, 783, 795, 798, 799, 804, 805, 806, 807, 808, 813, 815, 822, 824, 833, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 850, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 870, 878, 882, 883, 884, 886, 887, 894, 895, 907, 910, 913, 914, 915, 916, 918, 920, 926, 927, 931, 932, 933, 951, 953, 968, 972, 975, 987, 990, 991, 992, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1009, 1012, 1013, 1016, 1017, 1018, 1026, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "first_img_data": 508, "first_pca_compon": 315, "first_quart": 129, "first_week": 149, "firstli": [123, 363, 388, 658], "fisach": 1039, "fiscal": 0, "fischer": [1038, 1039], "fischler": 998, "fischoff": 1045, "fish": 322, "fisher": [373, 415, 505, 637], "fisher1958": 415, "fisher_transform": 637, "fit": [2, 22, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 91, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 120, 122, 123, 124, 125, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 183, 185, 186, 187, 188, 189, 191, 192, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 235, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 287, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 303, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 351, 352, 355, 356, 358, 363, 365, 368, 371, 373, 376, 379, 381, 382, 385, 388, 390, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 510, 511, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 578, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 695, 698, 699, 701, 702, 703, 711, 712, 724, 733, 736, 751, 789, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 924, 925, 941, 958, 961, 985, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "fit_": 1046, "fit_algorithm": [120, 532, 538, 1048, 1049], "fit_and_evalu": 352, "fit_and_plot_model": 315, "fit_and_scor": 220, "fit_data": 59, "fit_dur": 290, "fit_ecoc": 1037, "fit_grid_point": 1044, "fit_intercept": [46, 193, 194, 199, 209, 217, 226, 239, 278, 317, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 905, 906, 912, 998, 1016, 1037, 1041, 1042, 1043, 1045, 1046, 1047], "fit_inverse_transform": [44, 125, 536, 1042], "fit_ovo": 1037, "fit_ovr": 1037, "fit_param": [246, 390, 432, 437, 442, 445, 465, 533, 535, 537, 538, 540, 543, 544, 550, 556, 557, 568, 569, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 631, 636, 639, 640, 641, 642, 643, 666, 672, 807, 824, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 849, 854, 857, 861, 864, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 897, 898, 961, 1040, 1043, 1044, 1045, 1047, 1049, 1050, 1051], "fit_path": [651, 655, 656, 657, 683, 684], "fit_predict": [57, 89, 90, 93, 239, 249, 297, 378, 390, 408, 426, 430, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 469, 564, 678, 793, 794, 798, 799, 851, 857, 865, 909, 925, 1008, 1038, 1041, 1042, 1046, 1048, 1050], "fit_prior": [371, 840, 841, 842, 844], "fit_status_": [907, 908, 909, 910, 911], "fit_tim": [52, 91, 143, 202, 220, 272, 412, 828, 829], "fit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstr": 52, "fit_times_nb": 272, "fit_times_svm": 272, "fit_transform": [43, 44, 45, 49, 51, 54, 57, 79, 82, 85, 86, 91, 95, 121, 124, 126, 130, 152, 191, 204, 228, 230, 232, 233, 234, 235, 236, 237, 242, 243, 246, 247, 253, 290, 294, 306, 310, 311, 315, 316, 317, 319, 322, 324, 325, 326, 327, 340, 351, 352, 353, 359, 368, 371, 378, 381, 382, 390, 404, 409, 413, 416, 417, 424, 432, 442, 443, 445, 447, 449, 464, 466, 468, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 691, 692, 693, 697, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 925, 938, 992, 994, 998, 1003, 1005, 1012, 1013, 1014, 1037, 1038, 1039, 1041, 1042, 1043, 1045, 1047, 1049, 1050, 1051], "fitfailedwarn": [2, 801, 804, 805, 807, 815, 824, 827, 828, 829, 832], "fitted_transform": [378, 464], "fittedcolumntransform": [154, 187], "fittedgridsearchcv": 251, "fittedpipelin": [154, 241, 251, 271, 284, 316, 320], "fittedrandomforestclassifi": 326, "fittedrandomizedsearchcv": 103, "fittedstackingregressor": 154, "fitter": 1018, "fitting_weight": 399, "fitzgerald": 1041, "fitzk": 1026, "five": [149, 256, 264, 330, 333, 371, 532, 540, 546, 999, 1005, 1017, 1026, 1033], "five_imag": 416, "fix": [2, 43, 47, 58, 62, 70, 80, 103, 129, 139, 140, 142, 147, 149, 170, 171, 175, 178, 186, 189, 198, 214, 230, 249, 261, 273, 283, 305, 319, 320, 321, 322, 323, 324, 325, 326, 327, 352, 363, 364, 370, 372, 374, 375, 376, 380, 384, 388, 390, 391, 399, 408, 409, 412, 413, 415, 416, 418, 452, 462, 472, 505, 513, 532, 538, 541, 543, 549, 550, 560, 561, 565, 566, 589, 592, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 631, 654, 664, 669, 671, 685, 688, 692, 696, 708, 786, 798, 815, 822, 847, 848, 850, 853, 855, 856, 872, 875, 889, 913, 914, 924, 949, 968, 991, 998, 1001, 1002, 1005, 1012, 1022, 1031, 1032, 1034, 1035, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051, 1052], "fixed_classes_uniform_labelings_scor": 72, "fixed_vocabulary_": [589, 592], "fixedthresholdclassifi": [2, 264, 407, 823, 1051], "fixm": [380, 390], "fixtur": [364, 376], "fkaren27": 1047, "flach": [406, 1002], "flach2008": 1002, "flach2015": 1002, "flag": [175, 246, 249, 326, 374, 376, 377, 379, 399, 404, 464, 611, 612, 628, 674, 676, 729, 786, 921, 922, 1017, 1039, 1043, 1044, 1046, 1047, 1048, 1049], "flair": 1004, "flak": 1048, "flake8": 580, "flanagan": [1042, 1043], "flander": 1051, "flat": [2, 78, 120, 187, 232, 233, 234, 268, 408, 415, 416, 440, 446, 448, 461, 510, 1009, 1033, 1034, 1049], "flat_grid": 244, "flatnonzero": [129, 200, 269, 278, 279, 782], "flatten": [54, 68, 235, 244, 268, 314, 337, 348, 382, 503, 570, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 854], "flatten_transform": [570, 1040], "flatter": [43, 62], "flavanoid": [48, 373], "flaviomorelli": 1043, "flavor": [376, 1005], "flavour": 415, "flaw": [390, 415], "flaxman": [1035, 1037], "fledg": [365, 416], "fleet": 43, "fleme": 1048, "flennerhag": 1041, "fletcher": [998, 1033, 1037], "flexibl": [43, 62, 143, 181, 212, 283, 311, 337, 353, 383, 388, 402, 412, 418, 675, 905, 906, 924, 991, 996, 998, 1002, 1006, 1012, 1021, 1022, 1026, 1042, 1046], "flier": 49, "flink": 102, "flip": [124, 583, 743, 949, 1004, 1037, 1046], "flip_i": 516, "flip_sign": 949, "float": [2, 46, 49, 51, 76, 80, 81, 86, 93, 94, 98, 99, 100, 103, 123, 161, 178, 186, 199, 203, 235, 264, 269, 270, 274, 278, 347, 353, 363, 370, 371, 376, 385, 390, 404, 407, 408, 409, 416, 417, 419, 420, 421, 425, 427, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 459, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 584, 585, 589, 592, 593, 594, 595, 596, 597, 598, 599, 603, 604, 611, 612, 614, 615, 616, 617, 618, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 760, 767, 770, 776, 777, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 807, 815, 818, 821, 823, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 868, 871, 872, 878, 879, 881, 883, 885, 886, 887, 888, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 928, 929, 931, 932, 935, 946, 947, 964, 976, 982, 987, 992, 1002, 1003, 1005, 1006, 1012, 1017, 1018, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "float16": 1042, "float32": [55, 145, 235, 308, 324, 364, 371, 376, 377, 378, 390, 402, 404, 558, 559, 560, 561, 564, 565, 566, 567, 594, 595, 641, 642, 659, 700, 764, 870, 913, 914, 915, 916, 929, 977, 978, 979, 1018, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "float64": [45, 50, 52, 53, 86, 103, 105, 145, 146, 147, 148, 159, 170, 186, 187, 245, 264, 278, 281, 323, 324, 325, 340, 364, 370, 376, 377, 378, 390, 416, 421, 458, 471, 472, 475, 478, 479, 480, 497, 498, 509, 510, 517, 518, 519, 521, 532, 538, 540, 543, 544, 546, 547, 549, 582, 583, 590, 592, 598, 642, 649, 651, 652, 655, 656, 657, 658, 659, 664, 670, 671, 674, 676, 681, 683, 684, 688, 695, 700, 707, 708, 709, 710, 711, 713, 717, 718, 720, 721, 722, 724, 726, 727, 730, 731, 732, 736, 737, 738, 739, 740, 741, 744, 749, 754, 756, 757, 784, 785, 787, 788, 789, 794, 795, 796, 815, 870, 878, 879, 886, 898, 907, 908, 910, 911, 914, 916, 926, 929, 931, 947, 972, 975, 977, 978, 979, 1017, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "float_info": 57, "floch": 1050, "floor": 53, "floor_x": 53, "flore": 1046, "florian": [1026, 1033, 1037, 1039, 1043, 1050], "florin": 1051, "flow": 378, "flowchart": [396, 412], "flower": [126, 128, 279, 507, 508, 1002, 1021], "floyd": [371, 689, 999], "floydsoft": 1037, "fluctuat": [51, 93, 149, 212, 277, 1041], "flush": 220, "fly": [145, 381, 384, 509, 510, 583, 1033, 1035, 1042], "flyingdutchman23": 1046, "flyingimmidev": 1033, "flynn": [1046, 1048], "fmax": 230, "fmi": [408, 732], "fmin_l_bfgs_b": [611, 612], "fmt": [94, 223], "fn": [327, 408, 713, 719, 730, 731, 732, 783, 784, 785, 788, 1002, 1003], "fn_c": 279, "fna": [168, 373], "fnlwgt": [326, 497], "fnr": [267, 699, 728], "fo": 416, "focu": [43, 48, 120, 134, 170, 261, 300, 363, 381, 406, 415, 554, 555, 560, 562, 563, 679, 999, 1005, 1012, 1021, 1022, 1025], "focus": [62, 109, 202, 287, 371, 376, 388, 999, 1012, 1021], "fokow": 1050, "fold": [2, 43, 100, 106, 109, 140, 142, 145, 159, 167, 186, 202, 257, 264, 265, 266, 268, 270, 271, 273, 280, 284, 317, 332, 347, 359, 371, 376, 379, 380, 389, 390, 399, 407, 408, 417, 437, 472, 494, 537, 568, 569, 595, 603, 648, 652, 654, 656, 660, 662, 664, 666, 674, 676, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 886, 907, 910, 991, 998, 1002, 1012, 1017, 1033, 1035, 1037, 1038, 1039, 1041, 1042, 1044, 1045, 1050], "folder": [2, 104, 371, 374, 376, 380, 384, 394, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 1005], "folkman": 1040, "folloni": 1044, "follow": [0, 25, 43, 46, 57, 63, 64, 68, 72, 87, 88, 90, 96, 100, 103, 104, 118, 120, 129, 134, 137, 146, 147, 151, 163, 175, 176, 181, 185, 186, 187, 188, 189, 193, 195, 198, 200, 202, 210, 212, 213, 227, 230, 240, 246, 247, 249, 261, 264, 270, 279, 280, 284, 287, 310, 316, 317, 319, 320, 322, 323, 324, 327, 337, 347, 351, 352, 353, 355, 358, 359, 363, 364, 370, 371, 373, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 423, 425, 427, 429, 430, 431, 432, 437, 441, 443, 445, 446, 447, 448, 449, 453, 461, 462, 463, 464, 465, 468, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 516, 535, 539, 541, 542, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 632, 634, 635, 647, 653, 659, 660, 671, 672, 681, 693, 695, 700, 706, 710, 714, 719, 789, 820, 842, 847, 848, 849, 851, 853, 855, 856, 857, 864, 868, 869, 870, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 903, 905, 906, 910, 913, 914, 915, 916, 920, 927, 943, 944, 948, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1030, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "folwarczn\u00fd": 1050, "fonari": [1045, 1046], "fond": 1026, "fondat": 1026, "font": [146, 202, 226, 244, 917, 919], "font_manag": [112, 296, 339], "font_prop": 112, "font_siz": 314, "fontdict": [54, 74], "fontnam": [917, 1046], "fontproperti": [112, 296, 339], "fontsiz": [44, 47, 49, 54, 70, 83, 93, 123, 142, 163, 173, 174, 176, 179, 187, 194, 203, 211, 223, 233, 234, 258, 265, 274, 275, 276, 281, 282, 308, 314, 346, 919], "fontweight": [93, 208], "foo": [378, 582, 1006], "food": [0, 373], "foot": 1020, "footer": [54, 102, 271, 351, 352, 371, 488, 489], "footnot": [1009, 1021], "footprint": [321, 324, 363, 365, 408, 413, 542, 556, 557, 558, 559, 564, 565, 566, 567, 1035, 1038, 1039, 1044, 1045, 1048], "fopenmp": [374, 377], "foral": [408, 418, 614], "forbid": [408, 415], "forbidden": [187, 415], "forc": [134, 170, 216, 283, 290, 314, 351, 370, 374, 403, 412, 415, 450, 457, 464, 467, 497, 607, 610, 647, 648, 653, 654, 658, 661, 662, 663, 664, 673, 674, 675, 682, 685, 688, 755, 779, 782, 823, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 907, 908, 909, 910, 911, 929, 931, 932, 1012, 1028, 1038, 1041, 1042, 1043, 1045, 1046, 1047, 1049], "force_all_finit": [779, 929, 931, 932, 1044, 1047], "force_alpha": [840, 841, 842, 844, 1048], "force_finit": [607, 610, 729, 786, 1002, 1047], "force_int_remainder_col": [464, 467], "force_writ": [931, 932, 1051], "ford": 51, "forecast": [42, 43, 146, 149, 169, 177, 183, 214, 270, 406, 407, 418, 492, 497, 563, 612, 616, 623, 624, 626, 702, 743, 746, 747, 749, 791, 822, 827, 828, 831, 1002, 1021, 1023], "foreground": [75, 99], "foreign_work": 264, "foreman": 1040, "forese": 388, "forest": [2, 14, 50, 64, 67, 133, 139, 142, 144, 145, 147, 148, 149, 150, 152, 154, 157, 181, 183, 184, 191, 239, 267, 269, 271, 303, 321, 351, 357, 359, 369, 389, 390, 406, 417, 463, 464, 490, 491, 497, 499, 516, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 631, 635, 801, 806, 831, 838, 865, 879, 909, 913, 914, 915, 991, 992, 1003, 1010, 1018, 1022, 1023, 1024, 1028, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1050], "forest_import": 141, "forestclassifi": 1038, "forestcolumntransform": 154, "forestcov": 249, "forg": [319, 320, 321, 322, 323, 324, 325, 326, 327, 364, 377, 379, 380, 384, 394, 395], "forget": [187, 359, 364, 370, 380, 388, 413, 999], "forget_factor": [413, 539], "forgiv": 735, "forina": 373, "fork": [374, 376, 384, 388], "forkserv": 388, "form": [2, 43, 48, 57, 68, 77, 93, 100, 120, 157, 177, 178, 183, 186, 245, 246, 261, 270, 329, 359, 370, 373, 376, 378, 380, 390, 391, 405, 408, 411, 412, 413, 414, 415, 416, 418, 420, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 459, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 686, 688, 689, 690, 691, 692, 693, 694, 700, 798, 799, 800, 801, 804, 805, 806, 809, 811, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 937, 958, 961, 991, 993, 995, 996, 998, 999, 1002, 1003, 1006, 1007, 1008, 1012, 1017, 1021, 1039, 1043, 1045], "formal": [390, 391, 408, 415, 845, 846, 999, 1002, 1003, 1006], "format": [2, 47, 50, 51, 52, 59, 87, 91, 94, 102, 111, 120, 129, 137, 142, 145, 147, 159, 163, 164, 191, 194, 199, 212, 230, 253, 265, 275, 277, 278, 281, 285, 294, 295, 298, 299, 314, 319, 327, 346, 355, 358, 363, 369, 375, 376, 378, 379, 384, 385, 389, 390, 402, 409, 412, 415, 416, 432, 442, 443, 445, 447, 449, 450, 452, 459, 464, 468, 482, 483, 484, 485, 487, 489, 497, 498, 499, 509, 510, 511, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 552, 558, 559, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 588, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 647, 653, 659, 660, 661, 663, 667, 668, 669, 677, 678, 679, 689, 690, 693, 698, 712, 714, 721, 740, 741, 752, 769, 792, 793, 834, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 892, 897, 898, 903, 905, 917, 931, 932, 955, 963, 967, 977, 978, 979, 980, 981, 982, 992, 1002, 1005, 1010, 1012, 1013, 1016, 1018, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1048, 1050, 1051], "format_func": 295, "formatter_result": 91, "former": [51, 353, 407, 415, 416, 566, 803, 810, 819, 1004, 1033, 1039, 1042], "formerli": [216, 1034, 1037, 1039, 1040], "formul": [134, 170, 179, 216, 279, 376, 408, 410, 413, 416, 418, 421, 475, 550, 551, 558, 565, 651, 652, 655, 656, 657, 659, 660, 666, 671, 764, 770, 799, 907, 910, 913, 915, 998, 1002, 1003, 1006, 1012, 1024, 1028, 1050], "formula": [109, 110, 405, 408, 410, 421, 473, 475, 517, 518, 519, 591, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 677, 679, 705, 730, 731, 756, 765, 822, 991, 996, 998, 1002, 1007, 1008, 1012, 1016, 1038, 1040, 1042], "forrest": [1044, 1045], "forsal": [57, 353, 371], "forsyth": 1041, "forth": 384, "fortin": [1033, 1035, 1036, 1037], "fortran": [420, 542, 647, 648, 653, 654, 661, 662, 663, 664, 666, 682, 685, 686, 687, 931, 932, 1033, 1036, 1037, 1041], "fortun": [382, 415, 1046, 1047], "forward": [46, 134, 168, 246, 321, 363, 376, 399, 402, 417, 509, 510, 540, 544, 554, 560, 561, 603, 669, 686, 687, 865, 869, 998, 1022, 1045], "foster": [0, 1041], "fouchet": 1039, "found": [0, 45, 52, 57, 58, 59, 130, 141, 167, 170, 174, 176, 178, 216, 240, 247, 264, 268, 271, 272, 273, 283, 315, 319, 322, 324, 325, 340, 353, 363, 365, 370, 373, 375, 376, 378, 388, 390, 391, 402, 405, 407, 408, 411, 412, 413, 415, 416, 418, 433, 441, 444, 445, 459, 472, 558, 559, 560, 561, 565, 566, 589, 591, 611, 612, 629, 637, 648, 652, 654, 656, 662, 664, 666, 672, 673, 675, 677, 679, 688, 689, 713, 720, 801, 804, 805, 815, 823, 842, 847, 848, 854, 876, 878, 879, 913, 914, 915, 916, 920, 928, 985, 989, 991, 994, 998, 999, 1001, 1003, 1004, 1005, 1006, 1012, 1016, 1017, 1018, 1022, 1033, 1036, 1037, 1040, 1041, 1043, 1047, 1050], "foundat": [0, 154, 264, 376, 406, 1005], "founder": 1026, "fouqu": 1033, "fouquet": [1049, 1050], "four": [64, 164, 178, 191, 196, 213, 257, 258, 264, 330, 337, 372, 376, 390, 558, 565, 720, 913, 915, 937, 998, 1000, 1001, 1002, 1012, 1020], "fourier": [2, 23, 244, 639, 640, 641, 642, 643, 759, 760, 994], "fourier_approx_svm": 244, "fourier_scor": 244, "fourier_tim": 244, "fournier": 1042, "fourth": 142, "fowkl": [408, 732], "fowlk": [732, 1039], "fowlkes_mallows_scor": [2, 408, 1002, 1039, 1041], "fox": [327, 416, 1049], "fp": [47, 264, 327, 408, 713, 719, 730, 731, 732, 783, 784, 785, 788, 1002], "fp_c": 279, "fpgawesom": 1047, "fpr": [2, 50, 240, 249, 264, 267, 279, 280, 383, 593, 597, 699, 703, 707, 728, 790, 1002, 1030, 1033, 1049], "fpr_a": 279, "fpr_b": 279, "fpr_grid": 279, "fpr_score": 264, "fr": [532, 538, 659, 665, 686, 687, 759, 760, 1000, 1002], "fraa\u00df": 1050, "frac": [63, 111, 112, 134, 270, 277, 279, 322, 405, 406, 408, 410, 413, 414, 415, 416, 418, 431, 463, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 612, 616, 620, 623, 624, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 679, 680, 681, 697, 730, 731, 756, 770, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 994, 996, 997, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1016, 1017, 1018], "frac12": [415, 994], "fractal": [168, 373], "fraction": [2, 43, 62, 64, 146, 149, 212, 220, 230, 264, 277, 347, 352, 406, 412, 415, 438, 439, 449, 450, 456, 457, 516, 528, 558, 559, 560, 561, 565, 566, 567, 591, 594, 603, 667, 668, 669, 672, 677, 678, 679, 704, 722, 723, 724, 725, 735, 795, 797, 803, 807, 829, 830, 844, 872, 907, 908, 909, 913, 914, 915, 916, 967, 998, 1002, 1005, 1009, 1010, 1012, 1017, 1018, 1022, 1034, 1035, 1036, 1047, 1050], "fragil": 656, "fragment": [88, 123], "frame": [43, 103, 126, 149, 175, 186, 187, 212, 264, 316, 326, 371, 376, 388, 391, 489, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 1045], "frameon": [46, 218], "framework": [270, 363, 378, 388, 390, 402, 408, 638, 689, 798, 998, 999, 1006, 1022, 1026, 1033, 1039], "fran": [1045, 1046, 1047], "franc": [316, 765], "francesco": [1045, 1048], "franci": [537, 659, 998, 1039], "francia": 1047, "francidona": 1043, "francisco": [416, 1014], "franck": [1048, 1050, 1051], "franco": 1043, "francoi": [1033, 1046], "francoisgoupil": 1047, "frank": [270, 836, 1003, 1038, 1042, 1043], "frankhui": 1041, "franki": 1046, "franz": 1041, "franziska": 1044, "fran\u00e7oi": [0, 360, 1036], "fraud": [264, 327, 998, 1026], "fraudul": [264, 998, 1026], "fraudulent_accept": 264, "fraudulent_refus": 264, "fred": [102, 1033, 1046], "freder": 1043, "frederick": 1046, "fredrik": 1041, "free": [0, 44, 64, 88, 175, 176, 182, 211, 260, 310, 370, 375, 376, 377, 384, 388, 394, 416, 452, 610, 672, 861, 911, 991, 994, 998, 1002, 1022, 1041], "freebsd": 379, "freedom": [43, 122, 175, 200, 202, 204, 270, 542, 657, 798, 998, 1036], "freeland": 1048, "freestand": 378, "freez": [380, 394, 402, 1022, 1026, 1041], "frei": [73, 440, 454, 1043], "freija": 1041, "freita": [1038, 1040, 1041], "frellwan": 1046, "fremtpl2": 230, "fremtpl2freq": 230, "fremtpl2sev": 230, "french": [230, 316], "freq": [186, 198, 353], "frequenc": [57, 64, 170, 187, 198, 207, 212, 243, 320, 321, 351, 352, 353, 371, 388, 406, 412, 413, 415, 416, 417, 552, 558, 560, 561, 562, 565, 589, 590, 591, 592, 605, 659, 660, 665, 667, 669, 675, 676, 677, 686, 687, 834, 869, 878, 879, 905, 907, 910, 913, 915, 937, 998, 999, 1004, 1012, 1016, 1018, 1035, 1037, 1038, 1044, 1051], "frequent": [72, 134, 182, 273, 279, 280, 284, 352, 373, 376, 416, 552, 591, 631, 855, 878, 879, 882, 894, 992, 994, 1002, 1016, 1022, 1051], "frequentist": 529, "fresh": [539, 1022, 1043], "fresh_restart": 539, "fresh_restarts_max_it": 539, "freund": [415, 554, 555], "fri": [43, 149, 187, 371], "frid": [1026, 1036], "friedman": [2, 137, 138, 148, 269, 410, 412, 415, 478, 517, 518, 519, 521, 559, 560, 561, 566, 594, 595, 835, 913, 914, 916, 996, 998, 1003, 1009, 1018], "friedman2001": 415, "friedman2002": 415, "friedman_ms": [559, 560, 561, 566, 914, 916, 1018, 1049, 1050], "friend": [422, 1037], "friendli": [120, 364, 376, 384, 413, 898, 1014, 1015, 1021, 1022], "fring": [85, 408], "fritsch": [0, 398, 1033, 1034, 1036], "fritzk": 1048, "fro": [413, 539, 541, 548, 694, 998], "fro_2": [662, 664], "frobeniu": [54, 123, 443, 447, 459, 469, 470, 471, 472, 473, 474, 475, 476, 532, 538, 539, 541, 546, 547, 548, 998, 1040], "frobenius_norm": 689, "from": [0, 2, 37, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 365, 368, 369, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 389, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 960, 962, 963, 964, 965, 966, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1026, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "from_dtyp": [43, 143, 264, 326, 388, 415, 562, 563, 1050], "from_estim": [45, 48, 62, 64, 66, 67, 70, 89, 136, 139, 149, 150, 151, 155, 187, 197, 205, 221, 226, 245, 250, 252, 263, 264, 267, 272, 273, 277, 280, 283, 293, 298, 301, 315, 319, 320, 321, 322, 324, 325, 326, 327, 336, 337, 338, 339, 341, 342, 344, 356, 383, 406, 438, 632, 633, 634, 698, 699, 701, 702, 703, 719, 728, 783, 785, 788, 789, 790, 807, 824, 997, 1002, 1009, 1030, 1046, 1047, 1048, 1049, 1050, 1051], "from_predict": [43, 52, 68, 107, 154, 186, 249, 266, 277, 279, 322, 329, 351, 383, 438, 632, 698, 699, 701, 702, 703, 719, 728, 783, 785, 788, 789, 790, 1002, 1030, 1046, 1047, 1048, 1049, 1050, 1051], "frombuffer_empti": 1040, "fromkei": [271, 920], "fromnumer": 382, "front": 1040, "frontal": 371, "frontend": 382, "frontier": [48, 226, 296, 339, 1008], "frozen": 378, "frozentransform": 378, "frsi": 1041, "fruit": [376, 1003], "fr\u00e9minvil": [1050, 1051], "fs1995": 415, "ftfy": 416, "ftorres16": [1047, 1048], "ftp": [168, 373, 683, 684], "ftwo_scor": [743, 1002], "fu": [659, 1037], "fuck": [1045, 1046], "fuction": 985, "fuent": [1034, 1035], "fugled": 1050, "fujikawa": 1040, "fukatani": 1040, "fulfil": [376, 408, 415, 801, 804, 805, 815, 865, 869, 998], "full": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 364, 365, 369, 371, 374, 376, 378, 381, 384, 388, 390, 391, 394, 404, 408, 410, 412, 413, 416, 422, 425, 431, 432, 441, 445, 447, 449, 459, 488, 489, 492, 493, 497, 498, 501, 502, 503, 504, 505, 506, 508, 511, 536, 538, 542, 551, 560, 561, 568, 569, 633, 649, 651, 655, 659, 660, 670, 681, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 798, 799, 812, 842, 937, 991, 998, 1001, 1004, 1005, 1009, 1012, 1015, 1022, 1033, 1037, 1039, 1041, 1043, 1044, 1046, 1047, 1049, 1050, 1051], "full_data": 193, "full_lik": 98, "full_model": 292, "full_scor": 182, "fulli": [52, 79, 88, 141, 146, 363, 370, 371, 376, 390, 408, 414, 415, 417, 443, 447, 558, 559, 565, 566, 913, 914, 915, 916, 917, 919, 992, 998, 1007, 1015, 1021, 1046, 1047], "fullpap": 1015, "fultz": 1046, "fun": [420, 534, 1026], "fun_arg": [420, 534], "func": [50, 107, 139, 186, 194, 230, 303, 376, 409, 465, 700, 869, 1012, 1037, 1039, 1041, 1042, 1050, 1051], "func_metr": 629, "func_min": [611, 612], "funcformatt": 295, "function": [2, 4, 27, 43, 44, 45, 46, 47, 52, 54, 58, 59, 64, 72, 80, 86, 87, 88, 90, 92, 99, 102, 103, 104, 107, 120, 123, 125, 126, 129, 132, 139, 140, 143, 144, 145, 146, 147, 148, 149, 159, 164, 167, 168, 170, 173, 174, 175, 176, 177, 178, 182, 183, 185, 186, 187, 189, 192, 193, 196, 198, 206, 208, 210, 212, 213, 218, 219, 220, 225, 228, 229, 230, 232, 240, 242, 245, 246, 249, 250, 252, 253, 260, 262, 264, 268, 270, 271, 272, 273, 278, 279, 283, 285, 287, 290, 305, 308, 310, 317, 319, 320, 322, 323, 325, 327, 332, 334, 337, 338, 339, 340, 341, 342, 344, 347, 349, 351, 352, 356, 359, 363, 364, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 388, 389, 390, 394, 399, 402, 404, 406, 407, 408, 409, 410, 411, 413, 414, 416, 417, 419, 420, 423, 425, 427, 430, 431, 432, 437, 440, 443, 444, 445, 447, 448, 450, 452, 454, 457, 458, 459, 460, 461, 464, 465, 468, 469, 471, 472, 474, 478, 488, 489, 491, 493, 496, 497, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 573, 576, 582, 583, 589, 590, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 605, 608, 609, 610, 611, 612, 616, 620, 621, 623, 624, 628, 629, 632, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 699, 700, 701, 703, 704, 705, 707, 712, 713, 717, 720, 722, 723, 724, 725, 729, 733, 735, 736, 739, 741, 742, 743, 751, 756, 758, 762, 763, 764, 766, 769, 772, 775, 779, 780, 781, 782, 783, 784, 786, 790, 793, 794, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 877, 881, 882, 883, 884, 885, 886, 889, 891, 894, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 929, 939, 941, 942, 943, 948, 949, 960, 961, 967, 968, 971, 972, 975, 976, 985, 990, 991, 992, 993, 995, 997, 999, 1000, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1018, 1021, 1022, 1023, 1024, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "functiontransform": [2, 43, 102, 139, 212, 230, 333, 402, 464, 465, 1012, 1038, 1039, 1041, 1046, 1047, 1048, 1050], "functiontransformerfunctiontransform": 139, "functool": 230, "fundament": [72, 82, 112, 352, 380, 388, 389, 411, 497, 539, 541, 548, 709, 998, 1002], "funder": 0, "fung": 412, "funnel": [45, 494, 495], "funni": 102, "furlanello": 744, "furrer": 1050, "further": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 62, 77, 103, 109, 116, 120, 137, 142, 144, 167, 170, 175, 186, 188, 193, 198, 232, 237, 246, 264, 267, 270, 271, 277, 324, 340, 352, 358, 363, 376, 388, 390, 402, 407, 408, 410, 413, 415, 416, 418, 444, 452, 462, 516, 533, 536, 583, 615, 623, 629, 659, 660, 667, 668, 669, 677, 678, 679, 692, 696, 738, 775, 779, 782, 793, 794, 841, 847, 848, 855, 856, 883, 885, 905, 907, 910, 949, 1001, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1016, 1017, 1042, 1046], "furthermor": [43, 52, 72, 140, 187, 188, 249, 250, 252, 290, 351, 352, 363, 365, 383, 408, 413, 415, 416, 563, 591, 607, 620, 705, 737, 756, 758, 796, 905, 998, 1010, 1036, 1040], "fuse": [377, 1039, 1049], "fusion": 388, "futur": [0, 52, 175, 213, 252, 322, 325, 376, 380, 390, 391, 402, 412, 416, 497, 535, 636, 924, 971, 1003, 1017, 1018, 1026, 1030, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "futurewarn": [376, 384, 1040, 1041, 1042, 1044, 1046, 1049, 1050], "fuxin": 643, "fw": 689, "fwe": 593, "f\u00e9lix": [1033, 1035, 1036, 1037, 1041], "g": [0, 25, 43, 47, 49, 51, 61, 62, 63, 64, 68, 86, 88, 98, 102, 113, 116, 127, 134, 137, 145, 146, 171, 172, 173, 178, 182, 185, 186, 196, 201, 212, 213, 214, 216, 230, 237, 245, 246, 255, 264, 270, 274, 275, 281, 289, 296, 315, 327, 332, 346, 347, 353, 359, 363, 368, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 388, 390, 399, 402, 404, 406, 408, 410, 412, 413, 415, 416, 417, 418, 420, 437, 443, 444, 447, 449, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 504, 529, 532, 534, 535, 538, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 594, 595, 598, 605, 611, 612, 618, 623, 624, 631, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 691, 693, 698, 717, 721, 729, 739, 741, 764, 779, 786, 789, 800, 802, 803, 804, 805, 807, 808, 810, 819, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 854, 855, 856, 857, 861, 862, 863, 865, 868, 870, 871, 872, 875, 877, 878, 881, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 948, 949, 961, 991, 992, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1016, 1017, 1018, 1022, 1025, 1026, 1033, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "g0g0gadget": 1043, "g2015": 1009, "g_": 408, "g_i": [415, 650], "g_j": [649, 670, 681], "ga": 0, "gaaca": 178, "gaatattaggccga": 388, "gabor": 1047, "gabriel": [1041, 1042, 1043, 1046, 1047], "gael": [0, 397, 1020, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "gaido": 1042, "gaidon": 1033, "gain": [2, 86, 149, 234, 277, 290, 292, 326, 327, 330, 351, 352, 358, 375, 382, 384, 388, 415, 497, 533, 558, 562, 563, 565, 727, 757, 798, 799, 834, 913, 915, 1003, 1007, 1015, 1018, 1036, 1040, 1043], "gain_matrix": 264, "galleri": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 371, 376, 378, 390, 394, 401, 1023, 1033, 1037, 1040], "galli": 1045, "gallopoulo": 413, "galvez": 1038, "gambl": 51, "gameiro": 1047, "gamma": [2, 43, 44, 45, 46, 48, 50, 67, 68, 125, 155, 161, 191, 226, 239, 244, 245, 268, 270, 272, 275, 281, 321, 329, 330, 332, 334, 337, 339, 340, 343, 344, 346, 349, 411, 413, 415, 418, 452, 536, 563, 620, 621, 640, 641, 642, 644, 645, 646, 649, 681, 686, 692, 725, 748, 753, 760, 767, 776, 777, 778, 798, 812, 815, 900, 901, 902, 907, 908, 909, 910, 911, 991, 994, 998, 1000, 1015, 1017, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1047, 1048, 1049], "gamma_": [536, 1049], "gamma_0": [255, 261], "gamma_2d_rang": 340, "gamma_bound": 621, "gamma_k": 411, "gamma_rang": 340, "gammaregressor": [2, 230, 320, 323, 681, 998, 1044, 1047, 1048], "gandenberg": 1042, "ganesh": [1038, 1050], "ganevgv": 1043, "gangesh": 1045, "gangwar": 1040, "ganiev": [1038, 1039, 1040], "ganssl": 1040, "gap": [43, 52, 149, 351, 371, 412, 471, 472, 478, 589, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 822, 913, 914, 915, 916, 998, 999, 1041, 1045, 1047], "garagecar": [143, 154], "garagefinish": 143, "garagetyp": 154, "garageyrblt": 107, "garbag": 1045, "garcia": 1046, "garc\u00eda": [1042, 1043, 1048], "gardin": 370, "gardner": [1041, 1042], "garg": [1043, 1044], "gargsya": 1043, "gari": [371, 1040], "garret": 1037, "garreta": [1035, 1036], "garrett": 1037, "garri": 373, "garriga": [276, 412, 830], "gasmi": 1047, "gasquez": 1040, "gate": [373, 1046], "gather": [323, 325, 384, 391, 408, 1012, 1026], "gatsbi": 1015, "gaug": 186, "gaull": 765, "gaurav": [1041, 1042, 1043, 1044, 1045, 1047], "gauravahlawat": [1041, 1042], "gaussian": [2, 8, 19, 28, 43, 44, 46, 48, 64, 66, 67, 70, 79, 80, 81, 88, 90, 94, 98, 109, 110, 111, 112, 113, 118, 121, 122, 123, 129, 135, 136, 142, 146, 150, 152, 161, 182, 193, 196, 198, 200, 203, 222, 223, 224, 225, 239, 243, 245, 257, 258, 281, 295, 300, 303, 305, 313, 314, 334, 337, 344, 345, 349, 368, 372, 378, 381, 390, 408, 410, 413, 414, 420, 452, 469, 470, 471, 472, 473, 474, 475, 476, 497, 505, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 531, 533, 545, 550, 551, 554, 564, 611, 612, 614, 615, 616, 618, 619, 620, 623, 624, 626, 628, 644, 645, 673, 678, 681, 704, 725, 742, 753, 777, 798, 799, 801, 815, 840, 841, 842, 843, 844, 845, 846, 850, 881, 885, 893, 897, 898, 899, 996, 998, 999, 1000, 1008, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1043, 1045, 1047], "gaussian_filt": [53, 80, 81, 87], "gaussian_process": [2, 66, 67, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 390, 418, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 644, 1003, 1023, 1036, 1039, 1040], "gaussianhmm": 1033, "gaussianmixtur": [2, 79, 90, 256, 257, 258, 259, 260, 261, 414, 798, 1001, 1039, 1041, 1042, 1046, 1047, 1049, 1051], "gaussianmixturegaussianmixtur": 260, "gaussiannb": [2, 61, 62, 64, 67, 156, 272, 359, 406, 415, 437, 570, 840, 841, 842, 844, 866, 996, 1003, 1004, 1037, 1038, 1039, 1041, 1046, 1049], "gaussiannois": 378, "gaussianprocessclassifi": [2, 66, 67, 171, 172, 173, 174, 178, 390, 418, 612, 620, 621, 623, 624, 1003, 1039, 1041, 1043, 1047], "gaussianprocessregressor": [2, 170, 175, 176, 177, 178, 179, 418, 611, 614, 615, 616, 617, 618, 622, 625, 626, 644, 1003, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "gaussianprocessregressorifittedgaussianprocessregressor": 175, "gaussianrandomproject": [2, 898, 1014, 1034, 1047, 1049, 1050], "gauthier": 1047, "gauz": 1041, "gave": [64, 406, 801, 804, 805, 815, 872], "gavin": [629, 992], "gaynor": 402, "ga\u00ebl": [391, 1026], "gb": [157, 415, 554, 634], "gbc": 359, "gbdt": [139, 187, 264, 319, 320, 325, 381, 415], "gbdt_appli": 139, "gbdt_applyfunctiontransform": 139, "gbdt_cst": 320, "gbdt_leaves_yield": 139, "gbdt_model": 139, "gbdt_no_cst": [151, 320], "gbdt_pipelin": 154, "gbdt_with_monotonic_cst": 151, "gbdt_with_monotonic_cst_df": 151, "gbgradientboostingregressor": 157, "gbm": [145, 415, 1036], "gbm_early_stop": 144, "gbm_full": 144, "gbp": 1026, "gbr": 146, "gbr_l": 146, "gbrt": [43, 52, 212, 415], "gbrt_mean_poisson": 52, "gbrt_median": 52, "gbrt_percentile_5": 52, "gbrt_percentile_95": 52, "gbrt_predict": 43, "gbt": 363, "gc": 49, "gca": [47, 79, 95, 116, 122, 173, 217, 221, 223, 239, 252, 274, 298, 300, 311, 336, 338, 341, 342, 1009, 1030], "gcc": [374, 377, 382, 388], "gcf": [47, 1009], "gcv": [674, 676], "gcv_mode": [674, 1035], "gd": [51, 157], "gdb": [377, 379, 1025], "gdex1": 1043, "ge": [51, 993, 1004, 1045], "ge0": 1018, "gear": 1020, "geb": 57, "gebremichael": [1048, 1049], "gedeck": 1040, "geevarghes": 1048, "gefel": 1002, "gegr": 416, "gei": 1035, "geiger": [1050, 1051], "geist": 373, "gelavizh": 1044, "gelder": 1044, "gemm": 1051, "gen": 782, "gen_batch": [2, 385, 953], "gen_cov": 111, "gen_even_slic": [2, 212, 385, 952], "gender": [251, 878, 1012], "gender_femal": 878, "gender_mal": 878, "gene": [178, 370, 405, 451, 514, 594, 595, 852, 885], "gener": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 72, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 98, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 165, 166, 168, 171, 172, 173, 174, 175, 178, 181, 182, 185, 186, 187, 188, 189, 191, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 364, 368, 369, 371, 373, 377, 378, 379, 380, 381, 382, 384, 385, 388, 389, 402, 405, 406, 408, 412, 414, 416, 417, 418, 420, 424, 429, 431, 437, 440, 443, 446, 447, 449, 452, 454, 458, 459, 460, 462, 464, 465, 467, 469, 472, 474, 482, 483, 484, 488, 491, 493, 496, 497, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 539, 541, 542, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 615, 616, 619, 620, 621, 623, 624, 628, 629, 630, 631, 633, 634, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 686, 687, 690, 691, 692, 693, 694, 695, 696, 702, 705, 707, 718, 722, 724, 725, 738, 744, 758, 779, 782, 786, 794, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 837, 838, 839, 845, 846, 848, 850, 851, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 905, 906, 907, 908, 910, 911, 914, 916, 917, 918, 919, 943, 944, 948, 949, 952, 953, 966, 970, 972, 975, 990, 991, 992, 994, 996, 997, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1014, 1015, 1017, 1018, 1023, 1024, 1025, 1026, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "generalis": [789, 1002, 1022], "generaliz": [344, 415], "generate_data": [46, 69], "generate_dataset": 49, "generate_missing_valu": 149, "generate_onli": [943, 1043], "generate_synthetic_data": 53, "generickernelmixin": [178, 1043], "genericunivariateselect": [2, 417, 596, 597, 599, 600, 601, 603, 1047, 1049, 1050], "generos": 376, "genesi": [1047, 1049], "genet": 1021, "genoa": 373, "genom": [58, 514, 1021], "genotyp": 370, "gensim": 1021, "gentil": [373, 1045], "gentli": 413, "genvalen": [1045, 1046, 1047, 1048, 1049], "geodes": [232, 689, 999], "geoff": [836, 1003], "geoffrei": [862, 863, 1006, 1044, 1045, 1046, 1047, 1049], "geograph": [43, 50, 303, 371, 499], "geometr": [122, 408, 689, 705, 732, 758, 999, 1041], "geometri": [74, 408, 999, 1005], "geomspac": 325, "georg": [45, 371, 408, 1039, 1045, 1046, 1047, 1048], "georgi": [1041, 1044], "georgiamaydai": 1048, "geospati": [303, 414], "geovan": [1046, 1047], "geq": [243, 406, 413, 415, 998, 1002, 1012, 1016, 1017], "ger": 416, "gerhard": [45, 371], "german_credit": 264, "germer": [1048, 1049], "geroldcsend": 1046, "geron": [1041, 1046, 1047], "gerstein": 514, "gertrud": 1040, "gertz": 450, "gervai": [1035, 1036], "gesa": 1045, "gesdd": 949, "gesvd": 949, "get": [2, 3, 43, 44, 48, 51, 52, 55, 57, 72, 85, 89, 121, 125, 146, 149, 156, 165, 168, 170, 175, 176, 181, 186, 187, 188, 189, 206, 214, 227, 230, 232, 246, 247, 268, 271, 272, 274, 278, 281, 283, 287, 290, 295, 303, 311, 319, 326, 330, 333, 337, 340, 342, 345, 349, 351, 353, 355, 357, 364, 369, 370, 371, 374, 376, 377, 378, 379, 381, 382, 383, 390, 394, 402, 404, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 422, 423, 424, 429, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 696, 700, 722, 723, 724, 725, 727, 733, 734, 743, 757, 764, 765, 770, 786, 789, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 938, 940, 941, 942, 948, 949, 954, 960, 991, 997, 998, 999, 1001, 1002, 1012, 1015, 1016, 1017, 1018, 1022, 1030, 1033, 1036, 1039, 1041, 1044, 1046, 1047, 1050], "get_adjacency_matrix": 55, "get_arrai": [845, 846], "get_bin_se": 448, "get_cmap": [62, 64, 345], "get_color": 46, "get_config": [2, 468, 782, 903, 968, 1048], "get_covari": [533, 535, 542], "get_data": [509, 510], "get_data_hom": [2, 47], "get_depth": [913, 914, 915, 916, 1042], "get_feature_nam": [322, 1041, 1042, 1044, 1045, 1046], "get_feature_names_out": [2, 54, 57, 186, 188, 322, 351, 352, 353, 371, 378, 390, 409, 416, 424, 429, 432, 442, 443, 445, 447, 449, 464, 467, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 1012, 1046, 1047, 1048, 1049, 1050, 1051], "get_figur": 134, "get_full_scor": 182, "get_height": [47, 144], "get_impute_it": 182, "get_impute_knn_scor": 182, "get_impute_mean": 182, "get_impute_zero_scor": 182, "get_indic": [57, 423, 451, 453], "get_initial_mean": 258, "get_legend_handles_label": [149, 245, 272, 277], "get_lin": 306, "get_metadata_rout": [246, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 957, 958, 959, 960, 961, 1002, 1050], "get_metr": 700, "get_minibatch": 47, "get_n_cal": [845, 846], "get_n_leav": [913, 914, 915, 916, 1042], "get_n_split": [390, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822], "get_nam": 312, "get_output_feature_nam": 1047, "get_param": [271, 379, 390, 418, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 1043, 1044, 1045, 1047, 1048], "get_precis": [469, 470, 471, 472, 473, 474, 475, 476, 533, 535, 542], "get_redirect": 55, "get_routing_for_object": [2, 246, 958], "get_scor": [2, 326, 390, 734, 1040, 1049], "get_scorer_nam": [2, 407, 733, 1002, 1047, 1050], "get_scores_for_imput": 182, "get_shap": [57, 423, 451, 453], "get_stop_word": [589, 590, 592], "get_submatrix": [423, 451, 453], "get_subplotspec": 383, "get_support": [164, 168, 321, 582, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 1035], "get_tag": 2, "get_tree_stat": [845, 846], "get_untrusted_typ": 402, "get_width": [47, 144], "get_x": [47, 144], "get_xaxi": [255, 300, 310], "get_xlim": [111, 208, 217, 310], "get_xticklabel": 281, "get_yaxi": [300, 310], "get_ybound": 86, "get_ylim": [208, 283, 310, 311], "getattr": [43, 47, 264, 310, 378, 390, 1049], "getgaurav2": 1043, "getmoredataget": 396, "gettempdir": 1005, "getter": [469, 470, 471, 472, 473, 474, 475, 476, 594, 595, 598], "geurt": [415, 556, 557, 558, 559, 566, 567, 915, 916], "gewili": [1048, 1049], "gh": 376, "ghahramani": 900, "gharibi": 1043, "ghg": 1039, "ghislain": 1045, "gholdman1": 1044, "ghorai": 1041, "ghosh": [0, 398, 408, 1033, 1034, 1050, 1051], "gia": 1044, "giancarlo": 1047, "gianr": 1048, "gibb": [861, 1007, 1021], "gideon": 1043, "giessel": 1039, "gigant": [1041, 1043, 1048, 1049], "gijsber": 1047, "gil": [363, 364, 377, 1036, 1041, 1042, 1045, 1046, 1050], "gilad": 1026, "gilberto": 1041, "gilbertson": [1047, 1048], "gilch": 1040, "gile": [1036, 1037], "gill": [0, 398, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "gilliam": 1040, "gilmor": 1037, "gim": 1045, "gini": [64, 189, 212, 230, 251, 282, 321, 554, 555, 558, 559, 560, 561, 565, 566, 567, 789, 913, 914, 915, 916, 991, 1010, 1018, 1041, 1042, 1049, 1050], "gionanidi": 1047, "giorgio": [1038, 1039, 1040], "giorgiop": 1038, "giotto": 1021, "giovanni": [1039, 1041], "gist": [376, 384, 1025], "git": [374, 378, 380, 382, 384, 1025, 1029, 1033, 1049, 1051], "github": [0, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 290, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 374, 375, 379, 380, 381, 382, 384, 388, 390, 391, 402, 404, 693, 1020, 1021, 1025, 1043], "githubusercont": 51, "gitter": [1040, 1041], "giudic": 1045, "giusepp": [1041, 1042], "give": [2, 43, 51, 52, 53, 61, 62, 74, 79, 82, 93, 95, 97, 102, 103, 107, 122, 145, 170, 175, 179, 181, 186, 187, 202, 204, 212, 213, 214, 239, 261, 264, 267, 272, 279, 292, 296, 299, 308, 322, 323, 327, 333, 363, 365, 371, 373, 375, 376, 378, 382, 384, 388, 389, 390, 391, 396, 402, 405, 406, 408, 409, 410, 413, 415, 416, 418, 420, 433, 446, 447, 449, 451, 459, 472, 497, 500, 504, 534, 539, 550, 551, 552, 553, 558, 559, 565, 566, 567, 594, 595, 598, 608, 609, 639, 648, 662, 666, 677, 721, 731, 737, 740, 795, 801, 804, 805, 815, 826, 827, 828, 830, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 882, 883, 885, 886, 894, 998, 1002, 1005, 1006, 1007, 1009, 1010, 1012, 1016, 1017, 1018, 1021, 1026, 1033, 1037, 1040, 1041, 1043, 1044, 1045, 1047, 1049], "given": [2, 8, 30, 46, 49, 50, 52, 64, 66, 72, 82, 91, 93, 109, 115, 121, 125, 140, 149, 150, 152, 154, 170, 177, 186, 187, 198, 209, 212, 213, 216, 230, 233, 239, 243, 244, 246, 248, 249, 250, 264, 266, 270, 271, 272, 273, 279, 284, 293, 296, 297, 298, 312, 316, 322, 327, 351, 352, 353, 357, 358, 363, 365, 371, 375, 376, 382, 384, 385, 388, 390, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 425, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 456, 458, 459, 460, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 487, 497, 502, 504, 506, 524, 534, 535, 537, 539, 540, 541, 544, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 594, 595, 602, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 632, 633, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 688, 689, 691, 692, 698, 699, 700, 701, 702, 703, 705, 706, 707, 713, 715, 718, 719, 721, 725, 727, 728, 735, 737, 738, 741, 753, 756, 757, 759, 760, 765, 775, 779, 782, 783, 785, 788, 789, 790, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 813, 815, 819, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 891, 892, 894, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 924, 935, 936, 937, 957, 958, 960, 985, 989, 991, 994, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "gkevinyen5418": 1041, "gkf": 412, "gkiasta": 1046, "gl": [168, 373], "glad": 376, "glanc": [287, 375], "glaser": [1041, 1042], "glass": 371, "glasso": [410, 478], "glaxosmithklin": 51, "gleb": [1046, 1048, 1049, 1050], "glemaitr": [1042, 1043, 1045], "glen": 1046, "glenn": 1039, "glennfrutiz": 1047, "glibc": 384, "glm": [212, 230, 320, 649, 670, 681, 998, 1033, 1044], "glm_freq": 230, "glm_pure_premium": 230, "glm_sev": 230, "glmnet": [647, 648, 1033], "glob": 47, "global": [2, 3, 47, 49, 77, 90, 120, 212, 232, 233, 253, 279, 307, 320, 359, 363, 364, 382, 388, 390, 408, 418, 442, 452, 462, 468, 591, 627, 633, 689, 692, 693, 696, 708, 730, 731, 739, 784, 785, 788, 789, 819, 886, 901, 903, 971, 991, 999, 1002, 1008, 1012, 1018, 1026, 1041, 1048], "global_dtyp": 364, "global_random_se": 364, "globular": [95, 408], "glorot": [862, 863], "glossari": [2, 359, 376, 378, 382, 419, 420, 437, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 467, 469, 472, 474, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 595, 603, 608, 609, 611, 612, 628, 633, 635, 640, 641, 642, 643, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 688, 689, 690, 691, 692, 693, 694, 695, 696, 702, 775, 779, 782, 794, 798, 799, 801, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 847, 848, 850, 851, 853, 854, 855, 856, 858, 859, 861, 862, 863, 864, 867, 870, 882, 886, 894, 897, 898, 900, 901, 905, 906, 907, 910, 913, 914, 915, 916, 948, 949, 972, 975, 991, 992, 998, 1041], "glu": [168, 373], "glushchenkov": 1047, "gl\u00f2ria": [1046, 1048], "gm": 799, "gmil": 371, "gmm": [79, 91, 92, 183, 254, 256, 259, 260, 261, 505, 513, 799, 820, 1001, 1023, 1033, 1034, 1037, 1038, 1039], "gmm_": 1034, "gmm_bic_scor": 260, "gmmgmm": 396, "gmmhmm": [1033, 1034], "gnb": [61, 62, 64, 156, 415, 570, 1004], "gnb_isoton": 62, "gnb_sigmoid": 62, "gnu": 374, "go": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 371, 376, 380, 381, 385, 391, 394, 409, 413, 415, 417, 443, 562, 563, 721, 884, 926, 952, 953, 1012, 1018, 1022, 1044], "goadrich": 1002, "goal": [49, 55, 58, 64, 85, 90, 116, 149, 181, 187, 191, 212, 227, 230, 248, 249, 264, 267, 268, 351, 364, 365, 371, 381, 382, 390, 391, 393, 399, 413, 417, 543, 549, 591, 594, 740, 1002, 1005, 1007, 1008, 1016, 1017, 1018, 1026, 1041], "god": [57, 351, 352], "godbol": 784, "goe": [43, 72, 139, 186, 358, 376, 415, 471, 472, 478, 558, 559, 565, 566, 567, 913, 914, 915, 916, 1012, 1016], "goetz": [1040, 1041], "goh": 1050, "gohlk": 1038, "goix": [0, 1037, 1039, 1040, 1041, 1042], "gold": [69, 207, 213, 215, 218, 222, 226, 229, 256, 261, 277, 296, 339, 382], "goldbaum": 1051, "goldberg": [854, 1005], "goldfarb": 998, "goldman": 51, "goldstein": [187, 1009], "goldszmidt": 1014, "gollonet": [0, 398], "goltermann": 1045, "golub": [535, 843, 885], "golubin": 1040, "gome": [1046, 1047, 1051], "gomez": [1041, 1048, 1050], "gommer": [1036, 1039, 1040, 1048, 1049, 1051], "goncalo": [1040, 1041], "gone": [1033, 1034], "gonthier": 1044, "goo": [168, 373], "good": [43, 48, 58, 62, 64, 75, 79, 80, 82, 85, 86, 88, 91, 106, 112, 116, 129, 140, 142, 145, 146, 149, 171, 175, 181, 186, 198, 202, 212, 213, 218, 227, 237, 239, 243, 246, 249, 256, 258, 263, 264, 270, 276, 283, 308, 315, 316, 321, 327, 329, 334, 340, 351, 352, 359, 363, 364, 365, 375, 377, 378, 379, 382, 384, 388, 390, 405, 406, 408, 410, 412, 413, 415, 416, 417, 418, 437, 439, 444, 535, 560, 562, 563, 591, 631, 641, 648, 649, 657, 659, 660, 662, 670, 681, 691, 695, 724, 732, 743, 765, 830, 899, 924, 949, 991, 997, 998, 999, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1016, 1017, 1018, 1022, 1026, 1039], "goodby": 376, "goodman": [1033, 1038], "googl": [0, 55, 388, 408, 442, 949, 1020, 1033], "gool": 1002, "gorb": 1045, "gordon": [57, 1039, 1043, 1045, 1047], "gorelli": [1041, 1042, 1046, 1048, 1051], "gorgolewski": [0, 398, 1033, 1036], "gorilla": 351, "gorinevski": 998, "gorodkin": 744, "gorro\u00f1o": [1044, 1046, 1047], "got": [176, 246, 277, 359, 381, 552, 650, 666, 1046, 1048, 1050], "gotten": [998, 1012], "gou": 408, "gouillart": 1033, "goupil": [0, 360], "gov": [55, 373], "govern": [186, 359, 363, 376, 390, 1026], "govin": 1039, "go\u0144da": 1048, "gp": [173, 178, 418, 611, 612, 623, 1039], "gp_fix": 171, "gp_opt": 171, "gpapadok": [1043, 1047], "gpassino": 1037, "gpc": [2, 66, 142, 152, 161, 169, 175, 176, 178, 183, 222, 223, 224, 225, 245, 259, 305, 313, 334, 345, 349, 505, 611, 612, 614, 615, 620, 621, 623, 624, 704, 742, 1023, 1024, 1028, 1043], "gpc_rbf_anisotrop": 172, "gpc_rbf_isotrop": 172, "gperftool": 379, "gplearn": 1021, "gpr": [2, 169, 170, 171, 177, 179, 183, 497, 611, 612, 614, 615, 616, 617, 622, 623, 624, 625, 626, 1023, 1024, 1028, 1043], "gpr_model": 179, "gprof": 379, "gpu": [324, 327, 404, 1006, 1022, 1050], "gr": 898, "grab": 376, "gracefulli": [1036, 1037], "grad": [382, 1026], "gradd": 382, "grade": 1002, "gradi": 1043, "gradient": [2, 14, 46, 52, 80, 99, 103, 133, 134, 135, 138, 139, 141, 151, 154, 157, 175, 176, 177, 183, 188, 189, 192, 194, 200, 209, 214, 235, 239, 244, 269, 271, 296, 306, 310, 314, 316, 323, 326, 339, 390, 407, 408, 418, 452, 462, 466, 467, 488, 490, 497, 502, 504, 521, 554, 555, 560, 561, 562, 563, 565, 566, 587, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 632, 633, 635, 636, 640, 649, 650, 659, 660, 669, 670, 673, 675, 677, 678, 679, 681, 688, 693, 695, 696, 742, 743, 749, 751, 791, 801, 804, 805, 806, 822, 828, 831, 861, 862, 863, 866, 878, 879, 909, 975, 999, 1002, 1005, 1006, 1007, 1008, 1021, 1023, 1024, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1046, 1048, 1050], "gradient_boost": [139, 1035, 1036, 1042], "gradientboost": 1038, "gradientboostingclassifi": [2, 139, 145, 148, 312, 359, 388, 554, 562, 633, 634, 1003, 1009, 1033, 1034, 1035, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "gradientboostingclassifier__learning_r": 312, "gradientboostingregressor": [2, 46, 144, 146, 147, 154, 157, 363, 381, 388, 555, 563, 633, 634, 998, 1002, 1003, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "gradientboostingregressorgradientboostingregressor": 157, "gradual": [216, 862, 863, 943, 944, 1016], "graduat": 373, "graham": [1038, 1039], "grai": [45, 53, 80, 81, 83, 84, 86, 120, 123, 148, 168, 210, 212, 230, 243, 247, 248, 277, 307, 373, 413, 494, 495, 503, 522, 1044], "grain": [43, 67, 72, 244, 261, 312, 382, 416, 446, 1022], "gram": [2, 183, 192, 246, 378, 413, 416, 489, 525, 549, 589, 590, 591, 592, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 666, 682, 683, 684, 685, 686, 687, 768, 991, 998, 1012, 1017, 1023, 1033, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1044, 1046, 1047], "gram_test": 1017, "gram_train": 1017, "gramfort": [0, 120, 391, 397, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "grammar": 376, "grant": [0, 249, 264, 376], "grape": 409, "graph": [2, 55, 62, 74, 79, 80, 99, 100, 178, 232, 267, 290, 292, 332, 363, 376, 379, 390, 405, 410, 419, 441, 444, 445, 452, 453, 457, 462, 463, 471, 472, 478, 512, 586, 587, 689, 692, 693, 696, 783, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 860, 901, 955, 999, 1002, 1005, 1007, 1015, 1018, 1021, 1026, 1033, 1040, 1041, 1043, 1046, 1048], "graph_laplacian": 1040, "graph_lasso": [478, 1041], "graph_model": 292, "graph_shortest_path": [385, 1046], "graphic": [8, 57, 112, 187, 333, 351, 352, 353, 371, 382, 408, 410, 413, 793, 794, 798, 835, 917, 1002, 1003, 1009, 1021], "graphical_lasso": [2, 385, 471, 472, 1041, 1049], "graphicallasso": [2, 113, 410, 469, 470, 472, 473, 474, 475, 476, 478, 1041, 1049], "graphicallassocv": [2, 51, 113, 399, 410, 471, 473, 474, 475, 476, 478, 1041, 1045, 1047, 1049, 1051], "graphicallassocvifittedgraphicallassocv": 51, "graphlasso": [471, 1038, 1041], "graphlassocv": [472, 1035, 1041], "graphviz": [917, 1018], "grasp": [284, 1017, 1022], "grassberg": [608, 609], "grate": 1026, "graviton": 384, "gray_r": [68, 123, 173, 233, 308, 329, 330], "grayscal": 68, "greasemonkei": 384, "great": [88, 185, 186, 210, 359, 376, 388, 413, 765, 1022, 1026, 1033, 1040], "greater": [62, 118, 134, 136, 186, 229, 244, 249, 258, 264, 276, 289, 296, 297, 355, 363, 381, 390, 406, 407, 408, 411, 415, 441, 445, 446, 449, 452, 463, 472, 537, 542, 558, 559, 560, 561, 562, 563, 565, 566, 567, 594, 595, 598, 611, 612, 629, 641, 643, 665, 667, 668, 672, 677, 678, 679, 693, 710, 713, 721, 736, 737, 740, 743, 789, 796, 798, 799, 835, 847, 848, 855, 856, 862, 863, 868, 883, 895, 899, 902, 905, 906, 913, 914, 915, 916, 949, 970, 991, 997, 998, 999, 1002, 1003, 1008, 1012, 1017, 1018, 1036, 1041, 1044, 1046, 1047, 1048, 1050], "greater_is_bett": [146, 327, 743, 1002], "greatest": [88, 394, 408, 872, 1041], "greatli": [210, 244, 324, 376, 384, 452, 1005, 1018, 1039, 1047], "greedi": [168, 415, 417, 447, 449, 460, 560, 561, 603, 998, 1018], "greedili": [116, 168, 408, 412, 417, 460], "greek": [51, 55, 59, 71, 86, 99, 123, 183, 408, 462, 1023], "green": [63, 112, 118, 137, 151, 156, 170, 191, 237, 306, 311, 315, 320, 326, 390, 1003, 1041, 1042, 1044, 1045], "greenhal": 1041, "greg": [1026, 1039, 1040, 1042, 1043], "gregori": [1039, 1043, 1044, 1045, 1046], "gregorystrubel": 1046, "gregov": 1041, "grei": [44, 280, 310, 347, 371], "grep": 376, "greyscal": 308, "grid": [2, 45, 47, 49, 50, 58, 62, 63, 64, 77, 87, 94, 103, 104, 105, 106, 109, 113, 142, 152, 163, 165, 167, 174, 183, 185, 186, 187, 202, 230, 237, 244, 245, 246, 250, 255, 260, 262, 264, 267, 269, 271, 274, 275, 277, 282, 289, 292, 294, 295, 303, 308, 312, 313, 315, 337, 339, 340, 346, 351, 371, 378, 383, 388, 390, 403, 409, 412, 414, 415, 416, 448, 461, 464, 472, 499, 503, 516, 523, 632, 633, 634, 648, 651, 654, 655, 657, 660, 662, 664, 677, 714, 729, 743, 786, 789, 801, 804, 805, 812, 815, 817, 831, 832, 865, 910, 995, 997, 1002, 1005, 1009, 1022, 1023, 1028, 1033, 1036, 1037, 1038, 1040, 1041, 1047, 1049, 1050, 1051], "grid_encod": 313, "grid_model": 292, "grid_posit": [62, 64], "grid_resolut": [187, 321, 338, 632, 633, 634], "grid_scores_": [1039, 1045, 1046], "grid_search": [106, 140, 251, 260, 268, 278, 326, 409, 1035, 1036, 1037, 1038, 1039, 1040], "grid_siz": [50, 94, 303, 371, 499], "grid_to_graph": [2, 81, 84, 87, 408, 416, 1046], "grid_tograph": 1036, "grid_valu": [187, 634, 1009, 1049], "gridsearch": [87, 109, 281], "gridsearchcv": [2, 43, 87, 101, 103, 105, 106, 109, 127, 140, 183, 245, 251, 260, 262, 264, 268, 269, 270, 271, 275, 278, 281, 287, 292, 294, 308, 312, 321, 325, 326, 340, 344, 359, 364, 378, 388, 390, 399, 404, 409, 412, 415, 418, 422, 503, 521, 541, 542, 576, 600, 608, 654, 704, 743, 812, 815, 865, 875, 905, 913, 991, 998, 1002, 1006, 1016, 1017, 1022, 1023, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1050, 1051], "gridsearchcvifittedgridsearchcv": [104, 260, 264, 268, 270], "gridsearchcvinot": 251, "gridsiz": 243, "gridspec": [62, 64, 98, 255, 383], "gridspecfromsubplotspec": 383, "griffith": [1041, 1042], "grigorev": 1038, "grigorio": 735, "grime": [690, 694, 999], "grinsztajn": 1050, "grisel": [0, 391, 397, 1020, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "griva": [1047, 1048], "grlivarea": 143, "grobler": [0, 398, 1033, 1034, 1035, 1036], "groceryheist": 1046, "groenen": [691, 695, 999], "grok": 487, "groothui": [628, 992], "grother": 373, "ground": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 123, 150, 178, 198, 207, 212, 213, 249, 261, 273, 352, 390, 408, 704, 705, 706, 709, 713, 714, 715, 716, 718, 719, 722, 724, 725, 727, 729, 730, 731, 735, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 784, 785, 786, 787, 788, 791, 792, 796, 797, 1002, 1015, 1041], "ground_truth": [88, 297], "group": [0, 2, 51, 72, 75, 88, 91, 93, 156, 187, 189, 212, 233, 246, 261, 265, 316, 326, 331, 352, 358, 371, 381, 390, 391, 399, 408, 414, 415, 416, 433, 446, 496, 589, 590, 592, 595, 719, 789, 801, 802, 803, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 826, 827, 828, 829, 830, 832, 878, 879, 915, 916, 943, 944, 998, 999, 1001, 1002, 1003, 1012, 1018, 1019, 1021, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1051], "group_1": 878, "group_2": 878, "group_3": 878, "group_by_dynam": 175, "group_df": 220, "group_kfold": 802, "group_prior": 265, "groupbi": [43, 149, 187, 220, 230], "groupkfold": [2, 265, 275, 326, 399, 412, 595, 806, 807, 808, 809, 810, 819, 824, 826, 827, 828, 829, 832, 1039, 1046], "groupshufflesplit": [2, 265, 412, 1039], "grow": [43, 52, 74, 191, 198, 292, 347, 353, 363, 388, 404, 410, 415, 416, 558, 559, 560, 561, 565, 566, 567, 811, 845, 846, 913, 914, 915, 916, 991, 1002, 1005, 1018, 1026, 1036, 1037], "grower": [149, 415, 562, 563], "grown": [373, 415, 554, 555, 556, 557, 558, 559, 565, 566, 913, 914, 915, 916, 1018], "growth": [1002, 1038, 1039], "grumman": 51, "grusak": 1043, "gryllo": [1038, 1041], "gryze": [1035, 1038], "grzegorz": [1040, 1043], "gs_time": 281, "gsh": 281, "gsh_time": 281, "gsiisg": 1048, "gsk": 51, "gss": [412, 803], "gt": [68, 103, 104, 139, 154, 186, 260, 268, 282, 376, 380, 396], "gu": [1044, 1045, 1047], "guan": 1043, "guangguo": 1039, "guarante": [46, 47, 64, 111, 112, 149, 186, 220, 243, 289, 290, 310, 352, 359, 365, 370, 384, 385, 402, 408, 412, 413, 416, 446, 537, 646, 659, 660, 669, 673, 675, 677, 679, 688, 695, 803, 818, 821, 845, 846, 883, 885, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 912, 931, 932, 994, 998, 999, 1001, 1005, 1010, 1014, 1018, 1043, 1051], "gubri": [1041, 1042], "gudmalwar": 1045, "gued": 1051, "guerin": [1039, 1040], "guess": [55, 134, 142, 412, 415, 416, 533, 539, 541, 542, 548, 789, 1002, 1016], "guestrin": 415, "guha": 1048, "gui": [1034, 1044], "guid": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 62, 64, 88, 101, 120, 140, 179, 183, 186, 187, 200, 232, 277, 296, 297, 300, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 374, 375, 376, 381, 382, 383, 384, 389, 390, 391, 396, 399, 409, 415, 419, 420, 421, 422, 425, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 945, 1002, 1003, 1033, 1034, 1035, 1036, 1038, 1040, 1042, 1043, 1050, 1051], "guidanc": [388, 418], "guidelin": [2, 25, 375, 379, 381, 382, 384, 408, 415], "guiel": 495, "guilherm": 1036, "guillaum": [0, 397, 1026, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "guillem": [1042, 1043, 1048], "guillemot": [0, 1039, 1040], "guillermo": 1047, "guiniol": 1040, "guitar": 1048, "guitton": 1045, "guiweb": 1046, "gulati": [1038, 1039, 1040], "gun": [57, 371], "gunduz": 1051, "gunesbayir": [1048, 1049], "gunnar": [536, 949], "guo": 1046, "guoci": 1040, "gupta": [899, 1014, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "gustafson": [1048, 1049], "gustav": 1039, "gustavo": [1041, 1042, 1047], "gutierrez": 1043, "guttman": 695, "guyon": [516, 594, 595, 1002], "guyon2015": 1002, "gwulf": [1037, 1038], "gyeongja": 1051, "gz": [47, 380, 394, 509, 510], "gzip": 1033, "g\u00e9ron": 1041, "g\u00f3rski": [1044, 1045], "g\u00f6khan": [44, 413, 536], "g\u00f6n\u00fcl": 1051, "g\u00fcnther": [1046, 1050], "h": [44, 45, 52, 91, 120, 121, 134, 135, 152, 168, 172, 186, 257, 295, 298, 305, 312, 323, 334, 336, 353, 373, 382, 406, 408, 410, 413, 414, 415, 416, 419, 444, 520, 533, 536, 539, 541, 548, 554, 568, 569, 583, 591, 608, 609, 690, 694, 705, 709, 758, 840, 844, 845, 846, 851, 861, 876, 885, 994, 996, 998, 999, 1000, 1002, 1004, 1006, 1007, 1016, 1018, 1039, 1044, 1048, 1049, 1050], "h1998": 415, "h2009": 1009, "h4dr1en": 1043, "h5py": 370, "h_": 998, "h_i": [413, 1007], "h_init": 382, "h_j": 1007, "h_l": 996, "h_m": 415, "h_pad": [120, 142, 356], "h_samples_": 861, "ha": [0, 43, 44, 47, 50, 51, 52, 62, 66, 70, 72, 79, 83, 88, 89, 90, 93, 106, 111, 112, 116, 120, 132, 139, 142, 144, 146, 147, 149, 151, 156, 166, 167, 170, 175, 176, 177, 182, 186, 187, 188, 189, 191, 206, 212, 213, 214, 218, 229, 230, 232, 239, 243, 245, 246, 249, 250, 253, 255, 256, 258, 260, 261, 264, 265, 268, 269, 270, 273, 274, 276, 281, 282, 289, 293, 296, 297, 298, 300, 307, 310, 311, 313, 315, 319, 320, 321, 322, 323, 325, 327, 329, 332, 340, 344, 345, 346, 351, 358, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 389, 390, 391, 394, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 420, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 461, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 494, 495, 498, 499, 509, 510, 517, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 620, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 688, 689, 690, 691, 692, 693, 696, 712, 714, 721, 723, 742, 764, 775, 779, 780, 781, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 815, 819, 822, 823, 824, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 922, 930, 931, 932, 938, 951, 970, 986, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1022, 1025, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "haan": 1042, "haar": [53, 1050], "haas": 1043, "habchi": 1043, "haberland": [1048, 1049], "haberth\u00fcr": 1040, "hack": [47, 49], "had": [43, 48, 81, 146, 149, 175, 246, 310, 316, 322, 359, 376, 377, 384, 399, 416, 419, 444, 992, 1002, 1026, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1048], "hadamard": 378, "haddad": 1040, "hadrien": [1040, 1043], "hadshirt": 1043, "haenel": 1036, "haesun": [1045, 1048, 1049], "hafner": 1046, "hagai": 798, "hagberg": 55, "hahn": [1040, 1041], "haiat": 1045, "haidar": [1046, 1047], "hail": 316, "hailei": [1043, 1044], "hain": 371, "haitz": [1044, 1046, 1047], "hakaa1": [1040, 1041], "hal": [548, 659, 759, 760, 1000], "halchenko": [0, 397, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1049], "hale": [1035, 1047], "half": [2, 43, 61, 123, 149, 244, 248, 268, 270, 282, 371, 372, 413, 415, 463, 523, 563, 594, 598, 603, 771, 864, 872, 914, 1002, 1005, 1018], "half_cal": 598, "half_selector": 598, "halfbath": 143, "halford": [1041, 1048, 1049], "halkidi": 408, "halko": [413, 536, 542, 545, 948, 949], "hall": [998, 1040, 1044], "hallock": 1039, "halpert": [693, 999], "halv": [2, 163, 183, 262, 274, 278, 346, 403, 516, 565, 580, 801, 804, 805, 910, 1023, 1028, 1045], "halvic": 1045, "halvinggridsearchcv": [2, 281, 282, 321, 399, 404, 580, 805, 991, 1045, 1047, 1048, 1050, 1051], "halvingrandomsearchcv": [2, 146, 282, 321, 399, 404, 580, 804, 991, 1045, 1047, 1048, 1049, 1050, 1051], "halvingrandomsearchcvifittedhalvingrandomsearchcv": 282, "halwai": 1039, "ham": [2, 46, 450, 457, 582, 700, 704, 710, 735, 742, 779, 780, 781, 797, 1005], "hamada": 1045, "hamdi": [1050, 1051], "hammerbach": 1037, "hamming_loss": [2, 46, 704, 797, 1002, 1035, 1039, 1042], "hammingdist": 700, "hammoudeh": 1042, "hamoumi": 1046, "hampu": 1037, "hamzeh": [0, 1036, 1037], "han": [408, 442, 450, 457, 1033, 1041, 1042, 1046], "hancock": 1043, "hand": [44, 65, 84, 86, 116, 122, 123, 125, 140, 146, 163, 166, 175, 183, 186, 187, 206, 216, 219, 236, 242, 243, 245, 246, 249, 263, 264, 267, 272, 279, 284, 294, 329, 330, 340, 357, 363, 370, 371, 373, 376, 378, 382, 384, 389, 413, 414, 415, 417, 425, 431, 503, 644, 698, 714, 789, 831, 886, 910, 991, 995, 998, 1002, 1004, 1006, 1010, 1015, 1017, 1023, 1026], "handbook": [721, 741, 1002], "handi": [82, 103, 352, 353, 377, 1049], "handk": 1049, "handl": [0, 2, 43, 48, 103, 140, 143, 147, 149, 150, 154, 191, 198, 245, 246, 264, 272, 277, 279, 287, 289, 290, 297, 316, 319, 326, 351, 353, 358, 363, 368, 370, 376, 377, 378, 385, 388, 390, 415, 416, 418, 497, 545, 578, 582, 583, 589, 590, 592, 611, 636, 647, 648, 653, 659, 660, 661, 662, 663, 669, 676, 677, 679, 682, 721, 789, 869, 878, 879, 905, 906, 910, 917, 921, 950, 958, 961, 999, 1002, 1003, 1004, 1005, 1008, 1010, 1017, 1018, 1021, 1022, 1026, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "handle_data": 47, "handle_endtag": 47, "handle_starttag": 47, "handle_unknown": [43, 103, 139, 143, 154, 187, 188, 241, 249, 251, 253, 316, 320, 323, 878, 879, 1012, 1037, 1041, 1045, 1046], "handler": 1044, "handler_map": 297, "handlerpathcollect": 297, "handletextpad": 356, "handpick": 239, "handprint": 373, "handwritten": [51, 71, 80, 85, 90, 92, 94, 97, 139, 166, 183, 231, 232, 234, 236, 243, 258, 268, 300, 307, 308, 329, 330, 352, 369, 408, 415, 447, 503, 542, 545, 550, 567, 689, 690, 691, 692, 693, 705, 706, 718, 738, 794, 796, 854, 866, 875, 885, 898, 999, 1005, 1023, 1028], "hang": [376, 1043, 1044], "hank": 1036, "hanmin": [0, 397, 1040, 1041, 1042, 1043, 1044], "hann": 1033, "hanna": [1037, 1038, 1044], "hannah": [1043, 1045, 1047], "hannel": [1041, 1042], "hansen": 1041, "hansin": [1047, 1048], "hanu\u0161": 1050, "hanxiang": [680, 998], "hao": [1044, 1045, 1047, 1048], "haoi": 1050, "haoran": 1041, "haoyin": [1044, 1046, 1047], "happen": [2, 44, 64, 139, 200, 264, 310, 316, 352, 359, 363, 364, 374, 375, 376, 380, 381, 382, 388, 390, 391, 394, 402, 408, 410, 412, 415, 437, 516, 573, 659, 786, 883, 885, 905, 998, 1002, 1003, 1017, 1022, 1041, 1045, 1046, 1048, 1049, 1050, 1051], "happi": [186, 264, 351, 388, 391, 819, 820], "haqu": [1035, 1036, 1037], "harabasz": [2, 711], "harabaz": 1039, "hard": [48, 212, 239, 243, 270, 272, 365, 375, 388, 390, 407, 408, 413, 416, 535, 542, 570, 677, 907, 908, 909, 910, 911, 998, 1015, 1017, 1018, 1022, 1042, 1043], "hardcod": [440, 454, 1041], "harder": [279, 280, 314, 371, 375, 378, 384, 388, 408, 516, 562, 563], "hardest": 396, "hardin": 112, "hardli": [88, 608, 609], "hardwar": [57, 333, 353, 363, 364, 371, 374, 388, 394, 402, 404, 1021, 1047, 1048], "hare": 998, "harfouch": 1049, "harikrishnan": 1035, "harizo": [1039, 1040], "harm": [351, 378, 416, 796], "harmanan": [1050, 1051], "harmon": [43, 72, 352, 408, 536, 542, 730, 731, 737, 784, 796, 1002], "haroldfox": [1041, 1042], "harper": 1040, "harri": [1037, 1039, 1045, 1046], "harsanyi": 1049, "harsh": [425, 437, 469, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 611, 659, 667, 669, 675, 676, 677, 800, 823, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 852, 855, 862, 900, 901, 905, 907, 910, 913, 915, 1043, 1045, 1048], "harshit5674": 1048, "hart": [373, 996, 1041], "hartong": 1044, "harutaka": 1046, "harvest": 316, "harwar": 388, "has_fit_paramet": [2, 385], "hasan": 1048, "hasattr": [79, 89, 95, 113, 132, 142, 230, 243, 305, 312, 351, 390, 423, 427, 433, 962, 1043], "haseeb": [1046, 1047], "hash": [2, 47, 52, 133, 183, 352, 353, 363, 365, 368, 376, 379, 388, 415, 515, 545, 558, 567, 582, 583, 590, 641, 840, 966, 994, 1023, 1028, 1034, 1037, 1040], "hashabl": [390, 873, 876, 1013], "hashcode55": 1039, "hasher": [152, 353, 416], "hashingvector": [2, 47, 353, 365, 416, 489, 589, 591, 592, 1034, 1040, 1041, 1042, 1043, 1046], "hashlib": 47, "hasil": 1037, "hasn": 399, "hassaan": [1041, 1042], "hassan": 1046, "hassen": 1033, "hassoun": 1048, "hasti": [2, 134, 137, 138, 148, 168, 200, 269, 373, 412, 415, 520, 521, 554, 560, 561, 629, 657, 722, 724, 725, 835, 852, 898, 913, 914, 992, 996, 998, 1003, 1009, 1014, 1016, 1018], "hat": [112, 129, 266, 270, 295, 322, 374, 406, 410, 414, 415, 993, 998, 999, 1002, 1004, 1006], "hathidara": 1045, "hatwar": [1041, 1042], "hauck": 1039, "hausamann": [1041, 1042], "haussler": 178, "hav": 396, "have": [0, 2, 25, 43, 44, 46, 47, 48, 50, 51, 52, 53, 61, 62, 63, 64, 72, 74, 77, 78, 80, 81, 83, 86, 88, 90, 93, 95, 97, 98, 102, 103, 109, 111, 116, 118, 125, 134, 141, 142, 143, 144, 146, 149, 164, 165, 168, 170, 171, 175, 176, 177, 182, 185, 186, 187, 188, 189, 191, 193, 198, 212, 213, 214, 216, 230, 236, 239, 241, 246, 247, 249, 250, 256, 257, 258, 260, 263, 264, 270, 271, 273, 276, 277, 283, 284, 285, 287, 290, 292, 293, 296, 297, 310, 315, 316, 317, 319, 321, 322, 326, 330, 331, 332, 337, 343, 344, 345, 347, 351, 352, 358, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 493, 495, 496, 497, 509, 510, 515, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 688, 689, 690, 691, 692, 693, 700, 705, 706, 712, 713, 716, 721, 727, 732, 737, 757, 758, 759, 760, 783, 786, 787, 793, 796, 798, 799, 800, 801, 804, 805, 806, 807, 812, 815, 819, 823, 824, 826, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 931, 933, 935, 937, 938, 949, 976, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "havelabeleddatado": 396, "haversin": [2, 303, 414, 700, 763, 765, 1005, 1042, 1045], "haversine_dist": [2, 763, 1042], "haversinedist": 700, "hawaii": 175, "haxbi": 0, "haya": 1047, "hayashi": 1041, "hbgt": 149, "hd": 51, "hdb": [88, 446], "hdbscan": [2, 71, 79, 82, 98, 183, 243, 444, 513, 885, 992, 1021, 1023, 1027, 1028, 1049, 1050, 1051], "hdbscan_min_cluster_s": 79, "hdbscan_min_sampl": 79, "hdf5": 370, "hdl": [168, 373], "hdmetor": 1039, "he": [376, 727, 757, 862, 863, 895, 896, 1002, 1040, 1047, 1048], "head": [0, 52, 63, 103, 175, 186, 200, 202, 230, 253, 260, 316, 319, 324, 376, 384, 397, 413, 1026, 1038, 1039, 1048, 1049, 1050, 1051], "head_width": 63, "header": [54, 102, 271, 351, 352, 371, 374, 416, 488, 489, 801, 804, 805, 815], "heali": 408, "health": 327, "heap": 450, "heapq": 463, "heard": 376, "heart": 249, "heat": [154, 340, 408, 452, 462, 696], "heatingqc": 154, "heatmap": [187, 189, 193, 198, 281, 324, 340, 633, 1009], "heatmap_kw": 633, "heatmaps_": 633, "heavei": 1041, "heavi": [214, 388, 405, 1022], "heavier": [129, 410, 998], "heavili": [202, 363, 364, 376, 384, 650, 656, 779, 1019], "heavy_rain": [43, 187], "hebei": 408, "hedlund": 1049, "hedyati": 1037, "hee": [1040, 1043], "heer": 1044, "hegd": 1050, "heidelberg": [175, 408, 413, 536, 697, 727, 757, 1002], "height": [47, 54, 86, 123, 143, 144, 168, 310, 316, 326, 351, 414, 446, 494, 495, 507, 587], "heightpet_catpet_dogf64f64f64": 326, "heikki": 1014, "heilman": [1037, 1038], "heitz": 316, "held": [43, 47, 103, 127, 147, 188, 220, 257, 273, 278, 289, 412, 415, 560, 561, 562, 563, 702, 801, 804, 805, 815, 862, 863, 875, 991, 992, 1001, 1010], "helder": [1037, 1046, 1047], "heldout": 219, "heldout_scor": 145, "helen": 324, "heli": 1040, "hello": [376, 384, 962, 966], "helloifeven": 962, "helm": 1051, "helmu": 1037, "help": [0, 41, 43, 48, 50, 88, 102, 106, 125, 130, 187, 198, 230, 232, 264, 271, 273, 283, 287, 308, 337, 340, 352, 353, 359, 363, 364, 376, 377, 378, 379, 380, 381, 382, 384, 385, 390, 391, 393, 402, 408, 409, 412, 416, 418, 432, 537, 578, 628, 651, 655, 666, 686, 687, 693, 715, 841, 913, 914, 915, 916, 992, 996, 997, 999, 1001, 1002, 1004, 1006, 1012, 1013, 1018, 1020, 1021, 1022, 1025, 1026, 1039, 1040, 1041, 1044, 1047, 1051], "helper": [44, 45, 123, 230, 281, 369, 378, 379, 389, 390, 412, 468, 576, 903, 990, 1033, 1040, 1041, 1042, 1046], "helvetica": [917, 919], "heme": 1050, "hempstalk": 1040, "henc": [72, 93, 104, 186, 216, 243, 264, 279, 340, 351, 352, 363, 371, 378, 380, 382, 390, 394, 408, 412, 415, 416, 487, 509, 540, 542, 543, 544, 564, 591, 644, 647, 653, 661, 663, 673, 688, 705, 706, 710, 716, 732, 758, 787, 796, 817, 820, 821, 840, 841, 842, 843, 844, 880, 958, 999, 1001, 1002, 1003, 1008, 1009, 1012, 1022, 1040, 1041, 1044, 1045, 1047], "hendrik": [0, 397, 1033, 1036, 1037, 1038, 1039], "henri": [1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048], "henrymooresc": [1047, 1048], "hepe": [680, 998], "here": [43, 47, 48, 51, 52, 53, 55, 61, 64, 90, 91, 99, 109, 113, 118, 122, 123, 125, 127, 128, 130, 134, 137, 140, 143, 147, 149, 154, 165, 168, 170, 178, 179, 186, 187, 188, 191, 193, 198, 202, 206, 212, 216, 218, 227, 228, 230, 232, 234, 239, 244, 246, 249, 250, 256, 257, 258, 263, 264, 267, 268, 270, 272, 273, 275, 277, 279, 280, 282, 283, 284, 287, 290, 292, 299, 302, 306, 307, 308, 312, 315, 321, 323, 326, 329, 331, 340, 344, 347, 349, 353, 355, 357, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 381, 382, 384, 388, 389, 399, 402, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 421, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 452, 464, 472, 475, 537, 539, 540, 544, 545, 564, 568, 569, 570, 571, 582, 583, 585, 589, 592, 595, 603, 629, 631, 648, 652, 654, 656, 662, 664, 666, 674, 676, 690, 692, 696, 700, 713, 727, 757, 795, 800, 801, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 832, 841, 845, 846, 869, 877, 880, 883, 886, 897, 898, 908, 967, 991, 994, 998, 999, 1000, 1001, 1002, 1005, 1008, 1012, 1014, 1015, 1016, 1017, 1021, 1022, 1025, 1026, 1033, 1041, 1046], "hereaft": 391, "hereund": 1008, "herilalaina": [1040, 1041, 1043], "hermano": [1048, 1049], "hermida": [1042, 1046], "hernandez": 1002, "hern\u00e1ndez": 1002, "hero": [410, 421, 475], "herrou": 1047, "hershei": 1002, "hertel": 1050, "herv": 1037, "hervieu": 1033, "herv\u00e9": 1037, "heryanto": 1040, "hesit": 376, "hessian": [232, 233, 234, 415, 562, 563, 649, 659, 660, 670, 681, 690, 694, 998, 1006, 1027, 1028, 1048], "hessian_tol": [690, 694], "heterogen": [43, 47, 48, 61, 88, 101, 103, 183, 187, 212, 253, 315, 319, 368, 370, 388, 464, 488, 542, 582, 592, 714, 865, 869, 905, 999, 1009, 1012, 1021, 1023, 1028, 1037, 1041, 1043, 1044, 1051], "heteroscedast": [120, 127, 146, 214, 413, 881, 893], "heteroschedast": 1002, "heuer": 1036, "heurist": [51, 54, 145, 249, 351, 364, 408, 417, 449, 452, 461, 462, 509, 510, 538, 540, 547, 677, 678, 679, 692, 696, 804, 805, 907, 908, 909, 910, 911, 936, 999, 1000, 1005, 1016, 1018, 1026, 1033, 1034, 1038, 1042, 1045, 1046], "hexbin": 243, "hexdigest": 47, "hgbdt": 140, "hgbdt_model": 187, "hgbdt_model_without_interact": 187, "hgbdt_preprocessor": 187, "hgbt": [140, 149, 415], "hgbt_cst": 149, "hgbt_no_cst": 149, "hgbt_quantil": 149, "hhu": [650, 1042], "hi": [0, 409, 1002], "hibon": 1040, "hida": [1048, 1049], "hidden": [43, 187, 307, 308, 376, 384, 405, 413, 861, 862, 863, 1006, 1007, 1021, 1033, 1044], "hidden_layer_s": [187, 250, 305, 307, 862, 863, 1006], "hide": [52, 78, 376, 384, 840, 841, 842, 843, 844, 1036, 1041, 1049], "hideaki": 1047, "hierarch": [2, 53, 59, 71, 74, 75, 79, 80, 85, 86, 87, 89, 90, 183, 189, 236, 323, 358, 390, 416, 441, 443, 445, 446, 505, 513, 515, 523, 531, 548, 732, 858, 885, 1019, 1022, 1023, 1027, 1028, 1033, 1036, 1037, 1049], "hierarchi": [76, 189, 376, 450, 456, 463, 1007], "higgin": [1050, 1051], "high": [0, 37, 43, 48, 50, 51, 62, 64, 67, 72, 75, 79, 82, 88, 90, 95, 98, 102, 106, 111, 112, 122, 123, 137, 139, 140, 141, 146, 147, 149, 150, 152, 168, 170, 176, 182, 185, 187, 188, 189, 198, 208, 213, 214, 216, 226, 232, 233, 234, 239, 243, 255, 261, 268, 272, 276, 277, 296, 297, 305, 307, 312, 314, 315, 316, 317, 325, 332, 337, 339, 340, 351, 352, 357, 363, 371, 373, 376, 381, 384, 385, 388, 389, 405, 406, 407, 408, 412, 414, 415, 416, 417, 418, 444, 447, 449, 450, 452, 469, 482, 483, 484, 554, 555, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 645, 671, 672, 680, 690, 693, 694, 727, 732, 743, 747, 757, 790, 793, 809, 811, 845, 846, 850, 879, 880, 884, 886, 907, 909, 910, 913, 914, 915, 916, 970, 991, 996, 997, 998, 999, 1001, 1002, 1005, 1006, 1008, 1010, 1012, 1014, 1017, 1018, 1019, 1021, 1022, 1033, 1034, 1036, 1037, 1041, 1044, 1045, 1046, 1047, 1048], "high_cardin": 316, "high_cardinality_featur": 316, "high_cardinalityindex": 316, "high_i": 208, "high_precision_cv_result": 268, "high_recall_cv_result": 268, "high_x": 208, "higher": [43, 52, 90, 111, 123, 127, 134, 137, 139, 140, 146, 150, 166, 170, 172, 177, 178, 186, 187, 188, 191, 209, 212, 213, 216, 230, 236, 237, 261, 263, 264, 268, 270, 273, 285, 295, 315, 340, 344, 351, 352, 353, 357, 359, 363, 371, 374, 378, 405, 407, 408, 410, 415, 417, 418, 419, 444, 448, 449, 471, 478, 510, 533, 540, 544, 549, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 574, 589, 592, 608, 609, 620, 628, 632, 636, 638, 647, 648, 653, 654, 661, 662, 663, 664, 677, 679, 680, 705, 725, 729, 753, 786, 798, 801, 804, 805, 807, 815, 822, 824, 829, 832, 851, 854, 880, 897, 898, 899, 905, 906, 907, 908, 909, 910, 911, 918, 994, 998, 999, 1001, 1002, 1005, 1009, 1012, 1016, 1017, 1034, 1039, 1041, 1048, 1050], "highest": [2, 55, 63, 113, 164, 168, 216, 268, 270, 281, 321, 351, 376, 388, 406, 408, 412, 415, 417, 437, 556, 558, 565, 593, 596, 597, 599, 600, 601, 604, 605, 607, 636, 638, 727, 757, 795, 798, 801, 804, 805, 815, 902, 913, 951, 991, 998, 1002, 1003, 1006, 1016, 1018, 1045], "highest_protocol": 402, "highli": [43, 48, 64, 104, 111, 112, 122, 130, 150, 198, 208, 217, 264, 270, 273, 279, 306, 344, 352, 363, 364, 376, 382, 388, 406, 408, 412, 415, 416, 452, 462, 497, 564, 672, 693, 813, 815, 861, 924, 998, 1002, 1005, 1006, 1008, 1016, 1017, 1020, 1021], "highlight": [43, 54, 88, 103, 111, 118, 132, 138, 139, 141, 151, 168, 170, 171, 176, 181, 182, 187, 188, 191, 212, 213, 214, 230, 241, 246, 250, 251, 252, 253, 264, 265, 282, 284, 292, 314, 316, 332, 351, 353, 376, 380, 381, 384, 388, 418, 443, 446, 447, 464, 467, 490, 491, 497, 502, 503, 505, 513, 516, 522, 525, 539, 542, 562, 563, 565, 566, 568, 600, 603, 629, 631, 633, 635, 641, 647, 649, 653, 659, 670, 681, 689, 698, 702, 703, 718, 719, 733, 743, 749, 779, 789, 796, 800, 801, 802, 804, 805, 807, 815, 823, 824, 827, 828, 831, 847, 849, 866, 870, 875, 878, 879, 880, 884, 885, 886, 902, 903, 905, 910, 913, 914, 944, 999, 1002, 1010, 1012, 1017, 1023, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "highlight_min": [146, 202], "higuera": 370, "hila": 408, "hilbert": [217, 871, 994, 1012], "hilferti": 111, "hill": [408, 448, 461, 1043], "him": 416, "himanshu": [1044, 1047], "hind": 1047, "hinder": 1043, "hing": [2, 62, 219, 222, 224, 278, 337, 338, 342, 344, 390, 667, 677, 736, 905, 912, 998, 1016, 1017], "hinge_loss": [2, 344, 1002, 1037, 1045, 1046], "hinrich": 413, "hint": [186, 363, 377, 381, 399, 448, 1002], "hinton": [693, 854, 861, 862, 863, 999, 1005, 1006, 1007], "hintz": 1039, "hiramatsu": 1050, "hirofumi": [1044, 1045], "hirsch": 1041, "hirschberg": [408, 718, 738, 796], "hirzel": 1046, "hispan": 186, "hist": [43, 62, 64, 86, 107, 136, 140, 212, 214, 243, 249, 264, 276, 295, 310, 314, 316, 323, 326, 415], "hist_drop": 143, "hist_n": 143, "hist_nbin": 310, "hist_no_interact": 324, "hist_one_hot": 143, "hist_ordin": 143, "hist_quantil": 323, "hist_x0": 310, "hist_x1": 310, "histgradientboost": 1045, "histgradientboostingclassifi": [2, 139, 140, 264, 319, 320, 321, 322, 324, 326, 364, 388, 402, 560, 565, 633, 634, 992, 1021, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "histgradientboostingclassifierhistgradientboostingclassifi": 264, "histgradientboostingclassifierifittedhistgradientboostingclassifi": 264, "histgradientboostingregressor": [2, 43, 46, 52, 135, 140, 143, 146, 147, 149, 151, 154, 181, 187, 212, 316, 319, 320, 321, 322, 324, 325, 326, 388, 415, 561, 566, 633, 634, 636, 992, 1009, 1021, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "histgradientboostingregressor__interaction_cst": 187, "histgradientboostingregressor__max_depth": 143, "histgradientboostingregressor__max_it": 143, "histgradientboostingregressorhistgradientboostingregressor": [154, 316], "histgradientboostingregressorifittedhistgradientboostingregressor": [151, 324], "histogram": [2, 52, 62, 64, 86, 133, 135, 139, 143, 144, 146, 147, 151, 183, 212, 220, 243, 269, 271, 276, 295, 310, 321, 323, 325, 326, 406, 490, 497, 560, 561, 562, 563, 565, 566, 633, 643, 743, 749, 759, 760, 791, 801, 806, 822, 828, 831, 994, 1000, 1012, 1023, 1027, 1028, 1045, 1048, 1050], "histor": [51, 212, 264, 999, 1022], "histori": [51, 380, 560, 561, 1033], "hit": [214, 382], "hitesh": 1045, "hjortkj\u00e6r": 1047, "hkey_local_machin": 394, "hline": 122, "hlle": 999, "hmasdev": 1047, "hmc": 51, "hmm": [1033, 1034, 1035, 1036, 1038], "hmmlearn": 1021, "hn": 382, "hnyk": [1039, 1040], "ho": [415, 556, 557, 1002, 1038, 1041, 1042, 1047], "hoang": [1042, 1043], "hobson": 1039, "hoc": [167, 168, 183, 262, 264, 273, 287, 327, 332, 390, 407, 497, 659, 817, 823, 828, 866, 885, 1023], "hochberg": [596, 1039, 1040], "hochreit": [405, 720], "hockei": [57, 371], "hoctor": 1045, "hoda1394": 1045, "hoenig": 1033, "hoesli": 415, "hoffman": [413, 537, 1038, 1045], "hogan": 1041, "hoh": 1041, "hold": [0, 47, 52, 63, 64, 212, 216, 246, 264, 271, 358, 369, 376, 377, 378, 390, 406, 408, 412, 415, 416, 418, 504, 558, 562, 565, 590, 633, 634, 635, 737, 801, 804, 805, 815, 841, 872, 873, 878, 879, 886, 889, 913, 915, 992, 996, 1002, 1006, 1016, 1017, 1018, 1041, 1045, 1051], "holdgraf": 1041, "holdselig": 416, "hole": [183, 231, 232, 237, 531, 693, 694, 1023, 1047], "holger": 1040, "holidai": [43, 187], "holm": [836, 1003, 1050], "holman": 1048, "holmstr\u00f6m": 1035, "holohan": [1048, 1050], "holt": [0, 398, 1033], "holub": 535, "home": [0, 2, 7, 51, 52, 154, 174, 176, 178, 179, 240, 256, 308, 324, 371, 374, 384, 394, 486, 492, 500, 680, 1026], "homebrew": [379, 394], "homepag": [371, 531, 1018], "homm": 1048, "homo": 91, "homogen": [2, 72, 73, 74, 79, 80, 82, 88, 91, 352, 371, 388, 390, 410, 415, 418, 446, 615, 705, 718, 732, 737, 738, 758, 796, 999, 1000, 1002, 1042], "homogeneity_completeness_v_measur": [2, 408, 1042], "homogeneity_scor": [2, 73, 82, 91, 352, 408, 718, 737, 796, 1002], "homomorph": 1021, "homoscedast": [127, 242, 314, 1002, 1041], "homoschedast": 1002, "honda": 51, "honei": 996, "hong": [1039, 1041, 1045, 1046, 1047, 1049, 1051], "hongh": 1041, "hongkahjun": 1040, "honglu": 1043, "hongshaoyang": 1048, "honl": [1045, 1046], "honolulu": 1002, "honor": 316, "hood": [402, 998, 1017], "hoover": [1038, 1039, 1040, 1042], "hope": [30, 44, 176, 230, 390, 1042], "hopefulli": [273, 384, 1033], "hopfensperg": [1050, 1051], "hopper": 1038, "horizont": [66, 120, 232, 244, 310, 313, 381, 390, 464, 516, 698, 702], "horizontal_distance_to_hydrologi": 491, "horizontalalign": [51, 63, 67, 75, 79, 95, 239, 255, 305, 312], "hornik": 636, "hornstein": 1048, "horrel": 1040, "hoshia": 1047, "hossein": [1041, 1042, 1043], "host": [0, 140, 325, 351, 371, 376, 380, 384, 385, 492, 898, 1049], "hot": [2, 43, 103, 139, 154, 186, 212, 279, 311, 312, 316, 321, 340, 390, 415, 416, 552, 567, 582, 649, 659, 660, 670, 681, 868, 870, 872, 873, 876, 878, 879, 886, 998, 1012, 1041, 1047, 1048], "hot_r": [51, 310], "hotel": 1026, "hotspot": 382, "hour": [43, 149, 186, 187, 326, 376, 382, 497, 999, 1020], "hour_co": 43, "hour_df": 43, "hour_sin": 43, "hour_workday_interact": 43, "hourli": [43, 149, 186], "hourly_wag": 185, "hous": [2, 107, 144, 154, 181, 182, 264, 310, 321, 369, 490, 1028], "house_pric": [107, 154], "houseag": [310, 321, 371, 490], "household": 371, "housestyl": [143, 154], "hover": 326, "hover_data": [140, 271], "how": [0, 43, 44, 46, 47, 48, 49, 52, 58, 59, 62, 63, 64, 68, 69, 72, 83, 84, 85, 86, 90, 93, 101, 102, 103, 106, 109, 111, 116, 129, 134, 135, 138, 142, 143, 144, 146, 147, 149, 152, 154, 165, 166, 177, 183, 186, 187, 188, 189, 191, 195, 201, 202, 203, 209, 213, 214, 215, 216, 219, 220, 226, 230, 236, 237, 241, 244, 246, 248, 249, 250, 252, 261, 264, 265, 266, 268, 270, 271, 272, 277, 279, 280, 282, 284, 285, 289, 290, 292, 293, 294, 296, 297, 302, 307, 315, 317, 320, 321, 322, 325, 326, 337, 338, 340, 343, 344, 347, 351, 352, 355, 357, 358, 363, 364, 365, 371, 374, 375, 377, 378, 379, 381, 384, 389, 390, 391, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 422, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 505, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 623, 624, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 705, 721, 758, 793, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 985, 991, 992, 996, 997, 998, 999, 1001, 1002, 1008, 1009, 1010, 1012, 1014, 1015, 1017, 1018, 1020, 1022, 1026, 1028, 1033, 1035, 1038, 1044, 1047, 1048, 1049], "howel": 1040, "howev": [0, 43, 44, 46, 52, 53, 61, 62, 64, 72, 81, 82, 86, 88, 93, 104, 107, 109, 113, 115, 125, 127, 137, 139, 140, 143, 146, 147, 154, 165, 168, 170, 175, 176, 187, 188, 195, 202, 212, 216, 233, 236, 237, 239, 245, 246, 249, 264, 270, 277, 283, 284, 285, 287, 289, 290, 295, 306, 310, 321, 327, 344, 347, 351, 352, 357, 359, 363, 364, 365, 370, 371, 373, 375, 376, 378, 382, 384, 388, 390, 399, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 440, 443, 447, 449, 451, 454, 459, 497, 509, 533, 542, 552, 568, 582, 583, 584, 590, 607, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 631, 633, 634, 639, 644, 656, 657, 673, 688, 693, 696, 701, 764, 766, 801, 803, 804, 805, 815, 818, 821, 828, 832, 833, 844, 862, 863, 868, 877, 878, 883, 907, 908, 910, 927, 954, 970, 991, 992, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1016, 1017, 1018, 1042, 1043, 1045, 1046, 1049], "hoyer": [413, 1036], "hp": 51, "hpq": 51, "hrishikesh": [1034, 1035], "hristo": [1041, 1048], "hsiang": [659, 1037], "hsieh": 1039, "hspace": [45, 53, 54, 79, 95, 120, 230, 239, 255, 257, 258, 261, 295, 321, 330, 337], "hstack": [53, 69, 77, 156, 164, 237, 248, 265, 343, 412, 864], "hsuan": 1038, "ht2001": 1002, "htf": 415, "htm": [913, 914], "html": [2, 43, 47, 51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 191, 195, 240, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 371, 373, 376, 377, 379, 380, 384, 409, 412, 416, 422, 487, 509, 510, 659, 840, 844, 943, 944, 945, 1000, 1021, 1022, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "htmledit": [840, 844, 1000], "htmlparser": 47, "htsedebenham": 1048, "http": [43, 45, 47, 51, 52, 55, 61, 103, 168, 191, 212, 220, 228, 230, 237, 284, 287, 289, 290, 307, 370, 371, 373, 374, 376, 380, 381, 382, 384, 388, 390, 394, 408, 412, 417, 442, 449, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 509, 510, 511, 531, 532, 535, 538, 542, 596, 637, 642, 645, 650, 659, 665, 667, 668, 669, 672, 677, 680, 683, 684, 686, 687, 693, 696, 706, 722, 724, 725, 759, 760, 770, 840, 842, 844, 847, 848, 853, 854, 855, 856, 861, 883, 898, 899, 900, 913, 914, 943, 944, 998, 1000, 1002, 1015, 1018, 1043], "hu": [1038, 1041, 1043], "hua": [564, 1008], "huang": [371, 659, 1039, 1044], "huangk10": 1044, "huard": 1033, "huber": [25, 196, 222, 415, 561, 650, 677, 679, 1016, 1033, 1035, 1036, 1045], "huberlossfunct": 1046, "huberregressor": [2, 87, 170, 183, 192, 210, 216, 217, 218, 317, 525, 671, 672, 673, 679, 680, 998, 1023, 1039, 1040, 1041, 1042], "hubert": [408, 706, 716, 787], "hubert1985": 706, "hudson": 324, "hue": [126, 149, 260, 270, 315, 373], "huerta": 1043, "hug": [0, 168, 397, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "huge": [214, 217, 363, 382, 628, 1036], "hugh": [880, 1035, 1046], "hugo": [45, 371, 1039, 1044, 1045, 1046, 1047], "hugorichard": 1045, "hugu": 1037, "hui": [200, 539, 541, 548, 657, 998], "huiginn": 1033, "huilgolkar": [1034, 1035], "hujiahong726": 1049, "hull": 1050, "humahn": 1048, "human": [120, 187, 351, 376, 408, 413, 862, 863, 1002, 1009, 1042], "humid": [43, 187, 1009], "hunan": 1041, "hundr": [77, 145, 233, 314, 371, 412, 415, 562, 563, 999, 1044], "hunt": 1048, "hunter": 1042, "hurt": [363, 535, 1041], "husak": 1047, "huszar": 1026, "hut": [693, 999, 1038, 1040, 1043], "huynh": [1043, 1045], "hv": 416, "hvassard": 1047, "hwan": 1044, "hwang": 1039, "hybrid": [446, 650, 1021], "hye": 1044, "hyper": [2, 43, 64, 103, 140, 263, 264, 270, 275, 308, 340, 359, 378, 388, 389, 390, 403, 412, 415, 417, 468, 645, 646, 805, 813, 815, 861, 903, 997, 998, 1002, 1005, 1016, 1017, 1021, 1028, 1033, 1047], "hyperband": 991, "hyperbol": [344, 643, 862, 863, 1000, 1006], "hypercub": [239, 516], "hyperlink": 1035, "hyperparamet": [2, 103, 105, 106, 149, 170, 171, 177, 178, 181, 183, 187, 193, 198, 202, 226, 230, 239, 249, 262, 264, 268, 273, 275, 281, 282, 292, 308, 351, 378, 390, 408, 412, 413, 415, 418, 503, 536, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 644, 654, 660, 666, 674, 677, 729, 786, 801, 815, 910, 991, 996, 997, 998, 1001, 1002, 1004, 1006, 1008, 1016, 1022, 1023, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049], "hyperparameter_baseline_similar": 178, "hyperparameter_grid": 326, "hyperparameter_length_scal": 616, "hyperplan": [136, 173, 183, 192, 205, 221, 247, 273, 335, 336, 337, 338, 339, 340, 344, 345, 513, 632, 659, 660, 667, 669, 675, 676, 677, 678, 905, 907, 909, 910, 1016, 1017, 1023], "hyperspher": 372, "hypothes": 998, "hypothesi": [146, 270, 276, 412, 691, 695, 830, 999], "hypothet": 64, "hyunjin": 1033, "hyvarinen": [420, 534], "h\u00e9lion": 1044, "i": [0, 2, 8, 30, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 299, 300, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 338, 339, 340, 344, 345, 347, 348, 349, 351, 352, 353, 355, 356, 357, 359, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 389, 390, 391, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 947, 948, 949, 951, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 970, 971, 972, 973, 975, 976, 982, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "i_ax": 290, "i_dataset": [79, 95, 239], "i_j": 1010, "iain": [168, 373, 998], "iampat": 1041, "ian": [1035, 1037, 1042, 1043, 1045, 1048, 1049, 1051], "iasoon": 1047, "ibay": 1033, "ibieta": 1046, "ibm": [51, 57, 333, 353, 371], "ibn": 1033, "ibnukhsein": 1050, "ibraheem": 1042, "ibrahima": 1043, "ibraim": [1038, 1039, 1040], "ib\u00e1\u00f1ez": [1041, 1042, 1045], "ic": [47, 287, 321, 370, 373, 393, 501, 503, 511, 633, 634, 1028, 1045, 1046], "ica": [11, 122, 420, 1018, 1027, 1028], "ica_estim": 120, "icann": 697, "icassp": 1002, "icdm": [564, 1008], "icdmw": 408, "ice_lines_kw": 633, "icml": [62, 64, 406, 408, 416, 437, 439, 840, 842, 861, 1002, 1004, 1016, 1020], "icml03": 842, "icml09": [532, 538], "icon": [326, 378], "icyblad": 1040, "id": [2, 45, 52, 57, 230, 303, 358, 370, 371, 376, 384, 410, 412, 416, 422, 495, 496, 497, 917, 919, 944, 1041, 1042, 1045], "id3": [1024, 1028], "idea": [44, 86, 111, 112, 140, 168, 175, 186, 213, 232, 264, 295, 340, 355, 363, 364, 376, 381, 382, 410, 411, 412, 413, 414, 415, 417, 608, 609, 998, 999, 1002, 1005, 1008, 1020, 1026], "ideal": [212, 214, 230, 264, 267, 270, 277, 279, 280, 359, 375, 376, 377, 380, 381, 384, 388, 390, 406, 407, 727, 757, 991, 1001, 1016, 1017, 1022, 1025], "idelberg": 1050, "ident": [52, 57, 97, 145, 208, 212, 230, 239, 243, 334, 351, 371, 378, 390, 405, 408, 409, 410, 412, 418, 421, 438, 439, 452, 464, 465, 473, 475, 476, 479, 480, 481, 488, 504, 552, 560, 561, 565, 566, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 644, 680, 681, 700, 705, 706, 737, 786, 796, 803, 806, 816, 817, 820, 821, 847, 848, 854, 862, 863, 869, 870, 882, 894, 913, 914, 995, 996, 999, 1002, 1005, 1006, 1017, 1037, 1041, 1042, 1043, 1047, 1051], "identif": [371, 376, 408, 498, 991], "identifi": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 321, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 371, 375, 376, 381, 390, 407, 408, 409, 412, 415, 416, 446, 450, 457, 487, 497, 509, 510, 556, 557, 558, 559, 564, 565, 566, 567, 607, 644, 650, 700, 713, 775, 830, 851, 870, 900, 901, 991, 998, 1002, 1008, 1015, 1026, 1040, 1042, 1047, 1048], "idf": [2, 54, 57, 243, 351, 352, 353, 371, 413, 522, 545, 589, 590, 591, 592, 844, 852, 877, 991, 1000, 1004, 1012, 1033], "idf_": [416, 591, 592, 1041], "idier": [413, 539, 541, 548], "idiom": 382, "idl": 1044, "ido": [1048, 1049], "idpol": [212, 230], "idx": [50, 57, 88, 129, 136, 140, 142, 149, 155, 179, 187, 189, 198, 205, 211, 212, 221, 233, 264, 356, 409, 412], "idx_a": 279, "idx_avg_max_test_scor": 283, "idx_b": 279, "idx_r": 211, "idx_sort": 212, "idxmax": 347, "idxmin": 268, "ie": [75, 99, 121, 440, 705, 998, 1012], "ieee": [96, 110, 112, 373, 408, 410, 417, 421, 448, 475, 535, 564, 665, 686, 687, 726, 770, 998, 1002, 1008], "ieeexplor": 770, "ieic": [539, 541, 548], "iem": 659, "if_binari": [186, 253, 878, 1012, 1044], "if_delegate_has_method": [1046, 1047], "iff": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 876], "iforest": 249, "iforest_kw": 249, "iglesi": 1048, "ignacio": 1036, "ignor": [2, 43, 45, 47, 55, 79, 82, 88, 95, 103, 134, 139, 143, 151, 154, 187, 200, 212, 227, 240, 241, 246, 251, 253, 261, 306, 307, 315, 316, 320, 323, 344, 352, 364, 376, 378, 380, 382, 390, 394, 399, 408, 409, 415, 416, 426, 427, 430, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 460, 461, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 504, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 582, 583, 584, 589, 590, 591, 592, 598, 603, 604, 611, 612, 628, 629, 630, 631, 633, 634, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 708, 712, 714, 715, 727, 730, 731, 739, 756, 757, 764, 770, 775, 779, 784, 785, 788, 789, 798, 799, 800, 802, 803, 804, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 924, 938, 976, 985, 990, 998, 999, 1002, 1004, 1008, 1012, 1017, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "ignore_attribut": 370, "ignore_error": 87, "ignore_implicit_zero": [882, 894], "ignore_ti": [727, 757], "ignore_warn": [220, 312, 1039], "ignored_new_col": 409, "ignorerevsfil": 376, "igor": [1039, 1040, 1046], "ih": 295, "ii": [50, 121, 187, 219, 265, 373, 416, 583, 584, 590, 639, 667, 668, 868, 877, 998, 1012, 1020, 1050], "iid": 1041, "iii": [1047, 1050], "iijima": 1042, "iinfo": 1048, "ij": [270, 300, 405, 408, 413, 539, 541, 548, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 998, 999, 1002, 1004, 1007, 1012, 1017], "ijcnn": 1002, "ijcv": 1002, "ijet": 408, "ik": [998, 1002], "ikeda": 1045, "ikko": 1046, "il": [49, 665, 686, 687, 998, 1002], "ilambharathi": [1036, 1037], "ili": [1049, 1050], "ilic": 1046, "ilion": 1047, "iliya": 1048, "iljin": [1048, 1049], "ill": [75, 113, 217, 308, 471, 472, 478, 651, 652, 655, 656, 657, 683, 684, 998, 1001, 1043], "illustr": [48, 52, 60, 61, 63, 67, 69, 85, 89, 90, 102, 103, 106, 107, 109, 111, 116, 118, 122, 134, 137, 148, 149, 151, 153, 154, 163, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 183, 185, 187, 188, 191, 202, 212, 214, 216, 220, 222, 223, 225, 226, 229, 230, 232, 233, 235, 237, 239, 241, 242, 244, 245, 246, 248, 259, 264, 270, 277, 282, 284, 291, 299, 313, 315, 318, 319, 321, 327, 332, 340, 341, 345, 347, 348, 349, 352, 353, 359, 363, 373, 376, 381, 384, 389, 407, 411, 413, 415, 416, 516, 611, 612, 614, 615, 616, 620, 623, 624, 854, 991, 998, 1002, 1005, 1008, 1014, 1015, 1016, 1017, 1021, 1023, 1026], "iloc": [43, 149, 154, 186, 187, 230, 270, 293], "ilya": [1040, 1051], "im": [120, 130, 281, 294], "im_": 698, "im_kw": [698, 1047], "imacul": 1039, "imag": [2, 42, 45, 53, 58, 59, 68, 71, 74, 75, 76, 79, 80, 84, 87, 89, 91, 95, 100, 102, 119, 120, 125, 166, 168, 174, 183, 204, 233, 241, 244, 248, 268, 299, 307, 308, 320, 329, 330, 351, 352, 368, 369, 371, 373, 376, 381, 384, 390, 394, 401, 407, 408, 413, 441, 445, 452, 462, 494, 495, 496, 497, 503, 504, 507, 508, 535, 536, 538, 542, 584, 585, 586, 587, 588, 608, 609, 692, 698, 739, 831, 875, 998, 1002, 1003, 1005, 1007, 1014, 1018, 1021, 1023, 1026, 1028, 1033, 1036, 1041, 1042, 1046, 1048, 1049], "image_height": [584, 585, 588], "image_index": [329, 330], "image_nam": 507, "image_patch": 588, "image_reconstruct": 588, "image_s": 588, "image_shap": [120, 248], "image_width": [584, 585, 588], "imagebox": 233, "imageio": 370, "imagenet": [862, 863], "images_restor": 84, "imagin": [121, 170, 246, 344, 412, 413, 416, 998], "imamura": 1047, "imbal": [263, 273, 284, 412, 708, 730, 731, 739, 784, 785, 788, 789, 1002], "imbalanc": [212, 264, 273, 277, 279, 284, 352, 388, 406, 412, 704, 709, 788, 802, 806, 842, 1002, 1004, 1010, 1021], "imbert": [1040, 1042, 1045, 1047, 1050, 1051], "img": [44, 83, 99, 507, 587], "img_height": 584, "img_to_graph": [2, 80, 99, 416, 1036, 1046], "img_width": 584, "imit": 351, "immanuel": [0, 1033, 1034, 1038], "immedi": [88, 376, 388, 801, 815, 826, 827, 1041], "immens": 1026, "immensu": 1041, "immers": [691, 695], "immobil": 43, "immut": 402, "imp": 992, "imp_mean": [628, 631], "impact": [51, 52, 62, 71, 72, 77, 78, 97, 107, 134, 164, 183, 185, 186, 187, 194, 214, 216, 230, 249, 263, 264, 287, 293, 315, 324, 347, 352, 359, 363, 364, 369, 388, 391, 406, 408, 413, 447, 449, 537, 541, 548, 591, 667, 668, 669, 673, 675, 677, 678, 679, 693, 795, 801, 804, 805, 815, 828, 845, 846, 847, 848, 882, 894, 905, 906, 934, 949, 972, 975, 991, 1001, 1009, 1017, 1023, 1040, 1043, 1046], "imped": 384, "imperfect": [729, 786, 1002, 1035], "imperfectli": [704, 735, 1002], "implant": 59, "implement": [2, 13, 30, 45, 46, 52, 53, 55, 80, 89, 112, 120, 140, 149, 182, 189, 191, 198, 202, 209, 226, 230, 232, 239, 245, 246, 264, 268, 270, 279, 287, 289, 290, 292, 295, 313, 319, 320, 321, 322, 323, 325, 351, 353, 363, 364, 365, 370, 371, 373, 374, 376, 377, 378, 381, 382, 384, 385, 390, 394, 399, 404, 405, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 437, 442, 443, 444, 446, 447, 448, 449, 450, 475, 494, 497, 509, 533, 534, 535, 536, 537, 539, 542, 543, 544, 554, 555, 556, 558, 559, 562, 563, 564, 568, 573, 583, 589, 590, 592, 594, 598, 602, 611, 612, 633, 634, 641, 642, 646, 647, 654, 658, 659, 660, 664, 665, 669, 672, 673, 675, 676, 677, 678, 679, 685, 686, 687, 688, 689, 692, 693, 696, 708, 712, 721, 736, 739, 743, 779, 783, 789, 790, 798, 800, 801, 804, 805, 807, 815, 819, 820, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 850, 853, 855, 856, 861, 862, 863, 865, 887, 895, 896, 902, 905, 906, 907, 908, 909, 910, 911, 948, 949, 958, 961, 966, 970, 972, 991, 992, 994, 996, 998, 999, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1012, 1014, 1015, 1018, 1019, 1021, 1022, 1024, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "impli": [43, 170, 186, 351, 352, 353, 413, 415, 418, 474, 574, 583, 611, 612, 623, 736, 935, 998, 999, 1044], "implic": [359, 376], "implicit": [2, 212, 390, 415, 416, 573, 683, 684, 996, 1001, 1021, 1042], "implicitli": [353, 385, 415, 598, 633, 634, 847, 855, 884, 992, 994, 1009, 1012, 1017, 1051], "import": [2, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 372, 374, 375, 376, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 393, 394, 395, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 962, 963, 964, 965, 966, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1026, 1028, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1051], "importance_gett": [417, 594, 595, 598, 1045], "importances_mean": [141, 147, 188, 189, 319, 635, 1010], "importances_std": [141, 635, 1010], "important_word": 57, "importantli": [43, 53, 121, 176, 187, 191, 310, 376, 408, 1051], "importerror": [50, 86, 123, 290, 303, 384], "importlib": 1046, "impos": [74, 90, 151, 201, 207, 216, 316, 388, 408, 413, 415, 416, 528, 658, 998], "imposs": [146, 353, 1022], "impract": 910, "impress": 1026, "improp": [390, 1040], "improv": [0, 30, 43, 61, 62, 69, 109, 110, 113, 125, 130, 134, 135, 140, 142, 144, 145, 146, 148, 149, 154, 164, 182, 186, 191, 199, 212, 220, 230, 264, 271, 273, 287, 290, 293, 308, 315, 325, 343, 344, 352, 359, 364, 374, 379, 381, 382, 384, 385, 388, 390, 391, 402, 413, 415, 417, 449, 450, 532, 533, 535, 538, 539, 540, 542, 543, 544, 547, 555, 558, 559, 560, 561, 562, 563, 565, 566, 611, 612, 644, 653, 665, 667, 668, 669, 673, 674, 675, 676, 677, 679, 686, 688, 693, 730, 731, 784, 785, 788, 789, 854, 862, 863, 879, 881, 893, 913, 914, 916, 949, 991, 996, 998, 999, 1002, 1005, 1006, 1016, 1017, 1018, 1020, 1021, 1022, 1026, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "improvis": [50, 303], "impur": [147, 189, 358, 393, 415, 417, 554, 555, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 917, 919, 1018, 1028, 1038, 1039, 1040, 1041], "imput": [2, 103, 149, 154, 188, 241, 251, 253, 320, 323, 368, 380, 389, 390, 399, 409, 415, 490, 502, 566, 581, 628, 629, 630, 631, 640, 646, 673, 827, 848, 866, 930, 932, 1021, 1022, 1023, 1028, 1035, 1036], "imputation_const": 251, "imputation_mean": 251, "imputation_ord": [628, 1043], "imputation_sequence_": 628, "impute_estim": 181, "impute_scor": 182, "imran": [1035, 1036, 1037], "imread": 68, "imshow": [44, 45, 53, 68, 75, 80, 81, 83, 84, 86, 87, 91, 113, 120, 123, 130, 172, 173, 174, 178, 189, 204, 228, 233, 248, 281, 294, 308, 329, 330, 340, 348, 370, 633, 698, 1047], "in1d": 1040, "in_bodi": 47, "in_titl": 47, "in_top": 47, "in_topic_d": 47, "inaccess": 88, "inact": [353, 370, 376], "inadvert": [185, 390], "inadvis": 402, "inappropri": [371, 412, 418, 710, 822], "inbuilt": 412, "inc": [0, 102, 269, 992, 1014, 1026], "incap": 88, "incentiv": 380, "incept": 1022, "includ": [0, 11, 18, 43, 68, 70, 88, 111, 140, 143, 144, 145, 185, 186, 188, 198, 212, 216, 230, 246, 271, 287, 290, 306, 310, 322, 323, 325, 340, 345, 351, 353, 359, 363, 364, 370, 372, 374, 376, 377, 378, 380, 381, 382, 384, 385, 390, 391, 394, 402, 405, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 444, 446, 450, 456, 466, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 497, 501, 502, 503, 505, 506, 511, 535, 542, 558, 565, 575, 633, 639, 647, 648, 653, 661, 662, 663, 666, 682, 689, 690, 698, 714, 730, 731, 736, 738, 739, 772, 784, 785, 788, 796, 801, 803, 804, 805, 814, 815, 818, 821, 828, 831, 853, 855, 856, 857, 878, 879, 880, 884, 902, 905, 906, 913, 915, 917, 919, 931, 932, 935, 937, 941, 943, 944, 958, 991, 998, 1001, 1002, 1003, 1005, 1006, 1012, 1016, 1017, 1018, 1021, 1022, 1025, 1026, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "include_bia": [43, 193, 285, 880, 884, 1047], "include_boundari": [935, 1047], "include_self": [74, 79, 100, 696, 858, 859, 1037], "include_valu": 698, "inclus": [0, 376, 378, 384, 450, 456, 755, 787, 1002, 1003, 1033, 1047], "incom": [310, 371, 440], "incoming_count": 55, "incompat": [497, 992, 1041, 1042], "incomplet": [376, 394, 404, 408, 706, 796, 992, 999, 1037, 1039], "inconsist": [2, 390, 402, 416, 509, 510, 577, 907, 910, 935, 1008, 1017, 1028, 1033, 1038, 1039, 1040, 1041, 1043, 1046, 1048, 1049, 1050], "inconsistentversionwarn": [2, 402, 1049], "incorpor": [325, 376, 409, 415, 1001, 1021, 1026], "incorrect": [134, 185, 332, 359, 376, 408, 608, 609, 633, 634, 735, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "incorrectli": [195, 277, 415, 416, 554, 560, 562, 735, 741, 1002, 1034, 1039, 1041, 1042, 1044, 1049], "incr_mean_variance_axi": [2, 1039, 1045], "increas": [2, 43, 46, 54, 63, 72, 78, 88, 90, 91, 94, 107, 123, 134, 135, 137, 140, 142, 144, 149, 151, 164, 168, 170, 174, 175, 176, 186, 187, 191, 194, 196, 204, 212, 213, 214, 216, 230, 237, 243, 256, 257, 264, 270, 271, 272, 277, 283, 284, 305, 311, 312, 315, 321, 327, 330, 340, 347, 352, 353, 355, 363, 364, 365, 375, 384, 385, 390, 406, 408, 410, 413, 415, 416, 419, 440, 444, 446, 452, 463, 471, 472, 478, 533, 537, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 628, 636, 637, 638, 646, 651, 652, 655, 656, 657, 659, 660, 667, 668, 669, 677, 678, 679, 683, 684, 686, 687, 693, 707, 708, 713, 779, 783, 790, 804, 805, 834, 853, 855, 856, 857, 860, 862, 863, 879, 905, 913, 914, 915, 916, 949, 991, 993, 997, 998, 999, 1001, 1002, 1005, 1012, 1016, 1017, 1018, 1026, 1033, 1035, 1038, 1042, 1044, 1045, 1048, 1051], "increasing_": 636, "increasing_bool": 637, "increment": [2, 104, 119, 125, 126, 127, 128, 183, 273, 380, 382, 442, 447, 463, 505, 534, 535, 536, 537, 540, 542, 545, 603, 647, 659, 667, 807, 829, 837, 838, 840, 841, 842, 843, 844, 874, 875, 885, 905, 906, 976, 998, 1004, 1023, 1036, 1037], "incrementalpca": [2, 124, 365, 413, 534, 536, 540, 542, 545, 1037, 1040, 1041, 1043, 1044, 1047], "incur": [63, 620, 905, 1017, 1041], "ind": [53, 77, 145, 156, 352, 845, 846], "inde": [44, 46, 62, 64, 70, 74, 75, 86, 88, 91, 113, 116, 125, 134, 137, 167, 168, 170, 186, 188, 193, 198, 200, 202, 212, 214, 272, 273, 277, 279, 287, 290, 310, 315, 347, 352, 359, 363, 375, 381, 389, 390, 391, 408, 410, 415, 568, 569, 998, 1012, 1016, 1047], "indecisiveus": [1044, 1045], "indefinit": 380, "indent": [378, 967], "independ": [2, 32, 52, 62, 64, 72, 80, 121, 122, 124, 139, 142, 177, 187, 248, 249, 270, 273, 275, 279, 289, 310, 317, 319, 352, 359, 363, 364, 372, 378, 389, 390, 394, 402, 405, 406, 408, 409, 410, 411, 412, 416, 420, 449, 464, 488, 504, 516, 517, 518, 519, 521, 533, 534, 536, 538, 540, 541, 547, 548, 552, 553, 605, 608, 609, 626, 641, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 673, 674, 675, 676, 705, 706, 718, 737, 738, 756, 758, 796, 803, 830, 834, 836, 838, 839, 877, 881, 882, 883, 885, 889, 890, 891, 892, 894, 895, 896, 899, 907, 908, 909, 910, 911, 943, 991, 994, 996, 998, 999, 1002, 1003, 1004, 1007, 1009, 1012, 1017, 1018, 1027, 1028, 1033, 1034, 1039, 1041, 1043, 1048], "inder128": 1043, "inderjeet": 1044, "inderjit": [405, 453], "indeterminaci": 545, "index": [2, 51, 54, 55, 72, 73, 74, 75, 76, 82, 83, 91, 103, 104, 134, 139, 141, 149, 165, 168, 181, 185, 186, 187, 188, 189, 212, 216, 230, 250, 253, 256, 257, 261, 265, 268, 269, 270, 271, 273, 281, 282, 283, 284, 290, 310, 315, 316, 317, 323, 327, 329, 330, 352, 353, 371, 373, 374, 376, 378, 380, 385, 388, 390, 405, 409, 412, 413, 415, 416, 423, 443, 447, 448, 449, 450, 451, 453, 454, 457, 459, 460, 464, 467, 504, 510, 558, 559, 560, 561, 565, 566, 567, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 618, 633, 634, 641, 698, 705, 706, 713, 717, 719, 732, 739, 758, 780, 781, 787, 789, 795, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 831, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 878, 913, 914, 915, 916, 922, 953, 972, 975, 980, 981, 1002, 1004, 1005, 1006, 1016, 1018, 1021, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "index_alpha_path_a": 200, "index_alpha_path_b": 200, "index_map": 55, "indexerror": [1041, 1042], "indexhash": 641, "indexhash_": 641, "indian": 371, "indic": [2, 51, 57, 58, 62, 63, 92, 93, 99, 107, 116, 120, 126, 134, 139, 144, 175, 178, 182, 185, 187, 234, 243, 246, 263, 264, 272, 273, 276, 277, 290, 303, 329, 330, 333, 351, 352, 353, 358, 364, 371, 376, 377, 378, 380, 384, 385, 388, 390, 404, 405, 406, 408, 410, 412, 413, 415, 416, 419, 423, 428, 437, 440, 444, 450, 451, 452, 453, 455, 456, 457, 460, 464, 467, 472, 487, 509, 510, 512, 513, 514, 524, 533, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 582, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 621, 628, 629, 630, 631, 633, 634, 640, 647, 648, 651, 652, 653, 654, 655, 656, 662, 664, 666, 674, 676, 683, 684, 691, 693, 695, 697, 704, 708, 713, 714, 719, 720, 721, 723, 726, 729, 730, 731, 732, 735, 739, 740, 741, 742, 755, 772, 779, 780, 781, 782, 784, 785, 786, 788, 789, 793, 794, 795, 797, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 838, 839, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 869, 872, 876, 878, 886, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 921, 922, 927, 931, 932, 937, 953, 964, 965, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 992, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1009, 1012, 1013, 1016, 1017, 1022, 1033, 1034, 1035, 1036, 1037, 1038, 1041, 1043, 1044, 1046, 1048, 1049, 1050, 1051], "indicator_": [628, 629, 631], "indicator_matrix_": 1038, "indigo": 229, "indirect": [273, 377, 390], "indirectli": [230, 344], "indispens": 1026, "indistinguish": 310, "individu": [2, 43, 80, 93, 111, 133, 135, 137, 153, 154, 163, 166, 179, 183, 184, 186, 189, 209, 212, 230, 240, 249, 250, 264, 273, 275, 289, 319, 326, 327, 344, 347, 364, 377, 378, 380, 383, 385, 390, 393, 399, 405, 409, 412, 415, 416, 437, 452, 462, 464, 497, 502, 504, 510, 556, 557, 560, 561, 563, 564, 566, 568, 569, 570, 571, 604, 610, 611, 633, 634, 644, 646, 658, 659, 660, 669, 672, 673, 674, 675, 676, 677, 678, 679, 688, 713, 720, 729, 735, 751, 752, 786, 791, 792, 801, 815, 833, 837, 838, 840, 841, 842, 843, 844, 863, 866, 874, 875, 877, 878, 879, 882, 884, 885, 890, 891, 892, 905, 906, 1002, 1003, 1012, 1017, 1023, 1028, 1034, 1037, 1039, 1045, 1047, 1049], "indptr": [55, 290, 358, 976, 977, 978, 979, 980, 981, 982, 983, 984, 1041, 1049], "induc": [25, 63, 89, 186, 198, 204, 206, 210, 213, 227, 245, 249, 347, 353, 405, 413, 415, 446, 449, 540, 544, 554, 558, 559, 560, 561, 565, 566, 567, 644, 727, 757, 878, 913, 914, 915, 916, 995, 1002, 1016], "induct": [43, 71, 132, 146, 178, 183, 390, 408, 415, 422, 441, 513, 565, 628, 632, 900, 901, 962, 985, 998, 1015, 1023, 1035], "inductive_learn": 89, "inductivecluster": 89, "industri": [408, 1021], "ineffect": [314, 406, 1012, 1041, 1042], "ineffici": [2, 415, 443, 575, 833, 834, 1005, 1007], "inequ": [358, 390, 408, 443, 447, 459, 700, 999, 1000, 1005], "inertia": [90, 91, 94, 352, 408, 443, 447, 449, 452, 459, 460, 462, 463, 1044], "inertia_": [91, 94, 97, 443, 447, 449, 1044], "inf": [107, 173, 300, 385, 408, 418, 446, 450, 455, 456, 457, 461, 471, 472, 478, 554, 555, 560, 561, 594, 595, 598, 607, 608, 609, 620, 628, 636, 638, 649, 650, 651, 653, 670, 672, 673, 677, 678, 679, 681, 688, 729, 731, 747, 779, 786, 790, 861, 870, 877, 929, 930, 931, 932, 947, 1002, 1012, 1040, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1051], "infant": 1012, "infeas": [998, 1005, 1007], "infer": [25, 183, 184, 186, 208, 256, 260, 261, 270, 356, 370, 378, 388, 402, 412, 413, 492, 497, 509, 510, 516, 535, 537, 539, 541, 548, 550, 551, 554, 560, 561, 633, 636, 658, 710, 723, 724, 742, 786, 798, 799, 807, 824, 831, 841, 879, 886, 900, 901, 913, 914, 915, 916, 964, 992, 998, 1001, 1002, 1007, 1012, 1015, 1018, 1021, 1022, 1023, 1034, 1038, 1039, 1044, 1047, 1050], "inferencesess": 402, "inferenti": 89, "inferior": [441, 445, 1044], "infin": [2, 270, 347, 542, 683, 684, 713, 826, 912, 930, 1005], "infinit": [64, 213, 255, 273, 344, 363, 418, 446, 623, 624, 779, 798, 929, 931, 932, 994, 1001, 1012, 1017, 1041, 1043, 1046, 1047, 1048, 1050, 1051], "inflammatori": 371, "inflat": [90, 185, 186, 188, 408, 412, 1002, 1012], "inflect": 272, "influenc": [42, 48, 52, 111, 112, 134, 183, 186, 196, 245, 255, 278, 310, 317, 340, 344, 347, 357, 359, 365, 410, 413, 415, 431, 440, 454, 465, 482, 483, 484, 489, 502, 555, 557, 559, 561, 563, 566, 569, 571, 612, 629, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 677, 679, 680, 735, 751, 831, 838, 839, 847, 848, 855, 856, 863, 882, 883, 894, 906, 908, 911, 914, 916, 931, 991, 996, 997, 998, 1005, 1008, 1012, 1016, 1017, 1023, 1026, 1036, 1041, 1042], "influenti": [216, 352, 1026], "info": [2, 45, 77, 103, 120, 186, 187, 246, 264, 268, 373, 375, 380, 390, 416, 464, 497, 562, 563, 957], "inform": [2, 3, 43, 44, 47, 50, 51, 52, 53, 62, 64, 69, 70, 72, 73, 82, 86, 91, 99, 100, 102, 103, 116, 140, 141, 162, 164, 165, 167, 168, 170, 175, 183, 186, 187, 189, 191, 192, 193, 194, 198, 213, 216, 227, 229, 230, 246, 250, 257, 258, 260, 264, 265, 267, 270, 271, 272, 275, 277, 279, 283, 293, 296, 297, 300, 317, 322, 326, 343, 347, 351, 352, 353, 356, 358, 359, 363, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 382, 384, 388, 389, 390, 391, 399, 402, 405, 407, 412, 413, 415, 416, 417, 418, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 493, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 511, 516, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 608, 609, 610, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 696, 698, 702, 705, 706, 716, 727, 731, 744, 756, 757, 758, 787, 789, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 924, 958, 985, 990, 992, 994, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1016, 1018, 1022, 1023, 1025, 1026, 1033, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "informatik": 1002, "informed": 1002, "infrastructur": [307, 325, 1021, 1022], "infrequ": [878, 879, 886, 1002, 1033, 1047, 1048, 1049], "infrequent_categories_": [323, 325, 878, 879, 886, 1012], "infrequent_if_exist": [878, 1012], "infrequent_sklearn": [878, 1012], "infti": [230, 418, 620, 998, 1012, 1040], "ing": 416, "ingela": 1047, "ingest": 416, "ingredi": 418, "ingrid": 1043, "inher": [130, 208, 359, 408, 413, 564, 992, 994, 996, 997, 999, 1003], "inherit": [246, 376, 378, 389, 390, 422, 578, 677, 925, 941, 943, 954, 998, 1033, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1048, 1049, 1050], "inhibit": [419, 444], "inhomogen": [418, 615], "ini": 258, "init": [2, 54, 77, 91, 92, 94, 97, 187, 194, 232, 233, 235, 236, 237, 256, 258, 290, 352, 379, 384, 408, 413, 415, 443, 447, 449, 451, 453, 459, 460, 539, 541, 548, 549, 560, 561, 633, 634, 691, 693, 695, 854, 999, 1033, 1042, 1045, 1047, 1048, 1049], "init_": [560, 561], "init_param": [255, 258, 261, 798, 799], "init_s": [94, 352, 449], "init_size_": 1045, "init_tim": 258, "initi": [0, 46, 51, 55, 71, 77, 78, 90, 91, 93, 96, 97, 112, 147, 155, 156, 157, 171, 176, 183, 186, 194, 206, 227, 232, 233, 237, 254, 256, 257, 270, 290, 321, 331, 340, 352, 359, 364, 371, 376, 378, 384, 385, 388, 390, 408, 413, 415, 417, 418, 420, 442, 443, 447, 448, 449, 450, 451, 452, 453, 459, 460, 461, 462, 513, 516, 532, 533, 534, 538, 539, 541, 544, 546, 547, 548, 549, 554, 555, 560, 561, 564, 594, 608, 609, 611, 612, 620, 621, 628, 641, 646, 647, 648, 649, 653, 654, 659, 661, 662, 663, 664, 667, 668, 669, 670, 672, 677, 678, 679, 681, 682, 685, 691, 692, 693, 695, 696, 798, 799, 835, 854, 861, 862, 863, 901, 934, 948, 949, 970, 975, 976, 994, 998, 999, 1001, 1006, 1007, 1008, 1016, 1018, 1021, 1023, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "initial_imputer_": 628, "initial_strategi": 628, "initial_theta": [611, 612], "initialis": [120, 539, 541, 548, 1033, 1041, 1042], "initializedcheck": 377, "inject": [249, 371, 415], "inki": 1039, "inli": [239, 998, 1008], "inlier": [111, 150, 215, 239, 249, 310, 390, 410, 430, 469, 564, 672, 678, 851, 882, 894, 908, 909, 911, 998, 1008, 1040, 1041, 1046], "inlier_mask": 215, "inlier_mask_": [215, 672], "inlier_plot": 111, "inliers_mask": 112, "inlin": [223, 376, 377, 1018], "inner": [64, 125, 146, 149, 271, 275, 289, 331, 363, 416, 443, 515, 583, 590, 619, 649, 670, 681, 776, 778, 994, 1002, 1012, 1017, 1034, 1037, 1047, 1050], "inner_clf": 1002, "inner_cv": [275, 326], "inner_it": 382, "inner_numb": 331, "inner_stat": 1047, "inner_stats_": 1047, "inpaint": 413, "inplac": [2, 230, 249, 282, 454, 482, 483, 484, 485, 860, 868, 871, 874, 875, 877, 881, 882, 883, 885, 974, 977, 978, 979, 983, 984, 1042], "inplace_column_scal": 2, "inplace_csr_column_scal": [2, 385], "inplace_csr_row_normalize_l1": [2, 385], "inplace_csr_row_normalize_l2": [2, 385], "inplace_row_scal": 2, "inplace_swap_column": 2, "inplace_swap_row": 2, "inproceed": 0, "input": [2, 43, 45, 49, 64, 67, 69, 105, 120, 124, 142, 146, 147, 176, 177, 178, 186, 191, 193, 212, 215, 216, 220, 227, 230, 242, 243, 245, 246, 253, 265, 283, 287, 294, 295, 307, 311, 312, 313, 314, 319, 322, 324, 327, 340, 344, 348, 353, 370, 373, 376, 379, 381, 385, 386, 388, 389, 390, 402, 405, 406, 409, 412, 413, 414, 415, 416, 417, 418, 420, 426, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 445, 448, 449, 450, 454, 457, 458, 461, 464, 465, 467, 468, 469, 471, 472, 482, 483, 484, 489, 504, 510, 517, 518, 519, 521, 525, 529, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 621, 623, 628, 629, 630, 631, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 686, 687, 688, 689, 690, 691, 693, 694, 697, 698, 699, 700, 701, 702, 703, 722, 723, 724, 725, 729, 746, 747, 749, 751, 752, 754, 755, 762, 768, 772, 773, 775, 779, 780, 781, 782, 786, 791, 792, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 892, 893, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 922, 924, 925, 926, 928, 929, 930, 931, 932, 933, 937, 943, 946, 948, 958, 960, 961, 965, 974, 976, 982, 983, 984, 987, 988, 990, 992, 994, 996, 998, 999, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "input_featur": [193, 378, 390, 424, 429, 442, 443, 445, 447, 449, 464, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 1049], "input_nam": [930, 932, 964, 1047], "input_tag": 924, "input_typ": [353, 416, 583], "inputtag": [2, 924], "inria": [0, 659, 1033], "insensit": [245, 644, 677, 679, 789, 906, 995, 1016, 1017, 1033], "insepar": [168, 373], "insert": [93, 186, 212, 388, 408, 487, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 920], "insid": [2, 55, 57, 63, 187, 214, 246, 270, 331, 340, 365, 370, 371, 378, 382, 399, 408, 416, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 958, 961, 1009, 1026, 1050], "insight": [43, 46, 186, 187, 201, 213, 214, 230, 264, 307, 310, 351, 358, 406, 407, 801, 804, 805, 815, 828, 1009, 1018, 1026], "insist": 102, "inspect": [2, 43, 48, 66, 67, 70, 89, 94, 136, 141, 147, 149, 150, 151, 155, 165, 170, 175, 176, 186, 187, 188, 189, 197, 205, 221, 226, 250, 264, 270, 273, 282, 293, 298, 301, 315, 319, 320, 321, 322, 324, 326, 336, 337, 338, 339, 341, 342, 344, 351, 356, 364, 378, 390, 408, 409, 415, 416, 464, 554, 555, 558, 559, 560, 561, 565, 566, 567, 632, 633, 634, 635, 834, 865, 866, 913, 914, 915, 916, 989, 1002, 1003, 1006, 1009, 1010, 1017, 1021, 1023, 1028, 1036], "inspir": [110, 151, 187, 230, 376, 388, 415, 562, 563, 936, 992, 1042], "instabl": [74, 186, 300, 418, 452, 536, 540, 544, 696, 1040, 1043, 1046], "instal": [86, 253, 290, 319, 320, 321, 322, 323, 324, 325, 326, 327, 363, 364, 376, 377, 379, 380, 382, 384, 388, 389, 395, 401, 402, 404, 408, 416, 452, 462, 497, 692, 696, 1018, 1040, 1041, 1042, 1046, 1047], "installment_commit": 264, "instanc": [2, 43, 47, 49, 52, 61, 63, 64, 86, 89, 91, 137, 149, 165, 168, 182, 187, 188, 197, 198, 241, 246, 249, 264, 266, 268, 279, 281, 282, 301, 319, 326, 334, 336, 337, 343, 344, 351, 352, 353, 362, 363, 364, 370, 371, 373, 374, 375, 376, 378, 381, 382, 384, 385, 388, 390, 394, 399, 402, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 422, 432, 433, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 462, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 491, 493, 496, 497, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 621, 628, 629, 630, 631, 633, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 708, 721, 730, 731, 739, 772, 775, 779, 780, 781, 782, 784, 785, 788, 789, 790, 793, 794, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 810, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 931, 932, 934, 943, 944, 948, 949, 957, 958, 959, 960, 970, 971, 972, 975, 985, 986, 990, 991, 992, 998, 999, 1002, 1004, 1005, 1008, 1010, 1012, 1016, 1017, 1018, 1022, 1028, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "instanci": 1042, "instant": 207, "instantan": 509, "instanti": [104, 173, 322, 379, 399, 415, 450, 568, 569, 603, 631, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 830, 832, 939, 1008, 1033, 1041, 1045, 1049], "instead": [0, 43, 44, 45, 52, 58, 86, 88, 89, 90, 103, 125, 137, 151, 165, 168, 170, 212, 214, 227, 230, 236, 249, 261, 266, 267, 271, 272, 283, 289, 295, 310, 319, 320, 321, 322, 323, 340, 342, 344, 351, 353, 358, 359, 363, 364, 370, 371, 374, 375, 376, 377, 378, 380, 381, 384, 385, 388, 389, 390, 399, 402, 404, 408, 409, 411, 412, 413, 414, 415, 416, 417, 419, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 456, 459, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 510, 511, 534, 535, 536, 539, 541, 542, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 608, 609, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 631, 633, 636, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 693, 695, 708, 710, 747, 775, 779, 780, 781, 783, 784, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 813, 815, 817, 819, 820, 821, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 866, 867, 868, 870, 871, 872, 877, 878, 883, 884, 885, 895, 896, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 919, 937, 944, 949, 958, 976, 991, 992, 994, 998, 999, 1001, 1002, 1003, 1006, 1007, 1012, 1016, 1017, 1018, 1021, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "instinct": 351, "institut": [0, 264, 373, 1005], "instruct": [363, 376, 377, 378, 379, 380, 381, 384, 388, 389, 390, 504, 589, 590, 592, 1025, 1033], "instrument": [51, 102, 121, 185], "insuffici": [393, 1001], "insur": [183, 192, 212, 407, 464, 497, 553, 649, 670, 681, 707, 746, 751, 753, 831, 866, 869, 870, 878, 885, 998, 1023], "int": [47, 49, 52, 53, 55, 72, 79, 95, 112, 137, 145, 149, 150, 160, 161, 171, 172, 173, 179, 182, 185, 195, 204, 206, 212, 230, 237, 239, 245, 249, 255, 264, 265, 268, 269, 270, 290, 295, 297, 303, 317, 330, 353, 371, 376, 378, 388, 390, 406, 409, 412, 416, 419, 420, 423, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 503, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 611, 612, 618, 628, 629, 630, 631, 632, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 701, 702, 703, 704, 705, 706, 708, 710, 714, 727, 728, 730, 731, 732, 735, 739, 757, 758, 770, 775, 779, 780, 781, 782, 783, 784, 785, 788, 790, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 927, 931, 932, 934, 935, 948, 949, 951, 952, 953, 955, 966, 970, 972, 975, 980, 981, 998, 1009, 1033, 1039, 1043, 1044], "int32": [249, 290, 317, 376, 390, 443, 447, 449, 451, 453, 459, 907, 908, 909, 910, 911, 966, 1017, 1042, 1048, 1049, 1050], "int64": [43, 53, 87, 103, 186, 187, 264, 279, 284, 287, 316, 326, 358, 390, 416, 426, 442, 448, 450, 497, 515, 516, 520, 586, 589, 641, 647, 648, 653, 654, 666, 715, 716, 719, 745, 795, 841, 870, 899, 929, 956, 987, 1003, 1041, 1044, 1046, 1048, 1049, 1050], "int64dtyp": 1050, "intact": 878, "integ": [2, 43, 55, 86, 103, 186, 212, 230, 320, 321, 359, 363, 370, 371, 373, 378, 381, 385, 389, 390, 408, 409, 412, 413, 415, 416, 433, 437, 462, 464, 467, 472, 487, 497, 499, 502, 503, 504, 506, 509, 510, 513, 515, 516, 520, 523, 551, 560, 561, 562, 563, 564, 568, 569, 573, 583, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 633, 634, 645, 652, 656, 660, 666, 674, 676, 677, 679, 700, 715, 736, 801, 803, 804, 805, 806, 808, 810, 815, 816, 817, 820, 821, 823, 825, 828, 836, 839, 841, 844, 845, 846, 870, 878, 879, 884, 885, 886, 889, 899, 901, 913, 914, 915, 916, 927, 964, 965, 966, 970, 992, 998, 1003, 1005, 1012, 1015, 1017, 1018, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "integr": [0, 52, 77, 103, 165, 178, 202, 307, 321, 364, 374, 378, 379, 380, 382, 384, 390, 394, 413, 418, 446, 716, 756, 787, 976, 1001, 1009, 1026, 1034, 1036, 1037, 1045, 1046, 1050], "intel": [1002, 1021], "intelex": [394, 1021], "intellectu": 185, "intellig": [96, 168, 264, 351, 373, 408, 415, 448, 556, 557, 639, 697, 726, 835, 862, 863, 1003, 1014, 1022, 1026], "intend": [90, 91, 124, 213, 253, 344, 351, 376, 377, 383, 388, 390, 408, 412, 468, 583, 674, 700, 874, 875, 885, 903, 922, 997, 998, 1002, 1006, 1013, 1021], "intens": [99, 123, 290, 373, 377, 388, 390, 413, 443, 447, 459, 608, 609, 633, 634, 803, 991, 1009, 1026, 1041], "intention": 64, "inter": [2, 75, 141, 359, 415, 717], "interact": [2, 42, 147, 149, 183, 212, 237, 241, 271, 320, 375, 377, 378, 380, 382, 388, 390, 391, 402, 409, 560, 561, 562, 563, 633, 634, 880, 884, 991, 994, 998, 999, 1000, 1007, 1009, 1012, 1020, 1022, 1035, 1040, 1047, 1048], "interaction_cst": [187, 324, 415, 562, 563, 1048], "interaction_onli": [43, 880, 998, 1012], "interactiveshellapp": 382, "intercept": [123, 205, 209, 221, 229, 348, 390, 482, 483, 484, 550, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 880, 884, 887, 905, 906, 912, 998, 1000, 1002, 1007, 1016, 1017, 1036, 1038, 1042, 1043], "intercept_": [196, 203, 205, 221, 247, 338, 345, 348, 378, 390, 482, 483, 484, 550, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 905, 906, 907, 908, 909, 910, 911, 996, 998, 1016, 1017, 1033, 1040, 1045, 1047, 1050], "intercept_hidden_": 861, "intercept_init": [667, 668, 669, 677, 679], "intercept_sc": [206, 659, 660, 905, 906, 912, 998, 1017], "intercept_visible_": 861, "intercepts_": [862, 863, 1006], "interchang": [1021, 1050], "interclass": 75, "interdepend": 516, "interest": [0, 43, 45, 52, 77, 79, 83, 88, 95, 99, 104, 134, 146, 154, 165, 168, 175, 181, 186, 187, 188, 202, 212, 213, 214, 230, 233, 244, 263, 264, 267, 270, 271, 273, 279, 284, 287, 327, 340, 347, 352, 358, 363, 371, 373, 376, 381, 382, 384, 388, 391, 407, 408, 410, 413, 416, 418, 494, 495, 501, 505, 511, 647, 648, 905, 992, 998, 999, 1002, 1007, 1008, 1009, 1022, 1026, 1033, 1050], "interestingli": [109, 168, 1012], "interfac": [2, 42, 134, 183, 369, 370, 377, 378, 380, 385, 388, 390, 412, 418, 419, 441, 445, 450, 497, 554, 700, 801, 804, 805, 815, 865, 866, 891, 986, 991, 1005, 1017, 1021, 1022, 1026, 1033, 1035, 1038, 1039, 1041, 1042, 1047, 1049], "interfer": [326, 1043], "interim": 1040, "interior": [671, 998, 1048], "interleav": [2, 372, 388, 523], "intermedi": [43, 46, 85, 88, 139, 146, 249, 340, 388, 416, 560, 561, 620, 865, 1002, 1045, 1051], "intern": [0, 43, 63, 103, 113, 125, 140, 144, 147, 149, 159, 168, 171, 181, 183, 212, 246, 264, 284, 290, 292, 309, 316, 331, 353, 359, 364, 371, 373, 378, 382, 385, 388, 390, 399, 404, 405, 408, 412, 413, 415, 416, 417, 418, 419, 437, 439, 444, 465, 468, 512, 535, 536, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 594, 595, 611, 612, 641, 644, 647, 653, 669, 673, 677, 679, 697, 709, 732, 735, 759, 760, 784, 831, 845, 846, 861, 862, 863, 865, 866, 870, 884, 886, 900, 901, 903, 905, 906, 907, 910, 913, 914, 915, 916, 998, 999, 1000, 1002, 1005, 1008, 1012, 1014, 1017, 1018, 1023, 1026, 1033, 1036, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "internet": [371, 381, 1012], "interop": 1021, "interoper": [402, 418, 1022], "interp": [279, 280, 340], "interp1d": [654, 664, 685], "interp_tpr": 280, "interpol": [43, 53, 68, 75, 83, 84, 87, 91, 113, 120, 123, 174, 177, 183, 192, 193, 204, 228, 242, 248, 279, 285, 294, 295, 302, 308, 330, 340, 418, 636, 646, 654, 664, 673, 685, 701, 708, 848, 856, 866, 880, 884, 993, 998, 1002, 1012, 1023, 1040, 1045], "interpret": [43, 64, 149, 168, 177, 183, 184, 185, 187, 212, 213, 217, 228, 230, 263, 270, 272, 273, 284, 308, 311, 314, 321, 351, 353, 363, 374, 376, 377, 382, 384, 385, 390, 393, 406, 408, 409, 414, 416, 452, 464, 465, 467, 497, 542, 573, 612, 640, 644, 654, 673, 674, 692, 693, 696, 702, 730, 754, 759, 760, 784, 793, 794, 807, 816, 828, 829, 831, 834, 866, 878, 885, 996, 998, 1002, 1003, 1009, 1010, 1012, 1018, 1021, 1023, 1033, 1034, 1038, 1041, 1046, 1047, 1048], "interquartil": [249, 883, 895], "interquartile_rang": 883, "interrog": 416, "interrupt": 998, "intersect": [271, 337, 405, 408, 739], "interv": [2, 52, 64, 133, 149, 177, 183, 198, 212, 213, 214, 230, 270, 371, 390, 406, 412, 415, 418, 438, 439, 517, 518, 519, 558, 559, 561, 563, 565, 566, 636, 637, 639, 678, 743, 749, 751, 805, 822, 831, 868, 870, 884, 907, 908, 909, 935, 994, 998, 1002, 1012, 1018, 1023, 1040, 1044], "intervent": [88, 186], "intl": [64, 412], "intp": [423, 451, 453], "intra": [43, 589, 592, 793, 794], "intract": [89, 413, 999, 1007], "intric": [216, 513], "intricaci": 376, "intrins": [193, 390, 413, 415, 1005, 1010, 1016, 1045], "introduc": [43, 109, 111, 112, 125, 149, 167, 183, 188, 193, 198, 216, 238, 243, 246, 249, 251, 277, 324, 325, 353, 372, 374, 376, 378, 380, 381, 384, 388, 390, 399, 406, 408, 410, 412, 413, 415, 416, 432, 441, 442, 443, 445, 447, 449, 459, 464, 468, 482, 483, 484, 485, 497, 505, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 556, 557, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 659, 665, 686, 687, 689, 690, 693, 831, 849, 854, 857, 861, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 899, 903, 996, 998, 1001, 1004, 1005, 1008, 1012, 1014, 1016, 1017, 1023, 1033, 1034, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1051], "introduct": [167, 230, 268, 376, 407, 412, 413, 416, 591, 789, 790, 840, 844, 998, 1000, 1002, 1004, 1020, 1027, 1028], "introductori": [146, 169, 170, 175, 176, 178, 179, 183, 238, 418, 612, 623, 1023, 1026], "introspect": [43, 45, 103, 382, 560, 561, 590, 1012], "intrus": 371, "intuit": [43, 52, 67, 79, 85, 95, 125, 134, 137, 143, 163, 170, 186, 187, 213, 214, 234, 239, 271, 287, 295, 312, 315, 337, 340, 344, 352, 376, 390, 406, 408, 410, 412, 414, 646, 783, 784, 785, 788, 876, 905, 907, 908, 910, 911, 994, 998, 999, 1002, 1003, 1009, 1012, 1013, 1017, 1026, 1033], "inv": [109, 113, 306], "inv_kw_arg": 869, "invalid": [2, 47, 212, 390, 446, 579, 672, 713, 775, 990, 998, 1002, 1039, 1041, 1043, 1044, 1046, 1047, 1049], "invalidparametererror": 1002, "invalu": 1026, "invari": [75, 373, 390, 408, 418, 615, 690, 748, 819, 820, 998, 999, 1002, 1017, 1022, 1041, 1044, 1045, 1046], "invent": 1005, "inventor": 1004, "inventori": 1026, "invers": [2, 8, 51, 87, 108, 109, 110, 134, 183, 260, 277, 279, 293, 340, 352, 353, 368, 390, 409, 411, 412, 413, 415, 416, 420, 445, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 528, 534, 535, 536, 540, 542, 544, 558, 562, 565, 590, 591, 592, 629, 645, 646, 659, 660, 667, 669, 675, 676, 677, 678, 679, 681, 725, 744, 753, 798, 799, 847, 848, 855, 856, 862, 863, 865, 869, 872, 878, 879, 881, 897, 898, 905, 906, 907, 910, 911, 913, 915, 937, 996, 998, 1002, 1005, 1006, 1012, 1016, 1017, 1023, 1027, 1028, 1033, 1036, 1041, 1044, 1045, 1047, 1051], "inverse_components_": [897, 898, 1014, 1047], "inverse_func": [107, 186, 409, 465, 869, 1012, 1041, 1051], "inverse_transform": [44, 84, 87, 125, 165, 294, 352, 399, 413, 416, 445, 465, 482, 483, 484, 534, 535, 536, 539, 540, 541, 542, 544, 545, 582, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 631, 801, 804, 805, 815, 865, 869, 870, 872, 873, 874, 875, 876, 878, 879, 881, 882, 883, 885, 897, 898, 1012, 1013, 1014, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "invert": [113, 125, 165, 233, 352, 353, 388, 410, 416, 631, 690, 694, 1012, 1042], "invert_yaxi": [182, 353], "invest": [382, 1026], "investig": [125, 130, 134, 182, 347, 376, 402, 998], "invok": [378, 532, 538, 540, 546, 547, 568, 570, 571, 800, 823, 826, 902, 1045, 1050], "involv": [315, 317, 319, 327, 340, 344, 363, 365, 371, 376, 390, 391, 402, 411, 418, 700, 833, 834, 999, 1003, 1005, 1009, 1010, 1017, 1021, 1026, 1041], "invscal": [306, 677, 678, 679, 862, 863, 1016], "io": [370, 373, 376, 380, 382, 384, 390, 693, 1021, 1028, 1031], "ioangatop": 1050, "ioanni": 735, "ioerror": 1049, "iofal": 1047, "ion": 1048, "ionescu": [643, 994, 1043], "iowa": [143, 154, 249], "ipca": [2, 124, 534, 535], "ipdb": 384, "ipm": 671, "ipynb": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358], "ipython": [378, 381, 382, 384], "ipython_config": 382, "iq": 185, "iqbal": 1045, "iqr": [249, 883, 895], "ir": [242, 413, 591, 727, 757, 840, 844, 1000, 1002], "iren": [1048, 1049], "iri": [2, 50, 55, 66, 67, 69, 76, 106, 119, 122, 124, 130, 133, 134, 135, 136, 138, 152, 155, 161, 164, 169, 171, 174, 175, 178, 183, 191, 192, 197, 205, 206, 244, 247, 253, 257, 263, 275, 276, 279, 280, 293, 299, 301, 305, 306, 312, 321, 328, 333, 335, 336, 338, 340, 342, 343, 344, 354, 355, 357, 358, 369, 370, 389, 402, 408, 409, 412, 413, 415, 497, 505, 542, 550, 554, 558, 565, 611, 623, 632, 677, 801, 815, 900, 901, 902, 905, 910, 913, 917, 918, 919, 920, 991, 992, 996, 1001, 1002, 1005, 1009, 1012, 1015, 1016, 1017, 1018, 1023, 1028, 1046], "iris": [126, 276, 277], "iris_61": 370, "iris_969": 370, "iris_version_3": 370, "irreduc": [137, 1002], "irregular": [175, 344, 408, 1005], "irregularities_kernel": 175, "irrelev": [163, 198, 359, 382, 410, 415, 417, 605, 741, 1002], "irrespect": [212, 243, 264, 279, 290, 607], "irvin": 373, "is_categor": 633, "is_categorical_": [562, 563], "is_classifi": [2, 378, 390], "is_cluster": 2, "is_data_valid": [672, 998], "is_fit": [2, 985], "is_fitted_": [422, 425, 427, 430, 431], "is_inli": [469, 564, 851], "is_leav": 358, "is_max_test_scor": 105, "is_model_valid": [672, 998], "is_multilabel": [2, 385, 1050], "is_paramet": 989, "is_pypi": 1051, "is_regressor": [2, 390], "is_scalar_nan": 1046, "is_sh": 281, "is_split_nod": 358, "is_stationari": [178, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "isa": 57, "isaac": [1039, 1040, 1042, 1043, 1050], "isaack": 1046, "isaactrost": 1050, "isakov": 1045, "isbn": [373, 408, 998], "isclos": 55, "isdigit": [57, 416], "ish": 69, "ishaan": 1046, "ishan": [1046, 1047], "ishank": [1038, 1039, 1040], "ishikawa": [1045, 1046], "isin": 330, "isinst": [70, 142, 230, 390], "islic": [47, 79, 95], "ism": 1037, "isn": [168, 319, 351, 353, 359, 364, 376, 380, 384, 516, 562, 563, 595, 795, 804, 805, 878, 1005, 1017, 1043, 1051], "iso": [169, 183, 224, 234, 611, 614, 615, 1023], "iso_reg": 636, "isoformat": 55, "isol": [2, 143, 150, 239, 249, 352, 374, 382, 394, 564, 851, 909, 1042, 1043], "isolationforest": [2, 133, 136, 183, 215, 239, 249, 310, 632, 831, 909, 1008, 1023, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050], "isolationforestifittedisolationforest": 150, "isomap": [2, 51, 85, 139, 183, 231, 234, 236, 243, 300, 319, 323, 415, 503, 545, 550, 567, 690, 691, 692, 693, 854, 866, 875, 898, 1005, 1023, 1027, 1028, 1041, 1043, 1046, 1047, 1048, 1049, 1050], "isomap__n_neighbor": 319, "isometr": [232, 689, 691, 692, 693, 999], "isoton": [2, 61, 62, 107, 183, 238, 437, 636, 637, 638, 658, 934, 1023, 1024, 1028, 1034, 1035, 1036, 1037, 1039, 1046, 1049], "isotonic_regress": [2, 636, 1046], "isotonicregress": [2, 242, 993, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1043, 1045, 1047, 1048, 1049], "isotonicregression0": 636, "isotrop": [2, 70, 88, 90, 94, 125, 172, 174, 232, 234, 408, 410, 418, 513, 520, 533, 616, 620, 621, 623, 624], "isotropi": 413, "isr": 417, "issam": [0, 1039], "issu": [0, 2, 43, 62, 110, 116, 209, 212, 230, 275, 317, 364, 370, 379, 380, 381, 385, 388, 390, 391, 393, 394, 399, 402, 404, 408, 410, 411, 416, 449, 452, 462, 473, 482, 483, 484, 535, 540, 544, 574, 589, 590, 592, 612, 628, 692, 696, 770, 876, 878, 881, 893, 939, 992, 999, 1010, 1012, 1017, 1021, 1022, 1025, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1050, 1051], "issuenumb": 384, "ist": 417, "isupp": 416, "isuru": 1045, "itakura": [413, 539, 541, 548, 1040], "itali": 373, "item": [2, 47, 48, 49, 50, 51, 52, 55, 66, 78, 88, 107, 138, 140, 143, 146, 154, 186, 210, 214, 220, 233, 245, 246, 248, 257, 267, 273, 277, 323, 330, 352, 369, 376, 377, 378, 385, 409, 464, 527, 562, 563, 589, 590, 592, 633, 813, 878, 900, 901, 920, 927, 955, 994, 1015, 1022], "item_idx": 310, "iter": [2, 47, 54, 55, 67, 80, 104, 113, 120, 123, 134, 137, 140, 142, 144, 145, 147, 148, 149, 168, 181, 183, 193, 194, 220, 227, 257, 258, 262, 265, 278, 281, 305, 307, 308, 312, 321, 330, 332, 333, 340, 376, 378, 382, 384, 385, 389, 390, 403, 408, 411, 413, 415, 417, 420, 437, 440, 441, 443, 445, 447, 448, 449, 452, 454, 459, 461, 462, 463, 471, 472, 478, 482, 483, 484, 516, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 554, 555, 560, 561, 562, 563, 565, 568, 569, 582, 583, 589, 590, 592, 594, 595, 603, 611, 628, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 839, 854, 861, 862, 863, 864, 865, 869, 876, 878, 880, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 920, 948, 949, 956, 957, 958, 959, 967, 991, 992, 998, 999, 1001, 1002, 1005, 1006, 1007, 1015, 1016, 1017, 1018, 1022, 1023, 1026, 1028, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "iter_minibatch": 47, "iter_offset": 1047, "iter_offset_": 1047, "iterated_pow": [104, 533, 536, 542, 1039], "iterative_impute_scor": 182, "iterativeimput": [2, 180, 182, 183, 380, 399, 490, 566, 581, 629, 630, 631, 640, 646, 673, 827, 848, 866, 1023, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "itergrid": 1035, "itertool": [47, 77, 79, 95, 155, 187, 201, 256, 261, 270, 277, 279, 415], "ith": [497, 775, 779, 841, 862, 863, 878, 879], "ith_cluster_silhouette_valu": 93, "itk": [1043, 1044, 1045], "its": [0, 2, 7, 25, 43, 48, 51, 52, 53, 57, 63, 64, 70, 72, 88, 98, 99, 109, 111, 113, 116, 118, 125, 126, 132, 134, 140, 142, 144, 146, 149, 159, 168, 170, 175, 177, 186, 187, 189, 191, 193, 202, 209, 225, 229, 230, 234, 239, 246, 248, 249, 251, 253, 255, 260, 261, 264, 269, 273, 275, 277, 279, 284, 290, 292, 296, 297, 312, 322, 332, 337, 344, 349, 351, 352, 355, 358, 359, 364, 365, 369, 370, 371, 372, 376, 377, 378, 380, 381, 384, 388, 389, 390, 391, 394, 396, 399, 402, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 424, 440, 442, 444, 446, 450, 454, 456, 460, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 498, 504, 524, 532, 534, 535, 536, 538, 539, 541, 542, 543, 545, 551, 554, 556, 557, 558, 559, 560, 561, 565, 566, 567, 584, 588, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 645, 646, 672, 673, 675, 686, 687, 688, 689, 693, 697, 700, 709, 726, 730, 731, 737, 738, 742, 779, 782, 784, 798, 799, 801, 826, 833, 834, 836, 847, 848, 849, 851, 852, 853, 855, 856, 857, 864, 865, 869, 874, 877, 878, 880, 897, 898, 901, 905, 906, 907, 910, 913, 915, 931, 932, 937, 944, 971, 991, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1015, 1016, 1017, 1018, 1021, 1026, 1035, 1036, 1037, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "itsaphel": 1051, "itself": [27, 61, 64, 82, 88, 134, 146, 150, 187, 198, 210, 246, 252, 264, 279, 290, 317, 340, 352, 363, 365, 375, 376, 378, 390, 399, 402, 406, 408, 419, 440, 441, 444, 445, 446, 469, 470, 471, 472, 473, 474, 475, 476, 528, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 552, 567, 570, 584, 593, 596, 597, 599, 600, 601, 603, 604, 640, 641, 642, 643, 644, 646, 656, 690, 692, 793, 794, 840, 841, 842, 843, 844, 845, 846, 850, 858, 859, 870, 871, 872, 900, 901, 958, 994, 998, 999, 1001, 1005, 1006, 1010, 1021, 1037, 1048], "iv": [185, 1002], "ivan": [1041, 1042, 1045, 1048, 1051], "ivanllt": 1048, "iver": 1039, "iverson": 998, "ivicajov": 1036, "ivl": 189, "ivt": 535, "iv\u00e1n": [1040, 1046], "iwhalv": 1046, "iwona": 1050, "ix": [50, 279, 346], "iy_j": 1012, "iyer": 1044, "izadifar": 1051, "j": [0, 50, 55, 72, 73, 75, 78, 94, 102, 110, 111, 112, 134, 137, 138, 148, 166, 171, 182, 187, 224, 235, 248, 255, 269, 270, 275, 281, 294, 300, 303, 314, 324, 358, 364, 370, 371, 373, 380, 382, 388, 397, 405, 406, 408, 410, 412, 413, 415, 416, 418, 419, 437, 440, 444, 446, 453, 454, 469, 474, 499, 514, 517, 518, 519, 521, 529, 532, 535, 537, 538, 539, 541, 542, 548, 554, 560, 561, 594, 595, 633, 634, 638, 645, 646, 649, 650, 667, 668, 670, 681, 689, 690, 691, 693, 694, 695, 697, 706, 709, 711, 715, 717, 719, 722, 724, 725, 727, 756, 757, 759, 760, 775, 779, 789, 790, 793, 794, 834, 835, 842, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 876, 885, 886, 913, 914, 991, 992, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "j0rd1smit": 1045, "ja": [411, 1040], "jaccard": [2, 289, 405, 450, 457, 700, 704, 720, 730, 735, 739, 779, 780, 781, 797, 1005, 1041, 1042], "jaccard_scor": [2, 289, 704, 730, 735, 797, 1002, 1042, 1045], "jaccard_similarity_scor": [1035, 1037, 1042], "jaccarddist": 700, "jack": [1035, 1038, 1046, 1047, 1048, 1049, 1051], "jacklangerman": [1041, 1042], "jackman": 1034, "jackmartin": 1039, "jackson": [1039, 1040, 1042], "jacob": [0, 398, 1038, 1039, 1040], "jacobi": 1048, "jacobsen": 1036, "jacopo": [1041, 1042], "jacqu": [1034, 1036], "jaehong": 1043, "jaehyun": 1045, "jaewon": 1041, "jai": [1043, 1047], "jaidev": 1038, "jaim": 1043, "jain": [1039, 1040, 1041, 1045, 1047, 1048], "jair": 1040, "jake": [0, 398, 1020, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1047], "jakemick": 1035, "jakhar": 1045, "jakirkham": [1040, 1041, 1042, 1048, 1049], "jakub": 1050, "jakubek": [1046, 1047], "jalali": [0, 391, 397, 402, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "jalexand3r": 1047, "jamaoui": [1041, 1042, 1045], "jame": [0, 373, 412, 835, 1003, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1050], "jamestwebb": [1035, 1036], "jami": 1041, "jamieson": 991, "jan": [0, 213, 287, 397, 884, 1033, 1036, 1037, 1038, 1039, 1041, 1042, 1045, 1049], "jana": 1043, "janet": 373, "jane\u017e": [1034, 1035], "janfidor": [1048, 1049], "janhang": 1043, "janin": 1040, "janna": 1039, "jannik": 1046, "janso": 1033, "jansson": [1036, 1048], "januari": [374, 376, 1033, 1034, 1043, 1045, 1048, 1050], "janvanrijn": [1041, 1042], "jaqu": [0, 398, 1033, 1034, 1035, 1036], "jardim": 1046, "jare": 1048, "jarfa": 1039, "jarir": 1046, "jarkko": 697, "jarosch": 1035, "jaroslaw": 1040, "jarrod": [0, 398, 1042, 1049, 1050], "jarvelin": [727, 757, 1002], "jaskowiak": 446, "jason": [44, 413, 536, 901, 1039, 1041, 1045, 1048], "jatin": [1037, 1039], "jauhar": 1047, "jauvin": 1034, "java": [408, 442], "javier": [1037, 1051], "jawahar": 994, "jax": 1050, "jay": 1040, "jaya": 1047, "jayaratn": [1044, 1045, 1048, 1049], "jayratn": 1045, "jayzed82": 1040, "jb": [1049, 1050], "jbdelafoss": 1040, "jbirch": [408, 442], "jblackburn": 1039, "jc": [1040, 1041], "jdcaballero": 1037, "jdethuren": [1041, 1042], "je": 1047, "jean": [1033, 1036, 1037, 1038, 1039, 1040, 1046], "jeann": 1047, "jeanselm": 1043, "jeb": 1041, "jeevan": 1045, "jeff": [1037, 1039, 1046, 1047], "jeffrei": [1036, 1039], "jeffrey04": [1038, 1039], "jelfner": 1047, "jell": 1036, "jen": [659, 1041], "jen09": 413, "jenatton": 413, "jenni": 1047, "jennif": 1046, "jensen": [1039, 1045], "jeong": 1043, "jeremi": [1026, 1038, 1039, 1040, 1041, 1044, 1045], "jeremiedbb": [1041, 1042, 1043], "jeremynixon": 1039, "jeroen": 1039, "jeroenpeterbo": 1045, "jeroko": 1040, "jeromedock": 1043, "jerphanion": [0, 397, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "jerryzhu": 900, "jesper": 1043, "jess": [836, 1003, 1046], "jess010": 1036, "jessica": 1039, "jessicakk0711": 1049, "jesu": [57, 351, 352], "jet": 100, "jevnik": 1038, "jewalikar": 1039, "jf": 1042, "jfraj": 1038, "jha": [1037, 1043, 1047], "jhay": 1045, "jhun": 474, "jia": 1039, "jiacheng": 1040, "jiali": 1038, "jian": 408, "jianbo": [408, 452, 462, 692], "jiang": [406, 1037, 1044], "jianzhu": 1046, "jiawei": [1049, 1050, 1051], "jiaxiang": 1045, "jie": [1041, 1042, 1045], "jiefangxuanyan": 1046, "jigna": 1045, "jihan": 1047, "jill": 1039, "jim": 1035, "jim0421": 1045, "jimenez": [1046, 1047], "jimmi": [862, 863, 1006, 1039, 1041], "jim\u00e9nez": [0, 366, 1041, 1044, 1045, 1046, 1047, 1048], "jin": [640, 1044, 1045], "jindal": 1045, "jinkun": 1041, "jiongyan": 1041, "jiquan": 1006, "jirka": 1047, "jiten": 1048, "jitendra": [408, 452, 462, 692], "jitter": [134, 651, 655, 1044], "jiyuan": 1039, "jjabl": 1041, "jjmistri": 1044, "jk": 999, "jkarolczak": 1048, "jkleint": [1040, 1041], "jl": [243, 898], "jmlr": [0, 408, 667, 668, 677, 705, 998, 1017], "jmlr_2014": 693, "jmontoyam": 1040, "jnboehm": 1046, "jnt": 412, "joaak": [1041, 1042], "joan": [1040, 1041, 1042, 1043], "joanna": 1043, "joaquin": 1045, "job": [149, 186, 258, 264, 376, 380, 384, 396, 415, 419, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 468, 472, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 603, 608, 609, 611, 635, 640, 658, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 864, 867, 900, 901, 903, 967, 1026], "joblib": [2, 41, 77, 87, 104, 140, 290, 320, 371, 374, 376, 379, 385, 388, 390, 394, 401, 409, 419, 437, 441, 444, 445, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 509, 510, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 851, 853, 855, 856, 858, 859, 864, 865, 866, 867, 900, 901, 967, 968, 971, 986, 1002, 1022, 1028, 1033, 1034, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1048, 1050, 1051], "joblib_start_method": 388, "jochen": 1035, "jock": 102, "joe": [1038, 1051], "joei": 1049, "joel": [0, 391, 397, 416, 536, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "johann": [1035, 1036, 1041, 1043, 1044, 1047], "johanna": [112, 1051], "johannah": 1039, "johanwork": 1046, "john": [373, 416, 537, 709, 736, 770, 880, 907, 908, 910, 911, 992, 998, 1002, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1046, 1048, 1049, 1050, 1051], "johnathanpi": [1048, 1049], "johnson": [37, 183, 238, 310, 314, 368, 489, 503, 881, 893, 897, 898, 899, 1012, 1019, 1023, 1028, 1041, 1047, 1049], "johnson_lindenstrauss_min_dim": [2, 243, 1014, 1034], "johnston": [168, 373, 998, 1042], "johnstott": 1041, "johnthagen": 1048, "johnwon": 314, "join": [50, 51, 57, 88, 181, 230, 270, 312, 371, 391, 463, 1025, 1033, 1041], "joint": [146, 183, 187, 192, 198, 199, 202, 211, 232, 264, 409, 612, 653, 663, 693, 840, 841, 842, 843, 844, 905, 998, 999, 1003, 1007, 1009, 1013, 1023, 1033], "jointli": [25, 207, 277, 408, 413, 998], "joli": [0, 398, 1034, 1035, 1036, 1037, 1038, 1039], "jon": [351, 1040, 1043, 1044, 1046, 1047, 1050], "jona": [1045, 1050], "jonatan": 1041, "jonathan": [371, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049], "joncral": 1039, "jone": [0, 371, 398, 1033], "jong": 1040, "jonker": [405, 720], "joona": 1033, "jordal": 1039, "jordan": [408, 413, 692, 798, 1043, 1044, 1047, 1048], "jordi": 1039, "jorg": [659, 1036, 1045, 1047], "jori": [0, 397, 1040, 1041, 1042, 1045, 1046], "jose": [168, 373, 659, 1002, 1041, 1043], "joseph": [1036, 1037, 1038, 1039, 1045, 1047, 1048], "josephsalmon": [1040, 1041, 1042], "josh": [416, 1040], "joshi": [1039, 1041, 1047, 1050, 1051], "joshua": [324, 371, 1035, 1036, 1038, 1039, 1045, 1048, 1049], "joshuakennethjon": 1042, "jos\u00e9": [724, 1036, 1046, 1051], "jotasi": 1041, "joudet": [1040, 1041], "journal": [0, 112, 187, 270, 276, 287, 370, 371, 373, 406, 408, 410, 415, 452, 462, 473, 535, 542, 628, 636, 646, 690, 693, 694, 706, 716, 732, 735, 736, 759, 760, 787, 830, 835, 881, 893, 991, 992, 996, 998, 999, 1000, 1003, 1009, 1014, 1016, 1017], "jovan": [1047, 1048], "joydeep": 408, "jo\u00e3o": [1048, 1051], "jo\u00ebl": 1041, "jpcar": 1051, "jpeg": [370, 371, 494, 495], "jpfrancoia": [1039, 1040], "jpg": [507, 585, 588], "jpienaar": 1051, "jpm": 51, "jpmml": 1021, "jpmorgan": [51, 1026], "jr": 998, "jrenni": 842, "jrfiedler": 1039, "jschendel": [1040, 1041], "jschuerz": 1047, "json": [52, 370, 376, 394], "jth": [775, 779], "juan": [0, 366, 1033, 1044, 1045, 1046, 1047, 1048], "juanfe88": 1048, "judg": [91, 218, 408], "judgment": [261, 1002], "judithabk6": 1044, "juergen": [1043, 1048], "jul": 279, "juli": [168, 373, 417, 735, 886, 1012, 1036, 1040, 1041, 1042, 1051], "julia": [408, 718, 738, 796], "julian": [1040, 1041, 1051], "juliankahnert": 1039, "juliaschoepp": [1048, 1049], "juliathebrav": 1039, "julien": [0, 397, 659, 998, 1026, 1033, 1036, 1040, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "juliet": 1041, "julietcl": 1041, "julio": 1046, "julyrashchenko": 1046, "jumon": 1044, "jump": [43, 213, 310, 373, 376, 416, 884], "jumpi": 416, "june": [408, 999, 1039, 1049], "juneja": 1051, "jung": [1040, 1044, 1048], "jungkook": 1038, "jungl": 999, "jupyt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 377, 378, 409, 468, 903, 1018, 1021, 1022, 1044, 1047], "jupyterlit": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358], "jurgen": 1026, "juri": 567, "jurman": 744, "just": [43, 52, 67, 102, 116, 120, 140, 143, 149, 168, 203, 233, 244, 264, 270, 277, 281, 290, 305, 340, 351, 352, 358, 359, 371, 375, 376, 377, 378, 380, 381, 384, 388, 389, 390, 405, 407, 408, 409, 412, 415, 417, 420, 468, 534, 536, 543, 547, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 580, 585, 611, 612, 647, 653, 658, 659, 661, 663, 667, 668, 669, 677, 678, 679, 807, 824, 854, 862, 863, 991, 998, 1001, 1002, 1003, 1006, 1010, 1012, 1016, 1022, 1033, 1037, 1039, 1041, 1045, 1049], "justglow": 1042, "justif": 677, "justifi": [376, 382, 406, 566], "justin": [1035, 1041, 1045], "jvm": 1046, "jygerardi": [1048, 1049], "j\u00e9r\u00e9mie": [0, 397, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "j\u00e9r\u00f4me": [1042, 1043, 1044, 1050, 1051], "j\u00eann": 1039, "j\u00f6rg": [408, 450, 457, 1041], "j\u00f6rn": 1040, "j\u00f8rgensen": [998, 1050], "k": [2, 33, 50, 51, 54, 55, 57, 61, 63, 66, 67, 71, 72, 73, 75, 77, 80, 82, 83, 86, 88, 89, 93, 96, 98, 106, 107, 111, 118, 120, 127, 134, 136, 142, 146, 150, 152, 153, 155, 156, 159, 161, 164, 165, 168, 171, 173, 174, 178, 179, 182, 183, 186, 187, 188, 189, 194, 196, 197, 201, 207, 224, 226, 243, 245, 247, 248, 249, 255, 258, 266, 270, 273, 274, 279, 280, 283, 284, 290, 292, 295, 296, 297, 298, 299, 301, 302, 303, 311, 312, 313, 314, 317, 319, 323, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 350, 351, 353, 358, 359, 364, 371, 373, 376, 384, 385, 388, 390, 399, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 440, 443, 446, 447, 448, 449, 450, 451, 452, 453, 459, 460, 462, 469, 472, 488, 503, 513, 524, 532, 538, 542, 545, 546, 547, 550, 551, 554, 556, 558, 559, 560, 582, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 632, 640, 641, 649, 651, 652, 654, 655, 656, 657, 659, 660, 664, 665, 666, 667, 668, 670, 680, 681, 683, 684, 685, 686, 687, 689, 692, 696, 697, 705, 706, 709, 718, 727, 738, 744, 757, 759, 760, 762, 767, 770, 775, 776, 777, 778, 780, 794, 795, 796, 798, 799, 802, 806, 808, 809, 810, 813, 816, 817, 819, 820, 822, 823, 829, 840, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 866, 870, 871, 872, 876, 877, 878, 880, 881, 885, 893, 898, 912, 920, 934, 944, 949, 975, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1004, 1006, 1007, 1008, 1010, 1015, 1016, 1017, 1018, 1021, 1023, 1027, 1028, 1033, 1034, 1035, 1036, 1039, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "k0": 996, "k1": [418, 622, 625], "k1__": 418, "k1__constant_valu": 174, "k1__k1": 418, "k1__k1__constant_valu": 418, "k1__k1__constant_value_bound": 418, "k1__k2": 418, "k1__k2__length_scal": [176, 418], "k1__k2__length_scale_bound": 418, "k2": [418, 622, 625], "k2__": 418, "k2__length_scal": 418, "k2__length_scale_bound": 418, "k_": [405, 418, 617, 620, 622, 625, 775, 994, 1012], "k_1": [2, 418, 622, 625], "k_2": [2, 418, 622, 625], "k_best": [593, 902, 1015, 1050], "k_diag": [613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "k_fit_all_": 871, "k_fit_rows_": 871, "k_fold": 159, "k_gradient": [613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626], "k_init": [443, 459], "k_mean": [2, 97, 385, 390, 1041, 1049], "k_means_cluster_cent": 97, "k_means_elkan": 1041, "k_means_label": 97, "k_new": 871, "k_ret": [845, 846], "k_true": [845, 846], "ka00ri": [1048, 1049], "kachaiev": 1050, "kaczmarzyk": 1050, "kadatatlu": 1046, "kadota": 1047, "kaggl": [154, 389], "kahni": 1045, "kai": [373, 564, 1008, 1040], "kaicheng": 1037, "kaichogami": 1039, "kailasa": [1047, 1048], "kaim": [862, 863], "kaiser": [413, 533], "kakati": 1048, "kalli": [1041, 1042], "kalyan": 1039, "kamalakerdadi": [1038, 1039], "kamar": 1041, "kamchyev": 1050, "kamel": 1033, "kamishima": [1039, 1040], "kamm": 1002, "kanai": [1039, 1040, 1041], "kanazu": [1048, 1049], "kanchimo": 1051, "kang": [1041, 1043], "kania": [1048, 1049], "kanika": 1043, "kanishk": 1048, "kanissh": 1048, "kanji": 1046, "kanniah": [1036, 1037], "kansal": 1039, "kapadni": 1048, "kapeln": [187, 1009], "kapoor": [1041, 1042], "kappa": [2, 537, 717], "kapur": 1040, "kar": 1039, "karan": [1040, 1041, 1042], "karayev": 1035, "karbownik": 1046, "karen": 1046, "karger": [842, 1004], "karhunen": 535, "karin": [628, 992], "karl": 1041, "karlo": [1050, 1051], "karnofski": 1040, "karnowski": 1045, "karol": 1036, "kartik": 1045, "karypi": 408, "kaseorg": 1043, "kashif": 1038, "kasim": 1037, "kaski": 697, "kasper": 1041, "kassa": [1048, 1049], "kastner": [0, 398, 1035, 1036, 1037, 1044, 1045], "kat": 1040, "kataev": [1041, 1042], "kataki": [721, 735, 741, 1002], "katarina": [1043, 1045], "katheleen": 370, "kathi": [1040, 1043], "kathleen": 1040, "kathryn": 1044, "kati": 1040, "katotten": 1047, "katrin": [1041, 1042], "katrina": 1044, "katriopla": 1041, "katyal": 1043, "katz": [1038, 1045, 1046], "kaufmann": [1014, 1018, 1045], "kaushik": [1040, 1047, 1048, 1049, 1051], "kaushik94": 1036, "kawamura": 1046, "kawwa": 1046, "kayawari": 1046, "kaylani2": 1045, "kaynak": 373, "kazmar": 1037, "kb": [103, 186, 187, 264], "kbest": [104, 593], "kbin": [317, 324], "kbinsdiscret": [2, 43, 86, 118, 183, 194, 212, 230, 250, 309, 312, 317, 324, 513, 658, 868, 884, 914, 1012, 1023, 1041, 1045, 1046, 1047, 1049, 1051], "kbinsdiscretizer__n_bin": 312, "kcachegrind": 379, "kd": [295, 408, 414, 1005, 1041, 1042, 1043], "kd_tree": [419, 444, 446, 450, 457, 689, 690, 847, 848, 849, 850, 851, 853, 855, 856, 857, 1005, 1046, 1050], "kdd": [191, 371, 406, 437, 1014], "kdd06_rp": 898, "kddcup": [249, 369, 493, 1028], "kddcup99": [2, 371, 493], "kde": [185, 186, 284, 287, 294, 295, 303, 414, 850], "kdt": 1005, "kdtree": [2, 446, 450, 457, 689, 690, 845, 847, 848, 849, 850, 851, 853, 855, 856, 857, 1035, 1037, 1041, 1045, 1046, 1049, 1050], "ke": [415, 1044, 1045], "kearn": 1036, "keat": [1048, 1049], "keep": [0, 45, 52, 64, 77, 107, 123, 125, 140, 149, 167, 176, 181, 185, 186, 187, 188, 189, 198, 209, 212, 213, 214, 220, 230, 253, 260, 265, 268, 314, 315, 322, 330, 340, 351, 352, 355, 359, 363, 364, 368, 376, 380, 389, 390, 406, 408, 409, 410, 411, 412, 413, 431, 450, 465, 482, 483, 484, 485, 494, 495, 535, 541, 542, 545, 548, 555, 557, 559, 561, 563, 566, 569, 571, 596, 599, 601, 604, 612, 635, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 677, 678, 679, 680, 709, 819, 838, 839, 848, 856, 862, 863, 901, 906, 908, 911, 914, 916, 998, 1003, 1007, 1010, 1012, 1022, 1025, 1026, 1028, 1033, 1038, 1041, 1042, 1046, 1047, 1049, 1051], "keep_empty_featur": [628, 629, 631, 992, 1048], "keerti": 1048, "kegl": 1037, "kei": [2, 47, 49, 52, 55, 77, 126, 140, 143, 154, 181, 185, 230, 246, 249, 252, 271, 273, 274, 320, 321, 322, 323, 324, 325, 326, 327, 365, 369, 378, 381, 382, 383, 388, 390, 391, 394, 399, 408, 409, 412, 418, 464, 472, 562, 563, 568, 569, 570, 571, 589, 592, 595, 618, 627, 633, 635, 660, 712, 801, 804, 805, 813, 815, 823, 828, 864, 865, 920, 936, 966, 1010, 1022, 1028, 1030, 1039, 1045, 1046, 1048, 1049, 1051], "keith": [351, 1033, 1038], "kekalainen": [727, 757, 1002], "kelkar": [1040, 1041, 1043], "kelleh": [709, 1002], "kelleher2015": 1002, "kellei": [371, 1035, 1036], "keller": 1045, "kellogg": 51, "kellycarmodi": 1043, "kemal": [0, 1035, 1036], "kemenad": 1044, "kemk": 1044, "ken": [373, 1035, 1042], "ken4git": 1047, "kendal": 1048, "kendrick": 1045, "kennedi": [1040, 1043, 1050], "kennel": 1044, "kenneth": [1014, 1033, 1034, 1039, 1040, 1047, 1048], "kenni": 1045, "kensuk": 1043, "kent": 57, "kenta": 1036, "kento": [1048, 1049], "kept": [64, 260, 290, 347, 370, 402, 418, 497, 536, 539, 541, 542, 548, 598, 611, 612, 620, 621, 645, 696, 798, 799, 932, 1012, 1041, 1042], "kera": [388, 1021], "kerimov": [1040, 1041], "kernal": 125, "kernc": [1033, 1047, 1048], "kernel": [2, 23, 24, 27, 42, 45, 48, 49, 50, 66, 67, 68, 84, 99, 106, 116, 119, 121, 129, 132, 155, 161, 166, 169, 171, 172, 173, 174, 177, 181, 196, 197, 213, 226, 238, 239, 247, 251, 263, 268, 270, 272, 275, 276, 280, 285, 291, 296, 301, 315, 322, 331, 334, 335, 337, 338, 340, 341, 342, 343, 345, 348, 359, 363, 368, 378, 388, 390, 396, 406, 408, 409, 412, 415, 416, 431, 440, 448, 452, 461, 462, 465, 482, 483, 484, 491, 497, 499, 503, 505, 515, 534, 535, 536, 542, 545, 555, 557, 559, 561, 563, 566, 569, 571, 594, 595, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 632, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 677, 678, 679, 680, 689, 691, 692, 693, 696, 736, 759, 760, 762, 767, 768, 775, 776, 777, 778, 801, 807, 812, 815, 831, 833, 838, 839, 845, 846, 848, 850, 856, 863, 865, 866, 871, 875, 877, 878, 880, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 914, 916, 922, 991, 997, 998, 999, 1002, 1003, 1005, 1008, 1015, 1016, 1023, 1024, 1027, 1028, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "kernel_": [170, 171, 172, 173, 174, 175, 176, 177, 179, 611, 612], "kernel__length_scal": 170, "kernel__period": 170, "kernel_approxim": [2, 43, 181, 183, 190, 191, 226, 239, 244, 321, 639, 640, 641, 642, 643, 678, 759, 760, 871, 994, 1023, 1034, 1040, 1050], "kernel_dens": [845, 846], "kernel_label": 346, "kernel_metr": [2, 640, 641, 642, 643], "kernel_param": [452, 536, 640, 644], "kernel_pca": [44, 125, 409], "kernel_pca_": 689, "kernel_pca_back_proj_ax": 125, "kernel_pca_proj_ax": 125, "kernel_ridg": [2, 170, 245, 644, 1003, 1037], "kernel_ridge_tun": 170, "kernel_svm": 244, "kernel_svm_scor": 244, "kernel_svm_tim": 244, "kernelapproximationkernel": 396, "kernelcenter": [2, 404, 1012, 1043, 1047, 1049, 1050], "kerneldens": [2, 294, 295, 303, 414, 1035, 1041, 1042, 1046, 1047, 1048], "kernelpca": [2, 44, 409, 413, 534, 535, 542, 545, 689, 691, 693, 871, 1012, 1034, 1035, 1039, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "kernelridg": [2, 125, 170, 245, 673, 995, 1003, 1037, 1050], "kertesz": 1047, "keshat": [667, 668, 998], "keshavan": 1043, "kesshi": [1043, 1044], "kevad": 1043, "kevin": [644, 1035, 1037, 1039, 1040, 1043, 1044, 1045, 1047, 1048, 1050], "kevlani": 1041, "keyber": 1051, "keyerror": [920, 1043], "keyword": [351, 370, 376, 378, 381, 383, 390, 408, 419, 422, 438, 444, 445, 450, 452, 457, 464, 467, 497, 504, 536, 539, 541, 560, 561, 568, 569, 570, 571, 621, 632, 633, 640, 644, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 689, 693, 698, 699, 700, 701, 702, 703, 775, 779, 780, 781, 782, 793, 794, 807, 824, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 865, 869, 944, 968, 991, 999, 1002, 1005, 1015, 1033, 1037, 1039, 1040, 1041, 1043, 1045, 1047, 1048, 1049, 1050, 1051], "kf": [412, 806], "kfold": [2, 87, 140, 145, 159, 265, 275, 359, 412, 437, 472, 568, 569, 595, 603, 648, 652, 654, 656, 662, 664, 666, 674, 801, 804, 805, 807, 809, 811, 815, 820, 822, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 886, 1034, 1035, 1036, 1038, 1039, 1041, 1043, 1051], "khaja": 1048, "khan": [1048, 1049], "khandelw": 1045, "khanduja": 1036, "khant": 1048, "kharsa": 1047, "khedkar": 1047, "khine": 1047, "kho": 1048, "khoo": 1045, "khosasi": 1046, "khosrow": 1002, "khoual": 1046, "khwaja": 1048, "ki": 1002, "kian": [1038, 1048, 1049, 1050], "kid": 1012, "kieker": [1041, 1042], "kielczewski": 1039, "kie\u00dfl": 1044, "kilian": [416, 1048, 1049], "kill": [351, 388], "killer": [376, 1026], "kilobyt": 86, "kilomet": 765, "kim": [998, 1041, 1042, 1043, 1047], "kimayoung": 1047, "kimberli": 51, "kimbinyi": 1045, "kind": [43, 48, 51, 52, 61, 62, 107, 128, 140, 154, 163, 186, 187, 260, 263, 264, 266, 279, 317, 321, 324, 337, 340, 351, 364, 365, 369, 371, 376, 378, 382, 388, 389, 406, 408, 411, 412, 413, 415, 416, 417, 488, 489, 504, 509, 510, 522, 525, 589, 633, 634, 702, 941, 998, 1004, 1009, 1018, 1036, 1045, 1047, 1048, 1049], "king": 936, "kingjr": 1039, "kingma": [862, 863, 1006], "kink": 202, "kiragu": 1045, "kiran": 1045, "kirandevraj": 1048, "kiril": [1040, 1041, 1043, 1045], "kirkbi": [1040, 1041], "kirkham": [1038, 1039, 1041], "kirthi": 1043, "kishan": 1050, "kishimoto": 1045, "kishor": 1046, "kislovskii": 1050, "kit": 388, "kitchen": [642, 994], "kj": [370, 1004], "kjell": 1039, "kk": 1002, "kl": [413, 999, 1041], "kl_divergence_": [693, 1040], "klarup": 1040, "klass": 98, "klau": [413, 536, 871], "kleczewski": [1040, 1041], "kleiber": 1047, "klevebr": 1041, "klima": 1048, "klopfer": 1042, "kluge": [1048, 1049], "kluger": [2, 405, 451, 514], "klusacek": 1002, "km": [94, 323, 352], "kmatt10": 1046, "kmb": 51, "kmean": [2, 57, 58, 71, 78, 80, 83, 86, 90, 91, 94, 183, 258, 261, 313, 323, 352, 385, 399, 408, 434, 435, 436, 440, 443, 448, 449, 452, 462, 513, 711, 793, 794, 798, 799, 870, 1005, 1012, 1022, 1023, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "kmeans_estim": 120, "kmeans_model": 408, "kmeans_plusplu": [2, 92, 408, 1045, 1050], "kmode": 1021, "kms15": [1041, 1042], "knee": 408, "kneighbor": [315, 323, 847, 848, 849, 851, 853, 1005, 1037, 1042, 1046, 1047, 1048, 1049], "kneighbors_graph": [2, 74, 79, 95, 100, 290, 390, 408, 441, 445, 696, 847, 848, 849, 851, 853, 855, 856, 857, 859, 1005, 1033, 1037, 1042], "kneighborsclassifi": [2, 67, 155, 160, 292, 293, 298, 299, 315, 321, 323, 351, 415, 603, 848, 852, 853, 854, 855, 856, 1003, 1005, 1033, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "kneighborsclassifierkneighbor": 396, "kneighborsregressor": [2, 181, 248, 302, 323, 415, 571, 847, 853, 855, 856, 1003, 1005, 1033, 1035, 1037, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "kneighborstransform": [2, 290, 292, 319, 693, 857, 1005, 1043, 1047, 1048], "knight": 316, "knn": [137, 155, 160, 181, 293, 298, 299, 302, 315, 321, 331, 351, 415, 603, 847, 854, 855, 900, 901, 1005, 1015, 1039], "knn__weight": 293, "knn_graph": 74, "knn_impute_scor": 182, "knnimput": [2, 182, 319, 628, 631, 992, 1043, 1044, 1047, 1048, 1049, 1050], "knnquerybatch": 290, "knot": [43, 213, 322, 884, 1012, 1046], "know": [86, 99, 165, 168, 170, 179, 186, 230, 246, 247, 264, 270, 283, 287, 289, 323, 329, 347, 352, 363, 376, 388, 399, 402, 408, 411, 412, 413, 416, 501, 505, 511, 647, 653, 659, 660, 727, 757, 801, 815, 890, 891, 893, 894, 895, 896, 913, 914, 915, 916, 991, 1001, 1002, 1003, 1005, 1014, 1039, 1040, 1043, 1045], "knowledg": [90, 149, 186, 229, 249, 264, 270, 283, 284, 371, 376, 379, 382, 389, 390, 408, 412, 415, 419, 444, 512, 556, 557, 564, 721, 737, 741, 784, 834, 1002, 1003, 1014, 1051], "known": [2, 50, 55, 62, 64, 74, 82, 90, 91, 112, 126, 128, 129, 154, 175, 177, 182, 198, 212, 213, 230, 239, 264, 270, 272, 279, 299, 303, 311, 322, 327, 329, 337, 344, 352, 365, 371, 373, 374, 376, 384, 388, 390, 404, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 438, 463, 482, 484, 499, 509, 510, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 589, 590, 592, 595, 610, 623, 634, 659, 660, 673, 683, 684, 695, 705, 711, 714, 719, 730, 744, 756, 758, 796, 834, 840, 841, 842, 843, 844, 847, 852, 855, 861, 889, 913, 914, 915, 916, 949, 992, 994, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1017, 1018], "known_val": 628, "knox": 1045, "knp": 628, "knr": 415, "knyazev": [408, 452, 462, 696, 1043, 1046, 1047], "ko": [51, 63, 171], "kobak": [693, 1046], "kobaski": 1046, "kobayashi": [1045, 1046], "kober": 1041, "kobi": 736, "koch": [1035, 1041, 1042, 1044, 1045], "kocot": 1044, "koehler": 1037, "koen": [1041, 1042], "koenker": [724, 998], "koh": [998, 1026], "kohavi": 412, "kohli": [1050, 1051], "koi8": 416, "koivunen": 112, "kokhlikyan": [1040, 1041], "koki": 1045, "koko": [1041, 1047, 1048], "kolawol": 1046, "kolganov": 1038, "kolh": 1035, "kolstad": 57, "komarov": 1051, "komey": [1047, 1048], "kommireddi": 1047, "kondratyev": 1047, "kong": 1046, "konstantin": [1038, 1039, 1040], "konstantino": [1041, 1050], "konwar": 1044, "koonc": 1041, "korba": 371, "korean": 1021, "kornel": 1039, "kornev": 1048, "korobko": [1050, 1051], "korobov": [1034, 1035, 1036, 1039, 1040], "korolev": 1043, "kosic": 1045, "kosobrodov": 1041, "kossaifi": [1033, 1037, 1038], "kossen": [1048, 1049], "kossori": [1041, 1042], "kostelac": [1048, 1049], "kot271828": 1046, "kothari": 1044, "kotwalia": [1041, 1042], "koumenti": 1048, "koushik": 1047, "koustav": [1050, 1051], "kovalevskyi": 1039, "kowalski87": 1036, "koyama": 1047, "kozachenko": [608, 609], "kozynet": [1045, 1047], "kpca": [2, 534, 535, 536, 1027, 1028, 1033], "kr": [245, 270, 1047], "kr_fit": 245, "kr_predict": 245, "kraig": 1048, "kraktu": 1051, "kranthi": 1047, "kranz": 1026, "kraskov": [608, 609], "krasouli": [1040, 1041, 1042, 1043, 1045, 1046], "kratzwald": 1039, "krawczyk": 1047, "krawutschk": [1048, 1049], "krell": [1037, 1039], "kriegel": [408, 419, 444, 450, 457, 851, 1008], "krinitsyn": 1041, "krishna": [1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048], "krishnachaitanya9": 1044, "krishnakalyan3": 1039, "krishnan": 1043, "krivich": [1039, 1040, 1042], "kronovet": 1038, "krr": [245, 644, 995], "krsto": 1051, "krum": [1045, 1047], "krumetoft": 1047, "krump": 1038, "kruskal": [636, 691, 695, 999], "krzeminski": 1040, "krzysztof": 370, "ksemb": 1041, "kshitij": [1048, 1049, 1051], "ksvd": [665, 686, 687, 998], "ksvm": 191, "ksvm_score": 191, "ksvm_time": 191, "kth": [57, 822], "ku": [1037, 1038], "kuai": [1041, 1042], "kubin": 1044, "kuhlmann": [1040, 1041], "kulbear": 1042, "kulkarni": 1041, "kull": [406, 1002], "kullback": [54, 232, 413, 539, 541, 548, 693, 999, 1040], "kulsinski": [450, 457, 700, 779, 780, 781], "kulsinskidist": [700, 1049], "kumar": [0, 168, 371, 398, 408, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "kumaresshan": [1041, 1042, 1045], "kumawat": 1047, "kund": [1049, 1050], "kunj": 1046, "kuno": 1051, "kuo": 1037, "kurumeyuta": 1046, "kurz": [1047, 1048], "kusanagi": [1044, 1046], "kusanagi2": 1045, "kushal": [1041, 1042], "kushan": 1050, "kushwah": [1049, 1050], "kushwaha": 1045, "kusterl": 1043, "kuth": 1039, "kvam": [1034, 1036], "kvle": 1039, "kw_arg": [139, 869, 1012, 1039], "kwarg": [76, 123, 246, 378, 383, 422, 426, 430, 438, 442, 448, 450, 464, 469, 536, 539, 541, 564, 632, 647, 648, 653, 654, 661, 662, 663, 664, 678, 682, 685, 699, 700, 701, 703, 743, 864, 865, 869, 909, 920, 961, 967, 969, 990, 1040, 1044, 1046, 1050], "kwd": [772, 775, 779, 782, 793, 794], "kwei": [1036, 1037, 1038, 1039, 1040], "kxytim": 1046, "kybernetika": 373, "kye": 1041, "kyeongpil": 1041, "kyle": [0, 398, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045], "kyledrogo": 1041, "kyler": 1038, "k\u00e4rkk\u00e4inen": 998, "l": [0, 46, 53, 55, 75, 80, 81, 99, 100, 112, 137, 168, 188, 205, 208, 216, 221, 222, 275, 276, 277, 287, 306, 314, 347, 373, 374, 382, 384, 405, 406, 408, 412, 413, 415, 418, 474, 517, 518, 519, 539, 541, 548, 556, 557, 558, 559, 566, 567, 591, 608, 609, 611, 612, 616, 620, 623, 624, 635, 649, 650, 659, 670, 673, 675, 681, 688, 690, 693, 694, 706, 716, 726, 727, 732, 757, 787, 842, 876, 913, 914, 915, 916, 991, 996, 998, 999, 1002, 1004, 1005, 1006, 1010, 1014, 1016, 1018, 1036, 1041, 1045, 1046, 1047, 1048, 1050], "l1": [2, 25, 42, 46, 55, 66, 75, 99, 113, 115, 183, 192, 193, 199, 200, 201, 202, 207, 208, 216, 223, 227, 241, 271, 283, 290, 307, 322, 385, 388, 408, 410, 413, 441, 445, 450, 457, 464, 469, 470, 471, 472, 473, 474, 475, 476, 478, 497, 503, 505, 532, 538, 539, 540, 541, 543, 544, 548, 549, 559, 566, 590, 591, 592, 598, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 673, 677, 678, 679, 680, 682, 689, 736, 763, 769, 774, 779, 780, 781, 786, 815, 822, 831, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 877, 885, 892, 905, 906, 912, 914, 916, 934, 983, 998, 1000, 1002, 1005, 1012, 1016, 1017, 1018, 1023, 1038, 1040, 1046, 1049], "l1_color": 223, "l1_contour": 223, "l1_distanc": 1033, "l1_min_c": [2, 206, 998, 1017, 1033], "l1_plot": 228, "l1_ratio": [46, 49, 54, 198, 201, 204, 278, 283, 363, 388, 413, 539, 541, 548, 647, 648, 653, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 998, 1016, 1034, 1036, 1038, 1045, 1047], "l1_ratio_": [648, 660, 662], "l1_ratios_": 660, "l2": [2, 53, 66, 75, 113, 115, 183, 185, 186, 192, 193, 198, 201, 204, 206, 212, 217, 223, 227, 228, 230, 271, 283, 290, 310, 317, 333, 351, 352, 378, 385, 388, 408, 410, 413, 415, 416, 441, 445, 450, 457, 525, 539, 541, 548, 559, 562, 563, 566, 590, 591, 592, 644, 647, 648, 649, 650, 653, 658, 659, 660, 661, 662, 663, 664, 669, 670, 673, 677, 679, 681, 682, 687, 688, 689, 736, 751, 762, 763, 779, 780, 781, 815, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 863, 877, 885, 892, 905, 906, 910, 911, 912, 914, 916, 984, 991, 995, 998, 1000, 1005, 1006, 1012, 1016, 1018, 1023, 1035, 1037, 1038, 1040, 1042], "l2014": 415, "l2_color": 223, "l2_contour": 223, "l2_regular": [322, 415, 562, 563], "l_": [405, 612, 653, 742, 1002], "l_i": 1012, "l_inf": 55, "l_m": 415, "l_p": [450, 457, 689, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859], "l_x": 53, "la": [0, 316, 373, 397, 1026, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "lab": [0, 371, 468, 537, 903, 1026, 1044], "labb\u00e9": 1051, "label": [2, 30, 38, 43, 45, 46, 48, 50, 51, 52, 53, 58, 61, 62, 63, 64, 66, 68, 69, 73, 75, 77, 78, 80, 81, 82, 84, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 105, 107, 109, 110, 111, 112, 115, 116, 118, 122, 124, 127, 128, 129, 134, 135, 136, 137, 138, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 157, 164, 166, 170, 171, 175, 176, 177, 178, 179, 181, 183, 186, 189, 191, 193, 194, 196, 197, 198, 200, 202, 203, 207, 209, 212, 213, 214, 215, 218, 219, 220, 221, 222, 226, 227, 229, 230, 233, 234, 235, 239, 240, 244, 245, 247, 249, 250, 257, 263, 264, 265, 268, 269, 271, 272, 273, 274, 276, 279, 280, 281, 282, 283, 284, 285, 289, 295, 297, 299, 302, 306, 308, 310, 311, 315, 319, 320, 323, 326, 328, 332, 333, 334, 342, 344, 346, 347, 351, 352, 355, 356, 357, 365, 368, 369, 370, 375, 376, 378, 380, 381, 385, 390, 391, 405, 406, 407, 418, 419, 425, 426, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 462, 465, 469, 487, 488, 489, 494, 495, 496, 497, 503, 504, 509, 510, 513, 515, 516, 520, 523, 524, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 571, 593, 594, 595, 596, 597, 599, 600, 601, 605, 606, 607, 610, 611, 632, 659, 660, 667, 668, 669, 674, 675, 676, 677, 678, 679, 698, 699, 701, 703, 704, 705, 706, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 723, 726, 727, 728, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 755, 756, 757, 758, 783, 784, 785, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 815, 816, 817, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 854, 855, 862, 863, 865, 869, 872, 873, 876, 878, 879, 886, 889, 900, 901, 902, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 921, 925, 931, 936, 937, 964, 965, 972, 991, 998, 999, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1016, 1017, 1018, 1021, 1023, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "label1": 390, "label2": 390, "label_a": 279, "label_b": 279, "label_binar": [2, 277, 279, 872, 1037], "label_binarizer_": 834, "label_distributions_": [329, 330, 900, 901, 1044], "label_im": 99, "label_out": 78, "label_pr": [718, 737, 738, 756, 758, 796], "label_prop_model": [900, 901], "label_propag": 1034, "label_ranking_average_precision_scor": [2, 1002, 1037, 1041, 1042, 1048], "label_ranking_loss": [2, 1002, 1038], "label_spread": 331, "label_tru": [705, 718, 738, 756, 758, 796], "labelbinar": [2, 279, 390, 723, 742, 834, 869, 878, 886, 889, 1003, 1036, 1037, 1038, 1042, 1047], "labelbottom": [157, 270], "labeled_iter_": [332, 902], "labelencod": [2, 390, 570, 879, 1013, 1033, 1041, 1048, 1049], "labeling1": 1002, "labeling2": 1002, "labelkfold": [1038, 1039], "labelleft": 255, "labelpad": 270, "labelpropag": [2, 323, 331, 901, 902, 1003, 1015, 1034, 1039, 1040, 1043, 1044, 1045, 1047, 1048, 1049], "labels": [54, 314], "labels_": [73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 88, 91, 94, 95, 96, 98, 100, 323, 325, 352, 376, 390, 408, 426, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 455, 711, 1038], "labels_050": 98, "labels_200": 98, "labels_a": 72, "labels_b": 72, "labels_pr": [408, 705, 706, 715, 716, 718, 732, 737, 738, 756, 758, 787, 796], "labels_tru": [73, 82, 88, 97, 408, 705, 706, 715, 716, 718, 732, 737, 738, 756, 758, 787, 796], "labels_uniqu": 96, "labelshufflesplit": [1038, 1039], "labelspread": [2, 323, 329, 330, 331, 333, 334, 900, 902, 1003, 1015, 1034, 1039, 1040, 1043, 1044, 1047, 1048, 1049], "labelspreadingifittedlabelspread": 331, "labex": 0, "labl": 149, "laboratori": [371, 1021], "lacchia": 1040, "lack": [43, 64, 344, 376, 388, 412, 830, 920, 1017, 1047], "lacost": [659, 998], "lacouth": 1046, "lacrosse91": 1046, "lad": 1046, "lag": [42, 43, 146, 149, 183, 214, 492, 563, 702, 743, 746, 747, 749, 791, 822, 827, 828, 831, 1023], "lagacheri": 1037, "lagard": 1036, "lagat": 1043, "lagged_count_": 52, "lagged_count_1d": 52, "lagged_count_1d_1h": 52, "lagged_count_7d": 52, "lagged_count_7d_1h": 52, "lagged_df": 52, "lagged_max_24h": 52, "lagged_max_7d": 52, "lagged_mean_24h": 52, "lagged_mean_7d": 52, "lagged_min_24h": 52, "lagged_min_7d": 52, "lai": [51, 315, 344, 1008], "laid": [0, 185, 376], "lakhotia": [1043, 1044], "lakshmi": 1043, "lakshmikanth": 1040, "lakshya": [1041, 1042, 1043], "lal": 901, "lalliacqua": [1043, 1046], "lam": [320, 321, 1044, 1051], "lama": 495, "lamb": [1038, 1046], "lambda": [43, 46, 47, 49, 57, 89, 145, 194, 230, 270, 271, 314, 333, 402, 404, 408, 413, 415, 416, 645, 646, 647, 648, 869, 881, 994, 998, 1012, 1041, 1047], "lambda_": [194, 645, 646, 881, 998, 1040], "lambda_1": [645, 646, 998], "lambda_2": [645, 646, 998], "lambda_i": [998, 1012], "lambda_init": [193, 194, 646, 998, 1043], "lambdas_": [314, 881, 1046, 1049], "lami": 1041, "lamond": 1037, "lamp": 1026, "lamu": 1039, "lan": [659, 1048, 1049], "land": [50, 303, 380, 391, 415], "land_mask": 303, "land_refer": [50, 303], "landeau": 1050, "landmark": [882, 894, 1012], "landscap": 171, "lane": 1039, "langford": [416, 689, 999], "langl": [994, 1002, 1016, 1017], "languag": [0, 353, 381, 413, 416, 1016, 1021, 1022, 1026], "language_level": 377, "lanigan": 1040, "lanl": 55, "lannuzel": 1045, "lanterni": 1047, "lanzani": 1039, "lapack": [363, 364, 374, 533, 536, 542, 689, 1048], "lapack_lit": 382, "lapack_svd_driv": 1048, "laplac": [2, 171, 418, 611, 612, 840, 841, 842, 844, 1004], "laplacian": [2, 232, 368, 405, 440, 452, 462, 621, 640, 644, 692, 696, 766, 767, 775, 901, 998, 999, 1015, 1028, 1034, 1039], "laplacian_kernel": [2, 766, 1000, 1038], "laptop": [52, 384, 468, 903, 1047, 1048, 1049], "lar": [0, 2, 123, 168, 183, 192, 198, 199, 202, 204, 207, 373, 398, 471, 472, 478, 502, 532, 538, 540, 543, 544, 546, 547, 549, 652, 653, 654, 655, 656, 657, 664, 665, 666, 679, 682, 683, 684, 685, 686, 687, 1003, 1023, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1051], "laradji": [0, 1039], "larg": [0, 2, 38, 43, 51, 52, 53, 59, 63, 64, 72, 74, 78, 81, 82, 83, 85, 86, 88, 105, 107, 120, 124, 137, 139, 140, 146, 149, 150, 152, 164, 175, 176, 188, 189, 193, 194, 202, 204, 212, 214, 216, 217, 218, 230, 244, 249, 264, 267, 273, 276, 279, 292, 299, 307, 310, 312, 322, 323, 326, 340, 345, 347, 352, 353, 363, 371, 376, 382, 385, 388, 389, 390, 394, 402, 408, 410, 412, 413, 414, 415, 417, 419, 421, 442, 444, 446, 447, 450, 451, 452, 453, 458, 462, 473, 475, 500, 515, 535, 537, 539, 541, 542, 545, 548, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 583, 590, 635, 642, 644, 647, 648, 651, 653, 654, 655, 658, 659, 660, 665, 672, 673, 675, 678, 680, 686, 688, 690, 692, 693, 694, 696, 747, 780, 781, 801, 809, 811, 815, 819, 830, 840, 841, 842, 843, 844, 845, 846, 851, 862, 863, 870, 874, 875, 883, 885, 897, 898, 905, 906, 910, 911, 913, 914, 915, 916, 948, 949, 991, 994, 996, 998, 999, 1001, 1004, 1005, 1006, 1010, 1012, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "larger": [43, 46, 64, 72, 74, 77, 81, 88, 111, 113, 118, 129, 137, 147, 149, 171, 176, 177, 182, 186, 187, 191, 194, 198, 227, 228, 229, 237, 243, 245, 255, 261, 264, 271, 273, 279, 280, 287, 290, 292, 305, 306, 308, 310, 340, 344, 352, 353, 369, 371, 376, 382, 390, 405, 406, 408, 409, 410, 412, 413, 415, 416, 418, 440, 443, 449, 450, 452, 454, 456, 516, 528, 542, 545, 562, 563, 564, 568, 569, 583, 590, 644, 653, 673, 674, 675, 676, 680, 688, 693, 705, 720, 737, 798, 850, 851, 882, 884, 885, 886, 894, 899, 948, 949, 972, 975, 994, 995, 998, 999, 1001, 1002, 1005, 1006, 1010, 1012, 1016, 1017, 1037, 1038, 1041, 1042, 1043, 1046, 1047, 1050, 1051], "largest": [113, 122, 140, 168, 214, 373, 408, 410, 413, 443, 528, 542, 558, 559, 560, 561, 565, 566, 589, 710, 798, 799, 820, 843, 875, 913, 914, 915, 916, 949, 999, 1002, 1012, 1017, 1018], "largest_clust": [408, 443], "largest_coef": [113, 528], "larrald": 1050, "lars_path": [2, 201, 385, 532, 538, 540, 543, 544, 546, 547, 549, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 684, 685, 686, 687, 998, 1033, 1035, 1038, 1042, 1044], "lars_path_gram": [2, 683, 998, 1042], "larscv": [2, 399, 651, 666, 683, 684, 1040, 1046, 1050], "larson": [1038, 1042, 1043, 1045, 1047], "larsson": [1045, 1046, 1047], "lasagna": 1039, "laska": 1039, "lasso": [2, 42, 55, 99, 129, 154, 159, 183, 186, 192, 204, 209, 211, 220, 260, 322, 326, 347, 363, 388, 410, 411, 413, 415, 416, 417, 471, 472, 478, 502, 525, 532, 538, 540, 543, 544, 546, 547, 549, 598, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 671, 673, 679, 682, 683, 684, 685, 686, 687, 722, 724, 725, 826, 827, 828, 866, 885, 991, 1002, 1003, 1016, 1023, 1024, 1028, 1033, 1037, 1038, 1039, 1041, 1042, 1044, 1046, 1047, 1051], "lasso_cd": [532, 538, 543, 549], "lasso_cv": 159, "lasso_lar": [129, 532, 538, 543, 549, 1043], "lasso_lars_": [200, 202], "lasso_path": [2, 201, 652, 653, 654, 655, 656, 657, 664, 683, 684, 998, 1033, 1035, 1037, 1046], "lasso_pipelin": 154, "lassocolumntransform": 154, "lassocv": [2, 53, 154, 159, 186, 198, 202, 399, 415, 417, 652, 653, 655, 656, 657, 664, 685, 998, 1033, 1036, 1040, 1043, 1044, 1046, 1047, 1050, 1051], "lassocvlassocv": 154, "lassolar": [2, 652, 653, 654, 656, 657, 664, 665, 666, 683, 684, 685, 998, 1003, 1033, 1034, 1036, 1040, 1043, 1044, 1046], "lassolars": [2, 200, 202, 417, 652, 655, 656, 998, 1033, 1040, 1042, 1046, 1047], "lassolarscv": [2, 202, 399, 417, 653, 654, 655, 657, 664, 666, 683, 684, 685, 998, 1033, 1040, 1046, 1050], "lassolarsic__criterion": [200, 202], "last": [43, 58, 79, 91, 146, 186, 193, 212, 213, 220, 225, 239, 261, 273, 281, 282, 315, 321, 323, 332, 355, 363, 371, 374, 378, 380, 381, 384, 390, 394, 402, 408, 409, 416, 420, 438, 442, 447, 459, 464, 467, 468, 516, 534, 560, 561, 562, 563, 584, 585, 588, 594, 595, 598, 611, 683, 684, 686, 687, 698, 699, 701, 702, 703, 708, 783, 798, 799, 804, 805, 820, 845, 846, 850, 865, 866, 870, 878, 884, 920, 952, 976, 990, 991, 997, 998, 999, 1001, 1003, 1006, 1016, 1022, 1033, 1039, 1040, 1041, 1042, 1047, 1049, 1050], "last_hour": [43, 52], "last_mean": 976, "last_n": 976, "last_var": 976, "lat": [50, 303, 499, 765], "late": [316, 365], "latenc": [42, 46, 47, 183, 362, 525, 566, 673, 679, 831, 885, 911, 966, 975, 1021, 1023, 1028, 1036], "latent": [2, 42, 45, 55, 130, 183, 308, 352, 411, 416, 418, 488, 533, 537, 539, 540, 541, 544, 545, 589, 592, 861, 1001, 1021, 1023, 1027, 1028, 1035, 1038], "latentdirichletalloc": [2, 54, 365, 381, 413, 1021, 1038, 1040, 1047, 1048], "later": [0, 50, 86, 134, 139, 147, 170, 187, 191, 193, 249, 264, 287, 303, 353, 359, 374, 382, 388, 389, 402, 415, 851, 874, 875, 883, 885, 994, 1012, 1036, 1039, 1041, 1045], "latest": [319, 320, 321, 322, 323, 324, 325, 326, 327, 374, 376, 380, 382, 384, 1018, 1047], "latestst": 380, "latex": 1033, "latexpdf": 376, "latin": [47, 416], "latitud": [303, 310, 371, 499, 700, 765], "lattarini": 1035, "latter": [43, 54, 260, 270, 279, 280, 298, 315, 347, 365, 373, 390, 407, 412, 415, 416, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 743, 798, 799, 800, 801, 804, 805, 810, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 968, 1005, 1010, 1042], "laughlin": 1040, "launch": [351, 352, 394, 1026], "laur": 1033, "lauren": [0, 360, 693, 697, 999, 1045, 1048], "laurent": [1036, 1037, 1040, 1041, 1048, 1049], "laurenz": 1045, "lauritzen": 1041, "laveen": 1046, "law": 1026, "lawrenc": 264, "lawson": [1040, 1041, 1042], "lawton": 1041, "layer": [2, 43, 67, 142, 152, 161, 172, 174, 183, 219, 228, 250, 304, 307, 308, 312, 313, 334, 345, 363, 384, 415, 515, 516, 523, 568, 831, 861, 862, 863, 866, 885, 1007, 1023, 1024, 1028, 1039], "layout": [134, 310, 388, 905, 906, 907, 910, 932, 1017, 1036, 1038, 1050], "layton": [0, 398, 1033, 1034, 1035, 1036, 1038], "lazaru": 1051, "lazebnik": [759, 760, 1000], "lazi": [52, 391, 416, 1016, 1037], "lazyfram": 105, "lazz": 1048, "lb": [872, 1013], "lbfg": [305, 378, 649, 650, 659, 660, 670, 673, 675, 681, 688, 836, 839, 862, 863, 998, 1006, 1037, 1038, 1040, 1041, 1046, 1047, 1048, 1050], "lbfgsb": 659, "lbfin": 1043, "lc": [51, 235, 242], "lceil": [405, 1008], "lda": [54, 69, 119, 122, 124, 126, 130, 183, 299, 359, 373, 404, 505, 537, 542, 550, 551, 854, 1021, 1023, 1024, 1027, 1028, 1038], "lda_featur": 381, "lda_model": 381, "lda_np": 404, "ldavid": 1039, "ldflag": 374, "ldirer": 1040, "ldl": [168, 373], "ldot": [998, 1002, 1004, 1006, 1016], "ldwy4": [1050, 1051], "le": [659, 873, 993, 998, 1005, 1013, 1015, 1041, 1045, 1046, 1050], "le_": 570, "lead": [0, 46, 62, 64, 67, 72, 85, 88, 94, 104, 140, 143, 144, 146, 167, 168, 186, 187, 188, 193, 198, 202, 204, 209, 212, 216, 244, 246, 249, 264, 270, 271, 273, 277, 283, 295, 296, 307, 310, 312, 315, 316, 321, 340, 347, 352, 355, 359, 363, 364, 370, 375, 384, 385, 389, 390, 405, 406, 407, 408, 410, 412, 413, 414, 415, 417, 452, 462, 465, 468, 497, 516, 528, 536, 539, 540, 541, 544, 548, 552, 558, 559, 560, 561, 564, 565, 566, 567, 607, 631, 647, 648, 651, 653, 654, 655, 661, 662, 663, 664, 680, 692, 696, 747, 798, 804, 805, 833, 845, 846, 850, 869, 876, 886, 897, 898, 903, 905, 913, 914, 915, 916, 991, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1012, 1015, 1016, 1018, 1026, 1036, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1050, 1051], "leader": [376, 1026], "leadership": 0, "leaf": [76, 139, 150, 152, 355, 358, 408, 415, 419, 441, 442, 443, 444, 445, 446, 450, 457, 463, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 913, 914, 915, 916, 917, 918, 1005, 1018, 1036, 1038, 1040, 1044, 1047], "leaf_id": 358, "leaf_rot": 189, "leaf_siz": [419, 444, 446, 450, 455, 456, 457, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 1005], "leagu": 371, "leak": [139, 275, 351, 359, 409, 412, 865, 890, 891, 893, 894, 895, 896, 1012, 1033, 1040, 1043, 1049, 1050, 1051], "leakag": [389, 390, 409, 1028], "lean": 402, "leandro": [1042, 1046], "lear": 1026, "learn": [2, 15, 26, 29, 30, 32, 38, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 328, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 364, 368, 369, 370, 371, 373, 375, 379, 382, 383, 384, 385, 389, 390, 393, 395, 396, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 416, 417, 418, 422, 423, 425, 426, 427, 428, 430, 431, 432, 437, 438, 439, 442, 443, 446, 447, 449, 450, 457, 464, 465, 467, 468, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 509, 510, 511, 513, 515, 516, 517, 518, 519, 521, 522, 523, 525, 526, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 577, 582, 583, 584, 585, 588, 589, 590, 591, 592, 594, 595, 600, 603, 604, 611, 612, 615, 620, 623, 627, 629, 631, 633, 635, 639, 641, 642, 644, 645, 646, 647, 649, 653, 658, 659, 669, 670, 677, 678, 679, 681, 689, 690, 691, 692, 693, 697, 698, 701, 702, 703, 709, 714, 718, 719, 722, 724, 725, 727, 733, 736, 742, 743, 744, 749, 757, 779, 780, 781, 785, 786, 788, 789, 796, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 839, 840, 841, 842, 843, 844, 847, 849, 854, 861, 862, 863, 864, 865, 866, 868, 870, 872, 875, 877, 878, 879, 880, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 903, 905, 906, 907, 910, 913, 914, 915, 916, 921, 923, 934, 943, 944, 954, 967, 968, 991, 992, 994, 995, 996, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1023, 1025, 1028, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "learn_rat": 1034, "learnalgorithm": 396, "learner": [2, 47, 135, 144, 154, 365, 555, 560, 561, 562, 563, 583, 590, 631, 847, 848, 853, 855, 856, 1004, 1007, 1018, 1021, 1022, 1049], "learning_curv": [2, 272, 324, 399, 807, 997, 1036, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1050], "learning_decai": 537, "learning_method": [54, 381, 537], "learning_offset": [54, 537], "learning_r": [46, 134, 144, 145, 146, 147, 148, 149, 237, 290, 306, 308, 320, 322, 415, 554, 555, 560, 561, 562, 563, 669, 677, 678, 679, 693, 861, 862, 863, 999, 1009, 1016, 1034, 1042, 1046], "learning_rate_": [693, 863], "learning_rate_init": [187, 306, 307, 862, 863], "learningcurvedisplai": [2, 245, 272, 324, 997, 1048, 1049], "learnt": [149, 186, 317, 359, 390, 412, 886, 991, 1012], "least": [2, 37, 44, 52, 54, 111, 112, 114, 115, 122, 123, 137, 147, 157, 166, 168, 178, 183, 185, 192, 193, 196, 198, 203, 206, 212, 214, 216, 217, 220, 229, 230, 243, 249, 266, 270, 283, 287, 289, 315, 321, 322, 340, 352, 353, 363, 369, 371, 373, 375, 376, 380, 382, 384, 388, 390, 391, 399, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 444, 448, 450, 456, 457, 458, 461, 474, 481, 482, 483, 484, 485, 495, 502, 517, 532, 538, 540, 542, 543, 544, 546, 547, 548, 549, 550, 558, 559, 560, 561, 563, 565, 566, 567, 594, 595, 603, 636, 644, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 693, 698, 713, 717, 719, 751, 786, 802, 806, 807, 813, 815, 816, 817, 819, 820, 822, 826, 829, 830, 831, 862, 863, 866, 877, 885, 910, 913, 914, 915, 916, 941, 964, 992, 995, 999, 1002, 1005, 1014, 1016, 1017, 1018, 1022, 1023, 1024, 1026, 1028, 1033, 1035, 1036, 1039, 1040, 1044], "least_absolute_devi": [1043, 1045, 1046], "least_angl": 385, "least_squar": 1046, "leastangle_2002": [168, 373], "leastsquareserror": 1042, "leav": [2, 86, 134, 139, 147, 187, 189, 230, 277, 315, 358, 359, 363, 373, 375, 381, 390, 408, 415, 441, 442, 445, 446, 463, 504, 558, 559, 560, 561, 562, 563, 565, 566, 567, 674, 676, 803, 808, 809, 810, 811, 819, 820, 845, 846, 847, 855, 913, 914, 915, 916, 991, 999, 1005, 1009, 1018, 1033, 1040, 1042, 1044, 1045, 1049], "leaveonegroupout": [2, 275, 412, 802, 809, 810, 1039], "leaveonelabelout": 1039, "leaveoneout": [2, 275, 412, 847, 855, 1051], "leavepgroupsout": [2, 412, 803, 1039], "leaveplabelout": 1039, "leaveplabelsout": 1039, "leavepout": [2, 412, 809], "leaves_parallel": 917, "lebedev": [1039, 1040], "lebel": 1048, "lebourgeoi": 1026, "lectur": [408, 645, 994, 1020], "lecture2": 645, "lecun": [1006, 1016], "led": 1033, "ledoit": [2, 49, 65, 70, 108, 109, 112, 113, 183, 299, 473, 475, 479, 480, 513, 550, 996, 1023], "ledoit_wolf": [2, 113, 410, 1046], "ledoit_wolf_shrinkag": [2, 1046], "ledoitwolf": [2, 69, 108, 110, 113, 127, 148, 183, 301, 410, 469, 470, 474, 475, 476, 477, 801, 1023, 1037], "lee": [413, 1033, 1034, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1048], "leepei": 1037, "leereev": 1040, "leeuw": 636, "lefebvr": [1046, 1047], "lefevr": [413, 539], "left": [45, 46, 51, 53, 54, 61, 69, 70, 74, 77, 79, 84, 88, 95, 97, 104, 107, 112, 113, 118, 122, 123, 134, 137, 139, 140, 141, 143, 146, 149, 154, 156, 173, 179, 182, 186, 189, 206, 212, 213, 214, 216, 223, 225, 226, 229, 230, 239, 243, 247, 249, 250, 255, 257, 258, 261, 266, 267, 268, 269, 271, 279, 280, 282, 293, 295, 296, 303, 305, 308, 310, 323, 325, 326, 330, 339, 340, 344, 358, 371, 376, 378, 380, 405, 408, 411, 412, 414, 415, 416, 418, 425, 431, 446, 472, 482, 483, 484, 485, 494, 499, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 588, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 636, 640, 644, 652, 656, 798, 799, 801, 804, 805, 808, 815, 822, 878, 885, 913, 914, 915, 916, 917, 935, 949, 972, 975, 991, 994, 996, 998, 1000, 1002, 1004, 1009, 1014, 1016, 1018, 1040, 1042, 1047], "left_h": 310, "left_impur": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "leftarrow": [408, 1006, 1016], "leftmost": 1006, "legaci": [370, 380, 390, 943, 944, 1033, 1040, 1045], "legarreta": [1044, 1046, 1047], "legend": [43, 46, 47, 48, 50, 52, 61, 63, 69, 72, 75, 94, 104, 105, 107, 109, 110, 111, 112, 115, 116, 122, 124, 126, 127, 128, 129, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 164, 170, 171, 175, 176, 177, 178, 179, 186, 187, 191, 193, 194, 196, 200, 201, 202, 203, 207, 209, 212, 213, 214, 215, 218, 219, 220, 221, 222, 225, 226, 227, 229, 230, 235, 240, 242, 243, 244, 245, 247, 250, 257, 264, 265, 267, 269, 270, 272, 273, 274, 275, 277, 280, 282, 283, 284, 285, 287, 293, 295, 296, 297, 302, 306, 311, 315, 320, 323, 326, 331, 339, 342, 344, 346, 351, 355, 356, 357, 701, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "legend1": 126, "legend_el": [126, 150, 225, 273, 293, 344], "legend_handl": 297, "legend_lin": 48, "legend_titl": 218, "legitim": [264, 999], "legitimate_accept": 264, "legitimate_refus": 264, "lego": 1021, "lehoucq": 413, "leibler": [54, 232, 413, 539, 541, 548, 693, 999, 1040], "leibniz": 1002, "leig": 1039, "leightonzhang": 1039, "leinweb": [1041, 1042], "leisur": 43, "lejeun": 1040, "lekhwani": 1042, "leland": [1039, 1040, 1041, 1043, 1044, 1049], "lemaitr": [0, 397, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "lemir": 1044, "lemma": [37, 243, 368, 535, 542, 550, 897, 898, 899, 996, 1028, 1036], "lemmat": 416, "lemmatoken": 416, "lemo": [1049, 1050], "len": [46, 47, 49, 50, 55, 57, 66, 67, 68, 72, 73, 76, 78, 79, 82, 83, 84, 88, 93, 94, 95, 96, 97, 98, 102, 104, 123, 129, 130, 132, 137, 140, 142, 143, 149, 160, 161, 166, 170, 178, 182, 187, 189, 211, 212, 230, 235, 239, 242, 243, 244, 246, 248, 249, 255, 257, 258, 265, 268, 270, 271, 278, 279, 281, 285, 289, 290, 297, 299, 300, 305, 311, 312, 313, 316, 325, 327, 329, 330, 333, 340, 346, 349, 351, 352, 353, 358, 388, 390, 415, 418, 426, 430, 432, 437, 445, 450, 456, 464, 508, 516, 551, 570, 571, 583, 598, 633, 634, 783, 801, 815, 827, 831, 833, 835, 836, 886, 900, 901, 1042, 1045], "lenail": [1041, 1045], "lend": 1026, "lene": 1049, "length": [2, 102, 118, 126, 128, 130, 142, 168, 170, 171, 172, 175, 176, 178, 191, 197, 246, 247, 250, 253, 293, 321, 324, 337, 353, 369, 373, 376, 384, 385, 390, 409, 413, 415, 416, 418, 445, 490, 509, 510, 513, 516, 524, 552, 564, 582, 583, 590, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 633, 647, 648, 651, 652, 653, 654, 655, 657, 658, 661, 662, 663, 664, 682, 685, 782, 801, 804, 805, 815, 831, 833, 836, 837, 839, 847, 848, 849, 851, 853, 892, 918, 931, 933, 937, 955, 956, 972, 975, 1001, 1008, 1012, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1049], "length_scal": [170, 171, 174, 175, 176, 177, 179, 418, 613, 616, 619, 620, 622, 623, 624, 625], "length_scale_bound": [170, 176, 177, 179, 418, 612, 616, 620, 623, 624], "length_scale_grid": 176, "lengthi": [376, 388], "lenient": [879, 1022, 1050], "lenz": [1044, 1048], "leo": 1050, "leogrin": 1051, "leon": [677, 678, 679, 1033, 1051], "leonardo": 1046, "leonenko": [608, 609], "leonieborn": 1039, "leopoldo": 1046, "leq": [173, 413, 415, 998, 1002, 1005, 1016, 1017, 1018], "lera": 1040, "leriqu": [1039, 1041], "lernen": 450, "lesne": 1047, "less": [43, 44, 47, 64, 85, 86, 93, 118, 120, 123, 130, 134, 141, 146, 147, 149, 170, 177, 186, 196, 198, 212, 214, 216, 245, 249, 256, 258, 264, 270, 271, 279, 281, 284, 285, 311, 314, 315, 316, 321, 323, 327, 344, 351, 352, 359, 363, 365, 371, 376, 378, 388, 390, 402, 408, 412, 413, 415, 416, 420, 439, 441, 443, 445, 448, 450, 452, 457, 460, 462, 463, 482, 483, 484, 497, 516, 532, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 591, 597, 620, 628, 635, 648, 662, 677, 679, 693, 702, 722, 723, 724, 725, 726, 737, 753, 765, 780, 781, 786, 796, 798, 799, 803, 804, 805, 811, 829, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 868, 880, 882, 883, 885, 888, 894, 895, 905, 906, 913, 914, 915, 916, 937, 952, 991, 992, 994, 995, 996, 999, 1001, 1002, 1005, 1007, 1012, 1016, 1017, 1018, 1021, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1043, 1047, 1048, 1050], "lessen": [218, 659, 660], "lesser": [305, 390, 442, 542, 998], "let": [43, 44, 52, 86, 88, 97, 103, 107, 120, 125, 126, 141, 143, 146, 147, 149, 151, 170, 176, 177, 182, 186, 187, 188, 195, 202, 212, 214, 230, 232, 236, 246, 253, 264, 265, 270, 273, 277, 283, 284, 327, 351, 353, 358, 359, 371, 376, 378, 382, 388, 402, 405, 407, 408, 412, 415, 416, 445, 491, 501, 505, 511, 535, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 682, 685, 871, 878, 879, 998, 999, 1000, 1001, 1002, 1009, 1010, 1012, 1017, 1018, 1026, 1043], "letelli": 1039, "letter": [168, 178, 371, 373, 380, 416, 789, 790, 807, 824, 1002], "leu": 1047, "leung": 1044, "lev_metr": 388, "levarag": 326, "level": [43, 48, 50, 51, 64, 70, 76, 86, 120, 139, 142, 161, 168, 169, 170, 171, 174, 177, 179, 183, 186, 187, 223, 224, 225, 226, 227, 230, 239, 243, 244, 259, 264, 270, 273, 279, 280, 296, 303, 338, 339, 341, 342, 344, 347, 352, 358, 363, 371, 373, 376, 378, 382, 388, 390, 393, 394, 399, 406, 413, 416, 418, 422, 454, 468, 494, 495, 497, 504, 522, 532, 537, 538, 546, 547, 548, 562, 563, 568, 569, 612, 616, 623, 624, 626, 667, 668, 669, 677, 678, 679, 688, 691, 693, 695, 701, 703, 717, 724, 729, 786, 826, 827, 828, 830, 833, 834, 861, 862, 863, 903, 918, 991, 998, 1002, 1003, 1005, 1010, 1016, 1018, 1021, 1022, 1023, 1036, 1044, 1047, 1048, 1049], "levelnam": 120, "leven": 388, "levenshtein": [327, 388], "levenshtein_dist": 327, "levequ": [843, 885], "leverag": [43, 47, 72, 82, 116, 230, 327, 351, 352, 363, 364, 374, 390, 412, 415, 880, 991, 998, 1036, 1048, 1051], "levesqu": 1039, "levi": [535, 1040], "levinson": [1041, 1042], "levitski": [1048, 1049, 1050], "levitskii": 1046, "lewi": [371, 1040, 1044], "lex": [408, 452, 462], "lexicograph": [390, 568, 789, 795, 847, 855], "lexicon": 1012, "lexsort": 61, "lf": 384, "lfw": [2, 45, 371, 494, 495, 1033], "lfw_home": 371, "lfw_pairs_train": [371, 494], "lfw_peopl": [45, 371, 495], "lg2012": 415, "lgtm": 1040, "li": [0, 332, 371, 397, 398, 640, 643, 697, 727, 757, 898, 991, 994, 1002, 1005, 1012, 1014, 1017, 1033, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "liabil": 230, "liac": [324, 370, 376, 497, 1048, 1049], "liam": [1041, 1042], "liang": [1039, 1044, 1045, 1050, 1051], "liau": 1036, "lib": [364, 374, 394, 1021], "liberti": 261, "libisel": 1051, "liblinear": [206, 338, 382, 659, 660, 789, 905, 906, 907, 910, 911, 998, 1002, 1017, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1049], "libomp": [374, 1045], "librari": [45, 264, 270, 322, 324, 359, 368, 370, 371, 374, 375, 376, 377, 382, 384, 388, 389, 390, 394, 402, 404, 464, 659, 905, 906, 907, 908, 910, 911, 998, 1002, 1017, 1018, 1021, 1022, 1026, 1031, 1036, 1040, 1041, 1042, 1043, 1044, 1046, 1050], "libsvm": [2, 191, 338, 369, 382, 487, 509, 564, 905, 906, 907, 908, 909, 910, 911, 1017, 1028, 1033, 1035, 1041, 1044, 1047], "libsvmtool": [191, 370, 487, 509, 510], "licenc": 370, "licens": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 388, 390, 1018, 1026], "lichman": 373, "liddel": 1041, "lidston": [840, 841, 842, 844, 1004], "lie": [52, 93, 115, 167, 186, 244, 310, 331, 338, 340, 413, 415, 607, 853, 855, 856, 857, 905, 906, 996, 999, 1002, 1012, 1017], "lieg": 415, "lieret": 1048, "lieu": [1039, 1040], "life": [52, 149, 263, 327, 384, 999], "lifecycl": [1021, 1022], "lifo": 920, "lift": 394, "light": [137, 371], "lighter": [363, 701, 703, 783, 790, 1049], "lightfm": 1021, "lightgbm": [149, 415, 562, 563, 1021, 1042, 1049], "lightgreen": [156, 218, 229], "lightgrei": 49, "lightweight": [377, 801, 815, 826, 827], "ligo": 1040, "lihaitao": 1051, "lik_max": 109, "lik_min": 109, "like": [0, 2, 43, 51, 52, 85, 88, 91, 93, 102, 118, 123, 127, 129, 132, 134, 136, 141, 146, 149, 150, 170, 176, 186, 194, 212, 246, 261, 264, 270, 273, 274, 277, 278, 285, 299, 308, 310, 315, 316, 319, 332, 340, 344, 351, 352, 359, 363, 365, 368, 370, 371, 375, 376, 378, 380, 383, 384, 385, 388, 389, 390, 399, 402, 404, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 516, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 582, 583, 584, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 927, 929, 936, 937, 951, 955, 964, 965, 972, 973, 974, 986, 988, 990, 991, 994, 996, 997, 998, 999, 1002, 1004, 1005, 1006, 1008, 1009, 1012, 1017, 1018, 1022, 1026, 1030, 1033, 1036, 1037, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "likelihood": [2, 69, 90, 108, 110, 111, 112, 113, 127, 148, 170, 171, 172, 174, 175, 176, 177, 179, 183, 200, 230, 259, 262, 270, 276, 301, 308, 310, 378, 390, 406, 410, 413, 415, 418, 437, 469, 470, 471, 472, 473, 474, 475, 476, 477, 516, 533, 537, 542, 550, 551, 552, 611, 612, 632, 646, 659, 713, 742, 798, 799, 801, 828, 831, 850, 861, 881, 893, 907, 908, 910, 911, 998, 1001, 1004, 1012, 1017, 1023, 1036, 1037, 1042, 1048], "likewis": [247, 408, 524], "lil": [390, 554, 555, 872, 927, 955, 1005], "lil_matrix": 55, "lili": [1041, 1042], "lilian": [1038, 1039, 1050], "lim": [173, 535], "lima": [1046, 1047], "limit": [43, 47, 55, 64, 72, 77, 90, 99, 113, 134, 141, 147, 154, 181, 186, 187, 188, 193, 212, 213, 229, 243, 277, 312, 316, 322, 347, 353, 359, 364, 377, 378, 381, 388, 390, 391, 406, 407, 408, 411, 413, 417, 446, 463, 468, 560, 561, 562, 563, 633, 651, 680, 683, 684, 689, 779, 822, 853, 855, 856, 857, 878, 879, 903, 907, 908, 909, 910, 911, 991, 998, 999, 1001, 1002, 1009, 1010, 1012, 1022, 1028, 1041, 1043, 1046, 1047, 1050], "limits_": 1005, "lin": [0, 535, 659, 1017, 1038, 1039, 1040, 1041], "lin_clf": 1017, "linalg": [70, 87, 109, 110, 113, 127, 129, 199, 255, 256, 257, 260, 261, 326, 376, 382, 413, 451, 452, 453, 462, 522, 533, 536, 542, 545, 658, 673, 675, 688, 692, 696, 947], "linalgerror": 1043, "lincoln": 371, "lindenbaum": 535, "lindenstrauss": [37, 183, 238, 368, 489, 503, 897, 898, 899, 1019, 1023, 1028], "lindgren": 1051, "lindquist": 1048, "line": [48, 50, 52, 55, 75, 78, 93, 102, 111, 120, 125, 134, 140, 145, 169, 181, 182, 183, 186, 187, 200, 202, 203, 205, 208, 210, 213, 215, 220, 221, 223, 224, 226, 239, 243, 244, 247, 249, 267, 274, 276, 277, 283, 296, 300, 303, 311, 321, 339, 342, 344, 345, 348, 349, 351, 370, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 388, 413, 414, 415, 438, 487, 488, 489, 509, 510, 543, 554, 555, 556, 557, 611, 614, 615, 633, 671, 687, 701, 702, 703, 807, 824, 996, 1002, 1006, 1009, 1016, 1021, 1023, 1025, 1035, 1044, 1046, 1049, 1050], "line0": [51, 235], "line1": [46, 51, 235], "line2": [46, 51, 235, 348], "line2d": [48, 111, 226, 296, 339, 342, 807, 824], "line_": [383, 438, 699, 701, 702, 703, 807, 824], "line_bin": 311, "line_fig": 140, "line_i": 215, "line_kw": [149, 151, 250, 272, 320, 326, 633, 807, 824], "line_kwarg": [154, 702], "line_profil": 382, "line_trac": 140, "line_x": [215, 229], "line_y_ransac": 215, "linea": 396, "linear": [2, 12, 44, 48, 49, 51, 52, 53, 64, 65, 66, 67, 72, 85, 90, 106, 107, 109, 110, 111, 112, 113, 116, 120, 125, 126, 128, 137, 139, 152, 154, 157, 159, 161, 163, 168, 174, 176, 181, 182, 184, 185, 187, 191, 194, 196, 198, 199, 200, 202, 203, 208, 210, 213, 214, 216, 217, 220, 224, 226, 228, 229, 230, 231, 234, 236, 242, 243, 245, 247, 248, 251, 260, 263, 266, 267, 268, 270, 273, 275, 276, 277, 278, 279, 280, 283, 285, 295, 296, 298, 299, 300, 308, 310, 311, 312, 315, 317, 321, 322, 335, 337, 340, 341, 342, 345, 347, 348, 351, 357, 364, 368, 372, 373, 374, 378, 379, 381, 390, 393, 396, 406, 408, 411, 412, 413, 414, 415, 416, 417, 418, 420, 442, 444, 455, 465, 467, 475, 482, 483, 484, 497, 503, 513, 516, 522, 525, 533, 534, 535, 536, 537, 540, 542, 544, 545, 549, 550, 551, 555, 567, 583, 590, 594, 595, 607, 610, 615, 621, 632, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 689, 690, 691, 692, 693, 694, 702, 708, 717, 720, 751, 754, 766, 768, 775, 801, 812, 816, 828, 831, 845, 846, 850, 854, 861, 862, 863, 866, 870, 871, 872, 875, 878, 880, 882, 883, 884, 885, 894, 898, 905, 906, 907, 908, 909, 910, 911, 991, 993, 994, 995, 997, 1002, 1005, 1006, 1007, 1008, 1009, 1010, 1016, 1017, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1046, 1047], "linear_baselin": 321, "linear_kernel": [2, 404, 762, 766, 1000, 1041], "linear_model": [2, 43, 46, 47, 49, 53, 62, 64, 66, 87, 103, 105, 107, 116, 139, 154, 156, 157, 159, 160, 166, 167, 168, 170, 181, 183, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 239, 240, 241, 242, 246, 248, 251, 253, 264, 266, 273, 278, 279, 283, 284, 285, 289, 308, 311, 312, 315, 317, 319, 320, 321, 322, 323, 325, 326, 327, 333, 351, 359, 363, 365, 375, 376, 378, 382, 384, 385, 389, 390, 399, 404, 407, 409, 415, 428, 433, 438, 465, 538, 540, 543, 544, 546, 547, 549, 568, 569, 570, 571, 598, 632, 633, 635, 636, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 701, 702, 789, 800, 815, 824, 826, 827, 828, 830, 832, 836, 837, 838, 839, 863, 880, 884, 905, 906, 909, 912, 941, 943, 944, 945, 985, 994, 998, 1002, 1003, 1008, 1010, 1012, 1016, 1023, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "linear_model_preprocessor": 212, "linear_pca": 409, "linear_preprocessor": 154, "linear_regress": [214, 285], "linear_sum_assign": [405, 720], "linear_svc": 1017, "linear_svm": 244, "linear_svm_scor": 244, "linear_svm_tim": 244, "lineardiscriminantanalysi": [2, 69, 70, 128, 233, 299, 359, 404, 537, 551, 854, 996, 1003, 1005, 1033, 1036, 1037, 1038, 1039, 1040, 1042, 1045, 1047, 1048, 1049], "linearli": [67, 125, 136, 168, 186, 193, 226, 233, 239, 279, 280, 312, 315, 344, 351, 363, 373, 388, 413, 415, 516, 554, 643, 708, 874, 875, 1002, 1005, 1008, 1017, 1040, 1049], "linearly_separ": [67, 305], "linearmodel": 1046, "linearoper": [326, 688], "linearregress": [2, 116, 157, 185, 193, 203, 208, 209, 210, 215, 218, 229, 242, 246, 248, 266, 285, 311, 359, 376, 388, 389, 409, 415, 465, 571, 633, 636, 647, 650, 653, 655, 672, 673, 688, 998, 1002, 1003, 1012, 1037, 1038, 1042, 1045, 1046, 1047, 1049], "linearregressionifittedlinearregress": 242, "linearregressionlinearregress": 157, "linearsvc": [2, 62, 64, 102, 104, 164, 165, 183, 191, 244, 267, 269, 277, 312, 319, 335, 337, 341, 342, 347, 351, 363, 378, 382, 406, 416, 417, 437, 513, 568, 578, 632, 640, 644, 653, 673, 674, 675, 676, 677, 688, 736, 743, 828, 833, 906, 907, 910, 912, 998, 1002, 1003, 1017, 1023, 1033, 1034, 1035, 1039, 1041, 1044, 1049], "linearsvc__c": 312, "linearsvclinearsvc": [104, 165, 277], "linearsvr": [2, 569, 911, 1017, 1037, 1039, 1044, 1049], "linecollect": [51, 235, 242, 633], "linen": [51, 235], "lineno": 382, "lineplot": [149, 270], "liner": [378, 831], "lines_": [383, 633, 807, 824], "linestyl": [49, 50, 69, 93, 105, 111, 127, 129, 134, 145, 156, 159, 161, 170, 173, 175, 177, 179, 188, 189, 200, 201, 202, 212, 213, 214, 218, 222, 224, 225, 230, 247, 249, 264, 267, 269, 273, 274, 279, 283, 284, 295, 303, 306, 311, 338, 341, 342, 344, 345, 347], "linewidth": [61, 69, 70, 72, 75, 91, 105, 109, 116, 118, 122, 135, 146, 149, 151, 170, 174, 178, 202, 203, 207, 208, 209, 210, 213, 215, 218, 226, 229, 239, 247, 249, 279, 283, 296, 300, 311, 320, 326, 338, 339, 341, 357], "linger": 214, "linguist": [717, 902, 1015], "lingyi1110": 1048, "link": [51, 55, 134, 186, 187, 193, 212, 216, 230, 255, 264, 273, 300, 355, 364, 370, 375, 376, 377, 378, 380, 384, 390, 406, 408, 410, 413, 415, 418, 562, 563, 611, 649, 670, 681, 689, 706, 930, 932, 998, 1005, 1018, 1019, 1021, 1025, 1031, 1033, 1036, 1037, 1040, 1041, 1044, 1050], "link_thickness_i": 300, "linkag": [71, 74, 75, 76, 79, 81, 85, 88, 89, 90, 100, 183, 189, 440, 441, 445, 446, 463, 513, 515, 523, 885, 1021, 1023, 1036, 1041, 1044], "linkage_matrix": 76, "linkage_tre": 1037, "linkedin": 380, "linker": 377, "linnerrud": [369, 1028], "linnerud": [2, 373, 506], "linprog": [671, 998], "linspac": [43, 47, 49, 50, 53, 61, 63, 72, 73, 75, 77, 82, 88, 111, 112, 121, 129, 135, 146, 170, 171, 173, 174, 175, 176, 177, 179, 187, 193, 194, 196, 198, 203, 207, 212, 213, 214, 218, 222, 223, 224, 225, 226, 230, 237, 239, 242, 243, 245, 247, 259, 270, 272, 273, 277, 278, 279, 280, 285, 295, 296, 302, 303, 311, 313, 323, 324, 339, 340, 343, 344, 345, 347, 348, 349, 632, 633, 807, 829, 845, 846], "lint": [376, 384], "linter": 580, "linthresh": [193, 198], "linu": [1049, 1050, 1051], "linux": [376, 378, 379, 384, 1021, 1033], "lipoprotein": [168, 373], "lippert": 998, "lippmann": 371, "lipschitz": [37, 1014], "lisa": [1041, 1042, 1044, 1045, 1047, 1048], "lise": 1047, "list": [0, 2, 43, 47, 49, 51, 52, 53, 55, 57, 58, 62, 68, 75, 79, 82, 95, 102, 129, 130, 138, 140, 145, 154, 189, 216, 249, 250, 265, 268, 270, 271, 273, 274, 279, 299, 312, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 343, 352, 353, 365, 370, 371, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 388, 389, 390, 391, 394, 395, 399, 406, 408, 409, 412, 414, 415, 416, 431, 433, 437, 450, 456, 457, 464, 465, 466, 467, 471, 472, 478, 482, 483, 484, 488, 489, 490, 491, 493, 494, 497, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 524, 533, 551, 552, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 592, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 633, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 682, 685, 687, 688, 693, 697, 698, 700, 711, 712, 713, 714, 717, 719, 726, 734, 743, 747, 755, 779, 782, 784, 789, 795, 798, 799, 801, 804, 805, 807, 812, 813, 815, 824, 826, 827, 828, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 869, 873, 876, 878, 879, 884, 886, 902, 906, 908, 911, 913, 914, 915, 916, 919, 926, 927, 931, 932, 933, 937, 940, 941, 942, 944, 952, 953, 956, 967, 972, 975, 985, 991, 992, 998, 1002, 1004, 1005, 1006, 1009, 1010, 1013, 1018, 1021, 1022, 1026, 1029, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "list_param": 376, "listedcolormap": [67, 70, 142, 298, 301, 305, 312], "listen": 351, "listinfo": 384, "lite": 1033, "liter": [376, 1026], "literatur": [175, 270, 287, 352, 373, 376, 382, 384, 388, 389, 408, 411, 413, 415, 443, 447, 449, 502, 537, 539, 541, 548, 556, 557, 589, 592, 709, 798, 991, 994, 998, 1002, 1043], "litsidi": [1048, 1049], "littl": [186, 187, 188, 189, 239, 371, 416, 462, 645, 801, 815, 949, 992, 999, 1001, 1017, 1018, 1034, 1045, 1050], "lituiev": 1046, "liu": [0, 366, 387, 397, 564, 727, 757, 1002, 1008, 1036, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "liutong": 1041, "live": [50, 102, 186, 264, 303, 371, 376, 408, 499, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 1025], "livesei": 351, "livni": [408, 442], "lizao": 1041, "lizsz": 1039, "lj2017": 408, "lk": 1036, "lkjcalc": 1041, "lkubin": 1044, "ll": [50, 88, 265, 283, 303, 376, 388, 533, 542, 994, 1005, 1018], "llcrnrlat": [50, 303], "llcrnrlon": [50, 303], "lle": [232, 233, 234, 236, 531, 690, 694, 999, 1045], "lle_hessian": 232, "lle_ltsa": 232, "lle_method": 232, "lle_mod": 232, "lle_standard": 232, "lloyd": [408, 443, 447, 449, 459, 1047, 1048], "llvm": 374, "lm": 195, "lmbda": 314, "lmbda_bc": 314, "lmbda_yj": 314, "lml": [171, 172, 176, 418], "ln": [380, 998, 1006, 1012], "loa": [169, 177, 183, 418, 497, 612, 616, 623, 624, 626, 1023], "load": [2, 10, 43, 45, 50, 51, 52, 54, 63, 68, 80, 86, 103, 104, 120, 130, 139, 141, 142, 144, 150, 151, 154, 155, 157, 165, 166, 175, 186, 187, 191, 195, 212, 220, 228, 241, 242, 246, 248, 249, 250, 251, 253, 260, 264, 266, 268, 270, 275, 277, 282, 284, 287, 290, 294, 299, 306, 307, 308, 320, 321, 323, 324, 326, 331, 332, 333, 356, 357, 358, 363, 368, 371, 373, 379, 382, 389, 402, 411, 412, 413, 415, 482, 483, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 533, 535, 544, 845, 846, 949, 1012, 1022, 1028, 1033, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "load_ames_h": 154, "load_boston": [1039, 1041, 1046], "load_breast_canc": [2, 168, 189, 332, 355, 381, 593, 596, 597, 599, 675, 676, 789, 1002, 1038, 1039, 1044], "load_cont": 504, "load_dataset": 351, "load_diabet": [2, 46, 147, 157, 159, 168, 182, 200, 201, 202, 209, 250, 266, 324, 415, 559, 563, 569, 674, 702, 826, 827, 828, 914, 916, 1010, 1039, 1044, 1047], "load_digit": [2, 68, 84, 85, 91, 104, 105, 160, 166, 204, 219, 233, 243, 244, 268, 269, 272, 278, 292, 294, 299, 306, 308, 325, 329, 330, 382, 409, 420, 445, 446, 533, 534, 535, 536, 600, 601, 639, 640, 669, 689, 690, 691, 692, 694, 696, 1039, 1044], "load_fil": [2, 370, 371, 1035, 1047], "load_iri": [2, 66, 76, 106, 124, 126, 128, 130, 142, 155, 161, 164, 172, 197, 206, 221, 253, 257, 263, 275, 276, 277, 279, 280, 293, 298, 301, 306, 319, 321, 324, 334, 336, 337, 340, 343, 356, 358, 389, 402, 408, 409, 412, 415, 417, 428, 562, 568, 602, 603, 611, 620, 621, 623, 624, 632, 659, 660, 712, 789, 801, 804, 805, 807, 815, 833, 854, 900, 901, 902, 913, 915, 917, 918, 919, 992, 997, 1002, 1003, 1004, 1005, 1009, 1012, 1018, 1039, 1041, 1044], "load_lfw_pair": 1038, "load_linnerud": [2, 838, 1039, 1044], "load_mnist": [220, 290], "load_mtpl2": 230, "load_sample_imag": [2, 584, 585, 588, 1042], "load_svmlight_fil": [2, 370, 1033, 1034, 1039, 1040, 1041, 1048], "load_win": [2, 48, 252, 315, 849, 857, 1030, 1044], "loader": [2, 271, 333, 351, 369, 370, 371, 499, 500, 509, 1022, 1033, 1038, 1040, 1041, 1044], "loan": [415, 535, 998, 1026], "loayza": 1047, "lobpcg": [80, 452, 462, 689, 692, 696, 1043, 1046, 1047, 1048], "loc": [43, 46, 47, 48, 61, 63, 69, 75, 104, 107, 110, 111, 112, 115, 122, 124, 126, 127, 128, 129, 134, 136, 137, 138, 145, 146, 147, 148, 149, 151, 154, 156, 157, 164, 170, 171, 177, 179, 186, 187, 196, 201, 203, 207, 212, 213, 214, 215, 218, 219, 222, 225, 226, 229, 230, 235, 242, 243, 244, 245, 247, 249, 257, 258, 265, 268, 269, 270, 273, 274, 277, 280, 283, 284, 285, 293, 295, 296, 306, 311, 314, 315, 320, 323, 326, 331, 339, 342, 344, 346, 347, 351, 356, 357, 815, 882, 894], "loc_a": 314, "loc_b": 314, "local": [2, 43, 48, 51, 58, 74, 85, 90, 94, 120, 123, 139, 140, 151, 168, 175, 176, 183, 187, 213, 226, 231, 234, 236, 239, 243, 249, 291, 300, 339, 357, 364, 373, 374, 376, 380, 382, 384, 394, 408, 413, 415, 416, 418, 447, 452, 462, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 503, 539, 541, 545, 548, 550, 560, 561, 564, 567, 611, 612, 689, 690, 691, 692, 693, 694, 696, 697, 759, 760, 848, 851, 854, 856, 866, 875, 898, 901, 909, 967, 1000, 1001, 1005, 1006, 1018, 1023, 1025, 1027, 1028, 1037, 1041, 1045, 1048, 1051], "local_filenam": 492, "localcach": 394, "locally_linear_embed": [2, 236, 999], "locallylinearembed": [2, 51, 232, 233, 234, 323, 689, 691, 693, 999, 1005, 1038, 1039, 1047, 1048, 1049], "localoutlierfactor": [2, 239, 249, 296, 297, 323, 390, 564, 909, 1008, 1040, 1041, 1043, 1047, 1048, 1049, 1050], "localoutlierfactor__n_neighbor": 249, "locat": [48, 62, 86, 87, 104, 111, 112, 207, 303, 321, 340, 369, 371, 374, 376, 380, 381, 384, 385, 394, 395, 408, 410, 414, 448, 460, 461, 469, 470, 471, 472, 473, 474, 475, 476, 488, 501, 502, 505, 506, 513, 516, 986, 992, 998, 1003, 1008, 1012, 1018, 1041], "location_": [111, 112, 469, 470, 471, 472, 473, 474, 475, 476], "location_reweight": [469, 474], "lock": [379, 394, 401, 402, 967, 1051], "loev": 535, "lof": [2, 48, 183, 226, 239, 249, 291, 339, 564, 851, 909, 1008, 1023], "lof_kw": 249, "lofti": [1043, 1044], "log": [2, 43, 58, 62, 63, 64, 109, 120, 134, 144, 146, 154, 164, 168, 171, 172, 174, 175, 176, 179, 200, 202, 206, 212, 217, 222, 230, 243, 245, 259, 264, 300, 315, 351, 371, 373, 374, 376, 384, 385, 390, 405, 406, 408, 409, 410, 413, 415, 416, 418, 448, 451, 460, 465, 470, 471, 472, 473, 474, 475, 476, 533, 537, 542, 550, 551, 552, 554, 556, 558, 560, 563, 565, 591, 592, 594, 595, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 643, 646, 649, 659, 660, 670, 672, 677, 681, 723, 742, 756, 798, 799, 801, 804, 805, 815, 840, 841, 842, 843, 844, 845, 846, 850, 861, 862, 869, 870, 899, 902, 907, 910, 912, 913, 915, 947, 991, 994, 996, 998, 999, 1004, 1005, 1007, 1010, 1012, 1016, 1018, 1021, 1022, 1035, 1036, 1037, 1042, 1043, 1044, 1047, 1050, 1051], "log10": [164, 176, 186, 206, 271, 340], "log1p": [107, 242, 869, 1002, 1012], "log2": [138, 222, 251, 558, 559, 560, 561, 565, 566, 913, 914, 915, 916, 1003], "log_": 1002, "log_2": [405, 564, 1008], "log_bas": 727, "log_den": 295, "log_dens": 850, "log_likelihood": [109, 611, 612, 798, 799], "log_likelihood_gradi": [611, 612], "log_logist": 1050, "log_loss": [2, 62, 63, 145, 148, 171, 315, 333, 351, 390, 406, 415, 558, 560, 562, 565, 647, 659, 677, 913, 915, 991, 998, 1002, 1016, 1018, 1035, 1037, 1039, 1047, 1048, 1049, 1050], "log_marginal_likelihood": [171, 172, 174, 176, 179, 418, 611, 612, 1043], "log_marginal_likelihood_value_": [611, 612], "log_prob": [798, 799, 800, 823], "log_reg": [253, 323], "log_reg_input_featur": 323, "log_scal": 1049, "log_scale_transform": [212, 230], "log_scaled_numer": [212, 230], "log_y_prob": 862, "logaddexp": 1050, "logan": [1047, 1048, 1049], "logarithm": [2, 107, 154, 186, 216, 243, 271, 340, 390, 417, 460, 591, 659, 660, 677, 705, 727, 742, 752, 756, 757, 758, 792, 800, 823, 836, 845, 846, 947, 1018, 1040], "logcosh": [420, 534], "logdet": 947, "logged_in": 371, "logger": 1044, "logic": [132, 364, 377, 378, 383, 404, 415, 1018, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "logical_and": [53, 146], "logical_not": [57, 97, 129, 215], "logical_or": [214, 220, 279, 382], "logical_xor": [53, 174, 344], "loginov": 1039, "logist": [2, 62, 64, 66, 101, 103, 107, 126, 128, 130, 139, 160, 166, 183, 192, 201, 208, 210, 216, 218, 221, 223, 229, 240, 242, 253, 264, 278, 281, 283, 284, 289, 307, 308, 315, 323, 336, 337, 347, 348, 351, 390, 391, 406, 409, 415, 417, 418, 437, 489, 497, 503, 505, 513, 542, 560, 562, 611, 632, 647, 658, 659, 660, 667, 669, 677, 742, 801, 815, 831, 834, 861, 862, 863, 865, 885, 912, 934, 936, 1002, 1006, 1007, 1016, 1017, 1023, 1024, 1026, 1028, 1037, 1040, 1041, 1043, 1044], "logistic__c": 105, "logistic_regress": [264, 824, 832], "logistic_regression_path": [1041, 1042], "logisticregress": [2, 62, 66, 103, 105, 139, 156, 160, 166, 167, 168, 197, 203, 204, 205, 206, 219, 227, 228, 240, 241, 251, 253, 264, 273, 279, 284, 308, 312, 319, 320, 321, 322, 323, 325, 327, 351, 363, 376, 378, 382, 384, 389, 399, 406, 407, 409, 415, 417, 428, 433, 438, 568, 570, 598, 632, 635, 644, 653, 660, 673, 674, 675, 676, 677, 688, 701, 789, 800, 815, 824, 830, 832, 836, 837, 839, 890, 891, 893, 894, 895, 896, 912, 943, 944, 945, 985, 998, 1002, 1003, 1012, 1016, 1017, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "logisticregression__c": [264, 312], "logisticregressioncv": [2, 64, 315, 390, 399, 659, 998, 1003, 1037, 1038, 1039, 1041, 1042, 1043, 1047, 1048, 1050, 1051], "logisticregressionifittedlogisticregress": 308, "logisticregressionlogisticregress": [103, 139, 240, 241, 251, 253, 264, 284, 320, 323], "logit": [2, 406, 418, 659, 660, 998], "loglik_lw": 109, "loglik_oa": 109, "loglik_r": 109, "loglike_": 533, "loglog": [109, 243], "logloss": 1044, "lognorm": [146, 176, 195, 259, 314, 1012], "logo": [0, 412, 808], "logprob": 850, "logreg": [197, 839], "logspac": [43, 51, 64, 105, 109, 127, 159, 168, 171, 176, 186, 206, 216, 217, 243, 245, 259, 264, 271, 283, 294, 305, 312, 315, 340, 347, 824, 832, 997, 998], "logsumexp": [300, 1040], "loguniform": [45, 170, 278, 991, 1043], "logx": [216, 347], "lohit": 1050, "loic": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "loki": [364, 1002, 1041, 1044], "lomp": 374, "lon": 765, "london": [409, 416, 466], "londschien": [1046, 1050], "lone": [1048, 1049], "long": [0, 30, 43, 50, 51, 79, 95, 146, 175, 182, 186, 188, 212, 246, 247, 249, 273, 303, 310, 320, 351, 352, 359, 364, 374, 376, 384, 388, 390, 391, 402, 408, 453, 499, 539, 677, 678, 679, 804, 805, 840, 841, 842, 843, 844, 862, 863, 873, 1002, 1008, 1012, 1013, 1015, 1016, 1020, 1035, 1039, 1045, 1047], "long_term_trend_kernel": 175, "long_titl": 344, "longer": [0, 43, 70, 86, 137, 186, 187, 201, 307, 322, 376, 378, 408, 412, 415, 416, 449, 537, 564, 997, 1001, 1002, 1004, 1007, 1017, 1025, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "longest": 290, "longitud": [303, 310, 371, 499, 700, 765], "longpathsen": 394, "longstand": [1034, 1040], "loo": [390, 809, 1044], "look": [43, 44, 64, 86, 88, 120, 123, 125, 146, 147, 170, 175, 176, 182, 186, 187, 214, 232, 236, 239, 246, 261, 264, 265, 270, 272, 284, 307, 326, 351, 352, 359, 364, 365, 370, 371, 376, 377, 378, 380, 382, 384, 388, 389, 408, 411, 413, 414, 415, 416, 448, 488, 489, 558, 559, 560, 561, 565, 566, 603, 604, 632, 660, 693, 885, 913, 914, 915, 916, 998, 999, 1012, 1016, 1017, 1019, 1033, 1041, 1043], "lookup": [385, 966, 1042], "loop": [46, 47, 137, 146, 186, 265, 275, 351, 358, 363, 376, 377, 382, 408, 412, 417, 647, 648, 653, 654, 660, 661, 662, 663, 664, 991, 1015, 1016, 1036, 1037, 1040, 1045, 1046, 1049, 1050], "loopym": 1043, "loos": [261, 267, 1017, 1041], "looser": 206, "lopusz": 1044, "lorain": 324, "lorek": 1040, "lorentzen": [0, 397, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "lorenz": [212, 230, 1038, 1050], "lorenz_curv": [212, 230], "lose": [216, 229, 353, 371, 390, 411, 416, 418, 948, 949, 992, 998], "losi": [0, 398, 1033], "loss": [2, 25, 46, 52, 61, 62, 63, 64, 129, 140, 145, 146, 147, 148, 170, 171, 183, 192, 196, 203, 206, 214, 216, 217, 219, 220, 224, 230, 245, 264, 278, 306, 307, 315, 322, 326, 327, 333, 337, 338, 342, 344, 347, 351, 388, 390, 406, 413, 418, 464, 465, 497, 509, 510, 533, 539, 540, 541, 544, 548, 553, 554, 555, 559, 560, 561, 562, 563, 566, 644, 647, 650, 659, 660, 667, 668, 669, 670, 671, 672, 673, 677, 678, 679, 680, 704, 707, 710, 723, 724, 735, 736, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 791, 792, 797, 801, 804, 805, 815, 827, 828, 831, 862, 863, 865, 866, 869, 870, 878, 879, 880, 885, 905, 906, 911, 912, 914, 916, 949, 953, 995, 998, 1006, 1010, 1015, 1016, 1017, 1018, 1023, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "loss_": [306, 862, 863, 1006, 1047], "loss_curve_": [306, 862, 863], "loss_func": 52, "loss_funct": 52, "loss_function_": 1050, "lossfit_timemapermsemaepinball_loss_05pinball_loss_50pinball_loss_95strstrstrstrstrstrstrstr": 52, "lossfunct": 1042, "lossi": 408, "lossili": 390, "lost": [58, 90, 113, 371, 377, 388, 402, 999, 1002], "lostanlen": 1043, "lostcoast": 1043, "lot": [43, 113, 149, 186, 216, 371, 376, 377, 378, 384, 413, 415, 804, 805, 897, 898, 991, 1014, 1016, 1017, 1021, 1022, 1026, 1033, 1038, 1040, 1041, 1042, 1043, 1045], "lot_area": 249, "lotan": 1026, "lotconfig": 143, "lotfrontag": 107, "loui": [324, 1038, 1039, 1043, 1045, 1047, 1049, 1050], "louib": [1041, 1042], "loupp": [0, 398, 415, 556, 557, 1033, 1034, 1035, 1036, 1037, 1038, 1039], "lourida": 1039, "low": [2, 37, 43, 50, 51, 72, 83, 112, 116, 122, 124, 127, 134, 137, 150, 168, 188, 206, 208, 212, 214, 216, 226, 232, 234, 239, 243, 249, 255, 256, 258, 261, 263, 264, 270, 272, 276, 277, 296, 297, 307, 314, 316, 317, 325, 332, 339, 340, 351, 358, 372, 373, 376, 381, 384, 388, 390, 394, 405, 406, 407, 412, 413, 416, 442, 444, 449, 468, 522, 525, 536, 583, 590, 604, 680, 693, 697, 706, 727, 743, 790, 850, 879, 886, 903, 949, 966, 991, 997, 998, 999, 1001, 1002, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1017, 1018, 1024, 1028, 1034, 1037, 1038, 1039, 1041, 1042, 1047, 1048], "low_cardin": 316, "low_cardinality_featur": 316, "low_cardinalityindex": 316, "low_i": 208, "low_x": 208, "lower": [37, 44, 52, 63, 64, 67, 69, 91, 110, 116, 120, 122, 127, 134, 137, 140, 142, 146, 149, 150, 166, 170, 172, 174, 176, 178, 186, 187, 188, 198, 199, 201, 203, 212, 213, 214, 215, 225, 232, 236, 242, 243, 248, 257, 261, 264, 269, 270, 272, 273, 277, 278, 280, 283, 284, 293, 294, 296, 297, 312, 315, 323, 327, 332, 340, 351, 352, 353, 356, 371, 376, 390, 406, 407, 408, 411, 412, 413, 414, 415, 416, 419, 444, 448, 464, 467, 499, 510, 533, 535, 542, 545, 560, 561, 562, 563, 564, 589, 590, 592, 604, 612, 614, 615, 616, 618, 620, 621, 623, 624, 626, 633, 634, 636, 638, 678, 680, 713, 717, 726, 729, 735, 740, 798, 799, 851, 853, 855, 856, 857, 859, 886, 905, 906, 907, 908, 909, 912, 935, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1014, 1016, 1017, 1018, 1035, 1036, 1041, 1048, 1050], "lower_bound": 269, "lower_bound_": [798, 799, 1041], "lowercas": [416, 424, 442, 443, 445, 447, 449, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 589, 590, 592, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 866, 871, 897, 898, 1046], "lowest": [2, 107, 116, 187, 198, 260, 370, 408, 412, 636, 638, 804, 805, 808, 912, 913, 999, 1002, 1018, 1048], "loyal": 1038, "loyola": [0, 366, 1046, 1047], "lo\u00efc": [0, 397, 1041, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "lp_model": [329, 330], "lpgo": [412, 810], "lpo": 811, "lprun": 382, "lr": [62, 64, 139, 156, 157, 215, 241, 242, 266, 273, 389, 399, 415, 569, 570, 571, 713, 985], "lr_": 1002, "lr__c": 415, "lr_base": 273, "lrap": [740, 1002], "lrjball": [1043, 1044], "lrlinearregress": 157, "ls100": 334, "ls2010": 994, "ls30": 334, "ls50": 334, "ls_pipelin": 333, "lsa": [2, 413, 545, 1035], "lsa_vector": 352, "lshforest": [1037, 1040], "lsi": 413, "lsqr": [69, 317, 550, 673, 675, 688, 996, 1034, 1040, 1047], "lstrip": [67, 79, 95, 239, 305, 312], "lstsq": [129, 376, 658, 671], "lsturtew": 1046, "lsvc": 417, "lsvm": 191, "lsvm_score": 191, "lsvm_time": 191, "lt": [103, 104, 139, 154, 186, 260, 268, 282, 376, 396], "ltd": [264, 371], "ltg": [168, 373, 502], "ltorgo": 371, "ltsa": [232, 233, 234, 690, 694, 999], "lu": [542, 545, 948, 949, 1039, 1040, 1041, 1042, 1049, 1050, 1051], "luangkot": 1040, "luca": [1033, 1043, 1044, 1045, 1046], "lucca": 1046, "luce": 1036, "lucen": 416, "lucgiffon": 1044, "luci": [0, 366, 387, 397, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "luciano": [1041, 1048], "lucieclair": 1047, "lucija": 1041, "lucio": 1042, "lucki": 359, "lucyleeow": 1044, "ludwig": 1033, "luessi": 1035, "lui": [659, 1034, 1036, 1037, 1041, 1050], "luiz": 1047, "luk": 1042, "luka": [1037, 1044, 1050, 1051], "luke": 1041, "lukowski": 1048, "luk\u00e1\u0161": 1050, "luna": 1047, "lunt": 1036, "luo": 1037, "lupo": 1045, "luqi": 1042, "luqu": 1043, "lurk": 1033, "lustig": 998, "lutz": [1039, 1043, 1046, 1050], "luxburg": [408, 452, 462, 692], "luzgin": 1043, "lv_ep": 244, "lvdmaaten": [693, 1040], "lw": [93, 109, 110, 112, 124, 128, 129, 207, 213, 215, 218, 222, 229, 235, 258, 265, 280, 295, 310, 331, 346], "lw_cov_": 113, "lw_mse": 110, "lw_prec_": 113, "lw_score": 127, "lw_shrinkag": 110, "lwda": 450, "lx": 1005, "ly": [244, 853, 855, 856, 857, 1037], "ly648499246": 1046, "lynch": [1034, 1040], "lyon": [1039, 1040], "lyra": [1034, 1037, 1038], "lyrl2004": [371, 498], "l\u00e9o": 1041, "l\u00e9on": [1016, 1047, 1048, 1049], "l\u00e9onard": [1043, 1048], "l\u00e9one": 1039, "l\u00e9oni": 1039, "l\u00f3pez": [1037, 1041, 1042, 1045], "l\u00f6fstedt": 1040, "l\u00f6ning": 1045, "m": [0, 43, 47, 50, 57, 63, 64, 79, 91, 92, 96, 97, 98, 111, 112, 120, 134, 157, 196, 212, 230, 270, 274, 303, 326, 333, 336, 346, 351, 363, 364, 370, 371, 373, 374, 376, 380, 382, 390, 394, 405, 406, 408, 410, 413, 415, 417, 419, 444, 445, 446, 450, 457, 473, 474, 501, 514, 529, 533, 535, 537, 542, 640, 646, 650, 665, 672, 686, 687, 690, 694, 709, 717, 727, 742, 757, 759, 760, 798, 799, 851, 876, 949, 980, 981, 992, 994, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1010, 1012, 1016, 1018, 1026, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "m1": [374, 404], "m11": 371, "m2": 404, "m2012": 995, "m2019": 1009, "m_max": 172, "ma": [113, 316, 340, 998, 1039, 1044], "maascha": 1048, "maaten": [693, 697, 999], "mabel": [1041, 1045], "mabu": 1046, "mac": [57, 316, 333, 371, 376, 709, 1002], "macaulei": 316, "macbook": 1041, "macdonald": [1043, 1044], "mach": [275, 406, 412, 594, 595], "machado": [406, 724], "machin": [0, 2, 39, 43, 45, 47, 48, 52, 64, 96, 105, 140, 160, 164, 165, 168, 170, 175, 184, 188, 203, 208, 224, 252, 264, 270, 273, 276, 287, 304, 310, 315, 317, 321, 324, 327, 336, 341, 344, 347, 351, 353, 363, 364, 369, 370, 371, 373, 376, 379, 383, 388, 389, 390, 393, 396, 402, 406, 408, 412, 413, 415, 416, 418, 437, 439, 448, 471, 472, 478, 503, 505, 511, 517, 518, 519, 531, 533, 535, 542, 545, 556, 557, 558, 559, 560, 561, 565, 566, 567, 594, 595, 611, 612, 615, 620, 623, 635, 639, 640, 642, 644, 645, 646, 651, 652, 655, 656, 657, 658, 659, 660, 677, 683, 684, 693, 709, 714, 726, 736, 742, 744, 786, 789, 798, 830, 831, 845, 846, 851, 854, 861, 862, 863, 865, 883, 885, 891, 905, 906, 907, 908, 910, 911, 915, 916, 991, 992, 994, 995, 998, 999, 1000, 1002, 1003, 1005, 1008, 1009, 1010, 1012, 1016, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1033, 1035, 1045, 1046, 1047, 1048, 1050], "machineri": 954, "maciej": 1044, "maci\u00e0": [1002, 1046, 1048], "mackai": [645, 646, 998], "mackenbach": 1044, "maco": [377, 379, 394, 404, 1041, 1045, 1047], "macosx": 1033, "macro": [45, 68, 102, 165, 268, 308, 319, 329, 330, 371, 412, 708, 714, 730, 731, 739, 784, 785, 788, 789, 823, 1002, 1033, 1041, 1049], "macro_roc_auc_ovo": 279, "macro_roc_auc_ovr": 279, "macroscop": 408, "macsween": [1042, 1043], "mad": [672, 1039], "madan": 1045, "made": [0, 52, 64, 102, 112, 125, 126, 134, 140, 157, 177, 186, 187, 212, 230, 249, 261, 274, 316, 320, 340, 356, 363, 371, 373, 376, 380, 390, 391, 399, 408, 415, 416, 420, 443, 446, 447, 449, 459, 497, 504, 589, 590, 592, 631, 632, 657, 666, 680, 686, 687, 736, 784, 801, 804, 805, 815, 819, 820, 821, 842, 845, 846, 1003, 1008, 1018, 1021, 1026, 1033, 1034, 1035, 1036, 1037, 1040, 1042, 1043, 1046, 1047, 1051], "madelon": 516, "madhura": [1042, 1044, 1045, 1048, 1049], "madinak": 1048, "madsen": [1039, 1041], "mae": [43, 52, 154, 212, 214, 559, 566, 746, 914, 916, 1002, 1018, 1040, 1041, 1045, 1046], "mae_test": 186, "mae_train": 186, "maennel": 1048, "magali": 1047, "magazin": [112, 417], "magda": 1044, "magenta": [109, 148], "maggi": [1047, 1051], "maggiecheg": [1043, 1047], "maggio": [1044, 1045, 1046], "magic": [246, 377, 382, 418, 617, 622, 625], "magnesium": 373, "magnitud": [43, 129, 136, 171, 182, 186, 229, 249, 275, 310, 315, 322, 327, 363, 371, 382, 408, 415, 418, 614, 653, 705, 885, 998, 1002, 1006, 1012, 1016, 1018, 1035, 1042, 1051], "mahajan": [1041, 1043, 1050], "mahal": 111, "mahal_emp_cov": 111, "mahal_robust_cov": 111, "mahalanobi": [108, 112, 183, 215, 408, 410, 450, 457, 469, 470, 471, 472, 473, 474, 475, 476, 700, 779, 780, 781, 996, 1005, 1008, 1023, 1041, 1044, 1045], "mahalanobisdist": 700, "mahapatra": 1040, "mahdavi": 640, "maheshakya": [0, 1036, 1037, 1038], "mahieux": 1026, "mahimkar": 1051, "mahmood": 1051, "mahout": 842, "mai": [0, 2, 25, 47, 57, 62, 74, 79, 80, 89, 103, 116, 120, 143, 144, 149, 168, 174, 176, 178, 186, 189, 191, 194, 198, 202, 216, 218, 237, 246, 249, 273, 275, 277, 278, 284, 305, 315, 330, 340, 344, 347, 351, 352, 353, 359, 363, 364, 365, 368, 370, 371, 372, 373, 375, 376, 378, 380, 381, 384, 388, 390, 391, 394, 399, 402, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 431, 439, 440, 441, 443, 444, 445, 446, 447, 449, 451, 452, 453, 454, 459, 462, 465, 469, 472, 482, 483, 484, 487, 488, 489, 497, 509, 510, 516, 535, 536, 539, 541, 542, 545, 548, 549, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 575, 582, 595, 598, 603, 611, 612, 618, 621, 635, 636, 638, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 677, 678, 679, 680, 682, 685, 687, 689, 690, 692, 693, 694, 696, 698, 706, 712, 713, 716, 717, 719, 720, 722, 723, 724, 725, 727, 739, 757, 764, 786, 787, 801, 803, 804, 805, 806, 815, 816, 817, 820, 821, 826, 830, 833, 838, 839, 840, 841, 842, 844, 847, 848, 849, 851, 853, 855, 856, 857, 863, 864, 865, 868, 870, 880, 882, 883, 884, 885, 886, 888, 894, 897, 898, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 929, 931, 932, 938, 952, 953, 991, 992, 994, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1033, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "maikia": [1041, 1042, 1044, 1045], "mail": [371, 376, 380, 384, 388, 391, 1041, 1042], "mailhot": 1033, "mailman": 384, "main": [2, 37, 48, 68, 95, 116, 124, 143, 183, 239, 279, 289, 318, 347, 351, 363, 364, 365, 369, 374, 376, 378, 380, 382, 384, 388, 389, 390, 393, 394, 406, 408, 413, 415, 416, 418, 504, 526, 531, 550, 551, 626, 714, 835, 905, 906, 991, 999, 1001, 1002, 1009, 1014, 1022, 1025, 1033, 1036, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "mainak": 1040, "maingret": 1044, "mainli": [64, 86, 134, 137, 170, 279, 287, 363, 378, 406, 612, 1004, 1009], "maint": 380, "maintain": [88, 217, 230, 232, 246, 270, 364, 375, 379, 382, 383, 384, 388, 390, 391, 394, 408, 415, 440, 442, 874, 875, 881, 882, 885, 890, 893, 894, 896, 998, 999, 1012, 1021, 1022, 1028, 1048], "mainten": [0, 376, 384, 388, 394, 401, 998, 1022, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mainy": 1045, "mair": 636, "mairal": [413, 532, 538], "maisonneuv": 1045, "maithreyi": 1043, "maj": 570, "major": [2, 49, 54, 70, 140, 264, 277, 310, 314, 319, 320, 321, 322, 323, 324, 325, 326, 344, 353, 357, 363, 371, 375, 376, 380, 382, 388, 391, 402, 408, 412, 414, 416, 552, 570, 571, 695, 917, 919, 1002, 1005, 1016, 1022, 1026, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "majorfeatur": 380, "make": [0, 2, 43, 46, 47, 50, 52, 54, 55, 58, 59, 62, 63, 64, 74, 75, 78, 79, 89, 94, 95, 100, 105, 125, 134, 140, 143, 146, 149, 152, 165, 168, 170, 175, 178, 185, 186, 187, 188, 193, 198, 199, 202, 205, 206, 207, 212, 213, 214, 216, 218, 230, 233, 241, 243, 245, 246, 247, 249, 255, 257, 260, 261, 264, 265, 270, 272, 273, 279, 280, 281, 284, 289, 299, 307, 310, 311, 316, 323, 325, 327, 340, 349, 351, 352, 353, 357, 359, 363, 364, 365, 370, 371, 374, 375, 377, 378, 379, 380, 381, 382, 384, 388, 390, 394, 399, 402, 405, 406, 408, 409, 410, 412, 413, 415, 416, 417, 420, 440, 441, 442, 443, 445, 447, 449, 451, 452, 453, 458, 459, 460, 462, 488, 504, 515, 516, 523, 524, 528, 533, 535, 542, 552, 553, 556, 557, 562, 563, 584, 585, 608, 609, 632, 650, 656, 657, 672, 692, 696, 731, 738, 743, 769, 770, 782, 798, 799, 801, 803, 806, 812, 816, 817, 820, 821, 827, 828, 835, 836, 839, 872, 881, 884, 885, 889, 893, 895, 896, 897, 898, 911, 919, 924, 931, 932, 943, 949, 956, 962, 987, 992, 994, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1026, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "make_": 1042, "make_biclust": [2, 59, 514, 1035], "make_blob": [2, 61, 63, 69, 73, 77, 78, 79, 82, 88, 89, 90, 92, 93, 95, 96, 97, 205, 224, 239, 258, 313, 320, 323, 338, 341, 342, 348, 372, 379, 415, 516, 697, 711, 793, 794, 921, 1041, 1044, 1047], "make_cbar": 281, "make_checkerboard": [2, 58, 512, 1035], "make_circl": [2, 67, 79, 95, 125, 152, 237, 305, 306, 312, 331, 372, 1034, 1041, 1044], "make_classif": [2, 62, 64, 67, 138, 139, 141, 165, 167, 267, 273, 281, 282, 300, 305, 312, 319, 321, 325, 327, 347, 359, 372, 379, 404, 407, 415, 437, 438, 487, 513, 554, 556, 558, 565, 606, 608, 667, 698, 699, 701, 703, 800, 823, 824, 829, 830, 832, 835, 862, 865, 905, 912, 991, 1002, 1003, 1012, 1017, 1039, 1040, 1041, 1043], "make_column_selector": [2, 103, 143, 154, 249, 409, 464, 467, 1043], "make_column_transform": [2, 143, 154, 186, 241, 320, 409, 464, 466, 1041], "make_data": [70, 94], "make_dataset": 1042, "make_default": 971, "make_ellips": 257, "make_estim": 249, "make_friedman1": [2, 372, 415, 540, 544, 594, 595, 633], "make_friedman2": [2, 372, 612, 614, 615, 616, 617, 618, 622, 625, 626], "make_friedman3": [2, 372], "make_gaussian_quantil": [2, 134, 136, 372, 470, 474, 475, 476, 481, 521], "make_hastie_10_2": [2, 148, 274, 372, 415, 560, 1009], "make_heatmap": 281, "make_low_rank_matrix": [2, 325, 327, 525], "make_ml_clf": 118, "make_moon": [2, 67, 79, 95, 239, 270, 305, 306, 312, 372, 991, 1040, 1044], "make_multilabel_classif": [2, 118, 247, 372, 516, 537, 789, 836, 837, 1002, 1035, 1036, 1038, 1044], "make_pipelin": [2, 43, 67, 91, 116, 139, 143, 154, 164, 165, 168, 181, 182, 186, 187, 191, 193, 200, 202, 212, 213, 218, 226, 230, 233, 239, 240, 241, 249, 250, 251, 253, 264, 267, 277, 284, 290, 299, 305, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 352, 359, 389, 399, 409, 412, 568, 677, 679, 857, 865, 890, 891, 893, 894, 895, 896, 905, 906, 907, 908, 910, 911, 992, 1005, 1012, 1016, 1017, 1036, 1043, 1046], "make_plot": 310, "make_regress": [2, 49, 107, 193, 195, 196, 199, 215, 216, 283, 320, 326, 359, 372, 379, 389, 555, 557, 561, 566, 607, 609, 610, 636, 647, 648, 650, 652, 653, 654, 656, 661, 662, 663, 664, 665, 666, 668, 672, 680, 682, 683, 684, 686, 687, 688, 863, 906, 923, 1002, 1003, 1005], "make_s_curv": [2, 232, 237], "make_scor": [2, 52, 146, 149, 264, 274, 327, 399, 407, 412, 712, 801, 823, 827, 828, 1002, 1042, 1050], "make_sparse_coded_sign": [2, 211, 532, 538, 546, 547, 1047, 1049], "make_sparse_spd_matrix": [2, 113, 478, 530, 1050], "make_sparse_uncorrel": [2, 372], "make_spd_matrix": [2, 528], "make_subplot": 140, "make_swiss_rol": [2, 100, 236, 1047], "make_union": [2, 409, 864, 1036, 1040], "makedir": 1040, "maker": [185, 186], "makhija": 1048, "makoeppel": 1046, "maksym": 1048, "maladier": 1048, "maladi\u00e8r": [1048, 1049], "malcolm": 1041, "maldonado": [1043, 1046], "male": [103, 186, 324, 381, 878, 879, 1012], "malem": 1050, "malet": 1033, "malform": [55, 1037], "malic": [315, 373], "malic_acid": 48, "malici": 402, "malign": [168, 373, 501], "malik": [408, 452, 462, 692], "mallat": [665, 686, 687, 998], "mallatpursuit93": [665, 686, 687], "mallow": [732, 1039], "maloo": [1041, 1042], "malt": [1046, 1047, 1048, 1050], "maltimor": 1043, "malu": 230, "malzer": 446, "mal\u00e9zieux": 1046, "mamba": 402, "mame": 1050, "mammal": 50, "mammalian": 413, "man": [413, 591, 770, 840, 844, 1000, 1002, 1004], "manag": [0, 2, 116, 253, 362, 370, 374, 377, 378, 380, 384, 388, 390, 391, 402, 415, 450, 468, 627, 903, 996, 1018, 1021, 1022, 1026, 1028, 1046, 1049], "manaileng": 1046, "manasimj": 1051, "mandal": 1043, "mandatori": [376, 416], "mandatorili": 1040, "mandera": 1036, "mandi": [1044, 1047], "mandjev": 1047, "mandyam": 1043, "mangasarian": [168, 373], "mangipudi": 1039, "manh": 1041, "manhattan": [408, 441, 445, 450, 457, 700, 763, 772, 779, 780, 781, 852, 1000, 1005, 1037, 1042, 1049], "manhattan_dist": [2, 450, 457, 689, 763, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 1033, 1043, 1048, 1049], "manhattandist": 700, "mani": [43, 46, 49, 57, 88, 89, 106, 109, 113, 134, 140, 141, 142, 147, 164, 168, 188, 212, 232, 243, 256, 263, 264, 270, 278, 282, 283, 290, 310, 315, 316, 319, 320, 321, 322, 323, 325, 326, 327, 351, 359, 363, 365, 371, 373, 375, 376, 378, 389, 390, 391, 394, 402, 405, 406, 408, 409, 410, 413, 415, 416, 417, 418, 420, 504, 542, 554, 555, 558, 559, 560, 561, 565, 566, 567, 607, 610, 628, 640, 651, 655, 659, 660, 667, 668, 669, 677, 678, 679, 693, 696, 775, 779, 801, 805, 815, 862, 863, 878, 883, 885, 905, 913, 914, 915, 916, 991, 992, 994, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1015, 1017, 1019, 1020, 1021, 1022, 1026, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048, 1049], "manideep": 1051, "manifest": [384, 999, 1005], "manifold": [2, 51, 74, 85, 100, 139, 235, 236, 237, 243, 290, 300, 319, 323, 324, 331, 369, 390, 408, 413, 415, 503, 526, 531, 545, 550, 567, 689, 690, 691, 692, 693, 694, 695, 696, 697, 854, 866, 875, 898, 934, 1005, 1023, 1027, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1050], "manimaran": [1042, 1044, 1045, 1046, 1047], "manipul": [2, 370, 404, 508, 1021, 1039], "manish": 1044, "maniteja": [1039, 1040, 1041], "mankoo": 1048, "mann": 1043, "mannbi": 1041, "manner": [43, 107, 120, 165, 187, 191, 257, 323, 324, 364, 376, 382, 408, 413, 415, 416, 710, 845, 846, 991, 1002, 1018, 1036, 1043], "mannila": 1014, "manning2008": 1002, "manoharan": [1040, 1041], "manoj": [0, 168, 398, 1036, 1037, 1038, 1039, 1040], "manraj": 1040, "mansi": 1048, "mansingh": 1047, "mansouri": 1049, "mantovani": 1048, "manu": 371, "manual": [2, 43, 80, 88, 186, 187, 189, 213, 223, 272, 290, 332, 338, 351, 353, 363, 364, 371, 376, 380, 381, 388, 389, 394, 402, 408, 412, 413, 414, 437, 449, 568, 800, 823, 855, 878, 884, 991, 996, 997, 998, 1001, 1002, 1005, 1012, 1022, 1041, 1043, 1049, 1051], "manuel": [1033, 1037, 1041, 1042, 1045, 1046, 1051], "manufactur": [186, 415], "manvendra": [1039, 1040], "maocx": 1043, "map": [2, 23, 37, 43, 44, 49, 50, 55, 57, 63, 86, 116, 125, 138, 145, 148, 152, 170, 183, 191, 212, 230, 232, 234, 238, 246, 249, 271, 274, 279, 298, 301, 303, 309, 310, 333, 340, 344, 352, 353, 370, 371, 377, 388, 390, 399, 402, 406, 408, 409, 412, 413, 415, 416, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 499, 503, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 763, 766, 798, 799, 800, 801, 804, 805, 812, 813, 815, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 893, 894, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 955, 958, 959, 991, 994, 999, 1002, 1004, 1014, 1017, 1018, 1023, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050], "mapd": 1002, "mape": [2, 52, 747, 1002], "mape_cv_mean": 143, "mape_cv_std": 143, "mapi": 52, "mar": 51, "marc": [1040, 1042, 1043, 1049], "march": [175, 727, 757, 1002, 1033, 1037, 1041, 1043, 1048], "marchand": 1047, "marchman": [1034, 1035], "marco": [1039, 1041, 1042, 1046, 1047, 1048, 1051], "marcofalk": 1040, "marcogorelli": [1041, 1042], "marcolini": 1046, "marcom": 1047, "marcu": [1041, 1050], "mare": 1050, "marek": [1033, 1050], "maren": [0, 366, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "margeta": 1041, "margin": [30, 43, 51, 62, 64, 136, 161, 171, 172, 173, 174, 175, 176, 183, 186, 187, 192, 222, 223, 225, 247, 249, 270, 287, 310, 313, 316, 335, 336, 338, 339, 340, 342, 344, 348, 349, 373, 406, 413, 415, 418, 513, 611, 612, 632, 646, 677, 736, 834, 882, 894, 907, 910, 998, 1002, 1004, 1008, 1009, 1012, 1016, 1017, 1023, 1040, 1042], "marguli": 1043, "mari": [102, 1041, 1042, 1043, 1044, 1047], "maria": [168, 408, 1044, 1045, 1046, 1047, 1048], "mariam": 1045, "mariana": 1044, "mariangela": 1046, "mariano": 270, "mariel": 1044, "marielaraj": 1046, "marija": [1044, 1045, 1051], "marijn": 1045, "marin": [529, 1051], "marina": 408, "marinelm": 1042, "mario": [406, 1037, 1039, 1047, 1048, 1049], "marit": [326, 497], "mari\u00e9": [0, 366, 1042, 1043, 1044, 1045, 1046, 1047], "mark": [2, 70, 91, 118, 163, 182, 274, 281, 368, 376, 380, 384, 385, 390, 408, 536, 608, 609, 612, 633, 659, 858, 859, 900, 901, 918, 924, 939, 944, 949, 998, 1026, 1028, 1033, 1034, 1039, 1041, 1042, 1049, 1050, 1051], "markdown": 379, "marker": [49, 50, 55, 64, 66, 70, 72, 73, 77, 85, 88, 91, 92, 93, 96, 97, 115, 118, 122, 140, 153, 177, 178, 191, 200, 206, 208, 210, 212, 214, 215, 227, 229, 233, 255, 257, 258, 264, 265, 270, 272, 273, 274, 297, 310, 315, 331, 355, 379, 380, 416, 1041, 1043, 1044, 1049], "markeredgecolor": [82, 88, 94, 96, 97], "markeredgewidth": [111, 274], "markerfacecolor": [82, 88, 94, 96, 97], "markers": [82, 88, 91, 94, 96, 97, 146, 173, 177, 242, 264, 323], "markerstyl": 264, "market": [42, 80, 85, 149, 183, 232, 233, 408, 410, 454, 471, 472, 690, 999, 1023, 1026], "marketplac": 1026, "markham": [1037, 1044, 1045], "markiwanchyshyn": 1041, "marko": [1033, 1042, 1043, 1049], "markou": 1046, "markov": [418, 612, 1007, 1021, 1033], "markovtsev": 1041, "marktab": 1038, "marku": [408, 450, 457, 1041, 1043, 1044, 1045], "marmo": [0, 367, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "maron": [408, 442], "marr": 186, "marr_unmarri": 186, "marreddi": 1047, "marri": 186, "marriott": 51, "marsgui": 1041, "marsh": 1044, "marshal": 373, "marsi": 1036, "marsland": 531, "marslast": 531, "marszalek": [759, 760, 1000], "mart": [51, 1043], "martel": 1047, "martha": 316, "martian": 1043, "martin": [0, 366, 722, 724, 725, 998, 1002, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051], "martin1997": 1002, "martina": [1043, 1045], "martinbpr": [1038, 1039], "martinez": 1040, "martino": 1038, "martinosorb": 1038, "martinsson": [55, 536, 542, 949], "martynov": 1046, "mart\u00edn": [1046, 1047], "marufo": 1048, "marufur": 1040, "marvin": [1048, 1049], "marwaha": 1041, "marx": 1012, "maryanmorel": [1038, 1039], "marzinotto": [1041, 1042], "mar\u00eda": [1047, 1048, 1049], "mas_vnr_typ": 249, "masafumi": 1038, "masanori": [1048, 1049], "masashi": [1043, 1045], "masecchia": 1033, "mash": 416, "mask": [2, 53, 77, 99, 212, 220, 249, 268, 269, 333, 385, 390, 409, 415, 464, 469, 474, 562, 563, 582, 586, 587, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 630, 631, 633, 634, 650, 672, 801, 804, 805, 815, 973, 992, 1009, 1033, 1036, 1038, 1039, 1041, 1043, 1051], "mask_al": 992, "mask_false_neg": 264, "mask_false_posit": 264, "mask_missing_values_onli": 992, "mask_out": 53, "mask_test": 230, "mask_train": [187, 230], "mask_true_neg": 264, "mask_true_posit": 264, "mask_y_pr": 66, "maskani": [1041, 1043, 1044, 1045], "masked_arrai": [340, 801, 815], "masked_equ": 113, "maskedarrai": [274, 1039], "mason": 1037, "mass": [168, 250, 373, 446, 798, 998, 1009], "massachusett": 371, "massia": [0, 1044, 1046, 1047], "massich": [1040, 1041, 1042, 1043], "massil": 1039, "masstran": 1042, "master": [51, 290, 324, 376, 1026], "masurel": 1034, "masvnrarea": [107, 154], "masvnrtyp": [143, 154], "mat": [370, 416], "match": [2, 43, 58, 72, 87, 120, 121, 123, 129, 140, 183, 191, 192, 212, 234, 242, 249, 344, 353, 371, 374, 378, 408, 413, 415, 416, 429, 449, 464, 466, 492, 509, 510, 516, 527, 532, 538, 543, 549, 552, 568, 569, 573, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 659, 665, 666, 686, 687, 700, 704, 705, 706, 714, 716, 720, 735, 779, 780, 781, 787, 845, 846, 850, 854, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 905, 912, 918, 935, 999, 1001, 1002, 1004, 1005, 1023, 1024, 1028, 1033, 1039, 1040, 1041, 1043, 1045, 1046, 1049, 1051], "matchingdist": 700, "matchmak": 1026, "matcovici": 1043, "mate": 351, "matem\u00e1tica": 998, "mateo": 1046, "materi": [53, 186, 326, 391, 542, 582, 895, 896], "matern": [2, 179, 418, 1044, 1048], "mateusz": [1037, 1044, 1045, 1050, 1051], "math": [82, 102, 149, 168, 249, 270, 271, 373, 394, 765], "mathbb": [120, 137, 173, 411, 1002, 1009, 1017], "mathbf": [173, 344, 413, 998, 1002, 1006, 1007, 1016], "mathcal": [216, 347, 413, 415, 628, 697, 994, 996, 998, 1002, 1016, 1046], "mathemat": [37, 134, 186, 200, 229, 273, 368, 373, 376, 390, 393, 408, 410, 413, 414, 418, 550, 551, 558, 565, 636, 647, 657, 793, 794, 799, 863, 907, 910, 913, 915, 998, 1002, 1006, 1012, 1014, 1024, 1026, 1028, 1047], "matheu": 1039, "mathew": 1048, "mathi": 1046, "mathia": 1047, "mathieu": [0, 398, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1046], "mathrm": [408, 410, 413, 417, 998, 1018], "mathschi": 1045, "mathur": [1040, 1042, 1043, 1048, 1049, 1051], "mathurin": [0, 1044, 1046, 1047], "mathurinm": [1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "matjansen": 1047, "mato": 1045, "matplotlib": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 372, 376, 383, 394, 401, 438, 503, 632, 633, 698, 699, 701, 702, 703, 807, 824, 919, 997, 1021, 1030, 1042, 1045, 1046, 1047, 1048, 1051], "matric": [2, 37, 70, 74, 75, 111, 113, 120, 217, 256, 257, 259, 260, 261, 290, 303, 320, 326, 333, 351, 352, 368, 370, 378, 379, 388, 389, 390, 408, 409, 410, 411, 413, 416, 417, 423, 450, 451, 453, 464, 473, 481, 482, 483, 484, 527, 535, 536, 539, 541, 542, 545, 548, 550, 551, 556, 557, 564, 567, 582, 583, 590, 644, 647, 648, 653, 654, 659, 665, 673, 675, 688, 755, 761, 769, 775, 779, 780, 781, 782, 793, 798, 799, 831, 849, 852, 857, 868, 872, 874, 877, 880, 882, 883, 885, 888, 890, 892, 894, 895, 896, 897, 898, 907, 908, 910, 911, 927, 949, 956, 965, 972, 974, 975, 992, 994, 996, 999, 1000, 1001, 1003, 1005, 1006, 1014, 1016, 1017, 1021, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "matrix": [2, 8, 11, 42, 45, 46, 48, 52, 53, 57, 58, 59, 68, 70, 74, 76, 79, 87, 95, 102, 110, 111, 112, 113, 115, 120, 121, 122, 130, 177, 183, 189, 192, 199, 213, 217, 240, 243, 244, 246, 260, 262, 264, 277, 307, 323, 326, 329, 330, 344, 351, 352, 353, 358, 363, 371, 372, 373, 376, 378, 382, 385, 388, 389, 390, 405, 409, 410, 411, 416, 417, 418, 419, 420, 430, 431, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 454, 457, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 493, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 520, 522, 524, 525, 527, 528, 530, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 594, 595, 604, 605, 606, 607, 608, 609, 610, 612, 621, 630, 631, 632, 634, 636, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 713, 714, 715, 716, 717, 719, 723, 730, 731, 732, 735, 739, 740, 741, 742, 755, 756, 759, 760, 761, 762, 764, 765, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 788, 789, 793, 794, 797, 798, 799, 800, 801, 804, 805, 815, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 871, 872, 874, 876, 877, 878, 880, 882, 883, 884, 885, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 922, 927, 929, 930, 931, 932, 937, 946, 947, 948, 949, 950, 953, 955, 956, 964, 965, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 990, 992, 994, 996, 998, 999, 1003, 1004, 1005, 1006, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "matrixorz": 1036, "matshow": [58, 59, 99, 166, 307, 503], "matsubara": 1002, "matt": [1036, 1037, 1038, 1043, 1044, 1048, 1049], "matteo": [1037, 1039, 1047], "matter": [129, 261, 344, 359, 408, 409, 415, 568, 669, 677, 679, 998, 1037], "matthew": [2, 375, 381, 537, 744, 1033, 1036, 1040, 1042, 1046, 1047, 1051], "matthews_corrcoef": [2, 1002, 1033, 1039, 1040, 1047], "matthia": [1033, 1035, 1036, 1039, 1040, 1041, 1045, 1048], "matthieu": [0, 398, 1033, 1037, 1048], "matti": [1034, 1037, 1038], "matur": [376, 1021, 1022], "mat\u00e9rn": 620, "mat\u00eda": 1047, "maud": 1036, "mauna": 175, "maura": 1044, "mauroantonioserrano": 1048, "mav": 1051, "mavani": 1041, "mavroforaki": [1037, 1039], "max": [43, 47, 49, 50, 51, 52, 55, 57, 62, 64, 67, 69, 75, 79, 85, 91, 95, 100, 104, 105, 108, 110, 113, 120, 123, 127, 130, 134, 136, 142, 148, 152, 159, 160, 161, 163, 164, 168, 172, 174, 175, 182, 183, 186, 196, 200, 202, 206, 208, 214, 215, 218, 226, 228, 230, 235, 243, 247, 268, 269, 270, 281, 289, 290, 292, 296, 297, 301, 303, 305, 307, 310, 312, 313, 315, 322, 327, 332, 334, 348, 363, 408, 410, 413, 469, 470, 471, 472, 473, 474, 475, 476, 477, 513, 537, 556, 557, 558, 559, 560, 561, 564, 565, 566, 607, 628, 632, 633, 649, 650, 670, 673, 675, 681, 692, 693, 697, 700, 705, 706, 758, 793, 794, 801, 862, 863, 874, 875, 877, 884, 891, 892, 913, 914, 915, 916, 998, 1000, 1005, 1012, 1016, 1017, 1023, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "max_": [408, 1002], "max_abs_": 874, "max_abs_scal": 1012, "max_bin": [322, 323, 415, 562, 563, 1050], "max_categori": [316, 323, 325, 878, 879, 1012, 1047, 1049], "max_cluster_s": 446, "max_column": 230, "max_degre": [880, 1046], "max_depth": [46, 67, 135, 136, 139, 142, 143, 144, 145, 146, 147, 148, 152, 153, 155, 181, 233, 267, 282, 287, 321, 322, 355, 357, 358, 389, 390, 407, 415, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 712, 804, 805, 829, 913, 914, 915, 916, 917, 918, 919, 991, 1009, 1018, 1042, 1044], "max_df": [54, 271, 333, 351, 352, 589, 592, 1044, 1051], "max_dist": 243, "max_doc_update_it": 537, "max_ep": [408, 450, 455, 456, 457], "max_error": [2, 404, 1002, 1042], "max_estim": 138, "max_featur": [54, 67, 138, 148, 248, 267, 282, 321, 415, 417, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 589, 592, 598, 913, 914, 915, 916, 991, 998, 1033, 1035, 1036, 1040, 1041, 1044, 1047, 1050], "max_features_": [560, 561, 598, 913, 914, 915, 916, 1047], "max_fpr": [789, 1002, 1041], "max_fun": [862, 863, 1043], "max_i": [247, 1004], "max_idf": 1046, "max_it": [43, 47, 52, 54, 55, 62, 64, 66, 67, 104, 105, 120, 123, 139, 140, 143, 149, 156, 159, 160, 181, 182, 186, 187, 193, 199, 205, 206, 219, 220, 221, 224, 225, 227, 232, 233, 234, 235, 237, 250, 251, 255, 256, 257, 258, 261, 283, 300, 305, 306, 307, 316, 321, 322, 323, 329, 330, 337, 351, 352, 382, 390, 415, 420, 440, 443, 447, 448, 449, 454, 459, 461, 471, 472, 478, 482, 483, 484, 532, 533, 534, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 562, 563, 628, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 673, 675, 677, 678, 679, 680, 681, 683, 684, 688, 689, 690, 691, 693, 694, 695, 798, 799, 815, 854, 862, 863, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 992, 994, 998, 1005, 1006, 1015, 1016, 1034, 1037, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051], "max_iter": 330, "max_iter_list": 149, "max_iter_predict": 611, "max_j": [647, 653], "max_leaf_nod": [134, 140, 148, 212, 322, 358, 415, 558, 559, 560, 561, 562, 563, 565, 566, 567, 913, 914, 915, 916, 1036, 1042, 1044], "max_n": [589, 590, 592, 1033], "max_n_alpha": [652, 656], "max_nbyt": 967, "max_no_improv": [77, 94, 97, 449, 538, 539, 540, 547, 1047, 1048], "max_patch": [83, 416, 584, 585, 1041], "max_resourc": [146, 804, 805, 991], "max_resources_": [804, 805], "max_sampl": [150, 181, 415, 556, 557, 558, 559, 564, 565, 566, 635, 1043, 1046, 1049], "max_samples_": 564, "max_skip": 672, "max_subpopul": [229, 680, 1047], "max_thread": [364, 377], "max_train_s": [43, 52, 412, 822, 1040], "max_trial": [672, 998], "max_val": 935, "max_valu": [628, 1044, 1045], "max_x": 247, "maxabs_scal": [2, 390, 874, 1041], "maxabsscal": [2, 365, 404, 869, 890, 992, 1012, 1038, 1041, 1042, 1043, 1044, 1049, 1050], "maxent": [2, 659, 660, 998], "maxent_du": 659, "maxi": 1048, "maxim": [115, 116, 120, 126, 130, 146, 193, 260, 261, 264, 271, 275, 279, 280, 283, 284, 300, 315, 321, 340, 344, 355, 358, 373, 390, 405, 407, 408, 411, 413, 415, 417, 418, 550, 595, 611, 612, 645, 646, 649, 670, 680, 681, 721, 801, 804, 805, 815, 874, 880, 890, 996, 998, 1001, 1002, 1005, 1007, 1017, 1036, 1038, 1043, 1046, 1048, 1051], "maxima": 408, "maximesaur": [1048, 1049], "maximis": [159, 256, 298, 996, 1005], "maximum": [2, 43, 47, 50, 64, 69, 72, 90, 109, 110, 111, 112, 113, 122, 134, 136, 139, 140, 142, 149, 171, 173, 176, 177, 183, 192, 200, 249, 264, 280, 292, 296, 297, 303, 310, 335, 336, 338, 339, 342, 352, 355, 357, 363, 371, 381, 382, 389, 390, 405, 406, 408, 410, 411, 413, 415, 416, 418, 419, 420, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 454, 457, 459, 461, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 483, 484, 499, 510, 512, 513, 514, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 584, 585, 598, 611, 628, 632, 633, 636, 638, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 675, 677, 678, 679, 680, 683, 684, 686, 687, 688, 689, 690, 691, 693, 694, 695, 717, 745, 782, 798, 801, 804, 805, 807, 815, 822, 829, 854, 861, 862, 863, 869, 870, 874, 875, 877, 880, 881, 882, 884, 893, 894, 899, 900, 901, 902, 905, 906, 910, 913, 914, 915, 916, 917, 919, 928, 935, 991, 997, 998, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1012, 1016, 1017, 1018, 1023, 1040, 1041, 1043, 1044, 1047, 1048, 1050], "maxin": [1043, 1044], "maxsiz": 618, "maxval": [512, 514], "maxwel": [0, 366, 1043, 1046, 1047, 1048, 1049], "maxwelllzh": 1048, "may_share_memori": 1050, "mayb": [106, 307, 390, 416, 1017, 1022], "mayer": [415, 1045, 1047, 1050, 1051], "mayer2022": 415, "mayilvahanan": 408, "mayorov": [1036, 1037, 1038, 1039], "mayur": 1041, "mazari": 1041, "mb": [47, 243, 264, 351, 353, 371, 382, 497, 907, 908, 909, 910, 911, 1017, 1023, 1029], "mbilling": 1038, "mbillingr": 1043, "mbk": [77, 97], "mbk_means_cluster_cent": 97, "mbk_means_label": 97, "mbk_means_labels_uniqu": 77, "mblondel": [370, 509], "mbnmf": 54, "mc4229": 1044, "mc_clf": 1009, "mcar": 149, "mcc": [2, 744, 1002, 1047], "mccall": 102, "mccallum": [840, 1004], "mccarthi": [0, 360, 1033, 1041], "mcclish": [279, 789], "mcconaghi": 1026, "mccullagh": 998, "mcculloh": [1038, 1039], "mcd": [2, 51, 111, 112, 410, 469, 474], "mcdermott": [1035, 1050], "mcdonald": 51, "mcdowel": 1041, "mcfadden": 1002, "mcfee": [1038, 1039], "mcgibbon": [1035, 1036, 1039], "mcgushion": 1042, "mcinn": [408, 1039, 1040, 1041, 1043, 1044, 1049], "mcivor": [1048, 1049], "mcm": [755, 1002], "mcm_": 755, "mcmahon": 1050, "mcsherri": [727, 757, 1002], "mctiernan": [1047, 1048], "mcve": [381, 388], "md": [2, 232, 233, 234, 235, 380, 689, 693, 695, 1027, 1028, 1033, 1045, 1048], "md5": 1045, "md5_checksum": 370, "md_scale": 232, "mdarii": 1049, "mdbecker": 1026, "mdi": [141, 147, 183, 184, 189, 415, 417, 464, 497, 565, 631, 635, 831, 865, 879, 1010, 1023], "mdi_import": [188, 189], "mds_result": 695, "me": 351, "me1": 287, "me2": 287, "me3": 287, "mea": 91, "mean": [2, 43, 44, 47, 50, 52, 53, 54, 57, 61, 62, 64, 70, 71, 72, 73, 75, 77, 79, 80, 82, 83, 86, 87, 88, 93, 103, 110, 111, 112, 113, 116, 118, 120, 123, 124, 125, 127, 134, 136, 137, 140, 142, 143, 146, 147, 149, 154, 155, 156, 167, 168, 170, 175, 176, 177, 179, 181, 183, 186, 187, 194, 196, 202, 204, 206, 209, 212, 214, 218, 219, 221, 227, 228, 229, 230, 235, 237, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 255, 256, 257, 258, 260, 261, 264, 266, 267, 270, 271, 272, 273, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 301, 310, 313, 315, 316, 317, 319, 322, 325, 327, 332, 340, 343, 344, 347, 349, 350, 351, 353, 359, 363, 368, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 390, 399, 405, 406, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 431, 437, 438, 439, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 502, 503, 513, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 589, 590, 591, 592, 595, 598, 603, 607, 608, 609, 610, 611, 612, 614, 623, 628, 629, 631, 633, 634, 635, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 685, 689, 690, 691, 692, 693, 694, 695, 696, 705, 706, 708, 710, 713, 714, 717, 718, 725, 727, 730, 731, 732, 737, 738, 739, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 758, 775, 779, 780, 782, 784, 785, 786, 788, 789, 791, 792, 793, 794, 796, 798, 799, 800, 801, 804, 805, 807, 815, 819, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 851, 852, 853, 855, 856, 858, 859, 861, 862, 863, 864, 866, 867, 869, 870, 874, 875, 877, 881, 883, 885, 886, 891, 893, 894, 896, 898, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 927, 931, 932, 934, 975, 976, 982, 986, 991, 992, 993, 996, 998, 999, 1001, 1004, 1005, 1006, 1007, 1009, 1010, 1015, 1016, 1017, 1018, 1023, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "mean_": [121, 274, 533, 534, 535, 540, 542, 544, 885, 1012, 1041], "mean_absolute_error": [2, 52, 212, 214, 230, 404, 1002, 1034, 1036], "mean_absolute_percentage_error": [2, 52, 143, 404, 1002, 1045, 1047], "mean_auc": 280, "mean_change_tol": 537, "mean_fit_tim": [140, 292, 801, 815], "mean_fpr": 280, "mean_gamma_devi": [2, 404, 1002, 1043], "mean_impute_scor": 182, "mean_l1_ratio": 1036, "mean_pinball_loss": [2, 52, 146, 149, 322, 998, 1002, 1046], "mean_pinball_loss_95p": 1002, "mean_poisson_devi": [2, 212, 404, 1002, 1043], "mean_precis": 268, "mean_precision_": 798, "mean_precision_prior": [255, 261, 798], "mean_precision_prior_": 798, "mean_predict": [52, 177], "mean_predictions_gpr": 170, "mean_prior": 798, "mean_prior_": 798, "mean_recal": 268, "mean_scor": [104, 279, 282, 352, 1046], "mean_score_tim": [140, 268, 271, 801, 815], "mean_shift": [2, 1038, 1041], "mean_square_error": 1034, "mean_squared_error": [2, 46, 144, 146, 147, 209, 212, 214, 216, 218, 230, 359, 404, 415, 753, 1002, 1034, 1036, 1043, 1044, 1050], "mean_squared_log_error": [2, 404, 712, 1002, 1040, 1046, 1050], "mean_test_": 274, "mean_test_precis": [268, 274], "mean_test_recal": 268, "mean_test_scor": [103, 104, 105, 113, 140, 159, 167, 260, 269, 270, 271, 278, 281, 282, 292, 340, 472, 595, 801, 815, 991, 1039, 1046], "mean_tim": 1039, "mean_tpr": [279, 280], "mean_train_precis": [801, 815], "mean_train_scor": [801, 815, 1039], "mean_tweedie_devi": [2, 230, 404, 1002, 1043], "mean_variance_axi": [2, 385, 1039, 1046], "mean_y_pr": 175, "meaning": [72, 189, 237, 299, 327, 353, 405, 407, 412, 416, 417, 549, 730, 731, 739, 784, 785, 788, 854, 1006, 1016, 1017, 1033, 1049], "meaningfulli": [212, 1002], "meaningless": [187, 416, 907, 910, 1036], "means_": [70, 255, 256, 257, 258, 260, 261, 550, 551, 798, 799], "means_init": [257, 258, 799], "meanshift": [2, 79, 323, 408, 440, 1036, 1037, 1038, 1041, 1043, 1044, 1047, 1048, 1049, 1051], "meant": [90, 149, 168, 249, 327, 371, 385, 474, 494, 678, 851, 924, 967, 968, 990, 992, 1006, 1008, 1012, 1034], "meanwhil": [388, 1017], "measur": [2, 27, 43, 46, 47, 49, 50, 52, 57, 62, 72, 73, 82, 91, 93, 94, 121, 137, 138, 146, 150, 157, 168, 170, 175, 183, 185, 186, 187, 191, 202, 207, 211, 212, 216, 218, 230, 262, 268, 270, 276, 277, 315, 344, 351, 352, 363, 371, 373, 378, 382, 390, 405, 410, 412, 413, 414, 415, 416, 449, 452, 462, 499, 516, 539, 541, 548, 552, 558, 559, 560, 561, 564, 565, 566, 605, 608, 609, 612, 628, 632, 659, 691, 693, 699, 703, 705, 706, 708, 710, 713, 714, 717, 718, 721, 726, 727, 728, 730, 732, 737, 738, 740, 741, 744, 748, 756, 757, 758, 783, 784, 785, 787, 788, 789, 790, 793, 796, 826, 828, 831, 851, 882, 894, 913, 914, 915, 916, 922, 992, 998, 1000, 1005, 1007, 1008, 1010, 1016, 1018, 1023, 1033, 1036, 1038, 1039, 1041, 1043], "mechan": [74, 246, 348, 351, 364, 376, 378, 402, 406, 408, 416, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 1000, 1018, 1026], "mecopur": 1050, "med": [57, 102, 279, 371, 1012], "meda": [107, 186, 1002], "media": [408, 1026], "median": [2, 43, 52, 72, 103, 107, 111, 112, 146, 181, 182, 186, 214, 218, 229, 241, 249, 310, 320, 322, 323, 371, 410, 415, 417, 440, 454, 458, 461, 474, 553, 555, 559, 566, 598, 628, 631, 636, 671, 672, 680, 722, 754, 852, 883, 895, 914, 916, 992, 1012, 1018, 1036, 1037], "median_absolute_error": [2, 107, 186, 1002, 1037, 1043, 1045], "median_predict": 52, "medic": [273, 412, 713, 998, 1026], "medicin": [273, 713, 1002], "medina": [1033, 1035], "medinc": [310, 321, 371, 490], "medium": [42, 183, 245, 317, 340, 408, 644, 879, 995, 998], "medoid": 446, "medoids_": 446, "medri": 1036, "meekail": [0, 397, 1047, 1048, 1049, 1050], "meer": [96, 408, 448], "meet": [376, 388, 391, 417, 573, 604, 862, 863, 902, 1002, 1015, 1026, 1041, 1042, 1043], "megabyt": 1047, "megasari": 1045, "meghann": [1041, 1043], "mehak": 1040, "mehdi": [1037, 1046], "mehgarg": 1048, "mehmet": [1040, 1046], "mehmetcanakbai": 1048, "mehrdad": 1047, "mehta": [1037, 1038, 1039, 1041, 1042, 1043, 1044, 1048, 1049], "mehul": 1040, "mei": [1038, 1043], "meier": 1040, "meila": 408, "mein": 416, "meinshausen": 198, "meirel": 1044, "meketon": 1040, "melani": [1026, 1040, 1041], "melderi": 1041, "melemo2": 1047, "meli": [1046, 1047, 1048], "melissa": 1041, "mellon": 900, "melnik": 1048, "melsyt": [1041, 1042], "mem": [87, 382, 509, 510, 1023], "member": [0, 351, 352, 371, 376, 379, 391, 408, 423, 442, 446, 448, 451, 453, 493, 556, 557, 558, 559, 564, 565, 566, 567, 582, 659, 660, 667, 668, 669, 677, 678, 679, 705, 706, 716, 718, 732, 737, 738, 758, 787, 796, 801, 905, 998, 1005, 1033, 1045, 1048], "membership": [30, 89, 391, 405, 408, 512, 513, 514, 515, 516, 520, 523, 1017], "memit": 382, "memmap": [364, 371, 390, 413, 509, 535, 1041, 1050], "memoiz": [104, 371, 390], "memor": 188, "memori": [2, 47, 87, 103, 104, 124, 186, 187, 264, 292, 316, 319, 321, 323, 324, 327, 351, 352, 353, 364, 365, 370, 376, 379, 385, 388, 390, 402, 408, 409, 412, 413, 416, 419, 420, 441, 442, 443, 444, 445, 446, 447, 449, 450, 454, 457, 459, 468, 473, 479, 497, 504, 509, 510, 534, 535, 536, 539, 542, 556, 557, 558, 559, 564, 565, 566, 567, 582, 583, 589, 590, 592, 647, 648, 649, 653, 654, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 677, 678, 679, 680, 681, 682, 685, 779, 780, 781, 782, 801, 807, 815, 824, 826, 827, 828, 829, 832, 833, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 865, 866, 883, 885, 895, 896, 898, 903, 905, 906, 913, 914, 915, 916, 932, 970, 986, 998, 1004, 1005, 1012, 1014, 1015, 1017, 1018, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "memory_profil": [382, 394, 401], "memoryerror": [1041, 1045], "memoryview": 377, "memorywis": 402, "men": 373, "menes": 1048, "meng": [1033, 1034, 1037, 1039, 1040], "menoci": 1051, "menon": 406, "mensch": [1038, 1039, 1040, 1041], "mention": [88, 116, 134, 230, 284, 320, 359, 363, 376, 380, 381, 388, 408, 697, 897, 898, 991, 996, 998, 1022, 1025, 1026, 1040, 1041, 1042], "menu": 394, "menuet": 1042, "mercer": 994, "mere": [43, 270, 390, 832, 1016], "merg": [74, 76, 80, 84, 322, 374, 376, 379, 384, 388, 391, 408, 440, 441, 442, 445, 446, 463, 821, 1033, 1040], "merit": [376, 380, 391], "meritocrat": 391, "merritt": 1039, "mersenn": 1044, "merz": 406, "mesfer": 1046, "mesh": [91, 142, 152, 172, 244, 298, 305, 312, 334, 336], "meshgrid": [50, 63, 77, 91, 111, 142, 152, 171, 172, 173, 174, 176, 187, 223, 224, 225, 226, 237, 239, 259, 296, 303, 305, 312, 313, 334, 339, 340, 344, 345, 348, 349, 632], "meshulam": 1036, "meson": [374, 379, 394, 401], "mess": 1047, "messag": [73, 79, 95, 102, 120, 246, 351, 352, 371, 374, 375, 379, 380, 381, 384, 385, 408, 440, 454, 468, 540, 544, 549, 575, 628, 713, 801, 804, 805, 807, 815, 824, 829, 832, 834, 854, 862, 863, 903, 930, 931, 932, 935, 939, 964, 985, 990, 1002, 1012, 1033, 1037, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "met": [246, 378, 417, 535, 542, 628, 672, 998, 1002, 1041], "meta": [2, 7, 30, 31, 89, 102, 133, 157, 183, 212, 275, 279, 284, 286, 289, 325, 326, 355, 357, 359, 370, 374, 378, 380, 388, 390, 399, 406, 417, 418, 428, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 497, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 576, 582, 583, 589, 591, 592, 598, 604, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 801, 802, 803, 808, 810, 817, 819, 823, 828, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 922, 954, 961, 990, 991, 1003, 1022, 1023, 1024, 1028, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048, 1050], "meta_clf_sample_weight": 246, "meta_est": 246, "meta_meta_est": 246, "metaclassifi": [246, 247], "metaclassifierifittedmetaclassifi": 246, "metadata": [2, 61, 132, 183, 195, 238, 264, 327, 352, 370, 371, 402, 422, 425, 428, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 957, 958, 959, 960, 961, 985, 1002, 1021, 1022, 1023, 1028, 1049], "metadata_rout": [2, 246, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 957, 958, 959, 960, 961], "metadatarequest": [2, 246, 422, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 469, 470, 471, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 596, 597, 599, 600, 601, 604, 611, 612, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 653, 655, 657, 658, 659, 661, 663, 665, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 958, 960, 1050], "metadatarout": [2, 246, 437, 464, 465, 472, 556, 557, 564, 568, 569, 570, 571, 594, 595, 598, 603, 628, 648, 652, 654, 656, 660, 662, 664, 666, 672, 674, 676, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 864, 865, 902, 960, 1050], "metaestim": [2, 89, 390, 902, 922, 962, 1037, 1046, 1047, 1050], "metaestimatormixin": [2, 246], "metaireau": [1033, 1036], "metal": 404, "metaregressor": 246, "metatransfom": 1038, "meteorologi": 406, "meth_nam": 314, "method": [2, 5, 8, 14, 18, 30, 32, 36, 43, 47, 51, 52, 55, 57, 58, 61, 62, 63, 64, 71, 72, 74, 75, 76, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 94, 98, 101, 104, 110, 111, 114, 116, 120, 123, 125, 128, 129, 130, 132, 134, 139, 141, 147, 154, 163, 164, 168, 181, 191, 201, 202, 213, 220, 229, 231, 233, 235, 236, 237, 239, 243, 245, 246, 247, 249, 253, 254, 257, 264, 272, 275, 277, 278, 279, 284, 287, 290, 296, 297, 299, 310, 314, 317, 319, 321, 322, 343, 351, 352, 353, 358, 359, 363, 364, 365, 368, 373, 374, 376, 377, 378, 382, 383, 385, 388, 389, 393, 399, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 459, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 505, 513, 515, 523, 526, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 706, 711, 712, 723, 732, 733, 736, 737, 742, 743, 764, 769, 770, 775, 779, 784, 789, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 893, 894, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 920, 922, 925, 934, 938, 939, 949, 957, 958, 959, 960, 961, 962, 967, 970, 985, 986, 989, 990, 991, 992, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1023, 1026, 1027, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "method_map": [246, 958], "method_max_it": [546, 547, 1043], "method_nam": [246, 958, 961], "methodmap": [2, 246, 958], "methodmetadatarequest": 957, "methodol": 1012, "methodolog": [412, 1025], "methodologi": [542, 878, 992, 1002, 1026], "methodpair": 959, "metric": [2, 13, 43, 45, 46, 50, 52, 57, 58, 59, 61, 62, 63, 66, 68, 71, 73, 77, 79, 81, 82, 85, 91, 93, 97, 102, 107, 113, 134, 139, 144, 145, 147, 148, 149, 154, 165, 168, 171, 181, 183, 185, 186, 188, 198, 202, 208, 209, 212, 214, 216, 218, 230, 235, 240, 243, 244, 249, 252, 262, 263, 266, 267, 268, 270, 271, 273, 277, 279, 280, 284, 289, 290, 292, 300, 303, 308, 310, 315, 319, 320, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 351, 352, 359, 363, 368, 371, 376, 378, 388, 389, 390, 393, 399, 403, 406, 407, 413, 414, 415, 418, 419, 425, 437, 441, 444, 445, 446, 450, 454, 455, 456, 457, 462, 469, 521, 536, 550, 551, 552, 554, 556, 558, 559, 560, 562, 563, 565, 566, 568, 570, 579, 603, 611, 621, 629, 632, 635, 639, 640, 641, 642, 643, 644, 659, 660, 664, 667, 669, 675, 676, 677, 689, 691, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 830, 833, 834, 835, 836, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 871, 877, 900, 901, 905, 907, 910, 913, 915, 922, 992, 994, 997, 999, 1003, 1005, 1008, 1010, 1021, 1022, 1023, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "metric_kwarg": [780, 781], "metric_obj": 700, "metric_param": [419, 444, 446, 450, 455, 456, 457, 689, 693, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 1037, 1040, 1047], "metsi": [840, 1004], "metzen": [0, 397, 1033, 1036, 1037, 1038, 1039], "mexican": 129, "meyer89": 1044, "mferrari3": [1041, 1042], "mgrid": [53, 161], "mhg": 1038, "mi": [64, 72, 163, 408, 608, 609, 705, 756, 758, 992, 1002, 1016], "mia": 1048, "miao": 1046, "mib": [363, 468, 903], "mic": [886, 1012], "micah": 1043, "micci": [886, 1012], "mice": [370, 628, 992], "miceprotein": 370, "michael": [373, 406, 408, 450, 629, 638, 692, 798, 992, 998, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1045, 1047, 1048, 1050, 1051], "michal": [1037, 1040, 1046, 1047], "michali": 408, "michalkrawczyk": [1046, 1047], "micha\u0142": 1044, "micha\u0142owski": 1042, "michel": [0, 398, 1033, 1035, 1036, 1038, 1040, 1047, 1048], "michelbach": 1037, "michiaki": 1039, "micka\u00ebl": [1041, 1042], "micky774": [1047, 1048], "micro": [49, 303, 333, 363, 380, 708, 714, 730, 731, 739, 784, 785, 788, 789, 1002, 1033, 1041, 1042, 1048, 1051], "micro_roc_auc_ovr": 279, "microarrai": [405, 451, 514, 629, 992], "microcontrol": 1021, "microphon": 121, "microryzomi": [50, 303, 371, 499], "microryzomys_minutu": 499, "microryzomys_minutus_0": 50, "microsoft": [0, 51, 374, 377, 394], "mid": [63, 340, 1002, 1004], "middl": [43, 61, 70, 93, 125, 198, 348, 373, 1009, 1012], "mideast": [57, 371], "midina": 1040, "midnight": 43, "midpoint": 340, "midpointnorm": 340, "midvidi": 1046, "midwest": [168, 373], "might": [0, 43, 44, 52, 67, 77, 79, 93, 95, 102, 142, 149, 152, 165, 176, 182, 186, 187, 188, 191, 209, 212, 230, 239, 264, 270, 272, 284, 293, 306, 321, 327, 344, 349, 359, 363, 364, 370, 374, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 394, 402, 406, 407, 409, 412, 413, 414, 415, 416, 418, 433, 443, 488, 497, 502, 504, 509, 516, 524, 537, 556, 557, 558, 562, 563, 565, 580, 581, 583, 611, 612, 628, 651, 655, 656, 657, 659, 660, 677, 679, 693, 758, 795, 803, 804, 805, 818, 821, 829, 854, 870, 885, 898, 917, 919, 921, 923, 927, 931, 932, 949, 970, 991, 992, 994, 996, 998, 999, 1001, 1002, 1004, 1005, 1009, 1010, 1012, 1017, 1018, 1034, 1036, 1041, 1042, 1044, 1047, 1048, 1049, 1050], "mignon": [1033, 1036, 1037, 1040], "migrat": [376, 1033], "miguel": [1043, 1051], "miguelbarao": 1043, "miguelcsilva": 1051, "mihael": [408, 450, 457], "mihevc": 1043, "mike": 1040, "mikebenfield": 1040, "miketip": [535, 542], "mikhail": [1034, 1035, 1036, 1039, 1040, 1048, 1049], "miki": [1050, 1051], "mikulski": 1044, "milajev": 1037, "milan": 1045, "milana2": 1047, "mileag": 363, "milen": 1040, "mileston": 380, "militari": 102, "mill": 1043, "millawel": 1047, "miller": [371, 1041, 1042, 1046], "million": [77, 89, 175, 191, 416, 693, 999, 1017, 1026, 1047, 1048], "millman": [0, 398, 1042, 1049, 1050], "milman": 1041, "miln": 371, "miltenberg": 1048, "milton": 1050, "milutinov": 1042, "mimic": [181, 212, 351, 819], "mimicri": 351, "min": [43, 49, 50, 51, 52, 53, 62, 64, 67, 85, 91, 107, 120, 123, 134, 136, 142, 145, 146, 152, 161, 168, 172, 174, 175, 176, 182, 186, 196, 200, 202, 208, 214, 215, 218, 233, 243, 244, 247, 289, 296, 297, 303, 305, 307, 310, 312, 313, 315, 327, 334, 348, 385, 408, 411, 413, 482, 483, 485, 513, 535, 536, 539, 541, 542, 550, 551, 564, 628, 632, 633, 655, 656, 657, 658, 683, 684, 705, 758, 781, 804, 805, 854, 862, 863, 875, 884, 891, 949, 966, 993, 998, 1002, 1005, 1012, 1039, 1042, 1044, 1045, 1048], "min_": [322, 408, 415, 875, 998, 1012, 1016, 1017, 1018], "min_arg": 52, "min_batch_s": 952, "min_bin_freq": [448, 461], "min_c": 1004, "min_categori": [841, 1045], "min_cluster_s": [79, 98, 325, 408, 446, 450, 456, 1042], "min_degre": [880, 1046], "min_df": [54, 57, 102, 271, 333, 351, 352, 416, 589, 592, 1033, 1035, 1044, 1051], "min_dist": 243, "min_estim": 138, "min_faces_per_person": [45, 371, 495], "min_features_to_select": [167, 595, 1041], "min_frequ": [323, 325, 878, 879, 1012, 1047, 1049], "min_grad_norm": [693, 1039], "min_i": 247, "min_idf": 1046, "min_impurity_decreas": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1018, 1040], "min_impurity_split": 1040, "min_max_axi": 1042, "min_max_scal": 1012, "min_n": [589, 590, 592, 1033], "min_n_compon": 243, "min_po": [2, 385], "min_resourc": [146, 804, 805, 991], "min_resources_": [804, 805], "min_sampl": [79, 82, 98, 388, 390, 408, 419, 444, 446, 450, 455, 456, 457, 672, 998, 1042, 1046], "min_sample_split": 1048, "min_samples_leaf": [140, 145, 146, 188, 319, 322, 355, 415, 558, 559, 560, 561, 562, 563, 565, 566, 567, 913, 914, 915, 916, 1018, 1039], "min_samples_split": [146, 147, 148, 274, 282, 311, 321, 415, 558, 559, 560, 561, 565, 566, 567, 804, 805, 913, 914, 915, 916, 991, 1018, 1039], "min_val": [928, 935], "min_valu": [628, 1044, 1045], "min_w": 998, "min_weight_fraction_leaf": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1018, 1036, 1039, 1040], "min_x": 247, "mina": [1043, 1044], "mincovdet": [2, 111, 112, 410, 469, 470, 473, 475, 476, 1008, 1033, 1040], "mind": [125, 149, 185, 186, 187, 230, 314, 315, 351, 352, 359, 376, 402, 410, 412, 415, 647, 648, 705, 998, 1017, 1021], "minden": [408, 452, 462], "mine": [0, 270, 352, 371, 408, 419, 444, 512, 564, 721, 735, 741, 784, 998, 1002, 1008, 1014], "ming": [564, 1008, 1037, 1041, 1042, 1043, 1047], "minghui": [1040, 1041], "mingw": 1036, "minh": 1041, "mini": [2, 47, 97, 120, 323, 365, 390, 416, 440, 442, 447, 449, 451, 453, 532, 534, 537, 538, 539, 540, 541, 543, 544, 546, 547, 1006, 1007, 1033, 1044, 1046], "mini_batch": [451, 453], "minibatch": [47, 79, 408, 413, 449, 535, 677, 861, 862, 863, 1033], "minibatch_iter": 47, "minibatch_kmean": 352, "minibatch_s": [47, 365], "minibatchdictionarylearn": [2, 120, 123, 365, 413, 532, 539, 543, 546, 547, 1034, 1036, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "minibatchkmean": [2, 57, 71, 73, 78, 79, 83, 91, 92, 94, 96, 183, 352, 365, 408, 413, 440, 442, 447, 513, 780, 1023, 1034, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "minibatchnmf": [2, 54, 365, 413, 1047, 1049, 1050, 1051], "minibatchsparsepca": [2, 532, 534, 538, 541, 543, 544, 546, 547, 1033, 1034, 1044, 1046, 1047, 1048, 1049, 1050], "miniforg": [374, 384, 394, 395], "miniforge3": [374, 384], "minim": [2, 43, 51, 52, 64, 90, 99, 109, 110, 146, 170, 178, 193, 209, 210, 212, 214, 216, 220, 230, 232, 242, 243, 255, 260, 264, 271, 279, 280, 310, 319, 322, 337, 344, 347, 355, 375, 376, 379, 384, 388, 390, 402, 406, 408, 410, 413, 415, 440, 441, 445, 446, 450, 463, 539, 541, 548, 558, 559, 560, 561, 565, 566, 610, 611, 612, 642, 647, 650, 658, 659, 660, 668, 672, 673, 675, 679, 680, 688, 693, 695, 696, 749, 781, 852, 854, 863, 881, 893, 899, 913, 914, 915, 916, 998, 999, 1002, 1005, 1006, 1012, 1014, 1015, 1016, 1017, 1021, 1024, 1028, 1037, 1042, 1043], "minima": [176, 200, 413, 447, 693, 999, 1041], "minimal_reproduc": 384, "minimalist": [381, 416, 1025], "minimis": [52, 269, 408, 412, 659, 660, 1018], "minimum": [2, 48, 88, 90, 111, 146, 147, 149, 167, 202, 222, 243, 249, 280, 296, 297, 378, 385, 394, 401, 405, 408, 415, 416, 441, 445, 446, 450, 454, 456, 469, 470, 473, 474, 475, 476, 512, 514, 542, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 595, 628, 632, 633, 636, 638, 669, 672, 677, 679, 680, 683, 684, 693, 706, 726, 780, 781, 804, 805, 826, 841, 862, 863, 874, 875, 878, 879, 880, 884, 898, 899, 912, 913, 914, 915, 916, 928, 931, 932, 935, 952, 999, 1002, 1006, 1008, 1012, 1014, 1018, 1033, 1036, 1040, 1041, 1045, 1046, 1050], "minimum_cluster_s": 408, "minka": [127, 542, 998], "minknowski": 1046, "minkowski": [419, 444, 450, 455, 456, 457, 689, 700, 779, 780, 781, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 1005, 1033, 1036, 1047, 1048, 1049], "minkowski_dist": [450, 457, 689, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859], "minkowskidist": [700, 1046], "minmax_scal": [2, 308, 310, 875, 1038, 1041], "minmaxscal": [2, 43, 44, 104, 164, 166, 191, 233, 249, 306, 321, 365, 404, 409, 464, 891, 992, 1012, 1035, 1038, 1041, 1043, 1044, 1045, 1049, 1050], "minmaxscalerminmaxscal": 104, "minnesota": 408, "minor": [249, 264, 273, 277, 371, 380, 391, 497, 1002, 1033, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "minu": [270, 761, 1002], "minut": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 371, 376, 999, 1020], "minutu": [50, 303, 371, 499], "minval": [512, 514], "minwoo": 1033, "minyushkin": 1039, "miola": 1048, "miott": [1033, 1036], "miotto": 1044, "mir": 416, "miroslav": [1034, 1035, 1038], "mirror": [842, 991], "mirza": 1046, "misa": 1048, "misc": [57, 86, 123, 271, 333, 351, 352, 353, 371], "misc_featur": 249, "miscalibr": 64, "miscellan": [369, 370, 1023, 1039, 1040, 1047, 1048, 1050, 1051, 1052], "miscfeatur": 154, "misclassif": [46, 134, 264, 344, 797, 1016, 1017, 1018, 1034], "misclassifi": [70, 134, 263, 264, 344, 351, 1017], "misclassification_error": 134, "misdetect": 1050, "mish": 416, "mishra": [1045, 1046], "mislabel": [263, 415, 1004], "mislead": [72, 141, 147, 186, 377, 393, 415, 554, 555, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1028, 1046], "mismatch": [79, 1001, 1042], "misread": 237, "miss": [2, 20, 103, 154, 168, 188, 241, 251, 264, 270, 290, 320, 324, 327, 359, 363, 368, 371, 373, 375, 376, 381, 390, 404, 407, 408, 409, 410, 446, 472, 490, 497, 499, 502, 558, 559, 562, 563, 565, 566, 567, 628, 629, 630, 631, 640, 646, 673, 691, 695, 728, 770, 827, 848, 866, 874, 875, 879, 881, 882, 885, 886, 890, 893, 894, 896, 913, 914, 915, 916, 922, 998, 999, 1002, 1021, 1022, 1023, 1024, 1026, 1028, 1035, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "missclassif": 134, "missforest": [181, 992], "missing": [149, 415, 628, 629, 631, 1042], "missing_featur": [181, 182], "missing_fract": 149, "missing_fraction_list": 149, "missing_r": 182, "missing_sampl": [181, 182], "missing_valu": [181, 182, 251, 390, 628, 629, 630, 631, 770, 992, 1041, 1042], "missingind": [2, 628, 629, 631, 992, 1041, 1042, 1043, 1047, 1049], "mission": [0, 352, 1026], "misspecifi": 64, "misspel": 416, "mistak": [134, 165, 284, 330, 359, 408, 412, 736, 876, 890, 891, 893, 894, 895, 896, 998, 1003], "misti": [43, 187], "mit": [287, 371, 382, 408, 418, 611, 612, 615, 620, 623, 644, 667, 668, 677, 842, 995], "mitar": 1042, "mitig": [64, 88, 149, 188, 317, 364, 365, 999, 1018, 1045], "mitra": [1043, 1044, 1048], "mitrov": 1042, "mitzi": [1046, 1047], "miwojc": 1047, "mix": [2, 43, 95, 101, 102, 121, 122, 143, 183, 186, 212, 241, 251, 253, 271, 310, 316, 370, 378, 388, 390, 409, 413, 420, 464, 466, 467, 497, 534, 539, 541, 548, 601, 605, 631, 647, 648, 653, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 801, 815, 831, 865, 878, 879, 885, 886, 965, 972, 975, 998, 1007, 1023, 1045, 1047, 1048], "mixed_encoded_preprocessor": 316, "mixed_pip": 316, "mixed_target": 316, "mixin": [2, 376, 390, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 602, 943, 1035, 1044, 1048], "mixing_": [121, 122, 534], "mixtur": [2, 46, 48, 70, 79, 88, 90, 98, 118, 173, 182, 200, 257, 258, 281, 300, 326, 371, 372, 390, 408, 413, 414, 418, 624, 798, 799, 801, 1022, 1023, 1027, 1028, 1033, 1037, 1038, 1039, 1040], "mizil": [62, 64, 406, 437, 439], "mizuki": 1047, "mk": 1018, "mkdir": [47, 382, 384], "mkdtemp": [87, 409], "mkl": [363, 364, 374, 384, 388, 1033], "mkl_num_thread": 364, "mksol": 102, "ml": [47, 168, 287, 370, 373, 381, 501, 503, 511, 998, 1000, 1021, 1022, 1026], "ml_map": 396, "mlant": 1047, "mlb": [371, 876], "mlc": 373, "mlcomp": 1033, "mld": 47, "mldata": [1033, 1041], "mle": [111, 127, 542, 1041, 1044], "mlewis1729": 1040, "mlflow": 1021, "mlg": 1037, "mlinari\u0107": 1048, "mline": [48, 111, 226, 296, 339, 342], "mljar": 1021, "mlle": [690, 694, 999], "mlliou112": 1040, "mlo": 175, "mlondschien": 1046, "mlop": 1021, "mlp": [183, 187, 250, 304, 306, 497, 831, 862, 863, 1006, 1023], "mlp_disp": 250, "mlp_model": 187, "mlp_preprocessor": 187, "mlpclassifi": [2, 67, 148, 160, 183, 304, 305, 307, 365, 503, 505, 515, 523, 861, 863, 875, 1003, 1006, 1023, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "mlpregressor": [2, 43, 187, 250, 365, 861, 862, 1006, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "mlpregressormlpregressor": 250, "mlxtend": 1021, "mm": 191, "mm_bunch": 50, "mmap_mod": [402, 967], "mmm": 51, "mmse": [110, 410, 421, 475], "mn193": 1050, "mnb": 1004, "mnist": [183, 192, 204, 206, 220, 227, 290, 304, 306, 497, 659, 831, 862, 885, 934, 998, 1006, 1023], "mnist_10000": 290, "mnist_20000": 290, "mnist_784": [220, 228, 290, 307], "mo": [324, 1044], "mobil": 384, "mock": 1043, "mockdatafram": 1043, "modal": [2, 239, 474, 951], "mode": [2, 48, 49, 80, 81, 111, 212, 239, 290, 292, 308, 319, 374, 376, 380, 384, 385, 388, 405, 411, 415, 419, 443, 444, 447, 449, 452, 459, 462, 471, 472, 478, 482, 487, 509, 510, 558, 562, 565, 593, 596, 597, 599, 600, 601, 611, 628, 645, 646, 659, 660, 667, 669, 674, 675, 676, 677, 680, 683, 684, 690, 694, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 861, 905, 907, 910, 913, 915, 937, 948, 949, 951, 1005, 1008, 1021, 1034, 1042, 1047, 1050], "model": [2, 7, 8, 21, 28, 34, 37, 40, 42, 44, 45, 48, 49, 51, 53, 54, 58, 59, 61, 62, 64, 70, 74, 75, 76, 82, 87, 88, 89, 91, 94, 101, 103, 104, 105, 109, 113, 116, 119, 120, 129, 130, 133, 134, 135, 137, 139, 142, 145, 146, 148, 149, 151, 153, 154, 157, 159, 161, 162, 164, 165, 173, 174, 176, 177, 178, 179, 182, 184, 185, 189, 194, 196, 199, 201, 203, 204, 206, 208, 213, 214, 216, 217, 218, 220, 224, 225, 227, 228, 229, 239, 242, 247, 255, 257, 258, 259, 263, 265, 266, 268, 271, 273, 274, 275, 276, 278, 279, 284, 285, 287, 290, 292, 293, 294, 296, 299, 303, 311, 314, 316, 317, 319, 321, 323, 324, 325, 327, 329, 330, 337, 339, 340, 341, 342, 343, 345, 347, 349, 352, 353, 356, 359, 368, 370, 371, 379, 382, 390, 393, 399, 404, 405, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 427, 431, 433, 437, 442, 449, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 497, 499, 501, 502, 503, 504, 510, 523, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 589, 590, 594, 595, 598, 603, 607, 610, 611, 612, 616, 628, 633, 634, 635, 636, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 702, 707, 712, 722, 723, 724, 725, 735, 736, 742, 751, 754, 786, 789, 790, 793, 798, 799, 800, 801, 804, 805, 806, 807, 815, 816, 817, 818, 822, 823, 824, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 848, 850, 851, 852, 854, 856, 861, 862, 863, 865, 866, 868, 870, 872, 877, 878, 880, 881, 882, 884, 885, 886, 890, 891, 893, 894, 895, 896, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 920, 985, 992, 994, 995, 996, 999, 1000, 1003, 1005, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038], "model_1": 270, "model_1_scor": 270, "model_2": 270, "model_2_scor": 270, "model__estimator__max_depth": 991, "model_coef": 185, "model_color": 346, "model_detail": 142, "model_displai": 139, "model_fixed_threshold": 264, "model_from_prevision_vers": 402, "model_i": 270, "model_i_scor": 270, "model_idx": 249, "model_k": 270, "model_k_scor": 270, "model_l1": 347, "model_l2": 347, "model_nam": [140, 249, 289], "model_no_cf": 317, "model_param": 227, "model_prop": 43, "model_scor": [270, 289], "model_select": [2, 43, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 87, 103, 104, 105, 106, 107, 109, 116, 125, 127, 134, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 159, 164, 165, 167, 170, 181, 182, 183, 185, 186, 188, 189, 191, 198, 208, 209, 212, 214, 219, 220, 227, 228, 230, 240, 245, 246, 249, 251, 252, 253, 257, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 293, 294, 298, 299, 305, 307, 308, 312, 314, 315, 316, 317, 319, 320, 321, 324, 325, 326, 327, 332, 333, 340, 343, 347, 355, 358, 359, 376, 378, 381, 389, 390, 399, 404, 407, 409, 412, 415, 437, 438, 559, 561, 568, 569, 580, 660, 698, 699, 701, 703, 743, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 854, 862, 863, 865, 913, 914, 915, 916, 991, 992, 997, 1002, 1004, 1005, 1010, 1012, 1017, 1022, 1023, 1030, 1037, 1039, 1040], "model_selection_tut": 159, "model_step": 43, "model_titl": 142, "model_with_cf": 317, "moder": [270, 376, 418, 454, 1008], "modern": [43, 149, 416, 468, 504, 591, 691, 695, 731, 903, 999, 1021, 1022, 1049], "modif": [376, 411, 415, 416, 446, 1015, 1050, 1051], "modifi": [107, 198, 222, 232, 233, 234, 246, 249, 325, 349, 376, 378, 390, 405, 408, 415, 418, 443, 447, 454, 459, 468, 482, 483, 484, 485, 496, 511, 582, 611, 612, 614, 620, 677, 679, 690, 694, 720, 730, 731, 769, 784, 785, 788, 929, 983, 984, 998, 1015, 1016, 1022, 1027, 1028, 1033, 1035, 1036, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1048], "modified_fil": 376, "modified_hub": [46, 677, 1016], "modified_huber_loss": 222, "modified_tol": [690, 694], "modrak": [1048, 1049], "modroiu": 1002, "modul": [7, 11, 16, 30, 31, 71, 72, 82, 86, 108, 114, 117, 119, 120, 133, 162, 169, 180, 183, 184, 190, 192, 227, 231, 232, 254, 262, 286, 287, 288, 291, 304, 306, 307, 309, 328, 335, 350, 354, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 390, 393, 394, 402, 406, 408, 411, 415, 416, 417, 419, 444, 504, 536, 580, 581, 660, 941, 991, 996, 998, 1000, 1002, 1003, 1006, 1008, 1009, 1012, 1014, 1016, 1018, 1019, 1026, 1034, 1035, 1036, 1038, 1039, 1043, 1047], "modulo": [416, 1044], "moeller": 1039, "mogavero": 1043, "moham": [1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "mohamedbsh": 1048, "mohammad": [1041, 1042], "mohit": [1047, 1050], "mohn": [1041, 1045], "mohr": 1039, "moin": 1045, "mois\u00e9": 1014, "moitra": [1033, 1034, 1035], "mojca": 1044, "mojdeh": 1050, "mola": [1044, 1050], "molden": 1035, "molecul": 999, "molin": 1048, "molla": [1034, 1035], "molnar": [187, 1009], "moment": [363, 413, 418, 440, 616, 624, 862, 863, 965, 1006, 1007], "momentum": [306, 862, 863, 1006], "mon": [43, 149, 187], "mona": [169, 177, 183, 418, 497, 612, 616, 623, 624, 626, 1023], "monaf": 1048, "monei": [0, 230, 1026], "monitor": [144, 198, 220, 379, 390, 554, 555, 560, 561, 562, 563, 1006, 1025, 1036, 1041, 1043, 1045], "mono": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685], "monografia": 998, "monomi": 213, "monotoinc": 320, "monoton": [2, 22, 43, 62, 133, 183, 187, 230, 242, 250, 320, 406, 558, 559, 560, 561, 562, 563, 565, 566, 633, 636, 637, 695, 707, 881, 893, 907, 910, 913, 914, 915, 916, 999, 1003, 1012, 1017, 1023, 1040, 1044, 1048, 1050], "monotonic_cst": [149, 151, 320, 322, 326, 415, 558, 559, 562, 563, 565, 566, 913, 914, 915, 916, 1048, 1051], "mont": [244, 418, 612, 642, 643, 994, 1007], "montecchio": 1037, "montesel": 1051, "month": [0, 43, 175, 187, 316, 371, 376, 380, 391, 1033], "month_co": 43, "month_sin": 43, "monthli": [175, 391, 1002], "montoya": 1040, "montreal": 324, "moodi": 1038, "moon": [270, 306, 312, 351, 352, 523], "moonkyung94": 1047, "moor": [0, 736, 1002, 1026, 1050], "moosmann": 567, "moradizadeh": 1047, "morai": 1051, "moral": [57, 351, 659, 1041, 1045, 1046, 1051], "morawiec": [1040, 1041], "more": [0, 2, 11, 36, 43, 45, 46, 47, 50, 51, 52, 53, 57, 62, 63, 64, 66, 67, 72, 74, 75, 78, 79, 80, 82, 85, 86, 88, 90, 93, 100, 107, 111, 118, 120, 123, 127, 134, 135, 137, 140, 141, 143, 145, 146, 147, 148, 149, 150, 154, 166, 168, 170, 176, 179, 182, 183, 186, 187, 189, 191, 193, 194, 198, 199, 202, 204, 207, 210, 212, 213, 214, 216, 227, 228, 229, 230, 232, 236, 239, 244, 245, 246, 247, 249, 251, 255, 257, 258, 260, 261, 263, 264, 268, 270, 271, 272, 273, 277, 279, 284, 287, 289, 290, 292, 293, 300, 305, 306, 308, 310, 311, 312, 315, 316, 317, 319, 320, 321, 323, 324, 325, 326, 327, 330, 337, 340, 344, 345, 347, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 389, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 431, 433, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 921, 923, 924, 945, 947, 949, 951, 964, 967, 985, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1024, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "moreau": [1039, 1040, 1041, 1042, 1043], "moreov": [159, 176, 312, 323, 359, 408, 412, 418, 898, 971, 1002, 1010, 1026, 1041, 1047, 1048], "moreyra": 1046, "morgan": [1014, 1018], "mori": 1048, "morikko": 1040, "morina": 1046, "moritz": [1046, 1048], "morn": 43, "moroz": 1039, "morril": 1033, "mors": 1044, "moslei": 1002, "mosley2013": 1002, "mosold": 154, "most": [2, 11, 43, 45, 47, 51, 53, 57, 61, 64, 85, 86, 88, 95, 109, 115, 116, 126, 128, 134, 140, 141, 147, 149, 154, 163, 164, 165, 167, 168, 175, 182, 185, 186, 187, 188, 189, 191, 198, 212, 213, 230, 246, 250, 255, 261, 264, 267, 268, 273, 277, 278, 280, 284, 287, 289, 299, 310, 316, 317, 319, 322, 325, 327, 330, 340, 344, 351, 352, 353, 359, 363, 364, 365, 371, 372, 374, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 394, 399, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 443, 444, 446, 450, 456, 457, 460, 468, 497, 504, 522, 525, 533, 535, 540, 544, 550, 552, 562, 563, 567, 568, 589, 590, 592, 594, 605, 612, 628, 631, 650, 659, 673, 675, 677, 679, 688, 689, 693, 696, 726, 729, 759, 760, 764, 786, 795, 798, 799, 804, 805, 820, 833, 834, 847, 848, 849, 851, 853, 854, 855, 856, 857, 880, 882, 890, 891, 893, 894, 895, 896, 903, 922, 948, 949, 951, 964, 991, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1008, 1009, 1010, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1026, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1050], "most_common": 57, "most_frequ": [273, 552, 628, 631, 855, 992, 1002, 1041, 1043, 1045], "mostli": [0, 2, 80, 102, 212, 230, 315, 378, 384, 388, 390, 413, 415, 416, 522, 780, 781, 1017, 1021, 1026, 1041, 1042, 1043, 1049], "mother": 999, "motiv": [129, 376, 378, 390, 994, 1002, 1012, 1026, 1046], "motmoti": 1043, "motoda": 408, "motor": 230, "motorcycl": [57, 371], "mottl": [1041, 1042], "moudgalya": [1049, 1050], "moufad": 1048, "moulavi": [408, 446], "mount": 384, "mountain": 1041, "mountford": [1049, 1050], "mous": 370, "mouseid": 370, "moussa": 1039, "move": [64, 142, 271, 308, 340, 375, 376, 382, 406, 408, 550, 551, 572, 573, 574, 576, 578, 579, 943, 944, 968, 1033, 1034, 1038, 1041, 1043, 1046, 1047], "moveabl": 409, "movelikeriv": 1042, "movement": 371, "movi": 416, "movie_entri": 416, "moya": 1045, "mp": 998, "mpce": 57, "mpl": [70, 255, 256, 257, 261, 310], "mpl_toolkit": [50, 100, 126, 187, 232, 234, 303], "mplot3d": [100, 126, 187, 232, 234], "mpoemsl": 1047, "mppca": [535, 542], "mprun": 382, "mpy": 416, "mr": [324, 1034, 1037, 1047], "mrandrewandrad": 1039, "mrastgoo": [1048, 1050], "mrg": 384, "mridul": 1039, "mrinal": 1047, "mrinaltyagi": 1047, "mrl09": 413, "mrmjauh": 1040, "mro": [378, 425, 431, 1043, 1044], "mrs2008": 591, "msabati": 1047, "msc": 373, "mschaffenroth": 1043, "mse": [44, 46, 109, 110, 144, 146, 147, 181, 182, 212, 214, 216, 218, 285, 326, 648, 654, 1002, 1018, 1044, 1046], "mse_path_": [202, 648, 652, 654, 656, 662, 664], "mse_valu": 46, "mses_california": 182, "mses_diabet": 182, "msft": 51, "msg": [290, 985], "msle": 1002, "msm": [168, 373], "mssubclass": 154, "mst": 408, "msvc": 1036, "msvcp140": 1047, "mt19937": [277, 282, 934, 1044], "mthorrel": [1040, 1043], "mtrand": 359, "mtse": 680, "mu": [54, 111, 112, 270, 413, 421, 473, 475, 476, 479, 480, 481, 541, 548, 996, 998, 1040, 1043], "mu_i": 1004, "mu_j": 408, "mu_k": 996, "muayyad": 1041, "much": [37, 43, 45, 46, 48, 52, 57, 62, 75, 88, 111, 113, 118, 123, 129, 139, 146, 147, 154, 155, 156, 170, 181, 182, 186, 187, 188, 189, 191, 210, 214, 243, 246, 249, 264, 270, 272, 273, 276, 281, 283, 307, 311, 315, 316, 317, 321, 322, 324, 340, 345, 351, 352, 359, 363, 364, 365, 371, 376, 377, 378, 381, 384, 388, 389, 394, 402, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 447, 448, 497, 535, 536, 537, 539, 560, 561, 562, 563, 659, 660, 667, 668, 669, 677, 678, 679, 693, 780, 781, 804, 805, 819, 847, 855, 880, 898, 905, 991, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1010, 1014, 1015, 1017, 1018, 1022, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "mudd": 1046, "mueller": [0, 397, 1026, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "muhammad": [1041, 1042, 1046], "mukherje": 1044, "mula": 1045, "multi": [2, 50, 67, 124, 133, 142, 152, 155, 161, 172, 174, 183, 192, 198, 199, 202, 205, 211, 219, 228, 231, 234, 238, 239, 247, 250, 262, 267, 279, 289, 304, 312, 313, 319, 324, 334, 345, 351, 356, 358, 364, 371, 373, 379, 385, 390, 394, 408, 415, 416, 418, 425, 437, 452, 462, 469, 474, 496, 497, 505, 506, 511, 515, 516, 520, 521, 523, 542, 550, 551, 552, 554, 556, 558, 559, 560, 562, 565, 566, 568, 570, 611, 632, 634, 644, 647, 648, 653, 654, 658, 659, 661, 662, 663, 664, 667, 669, 673, 674, 675, 676, 677, 682, 685, 691, 704, 714, 721, 735, 741, 743, 784, 800, 801, 815, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 853, 855, 861, 862, 863, 866, 872, 885, 889, 900, 901, 905, 907, 910, 913, 915, 917, 918, 919, 921, 925, 931, 934, 937, 991, 1003, 1005, 1009, 1012, 1016, 1021, 1022, 1023, 1024, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1049, 1050, 1051], "multi_class": [205, 279, 319, 611, 659, 660, 789, 905, 921, 998, 1003, 1017, 1033, 1037, 1041, 1046, 1048, 1051], "multi_confus": 755, "multi_label": [921, 923], "multi_layer_regressor": 415, "multi_output": [385, 925, 931, 990], "multi_target_forest": 1003, "multialign": 282, "multiarch": 384, "multiclass": [2, 31, 63, 66, 140, 192, 205, 228, 240, 247, 249, 252, 262, 267, 275, 277, 280, 289, 308, 337, 348, 355, 371, 372, 378, 379, 381, 390, 399, 408, 415, 437, 452, 462, 489, 497, 505, 558, 560, 562, 565, 568, 569, 595, 603, 611, 632, 633, 634, 659, 660, 667, 669, 674, 675, 676, 677, 703, 707, 709, 730, 731, 735, 736, 739, 744, 755, 784, 785, 788, 789, 790, 795, 801, 802, 804, 805, 806, 807, 815, 817, 819, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 872, 886, 905, 907, 910, 913, 915, 963, 964, 965, 996, 998, 1012, 1013, 1017, 1018, 1023, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1048, 1049, 1050], "multicollinear": [141, 147, 183, 184, 188, 276, 332, 411, 501, 565, 635, 656, 831, 998, 1010, 1023], "multicor": [1045, 1046], "multidimension": [2, 411, 689, 691, 693, 695, 999, 1005], "multigrid": 462, "multiindex": 1047, "multilabel": [2, 30, 31, 115, 117, 183, 238, 277, 287, 288, 332, 371, 378, 379, 390, 403, 482, 487, 497, 498, 509, 510, 516, 524, 542, 558, 565, 568, 659, 675, 676, 704, 708, 714, 727, 730, 731, 735, 736, 739, 740, 755, 757, 784, 785, 788, 789, 795, 797, 831, 834, 836, 838, 862, 869, 872, 876, 878, 889, 910, 913, 915, 923, 937, 963, 964, 965, 1013, 1023, 1024, 1028, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050, 1051], "multilabel_": [834, 1038], "multilabel_confusion_matrix": [2, 714, 730, 731, 739, 785, 788, 1002, 1042], "multilabelbinar": [2, 390, 834, 869, 878, 1003, 1036, 1038, 1039, 1041, 1042], "multilay": [388, 1000], "multilearn": 1021, "multimetr": [712, 991, 1043, 1048], "multimetric_": [801, 804, 805, 815], "multimod": 239, "multinomi": [2, 47, 66, 183, 192, 204, 206, 221, 227, 247, 265, 279, 307, 348, 371, 372, 376, 413, 415, 497, 513, 524, 552, 554, 560, 562, 632, 659, 660, 742, 831, 834, 840, 841, 842, 843, 844, 885, 934, 1002, 1018, 1023, 1024, 1028, 1033, 1037, 1039, 1040, 1041, 1046, 1047, 1051], "multinomialdevi": 1044, "multinomialhmm": 1033, "multinomialnb": [2, 47, 365, 371, 416, 840, 841, 842, 843, 1004, 1035, 1037, 1040, 1041, 1045, 1046, 1048], "multiouput": 1043, "multioutput": [2, 41, 153, 279, 289, 390, 399, 431, 465, 482, 483, 484, 552, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 612, 633, 634, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 789, 791, 792, 826, 834, 836, 837, 838, 839, 848, 856, 863, 872, 906, 908, 911, 913, 914, 915, 916, 937, 964, 965, 1002, 1023, 1024, 1028, 1033, 1034, 1035, 1039, 1040, 1046, 1047], "multioutput_arrai": 376, "multioutputclassifi": [2, 399, 789, 834, 836, 838, 1002, 1040, 1042, 1043, 1044, 1045, 1049, 1050], "multioutputregressor": [2, 153, 399, 431, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 837, 839, 848, 856, 863, 906, 908, 911, 914, 916, 1039, 1040, 1042, 1044, 1045, 1049, 1050], "multipl": [2, 25, 52, 80, 101, 104, 118, 129, 134, 140, 142, 144, 164, 183, 186, 207, 244, 264, 270, 275, 278, 282, 287, 289, 292, 319, 325, 343, 363, 364, 365, 370, 372, 373, 376, 378, 379, 380, 381, 388, 390, 402, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 444, 460, 464, 466, 467, 469, 474, 488, 491, 493, 496, 497, 498, 504, 505, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 560, 561, 562, 563, 564, 582, 600, 608, 609, 611, 612, 628, 633, 635, 640, 641, 642, 643, 647, 648, 651, 653, 654, 655, 658, 661, 662, 663, 664, 667, 668, 669, 672, 674, 677, 679, 680, 690, 691, 693, 694, 695, 712, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 789, 791, 792, 794, 798, 799, 801, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 827, 828, 829, 831, 835, 836, 837, 838, 839, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 867, 870, 882, 886, 894, 897, 898, 905, 906, 907, 910, 927, 943, 948, 949, 972, 975, 994, 997, 998, 999, 1003, 1004, 1005, 1009, 1010, 1015, 1016, 1018, 1021, 1022, 1023, 1033, 1034, 1036, 1039, 1040, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "multipleloc": [232, 295], "multiplex": 1018, "multipli": [186, 216, 230, 270, 358, 363, 385, 390, 413, 415, 416, 421, 464, 475, 516, 539, 541, 542, 548, 558, 562, 565, 647, 649, 653, 655, 659, 660, 661, 663, 669, 670, 671, 673, 677, 678, 679, 681, 687, 688, 690, 694, 765, 907, 910, 913, 915, 937, 977, 978, 979, 991, 994, 998, 1002, 1016, 1044], "multiprocess": [388, 390, 967, 1005, 1033, 1041, 1047], "multirespons": 998, "multiscal": 462, "multisurfac": [168, 373], "multitarget": 385, "multitask": [289, 416, 1003], "multitaskelasticnet": [2, 647, 648, 653, 662, 663, 664, 682, 998, 1003, 1033, 1040, 1041, 1044, 1046], "multitaskelasticnetcv": [2, 399, 647, 648, 653, 661, 663, 664, 682, 998, 1003, 1036, 1043, 1044, 1046, 1050], "multitasklasso": [2, 207, 653, 661, 664, 998, 1003, 1033, 1041, 1044, 1046], "multitasklassocv": [2, 399, 662, 663, 1003, 1036, 1043, 1044, 1046, 1050], "multithread": [363, 408, 775, 779, 905, 906, 907, 908, 909, 910, 911], "multivari": [2, 120, 186, 368, 410, 413, 416, 473, 517, 518, 519, 628, 629, 630, 631, 650, 672, 679, 680, 840, 841, 842, 843, 844, 996, 998, 1001, 1004, 1021, 1028], "multivariate_norm": [113, 116, 255, 421, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481], "multiwai": 1018, "muma": 112, "mungui": 1046, "munoz": [1039, 1045], "muoki": 1045, "murad": 1036, "murashkin": 1037, "murata": [1046, 1047], "murder": 351, "murezzda": 1049, "murmurhash": 385, "murmurhash3": [2, 416, 583, 590, 966], "murmurhash3_32": [2, 385], "murmurhash3_x86_32": [385, 966], "murphi": [406, 644, 995], "murrai": [1039, 1040], "music": 1026, "must": [88, 186, 187, 189, 195, 198, 229, 230, 239, 250, 265, 296, 311, 316, 351, 359, 371, 375, 376, 377, 378, 380, 382, 384, 390, 391, 399, 404, 406, 408, 409, 412, 413, 415, 416, 417, 418, 419, 429, 438, 441, 444, 445, 446, 447, 449, 450, 451, 455, 457, 459, 461, 462, 464, 466, 467, 469, 474, 487, 509, 510, 513, 524, 532, 538, 539, 540, 541, 542, 544, 545, 548, 554, 555, 560, 561, 562, 563, 568, 569, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 611, 612, 618, 621, 628, 629, 630, 631, 632, 633, 634, 639, 643, 644, 649, 650, 653, 659, 660, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 686, 687, 688, 689, 690, 693, 694, 695, 696, 697, 700, 704, 707, 710, 736, 747, 765, 772, 775, 779, 782, 789, 793, 794, 795, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 810, 811, 813, 815, 816, 817, 819, 820, 822, 826, 829, 831, 832, 840, 841, 842, 843, 844, 847, 848, 849, 851, 853, 854, 855, 856, 857, 860, 861, 862, 863, 865, 868, 869, 870, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 905, 906, 907, 908, 909, 910, 911, 912, 918, 976, 985, 987, 990, 991, 992, 998, 999, 1000, 1002, 1005, 1006, 1008, 1009, 1016, 1017, 1018, 1033, 1036, 1040, 1044, 1046, 1047, 1050], "mutat": [359, 990, 1041], "mutual": [2, 72, 73, 82, 88, 91, 162, 183, 390, 415, 417, 446, 593, 596, 597, 600, 601, 607, 608, 609, 610, 705, 706, 716, 756, 758, 787, 796, 803, 818, 821, 991, 998, 1002, 1003, 1023, 1033, 1039, 1049], "mutual_info_classif": [2, 104, 417, 593, 596, 597, 600, 601, 1039, 1045, 1048, 1051], "mutual_info_regress": [2, 163, 323, 417, 593, 596, 597, 600, 601, 610, 1039, 1040, 1045, 1047, 1048, 1049, 1051], "mutual_info_scor": [2, 72, 408, 705, 1002, 1041, 1044, 1045], "mu\u00f1oz": [1046, 1048], "mwestt": 1042, "my": [370, 376, 381, 384, 497], "my_custom_loss_func": 1002, "my_data": 381, "my_dataset": 487, "my_estim": [378, 409], "my_extra_param": 378, "my_featur": 376, "my_fil": 382, "my_func": [377, 382], "my_g": [420, 534], "my_group": [246, 399], "my_kernel": [336, 1017], "my_memb": [94, 96, 97], "my_other_weight": [246, 399], "my_pipelin": 1042, "my_script": 364, "my_test_script": 384, "my_token": 416, "my_weight": [246, 399], "myatt": [1042, 1043], "mycach": [509, 510], "mycluster": 426, "myenugula": 1051, "myer": [1036, 1040], "myestim": [378, 422, 424, 425, 427, 428, 429, 430, 431], "myestimator0": 424, "myestimator1": 424, "mymultioutputestim": 378, "mypi": [376, 380, 394, 401, 1044], "myself": 376, "mysvmlightfil": 509, "mytransform": [378, 432], "m\u00e9hault": [1041, 1042], "m\u00f6rtberg": 1039, "m\u00fcller": [0, 391, 413, 536, 871, 1006, 1012, 1016, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1047], "n": [2, 43, 44, 46, 47, 49, 50, 54, 55, 57, 68, 69, 72, 74, 75, 91, 102, 107, 111, 115, 118, 120, 123, 125, 127, 129, 130, 134, 136, 137, 141, 156, 163, 166, 168, 170, 174, 179, 187, 189, 194, 198, 212, 213, 216, 227, 229, 230, 232, 242, 243, 244, 247, 255, 257, 258, 268, 270, 273, 275, 276, 277, 279, 280, 283, 290, 293, 295, 308, 312, 314, 315, 321, 324, 326, 330, 344, 347, 358, 363, 370, 373, 374, 376, 380, 382, 384, 385, 390, 394, 395, 399, 405, 406, 408, 411, 412, 413, 414, 415, 416, 418, 419, 444, 445, 447, 448, 450, 469, 471, 474, 478, 489, 516, 517, 518, 519, 524, 529, 539, 541, 542, 548, 558, 559, 560, 561, 564, 565, 566, 567, 589, 590, 591, 592, 608, 609, 615, 628, 650, 672, 680, 693, 697, 700, 707, 708, 756, 806, 809, 811, 816, 817, 820, 841, 845, 846, 850, 870, 897, 899, 913, 914, 915, 916, 928, 947, 952, 953, 976, 980, 981, 991, 994, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1014, 1016, 1017, 1018, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "n1": 123, "n2": 123, "n4": 123, "n_": [111, 112, 189, 270, 322, 408, 413, 415, 647, 653, 686, 697, 994, 998, 1002, 1004, 1005, 1009, 1012, 1014, 1017, 1018], "n_alpha": [217, 472, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 674, 676, 682, 683, 684, 685, 1036], "n_atom": 1034, "n_averag": 69, "n_bar": 182, "n_batch_iter_": 537, "n_best": 451, "n_bin": [61, 62, 64, 86, 212, 230, 311, 313, 317, 438, 439, 870, 1012], "n_bins_": 870, "n_bootstrap": [273, 1034], "n_bulk_repeat": 49, "n_byte": 243, "n_c": [408, 660], "n_call": [845, 846], "n_candid": [804, 805, 991], "n_candidates_": [282, 804, 805, 991], "n_candidates_0": 991, "n_candidates_i": 991, "n_categori": [317, 841, 879, 1012], "n_categorical_featur": [143, 562, 563, 633, 634], "n_categories_": 841, "n_center": [77, 513], "n_channel": [584, 585, 588], "n_class": [2, 45, 72, 118, 134, 136, 141, 142, 165, 167, 227, 233, 244, 247, 257, 277, 278, 279, 299, 300, 319, 356, 358, 359, 372, 376, 378, 390, 415, 437, 488, 489, 503, 516, 520, 524, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 594, 595, 605, 611, 635, 640, 659, 660, 667, 668, 669, 675, 676, 677, 678, 698, 708, 717, 719, 723, 736, 739, 742, 755, 789, 795, 800, 801, 804, 805, 815, 823, 826, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 847, 852, 854, 855, 862, 865, 872, 873, 876, 879, 886, 889, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 915, 917, 918, 936, 937, 998, 1002, 1003, 1006, 1013, 1016, 1017, 1038, 1039, 1040, 1042, 1043, 1044, 1050], "n_classes_": [552, 554, 556, 558, 560, 565, 611, 833, 834, 913, 915, 1034, 1043, 1045], "n_classes_pr": [715, 756], "n_classes_tru": [715, 756], "n_classifi": [66, 570, 571], "n_cluster": [2, 57, 58, 59, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 120, 323, 352, 376, 390, 408, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 460, 461, 462, 463, 512, 514, 711, 793, 794, 1033, 1037, 1039, 1041, 1042, 1044, 1047], "n_clusters_": [73, 82, 88, 96, 441, 445], "n_clusters_list": 78, "n_clusters_per_class": [67, 138, 165, 167, 267, 300, 305, 312, 372, 381, 516, 606, 608], "n_clusters_rang": 72, "n_clusters_tru": 94, "n_col": [45, 57, 120, 248, 423, 451, 453, 512, 514, 633], "n_column": [405, 451, 453], "n_column_clust": [451, 453, 514], "n_comp": [130, 191], "n_comparison": 270, "n_compon": [43, 44, 45, 51, 54, 79, 85, 90, 91, 92, 102, 104, 105, 106, 115, 116, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 152, 191, 211, 232, 233, 234, 235, 236, 237, 239, 243, 244, 247, 251, 255, 256, 257, 258, 259, 260, 261, 269, 294, 299, 308, 315, 321, 323, 326, 327, 352, 378, 381, 382, 390, 409, 411, 413, 420, 451, 452, 462, 464, 482, 483, 484, 485, 527, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 640, 641, 642, 643, 689, 690, 691, 692, 693, 694, 695, 696, 697, 798, 799, 854, 861, 864, 897, 898, 899, 949, 994, 996, 999, 1001, 1005, 1034, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1050, 1051], "n_components_": [105, 127, 390, 441, 445, 535, 539, 540, 541, 542, 543, 544, 897, 898, 1042, 1044], "n_components_fa": 127, "n_components_pca": 127, "n_components_pca_ml": 127, "n_components_rang": 243, "n_connected_compon": 463, "n_connected_components_": [441, 445, 1042], "n_core": 140, "n_core_sampl": [419, 444], "n_cpu": [364, 390], "n_cv": [412, 437], "n_cv_alpha": [652, 656], "n_cv_fold": [143, 316, 807, 824, 829, 832], "n_digit": 91, "n_dim": [478, 528, 530, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 1050], "n_dimens": [798, 799], "n_dimensions_of_x": [907, 908, 909, 910, 911], "n_dir": 53, "n_e": 408, "n_element": [418, 618], "n_encoded_featur": [878, 879], "n_error": 297, "n_error_outli": [226, 296, 339], "n_error_outliers_sgd": 226, "n_error_test": [226, 296, 339], "n_error_test_sgd": 226, "n_error_train": [226, 339], "n_error_train_sgd": 226, "n_estim": [46, 49, 63, 67, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 147, 148, 152, 153, 156, 181, 189, 233, 248, 252, 257, 267, 282, 312, 319, 321, 363, 389, 390, 415, 417, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 633, 804, 805, 991, 1008, 1009, 1030, 1041, 1049], "n_estimators_": [144, 560, 561], "n_estimators_ful": 144, "n_exampl": 47, "n_face": 248, "n_featur": [45, 47, 54, 62, 63, 64, 66, 67, 68, 69, 70, 75, 85, 91, 93, 94, 109, 110, 111, 112, 113, 118, 120, 127, 134, 136, 138, 140, 141, 165, 167, 168, 181, 182, 191, 193, 196, 198, 199, 207, 208, 211, 215, 216, 227, 229, 233, 239, 243, 244, 246, 255, 260, 267, 273, 277, 279, 280, 282, 283, 300, 305, 312, 319, 320, 321, 323, 325, 326, 327, 347, 351, 352, 353, 359, 363, 369, 370, 372, 376, 378, 381, 388, 389, 390, 399, 408, 410, 411, 413, 415, 416, 419, 420, 421, 423, 425, 426, 427, 430, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 493, 495, 502, 505, 509, 510, 513, 516, 517, 520, 522, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 711, 726, 759, 760, 761, 762, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 923, 949, 976, 977, 978, 979, 980, 981, 982, 983, 984, 990, 994, 998, 1003, 1005, 1006, 1012, 1016, 1017, 1018, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "n_feature_influ": 49, "n_features_": [167, 594, 595, 1046, 1048], "n_features_a": 854, "n_features_b": 854, "n_features_in_": [378, 390, 429, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 628, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 990, 1044, 1046, 1048, 1051], "n_features_max": 69, "n_features_missing_ind": 631, "n_features_new": [432, 442, 445, 533, 535, 537, 538, 540, 543, 544, 550, 568, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 629, 631, 636, 639, 640, 641, 642, 643, 854, 861, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 897, 898], "n_features_opt": 104, "n_features_out": 631, "n_features_out_": 884, "n_features_rang": 69, "n_features_to_comput": 1041, "n_features_to_select": [166, 168, 321, 417, 594, 603, 1045, 1047], "n_features_to_select_": 603, "n_features_with_miss": 630, "n_features_with_missing_": 628, "n_fold": [159, 648, 652, 654, 656, 660, 662, 664, 1034, 1035, 1039], "n_gram_rang": 1033, "n_group": [412, 810, 1039], "n_i": [1004, 1012], "n_imag": 268, "n_index": [847, 848, 849, 851, 853, 855, 856], "n_inform": [62, 64, 67, 138, 141, 165, 167, 193, 198, 215, 216, 267, 273, 283, 300, 305, 312, 319, 347, 372, 381, 516, 525, 554, 555, 556, 557, 565, 566, 606, 607, 608, 609, 610, 647, 648, 653, 661, 662, 663, 666, 682, 683, 684, 835, 923, 1003, 1041], "n_init": [57, 77, 78, 83, 90, 91, 94, 97, 232, 233, 234, 235, 320, 323, 352, 408, 443, 447, 449, 451, 452, 453, 459, 462, 691, 695, 798, 799, 1033, 1041, 1047, 1048, 1049], "n_init_rang": 94, "n_inlier": 239, "n_input_features_": 1046, "n_instanc": [49, 634], "n_iter": [45, 55, 103, 149, 170, 220, 271, 278, 290, 308, 342, 378, 382, 389, 420, 454, 478, 533, 534, 545, 546, 547, 548, 647, 648, 653, 654, 661, 662, 663, 664, 682, 683, 684, 685, 686, 687, 688, 693, 695, 804, 805, 813, 815, 861, 863, 948, 949, 991, 1016, 1034, 1039, 1040, 1041, 1045, 1047, 1048, 1049, 1051], "n_iter_": [43, 123, 149, 220, 258, 390, 440, 447, 448, 449, 471, 472, 482, 483, 484, 532, 533, 534, 537, 538, 539, 540, 541, 544, 562, 563, 628, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 680, 681, 691, 693, 798, 799, 854, 862, 863, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 1037, 1040, 1041, 1043, 1046, 1047, 1049], "n_iter_no_chang": [46, 140, 144, 149, 220, 322, 351, 381, 390, 415, 560, 561, 562, 563, 667, 668, 669, 677, 678, 679, 862, 863, 1016, 1041, 1044], "n_iter_search": 278, "n_iter_without_progress": [233, 693, 1038, 1039], "n_iterations_": [282, 804, 805], "n_iters_": 1039, "n_job": [52, 87, 104, 105, 140, 141, 146, 147, 154, 167, 168, 181, 186, 187, 188, 189, 233, 235, 251, 264, 269, 271, 272, 274, 283, 287, 290, 319, 320, 321, 324, 347, 364, 376, 390, 415, 419, 437, 444, 446, 448, 450, 452, 455, 456, 457, 458, 461, 464, 467, 472, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 864, 867, 900, 901, 967, 991, 1002, 1003, 1005, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1051], "n_k": [408, 551], "n_kernel": 613, "n_kernel_param": [611, 612], "n_knot": [43, 213, 322, 884, 1012, 1046], "n_l1_ratio": [648, 660, 662, 1036], "n_l1_ratios_": 660, "n_label": [51, 118, 247, 390, 487, 524, 714, 721, 727, 740, 741, 755, 757, 793, 794, 821, 1002, 1039, 1041], "n_labeled_point": [329, 330], "n_layer": [862, 863], "n_layers_": [862, 863], "n_leav": [463, 913, 914, 915, 916], "n_leaves_": [441, 445], "n_left": 564, "n_local_tri": 460, "n_m": 1018, "n_mask": 212, "n_missing_featur": 630, "n_missing_sampl": 182, "n_nearest_featur": [182, 628], "n_neighbor": [51, 79, 95, 100, 155, 181, 232, 233, 234, 236, 239, 249, 290, 292, 293, 296, 297, 298, 299, 302, 315, 319, 321, 351, 415, 452, 603, 608, 609, 629, 689, 690, 692, 694, 696, 697, 847, 848, 849, 851, 853, 854, 858, 900, 901, 992, 999, 1005, 1008, 1015, 1040, 1047, 1049, 1050], "n_neighbors_": [692, 851], "n_neighbors_list": [249, 292], "n_neighbour": 1047, "n_node": [358, 441, 445, 463, 558, 559, 565, 566, 567, 913, 914, 915, 916, 955], "n_node_sampl": 358, "n_nodes_ptr": [558, 559, 565, 566, 567], "n_noise_": 82, "n_nonzero": 129, "n_nonzero_coef": [211, 527, 532, 538, 543, 546, 547, 549, 651, 665, 686, 687, 1051], "n_nonzero_coefs_": [665, 666, 1051], "n_nonzero_column": 353, "n_numerical_featur": 143, "n_order": 194, "n_original_featur": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "n_out": 567, "n_outlier": [111, 112, 150, 215, 239, 297], "n_output": [358, 390, 415, 425, 431, 432, 437, 442, 445, 465, 469, 482, 483, 484, 533, 535, 537, 538, 540, 543, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 629, 631, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 680, 722, 724, 729, 746, 747, 749, 751, 752, 754, 755, 786, 789, 791, 792, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 854, 855, 856, 861, 862, 863, 864, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 897, 898, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 937, 972, 1002, 1003, 1018, 1040, 1043], "n_output_featur": 629, "n_output_features_": 880, "n_outputs_": [552, 553, 558, 559, 565, 566, 567, 862, 863, 913, 914, 915, 916], "n_oversampl": [451, 453, 542, 545, 949, 1047], "n_pack": [2, 952, 953], "n_patch": [584, 585, 588], "n_permut": [276, 412, 830], "n_pixel": [248, 268], "n_point": [265, 845, 846], "n_points_per_clust": 98, "n_popul": [385, 970], "n_possible_iterations_": [804, 805], "n_predict": 49, "n_pt": 53, "n_q": 408, "n_quantil": [107, 187, 314, 882, 894, 1042], "n_quantiles_": 882, "n_queri": [689, 847, 848, 849, 851, 853, 855, 856, 857], "n_random_featur": 202, "n_redund": [62, 64, 67, 141, 165, 167, 267, 273, 300, 305, 312, 372, 381, 437, 516, 554, 556, 565, 835], "n_refin": 472, "n_region": 80, "n_regions_plu": 80, "n_regressor": 571, "n_relevant_featur": 207, "n_remaining_candidates_": [804, 805], "n_repeat": [137, 141, 147, 167, 186, 188, 189, 270, 284, 287, 319, 412, 516, 635, 816, 817, 1010], "n_required_iterations_": [804, 805], "n_resourc": 991, "n_resources_": [282, 804, 805, 991], "n_resources_0": 991, "n_resources_i": 991, "n_restarts_optim": [176, 177, 418, 611, 612], "n_retri": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1047, 1051], "n_row": [45, 57, 120, 405, 423, 451, 453, 512, 514], "n_row_clust": [451, 453, 514], "n_run": [72, 94, 191, 352], "n_sampl": [45, 46, 49, 54, 61, 62, 63, 64, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 102, 107, 109, 110, 111, 112, 113, 116, 118, 120, 121, 125, 127, 134, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 150, 151, 160, 161, 167, 168, 179, 181, 182, 185, 193, 195, 196, 198, 199, 200, 203, 205, 207, 208, 211, 212, 213, 215, 216, 220, 224, 227, 229, 230, 232, 233, 234, 235, 236, 237, 239, 243, 244, 246, 249, 256, 258, 259, 260, 261, 267, 268, 270, 273, 274, 277, 279, 280, 281, 282, 283, 285, 290, 300, 312, 313, 314, 317, 320, 321, 323, 325, 326, 327, 331, 338, 341, 342, 347, 351, 352, 359, 369, 373, 376, 378, 381, 385, 388, 389, 390, 399, 407, 408, 410, 411, 412, 413, 415, 419, 420, 421, 423, 425, 426, 427, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 495, 502, 505, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 622, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 771, 772, 773, 774, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 921, 923, 936, 937, 949, 951, 953, 963, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 990, 991, 994, 998, 1002, 1003, 1005, 1006, 1012, 1013, 1014, 1016, 1017, 1018, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "n_samples1": 871, "n_samples2": 871, "n_samples_": 542, "n_samples_1": [342, 1017], "n_samples_2": [342, 1017], "n_samples_a": [793, 794], "n_samples_fit": [431, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 689, 838, 839, 847, 848, 849, 851, 853, 855, 856, 857, 863, 906, 908, 911, 914, 916], "n_samples_fit_": [290, 847, 848, 849, 851, 853, 855, 856, 857], "n_samples_i": [613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782], "n_samples_per_cent": 94, "n_samples_rang": [110, 243], "n_samples_seen": 885, "n_samples_seen_": [535, 874, 875, 885, 1041], "n_samples_test": [283, 907, 908, 909, 910, 911, 1005, 1012], "n_samples_train": [283, 907, 908, 909, 910, 911], "n_samples_transform": [290, 849, 857], "n_samples_x": [612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782], "n_seed": 461, "n_selected_featur": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "n_skips_": 1040, "n_skips_invalid_data_": 672, "n_skips_invalid_model_": 672, "n_skips_no_inliers_": 672, "n_spline": [43, 884], "n_split": [43, 52, 140, 145, 149, 181, 182, 186, 257, 265, 270, 272, 275, 280, 284, 287, 326, 332, 340, 347, 359, 412, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 828, 1039, 1041, 1051], "n_splits_": [801, 804, 805, 815], "n_steps_": [123, 449, 538, 539, 1046], "n_subpopulation_": 680, "n_subsampl": [680, 937], "n_subsets_of_featur": 595, "n_support_": [907, 908, 909, 910, 911, 1017, 1043], "n_support_vector": 46, "n_sv": [907, 908, 909, 910, 911, 1017, 1043], "n_svd_vec": [451, 453], "n_t": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "n_t_l": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "n_t_r": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "n_target": [390, 411, 482, 483, 484, 485, 525, 557, 612, 644, 647, 648, 651, 652, 653, 654, 655, 657, 658, 661, 662, 663, 664, 665, 666, 672, 673, 674, 675, 676, 682, 685, 686, 687, 688, 1003, 1045, 1047, 1049], "n_task": [207, 998], "n_test": [47, 49, 69, 137, 270, 1033, 1036], "n_test_docu": 47, "n_test_po": 47, "n_threshold": [636, 728, 783, 790], "n_tick": [807, 824, 829, 832], "n_top": 278, "n_top_word": 54, "n_topic": [381, 537, 1040], "n_tot": 700, "n_total_sampl": [329, 330], "n_train": [47, 49, 69, 137, 270, 1033, 1036], "n_train_po": 47, "n_transformed_featur": 865, "n_tree": 46, "n_trees_per_iter": 562, "n_trees_per_iteration_": [560, 561, 562, 563], "n_trials_": 672, "n_uncorrelated_featur": 276, "n_unequ": 700, "n_unique_categori": 316, "n_unique_label": [730, 731, 739, 784, 785, 788, 965], "n_unique_tick": [807, 829], "n_valu": [824, 832, 1041], "n_values_": 1041, "n_values_feature_j": 634, "n_x": [87, 586], "n_y": [87, 586, 1004, 1012], "n_z": 586, "na": [628, 629, 630, 631, 770, 779, 929, 931, 932, 1043, 1044, 1047, 1048, 1049, 1050], "nabarun": 1041, "nabla": 1006, "nabsolut": 218, "nacross": 284, "nada": 57, "nadeau": [270, 1041], "nadia": 1045, "nadim": 1046, "nadirhan": 1047, "nadya": 1039, "nagarajan": [646, 998], "nagarjuna": [1040, 1041], "nagasaka": 1046, "naghshhnejad": [1043, 1044], "naipawat": [1047, 1048], "naiv": [2, 32, 64, 67, 152, 270, 272, 289, 351, 353, 371, 406, 415, 416, 437, 545, 840, 841, 842, 843, 844, 996, 997, 1005, 1010, 1024, 1028, 1033, 1034, 1035, 1036, 1041, 1043, 1046, 1048], "naive_bay": [2, 47, 61, 62, 64, 67, 152, 156, 271, 272, 351, 359, 365, 371, 415, 437, 570, 840, 841, 842, 843, 844, 866, 996, 1003, 1004, 1034, 1035, 1037, 1038, 1039, 1040], "naive_linear_pipelin": 43, "naive_linear_predict": 43, "naivebay": 365, "naivebayesna": 396, "naivelycalibratedlinearsvc": [62, 64], "najera": 1040, "najork": [727, 757, 1002], "naka": 1046, "nakamura": 1047, "nakano": [1040, 1041], "nalepa": 1040, "naman": 1050, "name": [2, 43, 45, 46, 48, 49, 50, 51, 55, 57, 62, 64, 66, 67, 72, 79, 91, 95, 103, 105, 107, 113, 121, 126, 137, 138, 139, 140, 143, 146, 149, 154, 186, 187, 188, 202, 210, 212, 214, 216, 218, 219, 227, 229, 230, 232, 233, 239, 245, 246, 248, 249, 253, 257, 264, 265, 267, 268, 271, 273, 274, 277, 279, 280, 284, 287, 290, 298, 299, 305, 306, 312, 314, 316, 323, 324, 327, 333, 345, 351, 352, 353, 364, 365, 370, 371, 374, 376, 378, 380, 381, 383, 384, 390, 394, 399, 405, 408, 412, 415, 416, 418, 422, 424, 429, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 698, 699, 700, 701, 703, 709, 710, 712, 714, 733, 734, 743, 780, 781, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 813, 815, 819, 823, 824, 828, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 930, 931, 932, 935, 940, 941, 942, 944, 957, 958, 959, 961, 964, 971, 985, 989, 990, 991, 996, 998, 1002, 1003, 1009, 1010, 1012, 1018, 1022, 1033, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "name_to_color": 316, "named_estim": [568, 569, 570, 571], "named_estimators_": [568, 569, 570, 571, 1041, 1043], "named_step": [105, 116, 166, 409, 594, 595, 598, 865, 866, 905, 906, 998, 1040, 1042], "named_transform": [864, 1048], "named_transformers_": 464, "namedtupl": [2, 618, 1049], "namespac": 404, "namiya": 1040, "nan": [2, 107, 143, 149, 181, 182, 186, 230, 249, 251, 253, 265, 273, 316, 319, 324, 325, 326, 327, 363, 368, 385, 390, 415, 446, 468, 497, 556, 557, 558, 562, 563, 565, 594, 595, 598, 604, 607, 610, 628, 629, 630, 631, 636, 713, 714, 715, 717, 722, 723, 724, 725, 729, 730, 731, 770, 779, 784, 785, 786, 788, 801, 804, 805, 807, 815, 824, 827, 828, 829, 832, 874, 875, 879, 881, 882, 885, 886, 890, 893, 894, 896, 922, 929, 930, 931, 932, 976, 991, 1002, 1012, 1018, 1028, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050], "nan_euclidean": [629, 763, 779], "nan_euclidean_dist": [2, 319, 763, 992, 1043], "nandana": [1039, 1040, 1041], "nanshan": 1046, "nanta": 1036, "nanxin": 1041, "nanyang": 373, "naois": [1048, 1050], "naoki": [1035, 1045], "naoya": [1039, 1040, 1041, 1042], "naozin555": 1046, "napa": 316, "narasimhan": 852, "nardelli": 1036, "narendra": [1044, 1050], "narendramukherje": 1044, "narendran": 1041, "narin": [1040, 1041], "narinek": [1040, 1041], "narr": [376, 390, 659, 905, 910, 1033, 1034], "narrai": 595, "narrow": [52, 137, 146, 310, 312, 381, 845, 846], "nartayxd": 1047, "nasa": [102, 351, 352, 373], "nasdaq": 51, "naser": 1043, "nasir": 1041, "nass": 1048, "nastegiano": 1047, "nat": [608, 609, 705, 756, 758, 1047], "natasha": 1043, "natchiappan": [1046, 1047], "nate": [1039, 1040, 1046], "nath": 1041, "nathan": [536, 1041, 1045, 1048, 1051], "nathaniel": [1040, 1041, 1043], "nathansquan": 1047, "nati": 1048, "nation": [50, 111, 303, 371, 852], "nativ": [43, 149, 153, 175, 181, 264, 364, 371, 390, 402, 415, 497, 562, 563, 837, 838, 998, 1002, 1003, 1021, 1043, 1045], "native_result": 143, "natl": [690, 694, 999], "natur": [43, 64, 67, 140, 146, 177, 186, 187, 191, 198, 212, 213, 229, 230, 236, 249, 255, 261, 279, 289, 351, 376, 378, 390, 413, 415, 416, 419, 444, 450, 457, 552, 591, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 693, 705, 742, 756, 758, 847, 848, 849, 851, 853, 855, 856, 857, 884, 947, 998, 999, 1001, 1002, 1005, 1007, 1012, 1016, 1021, 1033, 1041], "naul": [1038, 1039], "nav": 51, "navarret": [1041, 1042, 1043], "navarro": 1048, "navi": [69, 102, 110, 124, 128, 129, 153, 193, 215, 223, 235, 256, 257, 258, 261, 277, 279, 295, 302, 331], "navig": [384, 1035], "navin": 901, "navistar": 51, "navkal": 1041, "navractil": 1002, "navratil2007": 1002, "nawazish": [1048, 1049], "naziya": 1051, "nb": [47, 127, 152, 359, 842, 1004], "nbclaim": 230, "nber": 49, "nbr": [853, 1005], "nbrown": 1051, "nbrs_": [689, 690], "nbsp": [146, 202], "nbviewer": [51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358], "nbyte": [86, 243], "nca": [233, 298, 299, 300, 854, 1005], "nca_pip": 1005, "ncall": 382, "ncanip": 854, "nclass": 265, "ncluster": 79, "ncol": [43, 44, 52, 66, 68, 70, 86, 90, 99, 120, 125, 130, 144, 187, 209, 212, 213, 214, 220, 230, 232, 233, 242, 249, 264, 266, 272, 273, 281, 283, 284, 290, 293, 306, 311, 312, 314, 315, 324, 346, 347, 352, 372], "ncorrect": 270, "ncsu": [168, 373], "ncv": [451, 453], "nd": [1046, 1050], "ndarrai": [86, 91, 212, 253, 268, 269, 270, 376, 377, 378, 382, 383, 404, 416, 419, 420, 423, 424, 426, 429, 430, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 498, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 716, 719, 722, 723, 724, 725, 728, 729, 739, 746, 747, 749, 752, 754, 755, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 790, 791, 792, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 928, 929, 930, 931, 936, 937, 946, 948, 949, 950, 951, 956, 963, 965, 966, 970, 973, 974, 976, 977, 978, 979, 982, 987, 988, 990, 1002, 1017, 1022, 1036, 1040, 1043, 1044, 1047, 1048, 1049, 1050], "ndata": 276, "ndataset": [227, 312], "ndbscan": 98, "ndcg": [727, 757, 1002, 1040], "ndcg_score": [2, 727, 1002, 1040, 1043, 1048, 1049], "ndenumer": 224, "ndepend": 187, "ndim": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 931, 932], "ndimag": [53, 80, 81, 87, 308], "ndingwal": 1040, "ndirangu": [1043, 1047], "ne": [1002, 1005], "neal": [998, 1046], "near_uniqu": 317, "nearbi": [408, 1005], "nearer": [2, 849, 857, 1005], "nearest": [2, 33, 51, 53, 67, 68, 74, 75, 83, 84, 87, 91, 94, 99, 104, 109, 113, 120, 123, 150, 160, 174, 182, 195, 204, 224, 228, 234, 237, 248, 249, 263, 273, 294, 296, 299, 300, 307, 308, 315, 340, 345, 349, 368, 373, 385, 388, 390, 408, 414, 415, 419, 422, 432, 444, 446, 448, 450, 452, 457, 461, 462, 497, 503, 505, 608, 609, 628, 629, 631, 632, 636, 689, 690, 692, 693, 697, 793, 794, 801, 831, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 865, 866, 870, 885, 975, 999, 1008, 1017, 1022, 1023, 1024, 1028, 1033, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1045], "nearest_neighbor": [79, 452, 692], "nearest_neighbor_algorithm": [847, 855, 856], "nearest_neighbors_algorithm": [848, 853], "nearestcentroid": [2, 301, 351, 1003, 1005, 1033, 1037, 1040, 1045, 1048], "nearestneighbor": [2, 290, 323, 394, 408, 419, 444, 446, 448, 461, 689, 690, 694, 847, 848, 849, 851, 855, 856, 857, 1005, 1033, 1037, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "nearli": [37, 62, 273, 371, 390, 765, 1002, 1005, 1014], "neat": 1033, "necess": [999, 1005], "necessari": [46, 53, 138, 198, 212, 217, 255, 264, 270, 271, 277, 292, 344, 363, 371, 374, 375, 376, 377, 378, 379, 380, 384, 388, 408, 410, 415, 452, 462, 488, 489, 491, 493, 494, 495, 496, 498, 535, 645, 646, 647, 653, 657, 658, 661, 662, 663, 664, 665, 666, 672, 674, 676, 677, 692, 696, 796, 868, 877, 888, 892, 898, 991, 994, 998, 1001, 1004, 1012, 1018, 1033, 1041], "necessarili": [43, 67, 104, 123, 186, 212, 220, 230, 244, 245, 256, 277, 312, 351, 352, 370, 402, 404, 406, 408, 415, 628, 853, 855, 856, 857, 996, 999, 1001, 1002], "need": [0, 30, 43, 48, 51, 68, 80, 86, 88, 90, 113, 122, 132, 140, 143, 145, 146, 147, 149, 154, 168, 170, 175, 181, 182, 186, 200, 214, 229, 230, 233, 239, 242, 244, 246, 249, 250, 255, 256, 260, 261, 264, 268, 270, 272, 273, 275, 287, 289, 290, 292, 315, 319, 326, 332, 340, 351, 352, 357, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 389, 390, 391, 393, 394, 399, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 424, 437, 441, 445, 449, 464, 465, 467, 504, 542, 552, 573, 583, 584, 589, 590, 591, 592, 628, 636, 639, 640, 641, 643, 650, 667, 669, 672, 677, 680, 693, 712, 721, 722, 723, 724, 725, 782, 786, 798, 799, 801, 804, 805, 815, 816, 817, 826, 834, 837, 845, 846, 862, 865, 868, 872, 877, 878, 882, 900, 907, 910, 922, 958, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1015, 1016, 1017, 1018, 1022, 1026, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "needl": [168, 373], "needs_proba": [1042, 1050], "needs_threshold": 1050, "neeraj": 1040, "neg": [2, 42, 43, 45, 61, 93, 107, 109, 116, 140, 145, 146, 151, 183, 185, 186, 192, 203, 209, 210, 212, 230, 259, 260, 264, 267, 270, 273, 277, 279, 280, 284, 290, 310, 314, 323, 327, 351, 382, 390, 391, 408, 412, 415, 416, 417, 419, 420, 431, 440, 444, 452, 465, 469, 482, 483, 484, 488, 532, 534, 536, 537, 538, 539, 541, 543, 545, 548, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 589, 592, 593, 596, 597, 599, 600, 601, 603, 605, 606, 607, 608, 609, 610, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 678, 679, 680, 681, 688, 699, 700, 705, 706, 713, 714, 716, 717, 719, 720, 722, 723, 724, 725, 728, 730, 731, 732, 736, 739, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 783, 784, 785, 786, 788, 791, 792, 794, 798, 799, 807, 824, 826, 831, 838, 839, 848, 851, 856, 863, 872, 881, 883, 884, 889, 893, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 932, 947, 949, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1016, 1017, 1023, 1027, 1028, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "neg_": [807, 824, 1039], "neg_brier_scor": [1002, 1043], "neg_label": [264, 284, 872, 889], "neg_log_loss": [64, 264, 1002], "neg_lr": 273, "neg_lr_bas": 273, "neg_lr_base_std": 273, "neg_max_error": 1002, "neg_mean_absolute_error": [43, 154, 214, 1002], "neg_mean_absolute_percentage_error": [52, 143, 1002, 1010], "neg_mean_gamma_devi": 1002, "neg_mean_pinball_loss_05p_scor": 146, "neg_mean_pinball_loss_95p_scor": 146, "neg_mean_poisson_devi": 1002, "neg_mean_squared_error": [181, 182, 214, 245, 285, 326, 828, 1002, 1010, 1039], "neg_mean_squared_log_error": 1002, "neg_median_absolute_error": 1002, "neg_root_mean_squared_error": [43, 149, 316, 1002], "neg_root_mean_squared_log_error": 1002, "neg_root_mean_squared_log_error_scor": 1050, "negat": [390, 807, 824, 1002], "negate_scor": [245, 807, 824], "negative_class": 713, "negative_likelihood_ratio": [273, 713], "negative_linestyl": 239, "negative_loglik": 109, "negative_mahal_dist": 469, "negative_outlier_factor": 851, "negative_outlier_factor_": [249, 297, 851, 1008], "neglig": [186, 1005, 1036, 1050], "neigh": [782, 847, 848, 849, 851, 853, 855, 856, 857], "neigh_dist": [847, 848, 849, 851, 853, 855, 856, 857], "neigh_ind": [847, 848, 849, 851, 853, 855, 856, 857], "neighbor": [2, 51, 67, 74, 79, 81, 93, 99, 104, 149, 150, 152, 155, 160, 181, 182, 195, 233, 234, 236, 237, 239, 248, 249, 263, 273, 294, 295, 296, 297, 299, 300, 301, 303, 307, 321, 323, 324, 351, 368, 373, 385, 388, 390, 394, 408, 414, 415, 416, 419, 422, 432, 441, 444, 445, 446, 448, 450, 452, 457, 458, 461, 463, 497, 503, 505, 564, 571, 603, 608, 609, 628, 629, 632, 689, 690, 691, 692, 693, 694, 696, 697, 782, 801, 831, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 866, 885, 901, 909, 975, 1003, 1008, 1022, 1023, 1024, 1027, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040], "neighbor_feat_idx": 628, "neighborhood": [2, 88, 113, 128, 160, 183, 232, 290, 291, 292, 293, 301, 302, 373, 390, 408, 413, 419, 444, 450, 457, 503, 505, 516, 542, 550, 629, 632, 697, 831, 847, 848, 851, 853, 854, 855, 856, 857, 859, 865, 866, 885, 999, 1008, 1023, 1024, 1028, 1042], "neighborhoodcomponentanalysi": 299, "neighborhoodcomponentsanalysi": [2, 233, 298, 299, 300, 1005, 1042, 1047, 1051], "neighbors_algorithm": [689, 690], "neighborsbas": [1045, 1048], "neighborsclassifi": [853, 855, 856, 857, 1033], "neighborsregressor": 1033, "neighbour": [446, 462, 693, 1007], "neighbourhood": [854, 1005], "neighbourhood_components_analysi": 854, "neil": 1045, "neill": 1045, "neither": [182, 186, 319, 351, 359, 388, 406, 437, 595, 629, 935, 1005, 1018], "nelder": 998, "nell": [0, 397, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1045], "nelson": [0, 1039, 1040, 1045, 1051], "nemour": 51, "neo": 1041, "nep": 1043, "neptun": 1021, "neq": [408, 1002, 1004, 1012], "ness": [182, 230], "nest": [125, 134, 183, 202, 246, 262, 264, 265, 287, 326, 364, 382, 390, 394, 408, 412, 418, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 462, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 505, 520, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 806, 815, 823, 827, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 1002, 1005, 1023, 1033, 1034, 1037, 1039, 1040, 1041, 1047], "nested_lin": 275, "nested_scor": 275, "nesterov": [306, 862, 863, 1006, 1049, 1050], "nesterovs_momentum": [306, 862, 863], "nestor": 1048, "net": [2, 25, 67, 183, 192, 198, 199, 202, 204, 207, 223, 246, 283, 382, 412, 471, 472, 478, 502, 525, 558, 559, 560, 561, 565, 566, 567, 647, 648, 653, 658, 659, 660, 661, 662, 663, 664, 669, 677, 679, 682, 683, 685, 861, 913, 914, 915, 916, 991, 1002, 1007, 1016, 1023, 1024, 1026, 1028, 1033, 1038, 1042, 1043, 1045], "netbsd": 1033, "neto": [591, 731, 1051], "nettei": 1046, "network": [34, 45, 249, 307, 363, 364, 365, 370, 371, 380, 390, 391, 402, 408, 413, 415, 420, 497, 534, 536, 568, 569, 697, 742, 862, 863, 998, 1000, 1002, 1016, 1018, 1021, 1024, 1027, 1028, 1033, 1047, 1051], "networkx": [55, 385], "neural": [34, 44, 45, 67, 270, 307, 390, 402, 412, 413, 415, 420, 534, 536, 539, 541, 548, 568, 569, 640, 646, 697, 742, 798, 854, 861, 862, 863, 871, 994, 998, 999, 1000, 1002, 1005, 1008, 1012, 1016, 1018, 1021, 1024, 1026, 1027, 1028, 1033, 1045], "neural_network": [2, 67, 183, 187, 250, 304, 305, 306, 307, 308, 365, 388, 861, 862, 863, 1003, 1006, 1023, 1035, 1050], "neuro": 1021, "neurodebian": 0, "neuroimag": [1020, 1026], "neuron": [862, 863, 1000, 1006], "neutral": 717, "nevalu": 154, "never": [140, 247, 327, 359, 376, 385, 388, 402, 407, 408, 409, 411, 412, 450, 457, 524, 556, 557, 558, 565, 865, 866, 990, 994, 1012, 1043, 1046], "nevertheless": [43, 189, 415], "new": [2, 43, 46, 47, 49, 83, 89, 91, 93, 102, 103, 126, 127, 134, 136, 138, 139, 140, 144, 146, 149, 153, 154, 165, 168, 170, 176, 182, 188, 189, 212, 218, 226, 239, 246, 253, 264, 269, 272, 277, 289, 294, 296, 316, 320, 323, 326, 327, 330, 333, 339, 344, 359, 364, 365, 370, 371, 373, 374, 375, 378, 379, 380, 382, 384, 385, 389, 390, 391, 394, 402, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 433, 437, 438, 440, 442, 443, 445, 447, 448, 449, 452, 462, 463, 464, 472, 482, 483, 484, 505, 509, 510, 535, 542, 545, 556, 557, 558, 559, 564, 565, 566, 567, 582, 603, 631, 632, 636, 641, 642, 643, 646, 647, 653, 689, 690, 691, 698, 699, 701, 702, 703, 789, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 835, 851, 874, 875, 880, 881, 882, 884, 885, 886, 893, 894, 902, 920, 929, 934, 971, 976, 991, 992, 994, 998, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1014, 1015, 1016, 1017, 1022, 1026, 1028, 1031, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "new_data": [294, 378], "new_valu": [568, 569, 570, 571], "newaxi": [51, 53, 57, 61, 77, 113, 129, 135, 171, 195, 203, 213, 214, 215, 217, 218, 229, 242, 244, 285, 295, 302, 357, 405, 537, 998], "newei": 1041, "newer": [170, 375, 394, 413], "newgroups20": 227, "newli": [374, 389, 415, 463, 1009, 1039, 1040, 1048], "newsgroup": [2, 46, 54, 57, 243, 271, 333, 352, 353, 369, 405, 416, 488, 489, 1028], "newsgroups_test": 371, "newsgroups_train": [371, 488], "newsgroups_vector": 489, "newsl": [886, 1012], "newslett": 370, "newswir": 371, "newton": [212, 230, 308, 611, 649, 659, 660, 670, 681, 862, 863, 998, 1037, 1038, 1040, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "newton_cg": 1043, "next": [46, 62, 93, 111, 142, 143, 147, 157, 177, 185, 189, 206, 212, 240, 246, 248, 252, 253, 257, 265, 276, 289, 315, 316, 317, 321, 330, 351, 355, 358, 359, 374, 376, 378, 380, 396, 402, 405, 408, 409, 412, 415, 509, 510, 611, 635, 693, 699, 701, 703, 782, 798, 799, 831, 967, 991, 995, 1001, 1002, 1012, 1026, 1030, 1033, 1046, 1047], "nezar": 1043, "nff": 700, "nfit": 330, "nfkd": [589, 590, 592, 1043], "nfor": 247, "nfrom": 175, "nft": 700, "ng": [408, 413, 692, 851, 1006, 1008, 1044], "ngiam": 1006, "ngo": 1045, "ngram_rang": [271, 333, 416, 589, 590, 592], "ngram_vector": 416, "ngroup": 265, "ngshya": 1044, "nguyen": [1043, 1044, 1047, 1048], "nguy\u1ec5n": 1048, "ni": [1039, 1044], "nic": 1046, "nice": [43, 100, 213, 246, 310, 363, 413], "nicer": 632, "nichol": 1037, "nichola": [1041, 1042, 1044], "nicholson": [1039, 1040, 1041], "nick": [168, 373, 1033, 1039, 1040, 1041, 1042], "nicki": 1047, "nickledav": 1039, "nicknam": 371, "nico": [1039, 1046], "nicol": 1040, "nicola": [0, 168, 397, 659, 998, 1015, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "nicolashug": 1042, "nicolasservel": 1044, "nicolau": 1041, "nicula": [0, 120, 397, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042], "niculescu": [62, 64, 406, 437, 439], "nidhin": 1043, "niederb\u00fchl": 1041, "niederhut": [1041, 1043], "nielsen": [744, 1041], "nielsenmarkus11": [1040, 1041], "nigam": [840, 1004], "nigel": 1046, "night": 52, "nightli": [0, 364, 379, 380], "nightwalkx": 1049, "nihal": 1048, "nihar": 1041, "niket": 1047, "nikhil": 1047, "nikita": [1040, 1041, 1043, 1046, 1047, 1048], "nikla": [1043, 1044], "nikolai": [1036, 1037, 1038, 1039, 1041, 1042, 1047, 1049], "nil": 1045, "nilearn": 1021, "nilesh": 1041, "nilotp": [636, 638], "nima": 1048, "nima10khodaveisi": 1048, "ninertia": 97, "ningchi": 1039, "ninh": 191, "ninja": [374, 1026], "nip": [127, 373, 516, 542, 567, 642, 1002], "nipal": [411, 483, 484], "nipy_spectr": [51, 74, 80, 81, 84, 85, 93, 94], "nirvan": [1041, 1045], "nishan": 1043, "nishihara": 1045, "nishu": 1049, "nist": [373, 1002], "nistir": 373, "nit": 376, "nithish": 1051, "nitinramvelraj": 1048, "nitish": 1040, "nitya": 1043, "niuk": 1049, "niyogi": 999, "nizam": 1041, "nizhibitski": 1034, "nk": 697, "nkish": 1044, "nkmean": 79, "nl": [52, 382], "nl1_ratio": 204, "nlasso": 198, "nlathia": 1039, "nlearn": 306, "nlog": 176, "nlogn": 693, "nlp": [371, 413, 416, 840, 844, 1000, 1026], "nls_max_it": 1038, "nltk": [416, 1020, 1021], "nm": 363, "nmcd": 111, "nmd": 235, "nmean": 124, "nmf": [2, 11, 54, 104, 382, 416, 536, 539, 545, 548, 1027, 1028, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "nmf_estim": 120, "nmi": [72, 408, 718, 737, 738, 758], "nmixtur": 79, "nmle": 111, "nmse": [44, 285], "nmslib": 290, "nmslib_": 290, "nmslibtransform": 290, "nn": [248, 416, 696], "nn_candid": 282, "nn_compon": [243, 244], "nn_sampl": [243, 282], "nndsvd": [413, 539, 541, 548, 1042, 1045], "nndsvda": [54, 413, 539, 541, 548, 1042, 1045], "nndsvdar": [413, 539, 541, 548, 1042], "nneq": 700, "nnl": [208, 658], "nnlnr": [1048, 1049], "nnmf": [416, 1027, 1028, 1033], "nntp": [351, 371], "nnz": [199, 352, 371, 700], "no_chang": 902, "no_interact": [562, 563, 1048], "no_mathjax": 376, "no_structur": [79, 95], "no_valid": [924, 990], "no_weight": 225, "no_weights_handl": 225, "noa": [1044, 1050], "noah": 998, "noc": 51, "noced": 659, "nodar": 1046, "node": [2, 51, 76, 143, 147, 198, 319, 325, 326, 355, 358, 384, 385, 408, 410, 413, 415, 441, 442, 445, 463, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 651, 655, 657, 683, 684, 693, 845, 846, 913, 914, 915, 916, 917, 919, 955, 1005, 1007, 1008, 1009, 1018, 1036, 1037, 1038, 1039, 1040, 1042, 1045, 1046, 1047, 1048, 1050], "node_count": [319, 355, 358, 913, 914, 915, 916], "node_depth": 358, "node_id": [358, 917, 919], "node_idx": 358, "node_ind": 358, "node_index": 358, "node_position_model": 51, "noel": [0, 398, 1033, 1034, 1035, 1036, 1037, 1045], "noelano": 1045, "nof": 150, "nogil": 377, "noinfo": 249, "noir": 316, "nois": [44, 49, 53, 58, 59, 64, 67, 69, 75, 79, 82, 85, 87, 88, 94, 95, 100, 107, 116, 120, 121, 123, 125, 127, 135, 137, 146, 151, 152, 169, 170, 171, 175, 179, 183, 193, 195, 196, 198, 202, 203, 208, 210, 211, 214, 215, 216, 217, 229, 235, 237, 239, 241, 242, 245, 270, 278, 283, 285, 302, 305, 306, 312, 317, 320, 326, 346, 357, 359, 372, 378, 381, 406, 408, 413, 415, 417, 418, 419, 444, 446, 452, 512, 514, 515, 516, 517, 518, 519, 523, 525, 526, 531, 533, 535, 542, 607, 608, 609, 610, 612, 614, 615, 616, 617, 618, 622, 623, 625, 626, 645, 646, 650, 651, 652, 654, 655, 656, 657, 664, 665, 666, 672, 680, 686, 687, 693, 882, 894, 900, 923, 995, 997, 998, 999, 1002, 1005, 1015, 1023, 1034, 1039, 1044, 1046, 1047], "noise_coef": 87, "noise_kernel": 175, "noise_level": [170, 175, 176, 613, 626], "noise_level_bound": [175, 176, 626], "noise_level_grid": 176, "noise_std": 177, "noise_vari": [200, 533, 657, 998, 1047], "noise_variance_": [120, 200, 533, 535, 542, 657, 1040, 1047], "noise_variance_init": 533, "noiseless": [123, 1000], "noisi": [44, 69, 82, 88, 95, 121, 134, 164, 170, 176, 198, 211, 214, 235, 242, 261, 271, 277, 279, 280, 283, 315, 357, 359, 408, 416, 418, 419, 444, 446, 450, 522, 525, 949, 997, 999, 1005, 1017], "noisier": 999, "noisili": 187, "noisy_circl": [79, 95], "noisy_moon": [79, 95], "noiz": 115, "nolan": 1050, "noll": [212, 230], "nomenclatur": [998, 1039], "nomin": [187, 370, 390, 391, 415, 416, 582, 583, 717, 1012, 1022], "non": [0, 2, 25, 42, 44, 45, 48, 49, 52, 53, 61, 62, 64, 69, 70, 72, 82, 90, 95, 103, 107, 111, 113, 121, 122, 123, 125, 136, 143, 151, 152, 154, 164, 165, 167, 174, 176, 182, 183, 185, 186, 187, 188, 189, 192, 193, 198, 199, 201, 203, 206, 207, 209, 210, 211, 213, 214, 218, 226, 227, 228, 230, 235, 236, 240, 241, 242, 243, 245, 249, 255, 257, 261, 262, 263, 264, 265, 270, 279, 287, 290, 294, 296, 308, 310, 312, 314, 315, 320, 321, 322, 323, 325, 326, 333, 335, 337, 342, 343, 344, 347, 348, 351, 352, 353, 358, 359, 363, 364, 368, 371, 372, 376, 377, 378, 381, 382, 384, 385, 388, 390, 391, 402, 406, 408, 409, 412, 414, 415, 416, 417, 418, 420, 437, 441, 445, 446, 450, 452, 456, 462, 463, 464, 465, 467, 468, 488, 497, 498, 504, 505, 509, 527, 533, 536, 537, 539, 541, 545, 548, 550, 552, 553, 554, 558, 559, 560, 561, 562, 563, 565, 566, 567, 573, 589, 590, 592, 593, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 631, 632, 636, 639, 644, 651, 653, 658, 659, 660, 661, 665, 666, 667, 668, 669, 670, 673, 677, 678, 679, 686, 687, 688, 689, 690, 691, 692, 693, 695, 699, 700, 703, 707, 708, 713, 716, 718, 720, 721, 727, 728, 729, 736, 738, 740, 741, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 759, 760, 779, 783, 786, 789, 790, 791, 792, 795, 798, 799, 801, 802, 806, 808, 809, 810, 811, 813, 819, 827, 831, 834, 853, 855, 856, 857, 860, 865, 866, 868, 869, 870, 873, 877, 878, 879, 880, 881, 882, 884, 885, 892, 893, 894, 895, 896, 898, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 930, 931, 932, 947, 949, 953, 956, 964, 991, 992, 993, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1023, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "non_determinist": [378, 924, 1047], "non_neg": [583, 1040], "non_negative_factor": [2, 1042, 1044, 1045, 1046, 1050], "non_nest": 275, "non_nested_scor": 275, "non_nested_scores_lin": 275, "non_noisy_label": 325, "non_outliers_mask": 310, "non_zero": [46, 51], "nonblasdotwarn": 1045, "none": [43, 47, 48, 49, 52, 55, 63, 66, 69, 74, 76, 77, 79, 85, 87, 88, 89, 95, 122, 125, 129, 138, 142, 143, 145, 148, 149, 161, 168, 171, 177, 178, 189, 193, 212, 213, 220, 223, 230, 232, 245, 246, 247, 249, 263, 265, 270, 271, 282, 295, 297, 301, 314, 317, 321, 322, 330, 333, 338, 340, 341, 344, 345, 346, 351, 352, 371, 372, 373, 376, 378, 383, 385, 390, 399, 402, 408, 412, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 701, 702, 703, 704, 708, 709, 710, 712, 713, 714, 715, 717, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 735, 736, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 924, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 941, 943, 948, 949, 952, 953, 955, 956, 960, 961, 964, 967, 970, 972, 975, 976, 982, 985, 986, 988, 990, 991, 998, 1002, 1012, 1015, 1018, 1028, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "nonecheck": 377, "nonetheless": [390, 1002], "nonexist": 633, "nonflavanoid": 373, "nonlinear": [285, 322, 645, 689, 690, 694, 697, 871, 998, 999, 1007, 1012], "nonmetr": [691, 695, 999], "nonneg": [408, 413, 453, 539, 541, 548, 882], "nonner": 1044, "nono": 396, "nonoclusteringclusteringkmeanskmeansyesyesspectralclusteringspectr": 396, "nonoisomapisomapspectralembeddingspectr": 396, "nonojustlookingjust": 396, "nonolassolassoelasticnetelasticnetyesyesridgeregressionridgeregressionsvr": 396, "nonolinearsvclinear": 396, "nonononoyesyesmeanshiftmeanshiftvbgmmvbgmmyesyesminibatchkmeansminibatch": 396, "nonopredict": 396, "nonopredictingstructurepredict": 396, "nonosvcsvcensembleclassifiersensembl": 396, "nonosvr": 396, "nonotoughlucktough": 396, "nonoverlap": 373, "nonparametr": [417, 418, 608, 609], "nonzero": [55, 57, 129, 211, 243, 274, 353, 405, 419, 444, 524, 525, 532, 538, 543, 549, 589, 592, 686, 687, 700, 847, 848, 851, 853, 855, 856, 1002], "nonzero_coef": 998, "noptic": 98, "noptimum": 176, "noqa": [100, 126, 146, 168, 181, 182, 187, 232, 234, 281, 282, 321, 351, 380, 580, 581, 628, 804, 805, 991, 1042], "nor": [146, 273, 351, 359, 363, 381, 388, 406, 416, 437, 446, 595, 935, 1006, 1018, 1044], "norbert": [0, 366, 1035, 1045, 1046, 1047], "nordbi": 1050, "nore\u00f1a": 1046, "norm": [2, 51, 53, 54, 55, 66, 70, 75, 87, 123, 173, 176, 193, 198, 199, 204, 235, 255, 256, 257, 259, 261, 267, 271, 295, 310, 340, 352, 382, 385, 390, 408, 416, 417, 442, 443, 447, 459, 460, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 489, 532, 535, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 590, 591, 592, 598, 644, 647, 648, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 673, 675, 677, 679, 682, 685, 686, 687, 691, 693, 694, 695, 771, 842, 877, 892, 905, 907, 910, 983, 984, 995, 998, 1000, 1002, 1012, 1016, 1036, 1038, 1040, 1044], "norm1": 464, "norm2": 464, "norm_diag": 528, "norm_laplacian": 696, "norm_ord": [598, 1040], "norm_y_weight": 1045, "normal": [2, 25, 36, 44, 49, 51, 55, 57, 58, 63, 65, 70, 72, 75, 79, 80, 90, 94, 95, 99, 105, 107, 109, 110, 111, 115, 116, 121, 134, 135, 137, 140, 145, 146, 149, 150, 151, 163, 173, 176, 177, 182, 183, 185, 186, 192, 193, 194, 195, 196, 198, 203, 206, 208, 210, 214, 215, 216, 218, 226, 230, 235, 249, 255, 260, 261, 263, 264, 267, 270, 276, 295, 296, 299, 309, 311, 315, 320, 323, 326, 327, 332, 340, 352, 353, 359, 368, 371, 372, 373, 376, 381, 385, 389, 390, 404, 405, 406, 408, 409, 411, 414, 415, 416, 420, 440, 449, 451, 452, 453, 462, 464, 465, 475, 482, 483, 484, 489, 497, 513, 516, 520, 527, 528, 534, 537, 542, 543, 545, 549, 550, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 566, 567, 580, 581, 583, 589, 590, 591, 592, 612, 626, 628, 640, 659, 660, 670, 673, 677, 681, 688, 692, 696, 698, 704, 705, 707, 719, 725, 727, 735, 737, 742, 746, 750, 751, 753, 756, 757, 758, 762, 771, 795, 796, 797, 804, 805, 831, 833, 842, 844, 850, 851, 854, 865, 866, 869, 870, 873, 875, 878, 879, 880, 881, 882, 883, 885, 890, 891, 893, 894, 895, 896, 900, 901, 913, 914, 915, 916, 948, 949, 953, 977, 978, 983, 984, 994, 996, 998, 999, 1000, 1001, 1004, 1008, 1013, 1015, 1017, 1018, 1023, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "normalis": [186, 612, 789], "normalization_": [640, 994], "normalize_compon": [1041, 1043], "normalize_i": [175, 179, 418, 612, 1047], "normalized_discounted_cumulative_gain": 757, "normalized_mutual_info_scor": [2, 72, 408, 737, 756, 796, 1002, 1041, 1047], "normalized_stress": [232, 691, 695, 999, 1048], "normalized_weight": 195, "norms_squar": 687, "north": [373, 408], "northern": 316, "northrop": 51, "northwestern": 659, "norvan": 1043, "nose": [373, 1036, 1040], "nosetest": 1035, "not_memb": 186, "notabl": [246, 310, 370, 390, 407, 497, 729, 878, 999, 1001, 1005, 1037, 1040, 1047], "notarstefano": [1041, 1042], "notat": [150, 390, 409, 413, 416, 591, 713, 998, 1002, 1042, 1049], "notch": 1026, "note": [0, 30, 43, 44, 46, 47, 50, 51, 53, 57, 58, 63, 64, 68, 72, 86, 99, 103, 104, 111, 113, 115, 116, 118, 123, 137, 138, 140, 142, 146, 147, 151, 168, 170, 177, 181, 185, 186, 187, 188, 189, 191, 200, 202, 206, 209, 212, 213, 214, 216, 220, 226, 228, 230, 232, 233, 234, 236, 239, 240, 242, 244, 245, 246, 247, 249, 256, 264, 265, 266, 270, 273, 276, 278, 284, 289, 290, 292, 296, 297, 306, 310, 311, 314, 319, 320, 321, 322, 323, 324, 325, 326, 327, 330, 332, 334, 340, 344, 351, 358, 363, 364, 370, 373, 374, 376, 377, 378, 380, 382, 383, 388, 389, 390, 394, 399, 402, 403, 406, 408, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 431, 433, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 490, 497, 499, 510, 516, 520, 528, 531, 534, 535, 539, 540, 541, 542, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 598, 600, 601, 603, 604, 605, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 630, 631, 633, 634, 636, 637, 639, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 696, 697, 700, 701, 708, 709, 714, 716, 721, 722, 723, 724, 725, 729, 730, 731, 733, 735, 739, 742, 747, 755, 756, 759, 764, 765, 769, 771, 775, 779, 783, 784, 785, 786, 788, 789, 790, 793, 794, 795, 797, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 921, 922, 924, 927, 937, 939, 948, 949, 961, 964, 976, 985, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1028, 1031, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "notebook": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 377, 378, 382, 409, 468, 903, 1018, 1020, 1021, 1022, 1044, 1047], "notes_neighbor": 1033, "notfittederror": [2, 132, 390, 854, 985, 1037, 1039, 1042, 1043, 1049, 1050], "noth": [57, 102, 327, 351, 352, 381, 543, 715, 868, 877, 932, 1012], "nothman": [0, 391, 397, 416, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "notic": [46, 52, 62, 63, 70, 86, 90, 111, 137, 139, 140, 146, 149, 167, 193, 198, 239, 252, 267, 268, 270, 271, 273, 279, 280, 290, 315, 344, 351, 352, 353, 359, 378, 381, 391, 407, 412, 415, 497, 542, 564, 991, 1001, 1002, 1008, 1030, 1046], "notif": 380, "notifi": [2, 573, 574, 575, 1031, 1043], "notimplementederror": [554, 555, 892, 1040, 1050], "notin": 408, "notion": [279, 344, 352, 365, 388, 408, 413, 415, 998, 1002], "notmatthancock": [1041, 1043], "noto": 1046, "notplancha": 1051, "noun": 390, "nouri": [363, 1034, 1036], "novak": 1036, "novarti": 51, "novaya": [1043, 1046], "novel": [226, 296, 339, 359, 406, 991], "novelti": [183, 226, 239, 249, 291, 297, 339, 851, 1023, 1024, 1027, 1028, 1033, 1041], "novemb": [168, 212, 230, 373, 380, 1038, 1039, 1041], "novic": 1035, "now": [43, 44, 46, 52, 55, 58, 86, 90, 103, 116, 125, 134, 135, 139, 141, 142, 143, 146, 147, 154, 157, 168, 170, 175, 176, 177, 182, 185, 186, 187, 188, 191, 193, 195, 199, 200, 202, 213, 214, 216, 236, 244, 246, 264, 266, 270, 273, 281, 282, 283, 284, 287, 293, 315, 320, 321, 323, 324, 325, 326, 327, 331, 340, 351, 352, 353, 359, 363, 365, 371, 376, 377, 378, 382, 388, 389, 390, 394, 405, 408, 412, 413, 415, 416, 420, 428, 494, 509, 510, 513, 537, 550, 580, 581, 583, 628, 631, 650, 654, 659, 664, 685, 727, 757, 798, 799, 804, 805, 837, 852, 864, 865, 976, 992, 998, 1002, 1008, 1011, 1012, 1017, 1018, 1022, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "nowadai": 376, "nozawa": [1048, 1049], "np": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 124, 127, 129, 130, 135, 136, 137, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 161, 163, 164, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 251, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 289, 290, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 363, 370, 371, 376, 378, 381, 382, 385, 388, 390, 399, 405, 408, 409, 412, 413, 414, 415, 416, 418, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 494, 497, 498, 501, 505, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 564, 565, 566, 567, 570, 571, 582, 583, 586, 587, 589, 590, 594, 595, 598, 602, 605, 607, 610, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 637, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 688, 692, 693, 695, 696, 700, 703, 704, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 744, 745, 749, 754, 755, 756, 757, 764, 770, 774, 779, 782, 783, 784, 785, 787, 788, 789, 790, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 827, 828, 829, 831, 832, 833, 834, 837, 838, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 853, 855, 856, 857, 861, 862, 869, 870, 872, 873, 878, 879, 880, 881, 882, 884, 885, 886, 893, 894, 897, 898, 899, 900, 901, 902, 905, 907, 908, 910, 911, 913, 914, 915, 916, 922, 927, 928, 929, 930, 931, 932, 934, 936, 937, 947, 948, 949, 955, 956, 963, 964, 966, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 991, 992, 997, 998, 1000, 1002, 1003, 1005, 1006, 1008, 1012, 1013, 1014, 1016, 1017, 1018, 1034, 1036, 1039, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "npach": [1048, 1049], "npo": 235, "npolynomi": 43, "nprior": 255, "npropag": 79, "nqy18": 416, "nreceiv": 279, "nrow": [43, 44, 66, 68, 70, 90, 99, 105, 120, 149, 179, 187, 212, 214, 220, 230, 232, 233, 236, 249, 264, 272, 273, 290, 312, 314, 315, 324, 330, 346, 347, 372], "nsampl": [378, 798, 799], "nswdemand": 149, "nswprice": 149, "nt": 55, "nt_uri": 55, "ntest": 299, "ntf": 700, "nth": [277, 708, 1002], "nthe": [187, 268, 358], "ntime": [50, 281], "nto": [218, 279], "ntol": 168, "ntrain": 83, "ntree": 43, "ntrue": [45, 329, 330], "ntt": 700, "ntu": [191, 370, 487, 509, 510, 659], "ntwo": 372, "nu": [2, 46, 48, 50, 179, 226, 239, 339, 363, 415, 418, 620, 678, 907, 908, 909, 1008, 1016, 1017, 1044, 1048], "nuanc": 390, "nuc": 287, "nuclear": [168, 373], "nuclei": [168, 373], "nudge_dataset": 308, "nuff": 1040, "nugmanov": [1041, 1042], "nuisanc": 418, "nukariya": [1045, 1046], "null": [79, 103, 186, 187, 188, 264, 270, 276, 408, 412, 497, 649, 670, 681, 705, 732, 758, 796, 830, 998, 999, 1002, 1017, 1043], "null_count": 52, "nullabl": [628, 629, 630, 631, 1044, 1048], "nullformatt": [232, 234, 237, 290], "nullloc": 295, "num": [43, 51, 103, 168, 170, 175, 176, 177, 187, 188, 214, 277, 278, 323, 325, 326, 415, 497, 633], "num_col": 253, "num_cor": 382, "num_depend": 264, "num_featur": [1000, 1048], "num_linear_processor": 154, "num_missing_cel": 149, "num_pip": 253, "num_preprocess": 464, "num_proc": [241, 320], "num_sampl": [801, 815, 1048], "num_selector": 154, "num_sent": 102, "num_thread": 290, "num_tree_processor": 154, "num_trial": 275, "numba": [290, 1022], "number": [2, 43, 44, 46, 47, 49, 51, 52, 53, 57, 58, 62, 63, 64, 68, 69, 71, 73, 74, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 90, 94, 95, 96, 100, 102, 103, 104, 105, 107, 113, 115, 116, 118, 120, 122, 124, 125, 127, 134, 135, 137, 140, 142, 144, 145, 146, 147, 150, 154, 156, 164, 165, 166, 168, 178, 179, 182, 183, 186, 187, 191, 198, 202, 211, 212, 213, 214, 219, 220, 226, 227, 228, 229, 230, 232, 239, 243, 247, 249, 250, 255, 256, 258, 260, 261, 263, 264, 265, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 283, 287, 290, 292, 296, 297, 310, 312, 313, 316, 319, 320, 321, 322, 323, 324, 325, 327, 333, 340, 345, 347, 352, 353, 355, 358, 359, 364, 365, 368, 370, 371, 372, 373, 374, 376, 379, 380, 382, 383, 384, 385, 388, 389, 390, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 582, 583, 584, 585, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 702, 704, 705, 706, 708, 713, 714, 715, 717, 719, 721, 725, 729, 730, 731, 732, 735, 736, 739, 741, 753, 756, 775, 779, 782, 783, 784, 785, 786, 787, 788, 789, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 931, 932, 935, 948, 949, 952, 953, 970, 972, 975, 976, 991, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "number_norm": 57, "numbernormalizingvector": 57, "numer": [2, 43, 52, 57, 99, 103, 107, 143, 154, 168, 175, 178, 187, 188, 202, 212, 230, 249, 251, 253, 277, 300, 316, 322, 326, 353, 370, 371, 373, 379, 381, 382, 388, 389, 390, 404, 408, 410, 415, 416, 417, 418, 420, 421, 440, 443, 447, 459, 471, 472, 475, 478, 489, 490, 491, 497, 501, 502, 503, 505, 506, 511, 532, 534, 536, 541, 542, 548, 562, 563, 568, 582, 591, 612, 618, 621, 628, 631, 633, 634, 647, 653, 655, 673, 688, 691, 695, 715, 779, 789, 795, 801, 804, 805, 807, 815, 824, 827, 828, 829, 832, 840, 841, 842, 843, 844, 862, 863, 868, 873, 878, 879, 886, 917, 918, 919, 931, 932, 948, 949, 991, 992, 998, 999, 1003, 1010, 1012, 1013, 1018, 1025, 1026, 1033, 1034, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "numeric_featur": [103, 323], "numeric_onli": 187, "numeric_preprocessor": 251, "numeric_transform": [103, 323], "numerical_column": [186, 188, 467], "numerical_columns_subset": 143, "numerical_featur": [187, 316], "numerical_pip": 188, "numerical_transform": 103, "numfocu": 0, "numpi": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 130, 135, 136, 137, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 159, 161, 163, 164, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 289, 290, 294, 295, 296, 297, 299, 300, 301, 302, 303, 305, 308, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 359, 363, 369, 370, 371, 374, 376, 377, 378, 379, 382, 384, 385, 388, 389, 390, 394, 399, 401, 402, 404, 405, 408, 409, 412, 413, 414, 415, 416, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 485, 490, 494, 495, 497, 504, 507, 509, 510, 522, 528, 532, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 570, 571, 582, 583, 586, 587, 589, 590, 592, 602, 605, 619, 628, 629, 630, 631, 632, 633, 634, 644, 647, 648, 650, 653, 654, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 673, 677, 678, 679, 685, 688, 689, 692, 693, 694, 695, 696, 700, 703, 704, 707, 708, 710, 713, 715, 727, 728, 730, 731, 733, 735, 736, 739, 740, 755, 757, 774, 780, 782, 783, 784, 785, 788, 789, 790, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 828, 831, 832, 833, 834, 837, 838, 840, 841, 842, 843, 844, 845, 846, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 907, 908, 910, 911, 913, 927, 928, 929, 930, 934, 936, 946, 947, 948, 949, 953, 955, 956, 963, 964, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 988, 991, 992, 997, 998, 1000, 1002, 1003, 1005, 1008, 1012, 1014, 1017, 1018, 1020, 1022, 1033, 1036, 1037, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "numpydoc": [376, 390, 394, 401], "nune": 1034, "nuniformli": 150, "nuniqu": 316, "nurseit": 1050, "nusvc": [2, 363, 437, 908, 1003, 1017, 1033, 1034, 1035, 1038, 1041, 1043, 1044, 1045, 1047], "nusvr": [2, 46, 363, 911, 1017, 1035, 1041, 1043, 1044, 1045, 1047, 1048], "nutshel": 1000, "nv": 51, "nvidia": [0, 388], "nvirginica": 279, "nwanna": 1048, "nweight": 156, "nwith": [72, 90, 94, 167, 352], "nx": [50, 303, 371, 499], "nxorabl": 1043, "ny": [50, 52, 269, 303, 371, 373, 499, 992, 1014], "nyc": [1020, 1026], "nymark": 1048, "nystroem": [2, 43, 181, 226, 239, 244, 368, 641, 642, 643, 678, 871, 910, 911, 1028, 1034, 1040, 1043, 1045, 1046, 1047], "nystroem_approx_svm": 244, "nystroem_scor": 244, "nystroem_tim": 244, "nystrom": [880, 1042, 1043], "nystr\u00f6m": [43, 994], "nyu": [0, 854], "nz": 531, "nzw": 1041, "n\u00e1jera": [1037, 1038, 1039, 1040], "n\u00e1pole": 1046, "o": [0, 55, 57, 64, 66, 73, 82, 88, 93, 94, 96, 97, 113, 115, 122, 151, 168, 178, 200, 206, 210, 212, 227, 245, 255, 264, 270, 272, 279, 310, 311, 315, 320, 323, 326, 333, 344, 355, 363, 371, 373, 376, 384, 394, 408, 410, 413, 415, 419, 421, 444, 447, 448, 450, 473, 475, 500, 535, 605, 628, 667, 668, 693, 833, 861, 876, 917, 970, 994, 996, 998, 999, 1002, 1003, 1005, 1006, 1016, 1017, 1018, 1033, 1036, 1039, 1041, 1042, 1045, 1046, 1048, 1049, 1050], "oa": [2, 49, 65, 70, 108, 112, 113, 127, 148, 183, 299, 301, 410, 469, 470, 473, 474, 476, 477, 513, 550, 801, 996, 1023], "oa_ms": 110, "oa_shrinkag": 110, "oak": 316, "oarc": 998, "ob2019": 1002, "obaja": 1037, "obatin": 315, "obei": [390, 1000], "obj": [246, 402, 568, 569, 939, 958, 960, 961, 962, 967], "obj_func": [611, 612], "object": [2, 43, 50, 53, 54, 57, 63, 64, 79, 83, 95, 99, 102, 103, 123, 126, 132, 149, 154, 159, 167, 175, 183, 187, 198, 212, 228, 230, 238, 246, 250, 252, 253, 264, 268, 277, 279, 280, 282, 303, 316, 322, 323, 325, 326, 329, 352, 353, 359, 369, 370, 371, 376, 377, 379, 381, 382, 383, 385, 389, 390, 391, 399, 402, 408, 409, 410, 413, 416, 417, 418, 422, 424, 429, 431, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 712, 719, 733, 734, 743, 759, 760, 782, 783, 790, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 920, 931, 932, 933, 934, 935, 938, 939, 943, 945, 954, 956, 957, 958, 959, 960, 961, 962, 964, 966, 967, 986, 987, 989, 998, 999, 1000, 1001, 1005, 1008, 1009, 1012, 1015, 1016, 1017, 1021, 1022, 1023, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "object_nam": [246, 958, 961], "obozinski": 413, "obscur": [1009, 1049], "observ": [2, 43, 44, 46, 48, 50, 52, 53, 58, 61, 64, 70, 72, 75, 78, 86, 95, 103, 109, 111, 112, 113, 121, 122, 125, 126, 127, 134, 137, 138, 140, 141, 146, 149, 150, 153, 168, 170, 173, 175, 176, 177, 179, 186, 187, 188, 193, 194, 208, 210, 212, 213, 214, 216, 226, 230, 236, 237, 242, 243, 249, 264, 266, 270, 272, 273, 277, 283, 284, 290, 293, 296, 303, 315, 325, 327, 332, 339, 340, 344, 345, 351, 352, 353, 357, 371, 373, 390, 394, 406, 408, 410, 411, 412, 413, 414, 417, 418, 441, 443, 445, 446, 447, 449, 459, 460, 469, 470, 471, 472, 473, 474, 475, 476, 525, 533, 552, 553, 564, 611, 612, 647, 653, 658, 702, 717, 719, 759, 822, 843, 851, 884, 886, 998, 1001, 1002, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1025, 1034, 1046, 1047, 1048, 1049], "observatori": 175, "obsolet": [1033, 1049], "obstruct": 1040, "obtain": [22, 43, 46, 48, 51, 52, 58, 64, 88, 90, 91, 103, 106, 107, 125, 127, 134, 143, 146, 147, 152, 159, 168, 172, 174, 186, 187, 198, 209, 212, 214, 216, 226, 236, 249, 255, 256, 257, 264, 266, 270, 271, 272, 276, 279, 283, 293, 315, 322, 338, 344, 352, 353, 358, 359, 371, 373, 378, 390, 402, 406, 407, 408, 410, 411, 413, 415, 416, 417, 418, 437, 442, 469, 497, 533, 534, 556, 557, 558, 559, 560, 561, 564, 565, 566, 594, 607, 615, 646, 660, 662, 667, 669, 673, 675, 677, 678, 688, 709, 713, 727, 740, 757, 794, 807, 824, 830, 833, 834, 837, 851, 862, 882, 894, 907, 910, 913, 914, 949, 991, 992, 994, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1012, 1016, 1017, 1039, 1041, 1044, 1046, 1047, 1048, 1049, 1050], "obviat": 994, "obviou": [186, 344, 359, 363, 376, 405, 413], "obvious": [182, 363], "oc": 1048, "occas": 376, "occasion": [391, 728, 1042], "occup": [186, 310, 326, 497], "occupation_cler": 186, "occupation_manag": 186, "occupation_oth": 186, "occupation_profession": 186, "occupation_sal": 186, "occupation_servic": 186, "occupi": [408, 1002], "occur": [54, 102, 144, 212, 216, 230, 347, 359, 376, 384, 391, 405, 408, 410, 412, 416, 444, 509, 510, 573, 582, 591, 628, 672, 799, 801, 804, 805, 807, 815, 824, 827, 828, 829, 832, 875, 936, 1002, 1004, 1012, 1033, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "occurr": [2, 212, 316, 352, 353, 371, 376, 380, 408, 416, 570, 571, 582, 590, 591, 618, 628, 629, 630, 631, 784, 840, 868, 1004, 1034, 1039], "ocean": 303, "ocsvm": [48, 226], "oct": [693, 770, 999, 1005], "octob": [110, 371, 1033, 1040, 1046, 1047, 1049], "od280": 373, "od315": 373, "odd": [273, 415, 515, 713, 1002, 1040, 1041], "ofcategoriesknownnumb": 396, "off": [44, 51, 53, 72, 74, 75, 81, 85, 86, 109, 113, 115, 120, 140, 149, 167, 168, 183, 216, 233, 244, 248, 262, 263, 269, 271, 272, 273, 283, 287, 310, 327, 330, 332, 334, 340, 349, 351, 371, 376, 378, 390, 407, 408, 410, 417, 442, 497, 554, 555, 560, 561, 589, 592, 635, 657, 659, 693, 716, 798, 799, 801, 804, 805, 815, 817, 823, 828, 866, 885, 953, 1001, 1007, 1017, 1022, 1023, 1033, 1037, 1038, 1040], "offer": [43, 140, 201, 378, 384, 388, 389, 390, 394, 402, 412, 413, 415, 416, 991, 992, 1003, 1006, 1018, 1021, 1022, 1026, 1039, 1051], "offic": 1026, "offici": [371, 378, 388, 390, 394, 494, 498, 1021, 1041, 1042, 1045], "offlin": [264, 363, 376], "offset": [137, 191, 388, 410, 413, 469, 509, 510, 564, 633, 634, 642, 643, 645, 646, 678, 729, 776, 778, 851, 909, 1002, 1016, 1041], "offset_": [469, 564, 678, 851, 909, 1041], "offset_init": 678, "offsetbox": 233, "offsetimag": 233, "ofmulticlass": 1017, "often": [43, 57, 61, 62, 64, 69, 102, 106, 140, 149, 152, 174, 181, 186, 187, 213, 230, 233, 249, 257, 272, 275, 310, 315, 340, 349, 351, 352, 353, 363, 364, 370, 371, 373, 376, 378, 381, 384, 388, 389, 390, 393, 396, 402, 406, 408, 409, 410, 412, 413, 415, 416, 418, 420, 468, 522, 525, 534, 537, 633, 647, 648, 653, 654, 661, 662, 663, 664, 673, 675, 688, 729, 875, 883, 891, 903, 991, 992, 994, 997, 998, 999, 1000, 1001, 1002, 1004, 1005, 1007, 1008, 1009, 1012, 1015, 1016, 1018, 1034, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "og": 416, "ogbonna": 1046, "ogordon100": 1046, "ogrid": 53, "ogu": 416, "ogura": 1048, "oh": [878, 1043], "ohad": 1047, "ohayon": [1041, 1042, 1049], "ohio": 371, "ohno": 406, "oj_lappi": 1045, "oja": [420, 534], "ojala": [276, 412, 830], "ojeda": 1047, "ok": [49, 376, 1008], "okal": 1037, "okbalefthand": 1039, "okhlopkov": [1039, 1040], "okon": 1047, "okroshiashvili": 1046, "ol": [193, 203, 208, 209, 210, 218, 229, 322, 657, 998], "ol2001": 992, "olatunji": 1048, "old": [230, 376, 380, 382, 408, 468, 537, 647, 653, 903, 999, 1022, 1033, 1038, 1039, 1041, 1046, 1047, 1048], "olden": 1041, "older": [246, 375, 380, 402, 464, 1025, 1031, 1036, 1043, 1045], "oldest": 497, "oldid": 1002, "oldja": 1045, "oleg": 1043, "oleggio": 1037, "olegovich": 1040, "oleh": [1045, 1047], "oleksandr": [1041, 1042, 1043, 1044, 1047], "oleksii": 1050, "olemiss": 680, "olga": [629, 992], "oli": 1040, "oliblum90": [1040, 1041], "olicairn": 1044, "olimpio": 1041, "oliph": 1033, "oliv": [1041, 1042, 1044, 1045, 1046], "oliveira": [1039, 1041, 1043, 1047], "olivetti": [2, 120, 369, 413, 496, 1028, 1033, 1041], "olivetti_fac": 496, "olivi": [0, 391, 397, 901, 1015, 1020, 1022, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "oll": 1048, "olr": 193, "olsen": 1040, "olshen": [913, 914, 1018], "olson": 1039, "olszewski": 1046, "olvi": [168, 373], "om": 1040, "omar": [0, 397, 1043, 1048, 1049, 1050, 1051], "omarmanzoor": 1049, "omega": [347, 411, 996], "omega_": 996, "omega_k": [411, 996], "omer": 1038, "omit": [141, 185, 186, 334, 381, 421, 475, 535, 667, 669, 677, 808, 810, 833, 834, 837, 840, 841, 842, 843, 844, 862, 1000, 1007], "omohundro": 1005, "omp": [2, 123, 129, 211, 413, 532, 538, 543, 549, 665, 666, 686, 687, 1024, 1028, 1033, 1041], "omp_cv": 211, "omp_get_max_thread": 377, "omp_num_thread": 364, "omtcyfz": 1040, "onc": [2, 43, 47, 83, 165, 168, 170, 175, 233, 246, 249, 264, 268, 271, 283, 284, 287, 290, 316, 319, 323, 351, 353, 357, 358, 359, 363, 365, 370, 371, 374, 376, 380, 381, 382, 383, 384, 389, 390, 391, 402, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 449, 451, 453, 472, 509, 510, 539, 545, 552, 560, 561, 591, 592, 598, 612, 620, 628, 648, 652, 654, 656, 662, 664, 666, 667, 668, 669, 677, 678, 679, 698, 713, 717, 719, 737, 782, 802, 806, 809, 819, 823, 840, 841, 842, 843, 844, 917, 998, 999, 1005, 1012, 1016, 1017, 1018, 1030, 1033, 1041, 1043, 1044, 1045, 1046, 1050], "one": [0, 2, 30, 43, 47, 48, 49, 52, 54, 55, 62, 63, 64, 68, 69, 70, 72, 75, 81, 86, 88, 90, 91, 93, 94, 97, 99, 103, 112, 120, 123, 125, 126, 129, 139, 140, 144, 146, 149, 150, 154, 157, 167, 168, 170, 177, 178, 181, 185, 186, 187, 188, 189, 191, 193, 194, 198, 202, 203, 205, 206, 207, 209, 212, 214, 221, 222, 227, 230, 234, 239, 246, 247, 249, 253, 257, 260, 264, 266, 267, 268, 270, 271, 273, 274, 277, 278, 279, 280, 287, 289, 290, 295, 308, 311, 312, 315, 316, 319, 321, 322, 323, 327, 332, 339, 340, 348, 351, 352, 353, 355, 358, 359, 363, 364, 365, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 393, 394, 396, 399, 402, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 444, 445, 446, 447, 449, 450, 451, 452, 453, 455, 456, 457, 460, 462, 464, 469, 474, 487, 488, 490, 491, 493, 494, 495, 496, 497, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 515, 535, 540, 541, 542, 544, 548, 552, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 570, 582, 584, 585, 589, 590, 591, 592, 611, 612, 616, 617, 621, 628, 631, 633, 634, 635, 636, 644, 648, 649, 650, 651, 655, 658, 659, 660, 662, 667, 669, 670, 672, 674, 675, 676, 677, 679, 681, 689, 693, 696, 700, 704, 710, 712, 721, 730, 731, 735, 739, 751, 752, 755, 764, 772, 775, 779, 780, 781, 782, 784, 785, 788, 789, 791, 792, 793, 794, 797, 798, 799, 800, 801, 804, 805, 807, 808, 809, 811, 813, 815, 819, 820, 823, 824, 826, 828, 829, 831, 832, 833, 834, 835, 837, 838, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 861, 865, 868, 869, 870, 872, 873, 875, 876, 877, 878, 879, 884, 885, 886, 889, 891, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 927, 937, 941, 951, 972, 991, 992, 994, 996, 997, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1026, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "one_class": 247, "one_d_arrai": 922, "one_d_label": 925, "one_hot": [316, 327], "one_hot_encod": [43, 143], "one_hot_encoder_": 567, "one_hot_linear_pipelin": 43, "one_hot_linear_predict": 43, "one_hot_poly_pipelin": 43, "one_hot_poly_predict": 43, "one_hot_result": 143, "one_hot_tim": 43, "one_imag": [416, 585, 588], "one_vs_on": [418, 611, 1003], "one_vs_rest": [611, 1003], "oneclasssvm": [2, 48, 50, 226, 239, 322, 339, 564, 678, 851, 1008, 1016, 1017, 1035, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "oned": 394, "onehot": [251, 311, 312, 409, 870, 1012], "onehot_categor": [212, 230], "onehotencod": [2, 43, 103, 139, 143, 154, 186, 187, 212, 230, 241, 249, 251, 253, 316, 320, 322, 325, 326, 327, 370, 390, 409, 415, 466, 467, 567, 582, 583, 868, 872, 873, 876, 879, 886, 992, 1012, 1034, 1037, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "onehotencoderonehotencod": [103, 139, 154, 186, 187, 241, 251, 320, 323], "ones": [43, 50, 70, 78, 88, 103, 112, 144, 150, 170, 191, 198, 216, 217, 239, 242, 246, 270, 278, 281, 297, 314, 330, 349, 363, 364, 376, 384, 390, 408, 410, 412, 415, 423, 426, 430, 450, 533, 567, 582, 611, 612, 619, 645, 646, 659, 660, 671, 677, 704, 797, 803, 808, 819, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 880, 884, 955, 998, 1002, 1007, 1008, 1012, 1017, 1033, 1041, 1042, 1043], "onetoonefeaturemixin": [2, 378, 432], "onevsoneclassifi": [2, 287, 399, 834, 835, 1034, 1036, 1037, 1039, 1040, 1042, 1045, 1047, 1050], "onevsrestclassifi": [2, 66, 205, 227, 247, 277, 279, 287, 399, 406, 659, 660, 833, 835, 905, 1034, 1035, 1037, 1039, 1040, 1046, 1047, 1050, 1051], "ong": 709, "ongari": 1050, "onggo": 1049, "ongo": [325, 377, 391], "onli": [2, 25, 30, 43, 46, 50, 53, 54, 58, 61, 62, 63, 64, 66, 69, 70, 72, 74, 75, 82, 86, 88, 91, 99, 102, 103, 104, 106, 107, 112, 123, 124, 126, 130, 134, 136, 141, 142, 143, 145, 153, 154, 163, 164, 165, 168, 170, 172, 177, 179, 182, 185, 186, 187, 191, 197, 198, 202, 209, 212, 213, 215, 218, 220, 221, 230, 232, 233, 239, 241, 243, 245, 246, 250, 253, 255, 256, 257, 260, 261, 264, 266, 268, 270, 272, 273, 276, 277, 278, 279, 281, 282, 283, 284, 287, 289, 290, 296, 298, 301, 303, 307, 310, 311, 315, 316, 321, 322, 329, 330, 332, 336, 337, 340, 344, 345, 347, 348, 351, 352, 353, 355, 356, 358, 359, 363, 364, 365, 369, 370, 371, 373, 374, 376, 378, 380, 381, 382, 383, 384, 385, 388, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 428, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 489, 490, 491, 493, 495, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 517, 520, 524, 525, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 708, 710, 714, 727, 730, 731, 735, 737, 738, 739, 742, 744, 757, 759, 761, 775, 779, 780, 781, 782, 784, 785, 788, 789, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 815, 819, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 924, 925, 926, 927, 929, 930, 931, 932, 935, 937, 941, 949, 951, 955, 957, 962, 967, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1021, 1022, 1026, 1030, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051], "onlin": [2, 44, 45, 47, 54, 71, 84, 120, 123, 183, 192, 220, 226, 248, 264, 306, 365, 371, 375, 381, 390, 408, 413, 416, 418, 442, 446, 447, 449, 496, 503, 532, 537, 538, 539, 540, 546, 547, 583, 585, 659, 667, 668, 669, 677, 679, 831, 840, 841, 842, 843, 844, 847, 848, 853, 855, 856, 874, 875, 885, 905, 906, 994, 998, 1006, 1008, 1020, 1023, 1024, 1026, 1028, 1033, 1037, 1038, 1040, 1048], "onlineldavb": 537, "only_non_neg": 1046, "only_physical_cor": 140, "onnx": [1021, 1022, 1028], "onnxruntim": 402, "onto": [116, 233, 234, 244, 310, 388, 413, 416, 420, 446, 448, 461, 534, 540, 544, 628, 629, 631, 689, 996, 1000, 1005], "onward": [879, 1037, 1051], "onx": 402, "oob": [133, 145, 183, 415, 516, 565, 1022, 1023, 1035, 1046, 1050], "oob_best_it": 145, "oob_color": 145, "oob_decision_function_": [556, 558, 565], "oob_error": 138, "oob_improvement_": [145, 415, 560, 561, 1035], "oob_lin": 145, "oob_prediction_": [557, 559, 566], "oob_scor": [138, 415, 556, 557, 558, 559, 565, 566, 1038, 1040], "oob_score_": [138, 556, 557, 558, 559, 560, 561, 565, 566, 1035, 1049], "oob_scores_": [560, 561, 1049], "op": [380, 427, 659, 660, 667, 668, 669, 677, 678, 679, 862, 863, 905, 1012], "opaqu": 1010, "open": [0, 47, 51, 55, 234, 370, 371, 374, 375, 376, 380, 382, 388, 389, 391, 402, 409, 416, 487, 497, 509, 510, 992, 1021, 1026, 1036, 1040, 1041, 1043, 1049], "open_pric": 51, "openbla": [363, 364, 374, 384, 388, 1046, 1050, 1051], "openblas_num_thread": 364, "opencv": 371, "opengraph": [376, 394, 401], "openml": [2, 43, 52, 103, 154, 175, 186, 212, 220, 228, 230, 240, 264, 284, 287, 289, 307, 369, 394, 497, 1028, 1041, 1043, 1046], "openml1": 52, "openml100": 370, "openmp": [320, 374, 379, 388, 390, 408, 415, 1044, 1046, 1049, 1051], "opentsn": 693, "oper": [2, 19, 53, 168, 178, 183, 240, 245, 252, 262, 264, 265, 267, 272, 277, 353, 363, 364, 373, 374, 376, 379, 382, 388, 390, 391, 394, 402, 404, 407, 412, 413, 415, 416, 417, 421, 442, 448, 461, 468, 475, 482, 483, 484, 485, 505, 534, 535, 542, 552, 553, 567, 573, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 617, 622, 625, 631, 636, 644, 659, 690, 694, 703, 707, 708, 709, 728, 775, 782, 783, 789, 790, 820, 831, 834, 845, 846, 868, 872, 877, 888, 889, 903, 910, 913, 951, 974, 998, 1005, 1012, 1017, 1021, 1023, 1026, 1037, 1039, 1040, 1041, 1043, 1044, 1049], "operand": 418, "operation": [230, 1026], "operatornam": [413, 742, 998, 1002, 1018], "opinion": 391, "opitz": 1002, "opportun": [535, 1016], "oppos": [100, 246, 404, 408, 901, 1005, 1017, 1033, 1051], "opposit": [62, 86, 100, 125, 186, 187, 202, 264, 277, 390, 406, 410, 412, 417, 443, 447, 449, 469, 539, 541, 548, 564, 713, 731, 851, 909, 1033], "opposite_lof_scor": 851, "opt": [374, 378], "opta": 898, "optic": [2, 71, 79, 183, 323, 369, 419, 444, 446, 455, 456, 457, 503, 1023, 1027, 1028, 1042, 1046, 1047, 1048, 1049, 1050, 1051], "optim": [46, 52, 53, 64, 86, 87, 90, 93, 104, 109, 110, 120, 144, 145, 147, 149, 167, 168, 170, 171, 174, 175, 176, 177, 178, 198, 200, 202, 206, 220, 228, 245, 249, 264, 268, 275, 278, 283, 284, 287, 289, 294, 308, 310, 315, 323, 327, 332, 342, 347, 351, 352, 353, 359, 363, 370, 373, 376, 378, 379, 388, 390, 394, 403, 405, 407, 408, 410, 412, 413, 415, 417, 418, 419, 444, 447, 448, 449, 450, 452, 457, 461, 462, 472, 473, 479, 532, 535, 536, 538, 540, 544, 558, 559, 560, 561, 575, 611, 612, 620, 621, 636, 639, 641, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 685, 688, 691, 693, 695, 696, 702, 720, 724, 731, 800, 801, 815, 823, 847, 848, 849, 851, 853, 854, 855, 856, 857, 862, 863, 881, 893, 897, 898, 905, 906, 907, 908, 909, 910, 911, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1016, 1017, 1018, 1021, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1047, 1048, 1049], "optima": 418, "optimis": [378, 408, 1005, 1036, 1046, 1048], "optimist": [52, 202, 275, 351, 359, 708, 998, 1002], "optimum": [94, 176, 186, 191, 264, 283, 407, 413, 472, 998, 1001], "option": [2, 43, 66, 80, 85, 127, 140, 147, 176, 182, 195, 198, 213, 249, 264, 273, 279, 320, 327, 351, 355, 359, 365, 370, 371, 372, 374, 376, 377, 379, 381, 382, 384, 385, 388, 390, 391, 394, 402, 408, 409, 411, 412, 413, 415, 416, 419, 432, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 459, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 688, 689, 690, 691, 693, 695, 696, 712, 714, 718, 730, 731, 736, 737, 738, 758, 759, 760, 765, 767, 768, 772, 775, 776, 777, 778, 779, 782, 784, 785, 788, 793, 794, 796, 800, 802, 803, 804, 805, 807, 808, 810, 819, 823, 824, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 939, 987, 991, 992, 998, 1001, 1002, 1005, 1012, 1015, 1017, 1018, 1022, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "option_context": 230, "ora": 1046, "oracl": [2, 69, 212, 230, 421, 469, 470, 473, 474, 475, 476, 996, 1033], "orallo": 1002, "orang": [46, 48, 86, 111, 118, 121, 122, 127, 134, 148, 149, 151, 177, 182, 200, 202, 209, 222, 247, 258, 264, 301, 320, 326, 1003, 1050], "orazbayev": 1047, "orbit": [351, 352], "order": [2, 43, 53, 58, 61, 64, 81, 88, 97, 98, 104, 109, 129, 142, 143, 147, 149, 161, 175, 185, 186, 189, 191, 202, 206, 212, 213, 218, 226, 230, 234, 243, 246, 249, 253, 257, 265, 268, 270, 277, 289, 308, 310, 315, 316, 317, 321, 322, 327, 347, 351, 353, 359, 363, 364, 371, 376, 377, 378, 380, 381, 382, 385, 390, 394, 395, 399, 402, 408, 409, 410, 412, 413, 414, 415, 416, 418, 420, 437, 440, 443, 446, 447, 449, 450, 455, 456, 457, 459, 464, 488, 489, 490, 496, 498, 516, 535, 536, 540, 541, 542, 544, 548, 552, 554, 556, 557, 558, 559, 560, 564, 565, 566, 567, 568, 582, 589, 592, 594, 595, 598, 607, 608, 609, 611, 623, 628, 632, 641, 659, 660, 666, 677, 686, 687, 689, 690, 694, 698, 700, 701, 703, 705, 713, 714, 719, 723, 727, 730, 731, 739, 741, 742, 743, 755, 757, 779, 783, 784, 785, 788, 789, 790, 795, 800, 801, 802, 804, 805, 806, 808, 812, 815, 819, 820, 823, 826, 833, 834, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 855, 862, 865, 876, 878, 879, 880, 884, 885, 886, 889, 890, 891, 893, 894, 895, 896, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 931, 932, 937, 949, 965, 970, 992, 998, 999, 1002, 1003, 1005, 1006, 1012, 1015, 1016, 1017, 1018, 1022, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "order_": [836, 839], "order_centroid": 352, "ordered_sampl": 230, "ordereddict": 138, "ordering_": [98, 408, 450, 455, 456, 457], "ordin": [43, 86, 103, 154, 249, 313, 316, 317, 321, 324, 370, 390, 415, 497, 568, 710, 870, 873, 878, 879, 886, 998, 999, 1012, 1022, 1041, 1047], "ordinal_encod": [143, 249], "ordinal_result": 143, "ordinalencod": [2, 143, 154, 187, 188, 212, 249, 316, 324, 370, 390, 582, 841, 873, 878, 886, 992, 1004, 1012, 1041, 1042, 1045, 1046, 1047, 1048, 1049, 1050], "ordinalencoderordinalencod": [154, 187, 188, 316], "ordinari": [2, 122, 137, 157, 183, 192, 193, 196, 198, 203, 212, 214, 215, 217, 229, 266, 322, 502, 636, 647, 653, 655, 656, 657, 658, 673, 679, 683, 684, 688, 751, 786, 831, 1016, 1023, 1024, 1028], "ordinarili": [388, 390], "ordowski": 1002, "oregon": 316, "oren": 1041, "oresti": 1042, "orfano": [1046, 1047, 1048, 1049, 1050], "org": [43, 51, 52, 55, 61, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 191, 195, 212, 220, 228, 230, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 289, 307, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 364, 369, 374, 376, 379, 382, 384, 391, 412, 596, 637, 669, 672, 677, 696, 706, 770, 847, 848, 853, 854, 855, 856, 883, 899, 913, 914, 943, 944, 998, 1002, 1018, 1028, 1041, 1045], "organ": [0, 50, 52, 102, 111, 351, 370, 375, 376, 391, 853, 1021], "ori": 1039, "orient": [66, 120, 186, 232, 310, 390, 917, 999], "orig": [53, 297], "orig_coin": [80, 81], "orig_data_ax": 125, "origin": [43, 44, 53, 58, 59, 80, 81, 84, 89, 91, 106, 107, 120, 122, 123, 126, 129, 149, 152, 164, 165, 168, 170, 172, 174, 175, 181, 182, 187, 191, 200, 202, 216, 232, 233, 234, 236, 237, 243, 244, 245, 249, 261, 264, 267, 273, 283, 293, 298, 308, 311, 315, 325, 330, 344, 351, 353, 359, 364, 371, 373, 375, 376, 378, 380, 381, 388, 390, 402, 405, 408, 409, 412, 413, 415, 416, 418, 419, 420, 421, 433, 437, 441, 443, 444, 445, 446, 447, 449, 450, 459, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 494, 495, 496, 502, 520, 532, 534, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 577, 582, 583, 585, 589, 591, 592, 595, 608, 609, 611, 612, 615, 631, 633, 636, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 693, 697, 702, 729, 764, 770, 800, 802, 803, 808, 810, 819, 823, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 855, 856, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 877, 878, 879, 881, 882, 883, 884, 885, 894, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 929, 931, 932, 936, 937, 960, 972, 975, 995, 996, 998, 999, 1001, 1002, 1005, 1008, 1013, 1014, 1015, 1016, 1019, 1021, 1026, 1036, 1037, 1039, 1041, 1043, 1045, 1047, 1049], "original_param": 148, "original_sklearn_vers": [402, 577], "original_space_centroid": 352, "orii": 1035, "orphan": [448, 461, 1033], "orr": [1006, 1016], "orr\u00f9": 1036, "orthogon": [2, 37, 87, 121, 122, 123, 129, 183, 192, 413, 527, 532, 538, 540, 543, 544, 549, 665, 666, 686, 687, 1014, 1023, 1024, 1028, 1033], "orthogonal_mp": [2, 549, 665, 666, 687, 998], "orthogonal_mp_gram": [2, 665, 666, 686, 1047], "orthogonalmatchingpursuit": [2, 211, 666, 686, 687, 998, 1003, 1033, 1035, 1038, 1041, 1046, 1051], "orthogonalmatchingpursuitcv": [2, 211, 399, 665, 1035, 1046, 1050], "orthonorm": [2, 45, 385, 948, 994], "orthotrop": 1005, "ortiz": [1043, 1049], "os": 1051, "osa": 1041, "osaid": 1041, "osborn": [1036, 1037], "oscar": [1036, 1040], "oscil": [151, 187, 217, 408, 440], "oscillatori": [213, 1012], "osei": 1047, "osendorf": [1033, 1034], "oserror": [394, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499], "osindero": [861, 1007], "osman": [1042, 1048], "osx": 363, "other": [0, 2, 25, 43, 47, 51, 52, 61, 64, 66, 67, 69, 72, 75, 79, 85, 90, 99, 101, 103, 104, 116, 122, 123, 125, 127, 137, 139, 140, 142, 143, 146, 147, 149, 150, 156, 163, 181, 182, 183, 185, 186, 187, 188, 191, 193, 201, 206, 212, 216, 230, 232, 233, 234, 236, 239, 240, 241, 243, 245, 246, 249, 250, 257, 260, 264, 265, 267, 270, 271, 272, 279, 280, 284, 287, 295, 296, 297, 309, 310, 314, 315, 317, 319, 320, 322, 326, 327, 329, 340, 344, 346, 349, 351, 352, 355, 357, 358, 359, 363, 368, 369, 371, 372, 373, 374, 376, 378, 380, 381, 382, 384, 385, 389, 390, 391, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 437, 443, 444, 446, 447, 448, 449, 450, 452, 457, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 497, 498, 504, 534, 535, 536, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 598, 603, 611, 612, 613, 614, 621, 628, 629, 631, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 693, 697, 700, 705, 719, 764, 775, 779, 786, 793, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 815, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 860, 862, 863, 865, 866, 868, 870, 871, 872, 874, 875, 877, 878, 879, 881, 882, 883, 884, 885, 886, 893, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 943, 944, 958, 990, 991, 992, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1022, 1023, 1024, 1025, 1026, 1028, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1046, 1047, 1048, 1049, 1050], "other_parti": 264, "other_payment_plan": 264, "other_scor": 381, "otherwis": [50, 89, 95, 136, 179, 182, 195, 214, 220, 264, 303, 344, 347, 359, 365, 378, 380, 382, 390, 399, 408, 410, 412, 416, 418, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 451, 453, 454, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 528, 534, 535, 536, 537, 539, 541, 542, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 598, 603, 611, 612, 615, 632, 633, 634, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 686, 687, 691, 693, 697, 698, 699, 701, 703, 704, 708, 710, 714, 715, 725, 727, 728, 729, 730, 731, 739, 742, 753, 755, 756, 757, 767, 775, 779, 782, 783, 784, 785, 786, 788, 789, 790, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 815, 819, 820, 823, 824, 829, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 860, 862, 863, 865, 868, 869, 870, 871, 872, 876, 877, 884, 885, 886, 887, 890, 891, 892, 894, 895, 896, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 920, 931, 932, 934, 938, 948, 949, 960, 962, 985, 987, 990, 997, 998, 999, 1002, 1005, 1006, 1008, 1009, 1012, 1014, 1016, 1017, 1021, 1026, 1035, 1041, 1042, 1043, 1046, 1049], "ott": 1037, "oudshoorn": [628, 992], "ought": 363, "our": [0, 43, 44, 46, 50, 51, 52, 77, 86, 89, 102, 103, 111, 112, 116, 120, 121, 134, 135, 141, 143, 144, 146, 147, 163, 168, 170, 175, 176, 177, 183, 185, 186, 187, 188, 189, 212, 216, 230, 234, 236, 246, 263, 264, 270, 273, 276, 277, 283, 293, 307, 310, 316, 320, 322, 327, 334, 337, 343, 345, 347, 351, 352, 353, 359, 364, 375, 380, 381, 384, 388, 389, 390, 391, 399, 408, 412, 415, 416, 418, 419, 444, 450, 564, 645, 693, 709, 721, 727, 739, 757, 847, 848, 849, 851, 853, 855, 856, 857, 991, 992, 998, 999, 1002, 1008, 1012, 1015, 1016, 1017, 1022, 1025, 1026, 1040, 1041, 1043, 1044, 1047, 1048, 1050], "our_rand_r": 1042, "oura": [1046, 1047, 1048], "ourselv": 1026, "ouss1508": [1048, 1049], "out": [0, 2, 42, 43, 46, 48, 49, 51, 52, 54, 55, 63, 66, 75, 83, 88, 102, 103, 127, 133, 138, 140, 141, 147, 148, 161, 183, 185, 186, 188, 198, 212, 214, 216, 220, 230, 249, 255, 257, 264, 268, 270, 273, 278, 282, 283, 287, 289, 315, 316, 322, 332, 334, 336, 337, 340, 347, 351, 362, 371, 373, 374, 376, 378, 379, 380, 382, 388, 390, 396, 402, 408, 411, 413, 415, 416, 418, 424, 434, 435, 436, 442, 443, 445, 446, 447, 449, 454, 472, 482, 483, 484, 485, 500, 516, 517, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 589, 590, 592, 605, 608, 609, 635, 640, 641, 642, 643, 652, 656, 667, 669, 674, 676, 677, 689, 690, 693, 702, 728, 742, 801, 803, 804, 805, 806, 808, 809, 810, 811, 815, 831, 840, 841, 842, 843, 844, 847, 849, 854, 855, 857, 861, 862, 863, 871, 875, 882, 894, 897, 898, 920, 963, 965, 970, 990, 992, 996, 997, 1001, 1002, 1003, 1005, 1010, 1012, 1022, 1023, 1024, 1026, 1028, 1033, 1035, 1037, 1039, 1041, 1042, 1045, 1046, 1049, 1051], "out_activation_": [862, 863], "out_bounds_predict": 214, "out_fil": [917, 1018], "out_of_bound": [242, 636], "out_of_cluster_doc": 57, "outcom": [43, 140, 186, 283, 390, 396, 415, 570, 659, 710, 743, 795, 833, 900, 901, 902, 907, 910, 998, 1002, 1018, 1025, 1037, 1041, 1043], "outdat": 379, "outer": [58, 125, 275, 331, 451, 515, 641, 651, 652, 655, 994, 1034], "outer_cv": [275, 326], "outer_numb": 331, "outermost": 344, "outli": [48, 111, 390, 469, 474, 998, 1008], "outlier": [2, 42, 70, 79, 87, 111, 112, 146, 150, 170, 183, 192, 210, 214, 215, 216, 217, 218, 226, 238, 291, 309, 314, 317, 339, 349, 371, 378, 390, 408, 410, 415, 430, 446, 464, 466, 469, 470, 473, 474, 475, 476, 490, 491, 493, 497, 511, 513, 523, 525, 564, 632, 640, 650, 671, 672, 673, 677, 678, 679, 680, 693, 703, 831, 851, 855, 866, 874, 875, 877, 878, 879, 881, 882, 883, 884, 885, 890, 891, 892, 893, 894, 895, 896, 908, 909, 911, 1002, 1016, 1017, 1021, 1023, 1024, 1027, 1028, 1033, 1038, 1039, 1041], "outlier_detector": [249, 378, 430], "outlier_label": [855, 1043], "outlier_label_": 855, "outlier_mask": 215, "outlier_plot": 111, "outliermixin": [2, 378, 1050], "outliers_": 650, "outliers_cov": 111, "outliers_fract": 239, "outliers_index": 112, "outliers_offset": 112, "outlin": [99, 142, 376, 378, 390, 391, 393, 408, 991, 1028], "outlying": 1008, "outperform": [109, 116, 149, 154, 287, 315, 388, 412, 415, 452, 462, 1004, 1012], "output": [2, 30, 31, 51, 54, 62, 64, 72, 86, 92, 123, 133, 134, 137, 142, 154, 170, 178, 181, 182, 183, 186, 238, 246, 253, 258, 263, 264, 268, 270, 273, 277, 279, 280, 284, 287, 290, 311, 314, 316, 317, 319, 322, 323, 325, 327, 352, 353, 358, 369, 370, 371, 373, 376, 378, 382, 384, 388, 389, 390, 406, 407, 408, 409, 411, 412, 415, 416, 417, 418, 424, 429, 432, 437, 441, 442, 443, 445, 446, 447, 449, 450, 452, 459, 460, 462, 463, 464, 465, 466, 467, 468, 482, 483, 484, 485, 488, 491, 493, 494, 495, 496, 497, 498, 504, 506, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 647, 648, 651, 653, 654, 655, 658, 659, 661, 662, 663, 664, 667, 668, 669, 672, 674, 675, 677, 679, 680, 682, 683, 684, 685, 689, 690, 691, 693, 695, 697, 700, 701, 714, 715, 722, 724, 725, 727, 729, 736, 746, 747, 749, 751, 752, 753, 754, 755, 757, 762, 768, 773, 786, 789, 791, 792, 798, 799, 800, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 826, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 848, 849, 850, 854, 855, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 893, 894, 897, 898, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 923, 925, 926, 931, 932, 934, 937, 949, 950, 957, 958, 960, 968, 988, 991, 992, 994, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1009, 1012, 1017, 1023, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "output_dict": [714, 1041, 1045], "output_distribut": [107, 310, 314, 409, 881, 882, 893, 894, 1012], "output_fil": 487, "output_indices_": [464, 1046], "output_label": 331, "output_label_arrai": 331, "outputcodeclassifi": [2, 287, 399, 833, 834, 1040, 1045, 1049, 1050], "outputs_2d_": [847, 855, 1043], "outreach": 391, "outsid": [45, 48, 57, 142, 213, 214, 242, 253, 402, 416, 446, 636, 884, 1008, 1041], "outward": 310, "outweigh": 1037, "ouvert": [759, 760, 1000], "ova": [221, 667, 669, 677, 1016], "ovb": [185, 186], "over": [0, 2, 30, 43, 46, 47, 48, 58, 61, 63, 64, 67, 72, 83, 88, 89, 104, 105, 106, 120, 137, 140, 144, 149, 150, 163, 167, 170, 178, 181, 185, 187, 196, 207, 212, 220, 230, 239, 249, 264, 270, 271, 273, 275, 277, 278, 279, 282, 295, 303, 305, 306, 312, 322, 323, 325, 329, 351, 352, 363, 364, 365, 371, 372, 375, 376, 377, 378, 382, 389, 390, 404, 406, 408, 409, 412, 413, 414, 415, 416, 420, 446, 449, 464, 472, 510, 534, 535, 537, 538, 539, 540, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 589, 590, 592, 595, 603, 631, 633, 634, 635, 645, 646, 647, 648, 653, 654, 659, 661, 662, 663, 664, 666, 667, 668, 669, 677, 678, 679, 686, 687, 698, 717, 719, 740, 764, 789, 794, 798, 801, 804, 805, 807, 812, 813, 815, 824, 826, 827, 828, 829, 830, 832, 861, 862, 863, 864, 880, 884, 905, 913, 915, 922, 928, 937, 943, 944, 991, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1021, 1022, 1026, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1046], "overal": [43, 78, 134, 137, 140, 144, 154, 175, 230, 264, 267, 290, 315, 316, 352, 363, 375, 376, 382, 405, 406, 415, 447, 449, 464, 471, 472, 478, 550, 886, 999, 1002, 1018, 1026, 1043], "overallqu": 154, "overcom": [141, 216, 363, 416], "overcomplet": 413, "overconstrain": 149, "overestim": [127, 359, 412], "overfit": [43, 64, 139, 144, 146, 149, 183, 187, 188, 189, 193, 209, 213, 216, 239, 257, 262, 264, 265, 271, 275, 283, 284, 305, 311, 312, 314, 315, 316, 317, 340, 347, 355, 357, 371, 390, 406, 407, 412, 415, 437, 488, 489, 562, 563, 568, 569, 658, 801, 804, 805, 815, 823, 827, 828, 862, 863, 865, 880, 884, 997, 1006, 1008, 1010, 1012, 1018, 1023, 1026, 1036], "overflow": [375, 384, 388, 404, 1025, 1036, 1040, 1041, 1042, 1043, 1044, 1046], "overflowerror": 1043, "overhead": [47, 290, 364, 365, 376, 382, 385, 388, 390, 415, 441, 445, 449, 535, 700, 837, 838, 840, 841, 842, 843, 844, 845, 846, 1004, 1005, 1036, 1041, 1042, 1045], "overlai": [384, 633], "overlaid": 1009, "overlap": [2, 51, 52, 72, 88, 126, 147, 167, 235, 257, 352, 405, 408, 412, 415, 416, 588, 793, 794, 802, 803, 806, 808, 809, 810, 811, 818, 819, 821, 999, 1012, 1039], "overli": [52, 62, 63, 202, 275, 359, 413, 1002], "overlin": [270, 405], "overparameter": 998, "overrid": [378, 416, 446, 450, 457, 543, 549, 589, 590, 592, 594, 595, 598, 657, 665, 686, 687, 807, 824, 847, 848, 849, 851, 853, 855, 856, 857, 1033, 1041, 1043, 1047, 1049], "overridden": [378, 390, 418, 543, 549, 617, 622, 625, 695, 1041, 1042, 1049], "oversampl": [545, 1033], "oversc": 1048, "overset": [413, 1009], "overst": 186, "oversubscript": [779, 1047], "overview": [107, 183, 275, 286, 289, 355, 377, 379, 389, 390, 497, 735, 744, 801, 817, 828, 833, 834, 835, 913, 1004, 1016, 1023, 1027, 1028], "overwhelm": 376, "overwrit": [149, 446, 497, 632, 1033, 1044, 1049, 1050], "overwrite_": 1033, "overwritten": [442, 533, 534, 535, 537, 542, 549, 608, 609, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 673, 675, 680, 682, 683, 684, 685, 687, 971, 1046], "ovo": [287, 319, 789, 833, 907, 910, 1002, 1003, 1017], "ovo_tpr": 279, "ovo_tre": 287, "ovr": [2, 66, 205, 227, 287, 289, 319, 348, 659, 660, 789, 834, 905, 907, 910, 1002, 1003, 1017, 1033, 1038, 1039, 1041, 1042, 1043, 1047, 1048], "ovr_jaccard_scor": 289, "ovr_tre": 287, "ow": 93, "owen": [650, 1042, 1043], "own": [2, 16, 52, 70, 140, 230, 246, 260, 290, 292, 331, 352, 364, 370, 379, 381, 384, 385, 394, 407, 408, 420, 424, 440, 454, 534, 558, 565, 647, 798, 799, 847, 848, 849, 851, 853, 855, 856, 857, 879, 913, 915, 937, 943, 998, 1004, 1005, 1008, 1012, 1017, 1021, 1026, 1040, 1041, 1043, 1050], "own_telephon": 264, "owner": [246, 371, 373, 957, 958], "ownership": 378, "oyamada": 1038, "oyindamola": 1048, "oywa": 1043, "ozga": 1041, "ozsvald": 1035, "p": [0, 2, 50, 53, 61, 63, 64, 76, 94, 111, 112, 115, 118, 127, 145, 164, 168, 173, 191, 224, 229, 230, 232, 234, 243, 270, 276, 277, 303, 370, 371, 373, 374, 381, 384, 405, 406, 407, 408, 410, 411, 413, 415, 417, 418, 419, 421, 442, 444, 446, 447, 450, 455, 456, 457, 469, 471, 474, 475, 478, 499, 529, 535, 539, 541, 542, 548, 550, 551, 552, 554, 556, 557, 558, 559, 560, 562, 565, 566, 567, 591, 593, 594, 595, 596, 597, 599, 600, 601, 605, 606, 607, 608, 609, 610, 616, 617, 628, 641, 644, 689, 691, 693, 695, 700, 706, 716, 725, 742, 753, 787, 789, 803, 809, 810, 811, 814, 830, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 861, 865, 866, 881, 893, 899, 915, 916, 917, 995, 996, 998, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1016, 1017, 1033, 1034, 1036, 1039, 1041, 1048, 1049, 1050], "p0": 63, "p1": [63, 156], "p1d": 63, "p2": [63, 156, 230], "p3": 156, "p4": 156, "p5": 949, "p592": 138, "p_": [164, 1002, 1005, 1018], "p_c": [118, 524], "p_e": 717, "p_grid": 275, "p_i": [1002, 1005], "p_k": [277, 1002], "p_n": [277, 708, 1002], "p_o": 717, "p_val": 270, "p_val_uncorrect": 270, "p_valu": [605, 606, 607], "p_w": 118, "p_w_c": [118, 524], "pa": [667, 668, 902, 998, 1002, 1015], "pab": [1048, 1049], "pablo": [1043, 1046, 1047], "pabloduque0": 1046, "pace": 371, "pacha": 1041, "pacif": 270, "pack": [385, 1041], "packag": [0, 80, 86, 181, 246, 290, 364, 369, 370, 373, 374, 376, 377, 378, 380, 384, 385, 388, 390, 394, 395, 402, 410, 415, 416, 452, 478, 647, 648, 992, 998, 1001, 1005, 1012, 1018, 1026, 1033, 1039, 1041, 1042, 1043], "packet": 363, "packg": 394, "pacman": 394, "paczuski": [1041, 1042], "pad": [120, 142, 181, 187, 232, 249, 351, 356, 416, 589, 590, 592], "page": [0, 51, 55, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 168, 175, 186, 187, 188, 195, 232, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 363, 371, 373, 376, 378, 380, 382, 384, 391, 408, 410, 473, 517, 518, 519, 629, 645, 835, 900, 949, 992, 998, 1002, 1003, 1031, 1033, 1037, 1038], "page_links_en": 55, "page_links_filenam": 55, "page_links_url": 55, "pagerank": [55, 949], "pagh": [191, 994], "pai": [0, 186, 230, 264, 376], "paid": 998, "pain": 388, "paint": [917, 919], "pair": [2, 49, 52, 72, 79, 91, 97, 125, 136, 138, 142, 146, 161, 174, 178, 194, 197, 205, 221, 224, 230, 243, 265, 270, 277, 279, 334, 336, 338, 340, 341, 342, 344, 352, 356, 371, 388, 390, 405, 406, 409, 412, 416, 418, 437, 440, 441, 445, 450, 457, 463, 471, 472, 478, 494, 509, 510, 583, 593, 596, 597, 599, 600, 601, 611, 614, 615, 616, 618, 620, 621, 623, 624, 626, 628, 633, 634, 644, 646, 693, 700, 701, 706, 707, 708, 716, 732, 741, 759, 760, 764, 767, 770, 771, 772, 773, 774, 775, 777, 779, 780, 781, 782, 783, 787, 833, 845, 846, 920, 1002, 1003, 1004, 1005, 1012, 1018, 1033, 1045, 1046, 1048, 1049, 1050], "pair_confusion_matrix": [2, 408, 1045], "pair_list": 279, "pair_scor": 279, "paired_cosine_dist": [2, 404], "paired_dist": [2, 764, 770, 779, 1037], "paired_euclidean_dist": [2, 404], "paired_manhattan_dist": 2, "pairidx": 356, "pairplot": [126, 185, 186], "pairwis": [2, 37, 97, 185, 186, 243, 249, 279, 319, 323, 324, 351, 363, 368, 390, 404, 408, 413, 418, 446, 454, 458, 461, 462, 468, 487, 509, 510, 536, 562, 563, 621, 639, 640, 641, 642, 643, 644, 689, 691, 693, 695, 697, 700, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 789, 793, 794, 833, 849, 853, 857, 871, 903, 922, 994, 1002, 1005, 1014, 1017, 1028, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1048, 1049, 1050, 1051], "pairwise_bayesian": 270, "pairwise_bayesian_df": 270, "pairwise_comp_df": 270, "pairwise_dist": [2, 75, 327, 390, 408, 419, 444, 446, 450, 457, 689, 697, 763, 772, 780, 781, 793, 794, 849, 851, 853, 857, 1000, 1033, 1037, 1039, 1041, 1042, 1044, 1045, 1050, 1051], "pairwise_dist_chunk_s": [468, 903], "pairwise_distance_funct": [693, 697, 779, 782, 1005], "pairwise_distances_argmin": [2, 97, 323, 781, 1041, 1047, 1048, 1049, 1050], "pairwise_distances_argmin_min": [2, 323, 780, 1036, 1041, 1047, 1048, 1049, 1050], "pairwise_distances_chunk": [2, 363, 779, 1041, 1044, 1050], "pairwise_indices_": 833, "pairwise_kernel": [2, 390, 418, 452, 462, 644, 766, 871, 1000, 1033, 1040, 1050], "pairwise_kernel_funct": [621, 644, 775], "pairwise_kernels_kwarg": 621, "pairwise_t_test": 270, "pairwisedistancesreduct": 364, "pairwisekernel": [2, 418], "paislei": [413, 537], "pakdd": 408, "pal": [1041, 1047], "palacio": 1046, "palafox": 1033, "palett": [186, 270], "palevioletr": [226, 296, 339], "palioura": [840, 1004], "paliw": 1041, "palladium": 1026, "palmol": 51, "pami": [373, 408, 726], "pamnani": 1041, "pan": 396, "panchal": 1045, "pancholi": 1040, "panda": [2, 43, 51, 62, 102, 103, 104, 134, 140, 141, 143, 146, 149, 151, 167, 175, 181, 185, 186, 187, 188, 189, 193, 198, 202, 212, 216, 220, 230, 249, 250, 253, 260, 264, 268, 270, 271, 273, 281, 282, 284, 287, 315, 316, 317, 319, 322, 323, 347, 351, 352, 370, 371, 374, 375, 376, 378, 379, 384, 388, 390, 394, 401, 409, 432, 442, 443, 445, 447, 449, 464, 466, 468, 482, 483, 484, 485, 489, 490, 491, 493, 497, 501, 502, 503, 505, 506, 511, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 633, 634, 636, 639, 640, 641, 642, 643, 689, 690, 693, 801, 804, 805, 815, 831, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 927, 991, 992, 1012, 1021, 1022, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "pandata": [1048, 1049], "pandei": [1040, 1045], "panel": [261, 295, 310, 414, 1021], "panga": [1048, 1049], "panico": [1041, 1045], "pankaj": 1045, "pano": 1039, "panpiort8": [1043, 1045], "paolo": [0, 398, 1033, 1037, 1043, 1051], "papadopoulo": [1046, 1047, 1048, 1049, 1050], "papapanagiot": 1040, "paper": [0, 168, 191, 264, 270, 373, 382, 388, 408, 410, 415, 442, 449, 478, 505, 535, 542, 564, 642, 659, 667, 668, 672, 677, 680, 693, 789, 842, 851, 854, 897, 898, 998, 1002, 1005, 1008, 1017, 1033, 1040, 1041], "paper355": 672, "papier": [665, 686, 687], "par": 1012, "paraboloid": 998, "paradi": 1048, "paradigm": 998, "paragraph": [416, 504], "paralel": 1049, "parallel": [2, 53, 138, 140, 142, 187, 214, 271, 320, 321, 323, 345, 358, 362, 368, 374, 376, 377, 379, 380, 388, 390, 409, 419, 420, 437, 444, 446, 448, 449, 450, 452, 457, 458, 461, 464, 467, 472, 532, 534, 535, 536, 538, 540, 542, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 590, 595, 603, 608, 609, 611, 633, 635, 640, 659, 689, 690, 691, 692, 693, 694, 695, 782, 801, 804, 805, 807, 812, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 864, 867, 900, 901, 968, 971, 1022, 1028, 1033, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1048, 1049], "parallel_backend": [2, 364, 419, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 851, 853, 855, 856, 858, 859, 864, 867, 900, 901, 1041, 1051], "parallel_batch_queri": 290, "parallel_coordin": 271, "parallel_help": 1043, "parallelbackendbas": 971, "parallelis": [271, 468, 903, 1040], "param": [79, 88, 94, 95, 103, 144, 145, 147, 148, 232, 245, 246, 268, 270, 278, 282, 294, 306, 326, 372, 376, 378, 390, 399, 415, 418, 422, 425, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 813, 815, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 957, 958, 961, 990, 991, 1039, 1043, 1044, 1046, 1047, 1050, 1051], "param1": 378, "param2": 378, "param3": 378, "param_": 140, "param_c": [281, 801], "param_classifier__c": 103, "param_covariance_typ": 260, "param_degre": 801, "param_dist": [278, 282, 321], "param_distribut": [103, 170, 271, 278, 282, 321, 389, 805, 813, 815, 1049], "param_gamma": [281, 801, 815], "param_grid": [43, 45, 103, 104, 105, 106, 140, 146, 245, 251, 260, 264, 268, 269, 270, 274, 275, 278, 281, 287, 292, 312, 326, 340, 390, 399, 409, 415, 743, 801, 804, 812, 813, 991, 1002], "param_kernel": [801, 815], "param_list": 813, "param_min_samples_split": 274, "param_n_compon": 260, "param_nam": [140, 271, 283, 325, 347, 399, 824, 832, 997], "param_pca__n_compon": 105, "param_preprocessor__cat__selector__percentil": 103, "param_preprocessor__num__imputer__strategi": 103, "param_rang": [283, 325, 347, 824, 832, 997, 1049], "param_reduce_dim__n_compon": 269, "param_valu": 46, "paramet": [2, 25, 27, 43, 44, 48, 49, 50, 53, 54, 64, 70, 79, 87, 88, 91, 93, 94, 95, 103, 104, 105, 110, 112, 113, 118, 120, 126, 132, 134, 138, 140, 142, 143, 144, 147, 148, 149, 159, 165, 168, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 193, 194, 195, 196, 198, 200, 201, 202, 204, 209, 212, 214, 216, 217, 220, 229, 230, 236, 237, 239, 241, 244, 245, 246, 255, 256, 257, 258, 260, 261, 263, 264, 269, 270, 271, 272, 274, 275, 278, 281, 282, 287, 290, 292, 293, 296, 297, 303, 305, 306, 308, 310, 311, 312, 314, 315, 319, 320, 322, 323, 324, 325, 333, 335, 337, 342, 344, 345, 346, 348, 349, 351, 352, 353, 355, 356, 357, 359, 363, 364, 365, 368, 369, 371, 379, 381, 383, 384, 385, 388, 399, 403, 406, 407, 408, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 999, 1001, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1018, 1021, 1022, 1023, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "parameter": [355, 418, 615, 616, 623, 624, 798, 799, 998, 999, 1007, 1012, 1018], "parameter_grid": 271, "parameter_nam": [568, 569, 570, 571], "parametergrid": [2, 801, 1035, 1041], "parameters_str": 88, "parametersampl": [2, 815, 1035, 1041, 1045], "parametr": [2, 48, 61, 62, 113, 242, 294, 314, 322, 406, 409, 414, 415, 437, 552, 554, 636, 686, 697, 881, 893, 943, 944, 998, 1001, 1004, 1005, 1012, 1015, 1018, 1041, 1043, 1046], "parametrize_with_check": [2, 319, 378, 924, 943, 1043, 1044], "params_str": 282, "parcel": [87, 100, 408], "parch": [188, 324], "pardeep": 1045, "parel": 1037, "parent": [47, 185, 246, 358, 376, 380, 390, 408, 442, 463, 958, 959, 1033, 1050], "parent_hourly_wag": 185, "parenthes": 939, "parenthesi": [76, 376], "paresh": [1042, 1043], "pareto": 214, "pargent": 1012, "pari": [0, 373, 409, 466, 765, 873, 1013, 1047], "pariet": [1026, 1033], "parikh": [1042, 1047, 1048, 1049, 1050, 1051], "parimi": 1051, "paris_in_radian": 765, "paristech": 0, "pariti": 1018, "parizi": 1048, "park": [1038, 1043, 1045, 1048, 1049], "parmet": 1050, "parmind": 1040, "parquet": 52, "parra": 1041, "parri": [1038, 1039, 1040], "parrot": 351, "pars": [47, 55, 363, 370, 371, 377, 509], "parse_vers": [147, 189, 319, 671], "parser": [47, 149, 264, 284, 319, 323, 497, 1048, 1049], "parsifalxu": 1051, "parsimoni": [413, 1012], "parsing_tim": 47, "parson": [1044, 1046], "part": [0, 44, 45, 67, 71, 84, 94, 103, 113, 120, 123, 126, 137, 140, 142, 146, 152, 159, 160, 161, 165, 175, 183, 193, 246, 248, 258, 264, 265, 267, 285, 305, 312, 315, 317, 353, 365, 371, 373, 376, 378, 382, 384, 389, 390, 394, 396, 404, 406, 407, 408, 412, 413, 415, 416, 418, 446, 449, 494, 495, 496, 522, 532, 538, 543, 575, 585, 586, 587, 614, 626, 794, 870, 888, 890, 891, 892, 893, 894, 895, 896, 991, 992, 994, 999, 1003, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1033, 1041, 1042, 1044, 1046, 1048], "part3": 412, "part_of_speech": 416, "partev": [1047, 1048, 1049, 1050], "parthiv": 1045, "parti": [230, 287, 325, 364, 375, 378, 388, 402, 803, 810, 1033, 1044, 1049, 1050], "partial": [2, 43, 47, 51, 83, 114, 115, 151, 183, 184, 230, 238, 321, 324, 373, 376, 390, 393, 410, 411, 413, 415, 418, 464, 482, 483, 484, 485, 497, 502, 535, 537, 542, 563, 590, 633, 634, 658, 789, 831, 833, 834, 861, 862, 863, 866, 878, 879, 882, 885, 914, 999, 1006, 1016, 1023, 1028, 1030, 1034, 1041, 1042, 1046, 1050], "partial_correl": 51, "partial_depend": [2, 187, 633, 1009, 1034, 1042, 1043, 1044, 1045, 1048, 1049], "partial_fit": [47, 83, 120, 323, 365, 378, 390, 408, 413, 442, 449, 535, 537, 538, 539, 590, 598, 659, 660, 667, 668, 669, 677, 678, 679, 833, 834, 837, 838, 840, 841, 842, 843, 844, 861, 862, 863, 874, 875, 885, 905, 990, 998, 1004, 1006, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1050], "partial_fit_": 1046, "partial_fit_classifi": 47, "partial_fit_param": [598, 833, 834, 837, 838], "partialdependencedisplai": [2, 149, 151, 187, 250, 320, 321, 322, 324, 326, 383, 634, 1009, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "particip": [375, 376, 391, 1026], "particl": 1007, "particular": [0, 43, 50, 53, 64, 72, 74, 75, 93, 103, 109, 118, 125, 128, 143, 146, 149, 150, 174, 181, 186, 187, 212, 214, 220, 244, 264, 267, 271, 273, 279, 290, 299, 303, 310, 319, 320, 323, 352, 353, 359, 363, 364, 370, 371, 374, 375, 376, 378, 380, 381, 382, 384, 385, 389, 390, 394, 408, 409, 412, 413, 415, 416, 417, 418, 446, 469, 473, 497, 545, 564, 610, 654, 659, 664, 673, 675, 685, 688, 713, 729, 786, 837, 930, 932, 992, 994, 996, 998, 1002, 1005, 1006, 1007, 1008, 1010, 1012, 1022, 1026, 1033, 1036, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1050], "particularli": [58, 67, 102, 103, 106, 129, 152, 186, 213, 241, 270, 284, 312, 320, 327, 349, 359, 363, 376, 378, 385, 390, 408, 409, 411, 414, 416, 497, 807, 824, 842, 949, 970, 998, 999, 1002, 1004, 1010, 1022, 1026, 1033, 1038, 1040, 1041, 1047], "partit": [80, 99, 102, 150, 152, 270, 307, 390, 405, 406, 408, 412, 415, 449, 451, 453, 462, 512, 558, 559, 560, 561, 564, 565, 566, 705, 706, 716, 787, 853, 913, 914, 915, 916, 1001, 1005, 1008, 1012, 1018], "partli": [80, 402, 770], "partnership": 1026, "parvu": 373, "pasbi": [1040, 1041], "pascal": 1002, "pascual": 1036, "paskov": 1040, "pass": [2, 43, 46, 47, 58, 59, 70, 73, 140, 149, 151, 165, 195, 198, 213, 240, 242, 243, 246, 249, 250, 252, 260, 264, 268, 271, 317, 319, 322, 327, 345, 353, 359, 363, 364, 365, 371, 376, 377, 378, 381, 382, 383, 384, 385, 388, 390, 399, 402, 404, 407, 408, 409, 412, 413, 415, 416, 418, 419, 420, 425, 426, 430, 431, 437, 438, 440, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 457, 459, 460, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 491, 493, 496, 497, 498, 504, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 582, 583, 589, 590, 591, 592, 594, 595, 598, 603, 608, 609, 611, 612, 618, 621, 627, 632, 633, 635, 636, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 712, 733, 734, 743, 764, 775, 779, 780, 781, 782, 789, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 876, 877, 878, 879, 880, 882, 884, 885, 886, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 925, 930, 931, 932, 939, 943, 944, 948, 949, 951, 953, 956, 958, 961, 962, 971, 972, 975, 985, 990, 991, 992, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1009, 1012, 1015, 1016, 1017, 1022, 1026, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "passiv": [2, 47, 219, 667, 668, 1024, 1028, 1034], "passiveaggress": [365, 416], "passiveaggressiveclassifi": [2, 47, 219, 363, 365, 998, 1003, 1034, 1037, 1038, 1040, 1041, 1044, 1046, 1051], "passiveaggressiveregressor": [2, 365, 998, 1034, 1037, 1040, 1041, 1044, 1046, 1051], "passo": [0, 398, 1033, 1034], "passthrough": [43, 104, 143, 186, 187, 212, 230, 249, 316, 324, 409, 464, 467, 568, 569, 864, 865, 1012, 1042, 1044, 1047, 1048, 1050], "passthrough_numer": [212, 230], "passthroughpassthrough": [187, 316], "past": [50, 52, 380, 381, 384, 388, 391, 412, 413, 415, 539, 556, 557, 679, 1026, 1049], "pat": [629, 992], "patch": [2, 70, 83, 249, 255, 256, 257, 260, 261, 265, 371, 388, 413, 415, 556, 557, 584, 585, 588, 1033, 1041], "patch_height": [584, 585, 588], "patch_siz": [83, 123, 416, 584, 585, 588], "patch_width": [584, 585, 588], "patchextractor": [2, 416, 1049], "patel": [1041, 1043, 1044, 1045, 1047], "path": [2, 47, 55, 183, 192, 198, 199, 202, 204, 207, 216, 228, 283, 347, 355, 370, 374, 376, 380, 384, 385, 390, 402, 441, 445, 450, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 509, 510, 549, 558, 559, 564, 565, 566, 567, 594, 595, 598, 647, 648, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 682, 683, 684, 685, 686, 687, 689, 865, 866, 912, 913, 914, 915, 916, 955, 991, 998, 999, 1008, 1022, 1023, 1033, 1034, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1048, 1049], "path_length": 955, "path_method": [689, 999], "pathak": [1048, 1049], "patheffect": 75, "pathlib": [47, 1048, 1049], "pathlik": [497, 1049], "patholog": [85, 1001, 1039], "pathwai": 377, "pati": 1035, "patienc": [384, 390], "patient": [46, 157, 168, 182, 373, 384, 407, 412, 998], "patil": [1047, 1050], "paton": 1046, "patric": [1045, 1046], "patricio": 1047, "patrick": [1040, 1041, 1046, 1047, 1050, 1051], "patrini": [1038, 1039, 1040], "pattaniyil": 1043, "pattern": [43, 52, 58, 96, 113, 115, 119, 126, 127, 170, 181, 183, 187, 198, 216, 246, 249, 322, 344, 351, 352, 353, 359, 373, 376, 378, 391, 405, 408, 409, 413, 415, 416, 448, 464, 466, 505, 533, 535, 542, 556, 557, 639, 709, 726, 742, 770, 789, 790, 798, 885, 994, 996, 998, 1002, 1003, 1009, 1017, 1019, 1022, 1023, 1026, 1045], "patterson": [495, 1038], "paul": [371, 1036, 1039, 1040, 1041, 1042, 1046, 1047], "paula": [1043, 1044, 1051], "pauli": 1038, "paulo": [1040, 1046, 1048], "paus": 80, "pava": 636, "pavel": [1034, 1042], "pavlo": [1041, 1042], "pavlyk": [1041, 1042, 1043, 1044], "pawel": 1042, "pawe\u0142": [1036, 1040, 1045, 1046], "payn": 1043, "pazzani": 64, "pb_q": [322, 998], "pbl": 146, "pc": [57, 333, 353, 371], "pca": [2, 11, 42, 45, 55, 68, 69, 84, 99, 101, 102, 104, 106, 107, 116, 119, 122, 129, 130, 160, 183, 197, 221, 233, 235, 242, 244, 247, 251, 263, 269, 276, 278, 281, 290, 294, 299, 308, 322, 356, 359, 368, 378, 390, 404, 408, 409, 414, 424, 473, 476, 484, 497, 503, 505, 515, 533, 534, 535, 536, 540, 541, 544, 545, 550, 644, 659, 689, 691, 693, 697, 801, 827, 831, 854, 861, 864, 865, 867, 875, 883, 885, 920, 994, 996, 999, 1005, 1012, 1016, 1018, 1023, 1027, 1028, 1033, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1046, 1047, 1048, 1050, 1051], "pca0": 424, "pca1": [409, 424], "pca2": [409, 424], "pca_2": 116, "pca__n_compon": 105, "pca_back_proj_ax": 125, "pca_estim": 120, "pca_proj_ax": 125, "pca_scor": 127, "pcapca": [104, 251], "pcd": [861, 1007], "pchelintsev": 1045, "pclass": [103, 188, 253, 319, 323, 324], "pcolor": 171, "pcolormesh": [70, 152, 161, 197, 293, 298, 336, 340, 344, 632], "pcr": [116, 411], "pd": [43, 51, 62, 103, 104, 134, 140, 141, 146, 151, 167, 181, 185, 186, 187, 188, 189, 193, 198, 202, 212, 216, 220, 230, 250, 253, 260, 268, 270, 271, 273, 281, 282, 284, 287, 315, 316, 317, 322, 323, 347, 351, 352, 381, 390, 409, 464, 466, 628, 629, 630, 631, 633, 779, 929, 931, 932, 991, 992, 1009, 1012, 1044, 1046, 1047, 1048, 1050], "pd2000": 1002, "pd_": 1009, "pd_line_kw": 633, "pd_result": 633, "pdb": 384, "pdbcl": 384, "pdf": [168, 270, 295, 310, 373, 376, 408, 417, 442, 449, 532, 535, 538, 542, 642, 645, 650, 659, 665, 667, 668, 672, 677, 680, 683, 684, 686, 687, 693, 842, 854, 861, 898, 900, 998, 1015, 1018, 1025, 1029, 1033], "pdist": [693, 779, 782], "pdp": [2, 633, 1009, 1047], "pdp_lim": 633, "pdp_line_kw": 633, "pe": 584, "pe_tran": 584, "peai": 1042, "peak": [43, 52, 64, 187, 406, 412, 1047], "pear": 1003, "pearson": [2, 607, 610, 1046], "pearu": 1033, "pedersen": [1037, 1049], "pedigo": [1045, 1046], "pedregosa": [0, 398, 1033, 1034, 1035, 1036, 1037, 1039], "pedro": [1034, 1036, 1037, 1041], "peek": [187, 376, 1009], "peer": 1026, "peev": [1041, 1044], "pegaso": 1016, "pei": [408, 1040], "peixinho": 1047, "pelennor": 1047, "penal": [2, 53, 66, 113, 154, 198, 202, 206, 212, 216, 228, 230, 283, 315, 347, 408, 410, 413, 415, 417, 469, 470, 471, 472, 473, 474, 475, 476, 478, 562, 563, 648, 653, 654, 662, 664, 677, 706, 716, 735, 787, 796, 878, 905, 906, 912, 998, 1002, 1004, 1006, 1016, 1017], "penalis": [210, 227, 697], "penalti": [2, 25, 46, 49, 66, 113, 183, 192, 193, 198, 201, 202, 206, 212, 216, 219, 227, 228, 241, 278, 283, 305, 322, 333, 345, 351, 363, 384, 388, 410, 413, 417, 471, 472, 473, 474, 475, 476, 478, 503, 532, 538, 539, 540, 541, 543, 544, 548, 549, 598, 644, 647, 648, 649, 650, 653, 654, 655, 658, 659, 660, 661, 662, 663, 669, 670, 671, 673, 677, 679, 681, 682, 688, 815, 885, 905, 906, 908, 910, 911, 912, 991, 998, 1001, 1006, 1012, 1016, 1017, 1023, 1035, 1038, 1040, 1042, 1043, 1045, 1046, 1048, 1049], "peng": [680, 998, 1039, 1040, 1041, 1043, 1045], "peopl": [2, 45, 102, 186, 248, 273, 351, 352, 364, 365, 371, 373, 375, 376, 380, 391, 414, 494, 495, 642, 842, 1021], "pep": [51, 384, 1033], "pep073": 377, "pep257": 390, "pep440": 380, "pep8": [378, 380, 384], "pepsi": 51, "per": [43, 49, 58, 70, 86, 97, 139, 140, 143, 175, 177, 186, 187, 212, 227, 230, 249, 253, 256, 264, 266, 277, 279, 310, 316, 321, 326, 327, 347, 351, 353, 363, 371, 372, 376, 381, 382, 385, 388, 390, 406, 408, 412, 413, 414, 415, 416, 418, 446, 448, 450, 457, 461, 464, 468, 487, 497, 501, 503, 504, 505, 509, 511, 513, 516, 524, 533, 535, 536, 537, 540, 542, 544, 550, 551, 562, 563, 570, 584, 589, 592, 611, 612, 633, 634, 642, 643, 659, 660, 667, 668, 669, 672, 674, 675, 676, 677, 679, 693, 697, 714, 717, 721, 723, 742, 755, 759, 760, 782, 784, 798, 799, 826, 833, 834, 835, 837, 838, 841, 843, 861, 864, 870, 872, 874, 875, 878, 879, 885, 886, 903, 905, 906, 907, 908, 909, 910, 911, 936, 937, 949, 976, 991, 994, 998, 1001, 1002, 1003, 1006, 1009, 1016, 1017, 1018, 1022, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1045, 1046, 1047, 1049, 1050], "perc": 265, "percal": 382, "percent": [134, 493, 601, 1015], "percent10": [249, 493], "percentag": [2, 52, 87, 128, 143, 204, 230, 265, 273, 276, 412, 417, 535, 542, 545, 550, 594, 595, 649, 670, 681, 704, 735, 747, 819, 820, 821, 835, 917, 919, 1003, 1018, 1035, 1039, 1045, 1046], "percentil": [2, 49, 52, 103, 146, 149, 249, 253, 310, 363, 593, 596, 597, 599, 600, 601, 604, 607, 633, 634, 749, 1012, 1038, 1046], "percentile_5_predict": 52, "percentile_95_predict": 52, "percentile_perf_in_u": 49, "percentiles_class": 265, "percept": [163, 187, 1009], "perceptron": [2, 47, 67, 142, 152, 161, 172, 174, 183, 219, 222, 228, 250, 304, 312, 313, 334, 345, 365, 388, 416, 515, 516, 523, 667, 677, 831, 861, 862, 863, 866, 885, 1000, 1003, 1007, 1016, 1023, 1024, 1028, 1037, 1039, 1040, 1041, 1045], "percol": 74, "perdisci": [408, 442], "perdok": 1048, "pere": 1050, "peredachi": [608, 609], "pereira": [1038, 1041, 1042], "peretti": 1048, "perez": [1041, 1048], "perf_count": 249, "perfect": [58, 63, 72, 102, 112, 123, 125, 212, 351, 352, 376, 408, 412, 554, 555, 691, 695, 705, 706, 709, 718, 727, 729, 732, 738, 744, 757, 758, 786, 787, 796, 998, 1002, 1005, 1017, 1026, 1047], "perfectli": [63, 64, 72, 273, 285, 344, 393, 408, 415, 438, 568, 607, 705, 706, 716, 718, 737, 738, 758, 787, 796, 878, 997, 999, 1002, 1017, 1046, 1047], "perform": [2, 25, 27, 29, 30, 41, 43, 46, 52, 57, 61, 62, 63, 68, 71, 73, 75, 82, 86, 90, 91, 92, 93, 94, 95, 97, 99, 100, 102, 103, 106, 109, 116, 123, 129, 132, 134, 140, 143, 144, 145, 147, 148, 149, 153, 154, 159, 163, 166, 167, 168, 171, 179, 181, 182, 183, 186, 187, 188, 189, 191, 198, 202, 209, 212, 214, 216, 218, 219, 220, 229, 230, 233, 234, 236, 239, 244, 247, 249, 256, 257, 260, 262, 264, 265, 266, 267, 268, 270, 271, 272, 275, 276, 278, 279, 281, 283, 284, 287, 289, 290, 303, 308, 310, 312, 314, 316, 317, 319, 325, 326, 328, 330, 331, 340, 343, 344, 347, 351, 353, 357, 359, 362, 364, 365, 371, 373, 378, 379, 380, 382, 384, 385, 388, 389, 390, 393, 399, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 426, 430, 440, 442, 443, 444, 446, 447, 448, 450, 452, 454, 455, 459, 461, 468, 469, 482, 483, 484, 485, 495, 503, 513, 516, 532, 533, 534, 536, 538, 543, 544, 545, 546, 547, 549, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 595, 602, 603, 604, 611, 612, 628, 631, 632, 639, 641, 646, 652, 655, 656, 657, 659, 665, 666, 667, 668, 669, 671, 674, 676, 677, 678, 679, 683, 684, 686, 688, 690, 691, 694, 695, 698, 704, 705, 706, 708, 709, 713, 714, 727, 730, 731, 739, 741, 743, 756, 757, 758, 779, 784, 785, 787, 788, 789, 795, 796, 797, 798, 799, 801, 804, 805, 812, 813, 815, 819, 826, 827, 828, 830, 831, 834, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 852, 854, 855, 860, 861, 862, 863, 865, 866, 868, 871, 872, 874, 875, 877, 878, 879, 881, 882, 885, 886, 888, 890, 891, 892, 894, 895, 896, 900, 901, 903, 907, 908, 909, 910, 911, 913, 914, 915, 916, 931, 932, 974, 985, 990, 991, 992, 994, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "performancetip": 382, "perhap": [102, 142, 373, 375, 384, 390, 414, 1022], "perimet": [168, 373], "period": [2, 52, 149, 170, 175, 179, 380, 390, 391, 406, 418, 616, 822, 884, 1041, 1046, 1048], "periodic_spline_transform": 43, "periodicity_bound": [170, 175, 179, 616], "peripheri": 408, "perla": 1036, "perm_scores_iri": 276, "perm_scores_rand": 276, "perm_sorted_idx": 189, "permalink": 380, "perman": 384, "permiss": [375, 380, 391, 394, 395, 1026, 1048], "permit": [409, 467, 589, 590, 592, 801, 804, 805, 815, 827, 866, 867, 1002, 1003, 1004, 1039], "permut": [2, 58, 59, 72, 112, 147, 161, 163, 183, 184, 228, 262, 270, 317, 332, 393, 403, 408, 415, 417, 464, 497, 501, 505, 560, 561, 565, 566, 628, 631, 635, 680, 705, 706, 718, 737, 738, 756, 758, 796, 818, 820, 830, 831, 865, 879, 910, 913, 914, 949, 970, 972, 975, 1002, 1016, 1023, 1028, 1033, 1039, 1046, 1048], "permutation_import": [2, 141, 147, 188, 189, 319, 415, 554, 555, 558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916, 1010, 1043, 1045, 1046, 1050], "permutation_scor": 830, "permutation_test_scor": [2, 276, 399, 412, 1033, 1040, 1045], "permuted_categori": 317, "perp_tol": 537, "perpendicular": [70, 345], "perperogl": 1012, "perplex": [183, 231, 232, 234, 236, 290, 515, 526, 537, 693, 999, 1023, 1038, 1040, 1047], "perri": 1043, "perrin": 1039, "perrot": [0, 1033], "persian": 1021, "persist": [384, 388, 413, 446, 611, 612, 861, 1007, 1021, 1028, 1039, 1042], "persola": 1041, "person": [45, 186, 264, 273, 371, 375, 412, 416, 494, 495, 496, 1012, 1041], "personal_statu": 264, "perspect": [88, 93, 212, 284, 363, 371, 388, 391, 531, 644, 905, 995], "pertin": 212, "perturb": [186, 229, 308, 413, 415, 1001], "peru": [50, 303, 371, 499], "pervas": [359, 376], "pessimist": [145, 415], "pessoa": 1046, "pestrickland": 1039, "pet": [322, 326, 789, 1002], "pet_cat": 322, "pet_dog": 322, "pet_fish": 322, "petal": [126, 128, 130, 142, 253, 321, 324, 373, 409, 918, 1018], "petal_col": 324, "petar": 1048, "pete": [1040, 1044, 1045], "peter": [0, 96, 398, 408, 448, 450, 457, 650, 793, 794, 998, 1002, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1048, 1049, 1050], "peterlongo": 1050, "peterson": [1033, 1035], "petfood": 1026, "petrov": [1040, 1041, 1049], "petrushev": 1042, "pe\u00f1a": 1037, "pfaffel": 1046, "pfahring": [836, 1003], "pfe": 51, "pfister": 1012, "pfizer": 51, "pft": 213, "pg": [51, 382, 650, 998, 1038], "pg_i": 650, "pgithub": 1045, "ph": 1045, "pham": [191, 994, 1040], "phan": 413, "pharmaceut": 373, "phase": [43, 198, 207, 363, 628, 994, 999, 1005, 1026, 1041, 1043], "phase_nois": 75, "phd": [0, 408, 415, 1022, 1026], "phenol": 373, "phenomena": 175, "phenomenon": [352, 1012], "phi": [75, 413, 415, 744, 871, 994, 1002, 1012, 1017], "phi_coeffici": 1002, "phil": [1038, 1049], "philipp": [1035, 1036, 1039, 1048], "phillip": [2, 50, 303, 371, 499], "phlypo": 1036, "phongpanagnam": 1046, "phongpanangam": 1046, "photogrammetr": 998, "php": 1002, "phrase": 416, "phy": [608, 609], "phyo": 1047, "physic": [2, 102, 140, 364, 506, 966, 998, 1049], "physician": 407, "physiolog": [273, 373], "pi": [43, 53, 70, 74, 75, 121, 129, 151, 153, 163, 170, 194, 198, 200, 207, 213, 234, 255, 256, 257, 260, 261, 285, 303, 320, 326, 357, 394, 414, 418, 517, 518, 519, 616, 643, 996, 997, 998, 1004], "pianomania": 1038, "pick": [88, 93, 189, 247, 278, 323, 329, 371, 376, 380, 408, 415, 443, 460, 524, 674, 915, 916, 991, 998, 999, 1001, 1016, 1044], "pickl": [380, 390, 416, 590, 845, 846, 1021, 1022, 1028, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050], "pickleabl": [869, 1039], "pickup": 1041, "pico": [1036, 1037], "pict": [835, 1003], "pictur": [51, 55, 59, 71, 86, 99, 123, 183, 243, 261, 371, 391, 408, 413, 416, 462, 494, 495, 522, 1022, 1023], "piec": [70, 81, 213, 364, 1001], "piecewis": [129, 322, 405, 993, 998, 1012, 1018], "pierr": [1033, 1041, 1042, 1044, 1046, 1048, 1050, 1051], "pierreablin": 1041, "pierreattard": [1046, 1047], "pierretallott": [1041, 1042, 1043], "pierron": 1036, "piet": [1047, 1048], "pieter": [55, 1039, 1040, 1047], "pietro": [1033, 1036, 1050], "pietruh": 1041, "pig": 784, "pillow": [376, 394, 401], "pim": 1042, "pin": [382, 402], "pinaki": 1041, "pinbal": [2, 52, 146, 149, 322, 415, 563, 671, 724, 749, 998, 1046, 1047], "pinball_loss_05": 52, "pinball_loss_50": 52, "pinball_loss_95": 52, "ping": [898, 1014, 1039, 1040], "pink": 194, "pinki": 1047, "pinot": 316, "pinto": 1033, "pintor": 1044, "pinvh": [1040, 1042], "piontek": 1049, "piotr": [1041, 1042, 1051], "pip": [290, 319, 320, 321, 322, 323, 324, 325, 326, 327, 364, 374, 376, 380, 382, 384, 394, 402, 404, 1018], "pip3": [374, 394], "pipe": [104, 105, 143, 166, 246, 251, 269, 316, 321, 322, 389, 399, 409, 416, 591, 865, 890, 891, 893, 894, 895, 896, 991, 1012], "pipe_sgd": 226, "pipegraph": 388, "pipelin": [2, 7, 43, 67, 87, 91, 103, 106, 107, 116, 139, 140, 143, 160, 162, 164, 166, 167, 168, 181, 182, 187, 188, 191, 193, 200, 202, 212, 213, 218, 226, 230, 233, 238, 239, 240, 242, 244, 249, 250, 253, 262, 264, 267, 269, 277, 278, 281, 284, 285, 290, 292, 293, 298, 299, 305, 308, 312, 315, 317, 319, 320, 321, 322, 323, 324, 325, 333, 351, 352, 359, 363, 368, 370, 371, 376, 379, 390, 399, 402, 412, 416, 418, 422, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 488, 503, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 608, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 698, 699, 701, 702, 703, 714, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 815, 819, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 992, 994, 998, 1005, 1006, 1011, 1012, 1016, 1017, 1021, 1022, 1023, 1024, 1026, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1050], "pipelineifittedpipelin": [103, 139, 165, 186, 188, 240, 250, 253, 277, 323], "pipelineinot": [154, 241, 251, 271, 284, 316, 320], "pipelinepipelin": [103, 104, 251, 264], "pita": 1050, "pitfal": [168, 183, 184, 185, 188, 216, 217, 270, 321, 389, 390, 393, 412, 465, 467, 497, 654, 673, 674, 702, 754, 816, 828, 831, 866, 878, 885, 998, 1023, 1028], "pitkin": [187, 1009], "pitt": 57, "pitter": 1048, "pivot": [80, 281, 282], "pivot_t": 281, "pixel": [2, 44, 45, 53, 58, 68, 81, 86, 120, 166, 191, 243, 268, 307, 308, 373, 408, 413, 416, 417, 494, 495, 496, 586, 587, 608, 609, 1005, 1007, 1018], "pixelwis": 120, "pixi": 402, "piyg": 312, "pkdd": 0, "pkg": 374, "pkgsrc": 394, "pkl": 402, "pl": [2, 52, 105, 116, 175, 326, 373, 411, 482, 483, 484, 485, 1038], "place": [2, 43, 93, 240, 250, 294, 363, 376, 377, 378, 381, 383, 391, 406, 416, 418, 441, 442, 445, 446, 482, 483, 484, 516, 582, 591, 629, 631, 632, 769, 782, 798, 888, 890, 891, 892, 893, 894, 895, 896, 980, 981, 1021, 1033, 1040, 1043, 1044, 1046, 1050, 1051], "placehold": [57, 380, 628, 629, 630, 631, 816, 817, 820, 821, 990, 992], "plagre": 1040, "plai": [121, 147, 172, 197, 221, 263, 301, 336, 337, 363], "plain": [342, 418, 658, 1016], "plan": [51, 370, 374, 376, 377, 391, 402, 1012, 1036], "planar": 408, "plane": [51, 168, 224, 244, 296, 342, 344, 345, 349, 373, 452, 462, 996, 998, 1017], "plant": [276, 279, 280, 369, 1002, 1028], "plasma": 310, "plasma_r": 310, "plateau": [140, 144, 167, 264, 268, 272], "platform": [379, 390, 391, 1021, 1025, 1026, 1038, 1041, 1042, 1044, 1046, 1047, 1050, 1051], "platt": [406, 437, 907, 908, 910, 911, 1017], "platypu": 351, "pldtc325": 1040, "pleas": [0, 2, 51, 55, 63, 103, 104, 139, 141, 147, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 216, 240, 241, 242, 244, 246, 249, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 290, 300, 308, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 331, 344, 357, 358, 364, 370, 371, 374, 376, 377, 378, 380, 384, 388, 389, 390, 394, 399, 402, 404, 408, 415, 416, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 632, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 828, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 1002, 1006, 1012, 1016, 1017, 1021, 1022, 1025, 1033, 1036, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "pleasant": [375, 1026], "plenti": 62, "plgreenliru": 1044, "plo": [370, 608, 609], "plot": [2, 43, 44, 45, 50, 51, 52, 54, 62, 63, 64, 65, 67, 68, 69, 71, 72, 75, 77, 78, 87, 88, 89, 91, 92, 93, 94, 95, 98, 104, 105, 106, 107, 110, 111, 112, 116, 117, 120, 123, 124, 127, 128, 129, 130, 133, 134, 136, 137, 138, 139, 141, 144, 145, 146, 148, 149, 151, 152, 153, 161, 163, 164, 166, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 186, 188, 189, 191, 192, 196, 197, 200, 201, 202, 203, 208, 210, 211, 212, 213, 214, 215, 218, 219, 220, 222, 224, 225, 227, 228, 229, 230, 234, 235, 236, 237, 238, 239, 242, 243, 245, 247, 248, 253, 255, 256, 257, 259, 261, 262, 263, 264, 265, 270, 271, 273, 275, 276, 280, 281, 282, 283, 284, 285, 287, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 305, 306, 307, 310, 311, 312, 313, 314, 315, 317, 320, 323, 324, 325, 326, 330, 331, 332, 334, 335, 336, 340, 341, 342, 345, 346, 347, 348, 349, 352, 353, 354, 355, 358, 376, 379, 385, 388, 393, 394, 403, 406, 408, 410, 412, 414, 415, 438, 441, 446, 450, 456, 464, 471, 497, 502, 503, 505, 513, 524, 554, 558, 561, 563, 565, 566, 570, 571, 611, 623, 632, 633, 634, 658, 659, 673, 677, 698, 699, 701, 702, 703, 704, 719, 728, 736, 762, 783, 785, 788, 789, 790, 801, 807, 818, 824, 826, 827, 828, 829, 832, 834, 843, 847, 863, 866, 878, 879, 880, 882, 885, 905, 907, 910, 913, 914, 919, 995, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1016, 1017, 1018, 1021, 1022, 1023, 1028, 1034, 1036, 1037, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "plot_": [322, 394], "plot_2d": [118, 232], "plot_3d": 232, "plot_accuraci": 47, "plot_adaboost_multiclass": [134, 1023], "plot_adaboost_regress": [135, 1023], "plot_adaboost_twoclass": [136, 1023], "plot_adjusted_for_chance_measur": [72, 1023], "plot_affinity_propag": [73, 1023], "plot_agglomerative_clust": [74, 1023], "plot_agglomerative_clustering_metr": [75, 1023], "plot_agglomerative_dendrogram": [76, 1023], "plot_all_sc": [310, 1023], "plot_anomaly_comparison": [239, 1023], "plot_ard": [193, 645, 1023], "plot_arg": 306, "plot_bayesian_ridge_curvefit": [194, 1023], "plot_benchmark_throughput": 49, "plot_bias_vari": [137, 1023], "plot_bicluster_newsgroup": [57, 1023], "plot_birch_vs_minibatchkmean": [77, 1023], "plot_bisect_kmean": [78, 1023], "plot_caching_nearest_neighbor": [292, 1023], "plot_calibr": [61, 376, 1023], "plot_calibration_curv": [62, 1023], "plot_calibration_multiclass": [63, 1023], "plot_causal_interpret": [185, 1023], "plot_chance_level": [249, 264, 277, 279, 280, 701, 703, 1049], "plot_classif": [293, 1023], "plot_classification_prob": [66, 1023], "plot_classifier_chain_yeast": [289, 1023], "plot_classifier_comparison": [67, 1023], "plot_clust": 85, "plot_cluster_comparison": [79, 1023], "plot_coin_segment": [80, 1023], "plot_coin_ward_segment": [81, 1023], "plot_color": [136, 356], "plot_column_transform": [102, 1023], "plot_column_transformer_mixed_typ": [103, 1023], "plot_compare_calibr": [64, 1023], "plot_compare_cross_decomposit": [115, 1023], "plot_compare_gpr_krr": [170, 1023], "plot_compare_method": [232, 1023], "plot_compare_reduct": [104, 1023], "plot_concentration_prior": [255, 1023], "plot_confusion_matrix": [263, 319, 1023, 1043, 1044, 1045, 1046], "plot_cost_complexity_prun": [355, 1023], "plot_cost_sensitive_learn": [264, 1023], "plot_covariance_estim": [109, 1023], "plot_custom_kernel": [336, 1023], "plot_cv_diabet": [159, 1023], "plot_cv_indic": [265, 1023], "plot_cv_predict": [266, 1023], "plot_cyclical_feature_engin": [43, 1023], "plot_dbscan": [82, 1023], "plot_decision_funct": 349, "plot_dendrogram": 76, "plot_det": [267, 1023], "plot_det_curv": [1045, 1046], "plot_dict_face_patch": [83, 1023], "plot_digit": 44, "plot_digits_agglomer": [84, 1023], "plot_digits_classif": [68, 1023], "plot_digits_classification_exercis": [160, 1023], "plot_digits_denois": [44, 1023], "plot_digits_kde_sampl": [294, 1023], "plot_digits_linkag": [85, 1023], "plot_digits_pip": [105, 1023], "plot_discret": [311, 1023], "plot_discretization_classif": [312, 1023], "plot_discretization_strategi": [313, 1023], "plot_display_object_visu": [240, 1023], "plot_distribut": 310, "plot_document_classification_20newsgroup": [351, 1023], "plot_document_clust": [352, 1023], "plot_elastic_net_precomputed_gram_matrix_with_weighted_sampl": [195, 1023], "plot_ellips": [70, 255], "plot_embed": 233, "plot_ensemble_oob": [138, 1023], "plot_estimator_represent": [241, 1023], "plot_f_test_vs_mi": [163, 1023], "plot_face_compress": [86, 1023], "plot_face_recognit": [45, 1023], "plot_faces_decomposit": [120, 1023], "plot_feature_agglomeration_vs_univariate_select": [87, 1023], "plot_feature_effect": 351, "plot_feature_select": [164, 1023], "plot_feature_selection_pipelin": [165, 1023], "plot_feature_transform": [139, 1023], "plot_feature_union": [106, 1023], "plot_forest_hist_grad_boosting_comparison": [140, 1023], "plot_forest_import": [141, 1023], "plot_forest_iri": [142, 1023], "plot_galleri": [45, 120], "plot_gmm": [256, 1023], "plot_gmm_covari": [257, 1023], "plot_gmm_init": [258, 1023], "plot_gmm_pdf": [259, 1023], "plot_gmm_select": [260, 1023], "plot_gmm_sin": [261, 1023], "plot_gpc": [171, 1023], "plot_gpc_iri": [172, 1023], "plot_gpc_isoprob": [173, 1023], "plot_gpc_xor": [174, 1023], "plot_gpr_co2": [175, 1023], "plot_gpr_noisi": [176, 1023], "plot_gpr_noisy_target": [177, 1023], "plot_gpr_on_structured_data": [178, 1023], "plot_gpr_prior_posterior": [179, 1023], "plot_gpr_sampl": 179, "plot_gradient_boosting_categor": [143, 1023], "plot_gradient_boosting_early_stop": [144, 1023], "plot_gradient_boosting_oob": [145, 1023], "plot_gradient_boosting_quantil": [146, 1023], "plot_gradient_boosting_regress": [147, 1023], "plot_gradient_boosting_regular": [148, 1023], "plot_grid_search_digit": [268, 1023], "plot_grid_search_refit_cal": [269, 1023], "plot_grid_search_stat": [270, 1023], "plot_grid_search_text_feature_extract": [271, 1023], "plot_hashing_vs_dict_vector": [353, 1023], "plot_hdbscan": [88, 1023], "plot_hgbt_regress": [149, 1023], "plot_huber_vs_ridg": [196, 1023], "plot_hyperplan": [205, 221, 247], "plot_ica_blind_source_separ": [121, 1023], "plot_ica_vs_pca": [122, 1023], "plot_idx": 142, "plot_image_denois": [123, 1023], "plot_incremental_pca": [124, 1023], "plot_indic": 273, "plot_inductive_clust": [89, 1023], "plot_influ": 46, "plot_info": 143, "plot_iris_dtc": [356, 1023], "plot_iris_exercis": [161, 1023], "plot_iris_logist": [197, 1023], "plot_iris_svc": [337, 1023], "plot_isolation_forest": [150, 1023], "plot_isotonic_regress": [242, 1023], "plot_iterative_imputer_variants_comparison": [181, 1023], "plot_johnson_lindenstrauss_bound": [243, 1023], "plot_kde_1d": [295, 1023], "plot_kernel_approxim": [244, 1023], "plot_kernel_pca": [125, 1023], "plot_kernel_ridge_regress": [245, 1023], "plot_kind": 43, "plot_kmeans_assumpt": [90, 1023], "plot_kmeans_digit": [91, 1023], "plot_kmeans_plusplu": [92, 1023], "plot_kmeans_silhouette_analysi": [93, 1023], "plot_kmeans_stability_low_dim_dens": [94, 1023], "plot_label_propagation_digit": [329, 1023], "plot_label_propagation_digits_active_learn": [330, 1023], "plot_label_propagation_structur": [331, 1023], "plot_lasso_and_elasticnet": [198, 1023], "plot_lasso_dense_vs_sparse_data": [199, 1023], "plot_lasso_lars_": [200, 1023], "plot_lasso_lasso_lars_elasticnet_path": [201, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 1023], "plot_lasso_model_select": [202, 648, 654, 1023], "plot_lda": [69, 1023], "plot_lda_qda": [70, 1023], "plot_learning_curv": [272, 1023], "plot_likelihood_ratio": [273, 1023], "plot_linear_model_coefficient_interpret": [186, 1023], "plot_linearsvc_support_vector": [338, 1023], "plot_linkage_comparison": [95, 1023], "plot_lle_digit": [233, 1023], "plot_lof_novelty_detect": [296, 1023], "plot_lof_outlier_detect": [297, 1023], "plot_logist": [203, 1023], "plot_logistic_l1_l2_spars": [204, 1023], "plot_logistic_multinomi": [205, 1023], "plot_logistic_path": [206, 1023], "plot_lw_vs_oa": [110, 1023], "plot_mahalanobis_dist": [111, 1023], "plot_manifold_spher": [234, 1023], "plot_map_data_to_norm": [314, 1023], "plot_md": [235, 1023], "plot_mean_shift": [96, 1023], "plot_metadata_rout": [246, 1023], "plot_method": [48, 70, 197, 226, 293, 298, 336, 338, 339, 341, 342, 344, 632], "plot_mini_batch_kmean": [97, 1023], "plot_missing_valu": [182, 1023], "plot_mlp_alpha": [305, 1023], "plot_mlp_training_curv": [306, 1023], "plot_mnist_filt": [307, 1023], "plot_model_complexity_influ": [46, 1023], "plot_monotonic_constraint": [151, 1023], "plot_multi_metric_evalu": [274, 1023], "plot_multi_task_lasso_support": [207, 1023], "plot_multiclass_overview": [287, 1023], "plot_multilabel": [247, 1023], "plot_multioutput_face_complet": [248, 1023], "plot_n_features_influ": 49, "plot_nca_classif": [298, 1023], "plot_nca_dim_reduct": [299, 1023], "plot_nca_illustr": [300, 1023], "plot_nearest_centroid": [301, 1023], "plot_nested_cross_validation_iri": [275, 1023], "plot_nnl": [208, 1023], "plot_num": [79, 95, 239], "plot_obs_pr": 230, "plot_ol": [209, 1023], "plot_ols_ridge_vari": [210, 1023], "plot_omp": [211, 1023], "plot_on_dataset": 306, "plot_oneclass": [339, 1023], "plot_opt": [98, 1023], "plot_out_of_core_classif": [47, 1023], "plot_outlier_detection_bench": [249, 1023], "plot_outlier_detection_win": [48, 1023], "plot_partial_depend": [187, 319, 320, 321, 1023, 1038, 1042, 1043, 1044, 1045, 1046, 1047], "plot_partial_dependence_visualization_api": [250, 1023], "plot_pca_iri": [126, 1023], "plot_pca_vs_fa_model_select": [127, 1023], "plot_pca_vs_lda": [128, 1023], "plot_pcr_vs_pl": [116, 1023], "plot_permutation_import": [188, 189, 1023], "plot_permutation_importance_multicollinear": [189, 1023], "plot_permutation_tests_for_classif": [276, 1023], "plot_pipeline_displai": [251, 1023], "plot_poisson_regression_non_normal_loss": [212, 1023], "plot_polynomial_interpol": [213, 880, 884, 1023], "plot_precision_recal": [277, 1023], "plot_precision_recall_curv": [319, 1043, 1045, 1046], "plot_prediction_lat": [49, 1023], "plot_quantile_regress": [214, 1023], "plot_random_forest_embed": [152, 1023], "plot_random_forest_regression_multioutput": [153, 1023], "plot_random_multilabel_dataset": [118, 1023], "plot_randomized_search": [278, 1023], "plot_rang": 136, "plot_ransac": [215, 1023], "plot_rbf_paramet": [340, 1023], "plot_rbm_logistic_classif": [308, 1023], "plot_regress": [302, 1023], "plot_release_highlights_0_22_0": [319, 1023], "plot_release_highlights_0_23_0": [320, 1023], "plot_release_highlights_0_24_0": [321, 1023], "plot_release_highlights_1_0_0": [322, 1023], "plot_release_highlights_1_1_0": [323, 1023], "plot_release_highlights_1_2_0": [324, 1023], "plot_release_highlights_1_3_0": [325, 1023], "plot_release_highlights_1_4_0": [326, 1023], "plot_release_highlights_1_5_0": [327, 1023], "plot_result": [70, 143, 255, 256, 261], "plot_rfe_digit": [166, 1023], "plot_rfe_with_cross_valid": [167, 1023], "plot_ridge_coeff": [216, 1023], "plot_ridge_path": [217, 1023], "plot_robust_fit": [218, 1023], "plot_robust_vs_empirical_covari": [112, 1023], "plot_roc": [279, 1023], "plot_roc_crossv": [280, 1023], "plot_roc_curv": [319, 1043, 1045], "plot_roc_curve_visualization_api": [252, 1023], "plot_roc_pr_curv": 264, "plot_sampl": [122, 261], "plot_scalable_poly_kernel": [191, 1023], "plot_scaling_import": [315, 1023], "plot_scatt": 89, "plot_segmentation_toi": [99, 1023], "plot_select_from_model_diabet": [168, 1023], "plot_self_training_varying_threshold": [332, 1023], "plot_semi_supervised_newsgroup": [333, 1023], "plot_semi_supervised_versus_svm_iri": [334, 1023], "plot_separating_hyperplan": [341, 1023], "plot_separating_hyperplane_unbalanc": [342, 1023], "plot_set_output": [253, 1023], "plot_sgd_comparison": [219, 1023], "plot_sgd_early_stop": [220, 1023], "plot_sgd_iri": [221, 1023], "plot_sgd_loss_funct": [222, 1023], "plot_sgd_penalti": [223, 1023], "plot_sgd_separating_hyperplan": [224, 1023], "plot_sgd_weighted_sampl": [225, 1023], "plot_sgdocsvm_vs_ocsvm": [226, 1023], "plot_sparse_cod": [129, 1023], "plot_sparse_cov": [113, 1023], "plot_sparse_logistic_regression_20newsgroup": [227, 1023], "plot_sparse_logistic_regression_mnist": [228, 1023], "plot_species_distribut": 50, "plot_species_distribution_model": [50, 1023], "plot_species_kd": [303, 1023], "plot_spectral_biclust": [58, 1023], "plot_spectral_coclust": [59, 1023], "plot_stack_predictor": [154, 1023], "plot_step": [136, 142, 356], "plot_step_coars": 142, "plot_stock_market": [51, 1023], "plot_subfigur": 247, "plot_successive_halving_heatmap": [281, 1023], "plot_successive_halving_iter": [282, 1023], "plot_surfac": 187, "plot_svm_anova": [343, 1023], "plot_svm_kernel": [344, 1023], "plot_svm_margin": [345, 1023], "plot_svm_regress": [346, 1023], "plot_svm_scale_c": [347, 1023], "plot_svm_tie_break": [348, 1023], "plot_swissrol": [236, 1023], "plot_t_sne_perplex": [237, 1023], "plot_target_encod": [316, 1023], "plot_target_encoder_cross_v": [317, 1023], "plot_theilsen": [229, 1023], "plot_time_series_lagged_featur": [52, 1023], "plot_titl": 255, "plot_tomography_l1_reconstruct": [53, 1023], "plot_top_word": 54, "plot_topics_extraction_with_nmf_lda": [54, 1023], "plot_train_error_vs_test_error": [283, 1023], "plot_training_data_with_decision_boundari": 344, "plot_transformed_target": [107, 1023], "plot_tre": [2, 356, 358, 1018, 1042, 1044, 1045, 1046, 1048, 1049, 1051], "plot_tree_regress": [357, 1023], "plot_tuned_decision_threshold": [284, 1023], "plot_tweedie_regression_insurance_claim": [230, 1023], "plot_underfitting_overfit": [285, 1023], "plot_unveil_tree_structur": [358, 1023], "plot_varimax_fa": [130, 1023], "plot_voting_decision_region": [155, 1023], "plot_voting_proba": [156, 1023], "plot_voting_regressor": [157, 1023], "plot_ward_structured_vs_unstructur": [100, 1023], "plot_weighted_sampl": [349, 1023], "plotli": [140, 271, 376, 394, 401], "pls1": [411, 484], "pls2": [411, 484], "plsca": [115, 483], "plscanon": [2, 115, 482, 484, 485, 1003, 1024, 1028, 1037, 1041, 1043, 1045, 1047, 1051], "plsregress": [2, 115, 116, 1003, 1024, 1028, 1040, 1043, 1045, 1047, 1049, 1051], "plssvd": [2, 482, 483, 1024, 1028, 1045, 1047, 1051], "plsw2a": 411, "plt": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 372, 383, 438, 503, 632, 633, 698, 699, 701, 702, 703, 807, 824, 919, 1009, 1030], "plu": [277, 373, 381, 680, 836, 839, 1003, 1016], "plug": [413, 998, 1026], "plugin": 394, "plural": 1039, "pm": [179, 187, 280, 415, 1002], "pmlr": 697, "pmml": 1021, "png": [0, 68, 917], "pnucci": 1049, "po": [147, 235, 416], "podshumok": [1039, 1040], "poesio": 717, "poetri": 402, "poh": [1041, 1042], "point": [2, 8, 37, 43, 48, 50, 52, 53, 63, 67, 72, 73, 75, 76, 82, 85, 88, 91, 93, 97, 100, 111, 112, 115, 118, 119, 121, 123, 125, 126, 134, 136, 140, 142, 143, 144, 149, 152, 167, 168, 172, 177, 178, 183, 186, 187, 188, 193, 197, 202, 205, 207, 209, 210, 212, 213, 214, 216, 218, 221, 224, 225, 229, 230, 232, 233, 234, 235, 236, 239, 242, 244, 257, 261, 262, 263, 267, 271, 272, 273, 277, 279, 280, 287, 289, 290, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 305, 311, 312, 314, 316, 327, 329, 330, 332, 334, 336, 340, 341, 342, 344, 345, 348, 349, 351, 352, 353, 356, 357, 359, 363, 364, 365, 370, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 384, 388, 390, 391, 404, 407, 408, 413, 414, 415, 416, 419, 420, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 452, 454, 455, 456, 457, 458, 460, 461, 469, 472, 474, 497, 499, 505, 513, 515, 516, 520, 523, 526, 531, 534, 536, 542, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 611, 612, 629, 632, 633, 634, 638, 639, 640, 645, 646, 652, 656, 658, 659, 671, 672, 674, 676, 677, 679, 680, 683, 684, 689, 690, 691, 692, 693, 694, 695, 702, 707, 708, 711, 714, 718, 724, 726, 732, 737, 738, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 765, 780, 781, 791, 792, 798, 799, 801, 815, 817, 823, 826, 828, 835, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 862, 863, 866, 870, 875, 884, 885, 899, 900, 901, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 929, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1014, 1015, 1017, 1018, 1021, 1022, 1023, 1028, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "pointer": [376, 384, 442, 1042], "pointplot": 149, "points_color": 232, "pointwis": [137, 177, 419, 444], "poisson": [2, 43, 52, 183, 192, 247, 372, 415, 464, 465, 497, 524, 553, 559, 563, 566, 649, 670, 673, 681, 707, 725, 746, 750, 751, 753, 831, 865, 866, 869, 870, 878, 879, 880, 885, 914, 916, 953, 998, 1018, 1023, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "poisson_gbrt": 212, "poisson_glm": 212, "poissonregressor": [2, 212, 230, 320, 323, 649, 681, 998, 1044, 1047, 1048], "pokorni": 1048, "pola": 52, "polar": [105, 175, 376, 388, 394, 401, 432, 442, 443, 445, 447, 449, 464, 468, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 562, 563, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 689, 690, 693, 849, 854, 857, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 1050, 1051], "pole": 234, "poli": [43, 161, 191, 270, 337, 344, 346, 452, 536, 621, 766, 775, 801, 880, 907, 908, 909, 910, 911, 998, 1012], "polici": [149, 185, 186, 212, 230, 264, 379, 390, 536, 542, 998, 1048], "policyhold": [212, 230, 998], "polit": [57, 351, 371, 375, 998, 1003], "pollak": 1051, "polli": 351, "pollut": [351, 729, 786, 1002, 1008], "polmauri": 1040, "poloso": 1047, "polycollect": [807, 824], "polynomi": [2, 54, 181, 183, 190, 192, 212, 218, 244, 251, 270, 285, 295, 321, 322, 337, 346, 368, 372, 452, 491, 621, 640, 641, 642, 644, 646, 673, 766, 775, 776, 831, 866, 875, 877, 880, 884, 905, 907, 908, 909, 910, 911, 997, 1017, 1023, 1024, 1028, 1045, 1046], "polynomial_featur": 285, "polynomial_kernel": [2, 404, 766, 1000, 1050], "polynomialcountsketch": [2, 191, 640, 642, 994, 1045, 1047, 1050], "polynomialfeatur": [2, 43, 193, 212, 213, 218, 251, 285, 321, 344, 884, 998, 1012, 1037, 1041, 1042, 1043, 1046, 1047, 1049, 1050], "polynomialfeaturespolynomialfeatur": 251, "polysemi": 413, "polytop": 516, "pomegran": 1021, "ponc": [413, 532, 538], "poncho": 1026, "pone": 370, "ponnuthurai": 373, "ponzi": 316, "pooch": [86, 376, 394, 401], "pooja": [1048, 1049, 1050], "pool": [279, 388, 445, 636, 970, 1022, 1044], "pooling_func": [445, 1041], "poolqc": 143, "poolsawat": [1047, 1048], "poor": [187, 191, 276, 332, 406, 412, 413, 691, 695, 739, 842, 845, 846, 996, 997, 999, 1004, 1022, 1040, 1041, 1042, 1044, 1046], "poor_scor": [921, 923], "poorer": [143, 359, 413], "poorest": 1004, "poorli": [62, 64, 95, 109, 116, 137, 148, 236, 364, 408, 415, 529, 631, 998, 999, 1039], "poorna": [1043, 1045], "pop": [358, 388, 920, 1041], "popa": [1043, 1044], "popitem": 920, "popo": 1036, "popul": [104, 109, 111, 149, 186, 212, 249, 273, 310, 371, 385, 390, 410, 440, 490, 713, 719, 847, 848, 849, 851, 853, 855, 856, 857, 970, 1002, 1008, 1012, 1018], "popular": [6, 10, 181, 236, 371, 374, 381, 384, 388, 390, 414, 415, 416, 418, 452, 462, 992, 994, 998, 1000, 1007, 1016, 1022], "port": [374, 394, 1043], "portabl": [402, 1021], "portfolio": [212, 230, 996], "portion": [45, 47, 112, 144, 168, 279, 363, 371, 373, 376, 382, 390, 789, 826, 843, 991, 1001, 1005], "portland": [408, 419, 444], "portnoi": [998, 1050], "portrait": [45, 413], "pos_class": 47, "pos_label": [240, 249, 264, 284, 390, 407, 438, 439, 699, 701, 703, 707, 708, 710, 728, 730, 731, 739, 783, 784, 785, 788, 790, 800, 872, 889, 1002, 1041, 1045, 1047, 1051], "pos_lr": 273, "pos_lr_bas": 273, "pos_lr_base_std": 273, "pos_tagg": 416, "pos_vector": 416, "pos_window": 416, "pose": [216, 278, 998], "posit": [0, 2, 43, 45, 47, 50, 51, 61, 62, 64, 100, 130, 149, 151, 156, 166, 179, 185, 186, 198, 201, 208, 212, 213, 214, 216, 230, 235, 243, 249, 264, 267, 270, 273, 277, 279, 280, 283, 284, 310, 320, 321, 325, 327, 351, 358, 363, 371, 375, 376, 378, 383, 385, 390, 391, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 420, 438, 439, 442, 446, 447, 449, 464, 467, 495, 499, 501, 505, 509, 510, 511, 526, 528, 530, 531, 532, 534, 536, 537, 538, 543, 546, 547, 549, 550, 551, 558, 562, 563, 564, 565, 593, 594, 595, 596, 597, 599, 600, 601, 603, 607, 611, 612, 621, 632, 633, 644, 647, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 670, 673, 674, 675, 676, 678, 681, 682, 683, 684, 685, 688, 691, 699, 701, 703, 708, 710, 713, 714, 716, 717, 719, 721, 723, 725, 728, 730, 731, 732, 736, 737, 739, 740, 741, 742, 744, 745, 753, 755, 759, 767, 783, 784, 785, 788, 789, 790, 798, 799, 800, 804, 805, 828, 845, 846, 847, 849, 851, 853, 855, 857, 858, 868, 869, 872, 878, 881, 884, 889, 893, 897, 898, 900, 901, 905, 906, 909, 910, 911, 913, 915, 922, 925, 928, 947, 949, 966, 968, 993, 994, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1009, 1012, 1017, 1034, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "position": 390, "positive_class": [47, 713], "positive_cod": [120, 532, 538, 543, 546, 547], "positive_dict": [120, 532, 538, 546, 547], "positive_featur": 381, "positive_likelihood_ratio": [273, 713], "positive_onli": [922, 925], "posix": [364, 388], "posixpath": 52, "possa": 1040, "possibl": [30, 43, 52, 55, 63, 64, 72, 82, 88, 103, 109, 120, 137, 140, 149, 151, 170, 186, 187, 188, 189, 212, 229, 230, 244, 246, 264, 270, 271, 272, 273, 275, 276, 277, 279, 280, 289, 319, 340, 347, 351, 352, 359, 363, 364, 365, 369, 370, 371, 376, 377, 378, 379, 380, 382, 384, 388, 389, 390, 394, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 418, 420, 422, 431, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 497, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 710, 722, 723, 724, 725, 729, 743, 757, 779, 784, 786, 789, 798, 799, 800, 801, 803, 804, 805, 807, 813, 814, 815, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 929, 931, 932, 935, 941, 972, 975, 991, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1010, 1012, 1017, 1018, 1022, 1026, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049], "possibli": [90, 116, 168, 212, 227, 344, 352, 373, 375, 384, 402, 408, 415, 416, 451, 453, 590, 840, 841, 842, 843, 844, 910, 911, 913, 914, 915, 916, 991, 994, 999, 1005, 1012, 1048], "post": [2, 46, 54, 57, 102, 167, 168, 183, 240, 262, 274, 277, 287, 323, 327, 332, 351, 352, 353, 354, 358, 363, 371, 375, 376, 381, 389, 403, 408, 448, 488, 489, 497, 501, 552, 558, 559, 560, 561, 562, 565, 566, 659, 701, 703, 713, 719, 743, 785, 788, 800, 801, 817, 823, 828, 831, 866, 885, 903, 913, 914, 915, 916, 1002, 1018, 1023, 1025, 1026, 1028, 1044], "post1": [374, 394, 400, 401, 1031], "poster": [351, 375, 376], "posterior": [169, 170, 171, 176, 183, 193, 264, 270, 284, 413, 418, 550, 551, 553, 611, 612, 614, 615, 616, 620, 623, 624, 628, 645, 646, 709, 798, 800, 823, 996, 1021, 1023, 1039, 1042], "posteriori": [998, 1004], "postfit_hook": 46, "postiv": 277, "postpon": [378, 380], "postprocess": [61, 406, 536, 542], "postprocessor": 1044, "postscript": 917, "potenti": [2, 43, 64, 88, 109, 149, 182, 185, 187, 193, 264, 296, 297, 305, 325, 326, 344, 353, 363, 364, 374, 390, 394, 399, 407, 408, 412, 415, 416, 468, 482, 483, 484, 485, 497, 525, 550, 558, 559, 562, 563, 565, 566, 574, 607, 612, 635, 764, 823, 895, 896, 903, 913, 914, 915, 916, 1008, 1016, 1018, 1021, 1036, 1043, 1044, 1047, 1050, 1051], "poughon": 1040, "poundal": 102, "pour": 1002, "pourbozorg": [1041, 1042, 1043], "pow": [677, 678, 679, 862, 863], "powel": [45, 371], "power": [2, 43, 46, 55, 140, 144, 185, 213, 230, 261, 273, 278, 294, 310, 311, 314, 329, 337, 363, 364, 389, 406, 408, 411, 414, 415, 416, 419, 444, 482, 483, 484, 533, 536, 542, 545, 631, 681, 695, 725, 748, 750, 753, 847, 848, 855, 856, 858, 859, 880, 881, 882, 893, 894, 948, 949, 998, 999, 1002, 1010, 1012, 1016, 1017, 1026, 1036, 1039, 1041, 1043, 1044, 1046, 1050], "power_iteration_norm": [404, 542, 545, 948, 949, 1047], "power_t": [677, 678, 679, 862, 863, 1016], "power_transform": [2, 881, 894, 1041], "powers_": 880, "powershel": 374, "powertransform": [2, 314, 882, 893, 992, 1012, 1041, 1044, 1047, 1049], "pox": 287, "poznik": [1046, 1047, 1048], "pp": [0, 96, 168, 269, 373, 408, 410, 416, 419, 420, 444, 448, 452, 462, 512, 534, 535, 542, 591, 636, 644, 665, 686, 687, 721, 727, 731, 741, 757, 770, 784, 840, 842, 844, 861, 881, 893, 995, 1002, 1004, 1005, 1015], "pp2013": 994, "pp84": 418, "ppc64le": 384, "ppf": 270, "ppm": 175, "pprint": [55, 146, 246, 271, 371, 944], "pq": [52, 324], "pr": [0, 156, 364, 376, 379, 380, 384, 416, 742, 1002, 1025, 1043, 1045], "pr_displai": 240, "pr_number": 384, "prabakaran": [1041, 1042, 1045, 1047, 1048], "prabhakar": 413, "practic": [64, 86, 103, 111, 116, 123, 140, 143, 144, 149, 170, 185, 186, 191, 198, 214, 239, 245, 271, 278, 296, 297, 321, 327, 340, 344, 364, 376, 378, 379, 380, 382, 384, 389, 390, 408, 410, 412, 413, 414, 415, 416, 418, 447, 452, 462, 522, 525, 590, 633, 634, 671, 798, 844, 898, 905, 991, 992, 996, 998, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1021, 1022, 1024, 1026, 1027, 1028, 1035, 1039, 1041, 1043, 1045], "practicalswift": 1039, "practis": 217, "practition": [138, 216], "pradeep": [1041, 1042], "pragmat": 376, "prakash": [1038, 1040, 1046], "pramod": 1047, "pranayanchuri": 1046, "prang": 377, "prasanth": 1048, "pratama": 1044, "pratap": [1037, 1040, 1047], "prathmesh": 1042, "pratik": 1040, "pratiqu": 373, "pravar": 1041, "pravarmahajan": [1040, 1041], "pre": [44, 103, 186, 202, 283, 310, 353, 374, 376, 390, 394, 407, 410, 412, 413, 415, 416, 417, 419, 420, 443, 444, 447, 459, 534, 536, 691, 713, 764, 800, 868, 910, 1002, 1007, 1012, 1017, 1018, 1021, 1022, 1028, 1036, 1041, 1047, 1051], "pre_dispatch": [801, 807, 815, 824, 826, 827, 828, 829, 832, 967, 1036], "preambl": 88, "prec": [113, 240, 528, 1002], "prec_": 113, "prec_macro": 412, "preced": [364, 376, 380, 487, 1002, 1033], "precipit": 406, "precis": [2, 8, 45, 52, 62, 68, 102, 107, 113, 120, 165, 176, 177, 183, 191, 240, 262, 263, 264, 268, 308, 310, 329, 330, 376, 378, 390, 404, 405, 406, 407, 408, 410, 413, 415, 443, 469, 470, 471, 472, 473, 474, 475, 476, 478, 505, 524, 533, 535, 542, 545, 645, 646, 647, 649, 651, 652, 653, 655, 656, 657, 670, 673, 675, 681, 683, 684, 688, 700, 701, 707, 708, 709, 714, 728, 730, 731, 732, 740, 742, 764, 783, 784, 785, 788, 789, 798, 799, 823, 831, 834, 845, 846, 851, 866, 885, 889, 905, 910, 917, 919, 949, 996, 998, 1005, 1006, 1017, 1023, 1033, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "precision_": [51, 113, 469, 470, 471, 472, 473, 474, 475, 476], "precision_macro": 412, "precision_recall_curv": [2, 240, 277, 701, 707, 708, 728, 1002, 1034, 1035, 1039, 1046, 1047, 1049, 1051], "precision_recall_fscore_support": [2, 714, 730, 731, 785, 788, 1002, 1037, 1041, 1043, 1049], "precision_scor": [2, 62, 264, 277, 709, 788, 1002, 1033, 1035, 1036, 1037, 1038, 1043, 1049], "precision_threshold": 268, "precisionrecalldisplai": [2, 264, 277, 322, 783, 785, 788, 1002, 1043, 1046, 1049, 1050, 1051], "precisions_": [798, 799], "precisions_cholesky_": [798, 799, 1047], "precisions_init": [799, 1047, 1049], "precompil": 374, "precomput": [119, 120, 121, 183, 192, 211, 235, 246, 290, 292, 378, 385, 388, 390, 408, 416, 419, 431, 440, 441, 444, 445, 446, 450, 452, 457, 465, 471, 482, 483, 484, 525, 532, 536, 538, 541, 542, 543, 549, 555, 557, 559, 561, 563, 566, 569, 571, 611, 612, 621, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 682, 683, 685, 686, 689, 691, 692, 693, 697, 775, 779, 782, 793, 794, 801, 815, 838, 839, 847, 848, 849, 851, 852, 853, 855, 856, 857, 863, 906, 907, 908, 909, 910, 911, 914, 916, 922, 977, 978, 979, 994, 998, 1000, 1005, 1017, 1022, 1023, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "precompute_dist": [1037, 1044], "precompute_gram": 1035, "precomputed_nearest_neighbor": [452, 692], "precondit": [408, 452, 462, 696, 1018, 1049], "pred": [43, 46, 50, 52, 68, 348, 351, 371, 649, 670, 681, 698, 703, 707, 719, 730, 731, 739, 784, 785, 788, 789, 1002], "pred1": 157, "pred2": 157, "pred3": 157, "pred4": 157, "pred_background": 50, "pred_decis": [736, 1002, 1046], "pred_entropi": [329, 330], "pred_nam": 45, "pred_ort": 402, "pred_scor": 46, "pred_test": 50, "pred_typ": 49, "predecessor": [134, 450, 455, 456, 457, 1050], "predecessor_": [450, 457], "predecessor_correct": [450, 456], "predefin": [2, 274, 814, 991, 1005, 1048, 1050], "predefinedsplit": [2, 412, 1037], "predetermin": [408, 999], "predict": [2, 5, 13, 27, 42, 45, 46, 47, 50, 60, 62, 63, 64, 66, 68, 70, 72, 79, 89, 90, 91, 95, 102, 103, 104, 105, 107, 115, 130, 132, 133, 134, 136, 137, 138, 140, 142, 143, 144, 147, 149, 150, 151, 152, 153, 154, 155, 156, 165, 166, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 191, 193, 196, 197, 198, 205, 208, 209, 210, 213, 214, 215, 216, 218, 219, 220, 221, 226, 227, 229, 230, 239, 240, 242, 244, 246, 248, 256, 257, 258, 259, 260, 261, 262, 263, 268, 270, 272, 273, 276, 279, 280, 284, 285, 287, 289, 293, 296, 297, 298, 301, 302, 308, 310, 311, 315, 316, 319, 320, 321, 322, 323, 325, 326, 327, 330, 332, 333, 334, 336, 337, 339, 340, 344, 346, 347, 348, 351, 352, 356, 358, 359, 362, 364, 368, 371, 373, 376, 378, 383, 385, 390, 393, 399, 402, 403, 404, 406, 408, 409, 411, 413, 415, 416, 417, 422, 425, 430, 431, 437, 438, 439, 440, 442, 443, 444, 447, 448, 449, 465, 469, 482, 483, 484, 487, 502, 509, 525, 535, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 578, 583, 594, 595, 603, 607, 611, 612, 614, 615, 616, 617, 623, 626, 628, 629, 631, 632, 633, 634, 635, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 715, 716, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 739, 742, 743, 744, 747, 749, 751, 753, 757, 783, 784, 785, 786, 787, 788, 789, 790, 794, 795, 797, 798, 799, 800, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 855, 856, 862, 863, 865, 872, 885, 886, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 975, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1026, 1028, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "predict_ecoc": 1037, "predict_joint_log_proba": [840, 841, 842, 843, 844, 1048], "predict_log_proba": [378, 390, 550, 551, 552, 554, 556, 558, 560, 565, 594, 595, 659, 660, 677, 800, 801, 804, 805, 815, 823, 826, 836, 840, 841, 842, 843, 844, 862, 865, 902, 907, 910, 913, 915, 1017, 1033, 1046, 1050], "predict_ovo": 1037, "predict_ovr": 1037, "predict_param": [246, 465, 568, 569, 594, 595, 1046], "predict_proba": [30, 61, 62, 63, 64, 66, 70, 152, 156, 168, 171, 172, 173, 174, 264, 279, 284, 289, 305, 312, 315, 319, 321, 327, 351, 378, 383, 390, 406, 407, 415, 437, 438, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 594, 595, 611, 620, 621, 623, 624, 632, 633, 634, 659, 660, 677, 699, 701, 703, 723, 742, 743, 789, 798, 799, 800, 801, 804, 805, 815, 823, 826, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 847, 855, 862, 865, 872, 900, 901, 902, 907, 910, 913, 915, 924, 998, 1002, 1004, 1006, 1009, 1015, 1016, 1017, 1018, 1033, 1034, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "predict_proba_ovr": 1037, "predicted_label": [329, 330], "prediction_df": 149, "prediction_perform": 46, "prediction_performance_comput": 46, "prediction_performance_label": 46, "prediction_pow": 46, "prediction_tim": [46, 47], "prediction_titl": 45, "predictionerrordisplai": [2, 43, 52, 107, 154, 186, 266, 324, 1002, 1048, 1050], "predictions_kr": 170, "predictive_analyt": 1018, "predictive_word": 351, "predictor": [2, 107, 133, 143, 157, 181, 183, 212, 230, 241, 378, 389, 390, 409, 411, 412, 415, 418, 466, 467, 482, 483, 484, 497, 517, 518, 519, 556, 557, 563, 566, 569, 603, 611, 631, 633, 634, 649, 654, 658, 670, 674, 681, 702, 826, 828, 837, 838, 865, 866, 878, 879, 885, 975, 998, 1003, 1023, 1034, 1040, 1043], "predispatch": [807, 824, 829, 832], "predit": 116, "predomin": [378, 1034], "prefer": [73, 79, 88, 149, 261, 279, 310, 359, 363, 364, 365, 376, 377, 378, 390, 408, 412, 413, 415, 416, 440, 454, 471, 472, 478, 487, 509, 510, 628, 633, 634, 655, 659, 660, 702, 727, 729, 743, 758, 759, 836, 854, 880, 905, 906, 955, 967, 991, 994, 996, 998, 1002, 1007, 1017, 1018, 1021, 1025, 1034, 1040, 1042, 1046, 1047, 1050], "prefetch": 967, "prefit": [63, 264, 390, 406, 407, 417, 437, 568, 569, 598, 800, 823, 1022, 1045, 1046, 1047], "prefix": [2, 55, 102, 271, 292, 319, 376, 380, 382, 384, 418, 424, 442, 443, 445, 447, 449, 464, 467, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 640, 641, 642, 643, 689, 690, 693, 807, 829, 849, 854, 857, 861, 864, 865, 871, 897, 898, 1039, 1040, 1046, 1048, 1051], "prein": [0, 366, 1045, 1046, 1047], "preiss": 1046, "preliminari": 462, "prematur": 1046, "prepar": [213, 246, 351, 363, 380, 382, 384, 924, 1018, 1026, 1041, 1049], "prepend": [186, 1033], "preprint": 373, "preprocess": [2, 43, 44, 45, 49, 64, 67, 77, 79, 82, 86, 88, 91, 95, 102, 103, 104, 105, 107, 116, 120, 130, 139, 143, 164, 166, 168, 175, 188, 191, 193, 195, 200, 202, 204, 212, 213, 218, 228, 230, 233, 240, 241, 250, 253, 264, 267, 277, 279, 284, 285, 293, 298, 299, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 333, 340, 343, 352, 365, 368, 370, 373, 376, 381, 389, 390, 402, 404, 405, 408, 409, 412, 415, 416, 417, 464, 465, 466, 467, 489, 568, 582, 583, 589, 590, 592, 631, 659, 660, 673, 675, 677, 679, 688, 834, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 905, 906, 907, 908, 910, 911, 992, 998, 1003, 1006, 1013, 1016, 1017, 1019, 1021, 1023, 1025, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "preprocessor": [103, 154, 186, 212, 241, 249, 251, 316, 320, 322, 323, 324, 326, 409, 416, 589, 590, 592, 1021, 1033, 1036, 1041, 1043], "preprocessor__cat__selector__percentil": 103, "preprocessor__num__imputer__strategi": 103, "preprocessor_list": 249, "prescrib": 390, "presenc": [2, 48, 93, 95, 111, 112, 132, 185, 189, 198, 216, 249, 310, 374, 377, 390, 410, 413, 713, 727, 757, 770, 834, 868, 876, 878, 885, 985, 992, 998, 1002, 1003, 1016, 1025, 1036, 1037, 1039, 1043, 1045, 1047], "present": [0, 2, 43, 44, 52, 78, 82, 118, 120, 127, 139, 140, 146, 149, 150, 167, 168, 176, 179, 193, 196, 198, 202, 212, 239, 242, 246, 260, 264, 268, 273, 276, 279, 280, 290, 310, 313, 315, 352, 373, 374, 378, 381, 388, 390, 399, 406, 408, 410, 413, 415, 416, 426, 427, 430, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 489, 490, 491, 492, 493, 497, 501, 502, 503, 504, 505, 506, 511, 532, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 550, 551, 562, 563, 564, 567, 570, 571, 582, 583, 584, 589, 590, 592, 618, 628, 629, 630, 631, 651, 655, 678, 689, 690, 691, 692, 713, 730, 731, 739, 770, 784, 785, 788, 798, 799, 801, 804, 805, 813, 815, 829, 847, 848, 849, 851, 853, 855, 856, 857, 864, 869, 877, 878, 879, 880, 881, 883, 886, 897, 898, 909, 917, 919, 920, 949, 985, 1001, 1002, 1003, 1004, 1009, 1012, 1020, 1022, 1036, 1041, 1043, 1044, 1045, 1047, 1048, 1050], "preserv": [37, 43, 125, 236, 243, 265, 379, 412, 413, 415, 416, 582, 589, 590, 592, 647, 653, 697, 775, 779, 819, 820, 821, 889, 926, 931, 932, 992, 998, 999, 1012, 1014, 1021, 1033, 1036, 1037, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1051], "preserves_dtyp": 926, "preservs": 1047, "preset": [667, 669, 677, 1006], "presort": [1038, 1043], "press": [371, 408, 413, 418, 419, 444, 591, 611, 612, 615, 620, 623, 644, 840, 844, 995, 998, 1000, 1004], "pressur": [168, 373], "preston": [1038, 1039, 1040], "presum": [186, 289, 408, 416, 840], "prettenhof": [0, 398, 1033, 1034, 1035, 1036, 1037, 1038], "pretti": [187, 236, 268, 351, 363, 376, 388, 862, 863, 1006, 1042], "preuss": 1049, "prev_scor": 55, "preval": [134, 319, 390, 701, 713, 1002], "prevalence_pos_label": [277, 701], "prevent": [43, 88, 144, 146, 165, 185, 209, 213, 216, 310, 316, 317, 340, 351, 355, 359, 376, 378, 380, 388, 389, 402, 404, 408, 413, 416, 442, 449, 488, 489, 562, 563, 591, 592, 612, 729, 786, 862, 863, 890, 891, 893, 894, 895, 896, 1002, 1004, 1007, 1008, 1012, 1018, 1035, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "previou": [43, 78, 86, 103, 120, 137, 143, 144, 146, 154, 170, 175, 176, 185, 186, 187, 198, 199, 213, 243, 245, 246, 264, 270, 273, 277, 310, 315, 323, 351, 352, 353, 359, 363, 371, 376, 378, 380, 381, 382, 384, 388, 390, 391, 394, 407, 408, 415, 416, 468, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 631, 647, 649, 653, 654, 659, 661, 663, 667, 668, 669, 670, 677, 678, 679, 681, 708, 820, 836, 839, 854, 862, 863, 902, 919, 998, 1002, 1006, 1012, 1022, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "previous": [46, 86, 90, 103, 134, 176, 186, 264, 268, 277, 284, 323, 371, 384, 388, 394, 408, 413, 416, 440, 443, 454, 525, 535, 542, 650, 659, 660, 667, 668, 669, 677, 678, 679, 905, 998, 1012, 1021, 1030, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "previous_loss": [667, 668, 669, 678], "previs": 240, "price": [51, 107, 143, 144, 149, 154, 249, 316, 992, 998, 999, 1026], "priceless": 376, "prieur": 1046, "primal": [659, 660, 678, 905, 906, 1016, 1017], "primari": [390, 413, 516, 922, 1009, 1025, 1026], "primarili": [261, 275, 376, 390, 404, 408, 959, 1026, 1042, 1043], "primat": 351, "primdal": 1041, "primit": 1048, "princ": 1046, "princip": [2, 42, 114, 115, 119, 122, 124, 125, 128, 130, 152, 183, 197, 221, 232, 244, 247, 263, 276, 299, 315, 321, 356, 368, 408, 411, 420, 484, 505, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 551, 658, 689, 690, 691, 693, 694, 831, 854, 866, 885, 920, 948, 949, 999, 1005, 1023, 1027, 1028, 1033], "principl": [134, 177, 295, 353, 376, 388, 390, 391, 412, 415, 949, 991, 1001, 1005, 1016, 1040], "print": [2, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 63, 66, 68, 73, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 96, 100, 102, 103, 105, 106, 107, 111, 115, 116, 118, 120, 123, 126, 127, 128, 130, 134, 137, 140, 141, 142, 143, 145, 147, 149, 159, 160, 164, 165, 167, 168, 170, 171, 173, 175, 179, 185, 187, 188, 189, 191, 198, 199, 201, 204, 205, 208, 209, 212, 214, 215, 216, 219, 220, 227, 228, 230, 233, 234, 237, 241, 243, 245, 246, 249, 253, 258, 263, 264, 268, 269, 270, 271, 273, 275, 278, 279, 283, 290, 294, 301, 303, 306, 307, 308, 312, 315, 317, 319, 320, 321, 323, 325, 326, 327, 329, 330, 333, 340, 351, 352, 353, 355, 358, 359, 363, 370, 371, 374, 377, 378, 384, 390, 399, 402, 409, 412, 415, 416, 418, 464, 467, 468, 472, 478, 490, 495, 503, 513, 514, 542, 545, 550, 551, 560, 561, 562, 563, 565, 566, 570, 571, 578, 584, 585, 586, 588, 589, 590, 592, 613, 618, 619, 631, 647, 648, 650, 651, 653, 654, 655, 657, 661, 662, 663, 664, 667, 668, 677, 678, 685, 697, 714, 718, 738, 796, 798, 799, 800, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822, 823, 827, 828, 829, 830, 832, 834, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 866, 867, 875, 881, 885, 893, 903, 904, 905, 906, 907, 910, 912, 918, 930, 935, 962, 985, 992, 1002, 1003, 1004, 1005, 1010, 1018, 1033, 1035, 1041, 1042, 1044, 1048], "print_changed_onli": [468, 903, 1042, 1044, 1045], "print_datafram": 268, "print_progress": 967, "print_rout": 246, "printabl": 1025, "prior": [2, 42, 46, 55, 80, 81, 90, 98, 99, 100, 118, 169, 170, 176, 182, 183, 188, 193, 195, 198, 254, 256, 260, 261, 264, 270, 281, 300, 376, 378, 390, 394, 399, 408, 411, 413, 415, 417, 418, 465, 524, 537, 549, 550, 551, 552, 560, 612, 614, 615, 616, 620, 623, 624, 631, 645, 646, 647, 648, 652, 653, 655, 656, 657, 661, 662, 663, 673, 679, 682, 717, 798, 840, 841, 842, 843, 844, 865, 866, 880, 907, 910, 968, 991, 994, 996, 998, 1001, 1002, 1004, 1010, 1018, 1019, 1023, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1046, 1049], "prior_k": 550, "priori": [212, 229, 279, 289, 310, 390, 408, 415, 589, 595, 1001, 1049], "priorit": [407, 1022, 1040], "prioriti": [375, 633, 833, 834, 1022, 1036], "priors_": [550, 551], "privaci": 1021, "privat": [0, 378, 380, 390, 391, 927, 1026, 1033, 1041, 1043, 1044, 1046, 1047], "privileg": [249, 384], "priyam": 1048, "priyank": 1051, "priyansh": 1051, "priyash": 1051, "prng": 113, "pro": [402, 1001], "proanthocyanin": 373, "prob_pos_clf": 61, "prob_pos_isoton": 61, "prob_pos_sigmoid": 61, "prob_pr": [438, 439], "prob_tru": [438, 439], "proba": [62, 64, 156, 437, 913, 915], "proba_": [907, 910, 1044], "proba_map": 88, "proba_neg_class": [62, 64], "proba_pos_class": [62, 64], "probabilist": [54, 64, 66, 113, 119, 120, 129, 130, 169, 170, 173, 176, 177, 183, 245, 264, 351, 390, 406, 414, 415, 437, 473, 476, 533, 535, 536, 542, 560, 589, 590, 611, 623, 644, 646, 677, 704, 742, 801, 827, 872, 907, 908, 910, 911, 995, 996, 998, 1001, 1002, 1007, 1012, 1017, 1018, 1021, 1023, 1026, 1033, 1036, 1040], "probabilisticpca": [1033, 1036], "probabilities_": [88, 446], "probabilities_or_label": 570, "probabl": [0, 2, 5, 30, 52, 60, 64, 65, 70, 88, 107, 118, 133, 147, 149, 155, 163, 169, 170, 171, 172, 183, 186, 189, 205, 224, 227, 228, 232, 236, 240, 242, 243, 264, 270, 272, 273, 276, 277, 280, 284, 287, 289, 308, 310, 314, 319, 321, 327, 332, 334, 346, 347, 363, 371, 372, 378, 382, 388, 390, 407, 408, 412, 413, 416, 417, 418, 434, 435, 436, 437, 438, 439, 446, 447, 449, 505, 513, 516, 524, 528, 550, 551, 552, 554, 556, 558, 560, 562, 565, 568, 570, 571, 594, 595, 611, 614, 615, 623, 628, 632, 633, 634, 659, 660, 672, 677, 693, 699, 701, 703, 704, 707, 708, 710, 713, 717, 721, 723, 727, 728, 730, 740, 741, 742, 757, 783, 785, 788, 789, 790, 795, 798, 799, 800, 801, 804, 805, 815, 823, 830, 831, 834, 836, 837, 840, 841, 842, 843, 844, 847, 850, 855, 861, 862, 886, 898, 899, 900, 901, 902, 905, 907, 910, 913, 915, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1016, 1018, 1022, 1023, 1024, 1028, 1033, 1035, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1047], "probable_clust": 89, "probas_pr": [783, 1051], "probb_": [907, 910, 1044], "probe": 1010, "probinette4": 1045, "probl": [608, 609], "problem": [2, 11, 25, 42, 43, 44, 45, 50, 52, 53, 54, 63, 72, 87, 88, 90, 99, 120, 134, 137, 140, 146, 147, 170, 183, 188, 191, 193, 198, 199, 202, 206, 207, 212, 214, 216, 229, 230, 234, 239, 240, 247, 249, 252, 268, 270, 275, 279, 280, 284, 285, 287, 289, 290, 295, 302, 314, 322, 326, 327, 337, 340, 344, 347, 348, 351, 352, 358, 359, 363, 371, 372, 373, 374, 375, 377, 378, 381, 382, 384, 385, 388, 390, 396, 406, 407, 408, 410, 412, 414, 415, 416, 417, 418, 419, 420, 444, 447, 449, 450, 452, 457, 462, 465, 478, 504, 509, 510, 516, 517, 518, 519, 524, 525, 529, 532, 534, 538, 540, 543, 544, 545, 546, 547, 548, 549, 552, 553, 558, 562, 565, 568, 572, 574, 590, 611, 632, 644, 649, 651, 653, 655, 656, 657, 658, 659, 660, 665, 666, 667, 669, 670, 673, 674, 675, 676, 677, 678, 680, 681, 686, 687, 688, 689, 690, 692, 694, 696, 709, 717, 720, 730, 731, 736, 739, 740, 784, 785, 788, 789, 798, 799, 802, 803, 804, 805, 806, 808, 809, 810, 811, 816, 817, 818, 819, 820, 821, 825, 833, 834, 835, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 871, 872, 878, 886, 889, 895, 896, 905, 906, 913, 915, 937, 949, 992, 993, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1012, 1016, 1019, 1022, 1024, 1026, 1027, 1028, 1033, 1034, 1036, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "problemat": [43, 186, 264, 266, 409, 992, 1041], "proc": [64, 110, 406, 416, 450, 690, 694, 840, 991, 999, 1004, 1008], "proce": [83, 165, 195, 374, 380, 411, 412, 415, 440, 878, 998], "procedur": [25, 80, 89, 140, 146, 168, 194, 200, 260, 272, 313, 317, 340, 351, 359, 376, 388, 389, 390, 391, 406, 410, 412, 413, 415, 417, 532, 538, 539, 541, 546, 547, 548, 554, 555, 556, 557, 560, 561, 594, 596, 603, 610, 645, 673, 675, 688, 729, 786, 847, 855, 862, 863, 882, 894, 922, 972, 991, 998, 1004, 1012, 1015, 1016, 1017, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "proceed": [111, 168, 371, 373, 408, 419, 439, 444, 512, 697, 709, 727, 757, 852, 902, 1002, 1014, 1015, 1016], "process": [0, 2, 19, 37, 43, 44, 57, 63, 66, 67, 70, 80, 81, 83, 99, 102, 104, 106, 110, 112, 121, 122, 124, 134, 142, 144, 146, 151, 152, 161, 185, 193, 196, 214, 216, 222, 223, 224, 225, 245, 246, 247, 249, 255, 256, 259, 261, 264, 270, 272, 273, 282, 287, 305, 310, 313, 321, 325, 330, 334, 344, 345, 349, 352, 353, 355, 363, 364, 365, 371, 375, 376, 378, 380, 382, 385, 388, 389, 390, 402, 408, 409, 410, 412, 413, 414, 415, 416, 417, 421, 448, 449, 475, 497, 505, 524, 535, 536, 537, 538, 539, 562, 563, 564, 589, 590, 592, 611, 612, 614, 615, 616, 618, 619, 620, 623, 624, 626, 628, 633, 634, 640, 644, 665, 673, 686, 687, 704, 724, 742, 782, 798, 800, 801, 804, 805, 815, 823, 826, 827, 828, 837, 838, 854, 868, 872, 874, 875, 876, 885, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 967, 991, 994, 998, 1002, 1005, 1012, 1014, 1016, 1018, 1021, 1022, 1023, 1024, 1026, 1028, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "process_rout": [2, 246, 1050], "processor": [103, 154, 186, 419, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 532, 536, 537, 538, 540, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 633, 635, 640, 648, 652, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 847, 848, 851, 853, 855, 856, 858, 859, 864, 867, 900, 901], "procter": 51, "prod": [352, 622], "prod_": 1004, "prod_i": 994, "proding": 1049, "produc": [52, 53, 62, 63, 79, 90, 102, 123, 146, 147, 148, 150, 198, 276, 308, 332, 359, 364, 371, 372, 376, 378, 381, 390, 391, 408, 409, 412, 413, 415, 440, 443, 446, 452, 520, 537, 560, 564, 582, 589, 594, 595, 633, 634, 803, 804, 805, 813, 818, 821, 826, 870, 880, 907, 910, 993, 994, 998, 1000, 1001, 1002, 1005, 1008, 1009, 1013, 1015, 1016, 1017, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "product": [2, 58, 103, 120, 155, 170, 175, 187, 344, 359, 363, 378, 379, 382, 385, 405, 413, 415, 451, 539, 541, 548, 583, 590, 591, 592, 614, 615, 634, 641, 665, 666, 686, 687, 762, 764, 776, 778, 877, 880, 897, 898, 950, 991, 994, 998, 1000, 1012, 1014, 1016, 1017, 1021, 1026, 1028, 1041], "production": 1026, "prof": 382, "profession": 186, "professor": 1026, "profil": [212, 363, 376, 379, 522, 525, 998, 1026], "profile_default": 382, "profit": [0, 264, 327, 1050], "prog": [168, 373], "prognosi": [168, 373], "program": [0, 83, 168, 352, 359, 364, 365, 373, 374, 376, 378, 382, 388, 509, 636, 671, 895, 896, 998, 1017, 1018, 1021, 1022, 1025, 1033, 1035], "programmat": [378, 500, 1042], "progress": [43, 46, 47, 120, 157, 168, 182, 206, 209, 295, 323, 373, 380, 381, 391, 399, 404, 408, 560, 561, 693, 834, 836, 839, 854, 862, 863, 1026, 1033, 1035, 1042, 1047], "prohibit": [185, 249, 412, 415, 628, 1007, 1015, 1040], "proj": [53, 650], "proj_gradi": 382, "proj_oper": 53, "project": [2, 37, 45, 47, 50, 53, 55, 69, 91, 100, 119, 120, 122, 124, 126, 130, 174, 176, 178, 179, 183, 187, 232, 233, 234, 236, 238, 240, 244, 247, 256, 294, 299, 303, 308, 337, 352, 363, 368, 370, 374, 375, 376, 381, 382, 385, 390, 391, 394, 405, 411, 413, 414, 420, 440, 446, 451, 452, 462, 474, 482, 483, 484, 485, 489, 503, 505, 532, 534, 535, 536, 538, 540, 542, 543, 544, 545, 549, 550, 574, 583, 590, 642, 643, 650, 673, 675, 689, 692, 696, 697, 835, 854, 882, 897, 898, 899, 948, 949, 996, 998, 999, 1000, 1003, 1005, 1006, 1008, 1015, 1018, 1023, 1026, 1028, 1033, 1034, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "projected_data": 243, "projected_dist": 243, "projectedgradientnmf": 1038, "prokopi": [1038, 1041], "prolifer": 378, "prolin": [57, 315, 373], "promin": [123, 390], "promis": [390, 1022], "promot": [186, 442, 709, 1021, 1044, 1046, 1050], "prompt": [374, 376, 380, 394, 401, 416], "prone": [64, 212, 257, 314, 388, 406], "pronounc": [74, 75, 85, 175], "proof": [388, 415, 899, 1014], "prop": [105, 112, 218, 257, 296, 339, 358], "propag": [2, 58, 68, 71, 72, 82, 88, 96, 166, 183, 328, 371, 440, 454, 503, 513, 515, 698, 705, 706, 714, 715, 718, 719, 738, 794, 796, 865, 879, 900, 901, 902, 967, 968, 1006, 1023, 1024, 1027, 1028, 1033, 1045, 1048], "proper": [64, 88, 202, 230, 264, 365, 378, 382, 406, 415, 449, 542, 554, 677, 949, 976, 997, 998, 999, 1002, 1017, 1033, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "properli": [43, 52, 62, 88, 151, 175, 265, 283, 319, 365, 374, 376, 380, 384, 414, 905, 906, 907, 908, 909, 910, 911, 991, 1036, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "properti": [51, 62, 177, 178, 214, 229, 256, 292, 315, 358, 363, 369, 376, 378, 394, 405, 406, 408, 410, 413, 415, 417, 418, 423, 442, 445, 451, 452, 453, 464, 465, 543, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 592, 594, 595, 598, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 633, 647, 653, 656, 661, 663, 675, 676, 700, 705, 706, 709, 800, 801, 804, 805, 815, 823, 833, 834, 864, 865, 878, 879, 880, 886, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 994, 997, 998, 999, 1002, 1003, 1005, 1008, 1012, 1015, 1017, 1018, 1019, 1022, 1038, 1042, 1043, 1046, 1047, 1050, 1051], "property_magnitud": 264, "propon": 102, "proport": [54, 63, 75, 149, 167, 199, 212, 219, 225, 239, 249, 264, 273, 277, 293, 297, 300, 347, 349, 358, 363, 371, 406, 408, 410, 412, 413, 415, 416, 438, 439, 446, 469, 474, 516, 550, 551, 556, 558, 560, 561, 562, 563, 564, 565, 584, 585, 589, 592, 628, 633, 659, 660, 667, 668, 669, 675, 676, 677, 679, 697, 702, 713, 723, 802, 803, 804, 805, 818, 821, 831, 851, 862, 863, 879, 905, 906, 907, 910, 911, 913, 915, 917, 919, 937, 991, 1001, 1002, 1005, 1008, 1016, 1017, 1018, 1038, 1050], "propos": [90, 109, 110, 290, 371, 376, 378, 388, 390, 408, 410, 415, 420, 450, 536, 608, 609, 677, 678, 679, 862, 863, 998, 1001, 1005, 1016, 1040], "proprietari": 1018, "propto": [414, 1004], "prorokovi\u0107": 1051, "protect": [377, 380, 967], "protein": 370, "protocol": [402, 1002, 1021, 1036, 1049, 1050], "protocol_typ": 249, "prototyp": 1026, "prove": [121, 1026], "proven": [270, 996, 1000, 1026], "provenc": 316, "provid": [0, 2, 30, 31, 44, 47, 50, 52, 61, 64, 66, 70, 72, 77, 88, 93, 112, 120, 141, 149, 152, 154, 170, 176, 186, 187, 193, 199, 200, 202, 213, 216, 233, 237, 240, 241, 246, 260, 264, 270, 271, 272, 276, 300, 303, 307, 310, 314, 319, 320, 322, 324, 338, 344, 347, 351, 352, 355, 358, 359, 363, 365, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 382, 384, 385, 388, 389, 390, 393, 394, 399, 402, 404, 405, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 419, 420, 422, 429, 437, 440, 442, 443, 444, 446, 447, 449, 450, 452, 459, 460, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 492, 494, 495, 497, 499, 502, 533, 534, 535, 536, 539, 541, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 594, 595, 602, 606, 611, 612, 628, 633, 634, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 691, 695, 700, 712, 723, 736, 742, 743, 765, 775, 779, 789, 793, 795, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 814, 815, 817, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 862, 863, 865, 868, 870, 871, 872, 875, 876, 877, 880, 882, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 921, 923, 937, 943, 954, 958, 960, 977, 978, 979, 990, 991, 992, 994, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1025, 1026, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "provinc": 316, "provost": [789, 1002], "proxi": [185, 186, 413, 417, 861, 1038], "prun": 382, "prune": [183, 354, 358, 417, 501, 558, 559, 560, 561, 565, 566, 594, 645, 831, 913, 914, 915, 916, 1005, 1023, 1024, 1028, 1033, 1036, 1043, 1044], "przybocki": 1002, "ps_lsvm_score": 191, "ps_lsvm_time": 191, "pseudo": [213, 308, 378, 412, 420, 440, 452, 454, 462, 469, 470, 471, 473, 474, 475, 476, 534, 562, 563, 564, 628, 635, 640, 642, 643, 647, 648, 653, 654, 661, 662, 663, 664, 678, 692, 696, 804, 805, 813, 815, 854, 861, 897, 898, 902, 905, 906, 907, 910, 948, 949, 998, 1014, 1038, 1047], "pseudo_likelihood": 861, "pseudocount": [537, 1041], "psf": 376, "psi": 413, "psi_1": 413, "psi_2": 413, "psi_n": 413, "pspachtholz": [1043, 1044, 1045], "psycholog": [408, 706, 717], "psychometrica": 636, "psychometrika": [691, 695, 999], "pt": [50, 371, 417, 881, 1012], "pt_i": 300, "pt_j": 300, "ptocca": 1043, "ptp": 51, "pts_": 50, "pts_test": 50, "pts_train": 50, "pub": [237, 900], "public": [0, 110, 370, 376, 378, 380, 381, 388, 389, 390, 391, 412, 415, 468, 665, 672, 686, 687, 693, 903, 998, 1006, 1033, 1038, 1039, 1044, 1045, 1046, 1049], "publicli": [376, 1043], "publish": [370, 371, 378, 380, 384, 390, 1014, 1022, 1045], "pubu": [226, 243, 296, 339], "pubu_r": 111, "puerta": 1048, "puggioni": 1037, "puhuk": [1047, 1048], "pujalt": 1047, "pulapakura": [1050, 1051], "pulchritud": 351, "pulido": 1046, "pulkit": [1041, 1042, 1044], "pull": [102, 322, 364, 374, 379, 390, 391, 1025, 1043], "puls": 373, "punctuat": [416, 589, 590, 592], "puneet": 1040, "puneeth": [1050, 1051], "puor": 123, "puor_r": 174, "pure": [111, 112, 116, 198, 212, 390, 408, 473, 479, 497, 558, 559, 560, 561, 565, 566, 567, 706, 716, 787, 796, 913, 914, 915, 916, 1012], "pure_emp_cov": 112, "pure_loc": 112, "pure_x": 112, "purepremium": 230, "puriti": [136, 917, 919], "purna": 1047, "purpl": [109, 118, 236], "purport": 1040, "purpos": [48, 51, 72, 116, 144, 149, 181, 209, 226, 227, 228, 232, 234, 247, 258, 260, 264, 266, 267, 340, 341, 347, 351, 352, 359, 371, 376, 389, 390, 391, 394, 401, 405, 408, 409, 413, 415, 416, 417, 418, 827, 828, 865, 922, 999, 1002, 1003, 1005, 1008, 1021, 1045, 1047, 1051], "pursu": 186, "pursuit": [2, 87, 121, 123, 129, 183, 192, 413, 474, 527, 532, 538, 543, 549, 665, 666, 686, 687, 1023, 1024, 1028, 1033], "push": [64, 376, 380, 406, 1025], "pushd": 384, "put": [75, 91, 161, 170, 172, 240, 244, 251, 255, 284, 305, 312, 323, 334, 345, 349, 365, 378, 380, 381, 384, 402, 418, 443, 447, 459, 516, 615, 648, 662, 798, 882, 886, 894, 907, 908, 909, 910, 911, 939, 992, 999, 1001, 1002, 1003, 1009, 1012], "putnam": 1039, "putschblo": 1046, "pvalu": [2, 593, 596, 597, 599, 600, 601, 830], "pvalue_iri": 276, "pvalue_rand": 276, "pvalues_": [164, 593, 596, 597, 599, 600, 601, 1033], "pvnguyen": 1037, "pwalchessen": 1045, "pwd": 384, "px": [140, 271], "pxd": 376, "py": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 364, 376, 377, 380, 382, 384, 390, 394, 416, 531, 645, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 880, 884, 944, 1002, 1021, 1023, 1033, 1035, 1039, 1043, 1047], "py3": 394, "py39": 394, "pyamg": [80, 394, 401, 408, 452, 462, 692, 696], "pyarrow": [394, 401], "pybrain": 1033, "pycon": [402, 1020], "pyd": 377, "pydata": [43, 376, 384, 394, 401, 402, 1020, 1026], "pydata_2013": 1026, "pydebug": 382, "pyflak": 378, "pyfunc": [700, 1005], "pyfuncdist": 700, "pymc": 1021, "pynndesc": 290, "pynndescenttransform": 290, "pyodid": 376, "pyoxid": 1046, "pypi": [364, 374, 378, 380, 382, 394, 1018, 1041, 1045, 1047, 1048, 1050], "pyplot": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 189, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 323, 324, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 372, 376, 383, 438, 503, 632, 633, 698, 699, 701, 702, 703, 807, 824, 1030, 1047], "pyplpt": 370, "pypy3": 1041, "pysniak": 1036, "pystruct": 388, "pytabl": 370, "pytb": 384, "pytest": [2, 319, 364, 374, 376, 378, 379, 394, 401, 404, 924, 943, 944, 1043, 1046], "python": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 363, 365, 370, 374, 376, 377, 378, 379, 380, 381, 384, 385, 388, 390, 394, 395, 401, 402, 404, 409, 416, 497, 509, 510, 582, 700, 812, 879, 1002, 1012, 1017, 1018, 1022, 1025, 1026, 1028, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050], "python2": 1041, "python3": [374, 394], "python37": 394, "pythonsoftwarefound": 394, "pythonx": 374, "pytorch": [45, 327, 388, 1021, 1022, 1049, 1050], "pytorch_enable_mps_fallback": 404, "pyx": [376, 377, 382, 384], "p\u00e9rez": 1041, "p\u00f6lsterl": [1040, 1043, 1046], "q": [51, 103, 115, 146, 212, 322, 405, 408, 413, 948, 998, 1017], "q1": 510, "q327": 373, "q_": 1017, "q_m": 1018, "q_max": [883, 895], "q_min": [883, 895], "qaiser": 1050, "qda": [67, 373, 550, 551, 1024, 1028, 1038], "qdeffens": [1043, 1046], "qemu": 384, "qi": [510, 1045], "qian": [1039, 1044], "qiang": 1037, "qianm": 1045, "qid": [487, 509, 510, 1034, 1039], "qimu": 1039, "qin": [0, 373, 397, 416, 1040, 1041, 1042, 1043, 1044], "qingi": 1041, "qizhi": 1044, "qmarcou": 1050, "qn": 510, "qodari": 1051, "qp": 1017, "qr": [80, 214, 404, 535, 542, 545, 948, 949, 999, 1039, 1050], "qt": [314, 882], "qtconsol": 382, "quad": [418, 1005, 1016], "quadcontourset": 632, "quadmesh": 632, "quadrant": 310, "quadrat": [2, 12, 43, 48, 65, 69, 111, 112, 113, 175, 183, 226, 249, 260, 272, 322, 440, 458, 461, 550, 551, 624, 632, 649, 659, 660, 670, 677, 681, 717, 910, 911, 998, 999, 1002, 1005, 1008, 1012, 1016, 1017, 1023, 1024, 1028, 1034], "quadraticdiscriminantanalysi": [2, 67, 70, 550, 996, 1003, 1005, 1033, 1038, 1040, 1048], "quadro": 1046, "quadv": 1047, "qualifi": 381, "qualit": [44, 45, 86, 88, 94, 140, 146, 212, 324, 371, 408, 439, 702, 1048], "qualiti": [0, 13, 27, 45, 58, 61, 72, 80, 82, 91, 123, 142, 149, 186, 218, 263, 268, 277, 278, 279, 344, 376, 384, 388, 390, 403, 408, 410, 413, 452, 462, 469, 474, 558, 559, 560, 561, 565, 566, 744, 815, 897, 898, 913, 914, 915, 916, 949, 997, 999, 1007, 1014, 1018, 1021, 1022, 1026, 1028], "quang": 1044, "quansight": 0, "quantifi": [13, 27, 43, 72, 82, 109, 175, 230, 264, 277, 327, 378, 390, 403, 574, 868, 997, 1010, 1012, 1028], "quantil": [2, 79, 86, 96, 134, 136, 183, 192, 310, 313, 314, 372, 388, 415, 438, 439, 458, 520, 553, 554, 561, 563, 658, 671, 724, 746, 749, 751, 828, 870, 882, 883, 884, 894, 895, 1002, 1012, 1023, 1024, 1028, 1033, 1037, 1040, 1042, 1046, 1047, 1049, 1051], "quantile_list": 52, "quantile_rang": [310, 883, 895, 1039], "quantile_regress": 214, "quantile_transform": [2, 107, 882, 893, 1012, 1040, 1041, 1042, 1051], "quantileregressor": [2, 322, 998, 1002, 1046, 1047, 1048], "quantiles_": [882, 1012, 1043], "quantiletransform": [2, 107, 187, 314, 409, 465, 881, 894, 992, 1012, 1040, 1041, 1042, 1043, 1044, 1049, 1051], "quantiletransformerquantiletransform": 187, "quantit": [43, 44, 45, 52, 62, 94, 146, 149, 157, 168, 266, 285, 373], "quantiti": [51, 143, 270, 321, 363, 390, 408, 415, 722, 723, 724, 725, 786, 861, 991, 993, 996, 998, 1038], "quantiz": [71, 123, 183, 371, 443, 447, 449, 870, 1012, 1023], "quantum": 1000, "quartil": 883, "quartimax": [533, 1045], "quasi": [378, 862, 863, 998], "quazi": [1040, 1041], "queensland": 373, "quentin": [1040, 1041, 1042, 1049, 1050], "queqichao": 1037, "queri": [193, 293, 303, 363, 414, 419, 444, 446, 450, 457, 553, 611, 612, 629, 645, 646, 727, 757, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 1002, 1005, 1018, 1021, 1025, 1035, 1037, 1038, 1041], "query_id": [487, 509, 510], "query_radiu": [845, 846], "question": [0, 159, 185, 264, 270, 347, 375, 376, 381, 384, 402, 412, 415, 834, 907, 910, 998, 1001, 1002, 1008, 1026], "queue": [47, 1005, 1036], "quick": [43, 125, 252, 376, 378, 382, 394, 607, 831, 1002, 1003, 1012, 1026, 1030], "quicker": 1001, "quickest": 374, "quickli": [74, 250, 306, 319, 373, 376, 377, 412, 415, 693, 779, 998, 1005, 1006, 1026, 1044], "quinlan": 1018, "quinonez": 1041, "quintana": 1002, "quit": [43, 52, 64, 86, 90, 116, 137, 159, 168, 186, 187, 210, 230, 264, 278, 287, 322, 351, 363, 381, 389, 408, 416, 997, 999, 1004, 1026, 1041], "quiver": 122, "quot": [37, 51, 52, 54, 102, 271, 351, 352, 364, 370, 371, 374, 376, 380, 394, 395, 404, 488, 489, 497, 1002, 1014, 1017, 1048], "quota": [1046, 1047], "quotat": 371, "quotient": 1002, "r": [0, 2, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 74, 78, 98, 107, 109, 110, 111, 112, 116, 120, 127, 130, 134, 137, 138, 142, 146, 147, 148, 157, 164, 171, 172, 173, 177, 178, 179, 181, 182, 186, 196, 198, 201, 202, 212, 219, 222, 230, 237, 242, 245, 255, 258, 261, 269, 270, 273, 275, 276, 277, 280, 283, 289, 292, 293, 297, 301, 303, 316, 323, 342, 344, 353, 359, 371, 373, 377, 380, 388, 390, 402, 405, 406, 408, 410, 411, 412, 413, 415, 416, 425, 431, 437, 446, 451, 453, 465, 469, 474, 478, 482, 483, 484, 499, 505, 514, 521, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 589, 590, 591, 592, 595, 607, 610, 611, 612, 628, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 686, 687, 693, 697, 717, 722, 723, 724, 725, 729, 731, 782, 786, 789, 800, 801, 815, 818, 823, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 851, 852, 854, 855, 856, 862, 863, 876, 881, 893, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 918, 967, 992, 994, 996, 998, 999, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1016, 1017, 1018, 1021, 1033, 1037, 1040, 1043, 1044, 1045, 1046, 1048, 1050], "r0": [804, 805], "r1": 571, "r11": [212, 230], "r2": [107, 135, 140, 154, 185, 187, 208, 245, 283, 409, 415, 555, 571, 674, 828, 863, 923, 1002, 1010, 1042], "r2007": 415, "r22": 212, "r25": 230, "r26": 212, "r2_score": [2, 107, 185, 198, 208, 209, 404, 415, 431, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 725, 729, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 991, 1002, 1034, 1036, 1042, 1046, 1047, 1051], "r2_score_ard": 198, "r2_score_enet": 198, "r2_score_lasso": 198, "r2_score_nnl": 208, "r2_score_ol": 208, "r2_with_abl": 185, "r2_without_": 185, "r3": 571, "r72": 212, "r73": 230, "r82": 212, "r93": 212, "r_": [50, 129, 225, 226, 256, 277, 296, 297, 339, 345, 349, 408, 708, 1002, 1018], "r_0": 991, "r_k": 277, "r_multi": 1010, "r_n": [277, 708, 1002], "r_regress": [2, 417, 607, 1046, 1047, 1050], "r_squar": 389, "raamana": [1041, 1042], "rabbit": [323, 325, 1012], "raccoon": [86, 123, 413], "raccoon_fac": [86, 123], "race": [186, 326, 371, 497, 1036], "race_hispan": 186, "race_oth": 186, "race_whit": 186, "rachel": [1045, 1048], "rachelcjordan": 1044, "rachez": [1038, 1039], "rachit": [1039, 1045, 1048], "rachum": 1045, "radar": 1026, "radford": 998, "radhakrishnan": 1041, "radial": [2, 44, 125, 170, 175, 177, 340, 344, 368, 452, 623, 692, 1000, 1017, 1028], "radian": [303, 700, 765], "radii": [845, 846], "radiu": [2, 168, 297, 340, 373, 408, 442, 450, 689, 765, 782, 845, 846, 847, 848, 849, 853, 855, 856, 857, 859, 1005, 1035, 1037, 1047, 1050], "radius1": 99, "radius2": 99, "radius3": 99, "radius4": 99, "radius_neighbor": [323, 853, 855, 856, 857, 1037, 1042, 1043, 1045, 1046, 1047, 1048], "radius_neighbors_graph": [2, 408, 419, 444, 847, 848, 849, 851, 853, 855, 856, 857, 858, 1005, 1037, 1042, 1045], "radiusneighborsclassifi": [2, 323, 847, 848, 853, 856, 1003, 1005, 1033, 1035, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "radiusneighborsregressor": [2, 323, 847, 848, 853, 855, 1003, 1005, 1033, 1035, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "radiusneighborstransform": [2, 319, 849, 1005, 1043, 1045, 1047, 1048], "radostin": [1041, 1042], "raduspaimoc": 1044, "raf": 1042, "rafael": [1026, 1034, 1035, 1037, 1040], "rafal": [1048, 1049], "rafei": 1045, "raff": 1036, "raffaello": 1042, "rafiqu": [1041, 1042], "raghav": [0, 398, 1037, 1038, 1039, 1040, 1041, 1045], "raghavan": [413, 591, 840, 844, 1000, 1002, 1004], "raghu": [408, 442], "raghunathan": [1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "raghuv": [1048, 1049], "raghuwanshi": 1047, "rah": 642, "rahiel": 1037, "rahil": [1047, 1048, 1049, 1050, 1051], "rahimi": [642, 994], "rahmaan": 1043, "rahman": [1040, 1041, 1045], "rahn": [1040, 1043], "rahul": [1045, 1050], "rai": [0, 398, 1002, 1033, 1043, 1045, 1046], "raimundo": 1041, "rain": [43, 52, 187, 407, 998], "rainbow": [61, 234], "rainfal": 998, "rais": [2, 132, 213, 246, 247, 264, 273, 314, 322, 376, 378, 380, 381, 382, 385, 388, 390, 399, 402, 409, 412, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 510, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 577, 578, 582, 583, 589, 590, 591, 592, 604, 611, 612, 618, 630, 633, 636, 637, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 697, 699, 703, 710, 712, 713, 714, 715, 717, 728, 730, 731, 739, 779, 783, 784, 785, 788, 789, 790, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 815, 819, 823, 824, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 854, 855, 856, 860, 862, 863, 864, 865, 868, 869, 870, 871, 872, 877, 878, 879, 883, 884, 885, 892, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 924, 929, 931, 932, 934, 935, 953, 958, 962, 964, 985, 986, 987, 988, 990, 991, 1002, 1012, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "raisadz": 1051, "raise_exc": 712, "raise_except": 987, "raise_unknown": 964, "raise_warn": [273, 713, 987], "raj": [1050, 1051], "rajagopalan": [0, 398, 1041, 1045], "rajaona": [1039, 1040], "rajat": [1036, 1043], "rajdeep": 1042, "rajendra": 1041, "raji": [1048, 1049], "rakotoarison": [1040, 1041, 1043], "ralf": [1036, 1039, 1040, 1048, 1049, 1051], "ralph": 1051, "ram": [55, 86, 365, 402, 415, 897, 898, 1004, 1017, 1039, 1045, 1048, 1049], "ramakrishnan": [408, 442], "ramana": [1039, 1040], "ramanath": 1038, "ramesh": [371, 1026, 1036, 1039, 1043], "rameshwar": [1040, 1041], "ramil": [1041, 1042], "rammig": [1026, 1039], "ramo": 1048, "rampin": 1040, "ramyanp": [1045, 1046], "ramzi": 1045, "ram\u00edrez": 1002, "rand": [2, 53, 61, 72, 73, 74, 75, 79, 82, 91, 95, 127, 137, 151, 153, 163, 193, 198, 234, 235, 239, 245, 246, 285, 302, 320, 321, 326, 333, 334, 346, 352, 357, 385, 399, 545, 705, 706, 716, 758, 782, 787, 897, 898, 900, 901, 902, 1014, 1033, 1044, 1045], "rand_index": 706, "rand_scor": [2, 72, 408, 716, 1002, 1045], "randal": [885, 1037, 1047], "randi": 1039, "randint": [50, 72, 112, 118, 145, 182, 188, 235, 242, 246, 248, 282, 321, 326, 378, 381, 389, 399, 805, 822, 840, 841, 842, 844, 991, 992], "randn": [53, 69, 70, 74, 87, 98, 99, 111, 112, 123, 127, 150, 163, 170, 174, 185, 188, 202, 207, 208, 211, 225, 226, 229, 256, 259, 260, 265, 277, 279, 280, 285, 296, 297, 317, 320, 321, 326, 339, 344, 345, 349, 378, 381, 644, 671, 673, 679, 688, 822, 908, 911], "randolf": 1051, "random": [2, 14, 37, 43, 44, 45, 46, 50, 51, 52, 53, 58, 59, 61, 62, 63, 64, 67, 69, 70, 72, 74, 75, 79, 83, 85, 87, 90, 91, 93, 94, 95, 97, 98, 99, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 123, 127, 133, 135, 137, 139, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 161, 163, 164, 167, 170, 171, 174, 176, 177, 179, 181, 182, 183, 184, 185, 193, 194, 195, 196, 198, 202, 203, 207, 208, 210, 211, 212, 213, 214, 215, 218, 219, 221, 225, 226, 229, 230, 232, 233, 235, 236, 237, 238, 239, 244, 245, 246, 248, 249, 255, 256, 258, 259, 260, 261, 262, 265, 267, 268, 269, 270, 271, 273, 275, 277, 279, 280, 281, 282, 285, 289, 290, 295, 296, 297, 302, 305, 311, 313, 314, 317, 320, 321, 323, 325, 327, 329, 330, 333, 334, 339, 340, 342, 343, 344, 345, 346, 349, 351, 352, 363, 364, 368, 372, 379, 381, 388, 389, 390, 399, 403, 404, 406, 408, 416, 417, 421, 433, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 464, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 488, 489, 490, 491, 493, 496, 497, 498, 503, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 537, 539, 540, 541, 542, 545, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 583, 584, 585, 590, 608, 609, 611, 612, 628, 631, 633, 635, 640, 641, 642, 643, 644, 647, 648, 650, 651, 653, 654, 655, 659, 661, 662, 663, 664, 671, 672, 673, 677, 678, 679, 680, 688, 690, 691, 692, 693, 694, 695, 696, 702, 705, 706, 709, 732, 744, 782, 789, 794, 798, 799, 801, 803, 804, 805, 806, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 830, 831, 836, 838, 839, 840, 841, 842, 844, 845, 846, 850, 854, 861, 862, 863, 865, 868, 870, 879, 882, 886, 894, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 934, 946, 948, 949, 970, 972, 975, 992, 994, 997, 999, 1001, 1002, 1006, 1007, 1008, 1010, 1012, 1017, 1018, 1022, 1023, 1024, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "random_": 202, "random_02": 202, "random_05": 202, "random_08": 202, "random_11": 202, "random_cat": [188, 1010], "random_choice_csc": 1043, "random_forest": 139, "random_from_data": [258, 798, 799, 1001], "random_label": 72, "random_num": [188, 1010], "random_offset_": [642, 643], "random_project": [2, 233, 243, 897, 898, 899, 1014, 1019, 1034, 1039, 1049, 1050], "random_sampl": [198, 845, 846, 850], "random_se": [49, 118, 142], "random_search": [271, 278], "random_st": [43, 44, 45, 46, 49, 51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 73, 77, 78, 79, 80, 82, 83, 86, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 107, 113, 116, 118, 120, 122, 125, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 159, 164, 165, 167, 170, 176, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 195, 196, 199, 205, 211, 212, 215, 216, 218, 219, 220, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 244, 247, 248, 249, 250, 252, 253, 255, 257, 258, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 287, 289, 290, 293, 294, 298, 299, 300, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 332, 338, 340, 341, 342, 347, 348, 351, 352, 355, 358, 359, 372, 378, 381, 385, 389, 390, 404, 407, 408, 409, 412, 413, 415, 416, 420, 433, 437, 438, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 469, 474, 478, 487, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 584, 585, 594, 595, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 633, 634, 635, 636, 639, 640, 641, 642, 643, 647, 648, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 675, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 711, 736, 789, 793, 794, 798, 799, 800, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 850, 854, 861, 862, 863, 865, 870, 882, 886, 894, 897, 898, 905, 906, 907, 910, 912, 913, 914, 915, 916, 918, 919, 921, 923, 924, 946, 948, 949, 970, 972, 975, 991, 992, 994, 997, 1002, 1003, 1004, 1005, 1006, 1009, 1010, 1012, 1017, 1018, 1030, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "random_state_": [378, 537, 628, 854, 1047], "random_tre": 567, "random_tree_embed": 139, "random_unlabeled_point": [321, 900, 901, 902], "random_weights_": [642, 643], "randomforest": [49, 142, 363, 415, 913, 914, 1038], "randomforestclassifi": [2, 63, 64, 67, 89, 138, 139, 140, 141, 142, 156, 188, 189, 251, 252, 267, 282, 319, 321, 326, 351, 359, 389, 390, 406, 415, 417, 558, 559, 560, 562, 567, 568, 570, 804, 805, 823, 835, 915, 991, 992, 1003, 1010, 1026, 1030, 1037, 1038, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1050], "randomforestclassifierifittedrandomforestclassifi": [63, 141, 326], "randomforestclassifierinot": 326, "randomforestclassifierrandomforestclassifi": [63, 188, 251, 282], "randomforestregressor": [2, 49, 140, 153, 154, 157, 181, 182, 321, 326, 389, 415, 558, 559, 561, 563, 567, 569, 571, 633, 634, 915, 992, 1003, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050], "randomforestregressorrandomforestregressor": [154, 157], "randomgeek78": 1047, "randomized_range_find": [2, 385, 1034, 1039], "randomized_svd": [2, 55, 385, 451, 453, 533, 542, 545, 547, 1033, 1034, 1039, 1046, 1047, 1048], "randomized_svd_low_rank": 1040, "randomizedlasso": 1040, "randomizedlogisticregress": 1040, "randomizedpca": [1026, 1033, 1035, 1036, 1038, 1039, 1040], "randomizedsearchcv": [2, 45, 103, 170, 271, 278, 321, 359, 389, 399, 404, 576, 991, 1002, 1016, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1050, 1051], "randomizedsearchcvinot": 103, "randomli": [2, 52, 72, 83, 94, 103, 117, 137, 149, 150, 181, 183, 187, 229, 243, 247, 260, 265, 276, 287, 289, 329, 332, 359, 364, 385, 388, 389, 408, 412, 415, 418, 449, 458, 516, 524, 532, 538, 546, 547, 552, 560, 561, 562, 563, 564, 565, 566, 611, 612, 672, 680, 691, 695, 717, 798, 799, 861, 899, 913, 914, 915, 916, 1001, 1003, 1005, 1008, 1010, 1014, 1018, 1023, 1044, 1048, 1050], "randomst": [2, 44, 53, 58, 59, 61, 67, 70, 72, 79, 83, 94, 95, 112, 113, 116, 120, 122, 127, 135, 145, 146, 149, 150, 151, 153, 164, 170, 171, 174, 176, 177, 179, 181, 182, 185, 188, 193, 194, 195, 196, 198, 202, 207, 213, 214, 219, 226, 235, 239, 245, 246, 255, 258, 265, 273, 276, 277, 279, 280, 281, 282, 302, 305, 311, 313, 314, 317, 320, 321, 323, 325, 326, 329, 330, 334, 343, 357, 378, 381, 385, 390, 399, 413, 420, 421, 440, 443, 447, 449, 451, 452, 453, 454, 458, 459, 460, 462, 469, 470, 474, 475, 476, 478, 479, 480, 481, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 584, 585, 608, 609, 611, 612, 628, 633, 635, 640, 641, 642, 643, 644, 647, 648, 650, 651, 653, 654, 655, 659, 660, 661, 662, 663, 664, 667, 668, 669, 671, 672, 673, 675, 677, 678, 679, 680, 688, 690, 691, 692, 693, 694, 695, 696, 702, 782, 794, 798, 799, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 823, 829, 830, 831, 835, 836, 839, 840, 841, 842, 844, 845, 846, 850, 854, 861, 862, 863, 870, 882, 886, 894, 897, 898, 900, 901, 902, 905, 906, 907, 910, 911, 913, 914, 915, 916, 934, 948, 949, 970, 972, 975, 1012, 1028], "randomtreesembed": [2, 139, 152, 233, 415, 915, 992, 1034, 1041, 1042, 1046, 1047, 1048], "randomtreesembedding_": 567, "randomtreesembeddingrandomtreesembed": 139, "rang": [2, 43, 44, 45, 46, 47, 49, 51, 55, 57, 58, 62, 63, 64, 68, 69, 72, 73, 75, 77, 80, 81, 83, 84, 88, 93, 94, 96, 97, 109, 110, 112, 113, 134, 136, 137, 138, 141, 146, 149, 153, 163, 166, 167, 171, 186, 187, 191, 198, 202, 203, 207, 210, 212, 213, 216, 219, 220, 228, 230, 233, 235, 242, 243, 248, 249, 255, 257, 260, 261, 264, 265, 269, 270, 271, 273, 274, 275, 277, 278, 279, 281, 282, 283, 285, 289, 294, 300, 302, 303, 308, 310, 315, 316, 319, 323, 324, 330, 340, 347, 351, 352, 356, 358, 364, 370, 371, 373, 376, 378, 382, 385, 390, 402, 408, 412, 415, 418, 440, 461, 469, 471, 472, 473, 474, 475, 476, 478, 481, 491, 495, 496, 515, 528, 542, 554, 555, 560, 561, 564, 589, 590, 592, 630, 633, 639, 641, 649, 650, 670, 672, 677, 678, 679, 681, 693, 713, 732, 747, 789, 831, 837, 851, 853, 855, 856, 861, 875, 882, 883, 884, 890, 891, 894, 895, 898, 899, 948, 949, 991, 998, 1002, 1006, 1016, 1022, 1026, 1038, 1039, 1040, 1041, 1043, 1046, 1049], "range_n_clust": 93, "range_n_outli": 112, "rangeindex": [186, 264, 497], "rangl": [994, 1002, 1016, 1017], "ranjanikrishnan": 1046, "rank": [2, 43, 55, 62, 111, 124, 127, 141, 166, 188, 189, 230, 268, 270, 278, 372, 403, 405, 406, 410, 411, 413, 415, 416, 509, 510, 522, 525, 550, 551, 594, 595, 607, 649, 658, 670, 681, 697, 721, 727, 728, 740, 741, 757, 789, 795, 804, 805, 949, 991, 993, 994, 999, 1010, 1012, 1026, 1028, 1034, 1039, 1042, 1043, 1047, 1048, 1051], "rank_": 658, "rank_t": 801, "rank_test_": 274, "rank_test_precis": [268, 274], "rank_test_recal": 268, "rank_test_scor": [270, 278, 801, 815, 1039], "rankdata": 1040, "ranked_exposur": [212, 230], "ranked_frequ": 212, "ranked_pure_premium": 230, "ranking_": [166, 594, 595], "rankylau": 1041, "ransac": [2, 183, 192, 218, 229, 525, 650, 658, 672, 679, 680, 1023], "ransacregressor": [2, 215, 218, 229, 399, 650, 679, 680, 998, 1003, 1036, 1038, 1039, 1040, 1041, 1044, 1046, 1047, 1051], "rao": [412, 1045, 1048], "raphael": 1050, "rapha\u00ebl": 1043, "raphson": [649, 670, 681], "rapid": 1026, "rapidli": [216, 272, 1017, 1026], "rare": [64, 187, 316, 359, 380, 388, 390, 393, 406, 408, 412, 590, 649, 659, 660, 670, 681, 905, 936, 998, 1012, 1026, 1040, 1041, 1042, 1046, 1048, 1051], "rarer": [351, 353, 416], "raschka": [1038, 1039, 1040, 1041, 1042, 1045], "rashchedrin": 1040, "rasmu": [191, 1040], "rasmussen": [175, 418, 611, 612, 615, 620, 623], "raspberri": 394, "raster": 102, "rastgoo": 1050, "rastogi": 1041, "rastrojo": [408, 706], "rasul": [1038, 1040, 1041], "rat": [50, 303, 371, 499], "rate": [2, 43, 134, 138, 143, 149, 163, 187, 212, 219, 230, 243, 249, 264, 267, 270, 279, 280, 306, 307, 308, 365, 376, 407, 408, 409, 413, 417, 446, 466, 537, 554, 555, 560, 561, 562, 563, 593, 596, 597, 599, 600, 601, 607, 645, 646, 669, 677, 678, 679, 693, 699, 703, 728, 783, 790, 861, 862, 863, 899, 991, 998, 999, 1002, 1005, 1006, 1016, 1018, 1026, 1037, 1041, 1042], "rather": [51, 64, 86, 113, 134, 137, 149, 181, 186, 212, 213, 226, 249, 284, 314, 315, 351, 352, 359, 364, 372, 374, 376, 378, 381, 382, 384, 388, 389, 390, 391, 408, 412, 413, 415, 416, 418, 448, 461, 463, 464, 467, 566, 582, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 630, 647, 648, 653, 654, 661, 662, 663, 664, 782, 815, 836, 838, 839, 868, 905, 906, 917, 922, 949, 996, 998, 999, 1002, 1004, 1005, 1009, 1022, 1033, 1034, 1035, 1036, 1040, 1041, 1042, 1043, 1048, 1049, 1051], "ratio": [2, 46, 86, 99, 105, 128, 183, 243, 245, 258, 262, 363, 376, 408, 410, 412, 415, 450, 456, 494, 495, 516, 542, 550, 551, 552, 632, 659, 711, 713, 717, 726, 731, 737, 740, 783, 784, 785, 788, 796, 828, 831, 851, 898, 970, 996, 1008, 1018, 1023, 1048, 1050], "ration": [2, 175, 264, 624, 1000], "rationalquadrat": [2, 175, 179, 418, 617], "raton": 998, "raul": [1035, 1036], "rausch": [1041, 1042, 1045], "rauwuckl": 1045, "ravel": [2, 44, 53, 55, 57, 63, 77, 86, 87, 91, 111, 129, 135, 137, 142, 146, 152, 153, 154, 161, 170, 172, 174, 175, 176, 177, 186, 193, 203, 204, 206, 212, 225, 226, 233, 237, 239, 243, 245, 249, 253, 257, 259, 264, 273, 277, 279, 284, 290, 295, 296, 302, 303, 305, 306, 307, 308, 312, 313, 323, 327, 334, 340, 345, 346, 348, 349, 351, 357, 465, 494, 495, 496, 632, 719, 988, 1002, 1049], "ravi": [1045, 1048], "raw": [2, 17, 43, 51, 52, 54, 72, 112, 122, 154, 175, 186, 191, 308, 317, 331, 353, 363, 371, 378, 384, 390, 406, 408, 410, 413, 416, 469, 474, 502, 503, 504, 560, 561, 562, 564, 583, 589, 590, 591, 592, 635, 678, 691, 695, 706, 787, 851, 909, 999, 1002, 1006, 1008, 1009, 1012, 1015, 1034, 1038, 1041, 1044, 1050], "raw_coef_": [905, 906], "raw_covariance_": [410, 469, 474], "raw_data": 353, "raw_docu": [589, 592], "raw_location_": [410, 469, 474], "raw_model": 317, "raw_pixel_classifi": 308, "raw_support_": [469, 474], "raw_target_regr": 409, "raw_valu": [722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 1002, 1041, 1044], "raw_x": [416, 583], "raytheon": 51, "raz": 1047, "ra\u00fal": 1042, "rb": [47, 402], "rbf": [2, 44, 45, 46, 49, 50, 66, 67, 125, 155, 161, 170, 171, 172, 174, 175, 176, 177, 178, 179, 183, 191, 226, 238, 239, 245, 268, 270, 272, 275, 296, 334, 335, 337, 346, 368, 396, 409, 413, 415, 452, 462, 503, 505, 536, 542, 611, 612, 613, 614, 617, 619, 620, 621, 622, 624, 625, 632, 640, 641, 642, 643, 644, 677, 692, 766, 775, 777, 801, 812, 815, 821, 865, 885, 900, 901, 905, 907, 908, 909, 910, 911, 991, 994, 995, 999, 1002, 1008, 1012, 1015, 1023, 1028, 1039, 1044], "rbf_featur": [642, 994], "rbf_kernel": [2, 404, 766, 1000, 1037], "rbf_svc": [334, 1017], "rbfsampler": [2, 244, 640, 641, 643, 994, 1037, 1047, 1048], "rbm": [2, 308, 861, 862, 863, 1007], "rbm_features_classifi": 308, "rc": [226, 380], "rceil": [405, 1008], "rcond": 129, "rcparam": [47, 239, 244, 317], "rcv1": [2, 369, 498, 1028, 1038], "rcwoolston": 1044, "rd": 416, "rd9e56ef97513": 2, "rda": 373, "rdbu": [67, 70, 120, 228, 305, 340, 345], "rdbu_r": [87, 113, 130, 340], "rdownload": 47, "rdylbu": [142, 356], "re": [43, 47, 53, 63, 64, 89, 102, 103, 134, 143, 173, 185, 186, 230, 246, 256, 260, 273, 275, 279, 320, 351, 353, 364, 376, 377, 384, 389, 391, 399, 406, 412, 416, 469, 470, 471, 472, 473, 474, 475, 476, 492, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 647, 653, 661, 663, 803, 818, 821, 913, 914, 915, 916, 998, 1003, 1005, 1012, 1017, 1022, 1026, 1033, 1037, 1038, 1040, 1042], "reach": [94, 140, 144, 168, 176, 212, 214, 228, 230, 264, 272, 323, 340, 358, 381, 391, 394, 408, 413, 417, 450, 457, 509, 510, 594, 595, 628, 645, 646, 647, 648, 653, 654, 655, 656, 657, 661, 662, 663, 664, 667, 668, 669, 677, 678, 679, 680, 682, 683, 684, 685, 730, 731, 784, 798, 799, 862, 863, 902, 991, 1002, 1006, 1016, 1018, 1026, 1044, 1048, 1049, 1050], "reachability_": [98, 408, 450, 455, 456, 457], "reachabl": [2, 88, 98, 446, 450, 455, 456, 457, 851, 955], "react": 302, "reactiv": 382, "read": [47, 52, 55, 120, 232, 277, 319, 320, 321, 323, 325, 363, 370, 377, 378, 379, 380, 381, 383, 384, 388, 389, 390, 396, 402, 408, 419, 420, 421, 422, 425, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 861, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 945, 991, 998, 1002, 1003, 1021, 1026, 1034, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1050, 1051], "read_byt": 47, "read_csv": [51, 381, 497, 1048], "read_csv_kwarg": [497, 1049], "read_parquet": 52, "readabl": [113, 271, 322, 381, 382, 384, 535, 1042, 1045, 1046, 1047, 1048], "reader": [45, 77, 322, 365, 376], "readi": [43, 46, 175, 213, 264, 371, 376, 380, 384, 464], "readili": [323, 413, 1018, 1026], "readm": [384, 416, 494], "readonli": [905, 906, 1046, 1048, 1049], "readonly_memmap": 1050, "readthedoc": 390, "real": [52, 67, 70, 88, 90, 102, 106, 109, 111, 112, 134, 149, 173, 186, 216, 236, 239, 249, 263, 264, 276, 285, 294, 297, 311, 312, 339, 344, 353, 357, 363, 369, 370, 373, 380, 382, 385, 388, 389, 390, 405, 406, 408, 410, 412, 413, 415, 416, 469, 489, 490, 494, 495, 496, 497, 498, 501, 502, 505, 511, 552, 553, 556, 557, 558, 559, 560, 561, 565, 566, 593, 595, 596, 597, 598, 599, 600, 601, 632, 700, 705, 725, 729, 753, 756, 758, 786, 796, 830, 862, 863, 907, 908, 909, 910, 911, 914, 916, 992, 993, 994, 999, 1002, 1004, 1006, 1007, 1008, 1018, 1020, 1023, 1028, 1033, 1046, 1050], "real_cov": [109, 110, 421, 470, 473, 474, 475, 476, 479, 480, 481], "real_data": 294, "realist": [43, 47, 272, 279, 280, 337, 371, 1002], "realiti": 372, "realiz": [212, 1026], "realli": [109, 188, 202, 380, 381, 382, 1002, 1008, 1026, 1047], "reappli": 415, "rearrang": [58, 59, 405], "reason": [43, 47, 51, 64, 77, 86, 102, 146, 149, 168, 186, 187, 191, 212, 213, 220, 230, 239, 243, 244, 246, 249, 264, 267, 270, 271, 276, 283, 287, 290, 311, 315, 344, 352, 353, 359, 363, 364, 365, 371, 375, 376, 377, 378, 380, 384, 388, 389, 390, 391, 407, 408, 409, 410, 413, 415, 416, 509, 533, 575, 639, 647, 653, 655, 673, 688, 693, 764, 801, 815, 849, 854, 861, 880, 902, 921, 923, 924, 991, 992, 997, 998, 999, 1002, 1004, 1005, 1006, 1008, 1012, 1016, 1017, 1018, 1026, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "reassign": [83, 376, 447, 449, 1034, 1038], "reassignment_ratio": 449, "rebalanc": 390, "rebas": 380, "rebecca": 1040, "rebekah": [1041, 1042, 1043], "reboul": 1043, "rebuild": [363, 374, 402, 416, 442], "rebuilt": [68, 374, 845, 846], "rec": [57, 353, 371, 642], "rec_l1": 53, "rec_l2": 53, "rec_macro": 412, "recal": [2, 45, 62, 68, 102, 113, 125, 165, 183, 240, 249, 262, 264, 268, 287, 308, 329, 330, 376, 390, 407, 408, 505, 605, 701, 707, 708, 709, 713, 714, 728, 730, 731, 732, 783, 784, 785, 788, 789, 823, 831, 834, 866, 885, 889, 905, 998, 1018, 1023, 1036, 1037, 1040, 1042, 1043, 1045, 1046, 1047, 1049, 1050], "recalcul": [250, 252, 408, 1030, 1033], "recall_macro": [412, 1002], "recall_scor": [2, 62, 264, 277, 412, 709, 785, 1002, 1033, 1035, 1036, 1037, 1038, 1043, 1049], "recant": 391, "receiv": [0, 2, 57, 159, 183, 240, 246, 252, 262, 264, 265, 267, 272, 353, 359, 376, 378, 384, 390, 407, 412, 415, 505, 659, 703, 707, 709, 728, 783, 789, 790, 820, 831, 833, 834, 872, 910, 1003, 1006, 1007, 1016, 1023, 1043, 1044], "recent": [52, 246, 374, 381, 384, 388, 390, 408, 468, 539, 566, 1016, 1026, 1036, 1045], "recht": [642, 994], "recip": [380, 402, 999, 1026], "reciproc": [372, 1002], "reckon": 371, "recogn": [43, 44, 65, 84, 86, 116, 123, 166, 183, 213, 263, 294, 322, 329, 330, 382, 399, 408, 416, 503, 698, 714, 831, 910, 1002, 1023, 1050], "recognit": [42, 48, 54, 120, 183, 248, 308, 315, 369, 381, 413, 495, 503, 533, 535, 542, 698, 709, 714, 742, 770, 789, 790, 798, 815, 831, 885, 910, 994, 998, 1002, 1003, 1007, 1017, 1019, 1023, 1028, 1033], "recommend": [116, 181, 229, 240, 246, 266, 279, 314, 321, 344, 363, 364, 370, 371, 374, 376, 378, 382, 384, 388, 394, 402, 411, 412, 413, 415, 417, 438, 447, 449, 451, 460, 497, 509, 536, 539, 545, 550, 562, 563, 570, 583, 584, 590, 607, 612, 632, 633, 639, 659, 660, 671, 677, 693, 698, 699, 701, 703, 807, 813, 815, 824, 861, 868, 870, 877, 884, 885, 890, 891, 893, 894, 895, 896, 898, 907, 910, 949, 990, 991, 999, 1002, 1004, 1006, 1009, 1012, 1014, 1016, 1017, 1018, 1020, 1026, 1028, 1035, 1036, 1042, 1043, 1044, 1045, 1047, 1049], "recompil": [377, 382, 394], "recomput": [88, 89, 250, 252, 292, 319, 469, 474, 998, 1014, 1038, 1049], "reconstruct": [2, 42, 55, 58, 99, 120, 121, 125, 183, 211, 235, 236, 323, 402, 413, 416, 417, 482, 483, 484, 532, 534, 536, 538, 539, 540, 541, 543, 544, 546, 547, 549, 584, 588, 653, 673, 689, 690, 694, 897, 898, 998, 999, 1023, 1047], "reconstruct_from_patches_2d": [2, 123, 416, 584], "reconstruction_err_": [539, 541], "reconstruction_error": 689, "reconstruction_error_": 690, "record": [2, 50, 121, 138, 149, 188, 246, 264, 316, 353, 363, 376, 402, 408, 410, 450, 457, 499, 621, 644, 693, 772, 775, 779, 780, 781, 782, 828, 851, 1046, 1047], "recov": [75, 98, 113, 121, 122, 127, 143, 170, 185, 198, 211, 212, 216, 232, 283, 353, 410, 414, 417, 420, 460, 534, 560, 998, 999, 1001, 1022, 1039], "recoveri": [51, 113, 198, 211, 410, 417], "recreat": 250, "rect": [47, 85, 193], "rect_colorbar": 310, "rect_histi": 310, "rect_histx": 310, "rect_scatt": 310, "rectangl": 47, "rectangular": [371, 390, 949, 1022], "rectifi": [862, 863], "recurs": [2, 18, 52, 150, 159, 162, 165, 168, 183, 265, 268, 269, 275, 284, 294, 355, 378, 408, 412, 440, 441, 442, 445, 463, 503, 516, 564, 594, 595, 598, 603, 633, 634, 659, 820, 865, 875, 1002, 1005, 1008, 1009, 1018, 1023, 1024, 1028, 1033, 1043, 1044], "recursionerror": 1051, "red": [48, 49, 50, 63, 69, 70, 93, 111, 118, 120, 121, 122, 137, 154, 157, 179, 191, 193, 194, 203, 210, 237, 250, 265, 276, 303, 306, 311, 315, 316, 331, 340, 357, 374, 390, 408, 413, 1003], "reda": 1039, "redden": 1044, "reddi": [1040, 1041, 1042, 1047, 1050], "redefin": [58, 146, 186], "redesign": [388, 1033], "redirects_en": 55, "redirects_filenam": 55, "redirects_url": 55, "redistribut": 442, "redo": 352, "reduc": [2, 37, 43, 46, 77, 80, 81, 86, 103, 104, 109, 137, 146, 148, 149, 152, 165, 186, 193, 194, 198, 210, 216, 217, 220, 241, 243, 246, 249, 271, 277, 287, 299, 312, 315, 316, 324, 352, 353, 359, 368, 370, 373, 376, 382, 388, 390, 402, 406, 407, 408, 410, 412, 413, 415, 416, 417, 419, 444, 445, 450, 457, 460, 494, 535, 545, 550, 556, 557, 558, 559, 564, 565, 566, 567, 574, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 611, 628, 644, 653, 673, 674, 675, 676, 688, 693, 696, 782, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 832, 874, 875, 882, 894, 897, 898, 905, 906, 913, 914, 915, 916, 991, 994, 996, 997, 998, 999, 1002, 1005, 1014, 1015, 1017, 1019, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1047, 1049, 1051], "reduce_dim": [104, 251, 269, 409], "reduce_dim__k": 104, "reduce_dim__n_compon": [104, 269, 409], "reduce_func": [782, 1044], "reduced_data": 91, "reducer_label": 104, "reduct": [2, 11, 45, 57, 87, 90, 101, 105, 116, 120, 128, 137, 152, 183, 231, 233, 234, 237, 243, 247, 291, 298, 300, 323, 337, 359, 363, 368, 408, 409, 411, 413, 415, 417, 468, 482, 483, 484, 485, 503, 531, 533, 535, 536, 539, 540, 541, 542, 545, 548, 550, 554, 555, 558, 559, 560, 561, 565, 566, 567, 600, 608, 689, 690, 691, 692, 693, 694, 782, 801, 831, 847, 854, 861, 865, 866, 875, 885, 903, 905, 913, 914, 915, 916, 994, 999, 1014, 1018, 1021, 1022, 1023, 1024, 1026, 1028, 1034, 1035, 1036, 1039, 1047, 1048, 1049], "redund": [62, 64, 130, 167, 256, 261, 326, 359, 372, 375, 376, 381, 390, 406, 516, 635, 1022, 1045], "redundantli": 390, "ref": [376, 384, 992, 1039], "ref_lin": 438, "refactor": [323, 428, 1033, 1035, 1036, 1037, 1043, 1046, 1047, 1048], "refer": [43, 44, 72, 73, 93, 96, 103, 111, 126, 134, 147, 149, 154, 168, 175, 179, 188, 200, 230, 246, 249, 264, 270, 275, 276, 277, 284, 293, 300, 310, 319, 320, 321, 322, 323, 324, 325, 326, 327, 352, 364, 370, 371, 373, 374, 376, 377, 378, 379, 381, 382, 383, 384, 388, 389, 390, 391, 394, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 457, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 499, 504, 512, 514, 516, 517, 518, 519, 520, 521, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 545, 548, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 591, 594, 595, 596, 603, 608, 609, 611, 612, 615, 620, 623, 624, 628, 629, 632, 633, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 648, 650, 652, 654, 656, 657, 659, 662, 664, 666, 667, 668, 669, 672, 674, 676, 677, 679, 680, 683, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 705, 706, 708, 709, 710, 711, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 730, 731, 732, 735, 736, 737, 738, 739, 741, 742, 744, 757, 759, 760, 770, 784, 786, 787, 789, 790, 793, 794, 796, 798, 799, 801, 802, 803, 804, 805, 806, 807, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 835, 836, 840, 841, 842, 844, 847, 850, 851, 852, 854, 861, 862, 863, 865, 870, 871, 872, 874, 875, 877, 878, 879, 881, 882, 883, 885, 886, 893, 898, 899, 900, 901, 902, 903, 905, 907, 908, 910, 911, 913, 914, 915, 916, 936, 943, 944, 949, 967, 991, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1025, 1033, 1037, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "referenc": [373, 376, 378, 384, 390, 897, 898, 1005, 1040, 1046], "references_": 882, "refin": [62, 113, 472, 710, 1002], "refit": [141, 159, 165, 167, 183, 262, 269, 271, 274, 277, 278, 282, 390, 407, 412, 418, 503, 568, 569, 628, 660, 666, 714, 801, 804, 805, 815, 823, 831, 910, 991, 998, 1002, 1023, 1040, 1041, 1042, 1051], "refit_strategi": 268, "refit_time_": [801, 804, 805, 815, 1041], "reflect": [51, 75, 80, 81, 111, 118, 121, 143, 187, 188, 212, 230, 279, 294, 352, 372, 375, 376, 380, 390, 393, 405, 450, 456, 999, 1002, 1008, 1010, 1034, 1042, 1051], "reformul": 375, "refrain": [213, 376], "refurbish": 7, "refus": [264, 388, 895, 896], "reg": [147, 186, 194, 246, 311, 320, 345, 415, 559, 561, 569, 651, 652, 654, 655, 656, 657, 658, 664, 665, 666, 671, 672, 679, 680, 690, 694, 916, 998, 1038], "reg1": [157, 415], "reg2": [157, 415], "reg3": [157, 415], "reg_covar": [255, 798, 799], "reg_nnl": 208, "reg_ol": 208, "reg_param": 551, "regard": [0, 11, 44, 46, 50, 52, 86, 88, 103, 125, 126, 160, 170, 175, 187, 188, 202, 214, 234, 245, 249, 272, 279, 280, 293, 352, 371, 376, 377, 381, 388, 390, 396, 402, 408, 413, 415, 416, 418, 443, 447, 452, 459, 462, 502, 615, 620, 657, 659, 702, 744, 799, 807, 823, 824, 829, 847, 848, 995, 998, 1002, 1004, 1005, 1007, 1009, 1016, 1017, 1018, 1040, 1043], "regardless": [230, 271, 272, 273, 364, 376, 408, 536, 633, 634, 659, 705, 716, 1002, 1014, 1041, 1048, 1049], "regedit": 394, "regener": 870, "regex": [270, 353, 464, 466], "regexp": [589, 590, 592], "regim": [43, 390, 905, 906, 1001], "region": [51, 55, 59, 62, 71, 81, 82, 86, 89, 99, 123, 155, 177, 183, 186, 212, 230, 239, 243, 244, 261, 302, 313, 340, 347, 373, 383, 390, 408, 415, 418, 448, 450, 456, 462, 588, 999, 1002, 1005, 1008, 1012, 1016, 1018, 1023], "region_1": 316, "region_2": 316, "regist": [2, 198, 351, 382, 971], "register_parallel_backend": [2, 1041, 1051], "registri": [374, 394, 1021], "regr": [409, 555, 557, 566, 647, 648, 668, 838, 863, 906, 908, 911, 1017], "regr_1": [135, 357], "regr_2": [135, 357], "regr_3": 357, "regr_multirf": 153, "regr_rf": 153, "regress": [2, 14, 19, 22, 24, 31, 40, 46, 49, 53, 62, 64, 66, 87, 101, 103, 111, 112, 114, 121, 122, 123, 126, 128, 130, 133, 134, 137, 139, 140, 141, 144, 145, 148, 149, 153, 154, 160, 166, 168, 169, 171, 179, 181, 182, 183, 185, 186, 187, 188, 189, 192, 195, 196, 198, 199, 201, 203, 207, 208, 213, 215, 216, 217, 218, 221, 223, 228, 235, 238, 240, 248, 249, 253, 264, 266, 278, 281, 283, 284, 285, 289, 291, 293, 307, 308, 310, 311, 315, 321, 322, 323, 324, 326, 335, 336, 337, 347, 348, 351, 354, 355, 358, 364, 365, 368, 369, 371, 373, 376, 378, 381, 384, 385, 388, 389, 390, 403, 406, 410, 411, 412, 413, 415, 417, 431, 437, 464, 465, 474, 484, 489, 490, 493, 497, 502, 503, 505, 506, 513, 517, 518, 519, 525, 529, 532, 536, 538, 540, 542, 543, 544, 546, 547, 549, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 571, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 606, 607, 610, 611, 612, 615, 616, 623, 624, 626, 632, 633, 634, 635, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 695, 702, 707, 722, 724, 725, 729, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 786, 791, 792, 801, 804, 805, 807, 815, 824, 828, 829, 831, 832, 834, 836, 838, 839, 847, 848, 853, 855, 856, 862, 863, 865, 866, 869, 870, 872, 878, 879, 880, 882, 885, 886, 889, 894, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 919, 923, 925, 931, 934, 936, 953, 991, 992, 994, 997, 999, 1009, 1010, 1012, 1013, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "regression_data": 46, "regression_model": 1040, "regression_test": 384, "regressioncriterion": 1041, "regressionregressionramdomizedpcaramdom": 396, "regressor": [2, 30, 43, 107, 116, 147, 153, 154, 157, 170, 175, 182, 183, 186, 192, 194, 196, 198, 209, 212, 213, 215, 218, 229, 230, 246, 273, 285, 295, 315, 320, 321, 363, 376, 378, 388, 390, 406, 409, 418, 431, 434, 435, 436, 465, 482, 483, 484, 485, 525, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 566, 567, 568, 569, 570, 571, 606, 607, 610, 612, 633, 634, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 679, 680, 702, 833, 834, 837, 838, 839, 848, 856, 861, 862, 863, 866, 872, 880, 885, 886, 906, 908, 911, 913, 914, 915, 916, 919, 923, 924, 925, 938, 941, 943, 991, 992, 998, 1002, 1003, 1005, 1010, 1016, 1021, 1023, 1024, 1028, 1033, 1034, 1038, 1039, 1040, 1042, 1043, 1046, 1047, 1048, 1050], "regressor_": [186, 465, 594, 595, 598], "regressor__sample_weight": 212, "regressor_tag": [924, 938], "regressor_with_": 185, "regressor_without_": 185, "regressorchain": [2, 399, 836, 838, 1041, 1044, 1048], "regressormixin": [2, 246, 378, 390, 465, 925, 1044], "regressortag": [2, 924, 938], "regul": 0, "regular": [2, 62, 64, 67, 71, 75, 90, 91, 92, 93, 94, 103, 105, 110, 125, 133, 142, 144, 145, 147, 152, 159, 161, 170, 171, 172, 174, 177, 179, 181, 183, 185, 192, 193, 194, 196, 198, 200, 201, 202, 204, 208, 209, 210, 212, 219, 226, 228, 230, 245, 256, 262, 263, 266, 271, 272, 274, 295, 296, 304, 306, 307, 308, 312, 313, 314, 315, 316, 317, 334, 335, 337, 339, 340, 341, 344, 345, 351, 353, 355, 363, 376, 388, 389, 406, 408, 410, 411, 413, 414, 415, 418, 437, 443, 447, 471, 472, 476, 478, 479, 480, 481, 505, 513, 515, 516, 521, 523, 525, 529, 539, 540, 541, 544, 548, 549, 551, 560, 562, 563, 589, 590, 592, 639, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 690, 694, 736, 742, 751, 798, 799, 818, 824, 831, 832, 862, 863, 866, 885, 905, 906, 907, 908, 910, 911, 912, 991, 992, 994, 995, 996, 997, 999, 1001, 1007, 1008, 1012, 1015, 1016, 1017, 1023, 1024, 1026, 1028, 1033, 1034, 1035, 1037, 1038, 1042, 1043, 1045, 1046, 1051], "regularis": [216, 421, 473, 475], "regularli": [142, 287, 388, 1004], "regulatori": 149, "rehan": 1048, "rehman": 1041, "reiichiro": [1040, 1041], "reilli": 1050, "reimburs": 264, "reimplement": [382, 388, 390, 1039, 1043], "reinforc": 1022, "reinit": 384, "reiniti": 388, "reinstal": 394, "reintroduc": 1049, "reitsam": 1045, "reject": [247, 264, 390, 391, 524, 672, 728, 931, 932, 998, 1002, 1041], "rel": [43, 45, 47, 55, 58, 64, 88, 94, 125, 141, 175, 189, 191, 194, 212, 230, 258, 283, 296, 297, 311, 320, 323, 340, 344, 351, 352, 371, 375, 378, 384, 390, 406, 408, 412, 415, 416, 418, 440, 443, 447, 449, 459, 522, 525, 532, 535, 538, 542, 546, 547, 558, 559, 560, 561, 565, 566, 567, 605, 650, 659, 660, 672, 673, 675, 691, 695, 730, 747, 748, 801, 804, 805, 807, 815, 824, 829, 832, 845, 846, 850, 862, 863, 874, 875, 885, 901, 905, 906, 907, 910, 912, 913, 914, 915, 916, 998, 999, 1002, 1004, 1005, 1006, 1008], "relabel": [375, 819, 820, 902], "relat": [8, 42, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 370, 371, 372, 375, 376, 380, 381, 383, 384, 385, 388, 390, 391, 393, 399, 402, 407, 408, 409, 410, 411, 412, 413, 415, 418, 450, 464, 469, 497, 550, 551, 563, 564, 640, 674, 678, 693, 702, 724, 744, 822, 828, 863, 864, 866, 869, 870, 875, 878, 880, 881, 884, 893, 909, 991, 994, 996, 1002, 1003, 1005, 1006, 1009, 1012, 1017, 1018, 1019, 1022, 1023, 1025, 1028, 1033, 1037, 1038, 1039, 1041, 1042, 1045, 1046, 1049], "relate_point": 300, "relationship": [2, 43, 52, 58, 134, 135, 149, 176, 185, 186, 193, 198, 201, 212, 214, 215, 277, 284, 289, 311, 317, 326, 390, 408, 410, 412, 462, 497, 637, 715, 999, 1002, 1004, 1005, 1009, 1010, 1038], "relative_tim": 258, "relax": [46, 408, 416, 453, 1015, 1040], "releas": [0, 54, 88, 103, 132, 138, 139, 141, 151, 168, 181, 182, 187, 188, 191, 212, 213, 214, 241, 246, 250, 251, 252, 253, 264, 265, 282, 284, 292, 316, 332, 364, 374, 376, 377, 379, 384, 388, 390, 416, 443, 446, 447, 464, 467, 490, 491, 497, 502, 503, 505, 513, 516, 522, 525, 539, 542, 562, 563, 565, 566, 568, 600, 603, 629, 631, 633, 635, 641, 647, 649, 653, 659, 670, 681, 689, 698, 702, 703, 718, 719, 733, 743, 749, 779, 789, 796, 800, 801, 802, 804, 805, 807, 815, 823, 824, 827, 828, 831, 847, 849, 866, 870, 875, 878, 879, 880, 884, 885, 886, 902, 903, 905, 910, 913, 914, 944, 1018, 1023, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "release_highlight": 1023, "relev": [46, 48, 57, 108, 112, 168, 183, 193, 207, 215, 270, 271, 277, 359, 363, 365, 371, 373, 375, 376, 378, 381, 382, 390, 391, 399, 410, 411, 417, 418, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 727, 741, 757, 800, 802, 803, 804, 805, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 883, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 1002, 1003, 1008, 1019, 1022, 1023, 1036, 1041, 1047], "reli": [125, 140, 143, 168, 189, 200, 202, 287, 290, 320, 324, 351, 363, 364, 378, 381, 384, 385, 388, 390, 404, 405, 408, 413, 415, 416, 550, 594, 598, 608, 609, 779, 829, 832, 870, 954, 967, 991, 994, 996, 998, 1002, 1005, 1010, 1012, 1017, 1026, 1041, 1042, 1043, 1047, 1049, 1050], "reliabl": [2, 62, 64, 406, 412, 438, 439, 647, 1018, 1026], "relianc": [125, 216], "religion": [57, 271, 351, 352, 353, 371, 1003], "reloc": 1042, "relova": 1046, "relu": [862, 863], "remain": [47, 62, 64, 103, 134, 141, 145, 147, 167, 186, 212, 216, 228, 255, 268, 272, 276, 279, 405, 408, 409, 410, 412, 416, 446, 464, 467, 516, 517, 522, 529, 535, 571, 611, 612, 764, 770, 804, 805, 806, 809, 811, 840, 841, 842, 844, 953, 991, 992, 994, 1001, 1002, 1006, 1012, 1018, 1022, 1035, 1041, 1047, 1050], "remaind": [43, 143, 186, 202, 212, 214, 230, 249, 324, 355, 409, 464, 467, 1033, 1040, 1041, 1042, 1045, 1046, 1049, 1051], "remaining_column": 464, "remark": [88, 116, 168, 264, 365, 376, 1012], "remedi": 229, "rememb": [88, 378, 380, 381, 394, 416, 1005, 1009, 1018], "remi": 1040, "remind": [246, 391], "reminisc": 123, "remot": [191, 330, 376, 379], "remov": [1, 2, 44, 54, 55, 87, 88, 102, 107, 166, 168, 181, 182, 186, 189, 271, 310, 317, 319, 320, 321, 326, 351, 352, 355, 359, 368, 371, 375, 376, 377, 378, 380, 381, 385, 390, 394, 401, 408, 409, 412, 415, 416, 418, 419, 428, 442, 444, 445, 450, 457, 482, 483, 484, 485, 488, 489, 528, 535, 536, 539, 541, 542, 554, 568, 569, 570, 571, 580, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 612, 631, 645, 655, 656, 657, 659, 660, 674, 676, 680, 693, 710, 743, 779, 780, 781, 783, 801, 804, 805, 807, 815, 824, 829, 830, 832, 852, 864, 865, 869, 870, 882, 883, 885, 894, 902, 920, 929, 931, 932, 943, 944, 992, 999, 1005, 1018, 1024, 1028, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "remove_zero_eig": [536, 1035, 1042], "rempfler": 1044, "renaissance0n": 1051, "renam": [126, 147, 189, 260, 271, 319, 376, 380, 408, 447, 459, 464, 471, 472, 478, 528, 537, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 779, 878, 929, 931, 932, 1033, 1034, 1035, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "rename_axi": 270, "render": [51, 63, 86, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 208, 216, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 376, 378, 380, 381, 382, 390, 552, 590, 632, 701, 703, 882, 894, 917, 919, 1001, 1018, 1046, 1050], "rene": 1046, "renni": [2, 840, 842, 1004, 1041], "renorm": 63, "rent": 43, "rental": [43, 52, 187, 1009], "reorder": [58, 390, 698, 719, 1022, 1041], "reordered_data": 58, "reordered_row": 58, "reorgan": 1039, "rep": 373, "reparameter": 1017, "reparametr": 347, "repartit": 43, "repeat": [2, 49, 69, 99, 110, 112, 145, 168, 170, 176, 177, 187, 191, 214, 264, 265, 270, 271, 282, 287, 330, 352, 353, 378, 385, 390, 391, 405, 406, 408, 413, 416, 417, 589, 594, 608, 609, 616, 628, 635, 660, 806, 816, 817, 820, 937, 992, 1001, 1018, 1028, 1041, 1043], "repeatedkfold": [2, 186, 412, 806, 817, 1040], "repeatedli": [134, 323, 359, 390, 408, 415, 418, 509, 547, 667, 668, 677, 678, 679, 782, 992, 1006], "repeatedstratifiedkfold": [2, 270, 284, 287, 412, 816, 820, 1040], "repercuss": 315, "repetit": [270, 284, 287, 381, 412, 816, 817, 1010, 1047], "replac": [2, 43, 62, 111, 124, 134, 149, 170, 175, 177, 181, 187, 199, 213, 253, 273, 290, 312, 317, 321, 342, 374, 376, 380, 382, 385, 390, 402, 409, 412, 415, 416, 441, 445, 464, 504, 516, 556, 557, 564, 583, 589, 590, 591, 592, 608, 609, 628, 631, 635, 640, 642, 729, 786, 807, 813, 815, 824, 864, 865, 868, 888, 901, 902, 908, 921, 923, 970, 972, 975, 991, 992, 994, 998, 1002, 1012, 1017, 1018, 1021, 1022, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1048, 1049, 1050], "replai": [804, 805], "repli": [54, 351, 375, 376, 379], "replic": [270, 375, 378, 1028], "repo": [376, 380, 1022, 1025], "report": [0, 2, 43, 47, 52, 68, 102, 107, 165, 178, 200, 264, 268, 278, 284, 287, 319, 329, 359, 371, 375, 377, 378, 379, 382, 384, 388, 390, 394, 402, 408, 412, 612, 650, 659, 665, 686, 687, 701, 714, 730, 731, 739, 784, 785, 788, 834, 843, 862, 863, 900, 918, 943, 998, 1005, 1010, 1021, 1022, 1025, 1034, 1037, 1040, 1041, 1043, 1044, 1046, 1048, 1049], "reporthook": 47, "repositori": [43, 47, 52, 191, 264, 325, 369, 371, 373, 374, 376, 378, 380, 384, 388, 391, 394, 505, 1021, 1025, 1028], "repr": [578, 1044, 1045, 1047], "repreat": 270, "repres": [43, 47, 49, 51, 52, 54, 58, 63, 68, 70, 79, 82, 83, 86, 120, 122, 128, 129, 141, 150, 186, 193, 205, 214, 216, 217, 221, 234, 236, 244, 249, 258, 263, 264, 267, 270, 273, 277, 295, 312, 344, 351, 353, 358, 365, 368, 371, 373, 378, 388, 389, 390, 391, 402, 406, 408, 412, 413, 414, 415, 416, 417, 438, 442, 446, 452, 463, 464, 470, 471, 472, 473, 474, 475, 476, 488, 490, 491, 493, 495, 497, 499, 501, 502, 503, 505, 506, 511, 528, 535, 537, 539, 541, 542, 548, 551, 556, 564, 582, 589, 592, 595, 630, 633, 635, 641, 677, 679, 698, 700, 702, 712, 731, 744, 790, 801, 803, 814, 815, 818, 821, 823, 828, 830, 831, 834, 835, 841, 847, 848, 849, 851, 852, 853, 855, 856, 857, 862, 863, 872, 878, 879, 902, 905, 906, 931, 932, 953, 992, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1013, 1015, 1016, 1018, 1039, 1041, 1044, 1045, 1048, 1051], "represent": [2, 43, 51, 55, 58, 63, 86, 103, 104, 120, 123, 139, 141, 150, 151, 152, 154, 157, 165, 175, 186, 188, 191, 195, 198, 232, 233, 234, 240, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 287, 300, 308, 316, 321, 323, 324, 326, 331, 352, 353, 357, 358, 359, 368, 370, 379, 390, 402, 408, 409, 413, 414, 415, 422, 463, 532, 536, 538, 541, 543, 549, 567, 589, 591, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 631, 644, 647, 653, 659, 660, 661, 663, 667, 668, 669, 677, 678, 679, 770, 798, 799, 807, 824, 861, 874, 878, 879, 883, 885, 898, 905, 917, 919, 922, 928, 945, 967, 994, 999, 1001, 1003, 1005, 1006, 1007, 1009, 1012, 1017, 1022, 1033, 1034, 1037, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "reproduc": [44, 51, 93, 134, 186, 191, 200, 279, 287, 308, 364, 375, 376, 378, 379, 384, 388, 390, 408, 412, 413, 416, 420, 440, 454, 460, 469, 474, 488, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 552, 554, 555, 556, 557, 560, 561, 562, 563, 564, 608, 609, 611, 612, 635, 640, 641, 642, 643, 647, 648, 651, 653, 654, 655, 661, 662, 663, 664, 667, 668, 669, 672, 677, 679, 680, 690, 691, 693, 694, 695, 794, 798, 799, 803, 804, 805, 806, 807, 813, 815, 816, 817, 818, 819, 820, 821, 829, 830, 831, 835, 836, 839, 850, 854, 861, 862, 863, 870, 882, 886, 894, 897, 898, 905, 906, 907, 910, 948, 949, 972, 975, 994, 1021, 1025, 1033, 1041, 1046, 1047], "reproduct": [388, 998], "request": [2, 47, 55, 80, 212, 230, 246, 322, 364, 370, 374, 375, 379, 390, 391, 399, 402, 413, 416, 417, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 582, 583, 589, 591, 592, 600, 601, 611, 612, 633, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 700, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 957, 958, 960, 1002, 1005, 1025, 1039, 1040, 1041, 1050, 1051], "request_rout": 246, "requir": [30, 31, 43, 46, 53, 62, 80, 86, 88, 90, 91, 100, 102, 124, 126, 139, 140, 143, 144, 147, 149, 150, 154, 168, 187, 198, 202, 212, 232, 234, 240, 243, 246, 249, 253, 264, 271, 279, 281, 284, 290, 292, 310, 315, 321, 322, 351, 352, 353, 370, 373, 374, 376, 377, 378, 382, 384, 388, 390, 391, 394, 395, 399, 402, 404, 408, 409, 410, 412, 413, 415, 416, 417, 419, 425, 431, 437, 438, 439, 444, 446, 450, 452, 457, 462, 464, 467, 469, 482, 483, 484, 497, 509, 522, 525, 536, 542, 550, 551, 552, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 573, 580, 581, 582, 603, 611, 612, 620, 628, 633, 634, 635, 644, 647, 648, 653, 654, 659, 660, 667, 668, 669, 672, 675, 676, 677, 678, 679, 687, 690, 692, 693, 694, 696, 700, 725, 730, 731, 748, 750, 753, 764, 784, 785, 788, 800, 801, 804, 805, 808, 810, 815, 823, 828, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 862, 865, 866, 867, 869, 879, 880, 881, 885, 893, 897, 898, 900, 901, 905, 906, 907, 910, 913, 914, 915, 916, 922, 924, 925, 931, 932, 938, 943, 944, 958, 961, 967, 987, 990, 991, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1016, 1017, 1018, 1022, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "requires_fit": [924, 985], "requires_i": [425, 431, 990, 1044], "requires_positive_x": [1043, 1048], "requires_vector_input": [613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "requisit": 378, "rerais": 1050, "rerun": [51, 63, 77, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 195, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 384], "resampl": [2, 85, 146, 186, 230, 294, 385, 388, 390, 556, 557, 975, 1022, 1042, 1046], "resampled_arrai": 972, "rescal": [43, 80, 81, 88, 125, 195, 200, 235, 249, 310, 349, 410, 415, 420, 469, 470, 471, 472, 473, 474, 475, 476, 534, 539, 647, 650, 653, 877, 883, 907, 908, 909, 910, 911, 1002, 1012, 1037, 1038], "rescaled_coin": [80, 81], "rescu": [402, 416], "research": [0, 168, 185, 264, 270, 276, 287, 371, 373, 388, 408, 502, 514, 636, 646, 693, 736, 830, 835, 991, 999, 1003, 1005, 1017, 1022, 1026], "resembl": [74, 216, 246], "reserv": [264, 316, 376, 562, 563, 1026], "reserva": 316, "reservoir": 970, "reservoir_sampl": 970, "reset": [253, 359, 384, 535, 677, 678, 679, 845, 846, 874, 875, 885, 990, 1035], "reset_n_cal": [845, 846], "reshama": [0, 361, 366, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1051], "reshap": [2, 43, 44, 45, 53, 61, 68, 80, 81, 83, 84, 86, 87, 91, 104, 111, 115, 120, 123, 129, 137, 142, 152, 161, 166, 170, 172, 173, 174, 175, 176, 177, 179, 193, 204, 225, 226, 228, 229, 233, 235, 237, 239, 244, 248, 259, 268, 294, 296, 303, 305, 307, 308, 311, 312, 313, 317, 319, 322, 323, 325, 326, 334, 339, 340, 345, 348, 349, 388, 405, 413, 415, 416, 445, 465, 585, 632, 733, 831, 880, 884, 998, 1012, 1018, 1038], "resid": 371, "residence_sinc": 264, "residenti": 154, "residu": [2, 107, 214, 266, 431, 465, 482, 483, 484, 553, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 672, 673, 674, 675, 679, 680, 686, 687, 702, 745, 786, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 998, 1002, 1045, 1046, 1048], "residual_metr": 1039, "residual_threshold": [229, 672, 998, 1046], "residual_vs_predict": [43, 52, 107, 266, 324, 702], "residues_": 1038, "resign": 391, "resili": 416, "resist": [111, 112, 376], "resiz": [45, 80, 81, 250, 371, 494, 495], "resolut": [43, 50, 55, 129, 187, 302, 303, 340, 391, 406, 1043], "resolv": [55, 375, 376, 380, 384, 391, 416, 446, 452, 462, 692, 696, 949, 992, 1002, 1040, 1042, 1043, 1046, 1051], "resort": [272, 371, 402, 556, 1043], "resourc": [55, 77, 146, 149, 181, 212, 307, 321, 362, 379, 388, 390, 407, 415, 804, 805, 991, 1003, 1022, 1026, 1028, 1041, 1046, 1047], "resourcewarn": 1036, "resp": [371, 415, 598, 798, 799, 1016, 1041], "respect": [64, 88, 100, 125, 126, 134, 138, 140, 142, 151, 178, 191, 193, 198, 202, 214, 226, 229, 232, 234, 240, 243, 245, 249, 260, 264, 279, 296, 297, 308, 315, 323, 337, 344, 358, 363, 364, 371, 372, 376, 406, 408, 411, 413, 415, 416, 418, 446, 464, 467, 470, 471, 472, 473, 474, 475, 476, 535, 541, 542, 548, 554, 562, 563, 598, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 629, 637, 644, 672, 691, 695, 713, 729, 783, 786, 798, 799, 841, 851, 862, 863, 917, 919, 990, 991, 995, 996, 998, 999, 1002, 1005, 1006, 1007, 1008, 1012, 1017, 1021, 1025, 1026, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "respond": [186, 376, 408], "respons": [0, 25, 168, 187, 212, 215, 246, 280, 283, 351, 373, 376, 390, 408, 409, 415, 446, 464, 482, 483, 484, 568, 569, 632, 633, 634, 675, 676, 699, 701, 703, 743, 798, 799, 1003, 1009, 1050], "response_method": [48, 66, 70, 89, 136, 150, 155, 197, 205, 221, 226, 264, 273, 293, 298, 301, 315, 327, 336, 337, 339, 344, 356, 632, 633, 634, 699, 701, 703, 743, 800, 823, 1002, 1050], "rest": [2, 30, 62, 66, 143, 147, 183, 192, 198, 221, 227, 246, 249, 258, 287, 319, 333, 337, 348, 382, 390, 418, 513, 611, 632, 645, 659, 660, 677, 755, 789, 833, 834, 835, 854, 905, 907, 910, 998, 1002, 1003, 1006, 1009, 1017, 1023, 1026, 1037, 1038, 1047, 1048, 1049, 1051], "restart": [90, 176, 379, 384, 447, 532, 538, 539, 544, 546, 547, 611, 612, 999, 1046], "restor": [1036, 1041, 1042, 1043, 1044, 1048], "restrict": [2, 64, 99, 100, 105, 160, 181, 183, 203, 229, 304, 378, 382, 406, 408, 415, 416, 465, 494, 503, 533, 582, 611, 654, 655, 656, 657, 659, 683, 684, 714, 783, 789, 790, 831, 853, 855, 856, 857, 859, 861, 862, 863, 865, 891, 1002, 1018, 1023, 1027, 1028, 1033, 1035, 1043, 1045, 1050], "restructuredtext": 376, "result": [0, 2, 27, 37, 43, 44, 45, 48, 52, 53, 57, 61, 62, 63, 66, 68, 70, 72, 75, 77, 78, 79, 80, 86, 87, 88, 93, 95, 99, 103, 105, 107, 112, 116, 120, 123, 125, 130, 137, 138, 139, 141, 143, 144, 146, 147, 150, 152, 153, 161, 167, 168, 170, 172, 174, 176, 178, 181, 186, 187, 188, 189, 194, 199, 201, 202, 203, 208, 213, 214, 216, 220, 226, 227, 230, 232, 233, 236, 239, 242, 244, 250, 255, 260, 261, 263, 264, 265, 268, 270, 271, 273, 276, 277, 278, 279, 281, 282, 284, 287, 290, 292, 296, 305, 306, 307, 310, 311, 312, 315, 319, 321, 323, 324, 325, 326, 327, 329, 332, 334, 340, 344, 345, 347, 351, 353, 358, 363, 364, 365, 370, 371, 373, 376, 378, 380, 381, 382, 384, 388, 389, 390, 391, 402, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 433, 440, 441, 443, 445, 446, 447, 450, 451, 452, 453, 454, 455, 457, 459, 462, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 479, 489, 509, 510, 512, 514, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 580, 581, 582, 583, 585, 589, 590, 592, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 631, 632, 633, 635, 637, 641, 644, 653, 654, 659, 665, 666, 667, 668, 676, 677, 678, 679, 687, 690, 691, 692, 693, 694, 695, 696, 709, 711, 712, 713, 718, 726, 727, 729, 730, 731, 732, 733, 737, 738, 739, 755, 757, 758, 765, 772, 775, 779, 780, 781, 782, 784, 785, 786, 788, 794, 795, 798, 799, 801, 803, 804, 805, 806, 811, 815, 816, 817, 820, 821, 826, 832, 833, 834, 836, 837, 838, 839, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 869, 870, 878, 879, 882, 883, 886, 894, 898, 902, 905, 907, 910, 913, 914, 915, 916, 917, 918, 931, 932, 948, 949, 951, 956, 966, 967, 972, 975, 992, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1021, 1022, 1025, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "results_df": [220, 270, 316], "results_for_preval": 273, "results_sc": 347, "retail": 1026, "retain": [2, 193, 390, 408, 411, 412, 416, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 495, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 696, 697, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 878, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 1015, 1033], "retbin": 1012, "retent": [593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "retrac": 246, "retract": 376, "retrain": [402, 1022, 1049, 1051], "retri": [188, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 1041, 1047, 1051], "retriev": [2, 116, 186, 216, 277, 352, 358, 380, 390, 413, 416, 417, 468, 497, 591, 594, 595, 627, 654, 664, 685, 700, 727, 731, 733, 734, 757, 782, 840, 844, 877, 903, 998, 1000, 1002, 1004, 1021, 1022, 1038, 1043, 1045, 1047, 1050], "return": [2, 30, 43, 45, 46, 47, 49, 50, 52, 53, 55, 57, 61, 62, 64, 69, 70, 72, 75, 86, 89, 94, 102, 107, 118, 126, 127, 129, 132, 134, 137, 139, 145, 146, 149, 150, 154, 168, 173, 176, 178, 182, 189, 193, 194, 200, 202, 205, 212, 213, 220, 221, 222, 230, 246, 249, 252, 253, 258, 260, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 277, 285, 290, 295, 300, 303, 308, 310, 312, 315, 319, 327, 336, 340, 351, 353, 355, 358, 363, 369, 370, 371, 376, 377, 378, 382, 383, 385, 388, 390, 406, 407, 408, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 927, 928, 929, 931, 932, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 970, 971, 972, 973, 974, 975, 976, 982, 985, 986, 987, 988, 989, 990, 992, 1002, 1005, 1009, 1010, 1017, 1018, 1022, 1030, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "return_a": [586, 587, 967, 1036], "return_cent": [513, 1044], "return_cod": 547, "return_cost": [471, 472, 478], "return_count": [332, 352, 857], "return_cov": [390, 568, 569, 612, 865], "return_dist": [87, 463, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 1005, 1037], "return_distribut": [118, 524], "return_estim": [43, 186, 284, 326, 412, 828, 1041], "return_ind": 524, "return_indic": [412, 828, 1049], "return_inner_stat": 1047, "return_intercept": [688, 1042], "return_invers": [148, 378], "return_log": [845, 846], "return_model": [1035, 1037], "return_n_it": [420, 454, 459, 478, 546, 547, 647, 648, 653, 654, 661, 662, 663, 664, 682, 683, 684, 685, 686, 687, 688, 695, 1047], "return_norm": [892, 1040], "return_path": [683, 684, 686, 687], "return_std": [170, 175, 176, 177, 179, 193, 194, 390, 553, 568, 569, 612, 614, 615, 616, 617, 626, 628, 645, 646, 865, 1040, 1041, 1045, 1050], "return_sum_weight": 982, "return_tim": [272, 829, 1043], "return_train_scor": [140, 274, 284, 316, 412, 801, 804, 805, 815, 828, 1039, 1040, 1042], "return_x_i": [44, 46, 54, 91, 102, 103, 104, 105, 120, 140, 143, 157, 159, 160, 164, 181, 182, 188, 189, 191, 200, 201, 202, 204, 209, 219, 227, 228, 240, 248, 249, 252, 253, 266, 269, 272, 277, 278, 287, 289, 292, 299, 306, 307, 308, 315, 319, 321, 323, 324, 325, 326, 332, 343, 353, 355, 369, 381, 382, 389, 402, 408, 409, 412, 415, 417, 420, 428, 446, 488, 489, 490, 491, 493, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 533, 534, 535, 536, 559, 562, 563, 568, 569, 593, 596, 597, 599, 600, 601, 602, 603, 611, 620, 621, 623, 624, 639, 640, 659, 660, 669, 674, 675, 676, 689, 690, 691, 692, 694, 696, 702, 712, 789, 804, 805, 807, 833, 838, 849, 854, 857, 914, 915, 916, 992, 997, 1002, 1003, 1004, 1005, 1012, 1030, 1039, 1041, 1043, 1046], "return_x_mean": 420, "reuben": 1033, "reus": [52, 170, 206, 264, 271, 319, 353, 378, 390, 408, 409, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 635, 647, 649, 650, 653, 659, 661, 663, 667, 668, 669, 670, 677, 678, 679, 681, 862, 863, 1010, 1014, 1026, 1040, 1050], "reuter": [363, 371], "reuters21578": 47, "reuterspars": 47, "rev": [376, 608, 609], "revamp": [378, 1043], "reveal": [43, 52, 186, 188, 351, 382, 405, 999, 1049], "revers": [107, 168, 217, 270, 535, 542, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 790, 865, 1002, 1033, 1034, 1043, 1045, 1049], "revert": [121, 404, 631, 633, 634, 1040, 1045, 1050], "review": [287, 316, 363, 371, 378, 379, 381, 382, 388, 391, 412, 413, 536, 542, 1002, 1012], "revillet": 1033, "revis": [391, 671], "revisit": [408, 419, 444], "revolv": 999, "reward": 376, "reweight": [134, 352, 390, 410, 415, 591, 592, 649, 670, 681], "reweight_covari": [469, 474], "rewrit": [382, 388, 1018, 1033], "rewritten": [376, 650, 1035, 1037], "rey": 1048, "reza": 1043, "rezazadeh": 1046, "rf": [139, 140, 153, 156, 157, 188, 319, 359, 415, 568, 570, 571], "rf_123": 359, "rf__n_estim": 415, "rf_appli": 139, "rf_applyfunctiontransform": 139, "rf_cst": 326, "rf_inst": 359, "rf_leaves_yield": 139, "rf_model": 139, "rf_no_cst": 326, "rf_pipelin": 154, "rfc": [64, 252, 319, 1030], "rfc_disp": [252, 319, 1030], "rfe": [2, 166, 167, 399, 417, 595, 598, 603, 1033, 1037, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "rfecv": [2, 167, 399, 417, 594, 598, 603, 1037, 1039, 1041, 1043, 1044, 1045, 1046, 1049, 1050, 1051], "rfrandomforestregressor": 157, "rgb": [371, 416, 494, 495, 584, 585, 588], "rgr_lasso": 53, "rgr_ridg": 53, "rhinehart": 1040, "rho": [223, 413, 678, 998, 1016, 1034], "rho_k": 414, "ri": [408, 706, 787], "ribeiro": [591, 731, 1046], "ricardo": [1036, 1046, 1047, 1050], "ricardojnf": 1046, "riccadonna": 744, "riccardo": [1044, 1050], "rice": [50, 303, 371, 499, 1046], "rich": [85, 149, 384, 388, 408, 439, 1026, 1044, 1047], "richard": [371, 417, 659, 1034, 1043, 1045, 1047, 1048, 1051], "richardscottoz": 1046, "richer": [85, 129, 408], "richi": 1041, "rick": 1044, "ricker": 129, "ricker_funct": 129, "ricker_matrix": 129, "rickiepark": 1040, "rid": [48, 1016], "riddel": [1036, 1038, 1040], "ridg": [2, 24, 44, 49, 53, 87, 107, 121, 122, 137, 154, 159, 168, 169, 175, 176, 177, 181, 183, 185, 186, 187, 192, 193, 198, 203, 206, 209, 212, 213, 238, 248, 283, 311, 346, 347, 351, 363, 388, 404, 413, 415, 418, 525, 536, 540, 544, 612, 616, 623, 626, 644, 645, 646, 648, 650, 658, 662, 674, 675, 676, 679, 688, 702, 751, 801, 807, 815, 838, 911, 1002, 1003, 1010, 1012, 1016, 1017, 1023, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1043, 1046, 1047, 1048, 1049, 1051], "ridge_alpha": [540, 544, 1040], "ridge_cv": 107, "ridge_cv_with_trans_target": 107, "ridge_glm": 212, "ridge_regress": [2, 1041, 1042, 1048], "ridgeclassifi": [2, 351, 363, 673, 674, 676, 998, 1003, 1038, 1042, 1046, 1047, 1048, 1051], "ridgeclassifiercv": [2, 399, 674, 675, 789, 998, 1002, 1003, 1041, 1043, 1044, 1046, 1047, 1051], "ridgecv": [2, 43, 107, 154, 168, 186, 248, 390, 399, 415, 569, 644, 673, 676, 998, 1003, 1033, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "ridgecvridgecv": [154, 186], "ridgeridg": 186, "ridgewai": [145, 415], "riedmann": 1045, "ries": 1047, "rifkin": 998, "right": [45, 46, 50, 51, 53, 54, 67, 70, 74, 77, 78, 79, 84, 86, 93, 95, 97, 110, 111, 113, 118, 122, 123, 125, 126, 127, 129, 134, 136, 137, 138, 146, 147, 148, 149, 156, 164, 170, 173, 182, 189, 201, 203, 213, 214, 215, 216, 218, 219, 222, 223, 239, 242, 243, 255, 257, 258, 260, 261, 264, 265, 266, 270, 273, 277, 280, 281, 283, 284, 295, 303, 305, 308, 310, 312, 315, 325, 326, 330, 340, 342, 344, 347, 349, 351, 356, 358, 359, 376, 378, 384, 388, 389, 391, 405, 407, 408, 411, 413, 414, 415, 418, 464, 482, 483, 484, 485, 535, 542, 545, 558, 559, 560, 561, 562, 563, 565, 566, 567, 588, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 636, 677, 679, 870, 913, 914, 915, 916, 917, 935, 949, 991, 994, 996, 998, 1000, 1002, 1004, 1005, 1009, 1014, 1016, 1017, 1018, 1022, 1026, 1028, 1035, 1041, 1047, 1049, 1050], "right_impur": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "rightarrow": [418, 620, 1006], "rijn": [370, 1041], "rileran": 1047, "rio": [1043, 1045, 1046, 1047], "ripe": 316, "rise": 175, "rishabh": 1047, "rishi": 1045, "rishikesh": 1040, "risk": [16, 48, 88, 149, 212, 216, 230, 311, 347, 359, 375, 376, 390, 402, 407, 412, 415, 568, 569, 890, 891, 893, 894, 895, 896, 998, 1002, 1026, 1040], "riski": 230, "riskiest": [212, 230], "ritchi": 1044, "rithvik": 1045, "ritter": [1047, 1048], "ritual": 351, "rival": [43, 902, 1015], "rk": 98, "rkf": [412, 816], "rl2007": 998, "rlm": 1043, "rm": [111, 173, 380, 384, 410], "rmse": [43, 52, 112, 149, 316, 1002, 1044], "rmse_": 316, "rmse_test_mean": 316, "rmse_test_scor": 316, "rmse_test_std": 316, "rmse_train_mean": 316, "rmse_train_scor": 316, "rmse_train_std": 316, "rmsle": 1002, "rmtree": [87, 104, 409], "rna": 388, "rnd": 311, "rng": [44, 58, 59, 67, 70, 72, 79, 83, 95, 112, 116, 120, 122, 127, 135, 146, 149, 150, 151, 153, 170, 171, 174, 176, 177, 179, 181, 182, 185, 188, 193, 194, 195, 196, 198, 202, 207, 213, 214, 219, 226, 239, 245, 246, 248, 255, 265, 273, 276, 281, 282, 302, 305, 314, 317, 320, 321, 323, 325, 326, 329, 330, 334, 343, 357, 359, 364, 378, 381, 399, 421, 470, 474, 475, 476, 478, 479, 480, 481, 644, 650, 671, 673, 679, 688, 813, 840, 841, 842, 844, 845, 846, 850, 853, 855, 856, 857, 882, 894, 897, 898, 900, 901, 902, 911], "ro": 63, "road": 388, "rob": [1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1045, 1048], "robert": [0, 168, 200, 287, 373, 398, 413, 529, 536, 629, 657, 722, 724, 725, 736, 871, 992, 998, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1048, 1051], "roberto": [408, 442, 1051], "robertson": 1046, "robin": [181, 182, 628, 992, 1039, 1042, 1047, 1048], "robinson": 1046, "robl": 1040, "robson": 1043, "robust": [2, 48, 70, 94, 96, 108, 110, 144, 146, 168, 182, 183, 186, 187, 192, 203, 214, 216, 229, 239, 249, 285, 310, 325, 365, 373, 384, 408, 415, 416, 446, 448, 469, 470, 473, 474, 475, 476, 525, 535, 560, 561, 650, 658, 671, 672, 679, 680, 751, 835, 866, 880, 882, 883, 894, 900, 947, 1002, 1006, 1008, 1012, 1015, 1016, 1021, 1023, 1024, 1026, 1027, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1049], "robust_contour": 111, "robust_cov": 111, "robust_mah": 111, "robust_scal": [2, 883, 894, 1041], "robustli": [8, 215], "robustscal": [2, 249, 882, 895, 992, 1012, 1038, 1039, 1041, 1043, 1044, 1045, 1049], "roc": [2, 50, 62, 139, 168, 183, 238, 240, 249, 250, 262, 264, 265, 272, 326, 327, 383, 406, 407, 412, 505, 511, 565, 659, 703, 707, 708, 709, 728, 783, 789, 790, 820, 831, 834, 872, 910, 1008, 1023, 1030, 1035, 1036, 1038, 1039, 1043, 1045, 1049], "roc_auc": [50, 168, 270, 274, 279, 280, 383, 635, 703, 734, 1002, 1030], "roc_auc_ovo": [1002, 1043], "roc_auc_ovo_weight": [1002, 1043], "roc_auc_ovr": [1002, 1043], "roc_auc_ovr_weight": [1002, 1043], "roc_auc_scor": [2, 62, 168, 270, 279, 319, 326, 703, 707, 708, 709, 790, 1002, 1035, 1036, 1041, 1043, 1047, 1048], "roc_curv": [2, 50, 240, 267, 279, 703, 707, 728, 783, 789, 1002, 1033, 1034, 1035, 1038, 1039, 1041, 1046, 1049, 1051], "roc_displai": 240, "rocchio": [351, 852], "rocco": [1046, 1047, 1048], "roccurvedisplai": [2, 139, 249, 252, 264, 267, 279, 280, 319, 383, 789, 790, 1008, 1030, 1043, 1049, 1050, 1051], "rock": 112, "rocklin": [375, 381], "roddi": [1042, 1043], "rodent": [50, 303, 371, 499], "roderick": 992, "rodion": 1046, "rodrigo": [1041, 1051], "rodrigu": [1040, 1041, 1046], "rodr\u00edguez": 316, "roeder": 1043, "roehr": [1049, 1050], "roei": 1045, "roeschk": 1042, "roger": [724, 1040, 1041, 1045], "rogerstanimoto": [450, 457, 700, 779, 780, 781, 1005], "rogerstanimotodist": 700, "rohan": [1038, 1039, 1041, 1042, 1046], "rohit": [1036, 1037, 1041, 1042], "roi": [1033, 1047], "roi_siz": 87, "roic": 1048, "rok": 1043, "rokem": [1033, 1039], "rokhlin": [536, 542, 949], "roland": [1035, 1036], "rolando": [1034, 1035], "role": [0, 279, 363, 375, 413], "roll": [2, 100, 183, 231, 232, 237, 379, 408, 531, 693, 694, 943, 1023, 1026, 1043, 1048], "rolling_max": 52, "rolling_mean": 52, "rolling_min": 52, "romain": [1040, 1045], "roman": [0, 397, 628, 919, 1035, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "roman4oo": 1048, "romaniuk": 1037, "romero": 1051, "romijnd": 1045, "romuald": 1042, "ron": [0, 398, 1033], "ronald": [371, 1006, 1036, 1046], "ronan": [1033, 1036, 1041], "ronchetti": [650, 998], "rong": 1017, "ronrubin": [665, 686, 687, 998], "ronsin": [1041, 1042, 1050], "room": [310, 371, 381, 408, 1025], "roopam": [1041, 1042], "root": [2, 43, 111, 149, 168, 195, 358, 373, 376, 384, 408, 442, 502, 542, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 640, 791, 792, 913, 914, 915, 916, 917, 919, 1002, 1008, 1018, 1035, 1041, 1042, 1043, 1044, 1047, 1048], "root_": 442, "root_mean_squared_error": [2, 52, 149, 404, 1002, 1050], "root_mean_squared_log_error": [2, 404, 1002, 1050], "rope": 270, "rope_interv": 270, "rope_prob": 270, "rori": 1044, "rosa": 1048, "rosal": 412, "rosati": 1051, "rose": 371, "rosenberg": [408, 718, 738, 796], "rosenfeld": 1041, "ross": [535, 608, 609, 1018, 1047, 1048], "rosset": [134, 415, 520, 554], "rossi": 1036, "rosslimlinyang_ijcv": 535, "rostamizadeh": 991, "rostomyan": 1041, "rotat": [47, 75, 115, 119, 122, 125, 127, 145, 156, 183, 189, 235, 281, 282, 289, 340, 346, 411, 413, 418, 420, 505, 533, 542, 551, 615, 698, 885, 917, 998, 1023, 1044, 1045], "rotation_mod": 281, "rotations_": 551, "roth": [1038, 1041, 1048], "rough": [25, 396, 1008], "roughli": [134, 146, 202, 261, 280, 290, 315, 363, 390, 413, 416, 520, 999, 1033], "rouli": 1036, "round": [46, 48, 62, 115, 140, 149, 181, 182, 219, 230, 270, 276, 312, 314, 351, 390, 450, 456, 457, 565, 566, 594, 595, 598, 628, 693, 714, 803, 813, 870, 902, 917, 919, 992, 1006, 1018, 1035, 1037, 1039, 1041, 1042, 1044, 1046, 1047, 1049, 1050], "rounded_list": 813, "rouseeuw1984": 474, "rousseeuw": [111, 112, 408, 410, 469, 474, 793, 794, 1008], "rousseuw": [111, 112], "rout": [2, 61, 132, 183, 195, 238, 264, 327, 422, 425, 428, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 958, 959, 960, 961, 985, 1023, 1028, 1047, 1049], "route_param": [246, 958], "routed_param": [246, 961], "routemappingpair": 958, "router": [2, 246, 390, 399, 958, 959, 960, 961], "routerconsumerclassifi": 246, "routerconsumerclassifierifittedrouterconsumerclassifi": 246, "routin": [326, 365, 370, 373, 376, 377, 378, 379, 384, 388, 390, 417, 673, 675, 688, 848, 907, 908, 909, 910, 911, 999, 1005, 1012, 1013, 1016, 1026, 1033, 1047, 1048, 1049], "routing_info": 958, "routlei": 1039, "rouvinen": 1038, "roux": [659, 998, 1015], "row": [2, 43, 57, 58, 59, 62, 64, 70, 79, 93, 107, 118, 140, 142, 152, 155, 181, 212, 213, 214, 240, 243, 249, 250, 264, 312, 358, 363, 371, 378, 385, 389, 390, 405, 408, 411, 416, 423, 442, 443, 447, 449, 450, 451, 453, 456, 457, 459, 464, 468, 488, 490, 491, 493, 494, 495, 496, 501, 502, 503, 505, 506, 511, 512, 514, 527, 535, 543, 549, 552, 591, 592, 621, 629, 633, 644, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 693, 697, 698, 711, 719, 720, 726, 759, 760, 764, 767, 769, 770, 771, 772, 774, 775, 777, 779, 780, 781, 782, 798, 799, 834, 840, 841, 842, 843, 844, 850, 853, 854, 855, 856, 857, 860, 871, 875, 877, 878, 880, 890, 891, 892, 895, 896, 899, 903, 922, 927, 931, 932, 949, 972, 975, 979, 981, 983, 984, 987, 988, 991, 992, 994, 996, 998, 1000, 1002, 1003, 1005, 1012, 1013, 1016, 1017, 1022, 1040, 1041, 1042, 1043, 1048], "row_compl": 57, "row_id_attribut": 370, "row_idx": [59, 212], "row_idx_shuffl": 58, "row_ind": [423, 451, 453], "row_indic": 149, "row_labels_": [57, 58, 59, 405, 451, 453], "row_norm": 258, "rowan": 1048, "rowei": [690, 694, 854, 999, 1005], "rows_": [57, 405, 423, 451, 453], "royal": [542, 628, 881, 893, 1016], "rp": 243, "rpath": 374, "rr2007": 994, "rragundez": 1041, "rsalakhu": 645, "rsh": [282, 321], "rskf": 817, "rsme": 1002, "rsnegrin": 1047, "rsplit": [45, 55, 271], "rst": [364, 376, 384, 1033], "rstride": 187, "rt": 139, "rt_model": 139, "rtn": 51, "rtol": [378, 845, 846, 850], "ruben": 1048, "rubi": 1045, "rubia": 1036, "rubial": 1046, "rubin": 992, "rubinstein": [665, 686, 687], "rubric": 999, "ruchitagard": 1043, "rudi": 1039, "rudresh": 1048, "ruff": [376, 394, 401], "ruifeng": [1039, 1040, 1045], "ruin": 376, "ruiter": 1048, "rule": [2, 13, 27, 43, 64, 140, 191, 264, 356, 358, 359, 363, 373, 376, 377, 378, 388, 390, 391, 403, 406, 407, 408, 412, 413, 415, 417, 537, 550, 551, 552, 553, 554, 562, 563, 570, 571, 595, 603, 635, 646, 659, 660, 667, 668, 669, 674, 676, 677, 678, 679, 707, 708, 712, 801, 804, 805, 807, 815, 823, 824, 827, 828, 829, 830, 832, 854, 905, 918, 991, 996, 1004, 1005, 1016, 1018, 1022, 1028, 1035, 1038, 1045, 1050], "ruleset": 1018, "rumelhart": 1006, "rumsfeld": [45, 371], "run": [43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 374, 376, 377, 378, 380, 381, 382, 383, 384, 388, 390, 391, 394, 395, 402, 404, 408, 410, 412, 415, 418, 419, 420, 437, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 462, 464, 467, 468, 471, 472, 532, 533, 534, 535, 536, 538, 540, 542, 543, 544, 546, 547, 549, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 583, 593, 595, 596, 597, 599, 600, 601, 603, 611, 612, 631, 635, 641, 647, 648, 650, 652, 653, 654, 656, 657, 661, 662, 663, 664, 683, 684, 689, 690, 691, 692, 693, 694, 695, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 837, 838, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 863, 864, 867, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 922, 924, 943, 944, 972, 975, 991, 1001, 1003, 1006, 1015, 1017, 1018, 1021, 1022, 1026, 1033, 1036, 1038, 1040, 1041, 1042, 1043, 1047, 1048, 1049], "run_histori": 47, "run_id": 94, "run_tim": [227, 228], "rung": 1012, "runnabl": [54, 380, 381], "runtim": [30, 47, 49, 91, 134, 199, 227, 229, 244, 308, 312, 364, 378, 379, 388, 390, 402, 408, 415, 450, 564, 680, 815, 905, 906, 907, 908, 909, 910, 911, 1016, 1017, 1036, 1040, 1041, 1047, 1048, 1050, 1051], "runtime_histori": 47, "runtimewarn": 179, "runxfail": 384, "rupesh": 1036, "rush": [43, 52, 376], "rushabh": 1044, "rushil": [1048, 1049], "russ": [629, 992], "russel": [1039, 1040], "russellrao": [450, 457, 700, 779, 780, 781, 1005], "russellraodist": 700, "russian": 416, "ruth": 1043, "rutter": 1046, "ruusmann": 1039, "rv": [0, 805, 813, 815, 991, 1033, 1034, 1037, 1038, 1039, 1040, 1041], "rv_discrete_frozen": 282, "rvd": [469, 474], "rvdriessen": [469, 474], "rw2006": [418, 611, 612], "rwelsch427": 1051, "ryad": 1039, "ryan": [1036, 1039, 1041, 1042], "ryb": 356, "ryder": 51, "ryotaro": 1045, "r\u00e9my": 1039, "r\u00fcdiger": [1041, 1042, 1044], "s1": [121, 168, 178, 200, 202, 373], "s2": [121, 168, 178, 200, 202, 373, 551], "s22": 499, "s3": [57, 121, 168, 200, 202, 373], "s4": [168, 200, 202, 373], "s5": [168, 200, 202, 373, 1010], "s6": [168, 200, 202, 373], "s_": [121, 274, 998, 999, 1010, 1012], "s__p": 865, "s_color": 232, "s_hessian": 232, "s_i": [408, 998, 1012], "s_ica_": 122, "s_isomap": 232, "s_j": 408, "s_ltsa": 232, "s_mod": 232, "s_pca_": 122, "s_point": 232, "s_scale": 232, "s_spectral": 232, "s_standard": 232, "s_t_sne": 232, "sa": [371, 493], "saaba": 1038, "saad": 1051, "sabharw": 1043, "sabri": 1048, "sach": 51, "sachdev": 1048, "sachdeva": 1040, "sachin": [1040, 1041, 1047], "sackei": 1043, "saclai": 0, "sacr": 1021, "sad": [819, 820], "sadak": 1045, "sadhana": 1041, "sadli": 146, "sadra": 1049, "sad\u0142ocha": 1046, "saeed": 1002, "saeger": [1038, 1039, 1040], "safari": 1012, "safe": [2, 72, 186, 202, 264, 352, 376, 378, 408, 409, 433, 465, 509, 510, 568, 569, 594, 598, 775, 779, 829, 830, 832, 864, 899, 967, 973, 1005, 1039, 1040, 1041, 1046, 1047], "safe_copi": 1040, "safe_index": [385, 1043], "safe_mask": [2, 385], "safe_realloc": 1036, "safe_sparse_dot": [2, 385, 1043], "safe_sqr": [2, 385], "safeguard": 402, "safer": [352, 359, 374, 408, 412, 1033], "safest": [212, 230, 359, 370], "safeti": [102, 388, 409, 967, 1022, 1043], "safikh": 1048, "safiuddin": 1048, "sag": [205, 219, 659, 660, 673, 675, 688, 998, 1016, 1038, 1039, 1040, 1042, 1043], "sag_solv": 1042, "saga": [66, 204, 227, 228, 659, 660, 673, 675, 688, 815, 998, 1040, 1042], "sagar": 1043, "sagnik": 1041, "saha": 1047, "sahil": 1049, "sahin": 1043, "sahu": 1045, "sai": [199, 239, 347, 351, 352, 376, 406, 408, 409, 413, 415, 416, 446, 447, 501, 505, 511, 678, 991, 1008, 1015, 1026, 1050, 1051], "said": [149, 186, 239, 271, 371, 376, 793, 1000, 1008], "saihttam": 1039, "sailesh": [1040, 1041], "saint": 1039, "saito": [413, 539, 541, 548, 1040], "saiw": 1039, "sake": [43, 64, 146, 149, 182, 186, 212, 315, 344, 351, 353, 384, 388, 671], "saket": [1037, 1038, 1045], "sakinaouisrani": 1047, "salahuddin": 1048, "salakhutdinov": [645, 854, 1005], "salamin": 1037, "sale": [143, 249, 270, 1002, 1026], "saleem": 1043, "salerno": 373, "salim": [1050, 1051], "sallisaw": [409, 466], "salman": [0, 397, 1048, 1049, 1050, 1051], "salt": [67, 244, 312, 1047], "salvator": [1033, 1047, 1048, 1050, 1051], "salz": 1040, "salzmann": [212, 230], "sam": [1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048], "sambhav": 1044, "same": [2, 25, 43, 46, 47, 52, 58, 63, 70, 72, 75, 79, 86, 88, 90, 91, 97, 102, 103, 104, 118, 120, 122, 125, 127, 129, 135, 137, 141, 143, 146, 147, 149, 152, 168, 170, 186, 187, 189, 199, 200, 202, 207, 212, 213, 214, 220, 230, 246, 250, 260, 264, 265, 266, 267, 268, 270, 271, 273, 275, 276, 278, 283, 284, 290, 293, 295, 307, 310, 311, 313, 315, 316, 319, 321, 332, 340, 351, 352, 353, 358, 359, 363, 364, 365, 370, 371, 373, 375, 376, 378, 380, 382, 384, 385, 388, 389, 390, 391, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 429, 433, 438, 439, 446, 450, 456, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 494, 496, 497, 499, 505, 509, 510, 532, 533, 536, 537, 538, 539, 540, 541, 544, 548, 550, 552, 553, 554, 555, 558, 560, 561, 562, 563, 565, 566, 568, 569, 590, 591, 603, 604, 607, 611, 612, 614, 623, 628, 629, 630, 633, 634, 647, 650, 653, 654, 656, 659, 660, 664, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 685, 688, 700, 705, 706, 713, 714, 716, 718, 727, 732, 733, 737, 756, 757, 758, 779, 780, 781, 787, 789, 793, 795, 796, 798, 799, 801, 802, 804, 805, 807, 809, 810, 815, 819, 820, 823, 824, 826, 827, 828, 829, 830, 831, 832, 847, 848, 849, 853, 855, 856, 857, 868, 869, 870, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 887, 894, 905, 906, 913, 915, 926, 933, 937, 949, 967, 972, 975, 976, 986, 991, 992, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1016, 1017, 1018, 1021, 1022, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "same_kind": 1050, "samesh": [1043, 1044], "samm": [134, 415, 554, 1049, 1050], "samoocha": 1041, "sampl": [2, 27, 30, 37, 43, 44, 47, 50, 53, 61, 62, 63, 64, 68, 69, 70, 72, 74, 76, 77, 78, 80, 82, 86, 89, 90, 91, 92, 93, 98, 111, 112, 113, 116, 118, 120, 124, 125, 128, 129, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 149, 150, 155, 156, 157, 165, 167, 168, 170, 174, 175, 176, 177, 179, 181, 183, 186, 187, 191, 192, 198, 199, 200, 202, 212, 214, 216, 219, 220, 222, 223, 224, 226, 228, 229, 230, 232, 239, 243, 244, 246, 247, 249, 255, 256, 258, 259, 260, 261, 262, 264, 265, 269, 270, 272, 273, 274, 276, 278, 282, 284, 285, 289, 290, 294, 295, 296, 297, 299, 300, 301, 303, 307, 308, 310, 312, 313, 314, 315, 317, 319, 321, 322, 324, 326, 327, 329, 331, 332, 333, 334, 335, 336, 338, 340, 342, 344, 345, 347, 348, 351, 352, 356, 358, 363, 369, 371, 372, 375, 376, 378, 379, 388, 389, 399, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 425, 426, 427, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 454, 456, 457, 458, 461, 462, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 612, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 688, 689, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 711, 713, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 762, 764, 765, 769, 770, 771, 772, 774, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 927, 931, 932, 936, 937, 949, 953, 970, 972, 975, 976, 979, 982, 990, 991, 992, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "sample_i": [179, 418, 612, 1047], "sample_id": [358, 371, 498], "sample_interv": 639, "sample_interval_": 1049, "sample_posterior": [182, 628, 992], "sample_s": [91, 244, 352, 794], "sample_score_mean": 274, "sample_score_std": 274, "sample_silhouette_valu": 93, "sample_step": 639, "sample_weight": [61, 195, 212, 225, 230, 246, 320, 325, 326, 349, 376, 390, 399, 408, 415, 419, 425, 431, 437, 443, 444, 447, 449, 459, 460, 465, 469, 482, 483, 484, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 611, 612, 633, 634, 635, 636, 638, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 698, 699, 701, 703, 704, 708, 709, 710, 713, 714, 717, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 797, 800, 801, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 870, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 961, 989, 1002, 1016, 1017, 1018, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "sample_weight1": 246, "sample_weight2": 246, "sample_weight_const": 349, "sample_weight_last_ten": 349, "sample_weight_vect": 937, "sample_without_replac": [2, 385, 1039], "samples_weight": 225, "samplewis": [755, 1002], "samson": 1040, "samuel": [697, 1026, 1036, 1037, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "samuela": 1036, "samu\u00ebl": 1040, "san": [168, 373, 416, 1014], "sanchez": [1041, 1042], "sandbox": 402, "sandeep": 1045, "sander": [408, 419, 444, 446, 450, 457, 851, 1008, 1042, 1043], "sandi": 1046, "sandip": [1050, 1051], "sandra": [1042, 1048], "sandro": [1041, 1048], "sandrocasagrand": [1041, 1042], "sandrovskii": 1040, "sangam": 1048, "sangamswadik": 1048, "sangeeth": 1042, "saniti": [379, 869, 1002, 1033, 1034], "sanjabi": 1043, "sanjai": 1047, "sanjai_3": [1048, 1049], "sanjoi": [899, 1014], "sano": 1047, "sanofi": 51, "santa": [178, 1048], "santana": [1044, 1047], "santhanam": 1041, "santhosh": 1044, "santhoshbala18": 1044, "santi": [1038, 1040, 1041], "santiago": 1044, "sap": 51, "sapiro": [413, 532, 538], "saqib": 1041, "sara": 1046, "sarah": [1040, 1042, 1045], "sarahremu": [1048, 1051], "sarajpoor": 1048, "sarat": 1044, "sarawagi": 784, "sarra": 1043, "sartaj": 1039, "sasank": 1039, "sashka": [1048, 1049], "sass": [376, 394, 401], "sassenhagen": [1045, 1050], "sat": [43, 149, 187, 416], "satellit": 1005, "satisfi": [408, 651, 655, 700, 718, 737, 738, 845, 846], "satish": 1041, "sato": 1036, "satrajit": [0, 398, 1033, 1034], "satur": [72, 186, 310], "sauerbrei": 1012, "sauerkraut": 416, "saul": [690, 694, 999, 1040, 1041, 1043], "saurabh": [1037, 1038, 1039, 1040, 1041, 1045], "sauvignon": 316, "saval": 1042, "savard": 1033, "save": [86, 102, 104, 249, 308, 375, 376, 380, 382, 383, 384, 390, 402, 412, 420, 468, 492, 535, 536, 628, 845, 846, 903, 998, 1002, 1012, 1018, 1026, 1033, 1036, 1040, 1043, 1051], "savings_statu": 264, "savkomax": 1048, "saw": [121, 213, 216], "sawtooth": 121, "say_hello": 962, "sc": [370, 408], "scaja": 1050, "scala": 1022, "scalabl": [77, 79, 95, 183, 190, 244, 262, 324, 352, 376, 408, 415, 416, 448, 491, 503, 590, 641, 807, 818, 829, 831, 843, 866, 875, 877, 905, 907, 910, 911, 994, 997, 999, 1002, 1015, 1017, 1023, 1026, 1033, 1036, 1037, 1043, 1044, 1047, 1048], "scalar": [2, 120, 322, 327, 382, 390, 404, 409, 418, 420, 464, 467, 525, 534, 616, 617, 618, 623, 624, 628, 629, 631, 739, 743, 927, 935, 994, 1006, 1008, 1012, 1016, 1021, 1043, 1044, 1047, 1049], "scalarmapp": 66, "scale": [2, 36, 43, 44, 51, 62, 64, 72, 75, 78, 80, 81, 89, 91, 94, 103, 104, 110, 113, 116, 122, 125, 144, 151, 168, 170, 171, 172, 175, 176, 177, 183, 187, 191, 194, 195, 200, 204, 212, 214, 216, 226, 227, 228, 230, 231, 234, 239, 245, 249, 260, 267, 270, 271, 272, 273, 277, 293, 295, 306, 307, 308, 309, 310, 314, 320, 323, 325, 326, 334, 335, 337, 340, 344, 359, 362, 363, 368, 369, 370, 373, 376, 381, 385, 388, 389, 390, 408, 409, 413, 415, 416, 417, 418, 446, 447, 450, 451, 457, 464, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 502, 511, 515, 516, 525, 535, 539, 541, 542, 548, 550, 551, 562, 563, 583, 591, 592, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 632, 633, 642, 645, 646, 647, 648, 650, 653, 659, 660, 661, 662, 663, 673, 675, 677, 678, 679, 682, 688, 689, 690, 691, 693, 695, 700, 704, 717, 742, 748, 758, 760, 770, 776, 778, 815, 818, 831, 832, 833, 845, 846, 847, 862, 863, 866, 869, 874, 875, 877, 880, 882, 883, 885, 890, 891, 892, 894, 895, 897, 898, 905, 906, 907, 908, 909, 910, 911, 976, 977, 978, 979, 982, 991, 994, 995, 998, 1002, 1003, 1004, 1005, 1006, 1010, 1016, 1017, 1022, 1023, 1026, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "scale_": [650, 874, 875, 883, 885, 895, 1012, 1038], "scaled_clf": 315, "scaled_pca": 315, "scaled_x_train": 315, "scaler": [45, 103, 105, 150, 166, 183, 228, 229, 244, 249, 251, 253, 284, 293, 298, 309, 314, 315, 324, 340, 343, 359, 381, 409, 412, 490, 659, 660, 673, 675, 688, 865, 874, 875, 877, 881, 882, 883, 885, 890, 891, 892, 893, 894, 895, 896, 1006, 1012, 1016, 1023, 1033, 1038, 1041, 1046], "scaler2": 253, "scalewai": 384, "scaling_": 551, "scalings_": [550, 551], "scanpi": 1050, "scatter": [43, 48, 50, 51, 61, 66, 67, 70, 73, 74, 77, 78, 79, 82, 85, 89, 90, 91, 92, 93, 95, 100, 111, 116, 118, 122, 124, 125, 126, 128, 135, 136, 140, 142, 150, 152, 153, 155, 161, 163, 170, 171, 172, 174, 176, 177, 178, 179, 185, 186, 191, 194, 197, 203, 205, 209, 210, 213, 214, 215, 221, 224, 225, 226, 229, 232, 233, 234, 235, 236, 237, 239, 244, 245, 247, 255, 256, 257, 258, 259, 260, 261, 265, 271, 273, 285, 290, 293, 296, 297, 298, 299, 300, 301, 302, 305, 310, 312, 313, 315, 323, 331, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 351, 356, 357, 372, 410, 632, 702, 996, 998], "scatter_": 702, "scatter_fig": 140, "scatter_kwarg": [43, 52, 107, 154, 186, 702], "scatter_trac": 140, "scatterplot": [115, 193, 270], "scatterpoint": [124, 128, 235, 257, 331], "scenario": [90, 102, 149, 170, 191, 216, 273, 359, 383, 394, 407, 412, 415, 538, 544, 546, 547, 996, 1002, 1012, 1043], "scene": [373, 384, 1005, 1007, 1046], "schapir": [50, 287, 303, 371, 415, 499, 554, 555], "schedul": [149, 306, 364, 380, 677, 678, 679, 862, 863, 1016, 1026, 1040], "scheidegg": 1033, "scheme": [279, 295, 316, 317, 371, 380, 390, 408, 412, 414, 416, 567, 591, 659, 660, 706, 814, 848, 872, 873, 876, 878, 882, 886, 889, 894, 905, 910, 991, 998, 1012, 1016, 1033, 1041, 1044, 1045, 1050, 1051], "scherer": 1039, "scheubrein": 1045, "schloss": 1002, "schl\u00fcter": [1033, 1041], "schmerler": 1048, "schmid": [759, 760, 1000], "schmidt": [659, 998, 1036], "schmitt": [1043, 1044], "schmitz": 1050, "schneider": [351, 1046, 1051], "schoelkopf": 901, "schoentgen": [1041, 1042], "schofield": 1033, "schole": 1045, "scholkopf1997": 413, "scholkopf1998": 1012, "scholz": 1051, "school": [102, 175, 186, 373, 408, 789, 1002], "schreiber": [0, 398, 1038, 1039, 1040], "schroeder": [45, 371], "schubert": [408, 419, 444, 450, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1051], "schucker": 1039, "schuder": [1041, 1042, 1043], "schuetz": [840, 844], "schuldt": 1037, "schult": 55, "schulz": 1033, "schumach": [1036, 1037, 1038], "schut": 1033, "schwardt": 1033, "schwartz": [1033, 1035, 1047], "schwetlick": [1044, 1045], "sch\u00f6lkopf": [44, 413, 536, 871, 1008, 1012, 1017], "sch\u00f6nberger": [1035, 1036], "sch\u00fctze": [413, 591, 1000, 1002, 1004], "sci": [57, 102, 351, 352, 353, 371, 388, 488, 690, 694, 876, 999, 1012], "scibol": 1044, "scienc": [0, 73, 111, 168, 178, 186, 287, 370, 373, 388, 408, 440, 454, 539, 541, 548, 689, 690, 694, 852, 992, 994, 998, 999, 1002, 1005, 1014, 1022, 1026, 1041], "scientif": [0, 68, 244, 370, 374, 388, 394, 408, 452, 462, 502, 1026, 1028], "scientist": [992, 1026], "scikera": 1021, "scikit": [2, 15, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 364, 365, 368, 370, 371, 372, 373, 375, 376, 379, 382, 383, 384, 385, 389, 390, 395, 396, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 422, 423, 425, 426, 427, 428, 430, 431, 432, 438, 443, 446, 447, 450, 457, 464, 465, 467, 468, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 513, 516, 522, 525, 539, 542, 562, 563, 565, 566, 568, 577, 582, 583, 584, 590, 600, 603, 612, 627, 629, 631, 633, 635, 639, 641, 647, 649, 653, 659, 670, 681, 689, 698, 701, 702, 703, 718, 719, 733, 743, 749, 779, 780, 781, 789, 796, 800, 801, 802, 803, 804, 805, 806, 807, 815, 818, 819, 820, 821, 822, 823, 824, 827, 828, 831, 833, 834, 847, 849, 865, 866, 868, 870, 872, 875, 877, 878, 879, 880, 884, 885, 886, 889, 902, 903, 905, 910, 913, 914, 921, 923, 943, 944, 954, 967, 968, 991, 992, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1015, 1016, 1017, 1018, 1020, 1023, 1025, 1028, 1030, 1031, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "scikit_learn": 1021, "scikit_learn_data": [52, 371, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500], "scipi": [0, 2, 45, 53, 55, 57, 76, 80, 81, 86, 87, 109, 110, 113, 121, 123, 127, 145, 170, 186, 189, 199, 203, 256, 260, 261, 267, 270, 278, 282, 290, 295, 300, 308, 320, 321, 326, 327, 329, 330, 363, 370, 371, 374, 376, 378, 382, 384, 385, 388, 389, 390, 394, 401, 402, 404, 405, 408, 413, 416, 450, 451, 452, 453, 457, 462, 463, 497, 504, 509, 533, 535, 536, 542, 545, 582, 583, 586, 587, 589, 590, 611, 612, 649, 650, 654, 658, 659, 660, 664, 667, 668, 669, 670, 671, 673, 675, 677, 678, 679, 681, 685, 688, 692, 693, 696, 720, 761, 764, 779, 780, 781, 782, 793, 794, 805, 813, 815, 831, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 868, 877, 878, 883, 884, 885, 888, 892, 895, 896, 905, 907, 908, 910, 911, 946, 950, 951, 956, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 991, 992, 998, 1000, 1003, 1005, 1006, 1012, 1016, 1017, 1020, 1022, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049], "sckit": 1049, "scls19fr": 1038, "scognamiglio": 415, "scope": [45, 57, 264, 363, 365, 376, 388, 416, 1021, 1022], "score": [0, 2, 13, 27, 43, 45, 47, 50, 52, 58, 59, 61, 62, 63, 64, 67, 68, 69, 72, 91, 93, 102, 103, 104, 105, 106, 107, 109, 113, 116, 127, 132, 134, 136, 142, 143, 144, 145, 146, 149, 150, 153, 154, 160, 163, 164, 165, 168, 181, 183, 185, 186, 187, 188, 189, 191, 198, 204, 205, 208, 212, 214, 218, 220, 228, 230, 239, 244, 245, 246, 249, 253, 259, 262, 264, 268, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 284, 285, 287, 289, 297, 298, 299, 305, 306, 307, 308, 312, 315, 316, 317, 319, 320, 321, 322, 326, 327, 329, 330, 332, 333, 340, 347, 351, 352, 355, 359, 371, 376, 378, 381, 389, 390, 402, 403, 404, 405, 406, 407, 409, 411, 413, 415, 417, 425, 427, 431, 437, 443, 447, 449, 452, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 503, 505, 533, 537, 542, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 593, 594, 595, 596, 597, 599, 600, 601, 603, 604, 605, 607, 610, 611, 612, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 699, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 735, 737, 738, 739, 740, 741, 743, 756, 757, 758, 783, 784, 785, 786, 787, 788, 789, 790, 795, 796, 797, 798, 799, 800, 801, 804, 805, 807, 815, 820, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 854, 855, 856, 861, 862, 863, 865, 885, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 921, 923, 951, 991, 994, 998, 1000, 1005, 1008, 1010, 1012, 1016, 1022, 1023, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "score_clf1": 69, "score_clf2": 69, "score_clf3": 69, "score_df": 62, "score_differ": 275, "score_estim": [212, 230], "score_full_data": 181, "score_func": [72, 103, 104, 417, 593, 596, 597, 599, 600, 601, 743, 1033, 1035, 1050], "score_iri": 276, "score_iterative_imput": 181, "score_label": [230, 276], "score_mean": 343, "score_nam": [62, 72, 245, 272, 325, 352, 807, 824], "score_param": [594, 595, 660, 1050], "score_rand": 276, "score_sampl": [259, 295, 296, 297, 303, 390, 414, 469, 533, 542, 564, 678, 798, 799, 801, 804, 805, 815, 850, 851, 861, 865, 909, 1008, 1036, 1041, 1043, 1045], "score_simple_imput": 181, "score_std": 343, "score_tim": [272, 412, 828, 829], "score_times_nb": 272, "score_times_svm": 272, "score_typ": [245, 272, 283, 325, 807, 824, 1049], "score_valu": 352, "scorer": [2, 149, 154, 230, 246, 264, 274, 326, 378, 390, 399, 407, 412, 415, 417, 562, 563, 595, 603, 635, 660, 674, 676, 712, 733, 734, 743, 801, 804, 805, 807, 815, 823, 824, 827, 828, 829, 830, 832, 959, 991, 998, 1002, 1010, 1022, 1037, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "scorer1_nam": 412, "scorer2_nam": 412, "scorer_": [801, 804, 805, 815], "scorer_nam": [274, 801, 815], "scores_": [193, 194, 593, 596, 597, 599, 600, 601, 645, 646, 660, 1033, 1043], "scores_df": 52, "scores_glm_pure_premium": 230, "scores_matrix": 281, "scores_max": 55, "scores_product_model": 230, "scores_std": 159, "scoring_cal": 712, "scoring_inner_cv": 326, "scoring_on_bootstrap": 273, "scoring_weight": 399, "scott": [414, 850, 1033, 1034, 1039, 1041, 1042, 1043, 1048, 1049], "scottlog": 1051, "scratch": [377, 442, 1002, 1035], "screen": [48, 1046], "screenporch": 143, "screenshot": 374, "script": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 364, 376, 377, 378, 379, 380, 382, 388, 390, 394, 402, 416, 1022, 1025], "scroll": 396, "scrollbar": 381, "scrutin": 279, "scsi": 57, "scullei": 408, "sdenton4": 1036, "sdg_param": 333, "se": [168, 234, 373, 394], "seabold": [1036, 1038, 1039], "seaborn": [72, 126, 135, 149, 185, 186, 193, 198, 260, 270, 376, 394, 401, 1021], "seagreen": 207, "seal": 1039, "seamu": 1035, "sean": [1045, 1046, 1048], "seanpwilliam": 1040, "sear": 1039, "search": [2, 45, 52, 64, 80, 87, 103, 104, 105, 106, 146, 163, 165, 167, 168, 170, 183, 230, 245, 246, 260, 262, 264, 269, 271, 274, 275, 277, 282, 289, 290, 292, 294, 308, 312, 324, 340, 346, 351, 359, 373, 374, 376, 378, 388, 390, 403, 408, 409, 412, 415, 416, 417, 419, 443, 448, 450, 452, 457, 458, 461, 464, 471, 472, 478, 503, 516, 523, 558, 559, 560, 561, 565, 566, 567, 580, 600, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 629, 654, 677, 689, 690, 693, 694, 714, 729, 786, 789, 801, 804, 805, 812, 813, 815, 817, 831, 832, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 865, 910, 913, 914, 915, 916, 955, 989, 995, 997, 999, 1002, 1005, 1006, 1016, 1018, 1022, 1023, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1045, 1047, 1048, 1050], "search_05p": 146, "search_95p": 146, "search_cv": 103, "searchcv": [389, 1048], "searchforpass": 1049, "searchgrid": 1022, "searchsort": 50, "season": [43, 52, 175, 187, 213, 375], "seasonal_kernel": 175, "seasoncountcatu32": 52, "sebastian": [1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050], "sebastien": 1041, "sebastin": [1040, 1041], "sebasti\u00e1n": 1039, "seberg": 1034, "sec": [49, 220, 234, 237, 290], "sec65": 1048, "secant": 643, "second": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 371, 378, 382, 390, 405, 407, 408, 412, 413, 415, 416, 418, 464, 467, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 505, 511, 554, 584, 589, 590, 591, 592, 622, 625, 632, 633, 700, 713, 717, 759, 760, 764, 765, 767, 768, 775, 776, 777, 778, 779, 782, 801, 804, 805, 815, 829, 835, 836, 839, 842, 853, 855, 856, 857, 862, 863, 991, 992, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1009, 1012, 1013, 1018, 1048], "secondari": [636, 1037], "secondli": [374, 388, 408, 415, 658, 998], "sect": 44, "section": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 72, 120, 125, 137, 144, 149, 154, 159, 160, 161, 175, 179, 185, 186, 187, 189, 193, 198, 200, 202, 214, 236, 240, 246, 249, 251, 264, 268, 270, 273, 279, 315, 316, 317, 321, 351, 352, 353, 359, 369, 371, 374, 376, 377, 378, 380, 381, 382, 383, 384, 391, 399, 406, 407, 409, 411, 412, 413, 415, 416, 417, 418, 439, 443, 459, 535, 615, 620, 623, 638, 646, 789, 799, 907, 910, 991, 996, 998, 1002, 1003, 1005, 1006, 1008, 1009, 1016, 1017, 1018, 1019, 1033, 1035, 1036, 1037, 1040], "sector": 186, "sector_construct": 186, "sector_manufactur": 186, "sector_oth": 186, "secur": [380, 390, 1021, 1022, 1026, 1028], "sed": [380, 1033], "sedamaki": 1047, "sedykh": 1048, "see": [0, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 52, 58, 61, 62, 64, 72, 79, 82, 83, 86, 88, 90, 91, 95, 97, 98, 100, 101, 111, 116, 120, 125, 126, 130, 134, 135, 136, 137, 140, 141, 142, 143, 145, 146, 147, 149, 151, 154, 159, 164, 165, 166, 168, 170, 175, 176, 177, 181, 183, 186, 187, 189, 191, 193, 194, 195, 198, 204, 213, 214, 215, 216, 218, 229, 230, 232, 234, 241, 243, 246, 249, 250, 251, 253, 256, 257, 258, 263, 264, 265, 267, 269, 270, 271, 272, 273, 275, 277, 279, 280, 281, 284, 285, 287, 290, 296, 297, 299, 303, 310, 316, 317, 319, 320, 321, 322, 323, 324, 325, 331, 340, 344, 347, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 368, 369, 370, 371, 373, 374, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 396, 402, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 610, 611, 612, 615, 620, 623, 624, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 700, 702, 706, 707, 709, 712, 714, 744, 764, 775, 779, 780, 781, 782, 789, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 948, 949, 970, 972, 975, 985, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "seed": [2, 46, 50, 63, 64, 70, 74, 75, 79, 85, 87, 90, 92, 93, 97, 98, 103, 109, 110, 111, 118, 121, 137, 142, 161, 163, 188, 203, 208, 210, 215, 218, 221, 225, 229, 235, 256, 258, 259, 260, 261, 273, 276, 285, 295, 296, 297, 344, 345, 349, 352, 359, 364, 378, 385, 388, 390, 408, 412, 413, 443, 447, 448, 450, 452, 457, 459, 460, 461, 462, 471, 472, 473, 537, 545, 554, 555, 556, 557, 560, 561, 628, 647, 648, 653, 654, 661, 662, 663, 664, 678, 690, 692, 694, 696, 798, 799, 805, 836, 839, 854, 908, 934, 948, 949, 966, 970, 991, 992, 997, 999, 1037, 1038, 1042, 1043, 1049], "seeger": [640, 994], "seek": [232, 234, 236, 375, 376, 388, 391, 509, 510, 999], "seel": 1047, "seem": [43, 48, 52, 80, 88, 146, 149, 176, 187, 212, 236, 239, 271, 287, 306, 314, 347, 351, 352, 375, 376, 381, 407, 412, 502, 998, 1002], "seemingli": [230, 359, 388], "seen": [55, 62, 75, 88, 99, 113, 123, 129, 141, 146, 149, 186, 187, 236, 242, 246, 306, 310, 340, 351, 371, 378, 380, 389, 390, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 424, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 522, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 624, 628, 629, 630, 631, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 976, 982, 991, 997, 1002, 1005, 1006, 1012, 1018, 1026, 1045, 1046, 1047, 1048, 1049, 1050], "segfault": [364, 377, 1033, 1041, 1046], "segment": [51, 53, 55, 59, 71, 81, 86, 123, 183, 235, 242, 371, 384, 408, 416, 452, 462, 509, 510, 692, 861, 1002, 1023, 1026, 1041, 1043, 1045], "seguin": 1038, "sei": 416, "seismic_r": [193, 198], "sejourn": 1042, "sel": [399, 417], "seladu": 1049, "seldom": 905, "sele": [1047, 1048], "selecci\u00f3n": 316, "select": [2, 18, 29, 43, 46, 48, 49, 52, 58, 70, 71, 79, 84, 88, 90, 95, 101, 103, 106, 113, 118, 119, 120, 129, 130, 134, 136, 143, 146, 149, 154, 163, 165, 175, 177, 186, 187, 189, 191, 192, 194, 196, 198, 199, 201, 211, 216, 220, 227, 230, 233, 239, 243, 245, 249, 254, 255, 256, 257, 264, 268, 269, 270, 271, 275, 283, 284, 294, 310, 315, 316, 321, 325, 327, 329, 330, 333, 335, 340, 347, 351, 352, 353, 359, 363, 371, 373, 374, 376, 378, 380, 384, 389, 390, 405, 408, 409, 410, 413, 415, 416, 418, 443, 445, 446, 447, 449, 451, 453, 458, 459, 460, 464, 466, 467, 472, 473, 476, 488, 489, 493, 494, 497, 498, 501, 502, 503, 505, 513, 516, 533, 535, 536, 541, 542, 545, 550, 552, 559, 560, 561, 564, 566, 582, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 628, 632, 633, 646, 647, 648, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 672, 674, 677, 679, 683, 684, 692, 693, 698, 713, 717, 719, 755, 789, 793, 794, 798, 799, 801, 804, 805, 806, 807, 815, 827, 828, 829, 831, 833, 847, 848, 849, 851, 853, 855, 856, 857, 865, 866, 870, 875, 881, 885, 902, 905, 906, 910, 913, 914, 915, 916, 927, 970, 971, 996, 997, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1012, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "select__k": 991, "select_dtyp": [107, 143, 324, 466], "selected_featur": 189, "selected_features_nam": 189, "selectfdr": [2, 417, 593, 597, 599, 600, 601, 607, 1037, 1039, 1040, 1049], "selectfpr": [2, 376, 417, 593, 596, 599, 600, 601, 607, 1049], "selectfrommodel": [2, 168, 390, 399, 594, 603, 604, 1024, 1028, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1049, 1050], "selectfw": [2, 417, 593, 596, 597, 600, 601, 607, 1049], "selectkbest": [2, 104, 106, 164, 165, 323, 359, 376, 399, 409, 417, 582, 593, 596, 597, 599, 601, 607, 991, 1034, 1039, 1049, 1050], "selectkbestselectkbest": [165, 323], "selector": [2, 52, 103, 164, 165, 249, 347, 384, 416, 417, 466, 582, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 1035, 1043, 1045, 1049], "selectormixin": [2, 1044], "selectpercentil": [2, 87, 103, 253, 343, 417, 593, 596, 597, 599, 600, 604, 607, 1034, 1039, 1049, 1050], "selectpercentileselectpercentil": [103, 253], "self": [2, 47, 57, 62, 64, 89, 98, 118, 132, 178, 183, 189, 246, 284, 290, 328, 334, 340, 351, 370, 376, 377, 378, 381, 382, 383, 384, 408, 416, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 501, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 704, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 815, 819, 820, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 954, 958, 959, 961, 962, 967, 975, 990, 1005, 1022, 1023, 1024, 1026, 1028, 1035, 1040, 1047], "self_request": 246, "self_training_clf": 332, "self_training_model": [321, 902], "selftrain": 333, "selftrainingclassifi": [2, 321, 332, 333, 334, 399, 1015, 1045, 1050], "selftrainingclassifierifittedselftrainingclassifi": 321, "seljak": 1048, "sell": 107, "selvan": 1045, "semant": [54, 351, 352, 390, 545, 1027, 1028, 1035], "semi": [2, 38, 57, 67, 115, 152, 161, 172, 244, 247, 312, 321, 336, 337, 340, 344, 353, 371, 390, 488, 505, 536, 589, 591, 677, 730, 831, 865, 869, 900, 901, 902, 910, 1000, 1005, 1008, 1023, 1024, 1028, 1033, 1045, 1048], "semi_supervis": [2, 183, 321, 323, 328, 329, 330, 331, 332, 333, 334, 399, 900, 901, 902, 1003, 1015, 1023, 1034, 1039, 1040, 1047, 1048], "semiconductor": 1026, "semidefinit": [179, 1012, 1017], "semilogi": [201, 243], "semilogx": [159, 201, 202], "semin": 415, "seminar": 1002, "semisupervis": [329, 390], "sen": [2, 183, 192, 215, 218, 310, 650, 658, 672, 679, 680, 1023], "send": [376, 380, 391, 408, 420, 534], "sender": [351, 371], "sendyk": 1042, "seng": 1045, "senger": [0, 1049, 1050, 1051], "senior": [1012, 1026], "sens": [42, 43, 52, 55, 62, 88, 99, 176, 183, 186, 191, 243, 310, 316, 330, 340, 351, 359, 363, 376, 377, 390, 408, 410, 412, 417, 462, 469, 470, 471, 472, 473, 474, 475, 476, 653, 656, 657, 673, 802, 812, 902, 996, 998, 1005, 1006, 1008, 1012, 1015, 1023], "sensibl": [85, 181, 283, 287, 352, 378, 998, 1012], "sensit": [43, 79, 88, 111, 112, 137, 146, 183, 187, 214, 215, 216, 239, 240, 249, 262, 274, 277, 284, 310, 327, 340, 364, 365, 391, 407, 410, 415, 452, 462, 497, 552, 562, 659, 693, 701, 703, 713, 714, 719, 743, 785, 788, 789, 800, 801, 823, 831, 866, 885, 903, 997, 998, 999, 1001, 1002, 1006, 1008, 1016, 1017, 1023, 1037, 1051], "sensor": 198, "sent": [149, 408, 834, 1018], "sentenc": [102, 351, 353, 371, 391, 416], "seoeun": 1049, "sep": [118, 279], "sepal": [126, 128, 130, 142, 172, 197, 253, 293, 321, 324, 337, 373, 1012], "sepal_col": 324, "separ": [52, 53, 61, 62, 66, 67, 75, 88, 93, 95, 99, 105, 111, 119, 120, 122, 125, 134, 136, 139, 152, 168, 173, 182, 183, 187, 188, 191, 192, 211, 213, 233, 247, 257, 270, 273, 279, 280, 310, 312, 315, 321, 332, 335, 336, 338, 339, 340, 344, 345, 351, 359, 363, 372, 373, 378, 381, 384, 388, 390, 402, 406, 408, 409, 410, 413, 415, 416, 418, 464, 513, 520, 534, 539, 541, 542, 548, 550, 582, 589, 590, 592, 611, 632, 639, 647, 648, 674, 677, 678, 691, 695, 726, 733, 746, 747, 749, 754, 793, 820, 837, 838, 864, 865, 907, 909, 910, 915, 916, 991, 992, 994, 996, 998, 999, 1001, 1008, 1009, 1012, 1016, 1017, 1023, 1033, 1036, 1038, 1039, 1043, 1045, 1046, 1049, 1050], "seper": 554, "septemb": [735, 1002, 1033, 1036, 1039, 1041, 1046, 1049, 1051], "seq": 634, "seq_dataset": [1033, 1043], "seqlearn": 388, "sequenc": [2, 51, 134, 142, 200, 235, 378, 390, 409, 412, 413, 415, 416, 504, 513, 554, 555, 562, 563, 570, 571, 582, 583, 589, 590, 592, 647, 801, 804, 812, 831, 865, 889, 952, 953, 964, 972, 975, 1033, 1036, 1038, 1039], "sequencekernel": 178, "sequenti": [2, 52, 142, 162, 165, 183, 207, 271, 321, 374, 413, 415, 416, 501, 502, 535, 594, 598, 603, 604, 606, 607, 647, 648, 653, 654, 659, 661, 662, 663, 664, 674, 789, 865, 866, 885, 992, 1010, 1016, 1023, 1024, 1028, 1033, 1042, 1045], "sequentialfeatureselector": [2, 168, 399, 417, 594, 598, 604, 1045, 1046, 1047, 1048, 1049], "sergei": [408, 1035, 1039, 1040, 1041, 1042, 1043], "sergeyf": 1035, "sergio": [1033, 1035, 1036, 1045, 1048], "sergiodsr": 1044, "sergul": [1040, 1041, 1044], "seri": [2, 42, 43, 51, 58, 113, 141, 146, 149, 183, 185, 188, 189, 196, 212, 214, 216, 232, 253, 275, 284, 317, 323, 329, 368, 371, 381, 390, 408, 489, 490, 491, 492, 493, 497, 501, 502, 503, 505, 506, 511, 542, 563, 691, 695, 702, 743, 746, 747, 749, 791, 822, 827, 828, 831, 927, 993, 998, 999, 1003, 1005, 1016, 1021, 1023, 1036, 1039, 1040, 1041, 1045, 1048, 1050, 1051], "serial": [390, 402, 422, 957, 1021, 1022, 1033, 1041, 1045, 1050], "serializetostr": 402, "serious": 1004, "serum": [168, 373], "serv": [102, 124, 134, 176, 264, 273, 344, 409, 552, 994, 1028, 1047], "server": [0, 168, 363, 373, 374, 376, 497, 1025, 1041], "servic": [0, 43, 240, 249, 376, 380, 402, 1026, 1041], "sess": 402, "session": [378, 382, 388, 394, 1020, 1026], "set": [2, 3, 8, 19, 27, 37, 42, 43, 44, 45, 46, 47, 50, 52, 53, 58, 62, 63, 64, 66, 67, 70, 72, 76, 77, 79, 80, 82, 83, 86, 87, 88, 90, 91, 93, 95, 97, 98, 99, 102, 103, 105, 111, 112, 113, 116, 120, 125, 126, 132, 134, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 156, 159, 164, 165, 168, 170, 176, 177, 178, 183, 185, 186, 187, 188, 189, 193, 198, 200, 201, 202, 204, 206, 208, 209, 211, 212, 213, 214, 217, 220, 225, 226, 230, 232, 233, 234, 239, 240, 241, 242, 244, 245, 246, 249, 253, 255, 257, 259, 260, 263, 265, 268, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 283, 285, 287, 289, 292, 296, 297, 298, 299, 300, 303, 306, 307, 308, 310, 312, 314, 315, 316, 317, 319, 321, 322, 326, 329, 330, 333, 334, 337, 339, 342, 344, 347, 351, 352, 353, 357, 358, 359, 363, 364, 365, 368, 369, 371, 373, 374, 376, 378, 380, 381, 383, 384, 389, 390, 391, 394, 399, 402, 404, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 425, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 488, 489, 494, 496, 497, 498, 500, 503, 504, 509, 510, 511, 516, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 581, 582, 583, 584, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 698, 699, 700, 701, 702, 703, 704, 712, 714, 715, 717, 720, 722, 724, 727, 728, 729, 730, 731, 732, 735, 739, 741, 746, 747, 749, 751, 752, 754, 757, 780, 781, 783, 784, 785, 786, 788, 790, 791, 792, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 931, 932, 938, 943, 944, 949, 953, 957, 958, 970, 971, 972, 975, 976, 982, 985, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "set1": [270, 299, 300], "set_": [246, 399, 1051], "set_alpha": [70, 255, 256, 257, 260, 261], "set_arrai": [51, 235, 242], "set_aspect": [43, 122, 173, 223, 257, 348], "set_autoscaley_on": 77, "set_axis_bgcolor": 113, "set_axis_off": 68, "set_axisbelow": 49, "set_box_aspect": 70, "set_clim": 294, "set_clip_box": [70, 255, 256, 257, 260, 261], "set_color": [46, 223], "set_config": [2, 246, 251, 253, 264, 317, 320, 326, 363, 364, 399, 409, 437, 443, 444, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 594, 595, 598, 603, 611, 612, 627, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 1042, 1044, 1047, 1049], "set_constrained_layout_pad": 120, "set_edgecolor": 120, "set_facecolor": [113, 255], "set_fit_request": [246, 326, 399, 437, 443, 444, 447, 449, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 589, 592, 636, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 691, 837, 838, 840, 841, 842, 843, 844, 850, 870, 871, 884, 885, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916], "set_fmt_str_length": 52, "set_i": 90, "set_index": [62, 134, 146, 202, 230, 270, 316, 352], "set_inverse_transform_request": [534, 582, 872, 885], "set_label": [75, 173, 243], "set_label_posit": 46, "set_linewidth": [51, 235, 242], "set_major_formatt": [232, 234, 237, 290, 295], "set_major_loc": [232, 295], "set_output": [183, 187, 238, 251, 315, 316, 379, 388, 432, 442, 443, 445, 447, 449, 464, 468, 482, 483, 484, 485, 497, 505, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 659, 689, 690, 693, 831, 849, 854, 857, 861, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 903, 1023, 1048, 1049, 1050], "set_param": [123, 130, 138, 143, 146, 187, 188, 194, 200, 202, 206, 216, 220, 244, 249, 253, 264, 283, 293, 319, 343, 352, 379, 390, 408, 409, 415, 418, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 992, 1008, 1033, 1039, 1040, 1041, 1046, 1047], "set_partial_fit_request": [449, 535, 667, 668, 669, 677, 678, 679, 833, 834, 837, 838, 840, 841, 842, 843, 844, 862, 885], "set_path_effect": 75, "set_posit": [100, 223, 310], "set_predict_proba_request": [913, 915], "set_predict_request": [246, 482, 483, 484, 553, 612, 636, 645, 646, 913, 914, 915, 916], "set_printopt": 263, "set_prop_cycl": 213, "set_score_request": [246, 264, 326, 399, 437, 443, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 800, 823, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 855, 856, 862, 863, 865, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 1002], "set_siz": 297, "set_size_inch": [93, 159, 250], "set_split_request": [802, 803, 808, 810, 819], "set_start_method": 388, "set_stat": 991, "set_tick_param": 255, "set_ticklabel": [126, 351], "set_titl": [47, 49, 54, 62, 64, 66, 67, 68, 70, 77, 78, 86, 88, 90, 93, 97, 98, 104, 107, 111, 118, 125, 130, 134, 139, 141, 144, 150, 152, 154, 155, 179, 181, 182, 185, 186, 187, 188, 189, 193, 194, 202, 204, 210, 212, 213, 214, 220, 232, 233, 236, 237, 242, 244, 245, 249, 250, 255, 263, 264, 265, 266, 267, 270, 272, 273, 277, 281, 282, 284, 287, 289, 290, 293, 294, 295, 300, 305, 306, 310, 311, 312, 313, 314, 315, 319, 323, 329, 330, 337, 344, 347, 348, 349, 351, 355, 372], "set_transform_request": [246, 482, 483, 484, 534, 583, 589, 591, 592, 636, 868, 871, 877, 885], "set_vis": [54, 70, 294, 300, 310], "set_xlabel": [46, 49, 86, 93, 104, 105, 107, 118, 125, 144, 179, 181, 182, 185, 187, 188, 189, 191, 202, 208, 210, 212, 214, 227, 228, 244, 264, 270, 272, 276, 281, 282, 284, 287, 295, 310, 311, 315, 332, 352, 353, 355], "set_xlim": [67, 77, 93, 107, 111, 118, 139, 152, 182, 187, 210, 212, 217, 244, 255, 274, 276, 287, 295, 305, 310, 312, 313, 314, 315, 320, 326, 348], "set_xscal": [202, 217], "set_xtick": [43, 47, 49, 67, 78, 93, 97, 130, 152, 156, 187, 189, 204, 228, 244, 255, 281, 282, 289, 305, 307, 312, 313, 337], "set_xticklabel": [47, 49, 111, 130, 156, 173, 187, 189, 281, 282, 289], "set_ylabel": [46, 47, 49, 66, 70, 86, 93, 98, 104, 105, 107, 111, 118, 125, 130, 134, 141, 144, 179, 187, 191, 202, 204, 208, 210, 212, 214, 216, 227, 244, 255, 264, 270, 272, 276, 281, 282, 284, 289, 295, 310, 311, 315, 319, 332, 347, 352, 355], "set_ylim": [47, 49, 67, 77, 93, 104, 118, 139, 151, 152, 179, 187, 194, 210, 212, 213, 244, 255, 274, 289, 295, 305, 310, 312, 313, 315, 320, 326, 332, 348], "set_yscal": [144, 212], "set_ytick": [43, 67, 78, 93, 97, 130, 152, 181, 182, 189, 204, 228, 255, 281, 305, 307, 312, 313, 337, 353], "set_yticklabel": [130, 173, 181, 182, 189, 281, 353], "set_zord": 122, "setattr": 378, "setdefault": [55, 920], "setdiff1d": 346, "seth": 1039, "sethdandridg": 1037, "setminu": 1018, "setosa": [126, 128, 279, 280, 373, 505], "setp": [47, 49, 281, 285], "settabl": 1002, "settingwithcopywarn": 187, "setup": [277, 279, 363, 374, 378, 382, 384, 1005], "setuptool": 1051, "seuclidean": [450, 457, 700, 779, 780, 781, 1005, 1041, 1044, 1045], "seuclideandist": 700, "seung": 413, "seven": [371, 995], "seventh": [512, 1014], "sever": [0, 43, 48, 51, 52, 62, 64, 67, 70, 72, 88, 89, 90, 94, 106, 137, 149, 152, 154, 157, 165, 168, 170, 175, 176, 183, 186, 191, 198, 202, 212, 216, 231, 232, 235, 236, 237, 243, 257, 265, 270, 275, 284, 290, 292, 306, 310, 322, 347, 351, 352, 363, 370, 371, 373, 376, 378, 381, 384, 388, 390, 405, 408, 409, 412, 414, 415, 416, 418, 447, 449, 464, 487, 500, 509, 510, 539, 556, 557, 560, 561, 564, 565, 566, 571, 589, 590, 592, 611, 646, 647, 653, 689, 690, 691, 692, 693, 694, 798, 799, 801, 804, 805, 815, 833, 834, 840, 841, 842, 843, 844, 864, 865, 872, 889, 913, 914, 915, 916, 934, 991, 994, 999, 1002, 1003, 1005, 1010, 1012, 1016, 1018, 1019, 1020, 1021, 1023, 1025, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1046, 1049, 1050], "sevin": 1041, "sewook": 1043, "sex": [103, 168, 186, 188, 200, 202, 253, 324, 326, 373, 497, 1010], "sex_mal": 186, "seyedsaman": 1047, "sf": [168, 270, 321, 371, 417, 493, 603], "sfm": 168, "sfs_backward": 168, "sfs_forward": 168, "sfu": [408, 442], "sgd": [2, 46, 47, 50, 124, 129, 136, 145, 146, 155, 173, 174, 183, 192, 195, 204, 205, 219, 226, 239, 246, 259, 278, 303, 306, 307, 322, 341, 342, 345, 349, 351, 356, 359, 365, 505, 513, 632, 650, 667, 668, 669, 672, 677, 678, 679, 680, 862, 863, 991, 1006, 1023, 1024, 1028, 1033, 1036, 1037, 1038, 1040, 1044, 1046], "sgdclassifi": [2, 25, 46, 47, 219, 220, 221, 222, 223, 224, 225, 244, 278, 333, 342, 351, 359, 363, 365, 382, 390, 406, 416, 639, 641, 642, 643, 647, 659, 667, 669, 905, 910, 994, 998, 1003, 1016, 1017, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1049, 1050, 1051], "sgdoneclasssvm": [2, 226, 239, 322, 909, 1008, 1016, 1046, 1048, 1049, 1050, 1051], "sgdregressor": [2, 25, 49, 223, 363, 365, 388, 647, 650, 668, 672, 677, 680, 863, 906, 911, 998, 1016, 1035, 1037, 1039, 1040, 1041, 1044, 1046, 1047, 1048, 1049, 1051], "sgi": 351, "sgkf": [412, 819], "sgm": 47, "sgml": [47, 363], "sh": [281, 384, 991], "sh_color": 236, "sh_err": 236, "sh_lle": 236, "sh_point": 236, "sh_tsne": 236, "sha256": [47, 52, 492, 1048], "shack": [1043, 1044, 1045], "shade": [58, 86, 166, 197, 293, 298, 336, 413], "shader": 404, "shadi": [1048, 1049], "shadow": [124, 128, 129, 235, 331, 346, 353, 416], "shafer": 102, "shagun": 1039, "shah": [1037, 1038, 1039, 1045, 1051], "shaharyar": 1051, "shahebaz": 1041, "shahriar": 1035, "shaikh": [0, 361, 366, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1051], "shail": 1045, "shakerimoff": 1047, "shalev": [667, 668, 998, 1016], "shalil": 1041, "shall": 175, "shallow": [382, 415, 562, 563, 920], "shamsi": 1041, "shandeng123": 1047, "shane": [1042, 1045, 1048], "shanghai": [690, 694, 999], "shangwu": [1041, 1042], "shankar": 1043, "shanmuga": 1039, "shanno": 998, "shannon": [558, 565, 913, 915, 999, 1018], "shantanu": 784, "shao": [1045, 1046, 1047], "shape": [2, 43, 44, 45, 47, 48, 49, 50, 52, 53, 55, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 76, 80, 81, 84, 85, 86, 87, 88, 91, 93, 94, 99, 102, 106, 107, 111, 120, 121, 123, 135, 140, 141, 142, 143, 146, 147, 148, 149, 152, 153, 161, 164, 166, 171, 172, 174, 175, 176, 177, 181, 182, 183, 187, 188, 200, 202, 212, 214, 219, 221, 224, 225, 226, 227, 228, 231, 233, 234, 235, 239, 242, 243, 244, 245, 246, 248, 249, 255, 257, 259, 260, 261, 268, 270, 272, 273, 276, 277, 279, 280, 290, 295, 296, 300, 303, 305, 307, 312, 313, 319, 321, 324, 325, 326, 331, 332, 334, 337, 340, 343, 344, 345, 348, 349, 351, 352, 358, 363, 369, 370, 371, 376, 378, 390, 405, 406, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 928, 933, 936, 937, 943, 947, 949, 951, 955, 956, 963, 965, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 990, 992, 997, 998, 1002, 1003, 1004, 1005, 1006, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1023, 1033, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1047, 1049, 1050], "shape_fit_": [907, 908, 909, 910, 911], "shape_img": 586, "sharad": 1041, "sharan": [1040, 1041], "share": [70, 115, 152, 186, 260, 351, 358, 359, 363, 364, 378, 384, 402, 408, 413, 416, 550, 669, 705, 709, 798, 799, 804, 805, 996, 1009, 1025, 1033, 1035, 1041, 1043, 1045, 1048], "shared_yax": 140, "sharedmem": 1041, "sharei": [43, 52, 70, 107, 118, 125, 130, 155, 179, 187, 209, 212, 214, 220, 272, 281, 283, 284, 295, 311, 316, 346, 347, 352, 372], "sharex": [43, 46, 54, 70, 105, 118, 125, 155, 179, 187, 209, 214, 272, 283, 284, 295, 332, 372], "sharma": [1037, 1039, 1041, 1042, 1044, 1045, 1047, 1050, 1051], "sharmadharmp": 1047, "sharon": [45, 371], "sharova": 1040, "sharp": [43, 187, 1009, 1012], "sharper": 727, "shashank": [1039, 1045], "shaun": 1034, "shawpan": 1039, "shaymernaturalint": 1047, "she": [376, 895, 896, 1043], "shea": [1041, 1042], "shebanov": [1041, 1042], "sheep": 1026, "sheer": [376, 1026], "sheerman": 1033, "sheet": 1035, "sheetscikit": 396, "shekhar": 1039, "shell": [377, 384, 388], "shellyfung": 1048, "shen": 1046, "sheng": 1043, "shengxiduan": 1039, "shenhanc78": 1041, "sheni": 1045, "shenk": 1041, "shenoi": 1040, "sherlock": [629, 992], "sheth": 1041, "shetti": 1046, "shi": [408, 452, 462, 692], "shibata": 1043, "shiebler": 1039, "shield": 390, "shift": [2, 52, 71, 73, 79, 82, 97, 183, 193, 235, 260, 295, 308, 310, 344, 410, 414, 440, 448, 458, 461, 469, 513, 516, 690, 694, 851, 874, 1012, 1023, 1027, 1028, 1033, 1037, 1041], "shifted_gaussian": 259, "shifted_opposite_lof_scor": 851, "shih": [842, 1004], "shiki": 1044, "shilt": 1036, "shinehid": 1046, "shinitski": 1050, "shinnar": 1046, "shinsuk": 1048, "ship": [57, 154, 182, 356, 364, 374, 394, 416, 998, 1033, 1042], "shiqiao": [0, 398, 1033, 1034], "shirsat": 1048, "shiva": [1048, 1049], "shivam": [1041, 1042, 1043], "shivamgargsya": [1040, 1044, 1046], "shivan": 1038, "shivram": 1041, "shiyu": 1042, "shleifer": [1039, 1040], "shmelkov": 1038, "shoaib": 1048, "shoemak": 1044, "shogo": [1048, 1049], "shooter23": [1045, 1046], "shop": 1026, "short": [44, 126, 143, 150, 204, 268, 307, 351, 376, 384, 412, 416, 420, 998, 999, 1005, 1025, 1038, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "short_nam": 55, "shortcom": 998, "shortcut": [384, 402, 418], "shorten": [376, 1017, 1046], "shorten_param": 271, "shorter": [43, 176, 258, 388, 408, 413, 450, 457, 564, 698, 1004, 1008, 1044], "shortest": [2, 74, 381, 385, 689, 955, 999, 1046], "shortest_path": 1046, "shorthand": [91, 390, 409, 467, 562, 563, 866, 867, 1036], "shortlog": 380, "shortname_slic": 55, "shota": 1039, "should": [43, 44, 45, 47, 48, 52, 54, 55, 62, 64, 67, 72, 86, 132, 134, 137, 140, 143, 146, 149, 168, 181, 186, 191, 193, 194, 198, 212, 230, 239, 244, 245, 246, 249, 264, 270, 273, 276, 277, 279, 284, 287, 290, 311, 312, 317, 331, 340, 347, 352, 359, 363, 364, 365, 371, 374, 375, 376, 378, 380, 381, 383, 384, 385, 389, 390, 394, 399, 402, 404, 406, 407, 408, 410, 412, 413, 415, 416, 417, 418, 419, 420, 422, 425, 431, 437, 440, 442, 443, 444, 445, 447, 449, 450, 452, 454, 457, 458, 459, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 497, 504, 509, 510, 517, 522, 524, 525, 528, 533, 534, 535, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 594, 595, 598, 603, 608, 609, 611, 612, 621, 628, 629, 630, 632, 633, 634, 636, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 685, 688, 690, 691, 692, 693, 694, 695, 696, 697, 702, 710, 728, 729, 743, 767, 772, 775, 779, 780, 781, 782, 783, 786, 789, 790, 793, 800, 802, 803, 808, 809, 810, 811, 818, 819, 820, 821, 823, 827, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 884, 885, 886, 888, 892, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 931, 935, 937, 941, 949, 954, 958, 962, 967, 970, 972, 975, 976, 977, 978, 979, 980, 981, 982, 990, 991, 992, 996, 997, 998, 999, 1002, 1003, 1005, 1007, 1008, 1009, 1012, 1015, 1016, 1017, 1018, 1022, 1025, 1026, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "shouldn": [256, 261, 376], "show": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 178, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 326, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 355, 356, 357, 358, 364, 365, 372, 376, 382, 388, 389, 394, 395, 399, 405, 406, 407, 410, 412, 413, 414, 415, 417, 418, 438, 503, 560, 594, 595, 632, 633, 698, 699, 701, 702, 703, 714, 807, 824, 847, 865, 917, 918, 919, 991, 994, 996, 997, 999, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1016, 1017, 1022, 1035, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1047, 1049, 1050, 1051], "show_top10": 371, "show_vers": [2, 363, 374, 376, 384, 394, 395, 1041], "show_weight": 918, "show_with_diff": 123, "showcas": [132, 135, 140, 143, 146, 147, 149, 183, 378], "shown": [62, 90, 132, 136, 140, 146, 179, 185, 187, 198, 203, 210, 230, 237, 239, 244, 249, 257, 270, 273, 276, 279, 287, 295, 306, 307, 310, 311, 312, 329, 347, 351, 352, 376, 381, 391, 406, 408, 409, 412, 413, 414, 416, 418, 438, 460, 633, 699, 701, 702, 703, 714, 801, 815, 917, 919, 998, 999, 1002, 1005, 1012, 1016, 1017, 1018, 1037, 1042, 1043, 1044, 1047], "shown_imag": 233, "shrankhla": 1048, "shreesha": [1049, 1050], "shreya": 1043, "shrink": [63, 113, 120, 147, 187, 198, 208, 210, 216, 232, 259, 283, 310, 347, 413, 560, 561, 677, 679, 852, 862, 863, 907, 908, 909, 910, 911, 1005, 1017], "shrink_threshold": [301, 852, 1005, 1033, 1045], "shrinkag": [2, 69, 108, 110, 113, 127, 148, 183, 301, 421, 469, 470, 473, 474, 475, 476, 477, 479, 480, 481, 540, 544, 550, 562, 563, 801, 998, 1012, 1023, 1024, 1028, 1033, 1037, 1038, 1040], "shrinkage_": [109, 110, 473, 475], "shrinkage_coeffici": 480, "shroff": 1051, "shrunk": [2, 109, 127, 310, 317, 325, 421, 473, 475, 476, 479, 480, 481, 550, 886, 996, 1016, 1027, 1028], "shrunk_cov": [421, 479, 481], "shrunk_cov_scor": 127, "shrunk_covari": [2, 410, 1050], "shrunkcovari": [2, 109, 127, 410, 469, 470, 473, 474, 475], "shrunken": [852, 1033], "shu": [1034, 1037, 1041], "shuangchi": [1047, 1048], "shubernetskii": 1035, "shubh": 1044, "shubhal": 1050, "shubham": [1040, 1043, 1051], "shubhanshu": 1045, "shubhraneel": 1047, "shuckle16": 1039, "shuffl": [2, 49, 52, 54, 58, 59, 61, 64, 68, 93, 94, 120, 140, 141, 142, 149, 154, 182, 198, 209, 220, 221, 226, 239, 271, 275, 276, 283, 290, 317, 329, 330, 331, 332, 342, 351, 352, 359, 371, 385, 390, 403, 469, 474, 488, 489, 491, 493, 496, 498, 504, 512, 513, 514, 515, 516, 520, 523, 525, 532, 538, 540, 541, 547, 548, 554, 555, 556, 557, 565, 566, 568, 569, 603, 606, 608, 659, 660, 667, 668, 669, 673, 675, 677, 678, 679, 688, 801, 803, 804, 805, 806, 807, 815, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 835, 862, 863, 886, 905, 906, 907, 910, 948, 949, 970, 972, 997, 998, 1003, 1010, 1016, 1017, 1028, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044], "shuffle_param": 347, "shuffled_arrai": 975, "shufflesplit": [2, 265, 272, 347, 412, 803, 809, 811, 821, 831, 1033, 1034, 1036, 1038, 1039], "shuhei": 1046, "shuhua": 1045, "shutil": [87, 104, 409], "shuttl": 352, "shuzh": 1043, "shwartz": [667, 668, 998, 1016], "shwed": 1041, "shyam": 1046, "si": 102, "siam": [408, 412, 452, 460, 462, 536, 542], "siang": 1036, "siavash": 1046, "siavrez": 1047, "sibsp": [188, 324], "sid": 1040, "siddharth": [1040, 1044], "siddiqui": 1051, "side": [43, 64, 92, 146, 206, 216, 230, 234, 242, 264, 310, 344, 351, 359, 371, 388, 406, 409, 412, 413, 416, 425, 431, 516, 801, 815, 998, 999, 1002, 1004, 1017, 1042], "sidebar": 376, "sidhpura": 1048, "siebert": 1041, "sierra": [532, 538], "sievert": 1043, "siftikha": 1041, "sig": 121, "sigh": 351, "sigkdd": [370, 371, 512, 677, 886, 1012, 1014], "sigma": [53, 80, 81, 87, 111, 127, 146, 268, 270, 405, 410, 413, 415, 615, 650, 996, 998, 1000, 1004, 1007], "sigma2": [535, 542], "sigma_": [410, 645, 646, 1046, 1050], "sigma_0": [173, 174, 179, 418, 615], "sigma_0_bound": [179, 615], "sigma_i": [1004, 1012], "sigma_k": [413, 996], "sigmod": [408, 450, 457, 851, 1008], "sigmoid": [2, 61, 62, 63, 64, 368, 415, 437, 452, 536, 562, 621, 640, 644, 766, 775, 778, 862, 863, 907, 908, 909, 910, 911, 1007, 1017, 1028, 1046, 1050], "sigmoid_kernel": [2, 404, 766, 1000], "sign": [75, 110, 116, 121, 124, 136, 198, 260, 305, 347, 376, 408, 413, 416, 545, 583, 590, 607, 636, 637, 659, 660, 667, 669, 675, 676, 677, 678, 736, 743, 905, 909, 947, 949, 966, 998, 1002, 1007, 1012, 1016, 1017, 1033, 1037, 1042, 1046, 1048, 1051], "signal": [2, 11, 53, 112, 120, 121, 122, 129, 144, 146, 170, 175, 176, 183, 192, 193, 199, 200, 201, 202, 207, 208, 211, 213, 261, 283, 322, 408, 410, 416, 417, 418, 421, 475, 504, 522, 527, 532, 535, 538, 542, 546, 547, 626, 645, 646, 647, 648, 653, 654, 664, 665, 673, 685, 686, 687, 786, 822, 831, 879, 998, 1002, 1019, 1023, 1026, 1027, 1028], "signatur": [246, 351, 352, 371, 488, 489, 558, 559, 565, 566, 595, 611, 612, 660, 674, 676, 712, 743, 807, 824, 827, 829, 832, 878, 961, 991, 1040, 1046, 1050], "signif": [45, 994], "signifi": [408, 582, 812, 1007], "signific": [2, 43, 88, 140, 146, 163, 164, 166, 183, 216, 230, 262, 270, 289, 290, 351, 359, 370, 371, 388, 408, 411, 412, 415, 505, 533, 535, 550, 628, 659, 660, 667, 668, 669, 677, 678, 679, 820, 830, 905, 907, 908, 909, 910, 911, 991, 1001, 1002, 1005, 1023, 1033, 1035, 1036, 1037, 1041], "significantli": [43, 61, 62, 64, 72, 109, 110, 134, 140, 144, 146, 149, 168, 186, 187, 188, 212, 216, 220, 228, 230, 264, 270, 290, 320, 321, 352, 353, 359, 364, 380, 408, 413, 415, 416, 421, 469, 474, 479, 480, 539, 541, 548, 559, 566, 647, 648, 653, 654, 661, 662, 663, 664, 685, 693, 845, 846, 994, 998, 999, 1005, 1010, 1017, 1033, 1035, 1036, 1040, 1041, 1046, 1047, 1048], "sijaranamu": 1039, "silenc": 246, "silent": [246, 416, 582, 861, 1012, 1038, 1039, 1041, 1042, 1046, 1047], "silhouett": [2, 58, 71, 73, 82, 90, 91, 183, 352, 447, 513, 793, 794, 1023, 1033, 1037], "silhouette_avg": 93, "silhouette_sampl": [2, 93, 794, 1037, 1039, 1041, 1049], "silhouette_scor": [2, 73, 82, 91, 93, 352, 376, 408, 1033, 1037, 1039, 1041, 1043, 1047], "silicon": 374, "silk": 1047, "sillanp\u00e4\u00e4": 1033, "silva": [406, 689, 999, 1044, 1046, 1051], "silverman": [414, 850, 1048], "silverthorn": 1033, "silvestrin": 1050, "sim": 413, "sim4n6": 1048, "simd": [390, 1048], "similar": [2, 43, 44, 46, 51, 55, 58, 62, 63, 70, 72, 82, 84, 90, 93, 107, 116, 120, 124, 134, 146, 167, 170, 177, 185, 186, 187, 188, 198, 212, 214, 226, 232, 234, 235, 236, 239, 245, 246, 261, 264, 267, 270, 273, 276, 277, 278, 287, 289, 290, 310, 322, 339, 344, 347, 352, 353, 359, 363, 368, 370, 372, 375, 376, 378, 381, 382, 384, 385, 388, 390, 402, 405, 406, 408, 411, 412, 413, 415, 416, 417, 418, 419, 440, 443, 444, 450, 452, 454, 455, 504, 509, 510, 537, 583, 590, 591, 592, 611, 678, 693, 696, 704, 706, 716, 720, 726, 729, 730, 732, 735, 739, 741, 756, 761, 762, 787, 793, 794, 797, 798, 799, 827, 832, 877, 898, 901, 905, 906, 907, 908, 922, 932, 991, 994, 995, 997, 998, 999, 1001, 1003, 1005, 1006, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1028, 1033, 1037, 1038, 1039, 1041, 1045, 1046], "similarli": [43, 51, 72, 88, 118, 150, 187, 189, 198, 202, 212, 240, 249, 264, 270, 305, 310, 325, 327, 340, 359, 364, 372, 374, 378, 381, 388, 390, 402, 404, 405, 411, 412, 416, 730, 731, 739, 784, 785, 788, 823, 997, 999, 1000, 1002, 1009, 1016, 1017, 1019, 1041, 1047, 1049], "simmon": 1026, "simon": [998, 1026, 1036, 1037, 1046, 1047, 1048, 1049], "simona": [1044, 1045, 1046], "simonamaggio": [1044, 1045, 1046], "simoncw": 1043, "simonpl": 1038, "simpl": [2, 13, 37, 43, 64, 88, 103, 107, 109, 115, 116, 120, 140, 144, 177, 183, 187, 198, 213, 229, 252, 271, 287, 291, 294, 303, 323, 336, 351, 353, 356, 359, 374, 376, 378, 379, 380, 381, 383, 388, 389, 390, 391, 399, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 422, 429, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 462, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 515, 523, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 787, 789, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 957, 994, 996, 997, 998, 999, 1001, 1002, 1005, 1012, 1014, 1016, 1018, 1022, 1023, 1026, 1030, 1033], "simplefilt": 402, "simpleimput": [2, 103, 154, 181, 182, 188, 241, 251, 253, 320, 323, 359, 390, 628, 629, 630, 992, 1012, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "simpleimputersimpleimput": [103, 154, 188, 241, 251, 320, 323], "simplepipelin": 246, "simpler": [147, 189, 230, 319, 340, 363, 375, 408, 413, 998, 1003, 1038], "simplest": [86, 412, 999], "simplex": [63, 671, 798, 880], "simpli": [74, 116, 152, 170, 178, 236, 247, 249, 279, 303, 321, 322, 363, 371, 376, 378, 381, 388, 390, 410, 411, 412, 413, 415, 416, 485, 696, 763, 766, 872, 924, 951, 994, 1002, 1003, 1004, 1005, 1016, 1040, 1041, 1042], "simplic": [43, 53, 67, 198, 209, 344, 351, 353, 390, 414, 1005, 1006, 1007, 1017], "simplif": [372, 375, 381, 1033, 1039], "simplifi": [43, 103, 200, 246, 340, 375, 377, 381, 408, 411, 516, 563, 864, 865, 1002, 1004, 1012], "simplist": [212, 416], "simul": [110, 122, 149, 186, 207, 247, 270, 1026], "simultan": [58, 88, 121, 274, 278, 325, 347, 357, 368, 405, 408, 991, 1002, 1003, 1018, 1026, 1040], "sin": [43, 53, 57, 74, 121, 135, 145, 146, 151, 153, 163, 170, 176, 177, 179, 193, 194, 198, 207, 213, 218, 234, 245, 261, 302, 311, 320, 326, 346, 357, 418, 517, 616, 700, 765], "sin_transform": 43, "sina": 1046, "sinayev": 1035, "sinc": [0, 43, 44, 50, 52, 62, 70, 72, 82, 86, 88, 99, 102, 103, 104, 121, 143, 159, 165, 168, 170, 175, 186, 187, 189, 191, 196, 212, 214, 216, 229, 240, 244, 245, 246, 257, 260, 264, 266, 270, 272, 273, 279, 280, 283, 284, 287, 289, 290, 292, 293, 316, 322, 323, 334, 337, 340, 347, 351, 352, 353, 359, 364, 371, 374, 376, 377, 378, 380, 381, 384, 388, 389, 390, 394, 399, 402, 406, 408, 409, 410, 411, 412, 413, 415, 416, 418, 425, 428, 437, 442, 445, 446, 450, 453, 456, 469, 482, 483, 484, 485, 497, 528, 537, 539, 541, 548, 550, 551, 552, 553, 554, 556, 558, 560, 562, 563, 564, 565, 568, 570, 589, 590, 592, 611, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 633, 634, 639, 652, 656, 659, 660, 667, 669, 674, 675, 676, 677, 680, 693, 708, 710, 736, 743, 779, 783, 790, 800, 801, 804, 805, 815, 823, 829, 830, 832, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 852, 855, 862, 863, 865, 870, 895, 896, 900, 901, 902, 905, 907, 910, 913, 915, 929, 931, 932, 949, 958, 991, 994, 995, 996, 998, 999, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1016, 1017, 1018, 1026, 1033, 1034, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "sinclert": 1041, "sind": 416, "sine": [2, 43, 170, 175, 176, 183, 207, 218, 254, 255, 256, 257, 259, 260, 357, 372, 616, 798, 799, 1001, 1018, 1023], "singer": [287, 667, 668, 736, 998, 1002, 1016, 1017], "singh": [1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "singl": [2, 30, 31, 70, 74, 85, 86, 88, 91, 94, 95, 104, 122, 133, 134, 135, 142, 143, 153, 168, 170, 176, 181, 183, 187, 189, 191, 198, 209, 212, 214, 216, 250, 252, 260, 264, 266, 279, 287, 307, 323, 325, 340, 351, 352, 353, 356, 357, 359, 363, 364, 370, 371, 376, 381, 383, 384, 385, 388, 389, 390, 399, 406, 407, 409, 411, 412, 413, 415, 416, 417, 433, 437, 440, 441, 445, 446, 447, 449, 454, 464, 466, 467, 494, 495, 497, 507, 510, 535, 554, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 583, 593, 600, 601, 603, 607, 628, 633, 635, 644, 667, 668, 674, 677, 678, 679, 691, 693, 695, 711, 712, 722, 723, 724, 725, 726, 737, 738, 739, 742, 775, 786, 798, 799, 801, 804, 805, 815, 822, 823, 827, 828, 830, 831, 834, 842, 845, 846, 850, 862, 863, 864, 874, 875, 878, 879, 880, 885, 886, 900, 901, 913, 914, 915, 916, 925, 927, 965, 988, 991, 997, 998, 999, 1002, 1003, 1005, 1007, 1009, 1010, 1012, 1016, 1017, 1018, 1021, 1023, 1026, 1033, 1034, 1035, 1037, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "single_output": [378, 925], "single_prior": 179, "single_source_shortest_path_length": [2, 385], "singleton": [364, 809, 934, 1046, 1049], "singular": [2, 120, 385, 405, 408, 411, 451, 453, 482, 483, 484, 485, 522, 525, 535, 539, 541, 542, 545, 548, 550, 551, 658, 673, 674, 675, 688, 949, 998, 999, 1001, 1027, 1028, 1039, 1040, 1051], "singular_": 658, "singular_values_": [535, 542, 545, 1040], "sinha": [1041, 1050, 1051], "sinhrk": [1037, 1038], "sink": [642, 994], "sinoisoid": 146, "sinusoid": [121, 135, 146, 198, 245, 646, 995], "sio": 402, "siola": [1048, 1049], "sip\u0151cz": [1043, 1044, 1045, 1049, 1051], "siqi": 1047, "siqueira": 1043, "sir": 373, "sister": 1021, "site": [374, 376, 384, 394, 415, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 1026, 1041], "situat": [62, 79, 90, 104, 185, 186, 218, 239, 273, 376, 384, 402, 410, 412, 413, 415, 468, 529, 535, 583, 878, 881, 893, 903, 996, 998, 1004, 1005, 1015, 1018, 1041], "situp": 373, "sivamani": 1043, "sivaprasad": [1036, 1037], "six": [168, 213, 233, 314, 373, 1042], "sixteenth": 1014, "sixth": 371, "size": [37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 61, 64, 67, 69, 72, 74, 75, 77, 79, 80, 81, 85, 87, 88, 90, 91, 93, 94, 95, 99, 100, 105, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 127, 129, 137, 145, 146, 149, 150, 151, 164, 170, 172, 173, 176, 177, 183, 185, 187, 188, 193, 194, 195, 196, 199, 203, 208, 210, 213, 214, 215, 218, 225, 226, 232, 237, 239, 242, 243, 244, 245, 246, 248, 249, 257, 263, 266, 268, 270, 272, 273, 275, 276, 277, 287, 296, 297, 298, 305, 308, 311, 312, 313, 314, 317, 320, 323, 325, 326, 330, 334, 336, 338, 339, 340, 347, 349, 351, 352, 353, 355, 363, 364, 365, 371, 372, 376, 381, 385, 388, 389, 390, 394, 399, 405, 406, 408, 410, 412, 413, 416, 418, 419, 421, 444, 445, 446, 448, 449, 450, 457, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 494, 495, 496, 516, 528, 535, 537, 539, 541, 548, 558, 559, 560, 561, 562, 563, 565, 566, 584, 588, 589, 595, 633, 634, 644, 658, 667, 668, 680, 684, 693, 696, 706, 720, 739, 741, 744, 782, 794, 803, 806, 807, 811, 818, 821, 822, 823, 826, 829, 831, 840, 841, 842, 844, 847, 848, 849, 850, 851, 853, 855, 856, 857, 862, 863, 880, 882, 894, 899, 903, 907, 908, 909, 910, 911, 913, 914, 915, 916, 919, 948, 952, 953, 964, 965, 967, 970, 976, 992, 994, 995, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1012, 1014, 1016, 1017, 1018, 1025, 1026, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1048, 1049, 1051], "size_cluster_i": 93, "size_mb": 351, "sizeabl": [803, 818, 821], "sk": 551, "skaft": 1047, "skeleton": 1036, "sketch": [2, 23, 191, 365, 368, 385, 640, 641, 642, 966, 1028, 1045], "skew": [2, 48, 146, 215, 243, 249, 310, 325, 368, 406, 412, 640, 641, 642, 643, 881, 893, 998, 1012, 1028, 1036, 1040, 1049], "skewed": [643, 1040], "skewedchi2sampl": [2, 639, 640, 641, 642, 994, 1040, 1047, 1048], "skf": [257, 412, 820], "skfold": 332, "skforecast": 1021, "skill": 1002, "skimag": [80, 81, 370], "skip": [364, 376, 385, 404, 416, 468, 647, 648, 653, 661, 662, 663, 672, 682, 903, 924, 1037, 1040, 1043, 1045, 1047, 1049], "skip_check_arrai": 990, "skip_complet": 628, "skip_comput": 1043, "skip_parameter_valid": [468, 903, 1049], "skipper": [1036, 1038, 1039], "skiptestwarn": 924, "skl2onnx": 402, "sklear": 377, "sklearn": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363, 364, 365, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 388, 389, 390, 393, 394, 395, 399, 402, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "sklearn2pmml": 1021, "sklearn_api": 0, "sklearn_assume_finit": 363, "sklearn_cache_": 319, "sklearn_enable_debug_cython_direct": 377, "sklearn_fail_no_openmp": 374, "sklearn_graph_cache_": 292, "sklearn_is_fit": [132, 1023], "sklearn_run_float32_test": 376, "sklearn_site_joblib": 1041, "sklearn_warning_as_error": 364, "sklearnex": 394, "skop": [1021, 1028], "skorch": 1021, "sktime": [52, 1021], "sl": 212, "slack": 1016, "slai": 351, "slama": [1043, 1045], "slep": [376, 390], "slep000": 391, "slep009": [1044, 1046, 1047], "slep010": [378, 1044], "slep011": 1022, "slep018": [253, 378, 1048], "slep020": 391, "slice": [2, 43, 52, 55, 142, 149, 221, 234, 244, 298, 301, 322, 323, 336, 371, 377, 385, 409, 464, 467, 494, 495, 509, 547, 640, 775, 779, 782, 922, 927, 952, 953, 972, 1045, 1047, 1051], "slice_": [494, 495, 1048], "sliceabl": 956, "slide": [271, 645, 998, 1020], "slight": [143, 217, 321, 402, 415, 449, 1043], "slightli": [43, 62, 64, 97, 113, 137, 140, 143, 146, 150, 154, 168, 170, 171, 172, 188, 193, 212, 230, 235, 237, 246, 249, 278, 284, 290, 319, 337, 353, 375, 376, 406, 408, 415, 416, 418, 420, 446, 589, 590, 592, 639, 659, 804, 805, 905, 907, 910, 948, 949, 991, 998, 1012, 1016, 1017, 1018, 1042, 1046, 1047, 1049, 1051], "slishak": 1047, "sloan": 0, "slogdet": 947, "slope": [187, 210, 214, 229, 408, 491, 724, 749, 1000, 1002], "sloppili": 416, "sloth": [50, 303, 371, 499], "slow": [292, 310, 351, 363, 370, 374, 376, 413, 416, 447, 700, 879, 880, 884, 907, 910, 949, 999, 1005, 1022, 1040], "slower": [104, 123, 140, 143, 181, 245, 279, 353, 390, 415, 416, 417, 446, 451, 453, 539, 541, 548, 556, 557, 558, 559, 564, 565, 566, 567, 589, 590, 592, 632, 633, 634, 644, 660, 673, 675, 688, 693, 705, 833, 837, 838, 995, 999, 1000, 1001, 1003, 1005, 1018, 1037, 1044], "slowest": [143, 948, 949], "slowli": [388, 390, 545, 949], "slug": 102, "smacof": [2, 691, 1048], "small": [37, 38, 41, 44, 50, 52, 59, 64, 74, 82, 86, 88, 102, 109, 113, 116, 125, 135, 137, 143, 145, 146, 175, 177, 186, 187, 194, 199, 203, 204, 213, 216, 218, 227, 229, 230, 257, 264, 270, 277, 282, 284, 292, 303, 306, 308, 310, 312, 314, 321, 329, 334, 340, 345, 347, 351, 352, 365, 369, 371, 373, 376, 379, 385, 388, 390, 402, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 421, 441, 443, 445, 446, 447, 449, 458, 459, 463, 475, 497, 499, 539, 541, 542, 548, 556, 557, 558, 562, 563, 564, 565, 583, 590, 591, 603, 608, 609, 651, 655, 656, 657, 659, 660, 680, 683, 684, 804, 805, 819, 830, 833, 862, 863, 870, 898, 907, 910, 949, 991, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1015, 1018, 1021, 1022, 1026, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "smaller": [2, 37, 47, 61, 75, 80, 88, 113, 134, 149, 168, 175, 176, 181, 201, 202, 204, 216, 243, 287, 296, 297, 305, 310, 327, 340, 347, 352, 376, 405, 408, 410, 412, 413, 415, 417, 439, 440, 446, 450, 454, 456, 515, 535, 536, 558, 559, 560, 561, 562, 563, 565, 566, 594, 611, 620, 634, 647, 648, 650, 651, 653, 654, 655, 657, 659, 660, 661, 662, 663, 664, 673, 675, 683, 684, 693, 710, 798, 804, 805, 851, 854, 878, 879, 897, 898, 905, 913, 914, 915, 916, 949, 996, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1012, 1014, 1016, 1017, 1018, 1022, 1041, 1046, 1050], "smallest": [111, 112, 212, 290, 327, 355, 371, 408, 410, 417, 528, 542, 631, 655, 656, 657, 683, 684, 691, 695, 696, 801, 804, 805, 815, 820, 875, 928, 1018, 1046], "smallest_ab": 327, "smallest_coef": [113, 528], "smari": [1042, 1043, 1044], "smart": [246, 443, 459, 460, 591], "smartphon": 1026, "smedbergm": 1039, "smedemark": 1043, "smile": [107, 371, 1047], "sminchisescu": [643, 994], "smirnov": 1045, "smith": [1039, 1040, 1041, 1042, 1043, 1045], "sml": [861, 1007], "smo": [905, 906], "smola": [413, 416, 536, 871, 1012, 1017], "smolskii": 1048, "smooth": [43, 80, 81, 87, 168, 175, 206, 213, 228, 316, 340, 373, 391, 408, 414, 415, 418, 448, 449, 538, 539, 540, 547, 558, 559, 560, 561, 565, 566, 567, 591, 592, 620, 623, 677, 840, 841, 842, 844, 882, 886, 894, 913, 914, 915, 916, 998, 1004, 1012, 1016, 1017, 1018], "smooth_idf": [416, 591, 592], "smoothened_coin": [80, 81], "smoother": [43, 44, 146, 187, 307, 414], "smoothli": 370, "smt": 1049, "smtp": [371, 493], "smujjiga": 1043, "sn": [72, 126, 135, 149, 185, 186, 193, 198, 260, 270], "snake": [323, 325, 583, 886, 1012], "snapshot": [402, 560, 561, 1022], "sne": [51, 183, 231, 232, 233, 234, 236, 290, 515, 526, 693, 1023, 1027, 1028], "snippet": [132, 359, 376, 381, 384, 388, 404, 415, 416, 417, 992, 1012, 1025, 1046], "snowhit": 1044, "snr": 87, "snuderl": 1037, "sny": 51, "snyder": [693, 999], "so": [30, 37, 43, 48, 51, 52, 55, 64, 77, 88, 89, 94, 98, 112, 140, 142, 143, 144, 145, 149, 153, 170, 175, 186, 188, 191, 194, 212, 213, 239, 246, 249, 264, 270, 283, 287, 290, 296, 297, 300, 306, 307, 311, 316, 317, 320, 332, 340, 351, 353, 358, 359, 363, 364, 365, 370, 371, 374, 375, 376, 378, 380, 381, 382, 384, 385, 390, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 421, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 497, 509, 510, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 696, 706, 709, 717, 727, 757, 779, 789, 798, 799, 800, 801, 804, 805, 807, 808, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 895, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 949, 967, 976, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1012, 1014, 1015, 1016, 1017, 1021, 1022, 1026, 1033, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1049, 1050], "soar": 1048, "sobkevich": 1045, "sobolev": 1037, "soc": [57, 371], "socastro": [1043, 1049], "socg2006": 447, "social": [186, 380, 391, 408, 1026], "societi": [168, 373, 408, 410, 469, 474, 542, 628, 881, 893, 998, 1016], "sodhani": 1039, "soft": [2, 129, 155, 156, 376, 390, 570, 571, 901, 909, 1016, 1026, 1038], "softmax": [415, 562, 659, 660, 998, 1005, 1006], "softw": 998, "softwar": [0, 168, 363, 373, 376, 384, 388, 390, 402, 416, 628, 636, 659, 992, 1026], "soil_typ": 249, "sokalmichen": [450, 457, 700, 779, 780, 781, 1005], "sokalmichenerdist": 700, "sokalsneath": [450, 457, 700, 779, 780, 781, 1005], "sokalsneathdist": 700, "sok\u00f3\u0142": [1050, 1051], "sole": [100, 376, 388, 408], "soledad": 1045, "soler": [0, 398], "solid": [50, 67, 69, 145, 173, 224, 225, 239, 249, 303, 312, 1026], "solntz": 351, "solosil": 1046, "solut": [80, 193, 198, 202, 204, 217, 226, 239, 245, 283, 322, 340, 374, 390, 402, 405, 407, 408, 410, 412, 413, 416, 417, 449, 451, 453, 532, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 611, 647, 649, 651, 653, 655, 656, 657, 659, 661, 663, 665, 666, 667, 668, 669, 670, 673, 675, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 798, 799, 815, 854, 862, 863, 995, 996, 998, 999, 1001, 1006, 1008, 1016, 1017, 1020, 1026, 1033, 1036, 1046, 1047, 1048], "solutu": 1041, "solutusimmensu": 1041, "solv": [2, 44, 45, 99, 170, 202, 244, 270, 289, 375, 376, 377, 378, 381, 388, 396, 408, 410, 412, 413, 418, 447, 453, 462, 478, 532, 538, 539, 540, 544, 546, 547, 548, 549, 636, 638, 647, 653, 655, 656, 665, 666, 671, 673, 675, 678, 686, 687, 688, 720, 835, 905, 906, 909, 949, 993, 996, 998, 999, 1002, 1003, 1016, 1017, 1018, 1020, 1021, 1026, 1039, 1043, 1046], "solvabl": 408, "solver": [54, 66, 69, 70, 80, 99, 183, 192, 202, 204, 205, 206, 212, 220, 227, 228, 230, 305, 306, 307, 308, 317, 326, 327, 351, 382, 388, 390, 394, 404, 408, 420, 452, 462, 471, 472, 478, 503, 534, 536, 541, 542, 545, 548, 550, 647, 648, 649, 653, 654, 659, 660, 661, 662, 663, 664, 667, 669, 670, 671, 673, 675, 677, 681, 682, 685, 688, 689, 690, 692, 694, 696, 789, 815, 831, 836, 839, 862, 863, 907, 908, 909, 910, 911, 996, 999, 1002, 1003, 1006, 1016, 1017, 1023, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "solver_": [673, 675], "solver_opt": 671, "somani": 1045, "some": [0, 42, 43, 44, 47, 48, 52, 57, 61, 62, 64, 72, 79, 83, 86, 88, 89, 91, 95, 100, 103, 106, 109, 111, 112, 116, 120, 135, 136, 140, 143, 146, 147, 149, 150, 151, 154, 155, 164, 170, 172, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 191, 193, 195, 197, 198, 200, 201, 202, 203, 207, 208, 212, 213, 216, 220, 221, 226, 229, 230, 232, 234, 239, 243, 246, 249, 256, 257, 258, 263, 264, 265, 270, 271, 272, 273, 276, 278, 284, 287, 289, 293, 296, 301, 306, 307, 310, 315, 320, 321, 322, 323, 324, 325, 326, 327, 336, 337, 339, 340, 347, 349, 351, 352, 353, 358, 359, 363, 364, 365, 369, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 431, 437, 443, 444, 447, 449, 451, 453, 459, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 497, 500, 509, 510, 516, 524, 525, 534, 535, 537, 542, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 582, 583, 589, 591, 592, 607, 610, 611, 612, 633, 634, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 690, 691, 693, 694, 698, 699, 701, 702, 703, 708, 709, 716, 721, 727, 728, 739, 740, 741, 747, 755, 757, 758, 764, 783, 785, 788, 789, 790, 795, 798, 800, 802, 803, 808, 810, 819, 820, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 931, 932, 958, 991, 992, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1026, 1030, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "some_funct": [376, 939], "some_integ": 412, "some_iter": 376, "some_param": 376, "somebodi": 391, "someestim": 375, "somehow": 187, "someon": [376, 380, 390, 1033], "someth": [186, 233, 287, 351, 376, 379, 380, 384, 416, 921, 923, 1002, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "sometim": [104, 154, 185, 264, 270, 307, 352, 359, 364, 365, 376, 378, 382, 389, 390, 408, 410, 413, 415, 416, 449, 535, 536, 539, 541, 542, 870, 871, 872, 920, 997, 998, 999, 1002, 1007, 1012, 1013, 1017, 1030, 1034, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1049], "somewhat": [347, 359, 365, 376, 413, 415, 907, 910, 998, 1017, 1018], "somewher": [382, 1002], "sommer": 1051, "somya": 1041, "son": [373, 992], "song": 999, "soni": [51, 1043, 1045], "sonni": 1038, "sonniv": [1048, 1049], "sonoiya": 1043, "sonoma": 316, "soon": [112, 390], "sooner": 1050, "sophist": [992, 1004], "sorbaro": 1038, "sorensen": 413, "soriano": 1042, "sornarajah": 1038, "sorri": 1041, "sorro": 1042, "sorski": [1047, 1048], "sort": [2, 43, 47, 49, 51, 58, 61, 93, 102, 105, 132, 137, 143, 146, 153, 168, 175, 193, 198, 212, 213, 230, 248, 270, 271, 274, 285, 302, 346, 351, 357, 376, 380, 384, 385, 390, 412, 415, 416, 418, 535, 542, 556, 567, 582, 595, 611, 618, 698, 713, 719, 730, 731, 739, 755, 784, 785, 788, 790, 801, 828, 840, 841, 842, 843, 844, 845, 846, 853, 855, 856, 857, 860, 870, 876, 878, 879, 882, 884, 886, 894, 907, 910, 949, 955, 998, 1005, 1008, 1012, 1026, 1033, 1037, 1043, 1044, 1045, 1047, 1048, 1051], "sort_graph_by_row_valu": [2, 385, 1048], "sort_index": 287, "sort_result": [845, 846, 853, 855, 856, 857, 1045], "sort_valu": [103, 188, 189, 253, 260, 270, 281, 316, 317], "sorted_idx": [147, 319], "sorted_importances_idx": 188, "sortofamudkip": [1048, 1049], "sought": 782, "soumirai": 1043, "sound": [168, 359], "sounder": 1039, "sourav": [1040, 1043], "sourc": [0, 2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 370, 373, 375, 376, 377, 379, 380, 382, 384, 385, 388, 389, 394, 402, 405, 409, 413, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 985, 986, 987, 988, 989, 990, 999, 1012, 1018, 1021, 1023, 1026, 1043, 1047, 1051], "south": [50, 149, 186, 303, 371, 414], "south_y": 186, "sp": [43, 186, 326, 992], "sp_version": 671, "space": [2, 37, 43, 47, 49, 57, 67, 80, 86, 90, 91, 93, 94, 96, 98, 102, 103, 106, 116, 120, 122, 126, 128, 130, 139, 142, 146, 152, 165, 168, 170, 176, 191, 198, 213, 232, 233, 234, 236, 243, 244, 245, 249, 250, 256, 261, 278, 281, 282, 290, 299, 300, 312, 321, 344, 351, 352, 353, 358, 359, 363, 368, 371, 372, 373, 376, 383, 388, 389, 390, 405, 408, 411, 413, 414, 415, 416, 418, 443, 447, 448, 449, 452, 462, 464, 465, 466, 467, 482, 483, 484, 488, 499, 533, 535, 536, 539, 540, 541, 542, 544, 545, 550, 574, 583, 589, 590, 592, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 633, 634, 639, 641, 642, 643, 644, 689, 690, 691, 693, 694, 695, 697, 700, 801, 804, 805, 807, 815, 824, 835, 845, 846, 853, 854, 855, 856, 865, 870, 871, 877, 882, 897, 898, 899, 918, 953, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1005, 1006, 1007, 1008, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1027, 1028, 1033, 1034, 1036, 1041, 1042, 1043, 1047, 1048, 1049], "spacek": 1038, "spain": 316, "spam": [582, 710, 742, 840, 1002, 1004, 1026], "span": [52, 88, 109, 146, 244, 264, 267, 371, 408, 416, 550, 637, 801, 804, 1002], "spanish": 1021, "spannbauer": 1045, "sparciti": 352, "spare": [370, 675, 676], "spark": [371, 1022], "sparrai": 1050, "spars": [2, 25, 45, 46, 47, 51, 53, 55, 57, 66, 74, 75, 87, 88, 90, 102, 108, 109, 110, 119, 121, 139, 152, 183, 192, 193, 200, 201, 202, 205, 207, 208, 211, 228, 243, 245, 271, 277, 283, 290, 308, 320, 324, 327, 333, 350, 353, 358, 363, 368, 370, 371, 372, 376, 378, 379, 380, 381, 388, 389, 390, 402, 408, 409, 415, 416, 418, 419, 423, 430, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 457, 459, 460, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 487, 488, 489, 497, 498, 504, 509, 524, 525, 527, 528, 529, 530, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 586, 587, 589, 590, 591, 592, 594, 595, 604, 605, 606, 607, 608, 609, 610, 630, 631, 632, 634, 639, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 713, 714, 715, 730, 731, 732, 735, 739, 740, 741, 755, 756, 761, 762, 764, 765, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 788, 793, 794, 797, 800, 801, 804, 805, 815, 822, 823, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 868, 869, 870, 872, 874, 875, 876, 877, 878, 880, 882, 883, 884, 885, 887, 888, 889, 890, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 922, 927, 929, 930, 931, 932, 937, 946, 949, 950, 953, 955, 956, 964, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 987, 990, 992, 995, 998, 999, 1000, 1002, 1003, 1005, 1015, 1017, 1018, 1022, 1023, 1024, 1027, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "sparse_cg": [351, 673, 675, 688, 998, 1034, 1040, 1042, 1043, 1047, 1049], "sparse_coef_": [647, 653, 661, 663, 1033], "sparse_encod": [2, 543, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 683, 684, 685, 686, 687, 1033, 1040, 1041, 1043, 1047], "sparse_encode_parallel": 1033, "sparse_format": [528, 1050], "sparse_func": [1039, 1045], "sparse_input_": 872, "sparse_lasso": 199, "sparse_output": [43, 143, 253, 316, 323, 326, 567, 872, 876, 878, 884, 889, 1012, 1048, 1049], "sparse_output_": [464, 552], "sparse_symmetric_arrai": 987, "sparse_threshold": [187, 464, 467, 1041], "sparsearrai": 1044, "sparsecod": [2, 129, 413, 532, 538, 541, 549, 1040, 1041, 1043, 1045, 1047], "sparsecodingmixin": 1033, "sparsefunc": [2, 385, 976, 977, 978, 979, 980, 981, 982, 1046], "sparsefuncs_fast": [2, 385, 983, 984], "sparsepca": [2, 120, 532, 534, 535, 536, 538, 540, 541, 542, 543, 546, 547, 1033, 1040, 1041, 1043, 1044, 1046, 1047, 1048, 1051], "sparser": [88, 193, 204, 283, 413, 471, 478, 540, 544, 998, 1005, 1016], "sparserandomproject": [2, 233, 243, 897, 1014, 1034, 1039, 1047, 1049, 1050], "sparsetool": 1040, "sparsifi": [46, 198, 363, 659, 660, 667, 668, 669, 677, 678, 679, 905, 985, 1035], "sparsiti": [2, 53, 66, 113, 183, 192, 198, 201, 206, 223, 227, 228, 245, 347, 352, 363, 390, 410, 413, 415, 417, 503, 528, 532, 538, 539, 540, 541, 544, 546, 547, 548, 647, 653, 659, 677, 679, 722, 724, 725, 874, 880, 885, 890, 995, 998, 1005, 1012, 1023, 1035], "sparsity_en_lr": 204, "sparsity_l1_lr": 204, "sparsity_l2_lr": 204, "sparsity_ratio": 363, "spatial": [81, 82, 88, 189, 198, 229, 307, 371, 390, 408, 419, 444, 446, 450, 452, 457, 680, 693, 761, 764, 779, 780, 781, 782, 793, 794, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 858, 859, 998, 1005, 1012, 1035, 1039, 1046, 1049], "spawn": [363, 388, 801, 815, 826, 827, 828, 1044], "spdx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358], "speak": [352, 363, 376, 1016], "spearman": [189, 636, 637, 993], "spearmanr": 189, "spec": [1048, 1049], "speci": [2, 42, 126, 183, 249, 291, 351, 369, 414, 499, 707, 790, 850, 909, 920, 1002, 1008, 1023, 1028, 1033], "special": [145, 186, 203, 230, 287, 300, 316, 340, 370, 372, 378, 382, 388, 390, 408, 411, 413, 464, 467, 554, 556, 560, 826, 917, 991, 996, 998, 1000, 1001, 1002, 1003, 1005, 1018, 1040, 1043, 1045, 1047], "special_charact": [917, 1018], "species_nam": [50, 303], "specif": [2, 43, 50, 51, 58, 64, 70, 79, 88, 95, 98, 102, 104, 140, 149, 154, 175, 178, 183, 186, 187, 191, 216, 230, 264, 265, 270, 287, 310, 319, 320, 324, 327, 344, 351, 352, 353, 359, 363, 364, 371, 376, 379, 381, 382, 384, 388, 390, 394, 402, 404, 408, 409, 412, 413, 415, 416, 417, 418, 432, 497, 504, 535, 552, 558, 565, 568, 569, 570, 571, 575, 589, 592, 594, 613, 614, 615, 616, 618, 619, 620, 621, 623, 624, 626, 641, 644, 647, 648, 653, 659, 673, 688, 698, 700, 713, 714, 801, 802, 803, 808, 809, 810, 815, 828, 841, 922, 941, 943, 944, 964, 977, 978, 979, 996, 998, 999, 1001, 1002, 1004, 1005, 1007, 1009, 1010, 1012, 1016, 1018, 1019, 1020, 1025, 1033, 1037, 1041, 1042, 1043, 1044, 1047, 1048, 1050], "specifi": [2, 43, 58, 64, 88, 120, 143, 144, 149, 171, 174, 176, 177, 178, 202, 213, 220, 255, 264, 278, 363, 364, 370, 376, 378, 384, 385, 389, 390, 399, 402, 406, 408, 409, 412, 413, 415, 417, 418, 420, 422, 437, 441, 445, 450, 452, 463, 464, 467, 469, 470, 472, 473, 474, 475, 476, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 504, 516, 528, 532, 534, 538, 539, 541, 542, 547, 548, 553, 558, 560, 561, 562, 563, 565, 568, 569, 584, 585, 594, 595, 598, 603, 611, 612, 621, 632, 633, 634, 639, 644, 647, 648, 649, 652, 653, 654, 656, 657, 659, 660, 661, 662, 663, 664, 666, 669, 670, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 688, 692, 699, 701, 703, 710, 712, 730, 731, 739, 743, 755, 772, 780, 781, 784, 785, 788, 801, 804, 805, 807, 808, 810, 814, 815, 818, 823, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 840, 841, 843, 844, 845, 846, 850, 855, 878, 879, 880, 883, 884, 886, 901, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 944, 951, 985, 992, 998, 999, 1001, 1002, 1005, 1009, 1010, 1012, 1015, 1016, 1017, 1033, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "spector": 412, "spectral": [2, 53, 56, 71, 79, 80, 82, 88, 102, 183, 233, 234, 331, 333, 351, 352, 353, 376, 416, 449, 451, 452, 453, 462, 469, 470, 471, 472, 473, 474, 475, 476, 488, 512, 514, 592, 689, 690, 691, 692, 693, 696, 720, 796, 1005, 1015, 1023, 1027, 1028, 1033, 1034], "spectral_clust": [2, 80, 99, 1041, 1043, 1045, 1046, 1047, 1048, 1050], "spectral_embed": [2, 390, 999, 1034, 1037, 1039, 1041, 1043, 1046, 1047, 1048, 1050], "spectralbiclust": [2, 405, 453, 1035, 1039, 1040, 1044], "spectralclust": [2, 79, 323, 408, 440, 1005, 1033, 1034, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "spectralcoclust": [2, 57, 59, 405, 451, 1035, 1040, 1044], "spectralembed": [2, 85, 232, 233, 234, 689, 690, 691, 693, 999, 1034, 1039, 1043, 1047, 1048, 1050], "spectrum": [105, 525, 545, 696, 949, 1026, 1041], "speech": [416, 1002], "speed": [80, 81, 90, 102, 123, 132, 140, 182, 187, 199, 202, 206, 249, 290, 321, 330, 351, 353, 365, 376, 379, 385, 388, 390, 404, 406, 408, 413, 415, 416, 419, 443, 444, 447, 448, 449, 450, 452, 457, 459, 460, 461, 462, 532, 533, 611, 628, 633, 634, 635, 640, 647, 648, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 682, 685, 693, 798, 799, 807, 829, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 880, 949, 991, 994, 999, 1001, 1003, 1016, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "speedi": 363, "speedup": [326, 363, 413, 415, 651, 655, 658, 1033, 1034, 1035, 1036, 1048], "speer": 1035, "spell": 416, "spend": 416, "spent": [290, 316, 377, 382, 829, 1048], "sperret6": 1051, "sphere": [134, 183, 231, 232, 235, 236, 237, 290, 352, 414, 520, 590, 689, 690, 691, 692, 693, 765, 934, 996, 1000, 1005, 1023], "sphere_data": 234, "spheric": [70, 90, 115, 150, 234, 257, 259, 260, 303, 372, 765, 798, 799, 998, 1001, 1005], "sphinx": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 364, 380, 390, 394, 401, 1033, 1040], "sphinxcontrib": [376, 394, 401], "sphinxext": [376, 394, 401], "sphx_glr_auto_examples_mlcomp_sparse_document_classif": 1033, "spidlen": [693, 999], "spie": [168, 373], "spielman": 1043, "spike": 187, "spikebh": 1047, "spikhalskii": 1038, "spiki": 43, "spin": 384, "spine": [46, 54, 70, 223, 310], "spirit": 413, "spite": 1004, "spline": [2, 183, 192, 193, 285, 295, 517, 518, 519, 673, 866, 880, 884, 1021, 1023, 1046], "spline_": 43, "splines_df": 43, "splinetransform": [2, 43, 213, 249, 322, 880, 1012, 1046, 1048, 1049], "split": [2, 43, 44, 45, 50, 52, 54, 55, 61, 63, 64, 67, 68, 102, 125, 134, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 159, 164, 185, 186, 189, 198, 208, 209, 212, 215, 220, 230, 240, 249, 256, 257, 263, 264, 265, 268, 270, 275, 277, 280, 284, 287, 293, 299, 305, 307, 311, 312, 317, 323, 325, 332, 340, 351, 353, 358, 371, 383, 389, 390, 394, 399, 406, 407, 408, 413, 415, 416, 417, 437, 442, 443, 472, 473, 479, 480, 498, 532, 538, 540, 543, 547, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 589, 590, 592, 595, 603, 648, 652, 654, 656, 662, 664, 666, 674, 676, 696, 705, 706, 718, 732, 738, 758, 796, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 845, 846, 862, 863, 886, 890, 891, 893, 894, 895, 896, 913, 914, 915, 916, 972, 991, 994, 998, 999, 1005, 1008, 1009, 1010, 1012, 1016, 1018, 1022, 1028, 1033, 1036, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "split0_test_precis": [801, 815], "split0_test_scor": [801, 815, 1039], "split0_train_scor": [801, 815, 1039], "split1_test_scor": [801, 815], "split1_train_scor": [801, 815], "split2_test_scor": 801, "split_cod": 413, "split_sign": [532, 538, 543], "splitter": [43, 246, 325, 326, 390, 399, 412, 437, 472, 565, 566, 568, 569, 595, 603, 648, 652, 654, 656, 660, 662, 664, 666, 674, 676, 801, 803, 804, 805, 806, 807, 815, 816, 817, 820, 821, 824, 825, 826, 827, 828, 829, 830, 832, 836, 839, 913, 914, 915, 916, 1018, 1022, 1039, 1040, 1041, 1042, 1049, 1050, 1051], "splot": [256, 261], "splt": 213, "sply88": 1047, "spmatrix": 1050, "spolski": 416, "sport": [57, 371], "spot": [86, 241, 408], "spottabl": 382, "spread": [43, 75, 234, 271, 310, 329, 330, 331, 334, 347, 363, 376, 408, 452, 462, 516, 882, 894, 902, 1002], "spring": [43, 52, 187], "springboard": 1021, "springer": [137, 138, 148, 175, 269, 406, 408, 412, 413, 415, 521, 536, 560, 561, 691, 695, 697, 706, 721, 727, 741, 742, 757, 798, 913, 914, 999, 1002, 1003, 1009, 1018], "sprint": [375, 376, 1033], "spuriou": [340, 384, 1012, 1046, 1047, 1048], "spy": 207, "sq": 770, "sqeuclidean": [73, 450, 457, 779, 780, 781], "sqft": 249, "sql": 370, "sqr": 75, "sqrt": [51, 111, 112, 113, 123, 129, 138, 159, 189, 193, 195, 235, 237, 251, 255, 256, 257, 260, 261, 270, 345, 347, 408, 415, 416, 418, 463, 469, 470, 471, 472, 473, 474, 475, 476, 539, 541, 548, 558, 559, 560, 561, 565, 566, 620, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 700, 732, 764, 765, 770, 885, 898, 913, 914, 915, 916, 994, 998, 999, 1002, 1004, 1014, 1047], "squar": [2, 43, 44, 52, 94, 103, 110, 111, 112, 114, 115, 121, 122, 130, 137, 147, 149, 150, 157, 168, 170, 175, 183, 185, 186, 192, 193, 195, 196, 198, 202, 203, 212, 214, 217, 222, 229, 230, 242, 243, 245, 258, 266, 285, 314, 321, 322, 324, 337, 351, 368, 373, 376, 382, 385, 390, 408, 410, 411, 413, 414, 415, 419, 420, 431, 440, 442, 443, 444, 446, 447, 449, 450, 454, 457, 459, 460, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 502, 532, 538, 540, 542, 544, 546, 547, 548, 550, 553, 555, 557, 559, 560, 561, 563, 566, 569, 571, 591, 592, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 612, 616, 623, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 683, 684, 686, 687, 688, 689, 691, 693, 695, 697, 710, 722, 723, 724, 725, 751, 752, 759, 760, 764, 770, 771, 786, 791, 792, 831, 838, 839, 847, 848, 851, 852, 853, 855, 856, 863, 866, 885, 905, 906, 908, 910, 911, 912, 914, 916, 947, 974, 987, 993, 995, 996, 1005, 1006, 1010, 1016, 1018, 1023, 1024, 1028, 1033, 1036, 1038, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050], "square_dist": 1045, "squared_epsilon_insensit": [668, 677, 679, 906, 998, 1039], "squared_error": [46, 52, 129, 146, 147, 322, 415, 559, 560, 561, 563, 566, 672, 677, 679, 694, 914, 916, 1016, 1018, 1046, 1049, 1050], "squared_hing": [219, 347, 667, 677, 905, 912, 998, 1017], "squared_loss": [388, 1046], "squareform": 189, "squash": [249, 380, 418, 532, 538, 543, 549], "squeez": [107, 176, 177, 249, 290, 310], "sr": 1026, "sr_color": 236, "sr_err": 236, "sr_lle": 236, "sr_point": 236, "sr_tsne": 236, "srajan": 1041, "sre": 1048, "srebro": 1016, "srep30750": 408, "sri": [672, 998, 1040, 1041], "sridharan": 1038, "sriharsha": [1041, 1042], "srikantan": 998, "srimukh": 1045, "srinath": [1047, 1048], "srinivasan": [1041, 1044], "sripada": 1045, "srivastava": [1036, 1048, 1051], "srivatsan": [1039, 1040, 1043], "srvanrel": 1039, "sr\u0161e\u0148": 1051, "ss": 412, "sse": 443, "sseg": 1038, "ssrn": [212, 230], "sss": 821, "ssvm": 388, "st": [81, 100, 270, 324, 1036, 1039, 1041], "st30": 334, "st50": 334, "st_pipelin": 333, "sta4273": 645, "stabil": [72, 138, 144, 186, 233, 275, 310, 347, 352, 390, 405, 446, 651, 655, 671, 843, 862, 863, 881, 893, 948, 992, 998, 1001, 1012, 1022, 1033, 1037, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048], "stabilis": 193, "stabl": [43, 64, 186, 207, 210, 214, 290, 320, 347, 352, 374, 376, 380, 385, 390, 394, 412, 416, 420, 471, 472, 478, 534, 542, 656, 673, 675, 688, 693, 725, 753, 948, 949, 998, 1004, 1005, 1012, 1022, 1029, 1033, 1034, 1039, 1044, 1046, 1050], "stack": [2, 14, 107, 133, 143, 157, 181, 183, 241, 295, 358, 375, 384, 388, 390, 414, 464, 466, 467, 497, 516, 563, 566, 568, 569, 613, 628, 629, 631, 654, 674, 702, 826, 828, 866, 870, 878, 879, 885, 975, 992, 1022, 1023, 1024, 1025, 1028, 1033, 1036, 1040, 1041, 1042, 1043, 1044], "stack_method": [415, 568], "stack_method_": [415, 568, 569], "stacking_regressor": 154, "stackingclassifi": [2, 319, 359, 390, 399, 415, 569, 992, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "stackingregressor": [2, 154, 319, 390, 399, 415, 568, 992, 1043, 1044, 1045, 1046, 1047, 1050], "stackingregressorinot": 154, "stackoverflow": [381, 384, 388], "stade": 1037, "stage": [0, 46, 63, 104, 134, 139, 144, 147, 264, 380, 390, 404, 408, 415, 448, 554, 555, 560, 561, 562, 563, 589, 590, 592, 603, 999, 1012, 1020, 1041, 1045], "staged_decision_funct": [554, 560, 562], "staged_predict": [134, 144, 147, 415, 554, 555, 560, 561, 562, 563, 1033, 1045], "staged_predict_proba": [145, 148, 554, 560, 562, 1033], "staged_scor": [554, 555], "stagewis": 134, "stagg": 1046, "stai": [43, 52, 63, 72, 129, 186, 352, 375, 376, 380, 390, 391, 1007, 1025, 1039], "stairstep": 277, "stalei": [1042, 1043], "stall": [375, 379], "stallei": 1045, "stan": [843, 1050], "stand": [273, 353, 380, 388, 413, 532, 538, 546, 547, 597, 610, 679, 706, 718, 737, 738, 758, 787, 789, 796, 1001, 1002, 1008], "standalon": [382, 659, 905], "standard": [2, 50, 51, 52, 58, 63, 68, 70, 88, 94, 102, 103, 105, 111, 112, 116, 121, 134, 137, 139, 140, 141, 142, 150, 154, 168, 170, 175, 177, 179, 186, 193, 201, 202, 210, 212, 221, 232, 233, 234, 244, 249, 260, 264, 265, 268, 269, 270, 271, 273, 310, 315, 338, 351, 363, 364, 368, 369, 370, 372, 373, 374, 376, 378, 379, 381, 382, 385, 388, 390, 394, 402, 404, 408, 410, 411, 412, 416, 418, 446, 464, 468, 472, 488, 497, 502, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 525, 526, 531, 533, 536, 542, 553, 591, 595, 612, 635, 645, 646, 673, 674, 675, 676, 677, 679, 688, 690, 694, 789, 807, 822, 824, 842, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 869, 874, 875, 878, 881, 882, 883, 885, 893, 894, 895, 896, 903, 905, 906, 931, 991, 994, 998, 999, 1002, 1004, 1005, 1006, 1008, 1016, 1017, 1022, 1026, 1028, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1051], "standard_coef_": 1044, "standard_intercept_": 1044, "standard_norm": [359, 688], "standard_scal": 251, "standard_t": 122, "standardscal": [2, 45, 49, 67, 79, 82, 88, 91, 95, 103, 105, 116, 130, 154, 168, 186, 193, 200, 202, 204, 212, 228, 230, 240, 241, 249, 250, 251, 253, 264, 267, 277, 284, 293, 298, 299, 305, 312, 315, 319, 320, 322, 323, 324, 326, 327, 340, 343, 359, 365, 376, 378, 381, 385, 389, 409, 412, 429, 466, 467, 568, 677, 679, 865, 866, 869, 882, 896, 905, 906, 907, 908, 910, 911, 992, 999, 1006, 1012, 1016, 1017, 1019, 1035, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "standardscalerifittedstandardscal": 253, "standardscalerstandardscal": [103, 154, 186, 240, 241, 250, 251, 253, 264, 277, 284, 320, 323], "standpoint": 83, "stanford": [168, 373, 650, 683, 684, 840, 843, 844, 898, 1000], "stanislav": [1048, 1049], "stanlei": [1047, 1048, 1049], "stap": 1041, "stapl": 1037, "star": [70, 118, 157, 376], "stareh": 1044, "start": [0, 43, 46, 49, 51, 52, 58, 63, 86, 91, 97, 100, 106, 116, 123, 139, 144, 146, 165, 168, 175, 177, 187, 191, 194, 195, 202, 212, 213, 214, 220, 230, 232, 236, 240, 244, 246, 258, 264, 270, 278, 290, 323, 325, 330, 351, 358, 359, 363, 364, 365, 376, 377, 378, 380, 381, 382, 388, 390, 394, 405, 408, 412, 413, 417, 418, 440, 442, 450, 454, 456, 539, 611, 618, 633, 646, 654, 660, 667, 668, 669, 677, 678, 679, 691, 695, 782, 783, 790, 798, 799, 801, 804, 805, 815, 847, 848, 849, 851, 853, 861, 955, 985, 991, 998, 1001, 1006, 1007, 1016, 1022, 1026, 1036, 1038, 1041, 1043, 1045, 1046, 1047, 1048, 1049], "start_": 47, "start_bodi": 47, "start_d": 47, "start_idx": [51, 235], "start_reut": 47, "start_tim": [46, 49, 57, 141, 144, 154, 170, 202, 233], "start_titl": 47, "start_top": 47, "startstart": 396, "startswith": [52, 102, 233, 303], "startup": 1026, "stat": [2, 45, 47, 49, 102, 111, 168, 170, 189, 267, 270, 278, 282, 295, 321, 329, 330, 373, 385, 389, 410, 474, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 683, 684, 805, 813, 815, 913, 914, 951, 991, 998, 1012, 1040, 1042, 1046], "stat_learn_tut_index": [159, 160, 161], "state": [37, 86, 90, 102, 104, 111, 149, 214, 243, 251, 256, 264, 276, 321, 359, 364, 365, 376, 378, 382, 384, 388, 390, 391, 407, 415, 416, 421, 440, 443, 447, 449, 454, 459, 475, 545, 590, 680, 804, 805, 813, 815, 817, 845, 846, 852, 900, 901, 934, 991, 992, 998, 1004, 1007, 1014, 1022, 1026, 1035, 1037, 1039, 1041, 1043, 1046, 1049], "state_to_print": 377, "stateless": [102, 352, 365, 390, 416, 583, 584, 590, 639, 868, 869, 877, 924, 985, 1012, 1049], "statement": [186, 378, 381, 384, 388, 390, 413], "static": [376, 378, 382, 384, 647, 648, 653, 654, 661, 662, 663, 664], "station": 175, "stationari": [174, 418, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "statist": [2, 47, 52, 112, 134, 137, 138, 148, 163, 167, 168, 183, 185, 186, 187, 188, 198, 200, 216, 262, 264, 267, 269, 272, 279, 287, 289, 310, 316, 321, 359, 369, 371, 373, 382, 390, 406, 407, 408, 409, 410, 412, 413, 415, 417, 433, 469, 474, 494, 495, 517, 518, 519, 521, 523, 542, 554, 560, 561, 563, 605, 606, 607, 610, 628, 631, 635, 636, 645, 650, 657, 691, 695, 697, 711, 717, 722, 724, 725, 732, 744, 789, 801, 817, 835, 862, 863, 881, 882, 883, 885, 890, 893, 894, 896, 910, 913, 914, 976, 991, 992, 996, 998, 999, 1001, 1002, 1003, 1004, 1009, 1010, 1012, 1016, 1017, 1018, 1019, 1020, 1023, 1038, 1041, 1044, 1045, 1047, 1048, 1051], "statistician": [390, 885], "statisticmonthhourtempfeel_temphumiditywindspeedcountstrf64f64f64f64f64f64f64": 52, "statistics_": 631, "statlearnspars": [722, 724, 725], "statlib": 371, "statnikov": 1002, "statsmodel": [998, 1021], "statu": [52, 132, 326, 370, 394, 497, 845, 846, 1051], "statweb": [650, 683, 684], "staub": 1039, "staubda": 1036, "std": [43, 50, 51, 52, 72, 80, 83, 87, 94, 99, 110, 112, 113, 121, 122, 123, 141, 142, 143, 149, 154, 176, 179, 181, 182, 186, 194, 201, 221, 243, 268, 269, 270, 272, 273, 275, 278, 280, 284, 285, 316, 332, 343, 352, 359, 390, 408, 412, 415, 516, 607, 610, 830, 885, 896, 1012, 1041, 1045], "std_": [274, 1038], "std_auc": 280, "std_display_styl": [245, 272, 807, 824], "std_error": 159, "std_fit_tim": [140, 292, 801, 815], "std_i": 186, "std_precis": 268, "std_predict": 177, "std_predictions_gpr": 170, "std_recal": 268, "std_scaler": 327, "std_score": [352, 1046], "std_score_tim": [140, 271, 801, 815], "std_test_precis": 268, "std_test_recal": 268, "std_test_scor": [103, 105, 140, 159, 167, 269, 270, 271, 278, 292, 472, 595, 801, 815, 1039, 1046], "std_time": 1039, "std_tpr": 280, "std_train_scor": [801, 815, 1039], "std_y_pr": 175, "stderr": [51, 834], "stdin": 384, "stdout": [47, 120, 220, 834, 854, 862, 863], "stds_california": 182, "stds_diabet": 182, "steadi": [900, 901], "steelblu": [121, 122, 156], "steep": [2, 171, 187, 279, 280, 408, 412, 418, 450, 456], "stef": [628, 992], "stefan": [1036, 1037, 1041, 1043], "stefani": [0, 1046, 1048, 1049, 1050, 1051], "stefanini": 1047, "stefano": 1035, "steffen": 1051, "stehl": [1047, 1048], "stein": 1039, "steinbach": [408, 1048, 1050], "steinfurt": [1043, 1045], "steingold": [1040, 1041], "steinlei": [408, 706], "steinley2004": 706, "stella": [408, 452, 462], "stellalin7": 1048, "stem": [137, 144, 188, 211, 261, 283, 412, 416, 994, 1004], "step": [52, 58, 63, 69, 77, 87, 88, 91, 100, 102, 103, 104, 105, 106, 112, 116, 123, 127, 134, 139, 142, 143, 144, 154, 165, 166, 167, 172, 175, 186, 188, 212, 220, 230, 240, 241, 244, 250, 253, 261, 264, 268, 271, 277, 279, 284, 290, 292, 293, 298, 305, 308, 312, 315, 316, 320, 323, 334, 336, 340, 352, 353, 355, 359, 363, 371, 374, 375, 376, 378, 379, 381, 384, 388, 390, 402, 405, 406, 408, 410, 411, 413, 415, 416, 417, 442, 447, 449, 537, 538, 539, 540, 547, 564, 589, 590, 592, 594, 595, 598, 607, 628, 645, 649, 667, 668, 670, 677, 679, 680, 681, 695, 701, 798, 799, 801, 804, 805, 815, 836, 837, 838, 839, 861, 862, 863, 865, 866, 868, 905, 906, 907, 908, 910, 911, 948, 949, 972, 976, 992, 998, 1001, 1006, 1007, 1012, 1016, 1018, 1019, 1021, 1025, 1033, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1049, 1051], "stephan": [709, 1036, 1042, 1043, 1045], "stephani": 1044, "stephen": [1026, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046], "stepwis": [149, 636, 655, 656, 657, 683, 684, 998], "stern": [789, 1002], "steve": [1035, 1037, 1041, 1046, 1048], "steven": [1035, 1036, 1038, 1040, 1041, 1046, 1048, 1049, 1051], "steward": 1040, "stewart": [1038, 1043, 1046, 1048, 1051], "stick": [48, 798, 1001], "stijn": 1040, "stikhin": 1043, "still": [43, 52, 64, 68, 79, 86, 88, 90, 95, 113, 124, 126, 146, 149, 154, 170, 176, 185, 186, 188, 189, 193, 198, 201, 212, 214, 230, 244, 273, 279, 283, 310, 321, 322, 325, 351, 352, 359, 365, 370, 375, 376, 380, 381, 382, 384, 390, 408, 412, 415, 416, 419, 440, 444, 454, 474, 497, 628, 633, 636, 638, 659, 660, 718, 757, 779, 782, 793, 794, 803, 804, 805, 818, 821, 883, 885, 905, 929, 954, 991, 992, 996, 998, 1001, 1002, 1005, 1008, 1010, 1017, 1018, 1020, 1022, 1025, 1026, 1033, 1035, 1038, 1039, 1041, 1042, 1043, 1046, 1047, 1048, 1049, 1051], "stine": [1041, 1042], "stochast": [2, 46, 91, 144, 145, 148, 160, 183, 191, 192, 200, 234, 236, 239, 244, 296, 298, 299, 304, 307, 322, 339, 408, 413, 415, 462, 488, 497, 503, 504, 505, 515, 523, 537, 545, 560, 561, 605, 628, 632, 640, 659, 660, 669, 673, 675, 677, 678, 679, 680, 688, 689, 690, 691, 693, 831, 854, 861, 862, 863, 866, 875, 909, 948, 949, 975, 991, 1005, 1006, 1008, 1023, 1024, 1027, 1028, 1033, 1034, 1037, 1038, 1040, 1042, 1044], "stochastic_gradi": [1035, 1036, 1042], "stock": [42, 80, 85, 183, 232, 233, 408, 410, 454, 471, 472, 690, 999, 1023], "stogbauer": [608, 609], "stojanov": [1047, 1048], "stolbunov": 1038, "stone": [376, 913, 914, 1018], "stop": [43, 51, 55, 79, 95, 133, 134, 140, 175, 177, 183, 187, 192, 200, 214, 314, 320, 376, 378, 384, 385, 390, 408, 413, 415, 417, 440, 441, 443, 445, 447, 449, 452, 454, 462, 463, 471, 472, 478, 482, 483, 484, 490, 497, 509, 510, 533, 537, 538, 539, 540, 541, 544, 546, 547, 548, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 589, 590, 592, 603, 618, 628, 645, 646, 647, 649, 650, 653, 657, 659, 660, 667, 668, 669, 670, 672, 677, 678, 679, 681, 692, 693, 696, 715, 751, 798, 799, 831, 862, 863, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 955, 975, 991, 998, 1006, 1007, 1017, 1018, 1022, 1023, 1024, 1026, 1028, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050], "stop_n_inli": [672, 998], "stop_prob": 672, "stop_scor": [672, 998], "stop_word": [54, 57, 351, 352, 416, 589, 590, 592], "stop_words_": 1051, "stopiter": 1045, "stopword": 489, "storag": [0, 353, 390, 659, 660, 667, 668, 669, 677, 678, 679, 905, 1005, 1017, 1036, 1041], "storch": 1042, "store": [2, 68, 86, 87, 102, 104, 112, 165, 178, 191, 199, 202, 216, 233, 240, 250, 260, 264, 275, 279, 329, 353, 358, 363, 370, 371, 376, 378, 383, 384, 385, 388, 390, 402, 404, 409, 411, 413, 415, 416, 418, 419, 438, 440, 444, 446, 450, 457, 464, 467, 469, 470, 473, 474, 475, 476, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 504, 509, 535, 536, 542, 550, 551, 556, 557, 558, 559, 564, 565, 566, 567, 570, 571, 586, 590, 611, 612, 628, 632, 633, 636, 650, 651, 655, 661, 662, 663, 664, 667, 668, 674, 676, 677, 678, 679, 689, 690, 691, 693, 698, 699, 701, 702, 703, 782, 798, 799, 801, 807, 815, 823, 824, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 860, 876, 883, 885, 886, 900, 901, 902, 931, 932, 958, 959, 972, 975, 987, 992, 994, 998, 1003, 1005, 1014, 1017, 1018, 1021, 1030, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "store_cent": [446, 1050], "store_covari": [70, 550, 551, 1038, 1040], "store_cv_result": [264, 674, 676, 823, 1051], "store_cv_valu": [674, 676, 1041, 1044, 1051], "store_precis": [69, 110, 469, 470, 473, 474, 475, 476], "stori": [185, 270, 287, 371, 1001], "stork": 996, "stott": 1041, "stoyanov": [1041, 1042], "str": [47, 49, 52, 91, 93, 128, 130, 142, 166, 230, 249, 270, 282, 290, 300, 338, 351, 370, 371, 385, 416, 419, 420, 424, 429, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 457, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 577, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 618, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 693, 697, 698, 699, 700, 701, 703, 708, 710, 712, 714, 728, 730, 731, 733, 734, 739, 743, 772, 775, 779, 780, 781, 782, 783, 784, 785, 788, 790, 793, 794, 800, 801, 802, 803, 804, 805, 807, 808, 810, 812, 813, 815, 819, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 924, 926, 927, 930, 931, 932, 935, 939, 941, 945, 957, 958, 959, 961, 964, 985, 986, 989, 1048], "str_": [51, 279, 494, 501, 505, 511, 873], "strai": 1007, "straight": [125, 203, 210, 267, 344, 363], "straightforward": [311, 375, 407, 413, 1026], "straka": 1045, "strateg": 391, "strategi": [2, 30, 43, 52, 85, 87, 91, 94, 103, 143, 148, 149, 154, 160, 165, 167, 181, 182, 183, 188, 198, 202, 212, 220, 230, 241, 249, 251, 262, 264, 269, 271, 273, 274, 275, 277, 278, 279, 280, 282, 284, 289, 304, 307, 309, 311, 312, 316, 317, 319, 320, 323, 353, 362, 378, 382, 389, 390, 402, 407, 412, 415, 416, 417, 420, 437, 438, 439, 445, 447, 452, 462, 472, 503, 505, 513, 515, 523, 534, 539, 552, 553, 562, 563, 565, 566, 568, 569, 589, 590, 592, 593, 595, 603, 628, 629, 631, 635, 646, 648, 652, 654, 656, 662, 664, 666, 674, 676, 692, 696, 705, 712, 714, 733, 756, 758, 796, 801, 803, 804, 805, 807, 815, 818, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 862, 863, 870, 875, 886, 900, 905, 907, 910, 913, 914, 915, 916, 972, 991, 992, 1001, 1003, 1004, 1005, 1006, 1008, 1010, 1012, 1016, 1017, 1018, 1023, 1028, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1051], "stratif": [802, 803, 809, 810, 817, 819, 820, 821, 972, 1042], "stratifi": [2, 44, 125, 141, 150, 164, 188, 227, 240, 249, 253, 264, 265, 270, 273, 279, 293, 298, 299, 319, 378, 390, 407, 552, 560, 568, 569, 603, 660, 667, 669, 677, 800, 801, 804, 805, 807, 815, 816, 817, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 854, 862, 972, 1002, 1005, 1038, 1039, 1040, 1042, 1043, 1046], "stratifiedgroupkfold": [2, 265, 1046], "stratifiedkfold": [2, 167, 257, 265, 276, 280, 332, 412, 437, 568, 569, 595, 603, 660, 674, 801, 802, 804, 805, 806, 807, 809, 811, 815, 819, 821, 824, 825, 826, 827, 828, 829, 830, 832, 886, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1046], "stratifiedshufflesplit": [2, 265, 340, 412, 1033, 1034, 1039, 1040, 1046], "stream": [47, 408, 413, 416, 462, 590, 874, 875, 885, 994, 1041, 1044], "stream_reuters_docu": 47, "streamhandl": 1044, "streamlin": 998, "street": [154, 168, 373], "strehl": 408, "strength": [51, 154, 177, 201, 212, 216, 271, 283, 319, 363, 411, 415, 446, 568, 569, 644, 649, 650, 653, 659, 660, 670, 673, 674, 675, 676, 677, 679, 681, 688, 784, 862, 863, 905, 906, 910, 911, 991, 998, 1005, 1008, 1016, 1017], "stress": [691, 695, 999, 1048], "stress_": 691, "stretch": [236, 259], "stretched_gaussian": 259, "strickland": 1039, "strict": [359, 374, 390, 404, 413, 504, 536, 589, 590, 592, 998, 1033, 1042, 1045, 1051], "stricter": 181, "strictli": [64, 212, 230, 246, 310, 325, 352, 381, 390, 406, 411, 413, 415, 416, 509, 510, 536, 542, 545, 562, 563, 589, 592, 603, 643, 671, 672, 674, 676, 696, 701, 740, 767, 801, 804, 805, 811, 815, 828, 854, 881, 893, 897, 898, 900, 901, 905, 906, 910, 911, 947, 991, 993, 998, 1002, 1012, 1016, 1034, 1044, 1049], "striebel": [1039, 1040], "strife": 999, "strike": [144, 187, 216], "string": [2, 47, 103, 142, 178, 230, 241, 264, 274, 322, 327, 353, 363, 370, 371, 376, 377, 378, 382, 390, 409, 412, 415, 416, 417, 419, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 489, 490, 497, 506, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 618, 621, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 700, 710, 712, 720, 733, 763, 766, 772, 775, 779, 780, 781, 782, 793, 794, 798, 799, 801, 804, 805, 807, 815, 823, 824, 828, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 922, 929, 931, 932, 940, 941, 942, 965, 985, 986, 991, 992, 1002, 1015, 1017, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "strip": [54, 230, 352, 363, 370, 371, 497], "strip_acc": [589, 590, 592], "strip_accents_unicod": 1043, "stripe": 313, "stripplot": 186, "strive": [375, 391, 1026], "strong": [32, 43, 52, 87, 170, 183, 185, 186, 192, 206, 210, 216, 217, 218, 245, 289, 317, 347, 406, 413, 415, 525, 650, 673, 995, 996, 998, 999, 1001, 1009, 1017, 1023], "stronger": [271, 644, 653, 659, 660, 673, 674, 675, 676, 677, 679, 688], "strongest": [55, 206], "strongli": [62, 64, 113, 116, 123, 143, 147, 186, 196, 227, 246, 276, 351, 376, 393, 394, 406, 415, 659, 737, 796, 998, 999, 1028, 1042, 1049], "stroudsburg": [902, 1015], "strubel": 1046, "struct": [374, 390, 1036], "structur": [0, 2, 42, 48, 52, 53, 54, 55, 58, 59, 71, 75, 76, 78, 79, 80, 85, 86, 87, 88, 89, 95, 113, 130, 150, 169, 183, 232, 233, 236, 241, 246, 261, 265, 276, 295, 315, 320, 323, 328, 340, 344, 354, 355, 356, 363, 371, 373, 376, 378, 381, 388, 390, 391, 394, 405, 408, 410, 411, 412, 413, 415, 416, 417, 418, 441, 442, 445, 446, 450, 451, 452, 453, 454, 457, 462, 463, 471, 472, 497, 504, 505, 509, 512, 514, 515, 522, 531, 536, 542, 545, 564, 611, 612, 613, 617, 618, 619, 690, 697, 710, 714, 831, 853, 858, 885, 897, 898, 901, 913, 914, 915, 916, 919, 948, 949, 972, 975, 999, 1001, 1002, 1005, 1007, 1008, 1012, 1015, 1018, 1021, 1022, 1023, 1033, 1034, 1036, 1037, 1039, 1043], "struggl": [375, 391, 408], "stuck": [94, 693, 999], "student": [0, 122, 270, 999, 1022, 1026], "studi": [43, 64, 93, 146, 212, 230, 273, 276, 277, 284, 351, 371, 373, 412, 417, 697, 709, 759, 760, 830, 1000, 1002, 1016], "studio": [374, 1026], "study_135": 370, "study_14": 370, "study_34": 370, "study_98": 370, "study_99": 370, "stuff": 1026, "stump": [136, 415, 560, 1044], "stupp": [1039, 1040], "stupperich": 1045, "sturla": 1035, "style": [112, 146, 202, 220, 230, 274, 376, 383, 408, 416, 443, 447, 459, 701, 807, 824, 931, 932, 945, 1033, 1036, 1047], "st\u00e9fan": 377, "st\u00e9phan": 1043, "st\u00e9phane": [1042, 1043, 1047, 1048], "su": [722, 724, 725], "sub": [47, 72, 86, 88, 90, 93, 102, 129, 246, 248, 255, 321, 329, 330, 337, 340, 348, 371, 376, 378, 382, 390, 409, 415, 416, 437, 443, 444, 447, 449, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 589, 591, 592, 598, 611, 612, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 864, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 922, 959, 998, 1002, 1016, 1043, 1047, 1049, 1050], "sub_sampl": 537, "subclass": [132, 378, 418, 575, 967, 1038, 1041, 1046, 1050], "subclust": [408, 442], "subcluster_centers_": [77, 442], "subcluster_labels_": 442, "subcompon": [120, 413], "subdirectori": 376, "subdivid": [371, 418], "subestim": 378, "subestimator__c": 378, "subestimator__class_weight": 378, "subestimator__du": 378, "subestimator__fit_intercept": 378, "subestimator__intercept_sc": 378, "subestimator__l1_ratio": 378, "subestimator__max_it": 378, "subestimator__multi_class": 378, "subestimator__n_job": 378, "subestimator__penalti": 378, "subestimator__random_st": 378, "subestimator__solv": 378, "subestimator__tol": 378, "subestimator__verbos": 378, "subestimator__warm_start": 378, "subexpress": 52, "subfold": [2, 374, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 504, 1046], "subgraph": 405, "subhash": 1047, "subhodeep": [1033, 1034, 1035], "subi": [1042, 1043, 1048], "subject": [16, 102, 151, 261, 273, 351, 371, 376, 378, 380, 388, 390, 391, 406, 410, 412, 413, 496, 659, 660, 686, 823, 868, 924, 971, 993, 998, 1017, 1020, 1042, 1043, 1046, 1048], "subject_body_extractor": 102, "subject_body_transform": 102, "subjectbodi": 102, "subjectbodyextractor": 102, "sublinear": [413, 591, 592], "sublinear_tf": [351, 413, 416, 591, 592], "submatric": 405, "submatrix": [405, 423, 451, 453], "submiss": 376, "submit": [373, 374, 375, 378, 379, 380, 381, 384, 390, 391, 394], "submitt": 375, "submodel": 412, "submodul": [380, 994, 1000, 1033], "subobject": [422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 804, 805, 815, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916], "suboptim": [412, 701, 703, 783, 790, 1005, 1041, 1049], "subpackag": [376, 380, 1037, 1042], "subplot": [43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 66, 67, 68, 70, 74, 78, 79, 83, 84, 86, 87, 88, 89, 90, 93, 95, 98, 99, 105, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 125, 129, 130, 134, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 151, 152, 154, 155, 156, 163, 172, 174, 179, 181, 182, 186, 187, 189, 191, 194, 197, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 220, 225, 226, 228, 230, 232, 233, 236, 237, 239, 240, 242, 244, 245, 247, 248, 249, 250, 255, 256, 257, 258, 260, 261, 264, 265, 266, 267, 270, 272, 273, 275, 276, 277, 279, 280, 281, 283, 284, 285, 289, 290, 292, 293, 294, 295, 298, 299, 301, 302, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 319, 323, 324, 332, 334, 337, 338, 339, 340, 344, 346, 347, 348, 349, 351, 352, 353, 355, 356, 372, 383], "subplot_kw": [232, 294], "subplot_spec": 383, "subplot_titl": 140, "subplots_adjust": [45, 46, 53, 54, 74, 77, 79, 83, 84, 87, 95, 97, 111, 113, 118, 122, 123, 129, 136, 137, 154, 186, 211, 212, 227, 230, 239, 247, 255, 257, 258, 261, 265, 281, 295, 303, 305, 308, 312, 321, 330, 337, 340], "subpopul": [229, 680, 998], "subproblem": 1038, "subrahmanyam": [1033, 1036], "subramaniam": [1048, 1049, 1050], "subramaniyan": 1045, "subramanyam": 1040, "subrat": 1045, "subrat93": 1045, "subsampl": [129, 145, 148, 187, 229, 266, 317, 321, 458, 560, 561, 562, 563, 564, 633, 680, 702, 804, 805, 831, 870, 882, 894, 927, 937, 994, 998, 1022, 1033, 1043, 1047, 1049, 1050, 1051], "subscrib": 1031, "subscript": [364, 1046], "subsect": [25, 364, 376], "subsequ": [46, 68, 91, 107, 123, 134, 165, 200, 214, 272, 275, 290, 292, 340, 359, 376, 378, 380, 382, 390, 404, 408, 409, 415, 418, 437, 497, 509, 554, 555, 560, 562, 563, 667, 669, 677, 804, 805, 833, 834, 837, 840, 841, 842, 843, 844, 862, 880, 884, 992, 1001, 1003, 1042, 1043, 1047, 1049, 1051], "subset": [2, 46, 57, 58, 63, 64, 68, 102, 103, 111, 112, 141, 142, 143, 144, 159, 165, 168, 187, 189, 202, 213, 227, 228, 229, 230, 242, 244, 248, 249, 264, 268, 271, 273, 279, 280, 282, 287, 315, 316, 321, 329, 333, 351, 352, 353, 359, 371, 376, 384, 388, 390, 405, 406, 408, 409, 412, 415, 416, 418, 425, 437, 449, 464, 466, 467, 469, 488, 489, 493, 494, 498, 509, 550, 551, 552, 554, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 570, 603, 611, 630, 640, 641, 642, 643, 652, 656, 659, 667, 668, 669, 672, 675, 676, 677, 678, 679, 680, 698, 704, 705, 712, 714, 717, 719, 732, 735, 756, 758, 794, 797, 800, 803, 823, 829, 831, 833, 834, 835, 836, 840, 841, 842, 843, 844, 847, 852, 855, 862, 871, 900, 901, 905, 907, 910, 913, 915, 927, 970, 991, 998, 1002, 1003, 1013, 1015, 1017, 1018, 1036, 1041, 1042, 1044, 1046, 1051], "subset_featur": 103, "subset_label": 230, "subsidi": 186, "subspac": [127, 411, 415, 452, 516, 556, 557, 692, 696, 949, 996, 1005, 1008, 1014, 1026], "substanti": [159, 292, 296, 297, 311, 376, 851, 1008, 1037, 1040], "substitut": [399, 985, 1022, 1039], "subtl": [349, 359, 1001, 1022], "subtleti": 1028, "subtract": [175, 186, 249, 411, 413, 443, 447, 459, 535, 645, 646, 1040, 1050], "subtre": [558, 559, 560, 561, 565, 566, 913, 914, 915, 916, 1018], "subwindow": 1018, "succe": [127, 149, 198, 284], "succeed": 376, "success": [2, 83, 163, 183, 262, 274, 277, 278, 346, 359, 403, 408, 412, 413, 415, 516, 565, 580, 801, 804, 805, 822, 910, 1005, 1023, 1026, 1028, 1045], "successfulli": [43, 53, 314, 375, 380, 402, 408, 416, 1016], "successor": [450, 456, 1018, 1021], "suchak": 1046, "sudo": [374, 394], "suen": 1006, "suffer": [116, 188, 290, 310, 352, 363, 408, 415, 545, 764, 997, 998, 1002, 1005, 1042], "suffic": [90, 91, 378], "suffici": [2, 64, 88, 154, 220, 285, 340, 363, 390, 408, 417, 533, 658, 683, 684, 817, 820, 821, 1003, 1005, 1022, 1042, 1048, 1049], "suffix": [394, 828, 1002, 1043], "suganthan": 373, "sugar": [168, 373], "suggest": [111, 123, 137, 141, 186, 189, 270, 340, 363, 375, 376, 383, 390, 412, 413, 415, 469, 474, 566, 646, 830, 996, 998, 999, 1007, 1010, 1017, 1037, 1044, 1047, 1050], "suh": 1041, "suha": 1051, "suit": [58, 120, 152, 186, 212, 213, 239, 260, 322, 323, 325, 351, 364, 376, 378, 381, 382, 384, 394, 396, 402, 411, 413, 415, 450, 452, 504, 678, 842, 886, 943, 991, 994, 999, 1002, 1004, 1005, 1016, 1021, 1022, 1026, 1040, 1047], "suitabl": [138, 146, 198, 199, 216, 306, 353, 370, 371, 382, 385, 402, 408, 413, 416, 452, 462, 468, 487, 506, 509, 628, 636, 840, 841, 844, 879, 880, 903, 966, 970, 996, 998, 1001, 1012, 1014, 1016, 1021, 1047, 1048], "sullivan": [1036, 1037, 1038], "sultan": 1047, "sum": [2, 30, 47, 55, 57, 63, 94, 112, 118, 123, 129, 145, 146, 164, 168, 178, 186, 195, 212, 216, 227, 230, 233, 235, 249, 264, 279, 290, 297, 300, 323, 327, 333, 344, 345, 347, 351, 352, 353, 358, 373, 382, 390, 405, 406, 408, 410, 411, 413, 414, 415, 416, 418, 431, 442, 443, 447, 449, 459, 464, 465, 482, 483, 484, 516, 521, 524, 532, 535, 537, 538, 542, 545, 546, 547, 550, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 570, 571, 591, 592, 612, 614, 624, 626, 636, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 677, 678, 679, 680, 682, 685, 691, 695, 697, 700, 710, 711, 720, 727, 742, 757, 759, 760, 764, 789, 833, 834, 838, 839, 848, 852, 856, 863, 864, 884, 885, 905, 906, 908, 911, 913, 914, 915, 916, 951, 976, 982, 987, 998, 1002, 1003, 1004, 1005, 1017, 1018, 1036, 1037, 1039, 1041, 1042, 1044, 1049, 1050], "sum_": [270, 279, 347, 405, 406, 408, 413, 414, 415, 539, 541, 548, 697, 756, 996, 998, 999, 1002, 1004, 1006, 1007, 1009, 1010, 1012, 1016, 1017, 1018], "sum_gradi": 415, "sum_h": 1007, "sum_hessian": 415, "sum_i": [322, 415, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 993, 994, 998, 1000, 1002, 1007], "sum_j": [647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 998, 1002, 1007], "sum_k": [415, 550, 1018], "sum_m": 415, "sum_n": [277, 708, 1002], "sum_n_compon": [464, 864], "sum_over_featur": [1033, 1048], "sum_weight": 982, "sumit": 1047, "summar": [212, 261, 277, 279, 353, 376, 378, 393, 415, 522, 659, 695, 707, 708, 998, 999, 1002, 1008, 1028], "summari": [52, 168, 323, 358, 359, 373, 388, 562, 563, 693, 714, 789, 918, 1000, 1003, 1021], "summaris": [241, 320], "summat": [1004, 1006], "summer": [0, 43, 52, 175, 1033], "sun": [43, 149, 187, 1041, 1046, 1047], "sundai": 43, "sundaramahalingam": 1050, "sung": 1044, "sunglok": 998, "sunita": 784, "sunitha": 1045, "sunmi": 1044, "super": [57, 62, 64, 378, 416, 1041], "superflu": 413, "superimpos": 413, "superior": 415, "superposit": 198, "supersed": [375, 1038], "superset": [412, 822, 1002], "supervis": [2, 27, 32, 34, 38, 57, 62, 64, 67, 72, 82, 87, 91, 115, 116, 128, 139, 149, 152, 161, 172, 233, 244, 247, 257, 270, 299, 312, 321, 332, 336, 337, 340, 344, 352, 353, 363, 371, 378, 389, 390, 406, 408, 411, 412, 413, 415, 416, 418, 437, 439, 464, 488, 504, 505, 554, 589, 591, 594, 595, 635, 677, 730, 802, 803, 806, 808, 809, 810, 811, 816, 817, 818, 819, 820, 821, 825, 826, 827, 828, 830, 831, 854, 864, 865, 869, 879, 886, 900, 901, 902, 910, 996, 999, 1002, 1004, 1005, 1008, 1012, 1013, 1017, 1018, 1019, 1021, 1022, 1023, 1025, 1028, 1033, 1039, 1045], "supervised_learning_tut": [160, 161], "supp": 384, "suppli": [149, 388, 408, 647, 931, 932, 1005, 1026, 1037, 1039, 1041, 1046], "support": [2, 39, 43, 45, 46, 47, 48, 49, 61, 66, 68, 80, 102, 103, 104, 133, 138, 153, 154, 164, 165, 175, 187, 213, 222, 223, 224, 230, 244, 245, 246, 252, 263, 268, 275, 277, 287, 290, 308, 310, 314, 323, 327, 329, 330, 333, 334, 336, 337, 340, 341, 342, 343, 344, 345, 347, 363, 364, 365, 370, 374, 376, 378, 380, 381, 382, 383, 385, 386, 389, 390, 391, 402, 408, 412, 413, 416, 417, 418, 437, 440, 450, 452, 453, 464, 466, 467, 469, 474, 487, 497, 513, 539, 541, 542, 545, 548, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 614, 615, 616, 618, 620, 621, 623, 624, 626, 628, 632, 633, 634, 644, 646, 658, 659, 660, 671, 672, 673, 675, 676, 677, 678, 679, 688, 691, 695, 700, 708, 714, 730, 731, 739, 744, 779, 780, 781, 784, 785, 788, 789, 801, 804, 805, 807, 815, 823, 828, 829, 837, 838, 843, 845, 846, 849, 851, 857, 865, 866, 870, 876, 878, 879, 881, 885, 893, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 927, 937, 943, 944, 989, 991, 992, 994, 995, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1012, 1013, 1016, 1021, 1022, 1023, 1024, 1026, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "support_": [245, 346, 469, 474, 594, 595, 603, 907, 908, 909, 910, 911, 1017], "support_fract": [48, 469, 474], "support_reweight": [469, 474], "support_vector": [338, 344], "support_vector_indic": 338, "support_vectors_": [46, 49, 341, 344, 345, 907, 908, 909, 910, 911, 1017], "suppos": [246, 273, 329, 363, 364, 376, 378, 380, 382, 410, 415, 416, 417, 558, 562, 565, 659, 660, 667, 669, 675, 676, 677, 851, 905, 907, 910, 913, 915, 937, 1006, 1042, 1044, 1050], "suppress": [186, 363, 384, 693, 1005, 1040], "suptitl": [43, 44, 52, 54, 68, 69, 70, 74, 75, 83, 86, 90, 93, 100, 107, 120, 123, 130, 134, 142, 143, 151, 154, 179, 186, 187, 189, 207, 209, 211, 227, 228, 232, 233, 234, 248, 258, 264, 266, 283, 284, 308, 310, 312, 319, 321, 329, 330, 334, 346, 347, 356], "surac": 1043, "sure": [2, 63, 89, 206, 218, 246, 247, 264, 357, 359, 363, 364, 370, 374, 375, 376, 377, 378, 380, 381, 384, 388, 394, 406, 409, 416, 494, 524, 650, 931, 932, 943, 954, 987, 992, 999, 1016, 1021, 1022, 1040, 1041, 1043, 1048], "suresh": 1047, "surf": 187, "surfac": [67, 124, 126, 133, 134, 135, 136, 138, 155, 183, 197, 205, 221, 276, 293, 336, 337, 354, 355, 357, 358, 415, 505, 554, 558, 565, 632, 765, 913, 919, 996, 1001, 1016, 1017, 1018, 1023], "surface_": 632, "surgan12": 1042, "surpass": [134, 344, 862, 863], "surplu": 412, "surpris": [86, 187, 374, 998, 1021, 1035], "surprisingli": [230, 371, 416], "surrend": 57, "surrog": 1026, "surround": [247, 376, 851, 1008], "survei": [186, 411], "surviv": [103, 188, 991, 1021], "surya": [1046, 1047], "suscept": 402, "susik": 1037, "suspect": 43, "suspici": 371, "sustain": 0, "sutherland": [1035, 1037, 1038, 1040, 1041, 1042, 1043], "sutiono": 1044, "suzuki": [1044, 1045], "sv": 1017, "sv_ind": 245, "sv_ratio": 245, "svc": [2, 45, 62, 64, 66, 67, 68, 102, 106, 144, 155, 161, 171, 183, 191, 204, 244, 247, 251, 263, 268, 270, 272, 275, 276, 277, 280, 281, 312, 314, 315, 319, 321, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 348, 349, 351, 363, 378, 382, 390, 406, 409, 412, 415, 434, 435, 436, 437, 468, 516, 556, 698, 699, 701, 703, 801, 818, 832, 834, 865, 902, 903, 905, 907, 908, 911, 989, 991, 997, 1000, 1002, 1003, 1012, 1023, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1051], "svc__c": [312, 865], "svc_disp": [252, 319, 1030], "svc_isoton": 62, "svc_sigmoid": 62, "svcifittedsvc": 252, "svcsvc": [251, 268, 270, 321], "svd": [2, 70, 127, 152, 233, 352, 385, 404, 411, 420, 451, 453, 482, 483, 485, 522, 533, 534, 535, 536, 540, 541, 542, 545, 547, 550, 551, 665, 673, 674, 675, 686, 687, 688, 864, 949, 996, 1035, 1039, 1040, 1046, 1048, 1051], "svd__n_compon": 864, "svd_lapack_driv": 949, "svd_method": [57, 451, 453, 533, 1036], "svd_solver": [45, 102, 120, 127, 326, 327, 404, 413, 536, 542, 1039, 1051], "sven": [1047, 1048], "svg": [0, 396], "svm": [2, 42, 46, 48, 49, 50, 54, 62, 64, 66, 67, 68, 102, 104, 106, 120, 132, 142, 152, 155, 158, 162, 167, 168, 172, 174, 178, 183, 192, 195, 197, 205, 206, 222, 223, 224, 225, 239, 245, 247, 248, 251, 252, 263, 267, 268, 269, 270, 272, 273, 275, 276, 277, 278, 280, 281, 285, 296, 301, 302, 305, 307, 312, 313, 319, 321, 328, 332, 333, 335, 338, 346, 347, 351, 363, 371, 378, 382, 390, 409, 412, 413, 415, 417, 434, 435, 436, 437, 495, 505, 513, 516, 542, 556, 557, 564, 568, 569, 578, 594, 595, 600, 601, 606, 632, 640, 644, 669, 677, 678, 679, 690, 698, 699, 701, 703, 714, 736, 743, 762, 801, 815, 821, 827, 828, 831, 833, 834, 851, 865, 866, 878, 880, 885, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 989, 991, 994, 997, 999, 1000, 1002, 1003, 1007, 1015, 1017, 1019, 1023, 1024, 1028, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040], "svm1": 409, "svm2": 409, "svm__c": 106, "svm_weight": 164, "svm_weights_select": 164, "svmlight": [2, 369, 487, 509, 510, 1028, 1033, 1034, 1040, 1042], "svmlight_file_test": 510, "svmlight_file_train": 510, "svmsgd": 1016, "svr": [2, 46, 49, 183, 238, 319, 335, 363, 396, 434, 435, 436, 557, 568, 569, 594, 595, 644, 679, 801, 807, 906, 908, 910, 995, 1023, 1033, 1035, 1037, 1038, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1051], "svr_fit": 245, "svr_lin": 346, "svr_poli": 346, "svr_predict": 245, "svr_rbf": 346, "sw": 290, "sw_test": [61, 320], "sw_train": [61, 320], "swap": [2, 408, 413, 717, 737, 980, 981, 1033], "swapnil": 1047, "swart": 55, "sweep": 861, "swier": [1044, 1045], "swiss": [2, 100, 183, 231, 232, 237, 408, 531, 693, 694, 1023, 1047], "switch": [362, 679, 705, 718, 738, 756, 758, 796, 845, 846, 948, 949, 1002, 1005, 1028, 1033], "swpeas": 1046, "swu": 1037, "sy": [47, 51, 57, 220, 243, 290, 333, 353, 371, 388, 618], "syd": 1048, "sydnei": 0, "syhw": [1034, 1035], "sylvain": [0, 366, 1037, 1042, 1043, 1044, 1045, 1046, 1047], "sylvainlan": [1041, 1042, 1043, 1044, 1045], "symbol": [51, 353, 364, 378, 382, 410, 416, 500, 583, 589, 590, 592, 917, 919, 1021], "symbol_dict": 51, "symlink": 380, "symlognorm": [193, 198], "symmetr": [2, 79, 146, 179, 189, 214, 390, 406, 408, 452, 462, 463, 474, 520, 528, 530, 691, 695, 696, 705, 706, 716, 717, 718, 723, 725, 729, 737, 738, 756, 758, 764, 786, 796, 798, 799, 987, 991, 998, 1002, 1005, 1049], "symmetri": [168, 373, 700, 878, 881, 893, 1000], "symmetric_arrai": 987, "symposium": [168, 373, 408, 460], "symptomat": 264, "synchron": [376, 416], "syndrom": 370, "synonym": [390, 847, 848, 849, 855, 856, 857], "synonymi": 413, "syntax": [364, 376, 381, 384, 409, 468, 864, 865, 903, 991, 1044, 1046], "synthet": [43, 53, 62, 64, 67, 70, 72, 77, 82, 141, 146, 152, 170, 175, 177, 187, 203, 214, 229, 305, 312, 347, 359, 363, 369, 379, 391, 408, 410, 417, 659, 660, 905, 906, 912, 996, 1039], "synthetic_feature_weight": [659, 660], "syonekura": 1041, "system": [44, 125, 198, 270, 277, 327, 359, 363, 364, 365, 371, 373, 376, 377, 378, 379, 384, 388, 394, 402, 408, 413, 415, 419, 444, 471, 472, 478, 536, 540, 544, 551, 640, 646, 651, 652, 655, 656, 657, 683, 684, 727, 757, 770, 798, 854, 900, 901, 998, 1002, 1005, 1014, 1021, 1022, 1026, 1033, 1041, 1042], "systemat": [43, 149, 270, 713, 729, 921, 923, 1002, 1048], "sysuresh": 1047, "szabo": [1035, 1036], "szepieniec": 1039, "szlam": [413, 948, 949], "szpak": [1040, 1043], "szyma\u0144ski": [1041, 1042], "s\u00e1nchez": 1045, "s\u00e3o": 1051, "s\u00e4ger": [1036, 1039], "s\u00e9bastien": [1026, 1039, 1041], "s\u00f6nke": 1043, "s\u00f8ren": 1050, "s\u0142apek": 1044, "t": [2, 16, 47, 50, 51, 55, 63, 64, 70, 74, 75, 77, 78, 79, 85, 87, 91, 102, 104, 109, 110, 111, 113, 115, 118, 121, 122, 127, 129, 130, 134, 137, 138, 145, 146, 147, 148, 149, 153, 154, 168, 171, 173, 174, 175, 178, 179, 183, 186, 187, 188, 189, 193, 195, 198, 207, 210, 211, 212, 213, 230, 231, 233, 234, 235, 236, 246, 247, 256, 259, 261, 264, 269, 270, 283, 284, 289, 290, 303, 307, 319, 322, 323, 325, 329, 330, 332, 336, 337, 340, 341, 345, 351, 352, 353, 357, 358, 359, 363, 364, 370, 371, 373, 376, 378, 380, 382, 384, 389, 390, 394, 399, 402, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 421, 425, 428, 431, 433, 437, 447, 448, 450, 456, 463, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 496, 497, 514, 515, 516, 520, 521, 526, 531, 533, 535, 542, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 591, 592, 595, 608, 609, 611, 612, 628, 629, 631, 632, 633, 634, 636, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 696, 697, 705, 711, 717, 718, 727, 737, 738, 756, 757, 758, 768, 789, 790, 795, 796, 800, 801, 804, 805, 815, 823, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 855, 856, 861, 862, 863, 871, 874, 875, 876, 878, 879, 885, 886, 898, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 924, 949, 950, 965, 991, 994, 996, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1016, 1017, 1018, 1023, 1027, 1028, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "t0": [45, 47, 50, 54, 55, 74, 77, 79, 80, 83, 85, 91, 95, 97, 123, 198, 199, 227, 228, 229, 234, 237, 239, 243, 245, 271, 326, 351, 352, 353, 677, 678, 679], "t1": [79, 80, 95, 227, 234, 237, 239], "t15h": 1040, "t_": [667, 668, 669, 677, 678, 679, 862, 863, 1016], "t_0": 1016, "t_batch": 97, "t_i": 1004, "t_k": [415, 1002, 1018], "t_m": 1018, "t_mini_batch": [77, 97], "t_p": 277, "t_post": 270, "t_sne": [232, 1041], "t_stat": 270, "t_stat_uncorrect": 270, "t_t": 1018, "taa": 178, "taac": 178, "tab": [46, 48, 70, 86, 111, 134, 149, 151, 154, 170, 175, 177, 200, 202, 209, 264, 320, 326, 409, 1040], "tab10": [244, 260], "tab20b": 43, "tabea": [1048, 1049], "tabibian": 1039, "tabl": [91, 230, 270, 376, 377, 385, 408, 416, 583, 659, 681, 801, 815, 842, 966, 998, 1002, 1003, 1008, 1021, 1034], "tabular": [43, 52, 187, 378, 415, 1010, 1021], "tacit": 390, "tacitli": 1035, "tackl": [147, 270, 364, 376, 408, 842, 1004, 1026], "tadej": [1034, 1035], "tae": 1045, "taehoon": [1040, 1041], "taemin": 998, "tag": [2, 47, 82, 103, 239, 331, 370, 375, 379, 380, 384, 388, 390, 404, 416, 425, 431, 497, 833, 921, 922, 923, 925, 926, 938, 954, 985, 990, 1022, 1025, 1038, 1042, 1043, 1044, 1047, 1048, 1049, 1050], "tahar": 1040, "tahiri": 1045, "taifi": 1039, "tail": [52, 146, 182, 186, 212, 214, 270, 310, 522, 525, 998], "tail_strength": [327, 522, 525], "takanori": 1041, "take": [2, 44, 47, 52, 58, 66, 80, 86, 88, 90, 99, 107, 111, 118, 120, 134, 142, 170, 172, 175, 179, 186, 191, 197, 216, 220, 221, 236, 246, 257, 258, 264, 265, 271, 275, 279, 280, 289, 290, 293, 296, 297, 298, 300, 301, 310, 323, 327, 332, 336, 337, 340, 349, 352, 353, 356, 363, 364, 365, 370, 371, 374, 376, 378, 381, 382, 383, 384, 388, 390, 391, 399, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 420, 437, 443, 446, 447, 449, 450, 452, 457, 458, 459, 461, 463, 469, 520, 534, 539, 540, 541, 547, 548, 582, 593, 596, 597, 599, 600, 601, 611, 612, 617, 621, 622, 625, 633, 644, 650, 672, 674, 675, 676, 677, 680, 692, 693, 700, 706, 708, 710, 720, 730, 731, 739, 744, 757, 772, 775, 779, 780, 781, 782, 784, 785, 788, 789, 801, 802, 806, 807, 815, 819, 829, 847, 848, 849, 851, 853, 854, 855, 856, 857, 869, 879, 900, 901, 905, 906, 907, 908, 909, 910, 911, 935, 971, 991, 994, 998, 999, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1012, 1017, 1018, 1026, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "takeawai": 289, "taken": [37, 43, 46, 67, 77, 86, 88, 148, 168, 175, 186, 243, 244, 258, 276, 287, 312, 371, 373, 375, 376, 380, 390, 408, 412, 416, 420, 440, 534, 562, 563, 584, 585, 647, 648, 651, 653, 654, 655, 659, 660, 661, 662, 663, 664, 678, 680, 682, 685, 696, 878, 879, 899, 902, 908, 909, 960, 1002, 1004, 1012, 1014, 1039, 1042, 1045, 1046], "takeshi": [1041, 1046, 1047, 1048], "takeuchi": 371, "takingitcasu": [1041, 1042], "talbot": 275, "talgatomarov": 1044, "talk": [57, 102, 271, 351, 352, 353, 371, 390, 402, 1026, 1028], "talli": 414, "tallott": 1041, "talwalkar": 991, "tamara": [371, 1050], "tamer": 1048, "tami": 91, "tamir": [1044, 1047], "tamirlan1": 1044, "tamper": 47, "tampermonkei": 384, "tan": [862, 863, 1006, 1040], "tandfonlin": 408, "tang": [373, 1043, 1044, 1045], "tangent": [232, 344, 690, 694, 1000, 1027, 1028], "tanh": [344, 778, 862, 863, 1000, 1017], "tanjina": 1050, "tann": [1041, 1046], "tao": [1049, 1050], "tar": [47, 380], "taranjeet": 1039, "tarashanski": 1050, "tarbal": [380, 1048], "tarcusx": 1041, "tarfil": 47, "target": [2, 43, 45, 52, 55, 57, 63, 66, 68, 69, 85, 101, 103, 105, 106, 116, 124, 126, 128, 135, 142, 143, 144, 146, 147, 149, 151, 153, 154, 155, 157, 161, 163, 166, 168, 170, 172, 175, 176, 182, 183, 185, 186, 187, 188, 193, 197, 198, 206, 209, 212, 214, 216, 217, 220, 221, 233, 240, 242, 243, 244, 245, 248, 249, 250, 257, 263, 264, 266, 268, 271, 273, 275, 276, 279, 280, 284, 287, 289, 290, 293, 298, 301, 302, 306, 309, 310, 320, 321, 323, 325, 329, 330, 333, 334, 336, 337, 340, 344, 346, 351, 352, 356, 358, 359, 363, 365, 368, 369, 370, 371, 372, 373, 376, 378, 380, 381, 384, 385, 389, 393, 402, 408, 411, 412, 415, 418, 432, 437, 438, 439, 442, 445, 464, 465, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 511, 521, 525, 532, 533, 535, 537, 538, 540, 543, 544, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 574, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 628, 629, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 685, 686, 687, 688, 698, 699, 701, 702, 703, 708, 709, 710, 713, 714, 719, 721, 722, 724, 725, 727, 728, 729, 730, 731, 736, 739, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 854, 855, 856, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 889, 894, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 924, 925, 931, 963, 964, 965, 990, 993, 994, 995, 998, 999, 1002, 1006, 1009, 1010, 1016, 1017, 1018, 1022, 1023, 1025, 1026, 1028, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "target_class": 315, "target_column": [489, 490, 497], "target_encod": 317, "target_filenam": [502, 506], "target_gener": 176, "target_idx": 633, "target_mean_": [886, 1012], "target_nam": [45, 57, 66, 85, 124, 126, 128, 185, 221, 233, 257, 263, 271, 279, 280, 293, 316, 333, 351, 356, 369, 371, 488, 489, 491, 493, 494, 495, 497, 498, 501, 503, 504, 505, 506, 511, 714, 1002, 1018, 1043], "target_opset": 402, "target_tag": [378, 924, 938], "target_test": [264, 510], "target_train": [264, 510], "target_typ": [316, 886, 935, 964, 1050], "target_type_": 886, "targetencod": [2, 316, 317, 390, 878, 879, 992, 1012, 1021, 1049, 1050], "targetencodertargetencod": 316, "targets_test": 244, "targets_train": 244, "targettag": [2, 924], "tari": 91, "tashai": [1041, 1042], "task": [2, 38, 43, 46, 123, 141, 147, 149, 167, 178, 183, 192, 198, 199, 202, 211, 212, 228, 232, 249, 264, 267, 284, 289, 344, 353, 363, 365, 371, 373, 375, 376, 381, 382, 385, 388, 389, 390, 413, 415, 416, 417, 418, 448, 461, 494, 506, 516, 593, 596, 597, 599, 600, 601, 605, 606, 607, 610, 633, 634, 647, 648, 653, 654, 661, 662, 663, 664, 675, 682, 685, 728, 730, 731, 755, 783, 785, 788, 790, 802, 806, 819, 825, 967, 968, 999, 1002, 1003, 1004, 1005, 1013, 1015, 1017, 1018, 1020, 1022, 1023, 1024, 1025, 1026, 1028, 1033, 1038, 1042, 1048], "tast": 1033, "tata": 1050, "tau": 1012, "tau_0": 537, "tavenard": 1045, "tax": 0, "taxonom": 373, "taylor": [415, 1041, 1043, 1044, 1047], "tb": 384, "tc": [168, 373, 391], "tcg": 178, "tch": [168, 373], "tcompl": 91, "tcpdump": 371, "tda": 1021, "teach": 376, "teacher": 102, "teal": [213, 222, 277], "team": [371, 379, 388, 390, 391, 1021, 1026, 1033], "teas": 186, "tech": [51, 373, 843], "technic": [178, 186, 213, 233, 323, 371, 373, 376, 390, 415, 653, 665, 686, 687, 900, 991, 998, 999, 1005], "technion": [665, 686, 687, 998], "techniqu": [11, 26, 51, 56, 102, 104, 122, 126, 130, 135, 144, 160, 167, 168, 182, 183, 185, 209, 220, 234, 236, 275, 287, 294, 322, 330, 344, 355, 365, 373, 388, 390, 402, 406, 408, 412, 413, 414, 415, 416, 417, 447, 448, 449, 450, 535, 555, 678, 690, 691, 694, 695, 727, 757, 994, 998, 999, 1001, 1002, 1005, 1008, 1010, 1014, 1016, 1018, 1022, 1026, 1046], "technolog": 373, "technologi": [168, 373, 408, 1021, 1026], "technometr": [373, 410, 469, 474, 1008], "tediou": [154, 264], "teen": 1012, "teevan": [842, 1004], "teh": [861, 1007], "tejesh95": 1037, "telecom": 1026, "telenczuk": [168, 1042, 1045, 1046, 1048], "tell": [170, 186, 187, 246, 270, 340, 345, 364, 371, 408, 416, 564, 580, 991, 996, 1009], "temp": [43, 187], "temp_fold": 967, "temperatur": [187, 416, 1009], "tempfil": [87, 292, 319, 409, 1005], "templat": [376, 380, 381, 390, 391, 558, 559, 564, 565, 566, 567, 1021], "templateclassifi": 378, "tempor": [52, 149, 198, 1021, 1022], "temporari": [87, 102, 104, 363, 468, 688, 782, 903, 1005, 1036, 1037, 1040, 1046, 1047], "temporarili": [408, 1038], "temporarydirectori": [292, 319], "tempt": 186, "temptat": [359, 376], "ten": [54, 57, 134, 140, 149, 168, 233, 261, 371, 373, 415, 521, 910, 1042], "tenavi": 1047, "tend": [43, 51, 64, 72, 74, 78, 85, 88, 90, 166, 168, 186, 187, 202, 212, 217, 230, 249, 255, 258, 267, 271, 283, 289, 308, 344, 353, 363, 365, 376, 378, 390, 406, 408, 410, 413, 415, 417, 437, 448, 654, 851, 882, 894, 949, 998, 999, 1005, 1018], "tendenc": [149, 237, 357, 998, 999, 1001, 1004, 1007], "tenenbaum": [689, 999], "tenenhau": 373, "tensor": [2, 191, 368, 404, 413, 539, 541, 548, 640, 641, 642, 1028, 1045, 1051], "tensorflow": [45, 388], "tensorsketch": 994, "tent": 382, "tenur": 1026, "teon": 1045, "terenc": [1045, 1046], "term": [2, 43, 53, 54, 62, 68, 91, 125, 137, 140, 143, 146, 175, 185, 198, 200, 201, 202, 212, 214, 216, 226, 229, 230, 249, 264, 268, 272, 290, 305, 322, 344, 347, 351, 353, 365, 376, 378, 388, 406, 408, 410, 412, 413, 415, 443, 447, 449, 452, 459, 462, 525, 536, 539, 541, 545, 548, 550, 589, 590, 591, 592, 605, 608, 609, 633, 634, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 673, 674, 675, 676, 677, 679, 681, 688, 696, 731, 739, 784, 785, 788, 862, 863, 880, 884, 887, 905, 906, 907, 908, 909, 910, 911, 991, 993, 994, 996, 997, 998, 999, 1002, 1003, 1004, 1006, 1007, 1012, 1016, 1017, 1041, 1047, 1048, 1049], "term1": 416, "term2": 416, "term3": 416, "termin": [364, 381, 382, 384, 394, 408, 422, 448, 461, 554, 555, 559, 560, 561, 564, 566, 667, 668, 669, 677, 679, 862, 863, 914, 916, 1008, 1018], "terminalipythonapp": 382, "terminalpdb": 384, "termination_condition_": 902, "terminologi": [390, 1041], "terraza": 1045, "terri": 1037, "terrycojon": 1037, "tesson": 408, "test": [2, 43, 45, 47, 49, 50, 52, 61, 62, 63, 64, 67, 68, 69, 102, 103, 115, 125, 134, 137, 139, 140, 141, 145, 146, 147, 148, 149, 159, 161, 162, 164, 167, 170, 171, 183, 185, 186, 187, 188, 189, 191, 198, 202, 206, 208, 209, 212, 213, 214, 216, 217, 219, 220, 227, 228, 230, 236, 240, 245, 246, 248, 257, 262, 263, 264, 265, 268, 269, 270, 271, 272, 274, 275, 277, 278, 280, 281, 282, 284, 289, 293, 298, 299, 305, 307, 312, 315, 316, 317, 326, 333, 340, 347, 353, 357, 359, 363, 364, 370, 371, 373, 379, 380, 381, 382, 388, 389, 390, 393, 394, 401, 403, 404, 406, 407, 409, 410, 413, 415, 416, 417, 418, 425, 427, 428, 431, 434, 435, 436, 437, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 488, 489, 494, 498, 499, 503, 505, 525, 532, 538, 540, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 593, 595, 596, 597, 599, 600, 601, 603, 605, 606, 607, 609, 610, 611, 612, 628, 629, 631, 636, 637, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 713, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 852, 855, 856, 862, 863, 865, 890, 891, 893, 894, 895, 896, 900, 901, 903, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 921, 922, 923, 924, 930, 941, 943, 944, 997, 998, 1001, 1002, 1005, 1006, 1010, 1012, 1016, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1028, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "test_": [52, 154, 412], "test_0": 43, "test_4": 43, "test_accuraci": [257, 271, 284], "test_auc": 828, "test_ax": 125, "test_balanced_accuraci": 284, "test_best_it": 145, "test_check_estim": 944, "test_color": 145, "test_common": [376, 384], "test_dataset": 370, "test_devi": 148, "test_enable_hist_gradient_boost": 380, "test_fn": 1002, "test_fold": [412, 814], "test_fract": 1033, "test_idx": [52, 390], "test_import": 188, "test_index": [257, 332, 412, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822], "test_indx": 412, "test_lin": 145, "test_logist": [376, 384], "test_ms": 326, "test_neg_mean_absolute_error": [43, 214], "test_neg_mean_squared_error": [214, 828], "test_neg_root_mean_squared_error": 43, "test_negative_likelihood_ratio": 273, "test_positive_likelihood_ratio": 273, "test_prec_macro": 412, "test_precision_macro": 412, "test_r2": 828, "test_rec_macro": 412, "test_recall_macro": 412, "test_requiring_mpl_fixtur": 376, "test_result": 188, "test_scor": [143, 145, 147, 149, 220, 269, 272, 283, 287, 316, 347, 355, 389, 412, 807, 824, 828, 829, 832], "test_scores_mean": 283, "test_scores_nb": 272, "test_scores_svm": 272, "test_set": 406, "test_siz": [43, 44, 45, 49, 52, 61, 62, 64, 67, 68, 103, 139, 144, 145, 147, 148, 149, 153, 185, 191, 198, 208, 209, 212, 219, 220, 227, 228, 264, 267, 268, 272, 277, 279, 283, 289, 298, 299, 305, 307, 308, 312, 314, 315, 321, 340, 347, 359, 381, 412, 699, 803, 818, 821, 822, 831, 833, 854, 992, 1004, 1005, 1033, 1034, 1039, 1040, 1045], "test_sklearn_compatible_estim": [319, 944], "test_sparsifi": 384, "test_stat": 47, "test_tim": [245, 351], "test_tp": 1002, "test_val": 377, "test_your_test_nam": 364, "tested_neg": 284, "tested_posit": 284, "testpypi": 380, "teunp": 1047, "texa": [51, 102], "text": [2, 42, 45, 46, 49, 50, 51, 54, 57, 67, 68, 72, 75, 79, 86, 90, 91, 93, 94, 95, 97, 102, 111, 112, 115, 140, 144, 166, 189, 194, 207, 208, 239, 243, 250, 251, 255, 257, 262, 269, 276, 277, 281, 295, 298, 300, 305, 312, 322, 328, 330, 346, 355, 363, 365, 368, 369, 370, 376, 381, 388, 390, 396, 406, 408, 409, 411, 412, 413, 415, 418, 447, 449, 464, 468, 487, 488, 489, 500, 504, 509, 522, 537, 545, 565, 589, 590, 591, 592, 616, 626, 653, 659, 667, 669, 675, 677, 698, 704, 706, 708, 714, 718, 730, 731, 738, 794, 796, 801, 815, 831, 840, 842, 844, 847, 852, 865, 866, 868, 869, 877, 901, 902, 903, 905, 917, 918, 919, 946, 991, 994, 998, 1000, 1002, 1003, 1004, 1006, 1009, 1012, 1014, 1016, 1017, 1020, 1022, 1023, 1026, 1028, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "text1": 416, "text2": 416, "text2d": 236, "text3": 416, "text_": 698, "text_kw": [698, 1048], "text_preprocess": 464, "text_stat": 102, "text_stats_transform": 102, "textbook": [416, 591], "textcoord": [48, 191], "textrm": 1017, "texttt": 1002, "textual": [413, 422, 1018, 1042], "textur": [168, 373, 759, 760, 1000], "tf": [2, 54, 57, 243, 351, 352, 353, 371, 413, 522, 545, 589, 590, 591, 592, 844, 852, 877, 991, 1000, 1004, 1012, 1021], "tf_feature_nam": 54, "tf_vector": 54, "tfid": 591, "tfidf": [54, 102, 333, 416, 592], "tfidf_feature_nam": 54, "tfidf_vector": 54, "tfidftransform": [2, 333, 352, 353, 416, 489, 592, 1040, 1041, 1047, 1049, 1050, 1051], "tfidfvector": [2, 54, 57, 102, 271, 351, 371, 413, 416, 489, 589, 590, 591, 1033, 1035, 1041, 1042, 1043, 1046, 1047, 1051], "tfidfvectorizertfidfvector": 271, "tfifi": 1046, "tfrac": 418, "tgct": 178, "tgz": 45, "th": [134, 322, 358, 389, 408, 412, 415, 423, 441, 445, 446, 451, 453, 459, 463, 472, 551, 558, 559, 560, 561, 562, 563, 565, 566, 567, 594, 595, 633, 649, 650, 670, 672, 681, 697, 719, 781, 822, 886, 936, 992, 998, 1002, 1006, 1009, 1016, 1017, 1048], "th0rwa": [1043, 1044], "thakur": [1036, 1037], "thaler": 1039, "than": [2, 25, 43, 44, 46, 50, 51, 53, 57, 64, 66, 67, 75, 79, 81, 86, 88, 104, 107, 111, 113, 116, 118, 120, 123, 125, 127, 134, 136, 137, 139, 140, 141, 142, 143, 146, 149, 166, 168, 170, 176, 181, 186, 187, 188, 191, 193, 198, 199, 202, 212, 214, 218, 228, 229, 230, 236, 239, 245, 246, 247, 249, 256, 264, 267, 268, 270, 271, 272, 273, 276, 279, 284, 287, 289, 290, 296, 297, 308, 310, 314, 315, 316, 317, 321, 323, 325, 327, 330, 344, 351, 352, 353, 359, 363, 364, 365, 370, 371, 372, 374, 375, 376, 378, 381, 382, 384, 390, 391, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 452, 454, 457, 460, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 494, 495, 497, 510, 515, 516, 524, 532, 535, 536, 537, 538, 539, 541, 542, 543, 545, 548, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 574, 582, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 628, 629, 631, 635, 641, 643, 644, 645, 647, 648, 653, 654, 656, 659, 660, 661, 662, 663, 664, 667, 668, 669, 672, 673, 675, 677, 678, 679, 680, 683, 688, 693, 695, 697, 705, 706, 713, 721, 722, 723, 724, 725, 736, 737, 740, 765, 780, 781, 782, 784, 786, 796, 798, 799, 801, 804, 805, 811, 815, 820, 822, 823, 826, 827, 828, 829, 830, 833, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 859, 862, 863, 868, 878, 879, 880, 882, 883, 885, 888, 894, 895, 899, 902, 905, 906, 907, 910, 911, 913, 914, 915, 916, 917, 922, 937, 949, 951, 952, 958, 964, 970, 972, 975, 991, 992, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1012, 1016, 1017, 1018, 1021, 1022, 1025, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "thanh": 1051, "thank": [0, 43, 55, 62, 88, 116, 188, 191, 212, 279, 351, 352, 375, 384, 1021, 1026, 1033, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "tharak": 1050, "thebabush": [1050, 1051], "thedevpanda": 1048, "thei": [0, 8, 25, 30, 31, 43, 52, 63, 72, 83, 90, 113, 122, 132, 135, 141, 143, 145, 147, 149, 150, 164, 167, 168, 170, 171, 175, 186, 187, 198, 199, 202, 208, 212, 213, 230, 233, 236, 239, 245, 246, 249, 263, 267, 270, 271, 273, 279, 284, 287, 290, 292, 306, 310, 315, 321, 323, 344, 351, 352, 357, 359, 363, 364, 365, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 384, 385, 388, 389, 390, 391, 399, 402, 405, 407, 408, 409, 410, 411, 413, 415, 417, 418, 420, 440, 442, 446, 453, 454, 467, 497, 509, 510, 534, 536, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 598, 611, 620, 630, 644, 647, 648, 653, 659, 660, 661, 662, 663, 671, 673, 677, 679, 682, 688, 763, 764, 766, 769, 775, 790, 801, 815, 834, 840, 841, 842, 843, 844, 862, 865, 867, 873, 884, 885, 907, 910, 913, 914, 915, 916, 920, 991, 992, 994, 996, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1016, 1017, 1018, 1026, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049], "theil": [2, 183, 192, 215, 218, 310, 650, 658, 672, 679, 680, 1023], "theilsen": 218, "theilsenregressor": [2, 218, 229, 650, 672, 679, 998, 1037, 1045, 1047], "theirs": 351, "them": [16, 43, 44, 47, 68, 74, 75, 82, 86, 88, 89, 93, 98, 99, 102, 103, 116, 120, 122, 125, 135, 150, 163, 168, 170, 181, 182, 186, 187, 188, 191, 193, 198, 201, 208, 213, 214, 216, 230, 243, 246, 249, 250, 264, 268, 270, 271, 273, 279, 283, 287, 292, 310, 315, 317, 322, 333, 340, 353, 358, 363, 365, 371, 376, 377, 378, 379, 380, 384, 388, 390, 391, 393, 399, 402, 406, 407, 408, 409, 412, 413, 415, 416, 418, 444, 447, 449, 450, 457, 464, 467, 494, 495, 509, 568, 569, 570, 571, 608, 609, 617, 621, 622, 625, 633, 640, 665, 693, 769, 772, 775, 779, 780, 781, 782, 790, 801, 815, 822, 830, 865, 869, 874, 875, 879, 883, 885, 886, 895, 896, 902, 913, 914, 943, 944, 958, 967, 991, 992, 998, 1001, 1002, 1003, 1005, 1006, 1007, 1012, 1017, 1018, 1020, 1021, 1025, 1026, 1033, 1034, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "themat": 390, "theme": [371, 376, 394, 401, 1033], "themrmax": [1039, 1040], "themselv": [64, 186, 310, 372, 378, 384, 390, 399, 405, 408, 415, 416, 418, 446, 616, 793, 1018, 1043], "theodor": 1038, "theofilo": 1040, "theoptip": [1043, 1044], "theorem": [32, 170, 347, 1004], "theoret": [37, 72, 90, 170, 264, 408, 415, 554, 555, 640, 705, 727, 757, 905, 991, 998, 999, 1001, 1002, 1004, 1014, 1016, 1017, 1026], "theori": [8, 143, 245, 260, 347, 373, 408, 412, 415, 691, 695, 727, 757, 897, 898, 949, 991, 998, 999, 1001, 1002, 1003, 1017, 1018], "theotheo": 1043, "thereaft": [186, 193], "therebi": [43, 186, 412, 415, 994, 1043], "therefor": [43, 48, 53, 58, 61, 64, 70, 72, 85, 86, 103, 104, 107, 111, 116, 125, 129, 134, 137, 139, 146, 149, 152, 154, 167, 185, 188, 209, 212, 216, 228, 229, 255, 260, 261, 264, 271, 273, 283, 284, 287, 289, 293, 307, 310, 315, 329, 340, 347, 348, 351, 352, 358, 363, 370, 374, 378, 381, 388, 399, 402, 404, 408, 409, 410, 412, 413, 415, 416, 437, 536, 542, 550, 552, 554, 555, 560, 561, 565, 566, 605, 607, 659, 660, 666, 669, 672, 677, 679, 680, 702, 713, 736, 758, 798, 865, 866, 878, 882, 886, 894, 921, 992, 996, 998, 999, 1002, 1004, 1005, 1006, 1007, 1010, 1012, 1017, 1018, 1022, 1042, 1043, 1046, 1047, 1048, 1049, 1050], "therein": 669, "thereof": 390, "theriley106": 1041, "thesi": [0, 373, 408, 415], "theta": [171, 172, 174, 176, 178, 179, 247, 413, 418, 524, 537, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 693, 1004, 1018], "theta0": 171, "theta1": 171, "theta_": [843, 1004], "theta_c": [247, 524], "theta_d": 413, "theta_i": 1004, "theta_l": 418, "theta_opt": [611, 612], "thi": [0, 2, 7, 11, 30, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 394, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 482, 483, 484, 485, 487, 489, 490, 494, 495, 497, 498, 499, 500, 502, 503, 504, 506, 509, 510, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 707, 708, 710, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 737, 738, 739, 740, 741, 742, 744, 749, 755, 756, 757, 758, 759, 760, 762, 763, 764, 766, 769, 770, 775, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 920, 921, 922, 924, 925, 926, 927, 931, 932, 937, 938, 939, 941, 943, 944, 949, 951, 954, 957, 958, 959, 960, 961, 962, 964, 967, 968, 971, 972, 975, 976, 985, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1026, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "thibault": 1042, "thibaut": 1047, "thibsej": 1042, "thick": [93, 300, 1005], "thierno": 1043, "thierri": [0, 1026, 1039, 1040, 1047], "thij": [1045, 1048, 1049], "thin": [234, 621], "thing": [48, 70, 233, 265, 351, 364, 365, 371, 375, 376, 378, 388, 391, 408, 410, 416, 560, 561, 998, 1012, 1026, 1039], "think": [44, 72, 186, 187, 351, 352, 376, 384, 414, 1001, 1022, 1026], "thinner": 100, "third": [70, 142, 147, 163, 168, 178, 230, 239, 261, 287, 295, 312, 325, 364, 371, 375, 378, 388, 391, 402, 416, 535, 589, 590, 591, 592, 803, 804, 805, 810, 847, 848, 849, 851, 853, 883, 895, 991, 1013, 1033, 1044, 1049, 1050], "thirion": [0, 397, 1033, 1039, 1040, 1046], "thirteen": 373, "thirti": 1020, "thiruvenkadam": 1047, "this_centroid": 77, "this_cov": 113, "this_cv": 265, "this_di": 51, "this_dx": 51, "this_i": [61, 218], "this_max_it": 227, "this_p": 63, "this_prec": 113, "this_scor": 343, "this_sw": 61, "this_x": [61, 210, 218], "thoma": [0, 127, 364, 366, 391, 397, 901, 998, 1012, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "thomas9292": 1045, "thomaz": 1044, "thomo": 91, "thompson": [1036, 1048, 1049], "thorben": 1045, "thorough": 1026, "thoroughli": 1007, "thorsten": 1026, "those": [43, 46, 51, 55, 57, 88, 93, 103, 135, 146, 149, 166, 168, 185, 186, 187, 188, 189, 209, 212, 214, 216, 230, 237, 243, 246, 248, 249, 261, 263, 264, 270, 273, 276, 287, 306, 310, 315, 327, 337, 340, 351, 352, 353, 363, 364, 370, 376, 378, 380, 381, 382, 383, 388, 390, 391, 394, 405, 406, 407, 408, 412, 413, 415, 416, 418, 448, 450, 461, 464, 468, 495, 496, 497, 504, 558, 559, 565, 566, 570, 571, 582, 693, 698, 713, 719, 737, 801, 804, 805, 813, 815, 822, 847, 848, 849, 851, 853, 854, 855, 856, 857, 905, 906, 907, 910, 913, 914, 915, 916, 961, 991, 994, 998, 1001, 1002, 1004, 1005, 1006, 1009, 1012, 1018, 1020, 1021, 1026, 1033, 1036, 1039, 1040, 1041, 1046, 1047, 1048, 1049, 1050, 1051], "though": [88, 140, 168, 191, 193, 249, 276, 295, 312, 314, 352, 353, 359, 363, 370, 373, 376, 380, 389, 390, 408, 413, 414, 415, 416, 417, 700, 808, 810, 905, 991, 992, 994, 999, 1002, 1005, 1010, 1012, 1016, 1041], "thought": [232, 295, 390, 408, 446, 999, 1003], "thoui": [0, 398, 1033], "thousand": [77, 140, 149, 243, 245, 314, 352, 371, 408, 415, 862, 863, 910, 999, 1042, 1044], "thread": [290, 320, 323, 374, 376, 388, 390, 408, 415, 564, 837, 838, 967, 968, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1048, 1049, 1050], "threadpoolctl": [41, 364, 374, 394, 401], "threadsaf": 1046, "three": [43, 46, 63, 70, 75, 76, 80, 88, 91, 109, 126, 134, 139, 141, 143, 144, 145, 155, 156, 157, 165, 168, 178, 186, 198, 205, 212, 214, 221, 223, 245, 246, 255, 258, 289, 316, 317, 320, 364, 369, 372, 373, 380, 394, 402, 405, 408, 412, 413, 414, 416, 451, 462, 499, 710, 951, 995, 997, 998, 999, 1002, 1005, 1012, 1016, 1017, 1020, 1033], "three_d_arrai": 922, "thresh": 1037, "threshold": [2, 50, 62, 77, 98, 118, 123, 129, 168, 183, 187, 189, 208, 240, 242, 262, 267, 268, 269, 274, 277, 289, 325, 326, 328, 356, 358, 390, 403, 408, 413, 415, 417, 441, 442, 445, 446, 469, 497, 501, 509, 510, 532, 538, 543, 549, 550, 551, 552, 562, 564, 589, 592, 594, 598, 603, 604, 645, 659, 668, 672, 677, 679, 693, 699, 701, 703, 704, 707, 708, 719, 721, 727, 728, 740, 741, 743, 757, 783, 785, 788, 789, 790, 795, 798, 799, 800, 801, 820, 823, 831, 840, 851, 852, 866, 868, 870, 872, 885, 888, 900, 901, 902, 903, 910, 917, 919, 975, 998, 1002, 1005, 1006, 1008, 1012, 1015, 1017, 1018, 1022, 1023, 1028, 1033, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1049, 1050, 1051], "threshold_": [598, 1040], "threshold_lambda": 645, "threshold_sign": 358, "thriller": [416, 876], "thrive": [0, 376], "throat": [50, 303, 371, 499], "through": [0, 2, 46, 52, 70, 139, 168, 178, 186, 216, 232, 244, 265, 270, 273, 295, 314, 315, 338, 345, 353, 358, 373, 376, 378, 383, 385, 388, 390, 391, 394, 399, 407, 408, 411, 413, 415, 417, 418, 425, 431, 446, 464, 467, 472, 536, 542, 558, 559, 562, 565, 566, 567, 582, 594, 595, 598, 648, 652, 654, 656, 659, 660, 662, 664, 666, 669, 677, 678, 689, 692, 721, 807, 824, 881, 893, 897, 898, 913, 914, 915, 916, 956, 959, 991, 992, 999, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1016, 1017, 1018, 1026, 1033, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049, 1050, 1051], "throughout": [325, 359, 390, 628, 802, 862, 863, 1036, 1041], "throughput": [362, 1021, 1028, 1036], "throw": [2, 307, 385, 930, 1037, 1040, 1041, 1042, 1043, 1047], "thrown": [712, 1042, 1043], "thu": [43, 44, 61, 62, 63, 64, 75, 86, 88, 93, 109, 113, 123, 125, 137, 139, 140, 143, 149, 164, 170, 175, 176, 187, 198, 200, 202, 212, 214, 230, 239, 245, 250, 257, 264, 268, 270, 275, 276, 277, 283, 284, 293, 317, 319, 322, 355, 359, 363, 364, 371, 378, 382, 388, 390, 399, 406, 407, 408, 412, 413, 415, 416, 418, 419, 437, 439, 463, 516, 528, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 604, 607, 611, 623, 628, 633, 634, 644, 646, 659, 678, 706, 719, 726, 747, 789, 796, 801, 803, 808, 810, 815, 822, 836, 839, 874, 905, 993, 994, 995, 996, 997, 998, 999, 1002, 1003, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1022, 1026, 1033, 1035, 1039, 1041, 1042, 1043, 1045, 1049], "thuan": 1044, "thukarama": 1048, "thumb": [13, 140, 191, 363, 376, 377, 388, 408, 659, 660, 667, 668, 669, 677, 678, 679, 905, 1002], "thumbnail": 1033, "th\u00e9ophil": 1049, "ti": [102, 212, 257, 260, 268, 348, 363, 384, 406, 408, 600, 601, 636, 721, 727, 757, 798, 799, 907, 910, 913, 1001, 1002, 1017, 1034, 1036, 1037, 1041, 1043, 1047, 1048, 1049], "tiago": [1034, 1038], "tialo": [1050, 1051], "tian": [408, 442, 1038, 1039, 1040], "tianqi": 415, "tiao": [1038, 1039], "tib": [683, 684], "tibshirani": [137, 138, 148, 168, 200, 269, 373, 412, 415, 521, 560, 561, 629, 657, 722, 724, 725, 835, 852, 913, 914, 992, 996, 998, 1003, 1009, 1018], "tic": [168, 187, 249, 281, 1004], "tic_bwd": 168, "tic_fwd": 168, "ticconi": 1039, "tick": [47, 78, 93, 173, 250, 281, 376, 633, 829], "tick_bottom": 310, "tick_label": [147, 189, 319], "tick_labels_dict": [147, 189, 319], "tick_labels_parameter_nam": [147, 189, 319], "tick_left": 310, "tick_param": [46, 54, 157, 255, 270, 314, 332], "tick_right": 46, "ticker": [232, 234, 237, 290], "ticket": [324, 376], "tidelift": 0, "tie": [183, 205, 335, 388, 415, 513, 833, 907, 910, 1003, 1017, 1018, 1023, 1034, 1049], "tieleman": [861, 1007], "tien": 1038, "tiernei": [1041, 1042, 1043], "tight": [75, 129, 136, 142, 161, 164, 201, 205, 206, 207, 217, 221, 224, 229, 234, 237, 259, 290, 296, 297, 301, 302, 336, 340, 343, 345, 356, 583, 693, 1045], "tight_layout": [45, 47, 62, 64, 67, 75, 85, 88, 98, 105, 107, 116, 120, 121, 122, 130, 134, 136, 141, 142, 144, 147, 152, 154, 156, 172, 174, 179, 181, 185, 186, 188, 189, 193, 194, 198, 203, 210, 212, 220, 223, 227, 230, 232, 244, 249, 265, 266, 282, 289, 290, 292, 302, 311, 312, 313, 314, 315, 319, 323, 338, 352, 355, 356, 372], "tijanajovanov": 1045, "tikhonov": [177, 418, 673], "tild": [871, 1010, 1012], "tilen": 1043, "till": [408, 442, 789, 1002], "tim": [0, 397, 1033, 1038, 1039, 1042, 1043, 1044, 1046, 1048, 1049, 1050, 1051], "time": [0, 2, 37, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 382, 384, 388, 390, 391, 399, 402, 404, 405, 406, 408, 410, 411, 413, 415, 416, 419, 437, 441, 443, 444, 445, 446, 447, 450, 452, 455, 457, 458, 459, 461, 462, 463, 464, 465, 467, 468, 472, 492, 497, 500, 502, 520, 524, 535, 537, 539, 541, 542, 548, 563, 568, 569, 570, 571, 591, 611, 620, 628, 629, 630, 631, 635, 640, 641, 644, 647, 651, 653, 655, 661, 663, 665, 667, 668, 673, 674, 675, 677, 678, 679, 686, 687, 691, 693, 695, 702, 743, 746, 747, 749, 791, 795, 798, 799, 801, 803, 804, 805, 806, 808, 810, 815, 816, 817, 820, 822, 826, 827, 828, 829, 830, 831, 833, 835, 840, 841, 842, 843, 844, 845, 846, 853, 855, 856, 857, 861, 862, 863, 864, 865, 866, 867, 869, 870, 872, 875, 878, 880, 884, 889, 897, 898, 902, 903, 907, 910, 911, 919, 943, 944, 951, 967, 991, 992, 994, 995, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1026, 1033, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "time_dens": 326, "time_spars": 326, "time_step": [198, 863], "timeit": [227, 258, 382], "timeout": [497, 967, 1047], "timer": [258, 382], "times_init": 258, "timescal": 244, "timeseri": 43, "timeseriessplit": [2, 43, 52, 149, 198, 265, 412, 1039, 1040, 1045], "timo": 1045, "timofei": 1048, "timotheemathieu": 1046, "timothi": [1038, 1046], "timsaur": 1043, "tinertia": 91, "ting": [564, 1008, 1041, 1042], "tingshan": 1046, "tini": [1035, 1048, 1051], "tinoco": 1050, "tinta": 316, "tip": [359, 362, 376, 379, 382, 403, 416, 535, 542, 646, 693, 998, 1024, 1025, 1027, 1028, 1036], "tiphain": 1044, "tirth": [1043, 1044], "titan": [103, 188, 253, 319, 323, 324, 1010], "titl": [0, 43, 44, 45, 46, 47, 48, 50, 52, 53, 54, 58, 59, 61, 62, 63, 64, 66, 68, 72, 73, 74, 76, 79, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 109, 110, 112, 113, 115, 116, 120, 121, 122, 123, 124, 126, 127, 128, 129, 135, 136, 137, 140, 142, 143, 146, 147, 149, 150, 153, 156, 157, 161, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 186, 193, 194, 196, 198, 200, 201, 202, 205, 206, 209, 211, 212, 214, 216, 217, 218, 220, 221, 226, 229, 230, 232, 233, 234, 239, 243, 244, 245, 247, 248, 249, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 269, 270, 271, 273, 274, 275, 279, 280, 283, 285, 292, 293, 296, 297, 298, 299, 301, 302, 303, 310, 314, 315, 316, 317, 331, 334, 336, 337, 338, 339, 340, 343, 344, 348, 349, 351, 356, 357, 372, 375, 376, 380, 384, 409, 1002, 1025], "title_bow": 409, "titles_opt": 263, "titov": [1041, 1043, 1046, 1047], "titu": 1044, "tiwari": 1045, "tiziano": 1033, "tjoa": 1037, "tkammi": 1039, "tkdd": 564, "tliu68": 1046, "tm": [51, 1005], "tmp": 380, "tmpdir": [292, 319], "tn": [264, 327, 713, 719, 1002], "tn_c": 279, "tnr": 264, "tnwei": 1045, "to_british": 416, "to_fram": 107, "to_list": 189, "to_numpi": [175, 264], "to_onnx": 402, "to_replac": [43, 187], "toarrai": [46, 326, 333, 358, 409, 416, 567, 583, 589, 591, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 878, 895, 896, 950, 972, 973, 975, 983, 984, 992, 1005, 1012, 1050], "toastedcornflak": [1039, 1040], "toastedyeast": [1047, 1048], "tobia": [1041, 1046, 1048], "tobychees": [1040, 1041], "toc": [168, 249], "toc_bwd": 168, "toc_fwd": 168, "toccac": 1043, "tocsc": 199, "tocsr": 55, "toctre": [376, 394, 401], "tod": [408, 419, 444], "todai": 175, "todens": [976, 977, 978, 979, 980, 981, 982], "todo": [80, 243, 380, 384, 408, 1052], "toeplitz": 110, "togeth": [43, 51, 84, 93, 103, 142, 154, 170, 176, 186, 195, 233, 236, 249, 266, 316, 323, 343, 356, 359, 378, 388, 389, 390, 408, 415, 416, 417, 423, 451, 453, 568, 569, 595, 690, 716, 801, 815, 865, 866, 879, 998, 999, 1002, 1003, 1009, 1012, 1018, 1019, 1026, 1039, 1050], "toi": [48, 58, 71, 74, 75, 76, 77, 81, 82, 85, 86, 88, 89, 90, 100, 111, 116, 124, 137, 150, 155, 156, 183, 196, 203, 216, 226, 238, 249, 255, 296, 297, 306, 337, 346, 369, 382, 388, 408, 415, 416, 440, 441, 442, 444, 446, 448, 449, 450, 452, 458, 469, 513, 515, 523, 564, 640, 678, 727, 757, 799, 851, 858, 866, 885, 909, 999, 1001, 1002, 1008, 1012, 1023, 1028], "tok": [353, 416], "token": [2, 57, 353, 363, 371, 380, 416, 537, 589, 590, 591, 592, 1033, 1041, 1045, 1051], "token_featur": 416, "token_freq": 353, "token_pattern": [353, 416, 589, 590, 592], "tokoroten": 1038, "tokyo": [873, 1013], "tol": [46, 49, 55, 105, 120, 144, 149, 168, 181, 194, 204, 206, 219, 220, 226, 228, 239, 250, 256, 258, 308, 322, 347, 351, 378, 382, 415, 420, 443, 447, 449, 452, 459, 462, 471, 472, 478, 482, 483, 484, 532, 533, 534, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 560, 561, 562, 563, 603, 628, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 673, 675, 677, 678, 679, 680, 681, 683, 684, 686, 687, 688, 689, 690, 692, 694, 696, 798, 799, 815, 854, 862, 863, 900, 901, 905, 906, 907, 908, 909, 910, 911, 987, 998, 1016, 1017, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051], "tola": 1043, "told": 416, "toledano": 1041, "toler": [80, 105, 149, 181, 204, 206, 228, 229, 344, 353, 371, 378, 385, 408, 420, 443, 447, 452, 459, 462, 471, 472, 478, 482, 483, 484, 532, 533, 534, 536, 537, 541, 542, 543, 544, 545, 546, 548, 549, 560, 561, 562, 563, 628, 647, 648, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 677, 679, 680, 682, 683, 684, 685, 689, 690, 691, 692, 694, 695, 696, 845, 846, 850, 854, 862, 863, 900, 901, 905, 906, 907, 908, 909, 910, 911, 987, 998, 1002, 1016, 1017, 1045, 1046, 1047, 1048], "toleranbc": 1042, "tolist": [43, 126, 145, 181, 269, 321, 371], "tom": [0, 397, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "tom1092": 1046, "toma": 1037, "tomasz": 1046, "tomato": 213, "tomatti": 1048, "tomdlt": 1039, "tomiock": [1048, 1049], "tommaso": 1046, "tommi": [1040, 1041, 1042], "tomographi": [42, 55, 99, 183, 417, 653, 673, 998, 1023], "tomohiro": 1046, "tomorrow": 407, "tom\u00e1": [1046, 1047], "tongyu": 1050, "toni": [45, 371, 564, 885, 1008, 1046, 1047], "tonk": 1040, "too": [43, 46, 51, 52, 55, 64, 79, 83, 88, 90, 95, 102, 106, 113, 124, 146, 149, 181, 186, 188, 198, 213, 216, 233, 243, 249, 256, 263, 264, 268, 277, 283, 307, 316, 340, 351, 357, 363, 373, 376, 382, 384, 388, 390, 406, 408, 410, 412, 415, 416, 417, 420, 437, 449, 539, 680, 693, 708, 840, 841, 842, 843, 844, 870, 883, 885, 997, 999, 1001, 1002, 1004, 1005, 1009, 1034, 1037, 1040, 1041, 1042, 1043, 1045, 1051], "took": [0, 43, 77, 278], "tool": [21, 29, 41, 48, 50, 52, 144, 186, 246, 264, 268, 273, 359, 369, 370, 371, 374, 376, 378, 379, 381, 382, 383, 384, 389, 390, 391, 393, 394, 399, 402, 408, 409, 410, 487, 693, 702, 991, 997, 998, 1002, 1008, 1012, 1017, 1019, 1021, 1022, 1026, 1040, 1043, 1046, 1047, 1048], "toolbox": [388, 1021, 1026], "toolchain": 374, "toolkit": [363, 1021, 1026], "toolset": 1026, "tooth": 121, "tootoonian": 1046, "top": [2, 45, 51, 53, 54, 55, 70, 72, 74, 76, 77, 78, 79, 84, 95, 97, 103, 122, 132, 139, 140, 142, 149, 154, 157, 186, 212, 214, 223, 227, 239, 249, 250, 255, 257, 258, 261, 267, 271, 279, 280, 295, 310, 312, 316, 320, 326, 329, 330, 340, 344, 351, 359, 376, 378, 382, 388, 405, 406, 408, 413, 414, 415, 487, 588, 589, 592, 600, 727, 757, 795, 917, 919, 991, 994, 998, 1000, 1010, 1021, 1026, 1047], "top10": 371, "top5": 351, "top_featur": 54, "top_features_ind": 54, "top_indic": 351, "top_k_accuraci": 1002, "top_k_accuracy_scor": [2, 1002, 1045, 1047], "tophat": [295, 414, 845, 846, 850], "topic": [42, 45, 46, 47, 102, 183, 351, 352, 353, 371, 372, 412, 413, 416, 488, 498, 537, 539, 541, 548, 589, 592, 998, 1003, 1021, 1022, 1023, 1038, 1040], "topic_d": 47, "topic_idx": 54, "topic_word_prior": [413, 537], "topic_word_prior_": 537, "topisan": 1043, "toplak": 1049, "topolog": [463, 1021], "topologi": [236, 237], "torch": [404, 1051], "torgo": 370, "toro": 316, "toronto": [535, 645, 861], "torr": [1042, 1051], "torrella": [1042, 1043, 1049], "tortois": 998, "tosequ": 1051, "toshihiro": [1039, 1040, 1046], "toshniw": 1045, "tot": 51, "total": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 356, 357, 358, 364, 370, 371, 373, 382, 390, 405, 408, 414, 416, 419, 431, 444, 465, 482, 483, 484, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 506, 511, 513, 515, 516, 520, 523, 524, 537, 545, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 571, 584, 585, 591, 595, 597, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 673, 674, 677, 678, 679, 680, 698, 705, 706, 714, 730, 731, 732, 735, 739, 740, 758, 770, 784, 785, 788, 795, 796, 797, 801, 815, 826, 827, 828, 838, 839, 840, 841, 848, 850, 856, 863, 880, 884, 906, 908, 911, 913, 914, 915, 916, 949, 991, 998, 999, 1002, 1003, 1004, 1005, 1012, 1016, 1017, 1018, 1023, 1034, 1039, 1041, 1049, 1050], "total_cel": 149, "total_fit_tim": 47, "total_sampl": [332, 537], "total_sz_mb": 47, "total_vect_tim": 47, "totalbsmtsf": 154, "totrmsabvgrd": 143, "tottim": 382, "tour": [0, 397, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "tournament": 991, "toward": [0, 63, 64, 96, 113, 141, 146, 153, 170, 188, 193, 216, 217, 237, 249, 283, 347, 376, 390, 408, 448, 452, 462, 677, 679, 696, 879, 1001, 1016, 1018, 1020, 1022], "toyota": 51, "tp": [327, 408, 713, 719, 730, 731, 732, 783, 784, 785, 788, 917, 1002], "tp_c": 279, "tpng": 917, "tpot": 1021, "tpr": [50, 240, 249, 264, 267, 279, 280, 383, 703, 707, 790, 1002, 1030, 1033, 1049], "tpr_a": 279, "tpr_b": 279, "tpr_score": 264, "tprs_lower": 280, "tprs_upper": 280, "tr": [265, 373, 380, 408, 410, 469, 470, 471, 472, 473, 474, 475, 476], "trace": [384, 408, 421, 473, 475, 476, 479, 480, 481, 690, 694, 999, 1044], "traceback": [376, 381, 384, 388, 468, 712, 1025, 1050], "traceord": 140, "tracer0tong": 1039, "trach": 1033, "track": [132, 138, 145, 330, 376, 379, 380, 404, 535, 970, 1003, 1021, 1022, 1040, 1043], "tracker": [375, 379, 384, 388, 391, 394, 402, 1022], "tracking_select": 970, "tractabl": [43, 412, 542, 635, 1021, 1046], "trade": [37, 94, 109, 140, 149, 188, 216, 269, 271, 272, 283, 340, 351, 390, 407, 408, 410, 554, 555, 560, 561, 635, 657, 693, 801, 804, 805, 815, 828, 999, 1006, 1014, 1016, 1017, 1022], "tradeoff": [88, 137, 183, 244, 252, 262, 277, 278, 279, 280, 351, 363, 376, 384, 414, 516, 565, 699, 703, 728, 790, 831, 866, 885, 905, 999, 1023, 1042, 1045], "tradit": [55, 88, 212, 227, 352, 365, 406, 415, 416, 633, 695, 998, 1001, 1012, 1021, 1026], "tradition": 1018, "traffic": 1026, "trail": [378, 985], "train": [2, 43, 44, 45, 46, 47, 49, 50, 52, 61, 63, 64, 66, 67, 68, 69, 89, 91, 97, 98, 102, 103, 107, 115, 116, 118, 120, 123, 124, 125, 126, 132, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 151, 154, 155, 156, 159, 165, 170, 171, 172, 175, 176, 177, 178, 179, 183, 185, 186, 187, 188, 189, 191, 197, 198, 199, 200, 202, 204, 205, 206, 208, 209, 212, 213, 214, 217, 219, 220, 221, 224, 226, 227, 230, 239, 242, 244, 248, 257, 259, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 289, 290, 293, 296, 297, 298, 299, 301, 302, 303, 305, 306, 307, 310, 312, 314, 315, 319, 322, 326, 328, 329, 330, 333, 334, 336, 339, 346, 347, 353, 354, 357, 359, 363, 364, 365, 368, 371, 373, 378, 381, 388, 389, 390, 404, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 420, 437, 440, 441, 443, 444, 447, 449, 451, 452, 453, 454, 459, 465, 469, 470, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 488, 489, 494, 497, 498, 499, 501, 505, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 628, 629, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 688, 689, 690, 692, 693, 697, 704, 742, 789, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 870, 871, 874, 875, 878, 879, 883, 884, 885, 886, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 919, 975, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1026, 1028, 1030, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "train_0": 43, "train_4": 43, "train_accuraci": [257, 284], "train_auc": 828, "train_ax": 125, "train_balanced_accuraci": 284, "train_cover_std": 50, "train_dataset": [186, 370], "train_errors_with": 144, "train_errors_without": 144, "train_fract": 1033, "train_idx": [52, 186, 390], "train_import": 188, "train_index": [257, 332, 412, 802, 803, 806, 808, 809, 810, 811, 814, 816, 817, 818, 819, 820, 821, 822], "train_indx": 412, "train_pr": 144, "train_prec_macro": 412, "train_r2": 828, "train_rec_macro": 412, "train_result": 188, "train_sampl": [64, 227, 228], "train_scor": [220, 316, 347, 355, 807, 824, 828, 829, 832, 997], "train_score_": [147, 415, 560, 561, 562, 563], "train_set": 406, "train_siz": [44, 46, 49, 134, 153, 171, 191, 228, 245, 249, 272, 283, 321, 324, 347, 803, 807, 818, 821, 829, 831, 997, 1033, 1034, 1039, 1040], "train_size_ab": 829, "train_size_idx": 347, "train_sizes_ab": 829, "train_test_s": 245, "train_test_split": [2, 44, 45, 46, 49, 52, 61, 62, 64, 67, 68, 103, 107, 116, 125, 134, 139, 141, 144, 145, 146, 147, 148, 149, 150, 153, 164, 165, 185, 186, 188, 189, 191, 198, 208, 209, 212, 219, 220, 227, 228, 230, 240, 249, 252, 253, 263, 264, 267, 268, 273, 277, 279, 283, 289, 293, 298, 299, 305, 307, 308, 312, 314, 315, 317, 319, 320, 321, 326, 327, 333, 355, 358, 359, 381, 389, 404, 409, 412, 415, 437, 438, 559, 561, 568, 569, 698, 699, 701, 703, 800, 801, 823, 833, 836, 854, 862, 863, 865, 915, 916, 991, 992, 1002, 1004, 1005, 1010, 1012, 1017, 1030, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1042, 1046, 1050, 1051], "train_tim": [227, 245, 351, 352], "trainabl": 378, "traine": 1026, "training_data": 170, "training_data_": 1043, "training_idx": 178, "training_indic": 177, "training_noisy_target": 170, "training_sample_indic": 170, "training_tim": [144, 351], "training_time_early_stop": 144, "training_time_ful": 144, "trajectori": 138, "tran": 110, "trans_data": 234, "transact": [96, 264, 327, 373, 408, 410, 419, 421, 444, 448, 475, 535, 539, 541, 548, 564, 645, 665, 686, 687, 726, 727, 757, 770, 998, 1002], "transax": [79, 95, 236, 239, 257, 298, 312], "transcript": 376, "transcriptom": 693, "transduc": 330, "transduct": [390, 408, 900, 901, 1022], "transduction_": [329, 330, 331, 900, 901, 902], "transfer": [149, 399, 404, 998, 1022], "transform": [2, 7, 20, 23, 35, 37, 43, 44, 45, 47, 49, 53, 62, 79, 80, 81, 84, 87, 90, 95, 101, 105, 106, 116, 122, 123, 125, 126, 128, 129, 133, 138, 140, 143, 153, 154, 165, 176, 182, 183, 186, 187, 188, 191, 205, 212, 213, 220, 226, 228, 230, 233, 236, 239, 241, 242, 244, 246, 247, 249, 253, 257, 266, 267, 268, 271, 279, 289, 290, 292, 298, 299, 300, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 324, 326, 327, 340, 343, 344, 351, 353, 359, 370, 371, 372, 373, 376, 378, 381, 385, 390, 399, 402, 404, 406, 408, 410, 411, 412, 413, 415, 416, 417, 418, 424, 429, 432, 437, 441, 442, 443, 445, 447, 449, 452, 464, 465, 466, 467, 468, 482, 483, 484, 485, 488, 489, 497, 504, 509, 510, 515, 516, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 551, 558, 560, 562, 565, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 637, 639, 640, 641, 642, 643, 654, 659, 664, 674, 677, 685, 689, 690, 691, 692, 693, 695, 702, 703, 714, 754, 755, 786, 801, 804, 805, 815, 831, 834, 840, 849, 854, 857, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 903, 905, 907, 910, 911, 924, 926, 938, 941, 943, 991, 992, 994, 996, 998, 999, 1002, 1003, 1006, 1016, 1017, 1019, 1021, 1022, 1023, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "transform_algorithm": [123, 129, 532, 538, 543, 1049], "transform_alpha": [123, 129, 532, 538, 543, 1046], "transform_dur": 290, "transform_func": 271, "transform_list": 864, "transform_max_it": [532, 538, 539, 543, 1043], "transform_method": 413, "transform_n_nonzero_coef": [123, 129, 532, 538, 543], "transform_n_nozero_coef": 129, "transform_output": [253, 264, 317, 468, 903, 1048, 1049], "transformed_grid": 152, "transformedtargetregressor": [2, 107, 186, 212, 388, 399, 409, 594, 595, 598, 1003, 1041, 1043, 1046, 1051], "transformedtargetregressortransformedtargetregressor": 186, "transformer_": [246, 465], "transformer_list": [106, 409, 864, 867, 992, 1044, 1045], "transformer_nam": [290, 464], "transformer_tag": [924, 938], "transformer_weight": [102, 464, 467, 864, 1038, 1045], "transformermixin": [2, 246, 290, 378, 390, 465, 1041, 1048, 1049, 1050], "transformers_": [464, 467, 1050, 1051], "transformertag": [2, 924, 938], "transfus": 240, "transit": [55, 347, 380, 402, 1044], "transitive_target": 55, "translat": [107, 378, 418, 528, 615, 874, 875, 891, 999, 1002, 1026], "transluc": 159, "transpar": [67, 312, 986, 1026], "transpos": [62, 270, 420, 539, 541, 548, 661, 662, 663, 664, 789, 949, 987, 994, 1002, 1014, 1033, 1047], "transposit": 949, "trapezoid": [2, 277, 707, 708, 1002], "travel": 0, "travers": [358, 1005, 1009, 1051], "travi": [1033, 1041], "treat": [43, 45, 103, 143, 154, 181, 186, 212, 279, 316, 321, 326, 332, 359, 376, 388, 390, 405, 415, 416, 442, 562, 563, 589, 590, 592, 608, 609, 633, 639, 646, 672, 675, 730, 731, 739, 755, 784, 785, 788, 789, 874, 875, 881, 882, 885, 886, 890, 893, 894, 896, 905, 906, 958, 992, 994, 998, 1002, 1003, 1009, 1012, 1016, 1018, 1037, 1045, 1049, 1050], "treatment": [112, 185, 370, 407, 413, 469, 474, 1018], "tree": [2, 43, 46, 52, 63, 64, 67, 76, 79, 88, 95, 124, 126, 133, 136, 137, 138, 140, 143, 144, 145, 146, 147, 150, 151, 153, 154, 155, 157, 168, 178, 181, 187, 189, 197, 220, 221, 233, 246, 248, 249, 250, 267, 274, 276, 287, 289, 290, 293, 295, 303, 310, 311, 315, 320, 321, 323, 359, 363, 371, 373, 382, 389, 390, 393, 406, 407, 408, 414, 419, 437, 441, 442, 443, 444, 445, 446, 448, 450, 457, 463, 497, 501, 505, 515, 516, 520, 545, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 632, 633, 634, 635, 659, 689, 693, 703, 704, 712, 743, 749, 789, 791, 807, 822, 828, 829, 831, 840, 845, 846, 847, 848, 849, 850, 851, 853, 855, 856, 857, 866, 869, 878, 913, 914, 915, 916, 917, 918, 919, 944, 992, 999, 1002, 1003, 1008, 1009, 1021, 1022, 1023, 1024, 1028, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "tree_": [319, 355, 358, 850, 913, 914, 915, 916, 1050], "tree_copi": [845, 846], "tree_disp": 250, "tree_importance_sorted_idx": 189, "tree_optim": 287, "tree_preprocessor": [154, 212], "tree_stat": [845, 846], "treelit": 1021, "trein": 1036, "tremend": [316, 415], "trend": [151, 175, 187, 242, 306, 1026, 1040], "trent": [1026, 1039], "trevor": [168, 200, 324, 373, 629, 657, 722, 724, 725, 992, 998, 1014, 1037, 1038, 1041, 1042, 1043, 1045], "trevorstephen": [1037, 1039], "tri": [99, 128, 232, 283, 299, 344, 364, 378, 381, 388, 391, 406, 449, 451, 453, 632, 633, 634, 671, 693, 699, 701, 703, 815, 1007, 1035, 1041, 1045, 1051], "triag": [0, 376, 379, 391], "trial": [43, 275, 447, 449, 460, 672, 798, 799, 998, 1039], "triangl": [390, 413, 443, 447, 459, 700, 1000, 1005], "triangular": [408, 463, 612, 999], "tribe": 371, "trick": [2, 170, 245, 300, 344, 353, 362, 365, 379, 388, 409, 583, 590, 644, 673, 994, 995, 1006, 1016, 1017, 1028, 1034, 1042, 1050], "tricki": [406, 999], "trickiest": 376, "trigg": 567, "trigger": [103, 104, 376, 380, 390, 402, 409, 862, 863, 865, 866, 931, 932, 949, 998, 1041, 1047, 1048], "triglycerid": [168, 373], "trim": [227, 408, 845, 846], "trimeta": 1044, "trinh": 1048, "tripl": 381, "triplet": 510, "tripramudya": 1049, "trishnendu": 1041, "tristan": 998, "triu": 51, "trivial": [48, 214, 264, 355, 376, 408, 819, 907, 910, 999, 1022, 1033], "troillard": [1049, 1050], "tropp": [536, 542], "troubl": [66, 416], "troubleshoot": 416, "troyanskaya": [629, 992], "true": [2, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 63, 64, 66, 68, 70, 72, 79, 82, 83, 86, 87, 88, 90, 91, 93, 96, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 115, 118, 120, 121, 122, 123, 125, 126, 130, 132, 134, 138, 140, 143, 145, 146, 148, 149, 150, 151, 154, 155, 157, 159, 160, 164, 167, 170, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 198, 200, 201, 202, 204, 206, 208, 209, 212, 214, 215, 216, 219, 220, 226, 227, 228, 230, 232, 235, 236, 239, 240, 243, 245, 246, 247, 248, 249, 252, 253, 255, 258, 260, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 295, 296, 299, 303, 305, 306, 307, 308, 311, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 330, 332, 333, 334, 343, 344, 346, 347, 348, 351, 352, 353, 355, 356, 358, 359, 363, 364, 369, 371, 372, 374, 376, 377, 378, 381, 382, 383, 385, 389, 390, 393, 399, 402, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 416, 417, 418, 420, 421, 422, 423, 425, 427, 428, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 516, 520, 523, 524, 525, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 706, 708, 709, 710, 712, 713, 714, 715, 716, 719, 720, 721, 725, 727, 728, 729, 730, 731, 732, 734, 735, 736, 739, 740, 741, 742, 743, 744, 753, 755, 757, 762, 768, 770, 779, 783, 784, 785, 786, 787, 788, 789, 790, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 815, 819, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 921, 922, 924, 925, 929, 930, 931, 932, 938, 943, 944, 949, 950, 962, 963, 964, 966, 967, 971, 972, 973, 974, 982, 987, 989, 990, 991, 992, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "true_": [200, 538, 637], "true_coef": [185, 198, 208, 283, 647, 648, 653, 661, 662, 663, 682, 683, 684], "true_cov": [469, 471, 472, 478], "true_den": 295, "true_fac": 248, "true_fun": 285, "true_h": 323, "true_k": 352, "true_label": [325, 329, 330], "true_nam": 45, "true_relev": [727, 757], "true_w": 323, "true_weight": 193, "trujillo": [1047, 1048], "truli": [273, 365, 713, 1002], "truncat": [2, 105, 152, 233, 385, 535, 536, 540, 541, 542, 545, 677, 679, 727, 757, 798, 854, 918, 949, 991, 1001, 1002, 1016, 1027, 1028, 1039, 1041], "truncate_mod": 76, "truncatedsvd": [2, 152, 233, 352, 413, 535, 536, 540, 541, 542, 693, 864, 867, 1035, 1040, 1044, 1045, 1047, 1051], "truong": 1039, "trust": [0, 51, 63, 103, 104, 112, 134, 139, 141, 150, 151, 154, 157, 165, 175, 186, 187, 188, 189, 195, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 391, 402, 406, 1047], "trustworthi": [2, 323, 1041, 1042, 1047, 1048, 1049, 1050], "truth": [2, 27, 58, 68, 75, 82, 90, 91, 94, 109, 113, 116, 123, 127, 150, 178, 198, 207, 212, 213, 249, 261, 273, 352, 390, 408, 704, 705, 706, 709, 713, 714, 715, 716, 718, 719, 722, 724, 725, 727, 729, 730, 731, 735, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 784, 785, 786, 787, 788, 791, 792, 796, 797, 1002, 1041, 1047], "truthi": [2, 962], "try": [43, 45, 50, 51, 52, 54, 62, 63, 74, 86, 103, 104, 123, 134, 139, 140, 141, 142, 149, 150, 151, 154, 157, 165, 170, 175, 176, 182, 185, 186, 187, 188, 191, 193, 195, 202, 209, 240, 241, 242, 246, 250, 251, 252, 253, 256, 257, 260, 264, 268, 270, 271, 277, 282, 284, 287, 290, 303, 308, 316, 320, 321, 323, 324, 326, 331, 342, 347, 351, 352, 357, 358, 371, 374, 375, 376, 378, 381, 382, 384, 388, 390, 394, 396, 399, 402, 408, 411, 412, 415, 416, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 504, 568, 578, 590, 659, 674, 676, 690, 694, 800, 801, 804, 805, 813, 815, 823, 826, 827, 828, 830, 883, 885, 888, 890, 891, 892, 893, 894, 895, 896, 905, 924, 930, 985, 991, 998, 999, 1008, 1017, 1018, 1022, 1025, 1026, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050], "tr\u00e9segni": [0, 1035], "ts_cv": [43, 52, 149], "tscv": [412, 822], "tseng": 408, "tsetogl": 1048, "tsilhouett": 91, "tslearn": 1021, "tsne": [2, 183, 232, 233, 234, 236, 237, 291, 292, 323, 390, 422, 432, 497, 689, 690, 691, 849, 853, 866, 975, 999, 1005, 1023, 1036, 1038, 1039, 1040, 1041, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "tsne_param": 290, "tsoumaka": [721, 735, 741, 1002], "tspeng": [1048, 1049], "tsuga": 1046, "tsujii": 1016, "tsukada": 1045, "tsuruoka": 1016, "tsutomu": 1044, "tt": [155, 265, 465], "ttang131": 1043, "ttime": 91, "tttthomasssss": 1037, "tube": [911, 1017], "tue": [43, 52, 149, 187, 1039], "tuft": 449, "tuhin": 1051, "tuk": 1051, "tulio": [1041, 1042], "tulken": 1043, "tulloch": [1036, 1037], "tumor": [168, 373, 407], "tune": [2, 43, 64, 79, 88, 103, 125, 134, 140, 149, 167, 168, 170, 181, 183, 187, 202, 216, 217, 229, 236, 240, 249, 262, 263, 273, 274, 275, 277, 287, 292, 311, 332, 340, 344, 347, 351, 359, 363, 364, 365, 389, 390, 403, 406, 408, 412, 415, 417, 418, 452, 462, 497, 552, 560, 561, 562, 595, 614, 615, 616, 618, 620, 621, 623, 624, 626, 644, 659, 660, 691, 695, 701, 703, 719, 743, 785, 788, 800, 801, 817, 823, 828, 831, 861, 866, 885, 903, 910, 996, 997, 998, 999, 1001, 1002, 1005, 1006, 1008, 1016, 1017, 1021, 1023, 1028, 1033, 1047, 1049, 1051], "tuned_classifi": 327, "tuned_model": [264, 284], "tuned_model_coef": 284, "tuned_param": 46, "tuned_paramet": [109, 159, 268], "tunedthresholdclassifiercv": [2, 264, 284, 407, 800, 1051], "tunedthresholdclassifiercvifittedtunedthresholdclassifiercv": 264, "tupl": [47, 82, 88, 129, 187, 230, 369, 370, 371, 390, 412, 420, 433, 451, 453, 464, 467, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 506, 509, 511, 512, 513, 514, 515, 523, 534, 562, 563, 568, 569, 570, 571, 583, 584, 585, 588, 589, 590, 592, 628, 633, 634, 635, 712, 713, 720, 743, 782, 784, 798, 801, 815, 828, 845, 846, 864, 865, 875, 876, 880, 883, 891, 895, 907, 908, 909, 910, 911, 920, 932, 933, 935, 940, 941, 942, 943, 967, 968, 985, 990, 1009, 1039, 1040, 1044, 1045, 1046, 1051], "tur": 1051, "turn": [2, 30, 43, 68, 109, 181, 182, 186, 198, 227, 228, 244, 270, 294, 327, 353, 363, 364, 365, 371, 388, 390, 391, 408, 409, 411, 413, 416, 417, 418, 582, 583, 590, 608, 609, 834, 838, 907, 910, 934, 992, 996, 1004, 1007, 1012, 1026, 1038, 1040, 1041, 1046], "turquois": [124, 128, 129, 148, 218, 229, 235, 257, 258, 277], "tushar": 1051, "tutori": [112, 159, 160, 161, 202, 214, 230, 270, 376, 377, 382, 384, 402, 408, 452, 462, 692, 1017, 1028, 1036], "tuveri": 1048, "tuzova": 1041, "tv": 91, "tw": [191, 370, 487, 509, 510, 659, 1017], "tweak": [2, 113, 246, 412, 967, 1001, 1044], "tweedi": [2, 183, 192, 212, 464, 497, 553, 649, 670, 681, 707, 725, 746, 748, 750, 751, 753, 831, 866, 869, 870, 878, 885, 998, 1023, 1043, 1044, 1046], "tweedie_pow": 230, "tweedieregressor": [2, 43, 320, 323, 649, 670, 998, 1044, 1047, 1048], "tweet": 1026, "twelfth": 697, "twenti": [57, 243, 373, 405, 408], "twice": [64, 264, 282, 284, 351, 353, 378, 418, 620, 731, 733, 951, 1042, 1050], "twine": 380, "twinx": 332, "twister": 1044, "twitter": 380, "two": [2, 37, 43, 46, 48, 50, 54, 58, 61, 63, 66, 70, 72, 74, 75, 78, 88, 93, 97, 102, 103, 107, 111, 115, 116, 118, 120, 122, 123, 125, 126, 128, 133, 134, 135, 142, 143, 144, 146, 149, 150, 151, 152, 155, 165, 168, 170, 171, 172, 173, 176, 177, 181, 182, 183, 186, 187, 188, 193, 197, 198, 200, 202, 203, 204, 212, 213, 214, 220, 221, 224, 229, 230, 234, 236, 237, 239, 244, 246, 247, 249, 255, 256, 257, 259, 260, 261, 264, 265, 267, 271, 277, 287, 293, 295, 298, 299, 301, 303, 310, 312, 315, 319, 320, 322, 323, 327, 331, 336, 337, 340, 341, 342, 344, 348, 351, 352, 353, 356, 357, 359, 369, 370, 371, 372, 373, 374, 376, 378, 380, 382, 383, 384, 388, 390, 391, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 441, 442, 443, 444, 445, 447, 450, 451, 452, 453, 457, 459, 464, 469, 470, 471, 472, 473, 474, 475, 476, 488, 490, 491, 493, 494, 495, 497, 499, 501, 502, 503, 504, 505, 506, 508, 511, 515, 520, 523, 537, 539, 541, 545, 548, 550, 551, 554, 561, 571, 582, 585, 591, 592, 593, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 621, 622, 625, 629, 632, 633, 640, 644, 646, 671, 672, 674, 693, 700, 704, 705, 706, 713, 716, 717, 720, 722, 723, 724, 725, 732, 733, 736, 737, 739, 742, 744, 755, 756, 758, 764, 765, 772, 775, 778, 779, 780, 781, 782, 786, 787, 795, 796, 797, 798, 834, 845, 846, 847, 848, 849, 851, 853, 855, 856, 857, 862, 863, 869, 870, 877, 878, 879, 880, 899, 900, 901, 905, 906, 913, 915, 916, 964, 980, 981, 987, 991, 992, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1023, 1030, 1033, 1034, 1035, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "two_d_arrai": 922, "two_d_label": 925, "two_mean": 79, "two_point_correl": [845, 846], "twoclass_output": 136, "twosigmajab": 1041, "twx": 51, "tx": 411, "tx_k": [411, 996], "txn": 51, "txt": [351, 370, 494, 504], "ty": 411, "ty_k": 411, "tyagi": 1047, "tygert": [536, 542, 949], "tyler": [1040, 1046, 1047, 1048], "type": [2, 46, 52, 86, 87, 98, 101, 102, 112, 118, 126, 129, 142, 143, 145, 175, 182, 183, 185, 186, 187, 191, 198, 212, 214, 241, 246, 251, 253, 254, 256, 257, 260, 261, 264, 265, 271, 276, 277, 279, 280, 281, 283, 284, 287, 300, 316, 326, 344, 351, 353, 358, 359, 364, 369, 370, 371, 373, 376, 379, 380, 381, 382, 389, 394, 396, 402, 405, 409, 416, 432, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 497, 509, 510, 516, 568, 573, 582, 583, 589, 590, 592, 601, 605, 618, 628, 630, 631, 639, 657, 659, 673, 675, 680, 688, 690, 693, 694, 700, 702, 708, 715, 717, 730, 731, 734, 739, 784, 785, 788, 789, 798, 799, 801, 807, 815, 824, 829, 831, 832, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 865, 866, 867, 870, 872, 878, 879, 885, 886, 903, 907, 908, 909, 910, 911, 926, 927, 929, 931, 932, 935, 940, 941, 964, 965, 988, 992, 994, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1012, 1014, 1018, 1023, 1025, 1026, 1033, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "type_check": 380, "type_filt": 941, "type_of_target": [2, 390, 872, 886, 1003, 1047, 1048, 1050, 1051], "type_of_target_": 886, "typed_ndarrai": 376, "typeerror": [246, 322, 381, 712, 935, 958, 985, 1040, 1041, 1044, 1046, 1050], "typic": [25, 62, 64, 124, 132, 144, 191, 198, 212, 216, 230, 245, 272, 273, 277, 279, 280, 296, 297, 321, 340, 352, 363, 369, 370, 371, 374, 378, 379, 385, 389, 390, 402, 404, 406, 408, 409, 412, 413, 415, 416, 418, 443, 447, 449, 497, 542, 552, 556, 557, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 630, 639, 641, 644, 655, 656, 657, 672, 683, 684, 713, 847, 855, 872, 879, 883, 886, 948, 949, 954, 958, 961, 986, 991, 995, 998, 999, 1001, 1002, 1003, 1004, 1008, 1010, 1026, 1042, 1046, 1049, 1050], "typo": [376, 391, 399, 1033], "tzu": 1037, "t\u00e9l\u00e9com": 0, "u": [43, 49, 50, 51, 52, 55, 70, 83, 85, 89, 120, 126, 127, 143, 144, 149, 170, 179, 185, 186, 187, 213, 216, 220, 230, 233, 236, 243, 246, 252, 253, 256, 257, 261, 264, 265, 270, 273, 277, 283, 284, 316, 344, 351, 358, 364, 371, 376, 380, 382, 384, 388, 394, 399, 405, 408, 411, 413, 415, 416, 431, 463, 465, 482, 483, 484, 532, 538, 546, 547, 551, 553, 555, 557, 559, 561, 563, 566, 569, 571, 589, 590, 592, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 682, 685, 690, 694, 705, 721, 741, 756, 838, 839, 848, 856, 863, 885, 899, 906, 908, 911, 914, 916, 949, 994, 996, 1001, 1002, 1009, 1012, 1026, 1030, 1043], "u2uwz2": [168, 373], "u_": [405, 482, 483, 484], "u_1": [405, 994], "u_2": [405, 994], "u_i": [408, 482, 483, 484, 756], "u_init": 544, "u_k": [411, 413], "uai": 1014, "ubuntu": [363, 374, 382, 384], "uchida": 1043, "uci": [47, 168, 264, 315, 370, 373, 501, 503, 505, 511], "ucl": 1015, "ucla": 998, "udi": 1033, "udit": 1047, "ufmay": 1045, "ufunc": [186, 1050], "ugli": [221, 298, 301, 336], "ugo": 1047, "ugurcaliskan": 1037, "ugurthemast": [1036, 1037], "uhmann": 1046, "uieda": 1046, "uint": 1044, "uint32": [371, 498], "uint8": [86, 123, 370, 498, 507, 508, 1045], "uk": 1015, "ulloa": 1039, "ulrik": [408, 452, 462, 692], "ulterior": 52, "ultim": [88, 236, 377], "umar": [1041, 1042], "umass": [45, 57, 371], "umberto": 1045, "umbrella": 407, "umpi": 416, "un": [51, 376, 406, 416, 420, 534, 590, 796, 868, 877, 888, 892, 1042], "unabl": [51, 63, 103, 104, 139, 141, 150, 151, 154, 157, 165, 175, 185, 186, 187, 188, 195, 198, 212, 240, 241, 242, 246, 250, 251, 252, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 324, 326, 331, 357, 358, 365, 885, 1012, 1042], "unadjust": [408, 1002, 1045], "unaffect": 1005, "unalt": 1002, "unambigu": [279, 1003, 1039], "unanim": 391, "unavail": [390, 659, 660, 962, 1040, 1046], "unbalanc": [2, 183, 273, 335, 338, 341, 412, 513, 632, 910, 936, 937, 991, 1016, 1023], "unbias": [109, 406, 410, 413, 437, 551, 657, 673, 675, 688, 998], "unbound": [72, 1001, 1047, 1051], "uncalibr": [61, 62, 63, 437], "uncent": 195, "uncertain": [270, 330, 375], "uncertainti": [62, 149, 170, 177, 193, 272, 406, 408, 568, 569, 644, 865, 992, 1014], "uncertainty_index": [329, 330], "unchang": [176, 186, 230, 277, 415, 432, 437, 442, 443, 444, 445, 446, 447, 449, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 611, 612, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 693, 764, 800, 802, 803, 808, 810, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 852, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 990, 1005, 1041, 1047, 1049], "unclaim": 379, "unclear": [375, 376, 502], "unclust": 446, "uncommon": [410, 659, 905, 1017], "uncompress": [47, 509, 510], "unconstrain": [149, 151, 187, 320, 326, 371, 1016], "uncorrect": [270, 596, 599], "uncorrel": [2, 276, 372, 529, 535, 542, 1002], "uncorrupt": 44, "uncov": [130, 696], "undefin": [52, 273, 390, 713, 730, 739, 784, 970, 1002, 1041, 1045, 1049], "undefinedmetricwarn": [2, 308, 730, 731, 784, 785, 788, 1042], "under": [2, 43, 46, 50, 61, 62, 64, 76, 100, 109, 110, 127, 143, 146, 187, 201, 212, 239, 249, 270, 277, 279, 280, 311, 325, 370, 376, 378, 380, 382, 384, 390, 394, 402, 406, 408, 410, 412, 413, 416, 417, 446, 451, 453, 470, 471, 472, 473, 474, 475, 476, 492, 533, 540, 542, 544, 655, 656, 657, 703, 707, 708, 709, 716, 755, 789, 790, 798, 799, 850, 957, 998, 999, 1000, 1002, 1005, 1012, 1016, 1017, 1018, 1021, 1022, 1033, 1035, 1036, 1038, 1041, 1045], "underdetermin": 198, "underestim": [52, 146, 187, 212, 230, 270, 376], "underfit": [43, 70, 146, 170, 183, 188, 213, 216, 262, 283, 305, 316, 347, 415, 658, 801, 804, 805, 815, 827, 828, 865, 880, 997, 998, 1023], "underflow": [1041, 1046], "undergo": 276, "undergrad": 1026, "underli": [64, 89, 111, 153, 168, 186, 189, 213, 215, 216, 246, 264, 275, 294, 295, 344, 357, 364, 376, 388, 390, 393, 399, 404, 406, 408, 410, 412, 413, 414, 415, 417, 418, 437, 451, 452, 453, 462, 464, 465, 471, 472, 478, 525, 556, 557, 565, 566, 568, 569, 570, 571, 594, 595, 598, 603, 659, 660, 666, 669, 674, 676, 681, 692, 696, 800, 801, 804, 805, 815, 823, 826, 827, 828, 833, 834, 835, 836, 837, 838, 839, 848, 850, 902, 905, 913, 914, 915, 916, 966, 990, 998, 999, 1003, 1008, 1015, 1017, 1035, 1037, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1050, 1051], "underrepres": 376, "underscor": [240, 353, 378, 390, 985, 1033, 1043, 1046], "underset": [413, 998, 1005, 1018], "understand": [43, 48, 52, 76, 134, 175, 183, 187, 246, 264, 265, 268, 284, 321, 322, 337, 344, 351, 354, 355, 359, 375, 376, 377, 382, 388, 393, 408, 415, 416, 505, 831, 862, 863, 913, 914, 915, 916, 919, 991, 992, 999, 1001, 1018, 1020, 1021, 1023, 1026, 1033, 1047], "understood": [271, 376, 408, 958], "undertak": 388, "undesir": [90, 171, 418, 823], "undistinguish": 412, "undistort": 123, "undo": [271, 875, 1037], "undocu": 1040, "unequ": [90, 1041], "uneth": 185, "uneven": [85, 265, 408, 412], "unevenli": [90, 212, 265], "unexpect": [90, 246, 359, 376, 381, 384, 394, 402, 536, 697, 1002, 1017, 1035, 1041, 1042, 1045, 1047, 1049, 1051], "unexpectedli": [390, 1041], "unfair": 359, "unfinish": [375, 376], "unfit": [2, 89, 409, 433, 464, 570, 571, 603, 612, 1041, 1043, 1050], "unfold": [125, 379, 999], "unfortun": [146, 185, 186, 230, 384, 388, 415, 509, 510], "unhandl": 1042, "unhelp": 376, "unicod": [353, 416, 487, 504, 583, 589, 590, 592, 966, 1033, 1041, 1045], "unicodedata": [589, 590, 592], "unicodedecodeerror": [416, 589, 590, 592], "unifi": [287, 377, 385, 388, 389, 415, 638, 1021, 1033], "unifom": 293, "uniform": [2, 58, 67, 72, 86, 145, 146, 150, 164, 171, 176, 179, 193, 194, 226, 237, 239, 242, 278, 293, 296, 297, 302, 305, 311, 313, 314, 317, 323, 325, 339, 378, 381, 402, 408, 438, 439, 552, 570, 571, 611, 612, 629, 640, 650, 651, 655, 669, 677, 678, 679, 700, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 805, 813, 815, 840, 841, 844, 847, 848, 855, 856, 870, 882, 884, 894, 936, 951, 991, 992, 1001, 1002, 1005, 1039, 1041, 1043, 1047, 1049], "uniform_averag": [431, 465, 482, 483, 484, 555, 557, 559, 561, 563, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 722, 724, 729, 746, 747, 749, 751, 752, 754, 786, 791, 792, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 1002, 1042], "uniform_labelings_scor": 72, "uniformli": [72, 140, 146, 163, 239, 255, 319, 378, 517, 518, 519, 552, 643, 805, 813, 815, 884, 991, 992, 1002, 1005, 1012, 1037, 1042], "unigram": [271, 371, 416, 589, 590, 592, 1040], "unilev": 51, "unimod": [239, 474], "unimport": [417, 1010], "uninform": [62, 64, 317, 372, 381, 416, 991, 998, 1041], "uniniti": 384, "uninstal": 374, "unintention": 1012, "unintuit": 90, "union": [102, 186, 409, 739, 755, 864, 1040], "union_not_memb": 186, "uniqu": [2, 43, 61, 66, 77, 81, 90, 91, 96, 100, 105, 141, 147, 148, 149, 186, 188, 198, 227, 230, 257, 279, 299, 316, 317, 325, 332, 351, 352, 353, 370, 378, 385, 390, 408, 409, 412, 415, 416, 440, 450, 454, 456, 464, 467, 497, 550, 551, 552, 554, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 611, 634, 635, 636, 667, 669, 677, 698, 710, 712, 755, 783, 801, 803, 815, 828, 833, 834, 837, 843, 852, 855, 857, 862, 864, 876, 878, 879, 886, 889, 905, 907, 913, 914, 915, 916, 936, 949, 964, 965, 998, 1003, 1012, 1026, 1041, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "unique_label": [2, 82, 88, 352, 378, 385], "unit": [2, 63, 102, 111, 186, 191, 212, 230, 295, 307, 310, 327, 352, 371, 376, 378, 382, 384, 385, 413, 416, 420, 464, 489, 490, 520, 525, 533, 534, 535, 542, 543, 590, 591, 592, 608, 609, 612, 659, 660, 677, 686, 700, 771, 852, 861, 862, 863, 869, 875, 877, 881, 883, 885, 891, 892, 893, 895, 896, 905, 906, 998, 1000, 1001, 1002, 1007, 1012, 1018, 1037, 1041, 1047, 1048], "unit_eig_vec": 255, "unit_vari": [883, 895, 1045], "unitari": 949, "uniti": 30, "univ": [690, 694, 999], "univ_select": 106, "univari": [2, 18, 48, 49, 71, 84, 104, 106, 162, 163, 165, 183, 196, 211, 227, 335, 368, 408, 409, 416, 445, 505, 526, 531, 593, 596, 597, 599, 600, 601, 603, 606, 607, 608, 609, 610, 628, 629, 630, 631, 646, 801, 806, 827, 831, 865, 866, 875, 880, 884, 885, 905, 910, 998, 1017, 1019, 1023, 1024, 1028, 1033, 1039], "univers": [0, 178, 186, 351, 371, 373, 379, 408, 413, 416, 591, 789, 840, 844, 900, 998, 1000, 1002, 1004], "unix": 416, "unknown": [52, 89, 186, 246, 270, 329, 331, 365, 371, 390, 402, 405, 416, 872, 878, 879, 964, 1001, 1012, 1037, 1041, 1045, 1046], "unknown_typ": 402, "unknown_v": 154, "unknown_valu": [143, 154, 188, 249, 316, 879, 1012, 1045, 1047, 1048], "unlabel": [38, 45, 247, 321, 329, 330, 331, 333, 334, 390, 408, 900, 901, 902, 1001, 1045], "unlabeled_indic": 330, "unlabeled_set": 329, "unless": [185, 246, 256, 261, 376, 379, 388, 390, 402, 406, 408, 411, 419, 437, 444, 446, 448, 450, 452, 457, 458, 461, 464, 467, 472, 489, 497, 509, 510, 532, 536, 537, 538, 540, 543, 544, 546, 547, 548, 549, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 595, 603, 608, 609, 611, 612, 633, 635, 640, 647, 648, 652, 653, 654, 656, 658, 659, 660, 662, 664, 666, 667, 669, 677, 680, 689, 690, 691, 692, 693, 694, 695, 710, 715, 775, 779, 782, 801, 804, 805, 807, 815, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 847, 848, 851, 853, 855, 856, 858, 859, 862, 863, 864, 867, 886, 890, 891, 893, 894, 895, 896, 900, 901, 913, 914, 915, 916, 924, 927, 931, 932, 949, 998, 1001, 1003, 1033, 1035, 1039, 1041, 1044, 1045, 1050, 1051], "unlik": [88, 89, 140, 186, 187, 232, 234, 260, 310, 338, 376, 378, 382, 388, 390, 399, 402, 410, 412, 413, 416, 446, 450, 536, 651, 652, 655, 656, 657, 683, 684, 786, 822, 845, 846, 885, 896, 908, 998, 1001, 1002, 1009, 1017, 1033, 1039], "unlimit": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "unlucki": 359, "unmaintain": 1033, "unmarri": 186, "unmeaning": 1040, "unmix": [121, 420, 534], "unmixing_matrix": 534, "unmodifi": [378, 390], "unnecessari": [140, 255, 381, 428, 443, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 706, 1005, 1012, 1022, 1026, 1036, 1038, 1043, 1044, 1046, 1049], "unnecessarili": [236, 1040, 1043], "unnorm": [390, 537, 999, 1039, 1040], "unobserv": [149, 185, 186, 413], "unord": [408, 415, 1012], "unpack": 378, "unpen": [406, 649, 670, 681, 998], "unpickl": [2, 390, 577, 845, 846, 1039, 1045, 1049], "unpleas": 1035, "unpract": 1001, "unprefix": 1039, "unprocess": [450, 589, 590, 592], "unprotect": 967, "unprun": [558, 559, 565, 566, 913, 914, 915, 916], "unquot": 230, "unrealist": 371, "unreason": [230, 412], "unreg": 345, "unregular": [878, 901, 1042], "unrel": [316, 364, 376, 381, 384, 416, 516], "unreli": [264, 409], "unrepresent": 920, "unrestrict": 494, "unrol": 236, "unrot": 130, "unsaf": 535, "unsampl": 994, "unscal": [310, 315, 998, 1002, 1041, 1047], "unscaled_clf": 315, "unseen": [109, 144, 165, 202, 216, 220, 296, 344, 365, 368, 378, 389, 390, 408, 412, 851, 882, 894, 993, 1002, 1008, 1010, 1012, 1018, 1036, 1041, 1045], "unseen_featur": [416, 582], "unset": [364, 390, 1041], "unsetmetadatapassederror": 399, "unshad": 413, "unshifft": 678, "unshift": 909, "unsign": [86, 124, 371, 583, 966], "unsmooth": 414, "unsort": [1005, 1034, 1037, 1041], "unspecifi": [600, 601, 999], "unstabl": [74, 99, 186, 404, 408, 410, 411, 690, 694, 948, 949, 1018, 1037, 1038, 1040, 1045, 1047, 1049], "unstack": [230, 273], "unstructur": [53, 71, 74, 75, 76, 81, 183, 236, 307, 408, 441, 445, 463, 504, 531, 858, 1014, 1023, 1026, 1037], "unsuccess": 50, "unsupervis": [2, 6, 27, 34, 45, 51, 72, 82, 104, 105, 116, 120, 139, 152, 239, 247, 296, 297, 339, 351, 352, 359, 368, 371, 378, 389, 390, 408, 411, 413, 414, 415, 416, 417, 432, 442, 445, 533, 535, 537, 538, 540, 543, 544, 550, 564, 567, 568, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 629, 631, 635, 636, 639, 640, 641, 642, 643, 678, 801, 804, 805, 807, 815, 824, 829, 832, 847, 848, 851, 853, 854, 855, 856, 861, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 897, 898, 902, 909, 999, 1002, 1008, 1015, 1024, 1028, 1033, 1036, 1046, 1050], "unsupport": [399, 402, 494, 1041, 1046], "unsur": 906, "untangl": 125, "untar": 47, "unterthin": [1036, 1037, 1038], "until": [88, 168, 220, 282, 321, 323, 381, 390, 391, 405, 408, 412, 417, 509, 510, 558, 559, 560, 561, 565, 566, 567, 594, 647, 648, 653, 654, 659, 660, 661, 662, 663, 664, 667, 668, 669, 672, 677, 678, 679, 695, 798, 799, 804, 805, 862, 863, 902, 905, 913, 914, 915, 916, 976, 991, 998, 999, 1007, 1015, 1018, 1036, 1040, 1041, 1047], "untransform": [344, 464, 467, 1013], "untru": 1002, "untrust": 402, "untun": [146, 327], "unus": [126, 187, 232, 234, 463, 580, 764, 772, 991, 999, 1033, 1041, 1043, 1044, 1046, 1048], "unusu": [64, 405, 1008, 1012, 1041], "unveil": 1039, "unvendor": 1041, "unwant": [213, 351], "unweight": [182, 225, 463, 648, 654, 679, 708, 714, 730, 731, 739, 784, 785, 788, 789, 840, 841, 842, 843, 844, 992], "unwieldi": 876, "uoa": 898, "up": [2, 47, 50, 72, 79, 80, 81, 85, 88, 90, 95, 102, 111, 112, 118, 132, 139, 149, 182, 186, 187, 193, 198, 206, 213, 228, 229, 257, 264, 272, 275, 290, 303, 308, 311, 316, 323, 327, 330, 337, 344, 347, 351, 353, 365, 370, 371, 376, 380, 382, 383, 384, 385, 388, 390, 391, 406, 408, 413, 415, 416, 443, 447, 448, 449, 450, 452, 456, 459, 460, 461, 509, 510, 537, 550, 551, 558, 559, 560, 561, 562, 563, 565, 566, 567, 611, 628, 633, 634, 640, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 665, 682, 683, 684, 685, 693, 706, 770, 798, 799, 803, 804, 805, 807, 829, 879, 880, 883, 895, 913, 914, 915, 916, 919, 949, 952, 953, 991, 994, 998, 999, 1002, 1005, 1012, 1016, 1017, 1022, 1025, 1026, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "upadhyai": [1039, 1040, 1041, 1042], "upcast": [1043, 1047], "upcom": [175, 374], "updat": [47, 79, 95, 134, 140, 148, 244, 319, 353, 375, 376, 379, 384, 390, 402, 408, 413, 415, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 798, 799, 800, 801, 802, 803, 804, 805, 808, 810, 815, 819, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 976, 998, 1005, 1006, 1007, 1016, 1025, 1026, 1034, 1040, 1041, 1042, 1044, 1046, 1048, 1049, 1051, 1052], "update_environments_and_lock_fil": 376, "update_from": 297, "update_func": 297, "update_h": 548, "update_layout": [140, 271], "update_legend_marker_s": 297, "update_terminal_region": 1042, "upgrad": [319, 320, 321, 322, 323, 324, 325, 326, 327, 394, 1022, 1033, 1038, 1041], "upload": [370, 374, 380, 388, 672], "upload_d": 370, "upon": [230, 237, 246, 303, 371, 376, 388, 390, 402, 562, 563, 628, 631, 672, 790, 798, 799, 845, 846, 991, 998, 1018, 1047], "upper": [43, 46, 48, 61, 104, 107, 110, 111, 112, 122, 126, 136, 137, 138, 145, 146, 147, 148, 154, 156, 164, 174, 176, 179, 186, 207, 212, 218, 219, 222, 226, 229, 230, 243, 247, 248, 269, 270, 271, 284, 295, 296, 306, 315, 332, 339, 342, 344, 346, 408, 414, 463, 589, 590, 592, 596, 614, 615, 616, 618, 620, 621, 623, 624, 626, 633, 634, 636, 638, 651, 655, 678, 736, 789, 878, 879, 907, 908, 909, 935, 1001, 1002, 1005, 1012, 1016, 1017, 1018, 1041], "upperbound": 735, "uppercas": [390, 1046], "uppercase_initi": 416, "upperlimit": 705, "upright": 371, "upstream": [363, 376, 380, 384, 388, 1012, 1042], "upward": [450, 456], "ur": 1044, "urbanowicz": 1002, "urbanowicz2015": 1002, "urcrnrlat": [50, 303], "urcrnrlon": [50, 303], "uri": 55, "url": [51, 52, 55, 168, 370, 373, 378, 380, 492], "urllib": [47, 55], "urlopen": 55, "urlretriev": 47, "urlu": 1051, "urvang": [1041, 1043], "us": [0, 2, 15, 16, 19, 25, 27, 30, 37, 42, 43, 46, 47, 48, 50, 52, 53, 54, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 72, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 116, 118, 119, 122, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 157, 159, 160, 161, 164, 165, 166, 167, 169, 170, 171, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 212, 213, 214, 216, 217, 218, 220, 221, 224, 227, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 333, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 347, 350, 353, 355, 357, 362, 363, 364, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 385, 389, 390, 391, 393, 394, 395, 396, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 418, 419, 420, 421, 422, 424, 426, 427, 428, 429, 430, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 494, 495, 497, 500, 504, 509, 510, 512, 515, 516, 517, 520, 521, 523, 524, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 614, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 724, 725, 727, 728, 729, 730, 731, 733, 736, 737, 738, 739, 740, 742, 743, 744, 746, 747, 749, 751, 752, 754, 756, 757, 758, 759, 760, 764, 765, 767, 768, 769, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 927, 930, 931, 932, 934, 937, 939, 944, 946, 948, 949, 953, 954, 957, 958, 959, 961, 964, 968, 970, 972, 973, 975, 977, 978, 979, 985, 990, 991, 992, 994, 995, 997, 1000, 1001, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "usa": [269, 371, 902, 992, 999, 1014, 1015], "usabl": [149, 370, 376, 378, 390, 402, 416, 801, 1033, 1040, 1047, 1048], "usag": [41, 77, 86, 103, 106, 115, 124, 132, 165, 186, 187, 240, 244, 246, 263, 264, 299, 301, 307, 336, 353, 363, 371, 375, 376, 379, 383, 384, 386, 390, 391, 394, 402, 408, 412, 413, 418, 419, 440, 444, 446, 450, 454, 461, 464, 471, 489, 495, 497, 524, 535, 536, 542, 550, 562, 563, 592, 610, 641, 649, 659, 660, 661, 667, 668, 669, 670, 677, 678, 679, 680, 681, 691, 779, 782, 793, 794, 861, 862, 864, 905, 907, 910, 913, 914, 915, 916, 924, 949, 991, 992, 994, 1001, 1002, 1003, 1005, 1017, 1024, 1025, 1028, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051], "usd": 249, "use_encoded_valu": [143, 154, 188, 249, 316, 879, 1012, 1045], "use_group": 265, "use_idf": [413, 416, 591, 592], "usecas": [320, 323, 325, 408, 563], "useless": [54, 142, 273, 382, 417, 516, 529, 659, 713, 998, 1012, 1042], "user": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 64, 88, 101, 120, 140, 147, 179, 183, 186, 189, 200, 232, 246, 260, 267, 277, 279, 287, 290, 296, 297, 300, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 359, 363, 364, 370, 374, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 394, 396, 399, 402, 406, 408, 409, 410, 412, 413, 415, 416, 417, 419, 420, 421, 422, 425, 431, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 617, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 919, 945, 949, 991, 992, 998, 999, 1001, 1002, 1003, 1005, 1012, 1016, 1021, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "user_guid": 43, "user_r": 409, "userguid": 1040, "usernam": 394, "userscript": 384, "userwarn": [79, 95, 240, 381, 713, 1012, 1039, 1041, 1046, 1051], "ushtanit": [1045, 1046], "using_kernels_tut": 161, "usp": 44, "usr": 374, "usual": [43, 52, 75, 109, 110, 112, 145, 146, 148, 154, 185, 187, 199, 212, 213, 263, 264, 267, 270, 279, 280, 284, 311, 322, 340, 359, 363, 364, 374, 376, 378, 380, 384, 388, 389, 390, 394, 399, 405, 408, 409, 412, 413, 415, 416, 417, 450, 456, 539, 541, 543, 548, 560, 561, 608, 609, 631, 641, 659, 660, 667, 668, 669, 677, 678, 679, 693, 727, 759, 807, 829, 833, 905, 922, 949, 991, 992, 994, 997, 998, 999, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1016, 1017, 1018, 1048], "utc": 1002, "utf": [351, 353, 416, 487, 504, 583, 589, 590, 592], "util": [2, 4, 10, 17, 35, 38, 47, 49, 50, 88, 89, 94, 132, 134, 147, 154, 189, 212, 220, 228, 234, 242, 246, 248, 258, 276, 278, 290, 312, 319, 332, 340, 344, 351, 364, 370, 371, 376, 377, 378, 379, 388, 389, 390, 404, 407, 408, 409, 412, 413, 416, 437, 443, 444, 447, 449, 453, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 534, 535, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 582, 583, 589, 591, 592, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 691, 800, 801, 802, 803, 808, 810, 819, 823, 825, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 852, 855, 856, 862, 863, 865, 868, 870, 871, 872, 877, 884, 885, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 997, 1000, 1002, 1003, 1012, 1013, 1021, 1026, 1028, 1033, 1034, 1036, 1037, 1039, 1040], "utilis": 1039, "utkarsh": [1039, 1040, 1041, 1042], "utl": 417, "utstat": 645, "uttam": 1046, "uv": [120, 413], "uw": [168, 373, 1045], "uwha": [1046, 1047], "v": [0, 2, 30, 43, 48, 52, 53, 55, 57, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 88, 91, 102, 107, 108, 111, 113, 114, 115, 120, 122, 123, 127, 138, 140, 141, 146, 147, 148, 164, 170, 183, 184, 189, 192, 202, 210, 211, 212, 213, 216, 217, 221, 227, 236, 243, 256, 257, 260, 261, 262, 266, 287, 301, 317, 319, 337, 348, 352, 359, 364, 368, 373, 376, 382, 384, 390, 404, 405, 406, 410, 411, 413, 416, 417, 431, 441, 445, 452, 462, 463, 464, 465, 470, 473, 474, 475, 476, 477, 482, 483, 484, 497, 513, 525, 531, 532, 538, 542, 546, 547, 551, 553, 555, 557, 559, 561, 563, 565, 566, 569, 571, 582, 590, 594, 595, 601, 607, 612, 631, 632, 635, 636, 640, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 677, 679, 680, 689, 696, 700, 702, 705, 718, 737, 738, 740, 755, 756, 758, 789, 796, 801, 806, 813, 815, 827, 831, 833, 834, 835, 838, 839, 840, 848, 856, 858, 861, 863, 865, 866, 869, 872, 878, 879, 880, 885, 886, 889, 899, 905, 906, 907, 908, 910, 911, 914, 916, 920, 996, 997, 998, 999, 1002, 1003, 1004, 1007, 1010, 1012, 1016, 1017, 1019, 1023, 1028, 1033, 1036, 1037, 1038, 1041, 1043, 1044, 1047, 1048, 1051], "v0": [471, 472, 478, 513, 589, 590, 592, 801, 815, 864, 867, 1034, 1041, 1042, 1043], "v1": [264, 324, 370, 394, 798, 799, 1045, 1048, 1049, 1050, 1051], "v10": 264, "v11": 264, "v12": 264, "v13": 264, "v14": 264, "v15": 264, "v16": 264, "v17": 264, "v18": 264, "v19": 264, "v2": [264, 371, 498, 665, 686, 687, 998], "v20": 264, "v21": 264, "v22": 264, "v23": 264, "v24": 264, "v25": 264, "v26": 264, "v27": 264, "v28": 264, "v3": 264, "v4": 264, "v5": [264, 1041], "v6": 264, "v7": 264, "v8": 264, "v9": 264, "v_": [405, 416], "v_1": 405, "v_2": 405, "v_i": 1007, "v_ih_j": 1007, "v_init": 544, "v_j": [408, 756, 1007], "v_k": [411, 413, 532, 538, 546, 547], "v_measur": [737, 796], "v_measure_scor": [2, 57, 72, 73, 82, 91, 325, 352, 408, 718, 737, 738, 758, 1002, 1042], "v_new": 861, "va": [47, 144, 166, 281, 298, 300, 346], "vac": 287, "vacaliuc": [1041, 1042], "vacat": 371, "vachan": 1044, "vadim": [1041, 1045, 1046], "vaerenbergh": [1048, 1049], "vaggi": [1035, 1036], "vaillant": 1045, "val": [105, 224, 270, 951], "val_errors_with": 144, "val_errors_without": 144, "val_pr": 144, "val_scor": 145, "vale": 1043, "valencia": [1047, 1049], "valentin": [1036, 1038, 1048, 1049], "valero": 51, "valgrind": 379, "valid": [2, 47, 52, 53, 63, 64, 87, 88, 89, 90, 103, 104, 106, 107, 109, 113, 127, 132, 138, 140, 142, 143, 144, 145, 146, 149, 158, 162, 165, 166, 168, 178, 183, 186, 188, 192, 198, 199, 200, 201, 207, 209, 212, 214, 220, 230, 246, 248, 252, 257, 260, 262, 267, 270, 271, 272, 274, 276, 277, 278, 279, 282, 283, 284, 285, 287, 294, 308, 311, 316, 319, 321, 326, 332, 340, 347, 355, 357, 364, 371, 376, 379, 388, 389, 390, 402, 403, 406, 408, 409, 410, 413, 414, 415, 416, 417, 422, 424, 437, 442, 443, 445, 446, 447, 449, 450, 457, 463, 464, 468, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 494, 502, 503, 505, 516, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 548, 550, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 576, 578, 583, 584, 590, 594, 595, 598, 603, 633, 635, 639, 640, 641, 642, 643, 644, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 689, 690, 693, 700, 702, 703, 707, 714, 729, 763, 766, 775, 779, 780, 781, 786, 793, 794, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 836, 839, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 868, 869, 871, 877, 885, 897, 898, 900, 901, 903, 905, 907, 910, 912, 913, 914, 915, 916, 922, 924, 931, 932, 933, 934, 935, 943, 956, 958, 961, 985, 986, 987, 988, 989, 990, 992, 1001, 1002, 1003, 1005, 1006, 1010, 1012, 1014, 1016, 1017, 1018, 1022, 1023, 1026, 1028, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "valid_metr": [845, 846, 1005, 1049], "valid_scor": 997, "validate_data": 2, "validate_metadata": [246, 958], "validate_separ": 990, "validation_curv": [2, 325, 347, 399, 824, 997, 1040, 1041, 1042, 1045, 1049], "validation_fract": [144, 149, 220, 322, 415, 560, 561, 562, 563, 667, 668, 669, 677, 679, 862, 863, 1016, 1041, 1047], "validation_score_": [149, 562, 563], "validation_scores_": [862, 863, 1048], "validationcurvedisplai": [2, 283, 997, 1049], "validationerror": 1047, "vallei": 316, "vall\u00e9": 1040, "valu": [2, 20, 27, 43, 44, 46, 50, 51, 52, 53, 55, 58, 59, 63, 64, 68, 72, 75, 77, 79, 80, 86, 88, 93, 94, 95, 99, 103, 105, 107, 109, 111, 113, 120, 123, 126, 130, 132, 134, 136, 138, 139, 140, 141, 143, 146, 147, 150, 151, 153, 154, 163, 164, 166, 167, 170, 173, 174, 176, 178, 185, 186, 187, 188, 189, 191, 193, 194, 196, 198, 199, 200, 202, 203, 204, 206, 209, 210, 212, 213, 214, 216, 218, 227, 230, 231, 234, 235, 239, 240, 241, 242, 243, 244, 245, 249, 252, 253, 255, 261, 263, 264, 266, 268, 270, 271, 273, 275, 276, 277, 279, 281, 282, 283, 284, 290, 293, 302, 303, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 321, 327, 332, 340, 344, 345, 347, 351, 352, 353, 355, 357, 359, 363, 364, 365, 368, 369, 370, 371, 373, 377, 378, 379, 381, 382, 383, 385, 388, 389, 390, 393, 394, 399, 405, 406, 408, 409, 410, 411, 412, 416, 417, 418, 419, 420, 421, 422, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 490, 491, 494, 497, 498, 499, 502, 509, 510, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 700, 701, 702, 703, 705, 706, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 770, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 813, 815, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 926, 928, 929, 930, 931, 932, 935, 936, 937, 939, 941, 949, 951, 958, 961, 962, 963, 964, 965, 977, 978, 979, 991, 994, 995, 996, 997, 998, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1013, 1015, 1016, 1017, 1023, 1024, 1026, 1027, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "valuabl": [144, 264, 376, 992, 1026], "valuat": 415, "value_count": [43, 52, 187, 264, 284, 287], "value_kei": [388, 920], "value_typ": [418, 618], "valueerror": [2, 246, 247, 378, 382, 399, 468, 578, 604, 618, 636, 672, 715, 837, 855, 864, 870, 884, 930, 932, 934, 935, 986, 987, 988, 1012, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1051], "values_format": [698, 1043], "vamsi": 1048, "van": [0, 370, 397, 410, 469, 474, 535, 628, 693, 697, 992, 999, 1002, 1008, 1026, 1034, 1035, 1036, 1037, 1040, 1041, 1042, 1044, 1045, 1046, 1048, 1049], "vandana": 1044, "vander": 194, "vandermond": [213, 1012], "vanderpla": [0, 398, 1020, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041], "vang": 1046, "vanilla": [212, 404, 407, 408, 447, 449, 460, 630], "vanilla_model": 264, "vanilla_model_coef": 284, "vanrel": 1039, "vanschoren": [370, 1045], "vapnik": [594, 595], "var": [115, 116, 137, 168, 194, 270, 373, 377, 417, 642, 646, 907, 908, 909, 910, 911, 1002, 1041], "var_": [535, 843, 885, 1046], "var_smooth": [843, 1041], "varanasi": [1033, 1036], "vardhan": 1037, "varepsilon": [408, 1016, 1017], "vari": [46, 52, 64, 67, 70, 79, 80, 88, 95, 98, 107, 118, 140, 141, 142, 152, 161, 167, 172, 174, 183, 186, 187, 189, 201, 202, 204, 207, 210, 219, 237, 244, 249, 260, 266, 270, 273, 284, 304, 310, 312, 313, 315, 325, 328, 334, 340, 343, 345, 359, 363, 365, 371, 390, 402, 441, 445, 446, 501, 509, 515, 516, 523, 560, 561, 565, 566, 647, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 682, 685, 704, 764, 820, 824, 829, 831, 832, 862, 866, 870, 885, 902, 910, 913, 914, 975, 994, 997, 998, 1002, 1005, 1006, 1015, 1018, 1023, 1026, 1040, 1041, 1049], "variabl": [2, 43, 48, 50, 51, 52, 72, 102, 137, 141, 143, 146, 147, 149, 163, 168, 177, 178, 181, 182, 187, 188, 191, 198, 202, 212, 216, 217, 230, 234, 246, 249, 261, 264, 270, 273, 280, 287, 289, 315, 316, 317, 359, 363, 365, 371, 373, 374, 376, 378, 380, 381, 384, 390, 399, 404, 408, 409, 410, 411, 413, 415, 416, 417, 450, 482, 483, 484, 487, 500, 502, 509, 516, 533, 535, 537, 542, 545, 554, 560, 561, 605, 607, 608, 609, 641, 651, 652, 655, 656, 662, 683, 684, 696, 710, 748, 802, 803, 806, 808, 809, 810, 811, 816, 817, 818, 819, 820, 821, 825, 826, 827, 828, 830, 833, 837, 838, 868, 879, 882, 886, 894, 906, 991, 992, 994, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1012, 1016, 1018, 1021, 1022, 1033, 1038, 1041, 1043, 1046, 1048], "varianc": [2, 37, 43, 44, 52, 64, 79, 88, 90, 95, 105, 109, 111, 115, 116, 120, 121, 122, 125, 126, 127, 128, 130, 133, 148, 149, 177, 183, 186, 192, 194, 196, 198, 202, 203, 212, 214, 217, 230, 260, 264, 267, 270, 273, 279, 280, 284, 299, 305, 310, 315, 327, 352, 359, 368, 372, 385, 405, 406, 408, 410, 411, 412, 413, 414, 415, 420, 441, 445, 449, 463, 522, 525, 533, 534, 535, 542, 545, 550, 551, 556, 557, 559, 560, 561, 566, 604, 608, 609, 612, 626, 644, 645, 646, 653, 657, 658, 661, 663, 673, 674, 675, 676, 677, 688, 711, 729, 786, 798, 799, 843, 854, 869, 875, 881, 883, 885, 891, 893, 895, 896, 914, 916, 976, 977, 978, 982, 996, 997, 998, 1000, 1005, 1006, 1007, 1010, 1014, 1016, 1017, 1018, 1019, 1023, 1024, 1028, 1033, 1041, 1043, 1044, 1045, 1046, 1047, 1048], "variance_weight": [729, 786, 1002], "variances_": 604, "variancethreshold": [2, 417, 870, 992, 1036, 1043, 1046, 1049], "variant": [2, 64, 78, 120, 180, 182, 183, 270, 322, 323, 352, 353, 382, 408, 411, 413, 416, 418, 449, 460, 490, 494, 495, 513, 516, 544, 560, 561, 566, 616, 620, 623, 624, 628, 631, 639, 640, 642, 646, 673, 705, 802, 806, 808, 809, 810, 819, 827, 848, 866, 902, 992, 998, 999, 1000, 1001, 1002, 1004, 1005, 1016, 1022, 1023, 1033, 1041], "variat": [2, 43, 46, 51, 72, 98, 118, 151, 168, 175, 176, 182, 183, 186, 217, 254, 256, 261, 267, 281, 289, 300, 320, 340, 373, 402, 412, 413, 443, 447, 459, 537, 644, 673, 675, 676, 798, 799, 819, 820, 822, 991, 1002, 1012, 1015, 1018, 1021, 1023, 1027, 1028, 1036, 1038, 1039], "variegatu": [50, 303, 371, 499], "variet": 316, "varieti": [25, 62, 181, 257, 316, 340, 384, 408, 410, 416, 644, 1005, 1018, 1021, 1026, 1035, 1048, 1049], "varimax": [130, 413, 533, 1045], "variou": [4, 41, 43, 51, 71, 72, 74, 88, 89, 91, 93, 94, 95, 112, 115, 123, 183, 186, 192, 220, 222, 231, 232, 233, 234, 243, 287, 290, 306, 314, 320, 329, 330, 351, 353, 358, 359, 363, 370, 371, 372, 373, 376, 378, 381, 389, 391, 406, 408, 410, 437, 441, 472, 503, 515, 516, 526, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 595, 603, 648, 652, 654, 656, 659, 662, 664, 666, 667, 669, 674, 676, 677, 692, 693, 700, 801, 804, 805, 807, 815, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 865, 905, 906, 991, 992, 999, 1002, 1005, 1009, 1012, 1016, 1018, 1021, 1023, 1025, 1026, 1033, 1036, 1037, 1050], "varma": 1042, "varoquaux": [0, 391, 397, 1020, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "varun": [1039, 1040, 1041, 1047, 1048], "varunchaduvula": 1051, "vasani": 1044, "vasilei": [1026, 1040], "vasileva": 1047, "vasiloudi": 1038, "vassard": 1047, "vassilvitskii": [408, 447, 460], "vast": [264, 376], "vastli": 315, "vathsala": [1040, 1041, 1042, 1043], "vatsan": 1039, "vavrova": 1040, "vazelh": [1041, 1042, 1043], "vazirgianni": 408, "vb": 537, "vbgmm": [1033, 1037, 1039], "vc": 374, "vcvarsal": 374, "vd": 1051, "ve": [352, 376, 416, 1026, 1040], "veal": 57, "veb2009": 408, "veb2010": 408, "vec": [120, 416, 539, 541, 548], "veclib": [363, 388], "vect": [47, 102, 271, 333, 416], "vect__": 271, "vect__max_df": 271, "vect__min_df": 271, "vect__ngram_rang": 271, "vect__norm": 271, "vector": [2, 17, 39, 46, 47, 48, 49, 51, 54, 57, 58, 63, 66, 68, 71, 75, 104, 120, 122, 123, 164, 170, 178, 195, 216, 217, 224, 228, 244, 245, 252, 268, 270, 271, 275, 296, 308, 310, 327, 334, 336, 337, 340, 341, 342, 343, 344, 345, 347, 349, 352, 363, 365, 371, 381, 382, 385, 388, 390, 405, 406, 408, 410, 411, 412, 413, 415, 418, 419, 420, 437, 443, 444, 445, 447, 449, 450, 451, 453, 464, 465, 467, 468, 482, 483, 484, 485, 487, 489, 498, 510, 513, 522, 525, 532, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 550, 551, 552, 553, 568, 569, 570, 571, 582, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 623, 624, 626, 632, 639, 641, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 678, 679, 687, 688, 689, 690, 692, 693, 694, 696, 700, 720, 736, 764, 769, 770, 771, 772, 774, 775, 776, 778, 779, 800, 801, 804, 805, 815, 823, 829, 832, 833, 834, 840, 841, 842, 843, 844, 847, 848, 849, 851, 852, 853, 855, 856, 857, 862, 863, 870, 872, 877, 885, 889, 892, 903, 905, 906, 907, 908, 909, 910, 911, 912, 931, 946, 948, 949, 964, 970, 991, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1004, 1006, 1007, 1008, 1012, 1016, 1018, 1023, 1024, 1028, 1030, 1033, 1034, 1035, 1036, 1037, 1039, 1041, 1042, 1044, 1046, 1051], "vectori": [390, 1043], "vectorizer2": 589, "vectorizer_param": 333, "vectorizermixin": 1043, "vectorizing_tim": 47, "vectors_test": 371, "ved": 1050, "vedaldi": [639, 994], "veenhui": [1048, 1049, 1050, 1051], "veerkhar": 1048, "veerlosar": 1043, "veghit": 1049, "vehag": [212, 230], "vehbrand": [212, 230], "vehga": [212, 230], "vehicl": [212, 230], "vehpow": [212, 230], "vel": 373, "velkov": 1035, "veloc": 376, "vembu": 406, "vempati": 994, "vendor": [246, 1038, 1041, 1042], "venezuela": [50, 303, 371, 499], "venkat": [0, 398], "venkatachalam": [1043, 1044, 1045, 1046, 1047, 1050, 1051], "venkatesh": 1043, "venna": 697, "venthur": 1041, "venu": [0, 390], "venv": [374, 394], "vera": [1047, 1048], "verbos": [49, 77, 83, 87, 97, 102, 104, 106, 154, 271, 307, 308, 310, 322, 333, 351, 374, 380, 390, 440, 443, 447, 449, 452, 454, 459, 462, 464, 467, 471, 472, 478, 532, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 594, 595, 628, 633, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 691, 693, 695, 766, 779, 798, 799, 801, 804, 805, 807, 815, 824, 826, 827, 828, 829, 830, 832, 834, 836, 839, 854, 861, 862, 863, 864, 865, 866, 867, 902, 905, 906, 907, 908, 909, 910, 911, 967, 1022, 1035, 1036, 1038, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1051], "verbose_feature_names_out": [143, 186, 187, 188, 253, 316, 322, 323, 324, 326, 409, 464, 467, 864, 1046, 1050, 1051], "verbose_interv": [798, 799], "veri": [43, 52, 62, 64, 74, 75, 77, 79, 83, 85, 93, 95, 111, 112, 113, 115, 118, 123, 146, 152, 159, 175, 181, 186, 187, 188, 202, 212, 213, 214, 217, 220, 230, 236, 239, 245, 246, 249, 255, 264, 272, 273, 276, 277, 279, 280, 290, 307, 310, 322, 329, 332, 340, 344, 349, 351, 353, 359, 363, 371, 375, 376, 381, 382, 384, 388, 389, 390, 402, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 442, 447, 452, 462, 471, 472, 478, 501, 505, 511, 542, 558, 559, 562, 563, 565, 566, 568, 569, 590, 591, 623, 651, 652, 655, 656, 657, 665, 683, 684, 686, 692, 693, 696, 706, 744, 747, 793, 798, 801, 803, 809, 811, 815, 818, 821, 845, 846, 870, 874, 875, 876, 885, 897, 898, 907, 910, 913, 914, 915, 916, 924, 949, 991, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1005, 1006, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1033, 1038, 1039, 1041, 1044, 1046, 1048, 1049, 1050], "verif": [371, 1002, 1026], "verifi": [86, 93, 132, 149, 186, 212, 376, 381, 402, 404, 492, 985, 1005], "verlag": 697, "vermeil": 1041, "veronda": 1034, "verrier": 1048, "versa": [186, 267, 351, 408, 418, 442, 608, 609, 834, 1037], "versatil": [418, 1017, 1026], "versicolor": [126, 279, 280, 505], "versicolour": [128, 373], "version": [2, 7, 43, 66, 80, 86, 88, 103, 120, 125, 134, 149, 172, 182, 187, 188, 191, 198, 210, 213, 220, 226, 228, 246, 249, 253, 289, 307, 315, 319, 320, 321, 322, 324, 325, 326, 327, 340, 351, 363, 371, 375, 377, 378, 379, 380, 382, 384, 385, 388, 390, 391, 394, 395, 399, 401, 402, 408, 409, 411, 413, 415, 416, 418, 419, 420, 426, 428, 430, 431, 432, 433, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 505, 506, 509, 510, 511, 513, 515, 523, 524, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 705, 708, 709, 710, 712, 714, 715, 717, 719, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 735, 740, 741, 742, 743, 744, 747, 754, 755, 758, 759, 760, 762, 767, 768, 770, 779, 783, 784, 785, 786, 788, 790, 791, 792, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 814, 815, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 929, 931, 932, 943, 944, 948, 949, 957, 958, 959, 960, 961, 964, 967, 968, 971, 976, 982, 987, 988, 990, 991, 994, 996, 999, 1002, 1004, 1006, 1008, 1010, 1015, 1016, 1018, 1021, 1022, 1025, 1029, 1031], "versionchang": 376, "versionwarn": 380, "versu": [67, 122, 133, 152, 154, 161, 172, 183, 186, 192, 221, 227, 239, 244, 245, 247, 258, 262, 265, 287, 296, 298, 312, 328, 333, 336, 337, 339, 340, 344, 408, 412, 415, 418, 505, 535, 557, 611, 632, 640, 659, 660, 667, 669, 675, 676, 677, 678, 784, 801, 806, 827, 837, 866, 901, 902, 909, 910, 914, 991, 998, 1002, 1003, 1008, 1015, 1016, 1017, 1023, 1041], "vert": [147, 188, 189, 319, 1016], "vertex": [55, 63, 408, 453, 1046], "vertic": [45, 55, 93, 145, 189, 202, 243, 244, 274, 289, 310, 313, 345, 346, 390, 405, 408, 413, 516, 698, 782], "verticalalign": [51, 63, 74, 75], "vese": 1045, "vesteghem": 1043, "veto": 391, "vettigli": 1042, "vga": 57, "vh": 949, "vi": [45, 47, 371, 700, 1041, 1044], "via": [0, 2, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 368, 373, 374, 377, 378, 380, 384, 388, 389, 390, 391, 394, 399, 405, 406, 408, 409, 411, 412, 413, 417, 418, 437, 502, 536, 540, 542, 544, 547, 560, 561, 568, 569, 598, 612, 617, 622, 625, 628, 639, 640, 641, 642, 657, 667, 669, 672, 674, 677, 688, 690, 693, 694, 710, 801, 815, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 843, 851, 862, 864, 865, 866, 885, 886, 991, 996, 998, 999, 1001, 1002, 1003, 1009, 1010, 1016, 1017, 1022, 1023, 1026, 1028, 1033, 1037, 1038, 1041, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "viacheslav": 1039, "viard": 1044, "vibrantabhi19": 1040, "vicdemand": 149, "vice": [186, 267, 351, 408, 418, 442, 608, 609, 834, 1037], "vicent": [1046, 1047, 1048], "vicpric": 149, "victoireloui": 1047, "victor": [408, 452, 462, 1040, 1043], "victoria": 149, "video": [324, 370, 379, 504, 1003, 1026, 1028], "vie": 1039, "viega": 1002, "view": [43, 77, 80, 109, 122, 149, 187, 251, 363, 365, 376, 408, 416, 537, 646, 658, 845, 846, 920, 998, 999], "view_init": [187, 232, 234, 236], "viewabl": 376, "vighnesh": [1038, 1039, 1041], "vignesh": 1049, "vigni": 1050, "vijai": [1026, 1036], "vijalapuram": 1041, "vijeth": [1049, 1050], "vijitbenjaronk": [1040, 1041], "vika": [1045, 1047], "vikram": [1039, 1048, 1049], "vikrant": 1047, "vila": [1043, 1045], "vilhelm": [1040, 1041], "villalba": [1038, 1041, 1045], "villanova": [1045, 1046], "villaz\u00f3n": 1045, "villu": 1039, "vil\u00e9m": 1046, "vinayak": [1037, 1038, 1039, 1041, 1042, 1048, 1049], "vincent": [0, 398, 1026, 1033, 1035, 1037, 1038, 1040, 1043, 1048, 1049, 1050], "vineet": 1051, "vineyard": 316, "vinh": [408, 705], "vinh10a": 408, "viniciu": [1045, 1046], "vinit": 1041, "vink": [1044, 1046], "vinod": 1041, "vin\u00edciu": 1041, "viola": [371, 1041], "violat": [62, 340, 384, 388, 390, 636, 935, 1009, 1016, 1018], "violet": [127, 1049], "violeta": 1045, "vipin": 408, "viraj": 1041, "virchan": 1051, "virgil": [0, 398, 1033, 1034, 1036], "virgilefritsch": 1033, "virginica": [126, 128, 279, 280, 373, 505, 1002], "viridi": [66, 73, 290, 698], "viridis_r": 271, "virshup": 1050, "virtanen": 1038, "virtual": [377, 394, 412, 1026], "virtualenv": [374, 376], "visag": 1026, "visconti": 1037, "vishaal": [1041, 1042], "vishal": 1048, "vishwakarma": 1047, "visibl": [52, 186, 187, 214, 349, 370, 376, 408, 861, 1007, 1038, 1048], "vision": [535, 759, 760, 994, 998, 1000, 1018, 1021, 1026, 1034], "visit": [358, 376, 1009, 1025], "visual": [2, 27, 42, 43, 48, 52, 58, 62, 66, 68, 78, 80, 82, 85, 90, 93, 94, 111, 115, 119, 122, 124, 127, 129, 140, 147, 149, 150, 152, 156, 157, 166, 178, 182, 183, 187, 189, 198, 204, 209, 212, 214, 230, 232, 233, 237, 238, 241, 244, 250, 251, 260, 262, 263, 266, 267, 271, 272, 275, 277, 279, 280, 295, 299, 300, 302, 304, 306, 310, 314, 315, 319, 321, 330, 344, 368, 372, 374, 382, 383, 405, 410, 412, 413, 414, 415, 438, 441, 445, 446, 454, 471, 472, 497, 503, 505, 508, 511, 515, 523, 533, 535, 542, 565, 567, 632, 634, 646, 659, 690, 693, 698, 699, 701, 702, 703, 719, 728, 783, 790, 802, 803, 806, 807, 818, 819, 820, 821, 822, 824, 831, 862, 866, 870, 874, 875, 877, 881, 882, 883, 885, 905, 907, 908, 910, 911, 919, 945, 997, 999, 1000, 1005, 1006, 1008, 1009, 1012, 1018, 1021, 1023, 1028, 1036, 1043, 1044, 1045, 1047], "visualis": [120, 123, 130, 247, 545, 677, 679, 802, 803, 806, 818, 819, 820, 821, 822, 1005, 1022], "visualize_group": 265, "vitor": 1048, "vivek": [1040, 1041, 1042, 1050], "viz": [280, 383], "vjacheslav": 1037, "vlad": [0, 120, 397, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042], "vladimir": [536, 949, 998, 1043, 1047, 1050], "vlahava": [721, 741, 1002], "vlajic": [1044, 1045, 1051], "vlasio": [1026, 1040], "vlasovet": 1046, "vlb": 57, "vliet": 1045, "vline": [109, 122, 200, 202, 213, 270, 283, 311], "vlines_": 633, "vlo": 51, "vmax": [66, 84, 113, 120, 123, 130, 173, 176, 193, 198, 204, 228, 244, 259, 265, 307, 340], "vmin": [66, 75, 113, 120, 123, 130, 173, 176, 193, 198, 204, 228, 244, 259, 265, 307, 340], "vnherdeiro": 1043, "vo": [1039, 1047], "voc": 1002, "vocabulari": [118, 227, 351, 352, 388, 416, 589, 590, 591, 592, 1004, 1033, 1035, 1038, 1041, 1044, 1046], "vocabulary_": [353, 416, 582, 589, 592, 1033], "void": 377, "vol": [64, 178, 198, 264, 276, 373, 408, 474, 560, 561, 629, 636, 646, 665, 686, 687, 798, 830, 842, 992, 1004, 1005], "volgen": [405, 720], "voltag": 57, "volum": [0, 99, 110, 168, 175, 371, 373, 408, 410, 473, 535, 770, 998, 1017, 1026], "volume11": 408, "volume2": 677, "volume7": [667, 668], "volunt": 384, "voluntari": 351, "von": [408, 452, 462, 692, 1040, 1041], "voronoi": [80, 99, 408], "voss": 1041, "vote": [2, 14, 133, 135, 140, 153, 154, 155, 156, 183, 209, 289, 344, 390, 391, 502, 556, 557, 558, 561, 565, 566, 570, 571, 658, 833, 847, 848, 853, 855, 1003, 1005, 1023, 1024, 1028, 1033, 1036, 1038, 1043], "votingclassifi": [2, 63, 64, 133, 183, 221, 399, 415, 505, 565, 571, 632, 659, 843, 847, 910, 913, 991, 992, 1023, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1046, 1047, 1050, 1051], "votingregressor": [2, 157, 399, 415, 570, 992, 1042, 1043, 1044, 1047, 1050, 1051], "votingregressorifittedvotingregressor": 157, "voxel": [80, 99, 586], "vp": 1026, "vq": 91, "vqean3": [1041, 1042], "vredevoogd": [1035, 1036], "vrigazov": 1048, "vrishank": [1040, 1041], "vs_buildtool": 374, "vstack": [51, 63, 90, 98, 173, 174, 196, 255, 259, 290, 303, 345, 632, 1003, 1041], "vstolbunov": 1038, "vt": 551, "vufg": 1041, "vukolov": [1041, 1042], "vulner": 402, "vuw": 531, "vvz2010": 994, "vx": 72, "vya": [1041, 1042, 1043], "vyom": [1048, 1049], "vz2010": 994, "v\u00e1zquez": 1036, "v\u0103n": 1048, "w": [2, 45, 51, 53, 66, 70, 75, 77, 91, 97, 129, 168, 181, 211, 216, 229, 246, 247, 255, 256, 257, 260, 261, 281, 308, 322, 323, 344, 345, 347, 353, 359, 364, 371, 373, 382, 402, 408, 409, 413, 415, 416, 420, 425, 431, 437, 465, 469, 472, 474, 482, 483, 484, 524, 539, 541, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 570, 571, 589, 590, 592, 595, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 694, 700, 726, 727, 757, 800, 801, 815, 823, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 847, 848, 851, 852, 855, 856, 862, 863, 898, 900, 901, 905, 906, 907, 908, 910, 911, 913, 914, 915, 916, 946, 951, 998, 1002, 1006, 1007, 1012, 1014, 1016, 1017, 1043, 1047, 1048, 1049, 1050], "w0": 118, "w1": [118, 415, 658], "w1992": 415, "w2": 415, "w3": 415, "w_": [413, 647, 648, 653, 654, 661, 662, 663, 664, 682, 685, 998, 1002, 1004, 1007], "w_0": 998, "w_1": [415, 998, 1006], "w_1x_1": 1006, "w_2": [415, 998, 1006], "w_2x_2": 1006, "w_3": 998, "w_4": 998, "w_5": 998, "w_i": [415, 993, 1002], "w_ij": 661, "w_init": [420, 534], "w_intercept": [905, 906], "w_j": [647, 653, 1002, 1016], "w_k": [408, 415, 998], "w_l": 998, "w_mx_m": 1006, "w_n": 415, "w_new": 413, "w_p": 998, "w_pad": [120, 142, 356], "w_x_1": [905, 906], "w_x_n": [905, 906], "wa": [0, 43, 47, 53, 64, 75, 102, 103, 111, 116, 118, 151, 154, 168, 179, 186, 191, 216, 236, 246, 249, 261, 263, 264, 266, 268, 270, 276, 277, 284, 287, 307, 315, 319, 320, 324, 331, 332, 351, 353, 358, 359, 363, 371, 373, 374, 376, 380, 381, 390, 394, 399, 402, 404, 405, 407, 408, 411, 412, 416, 420, 432, 440, 441, 442, 443, 445, 446, 447, 449, 450, 454, 457, 460, 464, 468, 469, 474, 482, 483, 484, 485, 516, 524, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 659, 660, 665, 673, 675, 680, 686, 687, 689, 690, 693, 714, 730, 731, 779, 784, 785, 788, 798, 799, 801, 804, 805, 815, 828, 830, 842, 849, 852, 854, 857, 861, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 894, 897, 898, 902, 903, 929, 931, 932, 943, 944, 968, 989, 990, 991, 992, 1001, 1002, 1005, 1008, 1012, 1015, 1018, 1021, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "wadawson": 1037, "wadsworth": [913, 914, 1018], "waelbenamara": 1044, "wagner": 1047, "wai": [0, 2, 37, 43, 55, 64, 83, 93, 103, 106, 139, 145, 150, 152, 168, 177, 186, 188, 189, 213, 216, 217, 227, 230, 241, 242, 245, 246, 249, 250, 265, 270, 277, 279, 310, 311, 322, 324, 325, 359, 363, 364, 365, 370, 372, 374, 375, 378, 379, 380, 384, 385, 390, 391, 394, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 423, 443, 444, 451, 452, 453, 459, 460, 462, 463, 469, 497, 556, 557, 564, 573, 590, 600, 601, 612, 633, 667, 668, 677, 678, 679, 700, 705, 707, 718, 737, 738, 755, 756, 758, 764, 775, 779, 789, 796, 826, 834, 851, 872, 878, 883, 889, 915, 916, 972, 975, 991, 992, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1005, 1007, 1008, 1009, 1010, 1012, 1014, 1016, 1017, 1018, 1021, 1022, 1025, 1026, 1033, 1035, 1041, 1046, 1047, 1051], "waijean": 1046, "wainwright": [722, 724, 725], "waist": 373, "wait": [55, 374, 376, 380, 390, 667, 668, 669, 677, 679, 1045], "waithera": 1043, "wal": 51, "waldo": 324, "wale": 149, "walk": [408, 414, 1036], "walker": 1037, "wall": 408, "wallach": [1037, 1038], "walli": 1041, "wallygauz": 1041, "walsh": [1045, 1047], "walt": [1036, 1037, 1041], "walter": 1039, "walton": 324, "wan": 1041, "wang": [413, 537, 680, 690, 694, 727, 757, 998, 999, 1002, 1036, 1038, 1039, 1040, 1041, 1045, 1048, 1049, 1051], "wangz10": 1038, "want": [0, 30, 43, 51, 58, 61, 62, 63, 88, 97, 103, 168, 182, 186, 212, 213, 214, 246, 249, 261, 264, 270, 285, 287, 293, 307, 334, 337, 351, 359, 363, 364, 365, 374, 375, 376, 377, 378, 380, 381, 382, 388, 389, 390, 391, 394, 399, 402, 406, 407, 408, 409, 410, 415, 416, 417, 501, 504, 505, 511, 536, 550, 655, 656, 657, 659, 660, 667, 669, 675, 676, 677, 765, 800, 823, 851, 854, 870, 877, 898, 905, 991, 998, 1001, 1002, 1003, 1006, 1008, 1012, 1013, 1017, 1021, 1022, 1033, 1047, 1051], "ward": [0, 2, 53, 59, 71, 74, 75, 76, 79, 80, 85, 86, 87, 89, 95, 183, 189, 236, 398, 416, 441, 445, 463, 531, 858, 1023, 1033, 1036, 1038], "ward__n_clust": 87, "ward_tre": [2, 87, 441, 445, 1033, 1037], "wardagglom": 1038, "wardagglomer": 1036, "wardclust": 1036, "wareh": 735, "warm": [379, 390, 532, 538, 544, 546, 547, 611, 654, 660, 667, 668, 669, 677, 678, 679, 998, 1022, 1043, 1045, 1047], "warm_start": [138, 174, 206, 322, 378, 382, 390, 415, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 611, 647, 649, 650, 653, 659, 661, 663, 667, 668, 669, 670, 677, 678, 679, 681, 798, 799, 854, 862, 863, 1008, 1024, 1028, 1033, 1036, 1037, 1038, 1041, 1042, 1043, 1044, 1047, 1049], "warn": [2, 15, 79, 95, 104, 176, 212, 227, 246, 273, 290, 306, 307, 314, 363, 364, 376, 379, 380, 381, 390, 402, 416, 497, 551, 554, 555, 558, 559, 560, 561, 565, 566, 567, 572, 573, 574, 575, 576, 577, 579, 603, 637, 694, 713, 714, 717, 730, 731, 739, 784, 785, 788, 855, 869, 870, 878, 908, 909, 910, 911, 913, 914, 915, 916, 931, 932, 939, 949, 958, 971, 987, 988, 1002, 1012, 1033, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "warn_for": 784, "warn_on_dtyp": 1042, "warn_when_not_sort": 860, "warner": [51, 1048, 1049], "warshal": [689, 999], "warshaw": 1039, "warut": [1040, 1041], "wase": [1050, 1051], "wasn": [102, 246, 1042], "waspa": 539, "wast": [140, 382, 412, 413, 991], "watanab": [1050, 1051], "watch": [52, 364], "watchtheblur": 1045, "water": 50, "waterburi": [1041, 1042], "waterland": 1036, "waterponei": [1039, 1040], "watson": [316, 409], "wattai": 1048, "wav": 370, "wave": [207, 376, 1001], "waveform": 75, "wavelet": [53, 129, 413], "wavfil": 370, "waweru": 1050, "wa\u00ebl": 1051, "wb": [55, 402], "wchathura": 1048, "wclf": 342, "wconnel": 1044, "wdbc": [168, 373], "wderos": 1044, "wdevazelh": 1041, "wdisp": 342, "we": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 62, 63, 64, 66, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 86, 88, 89, 90, 91, 95, 97, 98, 99, 102, 103, 104, 105, 107, 109, 111, 112, 113, 116, 118, 120, 121, 122, 123, 125, 126, 127, 128, 130, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 156, 157, 159, 163, 164, 165, 167, 168, 170, 172, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 200, 202, 204, 206, 208, 209, 212, 213, 214, 215, 216, 218, 220, 221, 224, 225, 226, 227, 228, 230, 232, 233, 236, 237, 239, 240, 242, 243, 244, 246, 247, 249, 250, 252, 253, 255, 256, 257, 258, 260, 261, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 295, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 388, 389, 390, 391, 399, 402, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 450, 469, 470, 471, 472, 473, 474, 475, 476, 502, 524, 532, 533, 535, 538, 546, 547, 550, 562, 563, 564, 570, 571, 583, 584, 590, 612, 618, 628, 633, 634, 639, 641, 652, 656, 659, 660, 667, 669, 674, 675, 676, 677, 678, 693, 719, 721, 727, 747, 757, 765, 782, 800, 807, 823, 824, 826, 847, 848, 849, 851, 853, 854, 855, 856, 857, 868, 877, 878, 879, 885, 890, 891, 893, 894, 895, 896, 898, 901, 905, 909, 924, 943, 944, 954, 965, 967, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1026, 1030, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1049, 1051], "wea": 406, "weak": [115, 144, 147, 216, 230, 276, 412, 555, 560, 561, 631, 1005, 1026, 1049], "weak_learn": 134, "weak_learners_info": 134, "weak_learners_misclassification_error": 134, "weaker": [107, 562, 563], "weakest": [355, 1018], "weaklearn": 554, "weakli": 99, "weather": [43, 52, 175, 187, 407, 998, 1002], "web": [2, 168, 370, 371, 373, 376, 384, 402, 408, 416, 492, 522, 898, 949, 1002, 1012, 1029, 1033], "weber": 1040, "weblog": 408, "webpag": [55, 191, 376], "websit": [370, 371, 373, 376, 379, 391, 394, 1006, 1016, 1025, 1026, 1034, 1035, 1036], "wed": [43, 149, 187], "weed": 605, "week": [43, 52, 149, 326, 375, 376, 391, 497, 1026, 1047], "weekdai": [43, 187], "weekday_co": 43, "weekday_sin": 43, "weekend": [43, 149], "weezel": [1048, 1049], "wegelin": 411, "wehenkel": [415, 558, 559, 566, 567, 915, 916], "wei": [0, 398, 1016, 1033, 1034, 1037, 1038, 1039, 1040, 1042, 1046, 1049], "weibul": 314, "weidemann": 1047, "weigh": [412, 1040], "weight": [2, 45, 50, 53, 54, 57, 61, 68, 87, 102, 130, 146, 155, 156, 164, 165, 174, 175, 182, 183, 186, 192, 198, 202, 204, 212, 216, 217, 219, 222, 223, 224, 226, 227, 228, 230, 246, 251, 255, 259, 264, 268, 273, 277, 279, 293, 302, 303, 304, 305, 306, 308, 315, 317, 319, 322, 326, 327, 329, 330, 335, 340, 342, 344, 345, 347, 348, 351, 352, 353, 358, 359, 372, 373, 385, 388, 390, 407, 408, 410, 411, 413, 414, 417, 419, 425, 431, 437, 440, 443, 444, 446, 447, 449, 453, 459, 460, 463, 464, 465, 467, 469, 474, 482, 483, 484, 497, 516, 525, 539, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 587, 590, 591, 592, 594, 598, 603, 604, 611, 612, 629, 633, 634, 635, 636, 638, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 690, 694, 698, 699, 701, 703, 704, 708, 709, 710, 713, 714, 717, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 737, 739, 740, 741, 742, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 759, 760, 770, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 823, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 861, 862, 863, 864, 867, 870, 884, 885, 886, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 936, 937, 951, 976, 982, 992, 993, 998, 999, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1012, 1015, 1016, 1017, 1018, 1022, 1023, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "weight_concentration_": 798, "weight_concentration_prior": [255, 261, 798, 1001], "weight_concentration_prior_": 798, "weight_concentration_prior_typ": [255, 261, 798, 1001, 1039], "weight_vector": [1033, 1043], "weighted_acc": 399, "weighted_mod": [2, 385], "weighted_n_node_sampl": 358, "weightedmetaregressor": 246, "weights_": [255, 798, 799, 1047], "weights_handl": 225, "weights_init": 799, "weijiadu": 1047, "weinberg": 416, "weinsberg": 1033, "weinstein": 1034, "weisberg": 998, "weiss": [0, 398, 408, 692, 1033], "weitzenfeld": 1026, "weka": 842, "welch": 1039, "welcom": [375, 376, 384, 391, 1022], "welind": 1033, "well": [0, 8, 43, 48, 51, 58, 61, 62, 64, 70, 74, 86, 90, 91, 95, 102, 109, 116, 126, 134, 135, 137, 140, 144, 146, 152, 154, 168, 175, 177, 185, 186, 187, 188, 191, 198, 200, 210, 212, 213, 214, 216, 220, 232, 233, 234, 237, 239, 243, 246, 249, 257, 264, 270, 277, 279, 281, 287, 290, 293, 295, 296, 297, 317, 320, 321, 322, 323, 324, 325, 326, 327, 344, 347, 351, 352, 353, 357, 359, 371, 373, 375, 376, 380, 382, 384, 385, 388, 389, 390, 391, 402, 406, 408, 410, 412, 413, 415, 417, 419, 422, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 459, 460, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 701, 722, 723, 724, 725, 786, 789, 793, 796, 798, 799, 800, 801, 804, 805, 815, 823, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 947, 948, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1012, 1015, 1016, 1018, 1019, 1021, 1022, 1026, 1033, 1034, 1037, 1039, 1040, 1041, 1044, 1051], "wellcom": 0, "wen": 1048, "wenbo": [1043, 1045], "wendi": 1043, "wendling": 1040, "weng": 1017, "wenhao": [1041, 1042], "wenhua": 1039, "wenjian": 1039, "wenliwyan": 1044, "went": [380, 1002], "were": [0, 43, 68, 102, 103, 106, 111, 112, 140, 143, 146, 149, 165, 168, 175, 182, 212, 213, 216, 240, 249, 277, 279, 281, 307, 308, 315, 320, 321, 323, 324, 325, 326, 327, 332, 344, 351, 353, 358, 359, 370, 371, 373, 376, 377, 378, 380, 384, 388, 390, 399, 405, 409, 415, 416, 464, 467, 468, 497, 562, 563, 603, 804, 805, 820, 829, 852, 902, 903, 991, 994, 1002, 1003, 1018, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051], "weren": [351, 879, 1042], "werman": 1045, "werneck": 1041, "werner": [1040, 1045], "werror": 384, "wersd\u00f6rfer": 1035, "weslei": [591, 731], "westermann": [0, 366, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "western": 416, "weston": [44, 413, 536, 594, 595, 901], "westov": 1041, "wetter": 187, "weyb": 1051, "wfc": 51, "wget": 384, "wh": [413, 539, 541, 548], "wh_i": 413, "what": [0, 2, 43, 48, 51, 52, 75, 85, 86, 116, 121, 125, 142, 185, 186, 202, 218, 220, 228, 241, 246, 253, 307, 351, 353, 355, 359, 364, 371, 374, 376, 377, 378, 380, 382, 384, 389, 390, 391, 393, 407, 408, 414, 415, 416, 504, 537, 589, 590, 592, 647, 653, 697, 890, 891, 893, 894, 895, 896, 913, 914, 915, 916, 1001, 1002, 1003, 1005, 1018, 1022, 1033, 1040, 1051], "whatnot": 351, "whats_new": [380, 384], "wheel": [374, 376, 380, 394, 396, 1043, 1045, 1047], "wheeler": [1044, 1045], "wheelhouse_upload": 380, "when": [0, 2, 43, 48, 49, 50, 52, 58, 61, 62, 63, 64, 70, 74, 75, 78, 89, 93, 100, 102, 103, 104, 109, 111, 112, 116, 120, 123, 124, 125, 127, 137, 140, 142, 143, 144, 146, 149, 150, 154, 155, 156, 165, 170, 181, 185, 186, 187, 188, 189, 193, 194, 198, 202, 204, 206, 212, 214, 216, 217, 228, 239, 240, 241, 245, 246, 253, 256, 258, 266, 269, 270, 271, 272, 273, 277, 279, 280, 283, 284, 287, 290, 292, 293, 296, 297, 298, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 326, 327, 331, 332, 334, 340, 343, 344, 347, 351, 352, 353, 355, 358, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 394, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 424, 431, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 459, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 516, 525, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 579, 582, 583, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 607, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 702, 703, 705, 706, 708, 709, 713, 714, 717, 728, 729, 730, 731, 733, 735, 736, 739, 747, 749, 752, 755, 756, 758, 762, 764, 768, 769, 770, 772, 775, 779, 782, 783, 784, 785, 786, 788, 789, 790, 792, 793, 794, 796, 798, 799, 800, 801, 804, 805, 806, 807, 815, 819, 820, 822, 823, 824, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 891, 892, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 924, 926, 927, 930, 931, 932, 939, 943, 947, 948, 949, 950, 952, 953, 954, 959, 962, 964, 970, 990, 991, 992, 994, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1022, 1025, 1026, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "whenev": [177, 185, 264, 359, 370, 384, 390, 394, 406, 482, 483, 484, 497, 629, 631, 993, 1001, 1022, 1043], "where": [47, 50, 51, 53, 55, 57, 58, 61, 62, 63, 68, 86, 88, 90, 111, 116, 118, 120, 123, 129, 130, 134, 136, 138, 140, 143, 144, 146, 149, 151, 165, 166, 168, 170, 176, 179, 182, 186, 193, 198, 205, 213, 216, 221, 222, 223, 225, 229, 230, 232, 234, 235, 239, 240, 243, 246, 247, 249, 251, 261, 264, 266, 267, 270, 272, 276, 277, 279, 281, 282, 284, 287, 289, 308, 310, 312, 313, 314, 315, 316, 317, 319, 321, 322, 327, 330, 331, 338, 344, 347, 348, 349, 351, 355, 356, 359, 363, 364, 365, 370, 372, 373, 375, 376, 378, 380, 382, 383, 384, 388, 389, 390, 391, 394, 399, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 431, 437, 444, 447, 448, 452, 461, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 487, 497, 527, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 583, 584, 585, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 610, 611, 612, 614, 616, 620, 623, 624, 626, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 689, 692, 693, 694, 697, 708, 712, 713, 717, 726, 730, 731, 732, 740, 742, 756, 764, 769, 770, 771, 774, 782, 783, 784, 785, 788, 789, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 844, 848, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 868, 875, 878, 880, 881, 884, 885, 891, 893, 899, 900, 901, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 922, 940, 941, 942, 943, 949, 954, 958, 961, 986, 991, 993, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1013, 1014, 1016, 1017, 1018, 1022, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "wherea": [52, 70, 86, 100, 111, 150, 226, 249, 271, 272, 273, 279, 293, 315, 344, 347, 348, 365, 391, 412, 415, 444, 446, 566, 659, 660, 803, 819, 833, 994, 1001, 1003, 1005, 1012, 1018, 1046, 1051], "wherein": 390, "whether": [2, 47, 49, 52, 103, 132, 150, 173, 178, 186, 187, 212, 216, 230, 233, 240, 246, 264, 268, 310, 358, 359, 364, 371, 374, 375, 376, 378, 380, 381, 382, 390, 399, 407, 408, 409, 410, 412, 413, 415, 417, 420, 440, 442, 451, 453, 454, 459, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 491, 493, 497, 498, 504, 509, 510, 515, 523, 528, 532, 533, 538, 539, 540, 541, 543, 546, 547, 549, 553, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 582, 589, 590, 591, 592, 598, 603, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 630, 632, 633, 634, 636, 637, 638, 639, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 691, 695, 696, 698, 699, 701, 703, 705, 712, 713, 743, 762, 768, 775, 779, 783, 790, 800, 801, 804, 805, 806, 807, 815, 819, 820, 823, 824, 825, 828, 829, 831, 834, 836, 839, 840, 841, 842, 844, 847, 848, 849, 851, 853, 855, 856, 857, 858, 859, 862, 863, 869, 886, 892, 905, 906, 907, 908, 909, 910, 911, 917, 919, 921, 922, 923, 924, 925, 929, 931, 932, 933, 935, 943, 944, 948, 949, 957, 958, 974, 985, 989, 990, 991, 992, 997, 998, 1002, 1007, 1008, 1014, 1016, 1017, 1026, 1040, 1041, 1042, 1050], "whi": [186, 188], "which": [0, 2, 43, 46, 49, 51, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 70, 72, 74, 75, 78, 79, 80, 82, 86, 88, 89, 90, 91, 98, 100, 102, 103, 104, 107, 109, 111, 112, 116, 118, 122, 124, 125, 126, 130, 134, 137, 138, 139, 140, 143, 145, 146, 149, 150, 152, 153, 154, 155, 156, 157, 159, 163, 165, 167, 168, 170, 171, 175, 176, 177, 181, 182, 185, 186, 187, 189, 191, 193, 194, 198, 202, 206, 212, 213, 214, 216, 218, 220, 226, 228, 229, 230, 232, 233, 234, 236, 239, 240, 243, 244, 245, 246, 247, 249, 250, 255, 256, 260, 261, 263, 264, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 287, 289, 290, 295, 296, 297, 306, 310, 312, 313, 314, 315, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 340, 344, 347, 349, 351, 352, 353, 355, 357, 358, 359, 363, 364, 365, 368, 370, 371, 373, 374, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 393, 394, 396, 399, 402, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 462, 463, 464, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 487, 524, 532, 533, 534, 535, 538, 539, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 580, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 618, 620, 623, 628, 629, 630, 631, 633, 634, 635, 641, 643, 644, 645, 648, 649, 650, 652, 653, 654, 655, 656, 657, 659, 660, 662, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 681, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 708, 710, 717, 718, 720, 721, 724, 726, 727, 735, 736, 737, 738, 743, 744, 757, 759, 779, 780, 781, 782, 783, 784, 790, 798, 799, 800, 801, 804, 805, 806, 807, 809, 811, 815, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 856, 857, 858, 859, 862, 865, 869, 872, 876, 878, 879, 880, 883, 884, 885, 886, 887, 889, 897, 898, 900, 901, 902, 905, 907, 910, 911, 913, 914, 915, 916, 917, 921, 923, 926, 927, 931, 932, 938, 941, 943, 944, 948, 949, 951, 954, 957, 958, 959, 961, 970, 973, 976, 982, 985, 990, 991, 992, 993, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "whichev": [408, 415, 446, 545, 562, 563, 634, 651, 655, 657, 665, 683, 684, 698], "whidou": 1046, "while": [0, 2, 25, 43, 46, 47, 49, 51, 55, 58, 61, 64, 70, 72, 74, 78, 79, 88, 95, 99, 102, 105, 107, 118, 124, 125, 134, 137, 140, 141, 144, 149, 151, 154, 168, 171, 176, 178, 179, 181, 185, 186, 187, 188, 191, 193, 195, 198, 201, 202, 207, 212, 214, 216, 228, 239, 242, 243, 246, 247, 256, 257, 261, 263, 264, 265, 269, 270, 271, 273, 277, 278, 279, 280, 281, 283, 292, 310, 311, 312, 315, 316, 317, 319, 322, 325, 326, 337, 340, 351, 353, 358, 359, 364, 368, 369, 370, 371, 372, 375, 376, 378, 380, 381, 382, 384, 385, 388, 390, 391, 402, 406, 407, 408, 411, 412, 413, 415, 416, 417, 418, 419, 420, 444, 464, 467, 468, 483, 485, 497, 522, 533, 553, 558, 559, 560, 561, 565, 566, 567, 568, 569, 570, 571, 576, 583, 589, 590, 591, 592, 595, 598, 603, 607, 635, 644, 647, 648, 650, 657, 658, 659, 660, 677, 678, 679, 680, 709, 731, 755, 775, 779, 789, 795, 798, 801, 802, 803, 806, 807, 808, 809, 810, 811, 815, 816, 817, 819, 824, 826, 827, 828, 829, 830, 832, 840, 851, 853, 855, 856, 857, 864, 865, 866, 867, 868, 881, 893, 898, 903, 905, 906, 913, 914, 915, 916, 927, 953, 991, 992, 994, 995, 996, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1014, 1017, 1018, 1021, 1022, 1033, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "whilst": [138, 234], "whisker": 49, "white": [2, 91, 93, 120, 175, 186, 226, 232, 296, 308, 312, 334, 339, 413, 416, 626, 1018, 1033, 1036, 1039, 1043, 1047], "whitekernel": [2, 170, 175, 176, 418, 612, 613, 615, 1044], "whiten": [45, 120, 121, 122, 294, 413, 420, 534, 535, 542, 883, 885, 1012, 1037, 1039, 1047, 1048, 1051], "whiten_solv": [420, 534, 1048, 1051], "whitening_": 534, "whitespac": 416, "whl": 380, "who": [0, 102, 186, 364, 371, 376, 383, 391, 394, 847, 848, 849, 851, 853, 855, 856, 857, 1021, 1035, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "whole": [49, 83, 106, 149, 157, 182, 213, 249, 267, 274, 302, 340, 344, 355, 363, 376, 388, 389, 409, 411, 415, 418, 449, 483, 539, 556, 557, 558, 559, 564, 565, 566, 567, 571, 686, 687, 801, 804, 805, 815, 829, 840, 841, 842, 843, 844, 991, 1002, 1012, 1041, 1043], "whose": [2, 88, 110, 111, 112, 168, 175, 212, 240, 338, 371, 384, 385, 390, 406, 408, 410, 415, 417, 418, 421, 437, 438, 439, 448, 461, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 516, 535, 539, 541, 542, 545, 548, 550, 573, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 641, 672, 696, 719, 801, 808, 815, 830, 851, 870, 897, 898, 948, 980, 981, 996, 1003, 1007, 1008, 1009, 1017, 1036, 1041, 1042, 1044, 1047], "why": [64, 72, 85, 120, 134, 140, 149, 186, 188, 191, 202, 264, 267, 270, 287, 351, 352, 376, 384, 390, 408, 410, 413, 419, 444, 447, 451, 1002, 1004, 1017, 1036], "wick": 1045, "wide": [64, 93, 94, 126, 137, 243, 311, 388, 408, 413, 416, 991, 998, 1021, 1026, 1033, 1035, 1049], "widehat": 173, "wider": [52, 214, 416, 918, 998], "widetild": 1018, "width": [47, 49, 52, 86, 111, 122, 123, 126, 128, 129, 130, 137, 142, 143, 146, 156, 164, 172, 178, 197, 253, 255, 269, 293, 310, 312, 313, 316, 321, 324, 337, 373, 409, 438, 439, 452, 464, 494, 495, 507, 522, 587, 870, 918, 1012, 1016, 1018, 1041], "wiesel": [410, 421, 475], "wignal": [1036, 1037, 1043, 1044], "wijewardena": [0, 1036, 1037, 1038], "wiki": [55, 61, 382, 384, 596, 637, 669, 672, 696, 706, 847, 848, 853, 854, 855, 856, 883, 899, 913, 914, 998, 1002, 1018], "wikic": 994, "wikipedia": [37, 42, 61, 183, 384, 408, 596, 608, 609, 637, 657, 669, 672, 683, 684, 696, 705, 706, 708, 710, 713, 717, 719, 727, 730, 731, 732, 735, 736, 739, 744, 757, 784, 786, 787, 789, 790, 793, 794, 847, 848, 853, 854, 855, 856, 883, 899, 913, 914, 949, 994, 998, 1002, 1005, 1014, 1018, 1023, 1033, 1040], "wikipedia_principal_eigenvector": [55, 1023], "wikipediadet2017": 1002, "wikipediamcc2021": 1002, "wil": 1045, "wild": [2, 45, 369, 494, 495, 509, 510, 1028, 1033], "wilderness_area": 249, "wildli": [295, 1001], "wilei": [373, 992], "wilhelm": [1037, 1039, 1043], "wilk": 406, "wilksch": 1048, "willamett": 316, "willard": 1045, "willdarnel": 1043, "willduan": 1040, "william": [168, 371, 373, 418, 611, 612, 615, 620, 623, 640, 994, 1002, 1006, 1040, 1041, 1042, 1043, 1048, 1049], "williamson": 1043, "willing": [185, 267, 407], "willocx": 1043, "willpeppo": 1045, "wilson": [111, 373, 1033, 1036], "wiman": 1033, "wimld": 1047, "win": [52, 264], "winata": [1043, 1045], "wind": [187, 1003], "windber": 1044, "windiana42": 1049, "window": [57, 333, 371, 376, 378, 379, 384, 416, 1033, 1036, 1040, 1044, 1046, 1047, 1051], "windowsapp": 394, "windowserror": 1049, "windspe": [43, 187], "wine": [2, 48, 252, 315, 316, 369, 511, 1028], "wine_review": 316, "wineri": 316, "winn": 1002, "winter": [43, 52], "winterman": 1034, "wip": [384, 394], "wipf": [646, 998], "wire": [382, 535, 542], "wiryadi": [1045, 1051], "wisc": [168, 373, 900], "wisconsin": [2, 168, 189, 369, 501, 1010, 1028, 1038], "wise": [2, 46, 63, 178, 213, 239, 280, 310, 352, 363, 390, 406, 408, 412, 413, 417, 458, 532, 535, 538, 542, 546, 547, 550, 551, 554, 556, 557, 560, 561, 593, 596, 597, 599, 600, 601, 607, 641, 653, 701, 755, 833, 852, 882, 895, 896, 899, 974, 976, 977, 978, 979, 982, 994, 996, 998, 1002, 1003, 1016, 1022, 1033, 1038, 1041, 1042, 1043], "wish": [370, 376, 378, 383, 385, 394, 408, 949, 1040], "wishart": 798, "wissen": 450, "with_cent": [883, 895], "with_error": 702, "with_mean": [381, 885, 896, 1012, 1041, 1046], "with_scal": [883, 895], "with_std": [885, 896, 1012, 1041], "withheld": 412, "within": [2, 41, 43, 58, 93, 139, 141, 144, 149, 153, 165, 167, 168, 213, 214, 224, 230, 246, 250, 268, 269, 273, 310, 311, 321, 338, 341, 344, 347, 353, 359, 363, 371, 376, 380, 385, 388, 390, 391, 399, 404, 405, 406, 408, 409, 412, 414, 415, 419, 444, 448, 461, 463, 464, 466, 469, 474, 516, 550, 568, 569, 570, 571, 594, 595, 633, 693, 697, 700, 711, 726, 782, 798, 799, 806, 807, 819, 820, 829, 830, 845, 846, 847, 848, 853, 855, 856, 857, 864, 865, 866, 878, 886, 890, 891, 893, 894, 895, 896, 907, 908, 909, 910, 911, 913, 914, 915, 916, 991, 996, 998, 999, 1005, 1008, 1012, 1015, 1017, 1018, 1022, 1026, 1035, 1036, 1040, 1041, 1046, 1047, 1049, 1050, 1051], "without": [2, 43, 44, 52, 53, 61, 71, 77, 79, 81, 85, 88, 89, 95, 100, 107, 125, 140, 144, 145, 148, 149, 151, 154, 160, 164, 168, 177, 183, 185, 186, 187, 198, 202, 220, 239, 243, 246, 247, 249, 250, 252, 263, 264, 271, 275, 277, 287, 290, 291, 292, 293, 299, 300, 301, 302, 310, 311, 315, 317, 319, 344, 347, 352, 365, 371, 372, 374, 376, 377, 378, 380, 381, 382, 385, 388, 389, 390, 399, 402, 408, 409, 413, 415, 416, 417, 418, 433, 439, 441, 446, 458, 469, 474, 492, 497, 505, 516, 533, 535, 556, 557, 564, 580, 581, 612, 628, 632, 635, 640, 660, 693, 701, 782, 804, 805, 806, 813, 815, 830, 831, 847, 854, 858, 864, 865, 868, 871, 874, 875, 877, 881, 882, 883, 885, 890, 905, 927, 970, 991, 992, 994, 996, 998, 999, 1002, 1005, 1008, 1012, 1016, 1017, 1018, 1021, 1022, 1023, 1030, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1051], "withstrok": 75, "witten": 412, "wittenau": 1038, "wk": 706, "wl": 374, "wminkowski": [1045, 1047], "wmt": 51, "wnl": 416, "wo": 416, "wojdyla": [1048, 1049], "wolberg": [168, 373], "wolf": [2, 49, 65, 70, 108, 109, 112, 113, 183, 299, 473, 475, 479, 480, 513, 550, 996, 1023, 1040], "wolframalpha": 1043, "wolodzko": 1046, "wolosonovich": 1041, "wolpert": [415, 568, 569], "wolsza": 1051, "wompner": 1041, "won": [154, 307, 352, 380, 384, 408, 468, 497, 628, 629, 631, 688, 705, 718, 737, 738, 756, 758, 796, 1001, 1012, 1038, 1039, 1044], "wonder": [351, 374], "wonpil": 998, "wood": 1042, "woolam": 1033, "word": [47, 54, 57, 102, 170, 201, 243, 247, 340, 352, 353, 363, 371, 372, 376, 378, 381, 390, 405, 407, 408, 410, 411, 412, 413, 453, 512, 524, 535, 537, 542, 589, 590, 592, 697, 834, 844, 902, 996, 1000, 1004, 1007, 1012, 1015, 1016, 1026, 1033, 1041], "word_col": 57, "word_scor": 57, "word_token": 416, "wordnetlemmat": 416, "work": [0, 3, 43, 48, 52, 55, 68, 79, 85, 100, 109, 137, 143, 157, 168, 176, 177, 185, 186, 187, 202, 216, 229, 246, 268, 287, 296, 297, 316, 320, 322, 323, 325, 342, 344, 352, 353, 359, 364, 365, 370, 371, 374, 376, 377, 378, 379, 380, 381, 382, 384, 389, 390, 391, 402, 404, 405, 406, 408, 409, 410, 413, 415, 416, 417, 420, 421, 422, 423, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 460, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 505, 509, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 689, 690, 691, 692, 693, 696, 709, 775, 779, 780, 781, 782, 789, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 949, 953, 991, 992, 994, 996, 997, 998, 999, 1001, 1002, 1004, 1005, 1008, 1009, 1012, 1015, 1016, 1021, 1022, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "workabl": 381, "workaround": [316, 376, 801, 815], "workclass": [326, 497], "worker": [364, 390, 416, 967, 968, 1048], "workflow": [376, 379, 380, 389, 412, 1025, 1028], "working_memori": [363, 364, 468, 782, 903, 1041], "workingdai": [43, 187], "workload": 1021, "workshop": [0, 408, 416, 840, 1004, 1020], "workstat": 384, "world": [0, 88, 102, 106, 186, 216, 236, 249, 264, 351, 363, 369, 373, 408, 413, 416, 966, 992, 1002, 1004, 1020, 1022, 1026, 1028, 1033], "worldwid": 1026, "wornbb": 1044, "worri": [87, 999], "wors": [43, 116, 134, 171, 187, 218, 270, 278, 289, 315, 359, 406, 408, 418, 431, 465, 482, 483, 484, 553, 555, 557, 559, 561, 563, 566, 569, 571, 611, 612, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 670, 671, 673, 674, 679, 680, 681, 706, 722, 723, 724, 725, 729, 786, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 1002, 1012, 1042], "worse_prob": 270, "worsen": 144, "worst": [168, 212, 316, 373, 408, 444, 447, 709, 730, 731, 784, 785, 788, 793, 794, 830, 1002, 1026, 1033, 1046], "worth": [88, 142, 187, 212, 376, 384, 1026], "worthwhil": [104, 390], "would": [0, 25, 43, 45, 48, 52, 63, 64, 68, 86, 88, 91, 102, 109, 111, 112, 116, 118, 125, 134, 146, 168, 170, 175, 176, 186, 187, 188, 189, 191, 198, 203, 212, 213, 214, 227, 230, 239, 246, 249, 257, 264, 266, 270, 271, 276, 278, 280, 284, 287, 290, 296, 302, 307, 310, 311, 315, 316, 322, 325, 332, 340, 344, 347, 348, 351, 353, 358, 359, 363, 371, 372, 376, 377, 378, 382, 384, 385, 388, 389, 390, 391, 399, 402, 405, 406, 408, 409, 410, 411, 412, 413, 415, 416, 417, 431, 446, 465, 468, 482, 483, 484, 489, 528, 533, 535, 537, 542, 545, 553, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 569, 571, 584, 585, 588, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 679, 680, 701, 703, 709, 713, 714, 721, 757, 779, 783, 786, 790, 801, 803, 815, 830, 838, 839, 848, 856, 863, 890, 891, 893, 894, 895, 896, 897, 898, 903, 905, 906, 908, 911, 913, 914, 915, 916, 958, 961, 991, 992, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1017, 1021, 1022, 1026, 1030, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "wp": [416, 658, 672], "wpd": 351, "wprd": 416, "wrap": [120, 139, 146, 290, 327, 370, 378, 390, 402, 432, 509, 658, 659, 660, 677, 831, 889, 992, 1002, 1005, 1017, 1021, 1033, 1038, 1041, 1043, 1044, 1046, 1048], "wraparound": 377, "wrapper": [2, 64, 290, 382, 385, 412, 418, 545, 621, 669, 672, 743, 905, 998, 1018, 1021, 1037, 1045], "wrath": 409, "write": [47, 55, 147, 182, 189, 246, 319, 351, 363, 364, 370, 374, 375, 376, 380, 381, 382, 384, 385, 388, 390, 402, 404, 409, 413, 416, 1013, 1022, 1034, 1046, 1050], "writeabl": [931, 932, 1051], "writer": 351, "written": [41, 44, 46, 65, 84, 86, 123, 166, 183, 219, 263, 294, 322, 329, 330, 364, 373, 376, 377, 378, 382, 384, 388, 390, 409, 414, 487, 503, 509, 698, 714, 831, 910, 917, 996, 998, 1002, 1006, 1007, 1016, 1023, 1042], "wrong": [93, 212, 264, 296, 351, 359, 373, 376, 378, 416, 505, 727, 757, 794, 1002, 1008, 1017, 1036, 1038, 1040, 1041, 1042, 1043, 1046, 1050, 1051], "wrongli": [212, 340, 1051], "wrote": [154, 371], "ws2001": 994, "wspace": [53, 54, 74, 79, 95, 111, 120, 136, 212, 230, 239, 255, 257, 258, 261, 295, 303, 330, 337], "wstate": 1046, "wtv": 382, "wtw": 382, "wu": [1017, 1037, 1045], "wurp": [1047, 1048], "wuthrich": [212, 230], "ww": 413, "www": [45, 103, 191, 212, 228, 230, 284, 289, 307, 370, 371, 376, 384, 408, 412, 442, 449, 487, 509, 510, 532, 535, 538, 542, 645, 659, 665, 672, 686, 687, 854, 861, 913, 914, 998, 1015], "www4": [168, 373], "wyseguy7": 1039, "w\u00fcthrich": 406, "x": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 61, 62, 63, 64, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 106, 107, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 232, 233, 234, 237, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 369, 370, 371, 372, 376, 377, 378, 380, 381, 382, 383, 384, 385, 388, 389, 390, 399, 402, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 494, 495, 496, 499, 501, 502, 503, 506, 507, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 711, 712, 726, 733, 736, 743, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 789, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 922, 924, 926, 927, 928, 929, 930, 931, 932, 935, 946, 948, 949, 950, 951, 961, 962, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1012, 1014, 1015, 1016, 1017, 1018, 1022, 1030, 1033, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1047, 1048, 1049, 1050, 1051], "x0": [51, 205, 221, 235, 253, 310, 337, 390, 429, 464, 568, 569, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886], "x00": 416, "x006": 1034, "x00a": 416, "x00b": 416, "x00c": 416, "x00d": 416, "x00e": 416, "x00f": 416, "x00g": 416, "x00h": 416, "x00i": 416, "x00l": 416, "x00n": 416, "x00o": 416, "x00r": 416, "x00t": 416, "x00u": 416, "x00z": 416, "x0_cat": [323, 1012], "x0_infrequent_sklearn": [323, 1012], "x0_label": 310, "x0_rabbit": [323, 1012], "x0_str_femal": 878, "x0_str_male": 878, "x0l": 1037, "x1": [51, 115, 136, 145, 173, 224, 235, 310, 337, 378, 390, 429, 464, 510, 568, 569, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 628, 629, 630, 631, 700, 868, 869, 870, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886], "x110": 1048, "x1_int_1": 878, "x1_int_2": 878, "x1_int_3": 878, "x1_label": 310, "x2": [115, 136, 145, 173, 224, 253, 378, 409, 589, 630, 700], "x27": [63, 103, 104, 139, 154, 157, 165, 186, 187, 188, 240, 241, 250, 251, 253, 260, 264, 268, 270, 271, 277, 282, 284, 308, 316, 320, 321, 323, 331], "x2_tr": 630, "x3": [145, 253, 409], "x64": 374, "x8": 86, "x86": 374, "x86_64": [379, 394], "x9ft": 416, "x_": [163, 171, 261, 270, 319, 378, 408, 411, 413, 628, 636, 765, 860, 900, 901, 998, 1004, 1009, 1039], "x_0": [213, 658], "x_1": [120, 163, 173, 213, 411, 413, 415, 418, 614, 626, 658, 878, 905, 906, 998, 1004, 1006, 1012, 1016], "x_1d": 323, "x_1x_2": 1012, "x_1x_2x_3": 1012, "x_1x_3": 1012, "x_2": [163, 173, 413, 415, 416, 418, 614, 626, 998, 1006, 1012], "x_20": 333, "x_2d": 340, "x_2x_3": 1012, "x_3": [163, 1012], "x_6": 878, "x_7": 878, "x_a": 314, "x_adult": 326, "x_aniso": [79, 90, 95], "x_axi": [122, 220, 274], "x_b": 314, "x_bimod": 314, "x_bin": 311, "x_bound": [418, 618], "x_c": [482, 483, 485, 1009], "x_calib": 437, "x_california": 182, "x_cardiotocographi": 249, "x_center": 195, "x_check": 932, "x_chisq": 314, "x_cluster": 857, "x_convert": 931, "x_copi": 1044, "x_cu": 404, "x_d": [418, 615], "x_dens": [326, 545], "x_df": 151, "x_diabet": 182, "x_different_covari": 70, "x_digit": [105, 160, 306, 409], "x_dist_graph": 849, "x_embed": [299, 300, 693, 697, 854, 1005], "x_error": 218, "x_errors_larg": 218, "x_featur": [106, 641, 642, 643, 994], "x_filter": 90, "x_fit": 689, "x_fit_": [536, 644], "x_forestcov": 249, "x_full": [181, 182, 310], "x_full_train": 139, "x_gaussian": 314, "x_hashed_lsa": 352, "x_hat": [532, 538, 546, 547], "x_hetero": 127, "x_homo": 127, "x_i": [52, 111, 138, 163, 186, 213, 322, 347, 408, 413, 414, 415, 418, 615, 616, 620, 623, 624, 626, 840, 841, 844, 993, 994, 998, 1004, 1005, 1006, 1012, 1016, 1017, 1018], "x_idx_sort": 1045, "x_imput": 631, "x_indic": 164, "x_inform": 317, "x_inlier": 297, "x_inv": [589, 592], "x_ipca": 124, "x_iri": 275, "x_isotropic_covari": 70, "x_j": [408, 418, 615, 616, 620, 623, 624, 626, 993, 994, 998, 1005, 1017, 1018], "x_k": [411, 413, 996, 1005], "x_label": 182, "x_leav": [558, 559, 560, 561, 565, 566, 567, 913, 914, 915, 916], "x_left_lower_corn": [50, 303, 371, 499], "x_legend": 47, "x_list": 313, "x_loadings_": [482, 483, 484], "x_lognorm": [314, 1012], "x_lsa": 352, "x_m": 1006, "x_max": [67, 85, 91, 136, 142, 152, 161, 172, 244, 305, 312, 334, 344, 345], "x_max_": 636, "x_mean": 420, "x_mean_": 1045, "x_min": [67, 85, 91, 136, 142, 146, 152, 161, 172, 202, 244, 305, 312, 334, 344, 345], "x_min_": 636, "x_miss": [149, 181, 182], "x_miss_california": 182, "x_miss_diabet": 182, "x_n": [120, 413, 905, 906, 1004, 1006, 1016], "x_near_unique_categori": 317, "x_new": [89, 409, 413, 417, 432, 442, 443, 445, 447, 449, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 550, 568, 570, 571, 583, 584, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 629, 631, 636, 639, 640, 641, 642, 643, 689, 690, 691, 692, 693, 854, 861, 868, 869, 870, 871, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 897, 898, 1014], "x_new_again": 1014, "x_new_invers": 1014, "x_norm_squar": [764, 1038, 1050], "x_normal": 1012, "x_np": 404, "x_offset": 195, "x_offset_": [645, 646, 1045], "x_origin": [535, 540, 542, 544, 545, 631, 897, 898], "x_out": [324, 869, 878, 879], "x_outlier": [196, 226, 296, 297, 339], "x_p": [408, 446, 998], "x_pca": 124, "x_plot": [193, 213, 218, 245, 273, 295, 315], "x_plot_ext": 213, "x_plot_scal": 315, "x_po": 289, "x_q": 408, "x_r": [128, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604], "x_r2": 128, "x_rand": 276, "x_random": 202, "x_reconstruct": [323, 482, 483, 484, 584], "x_reconstructed_kernel_pca": [44, 125], "x_reconstructed_pca": [44, 125], "x_red": 85, "x_reduc": [84, 126, 152, 445], "x_restor": 84, "x_right": 70, "x_rope": 270, "x_rotations_": [411, 482, 483, 484], "x_scale": [195, 875, 891, 1012], "x_scale_": [645, 646, 1045], "x_scaler": 49, "x_score": [297, 482, 483, 484, 485], "x_scores_": [484, 1045], "x_select": 359, "x_shared_covari": 70, "x_shuffl": 317, "x_size": 112, "x_sp": 199, "x_spars": [326, 535, 972, 975], "x_sparse_embed": 567, "x_squared_norm": [258, 460], "x_src": 295, "x_std": [875, 891, 1012], "x_std_": 1045, "x_t": [464, 628, 864], "x_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 125, 134, 137, 139, 141, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 175, 178, 185, 186, 187, 188, 189, 191, 194, 198, 203, 208, 209, 210, 218, 219, 220, 226, 227, 228, 230, 240, 242, 248, 252, 253, 257, 263, 264, 267, 268, 273, 277, 279, 283, 285, 289, 293, 296, 298, 299, 302, 305, 307, 308, 312, 314, 315, 317, 319, 320, 321, 326, 327, 332, 333, 339, 351, 355, 357, 358, 359, 363, 370, 378, 381, 389, 402, 409, 412, 415, 438, 470, 471, 472, 473, 474, 475, 476, 510, 559, 560, 561, 568, 569, 698, 699, 701, 703, 800, 823, 831, 833, 836, 854, 862, 863, 865, 879, 915, 916, 992, 1002, 1004, 1005, 1006, 1008, 1012, 1016, 1017, 1018, 1030, 1033], "x_test_df": 253, "x_test_kernel_pca": 125, "x_test_maxab": 1012, "x_test_minmax": 1012, "x_test_miss": 149, "x_test_no_cf_encod": 317, "x_test_noisi": 44, "x_test_np": 253, "x_test_pca": [45, 125], "x_test_r": 115, "x_test_scal": 253, "x_test_sel": 189, "x_test_select": 359, "x_test_text": 47, "x_test_tran": 1012, "x_test_transform": [359, 412], "x_text": 47, "x_tfidf": 352, "x_thresholds_": [242, 636, 1045], "x_torch": 404, "x_tr": [868, 874, 877, 878, 879, 883, 885, 888, 890, 891, 895, 896], "x_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 109, 115, 116, 125, 134, 137, 141, 144, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 194, 198, 208, 209, 210, 213, 219, 220, 226, 227, 228, 230, 240, 248, 252, 253, 257, 259, 263, 264, 267, 268, 273, 277, 279, 283, 289, 293, 296, 298, 299, 302, 305, 307, 308, 312, 314, 315, 317, 319, 320, 321, 326, 327, 332, 333, 339, 351, 355, 358, 359, 363, 370, 378, 381, 389, 409, 412, 415, 437, 438, 510, 559, 560, 561, 568, 569, 698, 699, 701, 703, 800, 823, 831, 833, 836, 854, 862, 863, 865, 879, 915, 916, 992, 1002, 1004, 1005, 1006, 1008, 1010, 1012, 1016, 1017, 1030], "x_train_": 612, "x_train_ensembl": 139, "x_train_linear": 139, "x_train_maxab": 1012, "x_train_minmax": 1012, "x_train_miss": 149, "x_train_no_cf_encod": 317, "x_train_noisi": 44, "x_train_pca": 45, "x_train_preprocess": 186, "x_train_r": 115, "x_train_sel": 189, "x_train_select": 359, "x_train_std_transform": 315, "x_train_text": 47, "x_train_tran": 1012, "x_train_transform": [315, 359, 412], "x_train_valid": 63, "x_tran": [314, 325, 404, 442, 464, 881, 886, 893, 926, 1012], "x_trans_bc": 314, "x_trans_qt": 314, "x_trans_yj": 314, "x_transform": [124, 152, 246, 485, 532, 533, 534, 535, 536, 538, 540, 544, 567, 639, 640, 689, 690, 691, 692], "x_transformed_fit_": 536, "x_true": 235, "x_uniform": 314, "x_val": [144, 1010], "x_valid": 63, "x_valu": 332, "x_vari": 90, "x_weibul": 314, "x_weights_": [411, 482, 483, 484, 485], "x_wrong": 70, "xa": 582, "xanchor": 271, "xarg": 1033, "xavier": [862, 863, 1041, 1042, 1043, 1045, 1046, 1051], "xaxi": [126, 140, 232, 234, 237, 290, 295, 351], "xaxis2": 140, "xb": [115, 884], "xbar_": 550, "xbc": 416, "xc3": 416, "xcjason": 1043, "xcode": 374, "xd": 527, "xdang": 680, "xerox": 51, "xerr": [181, 182, 352], "xethan": 1045, "xfail": [384, 924], "xfc": 416, "xfcche": 416, "xfea": 416, "xff": 416, "xgamma": 686, "xgboost": [149, 151, 415, 1021], "xgrid": [50, 303], "xhan": 1042, "xhy": 1040, "xi": [2, 79, 98, 373, 408, 411, 416, 450, 456, 510, 1016, 1044], "xi_i": 1016, "xi_k": 411, "xiang": 1051, "xiangyin": 1046, "xiao": [0, 387, 397, 1041, 1043, 1046, 1047, 1048, 1049, 1050, 1051], "xiaojin": 900, "xiaoyu": 1045, "xiaoyuchai": 1046, "xin": [680, 998, 1041], "xinfan": [1033, 1034, 1037], "xing": [1041, 1042], "xinv": 870, "xinyu": 408, "xinyuliu12": 1042, "xiong": [1041, 1042, 1047], "xj": 406, "xk": [98, 551], "xlabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 76, 94, 109, 110, 112, 113, 115, 116, 122, 126, 127, 135, 136, 138, 143, 145, 146, 147, 148, 149, 153, 157, 159, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 186, 193, 196, 197, 198, 200, 201, 202, 203, 206, 207, 209, 212, 214, 215, 217, 219, 221, 222, 226, 230, 243, 245, 247, 249, 265, 269, 270, 274, 275, 279, 280, 283, 285, 292, 293, 296, 297, 316, 317, 337, 339, 340, 343, 351, 356, 357, 632], "xlim": [51, 63, 79, 91, 95, 105, 109, 110, 111, 122, 136, 137, 138, 153, 159, 171, 172, 186, 193, 203, 205, 211, 218, 221, 226, 239, 247, 256, 261, 265, 279, 285, 296, 297, 339, 344, 345, 348, 357], "xm": [51, 235], "xmax": [50, 109, 203, 205, 221, 222, 303], "xmin": [50, 109, 203, 205, 221, 222, 303], "xn": 510, "xom": 51, "xor": [169, 171, 172, 173, 183, 222, 223, 225, 259, 313, 345, 349, 611, 615, 623, 998, 1018, 1023, 1040], "xp": [411, 880], "xpreprocessor": 374, "xrang": 1039, "xred": [445, 1049], "xrot": 53, "xrx": 51, "xs_sp": 199, "xsat": 1043, "xscale": [171, 176, 245], "xt": [157, 290, 390, 445, 539, 541, 628, 630, 801, 804, 805, 815, 849, 857, 865, 870, 875, 882, 894, 929, 1049, 1051], "xtick": [43, 45, 47, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 123, 143, 145, 149, 172, 173, 174, 178, 197, 203, 225, 239, 247, 256, 257, 258, 261, 269, 270, 285, 294, 303, 308, 316, 329, 340, 343, 345, 698], "xtick_period": 187, "xtick_start": 187, "xticklabel": [43, 49, 143, 149, 187, 316], "xticks_label": 145, "xticks_po": 145, "xticks_rot": [45, 698], "xtrain": 303, "xu": [408, 411, 419, 444, 1016, 1046, 1047, 1050, 1051], "xue": [0, 1037, 1038, 1039, 1041, 1042, 1045], "xuefeng": [1050, 1051], "xueqin": [680, 998], "xun": [1043, 1045], "xuniu": 1048, "xval": 182, "xw": [211, 322, 647, 648, 650, 653, 654, 655, 656, 657, 661, 662, 663, 664, 673, 682, 683, 684, 685, 998], "xx": [77, 91, 111, 142, 146, 152, 161, 172, 173, 174, 187, 219, 222, 223, 224, 225, 226, 237, 239, 247, 259, 296, 305, 312, 313, 334, 339, 340, 344, 345, 348, 349], "xx0": [136, 632], "xx1": [136, 632], "xx_coarser": 142, "xxx": 390, "xy": [48, 63, 82, 277, 303, 345, 394, 647, 648, 651, 652, 653, 654, 655, 656, 661, 662, 663, 664, 665, 682, 683, 684, 685, 687], "xycoord": [48, 63], "xyguo": [1039, 1041], "xytext": [48, 63, 191], "xyz": 375, "y": [2, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 61, 62, 63, 64, 66, 67, 69, 70, 74, 75, 77, 78, 79, 85, 87, 89, 90, 93, 94, 95, 98, 99, 103, 104, 106, 107, 112, 115, 116, 118, 122, 124, 125, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 230, 232, 233, 234, 237, 240, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 289, 290, 292, 293, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 368, 369, 370, 371, 372, 374, 376, 378, 380, 381, 383, 384, 385, 389, 390, 399, 402, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 485, 487, 499, 501, 503, 506, 509, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 701, 702, 703, 707, 712, 727, 733, 736, 742, 743, 757, 759, 760, 761, 762, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 789, 790, 793, 794, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 897, 898, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 924, 925, 931, 936, 937, 961, 963, 964, 965, 972, 975, 988, 990, 991, 992, 993, 994, 996, 997, 998, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1016, 1017, 1018, 1022, 1028, 1030, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "y0": [51, 235], "y1": [51, 136, 235, 510, 717, 1003, 1004], "y1_label": 46, "y2": [136, 717, 1003], "y2_label": 46, "y3": 1003, "y_": [242, 256, 260, 261, 302, 378, 411, 413, 638, 649, 670, 681, 730, 731, 739, 765, 784, 785, 788, 998, 1002, 1039], "y_1": [135, 357, 411, 1002, 1006, 1016], "y_2": [135, 357, 1006], "y_20": 333, "y_2d": 340, "y_3": 357, "y_30": 334, "y_50": 334, "y_adult": 326, "y_all": [667, 669, 677, 833, 834, 862], "y_ard": 193, "y_ard_std": 193, "y_axi": [122, 220], "y_bia": 137, "y_brr": 193, "y_brr_std": 193, "y_c": [482, 483, 485], "y_calib": 437, "y_california": 182, "y_coclust": 57, "y_convert": 931, "y_cov": 612, "y_cu": 404, "y_decis": [326, 836], "y_dens": 1003, "y_diabet": 182, "y_different_covari": 70, "y_digit": [105, 160, 306, 409], "y_error": [137, 218], "y_errors_larg": 218, "y_filter": 90, "y_full": [181, 182, 310], "y_full_train": 139, "y_grid_pr": 152, "y_hat": 465, "y_high": 146, "y_i": [138, 322, 347, 406, 415, 993, 994, 998, 1002, 1006, 1016, 1017, 1018], "y_indic": 876, "y_iri": 275, "y_isotropic_covari": 70, "y_j": [994, 1002, 1004, 1012, 1017], "y_k": [411, 1012], "y_kmean": 57, "y_kr": 245, "y_l": 1002, "y_label": 230, "y_left_lower_corn": [50, 303, 371, 499], "y_limit": 143, "y_loadings_": [482, 483, 484], "y_loc": 351, "y_log_prob": 836, "y_log_proba": 865, "y_low": 146, "y_lower": [93, 146], "y_mask": 333, "y_max": [67, 91, 136, 142, 152, 161, 172, 230, 244, 305, 312, 334, 344, 345, 636, 638], "y_mean": [175, 176, 179, 612, 645, 646], "y_mean_": 1045, "y_med": 146, "y_min": [67, 91, 136, 142, 152, 161, 172, 244, 305, 312, 334, 344, 345, 636, 638], "y_miss": [181, 182], "y_miss_california": 182, "y_miss_diabet": 182, "y_multirf": 153, "y_n": [1002, 1006, 1016], "y_new": 89, "y_nois": 137, "y_noisi": 211, "y_norm_squar": 764, "y_normal": 214, "y_np": 404, "y_numer": [931, 990], "y_observ": 327, "y_onehot_test": 279, "y_org": 936, "y_outlier": 196, "y_pareto": 214, "y_plot": [193, 213, 218, 273], "y_plot_ext": 213, "y_po": 353, "y_pred": [43, 45, 46, 52, 62, 66, 68, 70, 79, 90, 95, 102, 107, 134, 146, 147, 149, 154, 165, 186, 209, 212, 214, 219, 222, 227, 229, 230, 239, 240, 249, 264, 266, 268, 273, 297, 301, 308, 315, 327, 332, 333, 359, 376, 383, 390, 415, 431, 439, 465, 482, 483, 484, 550, 553, 555, 557, 558, 559, 561, 563, 565, 566, 568, 569, 571, 612, 632, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 698, 699, 701, 702, 703, 704, 709, 713, 714, 719, 722, 723, 724, 725, 729, 730, 731, 735, 737, 739, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 784, 785, 786, 788, 789, 791, 792, 797, 801, 804, 805, 815, 826, 836, 838, 839, 848, 856, 863, 865, 905, 906, 907, 908, 909, 910, 911, 914, 916, 1002, 1004, 1039, 1040, 1042, 1044, 1048, 1049, 1050], "y_pred_ard": 198, "y_pred_bin": 212, "y_pred_chain": 289, "y_pred_empti": [730, 731], "y_pred_enet": 198, "y_pred_ensembl": 289, "y_pred_lasso": 198, "y_pred_lr": 214, "y_pred_nnl": 208, "y_pred_ol": 208, "y_pred_outli": [226, 296, 339], "y_pred_outliers_sgd": 226, "y_pred_ovr": 289, "y_pred_product": 230, "y_pred_qr": 214, "y_pred_ridg": 107, "y_pred_ridge_with_trans_target": 107, "y_pred_scal": 315, "y_pred_seg": 212, "y_pred_test": [226, 296, 339], "y_pred_test_sgd": 226, "y_pred_tot": 230, "y_pred_train": [226, 339], "y_pred_train_sgd": 226, "y_pred_with_": 185, "y_pred_without_": 185, "y_predict": [137, 378, 1033], "y_prob": [62, 64, 173, 438, 439, 710, 836, 862, 1002, 1047, 1051], "y_proba": [145, 148, 315, 390, 710, 865, 1051], "y_proba_sc": 315, "y_rand": 334, "y_reconstruct": [482, 483, 484], "y_rf": 153, "y_right": 70, "y_rotations_": [411, 482, 483, 484], "y_sampl": [179, 612], "y_scaler": 49, "y_score": [240, 277, 279, 390, 482, 483, 484, 708, 721, 727, 728, 740, 741, 757, 783, 789, 790, 795, 801, 804, 805, 815, 865, 1002, 1039, 1047, 1049, 1051], "y_scores_": [484, 1045], "y_shared_covari": 70, "y_spars": 1003, "y_std": [176, 179, 553, 612, 645, 646, 1046], "y_std_": 1045, "y_svr": 245, "y_test": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 125, 134, 137, 139, 141, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 178, 185, 186, 187, 188, 189, 191, 198, 208, 209, 212, 218, 219, 220, 227, 228, 230, 240, 248, 252, 253, 257, 263, 264, 267, 268, 273, 277, 279, 283, 289, 293, 298, 299, 305, 307, 308, 312, 315, 317, 319, 320, 321, 326, 327, 332, 333, 351, 355, 358, 359, 370, 381, 389, 409, 412, 415, 438, 510, 559, 560, 561, 568, 569, 698, 699, 701, 703, 800, 823, 831, 833, 836, 854, 862, 863, 865, 915, 916, 1002, 1004, 1005, 1012, 1017, 1030, 1033], "y_test_pr": 257, "y_test_predict": 248, "y_test_r": 115, "y_test_tru": 332, "y_thresholds_": [242, 636, 1045], "y_torch": 404, "y_train": [44, 45, 46, 47, 49, 52, 61, 62, 63, 64, 67, 68, 102, 103, 107, 115, 116, 125, 134, 137, 141, 144, 145, 146, 147, 148, 149, 150, 153, 160, 161, 164, 165, 176, 177, 178, 179, 185, 186, 187, 188, 189, 191, 194, 198, 208, 209, 210, 213, 219, 220, 227, 228, 240, 248, 252, 253, 257, 263, 264, 267, 268, 273, 277, 279, 283, 289, 293, 298, 299, 305, 307, 308, 312, 315, 317, 319, 320, 321, 326, 327, 329, 330, 332, 333, 334, 351, 355, 358, 359, 363, 370, 378, 381, 389, 409, 412, 415, 437, 438, 510, 559, 560, 561, 568, 569, 698, 699, 701, 703, 800, 823, 831, 833, 836, 854, 862, 863, 865, 915, 916, 992, 1002, 1004, 1005, 1010, 1012, 1017, 1030], "y_train_": 612, "y_train_ensembl": 139, "y_train_linear": 139, "y_train_noisi": 177, "y_train_pr": 257, "y_train_r": 115, "y_train_valid": 63, "y_tran": 107, "y_transform": 485, "y_true": [43, 52, 57, 68, 92, 107, 134, 154, 173, 212, 222, 230, 249, 258, 264, 332, 376, 431, 438, 439, 465, 482, 483, 484, 553, 555, 557, 558, 559, 561, 563, 565, 566, 569, 571, 612, 636, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 662, 663, 664, 665, 666, 668, 671, 673, 674, 679, 680, 698, 699, 701, 702, 703, 704, 708, 709, 710, 713, 714, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 783, 784, 785, 786, 788, 789, 790, 791, 792, 795, 797, 800, 838, 839, 848, 856, 863, 906, 908, 911, 914, 916, 1002, 1034, 1039, 1040, 1041, 1042, 1044, 1045, 1047, 1048, 1050], "y_true_bin": 212, "y_true_categor": [710, 1002], "y_true_empti": 730, "y_true_mean": 214, "y_true_seg": 212, "y_type_": 872, "y_uniqu": 61, "y_upper": [93, 146], "y_val": [144, 1010], "y_valid": 63, "y_var": 137, "y_vari": 90, "y_weights_": [411, 482, 483, 484, 485], "y_wrong": 70, "yacin": 1041, "yadav": 1047, "yagi": 1045, "yahoo": 51, "yair": [408, 692], "yakov": 1045, "yalburgi": [1040, 1041], "yaman": 1048, "yamanishi": 371, "yamin": 1033, "yaml": [380, 384], "yan": [1037, 1045], "yanchor": 271, "yang": [371, 408, 413, 535, 640, 1039, 1040, 1043, 1045, 1046, 1047, 1049, 1050], "yangarbit": 1040, "yanhong": 1048, "yanlend": 1039, "yann": [1033, 1035], "yanni": 408, "yannick": [1033, 1035], "yao": [0, 373, 387, 397, 1039, 1040, 1041, 1042, 1049, 1050, 1051], "yap": 1040, "yar": 1047, "yareyaredesuyo": 1051, "yaroslav": [0, 397, 1033, 1034, 1035, 1036, 1039, 1040, 1041, 1042, 1049, 1050, 1051], "yarowski": [321, 902, 1015], "yashika": 1045, "yasmeen": 1046, "yat2016": 408, "yate": [591, 731], "yates2011": 591, "yau": [1036, 1037, 1038, 1039, 1040], "yaxi": [46, 49, 93, 126, 140, 232, 234, 237, 255, 290, 295, 351], "ye": [351, 384, 390, 402, 659, 660, 872, 889, 998], "year": [0, 43, 157, 168, 175, 185, 186, 187, 212, 213, 230, 327, 373, 375, 380, 388, 412, 416, 803, 808, 810, 884, 998, 1002, 1022, 1026], "yearli": [43, 391], "yearremodadd": 154, "yeast": [289, 836], "yee": [1040, 1041], "yegelwel": 1045, "yeh": 1046, "yelit": 1039, "yellow": [70, 118, 340, 357, 1003], "yellowbrick": 1021, "yellowgreen": [213, 215, 222, 357], "yen": [1039, 1040], "yenchen": [0, 1039], "yenchenlin": 1039, "yenugula": 1051, "yeo": [310, 314, 881, 893, 1012, 1041, 1047, 1049], "yep": 379, "yerr": [105, 110, 112, 141, 143, 167, 292, 316, 332], "yesy": 396, "yesyesclassificationclassificationnumb": 396, "yesyesdo": 396, "yesyesfew": 396, "yesyesllel": 396, "yesyespredict": 396, "yesyessgdclassifiersgd": 396, "yesyessgdregressorsgd": 396, "yesyestextdatatext": 396, "yet": [48, 90, 198, 230, 260, 271, 353, 365, 371, 375, 380, 388, 393, 394, 399, 412, 413, 415, 416, 418, 448, 452, 461, 462, 554, 555, 578, 779, 985, 991, 998, 1002, 1008, 1016, 1022, 1042, 1050], "yeung": 1039, "ygrid": [50, 303], "yhoo": 51, "yi": [510, 1004, 1037, 1041, 1042, 1045], "yichuan": [1039, 1040], "yield": [47, 48, 62, 88, 109, 110, 111, 112, 146, 198, 208, 212, 227, 230, 275, 289, 305, 310, 337, 342, 351, 352, 359, 363, 365, 370, 381, 390, 405, 408, 410, 412, 413, 415, 416, 417, 437, 449, 468, 472, 509, 510, 538, 539, 540, 542, 547, 554, 555, 560, 561, 562, 563, 568, 569, 595, 603, 648, 652, 653, 654, 656, 662, 664, 666, 674, 676, 687, 727, 782, 789, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 828, 829, 830, 832, 836, 839, 897, 898, 943, 950, 952, 953, 959, 994, 996, 998, 999, 1002, 1017, 1018, 1038, 1039, 1041, 1044, 1046], "yifan": 1006, "yime": 1041, "ying": [408, 452, 462, 1047], "yinglr": 1043, "yisheng": 1050, "yiyangq": 1047, "yj": [115, 314], "ylabel": [43, 47, 48, 52, 61, 62, 63, 64, 69, 72, 94, 109, 110, 112, 113, 115, 116, 122, 126, 127, 135, 136, 138, 145, 146, 147, 148, 149, 153, 157, 159, 163, 164, 167, 170, 171, 172, 173, 175, 176, 177, 186, 193, 196, 197, 198, 200, 201, 202, 203, 206, 207, 209, 212, 214, 215, 217, 219, 221, 222, 230, 243, 245, 247, 265, 269, 270, 273, 274, 275, 279, 280, 283, 285, 293, 317, 337, 340, 343, 351, 356, 357, 632], "ylim": [51, 61, 63, 69, 72, 79, 91, 95, 109, 110, 111, 122, 136, 137, 143, 146, 153, 156, 171, 172, 186, 202, 203, 205, 206, 207, 218, 221, 222, 226, 239, 247, 256, 261, 265, 269, 273, 279, 285, 296, 297, 339, 344, 345, 348, 351, 357], "ylorbr_r": 111, "ym": [51, 235], "ymax": [47, 49, 50, 109, 202, 205, 206, 213, 221, 270, 303], "ymazari": 1041, "ymean": 194, "ymin": [50, 109, 202, 205, 206, 213, 221, 270, 303], "yml": 384, "yn": [510, 1003, 1004], "yoav": 1039, "yoch": 1046, "yogendrasingh": 1048, "yojana": 1048, "yokasr": 1043, "yoni": 1036, "yoon": 1044, "yoram": [287, 736], "york": [269, 789, 798, 992, 1002, 1014], "yoshihiro": 1043, "yoshiki": [1036, 1039], "yoshizawa": 1041, "yoshua": [862, 863, 1015], "yosshi999": 1047, "yosuk": [1045, 1046], "yotam": 1049, "you": [0, 30, 54, 58, 61, 103, 126, 142, 145, 147, 165, 168, 182, 187, 189, 200, 213, 216, 241, 246, 253, 258, 265, 270, 271, 277, 296, 319, 320, 323, 325, 326, 330, 333, 344, 351, 357, 359, 363, 364, 365, 370, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 389, 390, 394, 395, 396, 399, 402, 404, 406, 407, 408, 409, 410, 412, 415, 416, 417, 419, 420, 425, 437, 443, 444, 446, 447, 449, 454, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 482, 483, 484, 501, 504, 505, 510, 511, 533, 534, 535, 537, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 580, 581, 582, 583, 589, 590, 591, 592, 608, 609, 611, 612, 628, 636, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 688, 691, 700, 701, 786, 799, 800, 802, 803, 804, 805, 806, 808, 810, 816, 817, 819, 820, 821, 823, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 855, 856, 862, 863, 864, 865, 868, 869, 870, 871, 872, 877, 878, 879, 884, 885, 890, 891, 893, 894, 895, 896, 898, 900, 901, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 924, 949, 967, 991, 992, 997, 998, 1002, 1003, 1006, 1008, 1009, 1012, 1013, 1016, 1017, 1018, 1020, 1021, 1025, 1026, 1033, 1036, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "youden": 1002, "younger": 230, "your": [16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 359, 363, 364, 365, 370, 374, 375, 376, 377, 379, 380, 382, 384, 385, 388, 389, 390, 394, 395, 396, 402, 404, 407, 408, 409, 410, 415, 416, 419, 420, 444, 446, 504, 534, 562, 563, 603, 635, 647, 688, 712, 801, 804, 805, 807, 815, 824, 828, 830, 924, 943, 999, 1006, 1012, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1026, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "yourlogin": 376, "yourself": [103, 375, 376, 377, 381, 384, 1006], "ypred": 1040, "yrsold": 154, "yscale": [171, 176, 212, 245, 351], "ystd": 194, "yt": 876, "ython": 0, "ytick": [45, 50, 66, 70, 75, 79, 80, 83, 84, 85, 91, 92, 95, 113, 115, 123, 147, 164, 172, 173, 174, 178, 197, 203, 225, 239, 247, 256, 257, 258, 261, 265, 285, 294, 303, 308, 329, 340, 345, 351], "yticklabel": [265, 351], "ytrain": 303, "ytrue": 1040, "yu": [198, 408, 452, 462, 659, 998, 1006, 1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "yuan": [1047, 1048, 1049, 1050, 1051], "yuchen": [1049, 1050], "yucheng": 1038, "yue": [1045, 1051], "yufeng": 1041, "yuichi": 1040, "yuki": 1047, "yule": [450, 457, 779, 780, 781], "yulia": 1043, "yum": 374, "yun": [1048, 1049], "yung": [1036, 1039], "yunqian": 998, "yurchak": [0, 397, 416, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047], "yuri": [1036, 1038], "yusuf": [1048, 1049], "yusuk": 1046, "yusukenagasaka": 1046, "yutaro": 1045, "yuusuk": 1050, "yuval": [405, 451], "yv": 411, "yve": 1046, "yy": [77, 91, 111, 142, 152, 161, 172, 174, 187, 219, 223, 224, 225, 226, 237, 239, 247, 296, 305, 312, 313, 334, 339, 340, 344, 345, 348, 349], "yy_": 219, "yy_coars": 142, "yy_down": 345, "yy_up": 345, "yzhenman": 1046, "z": [50, 91, 142, 161, 172, 174, 187, 222, 224, 225, 232, 234, 239, 244, 259, 296, 303, 305, 312, 315, 334, 340, 345, 349, 373, 380, 405, 413, 415, 554, 555, 586, 640, 665, 672, 686, 687, 690, 694, 700, 725, 786, 885, 998, 999, 1006, 1007, 1048], "z_": 413, "z_1": 998, "z_2": 998, "z_3": 998, "z_4": 998, "z_5": 998, "z_i": [138, 1006], "z_l": 1006, "z_points_coars": 142, "zablit": 1048, "zac": 1038, "zacchari": 1045, "zach": [1041, 1042, 1047], "zachariah": 1041, "zadrozni": [64, 406, 437, 677], "zaffalon": 270, "zahlii": 1046, "zain": [0, 397, 1047, 1048, 1049, 1050], "zalkow": 1038, "zambelli": 1036, "zamrii": 1043, "zanouda": 1040, "zaxi": [126, 232], "zayd": 1042, "zaytsev": 1036, "zdzieblo": 1050, "zebra": 713, "zedan": 1049, "zeel": 1047, "zeeshan": [1048, 1049], "zempleni": 1047, "zen": 936, "zenin": 1039, "zentrum": 1002, "zero": [2, 25, 49, 50, 53, 64, 70, 72, 75, 76, 85, 87, 110, 112, 113, 120, 123, 125, 136, 137, 145, 147, 148, 153, 165, 168, 182, 193, 198, 199, 201, 204, 206, 207, 211, 212, 213, 216, 217, 218, 222, 227, 230, 243, 246, 247, 249, 255, 259, 261, 267, 270, 275, 279, 280, 283, 295, 310, 320, 321, 344, 347, 352, 353, 355, 358, 363, 364, 371, 378, 382, 390, 406, 408, 410, 413, 415, 416, 417, 418, 421, 446, 452, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 487, 498, 509, 510, 524, 527, 528, 532, 533, 536, 538, 539, 540, 541, 543, 544, 548, 549, 553, 558, 559, 560, 561, 562, 563, 565, 566, 567, 582, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 608, 609, 612, 637, 640, 644, 645, 646, 651, 659, 660, 665, 666, 667, 668, 669, 672, 677, 678, 679, 686, 687, 704, 710, 713, 714, 716, 717, 726, 730, 731, 735, 739, 741, 747, 784, 785, 786, 788, 797, 798, 816, 817, 820, 821, 834, 845, 846, 847, 848, 849, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 868, 875, 877, 878, 880, 881, 882, 884, 885, 891, 892, 893, 894, 898, 905, 913, 914, 915, 916, 947, 976, 987, 992, 998, 1000, 1001, 1004, 1005, 1006, 1012, 1013, 1014, 1016, 1017, 1018, 1033, 1035, 1037, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050], "zero_bas": [487, 509, 510], "zero_class": 247, "zero_divis": [308, 714, 717, 730, 731, 739, 784, 785, 788, 1002, 1043, 1045, 1049], "zero_impute_scor": 182, "zero_on": [376, 1034], "zero_one_loss": [2, 376, 404, 704, 735, 1002, 1034, 1035, 1036, 1050, 1051], "zero_one_scor": 1034, "zerodivisionerror": [1040, 1043, 1049], "zeros_lik": [82, 214, 279], "zeta": 1017, "zeta_i": 1017, "zev": [1039, 1040, 1041, 1042], "zeyusun": 1046, "zha": [690, 694, 999], "zhai_pro": 1038, "zhan": 1048, "zhang": [408, 442, 665, 680, 686, 687, 690, 694, 759, 760, 998, 999, 1000, 1004, 1016, 1037, 1038, 1040, 1041, 1042, 1043, 1045, 1049, 1050, 1051], "zhang02c": 677, "zhang96": [408, 442], "zhao": [1043, 1045, 1046, 1047, 1048], "zhaowei": 1045, "zhaoweiwang": 1046, "zhauniarovich": 1038, "zhdanovich": 1041, "zhechev": 1048, "zhehao": [1046, 1047, 1048, 1049, 1051], "zhenfish": 1047, "zheng": [1039, 1040, 1045], "zhenq": 1041, "zhi": [564, 1008], "zhiqe": 1041, "zhou": [564, 640, 901, 1008, 1041, 1049, 1050], "zht2007": 200, "zhu": [134, 415, 520, 554, 659, 900], "zhuyi": [1041, 1042], "zhuzhunashvili": [408, 462], "ziad": 1051, "zibulevski": [665, 686, 687], "zichen": 1038, "zielinska": 1044, "zihna": 1046, "ziji": [1041, 1042], "zijlstra": 1036, "zike": 1039, "zimek": 446, "zimmer": [1037, 1047], "zinkov": [1033, 1034, 1035, 1037, 1038], "zip": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 355, 356, 357, 358, 374, 415, 829, 1012, 1029], "zisserman": [639, 994, 1002], "zito": [1033, 1046], "ziv": 1039, "zivori": 1039, "zj": [1041, 1042], "zlabel": 126, "zoj613": 1045, "zolisa": 1045, "zoom": [43, 139, 310, 396], "zoom_in_percentile_rang": 310, "zorder": [51, 91, 122, 151, 161, 171, 179, 203, 210, 233, 235, 242, 245, 255, 320, 326, 345], "zou": [134, 200, 415, 520, 554, 657, 998, 1016], "zou_et_al_criterion_resc": 200, "zoubin": 900, "zoubir": 112, "zouhar": 1046, "zsh": 364, "zuckerberg": 0, "zwinck": 1035, "zxcvbniu": 1040, "zz": 111, "zzrh2009": 415, "z\u00e9": 1041, "\u00e4yr\u00e4m\u00f6": 998, "\u00f3scar": [1037, 1038, 1039, 1040], "\u00f6zer": 1046, "\u0142ukasz": 1048, "\u015fahin": 1047, "\u0161t\u011bp\u00e1n": 1051, "\u675c\u4e16\u6a4b": [0, 398], "\u8d75\u4e30": 1047}, "titles": ["About us", "Recently Deprecated", "API Reference", "sklearn", "sklearn.base", "sklearn.calibration", "sklearn.cluster", "sklearn.compose", "sklearn.covariance", "sklearn.cross_decomposition", "sklearn.datasets", "sklearn.decomposition", "sklearn.discriminant_analysis", "sklearn.dummy", "sklearn.ensemble", "sklearn.exceptions", "sklearn.experimental", "sklearn.feature_extraction", "sklearn.feature_selection", "sklearn.gaussian_process", "sklearn.impute", "sklearn.inspection", "sklearn.isotonic", "sklearn.kernel_approximation", "sklearn.kernel_ridge", "sklearn.linear_model", "sklearn.manifold", "sklearn.metrics", "sklearn.mixture", "sklearn.model_selection", "sklearn.multiclass", "sklearn.multioutput", "sklearn.naive_bayes", "sklearn.neighbors", "sklearn.neural_network", "sklearn.pipeline", "sklearn.preprocessing", "sklearn.random_projection", "sklearn.semi_supervised", "sklearn.svm", "sklearn.tree", "sklearn.utils", "Examples based on real world datasets", "Time-related feature engineering", "Image denoising using kernel PCA", "Faces recognition example using eigenfaces and SVMs", "Model Complexity Influence", "Out-of-core classification of text documents", "Outlier detection on a real data set", "Prediction Latency", "Species distribution modeling", "Visualizing the stock market structure", "Lagged features for time series forecasting", "Compressive sensing: tomography reconstruction with L1 prior (Lasso)", "Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation", "Wikipedia principal eigenvector", "Biclustering", "Biclustering documents with the Spectral Co-clustering algorithm", "A demo of the Spectral Biclustering algorithm", "A demo of the Spectral Co-Clustering algorithm", "Calibration", "Probability calibration of classifiers", "Probability Calibration curves", "Probability Calibration for 3-class classification", "Comparison of Calibration of Classifiers", "Classification", "Plot classification probability", "Classifier comparison", "Recognizing hand-written digits", "Normal, Ledoit-Wolf and OAS Linear Discriminant Analysis for classification", "Linear and Quadratic Discriminant Analysis with covariance ellipsoid", "Clustering", "Adjustment for chance in clustering performance evaluation", "Demo of affinity propagation clustering algorithm", "Agglomerative clustering with and without structure", "Agglomerative clustering with different metrics", "Plot Hierarchical Clustering Dendrogram", "Compare BIRCH and MiniBatchKMeans", "Bisecting K-Means and Regular K-Means Performance Comparison", "Comparing different clustering algorithms on toy datasets", "Segmenting the picture of greek coins in regions", "A demo of structured Ward hierarchical clustering on an image of coins", "Demo of DBSCAN clustering algorithm", "Online learning of a dictionary of parts of faces", "Feature agglomeration", "Various Agglomerative Clustering on a 2D embedding of digits", "Vector Quantization Example", "Feature agglomeration vs. univariate selection", "Demo of HDBSCAN clustering algorithm", "Inductive Clustering", "Demonstration of k-means assumptions", "A demo of K-Means clustering on the handwritten digits data", "An example of K-Means++ initialization", "Selecting the number of clusters with silhouette analysis on KMeans clustering", "Empirical evaluation of the impact of k-means initialization", "Comparing different hierarchical linkage methods on toy datasets", "A demo of the mean-shift clustering algorithm", "Comparison of the K-Means and MiniBatchKMeans clustering algorithms", "Demo of OPTICS clustering algorithm", "Spectral clustering for image segmentation", "Hierarchical clustering: structured vs unstructured ward", "Pipelines and composite estimators", "Column Transformer with Heterogeneous Data Sources", "Column Transformer with Mixed Types", "Selecting dimensionality reduction with Pipeline and GridSearchCV", "Pipelining: chaining a PCA and a logistic regression", "Concatenating multiple feature extraction methods", "Effect of transforming the targets in regression model", "Covariance estimation", "Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood", "Ledoit-Wolf vs OAS estimation", "Robust covariance estimation and Mahalanobis distances relevance", "Robust vs Empirical covariance estimate", "Sparse inverse covariance estimation", "Cross decomposition", "Compare cross decomposition methods", "Principal Component Regression vs Partial Least Squares Regression", "Dataset examples", "Plot randomly generated multilabel dataset", "Decomposition", "Faces dataset decompositions", "Blind source separation using FastICA", "FastICA on 2D point clouds", "Image denoising using dictionary learning", "Incremental PCA", "Kernel PCA", "Principal Component Analysis (PCA) on Iris Dataset", "Model selection with Probabilistic PCA and Factor Analysis (FA)", "Comparison of LDA and PCA 2D projection of Iris dataset", "Sparse coding with a precomputed dictionary", "Factor Analysis (with rotation) to visualize patterns", "Developing Estimators", "<code class=\"docutils literal notranslate\"><span class=\"pre\">__sklearn_is_fitted__</span></code> as Developer API", "Ensemble methods", "Multi-class AdaBoosted Decision Trees", "Decision Tree Regression with AdaBoost", "Two-class AdaBoost", "Single estimator versus bagging: bias-variance decomposition", "OOB Errors for Random Forests", "Feature transformations with ensembles of trees", "Comparing Random Forests and Histogram Gradient Boosting models", "Feature importances with a forest of trees", "Plot the decision surfaces of ensembles of trees on the iris dataset", "Categorical Feature Support in Gradient Boosting", "Early stopping in Gradient Boosting", "Gradient Boosting Out-of-Bag estimates", "Prediction Intervals for Gradient Boosting Regression", "Gradient Boosting regression", "Gradient Boosting regularization", "Features in Histogram Gradient Boosting Trees", "IsolationForest example", "Monotonic Constraints", "Hashing feature transformation using Totally Random Trees", "Comparing random forests and the multi-output meta estimator", "Combine predictors using stacking", "Plot the decision boundaries of a VotingClassifier", "Plot class probabilities calculated by the VotingClassifier", "Plot individual and voting regression predictions", "Tutorial exercises", "Cross-validation on diabetes Dataset Exercise", "Digits Classification Exercise", "SVM Exercise", "Feature Selection", "Comparison of F-test and mutual information", "Univariate Feature Selection", "Pipeline ANOVA SVM", "Recursive feature elimination", "Recursive feature elimination with cross-validation", "Model-based and sequential feature selection", "Gaussian Process for Machine Learning", "Comparison of kernel ridge and Gaussian process regression", "Probabilistic predictions with Gaussian process classification (GPC)", "Gaussian process classification (GPC) on iris dataset", "Iso-probability lines for Gaussian Processes classification (GPC)", "Illustration of Gaussian process classification (GPC) on the XOR dataset", "Forecasting of CO2 level on Mona Loa dataset using Gaussian process regression (GPR)", "Ability of Gaussian process regression (GPR) to estimate data noise-level", "Gaussian Processes regression: basic introductory example", "Gaussian processes on discrete data structures", "Illustration of prior and posterior Gaussian process for different kernels", "Missing Value Imputation", "Imputing missing values with variants of IterativeImputer", "Imputing missing values before building an estimator", "Examples", "Inspection", "Failure of Machine Learning to infer causal effects", "Common pitfalls in the interpretation of coefficients of linear models", "Partial Dependence and Individual Conditional Expectation Plots", "Permutation Importance vs Random Forest Feature Importance (MDI)", "Permutation Importance with Multicollinear or Correlated Features", "Kernel Approximation", "Scalable learning with polynomial kernel approximation", "Generalized Linear Models", "Comparing Linear Bayesian Regressors", "Curve Fitting with Bayesian Ridge Regression", "Fitting an Elastic Net with a precomputed Gram Matrix and Weighted Samples", "HuberRegressor vs Ridge on dataset with strong outliers", "Logistic Regression 3-class Classifier", "L1-based models for Sparse Signals", "Lasso on dense and sparse data", "Lasso model selection via information criteria", "Lasso, Lasso-LARS, and Elastic Net paths", "Lasso model selection: AIC-BIC / cross-validation", "Logistic function", "L1 Penalty and Sparsity in Logistic Regression", "Plot multinomial and One-vs-Rest Logistic Regression", "Regularization path of L1- Logistic Regression", "Joint feature selection with multi-task Lasso", "Non-negative least squares", "Ordinary Least Squares Example", "Ordinary Least Squares and Ridge Regression Variance", "Orthogonal Matching Pursuit", "Poisson regression and non-normal loss", "Polynomial and Spline interpolation", "Quantile regression", "Robust linear model estimation using RANSAC", "Ridge coefficients as a function of the L2 Regularization", "Plot Ridge coefficients as a function of the regularization", "Robust linear estimator fitting", "Comparing various online solvers", "Early stopping of Stochastic Gradient Descent", "Plot multi-class SGD on the iris dataset", "SGD: convex loss functions", "SGD: Penalties", "SGD: Maximum margin separating hyperplane", "SGD: Weighted samples", "One-Class SVM versus One-Class SVM using Stochastic Gradient Descent", "Multiclass sparse logistic regression on 20newgroups", "MNIST classification using multinomial logistic + L1", "Theil-Sen Regression", "Tweedie regression on insurance claims", "Manifold learning", "Comparison of Manifold Learning methods", "Manifold learning on handwritten digits: Locally Linear Embedding, Isomap\u2026", "Manifold Learning methods on a severed sphere", "Multi-dimensional scaling", "Swiss Roll And Swiss-Hole Reduction", "t-SNE: The effect of various perplexity values on the shape", "Miscellaneous", "Comparing anomaly detection algorithms for outlier detection on toy datasets", "Visualizations with Display Objects", "Displaying estimators and complex pipelines", "Isotonic Regression", "The Johnson-Lindenstrauss bound for embedding with random projections", "Explicit feature map approximation for RBF kernels", "Comparison of kernel ridge regression and SVR", "Metadata Routing", "Multilabel classification", "Face completion with a multi-output estimators", "Evaluation of outlier detection estimators", "Advanced Plotting With Partial Dependence", "Displaying Pipelines", "ROC Curve with Visualization API", "Introducing the <code class=\"docutils literal notranslate\"><span class=\"pre\">set_output</span></code> API", "Gaussian Mixture Models", "Concentration Prior Type Analysis of Variation Bayesian Gaussian Mixture", "Gaussian Mixture Model Ellipsoids", "GMM covariances", "GMM Initialization Methods", "Density Estimation for a Gaussian mixture", "Gaussian Mixture Model Selection", "Gaussian Mixture Model Sine Curve", "Model Selection", "Confusion matrix", "Post-tuning the decision threshold for cost-sensitive learning", "Visualizing cross-validation behavior in scikit-learn", "Plotting Cross-Validated Predictions", "Detection error tradeoff (DET) curve", "Custom refit strategy of a grid search with cross-validation", "Balance model complexity and cross-validated score", "Statistical comparison of models using grid search", "Sample pipeline for text feature extraction and evaluation", "Plotting Learning Curves and Checking Models\u2019 Scalability", "Class Likelihood Ratios to measure classification performance", "Demonstration of multi-metric evaluation on cross_val_score and GridSearchCV", "Nested versus non-nested cross-validation", "Test with permutations the significance of a classification score", "Precision-Recall", "Comparing randomized search and grid search for hyperparameter estimation", "Multiclass Receiver Operating Characteristic (ROC)", "Receiver Operating Characteristic (ROC) with cross validation", "Comparison between grid search and successive halving", "Successive Halving Iterations", "Effect of model regularization on training and test error", "Post-hoc tuning the cut-off point of decision function", "Underfitting vs. Overfitting", "Multiclass methods", "Overview of multiclass training meta-estimators", "Multioutput methods", "Multilabel classification using a classifier chain", "Approximate nearest neighbors in TSNE", "Nearest Neighbors", "Caching nearest neighbors", "Nearest Neighbors Classification", "Kernel Density Estimation", "Simple 1D Kernel Density Estimation", "Novelty detection with Local Outlier Factor (LOF)", "Outlier detection with Local Outlier Factor (LOF)", "Comparing Nearest Neighbors with and without Neighborhood Components Analysis", "Dimensionality Reduction with Neighborhood Components Analysis", "Neighborhood Components Analysis Illustration", "Nearest Centroid Classification", "Nearest Neighbors regression", "Kernel Density Estimate of Species Distributions", "Neural Networks", "Varying regularization in Multi-layer Perceptron", "Compare Stochastic learning strategies for MLPClassifier", "Visualization of MLP weights on MNIST", "Restricted Boltzmann Machine features for digit classification", "Preprocessing", "Compare the effect of different scalers on data with outliers", "Using KBinsDiscretizer to discretize continuous features", "Feature discretization", "Demonstrating the different strategies of KBinsDiscretizer", "Map data to a normal distribution", "Importance of Feature Scaling", "Comparing Target Encoder with Other Encoders", "Target Encoder\u2019s Internal Cross fitting", "Release Highlights", "Release Highlights for scikit-learn 0.22", "Release Highlights for scikit-learn 0.23", "Release Highlights for scikit-learn 0.24", "Release Highlights for scikit-learn 1.0", "Release Highlights for scikit-learn 1.1", "Release Highlights for scikit-learn 1.2", "Release Highlights for scikit-learn 1.3", "Release Highlights for scikit-learn 1.4", "Release Highlights for scikit-learn 1.5", "Semi Supervised Classification", "Label Propagation digits: Demonstrating performance", "Label Propagation digits active learning", "Label Propagation learning a complex structure", "Effect of varying threshold for self-training", "Semi-supervised Classification on a Text Dataset", "Decision boundary of semi-supervised classifiers versus SVM on the Iris dataset", "Support Vector Machines", "SVM with custom kernel", "Plot different SVM classifiers in the iris dataset", "Plot the support vectors in LinearSVC", "One-class SVM with non-linear kernel (RBF)", "RBF SVM parameters", "SVM: Maximum margin separating hyperplane", "SVM: Separating hyperplane for unbalanced classes", "SVM-Anova: SVM with univariate feature selection", "Plot classification boundaries with different SVM Kernels", "SVM Margins Example", "Support Vector Regression (SVR) using linear and non-linear kernels", "Scaling the regularization parameter for SVCs", "SVM Tie Breaking Example", "SVM: Weighted samples", "Working with text documents", "Classification of text documents using sparse features", "Clustering text documents using k-means", "FeatureHasher and DictVectorizer Comparison", "Decision Trees", "Post pruning decision trees with cost complexity pruning", "Plot the decision surface of decision trees trained on the iris dataset", "Decision Tree Regression", "Understanding the decision tree structure", "<span class=\"section-number\">10. </span>Common pitfalls and recommended practices", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">8. </span>Computing with scikit-learn", "<span class=\"section-number\">8.2. </span>Computational Performance", "<span class=\"section-number\">8.3. </span>Parallelism, resource management, and configuration", "<span class=\"section-number\">8.1. </span>Strategies to scale computationally: bigger data", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">6. </span>Dataset transformations", "<span class=\"section-number\">7. </span>Dataset loading utilities", "<span class=\"section-number\">7.4. </span>Loading other datasets", "<span class=\"section-number\">7.2. </span>Real world datasets", "<span class=\"section-number\">7.3. </span>Generated datasets", "<span class=\"section-number\">7.1. </span>Toy datasets", "Installing the development version of scikit-learn", "Bug triaging and issue curation", "Contributing", "Cython Best Practices, Conventions and Knowledge", "Developing scikit-learn estimators", "Developer\u2019s Guide", "Maintainer Information", "Crafting a minimal reproducer for scikit-learn", "How to optimize for speed", "Developing with the Plotting API", "Developers\u2019 Tips and Tricks", "Utilities for Developers", "<span class=\"section-number\">11. </span>Dispatching", "&lt;no title&gt;", "Frequently Asked Questions", "Getting Started", "Glossary of Common Terms and API Elements", "Scikit-learn governance and decision-making", "Index", "<span class=\"section-number\">4. </span>Inspection", "Installing scikit-learn", "&lt;no title&gt;", "<span class=\"section-number\">12. </span>Choosing the right estimator", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">1. </span>Metadata Routing", "&lt;no title&gt;", "&lt;no title&gt;", "<span class=\"section-number\">9. </span>Model persistence", "<span class=\"section-number\">3. </span>Model selection and evaluation", "<span class=\"section-number\">11.1. </span>Array API support (experimental)", "<span class=\"section-number\">2.4. </span>Biclustering", "<span class=\"section-number\">1.16. </span>Probability calibration", "<span class=\"section-number\">3.3. </span>Tuning the decision threshold for class prediction", "<span class=\"section-number\">2.3. </span>Clustering", "<span class=\"section-number\">6.1. </span>Pipelines and composite estimators", "<span class=\"section-number\">2.6. </span>Covariance estimation", "<span class=\"section-number\">1.8. </span>Cross decomposition", "<span class=\"section-number\">3.1. </span>Cross-validation: evaluating estimator performance", "<span class=\"section-number\">2.5. </span>Decomposing signals in components (matrix factorization problems)", "<span class=\"section-number\">2.8. </span>Density Estimation", "<span class=\"section-number\">1.11. </span>Ensembles: Gradient boosting, random forests, bagging, voting, stacking", "<span class=\"section-number\">6.2. </span>Feature extraction", "<span class=\"section-number\">1.13. </span>Feature selection", "<span class=\"section-number\">1.7. </span>Gaussian Processes", "dbscan", "fastica", "oas", "BaseEstimator", "BiclusterMixin", "ClassNamePrefixFeaturesOutMixin", "ClassifierMixin", "ClusterMixin", "DensityMixin", "MetaEstimatorMixin", "OneToOneFeatureMixin", "OutlierMixin", "RegressorMixin", "TransformerMixin", "clone", "is_classifier", "is_clusterer", "is_regressor", "CalibratedClassifierCV", "CalibrationDisplay", "calibration_curve", "AffinityPropagation", "AgglomerativeClustering", "Birch", "BisectingKMeans", "DBSCAN", "FeatureAgglomeration", "HDBSCAN", "KMeans", "MeanShift", "MiniBatchKMeans", "OPTICS", "SpectralBiclustering", "SpectralClustering", "SpectralCoclustering", "affinity_propagation", "cluster_optics_dbscan", "cluster_optics_xi", "compute_optics_graph", "estimate_bandwidth", "k_means", "kmeans_plusplus", "mean_shift", "spectral_clustering", "ward_tree", "ColumnTransformer", "TransformedTargetRegressor", "make_column_selector", "make_column_transformer", "config_context", "EllipticEnvelope", "EmpiricalCovariance", "GraphicalLasso", "GraphicalLassoCV", "LedoitWolf", "MinCovDet", "OAS", "ShrunkCovariance", "empirical_covariance", "graphical_lasso", "ledoit_wolf", "ledoit_wolf_shrinkage", "shrunk_covariance", "CCA", "PLSCanonical", "PLSRegression", "PLSSVD", "clear_data_home", "dump_svmlight_file", "fetch_20newsgroups", "fetch_20newsgroups_vectorized", "fetch_california_housing", "fetch_covtype", "fetch_file", "fetch_kddcup99", "fetch_lfw_pairs", "fetch_lfw_people", "fetch_olivetti_faces", "fetch_openml", "fetch_rcv1", "fetch_species_distributions", "get_data_home", "load_breast_cancer", "load_diabetes", "load_digits", "load_files", "load_iris", "load_linnerud", "load_sample_image", "load_sample_images", "load_svmlight_file", "load_svmlight_files", "load_wine", "make_biclusters", "make_blobs", "make_checkerboard", "make_circles", "make_classification", "make_friedman1", "make_friedman2", "make_friedman3", "make_gaussian_quantiles", "make_hastie_10_2", "make_low_rank_matrix", "make_moons", "make_multilabel_classification", "make_regression", "make_s_curve", "make_sparse_coded_signal", "make_sparse_spd_matrix", "make_sparse_uncorrelated", "make_spd_matrix", "make_swiss_roll", "DictionaryLearning", "FactorAnalysis", "FastICA", "IncrementalPCA", "KernelPCA", "LatentDirichletAllocation", "MiniBatchDictionaryLearning", "MiniBatchNMF", "MiniBatchSparsePCA", "NMF", "PCA", "SparseCoder", "SparsePCA", "TruncatedSVD", "dict_learning", "dict_learning_online", "non_negative_factorization", "sparse_encode", "LinearDiscriminantAnalysis", "QuadraticDiscriminantAnalysis", "DummyClassifier", "DummyRegressor", "AdaBoostClassifier", "AdaBoostRegressor", "BaggingClassifier", "BaggingRegressor", "ExtraTreesClassifier", "ExtraTreesRegressor", "GradientBoostingClassifier", "GradientBoostingRegressor", "HistGradientBoostingClassifier", "HistGradientBoostingRegressor", "IsolationForest", "RandomForestClassifier", "RandomForestRegressor", "RandomTreesEmbedding", "StackingClassifier", "StackingRegressor", "VotingClassifier", "VotingRegressor", "ConvergenceWarning", "DataConversionWarning", "DataDimensionalityWarning", "EfficiencyWarning", "FitFailedWarning", "InconsistentVersionWarning", "NotFittedError", "UndefinedMetricWarning", "enable_halving_search_cv", "enable_iterative_imputer", "DictVectorizer", "FeatureHasher", "PatchExtractor", "extract_patches_2d", "grid_to_graph", "img_to_graph", "reconstruct_from_patches_2d", "CountVectorizer", "HashingVectorizer", "TfidfTransformer", "TfidfVectorizer", "GenericUnivariateSelect", "RFE", "RFECV", "SelectFdr", "SelectFpr", "SelectFromModel", "SelectFwe", "SelectKBest", "SelectPercentile", "SelectorMixin", "SequentialFeatureSelector", "VarianceThreshold", "chi2", "f_classif", "f_regression", "mutual_info_classif", "mutual_info_regression", "r_regression", "GaussianProcessClassifier", "GaussianProcessRegressor", "CompoundKernel", "ConstantKernel", "DotProduct", "ExpSineSquared", "Exponentiation", "Hyperparameter", "Kernel", "Matern", "PairwiseKernel", "Product", "RBF", "RationalQuadratic", "Sum", "WhiteKernel", "get_config", "IterativeImputer", "KNNImputer", "MissingIndicator", "SimpleImputer", "DecisionBoundaryDisplay", "PartialDependenceDisplay", "partial_dependence", "permutation_importance", "IsotonicRegression", "check_increasing", "isotonic_regression", "AdditiveChi2Sampler", "Nystroem", "PolynomialCountSketch", "RBFSampler", "SkewedChi2Sampler", "KernelRidge", "ARDRegression", "BayesianRidge", "ElasticNet", "ElasticNetCV", "GammaRegressor", "HuberRegressor", "Lars", "LarsCV", "Lasso", "LassoCV", "LassoLars", "LassoLarsCV", "LassoLarsIC", "LinearRegression", "LogisticRegression", "LogisticRegressionCV", "MultiTaskElasticNet", "MultiTaskElasticNetCV", "MultiTaskLasso", "MultiTaskLassoCV", "OrthogonalMatchingPursuit", "OrthogonalMatchingPursuitCV", "PassiveAggressiveClassifier", "PassiveAggressiveRegressor", "Perceptron", "PoissonRegressor", "QuantileRegressor", "RANSACRegressor", "Ridge", "RidgeCV", "RidgeClassifier", "RidgeClassifierCV", "SGDClassifier", "SGDOneClassSVM", "SGDRegressor", "TheilSenRegressor", "TweedieRegressor", "enet_path", "lars_path", "lars_path_gram", "lasso_path", "orthogonal_mp", "orthogonal_mp_gram", "ridge_regression", "Isomap", "LocallyLinearEmbedding", "MDS", "SpectralEmbedding", "TSNE", "locally_linear_embedding", "smacof", "spectral_embedding", "trustworthiness", "ConfusionMatrixDisplay", "DetCurveDisplay", "DistanceMetric", "PrecisionRecallDisplay", "PredictionErrorDisplay", "RocCurveDisplay", "accuracy_score", "adjusted_mutual_info_score", "adjusted_rand_score", "auc", "average_precision_score", "balanced_accuracy_score", "brier_score_loss", "calinski_harabasz_score", "check_scoring", "class_likelihood_ratios", "classification_report", "contingency_matrix", "pair_confusion_matrix", "cohen_kappa_score", "completeness_score", "confusion_matrix", "consensus_score", "coverage_error", "d2_absolute_error_score", "d2_log_loss_score", "d2_pinball_score", "d2_tweedie_score", "davies_bouldin_score", "dcg_score", "det_curve", "explained_variance_score", "f1_score", "fbeta_score", "fowlkes_mallows_score", "get_scorer", "get_scorer_names", "hamming_loss", "hinge_loss", "homogeneity_completeness_v_measure", "homogeneity_score", "jaccard_score", "label_ranking_average_precision_score", "label_ranking_loss", "log_loss", "make_scorer", "matthews_corrcoef", "max_error", "mean_absolute_error", "mean_absolute_percentage_error", "mean_gamma_deviance", "mean_pinball_loss", "mean_poisson_deviance", "mean_squared_error", "mean_squared_log_error", "mean_tweedie_deviance", "median_absolute_error", "multilabel_confusion_matrix", "mutual_info_score", "ndcg_score", "normalized_mutual_info_score", "additive_chi2_kernel", "chi2_kernel", "cosine_distances", "cosine_similarity", "distance_metrics", "euclidean_distances", "haversine_distances", "kernel_metrics", "laplacian_kernel", "linear_kernel", "manhattan_distances", "nan_euclidean_distances", "paired_cosine_distances", "paired_distances", "paired_euclidean_distances", "paired_manhattan_distances", "pairwise_kernels", "polynomial_kernel", "rbf_kernel", "sigmoid_kernel", "pairwise_distances", "pairwise_distances_argmin", "pairwise_distances_argmin_min", "pairwise_distances_chunked", "precision_recall_curve", "precision_recall_fscore_support", "precision_score", "r2_score", "rand_score", "recall_score", "roc_auc_score", "roc_curve", "root_mean_squared_error", "root_mean_squared_log_error", "silhouette_samples", "silhouette_score", "top_k_accuracy_score", "v_measure_score", "zero_one_loss", "BayesianGaussianMixture", "GaussianMixture", "FixedThresholdClassifier", "GridSearchCV", "GroupKFold", "GroupShuffleSplit", "HalvingGridSearchCV", "HalvingRandomSearchCV", "KFold", "LearningCurveDisplay", "LeaveOneGroupOut", "LeaveOneOut", "LeavePGroupsOut", "LeavePOut", "ParameterGrid", "ParameterSampler", "PredefinedSplit", "RandomizedSearchCV", "RepeatedKFold", "RepeatedStratifiedKFold", "ShuffleSplit", "StratifiedGroupKFold", "StratifiedKFold", "StratifiedShuffleSplit", "TimeSeriesSplit", "TunedThresholdClassifierCV", "ValidationCurveDisplay", "check_cv", "cross_val_predict", "cross_val_score", "cross_validate", "learning_curve", "permutation_test_score", "train_test_split", "validation_curve", "OneVsOneClassifier", "OneVsRestClassifier", "OutputCodeClassifier", "ClassifierChain", "MultiOutputClassifier", "MultiOutputRegressor", "RegressorChain", "BernoulliNB", "CategoricalNB", "ComplementNB", "GaussianNB", "MultinomialNB", "BallTree", "KDTree", "KNeighborsClassifier", "KNeighborsRegressor", "KNeighborsTransformer", "KernelDensity", "LocalOutlierFactor", "NearestCentroid", "NearestNeighbors", "NeighborhoodComponentsAnalysis", "RadiusNeighborsClassifier", "RadiusNeighborsRegressor", "RadiusNeighborsTransformer", "kneighbors_graph", "radius_neighbors_graph", "sort_graph_by_row_values", "BernoulliRBM", "MLPClassifier", "MLPRegressor", "FeatureUnion", "Pipeline", "make_pipeline", "make_union", "Binarizer", "FunctionTransformer", "KBinsDiscretizer", "KernelCenterer", "LabelBinarizer", "LabelEncoder", "MaxAbsScaler", "MinMaxScaler", "MultiLabelBinarizer", "Normalizer", "OneHotEncoder", "OrdinalEncoder", "PolynomialFeatures", "PowerTransformer", "QuantileTransformer", "RobustScaler", "SplineTransformer", "StandardScaler", "TargetEncoder", "add_dummy_feature", "binarize", "label_binarize", "maxabs_scale", "minmax_scale", "normalize", "power_transform", "quantile_transform", "robust_scale", "scale", "GaussianRandomProjection", "SparseRandomProjection", "johnson_lindenstrauss_min_dim", "LabelPropagation", "LabelSpreading", "SelfTrainingClassifier", "set_config", "show_versions", "LinearSVC", "LinearSVR", "NuSVC", "NuSVR", "OneClassSVM", "SVC", "SVR", "l1_min_c", "DecisionTreeClassifier", "DecisionTreeRegressor", "ExtraTreeClassifier", "ExtraTreeRegressor", "export_graphviz", "export_text", "plot_tree", "Bunch", "ClassifierTags", "InputTags", "RegressorTags", "Tags", "TargetTags", "TransformerTags", "_safe_indexing", "min_pos", "as_float_array", "assert_all_finite", "check_X_y", "check_array", "check_consistent_length", "check_random_state", "check_scalar", "compute_class_weight", "compute_sample_weight", "default_tags", "deprecated", "all_displays", "all_estimators", "all_functions", "check_estimator", "parametrize_with_checks", "estimator_html_repr", "density", "fast_logdet", "randomized_range_finder", "randomized_svd", "safe_sparse_dot", "weighted_mode", "gen_batches", "gen_even_slices", "get_tags", "single_source_shortest_path_length", "indexable", "MetadataRequest", "MetadataRouter", "MethodMapping", "get_routing_for_object", "process_routing", "available_if", "is_multilabel", "type_of_target", "unique_labels", "murmurhash3_32", "Parallel", "delayed", "parallel_backend", "sample_without_replacement", "register_parallel_backend", "resample", "safe_mask", "safe_sqr", "shuffle", "incr_mean_variance_axis", "inplace_column_scale", "inplace_csr_column_scale", "inplace_row_scale", "inplace_swap_column", "inplace_swap_row", "mean_variance_axis", "inplace_csr_row_normalize_l1", "inplace_csr_row_normalize_l2", "check_is_fitted", "check_memory", "check_symmetric", "column_or_1d", "has_fit_parameter", "validate_data", "<span class=\"section-number\">3.2. </span>Tuning the hyper-parameters of an estimator", "<span class=\"section-number\">6.4. </span>Imputation of missing values", "<span class=\"section-number\">1.15. </span>Isotonic regression", "<span class=\"section-number\">6.7. </span>Kernel Approximation", "<span class=\"section-number\">1.3. </span>Kernel ridge regression", "<span class=\"section-number\">1.2. </span>Linear and Quadratic Discriminant Analysis", "<span class=\"section-number\">3.5. </span>Validation curves: plotting scores to evaluate models", "<span class=\"section-number\">1.1. </span>Linear Models", "<span class=\"section-number\">2.2. </span>Manifold learning", "<span class=\"section-number\">6.8. </span>Pairwise metrics, Affinities and Kernels", "<span class=\"section-number\">2.1. </span>Gaussian mixture models", "<span class=\"section-number\">3.4. </span>Metrics and scoring: quantifying the quality of predictions", "<span class=\"section-number\">1.12. </span>Multiclass and multioutput algorithms", "<span class=\"section-number\">1.9. </span>Naive Bayes", "<span class=\"section-number\">1.6. </span>Nearest Neighbors", "<span class=\"section-number\">1.17. </span>Neural network models (supervised)", "<span class=\"section-number\">2.9. </span>Neural network models (unsupervised)", "<span class=\"section-number\">2.7. </span>Novelty and Outlier Detection", "<span class=\"section-number\">4.1. </span>Partial Dependence and Individual Conditional Expectation plots", "<span class=\"section-number\">4.2. </span>Permutation feature importance", "&lt;no title&gt;", "<span class=\"section-number\">6.3. </span>Preprocessing data", "<span class=\"section-number\">6.9. </span>Transforming the prediction target (<code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code>)", "<span class=\"section-number\">6.6. </span>Random Projection", "<span class=\"section-number\">1.14. </span>Semi-supervised learning", "<span class=\"section-number\">1.5. </span>Stochastic Gradient Descent", "<span class=\"section-number\">1.4. </span>Support Vector Machines", "<span class=\"section-number\">1.10. </span>Decision Trees", "<span class=\"section-number\">6.5. </span>Unsupervised dimensionality reduction", "<span class=\"section-number\">13. </span>External Resources, Videos and Talks", "Related Projects", "Roadmap", "Computation times", "<span class=\"section-number\">1. </span>Supervised learning", "Support", "Testimonials", "<span class=\"section-number\">2. </span>Unsupervised learning", "User Guide", "Available documentation for scikit-learn", "<span class=\"section-number\">5. </span>Visualizations", "Release History", "&lt;no title&gt;", "Older Versions", "Version 0.13", "Version 0.14", "Version 0.15", "Version 0.16", "Version 0.17", "Version 0.18", "Version 0.19", "Version 0.20", "Version 0.21", "Version 0.22", "Version 0.23", "Version 0.24", "Version 1.0", "Version 1.1", "Version 1.2", "Version 1.3", "Version 1.4", "Version 1.5", "Version 1.6"], "titleterms": {"": [188, 315, 317, 379, 388, 415, 1002], "0": [182, 319, 320, 321, 322, 1018, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "1": [187, 322, 323, 324, 325, 326, 327, 388, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "10": [100, 1033], "11": 1033, "12": 1033, "13": 1034, "14": 1035, "15": 1036, "16": 1037, "17": 1038, "18": 1039, "19": 1040, "1d": [295, 357], "2": [324, 1036, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "20": [102, 351, 371, 1041], "2018": 1022, "20newgroup": 227, "21": 1042, "22": [319, 1043], "23": [320, 1044], "24": [321, 1045], "2d": [51, 85, 122, 128, 187], "3": [63, 197, 325, 1041, 1042, 1047, 1049], "3d": 187, "4": [326, 1033, 1041, 1050], "5": [327, 1018, 1033, 1051], "6": [1033, 1052], "7": 1033, "8": 1033, "9": 1033, "99": 371, "A": [52, 58, 59, 81, 91, 96, 212, 322, 375, 382, 412], "And": [236, 391], "In": 277, "NOT": 381, "One": [205, 226, 279, 322, 339, 412, 1008, 1016], "The": [0, 116, 185, 186, 212, 237, 243, 264, 268, 277, 284, 287, 371, 380, 384, 412, 416, 1001, 1002, 1014], "Will": 388, "With": 250, "__sklearn_is_fitted__": 132, "_safe_index": 927, "abil": 176, "ablat": 249, "about": [0, 186, 388], "absolut": 1002, "access": 409, "accuraci": [188, 244, 351, 355, 1002], "accuracy_scor": 704, "across": 359, "action": 376, "activ": [0, 330], "ad": 408, "adaboost": [134, 135, 136, 415], "adaboostclassifi": [134, 554], "adaboostregressor": 555, "add": [326, 388], "add_dummy_featur": 887, "addit": [415, 994], "additive_chi2_kernel": 759, "additivechi2sampl": 639, "address": 264, "adjac": 55, "adjust": 72, "adjusted_mutual_info_scor": 705, "adjusted_rand_scor": 706, "advanc": 250, "advantag": 408, "affin": [51, 73, 408, 1000], "affinity_propag": 454, "affinitypropag": 440, "agglom": [74, 75, 85], "agglomer": [84, 87, 1019], "agglomerativeclust": 441, "aggress": [991, 998], "aic": [202, 998], "algebra": [363, 385], "algorithm": [57, 58, 59, 73, 79, 82, 88, 96, 97, 98, 232, 239, 382, 388, 996, 998, 1003, 1005, 1006, 1010, 1018], "alias": 384, "align": 999, "all": [270, 279, 323, 394, 1048, 1049, 1050], "all_displai": 940, "all_estim": 941, "all_funct": 942, "alloc": [54, 413], "alpha": [159, 355], "alpin": 394, "alreadi": 55, "altern": 991, "am": [143, 249], "amount": 282, "an": [81, 92, 132, 182, 195, 202, 300, 319, 323, 384, 388, 416, 991, 1008], "anaconda": 394, "analysi": [43, 64, 69, 70, 93, 120, 126, 127, 130, 134, 146, 187, 198, 255, 272, 273, 280, 298, 299, 300, 351, 411, 413, 996, 1005, 1019], "analyz": [52, 991], "angl": [202, 998], "ani": 388, "anomali": 239, "anova": [165, 343], "api": [2, 41, 132, 252, 253, 319, 322, 324, 364, 378, 383, 390, 399, 404, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1043, 1050, 1051], "appli": 159, "applic": 416, "approach": [109, 202, 270], "approxim": [183, 190, 191, 244, 290, 321, 410, 994], "ar": [100, 264, 322, 388], "arch": 394, "architectur": 1022, "ard": [198, 998], "ardregress": 645, "arff": 370, "argument": [322, 378, 1044, 1046], "arm64": 384, "arrai": [41, 324, 327, 358, 385, 404, 1050, 1051], "artifact": 402, "artwork": 0, "as_float_arrai": 929, "ask": 388, "assert": 378, "assert_all_finit": 930, "assign": 408, "assumpt": 90, "atom": [49, 363], "attent": 388, "attribut": [378, 390, 404, 991], "auc": [319, 707], "author": [380, 1033], "autom": 376, "automat": [198, 389, 998], "auxiliari": 41, "avail": [323, 1029, 1030], "available_if": 962, "averag": [277, 279, 408, 415, 1002], "average_precision_scor": 708, "avoid": [359, 409], "aweb": 1026, "ax": 383, "b": 115, "backend": 384, "backward": 376, "bag": [137, 145, 351, 415, 416, 991], "baggingclassifi": 556, "baggingregressor": 557, "balanc": [269, 1002], "balanced_accuracy_scor": 709, "ball": 1005, "balltre": [845, 1005], "base": [4, 41, 42, 43, 115, 141, 168, 183, 198, 245, 319, 320, 322, 324, 325, 326, 376, 408, 412, 415, 417, 998, 1010, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050], "baseestim": [378, 422], "baselin": [191, 212], "basi": [44, 179, 418, 994, 998], "basic": [177, 230, 389, 410, 418], "batch": [408, 413], "bay": [61, 62, 1004], "bayesian": [25, 193, 194, 255, 270, 998, 1001], "bayesiangaussianmixtur": 798, "bayesianridg": 646, "befor": 182, "behavior": 265, "behind": 0, "being": 186, "benchmark": [46, 49, 91, 351], "bernoulli": [1004, 1007], "bernoullinb": 840, "bernoullirbm": 861, "best": [260, 377, 388], "bestofmedia": 1026, "beta": 413, "betawork": 1026, "between": [97, 281, 998], "bia": 137, "bic": [202, 260, 998], "biclust": [27, 56, 57, 58, 183, 372, 405], "biclustermixin": 423, "bigger": 365, "bike": [43, 52, 187], "bin": 1012, "binar": [868, 888, 1012, 1013], "binari": [277, 289, 327, 998, 1002], "birch": [77, 408, 442], "birchbox": 1026, "bisect": [78, 408], "bisectingkmean": [323, 443], "blind": 121, "bnp": 1026, "boil": 381, "boltzmann": [308, 1007], "bonu": 159, "book": 1026, "boost": [43, 140, 143, 144, 145, 146, 147, 148, 149, 187, 212, 319, 320, 322, 324, 325, 415], "bouldin": 408, "bound": 243, "boundari": [150, 155, 293, 334, 344], "branch": 384, "break": 348, "breast": [189, 373], "brier": 1002, "brier_score_loss": 710, "brute": [991, 1005], "bug": [375, 376, 1025, 1036, 1037, 1038, 1039, 1040, 1041, 1042], "build": [175, 182, 374, 376, 384, 409, 1051], "bulk": [49, 363], "bunch": [388, 920], "busi": 264, "c": 382, "c4": 1018, "c5": 1018, "cach": [104, 292, 409], "calcul": [144, 156], "calibr": [5, 60, 61, 62, 63, 64, 146, 183, 212, 406, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "calibratedclassifiercv": 437, "calibration_curv": 439, "calibrationdisplai": 438, "california": 371, "calinski": 408, "calinski_harabasz_scor": 711, "call": [359, 375], "callgrind": 382, "can": [159, 388], "cancer": [189, 373], "candid": [282, 991], "canon": [115, 411], "card": 264, "cardif": 1026, "cardiotocographi": 249, "cart": 1018, "case": [347, 998, 1002], "categor": [143, 316, 321, 326, 388, 415, 1004, 1012], "categori": [43, 323, 325, 1012], "categoricalnb": 841, "caus": 394, "causal": [185, 186], "cautiou": 186, "cca": [115, 482], "center": [120, 1012], "central": 55, "centroid": [301, 1005], "chain": [105, 251, 289, 389, 409], "chanc": 72, "chang": [246, 376, 391, 1026, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "changelog": [1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "characterist": [279, 280, 1002], "check": [186, 272, 319, 384, 404, 1041, 1042, 1043], "check_arrai": 932, "check_consistent_length": 933, "check_cv": 825, "check_estim": 943, "check_increas": 637, "check_is_fit": [378, 985], "check_memori": 986, "check_random_st": 934, "check_scalar": 935, "check_scor": 712, "check_symmetr": 987, "check_x_i": 931, "checker": 41, "checklist": 376, "chi": [994, 1000], "chi2": 605, "chi2_kernel": 760, "choic": 413, "choos": [46, 396], "ci": [376, 384], "circl": 99, "cite": 0, "claim": [212, 230], "class": [41, 63, 72, 134, 136, 156, 197, 221, 226, 273, 277, 279, 322, 339, 342, 390, 407, 412, 415, 416, 1002, 1005, 1008, 1016, 1017, 1033, 1034], "class_likelihood_ratio": 713, "classic": 25, "classif": [27, 47, 63, 65, 66, 68, 69, 102, 160, 171, 172, 173, 174, 178, 183, 228, 247, 273, 276, 277, 280, 289, 293, 301, 308, 319, 328, 333, 344, 351, 372, 418, 998, 1002, 1003, 1005, 1006, 1016, 1017, 1018], "classifi": [25, 41, 61, 62, 64, 67, 132, 157, 197, 251, 267, 284, 289, 293, 319, 327, 334, 337, 340, 351, 358, 406, 415, 996, 1005], "classification_report": 714, "classifierchain": [836, 1003], "classifiermixin": 425, "classifiertag": 921, "classnameprefixfeaturesoutmixin": 424, "clear": 1043, "clear_data_hom": 486, "clone": [378, 433], "close": [375, 384], "cloud": 122, "cloudpickl": 402, "cluster": [6, 27, 51, 57, 59, 71, 72, 73, 74, 75, 76, 79, 81, 82, 85, 88, 89, 91, 93, 96, 97, 98, 99, 100, 120, 183, 323, 325, 352, 372, 405, 408, 413, 1002, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "cluster_optics_dbscan": 455, "cluster_optics_xi": 456, "clustermixin": 426, "co": [57, 59, 405], "co2": 175, "code": [0, 46, 120, 129, 376, 378, 381, 382, 384, 413, 1037, 1038, 1039, 1040, 1041], "coeffici": [168, 186, 193, 216, 217, 283, 408, 1002], "cohen": 1002, "cohen_kappa_scor": 717, "coin": [80, 81], "column": [102, 103, 251], "column_or_1d": 988, "columntransform": [327, 409, 464], "com": 1026, "combin": [154, 240], "comment": 381, "commit": 376, "committe": 391, "common": [186, 359, 390, 404, 416, 1002], "commun": [0, 376], "compact": 241, "compar": [63, 77, 79, 95, 109, 115, 140, 153, 164, 191, 193, 199, 214, 219, 239, 245, 270, 278, 298, 306, 310, 316, 388], "comparison": [64, 67, 70, 78, 97, 111, 128, 143, 144, 163, 170, 232, 233, 245, 270, 281, 283, 287, 353, 998], "compat": [41, 319, 376, 378, 404], "compil": [374, 382], "complement": 1004, "complementnb": 842, "complet": [248, 408], "completeness_scor": 718, "complex": [46, 241, 251, 269, 272, 331, 355, 363, 998, 1005, 1006, 1016, 1017, 1018], "compon": [116, 120, 126, 298, 299, 300, 413, 1005, 1019], "compos": [7, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "composit": [101, 183, 409, 991], "compoundkernel": 613, "compress": [53, 86, 363], "comput": [41, 55, 73, 81, 82, 96, 97, 100, 109, 140, 206, 217, 362, 363, 409, 412, 1009, 1023], "computation": 365, "compute_class_weight": 936, "compute_optics_graph": 457, "compute_sample_weight": 937, "concaten": 106, "concentr": 255, "concept": [390, 998], "conclud": [43, 236], "conclus": [46, 52, 170, 198, 202, 209, 287, 293, 317, 344], "conda": 374, "condit": [187, 321, 1009], "confid": 146, "config_context": 468, "configur": [363, 364], "confus": [263, 408, 1002], "confusion_matrix": 719, "confusionmatrixdisplai": [240, 698], "connect": [408, 416], "consensu": 998, "consensus_scor": 720, "consider": 264, "constant": [212, 264, 992], "constantkernel": 614, "constraint": [149, 151, 324, 326, 408, 415], "construct": 245, "consum": 246, "content": 388, "conting": 408, "contingency_matrix": 715, "continu": [311, 376], "contribut": [376, 388], "contributor": [0, 375, 376, 391, 1037, 1038, 1039, 1040, 1041], "control": [359, 415, 1006], "convent": 377, "converg": 134, "convergencewarn": 572, "convex": 222, "cookbook": 179, "coordin": 202, "core": [0, 47, 365, 375, 382, 388, 391, 1004], "corpu": 416, "correl": [186, 189, 411, 1002, 1010], "cosin": 1000, "cosine_dist": 761, "cosine_similar": 762, "cost": [264, 355, 1018], "countvector": 589, "covari": [8, 70, 108, 109, 111, 112, 113, 183, 257, 410, 996, 1041, 1045, 1046, 1047, 1049, 1050], "coverag": [376, 384, 1002], "coverage_error": 721, "covertyp": [249, 371], "craft": 381, "crash": 388, "creat": [102, 127, 134, 216, 240, 277, 317, 343, 344, 357, 388], "credit": 264, "criteria": [200, 388, 998, 1018], "criterion": [202, 321, 991, 1016], "cross": [43, 114, 115, 159, 167, 183, 202, 264, 265, 266, 268, 269, 273, 275, 280, 317, 343, 359, 407, 411, 412, 991, 998], "cross_decomposit": [9, 1043, 1045, 1047, 1049, 1051], "cross_val_predict": 826, "cross_val_scor": [274, 827], "cross_valid": [412, 828], "cubic": 194, "cumul": 1002, "curat": 375, "curv": [62, 64, 194, 245, 252, 261, 267, 272, 277, 279, 406, 997], "custom": [132, 268, 327, 336, 416, 1012, 1017], "cut": [264, 284], "cv": [265, 359], "cv_results_": 991, "cython": [377, 382, 384], "d": [412, 1005], "d2_absolute_error_scor": 722, "d2_log_loss_scor": 723, "d2_pinball_scor": 724, "d2_tweedie_scor": 725, "data": [43, 46, 48, 51, 55, 58, 61, 63, 70, 73, 81, 82, 83, 88, 90, 91, 96, 97, 99, 100, 102, 107, 109, 111, 113, 115, 116, 121, 122, 125, 127, 135, 141, 144, 147, 149, 150, 154, 164, 167, 168, 176, 178, 182, 185, 188, 189, 191, 194, 199, 206, 207, 209, 216, 240, 245, 252, 260, 265, 267, 271, 276, 277, 279, 280, 283, 293, 297, 302, 308, 310, 314, 315, 316, 326, 329, 340, 343, 346, 347, 352, 353, 359, 363, 365, 381, 388, 390, 408, 409, 412, 417, 1012, 1016, 1026], "dataconversionwarn": 573, "datadimensionalitywarn": 574, "datafram": [319, 326, 388, 1050], "dataiku": 1026, "datarobot": 1026, "dataset": [10, 42, 43, 44, 47, 52, 61, 62, 68, 79, 91, 95, 102, 115, 117, 118, 120, 126, 128, 134, 140, 142, 143, 154, 159, 170, 172, 174, 175, 177, 179, 183, 185, 186, 187, 193, 196, 198, 202, 212, 214, 221, 230, 232, 233, 239, 244, 249, 250, 264, 268, 276, 277, 284, 287, 289, 317, 333, 334, 337, 344, 351, 356, 357, 368, 369, 370, 371, 372, 373, 381, 388, 418, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "davi": 408, "davies_bouldin_scor": 726, "dbscan": [82, 408, 419, 444], "dbscan_clust": 88, "dcg_score": 727, "deal": [41, 388], "debian": 394, "debug": 384, "debugg": 382, "decis": [134, 135, 142, 150, 155, 183, 244, 264, 284, 293, 325, 327, 334, 344, 354, 355, 356, 357, 358, 388, 391, 407, 1018], "decisionboundarydisplai": 632, "decisiontre": 135, "decisiontreeclassifi": 913, "decisiontreeregressor": [321, 914], "decod": 416, "decompos": 413, "decomposit": [11, 114, 115, 119, 120, 137, 183, 372, 411, 413, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "decreas": [141, 188], "deep": 388, "default": [246, 297, 376], "default_tag": 938, "defin": [72, 81, 91, 100, 232, 265, 267, 268, 353, 1002], "definit": [230, 283, 308, 1009, 1043], "deflat": 115, "delai": 968, "demand": [43, 52], "demo": [58, 59, 73, 81, 82, 88, 91, 96, 98], "demonstr": [90, 274, 313, 329], "dendrogram": 76, "denois": [44, 123], "dens": 199, "densiti": [259, 294, 295, 303, 325, 414, 946, 1017], "densitymixin": 427, "depend": [187, 246, 250, 374, 1009, 1033, 1046, 1047], "deploi": 388, "deploy": 394, "deprec": [1, 246, 376, 939, 1043], "descent": [202, 220, 226, 998, 1016], "descript": 185, "design": 175, "det": [267, 1002], "det_curv": 728, "detail": [994, 1016, 1017], "detcurvedisplai": 699, "detect": [48, 239, 249, 267, 296, 297, 1002, 1008, 1017], "determin": [112, 198, 410, 998, 1002], "develop": [131, 132, 183, 246, 374, 377, 378, 379, 383, 384, 385, 991, 1028, 1049], "devianc": [147, 1002], "devic": 404, "diabet": [159, 250, 284, 373], "diagnost": 373, "dict": 416, "dict_learn": 546, "dict_learning_onlin": 547, "dictionari": [83, 120, 123, 129, 413], "dictionarylearn": 532, "dictvector": [353, 582], "did": 388, "diff": 384, "differ": [75, 79, 95, 109, 179, 187, 310, 313, 316, 337, 344, 378, 388, 399, 408, 998], "digit": [68, 85, 91, 160, 233, 308, 329, 330, 373], "dimension": [104, 232, 235, 251, 299, 315, 352, 996, 999, 1005, 1019], "direct": 229, "dirichlet": [54, 413, 1001], "discount": 1002, "discov": 41, "discret": [150, 178, 311, 312, 1012], "discrimin": [69, 70, 996], "discriminant_analysi": [12, 1041, 1042, 1045, 1047, 1048, 1049], "discuss": 375, "disk": 55, "dispatch": 386, "displai": [123, 217, 240, 241, 251, 324, 325, 326, 384, 1030, 1049], "distanc": [27, 111, 327], "distance_metr": 763, "distancemetr": 700, "distort": 123, "distribut": [50, 230, 232, 303, 314, 371, 394, 999, 1012], "diverg": 413, "divid": 323, "do": [381, 388], "document": [0, 47, 57, 183, 321, 322, 350, 351, 352, 376, 1021, 1022, 1025, 1029, 1033, 1036, 1037, 1040, 1041], "doe": 388, "domain": 1021, "donat": 0, "dot": [179, 418], "dotproduct": 615, "down": 381, "download": [55, 154, 182, 370], "drawback": 408, "drop": 143, "dtype": 326, "dummi": [13, 1002, 1041, 1042, 1043, 1046, 1047, 1051], "dummyclassifi": 552, "dummyregressor": 553, "dump_svmlight_fil": 487, "dure": 359, "d\u00b2": 1002, "each": [277, 282, 351], "earli": [144, 149, 220], "earlier": 1033, "eas": 377, "effect": [107, 149, 185, 237, 283, 310, 315, 332, 355], "effici": [324, 326, 385], "efficiencywarn": 575, "eigenfac": [45, 120], "eigenmap": 999, "eigenvector": 55, "elast": [195, 201, 998], "elasticnet": [198, 320, 647], "elasticnetcv": 648, "element": 390, "elimin": [166, 167, 417, 991], "ellipsoid": [70, 256], "ellipt": 1008, "ellipticenvelop": 469, "embed": [51, 85, 232, 233, 243, 300, 415, 999], "emeritu": 0, "empir": [94, 112, 243, 410], "empirical_covari": 477, "empiricalcovari": 470, "enable_halving_search_cv": 580, "enable_iterative_imput": 581, "encod": [86, 143, 316, 317, 325, 1012, 1013], "enet_path": 682, "enforc": [1044, 1046], "engin": [43, 52, 188, 1021, 1026], "enhanc": [324, 391, 1021, 1036, 1037, 1038, 1039, 1040], "enrich": 326, "ensembl": [14, 133, 139, 142, 183, 415, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "enthought": 394, "entir": 388, "entri": 1015, "envelop": 1008, "environ": [364, 384, 402], "equival": 270, "error": [134, 138, 144, 146, 159, 193, 216, 267, 283, 384, 394, 998, 1002], "establish": [97, 191], "estim": [41, 101, 108, 109, 110, 111, 112, 113, 131, 132, 137, 143, 145, 153, 176, 182, 183, 193, 215, 218, 241, 246, 248, 249, 259, 278, 287, 294, 295, 303, 319, 320, 321, 324, 326, 359, 378, 388, 389, 390, 396, 404, 409, 410, 412, 414, 415, 991, 992, 996, 998, 1002, 1017, 1021, 1034, 1041, 1042, 1043], "estimate_bandwidth": 458, "estimator_html_repr": 945, "euclidean_dist": 764, "evalu": [52, 72, 91, 94, 112, 209, 212, 249, 264, 271, 274, 283, 308, 316, 352, 389, 403, 405, 408, 412, 415, 991, 997, 1002], "evernot": 1026, "exact": 413, "exampl": [42, 45, 48, 86, 92, 107, 117, 132, 150, 177, 183, 209, 216, 345, 348, 365, 381, 399, 404, 407, 416, 418, 422, 425, 428, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 505, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 585, 588, 589, 590, 591, 592, 594, 595, 598, 600, 601, 603, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 618, 619, 620, 623, 624, 626, 628, 629, 631, 632, 633, 634, 635, 636, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 653, 654, 656, 657, 658, 659, 660, 663, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 689, 690, 691, 692, 693, 694, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 713, 714, 718, 719, 720, 728, 730, 733, 735, 736, 738, 739, 742, 743, 746, 747, 749, 750, 751, 753, 754, 756, 758, 762, 779, 780, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 862, 863, 864, 865, 866, 869, 870, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 891, 894, 898, 899, 901, 902, 903, 905, 908, 909, 910, 911, 912, 913, 914, 919, 920, 934, 944, 946, 953, 958, 959, 960, 961, 962, 975, 985, 1033], "except": [15, 385, 1045, 1049], "execut": [359, 388], "exercis": [158, 159, 160, 161, 183], "exhaust": 991, "exist": 376, "exp": [179, 418], "expans": 193, "expect": [187, 321, 1009], "experi": [0, 72, 375], "experiment": [16, 324, 380, 404, 1049], "explain": 1002, "explained_variance_scor": 729, "explicit": 244, "explor": 43, "exponenti": 617, "export": [40, 388], "export_graphviz": 917, "export_text": 918, "expsinesquar": 616, "extend": 998, "extens": [382, 394], "extern": [370, 1020, 1033, 1042], "extract": [54, 106, 123, 230, 271, 352, 363, 365, 416], "extract_patches_2d": 585, "extrapol": 175, "extratreeclassifi": 915, "extratreeregressor": 916, "extratreesclassifi": 558, "extratreesregressor": 559, "extrem": [381, 415], "f": [163, 1002], "f1": 277, "f1_score": 730, "f_classif": 606, "f_regress": 607, "fa": [120, 127], "face": [45, 83, 120, 248, 371, 1026], "factor": [54, 120, 127, 130, 296, 297, 413, 1008], "factoranalysi": 533, "fail": 381, "failur": [185, 991], "fast_logdet": 947, "faster": [324, 415], "fastica": [120, 121, 122, 420, 534], "fbeta_scor": 731, "featur": [43, 52, 84, 87, 106, 125, 126, 139, 141, 143, 147, 149, 151, 152, 162, 164, 166, 167, 168, 183, 188, 189, 191, 193, 207, 230, 244, 250, 271, 308, 311, 312, 315, 316, 319, 321, 322, 343, 351, 352, 363, 365, 376, 380, 399, 409, 415, 416, 417, 992, 1010, 1012, 1019, 1036, 1037, 1038, 1039, 1040], "feature_extract": [17, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "feature_select": [18, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "featureagglomer": [408, 445], "featurehash": [353, 583], "featureunion": [409, 864], "fedora": 394, "fetch_20newsgroup": 488, "fetch_20newsgroups_vector": 489, "fetch_california_h": 490, "fetch_covtyp": 491, "fetch_fil": 492, "fetch_kddcup99": 493, "fetch_lfw_pair": 494, "fetch_lfw_peopl": 495, "fetch_olivetti_fac": 496, "fetch_openml": [324, 497], "fetch_rcv1": 498, "fetch_species_distribut": 499, "file": [55, 376, 384, 394, 416], "final": [90, 170], "find": 1005, "first": [48, 72], "fit": [29, 58, 63, 90, 121, 127, 141, 146, 147, 175, 193, 194, 195, 207, 214, 218, 277, 289, 297, 302, 317, 346, 357, 359, 378, 389, 399, 404, 415, 1004, 1008], "fitfailedwarn": 576, "fix": [72, 1033, 1036, 1037, 1038, 1039, 1040, 1046], "fixedthresholdclassifi": [327, 800], "flag": 384, "flexibl": [322, 992], "float64": 404, "fold": [384, 412], "footprint": 86, "forc": [991, 1005], "forecast": [52, 175], "forest": [138, 140, 141, 153, 188, 189, 249, 252, 326, 371, 415, 1008], "forg": 374, "format": [370, 381, 388, 1003], "formul": [405, 415, 996, 1005, 1016, 1017, 1018], "four": 99, "fowlk": 408, "fowlkes_mallows_scor": 732, "framework": 1021, "free": 177, "freebsd": 374, "freez": 388, "french": 212, "frequenc": 230, "frequent": 388, "frequentist": 270, "frobeniu": 413, "from": [17, 51, 123, 168, 188, 316, 319, 364, 370, 374, 388, 416, 1002, 1043], "fruit": 375, "fulli": 185, "function": [41, 49, 70, 179, 203, 216, 217, 222, 233, 265, 284, 321, 343, 353, 385, 412, 415, 418, 994, 998, 1002, 1017, 1050], "functiontransform": 869, "fund": 0, "futur": 388, "futurewarn": 1043, "gain": [264, 1002], "galleri": [422, 425, 428, 431, 432, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 482, 483, 484, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 505, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 582, 583, 585, 588, 589, 590, 591, 592, 594, 595, 598, 600, 601, 603, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 618, 619, 620, 623, 624, 626, 628, 629, 631, 632, 633, 634, 635, 636, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 653, 654, 656, 657, 658, 659, 660, 663, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 685, 689, 690, 691, 692, 693, 694, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 710, 713, 714, 718, 719, 720, 728, 730, 733, 735, 736, 738, 739, 742, 743, 746, 747, 749, 750, 751, 753, 754, 756, 758, 762, 779, 780, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 840, 842, 843, 844, 847, 848, 849, 850, 851, 852, 853, 854, 858, 861, 862, 863, 864, 865, 866, 869, 870, 872, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 889, 891, 894, 898, 899, 901, 902, 903, 905, 908, 909, 910, 911, 912, 913, 914, 919, 920, 934, 944, 946, 953, 958, 959, 960, 961, 962, 975, 985], "gamma": [230, 325, 1002], "gammaregressor": 649, "gaussian": [61, 62, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 254, 255, 256, 259, 260, 261, 310, 418, 1001, 1004, 1012, 1014], "gaussian_process": [19, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "gaussianmixtur": 799, "gaussiannb": 843, "gaussianprocessclassifi": 611, "gaussianprocessregressor": 612, "gaussianrandomproject": 897, "gdb": 382, "gen_batch": 952, "gen_even_slic": 953, "gener": [10, 25, 52, 58, 61, 70, 73, 81, 82, 88, 90, 96, 97, 99, 100, 109, 111, 113, 118, 121, 122, 123, 141, 150, 164, 167, 170, 176, 177, 179, 183, 192, 193, 194, 198, 207, 212, 214, 245, 260, 267, 283, 297, 302, 308, 320, 329, 346, 347, 359, 372, 376, 390, 413, 415, 998, 1012, 1022], "genericunivariateselect": 593, "german": 264, "get": [359, 384, 388, 389], "get_config": 627, "get_data_hom": 500, "get_feature_names_out": 323, "get_param": 378, "get_routing_for_object": 960, "get_scor": 733, "get_scorer_nam": 734, "get_tag": 954, "git": 376, "github": 376, "gitter": 1025, "glm": 25, "glossari": 390, "gmm": [257, 258], "goal": 1022, "good": [376, 381], "govern": [0, 391], "gpc": [171, 172, 173, 174, 418], "gperftool": 382, "gpr": [175, 176, 418], "gprof": 382, "gpu": 388, "gradient": [43, 140, 143, 144, 145, 146, 147, 148, 149, 187, 212, 220, 226, 319, 320, 322, 324, 325, 415, 998, 1016], "gradientboostingclassifi": [415, 560], "gradientboostingregressor": [415, 561], "gram": 195, "graph": [41, 51, 319, 385, 388, 408, 416], "graphic": [388, 1007], "graphical_lasso": 478, "graphicallasso": 471, "graphicallassocv": 472, "greek": 80, "grid": [251, 268, 270, 278, 281, 991], "grid_to_graph": 586, "gridsearchcv": [104, 159, 274, 801], "ground": [72, 193], "group": [323, 325, 412, 1026], "groupkfold": 802, "groupshufflesplit": 803, "grow": 72, "guid": [379, 1028], "guidelin": [376, 378], "halv": [281, 282, 321, 991], "halvinggridsearchcv": 804, "halvingrandomsearchcv": 805, "ham": 1002, "hamming_loss": 735, "hand": 68, "handl": [41, 189, 992], "handwritten": [91, 233, 373], "harabasz": 408, "hard": 415, "has_fit_paramet": 989, "hash": [152, 385, 416], "hashingvector": [352, 590], "haversine_dist": 765, "hdbscan": [88, 325, 408, 446], "help": [375, 388], "helper": [49, 179, 233, 385], "here": 358, "hessian": 999, "heterogen": [102, 409], "hierarch": [76, 81, 95, 100, 325, 408], "hierarchi": 408, "higher": 364, "highlight": [183, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 1033, 1036, 1037, 1040, 1041], "hing": 1002, "hinge_loss": 736, "histgradientboost": [321, 326], "histgradientboostingclassifi": [415, 562], "histgradientboostingregressor": [323, 563], "histogram": [140, 149, 320, 322, 324, 414, 415], "histori": [0, 1031], "hmm": 388, "hoc": 284, "hole": 236, "home": 270, "homebrew": 374, "homogen": 408, "homogeneity_completeness_v_measur": 737, "homogeneity_scor": 738, "hot": 143, "hour": 52, "hourli": 185, "hous": [143, 249, 371], "how": [159, 359, 376, 382, 388], "howaboutw": 1026, "html": [241, 378], "huber": 998, "huberregressor": [196, 650], "hug": 1026, "hyper": [29, 146, 268, 321, 991], "hyperparamet": [88, 175, 176, 271, 278, 287, 618], "hyperplan": [224, 341, 342], "i": [327, 358, 381, 388, 412, 1026], "ic": [187, 1009], "ica": [121, 413], "id3": 1018, "idf": 416, "illustr": [104, 174, 179, 300, 418], "imag": [17, 44, 81, 83, 86, 99, 123, 370, 388, 416], "img_to_graph": 587, "impact": [43, 94, 283, 1048, 1049, 1050, 1051], "implement": [132, 199, 388, 1002, 1005, 1016, 1017], "import": [141, 147, 168, 188, 189, 244, 287, 315, 319, 407, 415, 1010], "improv": [320, 321, 322, 323, 324, 326, 327, 375, 376, 1036, 1037], "impur": [141, 188, 355, 1010], "imput": [20, 180, 181, 182, 183, 319, 327, 992, 1012, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "includ": 388, "inclus": 388, "incom": 185, "inconsist": 359, "inconsistentversionwarn": 577, "incr_mean_variance_axi": 976, "increment": [124, 365, 413], "incrementalpca": 535, "independ": [120, 413], "index": [408, 956], "indic": 265, "individu": [157, 187, 321, 1009], "induct": 89, "infer": 185, "influenc": [46, 49, 363], "infonea": 1026, "inform": [163, 182, 200, 202, 380, 408, 991, 998], "infrastructur": 0, "infrequ": [323, 325, 1012], "init": 378, "initi": [92, 94, 258], "inplace_column_scal": 977, "inplace_csr_column_scal": 978, "inplace_csr_row_normalize_l1": 983, "inplace_csr_row_normalize_l2": 984, "inplace_row_scal": 979, "inplace_swap_column": 980, "inplace_swap_row": 981, "input": [41, 363, 378, 404, 408, 1012], "inputtag": 922, "inria": 1026, "inspect": [21, 183, 184, 393, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "instal": [374, 394], "instanc": [359, 365], "instanti": 378, "instead": 264, "instruct": 374, "insur": 230, "integr": 376, "intel": 394, "interact": [43, 187, 324, 415], "interfac": [27, 399], "intern": [317, 407], "internet": 51, "interoper": 1021, "interpol": 213, "interpret": [175, 186, 216, 249, 289, 413, 415], "interv": 146, "introduc": 253, "introduct": 999, "introductori": 177, "invari": [88, 273], "invers": [113, 410, 1014], "io": 402, "iri": [126, 128, 142, 172, 221, 334, 337, 356, 373, 418], "is_classifi": 434, "is_cluster": 435, "is_multilabel": 963, "is_regressor": 436, "iso": [173, 277], "isol": 1008, "isolationforest": [150, 564], "isomap": [232, 233, 689, 999], "isoton": [22, 242, 406, 993, 1041, 1042, 1043, 1045, 1047, 1048], "isotonic_regress": 638, "isotonicregress": 636, "issu": [375, 376, 384], "iter": [182, 282, 412], "iterativeimput": [181, 628, 992], "j": 1026, "jaccard": 1002, "jaccard_scor": 739, "job": 388, "joblib": [364, 382, 402], "johnson": [243, 1014], "johnson_lindenstrauss_min_dim": 899, "joint": 207, "k": [78, 90, 91, 92, 94, 97, 100, 115, 293, 315, 352, 408, 412, 1002, 1005, 1012], "k_mean": 459, "kappa": 1002, "kbinsdiscret": [311, 313, 870], "kcachegrind": 382, "kddcup": 371, "kddcup99": 249, "kdtree": [846, 1005], "keep": 992, "kei": 402, "kernel": [19, 43, 44, 125, 170, 175, 176, 178, 179, 183, 190, 191, 244, 245, 294, 295, 303, 321, 336, 339, 344, 346, 413, 414, 418, 619, 994, 995, 1000, 1012, 1017], "kernel_approxim": [23, 1043, 1045, 1046, 1047, 1048, 1049], "kernel_metr": 766, "kernel_ridg": [24, 1050], "kernelcenter": 871, "kerneldens": 850, "kernelpca": [125, 536], "kernelridg": 644, "keyword": [322, 1044, 1046], "kfold": 806, "kmean": [93, 97, 320, 447], "kmeans_plusplu": 460, "kneighbors_graph": 858, "kneighborsclassifi": 847, "kneighborsregressor": 848, "kneighborstransform": 849, "knn": [182, 319], "knnimput": 629, "knowledg": 377, "known": [1041, 1042], "kpca": 413, "l": 194, "l1": [53, 198, 204, 206, 228, 347, 417], "l1_min_c": 912, "l2": [216, 347], "label": [41, 72, 277, 329, 330, 331, 371, 372, 408, 412, 415, 1002, 1013, 1015], "label_binar": 889, "label_ranking_average_precision_scor": 740, "label_ranking_loss": 741, "labelbinar": [872, 1013], "labelencod": 873, "labelpropag": 900, "labelspread": 901, "lag": 52, "laplacian": 1000, "laplacian_kernel": 767, "lar": [201, 651, 998], "larg": 416, "lars_path": 683, "lars_path_gram": 684, "larscv": 652, "lasso": [53, 198, 199, 200, 201, 202, 207, 320, 653, 998], "lasso_path": 685, "lassocv": 654, "lassolar": 655, "lassolars": 657, "lassolarscv": 656, "latenc": [49, 363], "latent": [54, 115, 413], "latentdirichletalloc": 537, "latest": 394, "layer": [187, 305, 1006], "lda": [70, 128, 413, 996], "leakag": 359, "learn": [0, 41, 44, 51, 83, 120, 123, 169, 183, 185, 186, 187, 191, 231, 232, 233, 234, 245, 246, 264, 265, 272, 300, 306, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 362, 363, 365, 372, 374, 376, 377, 378, 380, 381, 388, 391, 394, 413, 415, 997, 999, 1007, 1015, 1021, 1022, 1024, 1026, 1027, 1029], "learner": [134, 415], "learning_curv": 829, "learningcurvedisplai": 807, "least": [116, 146, 202, 208, 209, 210, 998], "leav": [355, 412, 998], "leaveonegroupout": 808, "leaveoneout": 809, "leavepgroupsout": 810, "leavepout": 811, "ledoit": [69, 110, 410], "ledoit_wolf": 479, "ledoit_wolf_shrinkag": 480, "ledoitwolf": [109, 473], "lemma": 1014, "length": [150, 394], "lesson": [185, 186], "level": [175, 176, 364, 408, 415], "liabil": 212, "librari": [363, 364], "libsvm": 370, "likelihood": [109, 193, 194, 273, 1002, 1007], "limit": [143, 170, 363, 394, 402, 416], "lindenstrauss": [243, 1014], "line": [159, 173], "linear": [25, 43, 62, 69, 70, 146, 170, 183, 186, 192, 193, 209, 212, 215, 218, 232, 233, 244, 320, 339, 344, 346, 363, 385, 388, 996, 998, 999, 1000, 1012], "linear_kernel": 768, "linear_model": [25, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "lineardiscriminantanalysi": [324, 550], "linearregress": [214, 658], "linearsvc": [338, 905], "linearsvr": 906, "link": [363, 1002], "linkag": [95, 408], "linnerrud": 373, "linux": [374, 388, 394], "list": [72, 380, 1025], "loa": 175, "load": [44, 46, 55, 83, 91, 126, 140, 143, 147, 159, 168, 188, 206, 209, 230, 233, 240, 244, 252, 271, 279, 280, 289, 293, 315, 316, 340, 343, 351, 352, 353, 369, 370, 381, 388, 416], "load_breast_canc": 501, "load_diabet": 502, "load_digit": 503, "load_fil": 504, "load_iri": 505, "load_linnerud": 506, "load_sample_imag": [507, 508], "load_svmlight_fil": [509, 510], "load_win": 511, "loader": 10, "local": [232, 233, 296, 297, 999, 1008], "locally_linear_embed": 694, "locallylinearembed": 690, "localoutlierfactor": 851, "lock": [376, 384], "lof": [296, 297], "log": [193, 194, 1002], "log_loss": 742, "logarithm": 1002, "logist": [105, 197, 203, 204, 205, 206, 227, 228, 998], "logisticregress": [289, 659], "logisticregressioncv": 660, "loo": 412, "look": [52, 245, 346], "loss": [149, 212, 222, 320, 323, 325, 415, 1002, 1050], "lot": 388, "love": 1026, "low": [408, 415, 417], "lower": 364, "lpo": 412, "lsa": 352, "mac": 394, "machin": [169, 183, 185, 186, 187, 308, 335, 384, 1007, 1017], "machinali": 1026, "maco": 374, "macport": 394, "macro": 279, "mahalanobi": 111, "mail": 1025, "main": [47, 212], "maintain": [0, 376, 380, 402], "major": [415, 1041, 1042], "make": [154, 157, 182, 376, 391], "make_biclust": 512, "make_blob": [381, 513], "make_checkerboard": 514, "make_circl": 515, "make_classif": [381, 516], "make_column_selector": 466, "make_column_transform": 467, "make_friedman1": 517, "make_friedman2": 518, "make_friedman3": 519, "make_gaussian_quantil": 520, "make_hastie_10_2": 521, "make_low_rank_matrix": 522, "make_moon": 523, "make_multilabel_classif": 524, "make_pipelin": 866, "make_regress": [381, 525], "make_s_curv": 526, "make_scor": 743, "make_sparse_coded_sign": 527, "make_sparse_spd_matrix": 528, "make_sparse_uncorrel": 529, "make_spd_matrix": 530, "make_swiss_rol": 531, "make_union": 867, "mallow": 408, "manag": [364, 394], "manhattan_dist": 769, "mani": [265, 324, 364, 388, 1050, 1051], "manifold": [26, 183, 231, 232, 233, 234, 372, 999, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "manual": [264, 407], "map": [244, 314, 1012], "mar": 1026, "margin": [193, 194, 224, 341, 345], "mark": 992, "markdown": 381, "marker": 376, "market": 51, "match": [211, 998], "matern": 620, "mathemat": [41, 405, 415, 994, 996, 1005, 1009, 1016, 1017, 1018], "matric": [41, 385, 1012], "matrix": [54, 55, 178, 195, 263, 408, 413, 1002], "matter": 186, "matthew": 1002, "matthews_corrcoef": 744, "mat\u00e9rn": [179, 418], "max": [109, 1002], "max_error": 745, "maxabs_scal": 890, "maxabsscal": [310, 874], "maximum": [224, 341, 1007], "md": [691, 999], "mdi": 188, "mean": [78, 90, 91, 92, 94, 96, 97, 141, 182, 188, 216, 352, 408, 1002, 1012], "mean_absolute_error": 746, "mean_absolute_percentage_error": 747, "mean_gamma_devi": 748, "mean_pinball_loss": 749, "mean_poisson_devi": 750, "mean_shift": 461, "mean_squared_error": 751, "mean_squared_log_error": 752, "mean_tweedie_devi": 753, "mean_variance_axi": 982, "meanshift": [96, 448], "measur": [154, 273, 408, 1002], "media": 1025, "median": [998, 1002], "median_absolute_error": 754, "member": 375, "memori": [86, 326, 363, 382, 384], "merg": 380, "meson": [384, 1051], "messag": [270, 376], "meta": [41, 153, 246, 287, 321, 404, 415], "metadata": [41, 246, 325, 326, 351, 390, 399, 1050, 1051], "metadatarequest": 957, "metadatarout": 958, "metaestimatormixin": 428, "method": [95, 106, 115, 133, 170, 183, 232, 234, 258, 286, 288, 390, 402, 408, 994, 1008, 1009], "methodmap": 959, "metric": [27, 72, 75, 146, 264, 274, 404, 408, 412, 991, 1000, 1002, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "micro": [277, 279], "min_cluster_s": 88, "min_po": 928, "min_sampl": 88, "mincovdet": 474, "mini": [408, 413], "minibatchdictionarylearn": 538, "minibatchkmean": [77, 97, 120, 449], "minibatchnmf": [323, 539], "minibatchsparsepca": [120, 413, 540], "minim": [381, 1018, 1046, 1047], "minimum": [112, 410], "minmax_scal": 891, "minmaxscal": [310, 875], "misc": 1033, "miscellan": [25, 183, 238, 1041, 1042, 1043, 1044, 1045, 1046, 1049], "mislead": 1010, "miss": [149, 180, 181, 182, 183, 319, 325, 326, 415, 992, 1012, 1018], "missingind": 630, "mix": 103, "mixin": 378, "mixtur": [28, 183, 254, 255, 256, 259, 260, 261, 1001, 1041, 1042, 1046, 1047, 1049, 1051], "mlp": 307, "mlpclassifi": [306, 862], "mlpregressor": 863, "mnist": [228, 307], "mode": [115, 363], "model": [25, 27, 29, 43, 46, 50, 52, 90, 107, 115, 121, 127, 140, 141, 143, 144, 147, 150, 167, 168, 170, 175, 183, 186, 187, 188, 191, 192, 193, 198, 200, 202, 207, 209, 212, 215, 230, 240, 245, 249, 250, 254, 256, 260, 261, 262, 264, 269, 270, 272, 277, 283, 289, 297, 302, 308, 315, 320, 322, 326, 344, 346, 351, 357, 363, 378, 388, 389, 391, 402, 403, 412, 991, 997, 998, 1001, 1002, 1004, 1006, 1007, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "model_select": [29, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "modifi": 999, "modul": [1033, 1041, 1042, 1048, 1049, 1050, 1051], "mona": 175, "monitor": 376, "monoton": [149, 151, 326, 415], "more": [322, 388, 1006], "morgan": 1026, "most": 329, "motor": 212, "mp": 404, "much": 159, "multi": [25, 88, 134, 153, 187, 207, 221, 235, 248, 274, 277, 305, 357, 382, 998, 999, 1002, 1006, 1017, 1018], "multiclass": [30, 41, 183, 227, 279, 286, 287, 319, 385, 406, 1002, 1003, 1042, 1045, 1046, 1047], "multicollinear": 189, "multidimension": 232, "multilabel": [27, 118, 247, 289, 372, 385, 1002, 1003], "multilabel_confusion_matrix": 755, "multilabelbinar": [876, 1013], "multinomi": [205, 228, 998, 1004], "multinomialnb": 844, "multioutput": [31, 183, 288, 1003, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051], "multioutputclassifi": [837, 1003], "multioutputregressor": [838, 1003], "multipl": [106, 251, 274, 359, 383, 412, 991, 992, 1002, 1041, 1042], "multitaskelasticnet": 661, "multitaskelasticnetcv": 662, "multitasklasso": 663, "multitasklassocv": 664, "multivari": [115, 992], "murmurhash3_32": 966, "mutual": [163, 408], "mutual_info_classif": 608, "mutual_info_regress": 609, "mutual_info_scor": 756, "my": 388, "n_featur": 49, "n_job": 388, "naiv": [43, 52, 61, 62, 1004], "naive_bay": [32, 1041, 1043, 1044, 1045, 1046, 1048, 1049], "name": [151, 322, 388, 409], "nan": 992, "nan_euclidean_dist": 770, "nativ": [143, 316, 319, 321, 326, 388], "ndcg_score": 757, "nearest": [100, 183, 290, 291, 292, 293, 298, 301, 302, 319, 992, 1005], "nearestcentroid": 852, "nearestneighbor": 853, "necessari": 381, "need": 388, "neg": [54, 120, 168, 208, 413, 998], "neighbor": [33, 100, 183, 232, 290, 291, 292, 293, 298, 302, 315, 319, 992, 999, 1005, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "neighborhood": [298, 299, 300, 1005], "neighborhoodcomponentsanalysi": 854, "nest": [275, 409], "net": [195, 201, 998], "netbsd": 394, "network": [183, 187, 304, 1006, 1007], "neural": [183, 187, 304, 1006, 1007], "neural_network": [34, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049], "new": [319, 321, 322, 324, 325, 376, 388, 1020, 1033, 1034, 1036, 1037, 1038, 1039, 1040], "newsgroup": [102, 351, 371], "next": [52, 389], "nightli": 374, "nmf": [120, 323, 413, 541], "nnmf": 413, "nois": [176, 177, 194], "noisi": [123, 177, 216], "non": [43, 54, 120, 146, 208, 212, 216, 232, 275, 327, 339, 346, 413, 998, 1012], "non_negative_factor": 548, "none": 359, "norm": 413, "normal": [69, 191, 212, 310, 314, 877, 892, 1002, 1012], "normalized_mutual_info_scor": 758, "note": [365, 404, 407, 412], "notfittederror": 578, "novelti": [296, 1008, 1017], "now": [319, 322, 1043], "number": [72, 93, 143, 149, 167, 282, 363, 378, 992], "numer": [186, 327, 364, 378], "numpi": [364, 381], "nusvc": 907, "nusvr": 908, "nystroem": [640, 994], "oa": [69, 109, 110, 421, 475], "object": [41, 240, 265, 378, 388, 991, 1002, 1030], "observ": 185, "obtain": [388, 412], "off": [264, 284, 998], "okcupid": 1026, "older": 1033, "olivetti": 371, "omp": 998, "one": [116, 143, 250, 998, 1002], "oneclasssvm": 909, "onehotencod": [323, 878], "onetoonefeaturemixin": 429, "onevsoneclassifi": [833, 1003], "onevsrestclassifi": [289, 834, 1003], "onli": [229, 1044, 1046], "onlin": [83, 219, 322, 323, 1016], "onnx": 402, "oob": 138, "openml": [44, 316, 319, 370], "openmp": [364, 377], "oper": [41, 279, 280, 375, 385, 418, 1002], "optic": [98, 373, 408, 450], "optim": [29, 41, 382, 991], "optimis": 176, "option": [378, 407], "oracl": 410, "ordin": 143, "ordinalencod": [325, 879], "ordinari": [209, 210, 998], "org": [370, 380, 1026], "origin": [86, 125, 276, 300, 310], "orthogon": [211, 998], "orthogonal_mp": 686, "orthogonal_mp_gram": 687, "orthogonalmatchingpursuit": 665, "orthogonalmatchingpursuitcv": 666, "osx": [388, 394], "other": [316, 370, 388, 415, 1021, 1033], "otto": 1026, "our": [91, 265, 268, 284, 376], "out": [47, 145, 365, 384, 412, 991, 998, 1004], "outdat": 384, "outlier": [25, 48, 196, 229, 239, 249, 296, 297, 310, 998, 1008, 1012], "outliermixin": 430, "outlin": 1010, "output": [153, 248, 310, 324, 326, 357, 1018], "outputcodeclassifi": [835, 1003], "over": 251, "overfit": 285, "overhead": 363, "oversubscript": 364, "overview": [287, 383, 402, 408, 1008], "ovo": 279, "ovr": 279, "own": [378, 388, 1002], "p": [412, 1026], "packag": [244, 1021, 1045], "pair": [126, 408], "pair_confusion_matrix": 716, "paired_cosine_dist": 771, "paired_dist": 772, "paired_euclidean_dist": 773, "paired_manhattan_dist": 774, "pairwis": [27, 43, 270, 327, 1000], "pairwise_dist": 779, "pairwise_distances_argmin": 780, "pairwise_distances_argmin_min": 781, "pairwise_distances_chunk": 782, "pairwise_kernel": 775, "pairwisekernel": 621, "panda": [324, 381], "parallel": [41, 364, 382, 408, 415, 967, 991], "parallel_backend": 969, "paramet": [29, 41, 46, 109, 146, 268, 283, 321, 340, 347, 376, 378, 389, 390, 409, 415, 991, 998, 1002, 1017], "parametergrid": 812, "parametersampl": 813, "parametr": 1007, "parametrize_with_check": 944, "pariba": 1026, "paristech": 1026, "pariti": 97, "parser": [324, 370], "part": [83, 417], "parti": [212, 246, 394], "partial": [116, 185, 187, 250, 1009], "partial_depend": 634, "partialdependencedisplai": 633, "partit": 191, "passiv": 998, "passiveaggressiveclassifi": 667, "passiveaggressiveregressor": 668, "past": 0, "patch": [123, 416], "patchextractor": 584, "path": [150, 201, 206, 217, 358, 394], "pattern": 130, "pca": [44, 91, 105, 120, 121, 124, 125, 126, 127, 128, 315, 326, 327, 413, 542, 1019], "pdp": 187, "peerindex": 1026, "penalti": [204, 223, 347], "peopl": [0, 388, 1033, 1034, 1035, 1036], "per": 352, "percentag": 1002, "percentil": 343, "perceptron": [187, 305, 669, 998, 1006], "perform": [72, 78, 273, 315, 321, 323, 327, 329, 352, 363, 376, 377, 408, 412], "period": [43, 213], "permiss": 388, "permut": [141, 188, 189, 276, 319, 412, 1010], "permutation_import": 635, "permutation_test_scor": 830, "perplex": 237, "persist": 402, "phimeca": 1026, "pickl": 402, "pictur": 80, "pinbal": 1002, "pipelin": [35, 101, 102, 104, 105, 154, 165, 183, 186, 241, 246, 251, 271, 316, 343, 378, 388, 389, 409, 417, 865, 1019, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "pitfal": [186, 359], "pl": 115, "plai": 343, "plan": 388, "plant": 373, "platform": [374, 384, 394], "plot": [21, 27, 40, 46, 47, 49, 58, 61, 66, 70, 73, 76, 81, 82, 83, 90, 96, 97, 99, 100, 109, 113, 115, 118, 121, 122, 126, 135, 140, 142, 147, 150, 154, 155, 156, 157, 159, 167, 182, 187, 193, 194, 198, 205, 206, 207, 209, 216, 217, 221, 233, 240, 244, 249, 250, 252, 260, 266, 267, 272, 274, 277, 279, 289, 297, 308, 316, 319, 321, 322, 329, 337, 338, 343, 344, 351, 356, 357, 383, 997, 1009, 1030], "plot_tre": 919, "pls1": 115, "pls2": 115, "plscanon": [411, 483], "plsregress": [411, 484], "plssvd": [411, 485], "point": [122, 264, 284, 300, 402], "poisson": [212, 230, 320, 321, 1002], "poissonregressor": 670, "polar": [52, 326], "polici": 376, "polynomi": [43, 191, 193, 194, 213, 344, 994, 998, 1000, 1012], "polynomial_kernel": 776, "polynomialcountsketch": [321, 641], "polynomialfeatur": 880, "posit": [120, 322], "possibl": [90, 381], "post": [29, 264, 273, 284, 355, 407], "post1": 1043, "posterior": 179, "power": [116, 212], "power_transform": 893, "powertransform": [310, 881], "pr": 375, "practic": [270, 359, 377, 381, 999, 1006, 1016, 1017, 1018], "pre": [273, 359, 389], "precis": [277, 1002], "precision_recall_curv": 783, "precision_recall_fscore_support": 784, "precision_scor": 785, "precisionrecalldisplai": [240, 701], "precomput": [129, 195, 319, 413], "predefin": [412, 1002], "predefinedsplit": 814, "predict": [43, 49, 52, 61, 116, 135, 146, 157, 171, 185, 194, 212, 245, 264, 266, 277, 329, 357, 363, 388, 389, 407, 412, 418, 1002, 1013], "predictionerrordisplai": 702, "predictor": 154, "premium": 230, "prepar": [120, 135, 144, 149, 191, 209, 232, 279, 280, 315, 340], "preprocess": [36, 147, 154, 183, 186, 187, 249, 251, 309, 353, 359, 388, 1012, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "preprocessor": 187, "preserv": 384, "preval": 273, "princip": [55, 116, 126, 413, 1019], "prior": [53, 179, 255], "privat": 1050, "probabilist": [127, 171, 413, 418], "probabl": [61, 62, 63, 66, 156, 173, 406, 415, 1017], "problem": [186, 264, 413, 1017, 1018], "process": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 359, 391, 418, 1001], "process_rout": 961, "processor": 389, "product": [179, 230, 384, 388, 402, 418, 622], "profil": 382, "project": [0, 116, 125, 128, 243, 378, 388, 1014, 1019, 1021], "pronounc": 388, "propag": [51, 73, 329, 330, 331, 408, 1015], "proper": [52, 175], "properti": 390, "propos": 391, "provid": 381, "prune": [319, 355, 1018], "public": 1043, "publica": 1026, "pull": [376, 380, 384, 388], "pure": 230, "purpos": [216, 353, 1022], "pursuit": [211, 998], "pypi": 388, "pytest": 384, "python": [244, 364, 382, 1020, 1021], "pytorch": 404, "qda": [70, 996], "quadrat": [70, 179, 418, 996], "quadraticdiscriminantanalysi": 551, "qualit": [43, 52], "qualiti": [352, 1002], "quantifi": [352, 1002], "quantil": [52, 146, 149, 214, 322, 323, 998], "quantile_transform": 894, "quantileregressor": [214, 671], "quantiletransform": [310, 882], "quantiz": 86, "question": [388, 1025], "r2_score": 786, "r_regress": 610, "radial": [179, 418, 994], "radius_neighbors_graph": 859, "radiusneighborsclassifi": 855, "radiusneighborsregressor": 856, "radiusneighborstransform": 857, "rand": 408, "rand_scor": 787, "random": [41, 55, 120, 138, 140, 152, 153, 188, 189, 243, 252, 276, 278, 326, 357, 359, 378, 385, 412, 413, 415, 991, 998, 1014, 1019], "random_project": [37, 1047], "random_st": 388, "randomforestclassifi": 565, "randomforestregressor": 566, "randomized_range_find": 948, "randomized_svd": 949, "randomizedsearchcv": 815, "randomli": 118, "randomst": 359, "randomtreesembed": 567, "rang": 1012, "rangespan": 1026, "rank": [27, 212, 1002], "ransac": [215, 998], "ransacregressor": 672, "rate": 415, "ratio": [273, 1002], "ration": [179, 418], "rationalquadrat": 624, "rbf": [244, 339, 340, 344, 418, 623, 1000, 1017], "rbf_kernel": 777, "rbfsampler": 642, "rcv1": 371, "reachabl": 408, "read": 376, "real": [42, 48, 107, 183, 371], "recal": [277, 1002], "recall_scor": 788, "receiv": [279, 280, 1002], "recent": 1, "recogn": 68, "recognit": [45, 371, 373], "recommend": [359, 1021], "reconstruct": [44, 53, 123], "reconstruct_from_patches_2d": 588, "recov": 193, "recurs": [166, 167, 417], "redirect": 55, "reduc": [91, 363], "reduct": [104, 232, 236, 251, 299, 315, 352, 996, 1005, 1019], "refer": [2, 50, 62, 64, 112, 123, 137, 191, 198, 287, 303, 380, 418, 992], "refit": [264, 268], "regard": [264, 407], "region": [80, 270], "register_parallel_backend": 971, "regress": [25, 27, 43, 52, 105, 107, 115, 116, 135, 146, 147, 157, 170, 175, 176, 177, 178, 193, 194, 197, 202, 204, 205, 206, 209, 210, 212, 214, 227, 229, 230, 242, 245, 302, 346, 357, 372, 409, 418, 993, 995, 998, 1002, 1003, 1005, 1006, 1016, 1017, 1018], "regressor": [25, 49, 135, 146, 193, 216, 317, 319, 322, 415], "regressorchain": [839, 1003], "regressormixin": 431, "regressortag": 923, "regular": [78, 109, 148, 186, 206, 216, 217, 283, 305, 347, 998, 1006], "reinforc": 388, "relat": [43, 47, 1010, 1021, 1040], "releas": [183, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 380, 394, 1031], "relev": [111, 198, 998], "remark": [43, 90, 236, 243], "remot": 384, "remov": [388, 417, 1012, 1033], "repeat": [359, 409, 412], "repeatedkfold": 816, "repeatedstratifiedkfold": 817, "replac": 182, "repli": 384, "replic": 402, "report": [376, 381, 1002], "repositori": 370, "represent": [126, 187, 241, 320, 363, 378, 416], "reproduc": [359, 381], "request": [376, 380, 384, 388], "resampl": 972, "rescal": 315, "reshap": 363, "resourc": [282, 364, 376, 1020, 1025], "respect": 273, "respons": [115, 391], "rest": [205, 279], "restart": 382, "restrict": [308, 1007], "result": [46, 47, 58, 64, 73, 81, 82, 83, 90, 91, 96, 97, 100, 109, 111, 113, 121, 122, 135, 140, 154, 157, 182, 191, 198, 209, 217, 245, 249, 274, 289, 297, 316, 346, 352, 357, 359, 991], "retriev": [51, 319], "return": 404, "reuter": 47, "review": [375, 376, 384], "rfe": 594, "rfecv": 595, "rich": [241, 320], "ridg": [170, 194, 196, 210, 216, 217, 245, 317, 673, 995, 998], "ridge_regress": 688, "ridgeclassifi": 675, "ridgeclassifiercv": 676, "ridgecv": 674, "right": 396, "roadmap": 1022, "robust": [25, 88, 111, 112, 193, 215, 218, 359, 410, 991, 998], "robust_scal": 895, "robustscal": [310, 883], "roc": [252, 267, 279, 280, 319, 1002], "roc_auc_scor": 789, "roc_curv": 790, "roccurvedisplai": [240, 703], "role": 391, "roll": [236, 378], "root_mean_squared_error": 791, "root_mean_squared_log_error": 792, "rotat": 130, "rout": [41, 246, 325, 326, 390, 399, 1050, 1051], "routin": [47, 364, 385], "rule": 1002, "run": [46, 91, 274], "runtim": [326, 374], "r\u00b2": 1002, "sa": 249, "safe_mask": 973, "safe_sparse_dot": 950, "safe_sqr": 974, "sampl": [10, 41, 58, 73, 88, 96, 109, 121, 122, 164, 195, 225, 245, 271, 283, 302, 320, 346, 349, 370, 385, 390, 415, 998], "sample_without_replac": 970, "saniti": 384, "save": 388, "scalabl": [191, 272, 320], "scale": [88, 186, 232, 235, 315, 347, 365, 896, 999, 1008, 1012, 1019], "scaler": 310, "scatter": 115, "scenario": 998, "scientif": 1020, "scikit": [0, 41, 246, 265, 319, 320, 321, 322, 323, 324, 325, 326, 327, 362, 363, 374, 377, 378, 380, 381, 388, 391, 394, 1021, 1022, 1026, 1029], "scipi": [364, 1050], "score": [55, 115, 140, 159, 167, 182, 193, 260, 269, 276, 277, 343, 399, 408, 412, 997, 1002, 1017], "script": 381, "search": [251, 268, 270, 278, 281, 287, 389, 991], "second": [48, 72], "secur": [402, 1051], "segment": [80, 99], "select": [25, 27, 87, 93, 104, 127, 159, 162, 164, 167, 168, 183, 200, 202, 207, 260, 262, 343, 388, 399, 403, 412, 417, 991, 998, 1039], "selectfdr": 596, "selectfpr": 597, "selectfrommodel": [417, 598], "selectfw": 599, "selectkbest": 600, "selectormixin": 602, "selectpercentil": 601, "self": [321, 332, 1015], "selftrainingclassifi": 902, "semant": 413, "semi": [183, 328, 329, 333, 334, 1015], "semi_supervis": [38, 1043, 1044, 1045, 1049], "sen": [229, 998], "sens": 53, "sensit": 264, "separ": [121, 224, 341, 342], "sequenc": [178, 388], "sequenti": [168, 417], "sequentialfeatureselector": [321, 603], "seri": [52, 207, 412], "serv": 402, "set": [48, 107, 109, 154, 182, 216, 264, 277, 327, 340, 355, 388, 407, 412, 998], "set_config": 903, "set_output": [253, 324, 326, 378], "set_param": 378, "sever": [230, 234], "sgd": [221, 222, 223, 224, 225, 998, 1016], "sgdclassifi": 677, "sgdoneclasssvm": 678, "sgdregressor": 679, "shape": 237, "share": [43, 52, 187], "shift": [96, 408], "should": 388, "show": [159, 279], "show_vers": 904, "shrinkag": [109, 410, 415, 996], "shrunk": 410, "shrunk_covari": 481, "shrunkcovari": 476, "shrunken": 1005, "shuffl": [412, 975], "shufflesplit": 818, "sigmoid": [344, 406, 1000], "sigmoid_kernel": 778, "signal": [198, 413], "signific": 276, "silhouett": [93, 408], "silhouette_sampl": 793, "silhouette_scor": 794, "similar": [178, 1000, 1002], "simpl": [132, 170, 246, 295, 382], "simpleimput": [327, 631], "simul": 185, "sine": [179, 261, 418], "singl": [137, 154, 230, 240, 372, 408, 992], "single_source_shortest_path_length": 955, "singular": [55, 413], "sinusoid": 194, "size": 415, "sketch": 994, "skew": 994, "skewedchi2sampl": 643, "sklearn": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "sklearn_assume_finit": 364, "sklearn_build_enable_debug_symbol": 364, "sklearn_enable_debug_cython_direct": 364, "sklearn_pairwise_dist_chunk_s": 364, "sklearn_run_float32_test": 364, "sklearn_se": 364, "sklearn_skip_network_test": 364, "sklearn_tests_global_random_se": 364, "sklearn_warnings_as_error": 364, "sklearn_working_memori": 364, "skop": 402, "slep": 391, "smacof": 695, "small": 381, "sne": [237, 999], "so": 388, "social": 1025, "soft": 415, "solido": 1026, "solut": 90, "solver": [219, 413, 998], "some": 343, "someth": 381, "sometim": 388, "sort_graph_by_row_valu": 860, "sourc": [102, 121, 374], "space": [51, 125, 409, 991, 999], "spars": [41, 113, 120, 129, 186, 198, 199, 227, 319, 326, 351, 352, 385, 410, 413, 417, 1012, 1014, 1016, 1050], "sparse_encod": 549, "sparsecod": 543, "sparsefunc": 1042, "sparsepca": [413, 544], "sparserandomproject": 898, "sparsiti": [204, 416], "spawn": 364, "speci": [50, 303, 371], "special": 353, "specif": [279, 374, 378, 991, 1021, 1022], "specifi": [151, 388, 991], "spectral": [57, 58, 59, 99, 232, 405, 408, 999], "spectral_clust": 462, "spectral_embed": 696, "spectralbiclust": [58, 451], "spectralclust": 452, "spectralcoclust": 453, "spectralembed": 692, "speed": [49, 382], "sphere": 234, "sphinx": 376, "spline": [43, 213, 322, 1012], "splinetransform": 884, "split": [143, 321, 359, 412], "splitter": [29, 359], "sponsor": 0, "spotifi": 1026, "sprint": 0, "squar": [116, 146, 179, 208, 209, 210, 216, 418, 994, 998, 1000, 1002], "stabil": 320, "stabl": 322, "stack": [154, 319, 415], "stackingclassifi": 568, "stackingregressor": 569, "stall": 376, "standard": [384, 1012], "standardscal": [310, 885], "start": 389, "statement": 1022, "statist": [270, 1021], "statlog": 264, "statu": 399, "std": [159, 193], "step": [43, 251, 380, 389, 409], "stochast": [220, 226, 232, 306, 998, 999, 1007, 1016], "stock": 51, "stop": [144, 149, 220, 416, 1016], "strategi": [86, 268, 287, 306, 313, 325, 327, 365, 408, 1002], "stratif": 412, "stratifi": 412, "stratifiedgroupkfold": [412, 819], "stratifiedkfold": 820, "stratifiedshufflesplit": 821, "stream": 365, "string": 388, "strip": 351, "strong": 196, "strongli": 1010, "structur": [51, 74, 81, 100, 178, 331, 358], "studi": 249, "submit": 376, "subpackag": 1022, "subsampl": 415, "subscript": 327, "subtleti": 359, "success": [281, 282, 321, 991], "sum": 625, "summar": 402, "summari": [62, 144, 202, 352, 353, 402, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040], "supervis": [183, 328, 329, 333, 334, 1006, 1015, 1024], "support": [0, 62, 143, 149, 183, 207, 316, 319, 320, 321, 322, 324, 325, 326, 335, 338, 346, 388, 394, 399, 404, 406, 415, 1017, 1018, 1025, 1050, 1051], "surfac": [142, 244, 356], "svc": [252, 344, 347, 910, 1017], "svd": [55, 120, 413], "svm": [39, 45, 161, 164, 165, 191, 226, 244, 322, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 348, 349, 998, 1008, 1016, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1051], "svmlight": 370, "svr": [245, 346, 911, 1017], "swiss": 236, "switch": 364, "symmetr": 115, "synthet": [61, 107, 193, 198, 267, 317, 381], "system": 374, "t": [232, 237, 999], "tabl": 388, "tag": [374, 376, 378, 924], "take": 270, "takeawai": 212, "talk": 1020, "tangent": 999, "target": [41, 107, 177, 230, 316, 317, 357, 388, 390, 409, 1003, 1012, 1013], "targetencod": [325, 886], "targettag": 925, "task": [25, 207, 357, 998, 1021], "team": [0, 375], "technic": 391, "techniqu": 233, "templat": 378, "tensor": 994, "term": [352, 390, 416], "test": [44, 109, 163, 273, 276, 283, 351, 355, 374, 376, 378, 384, 385, 412], "text": [17, 47, 183, 241, 271, 333, 350, 351, 352, 353, 371, 416], "tf": 416, "tfidftransform": 591, "tfidfvector": [352, 353, 592], "than": 388, "theil": [229, 998], "theilsenregressor": 680, "them": [123, 375], "theoret": 243, "thi": [216, 1022], "third": [212, 246, 394], "thread": 364, "threshold": [264, 284, 327, 332, 407], "throughput": [49, 363], "tie": 348, "time": [43, 52, 140, 207, 244, 245, 351, 412, 1023], "timeseriessplit": 822, "tip": [363, 377, 384, 991, 999, 1006, 1016, 1017, 1018], "togeth": [250, 279], "toi": [79, 95, 239, 373], "toler": 168, "tomographi": 53, "too": 364, "tool": [385, 388, 404], "top": [352, 1002], "top_k_accuracy_scor": 795, "topic": 54, "total": [152, 355, 415], "tough": 375, "track": [384, 409], "tracker": [376, 1025], "trade": 998, "tradeoff": [267, 1002], "train": [134, 135, 144, 147, 150, 157, 167, 216, 240, 245, 249, 250, 252, 260, 283, 287, 308, 316, 317, 321, 332, 340, 344, 351, 355, 356, 358, 402, 412, 1005, 1015], "train_test_split": 831, "transform": [102, 103, 104, 107, 115, 139, 152, 251, 321, 322, 323, 368, 388, 389, 409, 1005, 1012, 1013, 1014], "transformedtargetregressor": 465, "transformermixin": 432, "transformertag": 926, "translat": 1021, "tree": [40, 134, 135, 139, 141, 142, 149, 152, 183, 188, 212, 319, 324, 325, 326, 354, 355, 356, 357, 358, 388, 415, 417, 1005, 1010, 1018, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "triag": 375, "trick": [363, 382, 384, 416], "trigonometr": 43, "troubleshoot": 394, "true": [193, 194], "truncat": 413, "truncatedsvd": 545, "trust": 159, "trustworthi": 697, "truth": [72, 193], "tsne": [290, 693], "tune": [29, 146, 264, 268, 271, 284, 321, 327, 407, 991], "tunedthresholdclassifiercv": [327, 823], "tutori": [158, 183, 1020], "tweedi": [230, 1002], "tweedieregressor": [230, 681], "two": [99, 136, 199, 250, 270], "type": [103, 255, 377, 378, 388, 390, 404, 408], "type_of_target": 964, "typic": 375, "t\u00e9l\u00e9com": 1026, "u": 0, "ubuntu": 394, "uci": 287, "unbalanc": [342, 1017], "uncertain": 329, "uncertainti": 52, "unclaim": 376, "undefinedmetricwarn": 579, "under": [178, 388, 1028, 1049], "underfit": 285, "understand": 358, "unfold": 384, "uniform": [310, 1012], "unique_label": 965, "univari": [87, 115, 164, 343, 417, 992], "univers": 378, "unlabel": 1015, "unless": 381, "unstructur": 100, "unsupervis": [1005, 1007, 1019, 1027], "unweight": 399, "up": 1008, "updat": [380, 1043], "us": [44, 45, 51, 55, 120, 121, 123, 151, 152, 154, 168, 175, 215, 226, 228, 270, 274, 279, 289, 311, 346, 351, 352, 358, 359, 365, 377, 381, 382, 384, 388, 412, 413, 416, 417, 996, 998, 999, 1002, 1006, 1016, 1017, 1018, 1026, 1043], "usabl": 388, "usag": [382, 388, 399, 404, 406, 409, 415, 416, 998], "user": [1025, 1028], "util": [41, 369, 381, 385, 1030, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "v": [87, 100, 109, 110, 112, 116, 125, 167, 187, 188, 196, 205, 230, 273, 279, 285, 355, 408, 415, 992], "v_measure_scor": 796, "valgrind": [382, 384], "valid": [29, 41, 43, 159, 167, 202, 243, 264, 265, 266, 268, 269, 273, 275, 280, 343, 359, 363, 378, 385, 407, 412, 991, 997, 998], "validate_data": 990, "validation_curv": 832, "validationcurvedisplai": [325, 824], "valu": [149, 168, 180, 181, 182, 183, 237, 246, 319, 325, 326, 358, 376, 404, 413, 415, 992, 1002, 1010, 1012, 1018], "vanilla": [264, 284], "vari": [72, 305, 332, 408], "variabl": [25, 115, 185, 186, 364, 388], "varianc": [137, 210, 417, 1002, 1012], "variancethreshold": 604, "variant": 181, "variat": [255, 1001], "variou": [49, 85, 219, 237, 388], "vector": [55, 62, 86, 183, 335, 338, 346, 351, 353, 416, 1017], "version": [323, 370, 374, 376, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052], "versu": [137, 226, 275, 334, 363], "via": [44, 52, 86, 200, 202, 230, 415, 994], "video": [376, 1020], "visual": [5, 29, 51, 91, 130, 144, 240, 245, 252, 265, 307, 320, 340, 408, 409, 1002, 1030], "vote": [157, 415], "votingclassifi": [155, 156, 570], "votingregressor": 571, "wage": [185, 186], "wai": [187, 376, 388], "ward": [81, 100, 408], "ward_tre": 463, "warm": 382, "warm_start": 1006, "warn": 385, "we": 100, "weak": [134, 415], "websit": [380, 1043], "weight": [41, 134, 193, 195, 225, 307, 320, 349, 399, 415, 416], "weighted_mod": 951, "what": [358, 388], "when": 264, "which": 998, "whitekernel": 626, "who": 1026, "why": [388, 415], "wikipedia": 55, "wild": 371, "window": [374, 394], "wine": 373, "winpython": 394, "wisconsin": 373, "within": 104, "without": [74, 298, 351], "wolf": [69, 110, 410], "word": [351, 416], "work": [41, 183, 350, 363, 375, 388], "workflow": [375, 402], "world": [42, 107, 183, 371], "wrap": 289, "written": 68, "wrong": [186, 388], "x": 229, "x86_64": 384, "xor": [174, 344, 418], "y": [229, 388, 1013, 1015], "yeast": 287, "yep": 382, "yhat": 1026, "you": [159, 388], "your": [378, 381, 1002], "zero": 1002, "zero_one_loss": 797, "zopa": 1026}})